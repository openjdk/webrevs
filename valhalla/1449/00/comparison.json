{"files":[{"patch":"@@ -262,1 +262,0 @@\n-        ResourceMark rm(THREAD);\n@@ -268,0 +267,1 @@\n+        return nullptr;\n@@ -280,0 +280,1 @@\n+      return nullptr;\n@@ -287,0 +288,1 @@\n+      return nullptr;\n@@ -294,0 +296,1 @@\n+      return nullptr;\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class BadChild extends Parent version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field x:I;\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field y:I;\n+\n+  Method       \"<init>\":\"()V\"\n+    stack 4  locals 1\n+  {\n+         aload_0;\n+         aload_0;\n+         iconst_1;\n+         dup_x1;\n+         putfield          Field y:\"I\";\n+         aload_0;\n+         invokespecial     Method Parent.\"<init>\":\"()V\";\n+         putfield          Field x:\"I\";\n+         return;\n+  }\n+\n+  Method       get_x:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field x:\"I\";\n+         ireturn;\n+  }\n+\n+  Method       get_y:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field y:\"I\";\n+         ireturn;\n+  }\n+\n+  public Method toString:\"()Ljava\/lang\/String;\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokevirtual     Method get_x:\"()I\";\n+         aload_0;\n+         invokevirtual     Method get_y:\"()I\";\n+         aload_0;\n+         invokespecial     Method Parent.toString:\"()Ljava\/lang\/String;\";\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(IILjava\/lang\/String;)Ljava\/lang\/String;\" {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           };\n+         areturn;\n+  }\n+\n+  SourceFile               \"StrictInstanceFieldsTest.java\";\n+\n+  InnerClass               public static final identity Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           }\n+} \/\/ end Class BadChild compiled from \"StrictInstanceFieldsTest.java\"\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/BadChild.jasm","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class BadChild1 extends Parent version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field x:I;\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field y:I;\n+\n+  Method       \"<init>\":\"()V\"\n+    stack 4  locals 1\n+  {\n+         aload_0;\n+         aload_0;\n+         iconst_1;\n+         dup_x1;\n+         putfield          Field x:\"I\";\n+         aload_0;\n+         invokespecial     Method Parent.\"<init>\":\"()V\";\n+         putfield          Field y:\"I\";\n+         return;\n+  }\n+\n+  Method       get_x:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field x:\"I\";\n+         ireturn;\n+  }\n+\n+  Method       get_y:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field y:\"I\";\n+         ireturn;\n+  }\n+\n+  public Method toString:\"()Ljava\/lang\/String;\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokevirtual     Method get_x:\"()I\";\n+         aload_0;\n+         invokevirtual     Method get_y:\"()I\";\n+         aload_0;\n+         invokespecial     Method Parent.toString:\"()Ljava\/lang\/String;\";\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(IILjava\/lang\/String;)Ljava\/lang\/String;\" {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           };\n+         areturn;\n+  }\n+\n+  SourceFile               \"StrictInstanceFieldsTest.java\";\n+\n+  InnerClass               public static final identity Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           }\n+} \/\/ end Class BadChild1 compiled from \"StrictInstanceFieldsTest.java\"\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/BadChild1.jasm","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class ControlFlowChildBad extends Parent version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field x:I;\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field y:I;\n+\n+  Method       \"<init>\":\"(ZZ)V\"\n+    stack 4  locals 3\n+  {\n+         iload_1;\n+         ifeq              L29;\n+         aload_0;\n+         iconst_1;\n+         putfield          Field y:\"I\";\n+         iload_2;\n+         ifeq              L21;\n+         aload_0;\n+         iconst_1;\n+         putfield          Field y:\"I\";\n+         goto              L39;\n+  L21:   stack_frame_type  early_larval;\n+           unset_fields    y:\"I\";\n+           frame_type      same;\n+         aload_0;\n+         iconst_2;\n+         putfield          Field y:\"I\";\n+         goto              L39;\n+  L29:   stack_frame_type  early_larval;\n+           unset_fields    x:\"I\",\n+                           y:\"I\";\n+           frame_type      same;\n+         aload_0;\n+         aload_0;\n+         iconst_3;\n+         dup_x1;\n+         putfield          Field y:\"I\";\n+         putfield          Field x:\"I\";\n+  L39:   stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      same;\n+         aload_0;\n+         invokespecial     Method Parent.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       get_x:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field x:\"I\";\n+         ireturn;\n+  }\n+\n+  Method       get_y:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field y:\"I\";\n+         ireturn;\n+  }\n+\n+  public Method toString:\"()Ljava\/lang\/String;\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokevirtual     Method get_x:\"()I\";\n+         aload_0;\n+         invokevirtual     Method get_y:\"()I\";\n+         aload_0;\n+         invokespecial     Method Parent.toString:\"()Ljava\/lang\/String;\";\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(IILjava\/lang\/String;)Ljava\/lang\/String;\" {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           };\n+         areturn;\n+  }\n+\n+  SourceFile               \"StrictInstanceFieldsTest.java\";\n+\n+  InnerClass               public static final identity Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           }\n+} \/\/ end Class ControlFlowChildBad compiled from \"StrictInstanceFieldsTest.java\"\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/ControlFlowChildBad.jasm","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class EndsInEarlyLarval {\n+  0xCAFEBABE;\n+  65535;                                   \/\/ minor version\n+  69;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #2 #3;                           \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"EndsInEarlyLarval\";               \/\/ #4\n+    Utf8 \"x\";                              \/\/ #5\n+    Utf8 \"I\";                              \/\/ #6\n+    Field #2 #8;                           \/\/ #7\n+    NameAndType #9 #6;                     \/\/ #8\n+    Utf8 \"y\";                              \/\/ #9\n+    Method #11 #12;                        \/\/ #10\n+    Class #13;                             \/\/ #11\n+    NameAndType #14 #15;                   \/\/ #12\n+    Utf8 \"Parent\";                         \/\/ #13\n+    Utf8 \"<init>\";                         \/\/ #14\n+    Utf8 \"()V\";                            \/\/ #15\n+    Method #2 #17;                         \/\/ #16\n+    NameAndType #18 #19;                   \/\/ #17\n+    Utf8 \"get_x\";                          \/\/ #18\n+    Utf8 \"()I\";                            \/\/ #19\n+    Method #2 #21;                         \/\/ #20\n+    NameAndType #22 #19;                   \/\/ #21\n+    Utf8 \"get_y\";                          \/\/ #22\n+    Method #11 #24;                        \/\/ #23\n+    NameAndType #25 #26;                   \/\/ #24\n+    Utf8 \"toString\";                       \/\/ #25\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(IILjava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Utf8 \"RuntimeInvisibleAnnotations\";    \/\/ #31\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/Strict;\";  \/\/ #32\n+    Utf8 \"(ZZ)V\";                          \/\/ #33\n+    Utf8 \"Code\";                           \/\/ #34\n+    Utf8 \"LineNumberTable\";                \/\/ #35\n+    Utf8 \"StackMapTable\";                  \/\/ #36\n+    Utf8 \"SourceFile\";                     \/\/ #37\n+    Utf8 \"StrictInstanceFieldsTest.java\";  \/\/ #38\n+    Utf8 \"BootstrapMethods\";               \/\/ #39\n+    String #41;                            \/\/ #40\n+    Utf8 \"x: \\u0001\\ny: \\u0001\\n\\u0001\";   \/\/ #41\n+    MethodHandle 6b #43;                   \/\/ #42\n+    Method #44 #45;                        \/\/ #43\n+    Class #46;                             \/\/ #44\n+    NameAndType #29 #47;                   \/\/ #45\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #46\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #47\n+    Utf8 \"InnerClasses\";                   \/\/ #48\n+    Class #50;                             \/\/ #49\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #50\n+    Class #52;                             \/\/ #51\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #52\n+    Utf8 \"Lookup\";                         \/\/ #53\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #11;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #14;                                 \/\/ name_index\n+      #33;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          4;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[]{\n+            0x1B 0x99 0x00 0x1C 0x2A 0x04 0xB5 0x00 0x01 0x1C 0x99 0x00;\n+            0x0B 0x2A 0x04 0xB5 0x00 0x07 0xA7 0x00 0x15 0x2A 0x05 0xB5;\n+            0x00 0x07 0xA7 0x00 0x0D 0x2A 0x2A 0x06 0x5A 0xB5 0x00 0x07;\n+            0xB5 0x00 0x01 0x2A 0xB7 0x00 0x0A 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  121;\n+                   4  122;\n+                   9  123;\n+                  13  124;\n+                  21  126;\n+                  29  129;\n+                  39  131;\n+                  43  132;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#36) {                    \/\/ StackMapTable\n+              [] {                         \/\/\n+                246b, []{#8}, {            \/\/ early_larval_frame\n+                  21b;                     \/\/ same\n+                };\n+                246b, []{#3; #8}, {        \/\/ early_larval_frame\n+                  7b;                      \/\/ same_frame\n+                };\n+                246b, []{}, {              \/\/ early_larval_frame, no base frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #18;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x01 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  134;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #22;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x07 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  135;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #25;                                 \/\/ name_index\n+      #26;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB6 0x00 0x10 0x2A 0xB6 0x00 0x14 0x2A 0xB7 0x00 0x17;\n+            0xBA 0x00 0x1B 0x00 0x00 0xB0;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  139;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#37) {                            \/\/ SourceFile\n+      #38;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#39) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #42;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #40;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#48) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #49   #51   #53  57;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/EndsInEarlyLarval.jcod","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -0,0 +1,273 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class NestedEarlyLarval {\n+  0xCAFEBABE;\n+  65535;                                   \/\/ minor version\n+  69;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #2 #3;                           \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"NestedEarlyLarval\";               \/\/ #4\n+    Utf8 \"x\";                              \/\/ #5\n+    Utf8 \"I\";                              \/\/ #6\n+    Field #2 #8;                           \/\/ #7\n+    NameAndType #9 #6;                     \/\/ #8\n+    Utf8 \"y\";                              \/\/ #9\n+    Method #11 #12;                        \/\/ #10\n+    Class #13;                             \/\/ #11\n+    NameAndType #14 #15;                   \/\/ #12\n+    Utf8 \"Parent\";                         \/\/ #13\n+    Utf8 \"<init>\";                         \/\/ #14\n+    Utf8 \"()V\";                            \/\/ #15\n+    Method #2 #17;                         \/\/ #16\n+    NameAndType #18 #19;                   \/\/ #17\n+    Utf8 \"get_x\";                          \/\/ #18\n+    Utf8 \"()I\";                            \/\/ #19\n+    Method #2 #21;                         \/\/ #20\n+    NameAndType #22 #19;                   \/\/ #21\n+    Utf8 \"get_y\";                          \/\/ #22\n+    Method #11 #24;                        \/\/ #23\n+    NameAndType #25 #26;                   \/\/ #24\n+    Utf8 \"toString\";                       \/\/ #25\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(IILjava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Utf8 \"RuntimeInvisibleAnnotations\";    \/\/ #31\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/Strict;\";  \/\/ #32\n+    Utf8 \"(ZZ)V\";                          \/\/ #33\n+    Utf8 \"Code\";                           \/\/ #34\n+    Utf8 \"LineNumberTable\";                \/\/ #35\n+    Utf8 \"StackMapTable\";                  \/\/ #36\n+    Utf8 \"SourceFile\";                     \/\/ #37\n+    Utf8 \"StrictInstanceFieldsTest.java\";  \/\/ #38\n+    Utf8 \"BootstrapMethods\";               \/\/ #39\n+    String #41;                            \/\/ #40\n+    Utf8 \"x: \\u0001\\ny: \\u0001\\n\\u0001\";   \/\/ #41\n+    MethodHandle 6b #43;                   \/\/ #42\n+    Method #44 #45;                        \/\/ #43\n+    Class #46;                             \/\/ #44\n+    NameAndType #29 #47;                   \/\/ #45\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #46\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #47\n+    Utf8 \"InnerClasses\";                   \/\/ #48\n+    Class #50;                             \/\/ #49\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #50\n+    Class #52;                             \/\/ #51\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #52\n+    Utf8 \"Lookup\";                         \/\/ #53\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #11;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #14;                                 \/\/ name_index\n+      #33;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          4;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[]{\n+            0x1B 0x99 0x00 0x1C 0x2A 0x04 0xB5 0x00 0x01 0x1C 0x99 0x00;\n+            0x0B 0x2A 0x04 0xB5 0x00 0x07 0xA7 0x00 0x15 0x2A 0x05 0xB5;\n+            0x00 0x07 0xA7 0x00 0x0D 0x2A 0x2A 0x06 0x5A 0xB5 0x00 0x07;\n+            0xB5 0x00 0x01 0x2A 0xB7 0x00 0x0A 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  121;\n+                   4  122;\n+                   9  123;\n+                  13  124;\n+                  21  126;\n+                  29  129;\n+                  39  131;\n+                  43  132;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#36) {                    \/\/ StackMapTable\n+              [] {                         \/\/\n+                246b, []{#8}, {            \/\/ early_larval_frame\n+                  246b;                    \/\/ early_larval_frame, illegal\n+                };\n+                246b, []{#3; #8}, {        \/\/ early_larval_frame\n+                  7b;                      \/\/ same_frame\n+                };\n+                246b, []{}, {              \/\/ early_larval_frame\n+                  9b;                      \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #18;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x01 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  134;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #22;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x07 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  135;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #25;                                 \/\/ name_index\n+      #26;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB6 0x00 0x10 0x2A 0xB6 0x00 0x14 0x2A 0xB7 0x00 0x17;\n+            0xBA 0x00 0x1B 0x00 0x00 0xB0;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  139;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#37) {                            \/\/ SourceFile\n+      #38;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#39) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #42;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #40;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#48) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #49   #51   #53  57;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/NestedEarlyLarval.jcod","additions":273,"deletions":0,"binary":false,"changes":273,"status":"added"},{"patch":"@@ -0,0 +1,273 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class StrictFieldsNotSubset {\n+  0xCAFEBABE;\n+  65535;                                   \/\/ minor version\n+  69;                                      \/\/ version\n+  [] {                                     \/\/ Constant Pool\n+    ;                                      \/\/ first element is empty\n+    Field #2 #3;                           \/\/ #1\n+    Class #4;                              \/\/ #2\n+    NameAndType #5 #6;                     \/\/ #3\n+    Utf8 \"StrictFieldsNotSubset\";          \/\/ #4\n+    Utf8 \"x\";                              \/\/ #5\n+    Utf8 \"I\";                              \/\/ #6\n+    Field #2 #8;                           \/\/ #7\n+    NameAndType #9 #6;                     \/\/ #8\n+    Utf8 \"y\";                              \/\/ #9\n+    Method #11 #12;                        \/\/ #10\n+    Class #13;                             \/\/ #11\n+    NameAndType #14 #15;                   \/\/ #12\n+    Utf8 \"Parent\";                         \/\/ #13\n+    Utf8 \"<init>\";                         \/\/ #14\n+    Utf8 \"()V\";                            \/\/ #15\n+    Method #2 #17;                         \/\/ #16\n+    NameAndType #18 #19;                   \/\/ #17\n+    Utf8 \"get_x\";                          \/\/ #18\n+    Utf8 \"()I\";                            \/\/ #19\n+    Method #2 #21;                         \/\/ #20\n+    NameAndType #22 #19;                   \/\/ #21\n+    Utf8 \"get_y\";                          \/\/ #22\n+    Method #11 #24;                        \/\/ #23\n+    NameAndType #25 #26;                   \/\/ #24\n+    Utf8 \"toString\";                       \/\/ #25\n+    Utf8 \"()Ljava\/lang\/String;\";           \/\/ #26\n+    InvokeDynamic 0s #28;                  \/\/ #27\n+    NameAndType #29 #30;                   \/\/ #28\n+    Utf8 \"makeConcatWithConstants\";        \/\/ #29\n+    Utf8 \"(IILjava\/lang\/String;)Ljava\/lang\/String;\";  \/\/ #30\n+    Utf8 \"RuntimeInvisibleAnnotations\";    \/\/ #31\n+    Utf8 \"Ljdk\/internal\/vm\/annotation\/Strict;\";  \/\/ #32\n+    Utf8 \"(ZZ)V\";                          \/\/ #33\n+    Utf8 \"Code\";                           \/\/ #34\n+    Utf8 \"LineNumberTable\";                \/\/ #35\n+    Utf8 \"StackMapTable\";                  \/\/ #36\n+    Utf8 \"SourceFile\";                     \/\/ #37\n+    Utf8 \"StrictInstanceFieldsTest.java\";  \/\/ #38\n+    Utf8 \"BootstrapMethods\";               \/\/ #39\n+    String #41;                            \/\/ #40\n+    Utf8 \"x: \\u0001\\ny: \\u0001\\n\\u0001\";   \/\/ #41\n+    MethodHandle 6b #43;                   \/\/ #42\n+    Method #44 #45;                        \/\/ #43\n+    Class #46;                             \/\/ #44\n+    NameAndType #29 #47;                   \/\/ #45\n+    Utf8 \"java\/lang\/invoke\/StringConcatFactory\";  \/\/ #46\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";  \/\/ #47\n+    Utf8 \"InnerClasses\";                   \/\/ #48\n+    Class #50;                             \/\/ #49\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\";  \/\/ #50\n+    Class #52;                             \/\/ #51\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\";  \/\/ #52\n+    Utf8 \"Lookup\";                         \/\/ #53\n+  }\n+\n+  0x0020;                                  \/\/ access\n+  #2;                                      \/\/ this_cpx\n+  #11;                                     \/\/ super_cpx\n+\n+  [] {                                     \/\/ Interfaces\n+  }                                        \/\/ end of Interfaces\n+\n+  [] {                                     \/\/ Fields\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #5;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ field\n+      0x0800;                              \/\/ access\n+      #9;                                  \/\/ name_index\n+      #6;                                  \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#31) {                        \/\/ RuntimeInvisibleAnnotations\n+          [] {                             \/\/ annotations\n+            {                              \/\/ annotation\n+              #32;\n+              [] {                         \/\/ element_value_pairs\n+              }                            \/\/ element_value_pairs\n+            }                              \/\/ annotation\n+          }\n+        }                                  \/\/ end of RuntimeInvisibleAnnotations\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Fields\n+\n+  [] {                                     \/\/ Methods\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #14;                                 \/\/ name_index\n+      #33;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          4;                               \/\/ max_stack\n+          3;                               \/\/ max_locals\n+          Bytes[]{\n+            0x1B 0x99 0x00 0x1C 0x2A 0x04 0xB5 0x00 0x01 0x1C 0x99 0x00;\n+            0x0B 0x2A 0x04 0xB5 0x00 0x07 0xA7 0x00 0x15 0x2A 0x05 0xB5;\n+            0x00 0x07 0xA7 0x00 0x0D 0x2A 0x2A 0x06 0x5A 0xB5 0x00 0x07;\n+            0xB5 0x00 0x01 0x2A 0xB7 0x00 0x0A 0xB1;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  121;\n+                   4  122;\n+                   9  123;\n+                  13  124;\n+                  21  126;\n+                  29  129;\n+                  39  131;\n+                  43  132;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+            ;\n+            Attr(#36) {                    \/\/ StackMapTable\n+              [] {                         \/\/\n+                246b, []{#8; #12}, {            \/\/ early_larval_frame\n+                  21b;                     \/\/ same\n+                };\n+                246b, []{#3; #8}, {        \/\/ early_larval_frame\n+                  7b;                      \/\/ same_frame\n+                };\n+                246b, []{}, {              \/\/ early_larval_frame\n+                  9b;                      \/\/ same_frame\n+                };\n+              }\n+            }                              \/\/ end of StackMapTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #18;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x01 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  134;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0000;                              \/\/ access\n+      #22;                                 \/\/ name_index\n+      #19;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          1;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB4 0x00 0x07 0xAC;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  135;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+    ;\n+    {                                      \/\/ method\n+      0x0001;                              \/\/ access\n+      #25;                                 \/\/ name_index\n+      #26;                                 \/\/ descriptor_index\n+      [] {                                 \/\/ Attributes\n+        Attr(#34) {                        \/\/ Code\n+          3;                               \/\/ max_stack\n+          1;                               \/\/ max_locals\n+          Bytes[]{\n+            0x2A 0xB6 0x00 0x10 0x2A 0xB6 0x00 0x14 0x2A 0xB7 0x00 0x17;\n+            0xBA 0x00 0x1B 0x00 0x00 0xB0;\n+          }\n+          [] {                             \/\/ Traps\n+          }                                \/\/ end of Traps\n+          [] {                             \/\/ Attributes\n+            Attr(#35) {                    \/\/ LineNumberTable\n+              [] {                         \/\/ line_number_table\n+                   0  139;\n+              }\n+            }                              \/\/ end of LineNumberTable\n+          }                                \/\/ end of Attributes\n+        }                                  \/\/ end of Code\n+      }                                    \/\/ end of Attributes\n+    }\n+  }                                        \/\/ end of Methods\n+\n+  [] {                                     \/\/ Attributes\n+    Attr(#37) {                            \/\/ SourceFile\n+      #38;\n+    }                                      \/\/ end of SourceFile\n+    ;\n+    Attr(#39) {                            \/\/ BootstrapMethods\n+      [] {                                 \/\/ bootstrap_methods\n+        {                                  \/\/ bootstrap_method\n+          #42;                             \/\/ bootstrap_method_ref\n+          [] {                             \/\/ bootstrap_arguments\n+            #40;\n+          }                                \/\/ bootstrap_arguments\n+        }                                  \/\/ bootstrap_method\n+      }\n+    }                                      \/\/ end of BootstrapMethods\n+    ;\n+    Attr(#48) {                            \/\/ InnerClasses\n+      [] {                                 \/\/ classes\n+          #49   #51   #53  57;\n+      }\n+    }                                      \/\/ end of InnerClasses\n+  }                                        \/\/ end of Attributes\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFieldsNotSubset.jcod","additions":273,"deletions":0,"binary":false,"changes":273,"status":"added"},{"patch":"@@ -1,261 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @enablePreview\n- * @compile --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XDgenerateEarlyLarvalFrame -XDnoLocalProxyVars StrictFinalInstanceFieldsTest.java\n- * @run main\/othervm -Xlog:verification StrictFinalInstanceFieldsTest\n- *\/\n-\n-import jdk.internal.vm.annotation.Strict;\n-\n-public class StrictFinalInstanceFieldsTest {\n-    public static void main(String[] args) {\n-        \/\/ Base case\n-        Child c = new Child();\n-        System.out.println(c);\n-\n-        \/\/ Field not initialized before super call\n-        \/*\n-        \/\/ javac is flagging the error at compile time\n-        try {\n-            BadChild0 bc0 = new BadChild0();\n-            System.out.println(bc0);\n-            throw new RuntimeException(\"Should fail verification\");\n-        } catch (java.lang.VerifyError e) {\n-            if (!e.getMessage().contains(\"All strict final fields must be initialized before super()\")) {\n-                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n-            }\n-            e.printStackTrace();\n-        }\n-\n-        \/\/ Field not initialized before super call\n-        try {\n-            BadChild1 bc1 = new BadChild1();\n-            System.out.println(bc1);\n-            throw new RuntimeException(\"Should fail verification\");\n-        } catch (java.lang.VerifyError e) {\n-            if (!e.getMessage().contains(\"All strict final fields must be initialized before super()\")) {\n-                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n-            }\n-            e.printStackTrace();\n-        }\n-        *\/\n-\n-        \/\/ Test constructor with control flow. Should pass\n-        Child1 c1 = new Child1(true, false);\n-        System.out.println(c1);\n-\n-        \/\/ Test constructor with control flow and nested constructor calls. Should pass\n-        Child1 c1_2 = new Child1();\n-        System.out.println(c1_2);\n-\n-        \/\/ Test assignment in conditional. Should pass\n-        Child2 c2 = new Child2();\n-        System.out.println(c2);\n-\n-        \/\/ Test constructor with control flow in switch case. Should pass\n-        Child3 c3 = new Child3(2);\n-        System.out.println(c3);\n-\n-        System.out.println(\"Passed\");\n-    }\n-}\n-\n-class Parent {\n-    int z;\n-\n-    Parent() {\n-        z = 0;\n-    }\n-\n-    int get_z() { return z; }\n-\n-    @Override\n-    public String toString() {\n-        return \"z: \" + get_z();\n-    }\n-}\n-\n-class Child extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    Child() {\n-        x = y = 1;\n-        super();\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n-\n-class BadChild0 extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    \/\/ Should fail with \"All strict final fields must be initialized before super()\"\n-    BadChild0() {\n-        x = 1;\n-        y = 1;\n-        super();\n-        \/\/ was y = 1;\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n-\n-class BadChild1 extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    \/\/ Should fail with \"All strict final fields must be initialized before super()\"\n-    BadChild1() {\n-        y = 1;\n-        x = 1;\n-        super();\n-        \/\/ was x = 1;\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n-\n-class Child1 extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    Child1(boolean a, boolean b) {\n-        if (a) {\n-            x = 1;\n-            if (b) {\n-                y = 1;\n-            } else {\n-                y = 2;\n-            }\n-        } else {\n-            x = y = 3;\n-        }\n-        super();\n-    }\n-\n-    Child1() {\n-        this(true, true);\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n-\n-class Child2 extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    Child2() {\n-        if ((x=1) == 1) {\n-            y = 1;\n-        } else {\n-            y = 2;\n-        }\n-        super();\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n-\n-class Child3 extends Parent {\n-\n-    @Strict\n-    final int x;\n-    @Strict\n-    final int y;\n-\n-    Child3(int n) {\n-        switch(n) {\n-            case 0:\n-                x = y = 0;\n-                break;\n-            case 1:\n-                x = y = 1;\n-                break;\n-            case 2:\n-                x = y = 2;\n-                break;\n-            default:\n-                x = y = 100;\n-                break;\n-        }\n-        super();\n-    }\n-\n-    int get_x() { return x; }\n-    int get_y() { return y; }\n-\n-    @Override\n-    public String toString() {\n-        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictFinalInstanceFieldsTest.java","additions":0,"deletions":261,"binary":false,"changes":261,"status":"deleted"},{"patch":"@@ -0,0 +1,374 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @compile BadChild.jasm\n+ *          BadChild1.jasm\n+ *          ControlFlowChildBad.jasm\n+ *          TryCatchChildBad.jasm\n+ *          NestedEarlyLarval.jcod\n+ *          EndsInEarlyLarval.jcod\n+ *          StrictFieldsNotSubset.jcod\n+ * @compile --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED -XDgenerateEarlyLarvalFrame -XDnoLocalProxyVars StrictInstanceFieldsTest.java\n+ * @run main\/othervm -Xlog:verification StrictInstanceFieldsTest\n+ *\/\n+\n+import jdk.internal.vm.annotation.Strict;\n+\n+public class StrictInstanceFieldsTest {\n+    public static void main(String[] args) {\n+\n+        \/\/ --------------\n+        \/\/ POSITIVE TESTS\n+        \/\/ --------------\n+\n+        \/\/ Base case\n+        Child c = new Child();\n+        System.out.println(c);\n+\n+        \/\/ Constructor with control flow\n+        ControlFlowChild c1 = new ControlFlowChild(true, true);\n+        System.out.println(c1);\n+\n+        \/\/ Constructor with try-catch-finally\n+        TryCatchChild c2 = new TryCatchChild();\n+        System.out.println(c2);\n+\n+        \/\/ Constructor with switch case\n+        SwitchCaseChild c3 = new SwitchCaseChild(2);\n+        System.out.println(c3);\n+\n+        \/\/ Constructor with strict field assignment in conditional\n+        AssignedInConditionalChild c4 = new AssignedInConditionalChild();\n+        System.out.println(c4);\n+\n+        \/\/ Constructor with nested constructor calls\n+        NestedConstructorChild c5 = new NestedConstructorChild();\n+        System.out.println(c5);\n+\n+        \/\/ Final stirct fields defined in constructor\n+        FinalChild fc = new FinalChild();\n+        System.out.println(fc);\n+\n+        \/\/ --------------\n+        \/\/ NEGATIVE TESTS\n+        \/\/ --------------\n+\n+        \/\/ Field not initialized before super call\n+        try {\n+            BadChild child = new BadChild();\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"All strict final fields must be initialized before super()\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Field not initialized before super call\n+        try {\n+            BadChild1 child = new BadChild1();\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"All strict final fields must be initialized before super()\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Constructor with control flow but field is not initialized\n+        try {\n+            ControlFlowChildBad child = new ControlFlowChildBad(true, false);\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"Inconsistent stackmap frames at branch target\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Constructor with try-catch but field is not initialized\n+        try {\n+            TryCatchChildBad child = new TryCatchChildBad();\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"Inconsistent stackmap frames at branch target\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Early_Larval frame contains another early_larval instead of a base frame\n+        try {\n+            NestedEarlyLarval child = new NestedEarlyLarval(true, false);\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"Early larval frame must be followed by a base frame\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Stack map table ends in early_larval frame without base frame\n+        try {\n+            EndsInEarlyLarval child = new EndsInEarlyLarval(true, false);\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"Early larval frame must be followed by a base frame\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        \/\/ Early_larval frame includes a strict field not preset in the original set of unset fields\n+        try {\n+            StrictFieldsNotSubset child = new StrictFieldsNotSubset(true, false);\n+            System.out.println(child);\n+            throw new RuntimeException(\"Should fail verification\");\n+        } catch (java.lang.VerifyError e) {\n+            if (!e.getMessage().contains(\"Strict fields not a subset of initial strict instance fields\")) {\n+                throw new RuntimeException(\"wrong exception: \" + e.getMessage());\n+            }\n+            e.printStackTrace();\n+        }\n+\n+        System.out.println(\"Passed\");\n+    }\n+}\n+\n+class Parent {\n+    int z;\n+\n+    Parent() {\n+        z = 0;\n+    }\n+\n+    int get_z() { return z; }\n+\n+    @Override\n+    public String toString() {\n+        return \"z: \" + get_z();\n+    }\n+}\n+\n+class Child extends Parent {\n+\n+    @Strict\n+    int x;\n+    @Strict\n+    int y;\n+\n+    Child() {\n+        x = y = 1;\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class ControlFlowChild extends Parent {\n+\n+    @Strict\n+    int x;\n+    @Strict\n+    int y;\n+\n+    ControlFlowChild(boolean a, boolean b) {\n+        if (a) {\n+            x = 1;\n+            if (b) {\n+                y = 1;\n+            } else {\n+                y = 2;\n+            }\n+        } else {\n+            x = y = 3;\n+        }\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class TryCatchChild extends Parent {\n+\n+    @Strict\n+    int x;\n+    @Strict\n+    int y;\n+\n+    TryCatchChild() {\n+        try {\n+            x = 0;\n+            int[] a = new int[1];\n+            System.out.println(a[2]);\n+        } catch (java.lang.ArrayIndexOutOfBoundsException e) {\n+            y = 0;\n+        } finally {\n+            x = y = 1;\n+        }\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class AssignedInConditionalChild extends Parent {\n+\n+    @Strict\n+    final int x;\n+    @Strict\n+    final int y;\n+\n+    AssignedInConditionalChild() {\n+        if ((x=1) == 1) {\n+            y = 1;\n+        } else {\n+            y = 2;\n+        }\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class SwitchCaseChild extends Parent {\n+\n+    @Strict\n+    final int x;\n+    @Strict\n+    final int y;\n+\n+    SwitchCaseChild(int n) {\n+        switch(n) {\n+            case 0:\n+                x = y = 0;\n+                break;\n+            case 1:\n+                x = y = 1;\n+                break;\n+            case 2:\n+                x = y = 2;\n+                break;\n+            default:\n+                x = y = 100;\n+                break;\n+        }\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class NestedConstructorChild extends Parent {\n+\n+    @Strict\n+    final int x;\n+    @Strict\n+    final int y;\n+\n+    NestedConstructorChild(boolean a, boolean b) {\n+        if (a) {\n+            x = 1;\n+            if (b) {\n+                y = 1;\n+            } else {\n+                y = 2;\n+            }\n+        } else {\n+            x = y = 3;\n+        }\n+        super();\n+    }\n+\n+    NestedConstructorChild() {\n+        this(true, true);\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n+\n+class FinalChild extends Parent {\n+\n+    @Strict\n+    final int x;\n+    @Strict\n+    final int y;\n+\n+    FinalChild() {\n+        x = y = 1;\n+        super();\n+    }\n+\n+    int get_x() { return x; }\n+    int get_y() { return y; }\n+\n+    @Override\n+    public String toString() {\n+        return \"x: \" + get_x() + \"\\n\" + \"y: \" + get_y() + \"\\n\" + super.toString();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/StrictInstanceFieldsTest.java","additions":374,"deletions":0,"binary":false,"changes":374,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+identity class TryCatchChildBad extends Parent version 69:65535\n+{\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field x:I;\n+  @-jdk\/internal\/vm\/annotation\/Strict { }\n+  strict Field y:I;\n+\n+  Method       \"<init>\":\"()V\"\n+    stack 4  locals 2\n+  {\n+         try               T0;\n+         iconst_1;\n+         newarray          int;\n+         astore_1;\n+         getstatic         Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+         aload_1;\n+         iconst_2;\n+         iaload;\n+         invokevirtual     Method java\/io\/PrintStream.println:\"(I)V\";\n+         endtry            T0;\n+         goto              L27;\n+         catch             T0 java\/lang\/ArrayIndexOutOfBoundsException;\n+         stack_frame_type  stack1;\n+           stack_map       class java\/lang\/ArrayIndexOutOfBoundsException;\n+         astore_1;\n+  L27:   stack_frame_type  early_larval;\n+           unset_fields;\n+           frame_type      same;\n+         aload_0;\n+         invokespecial     Method Parent.\"<init>\":\"()V\";\n+         return;\n+  }\n+\n+  Method       get_x:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field x:\"I\";\n+         ireturn;\n+  }\n+\n+  Method       get_y:\"()I\"\n+    stack 1  locals 1\n+  {\n+         aload_0;\n+         getfield          Field y:\"I\";\n+         ireturn;\n+  }\n+\n+  public Method toString:\"()Ljava\/lang\/String;\"\n+    stack 3  locals 1\n+  {\n+         aload_0;\n+         invokevirtual     Method get_x:\"()I\";\n+         aload_0;\n+         invokevirtual     Method get_y:\"()I\";\n+         aload_0;\n+         invokespecial     Method Parent.toString:\"()Ljava\/lang\/String;\";\n+         invokedynamic     InvokeDynamic REF_invokeStatic:Method java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\":\n+                           makeConcatWithConstants:\"(IILjava\/lang\/String;)Ljava\/lang\/String;\" {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           };\n+         areturn;\n+  }\n+\n+  SourceFile               \"TryCatchChild.java\";\n+\n+  InnerClass               public static final identity Lookup = class java\/lang\/invoke\/MethodHandles$Lookup of class java\/lang\/invoke\/MethodHandles;\n+\n+  BootstrapMethod          REF_invokeStatic:java\/lang\/invoke\/StringConcatFactory.makeConcatWithConstants:\n+                           \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/String;[Ljava\/lang\/Object;)Ljava\/lang\/invoke\/CallSite;\";\n+                           {\n+                             String \"x: \\u0001\\ny: \\u0001\\n\\u0001\"\n+                           }\n+} \/\/ end Class TryCatchChild compiled from \"TryCatchChild.java\"\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/verifier\/TryCatchChildBad.jasm","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}