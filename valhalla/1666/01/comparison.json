{"files":[{"patch":"@@ -97,3 +97,5 @@\n-\/\/ This is for parallel gc, which doesn't always have the klass.\n-\/\/ markWord::must_be_preserved preserves the original prototype header bits for EnableValhalla,\n-\/\/ I don't know why serial gc doesn't work the same.\n+\/\/ This is specifically for Parallel GC. The other collectors need klass()->prototype_header()\n+\/\/ even without using Compact Object Headers. The issue is that this operation is unsafe\n+\/\/ using Parallel, as there are multiple concurrent GC workers that could access it.\n+\/\/ In practice, this has lead to relatively frequent crashes.\n+\/\/ More work needs to be done in the future to consolidate reinit_mark with init_mark.\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary ensure larval bit is kept by Serial\n+ * @library \/test\/lib \/\n+ * @requires vm.flagless\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+            java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UseSerialGC -Xlog:gc*=info\n+                     -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+                     runtime.valhalla.inlinetypes.LarvalMarkWordTest\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary ensure larval bit is kept by Parallel\n+ * @library \/test\/lib \/\n+ * @requires vm.flagless\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+            java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UseParallelGC -Xlog:gc*=info\n+                     -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+                     runtime.valhalla.inlinetypes.LarvalMarkWordTest\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary ensure larval bit is kept by G1\n+ * @library \/test\/lib \/\n+ * @requires vm.flagless\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+            java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UseG1GC -Xlog:gc*=info\n+                     -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+                     runtime.valhalla.inlinetypes.LarvalMarkWordTest\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary ensure larval bit is kept by Z\n+ * @library \/test\/lib \/\n+ * @requires vm.flagless\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.misc\n+            java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UseZGC -Xlog:gc*=info\n+                     -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+                     runtime.valhalla.inlinetypes.LarvalMarkWordTest\n+ *\/\n+package runtime.valhalla.inlinetypes;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+public class LarvalMarkWordTest {\n+  private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+  private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+  \/\/ We want to ensure that the larval bit in the markWord is preserved\n+  \/\/ accross GC events.\n+  public static void main(String[] args) throws ReflectiveOperationException {\n+    \/\/ Take a value class with one field and record its field offset.\n+    MyValue val = new MyValue(0);\n+    long offset = UNSAFE.objectFieldOffset(val.getClass().getDeclaredField(\"x\"));\n+    \/\/ Create a new larval value object.\n+    val = UNSAFE.makePrivateBuffer(val);\n+    \/\/ Write a new value to it.\n+    UNSAFE.putLong(val, offset, 19);\n+\n+    \/\/ Explicitly cause a full GC.\n+    \/\/ This will cause relocations to happen, which is what we want to test.\n+    WB.fullGC();\n+\n+    \/\/ At this point, the GC's preservation should have seen that val was\n+    \/\/ a larval, and if it did anything with val, preserved the markWord.\n+    \/\/ There is a VM assertion that will fail here if the bit is lost.\n+    val = UNSAFE.finishPrivateBuffer(val);\n+    \/\/ Sanity check just in case.\n+    if (val.x != 19) {\n+      throw new IllegalStateException(\"something went wrong during larval construction\");\n+    }\n+  }\n+\n+  private static value class MyValue {\n+    private final int x;\n+\n+    private MyValue(int x) {\n+      this.x = x;\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/LarvalMarkWordTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}