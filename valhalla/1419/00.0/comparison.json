{"files":[{"patch":"@@ -1240,1 +1240,1 @@\n-            module: \"graphviz-\" + input.target_platform,\n+            module: \"graphviz-\" + input.build_platform,\n","filename":"make\/conf\/jib-profiles.js","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,4 @@\n-TARGETS += $(LIST_RESOURCE_BUNDLE) $(SUN_UTIL)\n+$(eval $(call SetupCompileProperties, SECURITY_RESOURCES, \\\n+    SRC_DIRS := $(MODULE_SRC)\/share\/classes\/sun\/security\/util\/resources, \\\n+    CLASS := ListResourceBundle, \\\n+))\n@@ -86,6 +89,4 @@\n-# Some resources bundles are already present as java files but still need to be\n-# copied to zh_HK locale.\n-$(eval $(call SetupCopy-zh_HK,COPY_ZH_HK, \\\n-    $(addprefix $(TOPDIR)\/src\/java.base\/share\/classes\/, \\\n-        sun\/security\/util\/AuthResources_zh_TW.java \\\n-        sun\/security\/util\/Resources_zh_TW.java)))\n+$(eval $(call SetupCompileProperties, KEYTOOL_RESOURCES, \\\n+    SRC_DIRS := $(MODULE_SRC)\/share\/classes\/sun\/security\/tools\/keytool\/resources, \\\n+    CLASS := ListResourceBundle, \\\n+))\n@@ -93,1 +94,1 @@\n-TARGETS += $(COPY_ZH_HK)\n+TARGETS += $(LIST_RESOURCE_BUNDLE) $(SUN_UTIL) $(SECURITY_RESOURCES) $(KEYTOOL_RESOURCES)\n","filename":"make\/modules\/java.base\/Gensrc.gmk","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -856,3 +856,3 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstepBreakPopReturn := -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIndyRedefineClass := -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefineClasses := -lpthread\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstepBreakPopReturn := $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIndyRedefineClass := $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefineClasses := $(LIBPTHREAD)\n@@ -862,2 +862,2 @@\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeinvoke := -lpthread\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exestack-gap := -lpthread\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeinvoke := $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exestack-gap := $(LIBPTHREAD)\n@@ -887,640 +887,640 @@\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbootclssearch_agent += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsystemclssearch_agent += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprop001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprop002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libGetEnv001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetvern001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libloadedclss001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libloadedclss002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextevents001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdatadumpreq001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtimerinfo001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrtimerinfo001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass031 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass030 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass015 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass012 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass024 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass023 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass022 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass025 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass013 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass014 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstressRedefine += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass011 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass029 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass016 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass020 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass018 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass027 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass019 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass026 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass021 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass028 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass017 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass010 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjlocfmt002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjlocfmt001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetallstktr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcpool001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextmech += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libheapref += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librefignore += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIsSyntheticIssynth001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgc += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonitor += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss00x += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretvoid += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretlong += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretint += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretbase += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretstr += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretobj += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretfp += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetavailproc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrinfo002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrinfo001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjsize001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetthrdstor001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetenvstor001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetextevent001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetpotcaps001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfldw002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfldw001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvminit001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendvthr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetjniftab002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetjniftab001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgeterrname002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgeterrname001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsettag001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstopthrd007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstopthrd006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgenevents001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldmdf004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldmdf003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrdlst001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrdlst002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrdlst001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrdlst002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIsMethodSyntheticIssynth001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libissynth002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonunload001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetsysprop002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetsysprop003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMethodBind += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libOnUnload += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libStackTrace += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefineCFLH += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libAddToBootstrapClassLoaderSearch += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libDispose += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libenvironment += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnosuspendMonitorInfo += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnosuspendStackTrace += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetNullVMInit += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtimers += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHeap += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHotSwap += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach046Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach041Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Agent01 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Target += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach012Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach040Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach014Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach022Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach038Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach009Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsimpleAgent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach037Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach008Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach039Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach020Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach042Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent03 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent02 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent01 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach002aAgent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach021Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach050Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach002Agent00 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgettag001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvmobjalloc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjwithtags001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethmod001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethmod002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmentry002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmentry001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe010 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe011 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcurthrtimerinfo001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfmodw001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfmodw002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisnative002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisnative001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballthr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballthr002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjhashcode001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdyncodgen001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetnotif001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmexit001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmexit002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethloc002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethloc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbreakpoint001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcaps001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcaps002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmaxloc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmaxloc002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexcatch001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrd002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrd001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjfree001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjfree002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldmod002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldmod001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextfuncs001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix002Main += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassprep001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetvrbflag002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetvrbflag001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmcontentered001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcfinish001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi02t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi03t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi04t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi01t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libex03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t013 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t014 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t015 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t012 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t019 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t021 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t017 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t010 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t011 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t016 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t020 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t018 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp05t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp05t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp04t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp03t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp07t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp07t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc03t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc05t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma08t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma08t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma01t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma06t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma07t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma07t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma05t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma05t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma02t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma03t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t003a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t002a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t003a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t004a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t005a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t002a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t007a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t008a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t001a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t006a += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs103t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs104t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs104t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs202t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs202t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_build += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t011 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t010 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t012 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem01t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem07t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem07t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t012 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t010 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t011 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem05t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem05t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji05t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap10t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap11t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap02t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap05t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap05t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap03t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap12t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap06t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap01t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap09t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap07t001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap07t002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdealloc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexceptionjni001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisfldsin003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisfldsin002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrgrpinfo001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrgrpinfo002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libAbort += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libCallbacks += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libNonConcreteKlassFilter += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libConcreteKlassFilter += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHeapFilter += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmcontenter001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtopthrgrp002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtopthrgrp001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisarray004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisarray005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadend001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadend002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetthrdgrpchld001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmonitorwait001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballoc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcrrawmon002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcrrawmon001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjniftab001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjniftab002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcurthrcputime001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisobsolete001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libargsize001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libargsize002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr008 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr009 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassload001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisintrf004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisintrf005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframepop001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframepop002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdisposeenv002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdisposeenv001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexception001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresexhausted += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcstart001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcstart002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libforcegc001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libforcegc002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgettime001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrcputime002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrcputime001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmonitorwaited001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libForceEarlyReturn001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcompmethunload001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf007 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcompmethload001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprops001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprops002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librelcaps001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librelcaps002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw004 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw003 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw005 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw006 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvmdeath001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetphase001 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetphase002 += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libterminatedThread += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libCompleteExit += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMonitorWithDeadObjectTest += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativeStack += -lpthread\n-  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libTestUnloadedClass += -lpthread\n-  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeGetCreatedJavaVMs := -lpthread\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbootclssearch_agent += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsystemclssearch_agent += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprop001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprop002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libGetEnv001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetvern001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldecl001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libloadedclss001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libloadedclss002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextevents001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdatadumpreq001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtimerinfo001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrstat001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframecnt003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcontmon001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrtimerinfo001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetenvstor003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframeloc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass031 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass030 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass015 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass012 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass024 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass023 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass022 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass025 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass013 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass014 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstressRedefine += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass011 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass029 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass016 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass020 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass018 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass027 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass019 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass026 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass021 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass028 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass017 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefclass010 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjlocfmt002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjlocfmt001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetlocal004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetallstktr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcpool001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextmech += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libheapref += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librefignore += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIsSyntheticIssynth001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgc += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonitor += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfollowref001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss00x += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretvoid += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretlong += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretint += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretbase += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretstr += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretobj += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libearlyretfp += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetavailproc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclstat005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrinfo002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrinfo001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetthrdstor001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjsize001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libaddcaps003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmthd005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldacc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsrcfn004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetthrdstor001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libintrpthrd003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativemethbind001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetenvstor001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetextevent001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetpotcaps001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterobjreachobj003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfldw002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfldw001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvminit001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrd003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendvthr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdeclcls001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetjniftab002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetjniftab001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgeterrname002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgeterrname001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsettag001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstopthrd007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libstopthrd006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgenevents001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldmdf004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldmdf003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrdlst001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrdlst002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetbrk003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrdlst001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsuspendthrdlst002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libIsMethodSyntheticIssynth001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libissynth002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonunload001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetsysprop002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetsysprop003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMethodBind += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libOnUnload += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libStackTrace += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libredefineCFLH += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libAddToBootstrapClassLoaderSearch += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libDispose += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libenvironment += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnosuspendMonitorInfo += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnosuspendStackTrace += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetNullVMInit += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtimers += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHeap += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHotSwap += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach046Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach041Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Agent01 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach015Target += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach012Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach040Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach014Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach022Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach038Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach009Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsimpleAgent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach037Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach008Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach039Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach020Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach042Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent03 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent02 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach045Agent01 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach002aAgent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach021Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach050Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libattach002Agent00 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgettag001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnframepop002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvmobjalloc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjwithtags001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfy001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethmod001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethmod002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmentry002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmentry001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterheap001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe010 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe011 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libpopframe007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcurthrtimerinfo001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnwait001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfldw002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfmodw001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrfmodw002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisnative002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisnative001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterreachobj001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballthr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballthr002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjhashcode001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdyncodgen001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetnotif001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmexit001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmexit002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethloc002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethloc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbreakpoint001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcaps001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetcaps002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclsldrclss002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblinetab002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmaxloc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmaxloc002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassfloadhk009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetintrf005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexcatch001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrd002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresumethrd001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjfree001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjfree002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldmod002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libfieldmod001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libextfuncs001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix002Main += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libSetNativeMethodPrefix001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassprep001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetvrbflag002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetvrbflag001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmcontentered001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetevntcallb003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmnntfyall001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcfinish001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libownmoninf001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetfldnm005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf08t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgf04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi02t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi03t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi04t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi01t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbi01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libex03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t013 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t014 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t015 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t012 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t019 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t021 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t017 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t010 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t011 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t016 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t020 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t018 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcm01t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp02t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp05t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp05t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp04t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp03t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp06t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp01t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp07t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsp07t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc03t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc05t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtc01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma08t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma08t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma01t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma06t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma07t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma07t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma05t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma05t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma02t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma03t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t003a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t002a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t003a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t004a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t005a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t002a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t007a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t008a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t001a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libma10t006a += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs103t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs104t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs104t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs301t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs203t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs204t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs202t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs202t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_build += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t011 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t010 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs302t012 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libhs201t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem01t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem07t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem07t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t012 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t010 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem02t011 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem05t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem05t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libem04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libji05t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap10t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap11t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap02t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap05t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap05t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap04t003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap03t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap12t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap06t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap01t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap09t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap07t001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libap07t002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadstart002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonenter001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdealloc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexceptionjni001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisfldsin003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisfldsin002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrgrpinfo001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrgrpinfo002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libAbort += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libCallbacks += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libNonConcreteKlassFilter += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libConcreteKlassFilter += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libHeapFilter += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmcontenter001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclrbrk005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtopthrgrp002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libtopthrgrp001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisarray004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisarray005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libbytecodes001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadend001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthreadend002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetthrdgrpchld001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmonitorwait001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liballoc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsrcdebugex001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcrrawmon002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcrrawmon001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjniftab001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetjniftab002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsldr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcurthrcputime001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librawmonexit003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisobsolete001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libargsize001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libargsize002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclfld005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr008 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr009 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetstacktr003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_liblocaltab005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libclassload001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisintrf004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libisintrf005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframepop001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libframepop002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclsig006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdisposeenv002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdisposeenv001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libexception001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libresexhausted += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcstart001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgcstart002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libiterinstcls007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmethname001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libforcegc001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libforcegc002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgettime001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libobjmonusage001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentonload003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrcputime002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libthrcputime001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libmonitorwaited001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libForceEarlyReturn001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libagentthr001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcompmethunload001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libretransform003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf007 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetclmdf005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetlocal002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libcompmethload001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprops001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetsysprops002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libdrrawmon001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsinglestep002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librelcaps001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_librelcaps002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw004 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw003 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw005 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw006 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libsetfmodw001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libvmdeath001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetphase001 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libgetphase002 += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libterminatedThread += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libCompleteExit += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libMonitorWithDeadObjectTest += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libnativeStack += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_LIBRARIES_LIBS_libTestUnloadedClass += $(LIBPTHREAD)\n+  BUILD_HOTSPOT_JTREG_EXECUTABLES_LIBS_exeGetCreatedJavaVMs := $(LIBPTHREAD)\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":645,"deletions":645,"binary":false,"changes":1290,"status":"modified"},{"patch":"@@ -1748,1 +1748,1 @@\n-  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() == nullptr) {\n@@ -4567,0 +4567,1 @@\n+            SHENANDOAHGC_ONLY(!BarrierSet::barrier_set()->is_a(BarrierSet::ShenandoahBarrierSet) &&)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,18 +51,14 @@\n-  if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n-    \/\/ Dummy labels for just measuring the code size\n-    Label dummy_slow_path;\n-    Label dummy_continuation;\n-    Label dummy_guard;\n-    Label* slow_path = &dummy_slow_path;\n-    Label* continuation = &dummy_continuation;\n-    Label* guard = &dummy_guard;\n-    if (!Compile::current()->output()->in_scratch_emit_size()) {\n-      \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n-      C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n-      Compile::current()->output()->add_stub(stub);\n-      slow_path = &stub->entry();\n-      continuation = &stub->continuation();\n-      guard = &stub->guard();\n-    }\n-    \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n-    bs->nmethod_entry_barrier(this, slow_path, continuation, guard);\n+  \/\/ Dummy labels for just measuring the code size\n+  Label dummy_slow_path;\n+  Label dummy_continuation;\n+  Label dummy_guard;\n+  Label* slow_path = &dummy_slow_path;\n+  Label* continuation = &dummy_continuation;\n+  Label* guard = &dummy_guard;\n+  if (!Compile::current()->output()->in_scratch_emit_size()) {\n+    \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n+    C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n+    Compile::current()->output()->add_stub(stub);\n+    slow_path = &stub->entry();\n+    continuation = &stub->continuation();\n+    guard = &stub->guard();\n@@ -70,0 +66,2 @@\n+  \/\/ In the C2 code, we move the non-hot part of nmethod entry barriers out-of-line to a stub.\n+  bs->nmethod_entry_barrier(this, slow_path, continuation, guard);\n@@ -343,4 +341,2 @@\n-  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n-  ldr(rscratch1, Address(tmp, ObjectMonitor::EntryList_offset()));\n-  ldr(tmpReg, Address(tmp, ObjectMonitor::cxq_offset()));\n-  orr(rscratch1, rscratch1, tmpReg);\n+  \/\/ Check if the entry_list is empty.\n+  ldr(rscratch1, Address(tmp, ObjectMonitor::entry_list_offset()));\n@@ -666,4 +662,2 @@\n-    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n-    ldr(rscratch1, Address(t1_monitor, ObjectMonitor::EntryList_offset()));\n-    ldr(t3_t, Address(t1_monitor, ObjectMonitor::cxq_offset()));\n-    orr(rscratch1, rscratch1, t3_t);\n+    \/\/ Check if the entry_list is empty.\n+    ldr(rscratch1, Address(t1_monitor, ObjectMonitor::entry_list_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":20,"deletions":26,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -316,4 +316,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -392,5 +388,0 @@\n-  BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -10061,4 +10061,1 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != nullptr) {\n-      StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2111,1 +2111,1 @@\n-  __ atomic_addw(noreg, 1, r10);\n+  __ atomic_add(noreg, 1, r10);\n@@ -2159,1 +2159,1 @@\n-  __ cmpw(rscratch1, rscratch2);\n+  __ cmp(rscratch1, rscratch2);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,14 +163,11 @@\n-  if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n-    \/\/ We put the non-hot code of the nmethod entry barrier out-of-line in a stub.\n-    Label dummy_slow_path;\n-    Label dummy_continuation;\n-    Label* slow_path = &dummy_slow_path;\n-    Label* continuation = &dummy_continuation;\n-    if (!Compile::current()->output()->in_scratch_emit_size()) {\n-      \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n-      C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n-      Compile::current()->output()->add_stub(stub);\n-      slow_path = &stub->entry();\n-      continuation = &stub->continuation();\n-    }\n-    bs->nmethod_entry_barrier(this, slow_path, continuation);\n+  \/\/ We put the non-hot code of the nmethod entry barrier out-of-line in a stub.\n+  Label dummy_slow_path;\n+  Label dummy_continuation;\n+  Label* slow_path = &dummy_slow_path;\n+  Label* continuation = &dummy_continuation;\n+  if (!Compile::current()->output()->in_scratch_emit_size()) {\n+    \/\/ Use real labels from actual stub when not emitting code for the purpose of measuring its size\n+    C2EntryBarrierStub* stub = new (Compile::current()->comp_arena()) C2EntryBarrierStub();\n+    Compile::current()->output()->add_stub(stub);\n+    slow_path = &stub->entry();\n+    continuation = &stub->continuation();\n@@ -178,0 +175,1 @@\n+  bs->nmethod_entry_barrier(this, slow_path, continuation);\n@@ -446,2 +444,0 @@\n-  \/\/ Refer to the comments in synchronizer.cpp for how we might encode extra\n-  \/\/ state in _succ so we can avoid fetching EntryList|cxq.\n@@ -479,3 +475,2 @@\n-  \/\/ Check if the entry lists are empty (EntryList first - by convention).\n-  movptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(EntryList)));\n-  orptr(boxReg, Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(cxq)));\n+  \/\/ Check if the entry_list is empty.\n+  cmpptr(Address(tmpReg, OM_OFFSET_NO_MONITOR_VALUE_TAG(entry_list)), NULL_WORD);\n@@ -799,2 +794,1 @@\n-    const Address cxq_address{monitor, ObjectMonitor::cxq_offset() - monitor_tag};\n-    const Address EntryList_address{monitor, ObjectMonitor::EntryList_offset() - monitor_tag};\n+    const Address entry_list_address{monitor, ObjectMonitor::entry_list_offset() - monitor_tag};\n@@ -817,3 +811,2 @@\n-    \/\/ Check if the entry lists are empty (EntryList first - by convention).\n-    movptr(reg_rax, EntryList_address);\n-    orptr(reg_rax, cxq_address);\n+    \/\/ Check if the entry_list is empty.\n+    cmpptr(entry_list_address, NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":17,"deletions":24,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -372,3 +372,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n@@ -399,4 +396,0 @@\n-  if (bs_nm == nullptr) {\n-    return;\n-  }\n-\n@@ -419,5 +412,0 @@\n-  BarrierSetNMethod* bs = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs == nullptr) {\n-    return;\n-  }\n-\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  SHENANDOAHGC_ONLY(assert(!UseShenandoahGC, \"Shenandoah byte_map_base is not constant.\");)\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4309,4 +4309,1 @@\n-  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-  if (bs_nm != nullptr) {\n-    StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n-  }\n+  StubRoutines::_method_entry_barrier = generate_method_entry_barrier();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1882,0 +1882,1 @@\n+  #ifndef _LP64\n@@ -1883,0 +1884,3 @@\n+  #else\n+  __ incrementq(ExternalAddress((address) &BytecodeCounter::_counter_value), rscratch1);\n+  #endif\n@@ -1922,0 +1926,1 @@\n+  #ifndef _LP64\n@@ -1925,0 +1930,4 @@\n+  #else\n+  __ mov64(rscratch1, StopInterpreterAt);\n+  __ cmp64(rscratch1, ExternalAddress((address) &BytecodeCounter::_counter_value), rscratch2);\n+  #endif\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -826,1 +826,1 @@\n-  if (C->stub_function() != nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n+  if (C->stub_function() != nullptr) {\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -954,1 +954,1 @@\n-    if (nm->make_not_entrant()) {\n+    if (nm->make_not_entrant(\"C1 deoptimize\")) {\n@@ -1264,1 +1264,1 @@\n-      nm->make_not_entrant();\n+      nm->make_not_entrant(\"C1 code patch\");\n@@ -1512,1 +1512,1 @@\n-      nm->make_not_entrant();\n+      nm->make_not_entrant(\"C1 deoptimize for patching\");\n@@ -1640,1 +1640,1 @@\n-  nm->make_not_entrant();\n+  nm->make_not_entrant(\"C1 predicate failed trap\");\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-bool HeapShared::archive_object(oop obj, KlassSubGraphInfo* subgraph_info) {\n+bool HeapShared::archive_object(oop obj, oop referrer, KlassSubGraphInfo* subgraph_info) {\n@@ -307,1 +307,1 @@\n-    CachedOopInfo info = make_cached_oop_info(obj);\n+    CachedOopInfo info = make_cached_oop_info(obj, referrer);\n@@ -1353,1 +1353,4 @@\n-class WalkOopAndArchiveClosure: public BasicOopIterateClosure {\n+\/\/ Push all oops that are referenced by _referencing_obj onto the _stack.\n+class HeapShared::ReferentPusher: public BasicOopIterateClosure {\n+  PendingOopStack* _stack;\n+  GrowableArray<oop> _found_oop_fields;\n@@ -1358,6 +1361,2 @@\n-\n-  \/\/ The following are for maintaining a stack for determining\n-  \/\/ CachedOopInfo::_referrer\n-  static WalkOopAndArchiveClosure* _current;\n-  WalkOopAndArchiveClosure* _last;\n-  WalkOopAndArchiveClosure(int level,\n+  ReferentPusher(PendingOopStack* stack,\n+                           int level,\n@@ -1368,0 +1367,2 @@\n+    _stack(stack),\n+    _found_oop_fields(),\n@@ -1372,4 +1373,11 @@\n-    _last = _current;\n-    _current = this;\n-  ~WalkOopAndArchiveClosure() {\n-    _current = _last;\n+  void do_oop(narrowOop *p) { ReferentPusher::do_oop_work(p); }\n+  void do_oop(      oop *p) { ReferentPusher::do_oop_work(p); }\n+\n+  ~ReferentPusher() {\n+    while (_found_oop_fields.length() > 0) {\n+      \/\/ This produces the exact same traversal order as the previous version\n+      \/\/ of ReferentPusher that recurses on the C stack -- a depth-first search,\n+      \/\/ walking the oop fields in _referencing_obj by ascending field offsets.\n+      oop obj = _found_oop_fields.pop();\n+      _stack->push(PendingOop(obj, _referencing_obj, _level + 1));\n+    }\n@@ -1378,2 +1386,0 @@\n-  void do_oop(narrowOop *p) { WalkOopAndArchiveClosure::do_oop_work(p); }\n-  void do_oop(      oop *p) { WalkOopAndArchiveClosure::do_oop_work(p); }\n@@ -1399,3 +1405,1 @@\n-      bool success = HeapShared::archive_reachable_objects_from(\n-          _level + 1, _subgraph_info, obj);\n-      assert(success, \"VM should have exited with unarchivable objects for _level > 1\");\n+      _found_oop_fields.push(obj);\n@@ -1406,1 +1410,0 @@\n-  static WalkOopAndArchiveClosure* current()  { return _current;              }\n@@ -1411,2 +1414,0 @@\n-WalkOopAndArchiveClosure* WalkOopAndArchiveClosure::_current = nullptr;\n-\n@@ -1428,3 +1429,1 @@\n-HeapShared::CachedOopInfo HeapShared::make_cached_oop_info(oop obj) {\n-  WalkOopAndArchiveClosure* walker = WalkOopAndArchiveClosure::current();\n-  oop referrer = (walker == nullptr) ? nullptr : walker->referencing_obj();\n+HeapShared::CachedOopInfo HeapShared::make_cached_oop_info(oop obj, oop referrer) {\n@@ -1453,1 +1452,2 @@\n-\/\/ (3) Record the klasses of all orig_obj and all reachable objects.\n+\/\/ (3) Record the klasses of all objects that are reachable from orig_obj (including those that\n+\/\/     were already archived when this function is called)\n@@ -1458,0 +1458,16 @@\n+  PendingOopStack stack;\n+  stack.push(PendingOop(orig_obj, nullptr, level));\n+\n+  while (stack.length() > 0) {\n+    PendingOop po = stack.pop();\n+    _object_being_archived = po;\n+    bool status = walk_one_object(&stack, po.level(), subgraph_info, po.obj(), po.referrer());\n+    _object_being_archived = PendingOop();\n+\n+    if (!status) {\n+      \/\/ Don't archive a subgraph root that's too big. For archives static fields, that's OK\n+      \/\/ as the Java code will take care of initializing this field dynamically.\n+      assert(level == 1, \"VM should have exited with unarchivable objects for _level > 1\");\n+      return false;\n+    }\n+  }\n@@ -1459,0 +1475,6 @@\n+  return true;\n+}\n+\n+bool HeapShared::walk_one_object(PendingOopStack* stack, int level, KlassSubGraphInfo* subgraph_info,\n+                                 oop orig_obj, oop referrer) {\n+  assert(orig_obj != nullptr, \"must be\");\n@@ -1527,1 +1549,1 @@\n-    if (!archive_object(orig_obj, subgraph_info)) {\n+    if (!archive_object(orig_obj, referrer, subgraph_info)) {\n@@ -1550,2 +1572,7 @@\n-  WalkOopAndArchiveClosure walker(level, record_klasses_only, subgraph_info, orig_obj);\n-  orig_obj->oop_iterate(&walker);\n+  {\n+    \/\/ Find all the oops that are referenced by orig_obj, push them onto the stack\n+    \/\/ so we can work on them next.\n+    ResourceMark rm;\n+    ReferentPusher pusher(stack, level, record_klasses_only, subgraph_info, orig_obj);\n+    orig_obj->oop_iterate(&pusher);\n+  }\n@@ -1576,2 +1603,1 @@\n-\/\/ The Java heap object sub-graph archiving process (see\n-\/\/ WalkOopAndArchiveClosure):\n+\/\/ The Java heap object sub-graph archiving process (see ReferentPusher):\n@@ -1725,0 +1751,1 @@\n+HeapShared::PendingOop HeapShared::_object_being_archived;\n@@ -2053,2 +2080,2 @@\n-  WalkOopAndArchiveClosure* walker = WalkOopAndArchiveClosure::current();\n-  if (walker != nullptr) {\n+  oop referrer = _object_being_archived.referrer();\n+  if (referrer != nullptr) {\n@@ -2056,1 +2083,2 @@\n-    CDSHeapVerifier::trace_to_root(&ls, walker->referencing_obj());\n+    ls.print_cr(\"Reference trace\");\n+    CDSHeapVerifier::trace_to_root(&ls, referrer);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":61,"deletions":33,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -806,1 +806,1 @@\n-      nm->make_not_entrant();\n+      nm->make_not_entrant(\"CI replay\");\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,3 +114,1 @@\n-  unsigned int size = header_size;\n-  size += align_up(cb->total_relocation_size(), oopSize);\n-  size = align_code_offset(size);\n+  unsigned int size = align_code_offset(header_size);\n@@ -120,1 +118,0 @@\n-  size += align_up(cb->total_metadata_size(), oopSize);\n@@ -125,1 +122,2 @@\n-                   int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments) :\n+                   int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments,\n+                   int mutable_data_size) :\n@@ -128,0 +126,1 @@\n+  _mutable_data(nullptr),\n@@ -130,1 +129,1 @@\n-  _content_offset(CodeBlob::align_code_offset(header_size + _relocation_size)),\n+  _content_offset(CodeBlob::align_code_offset(header_size)),\n@@ -134,0 +133,1 @@\n+  _mutable_data_size(mutable_data_size),\n@@ -144,0 +144,1 @@\n+  assert(is_nmethod() || (cb->total_oop_size() + cb->total_metadata_size() == 0), \"must be nmethod\");\n@@ -150,0 +151,7 @@\n+  if (_mutable_data_size > 0) {\n+    _mutable_data = (address)os::malloc(_mutable_data_size, mtCode);\n+    if (_mutable_data == nullptr) {\n+      vm_exit_out_of_memory(_mutable_data_size, OOM_MALLOC_ERROR, \"codebuffer: no space for mutable data\");\n+    }\n+  }\n+\n@@ -157,0 +165,1 @@\n+  _mutable_data(nullptr),\n@@ -174,0 +183,4 @@\n+  if (_mutable_data != nullptr) {\n+    os::free(_mutable_data);\n+    _mutable_data = nullptr;\n+  }\n@@ -215,1 +228,2 @@\n-  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments)\n+  : CodeBlob(name, kind, cb, size, header_size, frame_complete, frame_size, oop_maps, caller_must_gc_arguments,\n+             align_up(cb->total_relocation_size(), oopSize))\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-\/\/ Layout : continuous in the CodeCache\n+\/\/ Layout in the CodeCache:\n@@ -73,1 +73,0 @@\n-\/\/   - relocation\n@@ -76,1 +75,4 @@\n-\/\/   - data space\n+\/\/ Outside of the CodeCache:\n+\/\/   - mutable_data\n+\/\/     - relocation info\n+\/\/     - additional data for subclasses\n@@ -109,0 +111,1 @@\n+  address             _mutable_data;\n@@ -114,1 +117,0 @@\n-\n@@ -117,0 +119,1 @@\n+  int      _mutable_data_size;\n@@ -147,1 +150,2 @@\n-           int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments);\n+           int16_t frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments,\n+           int mutable_data_size);\n@@ -196,2 +200,0 @@\n-  relocInfo* relocation_begin() const         { return (relocInfo*) header_end(); }\n-  relocInfo* relocation_end() const           { return (relocInfo*)(header_end()   + _relocation_size); }\n@@ -201,1 +203,0 @@\n-  \/\/ code_end == content_end is true for all types of blobs for now, it is also checked in the constructor\n@@ -205,0 +206,9 @@\n+  address    blob_end() const                 { return (address)    header_begin() + _size; }\n+  \/\/ code_end == content_end is true for all types of blobs for now, it is also checked in the constructor\n+\n+  int mutable_data_size() const               { return _mutable_data_size; }\n+  address mutable_data_begin() const          { return _mutable_data; }\n+  address mutable_data_end() const            { return _mutable_data + _mutable_data_size; }\n+\n+  relocInfo* relocation_begin() const         { return (relocInfo*)_mutable_data; }\n+  relocInfo* relocation_end() const           { return (relocInfo*)((address)relocation_begin() + _relocation_size); }\n@@ -209,1 +219,0 @@\n-  int data_offset() const                     { return _data_offset; }\n@@ -227,1 +236,1 @@\n-    _data_offset = (int)used;\n+    _data_offset = _size;\n@@ -231,1 +240,1 @@\n-  bool blob_contains(address addr) const         { return header_begin()       <= addr && addr < data_end();       }\n+  bool blob_contains(address addr) const         { return header_begin()       <= addr && addr < blob_end();       }\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+  uint total_mut_size;\n@@ -150,0 +151,1 @@\n+    total_mut_size      += nm->mutable_data_size();\n@@ -169,1 +171,1 @@\n-    uint total_size = total_nm_size + total_immut_size;\n+    uint total_size = total_nm_size + total_immut_size + total_mut_size;\n@@ -178,3 +180,0 @@\n-    if (relocation_size != 0) {\n-      tty->print_cr(\"   relocation    = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_nm_size);\n-    }\n@@ -193,0 +192,6 @@\n+    if (total_mut_size != 0) {\n+      tty->print_cr(\" mutable data    = %u (%f%%)\", total_mut_size, (total_mut_size * 100.0f)\/total_size);\n+    }\n+    if (relocation_size != 0) {\n+      tty->print_cr(\"   relocation    = %u (%f%%)\", relocation_size, (relocation_size * 100.0f)\/total_mut_size);\n+    }\n@@ -194,1 +199,1 @@\n-      tty->print_cr(\"   metadata      = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_nm_size);\n+      tty->print_cr(\"   metadata      = %u (%f%%)\", metadata_size, (metadata_size * 100.0f)\/total_mut_size);\n@@ -198,1 +203,1 @@\n-      tty->print_cr(\"   JVMCI data    = %u (%f%%)\", jvmci_data_size, (jvmci_data_size * 100.0f)\/total_nm_size);\n+      tty->print_cr(\"   JVMCI data    = %u (%f%%)\", jvmci_data_size, (jvmci_data_size * 100.0f)\/total_mut_size);\n@@ -686,4 +691,0 @@\n-  \/\/ It is not safe to read oops concurrently using entry barriers, if their\n-  \/\/ location depend on whether the nmethod is entrant or not.\n-  \/\/ assert(BarrierSet::barrier_set()->barrier_set_nmethod() == nullptr, \"Not safe oop scan\");\n-\n@@ -1086,0 +1087,7 @@\n+static int required_mutable_data_size(CodeBuffer* code_buffer,\n+                                      int jvmci_data_size = 0) {\n+  return align_up(code_buffer->total_relocation_size(), oopSize) +\n+         align_up(code_buffer->total_metadata_size(), oopSize) +\n+         align_up(jvmci_data_size, oopSize);\n+}\n+\n@@ -1110,0 +1118,2 @@\n+    int mutable_data_size = required_mutable_data_size(code_buffer);\n+\n@@ -1119,1 +1129,1 @@\n-            oop_maps);\n+            oop_maps, mutable_data_size);\n@@ -1158,5 +1168,0 @@\n-#if INCLUDE_JVMCI\n-    if (compiler->is_jvmci()) {\n-      nmethod_size += align_up(jvmci_data->size(), oopSize);\n-    }\n-#endif\n@@ -1183,0 +1188,4 @@\n+\n+  int mutable_data_size = required_mutable_data_size(code_buffer\n+    JVMCI_ONLY(COMMA (compiler->is_jvmci() ? jvmci_data->size() : 0)));\n+\n@@ -1187,1 +1196,1 @@\n-    nmethod(method(), compiler->type(), nmethod_size, immutable_data_size,\n+    nmethod(method(), compiler->type(), nmethod_size, immutable_data_size, mutable_data_size,\n@@ -1294,1 +1303,2 @@\n-  OopMapSet* oop_maps )\n+  OopMapSet* oop_maps,\n+  int mutable_data_size)\n@@ -1296,1 +1306,1 @@\n-             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),\n+             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false, mutable_data_size),\n@@ -1330,8 +1340,6 @@\n-    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n-    int data_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n-#if INCLUDE_JVMCI\n-    \/\/ jvmci_data_size is 0 in native wrapper but we need to set offset\n-    \/\/ to correctly calculate metadata_end address\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, data_end_offset);\n-#endif\n-    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d < %d\", nmethod_size, (data_offset() + data_end_offset));\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n+    int metadata_size = align_up(code_buffer->total_metadata_size(), wordSize);\n+    JVMCI_ONLY( _jvmci_data_size = 0; )\n+    assert(_mutable_data_size == _relocation_size + metadata_size,\n+           \"wrong mutable data size: %d != %d + %d\",\n+           _mutable_data_size, _relocation_size, metadata_size);\n@@ -1340,1 +1348,1 @@\n-    _immutable_data          = data_end();\n+    _immutable_data          = blob_end();\n@@ -1417,0 +1425,1 @@\n+  int mutable_data_size,\n@@ -1438,1 +1447,1 @@\n-             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false),\n+             offsets->value(CodeOffsets::Frame_Complete), frame_size, oop_maps, false, mutable_data_size),\n@@ -1504,9 +1513,4 @@\n-    CHECKED_CAST(_metadata_offset, uint16_t, (align_up(code_buffer->total_oop_size(), oopSize)));\n-    int metadata_end_offset = _metadata_offset + align_up(code_buffer->total_metadata_size(), wordSize);\n-#if INCLUDE_JVMCI\n-    CHECKED_CAST(_jvmci_data_offset, uint16_t, metadata_end_offset);\n-    int jvmci_data_size   = compiler->is_jvmci() ? jvmci_data->size() : 0;\n-    DEBUG_ONLY( int data_end_offset = _jvmci_data_offset  + align_up(jvmci_data_size, oopSize); )\n-#else\n-    DEBUG_ONLY( int data_end_offset = metadata_end_offset; )\n-#endif\n+    CHECKED_CAST(_oops_size, uint16_t, align_up(code_buffer->total_oop_size(), oopSize));\n+    uint16_t metadata_size = (uint16_t)align_up(code_buffer->total_metadata_size(), wordSize);\n+    JVMCI_ONLY(CHECKED_CAST(_jvmci_data_size, uint16_t, align_up(compiler->is_jvmci() ? jvmci_data->size() : 0, oopSize)));\n+    int jvmci_data_size = 0 JVMCI_ONLY(+ _jvmci_data_size);\n@@ -1516,2 +1520,5 @@\n-    assert((data_offset() + data_end_offset) <= nmethod_size, \"wrong nmethod's size: %d > %d\",\n-           (data_offset() + data_end_offset), nmethod_size);\n+    assert(_mutable_data_size == _relocation_size + metadata_size + jvmci_data_size,\n+           \"wrong mutable data size: %d != %d + %d + %d\",\n+           _mutable_data_size, _relocation_size, metadata_size, jvmci_data_size);\n+    assert(nmethod_size == data_end() - header_begin(), \"wrong nmethod size: %d != %d\",\n+           nmethod_size, (int)(code_end() - header_begin()));\n@@ -1526,1 +1533,1 @@\n-      _immutable_data     = data_end();\n+      _immutable_data     = blob_end();\n@@ -1978,1 +1985,3 @@\n-void nmethod::log_state_change() const {\n+void nmethod::log_state_change(const char* reason) const {\n+  assert(reason != nullptr, \"Must provide a reason\");\n+\n@@ -1982,2 +1991,2 @@\n-      xtty->begin_elem(\"make_not_entrant thread='%zu'\",\n-                       os::current_thread_id());\n+      xtty->begin_elem(\"make_not_entrant thread='%zu' reason='%s'\",\n+                       os::current_thread_id(), reason);\n@@ -1990,1 +1999,5 @@\n-  CompileTask::print_ul(this, \"made not entrant\");\n+  ResourceMark rm;\n+  stringStream ss(NEW_RESOURCE_ARRAY(char, 256), 256);\n+  ss.print(\"made not entrant: %s\", reason);\n+\n+  CompileTask::print_ul(this, ss.freeze());\n@@ -1992,1 +2005,1 @@\n-    print_on_with_msg(tty, \"made not entrant\");\n+    print_on_with_msg(tty, ss.freeze());\n@@ -2003,1 +2016,3 @@\n-bool nmethod::make_not_entrant() {\n+bool nmethod::make_not_entrant(const char* reason) {\n+  assert(reason != nullptr, \"Must provide a reason\");\n+\n@@ -2061,1 +2076,1 @@\n-    log_state_change();\n+    log_state_change(reason);\n@@ -2148,1 +2163,1 @@\n-  if (_immutable_data != data_end()) {\n+  if (_immutable_data != blob_end()) {\n@@ -2150,1 +2165,1 @@\n-    _immutable_data = data_end(); \/\/ Valid not null address\n+    _immutable_data = blob_end(); \/\/ Valid not null address\n@@ -3082,4 +3097,0 @@\n-  if (relocation_size   () > 0) st->print_cr(\" relocation     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n-                                             p2i(relocation_begin()),\n-                                             p2i(relocation_end()),\n-                                             relocation_size());\n@@ -3102,0 +3113,8 @@\n+  if (mutable_data_size() > 0) st->print_cr(\" mutable data [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(mutable_data_begin()),\n+                                             p2i(mutable_data_end()),\n+                                             mutable_data_size());\n+  if (relocation_size() > 0)   st->print_cr(\" relocation     [\" INTPTR_FORMAT \",\" INTPTR_FORMAT \"] = %d\",\n+                                             p2i(relocation_begin()),\n+                                             p2i(relocation_end()),\n+                                             relocation_size());\n@@ -3571,1 +3590,4 @@\n-        case relocInfo::none:                  return \"no_reloc\";\n+        case relocInfo::none: {\n+          \/\/ Skip it and check next\n+          break;\n+        }\n@@ -3600,0 +3622,10 @@\n+          if (StubRoutines::contains(dest)) {\n+            StubCodeDesc* desc = StubCodeDesc::desc_for(dest);\n+            if (desc == nullptr) {\n+              desc = StubCodeDesc::desc_for(dest + frame::pc_return_offset);\n+            }\n+            if (desc != nullptr) {\n+              st.print(\" Stub::%s\", desc->name());\n+              return st.as_string();\n+            }\n+          }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":87,"deletions":55,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -138,21 +138,21 @@\n-\/\/  - header                 (the nmethod structure)\n-\/\/  [Relocation]\n-\/\/  - relocation information\n-\/\/  - constant part          (doubles, longs and floats used in nmethod)\n-\/\/  - oop table\n-\/\/  [Code]\n-\/\/  - code body\n-\/\/  - exception handler\n-\/\/  - stub code\n-\/\/  [Debugging information]\n-\/\/  - oop array\n-\/\/  - data array\n-\/\/  - pcs\n-\/\/  [Exception handler table]\n-\/\/  - handler entry point array\n-\/\/  [Implicit Null Pointer exception table]\n-\/\/  - implicit null table array\n-\/\/  [Speculations]\n-\/\/  - encoded speculations array\n-\/\/  [JVMCINMethodData]\n-\/\/  - meta data for JVMCI compiled nmethod\n+\/\/  - Header                 (the nmethod structure)\n+\/\/  - Constant part          (doubles, longs and floats used in nmethod)\n+\/\/  - Code part:\n+\/\/    - Code body\n+\/\/    - Exception handler\n+\/\/    - Stub code\n+\/\/    - OOP table\n+\/\/\n+\/\/ As a CodeBlob, an nmethod references [mutable data] allocated on the C heap:\n+\/\/  - CodeBlob relocation data\n+\/\/  - Metainfo\n+\/\/  - JVMCI data\n+\/\/\n+\/\/ An nmethod references [immutable data] allocated on C heap:\n+\/\/  - Dependency assertions data\n+\/\/  - Implicit null table array\n+\/\/  - Handler entry point array\n+\/\/  - Debugging information:\n+\/\/    - Scopes data array\n+\/\/    - Scopes pcs array\n+\/\/  - JVMCI speculations array\n@@ -243,3 +243,1 @@\n-  \/\/ Offsets in mutable data section\n-  \/\/ _oops_offset == _data_offset,  offset where embedded oop table begins (inside data)\n-  uint16_t _metadata_offset; \/\/ embedded meta data table\n+  uint16_t _oops_size;\n@@ -247,1 +245,1 @@\n-  uint16_t _jvmci_data_offset;\n+  uint16_t _jvmci_data_size;\n@@ -313,1 +311,2 @@\n-          OopMapSet* oop_maps);\n+          OopMapSet* oop_maps,\n+          int mutable_data_size);\n@@ -320,0 +319,1 @@\n+          int mutable_data_size,\n@@ -534,1 +534,1 @@\n-  address stub_end              () const { return           data_begin()   ; }\n+  address stub_end              () const { return           code_end()     ; }\n@@ -539,0 +539,2 @@\n+  oop*    oops_begin            () const { return (oop*)    data_begin(); }\n+  oop*    oops_end              () const { return (oop*)    data_end(); }\n@@ -541,3 +543,1 @@\n-  oop*    oops_begin            () const { return (oop*)        data_begin(); }\n-  oop*    oops_end              () const { return (oop*)       (data_begin() + _metadata_offset)      ; }\n-  Metadata** metadata_begin     () const { return (Metadata**) (data_begin() + _metadata_offset)      ; }\n+  Metadata** metadata_begin     () const { return (Metadata**) (mutable_data_begin() + _relocation_size); }\n@@ -545,3 +545,3 @@\n-  Metadata** metadata_end       () const { return (Metadata**) (data_begin() + _jvmci_data_offset)    ; }\n-  address jvmci_data_begin      () const { return               data_begin() + _jvmci_data_offset     ; }\n-  address jvmci_data_end        () const { return               data_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**) (mutable_data_end() - _jvmci_data_size); }\n+  address jvmci_data_begin      () const { return               mutable_data_end() - _jvmci_data_size; }\n+  address jvmci_data_end        () const { return               mutable_data_end(); }\n@@ -549,1 +549,1 @@\n-  Metadata** metadata_end       () const { return (Metadata**)  data_end(); }\n+  Metadata** metadata_end       () const { return (Metadata**)  mutable_data_end(); }\n@@ -642,2 +642,2 @@\n-  bool  make_not_entrant();\n-  bool  make_not_used()    { return make_not_entrant(); }\n+  bool  make_not_entrant(const char* reason);\n+  bool  make_not_used()    { return make_not_entrant(\"not used\"); }\n@@ -966,1 +966,1 @@\n-  void log_state_change() const;\n+  void log_state_change(const char* reason) const;\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -119,3 +119,1 @@\n-  if (bs_nm != nullptr) {\n-    thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n-  }\n+  thread->set_nmethod_disarmed_guard_value(bs_nm->disarmed_guard_value());\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSet.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -436,11 +436,0 @@\n-Node* ShenandoahBarrierSetC2::byte_map_base_node(GraphKit* kit) const {\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  ShenandoahBarrierSet* ctbs = barrier_set_cast<ShenandoahBarrierSet>(bs);\n-  CardTable::CardValue* card_table_base = ctbs->card_table()->byte_map_base();\n-  if (card_table_base != nullptr) {\n-    return kit->makecon(TypeRawPtr::make((address)card_table_base));\n-  } else {\n-    return kit->null();\n-  }\n-}\n-\n@@ -490,0 +479,2 @@\n+  Node* tls = __ thread(); \/\/ ThreadLocalStorage\n+\n@@ -493,0 +484,4 @@\n+  Node* curr_ct_holder_offset = __ ConX(in_bytes(ShenandoahThreadLocalData::card_table_offset()));\n+  Node* curr_ct_holder_addr  = __ AddP(__ top(), tls, curr_ct_holder_offset);\n+  Node* curr_ct_base_addr = __ load( __ ctrl(), curr_ct_holder_addr, TypeRawPtr::NOTNULL, T_ADDRESS, Compile::AliasIdxRaw);\n+\n@@ -497,1 +492,1 @@\n-  Node* card_adr = __ AddP(__ top(), byte_map_base_node(kit), card_offset );\n+  Node* card_adr = __ AddP(__ top(), curr_ct_base_addr, card_offset);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -70,2 +70,0 @@\n-  Node* byte_map_base_node(GraphKit* kit) const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,2 +124,1 @@\n-  \/\/ Prevent resurrection of unreachable objects that are visited during\n-  \/\/ concurrent class-unloading.\n+  \/\/ Allow runtime to see unreachable objects that are visited during concurrent class-unloading.\n@@ -127,1 +126,1 @@\n-      _heap->is_evacuation_in_progress() &&\n+      _heap->is_concurrent_weak_root_in_progress() &&\n@@ -156,0 +155,1 @@\n+  \/\/ Uninitialized and no-keepalive stores do not need barrier.\n@@ -160,0 +160,8 @@\n+\n+  \/\/ Stores to weak\/phantom require no barrier. The original references would\n+  \/\/ have been enqueued in the SATB buffer by the load barrier if they were needed.\n+  if (HasDecorator<decorators, ON_WEAK_OOP_REF>::value ||\n+      HasDecorator<decorators, ON_PHANTOM_OOP_REF>::value) {\n+    return;\n+  }\n+\n@@ -264,0 +272,1 @@\n+  assert((decorators & ON_UNKNOWN_OOP_REF) == 0, \"Reference strength must be known\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1214,1 +1214,1 @@\n-    if (nm != nullptr && bs_nm != nullptr) {\n+    if (nm != nullptr) {\n@@ -1255,1 +1255,1 @@\n-  if (osr_nm != nullptr && bs_nm != nullptr) {\n+  if (osr_nm != nullptr) {\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1372,1 +1372,1 @@\n-    code->make_not_entrant();\n+    code->make_not_entrant(\"JVMCI reprofile\");\n@@ -1812,1 +1812,1 @@\n-    fst.current()->cb()->as_nmethod()->make_not_entrant();\n+    fst.current()->cb()->as_nmethod()->make_not_entrant(\"JVMCI materialize virtual objects\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -331,2 +331,1 @@\n-  volatile_nonstatic_field(ObjectMonitor,      _cxq,                                          ObjectWaiter*)                         \\\n-  volatile_nonstatic_field(ObjectMonitor,      _EntryList,                                    ObjectWaiter*)                         \\\n+  volatile_nonstatic_field(ObjectMonitor,      _entry_list,                                   ObjectWaiter*)                         \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3765,1 +3765,1 @@\n-      inv->make_not_entrant();\n+      inv->make_not_entrant(\"OSR invalidation of lower levels\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1009,1 +1009,1 @@\n-    nm->make_not_entrant();\n+    nm->make_not_entrant(\"set native function\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  ReturnNode( uint edges, Node *cntrl, Node *i_o, Node *memory, Node *retadr, Node *frameptr );\n+  ReturnNode(uint edges, Node* cntrl, Node* i_o, Node* memory, Node* frameptr, Node* retadr);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1123,0 +1123,1 @@\n+  ResourceMark rm;\n@@ -2115,0 +2116,40 @@\n+\/\/ Check if splitting a bot memory Phi through a parent MergeMem may lead to\n+\/\/ non-termination. For more details, see comments at the call site in\n+\/\/ PhiNode::Ideal.\n+bool PhiNode::is_split_through_mergemem_terminating() const {\n+  ResourceMark rm;\n+  VectorSet visited;\n+  GrowableArray<const Node*> worklist;\n+  worklist.push(this);\n+  visited.set(this->_idx);\n+  auto maybe_add_to_worklist = [&](Node* input) {\n+    if (input != nullptr &&\n+        (input->is_MergeMem() || input->is_memory_phi()) &&\n+        !visited.test_set(input->_idx)) {\n+      worklist.push(input);\n+      assert(input->adr_type() == TypePtr::BOTTOM,\n+          \"should only visit bottom memory\");\n+    }\n+  };\n+  while (worklist.length() > 0) {\n+    const Node* n = worklist.pop();\n+    if (n->is_MergeMem()) {\n+      Node* input = n->as_MergeMem()->base_memory();\n+      if (input == this) {\n+        return false;\n+      }\n+      maybe_add_to_worklist(input);\n+    } else {\n+      assert(n->is_memory_phi(), \"invariant\");\n+      for (uint i = PhiNode::Input; i < n->req(); i++) {\n+        Node* input = n->in(i);\n+        if (input == this) {\n+          return false;\n+        }\n+        maybe_add_to_worklist(input);\n+      }\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -2419,1 +2460,30 @@\n-    \/\/ see if this phi should be sliced\n+\n+    \/\/ See if this Phi should be sliced. Determine the merge width of input\n+    \/\/ MergeMems and check if there is a direct loop to self, as illustrated\n+    \/\/ below.\n+    \/\/\n+    \/\/               +-------------+\n+    \/\/               |             |\n+    \/\/ (base_memory) v             |\n+    \/\/              MergeMem       |\n+    \/\/                 |           |\n+    \/\/                 v           |\n+    \/\/                Phi (this)   |\n+    \/\/                 |           |\n+    \/\/                 +-----------+\n+    \/\/\n+    \/\/ Generally, there are issues with non-termination with such circularity\n+    \/\/ (see comment further below). However, if there is a direct loop to self,\n+    \/\/ splitting the Phi through the MergeMem will result in the below.\n+    \/\/\n+    \/\/               +---+\n+    \/\/               |   |\n+    \/\/               v   |\n+    \/\/              Phi  |\n+    \/\/               |\\  |\n+    \/\/               | +-+\n+    \/\/ (base_memory) v\n+    \/\/              MergeMem\n+    \/\/\n+    \/\/ This split breaks the circularity and consequently does not lead to\n+    \/\/ non-termination.\n@@ -2421,1 +2491,0 @@\n-    bool saw_self = false;\n@@ -2424,0 +2493,1 @@\n+    bool split_always_terminates = false; \/\/ Is splitting guaranteed to terminate?\n@@ -2435,1 +2505,3 @@\n-        saw_self = saw_self || (n->base_memory() == this);\n+        if (n->base_memory() == this) {\n+          split_always_terminates = true;\n+        }\n@@ -2441,2 +2513,24 @@\n-    \/\/ This restriction is temporarily necessary to ensure termination:\n-    if (!mergemem_only && !saw_self && adr_type() == TypePtr::BOTTOM)  merge_width = 0;\n+    \/\/ There are cases with circular dependencies between bottom Phis\n+    \/\/ and MergeMems. Below is a minimal example.\n+    \/\/\n+    \/\/               +------------+\n+    \/\/               |            |\n+    \/\/ (base_memory) v            |\n+    \/\/              MergeMem      |\n+    \/\/                 |          |\n+    \/\/                 v          |\n+    \/\/                Phi (this)  |\n+    \/\/                 |          |\n+    \/\/                 v          |\n+    \/\/                Phi         |\n+    \/\/                 |          |\n+    \/\/                 +----------+\n+    \/\/\n+    \/\/ Here, we cannot break the circularity through a self-loop as there\n+    \/\/ are two Phis involved. Repeatedly splitting the Phis through the\n+    \/\/ MergeMem leads to non-termination. We check for non-termination below.\n+    \/\/ Only check for non-termination if necessary.\n+    if (!mergemem_only && !split_always_terminates && adr_type() == TypePtr::BOTTOM &&\n+        merge_width > Compile::AliasIdxRaw) {\n+      split_always_terminates = is_split_through_mergemem_terminating();\n+    }\n@@ -2474,4 +2568,3 @@\n-      } else {\n-        \/\/ We know that at least one MergeMem->base_memory() == this\n-        \/\/ (saw_self == true). If all other inputs also references this phi\n-        \/\/ (directly or through data nodes) - it is a dead loop.\n+      } else if (split_always_terminates) {\n+        \/\/ If all inputs reference this phi (directly or through data nodes) -\n+        \/\/ it is a dead loop.\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":102,"deletions":9,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,0 +188,2 @@\n+  bool is_split_through_mergemem_terminating() const;\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -410,0 +410,3 @@\n+  if (dead->for_merge_stores_igvn()) {\n+    remove_from_merge_stores_igvn(dead);\n+  }\n@@ -470,0 +473,1 @@\n+  remove_useless_nodes(_for_merge_stores_igvn, useful); \/\/ remove useless node recorded for merge stores IGVN pass\n@@ -644,0 +648,1 @@\n+      _merge_stores_phase(false),\n@@ -670,0 +675,1 @@\n+      _for_merge_stores_igvn(comp_arena(), 8, 0, nullptr),\n@@ -932,0 +938,1 @@\n+      _merge_stores_phase(false),\n@@ -951,0 +958,1 @@\n+      _for_merge_stores_igvn(comp_arena(), 8, 0, nullptr),\n@@ -2342,0 +2350,43 @@\n+void Compile::record_for_merge_stores_igvn(Node* n) {\n+  if (!n->for_merge_stores_igvn()) {\n+    assert(!_for_merge_stores_igvn.contains(n), \"duplicate\");\n+    n->add_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+    _for_merge_stores_igvn.append(n);\n+  }\n+}\n+\n+void Compile::remove_from_merge_stores_igvn(Node* n) {\n+  n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+  _for_merge_stores_igvn.remove(n);\n+}\n+\n+\/\/ We need to wait with merging stores until RangeCheck smearing has removed the RangeChecks during\n+\/\/ the post loops IGVN phase. If we do it earlier, then there may still be some RangeChecks between\n+\/\/ the stores, and we merge the wrong sequence of stores.\n+\/\/ Example:\n+\/\/   StoreI RangeCheck StoreI StoreI RangeCheck StoreI\n+\/\/ Apply MergeStores:\n+\/\/   StoreI RangeCheck [   StoreL  ] RangeCheck StoreI\n+\/\/ Remove more RangeChecks:\n+\/\/   StoreI            [   StoreL  ]            StoreI\n+\/\/ But now it would have been better to do this instead:\n+\/\/   [         StoreL       ] [       StoreL         ]\n+\/\/\n+\/\/ Note: we allow stores to merge in this dedicated IGVN round, and any later IGVN round,\n+\/\/       since we never unset _merge_stores_phase.\n+void Compile::process_for_merge_stores_igvn(PhaseIterGVN& igvn) {\n+  C->set_merge_stores_phase();\n+\n+  if (_for_merge_stores_igvn.length() > 0) {\n+    while (_for_merge_stores_igvn.length() > 0) {\n+      Node* n = _for_merge_stores_igvn.pop();\n+      n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+      igvn._worklist.push(n);\n+    }\n+    igvn.optimize();\n+    if (failing()) return;\n+    assert(_for_merge_stores_igvn.length() == 0, \"no more delayed nodes allowed\");\n+    print_method(PHASE_AFTER_MERGE_STORES, 3);\n+  }\n+}\n+\n@@ -2910,0 +2961,2 @@\n+  process_for_merge_stores_igvn(igvn);\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -323,0 +323,1 @@\n+  bool                  _merge_stores_phase;    \/\/ Phase for merging stores, after post loop opts phase.\n@@ -384,0 +385,1 @@\n+  GrowableArray<Node*>  _for_merge_stores_igvn; \/\/ List of nodes for IGVN merge stores\n@@ -795,0 +797,6 @@\n+  bool     merge_stores_phase() { return _merge_stores_phase;  }\n+  void set_merge_stores_phase() { _merge_stores_phase = true;  }\n+  void record_for_merge_stores_igvn(Node* n);\n+  void remove_from_merge_stores_igvn(Node* n);\n+  void process_for_merge_stores_igvn(PhaseIterGVN& igvn);\n+\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4817,0 +4817,3 @@\n+    } else if (n->Opcode() == Op_StrInflatedCopy) {\n+      \/\/ Check direct uses of StrInflatedCopy.\n+      \/\/ It is memory type Node - no special SCMemProj node.\n@@ -4826,0 +4829,4 @@\n+#ifdef ASSERT\n+      if (!n->is_Mem()) {\n+        n->dump();\n+      }\n@@ -4827,0 +4834,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"opto\/opcodes.hpp\"\n@@ -2494,1 +2495,2 @@\n-      assert(outer->outcnt() >= phis + 2 - be_loads && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n+      \/\/ TODO: 8353717\n+      \/\/assert(outer->outcnt() >= phis + 2 - be_loads && outer->outcnt() <= phis + 2 + stores + 1, \"only phis\");\n@@ -2734,0 +2736,14 @@\n+IfNode* CountedLoopNode::find_multiversion_if_from_multiversion_fast_main_loop() {\n+  assert(is_main_loop() && is_multiversion_fast_loop(), \"must be multiversion fast main loop\");\n+  CountedLoopEndNode* pre_end = find_pre_loop_end();\n+  if (pre_end == nullptr) { return nullptr; }\n+  Node* pre_entry = pre_end->loopnode()->in(LoopNode::EntryControl);\n+  const Predicates predicates(pre_entry);\n+  IfTrueNode* before_predicates = predicates.entry()->isa_IfTrue();\n+  if (before_predicates != nullptr &&\n+      before_predicates->in(0)->in(1)->is_OpaqueMultiversioning()) {\n+    return before_predicates->in(0)->as_If();\n+  }\n+  return nullptr;\n+}\n+\n@@ -4489,1 +4505,1 @@\n-void PhaseIdealLoop::eliminate_useless_template_assertion_predicates(Unique_Node_List& useful_predicates) {\n+void PhaseIdealLoop::eliminate_useless_template_assertion_predicates(Unique_Node_List& useful_predicates) const {\n@@ -4494,2 +4510,1 @@\n-      ConINode* one = intcon(1);\n-      _igvn.replace_node(opaque_node, one);\n+      opaque_node->mark_useless(_igvn);\n@@ -4539,0 +4554,42 @@\n+void PhaseIdealLoop::eliminate_useless_multiversion_if() {\n+  if (_multiversion_opaque_nodes.size() == 0) {\n+    return;\n+  }\n+\n+  ResourceMark rm;\n+  Unique_Node_List useful_multiversioning_opaque_nodes;\n+\n+  \/\/ The OpaqueMultiversioning is only used from the fast main loop in AutoVectorization, to add\n+  \/\/ speculative runtime-checks to the multiversion_if. Thus, a OpaqueMultiversioning is only\n+  \/\/ useful if it can be found from a fast main loop. If it can not be found from a fast main loop,\n+  \/\/ then we cannot ever use that multiversion_if to add more speculative runtime-checks, and hence\n+  \/\/ it is useless. If it is still in delayed mode, i.e. has not yet had any runtime-checks added,\n+  \/\/ then we can let it constant fold towards the fast loop.\n+  for (LoopTreeIterator iter(_ltree_root); !iter.done(); iter.next()) {\n+    IdealLoopTree* lpt = iter.current();\n+    if (lpt->_child == nullptr && lpt->is_counted()) {\n+      CountedLoopNode* head = lpt->_head->as_CountedLoop();\n+      if (head->is_main_loop() && head->is_multiversion_fast_loop()) {\n+        \/\/ There are fast_loop pre\/main\/post loops, but the finding traversal starts at the main\n+        \/\/ loop, and traverses via the fast pre loop to the multiversion_if.\n+        IfNode* multiversion_if = head->find_multiversion_if_from_multiversion_fast_main_loop();\n+        if (multiversion_if != nullptr) {\n+            useful_multiversioning_opaque_nodes.push(multiversion_if->in(1)->as_OpaqueMultiversioning());\n+        }\n+      }\n+    }\n+  }\n+\n+  for (uint i = 0; i < _multiversion_opaque_nodes.size(); i++) {\n+    OpaqueMultiversioningNode* opaque = _multiversion_opaque_nodes.at(i)->as_OpaqueMultiversioning();\n+    if (!useful_multiversioning_opaque_nodes.member(opaque)) {\n+      if (opaque->is_delayed_slow_loop()) {\n+        \/\/ We cannot hack the node directly, otherwise the slow_loop will complain that it cannot\n+        \/\/ find the multiversioning opaque node. Instead, we mark the opaque node as useless, and\n+        \/\/ it can be constant folded during IGVN.\n+        opaque->mark_useless(_igvn);\n+      }\n+    }\n+  }\n+}\n+\n@@ -4808,0 +4865,1 @@\n+  eliminate_useless_multiversion_if();\n@@ -6599,0 +6657,3 @@\n+  if (!_verify_only && n->Opcode() == Op_OpaqueMultiversioning) {\n+    _multiversion_opaque_nodes.push(n);\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":65,"deletions":4,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -296,0 +296,2 @@\n+  IfNode* find_multiversion_if_from_multiversion_fast_main_loop();\n+\n@@ -939,0 +941,1 @@\n+  Node_List _multiversion_opaque_nodes;\n@@ -1457,1 +1460,1 @@\n-  void eliminate_useless_template_assertion_predicates(Unique_Node_List& useful_predicates);\n+  void eliminate_useless_template_assertion_predicates(Unique_Node_List& useful_predicates) const;\n@@ -1460,0 +1463,1 @@\n+  void eliminate_useless_multiversion_if();\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -805,1 +805,10 @@\n-  assert(bol->Opcode() == Op_Bool, \"Unexpected node\");\n+  if (bol->is_OpaqueMultiversioning()) {\n+    assert(bol->as_OpaqueMultiversioning()->is_useless(), \"Must be useless, i.e. fast main loop has already disappeared.\");\n+    \/\/ Ignore multiversion_if that just lost its loops. The OpaqueMultiversioning is marked useless,\n+    \/\/ and will make the multiversion_if constant fold in the next IGVN round.\n+    return nullptr;\n+  }\n+  if (!bol->is_Bool()) {\n+    assert(false, \"Expected Bool, but got %s\", NodeClassNames[bol->Opcode()]);\n+    return nullptr;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2844,0 +2844,21 @@\n+  \/\/ State machine with initial state Unknown\n+  \/\/ Allowed transitions:\n+  \/\/   Unknown     -> Const\n+  \/\/   Unknown     -> Platform\n+  \/\/   Unknown     -> Reverse\n+  \/\/   Unknown     -> NotAdjacent\n+  \/\/   Const       -> Const\n+  \/\/   Const       -> NotAdjacent\n+  \/\/   Platform    -> Platform\n+  \/\/   Platform    -> NotAdjacent\n+  \/\/   Reverse     -> Reverse\n+  \/\/   Reverse     -> NotAdjacent\n+  \/\/   NotAdjacent -> NotAdjacent\n+  enum ValueOrder : uint8_t {\n+    Unknown,     \/\/ Initial state\n+    Const,       \/\/ Input values are const\n+    Platform,    \/\/ Platform order\n+    Reverse,     \/\/ Reverse platform order\n+    NotAdjacent  \/\/ Not adjacent\n+  };\n+  ValueOrder  _value_order;\n@@ -2849,1 +2870,1 @@\n-    _phase(phase), _store(store)\n+    _phase(phase), _store(store), _value_order(ValueOrder::Unknown)\n@@ -2859,1 +2880,1 @@\n-  static bool is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out);\n+  static bool is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out, PhaseGVN* phase);\n@@ -2895,0 +2916,1 @@\n+  enum ValueOrder find_adjacent_input_value_order(const Node* n1, const Node* n2, const int memory_size) const;\n@@ -2956,1 +2978,2 @@\n-  if (status_def.found_store() == nullptr) {\n+  Node* def_store = status_def.found_store();\n+  if (def_store == nullptr) {\n@@ -2960,0 +2983,6 @@\n+  \/\/ Initialize value order\n+  _value_order = find_adjacent_input_value_order(def_store->in(MemNode::ValueIn),\n+                                                 _store->in(MemNode::ValueIn),\n+                                                 _store->memory_size());\n+  assert(_value_order != ValueOrder::NotAdjacent && _value_order != ValueOrder::Unknown, \"Order should be checked\");\n+\n@@ -3006,1 +3035,3 @@\n-bool MergePrimitiveStores::is_adjacent_input_pair(const Node* n1, const Node* n2, const int memory_size) const {\n+\/\/ Check input values n1 and n2 can be merged and return the value order\n+MergePrimitiveStores::ValueOrder MergePrimitiveStores::find_adjacent_input_value_order(const Node* n1, const Node* n2,\n+                                                                                       const int memory_size) const {\n@@ -3008,2 +3039,2 @@\n-  if (n1->Opcode() == Op_ConI) {\n-    return n2->Opcode() == Op_ConI;\n+  if (n1->Opcode() == Op_ConI && n2->Opcode() == Op_ConI) {\n+    return ValueOrder::Const;\n@@ -3012,7 +3043,1 @@\n-  \/\/ Pattern: [n1 = base >> shift, n2 = base >> (shift + memory_size)]\n-#ifndef VM_LITTLE_ENDIAN\n-  \/\/ Pattern: [n1 = base >> (shift + memory_size), n2 = base >> shift]\n-  \/\/ Swapping n1 with n2 gives same pattern as on little endian platforms.\n-  swap(n1, n2);\n-#endif \/\/ !VM_LITTLE_ENDIAN\n-  Node const* base_n2;\n+  Node const *base_n2;\n@@ -3020,2 +3045,2 @@\n-  if (!is_con_RShift(n2, base_n2, shift_n2)) {\n-    return false;\n+  if (!is_con_RShift(n2, base_n2, shift_n2, _phase)) {\n+    return ValueOrder::NotAdjacent;\n@@ -3023,5 +3048,1 @@\n-  if (n1->Opcode() == Op_ConvL2I) {\n-    \/\/ look through\n-    n1 = n1->in(1);\n-  }\n-  Node const* base_n1;\n+  Node const *base_n1;\n@@ -3029,6 +3050,2 @@\n-  if (n1 == base_n2) {\n-    \/\/ n1 = base = base >> 0\n-    base_n1 = n1;\n-    shift_n1 = 0;\n-  } else if (!is_con_RShift(n1, base_n1, shift_n1)) {\n-    return false;\n+  if (!is_con_RShift(n1, base_n1, shift_n1, _phase)) {\n+    return ValueOrder::NotAdjacent;\n@@ -3036,0 +3053,1 @@\n+\n@@ -3038,1 +3056,1 @@\n-      shift_n1 + bits_per_store != shift_n2 ||\n+      abs(shift_n1 - shift_n2) != bits_per_store ||\n@@ -3040,1 +3058,2 @@\n-    return false;\n+    \/\/ Values are not adjacent\n+    return ValueOrder::NotAdjacent;\n@@ -3043,2 +3062,38 @@\n-  \/\/ both load from same value with correct shift\n-  return true;\n+  \/\/ Detect value order\n+#ifdef VM_LITTLE_ENDIAN\n+  return shift_n1 < shift_n2 ? ValueOrder::Platform     \/\/ Pattern: [n1 = base >> shift, n2 = base >> (shift + memory_size)]\n+                             : ValueOrder::Reverse;     \/\/ Pattern: [n1 = base >> (shift + memory_size), n2 = base >> shift]\n+#else\n+  return shift_n1 > shift_n2 ? ValueOrder::Platform     \/\/ Pattern: [n1 = base >> (shift + memory_size), n2 = base >> shift]\n+                             : ValueOrder::Reverse;     \/\/ Pattern: [n1 = base >> shift, n2 = base >> (shift + memory_size)]\n+#endif\n+}\n+\n+bool MergePrimitiveStores::is_adjacent_input_pair(const Node* n1, const Node* n2, const int memory_size) const {\n+  ValueOrder input_value_order = find_adjacent_input_value_order(n1, n2, memory_size);\n+\n+  switch (input_value_order) {\n+    case ValueOrder::NotAdjacent:\n+      return false;\n+    case ValueOrder::Reverse:\n+      if (memory_size != 1 ||\n+          !Matcher::match_rule_supported(Op_ReverseBytesS) ||\n+          !Matcher::match_rule_supported(Op_ReverseBytesI) ||\n+          !Matcher::match_rule_supported(Op_ReverseBytesL)) {\n+        \/\/ ReverseBytes are not supported by platform\n+        return false;\n+      }\n+      \/\/ fall-through.\n+    case ValueOrder::Const:\n+    case ValueOrder::Platform:\n+      if (_value_order == ValueOrder::Unknown) {\n+        \/\/ Initial state is Unknown, and we find a valid input value order\n+        return true;\n+      }\n+      \/\/ The value order can not be changed\n+      return _value_order == input_value_order;\n+    case ValueOrder::Unknown:\n+    default:\n+      ShouldNotReachHere();\n+  }\n+  return false;\n@@ -3048,1 +3103,1 @@\n-bool MergePrimitiveStores::is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out) {\n+bool MergePrimitiveStores::is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out, PhaseGVN* phase) {\n@@ -3067,0 +3122,8 @@\n+\n+  if (phase->type(n)->isa_int()  != nullptr ||\n+      phase->type(n)->isa_long() != nullptr) {\n+    \/\/ (base >> 0)\n+    base_out = n;\n+    shift_out = 0;\n+    return true;\n+  }\n@@ -3233,0 +3296,1 @@\n+    assert(_value_order == ValueOrder::Const, \"must match\");\n@@ -3249,0 +3313,1 @@\n+    assert(_value_order == ValueOrder::Platform || _value_order == ValueOrder::Reverse, \"must match\");\n@@ -3259,0 +3324,3 @@\n+    if (_value_order == ValueOrder::Reverse) {\n+      swap(hi, lo);\n+    }\n@@ -3262,1 +3330,1 @@\n-    bool is_true = is_con_RShift(hi, hi_base, hi_shift);\n+    bool is_true = is_con_RShift(hi, hi_base, hi_shift, _phase);\n@@ -3288,0 +3356,11 @@\n+  if (_value_order == ValueOrder::Reverse) {\n+    assert(_store->memory_size() == 1, \"only implemented for bytes\");\n+    if (new_memory_size == 8) {\n+      merged_input_value = _phase->transform(new ReverseBytesLNode(merged_input_value));\n+    } else if (new_memory_size == 4) {\n+      merged_input_value = _phase->transform(new ReverseBytesINode(merged_input_value));\n+    } else {\n+      assert(new_memory_size == 2, \"sanity check\");\n+      merged_input_value = _phase->transform(new ReverseBytesSNode(merged_input_value));\n+    }\n+  }\n@@ -3443,1 +3522,1 @@\n-    if (phase->C->post_loop_opts_phase()) {\n+    if (phase->C->merge_stores_phase()) {\n@@ -3448,1 +3527,12 @@\n-      phase->C->record_for_post_loop_opts_igvn(this);\n+      \/\/ We need to wait with merging stores until RangeCheck smearing has removed the RangeChecks during\n+      \/\/ the post loops IGVN phase. If we do it earlier, then there may still be some RangeChecks between\n+      \/\/ the stores, and we merge the wrong sequence of stores.\n+      \/\/ Example:\n+      \/\/   StoreI RangeCheck StoreI StoreI RangeCheck StoreI\n+      \/\/ Apply MergeStores:\n+      \/\/   StoreI RangeCheck [   StoreL  ] RangeCheck StoreI\n+      \/\/ Remove more RangeChecks:\n+      \/\/   StoreI            [   StoreL  ]            StoreI\n+      \/\/ But now it would have been better to do this instead:\n+      \/\/   [         StoreL       ] [       StoreL         ]\n+      phase->C->record_for_merge_stores_igvn(this);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":124,"deletions":34,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -512,0 +512,5 @@\n+  if (for_merge_stores_igvn()) {\n+    \/\/ Don't add cloned node to Compile::_for_merge_stores_igvn list automatically.\n+    \/\/ If it is applicable, it will happen anyway when the cloned node is registered with IGVN.\n+    n->remove_flag(Node::NodeFlags::Flag_for_merge_stores_igvn);\n+  }\n@@ -625,0 +630,3 @@\n+  if (for_merge_stores_igvn()) {\n+    compile->remove_from_merge_stores_igvn(this);\n+  }\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -842,2 +842,3 @@\n-    Flag_is_removed_by_peephole      = 1 << 16,\n-    Flag_is_predicated_using_blend   = 1 << 17,\n+    Flag_for_merge_stores_igvn       = 1 << 16,\n+    Flag_is_removed_by_peephole      = 1 << 17,\n+    Flag_is_predicated_using_blend   = 1 << 18,\n@@ -1092,0 +1093,1 @@\n+  bool for_merge_stores_igvn() const { return (_flags & Flag_for_merge_stores_igvn) != 0; }\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+  flags(AFTER_MERGE_STORES,             \"After Merge Stores\") \\\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3950,1 +3950,1 @@\n-  OopHandle& list_head = ObjectMonitor::vthread_cxq_head();\n+  OopHandle& list_head = ObjectMonitor::vthread_list_head();\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -791,1 +791,1 @@\n-                nm->make_not_entrant();\n+                nm->make_not_entrant(\"Whitebox deoptimization\");\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1916,1 +1916,1 @@\n-  nm->make_not_entrant();\n+  nm->make_not_entrant(\"missing exception handler\");\n@@ -2545,1 +2545,1 @@\n-      if (!nm->make_not_entrant()) {\n+      if (!nm->make_not_entrant(\"uncommon trap\")) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1593,1 +1593,1 @@\n-  develop(intx, StopInterpreterAt, 0,                                       \\\n+  develop(uintx, StopInterpreterAt, 0,                                      \\\n@@ -1596,1 +1596,1 @@\n-  develop(intx, TraceBytecodesAt, 0,                                        \\\n+  develop(uintx, TraceBytecodesAt, 0,                                       \\\n@@ -1599,1 +1599,1 @@\n-  develop(intx, TraceBytecodesStopAt, 0,                                    \\\n+  develop(uintx, TraceBytecodesStopAt, 0,                                   \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1346,1 +1346,1 @@\n-      nm->make_not_entrant();\n+      nm->make_not_entrant(\"zombie\");\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,4 +79,8 @@\n-  size_t count = Atomic::add(&_count, 1u);\n-  if (count > max()) {\n-    Atomic::inc(&_max);\n-  }\n+  size_t count = Atomic::add(&_count, 1u, memory_order_relaxed);\n+  size_t old_max;\n+  do {\n+    old_max = Atomic::load(&_max);\n+    if (count <= old_max) {\n+      break;\n+    }\n+  } while (Atomic::cmpxchg(&_max, old_max, count, memory_order_relaxed) != old_max);\n@@ -386,1 +390,1 @@\n-      \/\/ to the entrylist here and now, avoiding the slow-path.\n+      \/\/ to the entry_list here and now, avoiding the slow-path.\n@@ -394,1 +398,1 @@\n-        mon->INotify(current);\n+        mon->notify_internal(current);\n@@ -428,4 +432,0 @@\n-  if (LockingMode == LM_LIGHTWEIGHT) {\n-    return LightweightSynchronizer::quick_enter(obj, lock, current);\n-  }\n-\n@@ -1361,0 +1361,8 @@\n+size_t ObjectSynchronizer::in_use_list_count() {\n+  return _in_use_list.count();\n+}\n+\n+size_t ObjectSynchronizer::in_use_list_max() {\n+  return _in_use_list.max();\n+}\n+\n@@ -1468,1 +1476,5 @@\n-  event->set_monitorClass(obj->klass());\n+  const Klass* monitor_klass = obj->klass();\n+  if (ObjectMonitor::is_jfr_excluded(monitor_klass)) {\n+    return;\n+  }\n+  event->set_monitorClass(monitor_klass);\n@@ -1762,2 +1774,2 @@\n-  size_t count() const   { return ObjectSynchronizer::_in_use_list.count(); }\n-  size_t max() const     { return ObjectSynchronizer::_in_use_list.max(); }\n+  size_t count() const   { return ObjectSynchronizer::in_use_list_count(); }\n+  size_t max() const     { return ObjectSynchronizer::in_use_list_max(); }\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -524,0 +524,2 @@\n+  nonstatic_field(CodeBlob,                    _mutable_data,                                 address)                               \\\n+  nonstatic_field(CodeBlob,                    _mutable_data_size,                            int)                                   \\\n@@ -546,2 +548,1 @@\n-  nonstatic_field(nmethod,                     _metadata_offset,                              u2)                                    \\\n-  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                    \\\n+  nonstatic_field(nmethod,                     _scopes_pcs_offset,                            int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -248,1 +248,1 @@\n-        ZERO(\"zero\"),\n+        CONSTANT(\"constant\"),\n@@ -379,1 +379,1 @@\n-        \/\/ Make a blank lambda form, which returns a constant zero or null.\n+        \/\/ Make a dummy blank lambda form.\n@@ -382,9 +382,1 @@\n-        int arity = mt.parameterCount();\n-        int result = (mt.returnType() == void.class || mt.returnType() == Void.class) ? VOID_RESULT : arity;\n-        Name[] names = buildEmptyNames(arity, mt, result == VOID_RESULT);\n-        boolean canInterpret = normalizeNames(arity, names);\n-        LambdaForm form = new LambdaForm(arity, result, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, names, Kind.ZERO);\n-        assert(form.nameRefsAreLegal() && form.isEmpty() && isValidSignature(form.basicTypeSignature()));\n-        if (!canInterpret) {\n-            form.compileToBytecode();\n-        }\n+        LambdaForm form = new LambdaForm(0, 0, DEFAULT_FORCE_INLINE, DEFAULT_CUSTOMIZED, new Name[0], Kind.GENERIC);\n@@ -394,10 +386,0 @@\n-    private static Name[] buildEmptyNames(int arity, MethodType mt, boolean isVoid) {\n-        Name[] names = arguments(isVoid ? 0 : 1, mt);\n-        if (!isVoid) {\n-            Name zero = new Name(constantZero(basicType(mt.returnType())));\n-            names[arity] = zero.withIndex(arity);\n-        }\n-        assert(namesOK(arity, names));\n-        return names;\n-    }\n-\n@@ -1018,9 +1000,0 @@\n-    private boolean isEmpty() {\n-        if (result < 0)\n-            return (names.length == arity);\n-        else if (result == arity && names.length == arity + 1)\n-            return names[arity].isConstantZero();\n-        else\n-            return false;\n-    }\n-\n@@ -1258,4 +1231,0 @@\n-        public boolean isConstantZero() {\n-            return this.equals(constantZero(returnType()));\n-        }\n-\n@@ -1460,3 +1429,0 @@\n-        boolean isConstantZero() {\n-            return !isParam() && arguments.length == 0 && function.isConstantZero();\n-        }\n@@ -1669,1 +1635,1 @@\n-        createFormsFor(type);\n+        createIdentityForm(type);\n@@ -1673,10 +1639,0 @@\n-    static LambdaForm zeroForm(BasicType type) {\n-        int ord = type.ordinal();\n-        LambdaForm form = LF_zero[ord];\n-        if (form != null) {\n-            return form;\n-        }\n-        createFormsFor(type);\n-        return LF_zero[ord];\n-    }\n-\n@@ -1689,1 +1645,1 @@\n-        createFormsFor(type);\n+        createIdentityForm(type);\n@@ -1693,8 +1649,14 @@\n-    static NamedFunction constantZero(BasicType type) {\n-        int ord = type.ordinal();\n-        NamedFunction function = NF_zero[ord];\n-        if (function != null) {\n-            return function;\n-        }\n-        createFormsFor(type);\n-        return NF_zero[ord];\n+    static LambdaForm constantForm(BasicType type) {\n+        assert type != null && type != V_TYPE : type;\n+        var cached = LF_constant[type.ordinal()];\n+        if (cached != null)\n+            return cached;\n+        return createConstantForm(type);\n+    }\n+\n+    private static LambdaForm createConstantForm(BasicType type) {\n+        UNSAFE.ensureClassInitialized(BoundMethodHandle.class); \/\/ defend access to SimpleMethodHandle\n+        var species = SimpleMethodHandle.BMH_SPECIES.extendWith(type);\n+        var carrier = argument(0, L_TYPE).withConstraint(species); \/\/ BMH bound with data\n+        Name[] constNames = new Name[] { carrier, new Name(species.getterFunction(0), carrier) };\n+        return LF_constant[type.ordinal()] = create(1, constNames, Kind.CONSTANT);\n@@ -1704,2 +1666,1 @@\n-    private static final @Stable LambdaForm[] LF_zero = new LambdaForm[TYPE_LIMIT];\n-    private static final @Stable NamedFunction[] NF_zero = new NamedFunction[TYPE_LIMIT];\n+    private static final @Stable LambdaForm[] LF_constant = new LambdaForm[ARG_TYPE_LIMIT]; \/\/ no void\n@@ -1708,2 +1669,2 @@\n-    private static final Object createFormsLock = new Object();\n-    private static void createFormsFor(BasicType type) {\n+    private static final Object createIdentityFormLock = new Object();\n+    private static void createIdentityForm(BasicType type) {\n@@ -1712,1 +1673,1 @@\n-        synchronized (createFormsLock) {\n+        synchronized (createIdentityFormLock) {\n@@ -1721,2 +1682,1 @@\n-            MethodType zeType = MethodType.methodType(btClass);\n-            MethodType idType = (isVoid) ? zeType : MethodType.methodType(btClass, btClass);\n+            MethodType idType = (isVoid) ? MethodType.methodType(btClass) : MethodType.methodType(btClass, btClass);\n@@ -1726,2 +1686,0 @@\n-            \/\/ Zero is built from a call to an identity function with a constant zero input.\n-            MemberName zeMem = null;\n@@ -1731,4 +1689,0 @@\n-                if (!isVoid) {\n-                    zeMem = new MemberName(LambdaForm.class, \"zero_\"+btChar, zeType, REF_invokeStatic);\n-                    zeMem = IMPL_NAMES.resolveOrFail(REF_invokeStatic, zeMem, null, LM_TRUSTED, NoSuchMethodException.class);\n-                }\n@@ -1740,2 +1694,0 @@\n-            LambdaForm zeForm;\n-            NamedFunction zeFun;\n@@ -1750,3 +1702,0 @@\n-\n-                zeForm = idForm;\n-                zeFun = idFun;\n@@ -1757,1 +1706,1 @@\n-                idFun = new NamedFunction(idMem, MethodHandleImpl.makeIntrinsic(SimpleMethodHandle.make(idMem.getInvocationType(), idForm),\n+                idFun = new NamedFunction(idMem, MethodHandleImpl.makeIntrinsic(idMem.getInvocationType(), idForm,\n@@ -1759,7 +1708,0 @@\n-\n-                Object zeValue = Wrapper.forBasicType(btChar).zero();\n-                Name[] zeNames = new Name[] { argument(0, L_TYPE), new Name(idFun, zeValue) };\n-                zeForm = LambdaForm.create(1, zeNames, 1, Kind.ZERO);\n-                zeForm.compileToBytecode();\n-                zeFun = new NamedFunction(zeMem, MethodHandleImpl.makeIntrinsic(SimpleMethodHandle.make(zeMem.getInvocationType(), zeForm),\n-                        MethodHandleImpl.Intrinsic.ZERO));\n@@ -1768,2 +1710,0 @@\n-            LF_zero[ord] = zeForm;\n-            NF_zero[ord] = zeFun;\n@@ -1774,2 +1714,0 @@\n-            assert(zeFun.isConstantZero());\n-            assert(new Name(zeFun).isConstantZero());\n@@ -1786,6 +1724,0 @@\n-    private static int zero_I() { return 0; }\n-    private static long zero_J() { return 0; }\n-    private static float zero_F() { return 0; }\n-    private static double zero_D() { return 0; }\n-    private static Object zero_L() { return null; }\n-\n@@ -1821,1 +1753,1 @@\n-    \/* Placeholder class for zero and identity forms generated ahead of time *\/\n+    \/* Placeholder class for identity and constant forms generated ahead of time *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":27,"deletions":95,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -1347,1 +1347,0 @@\n-        ZERO,\n@@ -2243,0 +2242,23 @@\n+    \/\/ type is validated, value is not\n+    static MethodHandle makeConstantReturning(Class<?> type, Object value) {\n+        var callType = MethodType.methodType(type);\n+        var basicType = BasicType.basicType(type);\n+        var form = constantForm(basicType);\n+\n+        if (type.isPrimitive()) {\n+            assert type != void.class;\n+            var wrapper = Wrapper.forPrimitiveType(type);\n+            var v = wrapper.convert(value, type); \/\/ throws CCE\n+            return switch (wrapper) {\n+                case INT    -> BoundMethodHandle.bindSingleI(callType, form, (int) v);\n+                case LONG   -> BoundMethodHandle.bindSingleJ(callType, form, (long) v);\n+                case FLOAT  -> BoundMethodHandle.bindSingleF(callType, form, (float) v);\n+                case DOUBLE -> BoundMethodHandle.bindSingleD(callType, form, (double) v);\n+                default -> BoundMethodHandle.bindSingleI(callType, form, ValueConversions.widenSubword(v));\n+            };\n+        }\n+\n+        var v = type.cast(value); \/\/ throws CCE\n+        return BoundMethodHandle.bindSingleL(callType, form, v);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -67,3 +68,1 @@\n-import static java.lang.invoke.MethodHandleStatics.UNSAFE;\n-import static java.lang.invoke.MethodHandleStatics.newIllegalArgumentException;\n-import static java.lang.invoke.MethodHandleStatics.newInternalError;\n+import static java.lang.invoke.MethodHandleStatics.*;\n@@ -4834,13 +4833,3 @@\n-        if (type.isPrimitive()) {\n-            if (type == void.class)\n-                throw newIllegalArgumentException(\"void type\");\n-            Wrapper w = Wrapper.forPrimitiveType(type);\n-            value = w.convert(value, type);\n-            if (w.zero().equals(value))\n-                return zero(w, type);\n-            return insertArguments(identity(type), 0, value);\n-        } else {\n-            if (value == null)\n-                return zero(Wrapper.OBJECT, type);\n-            return identity(type).bindTo(value);\n-        }\n+        if (Objects.requireNonNull(type) == void.class)\n+            throw newIllegalArgumentException(\"void type\");\n+        return MethodHandleImpl.makeConstantReturning(type, value);\n@@ -4888,1 +4877,2 @@\n-        return type.isPrimitive() ?  zero(Wrapper.forPrimitiveType(type), type) : zero(Wrapper.OBJECT, type);\n+        return type.isPrimitive() ? primitiveZero(Wrapper.forPrimitiveType(type))\n+                : MethodHandleImpl.makeConstantReturning(type, null);\n@@ -4907,1 +4897,1 @@\n-     * @see MethodHandles#zero\n+     * @see MethodHandles#primitiveZero\n@@ -4918,1 +4908,1 @@\n-        MethodType mtype = methodType(ptype, ptype);\n+        MethodType mtype = methodType(ptype, ptype); \/\/ throws IAE for void\n@@ -4923,5 +4913,6 @@\n-    private static MethodHandle zero(Wrapper btw, Class<?> rtype) {\n-        int pos = btw.ordinal();\n-        MethodHandle zero = ZERO_MHS[pos];\n-        if (zero == null) {\n-            zero = setCachedMethodHandle(ZERO_MHS, pos, makeZero(btw.primitiveType()));\n+    private static MethodHandle primitiveZero(Wrapper w) {\n+        assert w != Wrapper.OBJECT : w;\n+        int pos = w.ordinal();\n+        MethodHandle mh = PRIMITIVE_ZERO_MHS[pos];\n+        if (mh == null) {\n+            mh = setCachedMethodHandle(PRIMITIVE_ZERO_MHS, pos, makePrimitiveZero(w));\n@@ -4929,4 +4920,2 @@\n-        if (zero.type().returnType() == rtype)\n-            return zero;\n-        assert(btw == Wrapper.OBJECT);\n-        return makeZero(rtype);\n+        assert (mh.type().returnType() == w.primitiveType()) : mh;\n+        return mh;\n@@ -4934,5 +4923,8 @@\n-    private static final MethodHandle[] ZERO_MHS = new MethodHandle[Wrapper.COUNT];\n-    private static MethodHandle makeZero(Class<?> rtype) {\n-        MethodType mtype = methodType(rtype);\n-        LambdaForm lform = LambdaForm.zeroForm(BasicType.basicType(rtype));\n-        return MethodHandleImpl.makeIntrinsic(mtype, lform, Intrinsic.ZERO);\n+\n+    private static MethodHandle makePrimitiveZero(Wrapper w) {\n+        if (w == Wrapper.VOID) {\n+            var lf = LambdaForm.identityForm(V_TYPE); \/\/ ensures BMH & SimpleMH are initialized\n+            return SimpleMethodHandle.make(MethodType.methodType(void.class), lf);\n+        } else {\n+            return MethodHandleImpl.makeConstantReturning(w.primitiveType(), w.zero());\n+        }\n@@ -4941,0 +4933,2 @@\n+    private static final @Stable MethodHandle[] PRIMITIVE_ZERO_MHS = new MethodHandle[Wrapper.COUNT];\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":27,"deletions":33,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import jdk.vm.ci.common.NativeImageReinitialize;\n@@ -150,1 +149,1 @@\n-        @NativeImageReinitialize private static volatile VMState instance;\n+        private static volatile VMState instance;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotMethodData.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -103,0 +103,1 @@\n+gc\/TestAllocHumongousFragment.java#generational 8351464 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -382,0 +382,1 @@\n+ -runtime\/interpreter\/CountBytecodesTest.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -339,0 +339,5 @@\n+    public static final String OPAQUE_MULTIVERSIONING = PREFIX + \"OPAQUE_MULTIVERSIONING\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(OPAQUE_MULTIVERSIONING, \"OpaqueMultiversioning\");\n+    }\n+\n@@ -1530,0 +1535,20 @@\n+    public static final String REVERSE_BYTES_I = PREFIX + \"REVERSE_BYTES_I\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REVERSE_BYTES_I, \"ReverseBytesI\");\n+    }\n+\n+    public static final String REVERSE_BYTES_L = PREFIX + \"REVERSE_BYTES_L\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REVERSE_BYTES_L, \"ReverseBytesL\");\n+    }\n+\n+    public static final String REVERSE_BYTES_S = PREFIX + \"REVERSE_BYTES_S\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REVERSE_BYTES_S, \"ReverseBytesS\");\n+    }\n+\n+    public static final String REVERSE_BYTES_US = PREFIX + \"REVERSE_BYTES_US\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(REVERSE_BYTES_US, \"ReverseBytesUS\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -608,7 +608,3 @@\n-        if (irVerificationPossible) {\n-            irVerificationPossible = Platform.isDebugBuild() && !Platform.isInt() && !Platform.isComp();\n-            if (!irVerificationPossible) {\n-                System.out.println(\"IR verification disabled due to not running a debug build (required for PrintIdeal\" +\n-                                   \"and PrintOptoAssembly), running with -Xint, or -Xcomp (use warm-up of 0 instead)\");\n-                return;\n-            }\n+        if (!irVerificationPossible) {\n+            return;\n+        }\n@@ -616,5 +612,7 @@\n-            irVerificationPossible = hasIRAnnotations();\n-            if (!irVerificationPossible) {\n-                System.out.println(\"IR verification disabled due to test \" + testClass + \" not specifying any @IR annotations\");\n-                return;\n-            }\n+        boolean debugTest = Platform.isDebugBuild();\n+        boolean intTest = !Platform.isInt();\n+        boolean compTest = !Platform.isComp();\n+        boolean irTest = hasIRAnnotations();\n+        \/\/ No IR verification is done if additional non-whitelisted JTreg VM or Javaoptions flag is specified.\n+        List<String> nonWhiteListedFlags = anyNonWhitelistedJTregVMAndJavaOptsFlags();\n+        boolean nonWhiteListedTest = nonWhiteListedFlags.isEmpty();\n@@ -622,6 +620,3 @@\n-            \/\/ No IR verification is done if additional non-whitelisted JTreg VM or Javaoptions flag is specified.\n-            irVerificationPossible = onlyWhitelistedJTregVMAndJavaOptsFlags();\n-            if (!irVerificationPossible) {\n-                System.out.println(\"IR verification disabled due to using non-whitelisted JTreg VM or Javaoptions flag(s).\"\n-                                   + System.lineSeparator());\n-            }\n+        irVerificationPossible = debugTest && intTest && compTest && irTest && nonWhiteListedTest;\n+        if (irVerificationPossible) {\n+            return;\n@@ -629,0 +624,20 @@\n+\n+        System.out.println(\"IR verification disabled due to the following reason(s):\");\n+        if (!debugTest) {\n+            System.out.println(\"- Not running a debug build (required for PrintIdeal and PrintOptoAssembly)\");\n+        }\n+        if (!intTest) {\n+            System.out.println(\"- Running with -Xint (no compilations)\");\n+        }\n+        if (!compTest) {\n+            System.out.println(\"- Running with -Xcomp (use warm-up of 0 instead)\");\n+        }\n+        if (!irTest) {\n+            System.out.println(\"- Test \" + testClass + \" not specifying any @IR annotations\");\n+        }\n+        if (!nonWhiteListedTest) {\n+            System.out.println(\"- Using non-whitelisted JTreg VM or Javaoptions flag(s):\");\n+            nonWhiteListedFlags.forEach((f) -> System.out.println(\"  - \" + f));\n+        }\n+\n+        System.out.println(\"\");\n@@ -756,1 +771,1 @@\n-    private boolean onlyWhitelistedJTregVMAndJavaOptsFlags() {\n+    private List<String> anyNonWhitelistedJTregVMAndJavaOptsFlags() {\n@@ -760,0 +775,1 @@\n+        List<String> nonWhiteListedFlags = new ArrayList();\n@@ -764,1 +780,1 @@\n-                return false;\n+                nonWhiteListedFlags.add(flag);\n@@ -767,1 +783,1 @@\n-        return true;\n+        return nonWhiteListedFlags;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2969,0 +2969,1 @@\n+    \/* TODO: 8353717\n@@ -2975,0 +2976,1 @@\n+    *\/\n@@ -3181,0 +3183,1 @@\n+    \/* TODO: 8353717\n@@ -3184,0 +3187,1 @@\n+    *\/\n@@ -3219,0 +3223,1 @@\n+    \/* TODO: 8353717\n@@ -3222,0 +3227,1 @@\n+    *\/\n@@ -3256,0 +3262,1 @@\n+    \/* TODO: 8353717\n@@ -3258,0 +3265,1 @@\n+    *\/\n@@ -3310,0 +3318,1 @@\n+    \/* TODO: 8353717\n@@ -3312,0 +3321,1 @@\n+    *\/\n@@ -3410,2 +3420,3 @@\n-    @IR(failOn = {ALLOC_G, MEMBAR},\n-        counts = {PREDICATE_TRAP, \"= 1\"})\n+    \/* TODO: 8353717\n+      @IR(failOn = {ALLOC_G, MEMBAR},\n+      counts = {PREDICATE_TRAP, \"= 1\"}) *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestLWorld.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-    @IR(failOn = {ALLOC, STORE})\n+    \/\/@IR(failOn = {ALLOC, STORE}) TODO: 8353717\n","filename":"test\/hotspot\/jtreg\/compiler\/valhalla\/inlinetypes\/TestValueClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -465,1 +465,0 @@\n-java\/awt\/Headless\/HeadlessMalfunctionTest.java 8349099 generic-all\n@@ -545,5 +544,3 @@\n-com\/sun\/management\/OperatingSystemMXBean\/GetProcessCpuLoad.java 8030957 aix-all\n-com\/sun\/management\/OperatingSystemMXBean\/GetSystemCpuLoad.java  8030957 aix-all\n-\n-com\/sun\/management\/OperatingSystemMXBean\/GetProcessCpuLoad.java 8351002 windows-all\n-com\/sun\/management\/OperatingSystemMXBean\/GetSystemCpuLoad.java  8351002 windows-all\n+# First bug for AIX, second for Windows\n+com\/sun\/management\/OperatingSystemMXBean\/GetProcessCpuLoad.java 8030957,8351002 aix-all,windows-all\n+com\/sun\/management\/OperatingSystemMXBean\/GetSystemCpuLoad.java  8030957,8351002 aix-all,windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}