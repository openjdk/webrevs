{"files":[{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test for ForceEarlyReturn with value classes.\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:ValueForceEarlyReturn -XX:+EnableValhalla ValueForceEarlyReturn\n+ *\/\n+\n+import java.util.Objects;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+public class ValueForceEarlyReturn {\n+\n+    private static final String agentLib = \"ValueForceEarlyReturn\";\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    private static value class ValueClass {\n+        public int f1;\n+        public int f2;\n+\n+        public ValueClass(int v1, int v2) { f1 = v1; f2 = v2; }\n+    }\n+\n+    private static value class ValueHolder {\n+        public ValueClass f1;\n+        @NullRestricted\n+        public ValueClass f2;\n+\n+        public static ValueClass s1 = new ValueClass(0, 1);\n+\n+        public ValueHolder(int v) {\n+            f1 = new ValueClass(v, v + 100);\n+            f2 = new ValueClass(v + 1, v + 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+\n+        ValueClass testObj1 = new ValueClass(4, 5);\n+        ValueHolder testObj2 = new ValueHolder(6);\n+\n+        testForceEarlyReturn(testObj1);\n+        testForceEarlyReturn(testObj2);\n+    }\n+\n+    private static void testForceEarlyReturn(Object retObject) throws Exception {\n+        String className = retObject.getClass().getName();\n+        log(\">> Testing ForceEarlyReturn for \" + className);\n+\n+        TestTask task = new TestTask();\n+        Thread thread = new Thread(task, \"testThread\");\n+        thread.start();\n+\n+        task.ensureReady();\n+\n+        nSuspendThread(thread);\n+        nForceEarlyReturn(thread, retObject);\n+        nResumeThread(thread);\n+\n+        task.finish();\n+        thread.join();\n+\n+        Object result = task.getResult();\n+\n+        if (!Objects.equals(result, retObject)) {\n+            throw new RuntimeException(\"ERROR: unexpected result (\" + result + \", expected \" + retObject + \")\");\n+        }\n+        log(\"<< Testing \" + className + \" - OK\");\n+        log(\"\");\n+    }\n+\n+    private static class TestTask implements Runnable {\n+\n+        private volatile boolean ready = false;\n+        private volatile boolean doLoop = true;\n+        private volatile Object result = null;\n+\n+        private static void sleep(long millis) {\n+            try {\n+                Thread.sleep(millis);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(\"Interruption in TestTask.sleep: \" + e);\n+            }\n+        }\n+\n+        public void ensureReady() {\n+            while (!ready) {\n+                sleep(1);\n+            }\n+        }\n+\n+        public void finish() {\n+            doLoop = false;\n+        }\n+\n+        public Object getResult() {\n+            return result;\n+        }\n+\n+        public void run() {\n+            result = meth();\n+        }\n+\n+        \/\/ Method is busy in a while loop.\n+        private Object meth() {\n+            ready = true;\n+            while (doLoop) {\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private static void log(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    static native void nSuspendThread(Thread thread);\n+    static native void nResumeThread(Thread thread);\n+    static native void nForceEarlyReturn(Thread thread, Object obj);\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/ForceEarlyReturn\/ValueForceEarlyReturn.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jni.h\"\n+#include \"jvmti_common.hpp\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static jvmtiEnv *jvmti = nullptr;\n+\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jint res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    LOG(\"GetEnv failed, res = %d\", (int)res);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiCapabilities caps;\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_suspend = 1;\n+  caps.can_force_early_return = 1;\n+  jvmtiError err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"AddCapabilities failed: %s (%d)\\n\", TranslateError(err), err);\n+    return JNI_ERR;\n+  }\n+\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ValueForceEarlyReturn_nSuspendThread(JNIEnv *jni, jclass thisClass, jthread thread) {\n+  suspend_thread(jvmti, jni, thread);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ValueForceEarlyReturn_nResumeThread(JNIEnv *jni, jclass thisClass, jthread thread) {\n+  resume_thread(jvmti, jni, thread);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_ValueForceEarlyReturn_nForceEarlyReturn(JNIEnv *jni, jclass thisClass, jthread thread, jobject obj) {\n+  check_jvmti_error(jvmti->ForceEarlyReturnObject(thread, obj), \"ForceEarlyReturnObject\");\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/ForceEarlyReturn\/libValueForceEarlyReturn.cpp","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test for GetClassFields with value classes.\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:ValueGetClassFields -XX:+EnableValhalla ValueGetClassFields\n+ *\/\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+public class ValueGetClassFields {\n+\n+    private static final String agentLib = \"ValueGetClassFields\";\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    private static value class ValueClass {\n+        public int f1;\n+        public int f2;\n+\n+        public ValueClass(int v1, int v2) { f1 = v1; f2 = v2; }\n+    }\n+\n+    private static value class ValueHolder {\n+        public ValueClass f1;\n+        @NullRestricted\n+        public ValueClass f2;\n+\n+        public static ValueClass s1 = new ValueClass(0, 1);\n+\n+        public ValueHolder(int v) {\n+            f1 = new ValueClass(v, v + 100);\n+            f2 = new ValueClass(v + 1, v + 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+\n+        testGetClassFields(ValueClass.class, 2);\n+        testGetClassFields(ValueHolder.class, 3);\n+    }\n+\n+    private static void testGetClassFields(Class cls, int fieldNum) throws Exception {\n+        String className = cls.getName();\n+        \/\/ Ensure the class is prepared.\n+        cls = Class.forName(className);\n+        log(\">> Testing GetClassFields for \" + className);\n+        if (!nTestGetClassFields(cls, fieldNum)) {\n+            throw new RuntimeException(\"ERROR: \" + className);\n+        }\n+        log(\"<< Testing \" + className + \" - OK\");\n+        log(\"\");\n+    }\n+\n+    private static void log(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    private static native boolean nTestGetClassFields(Class cls, int fieldNum);\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetClassFields\/ValueGetClassFields.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jni.h\"\n+#include \"jvmti_common.hpp\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static jvmtiEnv *jvmti = nullptr;\n+\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jint res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    LOG(\"GetEnv failed, res = %d\", (int)res);\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_ValueGetClassFields_nTestGetClassFields(JNIEnv *jni, jclass thisClass, jclass cls, jint fieldNum) {\n+  bool result = true;\n+  jint field_count;\n+  jfieldID* fields = nullptr;\n+  check_jvmti_error(jvmti->GetClassFields(cls, &field_count, &fields), \"GetClassFields\");\n+\n+  if (field_count != fieldNum) {\n+    LOG(\"ERROR: GetClassFields returned unexpected field count: %d (expected %d)\\n\", (int)field_count, (int)fieldNum);\n+    result = false;\n+  } else {\n+    \/\/ Use GetFieldName to verify correctness of the returned fields.\n+    for (jint i = 0; i < field_count; i++) {\n+      char *name = nullptr;\n+      char *signature = nullptr;\n+\n+      check_jvmti_error(jvmti->GetFieldName(cls, fields[i], &name, &signature, nullptr), \"GetFieldName\");\n+\n+      LOG(\" - field %s, sig = %s\\n\", name, signature);\n+      jvmti->Deallocate((unsigned char *)name);\n+      jvmti->Deallocate((unsigned char *)signature);\n+    }\n+  }\n+\n+  jvmti->Deallocate((unsigned char *)fields);\n+  return result ? JNI_TRUE : JNI_FALSE;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetClassFields\/libValueGetClassFields.cpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test for GetObjectMonitorUsage with value classes.\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:ValueGetObjectMonitorUsage -XX:+EnableValhalla ValueGetObjectMonitorUsage\n+ *\/\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+public class ValueGetObjectMonitorUsage {\n+\n+    private static final String agentLib = \"ValueGetObjectMonitorUsage\";\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    private static value class ValueClass {\n+        public int f1;\n+        public int f2;\n+\n+        public ValueClass(int v1, int v2) { f1 = v1; f2 = v2; }\n+    }\n+\n+    private static value class ValueHolder {\n+        public ValueClass f1;\n+        @NullRestricted\n+        public ValueClass f2;\n+\n+        public static ValueClass s1 = new ValueClass(0, 1);\n+\n+        public ValueHolder(int v) {\n+            f1 = new ValueClass(v, v + 100);\n+            f2 = new ValueClass(v + 1, v + 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+\n+        ValueClass testObj1 = new ValueClass(4, 5);\n+        ValueHolder testObj2 = new ValueHolder(6);\n+\n+        testGetObjectMonitorUsage(testObj1);\n+        testGetObjectMonitorUsage(testObj2);\n+    }\n+\n+    private static void testGetObjectMonitorUsage(Object testObj) {\n+        String className = testObj.getClass().getName();\n+        log(\">> Testing GetObjectMonitorUsage for \" + className);\n+        if (!nTestGetObjectMonitorUsage(testObj)) {\n+            throw new RuntimeException(\"ERROR: \" + className);\n+        }\n+        log(\"<< Testing \" + className + \" - OK\");\n+        log(\"\");\n+    }\n+\n+    private static void log(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    private static native boolean nTestGetObjectMonitorUsage(Object obj);\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetObjectMonitorUsage\/ValueGetObjectMonitorUsage.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jni.h\"\n+#include \"jvmti_common.hpp\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static jvmtiEnv *jvmti = nullptr;\n+\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jint res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    LOG(\"GetEnv failed, res = %d\", (int)res);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiCapabilities caps;\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_get_monitor_info = 1;\n+  jvmtiError err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"AddCapabilities failed: %s (%d)\\n\", TranslateError(err), err);\n+    return JNI_ERR;\n+  }\n+\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_ValueGetObjectMonitorUsage_nTestGetObjectMonitorUsage(JNIEnv *jni, jclass thisClass, jobject obj) {\n+  bool result = true;\n+  jvmtiMonitorUsage info;\n+  memset(&info, 0, sizeof(info));\n+  check_jvmti_error(jvmti->GetObjectMonitorUsage(obj, &info), \"GetObjectMonitorUsage\");\n+\n+  if (info.owner != nullptr) {\n+    LOG(\"ERROR: owner is not NULL\\n\");\n+    result = false;\n+  }\n+  if (info.entry_count != 0) {\n+    LOG(\"ERROR: entry_count is non-zero: %d\\n\", (int)info.entry_count);\n+    result = false;\n+  }\n+  if (info.waiter_count != 0) {\n+    LOG(\"ERROR: waiter_count is no-zero: %d\\n\", (int)info.waiter_count);\n+    result = false;\n+  }\n+  if (info.notify_waiter_count != 0) {\n+    LOG(\"ERROR: notify_waiter_count is no-zero: %d\\n\", (int)info.notify_waiter_count);\n+    result = false;\n+  }\n+\n+  jvmti->Deallocate((unsigned char *)info.waiters);\n+  jvmti->Deallocate((unsigned char *)info.notify_waiters);\n+\n+  return result ? JNI_TRUE : JNI_FALSE;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetObjectMonitorUsage\/libValueGetObjectMonitorUsage.cpp","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity test for GetObjectSize with values classes.\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:ValueGetObjectSize -XX:+EnableValhalla ValueGetObjectSize\n+ *\/\n+\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+public class ValueGetObjectSize {\n+\n+    private static final String agentLib = \"ValueGetObjectSize\";\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    private static value class ValueClass {\n+        public int f1;\n+        public int f2;\n+\n+        public ValueClass(int v1, int v2) { f1 = v1; f2 = v2; }\n+    }\n+\n+    private static value class ValueHolder {\n+        public ValueClass f1;\n+        @NullRestricted\n+        public ValueClass f2;\n+\n+        public static ValueClass s1 = new ValueClass(0, 1);\n+\n+        public ValueHolder(int v) {\n+            f1 = new ValueClass(v, v + 100);\n+            f2 = new ValueClass(v + 1, v + 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+\n+        ValueClass testObj1 = new ValueClass(4, 5);\n+        ValueHolder testObj2 = new ValueHolder(6);\n+\n+        testGetObjectSize(testObj1);\n+        testGetObjectSize(testObj2);\n+    }\n+\n+    private static void testGetObjectSize(Object testObj) {\n+        String className = testObj.getClass().getName();\n+        log(\">> Testing GetObjectSize for \" + className);\n+        if (!nTestGetObjectSize(testObj)) {\n+            throw new RuntimeException(\"ERROR: \" + className);\n+        }\n+        log(\"<< Testing \" + className + \" - OK\");\n+        log(\"\");\n+    }\n+\n+    private static void log(String msg) {\n+        System.out.println(msg);\n+    }\n+\n+    private static native boolean nTestGetObjectSize(Object obj);\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetObjectSize\/ValueGetObjectSize.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jni.h\"\n+#include \"jvmti_common.hpp\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static jvmtiEnv *jvmti = nullptr;\n+\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jint res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    LOG(\"GetEnv failed, res = %d\", (int)res);\n+    return JNI_ERR;\n+  }\n+  return JNI_OK;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_ValueGetObjectSize_nTestGetObjectSize(JNIEnv *jni, jclass thisClass, jobject obj) {\n+  jlong size = 0;\n+  check_jvmti_error(jvmti->GetObjectSize(obj, &size), \"GetObjectSize\");\n+\n+  LOG(\" GetObjectSize returned %d\\n\", (int)size);\n+\n+  return JNI_TRUE;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetObjectSize\/libValueGetObjectSize.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary Sanity tests for GetLocalObject\/SetLocalObject\/GetLocalInstance with value classes.\n+ * @requires vm.jvmti\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @enablePreview\n+ * @run main\/othervm\/native -agentlib:ValueGetSetLocal -XX:+EnableValhalla ValueGetSetLocal\n+ *\/\n+\n+import java.util.Objects;\n+import jdk.internal.vm.annotation.ImplicitlyConstructible;\n+import jdk.internal.vm.annotation.LooselyConsistentValue;\n+import jdk.internal.vm.annotation.NullRestricted;\n+\n+public class ValueGetSetLocal {\n+\n+    private static final String agentLib = \"ValueGetSetLocal\";\n+\n+    @ImplicitlyConstructible\n+    @LooselyConsistentValue\n+    private static value class ValueClass {\n+        public int f1;\n+        public int f2;\n+\n+        public ValueClass(int v1, int v2) { f1 = v1; f2 = v2; }\n+    }\n+\n+    private static value class ValueHolder {\n+        public ValueClass f1;\n+        @NullRestricted\n+        public ValueClass f2;\n+\n+        public static ValueClass s1 = new ValueClass(0, 1);\n+\n+        public ValueHolder(int v) {\n+            f1 = new ValueClass(v, v + 100);\n+            f2 = new ValueClass(v + 1, v + 200);\n+        }\n+\n+        \/\/ slot 0 is \"this\"\n+        public void meth(ValueClass obj1,       \/\/ slot 1\n+                         ValueHolder obj2) {    \/\/ slot 2\n+            Object obj3 = obj2;                 \/\/ slot 3\n+            if (!nTestLocals(Thread.currentThread())) {\n+                throw new RuntimeException(\"ERROR: nTestLocals failed\");\n+            }\n+            \/\/ nTestLocals sets obj3 = obj1\n+            if (!Objects.equals(obj3, obj1)) {\n+                throw new RuntimeException(\"ERROR: obj3 != obj1\" + \" (obj3 = \" + obj3 + \")\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            System.loadLibrary(agentLib);\n+        } catch (UnsatisfiedLinkError ex) {\n+            System.err.println(\"Failed to load \" + agentLib + \" lib\");\n+            System.err.println(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ex;\n+        }\n+\n+        ValueClass testObj1 = new ValueClass(7, 8);\n+        ValueHolder testObj2 = new ValueHolder(9);\n+        testObj2.meth(testObj1, testObj2);\n+    }\n+\n+    private static native boolean nTestLocals(Thread thread);\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetSetLocal\/ValueGetSetLocal.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <string.h>\n+#include \"jvmti.h\"\n+#include \"jni.h\"\n+#include \"jvmti_common.hpp\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+static jvmtiEnv *jvmti = nullptr;\n+\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  jint res = jvm->GetEnv((void **) &jvmti, JVMTI_VERSION_1_1);\n+  if (res != JNI_OK || jvmti == nullptr) {\n+    LOG(\"GetEnv failed, res = %d\", (int)res);\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiCapabilities caps;\n+  memset(&caps, 0, sizeof(caps));\n+  caps.can_access_local_variables = 1;\n+  jvmtiError err = jvmti->AddCapabilities(&caps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    LOG(\"AddCapabilities failed: %s (%d)\\n\", TranslateError(err), err);\n+    return JNI_ERR;\n+  }\n+\n+  return JNI_OK;\n+}\n+\n+static void log_value(JNIEnv *jni, jobject value) {\n+  jclass cls = jni->GetObjectClass(value);\n+  if (cls == nullptr) {\n+    LOG(\"ERROR: value class is NULL\\n\");\n+    return;\n+  }\n+\n+  char* sig = nullptr;\n+  check_jvmti_error(jvmti->GetClassSignature(cls, &sig, nullptr), \"GetClassSignature\");\n+\n+  LOG(\" - the value class: %s\\n\", sig);\n+  jvmti->Deallocate((unsigned char *)sig);\n+}\n+\n+static jobject get_local(JNIEnv *jni, jthread thread, jint depth, jint slot) {\n+  LOG(\"GetLocalObject for slot %d...\\n\", (int)slot);\n+  jobject value = nullptr;\n+  check_jvmti_error(jvmti->GetLocalObject(thread, depth, slot, &value), \"GetLocalObject\");\n+\n+  log_value(jni, value);\n+\n+  return value;\n+}\n+\n+static void set_local(jthread thread, jint depth, jint slot, jobject value) {\n+  LOG(\"SetLocalObject for slot %d...\\n\", (int)slot);\n+  check_jvmti_error(jvmti->SetLocalObject(thread, depth, slot, value), \"SetLocalObject\");\n+}\n+\n+static jobject get_this(JNIEnv *jni, jthread thread, jint depth) {\n+  LOG(\"GetLocalInstance...\\n\");\n+  jobject value = nullptr;\n+  check_jvmti_error(jvmti->GetLocalInstance(thread, depth, &value), \"GetLocalInstance\");\n+\n+  log_value(jni, value);\n+\n+  return value;\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_ValueGetSetLocal_nTestLocals(JNIEnv *jni, jclass thisClass, jthread thread) {\n+  bool result = true;\n+  const jint depth = 1;\n+\n+  jobject obj0 = get_local(jni, thread, depth, 0);\n+  jobject obj1 = get_local(jni, thread, depth, 1);\n+  jobject obj2 = get_local(jni, thread, depth, 2);\n+  jobject obj3 = get_local(jni, thread, depth, 3);\n+  jobject obj_this = get_this(jni, thread, depth);\n+\n+  \/\/ obj0 is expected to be equal \"this\"\n+  if (!jni->IsSameObject(obj0, obj_this)) {\n+    LOG(\"ERROR: obj0 != obj_this\\n\");\n+    result = false;\n+  }\n+  \/\/ obj3 is expected to be equal obj2\n+  if (!jni->IsSameObject(obj3, obj2)) {\n+    LOG(\"ERROR: obj3 != obj2\\n\");\n+    result = false;\n+  }\n+\n+  \/\/ set obj3 = obj1\n+  set_local(thread, depth, 3, obj1);\n+\n+  return result ? JNI_TRUE : JNI_FALSE;\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/valhalla\/GetSetLocal\/libValueGetSetLocal.cpp","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"}]}