{"files":[{"patch":"@@ -3990,8 +3990,11 @@\n-int java_lang_boxing_object::_sub32bits_value_offset;\n-int java_lang_boxing_object::_32bits_value_offset;\n-int java_lang_boxing_object::_64bits_value_offset;\n-\n-#define BOXING_FIELDS_DO(macro) \\\n-  macro(_sub32bits_value_offset, byteKlass, \"value\", byte_signature, false); \\\n-  macro(_32bits_value_offset,    intKlass,  \"value\", int_signature,  false); \\\n-  macro(_64bits_value_offset,    longKlass, \"value\", long_signature, false);\n+int* java_lang_boxing_object::_offsets;\n+\n+#define BOXING_FIELDS_DO(macro)                                                                                                    \\\n+  macro(java_lang_boxing_object::_offsets[T_BOOLEAN - T_BOOLEAN], vmClasses::Boolean_klass(),   \"value\", bool_signature,   false); \\\n+  macro(java_lang_boxing_object::_offsets[T_CHAR - T_BOOLEAN],    vmClasses::Character_klass(), \"value\", char_signature,   false); \\\n+  macro(java_lang_boxing_object::_offsets[T_FLOAT - T_BOOLEAN],   vmClasses::Float_klass(),     \"value\", float_signature,  false); \\\n+  macro(java_lang_boxing_object::_offsets[T_DOUBLE - T_BOOLEAN],  vmClasses::Double_klass(),    \"value\", double_signature, false); \\\n+  macro(java_lang_boxing_object::_offsets[T_BYTE - T_BOOLEAN],    vmClasses::Byte_klass(),      \"value\", byte_signature,   false); \\\n+  macro(java_lang_boxing_object::_offsets[T_SHORT - T_BOOLEAN],   vmClasses::Short_klass(),     \"value\", short_signature,  false); \\\n+  macro(java_lang_boxing_object::_offsets[T_INT - T_BOOLEAN],     vmClasses::Integer_klass(),   \"value\", int_signature,    false); \\\n+  macro(java_lang_boxing_object::_offsets[T_LONG - T_BOOLEAN],    vmClasses::Long_klass(),      \"value\", long_signature,   false);\n@@ -4000,3 +4003,2 @@\n-  InstanceKlass* byteKlass = vmClasses::Byte_klass();\n-  InstanceKlass* intKlass = vmClasses::Integer_klass();\n-  InstanceKlass* longKlass = vmClasses::Long_klass();\n+  assert(T_LONG - T_BOOLEAN == 7, \"Sanity check\");\n+  java_lang_boxing_object::_offsets = NEW_C_HEAP_ARRAY(int, 8, mtInternal);\n@@ -4008,0 +4010,4 @@\n+  if (f->reading()) {\n+    assert(T_LONG - T_BOOLEAN == 7, \"Sanity check\");\n+    java_lang_boxing_object::_offsets = NEW_C_HEAP_ARRAY(int, 8, mtInternal);\n+  }\n@@ -4028,1 +4034,1 @@\n-      box->bool_field_put(_sub32bits_value_offset, value->z);\n+      box->bool_field_put(value_offset(type), value->z);\n@@ -4031,1 +4037,1 @@\n-      box->char_field_put(_sub32bits_value_offset, value->c);\n+      box->char_field_put(value_offset(type), value->c);\n@@ -4034,1 +4040,1 @@\n-      box->float_field_put(_32bits_value_offset, value->f);\n+      box->float_field_put(value_offset(type), value->f);\n@@ -4037,1 +4043,1 @@\n-      box->double_field_put(_64bits_value_offset, value->d);\n+      box->double_field_put(value_offset(type), value->d);\n@@ -4040,1 +4046,1 @@\n-      box->byte_field_put(_sub32bits_value_offset, value->b);\n+      box->byte_field_put(value_offset(type), value->b);\n@@ -4043,1 +4049,1 @@\n-      box->short_field_put(_sub32bits_value_offset, value->s);\n+      box->short_field_put(value_offset(type), value->s);\n@@ -4046,1 +4052,1 @@\n-      box->int_field_put(_32bits_value_offset, value->i);\n+      box->int_field_put(value_offset(type), value->i);\n@@ -4049,1 +4055,1 @@\n-      box->long_field_put(_64bits_value_offset, value->j);\n+      box->long_field_put(value_offset(type), value->j);\n@@ -4071,1 +4077,1 @@\n-    value->z = box->bool_field(_sub32bits_value_offset);\n+    value->z = box->bool_field(value_offset(type));\n@@ -4074,1 +4080,1 @@\n-    value->c = box->char_field(_sub32bits_value_offset);\n+    value->c = box->char_field(value_offset(type));\n@@ -4077,1 +4083,1 @@\n-      value->f = box->float_field(_32bits_value_offset);\n+    value->f = box->float_field(value_offset(type));\n@@ -4080,1 +4086,1 @@\n-    value->d = box->double_field(_64bits_value_offset);\n+    value->d = box->double_field(value_offset(type));\n@@ -4083,1 +4089,1 @@\n-    value->b = box->byte_field(_sub32bits_value_offset);\n+    value->b = box->byte_field(value_offset(type));\n@@ -4086,1 +4092,1 @@\n-    value->s = box->short_field(_sub32bits_value_offset);\n+    value->s = box->short_field(value_offset(type));\n@@ -4089,1 +4095,1 @@\n-      value->i = box->int_field(_32bits_value_offset);\n+    value->i = box->int_field(value_offset(type));\n@@ -4092,1 +4098,1 @@\n-    value->j = box->long_field(_64bits_value_offset);\n+    value->j = box->long_field(value_offset(type));\n@@ -4105,1 +4111,1 @@\n-    box->bool_field_put(_sub32bits_value_offset, value->z);\n+    box->bool_field_put(value_offset(type), value->z);\n@@ -4108,1 +4114,1 @@\n-    box->char_field_put(_sub32bits_value_offset, value->c);\n+    box->char_field_put(value_offset(type), value->c);\n@@ -4111,1 +4117,1 @@\n-    box->float_field_put(_32bits_value_offset, value->f);\n+    box->float_field_put(value_offset(type), value->f);\n@@ -4114,1 +4120,1 @@\n-    box->double_field_put(_64bits_value_offset, value->d);\n+    box->double_field_put(value_offset(type), value->d);\n@@ -4117,1 +4123,1 @@\n-    box->byte_field_put(_sub32bits_value_offset, value->b);\n+    box->byte_field_put(value_offset(type), value->b);\n@@ -4120,1 +4126,1 @@\n-    box->short_field_put(_sub32bits_value_offset, value->s);\n+    box->short_field_put(value_offset(type), value->s);\n@@ -4123,1 +4129,1 @@\n-    box->int_field_put(_32bits_value_offset, value->i);\n+    box->int_field_put(value_offset(type), value->i);\n@@ -4126,1 +4132,1 @@\n-    box->long_field_put(_64bits_value_offset, value->j);\n+    box->long_field_put(value_offset(type), value->j);\n@@ -5526,20 +5532,11 @@\n-#define CHECK_SUB32BITS_OFFSET(klass_name, cpp_klass_name, field_name, field_sig) \\\n-  valid &= check_offset(klass_name, cpp_klass_name :: _ ##sub32bits_ ## field_name ## _offset, #field_name, field_sig)\n-\n-#define CHECK_32BITS_OFFSET(klass_name, cpp_klass_name, field_name, field_sig) \\\n-  valid &= check_offset(klass_name, cpp_klass_name :: _##32bits_ ## field_name ## _offset, #field_name, field_sig)\n-\n-#define CHECK_64BITS_OFFSET(klass_name, cpp_klass_name, field_name, field_sig) \\\n-  valid &= check_offset(klass_name, cpp_klass_name :: _##64bits_ ## field_name ## _offset, #field_name, field_sig)\n-\n-\n-  \/\/ Boxed primitive objects (java_lang_boxing_object)\n-\n-  CHECK_SUB32BITS_OFFSET(\"java\/lang\/Boolean\",   java_lang_boxing_object, value, \"Z\");\n-  CHECK_SUB32BITS_OFFSET(\"java\/lang\/Character\", java_lang_boxing_object, value, \"C\");\n-  CHECK_32BITS_OFFSET(\"java\/lang\/Float\",     java_lang_boxing_object, value, \"F\");\n-  CHECK_64BITS_OFFSET(\"java\/lang\/Double\", java_lang_boxing_object, value, \"D\");\n-  CHECK_SUB32BITS_OFFSET(\"java\/lang\/Byte\",      java_lang_boxing_object, value, \"B\");\n-  CHECK_SUB32BITS_OFFSET(\"java\/lang\/Short\",     java_lang_boxing_object, value, \"S\");\n-  CHECK_32BITS_OFFSET(\"java\/lang\/Integer\",   java_lang_boxing_object, value, \"I\");\n-  CHECK_64BITS_OFFSET(\"java\/lang\/Long\", java_lang_boxing_object, value, \"J\");\n+#define CHECK_OFFSET(klass_name, type, field_sig) \\\n+  valid &= check_offset(klass_name, java_lang_boxing_object::value_offset(type), \"value\", field_sig)\n+\n+  CHECK_OFFSET(\"java\/lang\/Boolean\",   T_BOOLEAN, \"Z\");\n+  CHECK_OFFSET(\"java\/lang\/Character\", T_CHAR,    \"C\");\n+  CHECK_OFFSET(\"java\/lang\/Float\",     T_FLOAT,   \"F\");\n+  CHECK_OFFSET(\"java\/lang\/Double\",    T_DOUBLE,  \"D\");\n+  CHECK_OFFSET(\"java\/lang\/Byte\",      T_BYTE,    \"B\");\n+  CHECK_OFFSET(\"java\/lang\/Short\",     T_SHORT,   \"S\");\n+  CHECK_OFFSET(\"java\/lang\/Integer\",   T_INT,     \"I\");\n+  CHECK_OFFSET(\"java\/lang\/Long\",      T_LONG,    \"J\");\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":52,"deletions":55,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -976,3 +976,1 @@\n-  static int _sub32bits_value_offset;\n-  static int _32bits_value_offset;\n-  static int _64bits_value_offset;\n+  static int* _offsets;\n@@ -995,2 +993,3 @@\n-    if (type == T_INT || type == T_FLOAT) return _32bits_value_offset;\n-    return is_double_word_type(type) ? _64bits_value_offset : _sub32bits_value_offset;\n+    assert(type >= T_BOOLEAN && type <= T_LONG, \"BasicType out of range\");\n+    assert(_offsets != nullptr, \"Uninitialized offsets\");\n+    return _offsets[type - T_BOOLEAN];\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}