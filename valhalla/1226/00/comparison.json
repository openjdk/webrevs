{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.math;\n+\n+import static java.lang.Float16.MIN_EXPONENT;\n+import static java.lang.Float16.PRECISION;\n+import static java.lang.Float16.SIZE;\n+\n+\/**\n+ * This class contains additional constants documenting limits of the\n+ * {@code Float16} type.\n+ *\/\n+\n+public class Float16Consts {\n+    \/**\n+     * Don't let anyone instantiate this class.\n+     *\/\n+    private Float16Consts() {}\n+\n+    \/**\n+     * The number of logical bits in the significand of a\n+     * {@code Float16} number, including the implicit bit.\n+     *\/\n+    public static final int SIGNIFICAND_WIDTH = PRECISION;\n+\n+    \/**\n+     * The exponent the smallest positive {@code Float16}\n+     * subnormal value would have if it could be normalized.\n+     *\/\n+    public static final int MIN_SUB_EXPONENT =\n+            MIN_EXPONENT - (SIGNIFICAND_WIDTH - 1); \/\/ -24\n+\n+    \/**\n+     * Bias used in representing a {@code Float16} exponent.\n+     *\/\n+    public static final int EXP_BIAS =\n+            (1 << (SIZE - SIGNIFICAND_WIDTH - 1)) - 1; \/\/ 15\n+\n+    \/**\n+     * Bit mask to isolate the sign bit of a {@code Float16}.\n+     *\/\n+    public static final int SIGN_BIT_MASK = 1 << (SIZE - 1);\n+\n+    \/**\n+     * Bit mask to isolate the exponent field of a {@code Float16}.\n+     *\/\n+    public static final int EXP_BIT_MASK =\n+            ((1 << (SIZE - SIGNIFICAND_WIDTH)) - 1) << (SIGNIFICAND_WIDTH - 1);\n+\n+    \/**\n+     * Bit mask to isolate the significand field of a {@code Float16}.\n+     *\/\n+    public static final int SIGNIF_BIT_MASK = (1 << (SIGNIFICAND_WIDTH - 1)) - 1;\n+\n+    \/**\n+     * Bit mask to isolate the magnitude bits (combined exponent and\n+     * significand fields) of a {@code Float16}.\n+     *\/\n+    public static final int MAG_BIT_MASK = EXP_BIT_MASK | SIGNIF_BIT_MASK;\n+\n+    static {\n+        \/\/ verify bit masks cover all bit positions and that the bit\n+        \/\/ masks are non-overlapping\n+        assert(((SIGN_BIT_MASK | EXP_BIT_MASK | SIGNIF_BIT_MASK) == 0xFFFF) &&\n+               (((SIGN_BIT_MASK & EXP_BIT_MASK) == 0) &&\n+                ((SIGN_BIT_MASK & SIGNIF_BIT_MASK) == 0) &&\n+                ((EXP_BIT_MASK & SIGNIF_BIT_MASK) == 0)) &&\n+                ((SIGN_BIT_MASK | MAG_BIT_MASK) == 0xFFFF));\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/Float16Consts.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}