{"files":[{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test MethodHandles::zero, MethodHandles::empty and MethodHandles::constant\n- *          on value classes.\n- * @enablePreview\n- * @run junit\/othervm -XX:+UseFieldFlattening MHZeroValue\n- * @run junit\/othervm -XX:-UseFieldFlattening MHZeroValue\n- *\/\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.util.stream.Stream;\n-\n-import static java.lang.invoke.MethodType.*;\n-import jdk.internal.vm.annotation.ImplicitlyConstructible;\n-import jdk.internal.vm.annotation.NullRestricted;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class MHZeroValue {\n-    @ImplicitlyConstructible\n-    static value class V {}\n-\n-    @ImplicitlyConstructible\n-    static value class P {\n-        @NullRestricted\n-        V empty;\n-        P() {\n-            this.empty = new V();\n-        }\n-    }\n-\n-    static Stream<Arguments> defaultValue() {\n-        return Stream.of(\n-                \/\/ for any type T, default value is always the same as (new T[1])[0]\n-                Arguments.of(int.class,         (new int[1])[0],      0 \/* default value *\/),\n-                Arguments.of(Integer.class,     (new Integer[1])[0],  null),\n-                Arguments.of(P.class,           (new P[1])[0],        null),\n-                Arguments.of(V.class,           (new V[1])[0],        null)\n-        );\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"defaultValue\")\n-    public void zero(Class<?> type, Object value, Object expected) throws Throwable {\n-        var mh = MethodHandles.zero(type);\n-        assertEquals(mh.invoke(), expected);\n-        assertEquals(value, expected);\n-    }\n-\n-    static Stream<Arguments> testCases() {\n-        return Stream.of(\n-                Arguments.of(methodType(int.class, int.class, Object.class),     new V(), 0),\n-                Arguments.of(methodType(Integer.class, int.class, Object.class), new P(), null),\n-                Arguments.of(methodType(P.class, int.class, P.class),            new P(), null),\n-                Arguments.of(methodType(V.class, int.class, P.class),            new P(), null),\n-                Arguments.of(methodType(V.class, int.class, V.class),            new V(), null)\n-        );\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"testCases\")\n-    public void empty(MethodType mtype, Object param, Object value) throws Throwable {\n-        var mh = MethodHandles.empty(mtype);\n-        assertEquals(mh.invoke(1, param), value);\n-    }\n-}\n","filename":"test\/jdk\/valhalla\/valuetypes\/MHZeroValue.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"}]}