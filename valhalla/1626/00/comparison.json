{"files":[{"patch":"@@ -89,1 +89,0 @@\n-compiler\/gcbarriers\/TestImplicitNullChecks.java 8367338 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -40,0 +41,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -64,0 +66,10 @@\n+    static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    static final long F_OFFSET;\n+    static {\n+        try {\n+            F_OFFSET = UNSAFE.objectFieldOffset(Outer.class.getDeclaredField(\"f\"));\n+        } catch (Exception e) {\n+            throw new Error(e);\n+        }\n+    }\n+\n@@ -65,1 +77,2 @@\n-        TestFramework.runWithFlags(\"-XX:CompileCommand=inline,java.lang.ref.*::*\",\n+        TestFramework.runWithFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                   \"-XX:CompileCommand=inline,java.lang.ref.*::*\",\n@@ -157,1 +170,1 @@\n-        return fVarHandle.compareAndExchange(o, oldVal, newVal);\n+        return UNSAFE.compareAndExchangeReference(o, F_OFFSET, oldVal, newVal);\n@@ -165,1 +178,1 @@\n-        return fVarHandle.compareAndSet(o, oldVal, newVal);\n+        return UNSAFE.compareAndSetReference(o, F_OFFSET, oldVal, newVal);\n@@ -173,1 +186,1 @@\n-        return fVarHandle.getAndSet(o, newVal);\n+        return UNSAFE.getAndSetReference(o, F_OFFSET, newVal);\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"}]}