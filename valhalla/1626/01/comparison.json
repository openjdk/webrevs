{"files":[{"patch":"@@ -89,1 +89,0 @@\n-compiler\/gcbarriers\/TestImplicitNullChecks.java 8367338 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,4 +27,0 @@\n-import java.lang.invoke.VarHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.ref.Reference;\n-import java.lang.ref.ReferenceQueue;\n@@ -34,0 +30,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -40,0 +37,1 @@\n+ * @modules java.base\/jdk.internal.misc\n@@ -54,1 +52,2 @@\n-    static final VarHandle fVarHandle;\n+    static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+    static final long F_OFFSET;\n@@ -56,1 +55,0 @@\n-        MethodHandles.Lookup l = MethodHandles.lookup();\n@@ -58,1 +56,1 @@\n-            fVarHandle = l.findVarHandle(Outer.class, \"f\", Object.class);\n+            F_OFFSET = UNSAFE.objectFieldOffset(Outer.class.getDeclaredField(\"f\"));\n@@ -65,1 +63,2 @@\n-        TestFramework.runWithFlags(\"-XX:CompileCommand=inline,java.lang.ref.*::*\",\n+        TestFramework.runWithFlags(\"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n+                                   \"-XX:CompileCommand=inline,java.lang.ref.*::*\",\n@@ -157,1 +156,1 @@\n-        return fVarHandle.compareAndExchange(o, oldVal, newVal);\n+        return UNSAFE.compareAndExchangeReference(o, F_OFFSET, oldVal, newVal);\n@@ -165,1 +164,1 @@\n-        return fVarHandle.compareAndSet(o, oldVal, newVal);\n+        return UNSAFE.compareAndSetReference(o, F_OFFSET, oldVal, newVal);\n@@ -173,1 +172,1 @@\n-        return fVarHandle.getAndSet(o, newVal);\n+        return UNSAFE.getAndSetReference(o, F_OFFSET, newVal);\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestImplicitNullChecks.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"}]}