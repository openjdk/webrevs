{"files":[{"patch":"@@ -175,3 +175,3 @@\n-        private final Path file;\n-        private final String id;\n-        private final String query;\n+        public final Path file;\n+        public final String id;\n+        public final String query;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestManager.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n@@ -1121,0 +1123,30 @@\n+        \/\/ support for -show:stream file.jtr\n+        var jtrFiles = testSpecArgs.stream()\n+                .filter(s -> s.file.getFileName().toString().endsWith(\".jtr\"))\n+                .collect(Collectors.toList());\n+        if (!jtrFiles.isEmpty()) {\n+            if (jtrFiles.size() < testSpecArgs.size() || !testGroupSpecArgs.isEmpty()) {\n+                throw new Fault(i18n, \"main.invalidCombinationTestArgs\");\n+            } else if (jtrFiles.size() > 1) {\n+                throw new Fault(i18n, \"main.moreThanOneTestSpecified\");\n+            } else if (showStream == null) {\n+                throw new Fault(i18n, \"main.noStreamSpecified\");\n+            } else {\n+                var jtr = jtrFiles.get(0);\n+                if (jtr.id != null) {\n+                    throw new Fault(i18n, \"main.cannotSpecifyID\", jtr);\n+                }\n+                if (jtr.query != null) {\n+                    throw new Fault(i18n, \"main.cannotSpecifyQuery\", jtr);\n+                }\n+                Path p =jtr.file;\n+                try {\n+                    var tr = new TestResult(jtr.file.toFile());\n+                    showStream(tr);\n+                } catch (TestResult.Fault e) {\n+                    throw new Fault(i18n, \"main.cannotReloadTestResult\", p);\n+                }\n+            }\n+            return EXIT_OK;\n+        }\n+\n@@ -1854,3 +1886,0 @@\n-                } else if (tr.getStatus().isNotRun()) {\n-                    out.println(\"Test has not been run\");\n-                    ok = false;\n@@ -1858,28 +1887,1 @@\n-                    try {\n-                        \/\/ work around bug CODETOOLS-7900214 -- force the sections to be reloaded\n-                        tr.getProperty(\"sections\");\n-                        String section, stream;\n-                        int sep = showStream.indexOf(\"\/\");\n-                        if (sep == -1) {\n-                            section = null;\n-                            stream = showStream;\n-                        } else {\n-                            section = showStream.substring(0, sep);\n-                            stream = showStream.substring(sep + 1);\n-                        }\n-                        for (int i = 0; i < tr.getSectionCount(); i++) {\n-                            TestResult.Section s = tr.getSection(i);\n-                            if (section == null || section.equals(s.getTitle())) {\n-                                String text = s.getOutput(stream);\n-                                \/\/ need to handle internal newlines properly\n-                                if (text != null) {\n-                                    out.println(\"### Section \" + s.getTitle());\n-                                    out.println(text);\n-                                }\n-                            }\n-                        }\n-                        ok = true;\n-                    } catch (TestResult.Fault f) {\n-                        out.println(\"Cannot reload test results: \" + f.getMessage());\n-                        ok = false;\n-                    }\n+                    ok = showStream(tr);\n@@ -2013,0 +2015,58 @@\n+    private boolean showStream(TestResult tr) {\n+        if (tr.getStatus().isNotRun()) {\n+            out.println(\"Test has not been run\");\n+            return false;\n+        }\n+\n+        try {\n+            \/\/ work around bug CODETOOLS-7900214 -- force the sections to be reloaded\n+            tr.getProperty(\"sections\");\n+\n+            boolean allOK = true;\n+\n+            var allSections = new HashMap<String, Set<String>>();\n+            var allStreams = new HashSet<String>();\n+            for (int i = 0; i < tr.getSectionCount(); i++) {\n+                TestResult.Section s = tr.getSection(i);\n+                var names = Set.of(s.getOutputNames());\n+                allSections.put(s.getTitle(), names);\n+                allStreams.addAll(names);\n+            }\n+            String section, outputName;\n+            int sep = showStream.indexOf(\"\/\");\n+            if (sep == -1) {\n+                section = null;\n+                outputName = showStream;\n+                if (!allStreams.contains(outputName)) {\n+                    out.println(\"# no such output stream: \" + outputName);\n+                    allOK = false;\n+                }\n+            } else {\n+                section = showStream.substring(0, sep);\n+                outputName = showStream.substring(sep + 1);\n+                var outputNames = allSections.get(section);\n+                if (outputNames == null) {\n+                    out.println(\"# section not found: \" + section);\n+                    allOK = false;\n+                } else if (!outputNames.contains(outputName)) {\n+                    out.println(\"# output stream not found: \" + showStream);\n+                    allOK = false;\n+                }\n+            }\n+            for (int i = 0; i < tr.getSectionCount(); i++) {\n+                TestResult.Section s = tr.getSection(i);\n+                if (section == null || section.equals(s.getTitle())) {\n+                    String text = s.getOutput(outputName);\n+                    if (text != null) {\n+                        out.println(\"### Section \" + s.getTitle());\n+                        text.lines().forEach(out::println);\n+                    }\n+                }\n+            }\n+            return allOK;\n+        } catch (TestResult.Fault f) {\n+            out.println(\"Cannot reload test results: \" + f.getMessage());\n+            return false;\n+        }\n+    }\n+\n@@ -2220,1 +2280,1 @@\n-     * Returns whether or not Cygwin may be available, by examining\n+     * Returns whether Cygwin may be available, by examining\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":92,"deletions":32,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -462,0 +462,3 @@\n+main.cannotReloadTestResult=Cannot read {0}: {1}\n+main.cannotSpecifyID=Cannot specify ID in test name: {0}\n+main.cannotSpecifyQuery=Cannot specify Query in test name: {0}\n@@ -481,0 +484,1 @@\n+main.invalidCombinationTestArgs=invalid combination of test args\n@@ -486,0 +490,1 @@\n+main.moreThanOneTestSpecified=more than one test specifued for -show\n@@ -487,0 +492,1 @@\n+main.noStreamSpecified=no stream specified with -show for .jtr file\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-\t\t\t-e '\/^###\/d' -e '\/.*warning.*\/d' \\\n+\t\t\t-e '\/^###\/d' -e '\/^# no such\/d' -e '\/.*warning.*\/d' \\\n","filename":"test\/agentout\/AgentOut.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+\t\t    -e '\/LC_CTYPE=\/d' \\\n","filename":"test\/rerun\/RerunTest.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}