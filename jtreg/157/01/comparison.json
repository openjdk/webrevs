{"files":[{"patch":"@@ -3,1 +3,1 @@\n-    id 'org.jetbrains.intellij' version '1.0'\n+    id 'org.jetbrains.intellij' version '1.14.1'\n","filename":"plugins\/idea\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-minBuild = IC-211.7142.45\n+minBuild = IC-231.9011.34\n@@ -4,1 +4,1 @@\n-javaLevel = 11\n+javaLevel = 17\n","filename":"plugins\/idea\/gradle.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"filename":"plugins\/idea\/gradle\/wrapper\/gradle-wrapper.jar","binary":true,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-distributionUrl=https\\:\/\/services.gradle.org\/distributions\/gradle-7.0-bin.zip\n+distributionUrl=https\\:\/\/services.gradle.org\/distributions\/gradle-7.6.1-bin.zip\n+networkTimeout=10000\n@@ -6,0 +7,1 @@\n+distributionSha256Sum=6147605a23b4eff6c334927a86ff3508cb5d6722cd624c97ded4c2e8640f1f87\n","filename":"plugins\/idea\/gradle\/wrapper\/gradle-wrapper.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-#!\/usr\/bin\/env sh\n+#!\/bin\/sh\n@@ -4,1 +4,1 @@\n-# Copyright 2015 the original author or authors.\n+# Copyright © 2015-2021 the original authors.\n@@ -20,3 +20,43 @@\n-##\n-##  Gradle start up script for UN*X\n-##\n+#\n+#   Gradle start up script for POSIX generated by Gradle.\n+#\n+#   Important for running:\n+#\n+#   (1) You need a POSIX-compliant shell to run this script. If your \/bin\/sh is\n+#       noncompliant, but you have some other compliant shell such as ksh or\n+#       bash, then to run this script, type that shell name before the whole\n+#       command line, like:\n+#\n+#           ksh Gradle\n+#\n+#       Busybox and similar reduced shells will NOT work, because this script\n+#       requires all of these POSIX shell features:\n+#         * functions;\n+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,\n+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;\n+#         * compound commands having a testable exit status, especially «case»;\n+#         * various built-in commands including «command», «set», and «ulimit».\n+#\n+#   Important for patching:\n+#\n+#   (2) This script targets any POSIX shell, so it avoids extensions provided\n+#       by Bash, Ksh, etc; in particular arrays are avoided.\n+#\n+#       The \"traditional\" practice of packing multiple parameters into a\n+#       space-separated string is a well documented source of bugs and security\n+#       problems, so this is (mostly) avoided, by progressively accumulating\n+#       options in \"$@\", and eventually passing that to Java.\n+#\n+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,\n+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;\n+#       see the in-line comments for details.\n+#\n+#       There are tweaks for specific operating systems such as AIX, CygWin,\n+#       Darwin, MinGW, and NonStop.\n+#\n+#   (3) This script is generated from the Groovy template\n+#       https:\/\/github.com\/gradle\/gradle\/blob\/HEAD\/subprojects\/plugins\/src\/main\/resources\/org\/gradle\/api\/internal\/plugins\/unixStartScript.txt\n+#       within the Gradle project.\n+#\n+#       You can find Gradle at https:\/\/github.com\/gradle\/gradle\/.\n+#\n@@ -26,0 +66,1 @@\n+\n@@ -27,10 +68,13 @@\n-PRG=\"$0\"\n-# Need this for relative symlinks.\n-while [ -h \"$PRG\" ] ; do\n-    ls=`ls -ld \"$PRG\"`\n-    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n-    if expr \"$link\" : '\/.*' > \/dev\/null; then\n-        PRG=\"$link\"\n-    else\n-        PRG=`dirname \"$PRG\"`\"\/$link\"\n-    fi\n+app_path=$0\n+\n+# Need this for daisy-chained symlinks.\n+while\n+    APP_HOME=${app_path%\"${app_path##*\/}\"}  # leaves a trailing \/; empty if no leading path\n+    [ -h \"$app_path\" ]\n+do\n+    ls=$( ls -ld \"$app_path\" )\n+    link=${ls#*' -> '}\n+    case $link in             #(\n+      \/*)   app_path=$link ;; #(\n+      *)    app_path=$APP_HOME$link ;;\n+    esac\n@@ -38,4 +82,0 @@\n-SAVED=\"`pwd`\"\n-cd \"`dirname \\\"$PRG\\\"`\/\" >\/dev\/null\n-APP_HOME=\"`pwd -P`\"\n-cd \"$SAVED\" >\/dev\/null\n@@ -43,5 +83,4 @@\n-APP_NAME=\"Gradle\"\n-APP_BASE_NAME=`basename \"$0\"`\n-\n-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n-DEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n+# This is normally unused\n+# shellcheck disable=SC2034\n+APP_BASE_NAME=${0##*\/}\n+APP_HOME=$( cd \"${APP_HOME:-.\/}\" && pwd -P ) || exit\n@@ -50,1 +89,1 @@\n-MAX_FD=\"maximum\"\n+MAX_FD=maximum\n@@ -54,1 +93,1 @@\n-}\n+} >&2\n@@ -61,1 +100,1 @@\n-}\n+} >&2\n@@ -68,13 +107,5 @@\n-case \"`uname`\" in\n-  CYGWIN* )\n-    cygwin=true\n-    ;;\n-  Darwin* )\n-    darwin=true\n-    ;;\n-  MINGW* )\n-    msys=true\n-    ;;\n-  NONSTOP* )\n-    nonstop=true\n-    ;;\n+case \"$( uname )\" in                #(\n+  CYGWIN* )         cygwin=true  ;; #(\n+  Darwin* )         darwin=true  ;; #(\n+  MSYS* | MINGW* )  msys=true    ;; #(\n+  NONSTOP* )        nonstop=true ;;\n@@ -90,1 +121,1 @@\n-        JAVACMD=\"$JAVA_HOME\/jre\/sh\/java\"\n+        JAVACMD=$JAVA_HOME\/jre\/sh\/java\n@@ -92,1 +123,1 @@\n-        JAVACMD=\"$JAVA_HOME\/bin\/java\"\n+        JAVACMD=$JAVA_HOME\/bin\/java\n@@ -101,1 +132,1 @@\n-    JAVACMD=\"java\"\n+    JAVACMD=java\n@@ -109,13 +140,16 @@\n-if [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n-    MAX_FD_LIMIT=`ulimit -H -n`\n-    if [ $? -eq 0 ] ; then\n-        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n-            MAX_FD=\"$MAX_FD_LIMIT\"\n-        fi\n-        ulimit -n $MAX_FD\n-        if [ $? -ne 0 ] ; then\n-            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n-        fi\n-    else\n-        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n-    fi\n+if ! \"$cygwin\" && ! \"$darwin\" && ! \"$nonstop\" ; then\n+    case $MAX_FD in #(\n+      max*)\n+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.\n+        # shellcheck disable=SC3045\n+        MAX_FD=$( ulimit -H -n ) ||\n+            warn \"Could not query maximum file descriptor limit\"\n+    esac\n+    case $MAX_FD in  #(\n+      '' | soft) :;; #(\n+      *)\n+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.\n+        # shellcheck disable=SC3045\n+        ulimit -n \"$MAX_FD\" ||\n+            warn \"Could not set maximum file descriptor limit to $MAX_FD\"\n+    esac\n@@ -124,4 +158,7 @@\n-# For Darwin, add options to specify how the application appears in the dock\n-if $darwin; then\n-    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME\/media\/gradle.icns\\\"\"\n-fi\n+# Collect all arguments for the java command, stacking in reverse order:\n+#   * args from the command line\n+#   * the main class name\n+#   * -classpath\n+#   * -D...appname settings\n+#   * --module-path (only if needed)\n+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.\n@@ -130,18 +167,6 @@\n-if [ \"$cygwin\" = \"true\" -o \"$msys\" = \"true\" ] ; then\n-    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n-    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n-\n-    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n-\n-    # We build the pattern for arguments to be converted via cygpath\n-    ROOTDIRSRAW=`find -L \/ -maxdepth 1 -mindepth 1 -type d 2>\/dev\/null`\n-    SEP=\"\"\n-    for dir in $ROOTDIRSRAW ; do\n-        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n-        SEP=\"|\"\n-    done\n-    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n-    # Add a user-defined pattern to the cygpath arguments\n-    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n-        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n-    fi\n+if \"$cygwin\" || \"$msys\" ; then\n+    APP_HOME=$( cygpath --path --mixed \"$APP_HOME\" )\n+    CLASSPATH=$( cygpath --path --mixed \"$CLASSPATH\" )\n+\n+    JAVACMD=$( cygpath --unix \"$JAVACMD\" )\n+\n@@ -149,9 +174,10 @@\n-    i=0\n-    for arg in \"$@\" ; do\n-        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n-        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n-\n-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n-            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n-        else\n-            eval `echo args$i`=\"\\\"$arg\\\"\"\n+    for arg do\n+        if\n+            case $arg in                                #(\n+              -*)   false ;;                            # don't mess with options #(\n+              \/?*)  t=${arg#\/} t=\/${t%%\/*}              # looks like a POSIX filepath\n+                    [ -e \"$t\" ] ;;                      #(\n+              *)    false ;;\n+            esac\n+        then\n+            arg=$( cygpath --path --ignore --mixed \"$arg\" )\n@@ -159,1 +185,9 @@\n-        i=`expr $i + 1`\n+        # Roll the args list around exactly as many times as the number of\n+        # args, so each arg winds up back in the position where it started, but\n+        # possibly modified.\n+        #\n+        # NB: a `for` loop captures its iteration list before it begins, so\n+        # changing the positional parameters here affects neither the number of\n+        # iterations, nor the values presented in `arg`.\n+        shift                   # remove old arg\n+        set -- \"$@\" \"$arg\"      # push replacement arg\n@@ -161,12 +195,0 @@\n-    case $i in\n-        0) set -- ;;\n-        1) set -- \"$args0\" ;;\n-        2) set -- \"$args0\" \"$args1\" ;;\n-        3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n-        4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n-        5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n-        6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n-        7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n-        8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n-        9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n-    esac\n@@ -175,6 +197,0 @@\n-# Escape application args\n-save () {\n-    for i do printf %s\\\\n \"$i\" | sed \"s\/'\/'\\\\\\\\''\/g;1s\/^\/'\/;\\$s\/\\$\/' \\\\\\\\\/\" ; done\n-    echo \" \"\n-}\n-APP_ARGS=`save \"$@\"`\n@@ -182,2 +198,46 @@\n-# Collect all arguments for the java command, following the shell quoting and substitution rules\n-eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\n+DEFAULT_JVM_OPTS='\"-Xmx64m\" \"-Xms64m\"'\n+\n+# Collect all arguments for the java command;\n+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of\n+#     shell script including quotes and variable substitutions, so put them in\n+#     double quotes to make sure that they get re-expanded; and\n+#   * put everything else in single quotes, so that it's not re-expanded.\n+\n+set -- \\\n+        \"-Dorg.gradle.appname=$APP_BASE_NAME\" \\\n+        -classpath \"$CLASSPATH\" \\\n+        org.gradle.wrapper.GradleWrapperMain \\\n+        \"$@\"\n+\n+# Stop when \"xargs\" is not available.\n+if ! command -v xargs >\/dev\/null 2>&1\n+then\n+    die \"xargs is not available\"\n+fi\n+\n+# Use \"xargs\" to parse quoted args.\n+#\n+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.\n+#\n+# In Bash we could simply go:\n+#\n+#   readarray ARGS < <( xargs -n1 <<<\"$var\" ) &&\n+#   set -- \"${ARGS[@]}\" \"$@\"\n+#\n+# but POSIX shell has neither arrays nor command substitution, so instead we\n+# post-process each arg (as a line of input to sed) to backslash-escape any\n+# character that might be a shell metacharacter, then use eval to reverse\n+# that process (while maintaining the separation between arguments), and wrap\n+# the whole thing up as a single \"set\" statement.\n+#\n+# This will of course break if any of these variables contains a newline or\n+# an unmatched quote.\n+#\n+\n+eval \"set -- $(\n+        printf '%s\\n' \"$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS\" |\n+        xargs -n1 |\n+        sed ' s~[^-[:alnum:]+,.\/:=@_]~\\\\&~g; ' |\n+        tr '\\n' ' '\n+    )\" '\"$@\"'\n","filename":"plugins\/idea\/gradlew","additions":168,"deletions":108,"binary":false,"changes":276,"status":"modified"},{"patch":"@@ -17,1 +17,1 @@\n-@if \"%DEBUG%\" == \"\" @echo off\r\n+@if \"%DEBUG%\"==\"\" @echo off\r\n@@ -28,1 +28,2 @@\n-if \"%DIRNAME%\" == \"\" set DIRNAME=.\r\n+if \"%DIRNAME%\"==\"\" set DIRNAME=.\r\n+@rem This is normally unused\r\n@@ -43,1 +44,1 @@\n-if \"%ERRORLEVEL%\" == \"0\" goto execute\r\n+if %ERRORLEVEL% equ 0 goto execute\r\n@@ -78,1 +79,1 @@\n-if \"%ERRORLEVEL%\"==\"0\" goto mainEnd\r\n+if %ERRORLEVEL% equ 0 goto mainEnd\r\n@@ -83,2 +84,4 @@\n-if  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\r\n-exit \/b 1\r\n+set EXIT_CODE=%ERRORLEVEL%\r\n+if %EXIT_CODE% equ 0 set EXIT_CODE=1\r\n+if not \"\"==\"%GRADLE_EXIT_CONSOLE%\" exit %EXIT_CODE%\r\n+exit \/b %EXIT_CODE%\r\n","filename":"plugins\/idea\/gradlew.bat","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    <vendor>openjdk<\/vendor>\n","filename":"plugins\/idea\/src\/main\/resources\/META-INF\/plugin.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}