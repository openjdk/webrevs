{"files":[{"patch":"@@ -19,0 +19,4 @@\n+* Add options -testThreadFactory and -testThreadFactoryPath to allow\n+  the use of a custom thread factory, to be used to create the thread to run a test.\n+  * [CODETOOLS-7903373](https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-79033734)\n+\n@@ -24,1 +28,0 @@\n-\n@@ -28,1 +31,1 @@\n-  * Avoid using TestNG mixed mode. \n+  * Avoid using TestNG mixed mode.\n@@ -30,1 +33,1 @@\n-  * Support JUnit tests in a system module. \n+  * Support JUnit tests in a system module.\n@@ -32,1 +35,1 @@\n-  * Support executing a single method. \n+  * Support executing a single method.\n@@ -123,1 +126,1 @@\n-  \n+\n@@ -197,2 +200,0 @@\n-\n-\n","filename":"CHANGELOG.md","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+    public static final String CUSTOM_TEST_THREAD_FACTORY = \"-testThreadFactory\";\n+    public static final String CUSTOM_TEST_THREAD_FACTORY_PATH = \"-testThreadFactoryPath\";\n@@ -147,0 +149,2 @@\n+    private String testThreadFactory;\n+    private String testThreadFactoryPath;\n@@ -176,1 +180,5 @@\n-            } else {\n+            } else if (arg.equals(CUSTOM_TEST_THREAD_FACTORY) && i + 1 < args.length) {\n+                testThreadFactory = args[++i];\n+            } else if (arg.equals(CUSTOM_TEST_THREAD_FACTORY_PATH) && i + 1 < args.length) {\n+                testThreadFactoryPath = args[++i];\n+        }   else {\n@@ -306,0 +314,2 @@\n+                    .testThreadFactory(testThreadFactory)\n+                    .testThreadFactoryPath(testThreadFactoryPath)\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AgentServer.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,2 @@\n+    private String testThreadFactory;\n+    private String testThreadFactoryPath;\n@@ -116,0 +118,10 @@\n+    MainActionHelper testThreadFactory(String testThreadFactory) {\n+        this.testThreadFactory = testThreadFactory;\n+        return this;\n+    }\n+\n+    MainActionHelper testThreadFactoryPath(String testThreadFactoryPath) {\n+        this.testThreadFactoryPath = testThreadFactoryPath;\n+        return this;\n+    }\n+\n@@ -186,0 +198,3 @@\n+            AgentVMRunnable avmr = new AgentVMRunnable(method, methodArgs, err);\n+\n+            \/\/ Main and Thread are same here\n@@ -188,2 +203,7 @@\n-            AgentVMRunnable avmr = new AgentVMRunnable(method, methodArgs, err);\n-            Thread t = new Thread(tg, avmr, \"AgentVMThread\");\n+            Thread t;\n+            if (testThreadFactory == null) {\n+                t = new Thread(tg, avmr);\n+            } else {\n+                t = TestThreadFactoryHelper.loadThreadFactory(testThreadFactory, testThreadFactoryPath).newThread(avmr);\n+            }\n+\n@@ -196,0 +216,1 @@\n+            t.setName(\"AgentVMThread\");\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainActionHelper.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,4 @@\n+\n+    public static String TEST_THREAD_FACTORY = \"jtreg.test.thread.factory\";\n+    public static String TEST_THREAD_FACTORY_PATH = \"jtreg.test.thread.factory.path\";\n+\n@@ -68,2 +72,11 @@\n-        MainThreadGroup tg = new  MainThreadGroup();\n-        Thread t = new Thread(tg, new MainThread(moduleName, className, classArgs), \"MainThread\");\n+        MainThreadGroup tg = new MainThreadGroup();\n+        Runnable task = new MainTask(moduleName, className, classArgs);\n+        Thread t;\n+        String testThreadFactory = System.getProperty(TEST_THREAD_FACTORY);\n+        String testThreadFactoryPath = System.getProperty(TEST_THREAD_FACTORY_PATH);\n+        if (testThreadFactory == null) {\n+            t = new Thread(tg, task);\n+        } else {\n+            t = TestThreadFactoryHelper.loadThreadFactory(testThreadFactory, testThreadFactoryPath).newThread(task);\n+        }\n+        t.setName(\"MainThread\");\n@@ -97,2 +110,2 @@\n-    static class MainThread extends Thread {\n-        MainThread(String moduleName, String className, String[] args) {\n+    static class MainTask implements Runnable {\n+        MainTask(String moduleName, String className, String[] args) {\n@@ -222,0 +235,1 @@\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainWrapper.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.agent;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ThreadFactory;\n+\n+\/**\n+ * A class which loads thread factory for threads used to run test by jtreg.\n+ * By default, jtreg creates a new thread for each test using {@code new Thread(ThreadGroup tg, Runnable task);},\n+ * but this may be overridden by providing an implementation of {@link java.util.concurrent.ThreadFactory},\n+ * which might provide user-defined threads for test execution.\n+ * Please note, that additional threads started by tests don't use this factory and remain the same.\n+ * <p>\n+ * Example:\n+ * <pre>\n+ * new Thread(() -> { ....; task.run(); ....; });\n+ * or\n+ * new VirtualThread(task);\n+ * <\/pre>\n+ * Implementation may be specified on the {@code jtreg} command line\n+ * using {@code -testThreadFactory} and {@code -testThreadFactoryPath} arguments.\n+ * It is executed by tested JDK in {@code agentvm} and {@code othervm} modes.\n+ *\/\n+public final class TestThreadFactoryHelper {\n+    static ThreadFactory loadThreadFactory(String className, String path) {\n+\n+        SearchPath classpath = new SearchPath(path);\n+        List<URL> urls = new ArrayList<>();\n+        for (Path f : classpath.asList()) {\n+            try {\n+                urls.add(f.toUri().toURL());\n+            } catch (MalformedURLException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        try (URLClassLoader loader = new URLClassLoader(urls.toArray(new URL[]{}), ClassLoader.getSystemClassLoader())) {\n+            Class<? extends ThreadFactory> clz = loader.loadClass(className).asSubclass(ThreadFactory.class);\n+            Constructor<? extends ThreadFactory> ctor = clz.getDeclaredConstructor();\n+            ThreadFactory factory = ctor.newInstance();\n+            return factory;\n+        } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException\n+                 | InstantiationException | IllegalAccessException | IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestThreadFactoryHelper.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -632,0 +632,2 @@\n+    private static final String CUSTOM_TEST_THREAD_FACTORY = \".testThreadFactory\";\n+    private static final String CUSTOM_TEST_THREAD_FACTORY_PATH = \".testThreadFactoryPath\";\n@@ -722,0 +724,8 @@\n+            v = data.get(prefix + CUSTOM_TEST_THREAD_FACTORY);\n+            if (v != null)\n+                setTestThreadFactory(v);\n+\n+            v = data.get(prefix + CUSTOM_TEST_THREAD_FACTORY_PATH);\n+            if (v != null)\n+                setTestThreadFactoryPath(v);\n+\n@@ -803,0 +813,8 @@\n+        if (testThreadFactory != null) {\n+            data.put(prefix + CUSTOM_TEST_THREAD_FACTORY, testThreadFactory);\n+        }\n+\n+        if (testThreadFactoryPath != null) {\n+            data.put(prefix + CUSTOM_TEST_THREAD_FACTORY_PATH, testThreadFactoryPath);\n+        }\n+\n@@ -1248,0 +1266,19 @@\n+    \/\/---------------------------------------------------------------------\n+\n+    public void setTestThreadFactory(String testThreadFactory) {\n+        this.testThreadFactory = testThreadFactory;\n+    }\n+\n+    public String getTestThreadFactory() {\n+        return testThreadFactory;\n+    }\n+\n+    private String testThreadFactory;\n+\n+    public void setTestThreadFactoryPath(String testThreadFactoryPath) {\n+        this.testThreadFactoryPath = testThreadFactoryPath;\n+    }\n+\n+    public String getTestThreadFactoryPath() {\n+        return testThreadFactoryPath;\n+    }\n@@ -1249,0 +1286,1 @@\n+    private String testThreadFactoryPath;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionParameters.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,2 @@\n-            File policyFile, float timeoutFactor, Logger logger) throws Fault {\n+            File policyFile, float timeoutFactor, Logger logger,\n+            String testThreadFactory, String testThreadFactoryPath) throws Fault {\n@@ -137,0 +138,9 @@\n+            if (testThreadFactory != null) {\n+                cmd.add(AgentServer.CUSTOM_TEST_THREAD_FACTORY);\n+                cmd.add(testThreadFactory);\n+            }\n+\n+            if (testThreadFactoryPath != null) {\n+                cmd.add(CUSTOM_TEST_THREAD_FACTORY_PATH);\n+                cmd.add(testThreadFactoryPath);\n+            }\n@@ -741,1 +751,3 @@\n-                                    Map<String, String> envVars)\n+                                    Map<String, String> envVars,\n+                                    String testThreadFactory,\n+                                    String testThreadFactoryPath)\n@@ -759,1 +771,2 @@\n-                a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger);\n+                a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger,\n+                        testThreadFactory, testThreadFactoryPath);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -700,1 +700,1 @@\n-            agent = script.getAgent(jdk, agentClasspath, vmOpts);\n+            agent = script.getAgent(jdk, agentClasspath, vmOpts, null, null);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/CompileAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -483,0 +483,7 @@\n+\n+        if (script.getTestThreadFactory() != null) {\n+            javaProps.put(MainWrapper.TEST_THREAD_FACTORY, script.getTestThreadFactory());\n+        }\n+        if (script.getTestThreadFactoryPath() != null) {\n+            javaProps.put(MainWrapper.TEST_THREAD_FACTORY_PATH, script.getTestThreadFactoryPath());\n+        }\n@@ -623,0 +630,1 @@\n+            String factory = script.getTestThreadFactory() == null ? null : script.getTestThreadFactory();\n@@ -624,1 +632,3 @@\n-                    filterJavaOpts(join(script.getTestVMJavaOptions(), script.getTestDebugOptions())));\n+                    filterJavaOpts(join(script.getTestVMJavaOptions(), script.getTestDebugOptions())),\n+                    factory,\n+                    script.getTestThreadFactoryPath());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import com.sun.javatest.regtest.agent.MainWrapper;\n@@ -1131,0 +1132,1 @@\n+\n@@ -1138,0 +1140,8 @@\n+    String getTestThreadFactory() {\n+        return params.getTestThreadFactory();\n+    }\n+\n+    String getTestThreadFactoryPath() {\n+        return params.getTestThreadFactoryPath();\n+    }\n+\n@@ -1234,1 +1244,2 @@\n-    Agent getAgent(JDK jdk, SearchPath classpath, List<String> testVMOpts) throws Agent.Fault {\n+    Agent getAgent(JDK jdk, SearchPath classpath, List<String> testVMOpts,\n+                   String testThreadFactory, String testThreadFactoryPath) throws Agent.Fault {\n@@ -1238,0 +1249,6 @@\n+\n+        if (testThreadFactory != null) {\n+            \/\/ Add property to differ agents with and without MainWrapper\n+            vmOpts.add(\"-D\" + MainWrapper.TEST_THREAD_FACTORY + \"=\" + testThreadFactory);\n+        }\n+\n@@ -1263,1 +1280,2 @@\n-        Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(), envVars);\n+        Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(), envVars,\n+                testThreadFactory, testThreadFactoryPath);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -536,0 +536,14 @@\n+       new Option(OLD, MAIN, \"\", \"-ttf\", \"-testThreadFactory\") {\n+            @Override\n+            public void process(String opt, String arg) {\n+                testThreadFactory = arg;\n+            }\n+        },\n+\n+        new Option(STD, MAIN, \"\", \"-ttfp\", \"-testThreadFactoryPath\") {\n+            @Override\n+            public void process(String opt, String arg) {\n+                testThreadFactoryPathArg = arg;\n+            }\n+        },\n+\n@@ -1682,0 +1696,8 @@\n+            if (testThreadFactory != null) {\n+                rp.setTestThreadFactory(testThreadFactory);\n+            }\n+\n+            if (testThreadFactoryPathArg != null) {\n+                rp.setTestThreadFactoryPath(testThreadFactoryPathArg);\n+            }\n+\n@@ -2281,0 +2303,2 @@\n+    private String testThreadFactory;\n+    private String testThreadFactoryPathArg;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,0 +174,6 @@\n+help.main.ttf.arg=<classname>\n+help.main.ttf.desc=Specifies the class to create thread factory for test execution. \\\n+    The class should implement the java.util.concurrent.ThreadFactory interface.\n+help.main.ttfp.arg=<path>\n+help.main.ttfp.desc=Specifies classspath for custom test thread factory implementation. \\\n+    The classes from this classpath are loaded by tested JDK only using URLClassLoader.\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-\n","filename":"test\/docs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"","filename":"test\/testThreadFactory\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run main\/othervm Test\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run main Test\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run driver Test\n+ *\/\n+\n+public class Test {\n+    public static void main(String... args) throws Exception {\n+        if (!\"Test\".equals(System.getProperty(\"test.thread.factory\"))) {\n+            throw new Exception(\"Property 'test.thread.factory' = \" + System.getProperty(\"test.thread.factory\"));\n+        }\n+\n+        String threadClassName = Thread.currentThread().getClass().getName();\n+        if (!threadClassName.equals(\"TestThread\")) {\n+            throw new Exception(\"Main Thread name = \" + threadClassName);\n+        }\n+    }\n+}\n","filename":"test\/testThreadFactory\/Test.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+#\n+# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#----------------------------------------------------------------------\n+\n+$(BUILDTESTDIR)\/TestThreadFactory.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(JDKJAVAC) \\\n+\t\t-d $(@:%.ok=%)\/classes \\\n+\t\t$(TESTDIR)\/testThreadFactory\/TestThreadFactory.java\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-w:$(@:%.ok=%)\/cmd.othervm\/work \\\n+\t\t-r:$(@:%.ok=%)\/cmd.othervm\/report \\\n+\t\t-verbose:fail \\\n+\t\t-testThreadFactory:TestThreadFactory \\\n+\t\t-testThreadFactoryPath:$(@:%.ok=%)\/classes \\\n+\t\t$(TESTDIR)\/testThreadFactory\n+\tJTREG_JAVA=$(JDKJAVA) $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-jdk:$(JDKHOME) \\\n+                -agentvm \\\n+\t\t-w:$(@:%.ok=%)\/cmd.agentvm\/work \\\n+\t\t-r:$(@:%.ok=%)\/cmd.agentvm\/report \\\n+\t\t-verbose:fail \\\n+\t\t-testThreadFactory:TestThreadFactory \\\n+\t\t-testThreadFactoryPath:$(@:%.ok=%)\/classes \\\n+\t\t$(TESTDIR)\/testThreadFactory\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/TestThreadFactory.ok\n","filename":"test\/testThreadFactory\/TestThreadFactory.gmk","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.ThreadFactory;\n+\n+public class TestThreadFactory implements ThreadFactory {\n+\n+    public TestThreadFactory() {\n+        System.setProperty(\"test.thread.factory\", \"Test\");\n+    }\n+\n+    @Override\n+    public Thread newThread(Runnable task) {\n+        return new TestThread(task);\n+    }\n+\n+}\n+\n+class TestThread extends Thread {\n+    public TestThread(Runnable target) {\n+        super(target);\n+    }\n+}\n","filename":"test\/testThreadFactory\/TestThreadFactory.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"}]}