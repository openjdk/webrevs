{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,3 @@\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n@@ -33,0 +36,1 @@\n+import java.util.Map;\n@@ -112,0 +116,4 @@\n+        \/\/ keeps track of the test start time for each test\n+        private final Map<ITestResult, Long> startTimeNanos =\n+                Collections.synchronizedMap(new IdentityHashMap<>());\n+\n@@ -115,1 +123,5 @@\n-\/\/            report(itr);\n+            \/\/ Although testng itself provides getStartMillis() and getEndMillis()\n+            \/\/ on ITestResult for duration tracking, the testng implementation uses\n+            \/\/ System.currentTimeMillis(). We instead prefer using System.nanoTime() API\n+            \/\/ for duration tracking.\n+            startTimeNanos.put(itr, System.nanoTime());\n@@ -188,1 +200,5 @@\n-\n+            Long startNanos = startTimeNanos.remove(itr);\n+            Duration duration = startNanos == null\n+                    ? Duration.ZERO\n+                    : Duration.ofNanos(System.nanoTime() - startNanos);\n+            long durationMillis = duration.toMillis();\n@@ -194,0 +210,1 @@\n+                        + \" [\" + durationMillis + \"ms]\"\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestNGRunner.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -66,1 +66,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -93,1 +93,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -119,1 +119,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -145,1 +145,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -171,1 +171,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n@@ -197,1 +197,1 @@\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) \"^test\") ) ; \\\n+\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD  | $(GREP) -o \"^test.*success \") ) ; \\\n","filename":"test\/testngQueryTest\/TestNGQueryTest.gmk","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"","filename":"test\/testngTestDuration\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.SkipException;\n+\n+\/*\n+ * @test\n+ * @run testng Test\n+ *\/\n+public class Test {\n+\n+    @org.testng.annotations.Test\n+    public void alwaysPass() {\n+        System.out.println(\"running alwaysPass\");\n+    }\n+\n+    @org.testng.annotations.Test\n+    public void alwaysFail() throws Exception {\n+        System.out.println(\"running alwaysFail\");\n+        \/\/ intentionally sleep for while to allow the test duration to report\n+        \/\/ a value that has more than one digit\n+        Thread.sleep(30);\n+        throw new RuntimeException(\"intentional failure from alwaysFail\");\n+    }\n+\n+    @org.testng.annotations.Test\n+    public void alwaysSkip() throws Exception {\n+        System.out.println(\"running alwaysFail\");\n+        Thread.sleep(2);\n+        throw new SkipException(\"intentionally skipped from alwaysSkip\");\n+    }\n+\n+    @org.testng.annotations.Test(enabled = false)\n+    public void disabledTest() {\n+        throw new RuntimeException(\"should not have been invoked\");\n+    }\n+}\n","filename":"test\/testngTestDuration\/Test.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# verify that the testng test method execution report includes the duration of the test\n+$(BUILDTESTDIR)\/TestngTestDuration.ok: \\\n+\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java -jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-w $(@:%.ok=%)\/work\/ -r $(@:%.ok=%)\/report\/ \\\n+\t\t$(TESTDIR)\/testngTestDuration\/Test.java > $(@:%.ok=%\/jt.log) 2>&1 ; ls $(@:%.ok=%)\/work ; rc=$$? ; \\\n+\t\tif [ \"$$rc\" != 0 ]; then echo \"unexpected exit code from test execution: \" $$rc ; exit 1 ; fi ; \\\n+\t\t$(GREP) 'test Test.alwaysFail(): failure \\[[0-9]\\+ms\\]' $(@:%.ok=%)\/work\/Test.jtr > \/dev\/null ; found=$$?; \\\n+\t\tif [ \"$$found\" != 0 ]; then echo \"Test.jtr is missing alwaysFail() report\" ; exit 1 ; fi ; \\\n+\t\t$(GREP) 'test Test.alwaysPass(): success \\[[0-9]\\+ms\\]' $(@:%.ok=%)\/work\/Test.jtr > \/dev\/null ; found=$$?; \\\n+\t\tif [ \"$$found\" != 0 ]; then echo \"Test.jtr is missing alwaysPass() report\" ; exit 1 ; fi ; \\\n+\t\t$(GREP) 'test Test.alwaysSkip(): skip \\[[0-9]\\+ms\\]' $(@:%.ok=%)\/work\/Test.jtr > \/dev\/null ; found=$$?; \\\n+\t\tif [ \"$$found\" != 0 ]; then echo \"Test.jtr is missing alwaysSkip() report\" ; exit 1 ; fi\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += \\\n+\t$(BUILDTESTDIR)\/TestngTestDuration.ok\n\\ No newline at end of file\n","filename":"test\/testngTestDuration\/TestngTestDuration.gmk","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}