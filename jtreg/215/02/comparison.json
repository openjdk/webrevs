{"files":[{"patch":"@@ -101,17 +101,0 @@\n-    \/\/ the following code here allows us to run jtreg on older\n-    \/\/ JDKs where the pid() method is unavailable on the\n-    \/\/ Process class. we use PID only for debug purposes and\n-    \/\/ the inability to get the PID of a launched AgentServer\n-    \/\/ is OK.\n-    private static final long UNKNOWN_PID = -1;\n-    private static final Method PID_METHOD;\n-    static {\n-        Method pidMethod = null;\n-        try {\n-            pidMethod = Process.class.getDeclaredMethod(\"pid\"); \/\/ only available in Java 9+\n-        } catch (Exception e) {\n-            pidMethod = null;\n-        }\n-        PID_METHOD = pidMethod;\n-    }\n-\n@@ -183,1 +166,1 @@\n-            final long pid = getPid(process);\n+            agentServerPid = ProcessUtils.getProcessId(process);\n@@ -193,1 +176,1 @@\n-                        (pid != UNKNOWN_PID ? \" from process \" + pid : \"\"));\n+                        (agentServerPid != -1 ? \" from process \" + agentServerPid : \"\"));\n@@ -596,0 +579,11 @@\n+    \/**\n+     * Returns the process id of the {@code AgentServer} with which this {@code Agent}\n+     * communicates or {@code -1} if the process id of the {@code AgentServer}\n+     * couldn't be determined.\n+     *\n+     * @return the AgentServer's process id\n+     *\/\n+    long getAgentServerPid() {\n+        return agentServerPid;\n+    }\n+\n@@ -623,11 +617,0 @@\n-    private static long getPid(final Process process) {\n-        if (PID_METHOD == null) {\n-            return UNKNOWN_PID;\n-        }\n-        try {\n-            return (long) PID_METHOD.invoke(process);\n-        } catch (Exception e) {\n-            return UNKNOWN_PID;\n-        }\n-    }\n-\n@@ -644,0 +627,1 @@\n+    private final long agentServerPid;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":14,"deletions":30,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -299,0 +299,1 @@\n+            cmd.setMessageWriter(section.getMessageWriter());\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/AppletAction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -647,0 +647,1 @@\n+        cmd.setMessageWriter(section.getMessageWriter());\n@@ -706,0 +707,2 @@\n+            final long pid = agent.getAgentServerPid();\n+            section.getMessageWriter().println(\"Process id: \" + ((pid == -1) ? \"unknown\" : pid));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/CompileAction.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -521,0 +521,1 @@\n+            cmd.setMessageWriter(section.getMessageWriter());\n@@ -635,0 +636,2 @@\n+            final long pid = agent.getAgentServerPid();\n+            section.getMessageWriter().println(\"Process id: \" + ((pid == -1) ? \"unknown\" : pid));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -219,0 +219,5 @@\n+    ProcessCommand setMessageWriter(PrintWriter messageWriter) {\n+        this.log = messageWriter;\n+        return this;\n+    }\n+\n@@ -242,0 +247,4 @@\n+            if (log != null) {\n+                final long pid = ProcessUtils.getProcessId(process);\n+                log.println(\"Process id: \" + ((pid == -1) ? \"unknown\" : pid));\n+            }\n@@ -426,0 +435,1 @@\n+    private PrintWriter log;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ProcessCommand.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -299,0 +299,1 @@\n+                    .setMessageWriter(section.getMessageWriter())\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ShellAction.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -36,1 +37,4 @@\n-    private static Method destroyForciblyMethod;\n+    private static final Method DESTROY_FORCIBLY_METHOD;\n+    private static final Method PID_METHOD;\n+\n+    private static final long UNKNOWN_PID = -1;\n@@ -39,0 +43,1 @@\n+        Method destroyMethod;\n@@ -40,1 +45,1 @@\n-            destroyForciblyMethod = Process.class.getDeclaredMethod(\"destroyForcibly\");\n+            destroyMethod = Process.class.getDeclaredMethod(\"destroyForcibly\");\n@@ -43,0 +48,1 @@\n+            destroyMethod = null;\n@@ -44,0 +50,9 @@\n+        DESTROY_FORCIBLY_METHOD = destroyMethod;\n+\n+        Method pidMethod = null;\n+        try {\n+            pidMethod = Process.class.getDeclaredMethod(\"pid\"); \/\/ only available in Java 9+\n+        } catch (NoSuchMethodException e) {\n+            pidMethod = null;\n+        }\n+        PID_METHOD = pidMethod;\n@@ -56,1 +71,1 @@\n-        if (destroyForciblyMethod != null) {\n+        if (DESTROY_FORCIBLY_METHOD != null) {\n@@ -58,1 +73,1 @@\n-                return (Process) destroyForciblyMethod.invoke(process);\n+                return (Process) DESTROY_FORCIBLY_METHOD.invoke(process);\n@@ -69,0 +84,21 @@\n+\n+    \/**\n+     * Returns the process id of the {@code process}. If the process id cannot be determined\n+     * or if there was some exception when determining the process id, then this method returns\n+     * {@code -1}.\n+     *\n+     * @param process the process\n+     * @throws NullPointerException if {@code process} is null\n+     * @return the process id or -1\n+     *\/\n+    public static long getProcessId(Process process) {\n+        Objects.requireNonNull(process);\n+        if (PID_METHOD == null) {\n+            return UNKNOWN_PID;\n+        }\n+        try {\n+            return (long) PID_METHOD.invoke(process);\n+        } catch (Exception e) {\n+            return UNKNOWN_PID;\n+        }\n+    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/util\/ProcessUtils.java","additions":41,"deletions":5,"binary":false,"changes":46,"status":"modified"},{"patch":"","filename":"test\/processid\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -28,2 +28,1 @@\n-    public static void main(String... args) {\n-        System.out.println(\"hello!\");\n+    public static void main(String[] args) {\n@@ -32,0 +31,1 @@\n+\n","filename":"test\/processid\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jtrContentTest\/Test.java","status":"copied"},{"patch":"@@ -0,0 +1,39 @@\n+#  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  This code is free software; you can redistribute it and\/or modify it\n+#  under the terms of the GNU General Public License version 2 only, as\n+#  published by the Free Software Foundation.\n+#\n+#  This code is distributed in the hope that it will be useful, but WITHOUT\n+#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+#  version 2 for more details (a copy is included in the LICENSE file that\n+#  accompanied this code).\n+#\n+#  You should have received a copy of the GNU General Public License version\n+#  2 along with this work; if not, write to the Free Software Foundation,\n+#  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+#  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+#  or visit www.oracle.com if you need additional information or have any\n+#  questions.\n+\n+# verify that the jtr file of a test execution\n+# reports \"Process id: \" in each section messages of the jtreg action\n+$(BUILDTESTDIR)\/ReportProcessId.ok: \\\n+\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%) && $(MKDIR) $(@:%.ok=%)\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t$(TESTDIR)\/processid \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1 || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\tnum_occur=`$(GREP) -s 'Process id: ' -R $(@:%.ok=%\/work\/Test.jtr) | wc -l | xargs`; \\\n+\t\tif [ \"$$num_occur\" != 2 ]; then echo \"Unexpected number of \\\"Process id: \\\" occurrences: $$num_occur\" ; exit 1 ; fi\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += \\\n+\t$(BUILDTESTDIR)\/ReportProcessId.ok\n","filename":"test\/processid\/TestVersionCheck.gmk","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}