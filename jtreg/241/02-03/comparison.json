{"files":[{"patch":"@@ -142,1 +142,1 @@\n-                            .orElseThrow(() -> new IllegalArgumentException(\"Selector can not be pased: \" + selectorStr));\n+                            .orElseThrow(() -> new IllegalArgumentException(\"Selector can not be parsed: \" + selectorStr));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,6 +446,7 @@\n-executed. For any tests executed by JUnit Platform, the string is interpreted\n-as a pattern consisting of class name, method name, and parameter types, such as: \n-`<class name>[::<method name>([<param type>[...,<param type>]])]`. Both the\n-`<class name>` and the `<param type>` elements must be supplied as binary\n-names (as returned by `Class::getName`). If you give conflicting values for\n-the string, including not setting any value, the last one specified will be used.\n+executed. For any tests executed by JUnit Platform, the string is by default interpreted\n+as the name of a single method in the test to be executed. However, it is also\n+possible to use other JUnit selectors by prefixing the query string with `junit-select:`.\n+The rest of the string can then be any selector identifier as listed in the left-most\n+column of the table found here: https:\/\/junit.org\/junit5\/docs\/current\/user-guide\/#running-tests-discovery-selectors \n+If you give conflicting values for the string, including not setting any value, the last\n+one specified will be used.\n@@ -498,1 +499,1 @@\n-Specify the test and method on the command-line with the `?` syntax:\n+Specify the test and method name on the command-line with the `?` syntax:\n@@ -500,1 +501,1 @@\n-    path-to-test?class-name::method-name(param-type, ...param-type)\n+    path-to-test?method-name\n@@ -502,2 +503,1 @@\n-The `class-name` and `param-type` elements must be binary class names, as returned by `Class::getName`.\n-To run a method that has no parameters, the `param-type` elements can be omitted, like so:\n+This will run a method called `method-name`, having no parameters, in the top-level test class.\n@@ -505,1 +505,1 @@\n-    path-to-test?class-name::method-name()\n+To run a parameterized test method, the extended selector syntax has to be used. For example:\n@@ -507,2 +507,1 @@\n-To run a specific nested test class, annotated with the `@Nested` annotation, just the\n-class name should be passed after the `?`:\n+    path-to-test?junit-select:method:class-name#method-name(param-type, ...param-type)\n@@ -510,1 +509,8 @@\n-    path-to-test?class-name\n+Note that in this case, the `class-name` and `param-type` elements must be binary names, as returned\n+by `Class::getName`. For some examples, see: https:\/\/junit.org\/junit5\/docs\/current\/api\/org.junit.platform.engine\/org\/junit\/platform\/engine\/discovery\/DiscoverySelectors.html#selectMethod(java.lang.String)\n+\n+To run a specific nested test class, annotated with the `@Nested` annotation, the following can be used:\n+\n+    path-to-test?junit-select:class:class-name\n+\n+Note that again, the `class-name` has to be the binary name of the class.\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -92,1 +92,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -119,2 +119,2 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -146,2 +146,2 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -173,1 +173,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -201,1 +201,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -276,1 +276,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c?m13\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c?m13 \\\n@@ -299,1 +299,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m14\" \\\n+\t\t$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m14 \\\n","filename":"test\/junitQueryTest\/JUnitQueryTest.gmk","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}