{"files":[{"patch":"@@ -176,1 +176,0 @@\n-TR      = \/usr\/bin\/tr\n","filename":"make\/Defs.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.junit.platform.engine.DiscoverySelector;\n@@ -66,0 +67,2 @@\n+    private static final String JUNIT_SELECT_PREFIX = \"junit-select:\";\n+\n@@ -133,1 +136,1 @@\n-            LauncherDiscoveryRequest request;\n+            DiscoverySelector selector;\n@@ -135,13 +138,9 @@\n-                TestQuery testQuery = TestQuery.parse(testQueryStr);\n-                String className = testQuery.className();\n-                Optional<String> methodName = testQuery.methodName();\n-                Optional<List<String>> paramTypeNames = testQuery.paramTypeNames();\n-                Optional<String> paramTypeNamesStr = paramTypeNames.map(l -> l.stream().collect(Collectors.joining(\",\")));\n-\n-                request = LauncherDiscoveryRequestBuilder.request()\n-                    .selectors(methodName.isPresent()\n-                            ? paramTypeNamesStr.isPresent()\n-                                ? DiscoverySelectors.selectMethod(className, methodName.get(), paramTypeNamesStr.get())\n-                                : DiscoverySelectors.selectMethod(className, methodName.get())\n-                            : DiscoverySelectors.selectClass(className))\n-                        .build();\n+                if (testQueryStr.startsWith(JUNIT_SELECT_PREFIX)) {\n+                    \/\/ https:\/\/junit.org\/junit5\/docs\/current\/user-guide\/#running-tests-discovery-selectors\n+                    String selectorStr = testQueryStr.substring(JUNIT_SELECT_PREFIX.length());\n+                    selector = DiscoverySelectors.parse(selectorStr)\n+                            .orElseThrow(() -> new IllegalArgumentException(\"Selector can not be pased: \" + selectorStr));\n+                } else {\n+                    \/\/ legacy, assume method name\n+                    selector = DiscoverySelectors.selectMethod(mainClass, testQueryStr);\n+                }\n@@ -149,3 +148,1 @@\n-                request = LauncherDiscoveryRequestBuilder.request()\n-                    .selectors(DiscoverySelectors.selectClass(mainClass))\n-                    .build();\n+                selector = DiscoverySelectors.selectClass(mainClass);\n@@ -153,0 +150,3 @@\n+            LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\n+                    .selectors(selector)\n+                    .build();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/JUnitRunner.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,1 +33,4 @@\n-import java.util.*;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n@@ -43,1 +46,0 @@\n-import org.testng.ITestNGMethod;\n@@ -99,2 +101,2 @@\n-        if (testQuery != null && !testQuery.isEmpty()) {\n-            testng.setMethodInterceptor(new FilterMethods(TestQuery.parse(testQuery)));\n+        if (testQuery != null) {\n+            testng.setMethodInterceptor(new FilterMethods(className, testQuery));\n@@ -272,1 +274,2 @@\n-        private final TestQuery testQuery;\n+        private final String testClass;\n+        private final String testQuery;\n@@ -274,1 +277,2 @@\n-        public FilterMethods(TestQuery testQuery) {\n+        public FilterMethods(String testClass, String testQuery) {\n+            this.testClass = testClass;\n@@ -282,25 +286,2 @@\n-                      .filter(mi -> {\n-                          ITestNGMethod method = mi.getMethod();\n-                          if (!method.getRealClass().getName().equals(testQuery.className())) {\n-                              return false;\n-                          }\n-\n-                          if (testQuery.methodName().isPresent()\n-                                  && !testQuery.methodName().get().equals(method.getMethodName())) {\n-                              return false;\n-                          }\n-\n-                          if (testQuery.paramTypeNames().isPresent()) {\n-                              List<String> paramTypeNames = testQuery.paramTypeNames().get();\n-                              Class<?>[] params = method.getConstructorOrMethod().getParameterTypes();\n-                              if (params.length != paramTypeNames.size()) {\n-                                  return false;\n-                              }\n-                              for (int i = 0; i < params.length; i++) {\n-                                  if (!params[i].getName().equals(paramTypeNames.get(i))) {\n-                                      return false;\n-                                  }\n-                              }\n-                          }\n-                          return true;\n-                      })\n+                      .filter(mi -> testQuery.equals(mi.getMethod()\n+                                                       .getMethodName()))\n@@ -310,1 +291,1 @@\n-                throw new TestNGException(\"Could not find method with query [\" + testQuery + \"]\");\n+                throw new TestNGException(\"Could not find method with name [\" + testQuery + \"] in class [\" + testClass + \"]\");\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestNGRunner.java","additions":13,"deletions":32,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.javatest.regtest.agent;\n-\n-import java.util.*;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public class TestQuery {\n-    private final String className;\n-    private final String methodName;\n-    private final List<String> paramTypeNames;\n-\n-    private TestQuery(String className, String methodName, List<String> paramTypeNames) {\n-        this.className = Objects.requireNonNull(className);\n-        this.methodName = methodName;\n-        this.paramTypeNames = paramTypeNames;\n-    }\n-\n-    \/\/ <class name>[::<method name>[([<param type>[...,<param type>]])]]\n-    public static TestQuery parse(String queryString) {\n-        String[] parts = queryString.split(\"::\", 2);\n-        String className = parts[0];\n-        String methodName = null;\n-        List<String> paramTypeNames = null;\n-        if (parts.length > 1) { \/\/ method name present\n-            parts = parts[1].split(\"\\\\(\", 2);\n-            if (parts.length != 2) {\n-                throw new IllegalArgumentException(\"Invalid query format: \" + queryString);\n-            }\n-            methodName = parts[0];\n-            String types = parts[1].substring(0, parts[1].length() - 1); \/\/ drop trailing ')'\n-            if (types.isEmpty()) {\n-                paramTypeNames = Collections.emptyList();\n-            } else {\n-                String[] typeNames = types.split(\",\");\n-                paramTypeNames = Collections.unmodifiableList(Arrays.asList(typeNames));\n-            }\n-        }\n-\n-        return new TestQuery(className, methodName, paramTypeNames);\n-    }\n-\n-    public String className() {\n-        return className;\n-    }\n-\n-    public Optional<String> methodName() {\n-        return Optional.ofNullable(methodName);\n-    }\n-\n-    public Optional<List<String>> paramTypeNames() {\n-        return Optional.ofNullable(paramTypeNames);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return className()\n-                + methodName().map(mn -> \"::\" + mn).orElse(\"\")\n-                + paramTypeNames().map(pn -> '(' + String.join(\",\", pn) + ')').orElse(\"\");\n-    }\n-}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestQuery.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -53,1 +53,1 @@\n-# Execute a single specific method (Test1.m12) using the query syntax  Test1.java?Test1::m12()\n+# Execute a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n@@ -65,1 +65,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n@@ -79,1 +79,1 @@\n-# - a single specific method (Test1.m12) using the query syntax  Test1.java?Test1::m12()\n+# - a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n@@ -92,1 +92,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n@@ -119,2 +119,2 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n@@ -146,2 +146,2 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m12\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n@@ -173,1 +173,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n@@ -201,1 +201,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m13\" \\\n@@ -226,1 +226,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::parameterized(java.lang.String,Test1\\$$NestedClass,boolean,byte,char,short,int,long,float,double,[Ljava.lang.String;,[Z,[B,[C,[S,[I,[J,[F,[D)\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?junit-select:method:Test1#parameterized(java.lang.String,Test1\\$$NestedClass,boolean,byte,char,short,int,long,float,double,[Ljava.lang.String;,[Z,[B,[C,[S,[I,[J,[F,[D)\" \\\n@@ -251,1 +251,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1\\$$NestedTests\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?junit-select:class:Test1\\$$NestedTests\" \\\n@@ -276,1 +276,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c?Test1::m13()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c?m13\" \\\n@@ -279,1 +279,1 @@\n-\t$(GREP) -s \"Error: Invalid use of query component: a\/b\/c?Test1::m13()\" $(@:%.ok=%)\/jt.log\n+\t$(GREP) -s \"Error: Invalid use of query component: a\/b\/c?m13\" $(@:%.ok=%)\/jt.log\n@@ -299,1 +299,1 @@\n-\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?Test1::m14()\" \\\n+\t\t\"$(TESTDIR)\/junitQueryTest\/a\/b\/c\/Test1.java?m14\" \\\n","filename":"test\/junitQueryTest\/JUnitQueryTest.gmk","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -43,3 +43,2 @@\n-\tRAN_TESTS=$$( $(ECHO) $$OUT | $(GREP) -oP \"(?<=test )[^(]*\" | $(TR) '\\n' ' ' ) ; \\\n-\tif [ \"$$RAN_TESTS\" != \"Test1.m11 Test1.m12 Test1.m13 Test1.parameterized Test2.m21 Test2.m22 Test2.m23 \" ]; then \\\n-\t    echo \"unexpected set of tests run: $$RAN_TESTS\"; exit 1 ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m11(): success test Test1.m12(): success test Test1.m13(): success test Test2.m21(): success test Test2.m22(): success test Test2.m23(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n@@ -53,1 +52,1 @@\n-# Execute a single specific method (Test1.m12) using the query syntax  Test1.java?Test1::m12()\n+# Execute a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n@@ -65,1 +64,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -78,1 +77,1 @@\n-# - a single specific method (Test1.m12) using the query syntax  Test1.java?Test1::m12()\n+# - a single specific method (Test1.m12) using the query syntax  Test1.java?m12\n@@ -91,1 +90,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -117,2 +116,2 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n@@ -143,2 +142,2 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m12()\" \\\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m12 \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -169,1 +168,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -173,3 +172,2 @@\n-\tRAN_TESTS=$$( $(ECHO) $$OUT | $(GREP) -oP \"(?<=test )[^(]*\" | $(TR) '\\n' ' ' ) ; \\\n-\tif [ \"$$RAN_TESTS\" != \"Test1.m11 Test1.m12 Test1.m13 Test1.parameterized \" ]; then \\\n-\t    echo \"unexpected set of tests run: $$RAN_TESTS\"; exit 1 ; \\\n+\tif [ \"$$OUT\" != \"test Test1.m11(): success test Test1.m12(): success test Test1.m13(): success\" ]; then \\\n+\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n@@ -197,1 +195,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m13()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m13 \\\n@@ -207,24 +205,0 @@\n-#----------------------------------------------------------------------\n-#\n-# parameterizedTest\n-\n-$(BUILDTESTDIR)\/TestNGQueryTest.parameterized.ok: $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n-\t\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n-\t$(RM) $(@:%.ok=%)\n-\t$(MKDIR) $(@:%.ok=%)\n-\tJT_JAVA=$(JDKHOME) JTHOME=$(JTREG_IMAGEDIR) \\\n-\t    $(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n-\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n-\t\t-jdk:$(JDKHOME) \\\n-\t\t-va \\\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::parameterized(java.lang.String,Test1\\$$NestedClass,boolean,byte,char,short,int,long,float,double,[Ljava.lang.String;,[Z,[B,[C,[S,[I,[J,[F,[D)\" \\\n-\t\t > $(@:%.ok=%)\/jt.log 2>&1\n-\tOUT=$$( $(ECHO) $$( $(AWK) '\/STDOUT:\/,\/STDERR:\/{ print $0; } { }' $(@:%.ok=%)\/jt.log | $(GREP) -v STD ) ) ; \\\n-\tif [ -n \"$${OUT%%Test1.parameterized*}\" ]; then \\\n-\t    echo \"unexpected set of tests run: $$OUT\"; exit 1 ; \\\n-\tfi\n-\techo $@ passed at `date` > $@\n-\n-TESTS.jtreg += $(BUILDTESTDIR)\/TestNGQueryTest.parameterized.ok\n-\n@@ -245,1 +219,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c?Test1::m13()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c?m13 \\\n@@ -248,1 +222,1 @@\n-\t$(GREP) -s \"Error: Invalid use of query component: a\/b\/c?Test1::m13()\" $(@:%.ok=%)\/jt.log\n+\t$(GREP) -s \"Error: Invalid use of query component: a\/b\/c?m13\" $(@:%.ok=%)\/jt.log\n@@ -268,1 +242,1 @@\n-\t\t\"$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?Test1::m14()\" \\\n+\t\t$(TESTDIR)\/testngQueryTest\/a\/b\/c\/Test1.java?m14 \\\n@@ -271,2 +245,2 @@\n-\t$(GREP) -s 'Could not find method with query \\[Test1::m14()]' $(@:%.ok=%)\/jt.log\n-\t$(GREP) -s \"TEST RESULT: Failed. Execution failed: .*TestNGException: Could not find method with query\" $(@:%.ok=%)\/jt.log\n+\t$(GREP) -s 'Could not find method with name \\[m14] in class \\[Test1]' $(@:%.ok=%)\/jt.log\n+\t$(GREP) -s \"TEST RESULT: Failed. Execution failed: .*TestNGException: Could not find method with name\" $(@:%.ok=%)\/jt.log\n@@ -288,1 +262,0 @@\n-    $(BUILDTESTDIR)\/TestNGQueryTest.parameterized.ok \\\n","filename":"test\/testngQueryTest\/TestNGQueryTest.gmk","additions":19,"deletions":46,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -24,1 +24,0 @@\n-import org.testng.annotations.DataProvider;\n@@ -46,24 +45,0 @@\n-\n-    @Test(dataProvider = \"params\")\n-    public void parameterized(String str,\n-                              NestedClass nested,\n-                              boolean z, byte b, char c, short s, int i, long l, float f, double d,\n-                              String[] stra,\n-                              boolean[] za, byte[] ba, char[] ca, short[] sa, int[] ia, long[] la, float[] fa, double[] da) {\n-        System.out.println(\"Test1.parameterized\");\n-    }\n-\n-    @DataProvider\n-    static Object[][] params() {\n-        return new Object[][]{\n-                new Object[]{\n-                        \"a\",\n-                        new NestedClass(),\n-                        true, (byte) 42, 'x', (short) 42, 42, 42L, 42.0F, 42.0D,\n-                        new String[0],\n-                        new boolean[0], new byte[0], new char[0], new short[0], new int[0], new long[0], new float[0], new double[0]\n-                }\n-        };\n-    }\n-\n-    static class NestedClass {}\n","filename":"test\/testngQueryTest\/a\/b\/c\/Test1.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"}]}