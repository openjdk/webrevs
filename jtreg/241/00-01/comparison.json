{"files":[{"patch":"@@ -447,3 +447,5 @@\n-as the name of a single method in the test to be executed.  If you give\n-conflicting values for the string, including not setting any value, the last\n-one specified will be used.\n+as a pattern consisting of class name, method name, and parameter types, such as: \n+`<class name>[::<method name>([<param type>[...,<param type>]])]`. Both the\n+`<class name>` and the `<param type>` elements must be supplied as binary\n+names (as returned by `Class::getName`). If you give conflicting values for\n+the string, including not setting any value, the last one specified will be used.\n@@ -494,1 +496,1 @@\n-### How do I run a single test method in a JUnit test?\n+### How do I run a single test method or class in a JUnit test?\n@@ -496,1 +498,1 @@\n-Specify the test and method name on the command-line with the `?` syntax:\n+Specify the test and method on the command-line with the `?` syntax:\n@@ -498,1 +500,11 @@\n-    path-to-test?method-name\n+    path-to-test?class-name::method-name(param-type, ...param-type)\n+\n+The `class-name` and `param-type` elements must be binary class names, as returned by `Class::getName`.\n+To run a method that has no parameters, the `param-type` elements can be omitted, like so:\n+\n+    path-to-test?class-name::method-name()\n+\n+To run a specific nested test class, annotated with the `@Nested` annotation, just the\n+class name should be passed after the `?`:\n+\n+    path-to-test?class-name\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}