{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n@@ -116,12 +114,1 @@\n-        long pid = 0;\n-        try {\n-            pid = getProcessId(proc);\n-        } catch(Exception ex) {\n-            ex.printStackTrace(log);\n-        }\n-        if (pid == 0) {\n-            log.println(\"Could not find process id for the process that timed out.\");\n-            log.println(\"Skipping timeout handling.\");\n-            return;\n-        }\n-\n+        final long pid = proc.pid();\n@@ -152,38 +139,0 @@\n-\n-    \/**\n-     * Gets the process id of the specified process.\n-     *\n-     * @param proc the process\n-     * @return The process id, or 0 if the process id cannot be found\n-     *\/\n-    protected long getProcessId(Process proc) {\n-        try {\n-            try {\n-                Method pid = Process.class.getMethod(\"pid\");\n-                return (Long) pid.invoke(proc);\n-            } catch (NoSuchMethodException ignore) {\n-                \/\/ This exception is expected on pre-JDK 9,\n-                \/\/ try a fallback method that only works on Unix platforms\n-                return getProcessIdPreJdk9(proc);\n-            }\n-        } catch (ReflectiveOperationException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static long getProcessIdPreJdk9(Process proc)\n-            throws IllegalAccessException, NoSuchFieldException {\n-        if (proc.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n-            int pid;\n-            Field f = proc.getClass().getDeclaredField(\"pid\");\n-            boolean oldValue = f.isAccessible();\n-            try {\n-                f.setAccessible(true);\n-                pid = f.getInt(proc);\n-            } finally {\n-                f.setAccessible(oldValue);\n-            }\n-            return pid;\n-        }\n-        return 0;\n-    }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/TimeoutHandler.java","additions":2,"deletions":53,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import java.lang.reflect.Method;\n@@ -76,1 +75,0 @@\n-import com.sun.javatest.regtest.util.ProcessUtils;\n@@ -166,1 +164,0 @@\n-            agentServerPid = ProcessUtils.getProcessId(process);\n@@ -174,3 +171,2 @@\n-                log(\"Waiting up to \" + ACCEPT_TIMEOUT + \" milli seconds for a\" +\n-                        \" socket connection on port \" + port +\n-                        (agentServerPid != -1 ? \" from process \" + agentServerPid : \"\"));\n+                log(\"Waiting up to \" + ACCEPT_TIMEOUT + \" milliseconds for a\" +\n+                        \" socket connection on port \" + port + \" from process \" + process.pid());\n@@ -194,5 +190,1 @@\n-                try {\n-                    ProcessUtils.destroyForcibly(agentServerProcess);\n-                } catch (Exception ignored) {\n-                    \/\/ ignore\n-                }\n+                agentServerProcess.destroyForcibly();\n@@ -472,1 +464,1 @@\n-            ProcessUtils.destroyForcibly(process); \/\/ force shutdown if necessary\n+            process.destroyForcibly(); \/\/ force shutdown if necessary\n@@ -484,1 +476,1 @@\n-            ProcessUtils.destroyForcibly(process);\n+            process.destroyForcibly();\n@@ -581,2 +573,1 @@\n-     * communicates or {@code -1} if the process id of the {@code AgentServer}\n-     * couldn't be determined.\n+     * communicates.\n@@ -586,2 +577,2 @@\n-    long getAgentServerPid() {\n-        return agentServerPid;\n+    final long getAgentServerPid() {\n+        return process.pid();\n@@ -627,1 +618,0 @@\n-    private final long agentServerPid;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-import com.sun.javatest.regtest.util.ProcessUtils;\n@@ -248,2 +247,2 @@\n-                final long pid = ProcessUtils.getProcessId(process);\n-                log.println(\"Process id: \" + ((pid == -1) ? \"unknown\" : pid));\n+                final long pid = process.pid();\n+                log.println(\"Process id: \" + pid);\n@@ -328,1 +327,1 @@\n-                ProcessUtils.destroyForcibly(process);\n+                process.destroyForcibly();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ProcessCommand.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javatest.regtest.util;\n-\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.util.Objects;\n-\n-\/**\n- * Utilities for handling Processes.\n- *\/\n-public class ProcessUtils {\n-\n-    private static final Method DESTROY_FORCIBLY_METHOD;\n-    private static final Method PID_METHOD;\n-\n-    private static final long UNKNOWN_PID = -1;\n-\n-    static {\n-        Method destroyMethod;\n-        try {\n-            destroyMethod = Process.class.getDeclaredMethod(\"destroyForcibly\");\n-        } catch (NoSuchMethodException e) {\n-            \/\/ expected on pre-1.8 JDKs\n-            destroyMethod = null;\n-        }\n-        DESTROY_FORCIBLY_METHOD = destroyMethod;\n-\n-        Method pidMethod = null;\n-        try {\n-            pidMethod = Process.class.getDeclaredMethod(\"pid\"); \/\/ only available in Java 9+\n-        } catch (NoSuchMethodException e) {\n-            pidMethod = null;\n-        }\n-        PID_METHOD = pidMethod;\n-    }\n-\n-    \/**\n-     * Call Process.destroyForcibly() if that method exists. If it does not,\n-     * then Process.destroy() will be called instead.\n-     *\n-     * Process.destroyForcibly() was introduced in 1.8.\n-     *\n-     * @param process the Process to destroy\n-     * @return the Process object\n-     *\/\n-    public static Process destroyForcibly(Process process) {\n-        if (DESTROY_FORCIBLY_METHOD != null) {\n-            try {\n-                return (Process) DESTROY_FORCIBLY_METHOD.invoke(process);\n-            } catch (IllegalAccessException e) {\n-                throw new RuntimeException(e);\n-            } catch (InvocationTargetException e) {\n-                throw (RuntimeException) e.getTargetException();\n-            }\n-        }\n-        \/\/ fallback\n-        process.destroy();\n-        return process;\n-    }\n-\n-    \/**\n-     * Returns the process id of the {@code process}. If the process id cannot be determined\n-     * or if there was some exception when determining the process id, then this method returns\n-     * {@code -1}.\n-     *\n-     * @param process the process\n-     * @throws NullPointerException if {@code process} is null\n-     * @return the process id or -1\n-     *\/\n-    public static long getProcessId(Process process) {\n-        Objects.requireNonNull(process);\n-        if (PID_METHOD == null) {\n-            return UNKNOWN_PID;\n-        }\n-        try {\n-            return (long) PID_METHOD.invoke(process);\n-        } catch (Exception e) {\n-            return UNKNOWN_PID;\n-        }\n-    }\n-}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/util\/ProcessUtils.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"}]}