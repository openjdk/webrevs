{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -1186,2 +1187,5 @@\n-        String fileName = locations.absTestFile().getFileName().toString();\n-        if (!fileName.endsWith(\".java\")) {\n+        Path file = locations.absTestFile();\n+        \/\/ Take file name as basis for class name.\n+        String fileName = file.getFileName().toString();\n+        int fileNameLength = fileName.length(); \/\/ including \".java\".length() = 5\n+        if (fileNameLength <= 5 && !fileName.endsWith(\".java\")) {\n@@ -1190,0 +1194,2 @@\n+        String className = fileName.substring(0, fileNameLength - 5);\n+        \/\/ Scan .java file for \"package NAME;\" without taking comments into account.\n@@ -1191,2 +1197,2 @@\n-            \/\/ Scan .java file in naive manner; without taking comments into account...\n-            String charContent = Files.readString(locations.absTestFile()); \/\/ assuming UTF-8 encoding\n+            \/\/ Assume non-large files in UTF-8 encoding.\n+            String charContent = Files.readString(file);\n@@ -1195,5 +1201,0 @@\n-            Matcher nameMatcher = TYPE_NAME_PATTERN.matcher(charContent);\n-            if (!nameMatcher.find()) {\n-                return Optional.empty();\n-            }\n-            String className = nameMatcher.group(2).trim();\n@@ -1201,1 +1202,1 @@\n-        } catch (Exception e) {\n+        } catch (IOException ignored) {\n@@ -1346,2 +1347,1 @@\n-        PACKAGE_NAME_PATTERN = Pattern.compile(\"package\\\\s+([\\\\w.]+);\"),\n-        TYPE_NAME_PATTERN = Pattern.compile(\"(class|interface|enum|record)\\\\s+(.+)\\\\s*\\\\{.*\");\n+        PACKAGE_NAME_PATTERN = Pattern.compile(\"package\\\\s+([\\\\w.]+);\");\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}