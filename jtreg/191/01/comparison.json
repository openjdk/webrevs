{"files":[{"patch":"@@ -5,0 +5,1 @@\n+\n@@ -10,0 +11,3 @@\n+* jtreg, in certain cases, would incorrectly report a test as PASSED when the test process would exit with a non-zero exit code.\n+  [CODETOOLS-7903621](https:\/\/bugs.openjdk.org\/browse\/CODETOOLS-7903621)\n+\n","filename":"CHANGELOG.md","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -394,1 +394,13 @@\n-            return logStatus;\n+            \/\/ verify that the status reported in the STDOUT of the test program\n+            \/\/ indeed matches the exit code of the test program's process. This should\n+            \/\/ catch issues where the test program's process might have run into issues\n+            \/\/ (like VM crash) after the status was reported on STDOUT\n+            final int logStatusExitCode = Status.exitCodes[logStatus.getType()];\n+            if (logStatusExitCode == exitCode) {\n+                \/\/ correctly reported exit\n+                return logStatus;\n+            }\n+            final String errMsg = \"unexpected exit code: \" + exitCode\n+                    + \", doesn't match exit status: \\\"\" + logStatus + \"\\\" which was\"\n+                    + \" reported by the test process\";\n+            return Status.error(errMsg);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ProcessCommand.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ *\/\n+public class ErrorAfterPass {\n+\n+    public static void main(final String[] args) {\n+        \/\/ a shutdown hook which calls Runtime.halt() with a non-zero exit code\n+        final Thread shutdownHook = new Thread(() -> {\n+            final int shutdownHookExitCode = 211; \/\/ just some \"unique\" exit code\n+            System.err.println(\"Calling Runtime.halt(\" + shutdownHookExitCode\n+                    + \") from shutdown hook\");\n+            Runtime.getRuntime().halt(shutdownHookExitCode);\n+        }, \"ErrorAfterPass-shutdown-hook\");\n+        \/\/ register the shutdown hook\n+        Runtime.getRuntime().addShutdownHook(shutdownHook);\n+        \/\/ finish the test successfully\n+        System.err.println(\"ErrorAfterPass.main() completed successfully\");\n+    }\n+}\n","filename":"test\/exitCodes\/ErrorAfterPass.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,14 @@\n+EXPECTED_ERR_MSG := \"test result: Error. unexpected exit code: 211, doesn't match exit status: \\\"Passed.\\\" which was reported by the test process\"\n+$(BUILDTESTDIR)\/ExitCodeTest.ErrorAfterPass.ok: \\\n+\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t$(TESTDIR)\/exitCodes\/ErrorAfterPass.java \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1 ; rc=$$? ; \\\n+        if [ \"$$rc\" != 3 ]; then echo \"unexpected exit code: \" $$rc ; exit 1 ; fi ; \\\n+\t\t$(GREP) $(EXPECTED_ERR_MSG) $(@:%.ok=%)\/work\/ErrorAfterPass.jtr > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n@@ -106,1 +120,2 @@\n-\t$(BUILDTESTDIR)\/ExitCodeTest.Fault.ok\n+\t$(BUILDTESTDIR)\/ExitCodeTest.Fault.ok \\\n+\t$(BUILDTESTDIR)\/ExitCodeTest.ErrorAfterPass.ok\n","filename":"test\/exitCodes\/ExitCodeTest.gmk","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"}]}