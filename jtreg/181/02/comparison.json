{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,0 +153,8 @@\n+    public File[] getExcludeLists() {\n+        MutableExcludeListParameters mep =\n+            (MutableExcludeListParameters) getExcludeListParameters();\n+        return mep.getExcludeFiles() != null\n+            ? mep.getExcludeFiles()\n+            : new File[0];\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionParameters.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.tool;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.function.Predicate;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class ExcludeFileVerifier {\n+    private PrintWriter out;\n+\n+    public ExcludeFileVerifier(PrintWriter out) {\n+        this.out = out;\n+    }\n+\n+    private boolean hadErrors = false;\n+    public boolean getHadErrors() {\n+        return hadErrors;\n+    }\n+    public boolean verify(File file, List<String> validTestNames) {\n+        ArrayList<String> usedTestNames = new ArrayList<String>();\n+        ArrayList<Check> checks = new ArrayList<Check>();\n+        checks.add(new LineFormatCheck());\n+        checks.add(new TestExistsCheck(validTestNames));\n+        checks.add(new DuplicateCheck(usedTestNames));\n+\n+        try {\n+            BufferedReader br = new BufferedReader(new FileReader(file));\n+            String line = null;\n+            int n = 0;\n+            while ((line = br.readLine()) != null) {\n+                n++;\n+                if (lineIsComment(line.trim())) continue;\n+                for (Check c : checks) {\n+                    if(!c.check(line.trim())) {\n+                        out.println(file.getAbsolutePath() + \" line \" + n + \" is invalid. Reason:\");\n+                        out.println(c.description());\n+                        out.println(\"Line contents:\");\n+                        out.println(\"--------------\");\n+                        out.println(line);\n+                        out.println(\"--------------\");\n+                        hadErrors = true;\n+                        break;\n+                    }\n+                }\n+                usedTestNames.add(testName(line));\n+            }\n+        }\n+        catch (FileNotFoundException e) {\n+            System.out.println(\"File does not exist: \"  + file.getAbsolutePath());\n+        }\n+        catch (IOException e) {\n+            System.out.println(\"File cannot be read: \"  + file.getAbsolutePath());\n+        }\n+        return true;\n+    }\n+\n+    static boolean lineIsComment(String line) {\n+        line = line.trim();\n+        if (line.equals(\"\")) return true;\n+        if (line.charAt(0) == '#') return true;\n+        return false;\n+    }\n+\n+    private static String testName(String line) {\n+        line = line.trim();\n+        String[] words = line.split(\"\\\\s+\");\n+        return words.length >= 1 ? words[0] : null;\n+    }\n+\n+    abstract static class Check {\n+        public abstract String description();\n+        public abstract boolean check(String line);\n+    }\n+\n+    static class LineFormatCheck extends Check {\n+        private static final String commalist = \"([\\\\w-]+)(,[\\\\w-]+)*\";\n+        private static Pattern pattern = Pattern.compile(\"\\\\S+\\\\s+\" + commalist + \"\\\\s\" + commalist + \".*\");\n+        public String description() {\n+            return \"Must follow: <test-name> <bugid>(,<bugid>)* <platform>(,<platform>)* <description>\";\n+        }\n+\n+        public boolean check(String line) {\n+            return pattern.matcher(line).matches();\n+        }\n+    }\n+\n+    static class TestExistsCheck extends Check {\n+        private List<String> validTestNames;\n+\n+        public TestExistsCheck(List<String> validTestNames) {\n+            this.validTestNames = validTestNames;\n+        }\n+\n+        public String description() {\n+            return \"The fully qualified test must exists.\";\n+        }\n+\n+        public boolean check(String line) {\n+            return validTestNames.contains(testName(line));\n+        }\n+    }\n+\n+    static class DuplicateCheck extends Check {\n+        private List<String> usedTestNames;\n+\n+        public DuplicateCheck(List<String> usedTestNames) {\n+            this.usedTestNames = usedTestNames;\n+        }\n+\n+        public String description() {\n+            return \"Exclude file cannot contain duplicate entries.\";\n+        }\n+\n+        public boolean check(String line) {\n+            return !usedTestNames.contains(testName(line));\n+        }\n+    }\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/ExcludeFileVerifier.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import java.nio.file.Paths;\n@@ -645,0 +646,7 @@\n+        new Option(NONE, MAIN, null, \"-ve\", \"-verifyexclude\") {\n+            @Override\n+            public void process(String opt, String arg) {\n+                verifyExcludeListsFlag = true;\n+            }\n+        },\n+\n@@ -1288,0 +1296,4 @@\n+        if (verifyExcludeListsFlag) {\n+            verifyExcludeLists(testManager);\n+        }\n+\n@@ -1410,0 +1422,27 @@\n+    void verifyExcludeLists(TestManager testManager) throws BadArgs, Fault, Harness.Fault, InterruptedException  {\n+        List<String> validTestNames = new ArrayList<String>();\n+        List<File> excludeFiles = new ArrayList<File>();\n+        for (RegressionTestSuite ts: testManager.getTestSuites()) {\n+            RegressionParameters params = createParameters(testManager, ts);\n+            for (Iterator<TestResult> iter = getResultsIterator(params); iter.hasNext(); ) {\n+                TestResult tr = iter.next();\n+                out.println(tr.getTestName());\n+                validTestNames.add(tr.getTestName());\n+            }\n+            File[] pls = params.getExcludeLists();\n+            for (File f : pls) {\n+                excludeFiles.add(f);\n+            }\n+        }\n+        boolean hadErrors = false;\n+        for(File plf : excludeFiles) {\n+            ExcludeFileVerifier efv = new ExcludeFileVerifier(out);\n+            efv.verify(plf, validTestNames);\n+            hadErrors |= efv.getHadErrors();\n+        }\n+\n+        if (hadErrors) {\n+            error(\"Cannot run because an exclude list had errors, printed above. Either resolve them or remove the exlude list.\");\n+        }\n+    }\n+\n@@ -2402,0 +2441,1 @@\n+    private boolean verifyExcludeListsFlag;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,0 +262,1 @@\n+help.main.ve.desc=Verify contents of exclude files\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,2 @@\n+p\/Pass2.java#id0 123 x\n+p\/Pass2.java#id0 123 y\n","filename":"test\/verifyexclude\/ProblemList\/duplicate.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+Noexist.java 123 x\n\\ No newline at end of file\n","filename":"test\/verifyexclude\/ProblemList\/exist.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+p\/Pass.java\n\\ No newline at end of file\n","filename":"test\/verifyexclude\/ProblemList\/format.1.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+p\/Pass.java 123.123 xyz\n\\ No newline at end of file\n","filename":"test\/verifyexclude\/ProblemList\/format.2.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+p\/Pass.java 123 x\n+p\/Pass2.java#id1 123 x\n+p\/Pass2.java#id0 123 x,y\n","filename":"test\/verifyexclude\/ProblemList\/good.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+p\/Pass2.java 123 x\n\\ No newline at end of file\n","filename":"test\/verifyexclude\/ProblemList\/id.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"","filename":"test\/verifyexclude\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,149 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#----------------------------------------------------------------------\n+\n+$(BUILDTESTDIR)\/verifyexclude.format.1.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/format.1.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    && (cat $(@:%.ok=%\/log) ; exit 1) \\\n+\t\t|| (exit 0)\n+\t$(GREP) -s \"Must follow:\" $(@:%.ok=%\/log 2>&1)\n+\t$(GREP) -s \"The fully qualified test must exists.\" $(@:%.ok=%\/log 2>&1) && exit 1 || exit 0\n+\techo $@ passed at `date` > $@\n+\n+$(BUILDTESTDIR)\/verifyexclude.format.2.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/format.2.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    && (cat $(@:%.ok=%\/log) ; exit 1) \\\n+\t\t|| (exit 0)\n+\t$(GREP) -s \"Must follow:\" $(@:%.ok=%\/log 2>&1)\n+\t$(GREP) -s \"The fully qualified test must exists.\" $(@:%.ok=%\/log 2>&1) && exit 1 || exit 0\n+\techo $@ passed at `date` > $@\n+\n+$(BUILDTESTDIR)\/verifyexclude.exist.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/exist.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    && (cat $(@:%.ok=%\/log) ; exit 1) \\\n+\t\t|| (exit 0)\n+\t$(GREP) -s \"Must follow:\" $(@:%.ok=%\/log 2>&1) && exit 1 || exit 0\n+\t$(GREP) -s \"The fully qualified test must exists.\" $(@:%.ok=%\/log 2>&1)\n+\techo $@ passed at `date` > $@\n+\n+$(BUILDTESTDIR)\/verifyexclude.id.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/id.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    && (cat $(@:%.ok=%\/log) ; exit 1) \\\n+\t\t|| (exit 0)\n+\t$(GREP) -s \"The fully qualified test must exists.\" $(@:%.ok=%\/log 2>&1)\n+\techo $@ passed at `date` > $@\n+\n+$(BUILDTESTDIR)\/verifyexclude.good.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/good.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    || (cat $(@:%.ok=%\/log) ; exit 1)\n+\techo $@ passed at `date` > $@\n+\n+$(BUILDTESTDIR)\/verifyexclude.duplicate.ok: \\\n+                $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t$(JTREG_IMAGEDIR)\/lib\/javatest.jar\n+\t$(RM) $(@:%.ok=%\/work) $(@:%.ok=%\/report)\n+\t$(MKDIR) -p $(@:%.ok=%)\n+\t$(JDKHOME)\/bin\/java \\\n+\t\t-Djavatest.regtest.showCmd=true \\\n+\t\t-jar $(JTREG_IMAGEJARDIR)\/jtreg.jar \\\n+\t\t-w:$(@:%.ok=%\/work) \\\n+\t\t-r:$(@:%.ok=%\/report) \\\n+\t\t-exclude:$(TESTDIR)\/verifyexclude\/ProblemList\/duplicate.txt \\\n+\t\t-verifyexclude \\\n+\t\t$(TESTDIR)\/verifyexclude \\\n+\t\t> $(@:%.ok=%\/log 2>&1) \\\n+\t    && (cat $(@:%.ok=%\/log) ; exit 1) \\\n+\t\t|| (exit 0)\n+\t$(GREP) -s \"Exclude file cannot contain duplicate entries.\" $(@:%.ok=%\/log 2>&1)\n+\techo $@ passed at `date` > $@\n+\n+TESTS.jtreg += \\\n+\t$(BUILDTESTDIR)\/verifyexclude.duplicate.ok \\\n+\t$(BUILDTESTDIR)\/verifyexclude.format.1.ok \\\n+\t$(BUILDTESTDIR)\/verifyexclude.format.2.ok \\\n+\t$(BUILDTESTDIR)\/verifyexclude.good.ok \\\n+\t$(BUILDTESTDIR)\/verifyexclude.id.ok \\\n+\t$(BUILDTESTDIR)\/verifyexclude.exist.ok\n","filename":"test\/verifyexclude\/VerifyExcludeTest.gmk","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/verifyexclude\/p\/Pass.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/match\/p\/Pass.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n-public class Pass {\n+\/* @test *\/\n+public class Pass2 {\n","filename":"test\/verifyexclude\/p\/Pass2.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/6585912\/Pass.java","status":"copied"}]}