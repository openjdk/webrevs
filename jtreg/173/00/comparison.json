{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -93,0 +95,12 @@\n+    private static final long UNKNOWN_PID = -1;\n+    private static final Method PID_METHOD;\n+    static {\n+        Method pidMethod = null;\n+        try {\n+            pidMethod = Process.class.getDeclaredMethod(\"pid\"); \/\/ only available in Java 9+\n+        } catch (NoSuchMethodException | SecurityException e) {\n+            pidMethod = null;\n+        }\n+        PID_METHOD = pidMethod;\n+    }\n+\n@@ -130,0 +144,1 @@\n+            final int port = ss.getLocalPort();\n@@ -131,1 +146,1 @@\n-            cmd.add(String.valueOf(ss.getLocalPort()));\n+            cmd.add(String.valueOf(port));\n@@ -147,1 +162,1 @@\n-            log(\"Started \" + cmd);\n+            log(\"Launching \" + cmd);\n@@ -155,0 +170,1 @@\n+            final long pid = getPid(process);\n@@ -160,1 +176,1 @@\n-                    \/\/ default 60 seconds, for server to start and \"phone home\"\n+                \/\/ default 60 seconds, for server to start and \"phone home\"\n@@ -162,0 +178,3 @@\n+                log(\"Waiting up to \" + ACCEPT_TIMEOUT + \" milli seconds for a\" +\n+                        \" socket connection on port \" + port +\n+                        (pid != UNKNOWN_PID ? \" from process \" + pid : \"\"));\n@@ -163,0 +182,1 @@\n+                log(\"Received connection on port \" + port + \" from \" + s);\n@@ -174,0 +194,1 @@\n+            log(\"Agent creation failed due to \" + e);\n@@ -581,0 +602,11 @@\n+    private static long getPid(final Process process) {\n+        if (PID_METHOD == null) {\n+            return UNKNOWN_PID;\n+        }\n+        try {\n+            return (long) PID_METHOD.invoke(process);\n+        } catch (IllegalAccessException | InvocationTargetException e) {\n+            return UNKNOWN_PID;\n+        }\n+    }\n+\n@@ -695,0 +727,4 @@\n+        void log(final String message) {\n+            this.logger.log(null, \"POOL: \" + message);\n+        }\n+\n@@ -733,0 +769,18 @@\n+        \/**\n+         * Sets the maximum attempts to create or obtain an agent VM\n+         * @param numAttempts number of attempts\n+         * @throws IllegalArgumentException if {@code numAttempts} is lesser than {@code 1}\n+         *\/\n+        public void setNumAgentSelectionAttempts(final int numAttempts) {\n+            if (numAttempts < 1) {\n+                throw new IllegalArgumentException(\"invalid value for agent selection attempts: \"\n+                        + numAttempts);\n+            }\n+            this.numAgentSelectionAttempts = numAttempts;\n+            logger.log(null, \"POOL: agent selection attempts: \" + numAttempts);\n+        }\n+\n+        int getNumAgentSelectionAttempts() {\n+            return this.numAgentSelectionAttempts;\n+        }\n+\n@@ -771,2 +825,7 @@\n-                a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger,\n-                        testThreadFactory, testThreadFactoryPath);\n+                try {\n+                    a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger,\n+                            testThreadFactory, testThreadFactoryPath);\n+                } catch (Fault f) {\n+                    logger.log(null, \"POOL: Agent creation failed due to \" + f.getCause());\n+                    throw f;\n+                }\n@@ -930,0 +989,2 @@\n+        \/\/ default is 2 i.e. we retry a failed agent selection once\n+        private int numAgentSelectionAttempts = 2;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":66,"deletions":5,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -1232,4 +1233,33 @@\n-        Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(), envVars,\n-                testThreadFactory, testThreadFactoryPath);\n-        agents.add(agent);\n-        return agent;\n+        final int numAttempts = p.getNumAgentSelectionAttempts();\n+        assert numAttempts >= 1 : \"invalid agent selection attempts: \" + numAttempts;\n+        Agent.Fault toThrow = null;\n+        for (int i = 1; i <= numAttempts; i++) {\n+            try {\n+                if (i != 1) {\n+                    p.log(\"Re-attempting agent creation, attempt number \" + i);\n+                }\n+                Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(),\n+                        envVars, testThreadFactory, testThreadFactoryPath);\n+                agents.add(agent);\n+                return agent;\n+            } catch (Agent.Fault f) {\n+                \/\/ keep track of the fault and reattempt to get an agent if within limit\n+                if (toThrow == null) {\n+                    toThrow = f;\n+                } else {\n+                    \/\/ add the previous exception as a suppressed exception\n+                    \/\/ of the current one\n+                    if (toThrow.getCause() != null) {\n+                        f.addSuppressed(toThrow.getCause());\n+                    }\n+                    toThrow = f;\n+                }\n+                if (i == numAttempts || !(f.getCause() instanceof IOException)) {\n+                    \/\/ we either made enough attempts or we failed due to a non IOException.\n+                    \/\/ In either case we don't attempt to create an agent again and instead throw\n+                    \/\/ the captured failure(s)\n+                    throw toThrow;\n+                }\n+            }\n+        }\n+        throw new AssertionError(\"should not reach here\");\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":34,"deletions":4,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -462,0 +462,16 @@\n+        new Option(GNU, AGENT_POOL, null, \"--agent-attempts\") {\n+            @Override\n+            public void process(String opt, String arg) throws BadArgs {\n+                int numTimes;\n+                try {\n+                    numTimes = Integer.parseInt(arg);\n+                } catch (NumberFormatException e) {\n+                    throw new BadArgs(i18n, \"main.badAgentSelAttempt\", arg);\n+                }\n+                if (numTimes < 1) {\n+                    throw new BadArgs(i18n, \"main.badAgentSelAttempt\", numTimes);\n+                }\n+                numAgentSelectionAttempt = numTimes;\n+            }\n+        },\n+\n@@ -1314,0 +1330,1 @@\n+                    p.setNumAgentSelectionAttempts(numAgentSelectionAttempt);\n@@ -2316,0 +2333,3 @@\n+    \/\/ number of attempts to get an agent for an action. we default to 2, to allow\n+    \/\/ for retrying a failed attempt once\n+    private int numAgentSelectionAttempt = 2;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -297,0 +297,9 @@\n+help.pool.agent_attempts.arg=<number>\n+help.pool.agent_attempts.desc=\\\n+    The maximum number of times the pool will be queried for a agent VM \\\n+    when running an action. A value of 1 will mean that no retry will be \\\n+    attempted if either a new agent VM creation fails or an existing one \\\n+    couldn't be obtained from the pool. Similarly, a value of 2 will imply \\\n+    that if the agent VM creation fails or an existing one couldn't be \\\n+    obtained from the pool, then 1 retry will be attempted. \\\n+    Accepts a integer value; any value lesser than 1 is rejected.\n@@ -449,0 +458,1 @@\n+main.badAgentSelAttempt=Bad value for agent selection attempts: {0}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}