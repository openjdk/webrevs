{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.reflect.Method;\n@@ -93,0 +94,12 @@\n+    private static final long UNKNOWN_PID = -1;\n+    private static final Method PID_METHOD;\n+    static {\n+        Method pidMethod = null;\n+        try {\n+            pidMethod = Process.class.getDeclaredMethod(\"pid\"); \/\/ only available in Java 9+\n+        } catch (Exception e) {\n+            pidMethod = null;\n+        }\n+        PID_METHOD = pidMethod;\n+    }\n+\n@@ -130,0 +143,1 @@\n+            final int port = ss.getLocalPort();\n@@ -131,1 +145,1 @@\n-            cmd.add(String.valueOf(ss.getLocalPort()));\n+            cmd.add(String.valueOf(port));\n@@ -147,1 +161,1 @@\n-            log(\"Started \" + cmd);\n+            log(\"Launching \" + cmd);\n@@ -155,0 +169,1 @@\n+            final long pid = getPid(process);\n@@ -160,1 +175,1 @@\n-                    \/\/ default 60 seconds, for server to start and \"phone home\"\n+                \/\/ default 60 seconds, for server to start and \"phone home\"\n@@ -162,0 +177,3 @@\n+                log(\"Waiting up to \" + ACCEPT_TIMEOUT + \" milli seconds for a\" +\n+                        \" socket connection on port \" + port +\n+                        (pid != UNKNOWN_PID ? \" from process \" + pid : \"\"));\n@@ -163,0 +181,1 @@\n+                log(\"Received connection on port \" + port + \" from \" + s);\n@@ -174,0 +193,1 @@\n+            log(\"Agent creation failed due to \" + e);\n@@ -581,0 +601,11 @@\n+    private static long getPid(final Process process) {\n+        if (PID_METHOD == null) {\n+            return UNKNOWN_PID;\n+        }\n+        try {\n+            return (long) PID_METHOD.invoke(process);\n+        } catch (Exception e) {\n+            return UNKNOWN_PID;\n+        }\n+    }\n+\n@@ -733,0 +764,14 @@\n+        \/**\n+         * Sets the maximum attempts to create or obtain an agent VM\n+         * @param numAttempts number of attempts\n+         * @throws IllegalArgumentException if {@code numAttempts} is less than {@code 1}\n+         *\/\n+        public void setNumAgentSelectionAttempts(final int numAttempts) {\n+            if (numAttempts < 1) {\n+                throw new IllegalArgumentException(\"invalid value for agent selection attempts: \"\n+                        + numAttempts);\n+            }\n+            this.numAgentSelectionAttempts = numAttempts;\n+            logger.log(null, \"POOL: agent selection attempts: \" + numAttempts);\n+        }\n+\n@@ -748,1 +793,41 @@\n-        synchronized Agent getAgent(File dir,\n+        Agent getAgent(File dir,\n+                       JDK jdk,\n+                       List<String> vmOpts,\n+                       Map<String, String> envVars,\n+                       String testThreadFactory,\n+                       String testThreadFactoryPath)\n+                throws Fault {\n+            final int numAttempts = this.numAgentSelectionAttempts;\n+            Agent.Fault toThrow = null;\n+            for (int i = 1; i <= numAttempts; i++) {\n+                try {\n+                    if (i != 1) {\n+                        logger.log(null, \"POOL: re-attempting agent creation, attempt number \" + i);\n+                    }\n+                    return doGetAgent(dir, jdk, vmOpts, envVars, testThreadFactory,\n+                            testThreadFactoryPath);\n+                } catch (Agent.Fault f) {\n+                    logger.log(null, \"POOL: agent creation failed due to \" + f.getCause());\n+                    \/\/ keep track of the fault and reattempt to get an agent if within limit\n+                    if (toThrow == null) {\n+                        toThrow = f;\n+                    } else {\n+                        \/\/ add the previous exception as a suppressed exception\n+                        \/\/ of the current one\n+                        if (toThrow.getCause() != null) {\n+                            f.addSuppressed(toThrow.getCause());\n+                        }\n+                        toThrow = f;\n+                    }\n+                    if (i == numAttempts || !(f.getCause() instanceof IOException)) {\n+                        \/\/ we either made enough attempts or we failed due to a non IOException.\n+                        \/\/ In either case we don't attempt to create an agent again and instead\n+                        \/\/ throw the captured failure(s)\n+                        throw toThrow;\n+                    }\n+                }\n+            }\n+            throw new AssertionError(\"should not reach here\");\n+        }\n+\n+        synchronized Agent doGetAgent(File dir,\n@@ -930,0 +1015,2 @@\n+        \/\/ default is 1 i.e. we don't re-attempt a failed agent selection\n+        private int numAgentSelectionAttempts = 1;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":91,"deletions":4,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -462,0 +462,16 @@\n+        new Option(GNU, AGENT_POOL, null, \"--agent-attempts\") {\n+            @Override\n+            public void process(String opt, String arg) throws BadArgs {\n+                int numTimes;\n+                try {\n+                    numTimes = Integer.parseInt(arg);\n+                } catch (NumberFormatException e) {\n+                    throw new BadArgs(i18n, \"main.badAgentSelAttempt\", arg);\n+                }\n+                if (numTimes < 1) {\n+                    throw new BadArgs(i18n, \"main.badAgentSelAttempt\", numTimes);\n+                }\n+                numAgentSelectionAttempt = numTimes;\n+            }\n+        },\n+\n@@ -1314,0 +1330,1 @@\n+                    p.setNumAgentSelectionAttempts(numAgentSelectionAttempt);\n@@ -2316,0 +2333,3 @@\n+    \/\/ number of attempts to get an agent for an action. we default to 1, which implies\n+    \/\/ by default we don't re-attempt on a failure\n+    private int numAgentSelectionAttempt = 1;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -297,0 +297,6 @@\n+help.pool.agent_attempts.arg=<number>\n+help.pool.agent_attempts.desc=\\\n+    The number of attempts jtreg will make to access an agent \\\n+    with the desired characteristics, either by creating a new one, \\\n+    or obtaining one from the pool of reusable VMs. The minimum value, \\\n+    and the default value, is 1.\n@@ -449,0 +455,1 @@\n+main.badAgentSelAttempt=Bad value for agent selection attempts: {0}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-\tagents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent\\[[0-9][0-9]*\\]: Started' $(@:%.ok=%\/jt.log) | wc -l` ; \\\n+\tagents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent\\[[0-9][0-9]*\\]: Launching' $(@:%.ok=%\/jt.log) | wc -l` ; \\\n","filename":"test\/badtests\/BadTests.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-\tagents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent...: Started' $(@:%.ok=%)\/jt.log | wc -l | tr -d ' '` ; \\\n- \tdebugAgents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent...: Started.*-Ddebug=true' $(@:%.ok=%)\/jt.log | wc -l | tr -d ' '` ; \\\n+\tagents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent...: Launching' $(@:%.ok=%)\/jt.log | wc -l | tr -d ' '` ; \\\n+\tdebugAgents=`$(GREP) '^\\[[-0-9 :,]*\\] Agent...: Launching.*-Ddebug=true' $(@:%.ok=%)\/jt.log | wc -l | tr -d ' '` ; \\\n@@ -68,1 +68,1 @@\n-\t    $(GREP) '^\\[[-0-9 :,]*\\] Agent...: Started' $(@:%.ok=%)\/jt.log ; \\\n+\t    $(GREP) '^\\[[-0-9 :,]*\\] Agent...: Launching' $(@:%.ok=%)\/jt.log ; \\\n","filename":"test\/debug\/DebugTest.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}