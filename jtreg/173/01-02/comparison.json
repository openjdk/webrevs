{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -101,1 +100,1 @@\n-        } catch (NoSuchMethodException | SecurityException e) {\n+        } catch (Exception e) {\n@@ -608,1 +607,1 @@\n-        } catch (IllegalAccessException | InvocationTargetException e) {\n+        } catch (Exception e) {\n@@ -727,4 +726,0 @@\n-        void log(final String message) {\n-            this.logger.log(null, \"POOL: \" + message);\n-        }\n-\n@@ -772,1 +767,1 @@\n-         * @throws IllegalArgumentException if {@code numAttempts} is lesser than {@code 1}\n+         * @throws IllegalArgumentException if {@code numAttempts} is less than {@code 1}\n@@ -783,4 +778,0 @@\n-        int getNumAgentSelectionAttempts() {\n-            return this.numAgentSelectionAttempts;\n-        }\n-\n@@ -802,1 +793,41 @@\n-        synchronized Agent getAgent(File dir,\n+        Agent getAgent(File dir,\n+                       JDK jdk,\n+                       List<String> vmOpts,\n+                       Map<String, String> envVars,\n+                       String testThreadFactory,\n+                       String testThreadFactoryPath)\n+                throws Fault {\n+            final int numAttempts = this.numAgentSelectionAttempts;\n+            Agent.Fault toThrow = null;\n+            for (int i = 1; i <= numAttempts; i++) {\n+                try {\n+                    if (i != 1) {\n+                        logger.log(null, \"POOL: re-attempting agent creation, attempt number \" + i);\n+                    }\n+                    return doGetAgent(dir, jdk, vmOpts, envVars, testThreadFactory,\n+                            testThreadFactoryPath);\n+                } catch (Agent.Fault f) {\n+                    logger.log(null, \"POOL: agent creation failed due to \" + f.getCause());\n+                    \/\/ keep track of the fault and reattempt to get an agent if within limit\n+                    if (toThrow == null) {\n+                        toThrow = f;\n+                    } else {\n+                        \/\/ add the previous exception as a suppressed exception\n+                        \/\/ of the current one\n+                        if (toThrow.getCause() != null) {\n+                            f.addSuppressed(toThrow.getCause());\n+                        }\n+                        toThrow = f;\n+                    }\n+                    if (i == numAttempts || !(f.getCause() instanceof IOException)) {\n+                        \/\/ we either made enough attempts or we failed due to a non IOException.\n+                        \/\/ In either case we don't attempt to create an agent again and instead\n+                        \/\/ throw the captured failure(s)\n+                        throw toThrow;\n+                    }\n+                }\n+            }\n+            throw new AssertionError(\"should not reach here\");\n+        }\n+\n+        synchronized Agent doGetAgent(File dir,\n@@ -825,7 +856,2 @@\n-                try {\n-                    a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger,\n-                            testThreadFactory, testThreadFactoryPath);\n-                } catch (Fault f) {\n-                    logger.log(null, \"POOL: Agent creation failed due to \" + f.getCause());\n-                    throw f;\n-                }\n+                a = new Agent(dir, jdk, vmOpts, envVars, policyFile, timeoutFactor, logger,\n+                        testThreadFactory, testThreadFactoryPath);\n@@ -989,2 +1015,2 @@\n-        \/\/ default is 2 i.e. we retry a failed agent selection once\n-        private int numAgentSelectionAttempts = 2;\n+        \/\/ default is 1 i.e. we don't re-attempt a failed agent selection\n+        private int numAgentSelectionAttempts = 1;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":48,"deletions":22,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.IOException;\n@@ -1233,33 +1232,4 @@\n-        final int numAttempts = p.getNumAgentSelectionAttempts();\n-        assert numAttempts >= 1 : \"invalid agent selection attempts: \" + numAttempts;\n-        Agent.Fault toThrow = null;\n-        for (int i = 1; i <= numAttempts; i++) {\n-            try {\n-                if (i != 1) {\n-                    p.log(\"Re-attempting agent creation, attempt number \" + i);\n-                }\n-                Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(),\n-                        envVars, testThreadFactory, testThreadFactoryPath);\n-                agents.add(agent);\n-                return agent;\n-            } catch (Agent.Fault f) {\n-                \/\/ keep track of the fault and reattempt to get an agent if within limit\n-                if (toThrow == null) {\n-                    toThrow = f;\n-                } else {\n-                    \/\/ add the previous exception as a suppressed exception\n-                    \/\/ of the current one\n-                    if (toThrow.getCause() != null) {\n-                        f.addSuppressed(toThrow.getCause());\n-                    }\n-                    toThrow = f;\n-                }\n-                if (i == numAttempts || !(f.getCause() instanceof IOException)) {\n-                    \/\/ we either made enough attempts or we failed due to a non IOException.\n-                    \/\/ In either case we don't attempt to create an agent again and instead throw\n-                    \/\/ the captured failure(s)\n-                    throw toThrow;\n-                }\n-            }\n-        }\n-        throw new AssertionError(\"should not reach here\");\n+        Agent agent = p.getAgent(absTestScratchDir().toFile(), jdk, vmOpts.toList(), envVars,\n+                testThreadFactory, testThreadFactoryPath);\n+        agents.add(agent);\n+        return agent;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":4,"deletions":34,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2333,3 +2333,3 @@\n-    \/\/ number of attempts to get an agent for an action. we default to 2, to allow\n-    \/\/ for retrying a failed attempt once\n-    private int numAgentSelectionAttempt = 2;\n+    \/\/ number of attempts to get an agent for an action. we default to 1, which implies\n+    \/\/ by default we don't re-attempt on a failure\n+    private int numAgentSelectionAttempt = 1;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/Tool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -299,7 +299,4 @@\n-    The maximum number of times the pool will be queried for a agent VM \\\n-    when running an action. A value of 1 will mean that no retry will be \\\n-    attempted if either a new agent VM creation fails or an existing one \\\n-    couldn't be obtained from the pool. Similarly, a value of 2 will imply \\\n-    that if the agent VM creation fails or an existing one couldn't be \\\n-    obtained from the pool, then 1 retry will be attempted. \\\n-    Accepts a integer value; any value lesser than 1 is rejected.\n+    The number of attempts jtreg will make to access an agent \\\n+    with the desired characteristics, either by creating a new one, \\\n+    or obtaining one from the pool of reusable VMs. The minimum value, \\\n+    and the default value, is 1.\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/tool\/i18n.properties","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}