{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,8 @@\n+    \/**\n+     * @param td the test description\n+     * {@return true if the test is configured to run exclusively, false otherwise}\n+     * @deprecated Use {@link #isExclusiveAccessRequired(TestDescription)} instead,\n+     *             which doesn't throw the checked exception\n+     * @throws TestSuite.Fault\n+     *\/\n+    @Deprecated\n@@ -222,0 +230,8 @@\n+    \/**\n+     * @param td the test description\n+     * {@return true if the test is configured to run exclusively, false otherwise}\n+     *\/\n+    public boolean isExclusiveAccessRequired(TestDescription td) {\n+        return properties.needsExclusiveAccess(td.getFile());\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionTestSuite.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    boolean needsExclusiveAccess(File file) throws TestSuite.Fault {\n+    boolean needsExclusiveAccess(File file) {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.time.Duration;\n@@ -379,0 +380,15 @@\n+        long exclusiveAccessWaitMillis = 0;\n+        \/\/ if the RegressionScript isn't meant to only check the test description,\n+        \/\/ then before starting the action, we check if the RegressionScript\n+        \/\/ requires a exclusiveAccess lock and if it does, we acquire it.\n+        if (supportsExclusiveAccess() && !script.isCheck()) {\n+            exclusiveAccessLock = script.getLockIfRequired();\n+            if (exclusiveAccessLock != null) {\n+                long startNanos = System.nanoTime();\n+                exclusiveAccessLock.lock();\n+                exclusiveAccessWaitMillis = Duration.ofNanos(\n+                        System.nanoTime() - startNanos).toMillis();\n+            }\n+        }\n+        Date startDate = new Date();\n+        startTime = startDate.getTime();\n@@ -390,3 +406,4 @@\n-\n-        Date startDate = new Date();\n-        startTime = startDate.getTime();\n+        if (exclusiveAccessLock != null) {\n+            \/\/ log the time spent (in seconds) waiting for exclusiveAccess\n+            pw.println(LOG_EXCLUSIVE_ACCESS_TIME + ((double) exclusiveAccessWaitMillis \/ 1000.0));\n+        }\n@@ -394,1 +411,1 @@\n-    } \/\/ startAction()\n+    }\n@@ -398,1 +415,1 @@\n-     * for the action become immutable.\n+     * for the action becomes immutable.\n@@ -403,8 +420,22 @@\n-        Date endDate = new Date();\n-        long elapsedTime = endDate.getTime() - startTime;\n-        PrintWriter pw = section.getMessageWriter();\n-        pw.println(LOG_FINISHED + endDate);\n-        pw.println(LOG_ELAPSED_TIME + ((double) elapsedTime\/1000.0));\n-        recorder.close();\n-        section.setStatus(status);\n-    } \/\/ endAction()\n+        try {\n+            Date endDate = new Date();\n+            long elapsedTime = endDate.getTime() - startTime;\n+            PrintWriter pw = section.getMessageWriter();\n+            pw.println(LOG_FINISHED + endDate);\n+            pw.println(LOG_ELAPSED_TIME + ((double) elapsedTime \/ 1000.0));\n+            recorder.close();\n+            section.setStatus(status);\n+        } finally {\n+            if (exclusiveAccessLock != null) {\n+                exclusiveAccessLock.unlock();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * {@return true if the action can run a {@code RegressionScript}\n+     *          that has been configured to run exclusively, false otherwise}\n+     *\/\n+    protected boolean supportsExclusiveAccess() {\n+        return false;\n+    }\n@@ -848,0 +879,3 @@\n+    \/\/ used when the action's RegressionScript is configured to\n+    \/\/ run in exclusiveAccess.dir\n+    private Lock exclusiveAccessLock;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Action.java","additions":47,"deletions":13,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.time.Duration;\n@@ -341,8 +340,0 @@\n-            Lock lock = script.getLockIfRequired();\n-            long exclusiveAccessWaitMillis = 0;\n-            if (lock != null) {\n-                long startNanos = System.nanoTime();\n-                lock.lock();\n-                exclusiveAccessWaitMillis = Duration.ofNanos(System.nanoTime() - startNanos).toMillis();\n-            }\n-            \/\/ Start action after the lock is taken to ensure correct \"elapsed time\".\n@@ -350,6 +341,0 @@\n-            if (lock != null) {\n-                \/\/ print the duration we waited for acquiring a lock due to\n-                \/\/ exclusiveAccess.dir\n-                section.getMessageWriter().println(LOG_EXCLUSIVE_ACCESS_TIME\n-                        + ((double) exclusiveAccessWaitMillis \/ 1000.0));\n-            }\n@@ -370,1 +355,0 @@\n-                \/\/ End action before releasing the lock.\n@@ -372,1 +356,0 @@\n-                if (lock != null) lock.unlock();\n@@ -391,0 +374,5 @@\n+    @Override\n+    protected boolean supportsExclusiveAccess() {\n+        return true;\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1061,9 +1061,2 @@\n-    Lock getLockIfRequired() throws TestRunException {\n-        try {\n-            if (!testSuite.needsExclusiveAccess(td))\n-                return null;\n-        } catch (TestSuite.Fault e) {\n-            throw new TestRunException(\"Can't determine if lock required\", e);\n-        }\n-\n-        return Lock.get(params);\n+    Lock getLockIfRequired() {\n+        return testSuite.isExclusiveAccessRequired(td) ? Lock.get(params) : null;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.time.Duration;\n@@ -165,0 +164,5 @@\n+    @Override\n+    protected boolean supportsExclusiveAccess() {\n+        return true;\n+    }\n+\n@@ -285,8 +289,0 @@\n-            Lock lock = script.getLockIfRequired();\n-            if (lock != null) {\n-                long startNanos = System.nanoTime();\n-                lock.lock();\n-                long durationMillis = Duration.ofNanos(System.nanoTime() - startNanos).toMillis();\n-                section.getMessageWriter().println(LOG_EXCLUSIVE_ACCESS_TIME\n-                        + ((double) durationMillis\/1000.0));\n-            }\n@@ -313,1 +309,0 @@\n-                if (lock != null) lock.unlock();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ShellAction.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"}]}