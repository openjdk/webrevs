{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,8 @@\n+    \/**\n+     * @param td the test description\n+     * {@return true if the test is configured to run exclusively, false otherwise}\n+     * @deprecated Use {@link #isExclusiveAccessRequired(TestDescription)} instead,\n+     *             which doesn't throw the checked exception\n+     * @throws TestSuite.Fault\n+     *\/\n+    @Deprecated\n@@ -222,0 +230,8 @@\n+    \/**\n+     * @param td the test description\n+     * {@return true if the test is configured to run exclusively, false otherwise}\n+     *\/\n+    public boolean isExclusiveAccessRequired(TestDescription td) {\n+        return properties.needsExclusiveAccess(td.getFile());\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionTestSuite.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-    boolean needsExclusiveAccess(File file) throws TestSuite.Fault {\n+    boolean needsExclusiveAccess(File file) {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/TestProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.time.Duration;\n@@ -379,0 +380,15 @@\n+        long exclusiveAccessWaitMillis = 0;\n+        \/\/ if the RegressionScript isn't meant to only check the test description,\n+        \/\/ then before starting the action, we check if the RegressionScript\n+        \/\/ requires a exclusiveAccess lock and if it does, we acquire it.\n+        if (supportsExclusiveAccess() && !script.isCheck()) {\n+            exclusiveAccessLock = script.getLockIfRequired();\n+            if (exclusiveAccessLock != null) {\n+                long startNanos = System.nanoTime();\n+                exclusiveAccessLock.lock();\n+                exclusiveAccessWaitMillis = Duration.ofNanos(\n+                        System.nanoTime() - startNanos).toMillis();\n+            }\n+        }\n+        Date startDate = new Date();\n+        startTime = startDate.getTime();\n@@ -390,3 +406,4 @@\n-\n-        Date startDate = new Date();\n-        startTime = startDate.getTime();\n+        if (exclusiveAccessLock != null) {\n+            \/\/ log the time spent (in seconds) waiting for exclusiveAccess\n+            pw.println(LOG_EXCLUSIVE_ACCESS_TIME + ((double) exclusiveAccessWaitMillis \/ 1000.0));\n+        }\n@@ -394,1 +411,1 @@\n-    } \/\/ startAction()\n+    }\n@@ -398,1 +415,1 @@\n-     * for the action become immutable.\n+     * for the action becomes immutable.\n@@ -403,8 +420,22 @@\n-        Date endDate = new Date();\n-        long elapsedTime = endDate.getTime() - startTime;\n-        PrintWriter pw = section.getMessageWriter();\n-        pw.println(LOG_FINISHED + endDate);\n-        pw.println(LOG_ELAPSED_TIME + ((double) elapsedTime\/1000.0));\n-        recorder.close();\n-        section.setStatus(status);\n-    } \/\/ endAction()\n+        try {\n+            Date endDate = new Date();\n+            long elapsedTime = endDate.getTime() - startTime;\n+            PrintWriter pw = section.getMessageWriter();\n+            pw.println(LOG_FINISHED + endDate);\n+            pw.println(LOG_ELAPSED_TIME + ((double) elapsedTime \/ 1000.0));\n+            recorder.close();\n+            section.setStatus(status);\n+        } finally {\n+            if (exclusiveAccessLock != null) {\n+                exclusiveAccessLock.unlock();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * {@return true if the action can run a {@code RegressionScript}\n+     *          that has been configured to run exclusively, false otherwise}\n+     *\/\n+    protected boolean supportsExclusiveAccess() {\n+        return false;\n+    }\n@@ -714,0 +745,1 @@\n+        LOG_EXCLUSIVE_ACCESS_TIME = \"exclusiveAccess wait time (seconds): \",\n@@ -847,0 +879,3 @@\n+    \/\/ used when the action's RegressionScript is configured to\n+    \/\/ run in exclusiveAccess.dir\n+    private Lock exclusiveAccessLock;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Action.java","additions":49,"deletions":14,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -340,4 +340,0 @@\n-            Lock lock = script.getLockIfRequired();\n-            if (lock != null) lock.lock();\n-\n-            \/\/ Start action after the lock is taken to ensure correct \"elapsed time\".\n@@ -345,1 +341,0 @@\n-\n@@ -360,1 +355,0 @@\n-                \/\/ End action before releasing the lock.\n@@ -362,1 +356,0 @@\n-                if (lock != null) lock.unlock();\n@@ -381,0 +374,5 @@\n+    @Override\n+    protected boolean supportsExclusiveAccess() {\n+        return true;\n+    }\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1061,9 +1061,2 @@\n-    Lock getLockIfRequired() throws TestRunException {\n-        try {\n-            if (!testSuite.needsExclusiveAccess(td))\n-                return null;\n-        } catch (TestSuite.Fault e) {\n-            throw new TestRunException(\"Can't determine if lock required\", e);\n-        }\n-\n-        return Lock.get(params);\n+    Lock getLockIfRequired() {\n+        return testSuite.isExclusiveAccessRequired(td) ? Lock.get(params) : null;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,0 +164,5 @@\n+    @Override\n+    protected boolean supportsExclusiveAccess() {\n+        return true;\n+    }\n+\n@@ -284,2 +289,0 @@\n-            Lock lock = script.getLockIfRequired();\n-            if (lock != null) lock.lock();\n@@ -306,1 +309,0 @@\n-                if (lock != null) lock.unlock();\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ShellAction.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-\t\t-conc:4 \\\n+\t\t-conc:5 \\\n@@ -41,1 +41,2 @@\n-\t$(GREP) -s 'Test results: passed: 4' $(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -s 'Test results: passed: 5' $(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -s 'exclusiveAccess wait time' -R $(@:%.ok=%\/work\/)  > \/dev\/null\n","filename":"test\/exclusive\/ExclusiveAccessTest.gmk","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Date;\n+\n+\/*\n+ * @test\n+ * @run main Test\n+ *\/\n+public class Test {\n+\n+    public static void main(final String[] args) throws Exception {\n+        System.out.println(\"test run at \" + new Date());\n+    }\n+}\n","filename":"test\/exclusive\/dir\/Test.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}