{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -310,0 +310,2 @@\n+    public static final String MAIN_SKIPPED_STATUS_PREFIX = MAIN_SKIPPED + SKIP_EXCEPTION;\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainActionHelper.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -232,12 +232,5 @@\n-            final TestFilter f = new CompositeFilter(filters.toArray(new TestFilter[0]));\n-            return new CachingTestFilter(f.getName(), f.getDescription(), f.getReason()) {\n-                @Override\n-                protected String getCacheKey(TestDescription td) {\n-                    return td.getRootRelativeURL();\n-                }\n-\n-                @Override\n-                protected boolean getCacheableValue(TestDescription td) throws Fault {\n-                    return f.accepts(td);\n-                }\n-            };\n+            \/\/ Do not cache the results of the composite filter,\n+            \/\/ to not affect the filter stats, which handle CompositeFilters specially.\n+            \/\/ Cache the individual filters.\n+            TestFilter f = new CompositeFilter(filters.toArray(new TestFilter[0]));\n+            return f;\n@@ -331,1 +324,1 @@\n-                \"TestLimitFilter\",\n+                \"TimeLimitFilter\",\n@@ -497,1 +490,1 @@\n-                        \"Test has not been matched by a match list\") {\n+                        \"Test is not in a match list\") {\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/config\/RegressionParameters.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n@@ -37,0 +41,2 @@\n+import com.sun.javatest.TestDescription;\n+import com.sun.javatest.TestFilter;\n@@ -38,1 +44,2 @@\n-import com.sun.javatest.regtest.config.CachingTestFilter;\n+import com.sun.javatest.TestResultTable;\n+import com.sun.javatest.regtest.agent.MainActionHelper;\n@@ -47,0 +54,1 @@\n+    private Map<TestFilter, ? extends List<TestDescription>> filterDetails;\n@@ -58,6 +66,31 @@\n-            public void finishedTesting() {\n-                CachingTestFilter ef = params.getExcludeListFilter();\n-                if (ef != null) {\n-                    for (CachingTestFilter.Entry e: ef.getCacheEntries()) {\n-                        if (!e.value)\n-                            excluded++;\n+            public void finishedTesting(TestResultTable.TreeIterator treeIterator) {\n+                filterDetails = treeIterator.getFilterStats();\n+                filterDetails.forEach((f, tds) -> {\n+                    int count = tds.size();\n+                    switch (f.getName()) {\n+                        case \"jtregExcludeListFilter\":\n+                            notRun_excluded_count += count;\n+                            break;\n+                        case \"jtregMatchListFilter\":\n+                            notRun_matchList_count += count;\n+                            break;\n+                        case \"jtregPriorStatusFilter\":\n+                            notRun_priorStatus_count += count;\n+                            break;\n+                        case \"Keywords\":\n+                            notRun_keywords_count += count;\n+                            break;\n+                        case \"ModulesFilter\":\n+                            notRun_modules_count += count;\n+                            break;\n+                        case \"RequiresFilter\":\n+                            notRun_requires_count += count;\n+                            break;\n+                        case \"TimeLimitFilter\":\n+                            notRun_timeLimit_count += count;\n+                            break;\n+\n+                        default: {\n+                            System.err.println(\"Filter not recognized: \" + f.getName() + \"(\" + f + \")\");\n+                            notRun_other_count += count;\n+                        }\n@@ -65,5 +98,1 @@\n-                }\n-                RegressionParameters.KeywordsTestFilter kf = params.getKeywordsFilter();\n-                if (kf != null) {\n-                    ignored = kf.ignored.size();\n-                }\n+                });\n@@ -83,0 +112,3 @@\n+        if (tr.getStatus().getReason().startsWith(MainActionHelper.MAIN_SKIPPED_STATUS_PREFIX)) {\n+            passed_skipped_count++;\n+        }\n@@ -113,0 +145,24 @@\n+                if (passed_skipped_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.skipped\", passed_skipped_count);\n+                }\n+                if (notRun_excluded_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.excluded\", notRun_excluded_count);\n+                }\n+                if (notRun_matchList_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.matchList\", notRun_matchList_count);\n+                }\n+                if (notRun_keywords_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.keywords\", notRun_keywords_count);\n+                }\n+                if (notRun_modules_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.modules\", notRun_modules_count);\n+                }\n+                if (notRun_requires_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.requires\", notRun_requires_count);\n+                }\n+                if (notRun_priorStatus_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.priorStatus\", notRun_priorStatus_count);\n+                }\n+                if (notRun_timeLimit_count > 0) {\n+                    msg += i18n.getString(\"stats.tests.timeLimit\", notRun_timeLimit_count);\n+                }\n@@ -122,2 +178,4 @@\n-        File file = new File(reportTextDir, \"stats.txt\");\n-        report(file);\n+        File statsTxt = new File(reportTextDir, \"stats.txt\");\n+        report(statsTxt);\n+        File notRunTxt = new File(reportTextDir, \"notRun.txt\");\n+        reportNotRunTests(notRunTxt);\n@@ -132,0 +190,30 @@\n+    public void reportNotRunTests(File file) throws IOException {\n+        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(file)))) {\n+            reportNotRunTests(out);\n+        }\n+    }\n+\n+    public void reportNotRunTests(PrintWriter out) {\n+        if (filterDetails == null || filterDetails.isEmpty()) {\n+            out.println(\"no tests were filtered out\");\n+        } else {\n+            Map<TestDescription, Status> map = new TreeMap<>(Comparator.comparing(TestDescription::getRootRelativeURL));\n+            filterDetails.forEach((f, tds) -> {\n+                var status = new Status(Status.NOT_RUN, f.getReason());\n+                tds.forEach(td -> map.put(td, status));\n+            });\n+            var maxNameLength = map.keySet().stream()\n+                    .map(TestDescription::getRootRelativeURL)\n+                    .mapToInt(String::length)\n+                    .max().getAsInt();\n+            for (var e : map.entrySet()) {\n+                var td = e.getKey();\n+                var td_url = td.getRootRelativeURL();\n+                var status = e.getValue();\n+                out.println(td_url\n+                        + \" \".repeat(maxNameLength - td_url.length() + 1)\n+                        + status);\n+            }\n+        }\n+    }\n+\n@@ -138,2 +226,2 @@\n-     * %p       number of passed tests\n-     * %n       number of tests not run\n+     * %p       number of passed tests, including skipped tests\n+     * %P       number of passed tests, excluding skipped tests\n@@ -141,0 +229,7 @@\n+     * %s       number of skipped tests (run but threw SkippedException)\n+     *\n+     * %n       number of tests not run\n+     * %m       number of tests not meeting module requirements\n+     * %R       number of tests not meeting platform requirements\n+     * %S       number of tests not matching specified status\n+     * %t       number of tests not matching time limit requirements\n@@ -142,1 +237,2 @@\n-     * %i       number of ignored tests\n+     * %x       number of tests not on match list\n+     * %k %i    number of keyword-ignored tests\n@@ -146,1 +242,1 @@\n-     * %?X      prints given number if not zero, where X is one of f, F, e, p, x, i\n+     * %?X      prints given number if not zero, where X is one of f, F, e, p, P, s, x, i\n@@ -163,0 +259,1 @@\n+                    case 'k':\n@@ -165,0 +262,1 @@\n+                    case 'P':\n@@ -166,1 +264,6 @@\n-                    case 'x': {\n+                    case 'R':\n+                    case 's':\n+                    case 't':\n+                    case 'S':\n+                    case 'x':\n+                    case 'X': {\n@@ -227,1 +330,1 @@\n-                        } else\n+                        } else {\n@@ -229,0 +332,1 @@\n+                        }\n@@ -231,1 +335,1 @@\n-                    default:\n+                    default: {\n@@ -233,0 +337,1 @@\n+                    }\n@@ -250,2 +355,4 @@\n-            case 'i':\n-                return ignored;\n+            case 'i': case 'k': \/\/ i for backward compatibility; was \"ignored\"\n+                return notRun_keywords_count;\n+            case 'm':\n+                return notRun_modules_count;\n@@ -254,0 +361,2 @@\n+            case 'o':\n+                return notRun_other_count;\n@@ -256,0 +365,2 @@\n+            case 'P':\n+                return counts[Status.PASSED] - passed_skipped_count;\n@@ -258,0 +369,8 @@\n+            case 'R':\n+                return notRun_requires_count;\n+            case 's':\n+                return passed_skipped_count;\n+            case 'S':\n+                return notRun_priorStatus_count;\n+            case 't':\n+                return notRun_timeLimit_count;\n@@ -259,1 +378,3 @@\n-                return excluded;\n+                return notRun_excluded_count;\n+            case 'X':\n+                return notRun_matchList_count;\n@@ -265,0 +386,3 @@\n+    \/**\n+     * The numbers of passed, failed, and error tests.\n+     *\/\n@@ -266,2 +390,57 @@\n-    int excluded;\n-    int ignored;\n+\n+    \/**\n+     * The number of \"skipped tests\".\n+     * Skipped tests are a subset of passed tests:\n+     * the test class was executed, but it threw jtreg.SkippedException\n+     *\/\n+    int passed_skipped_count;\n+\n+    \/\/ not run tests\n+\n+    \/**\n+     * The number of tests excluded by an exclude list (problem list).\n+     * See -exclude option.\n+     *\/\n+    int notRun_excluded_count;\n+\n+    \/**\n+     * The number of tests not run because of keywords.\n+     * See -k option.\n+     *\/\n+    int notRun_keywords_count;\n+\n+    \/**\n+     * The number of tests not run because not on a match list.\n+     * See -match option.\n+     *\/\n+    int notRun_matchList_count;\n+\n+    \/**\n+     * The number of tests not run because required modules were not available.\n+     * See the @modules tag and the modules in the JDK under test.\n+     *\/\n+    int notRun_modules_count;\n+\n+    \/**\n+     * The number of tests not run because of the prior status.\n+     * See the -status option.\n+     *\/\n+    int notRun_priorStatus_count;\n+\n+    \/**\n+     * The number of tests not run because the platform requirements were not met.\n+     * See the @requires tag and the full set of platform properties.\n+     *\/\n+    int notRun_requires_count;\n+\n+    \/**\n+     * The number of tests not run because of the potential run time.\n+     * See the -timelimit and other timeout-related options, and the\n+     * declared timeout value for the test.\n+     *\/\n+    int notRun_timeLimit_count;\n+\n+    \/**\n+     * Fall through value for unrecognized filters. Should normally be zero.\n+     *\/\n+    int notRun_other_count;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/TestStats.java","additions":206,"deletions":27,"binary":false,"changes":233,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,10 @@\n+\n+stats.tests.skipped=; skipped: {0}\n+\n+stats.tests.excluded=; excluded: {0}\n+stats.tests.keywords=; did not match keywords: {0}\n+stats.tests.matchList=; not in match-list: {0}\n+stats.tests.modules=; did not meet module requirements: {0}\n+stats.tests.priorStatus=; did not match prior status: {0}\n+stats.tests.requires=; did not meet platform requirements: {0}\n+stats.tests.timeLimit=; did not meet time-limit requirements: {0}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/i18n.properties","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -440,3 +440,3 @@\n-in the test itself after the `@test` tag, or the string `id`_N_  if no id is \n-explicitly defined, where N is the number of the test within the file, \n-and where `0` identifies the first test. \n+in the test itself after the `@test` tag, or the string `id`_N_  if no id is\n+explicitly defined, where N is the number of the test within the file,\n+and where `0` identifies the first test.\n@@ -466,1 +466,1 @@\n-| _[directory]_`:`_group_ | All tests in a group defined for a testsuite       |   \n+| _[directory]_`:`_group_ | All tests in a group defined for a testsuite       |\n@@ -903,0 +903,117 @@\n+### How do I control the statistics reported on the console at the end of a test run?\n+\n+By default, `jtreg` reports simple execution statistics at the end of a test run.\n+These are given in a line beginning `Test results:`, followed by a series of\n+labeled values, including the following:\n+\n+ * the number of tests that passed; for historical reasons, this includes any\n+   tests that were skipped by throwing `jtreg.SkippedException`\n+ * the number of tests that failed\n+ * the number of tests that could not be executed and which reported an error\n+ * the number of filtered out by the exclude list (problem list) filter\n+ * the number of tests that were filtered out by the keyword filter\n+ * the number of skipped tests\n+\n+You may override the format of this line by setting the system property\n+`jtreg.stats.format` to a `printf`-like format string. The following format\n+specifiers are supported:\n+\n+* `%f`         &mdash; number of failed tests\n+* `%F`         &mdash; number of failed and error tests\n+* `%e`         &mdash; number of error tests\n+* `%e`         &mdash; number of error tests\n+* `%p`         &mdash; number of passed tests, including skipped tests\n+* `%P`         &mdash; number of passed tests, excluding skipped tests\n+* `%n`         &mdash; number of tests not run\n+* `%r`         &mdash; number of tests run\n+* `%s`         &mdash; number of skipped tests\n+* `%x`         &mdash; number of tests filtered out by the exclude list (problem list) filter\n+* `%i` or `%k` &mdash; number of tests filtered out by the keyword filter\n+* `%m`         &mdash; number of tests not meeting module requirements\n+* `%R`         &mdash; number of tests not meeting platform requirements\n+* `%S`         &mdash; number of tests not matching the prior status requirements\n+* `%t`         &mdash; number of tests not meeting time-limit requirements\n+* `%o`         &mdash; number of tests filtered out for other (unknown) reasons\n+* `%,`         &mdash; conditional comma\n+* `%<space>`   &mdash; conditional space\n+* `%%`         &mdash; %\n+* `%?X`        &mdash; prints given number if not zero, where X is one of f, F, e, p, P, s, x, i\n+* `%?{textX}`  &mdash; prints text and given number if number is not zero, where X is one of f, F, e, p, s, x, i\n+\n+A _conditional_ comma or space is only generated if it is not at the beginning of the line.\n+\n+### What do all those numbers in the \"Test results\" line mean?\n+\n+After running tests, `jtreg` prints out a line beginning `Test results:` followed\n+by a series of labeled numbers. The numbers give details about the number of\n+tests that were run as well as the number of tests that were not. What do they all mean?\n+\n+_passed_\n+:   The number of tests that were executed and which indicated that the test passed.\n+    Note that some parts of the test may not have been executed. Some tests may be \"skipped\",\n+    meaning that the test determined that it could not be executed as intended.\n+\n+_failed_\n+:   The number of tests that were executed and which indicated that the test failed.\n+\n+_error_\n+:   The number of tests that were executed and which indicated that an error\n+    occurred before it could be determined whether the test passed or failed.\n+\n+_skipped_\n+:   The number of tests that \"passed\" but which indicated that the test\n+    could not be executed as expected. This only applies to tests that throw\n+    `jtreg.SkippedException`. Some tests, such as \"combo-tests\" or those that use\n+    a test framework like TestNG or JUnit , may provide additional mechanisms to\n+    skip parts of a test. Such results are not included here. See the results\n+    for an individual test, or for any summary files generated for the framework.\n+\n+_excluded_\n+:   The number of tests that were present in an exclude list, such as a \"problem list\".\n+\n+_not in match-list_\n+:   The number of tests that were not in a match list specified on the command line\n+    with the `-match` option, which may be used to select and run _only_ those tests\n+    that appear in an exclude list, such as a \"problem list\".\n+\n+_did not match keywords_\n+:   The number of tests that did not match the keyword expression used to filter the\n+    set of tests to be executed.\n+\n+    The keywords for each test may be user-defined, with the `@key` tag, or implicitly\n+    defined by various tags and\/or their options in the test description.\n+    The full set of keywords for each test can be seen in the _testdescription_\n+    section of the test's result file (`.jtr` file).\n+\n+    The keyword expression is a combination of any expression specified with the `-k` \n+    option and any expressions derived from other command-line expressions, like \n+    `-manual` (to select tests that require manual interaction), or `-bug` (to select \n+    tests that declare being a test for a given bug with the `@bug` tag.)\n+    The full keyword expression can be seen in the _Keywords_ section in the file\n+   `html\/config.html` in the overall report for the test run.\n+\n+_did not meet module requirements_\n+:   The number of tests that declared the need for specific modules to be available in\n+    the JDK being tested, but which were not available.\n+    See the `@modules` tag in the test description to see the modules that are\n+    required by the test.\n+    Examine the test JDK and any relevant JDK options to determine the set of\n+    modules that will be availble. For example, see the JDK `--list-modules` option.\n+\n+_did not meet platform requirements_\n+:   The number of tests that did not meet the requirements given in each test's\n+    `@requires` tag. The values in the expression may be \"standard\" values, as\n+    defined in the [Tag Specification](tag-spec.html#requires_names), or custom\n+    values as defined in the `requires.extraPropsDefns` properties in the\n+    test suite's `TEST.ROOT` file.\n+\n+_did not match prior status_\n+:  The number of tests that were not executed because they did not meet the\n+   \"prior status\" conditions given in the `jtreg` `-status` option.\n+\n+_did not meet time-limit requirements_\n+: The number of tests that were not executed because they did not meet the\n+  time-limit conditions given in the `jtreg` `-timelimit` option.\n+\n+Note that to avoid clutter, only non-zero values are given.\n+\n@@ -1126,1 +1243,1 @@\n-time written into each `.jtr` file, you can find the slowest tests with \n+time written into each `.jtr` file, you can find the slowest tests with\n@@ -1151,1 +1268,1 @@\n-* Try reducing the priority used to run `jtreg` and the processes it runs. \n+* Try reducing the priority used to run `jtreg` and the processes it runs.\n@@ -1155,1 +1272,1 @@\n-framework automatically uses these techniques to reduce the load on a system.  \n+framework automatically uses these techniques to reduce the load on a system.\n@@ -1939,2 +2056,2 @@\n-Tests that use [preview features](https:\/\/openjdk.org\/jeps\/12) must use the \n-`--enable-preview` to compile and run the code.  In addition, to compile the \n+Tests that use [preview features](https:\/\/openjdk.org\/jeps\/12) must use the\n+`--enable-preview` to compile and run the code.  In addition, to compile the\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":126,"deletions":9,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -619,0 +619,6 @@\n+<p>Sometimes, after the main method has been invoked, the code may determine\n+that it cannot execute the test as required, and as such, the test should not\n+be considered to have either passed or failed. In this situation, the test may\n+throw an exception named `jtreg.SkippedException`, optionally providing\n+a detail string to indicate why the test has been skipped.\n+\n","filename":"src\/share\/doc\/javatest\/regtest\/tag-spec.html","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-\t$(GREP) -s 'Test results: passed: 156; error: 84' $(@:%.ok=%\/log)  > \/dev\/null\n+\t$(GREP) -s 'Test results: passed: 157; error: 84' $(@:%.ok=%\/log)  > \/dev\/null\n","filename":"test\/basic\/Basic.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,2 +210,2 @@\n-        numPassed += 12; numFailed += 19; numError  += 12;\n-        numMain   += 43;\n+        numPassed += 13; numFailed += 19; numError  += 12;\n+        numMain   += 44;\n","filename":"test\/basic\/Basic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-\t    EXPECT_PASS=91 ; \\\n+\t    EXPECT_PASS=92 ; \\\n@@ -56,1 +56,1 @@\n-\t    EXPECT_PASS=93 ; \\\n+\t    EXPECT_PASS=94 ; \\\n","filename":"test\/basic\/ReportOnlyTest.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-\t$(GREP) '^Test results: passed: 2$$' $(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) '^Test results: passed: 2; did not meet module requirements: 4$$' $(@:%.ok=%\/jt.log)  > \/dev\/null\n","filename":"test\/modules\/ModulesTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Not run: exclude\n+ *\/\n+\n+public class ExcludeTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/ExcludeTest.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary not run: keyword\n+ * @key Keyword\n+ *\/\n+\n+public class KeywordTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/KeywordTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary not run: modules\n+ * @modules jdk.jshell\n+ *\/\n+\n+public class ModulesTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/ModulesTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary not run: no match\n+ *\/\n+\n+public class NoMatchTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/NoMatchTest.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+#----------------------------------------------------------------------\n+\n+# The tests in the associated test suite are designed to test all\n+# the reasons why a test might not be selected by one of the filters.\n+# As such, most of the tests should either be \"not run\" or fail if run.\n+\n+$(BUILDTESTDIR)\/NotRunTests.ok: \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKJAVA) \\\n+\t\t-jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/setup-report) \\\n+\t\t-e STATUS_TEST_SETUP=true \\\n+\t\t$(TESTDIR)\/notRunTests\/StatusTest.java\n+\t$(JDKJAVA) \\\n+\t\t-jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/report) \\\n+\t\t-report:files \\\n+\t\t\"-k:!Keyword\" \\\n+\t\t-status:notRun \\\n+\t\t-exclude:$(TESTDIR)\/notRunTests\/exclude.jtx \\\n+\t\t-match:$(TESTDIR)\/notRunTests\/match.jtx \\\n+\t\t-javaoption:--limit-modules=java.base \\\n+\t\t-timelimit:30 \\\n+\t\t-v1 \\\n+\t\t$(TESTDIR)\/notRunTests   \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1  || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) \"Test results:\" $(@:%.ok=%\/jt.log)  > $(@:%.ok=%\/results-line.txt)\n+\t$(GREP) \"Test results: passed: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; excluded: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; not in match-list: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; did not match keywords: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; did not meet module requirements: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; did not meet platform requirements: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; did not match prior status: 1;\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\t$(GREP) \"; did not meet time-limit requirements: 1\" $(@:%.ok=%\/results-line.txt) > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/NotRunTests.ok\n\\ No newline at end of file\n","filename":"test\/notRunTests\/NotRunTests.gmk","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Passed\n+ *\/\n+\n+public class PassTest {\n+    public static void main(String ... args) throws Exception {\n+        \/\/ this test should always pas\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/PassTest.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary not run: requires\n+ * @requires os.arch == \"hal9000\"\n+ *\/\n+\n+public class RequiresTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/RequiresTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Not run: prior status\n+ *\/\n+\n+public class StatusTest {\n+    public static void main(String ... args) throws Exception {\n+        if (System.getenv(\"STATUS_TEST_SETUP\") == null) {\n+            throw new Exception(\"This test should not be executed\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/StatusTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+keys = Keyword\n\\ No newline at end of file\n","filename":"test\/notRunTests\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary not run: time limit\n+ * @run main\/timeout=3600 TimeLimitTest\n+ *\/\n+\n+public class TimeLimitTest {\n+    public static void main(String ... args) throws Exception {\n+        throw new Exception(\"This test should not be executed\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/notRunTests\/TimeLimitTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# an exclude list (problem list) of tests that should not be run;\n+# for use with `-exclude`\n+\n+ExcludeTest.java\n\\ No newline at end of file\n","filename":"test\/notRunTests\/exclude.jtx","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+# an exclude list (problem list) of tests that should not be run;\n+# for use with `-match` -- in other words, it should have all tests\n+# except NoMatch.java\n+\n+ExcludeTest.java\n+KeywordTest.java\n+ModulesTest.java\n+PassTest.java\n+RequiresTest.java\n+StatusTest.java\n+TimeLimitTest.java\n\\ No newline at end of file\n","filename":"test\/notRunTests\/match.jtx","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jtreg;\n+\n+public class SkippedException extends Exception {\n+    public SkippedException(String msg) {\n+        super(msg);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/share\/basic\/lib\/jtreg\/SkippedException.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Passed: Skipped: jtreg.SkippedException: -skipped-\n+ * @library ..\/lib\n+ * @run main Skipped\n+ *\/\n+\n+import jtreg.SkippedException;\n+\n+public class Skipped {\n+    public static void main(String... args) throws Exception {\n+        throw new SkippedException(\"-skipped-\");\n+    }\n+}\n","filename":"test\/share\/basic\/main\/Skipped.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+\/**\n+ * This is a unit test for TestStats.java, setting up sample combinations\n+ * of reported values, then checking the output generated by various format strings.\n+ *\/\n@@ -52,0 +56,5 @@\n+        { \"-p:10\", \"-s:5\",\n+                \"--format:passed:%p failed:%f error:%e not run:%n skipped:%s\",\n+                \"passed:10 failed:0 error:0 not run:0 skipped:5\",\n+                \"--format:passed:%P failed:%f error:%e not run:%n skipped:%s\",\n+                \"passed:5 failed:0 error:0 not run:0 skipped:5\"},\n@@ -82,1 +91,1 @@\n-                ts.ignored = Integer.valueOf(arg.substring(3));\n+                ts.notRun_keywords_count = Integer.valueOf(arg.substring(3));\n@@ -84,1 +93,3 @@\n-                ts.excluded = Integer.valueOf(arg.substring(3));\n+                ts.notRun_excluded_count = Integer.valueOf(arg.substring(3));\n+            } else if (arg.startsWith(\"-s:\")) {\n+                ts.passed_skipped_count = Integer.valueOf(arg.substring(3));\n@@ -104,2 +115,2 @@\n-        ts.excluded = 0;\n-        ts.ignored = 0;\n+        ts.notRun_excluded_count = 0;\n+        ts.notRun_keywords_count = 0;\n","filename":"test\/statsTests\/StatsTest.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+# unit test for format support in TestStats.java\n@@ -45,0 +46,1 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n@@ -59,1 +61,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=44 failed=32 excluded=0\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=45 failed=32 excluded=0\\s?$$' \\\n@@ -61,1 +63,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=44 failed=32 excluded=0\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=45 failed=32 excluded=0\\s?$$' \\\n@@ -67,0 +69,1 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n@@ -83,1 +86,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=13 failed=32 ignored=2\\s?$$' \\\n@@ -85,1 +88,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=13 failed=32 ignored=2\\s?$$' \\\n@@ -91,0 +94,51 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n+# (includes skipped)\n+$(BUILDTESTDIR)\/StatsTxt.3.ok: \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKJAVA) \\\n+\t    -Djtreg.stats.format=\"TEST-STATS: StatsTxt passed=%P failed=%F ignored=%i skipped=%s\" \\\n+\t    -jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/report) \\\n+\t\t-ignore:quiet \\\n+\t\t$(TESTDIR)\/share\/basic\/main   \\\n+\t\t$(TESTDIR)\/share\/basic\/ignore   \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1  || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2 skipped=1\\s?$$' \\\n+\t\t$(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2 skipped=1\\s?$$' \\\n+\t\t$(@:%.ok=%\/report\/text\/stats.txt)  > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/StatsTxt.3.ok\n+\n+# system test for default format support in TestStats.java: no -Djtreg.stats.format\n+# (includes skipped)\n+$(BUILDTESTDIR)\/StatsTxt.4.ok: \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKJAVA) \\\n+\t    -jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/report) \\\n+\t\t-ignore:quiet \\\n+\t\t$(TESTDIR)\/share\/basic\/main   \\\n+\t\t$(TESTDIR)\/share\/basic\/ignore   \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1  || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -E -s '^Test results: passed: 13; failed: 19; error: 13; skipped: 1; did not match keywords: 2\\s?$$' \\\n+\t\t$(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 13; failed: 19; error: 13; skipped: 1; did not match keywords: 2\\s?$$' \\\n+\t\t$(@:%.ok=%\/report\/text\/stats.txt)  > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/StatsTxt.4.ok\n+\n","filename":"test\/statsTests\/StatsTests.gmk","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-\t$(GREP) -E -s '^Test results: failed: 1\\s?$$' $(@:%.ok=%\/rerun-status-fail-report-default.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: failed: 1; did not match prior status: 4\\s?$$' $(@:%.ok=%\/rerun-status-fail-report-default.log) > \/dev\/null\n@@ -94,1 +94,1 @@\n-\t$(GREP) -E -s '^Test results: failed: 1\\s?$$' $(@:%.ok=%\/rerun-status-fail-report-all.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: failed: 1; did not match prior status: 4\\s?$$' $(@:%.ok=%\/rerun-status-fail-report-all.log) > \/dev\/null\n@@ -110,1 +110,1 @@\n-\t$(GREP) -E -s '^Test results: passed: 1\\s?$$' $(@:%.ok=%\/rerun-2.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 1; did not match prior status: 4\\s?$$' $(@:%.ok=%\/rerun-2.log) > \/dev\/null\n@@ -124,1 +124,1 @@\n-\t$(GREP) -E -s '^Test results: passed: 8; error: 1\\s?$$' $(@:%.ok=%\/rerun-all-executed.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 8; error: 1; excluded: 1\\s?$$' $(@:%.ok=%\/rerun-all-executed.log) > \/dev\/null\n@@ -139,1 +139,1 @@\n-\t$(GREP) -E -s '^Test results: passed: 8; error: 1\\s?$$' $(@:%.ok=%\/rerun-all.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 8; error: 1; excluded: 1\\s?$$' $(@:%.ok=%\/rerun-all.log) > \/dev\/null\n","filename":"test\/statusFilter\/StatusFilterTest.gmk","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}