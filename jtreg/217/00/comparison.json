{"files":[{"patch":"@@ -310,0 +310,2 @@\n+    public static final String MAIN_SKIPPED_STATUS_PREFIX = MAIN_SKIPPED + SKIP_EXCEPTION;\n+\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/MainActionHelper.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.javatest.regtest.agent.MainActionHelper;\n@@ -83,0 +84,3 @@\n+        if (tr.getStatus().getReason().startsWith(MainActionHelper.MAIN_SKIPPED_STATUS_PREFIX)) {\n+            skipped++;\n+        }\n@@ -113,0 +117,9 @@\n+                if (excluded > 0) {\n+                    msg += i18n.getString(\"stats.tests.excluded\", excluded);\n+                }\n+                if (ignored > 0) {\n+                    msg += i18n.getString(\"stats.tests.ignored\", ignored);\n+                }\n+                if (skipped > 0) {\n+                    msg += i18n.getString(\"stats.tests.skipped\", skipped);\n+                }\n@@ -138,1 +151,2 @@\n-     * %p       number of passed tests\n+     * %p       number of passed tests, including skipped tests\n+     * %P       number of passed tests, excluding skipped tests\n@@ -141,0 +155,1 @@\n+     * %s       number of skipped tests\n@@ -142,1 +157,1 @@\n-     * %i       number of ignored tests\n+     * %i       number of keyword-ignored tests\n@@ -146,1 +161,1 @@\n-     * %?X      prints given number if not zero, where X is one of f, F, e, p, x, i\n+     * %?X      prints given number if not zero, where X is one of f, F, e, p, P, s, x, i\n@@ -165,0 +180,1 @@\n+                    case 'P':\n@@ -166,0 +182,1 @@\n+                    case 's':\n@@ -227,1 +244,1 @@\n-                        } else\n+                        } else {\n@@ -229,0 +246,1 @@\n+                        }\n@@ -231,1 +249,1 @@\n-                    default:\n+                    default: {\n@@ -233,0 +251,1 @@\n+                    }\n@@ -256,0 +275,2 @@\n+            case 'P':\n+                return counts[Status.PASSED] - skipped;\n@@ -258,0 +279,2 @@\n+            case 's':\n+                return skipped;\n@@ -268,0 +291,1 @@\n+    int skipped;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/TestStats.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+stats.tests.excluded=; excluded: {0}\n+stats.tests.ignored=; ignored: {0}\n+stats.tests.skipped=; skipped: {0}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/report\/i18n.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -903,0 +903,37 @@\n+### How do I control the statistics reported on the console at the end of a test run?\n+\n+By default, `jtreg` reports simple execution statistics at the end of a test run.\n+These are given in a line beginning `Test results:`, followed by a series of\n+labeled values, including the following:\n+\n+ * the number of tests that passed; for historical reasons, this includes any\n+   tests that were skipped by throwing `jtreg.SkippedException`\n+ * the number of tests that failed\n+ * the number of tests that could not be executed and which reported an error\n+ * the number of filtered out by the exclude list (problem list) filter\n+ * the number of tests that were filtered out by the keyword filter\n+ * the number of skipped tests\n+\n+You may override the format of this line by setting the system property\n+`jtreg.stats.format` to a `printf`-like format string. The following format\n+specifiers are supported:\n+\n+* `%f`        &mdash; number of failed tests\n+* `%F`        &mdash; number of failed and error tests\n+* `%e`        &mdash; number of error tests\n+* `%e`        &mdash; number of error tests\n+* `%p`        &mdash; number of passed tests, including skipped tests\n+* `%P`        &mdash; number of passed tests, excluding skipped tests\n+* `%n`        &mdash; number of tests not run\n+* `%r`        &mdash; number of tests run\n+* `%s`        &mdash; number of skipped tests\n+* `%x`        &mdash; number of tests filtered out by the exclude list (problem list) filter\n+* `%i`        &mdash; number of tests filtered out by the keyword filter\n+* `%,`        &mdash; conditional comma\n+* `%<space>`  &mdash; conditional space\n+* `%%`        &mdash; %\n+* `%?X`       &mdash; prints given number if not zero, where X is one of f, F, e, p, P, s, x, i\n+* `%?{textX}` &mdash; prints text and given number if number is not zero, where X is one of f, F, e, p, s, x, i\n+\n+A _conditional_ comma or space is only generated if it is not at the beginning of the line\n+\n","filename":"src\/share\/doc\/javatest\/regtest\/faq.md","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -619,0 +619,6 @@\n+<p>Sometimes, after the main method has been invoked, the code may determine\n+that it cannot execute the test as required, and as such, the test should not\n+be considered to have either passed or failed. In this situation, the test may\n+throw an exception named `jtreg.SkippedException`, optionally providing\n+a detail string to indicate why the test has been skipped.\n+\n","filename":"src\/share\/doc\/javatest\/regtest\/tag-spec.html","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\t$(GREP) -s 'Test results: passed: 156; error: 84' $(@:%.ok=%\/log)  > \/dev\/null\n+\t$(GREP) -s 'Test results: passed: 157; error: 84' $(@:%.ok=%\/log)  > \/dev\/null\n","filename":"test\/basic\/Basic.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,2 +210,2 @@\n-        numPassed += 12; numFailed += 19; numError  += 12;\n-        numMain   += 43;\n+        numPassed += 13; numFailed += 19; numError  += 12;\n+        numMain   += 44;\n","filename":"test\/basic\/Basic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-REPORT_EXPECT_PASS = 93\n+REPORT_EXPECT_PASS = 94\n","filename":"test\/basic\/ReportOnlyTest.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jtreg;\n+\n+public class SkippedException extends Exception {\n+    public SkippedException(String msg) {\n+        super(msg);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/share\/basic\/lib\/jtreg\/SkippedException.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Passed: Skipped: jtreg.SkippedException: -skipped-\n+ * @library ..\/lib\n+ * @run main Skipped\n+ *\/\n+\n+import jtreg.SkippedException;\n+\n+public class Skipped {\n+    public static void main(String... args) throws Exception {\n+        throw new SkippedException(\"-skipped-\");\n+    }\n+}\n","filename":"test\/share\/basic\/main\/Skipped.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -28,0 +28,4 @@\n+\/**\n+ * This is a unit test for TestStats.java, setting up sample combinations\n+ * of reported values, then checking the output generated by various format strings.\n+ *\/\n@@ -52,0 +56,5 @@\n+        { \"-p:10\", \"-s:5\",\n+                \"--format:passed:%p failed:%f error:%e not run:%n skipped:%s\",\n+                \"passed:10 failed:0 error:0 not run:0 skipped:5\",\n+                \"--format:passed:%P failed:%f error:%e not run:%n skipped:%s\",\n+                \"passed:5 failed:0 error:0 not run:0 skipped:5\"},\n@@ -85,0 +94,2 @@\n+            } else if (arg.startsWith(\"-s:\")) {\n+                ts.skipped = Integer.valueOf(arg.substring(3));\n","filename":"test\/statsTests\/StatsTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+# unit test for format support in TestStats.java\n@@ -45,0 +46,1 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n@@ -59,1 +61,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=44 failed=32 excluded=0\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=45 failed=32 excluded=0\\s?$$' \\\n@@ -61,1 +63,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=44 failed=32 excluded=0\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt run=45 failed=32 excluded=0\\s?$$' \\\n@@ -67,0 +69,1 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n@@ -83,1 +86,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=13 failed=32 ignored=2\\s?$$' \\\n@@ -85,1 +88,1 @@\n-\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2\\s?$$' \\\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=13 failed=32 ignored=2\\s?$$' \\\n@@ -91,0 +94,51 @@\n+# system test for format support in TestStats.java: see -Djtreg.stats.format\n+# (includes skipped)\n+$(BUILDTESTDIR)\/StatsTxt.3.ok: \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKJAVA) \\\n+\t    -Djtreg.stats.format=\"TEST-STATS: StatsTxt passed=%P failed=%F ignored=%i skipped=%s\" \\\n+\t    -jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/report) \\\n+\t\t-ignore:quiet \\\n+\t\t$(TESTDIR)\/share\/basic\/main   \\\n+\t\t$(TESTDIR)\/share\/basic\/ignore   \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1  || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2 skipped=1\\s?$$' \\\n+\t\t$(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -E -s '^TEST-STATS: StatsTxt passed=12 failed=32 ignored=2 skipped=1\\s?$$' \\\n+\t\t$(@:%.ok=%\/report\/text\/stats.txt)  > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/StatsTxt.3.ok\n+\n+# system test for default format support in TestStats.java: no -Djtreg.stats.format\n+# (includes skipped)\n+$(BUILDTESTDIR)\/StatsTxt.4.ok: \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/javatest.jar \\\n+\t    $(JTREG_IMAGEDIR)\/lib\/jtreg.jar\n+\t$(RM) $(@:%.ok=%) ; $(MKDIR) $(@:%.ok=%)\n+\t$(JDKJAVA) \\\n+\t    -jar $(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t-agentvm \\\n+\t\t-w $(@:%.ok=%\/work) \\\n+\t\t-r $(@:%.ok=%\/report) \\\n+\t\t-ignore:quiet \\\n+\t\t$(TESTDIR)\/share\/basic\/main   \\\n+\t\t$(TESTDIR)\/share\/basic\/ignore   \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1  || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -E -s '^Test results: passed: 13; failed: 19; error: 13; ignored: 2; skipped: 1\\s?$$' \\\n+\t\t$(@:%.ok=%\/jt.log)  > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 13; failed: 19; error: 13; ignored: 2; skipped: 1\\s?$$' \\\n+\t\t$(@:%.ok=%\/report\/text\/stats.txt)  > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += $(BUILDTESTDIR)\/StatsTxt.4.ok\n+\n","filename":"test\/statsTests\/StatsTests.gmk","additions":58,"deletions":4,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-\t$(GREP) -E -s '^Test results: passed: 8; error: 1\\s?$$' $(@:%.ok=%\/rerun-all-executed.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 8; error: 1; excluded: 1\\s?$$' $(@:%.ok=%\/rerun-all-executed.log) > \/dev\/null\n@@ -139,1 +139,1 @@\n-\t$(GREP) -E -s '^Test results: passed: 8; error: 1\\s?$$' $(@:%.ok=%\/rerun-all.log) > \/dev\/null\n+\t$(GREP) -E -s '^Test results: passed: 8; error: 1; excluded: 1\\s?$$' $(@:%.ok=%\/rerun-all.log) > \/dev\/null\n","filename":"test\/statusFilter\/StatusFilterTest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}