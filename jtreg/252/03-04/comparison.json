{"files":[{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.plugin.jtreg.configuration.producers;\n-\n-import com.intellij.execution.Location;\n-import com.intellij.execution.actions.ConfigurationContext;\n-import com.intellij.execution.application.ApplicationConfigurationType;\n-import com.intellij.openapi.module.Module;\n-import com.intellij.openapi.util.Ref;\n-import com.intellij.psi.*;\n-import com.oracle.plugin.jtreg.configuration.JTRegConfiguration;\n-import com.oracle.plugin.jtreg.service.JTRegService;\n-import com.oracle.plugin.jtreg.util.JTRegUtils;\n-import org.jetbrains.annotations.NotNull;\n-\n-\/**\n- * This class generates a jtreg configuration from a given file selected in the IDE.\n- *\/\n-public class JTRegClassConfigurationProducer extends JTRegConfigurationProducer {\n-\n-    \/**\n-     * @see JTRegConfigurationProducer#isConfigurationFromContext\n-     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n-     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n-     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n-     *\/\n-    @Override\n-    protected boolean setupConfigurationFromContext(@NotNull JTRegConfiguration configuration,\n-                                                    @NotNull ConfigurationContext context,\n-                                                    @NotNull Ref<PsiElement> sourceElement) {\n-        Location<PsiElement> contextLocation = context.getLocation();\n-        assert contextLocation != null;\n-\n-        PsiElement element = contextLocation.getPsiElement();\n-\n-        if (!JTRegUtils.isRunnableByJTReg(element)) {\n-            return false;\n-        }\n-\n-        setupConfigurationModule(context, configuration);\n-        final Module originalModule = configuration.getConfigurationModule().getModule();\n-\n-        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n-        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n-        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n-        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n-\n-        if (element instanceof PsiDirectory runDir) {\n-            configuration.setPackage(runDir.getVirtualFile().getPath());\n-        } else {\n-            PsiFile runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n-            if (null != runFile && null != runFile.getVirtualFile()) {\n-                configuration.setRunClass(runFile.getVirtualFile().getPath());\n-            } else {\n-                return false;\n-            }\n-        }\n-\n-        configuration.restoreOriginalModule(originalModule);\n-\n-        preventRunPriorityLoss(element, sourceElement);\n-\n-        element = findExactRunElement(element);\n-\n-        configuration.setQuery(getQuery(element));\n-        configuration.setName(nameForElement(element));\n-\n-        initBeforeTaskActions(configuration);\n-        return true;\n-    }\n-\n-    \/**\n-     * Ensures that the Application, TestNG, or JUnit run configuration does not receive a higher priority.\n-     * This applies when the user attempts to run a file containing a single class for TestNG\/JUnit,\n-     * or a \"main\" method for the Application run configuration.\n-     * <p>\n-     * The class {@link com.intellij.execution.actions.PreferredProducerFind} sorts the applicable runners using\n-     * {@link com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR},\n-     * removing more general ones and retaining more specific or equal configurations.\n-     * <p>\n-     * When the user tries to run a test on a file, and another type of Run Configuration can intercept the execution,\n-     * this method sets the {@code PsiClass} element in the {@code sourceElement} reference to ensure priority is retained.\n-     *\n-     * @param element       current PSI element\n-     * @param sourceElement a reference to the source element for the run configuration\n-     *                      (by default contains the element at caret,\n-     *                      can be updated by the producer to point to a higher-level element in the tree).\n-     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n-     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n-     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n-     * @see com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR\n-     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n-     *\/\n-    private void preventRunPriorityLoss(PsiElement element, @NotNull Ref<PsiElement> sourceElement) {\n-        if (element instanceof PsiClassOwner psiClassOwner) {\n-            PsiClass[] psiClasses = psiClassOwner.getClasses();\n-            if (1 == psiClasses.length) {\n-                sourceElement.set(psiClasses[0]); \/\/ for Application\/TestNG\/JUnit\n-            } else {\n-                PsiClass mainClass = ApplicationConfigurationType.getMainClass(element);\n-                if (null != mainClass) {\n-                    sourceElement.set(mainClass); \/\/ for Application\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Generates a name for the run test configuration.\n-     *\n-     * @param element the current PSI element.\n-     * @return One of the following: {\"ClassName\", \"ClassName::TestMethodName\"}, or the default: \"FileName.java\".\n-     * @see #findExactRunElement(PsiElement)\n-     *\/\n-    private static String nameForElement(PsiElement element) {\n-        if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiMethod method) {\n-            String className = ((PsiClass) method.getParent()).getQualifiedName();\n-            return className + \"::\" + method.getName();\n-        } else if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiClass cls) {\n-            return cls.getQualifiedName();\n-        } else {\n-            return element.getContainingFile().getName();\n-        }\n-    }\n-}\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegClassConfigurationProducer.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -29,1 +29,0 @@\n-import com.intellij.execution.JavaExecutionUtil;\n@@ -35,0 +34,1 @@\n+import com.intellij.execution.application.ApplicationConfigurationType;\n@@ -37,0 +37,1 @@\n+import com.intellij.execution.junit.JUnitUtil;\n@@ -41,0 +42,2 @@\n+import com.intellij.openapi.util.Comparing;\n+import com.intellij.openapi.util.Ref;\n@@ -48,0 +51,1 @@\n+import com.theoryinpractice.testng.util.TestNGUtil;\n@@ -49,0 +53,1 @@\n+import org.jetbrains.annotations.Nullable;\n@@ -57,1 +62,1 @@\n- * This class serves as a common superclass for both file and folder-based configuration producers.\n+ * This class is used to generate a run configuration for JTReg for the file or directory selected in the IDE.\n@@ -59,1 +64,1 @@\n-public abstract class JTRegConfigurationProducer extends JavaRunConfigurationProducerBase<JTRegConfiguration> implements Cloneable {\n+public class JTRegConfigurationProducer extends JavaRunConfigurationProducerBase<JTRegConfiguration> {\n@@ -66,1 +71,4 @@\n-     * @see JTRegClassConfigurationProducer#setupConfigurationFromContext\n+     * @see #isConfigurationFromContext\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n@@ -69,2 +77,7 @@\n-    public boolean isConfigurationFromContext(@NotNull JTRegConfiguration unitConfiguration,\n-                                              @NotNull ConfigurationContext context) {\n+    protected boolean setupConfigurationFromContext(@NotNull JTRegConfiguration configuration,\n+                                                    @NotNull ConfigurationContext context,\n+                                                    @NotNull Ref<PsiElement> sourceElement) {\n+        if (context.containsMultipleSelection()) {\n+            return false;\n+        }\n+\n@@ -72,1 +85,1 @@\n-        if (contextLocation == null) {\n+        if (null == contextLocation) {\n@@ -76,2 +89,3 @@\n-        Location<?> location = JavaExecutionUtil.stepIntoSingleClass(contextLocation);\n-        if (location == null) {\n+        PsiElement element = contextLocation.getPsiElement();\n+\n+        if (!JTRegUtils.isRunnableByJTReg(element)) {\n@@ -81,2 +95,106 @@\n-        PsiElement element = location.getPsiElement();\n-        element = findExactRunElement(element);\n+        setupConfigurationModule(context, configuration);\n+\n+        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n+        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n+        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n+        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n+\n+        if (element instanceof PsiDirectory runDir) {\n+            configuration.setPackage(runDir.getVirtualFile().getPath());\n+        } else {\n+            PsiFile runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+            if (null != runFile && null != runFile.getVirtualFile()) {\n+                configuration.setRunClass(runFile.getVirtualFile().getPath());\n+            } else {\n+                return false;\n+            }\n+\n+            preventRunPriorityLoss(element, sourceElement);\n+\n+            element = findExactRunElement(element);\n+\n+            configuration.setQuery(getQuery(element));\n+        }\n+        configuration.setName(nameForElement(element));\n+\n+        initBeforeTaskActions(configuration);\n+        return true;\n+    }\n+\n+    \/**\n+     * Ensures that the Application, TestNG, or JUnit run configuration does not receive a higher priority.\n+     * This applies when the user attempts to run a file containing a single class for TestNG\/JUnit,\n+     * or a \"main\" method for the Application run configuration.\n+     * <p>\n+     * The class {@link com.intellij.execution.actions.PreferredProducerFind} sorts the applicable runners using\n+     * {@link com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR},\n+     * removing more general ones and retaining more specific or equal configurations.\n+     * <p>\n+     * When the user tries to run a test on a file, and another type of Run Configuration can intercept the execution,\n+     * this method sets the {@code PsiClass} element in the {@code sourceElement} reference to ensure priority is retained.\n+     *\n+     * @param element       current PSI element\n+     * @param sourceElement a reference to the source element for the run configuration\n+     *                      (by default contains the element at caret,\n+     *                      can be updated by the producer to point to a higher-level element in the tree).\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n+     * @see com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n+     *\/\n+    private void preventRunPriorityLoss(PsiElement element, @NotNull Ref<PsiElement> sourceElement) {\n+        if (element instanceof PsiClassOwner psiClassOwner) {\n+            PsiClass[] psiClasses = psiClassOwner.getClasses();\n+            if (1 == psiClasses.length) {\n+                sourceElement.set(psiClasses[0]); \/\/ for Application\/TestNG\/JUnit\n+            } else {\n+                PsiClass mainClass = ApplicationConfigurationType.getMainClass(element);\n+                if (null != mainClass) {\n+                    sourceElement.set(mainClass); \/\/ for Application\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Generates a name for the run test configuration.\n+     *\n+     * @param element the current PSI element.\n+     * @return One of the following: {\"ClassName\", \"ClassName::TestMethodName\"}, or the default \"FileName.java\".\n+     * @see #findExactRunElement(PsiElement)\n+     *\/\n+    @Nullable(\"when null, IDEA automatically assigns the default name: 'Unnamed'\")\n+    private String nameForElement(@NotNull PsiElement element) {\n+        switch (element) {\n+            case PsiFileSystemItem psiFileOrDir -> {\n+                return psiFileOrDir.getName();\n+            }\n+            case PsiClass psiClass -> {\n+                return psiClass.getQualifiedName();\n+            }\n+            case PsiMethod psiMethod -> {\n+                String className = ((PsiClass) psiMethod.getParent()).getQualifiedName();\n+                return className + \"::\" + psiMethod.getName();\n+            }\n+            default -> {\n+                PsiFile psiFile = element.getContainingFile();\n+                return null != psiFile ? psiFile.getName() : null;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * @see #setupConfigurationFromContext\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#isConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#isConfigurationFromContext\n+     *\/\n+    @Override\n+    public boolean isConfigurationFromContext(@NotNull JTRegConfiguration unitConfiguration,\n+                                              @NotNull ConfigurationContext context) {\n+        Location<PsiElement> contextLocation = context.getLocation();\n+        if (contextLocation == null) {\n+            return false;\n+        }\n+\n+        PsiElement element = findExactRunElement(contextLocation.getPsiElement());\n@@ -92,3 +210,3 @@\n-        return isEqualNullAsEmpty(contextFilePath, unitConfiguration.getRunClass())\n-                && isEqualNullAsEmpty(contextDirPath, unitConfiguration.getPackage())\n-                && isEqualNullAsEmpty(contextQuery, unitConfiguration.getQuery());\n+        return Comparing.strEqual(contextFilePath, unitConfiguration.getRunClass())\n+                && Comparing.strEqual(contextDirPath, unitConfiguration.getPackage())\n+                && Comparing.strEqual(contextQuery, unitConfiguration.getQuery());\n@@ -113,1 +231,1 @@\n-     * @see JTRegClassConfigurationProducer#nameForElement(PsiElement)\n+     * @see #nameForElement(PsiElement)\n@@ -117,1 +235,1 @@\n-    protected PsiElement findExactRunElement(@NotNull final PsiElement element) {\n+    private PsiElement findExactRunElement(@NotNull PsiElement element) {\n@@ -120,1 +238,1 @@\n-            if ((e instanceof PsiFile) || (e instanceof PsiDirectory)) {\n+            if (e instanceof PsiFileSystemItem) {\n@@ -128,8 +246,3 @@\n-                final PsiElement identifyingElement = ((PsiNameIdentifierOwner) e).getIdentifyingElement();\n-                if (null != identifyingElement) { \/\/ null for name of the non-test inner class\n-                    if (null == retval) {\n-                        \/\/ When found, check the rest of the hierarchy up to the class for runnability\n-                        retval = identifyingElement;\n-                    }\n-                } else {\n-                    retval = null;\n+                if (null == retval) {\n+                    \/\/ When found, check the rest of the hierarchy up to the class for runnability\n+                    retval = e;\n@@ -147,7 +260,4 @@\n-        boolean isJUnit = JTRegUtils.isJUnitTestData(element.getContainingFile());\n-        boolean isTestNG = JTRegUtils.isTestNGTestData(element.getContainingFile());\n-        if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiMethod method) {\n-            if (isJUnit) {\n-                return \"junit-select:method:\" + getJUnitMethodQuery(method);\n-            } else if (isTestNG) {\n+        if (element instanceof PsiMethod psiMethod) {\n+            if (JUnitUtil.isTestAnnotated(psiMethod)) {\n+                return \"junit-select:method:\" + getJUnitMethodQuery(psiMethod);\n+            } else if (TestNGUtil.hasTest(psiMethod)) {\n@@ -155,1 +265,1 @@\n-                return method.getName();\n+                return psiMethod.getName();\n@@ -157,3 +267,2 @@\n-        } else if (isJUnit && element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiClass cls) {\n-            return \"junit-select:class:\" + binaryNameFor(cls);\n+        } else if (element instanceof PsiClass psiClass && JUnitUtil.isTestClass(psiClass)) {\n+            return \"junit-select:class:\" + binaryNameFor(psiClass);\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegConfigurationProducer.java","additions":145,"deletions":36,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.plugin.jtreg.configuration.producers;\n-\n-import com.intellij.execution.Location;\n-import com.intellij.execution.actions.ConfigurationContext;\n-import com.intellij.lang.ant.config.AntConfiguration;\n-import com.intellij.openapi.module.Module;\n-import com.intellij.openapi.util.Ref;\n-import com.intellij.openapi.vfs.VirtualFile;\n-import com.intellij.psi.PsiDirectory;\n-import com.intellij.psi.PsiElement;\n-import com.oracle.plugin.jtreg.configuration.JTRegConfiguration;\n-import com.oracle.plugin.jtreg.service.JTRegService;\n-import com.oracle.plugin.jtreg.util.JTRegUtils;\n-\n-\/**\n- * This class generates a jtreg configuration from a given folder selected in the IDE.\n- *\/\n-public class JTRegDirectoryConfigurationProducer extends JTRegConfigurationProducer {\n-\n-    @Override\n-    protected boolean setupConfigurationFromContext(JTRegConfiguration configuration,\n-                                                    ConfigurationContext context,\n-                                                    Ref<PsiElement> ref) {\n-        final Location contextLocation = context.getLocation();\n-        assert contextLocation != null;\n-        final PsiElement element = contextLocation.getPsiElement();\n-\n-        if (!(element instanceof PsiDirectory)) {\n-            return false;\n-        }\n-\n-        final PsiDirectory dir = (PsiDirectory) element;\n-        final VirtualFile virtualFile = dir.getVirtualFile();\n-        if (!JTRegUtils.isInJTRegRoot(dir)) {\n-            return false;\n-        }\n-        setupConfigurationModule(context, configuration);\n-        final Module originalModule = configuration.getConfigurationModule().getModule();\n-        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n-        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n-        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n-        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n-        configuration.setPackage(virtualFile.getPath());\n-        configuration.restoreOriginalModule(originalModule);\n-        configuration.setName(dir.getName());\n-        initBeforeTaskActions(configuration);\n-        return true;\n-    }\n-}\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegDirectoryConfigurationProducer.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -37,1 +37,0 @@\n-import com.intellij.openapi.util.text.StringUtilRt;\n@@ -62,9 +61,2 @@\n-     * Checks if two strings are equal to each other,\n-     * taking into account {@code null} == {@code empty string} value.\n-     *\n-     * @return {@code true} if any of the following is {@code true}:\n-     * <ul>\n-     *     <li>Both strings are {@code null}.<\/li>\n-     *     <li>One string is {@code null} and the other is empty.<\/li>\n-     *     <li>The strings are equal.<\/li>\n-     * <\/ul>\n+     * @param element PSI element\n+     * @return Whether this element is a class or method and corresponds to any supported third-party test framework.\n@@ -72,4 +64,0 @@\n-    public static boolean isEqualNullAsEmpty(String a, String b) {\n-        return StringUtilRt.notNullize(a).equals(StringUtilRt.notNullize(b));\n-    }\n-\n@@ -350,1 +338,1 @@\n-        return isInJTRegRoot(runDir) && isJTRegTestData(runFile);\n+        return isInJTRegRoot(runDir) && ((element instanceof PsiDirectory) || isJTRegTestData(runFile));\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/util\/JTRegUtils.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,3 +41,1 @@\n-        <runConfigurationProducer implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegClassConfigurationProducer\"\/>\n-        <runConfigurationProducer\n-                implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegDirectoryConfigurationProducer\"\/>\n+        <runConfigurationProducer implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegConfigurationProducer\"\/>\n","filename":"plugins\/idea\/src\/main\/resources\/META-INF\/plugin.xml","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}