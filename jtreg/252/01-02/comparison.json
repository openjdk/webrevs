{"files":[{"patch":"@@ -92,3 +92,3 @@\n-        return NOT_NULLIZED_STRING_EQUALS.test(contextFilePath, unitConfiguration.getRunClass())\n-                && NOT_NULLIZED_STRING_EQUALS.test(contextDirPath, unitConfiguration.getPackage())\n-                && NOT_NULLIZED_STRING_EQUALS.test(contextQuery, unitConfiguration.getQuery());\n+        return isEqualNullAsEmpty(contextFilePath, unitConfiguration.getRunClass())\n+                && isEqualNullAsEmpty(contextDirPath, unitConfiguration.getPackage())\n+                && isEqualNullAsEmpty(contextQuery, unitConfiguration.getQuery());\n@@ -120,1 +120,1 @@\n-            if (IS_FILE_OR_DIR_ELEMENT.test(e)) {\n+            if ((e instanceof PsiFile) || (e instanceof PsiDirectory)) {\n@@ -127,1 +127,1 @@\n-            if (IS_THIRD_PARTY_TEST_ELEMENT.test(e)) {\n+            if (isThirdPartyTestElement(e)) {\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegConfigurationProducer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import java.util.function.BiPredicate;\n-import java.util.function.Predicate;\n@@ -64,2 +62,2 @@\n-     * A predicate that checks if two strings are either both empty or both null,\n-     * or if they are equal to each other, taking into account null == empty string value.\n+     * Checks if two strings are equal to each other,\n+     * taking into account {@code null} == {@code empty string} value.\n@@ -67,1 +65,1 @@\n-     * <p>This predicate will return {@code true} if:\n+     * @return {@code true} if any of the following is {@code true}:\n@@ -69,3 +67,3 @@\n-     *     <li>Both strings are empty, or<\/li>\n-     *     <li>Both strings are {@code null}, or<\/li>\n-     *     <li>The strings are equal using {@link Objects#equals(Object, Object)}.<\/li>\n+     *     <li>Both strings are {@code null}.<\/li>\n+     *     <li>One string is {@code null} and the other is empty.<\/li>\n+     *     <li>The strings are equal.<\/li>\n@@ -74,1 +72,1 @@\n-    public static final BiPredicate<String, String> NOT_NULLIZED_STRING_EQUALS = (a, b) -> { \/\/\n+    public static boolean isEqualNullAsEmpty(String a, String b) {\n@@ -76,15 +74,1 @@\n-    };\n-\n-    public static final Predicate<PsiMethod> IS_TESTNG_TEST_METHOD = TestNGUtil::hasTest;\n-    public static final Predicate<PsiClass> IS_TESTNG_TEST_CLASS = TestNGUtil::isTestNGClass;\n-\n-    public static final Predicate<PsiMethod> IS_JUNIT_TEST_METHOD = JUnitUtil::isTestAnnotated;\n-    public static final Predicate<PsiClass> IS_JUNIT_TEST_CLASS = JUnitUtil::isTestClass;\n-\n-    public static final Predicate<PsiMethod> IS_THIRD_PARTY_TEST_METHOD = IS_TESTNG_TEST_METHOD.or(IS_JUNIT_TEST_METHOD);\n-    public static final Predicate<PsiClass> IS_THIRD_PARTY_TEST_CLASS = IS_TESTNG_TEST_CLASS.or(IS_JUNIT_TEST_CLASS);\n-\n-    public static final Predicate<PsiElement> IS_THIRD_PARTY_TEST_ELEMENT = e -> { \/\/\n-        return ((e instanceof PsiMethod psiMethod) && IS_THIRD_PARTY_TEST_METHOD.test(psiMethod))\n-                || ((e instanceof PsiClass psiClass) && IS_THIRD_PARTY_TEST_CLASS.test(psiClass));\n-    };\n+    }\n@@ -92,3 +76,6 @@\n-    public static final Predicate<PsiElement> IS_DIR_ELEMENT = PsiDirectory.class::isInstance;\n-    public static final Predicate<PsiElement> IS_FILE_ELEMENT = PsiFile.class::isInstance;\n-    public static final Predicate<PsiElement> IS_FILE_OR_DIR_ELEMENT = IS_FILE_ELEMENT.or(IS_DIR_ELEMENT);\n+    public static boolean isThirdPartyTestElement(PsiElement element) {\n+        return ((element instanceof PsiMethod psiMethod)\n+                && (TestNGUtil.hasTest(psiMethod) || JUnitUtil.isTestAnnotated(psiMethod)))\n+                || ((element instanceof PsiClass psiClass)\n+                && (TestNGUtil.isTestNGClass(psiClass) || JUnitUtil.isTestClass(psiClass)));\n+    }\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/util\/JTRegUtils.java","additions":14,"deletions":27,"binary":false,"changes":41,"status":"modified"}]}