{"files":[{"patch":"@@ -33,0 +33,1 @@\n+        bundledPlugins('com.intellij.java', 'JUnit')\n","filename":"plugins\/idea\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.plugin.jtreg.configuration.producers;\n-\n-import com.intellij.execution.Location;\n-import com.intellij.execution.actions.ConfigurationContext;\n-import com.intellij.openapi.module.Module;\n-import com.intellij.openapi.util.Ref;\n-import com.intellij.psi.*;\n-import com.oracle.plugin.jtreg.configuration.JTRegConfiguration;\n-import com.oracle.plugin.jtreg.service.JTRegService;\n-import com.oracle.plugin.jtreg.util.JTRegUtils;\n-\n-\/**\n- * This class generates a jtreg configuration from a given file selected in the IDE.\n- *\/\n-public class JTRegClassConfigurationProducer extends JTRegConfigurationProducer {\n-\n-    @Override\n-    protected boolean setupConfigurationFromContext(JTRegConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) {\n-        final Location<PsiElement> contextLocation = context.getLocation();\n-        assert contextLocation != null;\n-        final PsiElement element = contextLocation.getPsiElement();\n-\n-        PsiFile psiFile = contextLocation.getPsiElement().getContainingFile();\n-        if (psiFile == null ||\n-                !JTRegUtils.isInJTRegRoot(psiFile.getContainingDirectory()) ||\n-                (!JTRegUtils.isJTRegTestData(psiFile) &&\n-                 !JTRegUtils.isTestNGTestData(psiFile))) return false;\n-        setupConfigurationModule(context, configuration);\n-        final Module originalModule = configuration.getConfigurationModule().getModule();\n-        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n-        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n-        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n-        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n-        configuration.setRunClass(psiFile.getVirtualFile().getPath());\n-        configuration.restoreOriginalModule(originalModule);\n-\n-        configuration.setQuery(getQuery(element));\n-        configuration.setName(nameForElement(element));\n-\n-        initBeforeTaskActions(configuration);\n-        return true;\n-    }\n-\n-    private static String nameForElement(PsiElement element) {\n-        if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiMethod method) {\n-            String className = ((PsiClass) method.getParent()).getQualifiedName();\n-            return className + \"::\" + method.getName();\n-        } else if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiClass cls) {\n-            return cls.getQualifiedName();\n-        } else {\n-            return element.getContainingFile().getName();\n-        }\n-    }\n-}\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegClassConfigurationProducer.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -29,1 +29,0 @@\n-import com.intellij.execution.JavaExecutionUtil;\n@@ -35,0 +34,4 @@\n+import com.intellij.execution.application.ApplicationConfigurationType;\n+import com.intellij.execution.configurations.RunConfiguration;\n+import com.intellij.execution.junit.JUnitConfiguration;\n+import com.intellij.execution.junit.JUnitUtil;\n@@ -39,0 +42,3 @@\n+import com.intellij.openapi.util.Comparing;\n+import com.intellij.openapi.util.Ref;\n+import com.intellij.openapi.vfs.VirtualFile;\n@@ -45,0 +51,3 @@\n+import com.theoryinpractice.testng.util.TestNGUtil;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n@@ -50,0 +59,2 @@\n+import static com.oracle.plugin.jtreg.util.JTRegUtils.*;\n+\n@@ -51,1 +62,1 @@\n- * This class serves as a common superclass for both file and folder-based configuration producers.\n+ * This class is used to generate a run configuration for JTReg for the file or directory selected in the IDE.\n@@ -53,1 +64,1 @@\n-public abstract class JTRegConfigurationProducer extends JavaRunConfigurationProducerBase<JTRegConfiguration> implements Cloneable {\n+public class JTRegConfigurationProducer extends JavaRunConfigurationProducerBase<JTRegConfiguration> {\n@@ -59,0 +70,6 @@\n+    \/**\n+     * @see #isConfigurationFromContext\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n+     *\/\n@@ -60,3 +77,9 @@\n-    public boolean isConfigurationFromContext(JTRegConfiguration unitConfiguration, ConfigurationContext context) {\n-        final Location contextLocation = context.getLocation();\n-        if (contextLocation == null) {\n+    protected boolean setupConfigurationFromContext(@NotNull JTRegConfiguration configuration,\n+                                                    @NotNull ConfigurationContext context,\n+                                                    @NotNull Ref<PsiElement> sourceElement) {\n+        if (context.containsMultipleSelection()) {\n+            return false;\n+        }\n+\n+        Location<PsiElement> contextLocation = context.getLocation();\n+        if (null == contextLocation) {\n@@ -66,2 +89,3 @@\n-        Location location = JavaExecutionUtil.stepIntoSingleClass(contextLocation);\n-        if (location == null) {\n+        PsiElement element = contextLocation.getPsiElement();\n+\n+        if (!JTRegUtils.isRunnableByJTReg(element)) {\n@@ -71,7 +95,27 @@\n-        PsiElement element = location.getPsiElement();\n-        String query = getQuery(element);\n-        PsiFile contextFile = element.getContainingFile();\n-        final String configFile = unitConfiguration.getRunClass();\n-        return configFile != null && contextFile != null && contextFile.getVirtualFile() != null &&\n-                configFile.equals(contextFile.getVirtualFile().getPath())\n-                && query.equals(unitConfiguration.getQuery());\n+        setupConfigurationModule(context, configuration);\n+\n+        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n+        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n+        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n+        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n+\n+        if (element instanceof PsiDirectory runDir) {\n+            configuration.setPackage(runDir.getVirtualFile().getPath());\n+        } else {\n+            PsiFile runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+            if (null != runFile && null != runFile.getVirtualFile()) {\n+                configuration.setRunClass(runFile.getVirtualFile().getPath());\n+            } else {\n+                return false;\n+            }\n+\n+            preventRunPriorityLoss(element, sourceElement);\n+\n+            element = findExactRunElement(element);\n+\n+            configuration.setQuery(getQuery(element));\n+        }\n+        configuration.setName(nameForElement(element));\n+\n+        initBeforeTaskActions(configuration);\n+        return true;\n@@ -80,0 +124,135 @@\n+    \/**\n+     * Ensures that the Application, TestNG, or JUnit run configuration does not receive a higher priority.\n+     * This applies when the user attempts to run a file containing a single class for TestNG\/JUnit,\n+     * or a \"main\" method for the Application run configuration.\n+     * <p>\n+     * The class {@link com.intellij.execution.actions.PreferredProducerFind} sorts the applicable runners using\n+     * {@link com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR},\n+     * removing more general ones and retaining more specific or equal configurations.\n+     * <p>\n+     * When the user tries to run a test on a file, and another type of Run Configuration can intercept the execution,\n+     * this method sets the {@code PsiClass} element in the {@code sourceElement} reference to ensure priority is retained.\n+     *\n+     * @param element       current PSI element\n+     * @param sourceElement a reference to the source element for the run configuration\n+     *                      (by default contains the element at caret,\n+     *                      can be updated by the producer to point to a higher-level element in the tree).\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n+     * @see com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n+     *\/\n+    private void preventRunPriorityLoss(PsiElement element, @NotNull Ref<PsiElement> sourceElement) {\n+        if (element instanceof PsiClassOwner psiClassOwner) {\n+            PsiClass[] psiClasses = psiClassOwner.getClasses();\n+            if (1 == psiClasses.length) {\n+                sourceElement.set(psiClasses[0]); \/\/ for Application\/TestNG\/JUnit\n+            } else {\n+                PsiClass mainClass = ApplicationConfigurationType.getMainClass(element);\n+                if (null != mainClass) {\n+                    sourceElement.set(mainClass); \/\/ for Application\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Generates a name for the run test configuration.\n+     *\n+     * @param element the current PSI element.\n+     * @return One of the following: {\"ClassName\", \"ClassName::TestMethodName\"}, or the default \"FileName.java\".\n+     * @see #findExactRunElement(PsiElement)\n+     *\/\n+    @Nullable(\"when null, IDEA automatically assigns the default name: 'Unnamed'\")\n+    private String nameForElement(@NotNull PsiElement element) {\n+        switch (element) {\n+            case PsiFileSystemItem psiFileOrDir -> {\n+                return psiFileOrDir.getName();\n+            }\n+            case PsiClass psiClass -> {\n+                return psiClass.getQualifiedName();\n+            }\n+            case PsiMethod psiMethod -> {\n+                String className = ((PsiClass) psiMethod.getParent()).getQualifiedName();\n+                return className + \"::\" + psiMethod.getName();\n+            }\n+            default -> {\n+                PsiFile psiFile = element.getContainingFile();\n+                return null != psiFile ? psiFile.getName() : null;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * @see #setupConfigurationFromContext\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#isConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#isConfigurationFromContext\n+     *\/\n+    @Override\n+    public boolean isConfigurationFromContext(@NotNull JTRegConfiguration unitConfiguration,\n+                                              @NotNull ConfigurationContext context) {\n+        Location<PsiElement> contextLocation = context.getLocation();\n+        if (contextLocation == null) {\n+            return false;\n+        }\n+\n+        PsiElement element = findExactRunElement(contextLocation.getPsiElement());\n+\n+        String contextQuery = getQuery(element);\n+\n+        PsiFile contextFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+        VirtualFile contextVirtualFile = null != contextFile ? contextFile.getVirtualFile() : null;\n+        String contextFilePath = null != contextVirtualFile ? contextVirtualFile.getPath() : null;\n+\n+        String contextDirPath = (element instanceof PsiDirectory d) ? d.getVirtualFile().getPath() : null;\n+\n+        return Comparing.strEqual(contextFilePath, unitConfiguration.getRunClass())\n+                && Comparing.strEqual(contextDirPath, unitConfiguration.getPackage())\n+                && Comparing.strEqual(contextQuery, unitConfiguration.getQuery());\n+    }\n+\n+    \/**\n+     * Finds the nearest test element among the parents of the given element:\n+     * <ol>\n+     *     <li>Test method<\/li>\n+     *     <li>Test class<\/li>\n+     *     <li>File<\/li>\n+     * <\/ol>\n+     * If no test element is found among the parents, returns the given element.\n+     * <p>\n+     * An element is considered test-runnable only if all its parent elements,\n+     * up to the containing file, are also test-runnable.\n+     * <p>\n+     * A directory is also considered a test-runnable element.\n+     *\n+     * @param element The element for the run configuration (by default, contains the element at the caret).\n+     * @return The nearest test element found, or {@code element} if no test element is found among the parents.\n+     * @see #nameForElement(PsiElement)\n+     * @see #getQuery(PsiElement)\n+     *\/\n+    @NotNull\n+    private PsiElement findExactRunElement(@NotNull PsiElement element) {\n+        PsiElement retval = null;\n+        for (PsiElement e = element; null != e; e = e.getParent()) {\n+            if (e instanceof PsiFileSystemItem) {\n+                if (null == retval) {\n+                    retval = e;\n+                }\n+                break;\n+            }\n+\n+            if (isThirdPartyTestElement(e)) {\n+                if (null == retval) {\n+                    \/\/ When found, check the rest of the hierarchy up to the class for runnability\n+                    retval = e;\n+                }\n+            } else {\n+                retval = null;\n+            }\n+        }\n+\n+        return null != retval ? retval : element;\n+    }\n+\n+    @NotNull\n@@ -81,7 +260,4 @@\n-        boolean isJUnit = JTRegUtils.isJUnitTestData(element.getContainingFile());\n-        boolean isTestNG = JTRegUtils.isTestNGTestData(element.getContainingFile());\n-        if (element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiMethod method) {\n-            if (isJUnit) {\n-                return \"junit-select:method:\" + getJUnitMethodQuery(method);\n-            } else if (isTestNG) {\n+        if (element instanceof PsiMethod psiMethod) {\n+            if (JUnitUtil.isTestAnnotated(psiMethod)) {\n+                return \"junit-select:method:\" + getJUnitMethodQuery(psiMethod);\n+            } else if (TestNGUtil.hasTest(psiMethod)) {\n@@ -89,1 +265,1 @@\n-                return method.getName();\n+                return psiMethod.getName();\n@@ -91,3 +267,2 @@\n-        } else if (isJUnit && element instanceof PsiIdentifier\n-                && element.getParent() instanceof PsiClass cls) {\n-            return \"junit-select:class:\" + binaryNameFor(cls);\n+        } else if (element instanceof PsiClass psiClass && JUnitUtil.isTestClass(psiClass)) {\n+            return \"junit-select:class:\" + binaryNameFor(psiClass);\n@@ -161,0 +336,4 @@\n+    \/**\n+     * @see ConfigurationFromContext#COMPARATOR\n+     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n+     *\/\n@@ -162,7 +341,6 @@\n-    public boolean shouldReplace(ConfigurationFromContext self, ConfigurationFromContext other) {\n-        if (other.getConfiguration() instanceof TestNGConfiguration) {\n-            return true;\n-        } else if (other.getConfiguration() instanceof ApplicationConfiguration) {\n-            return true;\n-        }\n-        return super.shouldReplace(self, other);\n+    public boolean shouldReplace(@NotNull ConfigurationFromContext self, @NotNull ConfigurationFromContext other) {\n+        RunConfiguration otherCnf = other.getConfiguration();\n+        return otherCnf instanceof ApplicationConfiguration\n+                || otherCnf instanceof TestNGConfiguration\n+                || otherCnf instanceof JUnitConfiguration\n+                || super.shouldReplace(self, other);\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegConfigurationProducer.java","additions":211,"deletions":33,"binary":false,"changes":244,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.plugin.jtreg.configuration.producers;\n-\n-import com.intellij.execution.Location;\n-import com.intellij.execution.actions.ConfigurationContext;\n-import com.intellij.lang.ant.config.AntConfiguration;\n-import com.intellij.openapi.module.Module;\n-import com.intellij.openapi.util.Ref;\n-import com.intellij.openapi.vfs.VirtualFile;\n-import com.intellij.psi.PsiDirectory;\n-import com.intellij.psi.PsiElement;\n-import com.oracle.plugin.jtreg.configuration.JTRegConfiguration;\n-import com.oracle.plugin.jtreg.service.JTRegService;\n-import com.oracle.plugin.jtreg.util.JTRegUtils;\n-\n-\/**\n- * This class generates a jtreg configuration from a given folder selected in the IDE.\n- *\/\n-public class JTRegDirectoryConfigurationProducer extends JTRegConfigurationProducer {\n-\n-    @Override\n-    protected boolean setupConfigurationFromContext(JTRegConfiguration configuration,\n-                                                    ConfigurationContext context,\n-                                                    Ref<PsiElement> ref) {\n-        final Location contextLocation = context.getLocation();\n-        assert contextLocation != null;\n-        final PsiElement element = contextLocation.getPsiElement();\n-\n-        if (!(element instanceof PsiDirectory)) {\n-            return false;\n-        }\n-\n-        final PsiDirectory dir = (PsiDirectory) element;\n-        final VirtualFile virtualFile = dir.getVirtualFile();\n-        if (!JTRegUtils.isInJTRegRoot(dir)) {\n-            return false;\n-        }\n-        setupConfigurationModule(context, configuration);\n-        final Module originalModule = configuration.getConfigurationModule().getModule();\n-        configuration.setAlternativeJrePathEnabled(JTRegService.getInstance(configuration.getProject()).isAlternativeJrePathEnabled());\n-        configuration.setAlternativeJrePath(JTRegService.getInstance(configuration.getProject()).getAlternativeJrePath());\n-        configuration.setProgramParameters(JTRegService.getInstance(configuration.getProject()).getJTregOptions());\n-        configuration.setWorkingDirectory(JTRegService.getInstance(configuration.getProject()).getWorkDir());\n-        configuration.setPackage(virtualFile.getPath());\n-        configuration.restoreOriginalModule(originalModule);\n-        configuration.setName(dir.getName());\n-        initBeforeTaskActions(configuration);\n-        return true;\n-    }\n-}\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegDirectoryConfigurationProducer.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.intellij.execution.junit.JUnitUtil;\n@@ -41,0 +42,2 @@\n+import com.theoryinpractice.testng.util.TestNGUtil;\n+import org.jetbrains.annotations.NotNull;\n@@ -57,0 +60,11 @@\n+    \/**\n+     * @param element PSI element\n+     * @return Whether this element is a class or method and corresponds to any supported third-party test framework.\n+     *\/\n+    public static boolean isThirdPartyTestElement(PsiElement element) {\n+        return ((element instanceof PsiMethod psiMethod)\n+                && (TestNGUtil.hasTest(psiMethod) || JUnitUtil.isTestAnnotated(psiMethod)))\n+                || ((element instanceof PsiClass psiClass)\n+                && (TestNGUtil.isTestNGClass(psiClass) || JUnitUtil.isTestClass(psiClass)));\n+    }\n+\n@@ -61,3 +75,1 @@\n-        return dir != null ?\n-                isInJTRegRoot(dir.getVirtualFile()) :\n-                false;\n+        return null != dir && isInJTRegRoot(dir.getVirtualFile());\n@@ -297,0 +309,32 @@\n+    \/**\n+     * Determines whether the given element is a valid test-related element.\n+     * The element must be one of the following:\n+     * <ul>\n+     *     <li>An element inside a test file<\/li>\n+     *     <li>A test file<\/li>\n+     *     <li>A test directory<\/li>\n+     * <\/ul>\n+     *\n+     * <p>Additionally, the following conditions must be met:<\/p>\n+     * <ul>\n+     *     <li>A test file must contain the {@code @test} comment tag.<\/li>\n+     *     <li>A test file must be located inside a test directory.<\/li>\n+     *     <li>A test directory must have a parent directory that contains a {@code TEST.ROOT} file.<\/li>\n+     * <\/ul>\n+     *\n+     * @param element The element for the run configuration (by default, contains the element at the caret).\n+     * @return {@code true} if the element is a valid test-related element, {@code false} otherwise.\n+     *\/\n+    public static boolean isRunnableByJTReg(@NotNull PsiElement element) {\n+        PsiFile runFile;\n+        PsiDirectory runDir;\n+        if (element instanceof PsiDirectory psiDirectory) {\n+            runFile = null;\n+            runDir = psiDirectory;\n+        } else {\n+            runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+            runDir = null != runFile ? runFile.getContainingDirectory() : null;\n+        }\n+        return isInJTRegRoot(runDir) && ((element instanceof PsiDirectory) || isJTRegTestData(runFile));\n+    }\n+\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/util\/JTRegUtils.java","additions":48,"deletions":4,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  ~ Copyright (c) 2016, 2019 Oracle and\/or its affiliates. All rights reserved.\n+  ~ Copyright (c) 2016, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+    <depends>JUnit<\/depends>\n@@ -40,3 +41,1 @@\n-        <runConfigurationProducer implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegClassConfigurationProducer\"\/>\n-        <runConfigurationProducer\n-                implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegDirectoryConfigurationProducer\"\/>\n+        <runConfigurationProducer implementation=\"com.oracle.plugin.jtreg.configuration.producers.JTRegConfigurationProducer\"\/>\n","filename":"plugins\/idea\/src\/main\/resources\/META-INF\/plugin.xml","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}