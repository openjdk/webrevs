{"files":[{"patch":"@@ -33,0 +33,1 @@\n+        bundledPlugins('com.intellij.java', 'JUnit')\n","filename":"plugins\/idea\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.intellij.execution.application.ApplicationConfigurationType;\n@@ -36,0 +37,1 @@\n+import org.jetbrains.annotations.NotNull;\n@@ -42,0 +44,6 @@\n+    \/**\n+     * @see JTRegConfigurationProducer#isConfigurationFromContext\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n+     *\/\n@@ -43,2 +51,4 @@\n-    protected boolean setupConfigurationFromContext(JTRegConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) {\n-        final Location<PsiElement> contextLocation = context.getLocation();\n+    protected boolean setupConfigurationFromContext(@NotNull JTRegConfiguration configuration,\n+                                                    @NotNull ConfigurationContext context,\n+                                                    @NotNull Ref<PsiElement> sourceElement) {\n+        Location<PsiElement> contextLocation = context.getLocation();\n@@ -46,1 +56,0 @@\n-        final PsiElement element = contextLocation.getPsiElement();\n@@ -48,5 +57,6 @@\n-        PsiFile psiFile = contextLocation.getPsiElement().getContainingFile();\n-        if (psiFile == null ||\n-                !JTRegUtils.isInJTRegRoot(psiFile.getContainingDirectory()) ||\n-                (!JTRegUtils.isJTRegTestData(psiFile) &&\n-                 !JTRegUtils.isTestNGTestData(psiFile))) return false;\n+        PsiElement element = contextLocation.getPsiElement();\n+\n+        if (!JTRegUtils.isRunnableByJTReg(element)) {\n+            return false;\n+        }\n+\n@@ -55,0 +65,1 @@\n+\n@@ -59,1 +70,10 @@\n-        configuration.setRunClass(psiFile.getVirtualFile().getPath());\n+\n+        if (element instanceof PsiDirectory runDir) {\n+            configuration.setPackage(runDir.getVirtualFile().getPath());\n+        } else {\n+            PsiFile runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+            if (null != runFile && null != runFile.getVirtualFile()) {\n+                configuration.setRunClass(runFile.getVirtualFile().getPath());\n+            }\n+        }\n+\n@@ -62,0 +82,4 @@\n+        preventRunPriorityLoss(element, sourceElement);\n+\n+        element = findExactRunElement(element);\n+\n@@ -69,0 +93,43 @@\n+    \/**\n+     * Ensures that the Application, TestNG, or JUnit run configuration does not receive a higher priority.\n+     * This applies when the user attempts to run a file containing a single class for TestNG\/JUnit,\n+     * or a \"main\" method for the Application run configuration.\n+     * <p>\n+     * The class {@link com.intellij.execution.actions.PreferredProducerFind} sorts the applicable runners using\n+     * {@link com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR},\n+     * removing more general ones and retaining more specific or equal configurations.\n+     * <p>\n+     * When the user tries to run a test on a file, and another type of Run Configuration can intercept the execution,\n+     * this method sets the {@code PsiClass} element in the {@code sourceElement} reference to ensure priority is retained.\n+     *\n+     * @param element       current PSI element\n+     * @param sourceElement a reference to the source element for the run configuration\n+     *                      (by default contains the element at caret,\n+     *                      can be updated by the producer to point to a higher-level element in the tree).\n+     * @see com.intellij.execution.application.AbstractApplicationConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.testframework.AbstractInClassConfigurationProducer#setupConfigurationFromContext\n+     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n+     * @see com.intellij.execution.actions.ConfigurationFromContext#COMPARATOR\n+     * @see com.intellij.psi.util.PsiTreeUtil#isAncestor\n+     *\/\n+    private void preventRunPriorityLoss(PsiElement element, @NotNull Ref<PsiElement> sourceElement) {\n+        if (element instanceof PsiClassOwner psiClassOwner) {\n+            PsiClass[] psiClasses = psiClassOwner.getClasses();\n+            if (1 == psiClasses.length) {\n+                sourceElement.set(psiClasses[0]); \/\/ for Application\/TestNG\/JUnit\n+            } else {\n+                PsiClass mainClass = ApplicationConfigurationType.getMainClass(element);\n+                if (null != mainClass) {\n+                    sourceElement.set(mainClass); \/\/ for Application\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Generates a name for the run test configuration.\n+     *\n+     * @param element the current PSI element.\n+     * @return One of the following: {\"ClassName\", \"ClassName::TestMethodName\"}, or the default: \"FileName.java\".\n+     * @see #findExactRunElement(PsiElement)\n+     *\/\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegClassConfigurationProducer.java","additions":76,"deletions":9,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import com.intellij.execution.configurations.RunConfiguration;\n+import com.intellij.execution.junit.JUnitConfiguration;\n@@ -39,0 +41,1 @@\n+import com.intellij.openapi.vfs.VirtualFile;\n@@ -45,0 +48,1 @@\n+import org.jetbrains.annotations.NotNull;\n@@ -50,0 +54,2 @@\n+import static com.oracle.plugin.jtreg.util.JTRegUtils.*;\n+\n@@ -59,0 +65,3 @@\n+    \/**\n+     * @see JTRegClassConfigurationProducer#setupConfigurationFromContext\n+     *\/\n@@ -60,2 +69,3 @@\n-    public boolean isConfigurationFromContext(JTRegConfiguration unitConfiguration, ConfigurationContext context) {\n-        final Location contextLocation = context.getLocation();\n+    public boolean isConfigurationFromContext(@NotNull JTRegConfiguration unitConfiguration,\n+                                              @NotNull ConfigurationContext context) {\n+        Location<PsiElement> contextLocation = context.getLocation();\n@@ -66,1 +76,1 @@\n-        Location location = JavaExecutionUtil.stepIntoSingleClass(contextLocation);\n+        Location<?> location = JavaExecutionUtil.stepIntoSingleClass(contextLocation);\n@@ -72,6 +82,13 @@\n-        String query = getQuery(element);\n-        PsiFile contextFile = element.getContainingFile();\n-        final String configFile = unitConfiguration.getRunClass();\n-        return configFile != null && contextFile != null && contextFile.getVirtualFile() != null &&\n-                configFile.equals(contextFile.getVirtualFile().getPath())\n-                && query.equals(unitConfiguration.getQuery());\n+        element = findExactRunElement(element);\n+\n+        String contextQuery = getQuery(element);\n+\n+        PsiFile contextFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+        VirtualFile contextVirtualFile = null != contextFile ? contextFile.getVirtualFile() : null;\n+        String contextFilePath = null != contextVirtualFile ? contextVirtualFile.getPath() : null;\n+\n+        String contextDirPath = (element instanceof PsiDirectory d) ? d.getVirtualFile().getPath() : null;\n+\n+        return isEqualNullAsEmpty(contextFilePath, unitConfiguration.getRunClass())\n+                && isEqualNullAsEmpty(contextDirPath, unitConfiguration.getPackage())\n+                && isEqualNullAsEmpty(contextQuery, unitConfiguration.getQuery());\n@@ -80,0 +97,49 @@\n+    \/**\n+     * Finds the nearest test element among the parents of the given element:\n+     * <ol>\n+     *     <li>Test method<\/li>\n+     *     <li>Test class<\/li>\n+     *     <li>File<\/li>\n+     * <\/ol>\n+     * If no test element is found among the parents, returns the given element.\n+     * <p>\n+     * An element is considered test-runnable only if all its parent elements,\n+     * up to the containing file, are also test-runnable.\n+     * <p>\n+     * A directory is also considered a test-runnable element.\n+     *\n+     * @param element The element for the run configuration (by default, contains the element at the caret).\n+     * @return The nearest test element found, or {@code element} if no test element is found among the parents.\n+     * @see JTRegClassConfigurationProducer#nameForElement(PsiElement)\n+     * @see #getQuery(PsiElement)\n+     *\/\n+    @NotNull\n+    protected PsiElement findExactRunElement(@NotNull final PsiElement element) {\n+        PsiElement retval = null;\n+        for (PsiElement e = element; null != e; e = e.getParent()) {\n+            if ((e instanceof PsiFile) || (e instanceof PsiDirectory)) {\n+                if (null == retval) {\n+                    retval = e;\n+                }\n+                break;\n+            }\n+\n+            if (isThirdPartyTestElement(e)) {\n+                final PsiElement identifyingElement = ((PsiNameIdentifierOwner) e).getIdentifyingElement();\n+                if (null != identifyingElement) { \/\/ null for name of the non-test inner class\n+                    if (null == retval) {\n+                        \/\/ When found, check the rest of the hierarchy up to the class for runnability\n+                        retval = identifyingElement;\n+                    }\n+                } else {\n+                    retval = null;\n+                }\n+            } else {\n+                retval = null;\n+            }\n+        }\n+\n+        return null != retval ? retval : element;\n+    }\n+\n+    @NotNull\n@@ -161,0 +227,4 @@\n+    \/**\n+     * @see ConfigurationFromContext#COMPARATOR\n+     * @see com.intellij.execution.actions.PreferredProducerFind#doGetConfigurationsFromContext\n+     *\/\n@@ -162,7 +232,6 @@\n-    public boolean shouldReplace(ConfigurationFromContext self, ConfigurationFromContext other) {\n-        if (other.getConfiguration() instanceof TestNGConfiguration) {\n-            return true;\n-        } else if (other.getConfiguration() instanceof ApplicationConfiguration) {\n-            return true;\n-        }\n-        return super.shouldReplace(self, other);\n+    public boolean shouldReplace(@NotNull ConfigurationFromContext self, @NotNull ConfigurationFromContext other) {\n+        RunConfiguration otherCnf = other.getConfiguration();\n+        return otherCnf instanceof ApplicationConfiguration\n+                || otherCnf instanceof TestNGConfiguration\n+                || otherCnf instanceof JUnitConfiguration\n+                || super.shouldReplace(self, other);\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/configuration\/producers\/JTRegConfigurationProducer.java","additions":85,"deletions":16,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.intellij.execution.junit.JUnitUtil;\n@@ -36,0 +37,1 @@\n+import com.intellij.openapi.util.text.StringUtilRt;\n@@ -41,0 +43,2 @@\n+import com.theoryinpractice.testng.util.TestNGUtil;\n+import org.jetbrains.annotations.NotNull;\n@@ -57,0 +61,22 @@\n+    \/**\n+     * Checks if two strings are equal to each other,\n+     * taking into account {@code null} == {@code empty string} value.\n+     *\n+     * @return {@code true} if any of the following is {@code true}:\n+     * <ul>\n+     *     <li>Both strings are {@code null}.<\/li>\n+     *     <li>One string is {@code null} and the other is empty.<\/li>\n+     *     <li>The strings are equal.<\/li>\n+     * <\/ul>\n+     *\/\n+    public static boolean isEqualNullAsEmpty(String a, String b) {\n+        return StringUtilRt.notNullize(a).equals(StringUtilRt.notNullize(b));\n+    }\n+\n+    public static boolean isThirdPartyTestElement(PsiElement element) {\n+        return ((element instanceof PsiMethod psiMethod)\n+                && (TestNGUtil.hasTest(psiMethod) || JUnitUtil.isTestAnnotated(psiMethod)))\n+                || ((element instanceof PsiClass psiClass)\n+                && (TestNGUtil.isTestNGClass(psiClass) || JUnitUtil.isTestClass(psiClass)));\n+    }\n+\n@@ -61,3 +87,1 @@\n-        return dir != null ?\n-                isInJTRegRoot(dir.getVirtualFile()) :\n-                false;\n+        return null != dir && isInJTRegRoot(dir.getVirtualFile());\n@@ -297,0 +321,32 @@\n+    \/**\n+     * Determines whether the given element is a valid test-related element.\n+     * The element must be one of the following:\n+     * <ul>\n+     *     <li>An element inside a test file<\/li>\n+     *     <li>A test file<\/li>\n+     *     <li>A test directory<\/li>\n+     * <\/ul>\n+     *\n+     * <p>Additionally, the following conditions must be met:<\/p>\n+     * <ul>\n+     *     <li>A test file must contain the {@code @test} comment tag.<\/li>\n+     *     <li>A test file must be located inside a test directory.<\/li>\n+     *     <li>A test directory must have a parent directory that contains a {@code TEST.ROOT} file.<\/li>\n+     * <\/ul>\n+     *\n+     * @param element The element for the run configuration (by default, contains the element at the caret).\n+     * @return {@code true} if the element is a valid test-related element, {@code false} otherwise.\n+     *\/\n+    public static boolean isRunnableByJTReg(@NotNull PsiElement element) {\n+        PsiFile runFile;\n+        PsiDirectory runDir;\n+        if (element instanceof PsiDirectory psiDirectory) {\n+            runFile = null;\n+            runDir = psiDirectory;\n+        } else {\n+            runFile = (element instanceof PsiFile psiFile) ? psiFile : element.getContainingFile();\n+            runDir = null != runFile ? runFile.getContainingDirectory() : null;\n+        }\n+        return isInJTRegRoot(runDir) && isJTRegTestData(runFile);\n+    }\n+\n","filename":"plugins\/idea\/src\/main\/java\/com\/oracle\/plugin\/jtreg\/util\/JTRegUtils.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  ~ Copyright (c) 2016, 2019 Oracle and\/or its affiliates. All rights reserved.\n+  ~ Copyright (c) 2016, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+    <depends>JUnit<\/depends>\n","filename":"plugins\/idea\/src\/main\/resources\/META-INF\/plugin.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}