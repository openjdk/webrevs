{"files":[{"patch":"@@ -315,1 +315,2 @@\n-                    compArgs.add(\"--source=\" + script.getTestJDKVersion().major);\n+                    compArgs.add(\"-source\"); \/\/ use \"-source\" \"N\" for Java 11 and lower\n+                    compArgs.add(String.valueOf(script.getTestJDKVersion().major));\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/BuildAction.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -366,3 +366,4 @@\n-        var needsEnablePreview = script.enablePreview() || usesLibraryCompiledWithPreviewEnabled();\n-\n-        if (runJavac && needsEnablePreview && !seenEnablePreview\n+        if (runJavac\n+                && !script.disablePreview()\n+                && !seenEnablePreview\n+                && (script.enablePreview() || usesLibraryCompiledWithPreviewEnabled())\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/CompileAction.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -234,7 +234,9 @@\n-        boolean needsEnablePreview = script.enablePreview() || usesLibraryCompiledWithPreviewEnabled();\n-        if (needsEnablePreview && !seenEnablePreview) {\n-            testJavaArgs.add(\"--enable-preview\");\n-            if (!othervm) {\n-                \/\/ ideally, this should not force othervm mode, but just allow\n-                \/\/ the use of an agent with preview enabled\n-                othervmOverrideReasons.add(\"test requires --enable-preview\");\n+        if (!script.disablePreview()) { \/\/ test with explicit `@enablePreview false` take precedence\n+            boolean needsEnablePreview = script.enablePreview() || usesLibraryCompiledWithPreviewEnabled();\n+            if (needsEnablePreview && !seenEnablePreview) {\n+                testJavaArgs.add(\"--enable-preview\");\n+                if (!othervm) {\n+                    \/\/ ideally, this should not force othervm mode, but just allow\n+                    \/\/ the use of an agent with preview enabled\n+                    othervmOverrideReasons.add(\"test requires --enable-preview\");\n+                }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/MainAction.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -447,0 +447,5 @@\n+    boolean disablePreview() {\n+        String ep = td.getParameter(\"enablePreview\");\n+        return ep != null && ep.equals(\"false\");\n+    }\n+\n@@ -1163,0 +1168,3 @@\n+        if (disablePreview()) {\n+            p.put(\"test.enable.preview\", \"false\");\n+        }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/RegressionScript.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -240,0 +240,3 @@\n+            if (script.disablePreview()) {\n+                env.put(\"TESTENABLEPREVIEW\", \"false\");\n+            }\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/ShellAction.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @build *\n+ * @build TestUsingAllLibraries NoProperties WithPreview WithoutPreview\n","filename":"test\/libPropertiesEnablePreview\/TestUsingAllLibraries.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @build *\n+ * @build TestUsingPreviewLibrary WithPreview\n","filename":"test\/libPropertiesEnablePreview\/TestUsingPreviewLibrary.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7903813\n+ * @enablePreview false\n+ * @library lib-with-preview\n+ * @build TestWithDisabledPreview WithPreview\n+ * @run main TestWithDisabledPreview\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.DataInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+public class TestWithDisabledPreview {\n+    public static void main(String... args) throws Exception {\n+        var location = TestWithDisabledPreview.class.getProtectionDomain().getCodeSource().getLocation();\n+        var classFile = Path.of(location.toURI()).resolve(TestWithDisabledPreview.class.getSimpleName() + \".class\");\n+        try (var dis = new DataInputStream(new ByteArrayInputStream(Files.readAllBytes(classFile)))) {\n+            dis.skipBytes(4); \/\/ 0xCAFEBABE\n+            var minor = dis.readUnsignedShort();\n+            if (minor != 0) throw new AssertionError(\"Unexpected minor version: \" + minor);\n+        }\n+    }\n+}\n","filename":"test\/libPropertiesEnablePreview\/TestWithDisabledPreview.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n- * @build *\n+ * @build TestWithEnablePreview WithoutPreview\n","filename":"test\/libPropertiesEnablePreview\/TestWithEnablePreview.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}