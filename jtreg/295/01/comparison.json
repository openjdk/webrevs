{"files":[{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javatest.regtest.agent;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.BiConsumer;\n+\n+\/**\n+ * Handles stdout\/stderr process output from the agent.\n+ *\/\n+public class AgentProcessLogger {\n+\n+    \/**\n+     * Constructs a thread pool to handle agent process output\n+     * and creates stdout and stderr readers\n+     *\n+     * @param p agent process\n+     *\/\n+    public AgentProcessLogger(Process p) {\n+        executorService = Executors.newFixedThreadPool(2, new ThreadFactory() {\n+            @Override\n+            public Thread newThread(Runnable runnable) {\n+                Thread th = new Thread(runnable);\n+                th.setDaemon(true);\n+                return th;\n+            }\n+        });\n+        stdOut = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+        stdErr = new BufferedReader(new InputStreamReader(p.getErrorStream()));\n+    }\n+\n+    \/**\n+     * Starts logging output and error streams to the specified consumer\n+     *\n+     * @param logConsumer log consumer, has two parameters - stream name and\n+     *                    the log line\n+     *\/\n+    public void startLogging(BiConsumer<String, String> logConsumer) {\n+        if (inputDone != null || errorDone != null) {\n+            throw new RuntimeException(\"call stopLogging first\");\n+        }\n+        inputDone = executorService.submit(() -> captureLog(\"stdout\", stdOut, logConsumer));\n+        errorDone = executorService.submit(() -> captureLog(\"stderr\", stdErr, logConsumer));\n+    }\n+\n+    \/**\n+     * Waits for the logging tasks to finish\n+     *\n+     * @throws ExecutionException\n+     * @throws InterruptedException\n+     * @throws TimeoutException     logging task failed to stop within 60 seconds\n+     *\/\n+    public void stopLogging() throws ExecutionException, InterruptedException, TimeoutException {\n+        inputDone.get(60, TimeUnit.SECONDS);\n+        errorDone.get(60, TimeUnit.SECONDS);\n+        inputDone = null;\n+        errorDone = null;\n+    }\n+\n+    \/**\n+     * Wait for logging tasks to finish and shutdown the thread pool\n+     *\/\n+    public void shutdown() {\n+        try {\n+            stopLogging();\n+        } catch (ExecutionException | InterruptedException | TimeoutException ex) {\n+            \/\/ ignore exception, the process is terminating\n+        }\n+        executorService.shutdown();\n+    }\n+\n+    \/**\n+     * Forward log lines to the consumer, stop forwarding on the separator\n+     * line\n+     *\n+     * @param streamName name of the stream\n+     * @param reader     process's stream reader\n+     *\/\n+    private Void captureLog(String streamName, BufferedReader reader, BiConsumer<String, String> consumer) {\n+        try {\n+            String line = null;\n+            while ((line = reader.readLine()) != null) {\n+                if (AgentServer.PROCESS_OUTPUT_SEPARATOR.equals(line)) {\n+                    break;\n+                }\n+                consumer.accept(streamName, line);\n+            }\n+        } catch (IOException ex) {\n+            \/\/ ignore the exception, the reader might be closed\n+        }\n+        return null;\n+    }\n+\n+    private final ExecutorService executorService;\n+    private final BufferedReader stdOut;\n+    private final BufferedReader stdErr;\n+    private Future<Void> inputDone;\n+    private Future<Void> errorDone;\n+}\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AgentProcessLogger.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+import java.io.FileDescriptor;\n@@ -36,0 +37,1 @@\n+import java.io.OutputStreamWriter;\n@@ -96,0 +98,3 @@\n+    public static final String PROCESS_OUTPUT_SEPARATOR =\n+            \"------ This line is the stdout\/stderr output separator ------\";\n+\n@@ -239,0 +244,1 @@\n+                writeProcessOutputSeparator();\n@@ -255,0 +261,2 @@\n+                \/\/ signal end of section output for the log writer\n+                writeProcessOutputSeparator();\n@@ -263,0 +271,14 @@\n+    private void writeProcessOutputSeparator() {\n+        try  {\n+            processStdOut.write(PROCESS_OUTPUT_SEPARATOR);\n+            processStdOut.write(System.lineSeparator());\n+            processStdOut.flush();\n+            processStdErr.write(PROCESS_OUTPUT_SEPARATOR);\n+            processStdErr.write(System.lineSeparator());\n+            processStdErr.flush();\n+        }\n+        catch (IOException e ){\n+            \/\/ ignore exception as the agent process may be killed\n+        }\n+    }\n+\n@@ -391,1 +413,2 @@\n-\n+    private final OutputStreamWriter processStdOut = new FileWriter(FileDescriptor.out);\n+    private final OutputStreamWriter processStdErr = new FileWriter(FileDescriptor.err);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AgentServer.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.io.BufferedReader;\n@@ -36,2 +35,0 @@\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n@@ -63,0 +60,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -64,0 +62,1 @@\n+import java.util.concurrent.TimeoutException;\n@@ -70,0 +69,1 @@\n+import com.sun.javatest.regtest.agent.AgentProcessLogger;\n@@ -189,2 +189,3 @@\n-            copyAgentProcessStream(\"stdout\", process.getInputStream());\n-            copyAgentProcessStream(\"stderr\", process.getErrorStream());\n+\n+            processLogger = new AgentProcessLogger(process);\n+            startAgentLog();\n@@ -222,6 +223,1 @@\n-     * Reads the output written by an agent process, and copies it either to\n-     * the current TestResult object (when one is available) or to the agent's\n-     * log file, if output is found while there is no test using the agent.\n-     *\n-     * @param name the name of the stream\n-     * @param in   the stream\n+     * Writes process input and error stream to the agent log.\n@@ -229,16 +225,2 @@\n-    void copyAgentProcessStream(final String name, final InputStream in) {\n-        Thread t = new Thread() {\n-            @Override\n-            public void run() {\n-                try (BufferedReader inReader = new BufferedReader(new InputStreamReader(in))) {\n-                    String line;\n-                    while ((line = inReader.readLine()) != null) {\n-                        handleProcessStreamLine(name, line);\n-                    }\n-                } catch (IOException e) {\n-                    \/\/ ignore\n-                }\n-            }\n-        };\n-        t.setDaemon(true);\n-        t.start();\n+    private void startAgentLog() {\n+        processLogger.startLogging( (String stream, String logLine) -> log(stream + \": \" + logLine));\n@@ -279,0 +261,5 @@\n+        try {\n+            processLogger.stopLogging();\n+        } catch (InterruptedException | ExecutionException | TimeoutException ex) {\n+            log(\"Failed to stop agent logging\" + ex);\n+        }\n@@ -285,0 +272,3 @@\n+            startAgentLog();\n+        } else {\n+            processLogger.startLogging(this::handleProcessStreamLine);\n@@ -290,2 +280,1 @@\n-     * If there is a current test result section, the line is saved there;\n-     * otherwise it is written to the agent log file.\n+     * If there is a current test result section, the line is saved there.\n@@ -297,6 +286,2 @@\n-        if (currentTestResultSection == null) {\n-            log(name + \": \" + line);\n-        } else {\n-            processStreamWriters.computeIfAbsent(name, currentTestResultSection::createOutput)\n-                    .println(line);\n-        }\n+        processStreamWriters.computeIfAbsent(name, currentTestResultSection::createOutput)\n+                .println(line);\n@@ -412,1 +397,0 @@\n-            captureProcessStreams(trs);\n@@ -416,0 +400,4 @@\n+            \/\/ The agent sends process output separator in response\n+            \/\/ to receiving a command. Wait for the separator and\n+            \/\/ redirect log to the test result section\n+            captureProcessStreams(trs);\n@@ -418,0 +406,5 @@\n+            \/\/ The agent will be disposed on exception.\n+            \/\/ Reset the agent log only if the agent can be reused.\n+            \/\/ The agent will send process output separator on\n+            \/\/ command execution.\n+            captureProcessStreams(null);\n@@ -423,1 +416,0 @@\n-            captureProcessStreams(null);\n@@ -512,1 +504,3 @@\n-\n+        \/\/ Ensure that thread pool threads are shut down\n+        \/\/ and the agent log is fully written\n+        processLogger.shutdown();\n@@ -629,0 +623,1 @@\n+    final AgentProcessLogger processLogger;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":33,"deletions":38,"binary":false,"changes":71,"status":"modified"}]}