{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.io.PrintWriter;\n+import java.util.Map;\n@@ -35,1 +37,0 @@\n-import java.util.concurrent.ThreadFactory;\n@@ -39,0 +40,1 @@\n+import java.util.function.Function;\n@@ -52,3 +54,1 @@\n-        executorService = Executors.newFixedThreadPool(2, new ThreadFactory() {\n-            @Override\n-            public Thread newThread(Runnable runnable) {\n+        executorService = Executors.newFixedThreadPool(2, runnable -> {\n@@ -58,2 +58,1 @@\n-            }\n-        });\n+            });\n@@ -70,1 +69,3 @@\n-    public void startLogging(BiConsumer<String, String> logConsumer) {\n+    public void startLogging(BiConsumer<String, String> logConsumer,\n+                             Map<String, PrintWriter> processStreamWriters,\n+                             Function<String, PrintWriter> mappingFunction) {\n@@ -74,0 +75,4 @@\n+        if (processStreamWriters != null) {\n+            processStreamWriters.computeIfAbsent(\"stdout\", mappingFunction);\n+            processStreamWriters.computeIfAbsent(\"stderr\", mappingFunction);\n+        }\n@@ -78,0 +83,1 @@\n+\n@@ -81,2 +87,5 @@\n-     * @throws ExecutionException\n-     * @throws InterruptedException\n+     * @param timeout shutdown timeout\n+     * @param timeUnit shutdown time unit\n+     *\n+     * @throws ExecutionException the logger threw an unexpected exception\n+     * @throws InterruptedException the logger was interrupted\n@@ -85,3 +94,3 @@\n-    public void stopLogging() throws ExecutionException, InterruptedException, TimeoutException {\n-        inputDone.get(60, TimeUnit.SECONDS);\n-        errorDone.get(60, TimeUnit.SECONDS);\n+    public void stopLogging(int timeout, TimeUnit timeUnit) throws ExecutionException, InterruptedException, TimeoutException {\n+        inputDone.get(timeout, timeUnit);\n+        errorDone.get(timeout, timeUnit);\n@@ -94,0 +103,3 @@\n+     *\n+     * @param timeout shutdown timeout\n+     * @param timeUnit shutdown time unit\n@@ -95,1 +107,1 @@\n-    public void shutdown() {\n+    public void shutdown(int timeout, TimeUnit timeUnit) {\n@@ -97,1 +109,1 @@\n-            stopLogging();\n+            stopLogging(timeout, timeUnit);\n@@ -113,1 +125,1 @@\n-            String line = null;\n+            String line;\n@@ -115,2 +127,8 @@\n-                if (AgentServer.PROCESS_OUTPUT_SEPARATOR.equals(line)) {\n-                    break;\n+                int endMarker  = line.indexOf(AgentServer.PROCESS_OUTPUT_SEPARATOR);\n+                if (endMarker < 0) {\n+                    consumer.accept(streamName, line);\n+                    continue;\n+                }\n+                if (endMarker > 0) {\n+                    line = line.substring(0, endMarker);\n+                    consumer.accept(streamName, line);\n@@ -118,1 +136,1 @@\n-                consumer.accept(streamName, line);\n+                break;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/AgentProcessLogger.java","additions":36,"deletions":18,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -226,1 +226,2 @@\n-        processLogger.startLogging( (String stream, String logLine) -> log(stream + \": \" + logLine));\n+        processLogger.startLogging( (String stream, String logLine) -> log(stream + \": \" + logLine),\n+            null, null);\n@@ -260,6 +261,3 @@\n-    private synchronized void captureProcessStreams(TestResult.Section section) {\n-        try {\n-            processLogger.stopLogging();\n-        } catch (InterruptedException | ExecutionException | TimeoutException ex) {\n-            log(\"Failed to stop agent logging\" + ex);\n-        }\n+    private synchronized void captureProcessStreams(TestResult.Section section, int timeout, TimeUnit timeUnit)\n+                   throws InterruptedException, ExecutionException, TimeoutException {\n+        processLogger.stopLogging(timeout, timeUnit);\n@@ -274,1 +272,7 @@\n-            processLogger.startLogging(this::handleProcessStreamLine);\n+            processLogger.startLogging((String name, String line) -> {\n+                Objects.requireNonNull(currentTestResultSection);\n+                Objects.requireNonNull(processStreamWriters);\n+                Objects.requireNonNull(name);\n+                Objects.requireNonNull(line);\n+                processStreamWriters.get(name).println(line);\n+            }, processStreamWriters, currentTestResultSection::createOutput);\n@@ -278,12 +282,0 @@\n-    \/**\n-     * Saves a line of output that was written by the agent to stdout (fd1) or stderr (fd2).\n-     * If there is a current test result section, the line is saved there.\n-     *\n-     * @param name the name of the stream from which the line was read\n-     * @param line the line that was read\n-     *\/\n-    private synchronized void handleProcessStreamLine(String name, String line) {\n-        processStreamWriters.computeIfAbsent(name, currentTestResultSection::createOutput)\n-                .println(line);\n-    }\n-\n@@ -403,1 +395,1 @@\n-            captureProcessStreams(trs);\n+            captureProcessStreams(trs, timeout, TimeUnit.SECONDS);\n@@ -410,1 +402,1 @@\n-            captureProcessStreams(null);\n+            captureProcessStreams(null, timeout, TimeUnit.SECONDS);\n@@ -412,1 +404,1 @@\n-        } catch (IOException e) {\n+        } catch (InterruptedException | TimeoutException | ExecutionException | IOException e) {\n@@ -506,1 +498,1 @@\n-        processLogger.shutdown();\n+        processLogger.shutdown(60, TimeUnit.SECONDS);\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/exec\/Agent.java","additions":16,"deletions":24,"binary":false,"changes":40,"status":"modified"}]}