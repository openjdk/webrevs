{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -107,2 +108,5 @@\n-        if (listener.configFailureCount > 0 || listener.failureCount > 0) {\n-            throw new Exception(\"failures: \" + listener.failureCount);\n+        int configFailureCount = listener.configFailureCount.get();\n+        int testFailureCount = listener.failureCount.get();\n+        if (configFailureCount > 0 || testFailureCount > 0) {\n+            throw new Exception(\"config failures: \" + configFailureCount\n+                    + \", test failures: \" + testFailureCount);\n@@ -116,0 +120,8 @@\n+        private final AtomicInteger count = new AtomicInteger();\n+        private final AtomicInteger successCount = new AtomicInteger();\n+        private final AtomicInteger failureCount = new AtomicInteger();\n+        private final AtomicInteger skippedCount = new AtomicInteger();\n+        private final AtomicInteger configSuccessCount = new AtomicInteger();\n+        private final AtomicInteger configFailureCount = new AtomicInteger();\n+        private final AtomicInteger configSkippedCount = new AtomicInteger();\n+        private final AtomicInteger failedButWithinSuccessPercentageCount = new AtomicInteger();\n@@ -122,1 +134,1 @@\n-            count++;\n+            count.incrementAndGet();\n@@ -132,1 +144,1 @@\n-            successCount++;\n+            successCount.incrementAndGet();\n@@ -138,1 +150,1 @@\n-            failureCount++;\n+            failureCount.incrementAndGet();\n@@ -149,1 +161,1 @@\n-            skippedCount++;\n+            skippedCount.incrementAndGet();\n@@ -155,1 +167,1 @@\n-            failedButWithinSuccessPercentageCount++;\n+            failedButWithinSuccessPercentageCount.incrementAndGet();\n@@ -169,1 +181,1 @@\n-            configSuccessCount++;\n+            configSuccessCount.incrementAndGet();\n@@ -175,1 +187,1 @@\n-            configFailureCount++;\n+            configFailureCount.incrementAndGet();\n@@ -181,1 +193,1 @@\n-            configSkippedCount++;\n+            configSkippedCount.incrementAndGet();\n@@ -258,9 +270,0 @@\n-\n-        int count;\n-        int successCount;\n-        int failureCount;\n-        int skippedCount;\n-        int configSuccessCount;\n-        int configFailureCount;\n-        int configSkippedCount;\n-        int failedButWithinSuccessPercentageCount;\n","filename":"src\/share\/classes\/com\/sun\/javatest\/regtest\/agent\/TestNGRunner.java","additions":22,"deletions":19,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.fail;\n+\n+\/*\n+ * @test\n+ * @run testng\/othervm -Ddataproviderthreadcount=4 FailingTest\n+ *\/\n+public class FailingTest {\n+\n+    @DataProvider(parallel = true)\n+    public static Iterator<Object[]> integers() {\n+        final List<Object[]> args = new ArrayList<>();\n+        for (int i = 0; i < 10; i++) {\n+            args.add(new Object[]{i});\n+        }\n+        return args.iterator();\n+    }\n+\n+    @Test(dataProvider = \"integers\")\n+    public void test(Integer arg) throws Exception {\n+        TimeUnit.MILLISECONDS.sleep(100);\n+        fail(\"failing intentionally for \" + arg);\n+    }\n+}\n","filename":"test\/testngFailureCount\/FailingTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"","filename":"test\/testngFailureCount\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/4499340\/test\/TEST.ROOT","status":"copied"},{"patch":"@@ -0,0 +1,38 @@\n+#  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  This code is free software; you can redistribute it and\/or modify it\n+#  under the terms of the GNU General Public License version 2 only, as\n+#  published by the Free Software Foundation.\n+#\n+#  This code is distributed in the hope that it will be useful, but WITHOUT\n+#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+#  version 2 for more details (a copy is included in the LICENSE file that\n+#  accompanied this code).\n+#\n+#  You should have received a copy of the GNU General Public License version\n+#  2 along with this work; if not, write to the Free Software Foundation,\n+#  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+#  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+#  or visit www.oracle.com if you need additional information or have any\n+#  questions.\n+\n+# verify that the failure count is reported correctly when\n+# testng executes multiple tests concurrently\n+$(BUILDTESTDIR)\/TestngFailureCount.ok: \\\n+\t$(JTREG_IMAGEDIR)\/lib\/jtreg.jar \\\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg\n+\t$(RM) $(@:%.ok=%) && $(MKDIR) $(@:%.ok=%)\n+\t$(JTREG_IMAGEDIR)\/bin\/jtreg $(JTREG_OPTS) \\\n+\t\t-w:$(@:%.ok=%)\/work -r:$(@:%.ok=%)\/report \\\n+\t\t-jdk:$(JDKHOME) \\\n+\t\t$(TESTDIR)\/testngFailureCount \\\n+\t\t\t> $(@:%.ok=%\/jt.log) 2>&1 || \\\n+\t    true \"non-zero exit code from JavaTest intentionally ignored\"\n+\t$(GREP) -s ' test failures: 10' $(@:%.ok=%\/work\/FailingTest.jtr)  > \/dev\/null\n+\techo \"test passed at `date`\" > $@\n+\n+TESTS.jtreg += \\\n+\t$(BUILDTESTDIR)\/TestngFailureCount.ok\n\\ No newline at end of file\n","filename":"test\/testngFailureCount\/TestngFailureCount.gmk","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}