{"files":[{"patch":"@@ -1921,1 +1921,2 @@\n-  \/\/         final_correction = canonicalized_correction + limit_correction\n+  \/\/         (v) final_correction = canonicalized_correction + limit_correction\n+  \/\/\n@@ -1927,0 +1928,15 @@\n+  \/\/     However, we need to be careful that (v) does not over- or underflow.\n+  \/\/     We know that:\n+  \/\/         canonicalized_correction = stride - 1\n+  \/\/     and\n+  \/\/         limit_correction <= stride + 1\n+  \/\/     and thus\n+  \/\/         canonicalized_correction + limit_correction <= 2 * stride\n+  \/\/     To prevent an over- or underflow of (v), we must ensure that\n+  \/\/         2 * stride <= max_int\n+  \/\/     which can safely be checked without over- or underflow with\n+  \/\/         (vi) stride != min_int AND abs(stride) <= max_int \/ 2\n+  \/\/\n+  \/\/     We could try to further optimize the cases where (vi) does not hold but given that such large strides are\n+  \/\/     very uncommon and the loop would only run for a very few iterations anyway, we simply bail out if (vi) fails.\n+  \/\/\n@@ -1957,0 +1973,4 @@\n+  \/\/ Check (vi) and bail out if the stride is too big.\n+  if (stride_con == min_signed_integer(iv_bt) || (ABS(stride_con) > max_signed_integer(iv_bt) \/ 2)) {\n+    return false;\n+  }\n@@ -5476,1 +5496,2 @@\n-      l = get_loop(m);          \/\/ Get previously determined loop\n+      IdealLoopTree* m_loop = get_loop(m);\n+      l = m_loop;          \/\/ Get previously determined loop\n@@ -5502,1 +5523,1 @@\n-          set_loop(iff, l);\n+          set_loop(iff, m_loop);\n@@ -5505,1 +5526,1 @@\n-          set_loop(if_t, l);\n+          set_loop(if_t, m_loop);\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"}]}