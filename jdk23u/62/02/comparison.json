{"files":[{"patch":"@@ -160,1 +160,10 @@\n-### 2.5 Framework Debug and Stress Flags\n+### 2.5 IR Tests with Privileged Classes\n+To run tests in a privileged mode (e.g. when using `@Stable`, `@Contended`, `@ReservedStackAccess` etc.), one need to add the test classes to the boot classpath. This can easily be achieved by calling `TestFramework.addTestClassesToBootClassPath()` on the test framework object:\n+```\n+TestFramework testFramework = new TestFramework();\n+testFramework\n+        .addTestClassesToBootClassPath()\n+        .start();\n+```\n+\n+### 2.6 Framework Debug and Stress Flags\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+    private boolean testClassesOnBootClassPath;\n@@ -326,0 +327,9 @@\n+    \/**\n+     * Add test classes to boot classpath. This adds all classes found on path {@link jdk.test.lib.Utils#TEST_CLASSES}\n+     * to the boot classpath with \"-Xbootclasspath\/a\". This is useful when trying to run tests in a privileged mode.\n+     *\/\n+    public TestFramework addTestClassesToBootClassPath() {\n+        this.testClassesOnBootClassPath = true;\n+        return this;\n+    }\n+\n@@ -747,1 +757,2 @@\n-        TestVMProcess testVMProcess = new TestVMProcess(additionalFlags, testClass, helperClasses, defaultWarmup);\n+        TestVMProcess testVMProcess = new TestVMProcess(additionalFlags, testClass, helperClasses, defaultWarmup,\n+                                                        testClassesOnBootClassPath);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.io.File;\n@@ -66,1 +67,2 @@\n-    public TestVMProcess(List<String> additionalFlags, Class<?> testClass, Set<Class<?>> helperClasses, int defaultWarmup) {\n+    public TestVMProcess(List<String> additionalFlags, Class<?> testClass, Set<Class<?>> helperClasses, int defaultWarmup,\n+                         boolean testClassesOnBootClassPath) {\n@@ -70,1 +72,1 @@\n-            prepareTestVMFlags(additionalFlags, socket, testClass, helperClasses, defaultWarmup);\n+            prepareTestVMFlags(additionalFlags, socket, testClass, helperClasses, defaultWarmup, testClassesOnBootClassPath);\n@@ -94,1 +96,1 @@\n-                                    Set<Class<?>> helperClasses, int defaultWarmup) {\n+                                    Set<Class<?>> helperClasses, int defaultWarmup, boolean testClassesOnBootClassPath) {\n@@ -98,1 +100,6 @@\n-        cmds.add(\"-Xbootclasspath\/a:.\");\n+        String bootClassPath = \"-Xbootclasspath\/a:.\";\n+        if (testClassesOnBootClassPath) {\n+            \/\/ Add test classes themselves to boot classpath to make them privileged.\n+            bootClassPath += File.pathSeparator + Utils.TEST_CLASSES;\n+        }\n+        cmds.add(bootClassPath);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/TestVMProcess.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        TestVMProcess testVMProcess = new TestVMProcess(testVMFlags, testClass, null, -1);\n+        TestVMProcess testVMProcess = new TestVMProcess(testVMFlags, testClass, null, -1, false);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.irmatching.IRViolationException;\n+\n+import jdk.internal.vm.annotation.Stable;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.compiler2.enabled & vm.flagless\n+ * @summary Test that IR framework successfully adds test class to boot classpath in order to run in privileged mode.\n+ * @modules java.base\/jdk.internal.vm.annotation\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.tests.TestPrivilegedMode\n+ *\/\n+\n+public class TestPrivilegedMode {\n+    static @Stable int iFld; \/\/ Treated as constant after first being set.\n+\n+    public static void main(String[] args) {\n+        try {\n+            TestFramework.run();\n+            Asserts.fail(\"should not reach\");\n+        } catch (IRViolationException e) {\n+            \/\/ Without adding test class to boot classpath, we fail to replace the field load by a constant.\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Matched forbidden node\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"LoadI\"));\n+        }\n+\n+        \/\/ When adding the test class to the boot classpath, we can replace the field load by a constant.\n+        new TestFramework().addTestClassesToBootClassPath().start();\n+    }\n+\n+    @Test\n+    @Arguments(setup = \"setup\")\n+    @IR(failOn = IRNode.LOAD_I)\n+    public int test() {\n+        return iFld;\n+    }\n+\n+    @Setup\n+    public void setup() {\n+        iFld = 34;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPrivilegedMode.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}