{"files":[{"patch":"@@ -3263,2 +3263,2 @@\n-TypeInterfaces::TypeInterfaces()\n-        : Type(Interfaces), _list(Compile::current()->type_arena(), 0, 0, nullptr),\n+TypeInterfaces::TypeInterfaces(ciInstanceKlass** interfaces_base, int nb_interfaces)\n+        : Type(Interfaces), _interfaces(interfaces_base, nb_interfaces),\n@@ -3266,9 +3266,1 @@\n-  DEBUG_ONLY(_initialized = true);\n-}\n-\n-TypeInterfaces::TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces)\n-        : Type(Interfaces), _list(Compile::current()->type_arena(), interfaces->length(), 0, nullptr),\n-          _hash(0), _exact_klass(nullptr) {\n-  for (int i = 0; i < interfaces->length(); i++) {\n-    add(interfaces->at(i));\n-  }\n+  _interfaces.sort(compare);\n@@ -3279,1 +3271,14 @@\n-  TypeInterfaces* result = (interfaces == nullptr) ? new TypeInterfaces() : new TypeInterfaces(interfaces);\n+  \/\/ hashcons() can only delete the last thing that was allocated: to\n+  \/\/ make sure all memory for the newly created TypeInterfaces can be\n+  \/\/ freed if an identical one exists, allocate space for the array of\n+  \/\/ interfaces right after the TypeInterfaces object so that they\n+  \/\/ form a contiguous piece of memory.\n+  int nb_interfaces = interfaces == nullptr ? 0 : interfaces->length();\n+  size_t total_size = sizeof(TypeInterfaces) + nb_interfaces * sizeof(ciInstanceKlass*);\n+\n+  void* allocated_mem = operator new(total_size);\n+  ciInstanceKlass** interfaces_base = (ciInstanceKlass**)((char*)allocated_mem + sizeof(TypeInterfaces));\n+  for (int i = 0; i < nb_interfaces; ++i) {\n+    interfaces_base[i] = interfaces->at(i);\n+  }\n+  TypeInterfaces* result = ::new (allocated_mem) TypeInterfaces(interfaces_base, nb_interfaces);\n@@ -3298,4 +3303,2 @@\n-void TypeInterfaces::add(ciInstanceKlass* interface) {\n-  assert(interface->is_interface(), \"for interfaces only\");\n-  _list.insert_sorted<compare>(interface);\n-  verify();\n+int TypeInterfaces::compare(ciInstanceKlass** k1, ciInstanceKlass** k2) {\n+  return compare(*k1, *k2);\n@@ -3306,1 +3309,1 @@\n-  if (_list.length() != other->_list.length()) {\n+  if (_interfaces.length() != other->_interfaces.length()) {\n@@ -3309,3 +3312,3 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* k1 = _list.at(i);\n-    ciKlass* k2 = other->_list.at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* k1 = _interfaces.at(i);\n+    ciKlass* k2 = other->_interfaces.at(i);\n@@ -3322,1 +3325,1 @@\n-  if (_list.length() != interfaces->length()) {\n+  if (_interfaces.length() != interfaces->length()) {\n@@ -3327,1 +3330,1 @@\n-    _list.find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n+    _interfaces.find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n@@ -3347,2 +3350,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* k = _list.at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* k = _interfaces.at(i);\n@@ -3359,1 +3362,1 @@\n-  if (_list.length() == 0) {\n+  if (_interfaces.length() == 0) {\n@@ -3365,1 +3368,1 @@\n-  interfaces.appendAll(&_list);\n+  interfaces.appendAll(&_interfaces);\n@@ -3380,3 +3383,3 @@\n-  for (int i = 1; i < _list.length(); i++) {\n-    ciInstanceKlass* k1 = _list.at(i-1);\n-    ciInstanceKlass* k2 = _list.at(i);\n+  for (int i = 1; i < _interfaces.length(); i++) {\n+    ciInstanceKlass* k1 = _interfaces.at(i-1);\n+    ciInstanceKlass* k2 = _interfaces.at(i);\n@@ -3393,5 +3396,5 @@\n-  while (i < _list.length() || j < other->_list.length()) {\n-    while (i < _list.length() &&\n-           (j >= other->_list.length() ||\n-            compare(_list.at(i), other->_list.at(j)) < 0)) {\n-      result_list.push(_list.at(i));\n+  while (i < _interfaces.length() || j < other->_interfaces.length()) {\n+    while (i < _interfaces.length() &&\n+           (j >= other->_interfaces.length() ||\n+            compare(_interfaces.at(i), other->_interfaces.at(j)) < 0)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3400,4 +3403,4 @@\n-    while (j < other->_list.length() &&\n-           (i >= _list.length() ||\n-            compare(other->_list.at(j), _list.at(i)) < 0)) {\n-      result_list.push(other->_list.at(j));\n+    while (j < other->_interfaces.length() &&\n+           (i >= _interfaces.length() ||\n+            compare(other->_interfaces.at(j), _interfaces.at(i)) < 0)) {\n+      result_list.push(other->_interfaces.at(j));\n@@ -3406,4 +3409,4 @@\n-    if (i < _list.length() &&\n-        j < other->_list.length() &&\n-        _list.at(i) == other->_list.at(j)) {\n-      result_list.push(_list.at(i));\n+    if (i < _interfaces.length() &&\n+        j < other->_interfaces.length() &&\n+        _interfaces.at(i) == other->_interfaces.at(j)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3417,2 +3420,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    assert(result->_list.contains(_list.at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    assert(result->_interfaces.contains(_interfaces.at(i)), \"missing\");\n@@ -3420,2 +3423,2 @@\n-  for (int i = 0; i < other->_list.length(); i++) {\n-    assert(result->_list.contains(other->_list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces.length(); i++) {\n+    assert(result->_interfaces.contains(other->_interfaces.at(i)), \"missing\");\n@@ -3423,2 +3426,2 @@\n-  for (int i = 0; i < result->_list.length(); i++) {\n-    assert(_list.contains(result->_list.at(i)) || other->_list.contains(result->_list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces.length(); i++) {\n+    assert(_interfaces.contains(result->_interfaces.at(i)) || other->_interfaces.contains(result->_interfaces.at(i)), \"missing\");\n@@ -3434,4 +3437,4 @@\n-  while (i < _list.length() || j < other->_list.length()) {\n-    while (i < _list.length() &&\n-           (j >= other->_list.length() ||\n-            compare(_list.at(i), other->_list.at(j)) < 0)) {\n+  while (i < _interfaces.length() || j < other->_interfaces.length()) {\n+    while (i < _interfaces.length() &&\n+           (j >= other->_interfaces.length() ||\n+            compare(_interfaces.at(i), other->_interfaces.at(j)) < 0)) {\n@@ -3440,3 +3443,3 @@\n-    while (j < other->_list.length() &&\n-           (i >= _list.length() ||\n-            compare(other->_list.at(j), _list.at(i)) < 0)) {\n+    while (j < other->_interfaces.length() &&\n+           (i >= _interfaces.length() ||\n+            compare(other->_interfaces.at(j), _interfaces.at(i)) < 0)) {\n@@ -3445,4 +3448,4 @@\n-    if (i < _list.length() &&\n-        j < other->_list.length() &&\n-        _list.at(i) == other->_list.at(j)) {\n-      result_list.push(_list.at(i));\n+    if (i < _interfaces.length() &&\n+        j < other->_interfaces.length() &&\n+        _interfaces.at(i) == other->_interfaces.at(j)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3456,2 +3459,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    assert(!other->_list.contains(_list.at(i)) || result->_list.contains(_list.at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    assert(!other->_interfaces.contains(_interfaces.at(i)) || result->_interfaces.contains(_interfaces.at(i)), \"missing\");\n@@ -3459,2 +3462,2 @@\n-  for (int i = 0; i < other->_list.length(); i++) {\n-    assert(!_list.contains(other->_list.at(i)) || result->_list.contains(other->_list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces.length(); i++) {\n+    assert(!_interfaces.contains(other->_interfaces.at(i)) || result->_interfaces.contains(other->_interfaces.at(i)), \"missing\");\n@@ -3462,2 +3465,2 @@\n-  for (int i = 0; i < result->_list.length(); i++) {\n-    assert(_list.contains(result->_list.at(i)) && other->_list.contains(result->_list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces.length(); i++) {\n+    assert(_interfaces.contains(result->_interfaces.at(i)) && other->_interfaces.contains(result->_interfaces.at(i)), \"missing\");\n@@ -3476,1 +3479,1 @@\n-  if (_list.length() == 0) {\n+  if (_interfaces.length() == 0) {\n@@ -3481,2 +3484,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciInstanceKlass* interface = _list.at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciInstanceKlass* interface = _interfaces.at(i);\n@@ -3493,2 +3496,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* interface = _list.at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* interface = _interfaces.at(i);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":73,"deletions":70,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -880,1 +880,1 @@\n-  GrowableArray<ciInstanceKlass*> _list;\n+  GrowableArrayFromArray<ciInstanceKlass*> _interfaces;\n@@ -887,1 +887,0 @@\n-  void add(ciInstanceKlass* interface);\n@@ -891,2 +890,2 @@\n-  TypeInterfaces();\n-  TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces);\n+\n+  TypeInterfaces(ciInstanceKlass** interfaces_base, int nb_interfaces);\n@@ -907,1 +906,1 @@\n-  bool empty() const { return _list.length() == 0; }\n+  bool empty() const { return _interfaces.length() == 0; }\n@@ -913,0 +912,1 @@\n+  static int compare(ciInstanceKlass** k1, ciInstanceKlass** k2);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}