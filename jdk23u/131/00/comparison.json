{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.vm.annotation.DontInline;\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -859,0 +861,1 @@\n+    @ForceInline\n@@ -870,1 +873,1 @@\n-        return setAsTypeCache(asTypeUncached(newType));\n+        return setAsTypeCache(newType);\n@@ -888,1 +891,10 @@\n-    private MethodHandle setAsTypeCache(MethodHandle at) {\n+    \/*\n+     * We disable inlining here to prevent complex code in the slow path\n+     * of MethodHandle::asType from being inlined into that method.\n+     * Excessive inlining into MethodHandle::asType can cause that method\n+     * to become too big, which will then cause performance issues during\n+     * var handle and method handle calls.\n+     *\/\n+    @DontInline\n+    private MethodHandle setAsTypeCache(MethodType newType) {\n+        MethodHandle at = asTypeUncached(newType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang.foreign;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Proxy;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"-XX:-TieredCompilation\" })\n+public class LoopOverNonConstantAsType extends JavaLayouts {\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    static final int ELEM_SIZE = 1_000_000;\n+    static final int CARRIER_SIZE = (int)JAVA_LONG.byteSize();\n+    static final int ALLOC_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+\n+    @Param({\"false\", \"true\"})\n+    public boolean asTypeCompiled;\n+\n+    Arena arena;\n+    MemorySegment segment;\n+    long unsafe_addr;\n+\n+    @Setup\n+    public void setup() {\n+        unsafe_addr = unsafe.allocateMemory(ALLOC_SIZE);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putInt(unsafe_addr + (i * CARRIER_SIZE) , i);\n+        }\n+        arena = Arena.ofConfined();\n+        segment = arena.allocate(ALLOC_SIZE, 1);\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            VH_INT.set(segment, (long) i, i);\n+        }\n+        if (asTypeCompiled) {\n+            compileAsType();\n+        }\n+    }\n+\n+    public interface T { }\n+\n+    static final int TYPE_SIZE = 100;\n+    static final Class<?>[] types;\n+\n+    static {\n+        types = new Class<?>[TYPE_SIZE];\n+        ClassLoader customLoader = new URLClassLoader(new URL[0], LoopOverNonConstantAsType.class.getClassLoader());\n+        for (int i = 0 ; i < TYPE_SIZE ; i++) {\n+            types[i] = Proxy.newProxyInstance(customLoader,\n+                    new Class<?>[] { T.class }, (_, _, _) -> null).getClass();\n+        }\n+    }\n+\n+    void compileAsType() {\n+        for (Class<?> type : types) {\n+            MethodHandle handle = MethodHandles.zero(Object.class);\n+            Class<?>[] args = new Class<?>[254];\n+            Arrays.fill(args, Object.class);\n+            handle = MethodHandles.dropArguments(handle, 0, args);\n+            for (int j = 0; j < args.length ; j++) {\n+                handle = handle.asType(handle.type().changeParameterType(j, type));\n+            }\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        arena.close();\n+        unsafe.freeMemory(unsafe_addr);\n+    }\n+\n+    @Benchmark\n+    public long unsafe_loop() {\n+        long res = 0;\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            res += unsafe.getLong(unsafe_addr + (i * CARRIER_SIZE));\n+        }\n+        return res;\n+    }\n+\n+    @Benchmark\n+    public long segment_loop() {\n+        long sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += segment.get(JAVA_LONG, i * CARRIER_SIZE);\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantAsType.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}