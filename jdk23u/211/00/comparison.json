{"files":[{"patch":"@@ -53,3 +53,0 @@\n-        if (ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN) {\n-            throw new RuntimeException(\"fix test that was written for a little endian platform\");\n-        }\n@@ -80,0 +77,8 @@\n+    \/\/ Method to adjust the value for the native byte order\n+    static private long handleByteOrder(long value) {\n+        if (ByteOrder.nativeOrder() != ByteOrder.LITTLE_ENDIAN) {\n+            value = Long.reverseBytes(value);\n+        }\n+        return value;\n+    }\n+\n@@ -157,1 +162,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i, src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * i, handleByteOrder(src[i]));\n@@ -168,1 +173,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * i, src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * i, handleByteOrder(src[i]));\n@@ -178,1 +183,1 @@\n-            UNSAFE.putLongUnaligned(dest, base + 8 * i, src[i]);\n+            UNSAFE.putLongUnaligned(dest, base + 8 * i, handleByteOrder(src[i]));\n@@ -190,1 +195,1 @@\n-            UNSAFE.putLongUnaligned(dest, base + 8L * i, src[i]);\n+            UNSAFE.putLongUnaligned(dest, base + 8L * i, handleByteOrder(src[i]));\n@@ -210,1 +215,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i - 1), handleByteOrder(src[i]));\n@@ -221,1 +226,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i - 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i - 1), handleByteOrder(src[i]));\n@@ -239,1 +244,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + 1), handleByteOrder(src[i]));\n@@ -250,1 +255,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i + 1), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i + 1), handleByteOrder(src[i]));\n@@ -270,1 +275,1 @@\n-            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, src[i]);\n+            UNSAFE.putLongUnaligned(dest, 8 * i + baseOffset, handleByteOrder(src[i]));\n@@ -283,1 +288,1 @@\n-            UNSAFE.putLongUnaligned(dest, 8L * i + baseOffset, src[i]);\n+            UNSAFE.putLongUnaligned(dest, 8L * i + baseOffset, handleByteOrder(src[i]));\n@@ -302,1 +307,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8 * (i + baseOffset), handleByteOrder(src[i]));\n@@ -313,1 +318,1 @@\n-            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i + baseOffset), src[i]);\n+            UNSAFE.putLongUnaligned(dest, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 8L * (i + baseOffset), handleByteOrder(src[i]));\n@@ -457,1 +462,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8 * i, src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8 * i, handleByteOrder(src[i]));\n@@ -468,1 +473,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8L * i, src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8L * i, handleByteOrder(src[i]));\n@@ -485,1 +490,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8 * (i - 1), src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8 * (i - 1), handleByteOrder(src[i]));\n@@ -496,1 +501,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8L * (i - 1), src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8L * (i - 1), handleByteOrder(src[i]));\n@@ -513,1 +518,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8 * (i + 1), src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8 * (i + 1), handleByteOrder(src[i]));\n@@ -524,1 +529,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8L * (i + 1), src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8L * (i + 1), handleByteOrder(src[i]));\n@@ -543,1 +548,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8 * i + baseOffset, src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8 * i + baseOffset, handleByteOrder(src[i]));\n@@ -556,1 +561,1 @@\n-            UNSAFE.putLongUnaligned(null, dest + 8L * i + baseOffset, src[i]);\n+            UNSAFE.putLongUnaligned(null, dest + 8L * i + baseOffset, handleByteOrder(src[i]));\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestVectorizationMismatchedAccess.java","additions":28,"deletions":23,"binary":false,"changes":51,"status":"modified"}]}