{"files":[{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shenandoah\/shenandoahSimpleBitMap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahSimpleBitMap.inline.hpp\"\n@@ -46,2 +46,2 @@\n-  uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n-  uintx mask = ~right_n_bits(bit_number);\n+  uintx bit_number = start_idx & (BitsPerWord - 1);\n+  uintx mask = ~tail_mask(bit_number);\n@@ -57,1 +57,1 @@\n-    \/\/ Constant folding:                  bit_number = start_idx & right_n_bits(LogBitsPerWord);\n+    \/\/ Constant folding:                  bit_number = start_idx & (BitsPerWord - 1);\n@@ -73,1 +73,1 @@\n-  uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = last_idx & (BitsPerWord - 1);\n@@ -75,1 +75,1 @@\n-  uintx mask = right_n_bits(bit_number + 1);\n+  uintx mask = tail_mask(bit_number + 1);\n@@ -84,1 +84,1 @@\n-    \/\/ Constant folding:                  bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+    \/\/ Constant folding:                  bit_number = last_idx & (BitsPerWord - 1);\n@@ -102,1 +102,1 @@\n-    uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = start_idx & (BitsPerWord - 1);\n@@ -131,1 +131,1 @@\n-    uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = last_idx & (BitsPerWord - 1);\n@@ -164,1 +164,1 @@\n-  uintx bit_number = beg & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = beg & (BitsPerWord - 1);\n@@ -167,1 +167,1 @@\n-    uintx mask_out = right_n_bits(bit_number);\n+    uintx mask_out = tail_mask(bit_number);\n@@ -225,1 +225,1 @@\n-      bit_number = beg & right_n_bits(LogBitsPerWord);\n+      bit_number = beg & (BitsPerWord - 1);\n@@ -227,1 +227,1 @@\n-        size_t mask_out = right_n_bits(bit_number);\n+        size_t mask_out = tail_mask(bit_number);\n@@ -245,1 +245,1 @@\n-  uintx bit_number = end & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = end & (BitsPerWord - 1);\n@@ -248,1 +248,1 @@\n-    uintx mask_in = right_n_bits(bit_number + 1);\n+    uintx mask_in = tail_mask(bit_number + 1);\n@@ -283,1 +283,1 @@\n-      bit_number = end & right_n_bits(LogBitsPerWord);\n+      bit_number = end & (BitsPerWord - 1);\n@@ -286,1 +286,1 @@\n-        size_t mask_in = right_n_bits(bit_number + 1);\n+        size_t mask_in = tail_mask(bit_number + 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-\/\/ might be violatee through future software maintenance.\n+\/\/ might be violated through future software maintenance.\n@@ -87,1 +87,1 @@\n-    idx_t array_idx = idx & ~right_n_bits(LogBitsPerWord);\n+    idx_t array_idx = idx & ~(BitsPerWord - 1);\n@@ -110,1 +110,1 @@\n-    uintx bit_number = idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = idx & (BitsPerWord - 1);\n@@ -119,1 +119,1 @@\n-    uintx bit_number = idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = idx & (BitsPerWord - 1);\n@@ -128,1 +128,1 @@\n-    uintx bit_number = idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = idx & (BitsPerWord - 1);\n@@ -130,1 +130,1 @@\n-    return (_bitmap[array_idx] & the_bit)? true: false;\n+    return (_bitmap[array_idx] & the_bit) != 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,7 @@\n+inline uintx tail_mask(uintx bit_number) {\n+  if (bit_number >= BitsPerWord) {\n+    return -1;\n+  }\n+  return (uintx(1) << bit_number) - 1;\n+}\n+\n@@ -35,1 +42,1 @@\n-    uintx bit_number = beg & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = beg & (BitsPerWord - 1);\n@@ -38,1 +45,1 @@\n-      uintx mask_out = right_n_bits(bit_number);\n+      uintx mask_out = tail_mask(bit_number);\n@@ -65,1 +72,1 @@\n-    uintx bit_number = end & right_n_bits(LogBitsPerWord);\n+    uint8_t bit_number = end & (BitsPerWord - 1);\n@@ -68,1 +75,1 @@\n-      uintx mask_in = right_n_bits(bit_number + 1);\n+      uintx mask_in = tail_mask(bit_number + 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.inline.hpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}