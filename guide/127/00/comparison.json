{"files":[{"patch":"@@ -125,1 +125,1 @@\n-## File storage for OpenJDK artifacts - `cr.openjdk.java.net`\n+## File storage for OpenJDK artifacts - `cr.openjdk.org`\n@@ -127,1 +127,1 @@\n-The `cr.openjdk.java.net` server provides storage and display of code review materials such as webrevs and other artifacts related to the OpenJDK Community. This area can also be used to store design documents and other documentation related OpenJDK but not related to any specific project that have an OpenJDK wiki space for such purposes.\n+The `cr.openjdk.org` server provides storage and display of code review materials such as webrevs and other artifacts related to the OpenJDK Community. This area can also be used to store design documents and other documentation related OpenJDK but not related to any specific project that have an OpenJDK wiki space for such purposes.\n@@ -129,1 +129,1 @@\n-Any OpenJDK Author can publish materials on the `cr.openjdk.java.net` server. Users can upload files to temporary storage using secure methods (`rsync`, `scp`, and `sftp`).\n+Any OpenJDK Author can publish materials on the `cr.openjdk.org` server. Users can upload files to temporary storage using secure methods (`rsync`, `scp`, and `sftp`).\n@@ -133,0 +133,15 @@\n+### Get your SSH key installed\n+\n+To use `cr.openjdk.org` you'll need to get an SSH key installed. See [Generating an SSH key] for guidance on how to generate a key. Your public key (`~\/.ssh\/id_rsa.pub`) should be mailed as an attachment along with your JDK username to [keys@openjdk.org](mailto:keys@openjdk.org). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n+\n+::: {.note}\n+Users behind a SOCKS firewall can add a directive to the `~\/.ssh\/config` file to connect to the OpenJDK server:\n+\n+    Host *.openjdk.org\n+    ProxyCommand \/usr\/lib\/ssh\/ssh-socks5-proxy-connect -h [socks_proxy_address] %h %p\n+\n+See the `ssh-socks5-proxy-connect` man page and `ssh-config` man page for more information. Other systems may require proxy access via other programs. Some Linux distributions provide the `corkscrew` package which provides ssh access through HTTP proxies.\n+\n+**It's recommended that all users check with their network administrators before installing any kind of TCP forwarding tool on their network. Many corporations and institutions have strict security policies in this area.**\n+:::\n+\n","filename":"src\/guide\/working-with-pull-requests.md","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,295 +0,0 @@\n-# Working With the Legacy Mercurial Servers\n-\n-::: {.box}\n-[Quick Links]{.boxheader}\n-\n-* [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com\/)\n-* [OpenJDK Mercurial Server](https:\/\/hg.openjdk.java.net\/)\n-:::\n-\n-After the initial release of the JDK source code into OpenJDK in 2007 the OpenJDK project moved from TeamWare to using Mercurial. Starting in 2019 the source revision control has been moved to Git and GitHub. Even though most large projects have moved to Git by now, some still use the Mercurial servers. To access these projects some additional setup is required.\n-\n-::: {.note}\n-There used to be a sandbox repository that could be used for testing purposes. With the move to Git this has been replaced by GitHub Actions.\n-:::\n-\n-This document assumes familiarity with the first two chapters of the free on-line book [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com).\n-\n-## Installing and configuring Mercurial\n-\n-Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The OpenJDK repositories recommend installation of Mercurial 2.6.3 (or later). A Mercurial installation is sufficient to clone a repository. Contributors who wish to submit changes will need some additional configuration as described below.\n-\n-Once Mercurial is installed, create and edit the `~\/.hgrc` file to minimally contain the following entry:\n-\n-    [ui]\n-    username = <openjdk_username>\n-\n-_openjdk\\_username_ is in general the same as your GitHub user name. (See [Contributing to an OpenJDK Project] for more information.) If you don't have a GitHub user name, you choose your OpenJDK user name when you sign the OCA. The user name should be a plain lowercase, alphanumeric token (not an e-mail address) with twelve characters or less. The first character should be alphabetic. This username will be publicly visible in all Mercurial changeset logs. It will be used to verify that the changeset author is at least an [Author](https:\/\/openjdk.org\/bylaws#author) for the Project and that the person pushing the changeset is at least a [Committer](https:\/\/openjdk.org\/bylaws#committer). It's recommended that the _openjdk\\_username_ be somehow related to the Author's full name, such as the first character of the Author's first name followed by the Author's last name.\n-\n-Some Projects may recommend additional tools or scripts that help with repository manipulation and code development. For instance, in JDK 8u, the utility script `common\/bin\/hgforest.sh` may be used to apply commands to all the repositories in the forest. Some useful Mercurial extensions for OpenJDK developers are [jcheck](https:\/\/openjdk.org\/projects\/code-tools\/jcheck\/), [trees](https:\/\/openjdk.org\/projects\/code-tools\/trees\/), and [Mercurial Queues](http:\/\/hgbook.red-bean.com\/read\/managing-change-with-mercurial-queues.html) (mq). Note that `trees` is enabled on the OpenJDK Mercurial server.\n-\n-### Verifying the configuration\n-\n-After installing and configuring Mercurial, validate the configuration using the following steps.\n-\n-#. Verify that Mercurial is version 2.6.3 (or newer).\n-\n-       $ hg version\n-       Mercurial Distributed SCM (version 2.9)\n-       (see http:\/\/mercurial.selenic.com for more information)\n-\n-       Copyright (C) 2005-2014 Matt Mackall and others\n-       This is free software; see the source for copying conditions. There is NO\n-       warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n-\n-#. Verify that the list of enabled extensions includes fetch and mq.\n-\n-       $ hg help\n-\n-#. Verify that the `~\/.hgrc` configuration looks correct. Minimally it should contain the following entries:\n-\n-       $ hg showconfig\n-       ui.username=iris\n-\n-At this point, it should be possible to start retrieving source from the repositories.\n-\n-## Cloning a Mercurial repository\n-\n-Some Projects organized their code into multiple Mercurial repositories. For instance, [JDK 8](https:\/\/openjdk.org\/projects\/jdk8) uses a forest of multiple related repositories which contain components of the entire JDK. If a Project uses a forest, It's strongly recommended for developers to clone an entire forest, rather than a single repository. This is the only means to ensure consistency in builds. The following examples illustrate two alternatives for cloning the entire `jdk8u\/jdk8u-dev` forest into the directory `8u-dev`.\n-\n-#. To clone the forest using the [trees](https:\/\/openjdk.org\/projects\/code-tools\/trees\/) extension just use `tclone`:\n-\n-       $ hg tclone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/ 8u-dev\n-\n-#. To clone the forest using `get_source.sh`, first clone the main tree:\n-\n-       $ hg clone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/ 8u-dev\n-       requesting all changes\n-       adding changesets\n-       adding manifests\n-       adding file changes\n-       added 997 changesets with 1477 changes to 138 files\n-       updating to branch default\n-       82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-\n-   Then clone the repositories in the forest:\n-\n-       $ cd 8u-dev\n-       $ sh .\/get_source.sh\n-\n-Regardless of how the forest was cloned, this is the resulting populated forest.\n-\n-    $ ls\n-    ASSEMBLY_EXCEPTION  hotspot    LICENSE   README-builds.html\n-    common              jaxp       make      test\n-    configure           jaxws      Makefile  THIRD_PARTY_README\n-    corba               jdk        nashorn\n-    get_source.sh       langtools  README\n-\n-### Cloning a single repository {#cloneSingle}\n-\n-If the source for the Project is contained within a single repository or reading a limited portion of the source is the only goal, it's possible to clone a single repository (even if it's part of a forest). For instance, this example shows how to clone the `langtools` repository from `jdk8u\/jdk8u-dev` into the default destination directory.\n-\n-    $ hg clone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/langtools\n-    destination directory: langtools\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 2289 changesets with 21194 changes to 7004 files\n-    updating to branch default\n-    6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-\n-## Creating a Mercurial changeset\n-\n-The timing for creating a changeset is important. Creating the changeset long before it gets pushed into the parent repository may require complex merges. If a changeset is created before sufficient review or testing, a rollback may be required and a new changeset may be required to correct previous mistakes. The [mq extension](http:\/\/hgbook.red-bean.com\/hgbookch12.html#x16-26500012) is recommended for managing changes before they become committed to a changeset.\n-\n-In the examples below, the script `common\/bin\/hgforest.sh` can be used to apply the Mercurial command to all the repositories in the forest. So when you see `hg`, if you are dealing with one repository, just use \"`hg`\", if it's a forest, use \"`sh common\/bin\/hgforest.sh`\".\n-\n-Each repository in the forest is managed independently. After editing files in the individual cloned repositories of the forest, the `hg status` command may be used to see the changes in a single repository.\n-\n-    $ hg root\n-    \/u\/iris\/sandbox\/box\n-    $ hg status\n-    ? duke\/images\/DukeTubbingSmall.png\n-    $ hg add duke\/images\/DukeTubbingSmall.png\n-    $ hg status\n-    A duke\/images\/DukeTubbingSmall.png\n-\n-To see changes made to the repositories use `hg status`:\n-\n-    $ hg status\n-    [.]\n-    A duke\/images\/DukeTubbingSmall.png\n-\n-In this example, a new file `DukeTubbingSmall.png` was added to a new subdirectory.\n-\n-### Formatting a changeset comment\n-\n-A single change is described by a block of text of the following form:\n-\n-    <bugid>: <synopsis-of-symptom>\n-    Summary: <summary-of-code-change>\n-    Reviewed-by: <reviewer>+\n-    Contributed-by: <contributor-email>\n-\n-There may be more than one _bugid_ line, but there must be at least one.\n-\n-The _summary_ line is optional, but authors are strongly encouraged to include one if the nature of the change isn't obvious from the synopsis. It's just one line, meant to give the reader a clue as to how the code changed. A more complete description of the change belongs in the bug report.\n-\n-A _reviewed-by_ line is required. Reviewers must have the ability to deal with any adverse consequences of the change, and so must themselves be authors. They are therefore identified by their OpenJDK usernames rather than full e-mail addresses.\n-\n-The _contributed-by_ line is optional. If present, it's a list of comma-separated email addresses. It should be included only when the author of the\n-change doesn't have commit rights to the target repository and thus would not otherwise receive acknowledgment, or when there are multiple authors.\n-\n-There will be exceptions for merge changesets, tag changesets, etc.\n-\n-Example:\n-\n-    1234567: NPE thrown on FileInputStream(\"\")\n-    Summary: Rewrite precondition-checking code in io.c\n-    Reviewed-by: mr\n-    Contributed-by: Ben Bitdiddle <ben at bits.org>\n-\n-If a changeset contains multiple unrelated changes (this is frowned upon, but may happen from time to time) then its comment will contain multiple blocks of the above form, separated by blank lines.\n-\n-The required format of the comments will be enforced whenever the changeset is pushed into the JDK forests. Other Projects may copy these conventions, adopt some other conventions, or have no conventions, depending upon their goals.\n-\n-### Committing a changeset\n-\n-The following commands commit all of the changes in a repository to a changeset.\n-\n-    $ cat ..\/message\n-    1111111: Missing Duke gif\n-    Summary:  Add missing file\n-    Reviewed-by: iag\n-    $ hg commit -l ..\/message\n-    $ hg toutgoing\n-    [.]\n-    comparing with http:\/\/hg.openjdk.java.net\/sandbox\/box\n-    searching for changes\n-    changeset:   23:fb12953f3a35\n-    tag:         tip\n-    user:        iris\n-    date:        Wed Dec 12 21:05:59 2007 -0800\n-    summary:     1111111: Missing Duke gif\n-\n-## Merging Mercurial changesets\n-\n-It's often necessary to merge local changes with those made in the parent repositories. The first step in a merge process is to retrieve (or pull) the collection of changesets which have been pushed since the last merge or initial clone. If there if there are merge conflicts, then they must be resolved. [Chapter 3](http:\/\/hgbook.red-bean.com\/hgbookch3.html#x7-530003) of the Mercurial book contains detailed information on the merging process.\n-\n-There are two basic ways to update the working set files in the repositories:\n-\n-Option 1: `hg pull`\n-\n-> One way to merge the parent repository with the working set of files is to use `hg pull` all by itself. This option allows merging off-line or at a later time.\n->\n->     $ hg pull\n->     [.]\n->     pulling from http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n->     searching for changes\n->     no changes found\n->\n-> In Mercurial, pulling changesets will not update or merge into the working set of files. To update the clone, run `hg update`. If the update reports conflicts, run `hg merge` to resolve them.\n-\n-Option 2: `hg fetch`\n-\n-> Alternatively, use `hg fetch` to pull the changes, update the working set files, and create simple merge changesets as necessary. The fetch extension is distributed with Mercurial but needs to be enabled. Edit the `.hgrc` to include the following entries:\n->\n->     [extensions]\n->     fetch=\n->\n-> Once the fetch extension has been enabled, `hg fetch` may be invoked as follows:\n->\n->     $ hg fetch\n->     [.]\n->     pulling from http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n->     searching for changes\n->     no changes found\n-\n-> ---\n->\n-> Actual file merging will be done with the selected Mercurial merging tool see [MergeProgram](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/MergeProgram) for the details on how to define the selected merge tool in ` ~\/.hgrc`.\n->\n-> ---\n-\n-## Pushing Mercurial changesets\n-\n-In order to push changesets into the parent repository, some additional configuration is required. The following sections describe the operations that will be performed by users with push access.\n-\n-### Get your SSH key installed\n-\n-First you should create a new SSH key. See [Generating an SSH key] for guidance on how to do that. Your public key (`~\/.ssh\/id_rsa.pub`) should be mailed as an attachment along with your JDK username to [keys@openjdk.org](mailto:keys@openjdk.org). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n-\n-::: {.note}\n-Users behind a SOCKS firewall can add a directive to the `~\/.ssh\/config` file to connect to the OpenJDK Mercurial server:\n-\n-    Host *.openjdk.org\n-    ProxyCommand \/usr\/lib\/ssh\/ssh-socks5-proxy-connect -h [socks_proxy_address] %h %p\n-\n-See the `ssh-socks5-proxy-connect` man page and `ssh-config` man page for more information. Other systems may require proxy access via other programs. Some Linux distributions provide the `corkscrew` package which provides ssh access through HTTP proxies.\n-\n-**It's recommended that all users check with their network administrators before installing any kind of TCP forwarding tool on their network. Many corporations and institutions have strict security policies in this area.**\n-:::\n-\n-### Setting the `default-push` path to the server repositories\n-\n-This is the typical development model:\n-\n-::: {style=\"text-align:center;\"}\n-~~~{.mermaid caption=\"Diagram of server repos and user's clone\" format=svg theme=neutral}\n-graph TD\n-    subgraph hg.openjdk.java.net\n-        origin(jdk8u\/jdk8u-dev)\n-    end\n-    origin --> |clone| local(8u-dev)\n-    local --> |push| origin\n-~~~\n-:::\n-\n-Changesets need to be _pushed_ via ssh to the read\/write repository which resides on the OpenJDK Mercurial server. The easiest way to do this is to have each repository define the \"default-push\" path in every repository's `.hg\/hgrc` file. The `.hg\/hgrc` file isn't a managed file - it's private to the repository. The following example defines the \"default\" and \"default-push\" paths for clones of the `jdk8u\/jdk8u-dev` repository.\n-\n-    [paths]\n-    default = http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n-    default-push = ssh:\/\/<JDK_username>@hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n-\n-Given a `JDK_username` this simple script will attempt to do this for all the repositories:\n-\n-    #!\/bin\/sh\n-    username=$1\n-    hgdirs=\"`find . -type d -name .hg`\"\n-    for i in ${hgdirs}; do\n-      d=\"`dirname ${i}`\"\n-      defpush=\"`(cd ${d} && hg paths default-push 2> \/dev\/null)`\"\n-      if [ \"${defpush}\" = \"\" ] ; then\n-        defpath=\"`(cd ${d} && hg paths default 2> \/dev\/null)`\"\n-        if [ \"${defpath}\" != \"\" ] ; then\n-          defpush=\"`echo ${defpath} | sed -e 's@http:\/\/\\([^\/]*\/[^\/]*\/[^\/]*\\)\/\\(.*\\)@ssh:\/\/$username\\@\\1\/\\2@'`\"\n-          cp ${i}\/hgrc ${i}\/hgrc.orig\n-          echo \"default-push = ${defpush}\" >> ${i}\/hgrc\n-          echo \"Added default-push: ${defpush}\"\n-        fi\n-      fi\n-    done\n-    for i in ${hgdirs}; do\n-      d=\"`dirname ${i}`\"\n-      echo \"(cd ${d} && hg paths)\"\n-      (cd ${d} && hg paths)\n-    done\n-    exit 0\n-\n-### Performing the push\n-\n-[Committers](https:\/\/openjdk.org\/bylaws#committer) can use the `hg push` command to propagate changesets into the repositories.\n-\n-Most developers will only find a need to create changesets in one or two repositories. However, it's important that before any changesets are pushed, the corresponding forest pull and merge with the destination forest be performed; otherwise there is a risk of breaking the build.\n-\n-    $ hg push\n-\n-After the push has been accepted, an automatic e-mail notification will be sent to the [mailing list](https:\/\/mail.openjdk.org) associated with the repository. In most cases notifications are sent to the Project's _-dev_ mailing list. Some Projects with high traffic _-dev_ mailing lists use a dedicated _-changes_ list for notifications.\n-\n-In general all of a Project's [Committers](https:\/\/openjdk.org\/bylaws#committer) can push to all of the the Project's repositories. However, some Projects may chose to restrict the set of Committers with push to key repositories. For instance, JDK Release Projects restrict push access to MASTER repositories to Committers who are either integrators or members of the Release Engineering Team. See [Becoming a Committer] for information about becoming a Project Committer.\n-\n-::: {.box}\n-[To the top](#){.boxheader}\n-:::\n","filename":"src\/guide\/working-with-the-legacy-mercurial-servers.md","additions":0,"deletions":295,"binary":false,"changes":295,"status":"deleted"},{"patch":"@@ -17,1 +17,0 @@\n-working-with-the-legacy-mercurial-servers.md\n","filename":"src\/toc.conf","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}