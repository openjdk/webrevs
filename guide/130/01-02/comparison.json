{"files":[{"patch":"@@ -19,0 +19,2 @@\n+When choosing what words to use, keep in mind that a large portion of the audience isn't native English speakers. Always try to keep the language easy to understand and avoid niche words and local terminology if possible. That said, the language must also be precise to avoid mixing up different concepts. For instance the git term `push` is only used when talking about pushes to a private clone of a Project repository. When talking about the Project repositories themselves we use the Skara term `integrate` since developers can't push directly to these repositories.\n+\n@@ -57,1 +59,0 @@\n-* Text about triage, priorities, status\n","filename":"README.md","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-Many [OpenJDK Projects](https:\/\/openjdk.org\/bylaws#project) require a tracking issue to be filed in the [JDK Bug System (JBS)](https:\/\/bugs.openjdk.org\/) before a change can be pushed. This is the case for instance for the JDK and the JDK Updates Projects. In order to obtain write access to JBS you need to be an [Author](https:\/\/openjdk.org\/bylaws#author) in an [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) (see [Becoming an Author]). For your first changes, ask your sponsor to help you create the issue or file the bug through the [Bug Report Tool](https:\/\/bugreport.java.com\/).\n+Many [OpenJDK Projects](https:\/\/openjdk.org\/bylaws#project) require a tracking issue to be filed in the [JDK Bug System (JBS)](https:\/\/bugs.openjdk.org\/) before a change can be integrated. This is the case for instance for the JDK and the JDK Updates Projects. In order to obtain write access to JBS you need to be an [Author](https:\/\/openjdk.org\/bylaws#author) in an [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) (see [Becoming an Author]). For your first changes, ask your sponsor to help you create the issue or file the bug through the [Bug Report Tool](https:\/\/bugreport.java.com\/).\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-See [Working With Pull Requests] for generic guidance and requirements around pushing changes. For the HotSpot codebase there are a few additional requirements:\n+See [Working With Pull Requests] for generic guidance and requirements around integrating changes. For the HotSpot codebase there are a few additional requirements:\n","filename":"src\/guide\/hotspot-development.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-Becoming an [Author](https:\/\/openjdk.org\/bylaws#author) is the first step. To achieve this you need to contribute two changes to the [Project](https:\/\/openjdk.org\/bylaws#project) in which you wish to become an [Author](https:\/\/openjdk.org\/bylaws#author). Once your changes are pushed into the code base and has been vetted enough to determine that the changes were indeed good changes you can go ahead and send an email to the Project lead of that particular [Project](https:\/\/openjdk.org\/bylaws#project) and ask to be added as an [Author](https:\/\/openjdk.org\/bylaws#author). Note that \"the [Project](https:\/\/openjdk.org\/bylaws#project)\" is not OpenJDK, but rather the specific [development Project](https:\/\/openjdk.org\/bylaws#project) where you did your contributions (e.g. \"JDK\", \"JDK Updates\", \"Amber\", etc). The [OpenJDK Project description](https:\/\/openjdk.org\/projects\/#project-author) has a template for such an email. In short the email should contain your name, the Project name, your email address, and GitHub links to your changes. In response to your email you will get a time-limited invite which you should fill out.\n+Becoming an [Author](https:\/\/openjdk.org\/bylaws#author) is the first step. To achieve this you need to contribute two changes to the [Project](https:\/\/openjdk.org\/bylaws#project) in which you wish to become an [Author](https:\/\/openjdk.org\/bylaws#author). Once your changes are integrated into the code base and has been vetted enough to determine that the changes were indeed good changes you can go ahead and send an email to the Project lead of that particular [Project](https:\/\/openjdk.org\/bylaws#project) and ask to be added as an [Author](https:\/\/openjdk.org\/bylaws#author). Note that \"the [Project](https:\/\/openjdk.org\/bylaws#project)\" is not OpenJDK, but rather the specific [development Project](https:\/\/openjdk.org\/bylaws#project) where you did your contributions (e.g. \"JDK\", \"JDK Updates\", \"Amber\", etc). The [OpenJDK Project description](https:\/\/openjdk.org\/projects\/#project-author) has a template for such an email. In short the email should contain your name, the Project name, your email address, and GitHub links to your changes. In response to your email you will get a time-limited invite which you should fill out.\n@@ -48,1 +48,1 @@\n-To become a [Committer](https:\/\/openjdk.org\/bylaws#committer) you should show that you intend to actively contribute to the [Project](https:\/\/openjdk.org\/bylaws#project) and that you can produce non-trivial changes that are accepted for inclusion into the Project code base. The number eight has been seen as a formal lower limit on the number of changes, but since the changes must be non-trivial, or \"significant\" as the [OpenJDK Project description](https:\/\/openjdk.org\/projects\/) says, and the definition of significant is subjective, the general recommendation is to wait with a [Committer](https:\/\/openjdk.org\/bylaws#committer) nomination until there's at least 10-12 changes pushed to have some margin for different interpretations of \"significant\". In practice though, we have seen several examples where the number of significant changes hasn't been the dominating factor in a [Committer](https:\/\/openjdk.org\/bylaws#committer) vote. A [Contributor's](https:\/\/openjdk.org\/bylaws#contributor) work in another [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) may also be relevant for the vote. What the vote should ultimately test is the [Contributor's](https:\/\/openjdk.org\/bylaws#contributor) commitment to the [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) for which the vote applies - is it believed that the person is dedicated and willing to spend time and effort on the [Project](https:\/\/openjdk.org\/bylaws#project)? Is the person believed to be a good citizen of the [Project](https:\/\/openjdk.org\/bylaws#project)? It's always a good idea to seek the advice of a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) who can guide you through the process to becoming a [Committer](https:\/\/openjdk.org\/bylaws#committer) - you will need one to run the Committer vote anyway. They will probably also have a better idea of what constitutes a \"significant\" change.\n+To become a [Committer](https:\/\/openjdk.org\/bylaws#committer) you should show that you intend to actively contribute to the [Project](https:\/\/openjdk.org\/bylaws#project) and that you can produce non-trivial changes that are accepted for inclusion into the Project code base. The number eight has been seen as a formal lower limit on the number of changes, but since the changes must be non-trivial, or \"significant\" as the [OpenJDK Project description](https:\/\/openjdk.org\/projects\/) says, and the definition of significant is subjective, the general recommendation is to wait with a [Committer](https:\/\/openjdk.org\/bylaws#committer) nomination until there's at least 10-12 changes integrated to have some margin for different interpretations of \"significant\". In practice though, we have seen several examples where the number of significant changes hasn't been the dominating factor in a [Committer](https:\/\/openjdk.org\/bylaws#committer) vote. A [Contributor's](https:\/\/openjdk.org\/bylaws#contributor) work in another [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) may also be relevant for the vote. What the vote should ultimately test is the [Contributor's](https:\/\/openjdk.org\/bylaws#contributor) commitment to the [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) for which the vote applies - is it believed that the person is dedicated and willing to spend time and effort on the [Project](https:\/\/openjdk.org\/bylaws#project)? Is the person believed to be a good citizen of the [Project](https:\/\/openjdk.org\/bylaws#project)? It's always a good idea to seek the advice of a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) who can guide you through the process to becoming a [Committer](https:\/\/openjdk.org\/bylaws#committer) - you will need one to run the Committer vote anyway. They will probably also have a better idea of what constitutes a \"significant\" change.\n@@ -52,1 +52,1 @@\n-A [Committer](https:\/\/openjdk.org\/bylaws#committer) is allowed to push changes without the aid of a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor). A [Committer](https:\/\/openjdk.org\/bylaws#committer) is also allowed to nominate other non-Committers to become [Committers](https:\/\/openjdk.org\/bylaws#committer) in the [Project](https:\/\/openjdk.org\/bylaws#project).\n+A [Committer](https:\/\/openjdk.org\/bylaws#committer) is allowed to integrate changes without the aid of a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor). A [Committer](https:\/\/openjdk.org\/bylaws#committer) is also allowed to nominate other non-Committers to become [Committers](https:\/\/openjdk.org\/bylaws#committer) in the [Project](https:\/\/openjdk.org\/bylaws#project).\n","filename":"src\/guide\/introduction.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -297,4 +297,0 @@\n-### Closing issues without knowing what fixed it\n-\n-If it's determined that an issue has been fixed, but it's unknown what change that fixed it, closing as [Fixed]{.jbs-value} is not an option as this requires a changeset in a project repository. [Duplicate]{.jbs-value} is also not an option since this requires a duplicate-link to the issue that fixed it. A common way to handle such cases is to close the issue as [Delivered]{.jbs-value} with the [Fix version\/s]{.jbs-value} set to [unknown]{.jbs-value}. Closing an issue as [Cannot Reproduce]{.jbs-value} has also been common practice but is no longer recommended if it's known that the issue has actually been fixed.\n-\n@@ -313,0 +309,4 @@\n+### Closing issues without knowing what fixed it\n+\n+If it's determined that an issue has been fixed, but it's unknown what change that fixed it, closing as [Fixed]{.jbs-value} is not an option as this requires a changeset in a project repository. [Duplicate]{.jbs-value} is also not an option since this requires a duplicate-link to the issue that fixed it. A common way to handle such cases is to close the issue as [Delivered]{.jbs-value} with the [Fix version\/s]{.jbs-value} set to [unknown]{.jbs-value}. Closing an issue as [Cannot Reproduce]{.jbs-value} has also been common practice but is no longer recommended if it's known that the issue has actually been fixed.\n+\n","filename":"src\/guide\/jbs-jdk-bug-system.md","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-### Test before push\n+### Test before integration\n@@ -68,1 +68,1 @@\n-Regardless of if you encountered conflicts or not, you should always build and test your merge before pushing it to your Project repository. Testing needs to be done even when there are no textual conflicts as changes like for instance a rename can result in a compile or test error without any conflict. One could argue that `git merge --no-commit` could be used and have logical errors fixed in the merge commit. However, a subsequent \"Fix logical merge errors\" commit, is in fact more useful, as it clearly shows the Project specific adjustments needed for incoming changes.\n+Regardless of if you encountered conflicts or not, you should always build and test your merge before integrating it to your Project repository. Testing needs to be done even when there are no textual conflicts as changes like for instance a rename can result in a compile or test error without any conflict. One could argue that `git merge --no-commit` could be used and have logical errors fixed in the merge commit. However, a subsequent \"Fix logical merge errors\" commit, is in fact more useful, as it clearly shows the Project specific adjustments needed for incoming changes.\n@@ -87,1 +87,1 @@\n-Whether a merge requires a review or not is up to your Project lead to decide. Many [Projects](https:\/\/openjdk.org\/bylaws#project) don't require this so the GitHub bots will allow you to push the merge as soon as the [GHA](#github-actions)s are done. (They actually allow you to push even before the GHAs are done, but that's in general not a good idea.)\n+Whether a merge requires a review or not is up to your Project lead to decide. Many [Projects](https:\/\/openjdk.org\/bylaws#project) don't require this so the GitHub bots will allow you to integrate the merge as soon as the [GHA](#github-actions)s are done. (They actually allow you to integrate even before the GHAs are done, but that's in general not a good idea.)\n@@ -127,1 +127,1 @@\n-* Merge up to the previous change, commit and push.\n+* Merge up to the previous change, commit and integrate.\n","filename":"src\/guide\/project-maintenance.md","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-The release note itself is written in a [JBS](#jbs---jdk-bug-system) sub-task of the issue that is used to push the change. There are a few steps to follow for the release note to find its way from JBS to the actual release note document.\n+The release note itself is written in a [JBS](#jbs---jdk-bug-system) sub-task of the issue that is used to integrate the change. There are a few steps to follow for the release note to find its way from JBS to the actual release note document.\n@@ -24,1 +24,1 @@\n-#. Create a sub-task (More &rightarrow; Create Sub-Task) for the issue that requires a release note - the main issue, that is, the JBS issue that is used to push the original change, **not** for backports or the CSR (if there is one).\n+#. Create a sub-task (More &rightarrow; Create Sub-Task) for the issue that requires a release note - the main issue, that is, the JBS issue that is used to integrate the original change, **not** for backports or the CSR (if there is one).\n","filename":"src\/guide\/release-notes.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-Please note that what's mentioned later in this section, like [GHA](#github-actions) and tier 1 testing, will only run a set of smoke-tests to ensure your change compiles and runs on a variety of platforms. They won't do any targeted testing on the particular code you have changed. You must always make sure your change works as expected before pushing, using targeted testing. In general all changes should come with a regression test, so if you're writing product code you should also be writing test code. Including the new tests (in the right places) in your change will ensure your tests will be run as part of your testing on all platforms and in the future.\n+Please note that what's mentioned later in this section, like [GHA](#github-actions) and tier 1 testing, will only run a set of smoke-tests to ensure your change compiles and runs on a variety of platforms. They won't do any targeted testing on the particular code you have changed. You must always make sure your change works as expected before integrating, using targeted testing. In general all changes should come with a regression test, so if you're writing product code you should also be writing test code. Including the new tests (in the right places) in your change will ensure your tests will be run as part of your testing on all platforms and in the future.\n@@ -190,1 +190,1 @@\n-Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as [Duplicate]{.jbs-value} or [Won't Fix]{.jbs-value}. jcheck will report an error and prohibit a push if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n+Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as [Duplicate]{.jbs-value} or [Won't Fix]{.jbs-value}. jcheck will report an error and prohibit an integration if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n@@ -303,1 +303,1 @@\n-If a change causes a regression that can't be fixed within reasonable time, the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is pushed to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git or Mercurial.\n+If a change causes a regression that can't be fixed within reasonable time, the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is integrated to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git or Mercurial.\n","filename":"src\/guide\/testing-the-jdk.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -23,1 +23,1 @@\n-It's likely that other people have pushed changes to the code base since you created your branch. Make sure to pull the latest changes and rebase your fix on top of that before creating your PR. This is a courtesy issue. Your reviewers shouldn't have to read your patch on top of old code that has since changed. This is hopefully obvious in cases where the upstream code has gone through cleanups or refactorings, and your patch may need similar cleanups in order to even compile. But even in cases where only smaller changes have been done, the reviewers shouldn't have to react to issues like \"that line of code was moved last week, why is it back there?\".\n+It's likely that other people have integrated changes to the code base since you created your branch. Make sure to pull the latest changes and rebase your fix on top of that before creating your PR. This is a courtesy issue. Your reviewers shouldn't have to read your patch on top of old code that has since changed. This is hopefully obvious in cases where the upstream code has gone through cleanups or refactorings, and your patch may need similar cleanups in order to even compile. But even in cases where only smaller changes have been done, the reviewers shouldn't have to react to issues like \"that line of code was moved last week, why is it back there?\".\n@@ -59,0 +59,4 @@\n+#. **Make sure you target the correct branch**\n+\n+   Many project repositories have several branches. Make sure your PR targets the correct one. This is of course especially important when not targeting the default branch. At the top of your PR, right below the title, it will say \"NNN wants to merge X commit(s) into [branch]\". Typical red flags to watch out for are if your PR seems to include commits or changed files that shouldn't be part of your integration. E.g. Seeing the \"Start of release updates for JDK N\" when backporting something to JDK N-1 is a bad sign.\n+\n@@ -79,1 +83,1 @@\n-   In general all PRs should be open for at least 24 hours to allow for reviewers in all time zones to get a chance to see it. It may actually happen that even 24 hours isn't enough. Take into account weekends, holidays, and vacation times throughout the world and you'll realize that a change that requires more than just a trivial review may have to be open for a while. In some areas [trivial] changes are allowed to be pushed without the 24 hour delay. Ask your reviewers if you think this applies to your change.\n+   In general all PRs should be open for at least 24 hours to allow for reviewers in all time zones to get a chance to see it. It may actually happen that even 24 hours isn't enough. Take into account weekends, holidays, and vacation times throughout the world and you'll realize that a change that requires more than just a trivial review may have to be open for a while. In some areas [trivial] changes are allowed to be integrated without the 24 hour delay. Ask your reviewers if you think this applies to your change.\n@@ -109,1 +113,1 @@\n-   After you have integrated your change you are expected to stay around in case there are any issues with it. As mentioned above, you are expected to have run all relevant testing on your change before integrating your PR, but regardless of how thorough you test it, things might slip through. After your change has been integrated an automatic pipeline of tests is triggered and your change will be tested on a variety of platforms and in a variety of different modes that the JDK can be executed in. A change that causes failures in this testing may be backed out if a fix can't be provided fast enough, or if the developer isn't responsive when noticed about the failure. Note that this directive should be interpreted as \"it's a really bad idea to push a change the last thing you do before bedtime, or the day before going on vacation\".\n+   After you have integrated your change you are expected to stay around in case there are any issues with it. As mentioned above, you are expected to have run all relevant testing on your change before integrating your PR, but regardless of how thorough you test it, things might slip through. After your change has been integrated an automatic pipeline of tests is triggered and your change will be tested on a variety of platforms and in a variety of different modes that the JDK can be executed in. A change that causes failures in this testing may be backed out if a fix can't be provided fast enough, or if the developer isn't responsive when noticed about the failure. Note that this directive should be interpreted as \"it's a really bad idea to integrate a change the last thing you do before bedtime, or the day before going on vacation\".\n","filename":"src\/guide\/working-with-pull-requests.md","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}