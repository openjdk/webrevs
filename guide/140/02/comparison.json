{"files":[{"patch":"@@ -53,1 +53,1 @@\n-When you sign the OCA, please make sure that you specify your GitHub user name in the `Username` field of the OCA. If you try to create a PR before you have signed the OCA, or if you didn't specify your GitHub user name, you'll get instructions telling you to do so, and the PR won't be published until this is done. OCA registration is a manual process. Please allow for up to several days to have your OCA application processed, even though it's normally processed swiftly.\n+When you sign the OCA, please make sure that you specify your GitHub user name in the `Username` field of the OCA. If you try to create a PR before you have signed the OCA, or if you didn't specify your GitHub user name, you'll get instructions telling you to do so, and the PR won't be published until this is done. OCA registration is a manual process. Please allow for up to several days to have your OCA application processed, even though it's normally processed swiftly. An alphabetical list of all of the assigned OpenJDK usernames can be found on the [OpenJDK people](https:\/\/db.openjdk.org\/people) list.\n@@ -61,1 +61,1 @@\n-### 3. Find a sponsor\n+### 3. Find a Sponsor\n@@ -63,1 +63,1 @@\n-Socializing your change on the mailing lists also prevents the surprise that would otherwise make the community choke on their morning coffee when they see a huge patch in a new, unknown PR. As a new developer in the community you'll need to make a few friends that agree with your change. There are many good reasons to make friends, but the one relevant here is that for your first changes you'll need a sponsor to facilitate the integration of your work. The sponsor will perform any number of administrative tasks like JBS updates, additional testing, etc. It's usual for a sponsor to also be a reviewer of a change and thus familiar with it, but it's not a requirement.\n+Socializing your change on the mailing lists also prevents the surprise that would otherwise make the community choke on their morning coffee when they see a huge patch in a new, unknown PR. As a new developer in the community you'll need to make a few friends that agree with your change. There are many good reasons to make friends, but the one relevant here is that for your first changes you'll need a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) to facilitate the integration of your work. The [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) will perform any number of administrative tasks like JBS updates, additional testing, etc. It's usual for a [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) to also be a reviewer of a change and thus familiar with it, but it's not a requirement.\n@@ -67,1 +67,1 @@\n-Many [OpenJDK Projects](https:\/\/openjdk.org\/bylaws#project) require a tracking issue to be filed in the [JDK Bug System (JBS)](https:\/\/bugs.openjdk.org\/) before a change can be integrated. This is the case for instance for the JDK and the JDK Updates Projects. In order to obtain write access to JBS you need to be an [Author](https:\/\/openjdk.org\/bylaws#author) in an [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) (see [Becoming an Author]). For your first changes, ask your sponsor to help you create the issue or file the bug through the [Bug Report Tool](https:\/\/bugreport.java.com\/).\n+Many [OpenJDK Projects](https:\/\/openjdk.org\/bylaws#project) require a tracking issue to be filed in the [JDK Bug System (JBS)](https:\/\/bugs.openjdk.org\/) before a change can be integrated. This is the case for instance for the JDK and the JDK Updates Projects. In order to obtain write access to JBS you need to be an [Author](https:\/\/openjdk.org\/bylaws#author) in an [OpenJDK Project](https:\/\/openjdk.org\/bylaws#project) (see [Becoming an Author]). For your first changes, ask your [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) to help you create the issue or file the bug through the [Bug Report Tool](https:\/\/bugreport.java.com\/).\n@@ -71,1 +71,1 @@\n-Even though we strive to unify how things are done within OpenJDK, different areas and [Projects](https:\/\/openjdk.org\/bylaws#project) in OpenJDK may have slight variations in how they work. Some of these differences are highlighted throughout this guide, some aren't. If you're new to an area, make sure you understand local differences before you proceed. Ask your sponsor who should be your main point of contact through your first developer experience in OpenJDK.\n+Even though we strive to unify how things are done within OpenJDK, different areas and [Projects](https:\/\/openjdk.org\/bylaws#project) in OpenJDK may have slight variations in how they work. Some of these differences are highlighted throughout this guide, some aren't. If you're new to an area, make sure you understand local differences before you proceed. Ask your [Sponsor](https:\/\/openjdk.org\/bylaws#sponsor) who should be your main point of contact through your first developer experience in OpenJDK.\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+  * All issues of type [Bug]{.jbs-value} must have the [Affects Version\/s]{.jbs-field} set. It's not a bug if it doesn't affect some version.\n@@ -86,0 +87,5 @@\n+\n+:::{.note}\n+Note that the [Affects Version\/s]{.jbs-field} field is mainly used for bugs and bug-like tasks\/sub-tasks etc. In general enhancements and enhancement-like tasks\/sub-tasks should not have an [Affects Version\/s]{.jbs-field}.\n+:::\n+\n","filename":"src\/guide\/jbs-jdk-bug-system.md","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-If a change causes a regression that can't be fixed within reasonable time, the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is integrated to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git or Mercurial.\n+If a change causes a regression that can't be fixed within reasonable time, the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is integrated to effectively undo the change in the repository. Whether to back out a change or not will always be a judgement call. How noisy and frequent are the failures caused by the broken change? How soon can the fix be expected? If you want to avoid having your change backed out, you should make sure to let the relevant developers know that you are working on the fix and give an estimated ETA of the fix.\n@@ -305,1 +305,5 @@\n-The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically generated. In areas where two reviewers are normally required, only one additional [Reviewer](https:\/\/openjdk.org\/bylaws#reviewer) is required for a backout since the person who is performing the backout also will review the change.\n+It will happen of course when the build is broken or the JDK is DOA and similar situations that a change is immediately backed out without further investigation. Backing out a change is however seldom the first course of action if the change has been done in accordance with the guidance in [Working With Pull Requests]. If, when investigated, it is found that a change didn't go through relevant testing or there are other issues that should have been caught before integration if proper procedure had been followed, it's quite possible that a change is backed out even if the author is desperately working on a fix. The JDK source code is deliberately menat to have a high bar for acceptance of changes. If something crawls in underneath that bar it should most likely be backed out.\n+\n+The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically generated. In areas where two reviewers are normally required, only one [Reviewer](https:\/\/openjdk.org\/bylaws#reviewer) is required for a backout since the person who is performing the backout also should review the change.\n+\n+There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git.\n","filename":"src\/guide\/testing-the-jdk.md","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}