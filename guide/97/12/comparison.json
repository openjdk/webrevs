{"files":[{"patch":"@@ -49,1 +49,1 @@\n-Oracle is the steward of OpenJDK. In order to make your patch available for review you must first sign the [Oracle Contributor Agreement](https:\/\/oca.opensource.oracle.com\/) (OCA). This agreement gives Oracle and you as a contributor joint copyright interests in the code. You will retain your copyright while also granting those rights to Oracle.\n+Like many other open-source communities, the OpenJDK Community requires Contributors to jointly assign their copyright on contributed code. Oracle is the steward of OpenJDK and if you haven't yet signed the [Oracle Contributor Agreement](https:\/\/oca.opensource.oracle.com\/) (OCA), and are not covered by a company-level agreement, then please do so. This is required in order to make your patch available for review. The OCA gives Oracle and you as a Contributor joint copyright interests in the code. You will retain your copyright while also granting those rights to Oracle.\n@@ -53,0 +53,2 @@\n+You only need to sign the OCA once in order to cover all changes that you might contribute to any Oracle-sponsored open-source community. If you've already signed the OCA or the former SCA (Sun Contributor Agreement) for any Oracle-sponsored open-source community, then you do not need to sign it again in order to contribute to OpenJDK. Please note that you don't need to sign an OCA if you work at Oracle or a company which has negotiated an equivalent agreement.\n+\n@@ -79,1 +81,1 @@\n-Java and the JDK are very popular products, and just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this.\n+Just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. The goal is not to take in the maximum number of contributions possible, but rather to accept only the highest-quality contributions. The JDK is used daily by millions of people and thousands of businesses, often in mission-critical applications, and so every change must be scrutinized in detail. There are many reasons for this.\n@@ -99,0 +101,4 @@\n+If you're relatively new to the Java platform then we recommend that you gain more experience writing Java applications before you attempt to work on the JDK itself. The purpose of the sponsored-contribution process is to bring developers who already have the skills required to work on the JDK into the existing development community. The members of that community have neither the time nor the patience required to teach basic Java programming skills or platform implementation techniques.\n+\n+The feature releases currently under development are in the JDK Project. Most development work is focused on the newest release, so generally you should be working against the latest JDK sources rather than the JDK Updates sources.\n+\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-To become a [Committer](https:\/\/openjdk.org\/bylaws#committer) you should show that you intend to actively contribute to the project and that you can produce non-trivial changes that are accepted for inclusion into the project code base. The number eight has been seen as a formal lower limit on the number of changes, but since the changes must be non-trivial, or \"significant\" as the [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/) says, and the definition of significant is subjective, the general recommendation is to wait with a Committer nomination until there's at least 10-12 changes pushed to have some margin for different interpretations of \"significant\". In practice though, we have seen several examples where the number of significant changes hasn't been the dominating factor in a Committer vote. A contributor's work in another OpenJDK project may also be relevant for the vote. What the vote should ultimately test is the committer's commitment to the OpenJDK project for which the vote applies - is it believed that the person is dedicated and willing to spend time and effort on the project? Is the person believed to be a good citizen of the project? It's always a good idea to seek the advice of a sponsor who can guide you through the process to becoming a Committer - you will need one to run the Committer vote anyway. They will probably also have a better idea of what constitutes a \"significant\" change.\n+To become a [Committer](https:\/\/openjdk.org\/bylaws#committer) you should show that you intend to actively contribute to the project and that you can produce non-trivial changes that are accepted for inclusion into the project code base. The number eight has been seen as a formal lower limit on the number of changes, but since the changes must be non-trivial, or \"significant\" as the [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/) says, and the definition of significant is subjective, the general recommendation is to wait with a Committer nomination until there's at least 10-12 changes pushed to have some margin for different interpretations of \"significant\". In practice though, we have seen several examples where the number of significant changes hasn't been the dominating factor in a Committer vote. A Contributor's work in another OpenJDK project may also be relevant for the vote. What the vote should ultimately test is the Contributor's commitment to the OpenJDK project for which the vote applies - is it believed that the person is dedicated and willing to spend time and effort on the project? Is the person believed to be a good citizen of the project? It's always a good idea to seek the advice of a sponsor who can guide you through the process to becoming a Committer - you will need one to run the Committer vote anyway. They will probably also have a better idea of what constitutes a \"significant\" change.\n","filename":"src\/guide\/introduction.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-First set up your personal fork of the project repository, in this example called `my-project`. If you already are a contributor to the project you most likely have this set up. If not, see [Cloning the JDK] for details on how to do that.\n+First set up your personal fork of the project repository, in this example called `my-project`. If you already are a Contributor to the project you most likely have this set up. If not, see [Cloning the JDK] for details on how to do that.\n@@ -101,1 +101,1 @@\n-When conflicts take place in areas requiring specialized knowledge you may need help from other contributors. Backing up the original conflicts will help if you find yourself \"in too deep\", and need assistance from other contributors. You can add and later remove these backups, along with a readme describing the merge status, to the actual merge branch to aid communication (i.e. you may not be able to compile certain components).\n+When conflicts take place in areas requiring specialized knowledge you may need help from other Contributors. Backing up the original conflicts will help if you find yourself \"in too deep\", and need assistance from other Contributors. You can add and later remove these backups, along with a readme describing the merge status, to the actual merge branch to aid communication (i.e. you may not be able to compile certain components).\n@@ -113,1 +113,1 @@\n-\"Park\" the conflicts, unresolved, in a personal fork, and let others do the further work (by sending you a patch, or opening your personal fork up to push from other contributors). Do this by keeping a list of unresolved conflicts (perhaps checking in said list to describe the merge state), and then marking them as resolved in git, committing, and pushing them to your personal fork. E.g. `git add $UNRESOLVED_FILES; git commit; git push`\n+\"Park\" the conflicts, unresolved, in a personal fork, and let others do the further work (by sending you a patch, or opening your personal fork up to push from other Contributors). Do this by keeping a list of unresolved conflicts (perhaps checking in said list to describe the merge state), and then marking them as resolved in git, committing, and pushing them to your personal fork. E.g. `git add $UNRESOLVED_FILES; git commit; git push`\n@@ -129,1 +129,1 @@\n-* Rinse and repeat: There may appear further conflicts requiring other contributors help.\n+* Rinse and repeat: There may appear further conflicts requiring other Contributors help.\n","filename":"src\/guide\/project-maintenance.md","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+# Reviewing and Sponsoring a Change\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [GitHub Docs on pull requests reviews](https:\/\/docs.github.com\/en\/pull-requests\/collaborating-with-pull-requests\/reviewing-changes-in-pull-requests\/about-pull-request-reviews)\n+:::\n+\n+Two of the most important contributions you can make in the OpenJDK community are to review and sponsor changes for other developers. All changes needs to be reviewed. Many changes even need to be reviewed by more than one person. This means that in order to enable a fast-pased development experience, all developers need to review more changes then they produce themself.\n+\n+If you are new to an area, reviewing changes is also a great way to learn the code and see what general styles and types of changes that are relevant in the area. Be mindful though, if you don't know the area well you should state this in your review comments. As a **R**eviewer you have a responsibility to make sure changes are sound and aline with the general direction of the area. If you, as a **R**eviever, review a change in an area that you don't know well you probably shouldn't be the one to approve the change.\n+\n+New developers in the OpenJDK community don't have the permissions needed to integrate changes to the repositories. This is a feature that ensures that all developers get familiar with the code, processes, and community before being allowed to actually make changes. To get their first changes in, the new Contributor needs the help of a Sponsor. The Sponsor's role is to offer constructive advice and eventually integrate the sponsored contribution into the repository.\n+\n+Sponsoring new contributions is an important activity - it's how the engineering culture of a project gets passed on from the core group to new Contributors, from one generation to the next. Take pride in the value you provide to Contributors. Their success reflects well on you.\n+\n+As a **R**eviewer, Contributors will look up to you for guidance to get their contributions into the project - your actions will determine whether Contributors will feel welcome and want to engage further with the project beyond their initial attempt, or not. Let's not lose enthusiastic, engaged and technically competent Contributors due to a lack of communication. If you see a request in your area of expertise and you can't address it, at least acknowledge receipt of the request and provide an estimate for when you'll be able to give it your attention. A frank explanation of your time constraints or commitments will be appreciated and respected.\n+\n+There are many different reasons to sponsor a change and depending on the situation the exact steps involved may differ significantly. An experienced developer hired into a larger team of OpenJDK developers is likely to get much of the required information by osmosis and will likely need less help from a sponsor than the enthusiast sitting at home with no prior experience of large scale software development. This text aims to highlight the steps involved in sponsoring a change but can't cover all possible scenarios. As always, common sense takes precedence where the assumptions made here doesn't apply to your use case.\n+\n+## Reviewing a change on GitHub\n+\n+Code reviews in OpenJDK happens on [GitHub](https:\/\/github.com\/openjdk). This guide will hint at the most common steps to perform a review but it's not a complete documentation of all features. For official documentation see the [GitHub Docs](https:\/\/docs.github.com\/en\/pull-requests\/collaborating-with-pull-requests\/reviewing-changes-in-pull-requests\/about-pull-request-reviews).\n+\n+When you arrive at a pull request there are a few different sections that you can browse through, Conversation, Commits, Checks, and Files changed. We will look at the first and the last of these.\n+\n+### Conversation\n+\n+The Conversation section is where all discussion around the PR happens. Note that this section is intended for technical discussion around the actual implementation of a change. This is in general not the place to discuss the appropriateness of the change or have overarching design discussions, that should happen on the appropriate [mailing lists]. Yes, PR comments will be sent to the mailing lists as well, but it's unlikely that all the right people will see it. PR mails sent to the mailing lists will have a subject indicating that it's about the specific implementation in the PR. If the discussion is larger than just about the specific implementation, for instance around the design or future of the feature, then a much larger audience needs to be made aware of the discussion. A separate email thread with a proper subject is preferred in such cases.\n+\n+You can either reply to existing comments by using the text field beneath each comment, or add a new comment by scrolling to the bottom of the page and use the larger text field where it says \"Leave a comment\".\n+\n+Reviews take time for everyone involved. Your opinions are much appreciated as long as they are on-topic and of a constructive nature. A comment of the form \"I don't like this\" won't help anyone to improve the change. Instead express what it is that you don't like and give examples of how to do it differently. Always be polite and make sure you read through all previous comments before adding your own, the answer you are looking for may already have been given.\n+\n+:::{.note}\n+Note that GitHub will collapse comments if there are many of them, and if an issue is marked as resolved. This means that you have to be observant and may have to dig around a bit to find all comments in the PR.\n+:::\n+\n+Never ask the author of a change to fix unrelated issues in the code that you find during your review. Such issues should be handled through a separate JBS issue and PR.\n+\n+### Files changed\n+\n+The Files changed-section is where the actual change is presented. On the left hand side there's a list of all files changed. This is useful to get a quick overview and to see if the change touches an area that you need to review.\n+\n+The diff view is pretty straight forward, red stuff has been removed, green stuff has been added. You can configure (among other things) if you want a unified diff or a split view, if you want to hide whitespace changes, what types of files you want to show, and if you want to show the entire change or just what's happened since your last review.\n+\n+When you hover the text in the change a blue square with a plus sign pops up to the left of the line. Click it to add a comment about the change on the corresponding line. When you create your first comment you have the option to simply add a single comment or to start a review. In general you want to start a review so that all your comments are gathered in the same context when emails are sent out etc. You can also attach a comment to a file rather than to a specific line in the file by using the speech bubble icon at the top right.\n+\n+When a complete file has been reviewed there's a \"viewed\" checkbox at the top right that can be used to hide the files that you are done with. This is useful for changes that involve many files.\n+\n+Once you have looked through all the changes and added all your comments, the green button at the top right of the screen \"Review changes\" is used to finish your review. You can add a final comment to sum up your findings and then choose whether you just want to provide your comments, if you want to approve the changes, or request that changes are done before the change can be approved. Finally click \"Submit review\" to publish your thoughts.\n+\n+## Volunteering to sponsor a contribution\n+\n+In an ideal situation opportunities to sponsor contributions occur in the OpenJDK mail lists. Since Contributors are encouraged to discuss their intended changes before they submit a patch, the ideal time to declare your sponsorship is during that initial conversation. As a Sponsor you should offer advice and collaborate with the Contributor as necessary to produce a high-quality patch. In addition to sponsoring changes to code you regularly maintain, there may be other areas where you can serve as a Sponsor.\n+\n+After publicly committing to sponsoring a contribution, you need to \"claim the sponsorship request\" in [JBS](#jbs---jdk-bug-system) unless the Contributor already has a JBS account and can assign the bug to themself. To do that you need to perform three steps:\n+\n+* Assign the bug to yourself.\n+* Add a comment providing the name of the Contributor and a summary of the approach to solving the problem.\n+* Set the bug's [Status]{.jbs-field} to [In Progress]{.jbs-value}.\n+\n+If the contribution doesn't already have an associated OpenJDK bug then create one in [JBS](#jbs---jdk-bug-system).\n+\n+It should be noted that claiming the sponsorship can take many other forms. In cases where a change has been discussed, or a starter bug has been picked up and fixed even though a sponsor hasn't been identified yet it may be as simple as just showing up at the PR and sponsor the change once it's been reviewed.\n+\n+## Responsibilities of a sponsor\n+\n+As a sponsor, you aren't technically required to review the change, other Reviewers may already have looked at it or signed up to review. But it will be your name on the commit so you should do whatever you feel is needed to be comfortable with that. You may need to work with the Contributor to make any necessary changes, until you and the Contributor are satisfied with the result, and you are satisfied that the proposed contribution will pass any relevant review and testing. That may take more than one iteration in the worst case. You may also need to help out with any process or practical questions around the OCA, GitHub PRs, and specific requirements in the area or project.\n+\n+To integrate the change the Contributor should use the command `\/integrate` on the PR as prompted by the bots. Once that is done, you as a sponsor enter the command `\/sponsor` in a comment on the PR.\n+\n+Once the change has been integrated you may need to keep an eye out for any reported test failures and be prepared to investigate if such failures stem from the change you sponsored, and if so, work with the Contributor to resolve the issue.\n+\n+::: {.box}\n+[To the top](#){.boxheader}\n+:::\n","filename":"src\/guide\/reviewing-and-sponsoring-a-change.md","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -12,0 +12,1 @@\n+reviewing-and-sponsoring-a-change.md\n","filename":"src\/toc.conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}