{"files":[{"patch":"@@ -11,0 +11,6 @@\n+## Requesting a change\n+\n+If you want to request a change to the JDK, but don't have the intention to implement\/contribute to the change yourself, you should always report it at [bugreport.java.com](bugreport.java.com). This is also the case if you find a change that you would like to see backported to an earlier JDK release. **Never** reach out directly to any developer. Also, please note that the [OpenJDK mailing lists](#mailing-lists) are intended for developers and contributors. These lists are not support channels or channels for requesting changes.\n+\n+Before you file an issue, make sure you have read [Things to consider before proposing changes to OpenJDK code](#things-to-consider-before-proposing-changes-to-openjdk-code) and [Why is my change rejected?](#why-is-my-change-rejected) below.\n+\n@@ -35,0 +41,9 @@\n+## I found an issue in JBS that I want to fix\n+\n+Great! This is a good way to get started with OpenJDK development. There are a few things you should think about before getting started.\n+\n+- As with any change, do bring it up for discussion on the [mailing lists](#mailing-lists) before spending time on the fix. Even though the issue has been filed in JBS there may be reasons not to fix that particular issue right now.\n+- Never work on an issue that is assigned to someone else. Duplicating work is pointless. If you think that an issue should be fixed and it has been assinged to someone for a long time without progress, reach out to that person and ask what the current status is. Many issues requires a lot of thought, and there may be half-baked solutions that you can build on to avoid the traps the initial developer has already fallen into.\n+\n+Once you are the assignee of an issue, continue reading [I have a patch, what do I do?](#i-have-a-patch-what-do-i-do) below. (Ideally before you have a patch.)\n+\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+   * Please note that issues in the [hotspot]{.jbs-value} and [security-libs]{.jbs-value} components must have a [Subcomponent]{.jbs-field} set as well.\n@@ -651,1 +652,1 @@\n-      The [noreg-]{.jbs-label}`.*` and [nounit-]{.jbs-label}`.*` labels are used to explain why a bugfix doesn't need\/have a regression test or a unit test. The suffix of the label is described below.\n+      The [noreg-]{.jbs-label}`.*` and [nounit-]{.jbs-label}`.*` labels are used to explain why a change doesn't need\/have a regression test or a unit test. The suffix of the label is described below. Every change that is integrated into the JDK source code must either have a regression\/unit test, or have at least one of these labels on its JBS issue. It's quite possible to have more than one of these labels on the same issue. For instance, an integration could contain both changes to documentation and test code. In that case it would be logical to label the issue with both [noreg-doc]{.jbs-label} and [noreg-self]{.jbs-label}.\n@@ -657,1 +658,1 @@\n-:    Change can be verified by running an existing SQE test suite; the bug should identify the suite and the specific test case(s).\n+:    Change can be verified by running an existing jtreg test suite; the bug should identify the suite and the specific test case(s).\n","filename":"src\/guide\/jbs-jdk-bug-system.md","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-There are a few examples where it doesn't make sense to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n+There are a few cases where it doesn't make sense to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n","filename":"src\/guide\/testing-the-jdk.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}