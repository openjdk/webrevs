{"files":[{"patch":"@@ -314,7 +314,0 @@\n-void Assembler::ifence() {\n-  fence_i();\n-  if (UseConservativeFence) {\n-    fence(ir, ir);\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -320,1 +320,0 @@\n-  void ifence();\n@@ -899,1 +898,0 @@\n-  INSN(fence_i, 0b0001111, 0b001, 0b000000000000);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-  \/\/ fence_i + fence* + (lui, addi, slli, addi, slli, addi) + (lui, addi, slli, addi, slli) + jalr\n-  return NativeFenceI::instruction_size() + 12 * NativeInstruction::instruction_size;\n+  \/\/ (lui, addi, slli, addi, slli, addi) + (lui, addi, slli, addi, slli) + jalr\n+  return 12 * NativeInstruction::instruction_size;\n@@ -101,1 +101,1 @@\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+    = nativeMovConstReg_at(stub);\n@@ -122,1 +122,1 @@\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+    = nativeMovConstReg_at(stub);\n@@ -142,1 +142,1 @@\n-    = nativeMovConstReg_at(stub + NativeFenceI::instruction_size());\n+    = nativeMovConstReg_at(stub);\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-          \"Extend i for r and o for w in the pred\/succ flags of fence;\"          \\\n-          \"Extend fence.i to fence.i + fence.\")                                  \\\n+          \"Extend i for r and o for w in the pred\/succ flags of fence\")          \\\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  os::icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));\n+  __builtin___clear_cache(addr, addr + (lines << ICache::log2_line_size));\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -568,1 +568,0 @@\n-  ifence();\n@@ -1694,1 +1693,0 @@\n-  \/\/ Using immediate literals would necessitate fence.i.\n@@ -2783,1 +2781,0 @@\n-  verify_cross_modify_fence_not_required();\n@@ -3052,1 +3049,0 @@\n-  verify_cross_modify_fence_not_required();\n@@ -4210,26 +4206,0 @@\n-\n-void MacroAssembler::safepoint_ifence() {\n-  ifence();\n-#ifndef PRODUCT\n-  if (VerifyCrossModifyFence) {\n-    \/\/ Clear the thread state.\n-    sb(zr, Address(xthread, in_bytes(JavaThread::requires_cross_modify_fence_offset())));\n-  }\n-#endif\n-}\n-\n-#ifndef PRODUCT\n-void MacroAssembler::verify_cross_modify_fence_not_required() {\n-  if (VerifyCrossModifyFence) {\n-    \/\/ Check if thread needs a cross modify fence.\n-    lbu(t0, Address(xthread, in_bytes(JavaThread::requires_cross_modify_fence_offset())));\n-    Label fence_not_required;\n-    beqz(t0, fence_not_required);\n-    \/\/ If it does then fail.\n-    la(t0, RuntimeAddress(CAST_FROM_FN_PTR(address, JavaThread::verify_cross_modify_fence_failure)));\n-    mv(c_rarg0, xthread);\n-    jalr(t0);\n-    bind(fence_not_required);\n-  }\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-  \/\/ Place a fence.i after code may have been modified due to a safepoint.\n-  void safepoint_ifence();\n-\n@@ -850,3 +847,0 @@\n-  \/\/ Check the current thread doesn't need a cross modify fence.\n-  void verify_cross_modify_fence_not_required() PRODUCT_RETURN;\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-\/\/ - - NativeFenceI\n@@ -556,8 +555,0 @@\n-class NativeFenceI : public NativeInstruction {\n-public:\n-  static inline int instruction_size() {\n-    \/\/ 2 for fence.i + fence\n-    return (UseConservativeFence ? 2 : 1) * NativeInstruction::instruction_size;\n-  }\n-};\n-\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -357,4 +357,0 @@\n-  \/\/ Explicit fence.i required because fixup_callers_callsite may change the code\n-  \/\/ stream.\n-  __ safepoint_ifence();\n-\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,4 +57,0 @@\n-  asm volatile(\"fence.i\" : : : \"memory\");\n-  if (UseConservativeFence) {\n-    asm volatile(\"fence ir, ir\" : : : \"memory\");\n-  }\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/orderAccess_linux_riscv.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}