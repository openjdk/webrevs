{"files":[{"patch":"@@ -269,1 +269,19 @@\n-  enum { instruction_size = 4 };\n+  enum {\n+    instruction_size = 4,\n+    compressed_instruction_size = 2,\n+  };\n+\n+  \/\/ instruction must start at passed address\n+  static bool is_compressed_instr(address instr) {\n+    \/\/ The RISC-V ISA Manual, Section 'Base Instruction-Length Encoding':\n+    \/\/ Instructions are stored in memory as a sequence of 16-bit little-endian parcels, regardless of\n+    \/\/ memory system endianness. Parcels forming one instruction are stored at increasing halfword\n+    \/\/ addresses, with the lowest-addressed parcel holding the lowest-numbered bits in the instruction\n+    \/\/ specification.\n+    if (UseRVC && (((uint16_t *)instr)[0] & 0b11) != 0b11) {\n+      \/\/ 16-bit instructions have their lowest two bits equal to 0b00, 0b01, or 0b10\n+      return true;\n+    }\n+    \/\/ 32-bit instructions have their lowest two bits set to 0b11\n+    return false;\n+  }\n@@ -274,1 +292,3 @@\n-  static unsigned int instr_len(unsigned char *instr) { return instruction_size; }\n+  static unsigned int instr_len(address instr) {\n+    return is_compressed_instr(instr) ? compressed_instruction_size : instruction_size;\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"}]}