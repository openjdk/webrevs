{"files":[{"patch":"@@ -33,1 +33,1 @@\n-  os::icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));\n+  __builtin___clear_cache(addr, addr + (lines << ICache::log2_line_size));\n","filename":"src\/hotspot\/cpu\/riscv\/icache_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,19 +40,0 @@\n-  \/\/ SYSCALL_RISCV_FLUSH_ICACHE is used to flush instruction cache. The \"fence.i\" instruction\n-  \/\/ only work on the current hart, so kernel provides the icache flush syscall to flush icache\n-  \/\/ on each hart. You can pass a flag to determine a global or local icache flush.\n-  static void icache_flush(long int start, long int end)\n-  {\n-    const int SYSCALL_RISCV_FLUSH_ICACHE = 259;\n-    register long int __a7 asm (\"a7\") = SYSCALL_RISCV_FLUSH_ICACHE;\n-    register long int __a0 asm (\"a0\") = start;\n-    register long int __a1 asm (\"a1\") = end;\n-    \/\/ the flush can be applied to either all threads or only the current.\n-    \/\/ 0 means a global icache flush, and the icache flush will be applied\n-    \/\/ to other harts concurrently executing.\n-    register long int __a2 asm (\"a2\") = 0;\n-    __asm__ volatile (\"ecall\\n\\t\"\n-                      : \"+r\" (__a0)\n-                      : \"r\" (__a0), \"r\" (__a1), \"r\" (__a2), \"r\" (__a7)\n-                      : \"memory\");\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"}]}