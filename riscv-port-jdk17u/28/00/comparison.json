{"files":[{"patch":"@@ -667,2 +667,2 @@\n-  INSN(_beq, 0b1100011, 0b000);\n-  INSN(_bne, 0b1100011, 0b001);\n+  INSN(beq, 0b1100011, 0b000);\n+  INSN(bne, 0b1100011, 0b001);\n@@ -885,1 +885,1 @@\n-  INSN(_jal, 0b1101111);\n+  INSN(jal, 0b1101111);\n@@ -2107,7 +2107,6 @@\n-\/\/ 1. When UseRVC is enabled, 32-bit instructions under 'CompressibleRegion's will be\n-\/\/    transformed to 16-bit instructions if compressible.\n-\/\/ 2. RVC instructions in Assembler always begin with 'c_' prefix, as 'c_li',\n-\/\/    but most of time we have no need to explicitly use these instructions.\n-\/\/ 3. 'CompressibleRegion' is introduced to hint instructions in this Region's RTTI range\n-\/\/    are qualified to be compressed with their 2-byte versions.\n-\/\/    An example:\n+\/\/ 1. Assembler functions encoding 16-bit compressed instructions always begin with a 'c_'\n+\/\/    prefix, such as 'c_add'. Correspondingly, assembler functions encoding normal 32-bit\n+\/\/    instructions with begin with a '_' prefix, such as \"_add\". Most of time users have no\n+\/\/    need to explicitly emit these compressed instructions. Instead, they still use unified\n+\/\/    wrappers such as 'add' which do the compressing work through 'c_add' depending on the\n+\/\/    the operands of the instruction and availability of the RVC hardware extension.\n@@ -2115,2 +2114,3 @@\n-\/\/      CompressibleRegion cr(_masm);\n-\/\/      __ andr(...);      \/\/ this instruction could change to c.and if able to\n+\/\/ 2. 'CompressibleRegion' and 'IncompressibleRegion' are introduced to mark assembler scopes\n+\/\/     within which instructions are qualified or unqualified to be compressed into their 16-bit\n+\/\/     versions. An example:\n@@ -2118,2 +2118,10 @@\n-\/\/ 4. Using -XX:PrintAssemblyOptions=no-aliases could distinguish RVC instructions from\n-\/\/    normal ones.\n+\/\/      CompressibleRegion cr(_masm);\n+\/\/      __ add(...);       \/\/ this instruction will be compressed into 'c.and' when possible\n+\/\/      {\n+\/\/         IncompressibleRegion ir(_masm);\n+\/\/         __ add(...);    \/\/ this instruction will not be compressed\n+\/\/         {\n+\/\/            CompressibleRegion cr(_masm);\n+\/\/            __ add(...); \/\/ this instruction will be compressed into 'c.and' when possible\n+\/\/         }\n+\/\/      }\n@@ -2121,0 +2129,2 @@\n+\/\/ 3. When printing JIT assembly code, using -XX:PrintAssemblyOptions=no-aliases could help\n+\/\/    distinguish compressed 16-bit instructions from normal 32-bit ones.\n@@ -2129,2 +2139,2 @@\n-  \/\/ a compressible region\n-  class CompressibleRegion : public StackObj {\n+  \/\/ an abstract compressible region\n+  class AbstractCompressibleRegion : public StackObj {\n@@ -2134,2 +2144,2 @@\n-  public:\n-    CompressibleRegion(Assembler *_masm)\n+  protected:\n+    AbstractCompressibleRegion(Assembler *_masm)\n@@ -2137,1 +2147,6 @@\n-    , _saved_in_compressible_region(_masm->in_compressible_region()) {\n+    , _saved_in_compressible_region(_masm->in_compressible_region()) {}\n+  };\n+  \/\/ a compressible region\n+  class CompressibleRegion : public AbstractCompressibleRegion {\n+  public:\n+    CompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n@@ -2144,0 +2159,10 @@\n+  \/\/ an incompressible region\n+  class IncompressibleRegion : public AbstractCompressibleRegion {\n+  public:\n+    IncompressibleRegion(Assembler *_masm) : AbstractCompressibleRegion(_masm) {\n+      _masm->set_in_compressible_region(false);\n+    }\n+    ~IncompressibleRegion() {\n+      _masm->set_in_compressible_region(_saved_in_compressible_region);\n+    }\n+  };\n@@ -2844,20 +2869,0 @@\n-\/\/ --------------------------\n-\/\/ Conditional branch instructions\n-\/\/ --------------------------\n-#define INSN(NAME, C_NAME, NORMAL_NAME)                                                      \\\n-  void NAME(Register Rs1, Register Rs2, const int64_t offset) {                              \\\n-    \/* beq\/bne -> c.beqz\/c.bnez *\/                                                           \\\n-    if (do_compress() &&                                                                     \\\n-        (offset != 0 && Rs2 == x0 && Rs1->is_compressed_valid() &&                           \\\n-        is_imm_in_range(offset, 8, 1))) {                                                    \\\n-      C_NAME(Rs1, offset);                                                                   \\\n-      return;                                                                                \\\n-    }                                                                                        \\\n-    NORMAL_NAME(Rs1, Rs2, offset);                                                           \\\n-  }\n-\n-  INSN(beq, c_beqz, _beq);\n-  INSN(bne, c_bnez, _bne);\n-\n-#undef INSN\n-\n@@ -2866,15 +2871,0 @@\n-\/\/ --------------------------\n-#define INSN(NAME)                                                                           \\\n-  void NAME(Register Rd, const int32_t offset) {                                             \\\n-    \/* jal -> c.j *\/                                                                         \\\n-    if (do_compress() && offset != 0 && Rd == x0 && is_imm_in_range(offset, 11, 1)) {        \\\n-      c_j(offset);                                                                           \\\n-      return;                                                                                \\\n-    }                                                                                        \\\n-    _jal(Rd, offset);                                                                        \\\n-  }\n-\n-  INSN(jal);\n-\n-#undef INSN\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":44,"deletions":54,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -345,0 +345,1 @@\n+  IncompressibleRegion ir(this);  \/\/ keep the nop as 4 bytes for patching.\n@@ -346,1 +347,1 @@\n-  nop();\n+  nop();  \/\/ 4 bytes\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -241,0 +241,2 @@\n+  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see entry_barrier_offset()\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -248,0 +248,1 @@\n+    IncompressibleRegion ir(this);  \/\/ the label address will be patched back.\n@@ -556,0 +557,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see CompiledStaticCall::to_interp_stub_size().\n@@ -760,0 +762,1 @@\n+  IncompressibleRegion ir(this);   \/\/ the label address may be patched back.\n@@ -2462,0 +2465,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see MacroAssembler::far_branch_size()\n@@ -2479,0 +2483,1 @@\n+  IncompressibleRegion ir(this);  \/\/ Fixed length: see MacroAssembler::far_branch_size()\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -394,0 +394,1 @@\n+  Assembler::IncompressibleRegion ir(&a);  \/\/ Fixed length: see NativeGeneralJump::get_instruction_size()\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1328,2 +1328,5 @@\n-  MacroAssembler::assert_alignment(__ pc());\n-  __ nop();\n+  {\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ keep the nop as 4 bytes for patching.\n+    MacroAssembler::assert_alignment(__ pc());\n+    __ nop();  \/\/ 4 bytes\n+  }\n@@ -1673,0 +1676,1 @@\n+  Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see BoxLockNode::size()\n@@ -2226,0 +2230,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2258,0 +2263,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2276,0 +2282,1 @@\n+    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1210,2 +1210,5 @@\n-    MacroAssembler::assert_alignment(__ pc());\n-    __ nop();\n+    {\n+      Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+      MacroAssembler::assert_alignment(__ pc());\n+      __ nop();  \/\/ 4 bytes\n+    }\n@@ -1430,2 +1433,5 @@\n-  MacroAssembler::assert_alignment(__ pc());\n-  __ nop();\n+  {\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n+    MacroAssembler::assert_alignment(__ pc());\n+    __ nop();  \/\/ 4 bytes\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}