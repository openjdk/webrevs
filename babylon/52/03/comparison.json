{"files":[{"patch":"@@ -209,4 +209,5 @@\n-        \/\/ lambda class has no access to the resolved method. Instead, we need\n-        \/\/ to pass the live implementation method handle to the proxy class\n-        \/\/ to invoke directly. (javac prefers to avoid this situation by\n-        \/\/ generating bridges in the target class)\n+        \/\/ lambda class has no access to the resolved method, or does\n+        \/\/ 'invokestatic' on a hidden class which cannot be resolved by name.\n+        \/\/ Instead, we need to pass the live implementation method handle to\n+        \/\/ the proxy class to invoke directly. (javac prefers to avoid this\n+        \/\/ situation by generating bridges in the target class)\n@@ -215,1 +216,2 @@\n-                               implKind == H_INVOKESPECIAL;\n+                               implKind == H_INVOKESPECIAL ||\n+                               implKind == H_INVOKESTATIC && implClass.isHidden();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -112,3 +112,1 @@\n-            hcl = l.in(l.defineClass(classBytes));\n-\/\/ @@@ lambdas do not work in hidden classes\n-\/\/            hcl = l.defineHiddenClass(classBytes, true);\n+            hcl = l.defineHiddenClass(classBytes, true);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8330467\n@@ -182,0 +183,14 @@\n+    \/\/ Define a hidden class that uses lambda and contains its implementation\n+    \/\/ This verifies LambdaMetaFactory supports the caller which is a hidden class\n+    @Test\n+    public void testHiddenLambda() throws Throwable {\n+        HiddenTest t = (HiddenTest)defineHiddenClass(\"HiddenLambda\").newInstance();\n+        try {\n+            t.test();\n+        } catch (Error e) {\n+            if (!e.getMessage().equals(\"thrown by \" + t.getClass().getName())) {\n+                throw e;\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/BasicTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.function.Function;\n+\n+public class HiddenLambda implements HiddenTest {\n+     public void test() {\n+         Function<Object, String> f = o -> o.toString();\n+         String s = f.apply(this);\n+         throw new Error(\"thrown by \" + s);\n+     }\n+\n+     public String toString() {\n+         return getClass().getName();\n+     }\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/HiddenLambda.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n-         Function<Object, String> f = Object::toString;\n+         Function<Object, String> f = o -> o.toString();\n","filename":"test\/jdk\/java\/lang\/invoke\/defineHiddenClass\/src\/Lambda.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}