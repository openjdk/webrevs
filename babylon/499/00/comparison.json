{"files":[{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -3,3 +27,0 @@\n-import hat.KernelContext;\n-import hat.buffer.S32Array;\n-import hat.ifacemapper.MappableIface;\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/terminal\/CodeModelFormatter.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -147,1 +147,0 @@\n-                        \/\/      case BabylonTextModel.BabylonRefAttribute _ -> babylonRefAttribute;\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/AbstractTextModelViewer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,5 +27,0 @@\n-import hat.KernelContext;\n-import hat.buffer.S32Array;\n-import hat.buffer.S32Array2D;\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.dialect.core.CoreOp;\n@@ -34,0 +29,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -38,1 +34,0 @@\n-import javax.swing.JSplitPane;\n@@ -49,1 +44,0 @@\n-import java.lang.reflect.Method;\n@@ -70,1 +64,1 @@\n-\/\/ So we can overlay with arrows for\n+                \/\/ So we can overlay with arrows for\n@@ -156,3 +150,0 @@\n-        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\n-        splitPane.setOneTouchExpandable(true);\n-        splitPane.setResizeWeight(0.5);\n@@ -160,1 +151,2 @@\n-        var font = new Font(\"Monospaced\", Font.PLAIN, 16);\n+        var font = new Font(\"Monospaced\", Font.PLAIN, 14);\n+\n@@ -163,2 +155,5 @@\n-        splitPane.add(funcOpTextModelViewer.scrollPane);\n-        splitPane.add(javaTextModelViewer.scrollPane);\n+\n+        var gutter = new TextGutter(  funcOpTextModelViewer,javaTextModelViewer);\n+        add(funcOpTextModelViewer.scrollPane);\n+        add(gutter);\n+        add(javaTextModelViewer.scrollPane);\n@@ -194,1 +189,0 @@\n-        add(splitPane);\n@@ -198,9 +192,9 @@\n-        SwingUtilities.invokeLater(() -> {\n-            var viewer = new FuncOpViewer(crDoc);\n-            var frame = new JFrame();\n-            frame.setLayout(new BorderLayout());\n-            frame.getContentPane().add(viewer);\n-            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-            frame.pack();\n-            frame.setVisible(true);\n-        });\n+            SwingUtilities.invokeLater(() -> {\n+                var viewer = new FuncOpViewer(crDoc);\n+                var frame = new JFrame();\n+                frame.setLayout(new BorderLayout());\n+                frame.getContentPane().add(viewer);\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpViewer.java","additions":18,"deletions":24,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JViewport;\n+import javax.swing.border.Border;\n+import javax.swing.border.CompoundBorder;\n+import javax.swing.border.EmptyBorder;\n+import javax.swing.border.MatteBorder;\n+import javax.swing.text.Element;\n+import javax.swing.text.Utilities;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+\n+public class TextGutter extends JComponent {\n+    private final static Border OUTER = new MatteBorder(0, 0, 0, 2, Color.GRAY);\n+    private final AbstractTextModelViewer lhs;\n+    private final AbstractTextModelViewer rhs;\n+    private final Color currentLineForeground;\n+    private final FontMetrics fontMetrics;\n+    private final int colWidth;\n+    private final Dimension size;\n+\n+    @Override\n+    public Dimension getMinimumSize() {\n+        return size;\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return size;\n+    }\n+\n+    public TextGutter(AbstractTextModelViewer lhs, AbstractTextModelViewer rhs) {\n+        this.lhs = lhs;\n+        this.rhs = rhs;\n+        setFont(this.lhs.jtextPane.getFont());\n+        setBorder(new CompoundBorder(OUTER, new EmptyBorder(0, 5, 0, 5)));\n+        this.fontMetrics = getFontMetrics(getFont());\n+        Insets insets = getInsets();\n+        colWidth = fontMetrics.charWidth('0') * 4; \/\/ for digits either side\n+        size = new Dimension(insets.left + insets.right + colWidth * 2, 1000 * fontMetrics.getHeight());\n+        this.currentLineForeground = Color.RED;\n+        this.lhs.jtextPane.addCaretListener(_ -> repaint());\n+        this.rhs.jtextPane.addCaretListener(_ -> repaint());\n+        this.lhs.scrollPane.getViewport().addChangeListener(_->repaint());\n+        this.rhs.scrollPane.getViewport().addChangeListener(_->repaint());\n+\n+    }\n+\n+    void paintNumbers(Graphics g, AbstractTextModelViewer tv, int col) {\n+        var viewPort = tv.scrollPane.getViewport();\n+        var viewportPosition = viewPort.getViewPosition();\n+        int rowStartOffset = tv.jtextPane.viewToModel(new Point(0, viewportPosition.y));\n+        int endOffset = tv.jtextPane.viewToModel(new Point(0, viewportPosition.y + viewPort.getHeight()));\n+        Element root = tv.jtextPane.getDocument().getDefaultRootElement();\n+        while (rowStartOffset <= endOffset) {\n+            try {\n+                int caretPosition = tv.jtextPane.getCaretPosition();\n+                g.setColor(root.getElementIndex(rowStartOffset) == root.getElementIndex(caretPosition)\n+                        ? currentLineForeground\n+                        : getForeground());\n+                int index = root.getElementIndex(rowStartOffset);\n+                String lineNumber = (root.getElement(index).getStartOffset() == rowStartOffset) ? Integer.toString(index + 1) : \"\";\n+                int width = fontMetrics.stringWidth(lineNumber);\n+                Rectangle r = tv.jtextPane.modelToView(rowStartOffset);\n+                int x = this.getInsets().left + ((col == 0) ? 0 : colWidth * 2 - width);\n+                int y = r.y + r.height - fontMetrics.getDescent() - viewportPosition.y;\n+                g.drawString(lineNumber, x, y);\n+                rowStartOffset = Utilities.getRowEnd(tv.jtextPane, rowStartOffset) + 1;\n+            } catch (Exception e) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void paintComponent(Graphics g) {\n+        super.paintComponent(g);\n+        paintNumbers(g, lhs, 0);\n+        paintNumbers(g, rhs, 1);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextGutter.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}