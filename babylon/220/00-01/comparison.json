{"files":[{"patch":"@@ -1500,36 +1500,1 @@\n-            List<Body.Builder> bodies = new ArrayList<>();\n-            Body.Builder defaultLabel = null;\n-            Body.Builder defaultBody = null;\n-\n-            for (JCTree.JCCase c : tree.cases) {\n-                Body.Builder caseLabel = visitCaseLabel(tree, target, c);\n-\n-                Body.Builder caseBody = visitCaseBody(tree, c);\n-\n-                if (c.labels.head instanceof JCTree.JCDefaultCaseLabel) {\n-                    defaultLabel = caseLabel;\n-                    defaultBody = caseBody;\n-                } else {\n-                    bodies.add(caseLabel);\n-                    bodies.add(caseBody);\n-                }\n-            }\n-\n-            if (defaultLabel != null) {\n-                bodies.add(defaultLabel);\n-                bodies.add(defaultBody);\n-            } else if (!tree.hasUnconditionalPattern) {\n-                \/\/ label\n-                pushBody(tree, FunctionType.VOID);\n-                append(CoreOp._yield());\n-                bodies.add(stack.body);\n-                popBody();\n-\n-                \/\/ body\n-                pushBody(tree, actionType);\n-                append(CoreOp._throw(\n-                        append(CoreOp._new(FunctionType.functionType(JavaType.type(MatchException.class))))\n-                ));\n-                bodies.add(stack.body);\n-                popBody();\n-            }\n+            List<Body.Builder> bodies = visitSwitchStatAndExpr(tree, actionType, !tree.hasUnconditionalPattern);\n@@ -1546,0 +1511,21 @@\n+            List<Body.Builder> bodies = visitSwitchStatAndExpr(tree, actionType,\n+                    tree.patternSwitch && !tree.hasUnconditionalPattern);\n+\n+            result = append(ExtendedOp.switchStatement(target, bodies));\n+        }\n+\n+        private List<Body.Builder> visitSwitchStatAndExpr(JCTree tree, FunctionType caseBodyType, boolean isDefaultCaseNeeded) {\n+            JCExpression selector;\n+            List<JCTree.JCCase> cases;\n+            if (tree instanceof JCTree.JCSwitch sw) {\n+                selector = sw.selector;\n+                cases = sw.cases;\n+            } else if (tree instanceof JCTree.JCSwitchExpression sw) {\n+                selector = sw.selector;\n+                cases = sw.cases;\n+            } else {\n+                throw new IllegalStateException();\n+            }\n+\n+            Value target = toValue(selector);\n+\n@@ -1548,1 +1534,1 @@\n-            Body.Builder defaultStatement = null;\n+            Body.Builder defaultBody = null;\n@@ -1550,2 +1536,1 @@\n-            for (JCTree.JCCase c : tree.cases) {\n-                Body.Builder caseBody = visitCaseLabel(tree, target, c);\n+            for (JCTree.JCCase c : cases) {\n@@ -1553,1 +1538,2 @@\n-                Body.Builder statementBody = visitCaseBody(tree, c);\n+                Body.Builder caseLabel = visitCaseLabel(tree, target, c);\n+                Body.Builder caseBody = visitCaseBody(tree, c);\n@@ -1556,2 +1542,2 @@\n-                    defaultLabel = caseBody;\n-                    defaultStatement = statementBody;\n+                    defaultLabel = caseLabel;\n+                    defaultBody = caseBody;\n@@ -1559,0 +1545,1 @@\n+                    bodies.add(caseLabel);\n@@ -1560,1 +1547,0 @@\n-                    bodies.add(statementBody);\n@@ -1566,2 +1552,2 @@\n-                bodies.add(defaultStatement);\n-            } else if (tree.patternSwitch && !tree.hasUnconditionalPattern) {\n+                bodies.add(defaultBody);\n+            } else if (isDefaultCaseNeeded) {\n@@ -1574,2 +1560,2 @@\n-                \/\/ statement\n-                pushBody(tree, actionType);\n+                \/\/ body\n+                pushBody(tree, caseBodyType);\n@@ -1583,1 +1569,1 @@\n-            result = append(ExtendedOp.switchStatement(target, bodies));\n+            return bodies;\n@@ -1702,1 +1688,1 @@\n-            FunctionType actionType;\n+            FunctionType caseBodyType;\n@@ -1705,1 +1691,1 @@\n-                actionType = FunctionType.VOID;\n+                caseBodyType = FunctionType.VOID;\n@@ -1708,1 +1694,1 @@\n-                actionType = FunctionType.functionType(typeToTypeElement(switchType));\n+                caseBodyType = FunctionType.functionType(typeToTypeElement(switchType));\n@@ -1717,1 +1703,1 @@\n-                    pushBody(c.body, actionType);\n+                    pushBody(c.body, caseBodyType);\n@@ -1741,1 +1727,1 @@\n-                    pushBody(c, actionType);\n+                    pushBody(c, caseBodyType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":39,"deletions":53,"binary":false,"changes":92,"status":"modified"}]}