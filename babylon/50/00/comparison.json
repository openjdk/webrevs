{"files":[{"patch":"@@ -2239,1 +2239,1 @@\n-            return symbolToFieldRef(gen.binaryQualifier(s, site));\n+            return symbolToFieldRef(gen.binaryQualifier(s, types.erasure(site)));\n@@ -2261,1 +2261,1 @@\n-            return symbolToErasedMethodRef(gen.binaryQualifier(s, site));\n+            return symbolToErasedMethodRef(gen.binaryQualifier(s, types.erasure(site)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,0 +149,42 @@\n+\n+    interface Adder<X> {\n+        void add(Adder<X> adder);\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : java.util.List)void -> {\n+                  %1 : Var<java.util.List> = var %0 @\"list\";\n+                  %2 : java.util.List = var.load %1;\n+                  %3 : int = constant @\"0\";\n+                  %4 : DenotableTypesTest$Adder = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n+                  %5 : java.util.List = var.load %1;\n+                  %6 : int = constant @\"1\";\n+                  %7 : DenotableTypesTest$Adder = invoke %5 %6 @\"java.util.List::get(int)java.lang.Object\";\n+                  invoke %4 %7 @\"DenotableTypesTest$Adder::add(DenotableTypesTest$Adder)void\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test8(List<? extends Adder<Integer>> list) {\n+        list.get(0).add(list.get(1));\n+    }\n+\n+    static class Box<X> {\n+        X x;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test9\" (%0 : java.util.List)void -> {\n+                  %1 : Var<java.util.List> = var %0 @\"list\";\n+                  %2 : java.util.List = var.load %1;\n+                  %3 : int = constant @\"0\";\n+                  %4 : DenotableTypesTest$Box = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n+                  %5 : java.lang.Integer = field.load %4 @\"DenotableTypesTest$Box::x()java.lang.Object\";\n+                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test9(List<? extends Box<Integer>> list) {\n+        Integer i = list.get(0).x;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/DenotableTypesTest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}