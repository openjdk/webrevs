{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp.*;\n@@ -39,3 +38,0 @@\n-import org.junit.jupiter.api.TestInstance;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n@@ -46,1 +42,0 @@\n-import java.util.Iterator;\n@@ -60,1 +55,0 @@\n-@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -221,1 +215,0 @@\n-\n@@ -228,36 +221,0 @@\n-    Iterator<Quotable> methodRefLambdas() {\n-        return List.of(\n-                (QuotableIntUnaryOperator) TestLambdaOps::m1,\n-                (QuotableIntUnaryOperator) TestLambdaOps::m2,\n-                (QuotableFunction<Integer, Integer>) TestLambdaOps::m1,\n-                (QuotableFunction<Integer, Integer>) TestLambdaOps::m2,\n-                (QuotableIntUnaryOperator) this::m3,\n-                (QuotableBiFunction<TestLambdaOps, Integer, Integer>) TestLambdaOps::m4\n-        ).iterator();\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"methodRefLambdas\")\n-    public void testIsMethodReference(Quotable q) {\n-        Quoted quoted = Op.ofQuotable(q).get();\n-        LambdaOp lop = (LambdaOp) quoted.op();\n-        Assertions.assertTrue(lop.methodReference().isPresent());\n-    }\n-\n-    static int m1(int i) {\n-        return i;\n-    }\n-\n-    static Integer m2(Integer i) {\n-        return i;\n-    }\n-\n-    int m3(int i) {\n-        return i;\n-    }\n-\n-    static int m4(TestLambdaOps tl, int i) {\n-        return i;\n-    }\n-\n-\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLambdaOps.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run junit TestMethodRefLambda\n+ *\/\n+\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.Quotable;\n+import jdk.incubator.code.Quoted;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.IntUnaryOperator;\n+\n+\/\/ The comment allow us to use non-static method source\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class TestMethodRefLambda {\n+\n+    interface QuotableIntUnaryOperator extends IntUnaryOperator, Quotable {}\n+\n+    interface QuotableFunction<T, R> extends Function<T, R>, Quotable {}\n+\n+    interface QuotableBiFunction<T, U, R> extends BiFunction<T, U, R>, Quotable {}\n+\n+    List<Quotable> methodRefLambdas() {\n+        return List.of(\n+                (QuotableIntUnaryOperator) TestMethodRefLambda::m1,\n+                (QuotableIntUnaryOperator) TestMethodRefLambda::m2,\n+                (QuotableFunction<Integer, Integer>) TestMethodRefLambda::m1,\n+                (QuotableFunction<Integer, Integer>) TestMethodRefLambda::m2,\n+                (QuotableIntUnaryOperator) this::m3,\n+                (QuotableBiFunction<TestMethodRefLambda, Integer, Integer>) TestMethodRefLambda::m4\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"methodRefLambdas\")\n+    public void testIsMethodReference(Quotable q) {\n+        Quoted quoted = Op.ofQuotable(q).get();\n+        JavaOp.LambdaOp lop = (JavaOp.LambdaOp) quoted.op();\n+        Assertions.assertTrue(lop.methodReference().isPresent());\n+    }\n+\n+    static int m1(int i) {\n+        return i;\n+    }\n+\n+    static Integer m2(Integer i) {\n+        return i;\n+    }\n+\n+    int m3(int i) {\n+        return i;\n+    }\n+\n+    static int m4(TestMethodRefLambda tl, int i) {\n+        return i;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestMethodRefLambda.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}