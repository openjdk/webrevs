{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestAncestors\n+ * @run junit TestAncestors\n@@ -32,2 +32,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -98,3 +98,3 @@\n-                Assert.assertNull(op.ancestorOp());\n-                Assert.assertNull(op.ancestorBody());\n-                Assert.assertNull(op.ancestorBlock());\n+                Assertions.assertNull(op.ancestorOp());\n+                Assertions.assertNull(op.ancestorBody());\n+                Assertions.assertNull(op.ancestorBlock());\n@@ -103,3 +103,3 @@\n-                Assert.assertNotNull(body.ancestorOp());\n-                Assert.assertNull(body.ancestorBody());\n-                Assert.assertNull(body.ancestorBlock());\n+                Assertions.assertNotNull(body.ancestorOp());\n+                Assertions.assertNull(body.ancestorBody());\n+                Assertions.assertNull(body.ancestorBlock());\n@@ -108,3 +108,3 @@\n-                Assert.assertNotNull(block.ancestorOp());\n-                Assert.assertNotNull(block.ancestorBody());\n-                Assert.assertNull(block.ancestorBlock());\n+                Assertions.assertNotNull(block.ancestorOp());\n+                Assertions.assertNotNull(block.ancestorBody());\n+                Assertions.assertNull(block.ancestorBlock());\n@@ -116,1 +116,1 @@\n-        Assert.assertTrue(path.size() > 3);\n+        Assertions.assertTrue(path.size() > 3);\n@@ -132,1 +132,1 @@\n-        Assert.assertTrue(isSameOrAncestorUsingParent(e, a));\n+        Assertions.assertTrue(isSameOrAncestorUsingParent(e, a));\n@@ -134,1 +134,1 @@\n-            Assert.assertTrue(a.isAncestorOf(e));\n+            Assertions.assertTrue(a.isAncestorOf(e));\n@@ -139,1 +139,1 @@\n-                Assert.assertTrue(isSameOrAncestorOfOp(op, e));\n+                Assertions.assertTrue(isSameOrAncestorOfOp(op, e));\n@@ -142,1 +142,1 @@\n-                Assert.assertTrue(isSameOrAncestorOfBody(body, e));\n+                Assertions.assertTrue(isSameOrAncestorOfBody(body, e));\n@@ -145,1 +145,1 @@\n-                Assert.assertTrue(isSameOrAncestorOfBlock(block, e));\n+                Assertions.assertTrue(isSameOrAncestorOfBlock(block, e));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestAncestors.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -25,4 +26,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n@@ -31,0 +28,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -32,1 +33,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -39,1 +39,1 @@\n- * @run testng TestArrayCreation\n+ * @run junit TestArrayCreation\n@@ -54,1 +54,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f());\n+        Assertions.assertArrayEquals(f(), (Object[]) Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -68,1 +68,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f2());\n+        Assertions.assertArrayEquals(f2(), (Object[]) Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -82,1 +82,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f3());\n+        Assertions.assertArrayEquals(f3(), (Object[]) Interpreter.invoke(MethodHandles.lookup(), f));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestArrayCreation.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -25,4 +26,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -30,0 +27,1 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -31,0 +29,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -41,1 +40,1 @@\n- * @run testng TestArrayTypes\n+ * @run junit TestArrayTypes\n@@ -56,1 +55,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f());\n+        Assertions.assertEquals(f(), Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -70,1 +69,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f2());\n+        Assertions.assertEquals(f2(), Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -84,1 +83,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), f3());\n+        Assertions.assertEquals(f3(), Interpreter.invoke(MethodHandles.lookup(), f));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestArrayTypes.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestBinops\n+ * @run junit TestBinops\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,3 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -36,0 +34,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -56,2 +55,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, true), not(true));\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, false), not(false));\n+        Assertions.assertEquals(not(true), Interpreter.invoke(MethodHandles.lookup(), f, true));\n+        Assertions.assertEquals(not(false), Interpreter.invoke(MethodHandles.lookup(), f, false));\n@@ -71,1 +70,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 42), neg(42));\n+        Assertions.assertEquals(neg(42), Interpreter.invoke(MethodHandles.lookup(), f, 42));\n@@ -85,1 +84,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 42), compl(42));\n+        Assertions.assertEquals(compl(42), Interpreter.invoke(MethodHandles.lookup(), f, 42));\n@@ -99,1 +98,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 10, 3), mod(10, 3));\n+        Assertions.assertEquals(mod(10, 3), Interpreter.invoke(MethodHandles.lookup(), f, 10, 3));\n@@ -113,1 +112,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 10, 3), bitand(10, 3));\n+        Assertions.assertEquals(bitand(10, 3), Interpreter.invoke(MethodHandles.lookup(), f, 10, 3));\n@@ -127,1 +126,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 10, 3), bitor(10, 3));\n+        Assertions.assertEquals(bitor(10, 3), Interpreter.invoke(MethodHandles.lookup(), f, 10, 3));\n@@ -141,1 +140,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 10, 3), bitxor(10, 3));\n+        Assertions.assertEquals(bitxor(10, 3), Interpreter.invoke(MethodHandles.lookup(), f, 10, 3));\n@@ -155,1 +154,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, true, false), booland(true, false));\n+        Assertions.assertEquals(booland(true, false), Interpreter.invoke(MethodHandles.lookup(), f, true, false));\n@@ -169,1 +168,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, false, true), boolor(false, true));\n+        Assertions.assertEquals(boolor(false, true), Interpreter.invoke(MethodHandles.lookup(), f, false, true));\n@@ -183,1 +182,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, true, true), boolxor(true, true));\n+        Assertions.assertEquals(boolxor(true, true), Interpreter.invoke(MethodHandles.lookup(), f, true, true));\n@@ -197,1 +196,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 15.6, 2.1), doublemod(15.6, 2.1));\n+        Assertions.assertEquals(doublemod(15.6, 2.1), Interpreter.invoke(MethodHandles.lookup(), f, 15.6, 2.1));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBinops.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -24,4 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n@@ -29,0 +25,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -32,1 +29,4 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n@@ -40,1 +40,1 @@\n- * @run testng TestBlockIndexes\n+ * @run junit TestBlockIndexes\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(b.index(), b.ancestorBody().blocks().indexOf(b));\n+            Assertions.assertEquals(b.ancestorBody().blocks().indexOf(b), b.index());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockIndexes.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -30,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -32,0 +29,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -33,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -40,1 +40,1 @@\n- * @run testng TestBlockOp\n+ * @run junit TestBlockOp\n@@ -79,1 +79,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), f());\n+        Assertions.assertEquals(f(), Interpreter.invoke(MethodHandles.lookup(), lf));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockOp.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestBlockParameters\n+ * @run junit TestBlockParameters\n@@ -30,4 +30,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -38,0 +34,1 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -39,0 +36,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -73,1 +72,1 @@\n-        Assert.assertEquals(p.index(), p.declaringBlock().parameters().indexOf(p));\n+        Assertions.assertEquals(p.declaringBlock().parameters().indexOf(p), p.index());\n@@ -76,2 +75,2 @@\n-            Assert.assertTrue(p.declaringBlock().isEntryBlock());\n-            Assert.assertEquals(p.index(), iop.parameters().indexOf(p));\n+            Assertions.assertTrue(p.declaringBlock().isEntryBlock());\n+            Assertions.assertEquals(iop.parameters().indexOf(p), p.index());\n@@ -80,1 +79,1 @@\n-            Assert.assertFalse(p.declaringBlock().isEntryBlock());\n+            Assertions.assertFalse(p.declaringBlock().isEntryBlock());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockParameters.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestBreakContinue\n+ * @run junit TestBreakContinue\n@@ -30,4 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -36,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -38,0 +35,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -39,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -78,1 +78,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), forLoopBreakContinue(o));\n+        Assertions.assertEquals(forLoopBreakContinue(o), Interpreter.invoke(MethodHandles.lookup(), lf, o));\n@@ -120,1 +120,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), nestedForLoopBreakContinue(o));\n+            Assertions.assertEquals(nestedForLoopBreakContinue(o), Interpreter.invoke(MethodHandles.lookup(), lf, o));\n@@ -168,1 +168,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), forLoopLabeledBreakContinue(o));\n+            Assertions.assertEquals(forLoopLabeledBreakContinue(o), Interpreter.invoke(MethodHandles.lookup(), lf, o));\n@@ -218,1 +218,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), blockBreak(o));\n+            Assertions.assertEquals(blockBreak(o), Interpreter.invoke(MethodHandles.lookup(), lf, o));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBreakContinue.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,0 +24,5 @@\n+import jdk.incubator.code.Block;\n+import jdk.incubator.code.Body;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.Quotable;\n+import jdk.incubator.code.analysis.SSA;\n@@ -25,2 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -28,2 +33,0 @@\n-import jdk.incubator.code.*;\n-import jdk.incubator.code.analysis.SSA;\n@@ -33,1 +36,0 @@\n-import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -35,0 +37,1 @@\n+import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -41,2 +44,2 @@\n- * @run testng TestBuild\n- * @run testng\/othervm -Dbabylon.ssa=cytron TestBuild\n+ * @run junit TestBuild\n+ * @run junit\/othervm -Dbabylon.ssa=cytron TestBuild\n@@ -65,1 +68,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> block.op(addop));\n+        Assertions.assertThrows(IllegalStateException.class, () -> block.op(addop));\n@@ -82,1 +85,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> block.op(brop));\n+        Assertions.assertThrows(IllegalStateException.class, () -> block.op(brop));\n@@ -94,1 +97,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class, () -> block.op(freturnOp));\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> block.op(freturnOp));\n@@ -106,1 +109,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class, () -> block.context().mapValue(result, result));\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> block.context().mapValue(result, result));\n@@ -139,2 +142,2 @@\n-        Assert.assertThrows(IllegalStateException.class, a::declaringBlock);\n-        Assert.assertThrows(IllegalStateException.class, result::declaringBlock);\n+        Assertions.assertThrows(IllegalStateException.class, a::declaringBlock);\n+        Assertions.assertThrows(IllegalStateException.class, result::declaringBlock);\n@@ -142,2 +145,2 @@\n-        Assert.assertThrows(IllegalStateException.class, result.op()::ancestorBlock);\n-        Assert.assertThrows(IllegalStateException.class, result.op()::ancestorBody);\n+        Assertions.assertThrows(IllegalStateException.class, result.op()::ancestorBlock);\n+        Assertions.assertThrows(IllegalStateException.class, result.op()::ancestorBody);\n@@ -145,1 +148,1 @@\n-        Assert.assertThrows(IllegalStateException.class, a::uses);\n+        Assertions.assertThrows(IllegalStateException.class, a::uses);\n@@ -151,5 +154,5 @@\n-        Assert.assertNotNull(a.declaringBlock());\n-        Assert.assertNotNull(result.declaringBlock());\n-        Assert.assertNotNull(result.op().ancestorBlock());\n-        Assert.assertNotNull(result.op().ancestorBody());\n-        Assert.assertNotNull(a.uses());\n+        Assertions.assertNotNull(a.declaringBlock());\n+        Assertions.assertNotNull(result.declaringBlock());\n+        Assertions.assertNotNull(result.op().ancestorBlock());\n+        Assertions.assertNotNull(result.op().ancestorBody());\n+        Assertions.assertNotNull(a.uses());\n@@ -168,1 +171,1 @@\n-        Assert.assertThrows(IllegalStateException.class, successor::targetBlock);\n+        Assertions.assertThrows(IllegalStateException.class, successor::targetBlock);\n@@ -178,1 +181,1 @@\n-        Assert.assertNotNull(successor.targetBlock());\n+        Assertions.assertNotNull(successor.targetBlock());\n@@ -193,1 +196,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> bblock.op(addOp));\n+        Assertions.assertThrows(IllegalStateException.class, () -> bblock.op(addOp));\n@@ -206,1 +209,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> bblock.op(brOp));\n+        Assertions.assertThrows(IllegalStateException.class, () -> bblock.op(brOp));\n@@ -213,1 +216,1 @@\n-        Assert.assertThrows(IllegalStateException.class, block::successor);\n+        Assertions.assertThrows(IllegalStateException.class, block::successor);\n@@ -224,1 +227,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -235,1 +238,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> Body.Builder.of(body, FUNCTION_TYPE_VOID));\n+        Assertions.assertThrows(IllegalStateException.class, () -> Body.Builder.of(body, FUNCTION_TYPE_VOID));\n@@ -247,1 +250,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -263,1 +266,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> block1.op(lambdaOp));\n+        Assertions.assertThrows(IllegalStateException.class, () -> block1.op(lambdaOp));\n@@ -273,1 +276,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> block.op(return_()));\n+        Assertions.assertThrows(IllegalStateException.class, () -> block.op(return_()));\n@@ -283,1 +286,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -298,1 +301,1 @@\n-        Assert.assertEquals(f.body().blocks().size(), 1);\n+        Assertions.assertEquals(1, f.body().blocks().size());\n@@ -306,1 +309,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -316,1 +319,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -328,1 +331,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n@@ -342,1 +345,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n+        Assertions.assertThrows(IllegalStateException.class, () -> func(\"f\", body));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBuild.java","additions":40,"deletions":37,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestClosureOps\n+ * @run junit TestClosureOps\n@@ -30,4 +30,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -35,1 +31,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n@@ -38,0 +33,3 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n@@ -40,0 +38,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,0 @@\n-import jdk.incubator.code.dialect.java.JavaType;\n@@ -46,7 +45,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.return_;\n-import static jdk.incubator.code.dialect.java.JavaOp.add;\n-import static jdk.incubator.code.dialect.core.CoreOp.closure;\n-import static jdk.incubator.code.dialect.core.CoreOp.closureCall;\n-import static jdk.incubator.code.dialect.core.CoreOp.constant;\n-import static jdk.incubator.code.dialect.core.CoreOp.func;\n-import static jdk.incubator.code.dialect.core.CoreOp.quoted;\n+import static jdk.incubator.code.dialect.core.CoreOp.*;\n@@ -54,0 +47,1 @@\n+import static jdk.incubator.code.dialect.java.JavaOp.add;\n@@ -64,2 +58,2 @@\n-            Assert.assertEquals(1, c.capturedValues().size());\n-            Assert.assertEquals(1, c.capturedValues().values().iterator().next());\n+            Assertions.assertEquals(c.capturedValues().size(), 1);\n+            Assertions.assertEquals(c.capturedValues().values().iterator().next(), 1);\n@@ -105,1 +99,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -135,1 +129,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -143,1 +137,1 @@\n-        Assert.assertTrue(top instanceof CoreOp.FuncOp);\n+        Assertions.assertTrue(top instanceof CoreOp.FuncOp);\n@@ -146,1 +140,1 @@\n-        Assert.assertEquals(JavaType.type(Quoted.class), fop.invokableType().returnType());\n+        Assertions.assertEquals(fop.invokableType().returnType(), JavaType.type(Quoted.class));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestClosureOps.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -25,3 +26,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -32,4 +35,3 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n-import java.util.*;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n@@ -41,1 +43,1 @@\n- * @run testng TestConcat\n+ * @run junit TestConcat\n@@ -186,2 +188,2 @@\n-    @DataProvider(name = \"testData\")\n-    public static Object[][]  testData() {\n+\n+    public static Stream<TestMethodData> testData() {\n@@ -200,9 +202,1 @@\n-        Object[] t = Stream.concat(Stream.concat(s1,s2),s3).toArray();\n-\n-        Object[][] args = new Object[t.length][];\n-\n-        for(int i = 0; i < args.length; i++) {\n-            args[i] = new Object[]{ t[i] };\n-        }\n-\n-        return args;\n+        return Stream.concat(Stream.concat(s1,s2),s3);\n@@ -211,1 +205,2 @@\n-    @Test(dataProvider = \"testData\")\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n@@ -221,1 +216,1 @@\n-            Assert.assertEquals(res1, res2);\n+            Assertions.assertEquals(res2, res1);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConcat.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestConditionalExpression\n+ * @run junit TestConditionalExpression\n@@ -30,4 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -36,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -38,0 +35,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -39,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -59,2 +59,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, true, 1, 2), simpleExpression(true, 1, 2));\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, false, 1, 2), simpleExpression(false, 1, 2));\n+        Assertions.assertEquals(simpleExpression(true, 1, 2), Interpreter.invoke(MethodHandles.lookup(), lf, true, 1, 2));\n+        Assertions.assertEquals(simpleExpression(false, 1, 2), Interpreter.invoke(MethodHandles.lookup(), lf, false, 1, 2));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalExpression.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,3 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -29,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -31,0 +29,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -43,1 +42,1 @@\n- * @run testng TestConditionalOp\n+ * @run junit TestConditionalOp\n@@ -99,2 +98,2 @@\n-            Assert.assertEquals(ra, re);\n-            Assert.assertEquals(la, le);\n+            Assertions.assertEquals(re, ra);\n+            Assertions.assertEquals(le, la);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalOp.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestConstants\n+ * @run junit TestConstants\n@@ -30,5 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -37,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -39,0 +35,6 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -40,1 +42,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -139,1 +140,0 @@\n-    @DataProvider\n@@ -155,1 +155,2 @@\n-    @Test(dataProvider = \"provider\")\n+    @ParameterizedTest\n+    @MethodSource(\"provider\")\n@@ -167,1 +168,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f), m.invoke(null));\n+            Assertions.assertEquals(m.invoke(null), Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -190,1 +191,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, (Object) null), compareNull(null));\n+        Assertions.assertEquals(compareNull(null), Interpreter.invoke(MethodHandles.lookup(), lf, (Object) null));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConstants.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestCopy\n+ * @run junit TestCopy\n@@ -30,5 +30,1 @@\n-import jdk.incubator.code.extern.ExternalizedOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n+import jdk.incubator.code.CodeReflection;\n@@ -38,1 +34,5 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.extern.ExternalizedOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n@@ -57,1 +57,1 @@\n-        Assert.assertEquals(f.toText(), copy.toText());\n+        Assertions.assertEquals(copy.toText(), f.toText());\n@@ -67,1 +67,1 @@\n-        Assert.assertEquals(f.toText(), copy.toText());\n+        Assertions.assertEquals(copy.toText(), f.toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,6 +24,0 @@\n-import jdk.incubator.code.Body;\n-import jdk.incubator.code.dialect.core.CoreType;\n-import jdk.incubator.code.extern.OpParser;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -31,1 +25,1 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.Body;\n@@ -33,0 +27,2 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.core.CoreType;\n@@ -34,0 +30,3 @@\n+import jdk.incubator.code.extern.OpParser;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -42,5 +41,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.return_;\n-import static jdk.incubator.code.dialect.core.CoreOp.branch;\n-import static jdk.incubator.code.dialect.core.CoreOp.conditionalBranch;\n-import static jdk.incubator.code.dialect.core.CoreOp.constant;\n-import static jdk.incubator.code.dialect.core.CoreOp.func;\n+import static jdk.incubator.code.dialect.core.CoreOp.*;\n@@ -51,1 +46,1 @@\n- * @run testng TestDominate\n+ * @run junit TestDominate\n@@ -74,1 +69,1 @@\n-        Assert.assertThrows(UnsupportedOperationException.class,\n+        Assertions.assertThrows(UnsupportedOperationException.class,\n@@ -76,1 +71,1 @@\n-        Assert.assertThrows(UnsupportedOperationException.class,\n+        Assertions.assertThrows(UnsupportedOperationException.class,\n@@ -80,1 +75,1 @@\n-        Assert.assertThrows(UnsupportedOperationException.class,\n+        Assertions.assertThrows(UnsupportedOperationException.class,\n@@ -82,1 +77,1 @@\n-        Assert.assertThrows(UnsupportedOperationException.class,\n+        Assertions.assertThrows(UnsupportedOperationException.class,\n@@ -186,1 +181,1 @@\n-                Assert.assertEquals(y.isDominatedBy(x), bvs[j][i]);\n+                Assertions.assertEquals(bvs[j][i], y.isDominatedBy(x));\n@@ -226,1 +221,1 @@\n-                Assert.assertEquals(idoms.get(b), entry);\n+                Assertions.assertEquals(entry, idoms.get(b));\n@@ -228,1 +223,1 @@\n-                Assert.assertEquals(idoms.get(b), b6);\n+                Assertions.assertEquals(b6, idoms.get(b));\n@@ -298,1 +293,1 @@\n-        Assert.assertEquals(domTree, domTreeExpected);\n+        Assertions.assertEquals(domTreeExpected, domTree);\n@@ -320,1 +315,1 @@\n-        Assert.assertEquals(df, dfExpected);\n+        Assertions.assertEquals(dfExpected, df);\n@@ -354,1 +349,1 @@\n-        Assert.assertFalse(ipdoms.containsKey(Body.IPDOM_EXIT));\n+        Assertions.assertFalse(ipdoms.containsKey(Body.IPDOM_EXIT));\n@@ -367,1 +362,1 @@\n-        Assert.assertEquals(domTree, domTreeExpected);\n+        Assertions.assertEquals(domTreeExpected, domTree);\n@@ -395,1 +390,1 @@\n-        Assert.assertFalse(ipdoms.containsKey(Body.IPDOM_EXIT));\n+        Assertions.assertFalse(ipdoms.containsKey(Body.IPDOM_EXIT));\n@@ -406,1 +401,1 @@\n-        Assert.assertEquals(domTree, domTreeExpected);\n+        Assertions.assertEquals(domTreeExpected, domTree);\n@@ -419,1 +414,1 @@\n-        Assert.assertEquals(df, dfExpected);\n+        Assertions.assertEquals(dfExpected, df);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestDominate.java","additions":22,"deletions":27,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -30,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -32,0 +29,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -33,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -41,1 +41,1 @@\n- * @run testng TestEnhancedForOp\n+ * @run junit TestEnhancedForOp\n@@ -74,1 +74,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), f());\n+        Assertions.assertEquals(f(), Interpreter.invoke(MethodHandles.lookup(), lf));\n@@ -98,1 +98,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, ia), array(ia));\n+        Assertions.assertEquals(array(ia), Interpreter.invoke(MethodHandles.lookup(), lf, ia));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestEnhancedForOp.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestExceptionRegionOps\n+ * @run junit TestExceptionRegionOps\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,4 +33,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n@@ -38,0 +36,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-import jdk.incubator.code.dialect.java.JavaType;\n@@ -46,7 +45,2 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.return_;\n-import static jdk.incubator.code.dialect.java.JavaOp.throw_;\n-import static jdk.incubator.code.dialect.core.CoreOp.branch;\n-import static jdk.incubator.code.dialect.core.CoreOp.constant;\n-import static jdk.incubator.code.dialect.java.JavaOp.exceptionRegionEnter;\n-import static jdk.incubator.code.dialect.java.JavaOp.exceptionRegionExit;\n-import static jdk.incubator.code.dialect.core.CoreOp.func;\n+import static jdk.incubator.code.dialect.core.CoreOp.*;\n+import static jdk.incubator.code.dialect.java.JavaOp.*;\n@@ -54,1 +48,0 @@\n-import static jdk.incubator.code.dialect.java.JavaType.VOID;\n@@ -462,4 +455,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExceptionRegionOps.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestExpressionGraphs\n+ * @run junit TestExpressionGraphs\n@@ -30,4 +30,0 @@\n-import org.testng.annotations.Test;\n-\n-import java.io.Writer;\n-import java.lang.reflect.Method;\n@@ -38,1 +34,4 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.Writer;\n+import java.lang.reflect.Method;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExpressionGraphs.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -30,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -32,0 +29,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -33,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -40,1 +40,1 @@\n- * @run testng TestForOp\n+ * @run junit TestForOp\n@@ -64,1 +64,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), f());\n+        Assertions.assertEquals(f(), Interpreter.invoke(MethodHandles.lookup(), lf));\n@@ -87,1 +87,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), f2());\n+        Assertions.assertEquals(f2(), Interpreter.invoke(MethodHandles.lookup(), lf));\n@@ -112,1 +112,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), f3());\n+        Assertions.assertEquals(f3(), Interpreter.invoke(MethodHandles.lookup(), lf));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestForOp.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -30,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -32,0 +29,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -33,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -40,1 +40,1 @@\n- * @run testng TestIfOp\n+ * @run junit TestIfOp\n@@ -82,1 +82,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, i), f(i));\n+            Assertions.assertEquals(f(i), Interpreter.invoke(MethodHandles.lookup(), lf, i));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestIfOp.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,4 +24,0 @@\n-import jdk.incubator.code.analysis.Inliner;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -29,0 +25,1 @@\n+import jdk.incubator.code.analysis.Inliner;\n@@ -30,0 +27,1 @@\n+import jdk.incubator.code.dialect.java.JavaType;\n@@ -31,0 +29,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -33,1 +33,0 @@\n-import jdk.incubator.code.dialect.java.JavaType;\n@@ -43,1 +42,1 @@\n- * @run testng TestInline\n+ * @run junit TestInline\n@@ -61,1 +60,1 @@\n-                    Assert.assertEquals(fblock, cb);\n+                    Assertions.assertEquals(cb, fblock);\n@@ -67,1 +66,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -87,1 +86,1 @@\n-                    Assert.assertEquals(fblock, cb);\n+                    Assertions.assertEquals(cb, fblock);\n@@ -95,1 +94,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -120,1 +119,1 @@\n-                    Assert.assertNotEquals(fblock, cb);\n+                    Assertions.assertNotEquals(fblock, cb);\n@@ -125,1 +124,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -153,1 +152,1 @@\n-                    Assert.assertNotEquals(fblock, cb);\n+                    Assertions.assertNotEquals(fblock, cb);\n@@ -160,1 +159,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -181,1 +180,1 @@\n-                    Assert.assertEquals(fblock, cb);\n+                    Assertions.assertEquals(cb, fblock);\n@@ -189,1 +188,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -206,1 +205,1 @@\n-                    Assert.assertEquals(fblock, cb);\n+                    Assertions.assertEquals(cb, fblock);\n@@ -213,1 +212,1 @@\n-        Assert.assertEquals(a[0], 42);\n+        Assertions.assertEquals(42, a[0]);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -16,1 +16,1 @@\n- * @run testng TestInvokeOp\n+ * @run junit TestInvokeOp\n@@ -25,1 +25,1 @@\n-        Assert.assertEquals(invokeOps.get(0).argOperands(), invokeOps.get(0).operands());\n+        Assertions.assertEquals(invokeOps.get(0).operands(), invokeOps.get(0).argOperands());\n@@ -27,1 +27,1 @@\n-        Assert.assertEquals(invokeOps.get(1).argOperands(), invokeOps.get(1).operands().subList(0, 1));\n+        Assertions.assertEquals(invokeOps.get(1).operands().subList(0, 1), invokeOps.get(1).argOperands());\n@@ -29,1 +29,1 @@\n-        Assert.assertEquals(invokeOps.get(2).argOperands(), invokeOps.get(2).operands());\n+        Assertions.assertEquals(invokeOps.get(2).operands(), invokeOps.get(2).argOperands());\n@@ -31,1 +31,1 @@\n-        Assert.assertEquals(invokeOps.get(3).argOperands(), invokeOps.get(3).operands().subList(0, 1));\n+        Assertions.assertEquals(invokeOps.get(3).operands().subList(0, 1), invokeOps.get(3).argOperands());\n@@ -38,1 +38,1 @@\n-            Assert.assertEquals(l, invokeOp.operands());\n+            Assertions.assertEquals(invokeOp.operands(), l);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInvokeOp.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestInvokeSuper\n+ * @run junit TestInvokeSuper\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,2 +32,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -36,4 +40,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n@@ -73,1 +73,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, b), b.f());\n+            Assertions.assertEquals(b.f(), Interpreter.invoke(MethodHandles.lookup(), f, b));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInvokeSuper.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestLambdaOps\n+ * @run junit TestLambdaOps\n@@ -30,5 +30,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -37,1 +32,1 @@\n-import jdk.incubator.code.dialect.core.CoreOp.FuncOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -41,0 +36,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -44,2 +41,3 @@\n-import jdk.incubator.code.CodeReflection;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n@@ -53,1 +51,0 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.constant;\n@@ -58,1 +55,0 @@\n-@Test\n@@ -65,2 +61,2 @@\n-            Assert.assertEquals(1, l.capturedValues().size());\n-            Assert.assertEquals(1, l.capturedValues().values().iterator().next());\n+            Assertions.assertEquals(l.capturedValues().size(), 1);\n+            Assertions.assertEquals(l.capturedValues().values().iterator().next(), 1);\n@@ -107,1 +103,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -142,1 +138,1 @@\n-        Assert.assertEquals(ir, 43);\n+        Assertions.assertEquals(43, ir);\n@@ -160,1 +156,1 @@\n-        Assert.assertTrue(top instanceof CoreOp.FuncOp);\n+        Assertions.assertTrue(top instanceof CoreOp.FuncOp);\n@@ -163,1 +159,1 @@\n-        Assert.assertEquals(type(Quoted.class), fop.invokableType().returnType());\n+        Assertions.assertEquals(fop.invokableType().returnType(), type(Quoted.class));\n@@ -183,1 +179,1 @@\n-            Assert.assertEquals(op.getAsInt(), 42);\n+            Assertions.assertEquals(42, op.getAsInt());\n@@ -187,2 +183,2 @@\n-            Assert.assertEquals(q.capturedValues().size(), 1);\n-            Assert.assertEquals(((Var<?>)q.capturedValues().values().iterator().next()).value(), 42);\n+            Assertions.assertEquals(1, q.capturedValues().size());\n+            Assertions.assertEquals(42, ((Var<?>)q.capturedValues().values().iterator().next()).value());\n@@ -192,1 +188,1 @@\n-            Assert.assertEquals(r, 42);\n+            Assertions.assertEquals(42, r);\n@@ -196,1 +192,1 @@\n-            Assert.assertEquals(r, 0);\n+            Assertions.assertEquals(0, r);\n@@ -201,1 +197,1 @@\n-            Assert.assertEquals(op.getAsInt(), 42);\n+            Assertions.assertEquals(42, op.getAsInt());\n@@ -206,2 +202,2 @@\n-            Assert.assertEquals(q.capturedValues().size(), 1);\n-            Assert.assertEquals(((Var<?>)q.capturedValues().values().iterator().next()).value(), 42);\n+            Assertions.assertEquals(1, q.capturedValues().size());\n+            Assertions.assertEquals(42, ((Var<?>)q.capturedValues().values().iterator().next()).value());\n@@ -211,1 +207,1 @@\n-            Assert.assertEquals(r, 42);\n+            Assertions.assertEquals(42, r);\n@@ -215,1 +211,1 @@\n-            Assert.assertEquals(r, 0);\n+            Assertions.assertEquals(0, r);\n@@ -219,1 +215,0 @@\n-\n@@ -226,36 +221,0 @@\n-    @DataProvider\n-    Iterator<Quotable> methodRefLambdas() {\n-        return List.of(\n-                (QuotableIntUnaryOperator) TestLambdaOps::m1,\n-                (QuotableIntUnaryOperator) TestLambdaOps::m2,\n-                (QuotableFunction<Integer, Integer>) TestLambdaOps::m1,\n-                (QuotableFunction<Integer, Integer>) TestLambdaOps::m2,\n-                (QuotableIntUnaryOperator) this::m3,\n-                (QuotableBiFunction<TestLambdaOps, Integer, Integer>) TestLambdaOps::m4\n-        ).iterator();\n-    }\n-\n-    @Test(dataProvider = \"methodRefLambdas\")\n-    public void testIsMethodReference(Quotable q) {\n-        Quoted quoted = Op.ofQuotable(q).get();\n-        LambdaOp lop = (LambdaOp) quoted.op();\n-        Assert.assertTrue(lop.methodReference().isPresent());\n-    }\n-\n-    static int m1(int i) {\n-        return i;\n-    }\n-\n-    static Integer m2(Integer i) {\n-        return i;\n-    }\n-\n-    int m3(int i) {\n-        return i;\n-    }\n-\n-    static int m4(TestLambdaOps tl, int i) {\n-        return i;\n-    }\n-\n-\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLambdaOps.java","additions":23,"deletions":64,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -24,5 +24,0 @@\n-import jdk.incubator.code.analysis.Inliner;\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -31,0 +26,1 @@\n+import jdk.incubator.code.TypeElement;\n@@ -32,0 +28,3 @@\n+import jdk.incubator.code.analysis.Inliner;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n@@ -34,0 +33,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -36,2 +37,0 @@\n-import jdk.incubator.code.dialect.java.JavaType;\n-import jdk.incubator.code.TypeElement;\n@@ -40,1 +39,0 @@\n-import static jdk.incubator.code.dialect.java.MethodRef.method;\n@@ -43,0 +41,1 @@\n+import static jdk.incubator.code.dialect.java.MethodRef.method;\n@@ -47,1 +46,1 @@\n- * @run testng TestLinqUsingQuoted\n+ * @run junit TestLinqUsingQuoted\n@@ -265,1 +264,1 @@\n-        Assert.assertEquals(qr.expression().toText(), qr2.expression().toText());\n+        Assertions.assertEquals(qr2.expression().toText(), qr.expression().toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLinqUsingQuoted.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestLiveness\n+ * @run junit TestLiveness\n@@ -30,4 +30,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -39,0 +35,1 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -41,0 +38,3 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n@@ -64,1 +64,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n@@ -100,1 +100,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n@@ -139,1 +139,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n@@ -213,1 +213,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n@@ -273,1 +273,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLiveness.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -24,5 +24,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.io.PrintStream;\n@@ -32,0 +27,1 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -34,0 +30,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.PrintStream;\n@@ -36,1 +36,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -40,1 +39,0 @@\n-import java.util.function.Function;\n@@ -46,1 +44,0 @@\n-import static jdk.incubator.code.dialect.java.JavaOp.arrayStoreOp;\n@@ -48,3 +45,1 @@\n-import static jdk.incubator.code.dialect.java.JavaOp.fieldLoad;\n-import static jdk.incubator.code.dialect.java.JavaOp.newArray;\n-import static jdk.incubator.code.dialect.java.MethodRef.method;\n+import static jdk.incubator.code.dialect.java.JavaOp.*;\n@@ -52,0 +47,1 @@\n+import static jdk.incubator.code.dialect.java.MethodRef.method;\n@@ -57,1 +53,1 @@\n- * @run testng TestLocalTransformationsAdaption\n+ * @run junit TestLocalTransformationsAdaption\n@@ -102,1 +98,1 @@\n-        Assert.assertEquals(x, f(2));\n+        Assertions.assertEquals(f(2), x);\n@@ -106,1 +102,1 @@\n-            Assert.fail();\n+            Assertions.fail();\n@@ -108,1 +104,1 @@\n-            Assert.assertEquals(IndexOutOfBoundsException.class, e.getClass());\n+            Assertions.assertEquals(e.getClass(), IndexOutOfBoundsException.class);\n@@ -146,1 +142,1 @@\n-        Assert.assertEquals(x, f(2));\n+        Assertions.assertEquals(f(2), x);\n@@ -150,1 +146,1 @@\n-            Assert.fail();\n+            Assertions.fail();\n@@ -152,1 +148,1 @@\n-            Assert.assertEquals(IndexOutOfBoundsException.class, e.getClass());\n+            Assertions.assertEquals(e.getClass(), IndexOutOfBoundsException.class);\n@@ -198,1 +194,1 @@\n-        Assert.assertEquals(x, f(2));\n+        Assertions.assertEquals(f(2), x);\n@@ -225,1 +221,1 @@\n-        Assert.assertEquals(x, f(2));\n+        Assertions.assertEquals(f(2), x);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLocalTransformationsAdaption.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run junit TestMethodRefLambda\n+ *\/\n+\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.Quotable;\n+import jdk.incubator.code.Quoted;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.List;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+import java.util.function.IntUnaryOperator;\n+\n+\/\/ Declare a per-class lifecycle, so we can declare an instance factory method\n+\/\/ as the source of arguments for parameterized tests\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class TestMethodRefLambda {\n+\n+    interface QuotableIntUnaryOperator extends IntUnaryOperator, Quotable {}\n+\n+    interface QuotableFunction<T, R> extends Function<T, R>, Quotable {}\n+\n+    interface QuotableBiFunction<T, U, R> extends BiFunction<T, U, R>, Quotable {}\n+\n+    List<Quotable> methodRefLambdas() {\n+        return List.of(\n+                (QuotableIntUnaryOperator) TestMethodRefLambda::m1,\n+                (QuotableIntUnaryOperator) TestMethodRefLambda::m2,\n+                (QuotableFunction<Integer, Integer>) TestMethodRefLambda::m1,\n+                (QuotableFunction<Integer, Integer>) TestMethodRefLambda::m2,\n+                (QuotableIntUnaryOperator) this::m3,\n+                (QuotableBiFunction<TestMethodRefLambda, Integer, Integer>) TestMethodRefLambda::m4\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"methodRefLambdas\")\n+    public void testIsMethodReference(Quotable q) {\n+        Quoted quoted = Op.ofQuotable(q).get();\n+        JavaOp.LambdaOp lop = (JavaOp.LambdaOp) quoted.op();\n+        Assertions.assertTrue(lop.methodReference().isPresent());\n+    }\n+\n+    static int m1(int i) {\n+        return i;\n+    }\n+\n+    static Integer m2(Integer i) {\n+        return i;\n+    }\n+\n+    int m3(int i) {\n+        return i;\n+    }\n+\n+    static int m4(TestMethodRefLambda tl, int i) {\n+        return i;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestMethodRefLambda.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestNormalizeBlocksTransformer\n+ * @run junit TestNormalizeBlocksTransformer\n@@ -30,4 +30,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -38,0 +34,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -255,1 +255,0 @@\n-    @DataProvider\n@@ -271,1 +270,2 @@\n-    @Test(dataProvider = \"testModels\")\n+    @ParameterizedTest\n+    @MethodSource(\"testModels\")\n@@ -274,1 +274,1 @@\n-        Assert.assertEquals(actual.toText(), expected.toText());\n+        Assertions.assertEquals(expected.toText(), actual.toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestNormalizeBlocksTransformer.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -25,3 +26,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -32,4 +35,1 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n-import java.util.*;\n+import java.util.List;\n@@ -40,1 +40,1 @@\n- * @run testng TestOverloads\n+ * @run junit TestOverloads\n@@ -75,1 +75,0 @@\n-    @DataProvider(name = \"testData\")\n@@ -87,1 +86,2 @@\n-    @Test(dataProvider = \"testData\")\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n@@ -96,1 +96,1 @@\n-            Assert.assertEquals(res1, res2);\n+            Assertions.assertEquals(res2, res1);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestOverloads.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestPatterns\n+ * @run junit TestPatterns\n@@ -30,3 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -35,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -37,0 +35,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -86,1 +85,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, r), recordPatterns(r));\n+            Assertions.assertEquals(recordPatterns(r), Interpreter.invoke(MethodHandles.lookup(), lf, r));\n@@ -93,1 +92,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, r), recordPatterns(r));\n+            Assertions.assertEquals(recordPatterns(r), Interpreter.invoke(MethodHandles.lookup(), lf, r));\n@@ -100,1 +99,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, r), recordPatterns(r));\n+            Assertions.assertEquals(recordPatterns(r), Interpreter.invoke(MethodHandles.lookup(), lf, r));\n@@ -105,1 +104,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, r), recordPatterns(r));\n+            Assertions.assertEquals(recordPatterns(r), Interpreter.invoke(MethodHandles.lookup(), lf, r));\n@@ -127,1 +126,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), recordPatterns2(o));\n+            Assertions.assertEquals(recordPatterns2(o), Interpreter.invoke(MethodHandles.lookup(), lf, o));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -2,2 +3,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -7,4 +11,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n@@ -17,1 +17,1 @@\n- * @run testng TestPatterns2\n+ * @run junit TestPatterns2\n@@ -39,1 +39,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, arg), f(arg));\n+            Assertions.assertEquals(f(arg), Interpreter.invoke(MethodHandles.lookup(), lf, arg));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns2.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestPrimitiveCast\n+ * @run junit TestPrimitiveCast\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,4 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -37,0 +34,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -39,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -153,1 +153,0 @@\n-    @DataProvider\n@@ -168,1 +167,2 @@\n-    @Test(dataProvider = \"fromMethods\")\n+    @ParameterizedTest\n+    @MethodSource(\"fromMethods\")\n@@ -171,1 +171,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, value), m.apply(value));\n+        Assertions.assertEquals(m.apply(value), Interpreter.invoke(MethodHandles.lookup(), f, value));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveCast.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-import jdk.incubator.code.Op;\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n@@ -9,0 +2,2 @@\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -11,1 +6,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -16,1 +10,8 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -23,0 +24,1 @@\n+import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -25,1 +27,0 @@\n-import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -31,1 +32,1 @@\n- * @run testng TestPrimitiveTypePatterns\n+ * @run junit TestPrimitiveTypePatterns\n@@ -50,1 +51,0 @@\n-    @DataProvider\n@@ -143,1 +143,2 @@\n-    @Test(dataProvider = \"narrowingPrimitiveAndWideningPrimitiveThatNeedCheck\")\n+    @ParameterizedTest\n+    @MethodSource(\"narrowingPrimitiveAndWideningPrimitiveThatNeedCheck\")\n@@ -161,1 +162,1 @@\n-        Assert.assertEquals(actualConvMethod, expectedConvMethod);\n+        Assertions.assertEquals(expectedConvMethod, actualConvMethod);\n@@ -166,1 +167,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, v), mh.invoke(v));\n+            Assertions.assertEquals(mh.invoke(v), Interpreter.invoke(MethodHandles.lookup(), lmodel, v));\n@@ -183,1 +184,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Short.MAX_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Short.MAX_VALUE));\n@@ -199,2 +200,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Byte.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Byte.MIN_VALUE), false);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Byte.MAX_VALUE));\n+        Assertions.assertEquals(false, Interpreter.invoke(MethodHandles.lookup(), lf, Byte.MIN_VALUE));\n@@ -216,2 +217,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n@@ -233,2 +234,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n@@ -250,2 +251,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, 1), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, (short) 1), false);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, 1));\n+        Assertions.assertEquals(false, Interpreter.invoke(MethodHandles.lookup(), lf, (short) 1));\n@@ -267,2 +268,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n@@ -284,2 +285,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n@@ -301,2 +302,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, (Object) null), false);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, \"str\"), true);\n+        Assertions.assertEquals(false, Interpreter.invoke(MethodHandles.lookup(), lf, (Object) null));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, \"str\"));\n@@ -318,4 +319,4 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Float.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Float.MIN_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Float.POSITIVE_INFINITY), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Float.NEGATIVE_INFINITY), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Float.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Float.MIN_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Float.POSITIVE_INFINITY));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Float.NEGATIVE_INFINITY));\n@@ -337,4 +338,4 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Float.MAX_VALUE), false);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), false);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Double.POSITIVE_INFINITY), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Double.NEGATIVE_INFINITY), true);\n+        Assertions.assertEquals(false, Interpreter.invoke(MethodHandles.lookup(), lf, Float.MAX_VALUE));\n+        Assertions.assertEquals(false, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Double.POSITIVE_INFINITY));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Double.NEGATIVE_INFINITY));\n@@ -356,2 +357,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE), true);\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE), true);\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MAX_VALUE));\n+        Assertions.assertEquals(true, Interpreter.invoke(MethodHandles.lookup(), lf, Integer.MIN_VALUE));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":41,"deletions":40,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1,6 +1,1 @@\n-import jdk.incubator.code.Block;\n-import jdk.incubator.code.CodeReflection;\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.Quotable;\n-import jdk.incubator.code.Quoted;\n-import jdk.incubator.code.Value;\n+import jdk.incubator.code.*;\n@@ -10,3 +5,4 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -15,6 +11,1 @@\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedHashSet;\n-import java.util.Map;\n-import java.util.SequencedMap;\n-import java.util.SequencedSet;\n+import java.util.*;\n@@ -26,1 +17,1 @@\n- * @run testng TestQuoteOp\n+ * @run junit TestQuoteOp\n@@ -51,1 +42,1 @@\n-        Assert.assertTrue(lop.getClass().isInstance(quoted.op()));\n+        Assertions.assertTrue(lop.getClass().isInstance(quoted.op()));\n@@ -55,3 +46,3 @@\n-        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[0]);\n-        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[1]);\n-        Assert.assertEquals(iterator.next(), args[2]);\n+        Assertions.assertEquals(args[0], ((CoreOp.Var) iterator.next()).value());\n+        Assertions.assertEquals(args[1], ((CoreOp.Var) iterator.next()).value());\n+        Assertions.assertEquals(args[2], iterator.next());\n@@ -76,1 +67,1 @@\n-        Assert.assertTrue(invOp.getClass().isInstance(quoted.op()));\n+        Assertions.assertTrue(invOp.getClass().isInstance(quoted.op()));\n@@ -80,2 +71,2 @@\n-        Assert.assertEquals(iterator.next(), args[0]);\n-        Assert.assertEquals(iterator.next(), args[1]);\n+        Assertions.assertEquals(args[0], iterator.next());\n+        Assertions.assertEquals(args[1], iterator.next());\n@@ -101,3 +92,3 @@\n-        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), y);\n-        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[1]);\n-        Assert.assertEquals(iterator.next(), args[0]);\n+        Assertions.assertEquals(y, ((CoreOp.Var) iterator.next()).value());\n+        Assertions.assertEquals(args[1], ((CoreOp.Var) iterator.next()).value());\n+        Assertions.assertEquals(args[0], iterator.next());\n@@ -106,2 +97,1 @@\n-    @DataProvider\n-    Object[][] invalidCases() {\n+    static Object[][] invalidCases() {\n@@ -336,1 +326,2 @@\n-    @Test(dataProvider = \"invalidCases\")\n+    @ParameterizedTest\n+    @MethodSource(\"invalidCases\")\n@@ -339,1 +330,1 @@\n-        Assert.assertThrows(RuntimeException.class, () -> Quoted.extractOp(fop, args));\n+        Assertions.assertThrows(RuntimeException.class, () -> Quoted.extractOp(fop, args));\n@@ -342,2 +333,1 @@\n-    @DataProvider\n-    Object[][] validCases() {\n+    static Object[][] validCases() {\n@@ -469,1 +459,2 @@\n-    @Test(dataProvider = \"validCases\")\n+    @ParameterizedTest\n+    @MethodSource(\"validCases\")\n@@ -480,1 +471,1 @@\n-                Assert.assertEquals(((CoreOp.Var) rv).value(), args[p.index()]);\n+                Assertions.assertEquals(args[p.index()], ((CoreOp.Var) rv).value());\n@@ -482,1 +473,1 @@\n-                Assert.assertEquals(rv, args[p.index()]);\n+                Assertions.assertEquals(args[p.index()], rv);\n@@ -487,2 +478,1 @@\n-    @DataProvider\n-    Object[][] numParamsCases() {\n+    static Object[][] numParamsCases() {\n@@ -543,1 +533,2 @@\n-    @Test(dataProvider = \"numParamsCases\")\n+    @ParameterizedTest\n+    @MethodSource(\"numParamsCases\")\n@@ -547,1 +538,1 @@\n-        Assert.assertEquals(qm.parameters().size(), expectedNumParams);\n+        Assertions.assertEquals(expectedNumParams, qm.parameters().size());\n@@ -555,1 +546,1 @@\n-        Assert.assertEquals(qm.parameters(), expectedParams);\n+        Assertions.assertEquals(expectedParams.stream().toList(), qm.parameters());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":31,"deletions":40,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1,5 +0,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n@@ -9,1 +4,5 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -22,1 +21,1 @@\n- * @run testng TestRemoveFinalVars\n+ * @run junit TestRemoveFinalVars\n@@ -48,1 +47,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), Interpreter.invoke(MethodHandles.lookup(), lf2));\n+        Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf2), Interpreter.invoke(MethodHandles.lookup(), lf));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestRemoveFinalVars.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -24,6 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -31,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -32,0 +28,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -33,0 +30,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -34,1 +35,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -42,2 +42,2 @@\n- * @run testng TestSSA\n- * @run testng\/othervm -Dbabylon.ssa=cytron TestSSA\n+ * @run junit TestSSA\n+ * @run junit\/othervm -Dbabylon.ssa=cytron TestSSA\n@@ -64,2 +64,2 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 1), ifelse(0, 0, 1));\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 11), ifelse(0, 0, 11));\n+        Assertions.assertEquals(ifelse(0, 0, 1), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 1));\n+        Assertions.assertEquals(ifelse(0, 0, 11), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 11));\n@@ -95,1 +95,1 @@\n-            Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 0, 0, i), ifelseNested(0, 0, 0, 0, i));\n+            Assertions.assertEquals(ifelseNested(0, 0, 0, 0, i), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 0, 0, 0, i));\n@@ -114,1 +114,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 10), loop(10));\n+        Assertions.assertEquals(loop(10), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 10));\n@@ -134,1 +134,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 10), nestedLoop(10));\n+        Assertions.assertEquals(nestedLoop(10), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 10));\n@@ -153,1 +153,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 10), nestedLambdaCapture(10));\n+        Assertions.assertEquals(nestedLambdaCapture(10), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 10));\n@@ -181,1 +181,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 10), deadCode(10));\n+        Assertions.assertEquals(deadCode(10), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 10));\n@@ -214,1 +214,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 10), ifelseLoopNested(10));\n+        Assertions.assertEquals(ifelseLoopNested(10), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 10));\n@@ -235,1 +235,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 1, 0, 0), violaJones(0, 1, 0, 0));\n+        Assertions.assertEquals(violaJones(0, 1, 0, 0), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 1, 0, 0));\n@@ -258,1 +258,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 1, 0, 0), violaJonesTwo(0, 1, 0, 0));\n+        Assertions.assertEquals(violaJonesTwo(0, 1, 0, 0), (int) Interpreter.invoke(MethodHandles.lookup(), lf, 0, 1, 0, 0));\n@@ -287,1 +287,1 @@\n-        Assert.assertEquals((boolean) Interpreter.invoke(MethodHandles.lookup(), lf, arr, 4), binarySearch(arr, 4));\n+        Assertions.assertEquals(binarySearch(arr, 4), (boolean) Interpreter.invoke(MethodHandles.lookup(), lf, arr, 4));\n@@ -325,1 +325,1 @@\n-        Assert.assertEquals(arr1, arr2);\n+        Assertions.assertArrayEquals(arr2, arr1);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSSA.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -5,2 +5,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -16,1 +16,1 @@\n- * @run testng TestSealOp\n+ * @run junit TestSealOp\n@@ -64,1 +64,1 @@\n-        Assert.assertTrue(funcOp.isSealed());\n+        Assertions.assertTrue(funcOp.isSealed());\n@@ -72,1 +72,1 @@\n-        Assert.assertThrows(() -> r.op().seal());\n+        Assertions.assertThrows(IllegalStateException.class, () -> r.op().seal());\n@@ -80,1 +80,1 @@\n-        Assert.assertThrows(() -> cop.setLocation(Location.NO_LOCATION));\n+        Assertions.assertThrows(IllegalStateException.class, () -> cop.setLocation(Location.NO_LOCATION));\n@@ -89,1 +89,1 @@\n-        Assert.assertTrue(b);\n+        Assertions.assertTrue(b);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSealOp.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @run testng TestStringConcatTransform\n- * @run testng\/othervm -Dbabylon.ssa=cytron TestStringConcatTransform\n+ * @run junit TestStringConcatTransform\n+ * @run junit\/othervm -Dbabylon.ssa=cytron TestStringConcatTransform\n@@ -31,0 +31,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -32,7 +33,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.NoInjection;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.InvocationTargetException;\n@@ -40,0 +34,1 @@\n+import jdk.incubator.code.analysis.SSA;\n@@ -41,0 +36,6 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -42,0 +43,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.InvocationTargetException;\n@@ -43,4 +46,0 @@\n-import jdk.incubator.code.analysis.SSA;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n@@ -98,2 +97,3 @@\n-    @Test(dataProvider = \"getClassMethods\")\n-    public void testModelTransform(@NoInjection Method method) {\n+    @ParameterizedTest\n+    @MethodSource(\"getClassMethods\")\n+    public void testModelTransform(Method method) {\n@@ -110,1 +110,1 @@\n-        Assert.assertEquals(interpreted, transformed_interpreted);\n+        Assertions.assertEquals(transformed_interpreted, interpreted);\n@@ -114,2 +114,3 @@\n-    @Test(dataProvider = \"getClassMethods\")\n-    public void testSSAModelTransform(@NoInjection Method method) {\n+    @ParameterizedTest\n+    @MethodSource(\"getClassMethods\")\n+    public void testSSAModelTransform(Method method) {\n@@ -133,1 +134,1 @@\n-        Assert.assertEquals(\"test\", args[2].toString());\n+        Assertions.assertEquals(args[2].toString(), \"test\");\n@@ -152,4 +153,4 @@\n-        Assert.assertEquals(model_interpreted, transformed_model_interpreted);\n-        Assert.assertEquals(transformed_model_interpreted, ssa_interpreted);\n-        Assert.assertEquals(ssa_interpreted, ssa_transformed_interpreted);\n-        Assert.assertEquals(ssa_transformed_interpreted, jvm_interpreted);\n+        Assertions.assertEquals(transformed_model_interpreted, model_interpreted);\n+        Assertions.assertEquals(ssa_interpreted, transformed_model_interpreted);\n+        Assertions.assertEquals(ssa_transformed_interpreted, ssa_interpreted);\n+        Assertions.assertEquals(jvm_interpreted, ssa_transformed_interpreted);\n@@ -168,1 +169,0 @@\n-    @DataProvider(name = \"getClassMethods\")\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestStringConcatTransform.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,2 +1,7 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.extern.OpWriter;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -9,5 +14,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.extern.OpWriter;\n-import jdk.incubator.code.CodeReflection;\n@@ -20,1 +20,1 @@\n- * @run testng TestSwitchExpressionOp\n+ * @run junit TestSwitchExpressionOp\n@@ -29,1 +29,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternGuard(arg));\n+            Assertions.assertEquals(casePatternGuard(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -48,1 +48,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseRecordPattern(arg));\n+            Assertions.assertEquals(caseRecordPattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -64,1 +64,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseTypePattern(arg));\n+            Assertions.assertEquals(caseTypePattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -85,1 +85,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternWithCaseConstant(arg));\n+            Assertions.assertEquals(casePatternWithCaseConstant(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -105,1 +105,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternMultiLabel(arg));\n+            Assertions.assertEquals(casePatternMultiLabel(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -124,1 +124,1 @@\n-            Assert.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n+            Assertions.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -129,1 +129,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternThrow(arg));\n+            Assertions.assertEquals(casePatternThrow(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -151,2 +151,2 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg));\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), statement, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), statement, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n@@ -193,1 +193,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, i), caseConstantOtherKindsOfExpr(i));\n+            Assertions.assertEquals(caseConstantOtherKindsOfExpr(i), Interpreter.invoke(MethodHandles.lookup(), lmodel, i));\n@@ -226,1 +226,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, day), caseConstantEnum(day));\n+            Assertions.assertEquals(caseConstantEnum(day), Interpreter.invoke(MethodHandles.lookup(), lmodel, day));\n@@ -249,1 +249,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantFallThrough(arg));\n+            Assertions.assertEquals(caseConstantFallThrough(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -279,1 +279,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantNullLabel(arg));\n+            Assertions.assertEquals(caseConstantNullLabel(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -294,1 +294,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, 8));\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, 8));\n@@ -297,1 +297,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantThrow(arg));\n+            Assertions.assertEquals(caseConstantThrow(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -315,1 +315,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantMultiLabels(arg));\n+            Assertions.assertEquals(caseConstantMultiLabels(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -336,2 +336,2 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg));\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), statement, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), statement, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n@@ -384,1 +384,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantConv(arg));\n+            Assertions.assertEquals(caseConstantConv(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -405,1 +405,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantConv2(arg));\n+            Assertions.assertEquals(caseConstantConv2(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), unconditionalPattern(arg));\n+            Assertions.assertEquals(unconditionalPattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -442,1 +442,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), defaultCaseNotTheLast(arg));\n+            Assertions.assertEquals(defaultCaseNotTheLast(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1,2 +1,7 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.extern.OpWriter;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -9,5 +14,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.extern.OpWriter;\n-import jdk.incubator.code.CodeReflection;\n@@ -20,1 +20,1 @@\n-* @run testng TestSwitchStatementOp\n+* @run junit TestSwitchStatementOp\n@@ -33,2 +33,2 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg));\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), statement, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), statement, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n@@ -94,1 +94,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantMultiLabels(arg));\n+            Assertions.assertEquals(caseConstantMultiLabels(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -115,1 +115,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, 8));\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, 8));\n@@ -119,1 +119,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantThrow(arg));\n+            Assertions.assertEquals(caseConstantThrow(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -139,1 +139,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantNullLabel(arg));\n+            Assertions.assertEquals(caseConstantNullLabel(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -158,1 +158,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantFallThrough(arg));\n+            Assertions.assertEquals(caseConstantFallThrough(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -180,1 +180,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, day), caseConstantEnum(day));\n+            Assertions.assertEquals(caseConstantEnum(day), Interpreter.invoke(MethodHandles.lookup(), lmodel, day));\n@@ -203,1 +203,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, i), caseConstantOtherKindsOfExpr(i));\n+            Assertions.assertEquals(caseConstantOtherKindsOfExpr(i), Interpreter.invoke(MethodHandles.lookup(), lmodel, i));\n@@ -237,1 +237,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, i), caseConstantConv(i));\n+            Assertions.assertEquals(caseConstantConv(i), Interpreter.invoke(MethodHandles.lookup(), lmodel, i));\n@@ -260,1 +260,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseConstantConv2(arg));\n+            Assertions.assertEquals(caseConstantConv2(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -280,1 +280,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, i), nonEnhancedSwStatNoDefault(i));\n+            Assertions.assertEquals(nonEnhancedSwStatNoDefault(i), Interpreter.invoke(MethodHandles.lookup(), lmodel, i));\n@@ -302,1 +302,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), enhancedSwStatUnconditionalPattern(arg));\n+            Assertions.assertEquals(enhancedSwStatUnconditionalPattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -325,2 +325,2 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg));\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg), Interpreter.invoke(MethodHandles.lookup(), statement, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), ruleBlock, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n+            Assertions.assertEquals(Interpreter.invoke(MethodHandles.lookup(), statement, arg), Interpreter.invoke(MethodHandles.lookup(), ruleExpression, arg));\n@@ -380,1 +380,1 @@\n-            Assert.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n+            Assertions.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -385,1 +385,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternThrow(arg));\n+            Assertions.assertEquals(casePatternThrow(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -407,1 +407,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternWithCaseConstant(arg));\n+            Assertions.assertEquals(casePatternWithCaseConstant(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseTypePattern(arg));\n+            Assertions.assertEquals(caseTypePattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -455,1 +455,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), caseRecordPattern(arg));\n+            Assertions.assertEquals(caseRecordPattern(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -475,1 +475,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), casePatternGuard(arg));\n+            Assertions.assertEquals(casePatternGuard(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), defaultCaseNotTheLast(arg));\n+            Assertions.assertEquals(defaultCaseNotTheLast(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n@@ -515,1 +515,1 @@\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, arg), tryAndSwitch(arg));\n+            Assertions.assertEquals(tryAndSwitch(arg), Interpreter.invoke(MethodHandles.lookup(), lmodel, arg));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchStatementOp.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @run testng TestTransitiveInvokeModule\n- * @run testng\/othervm -Dbabylon.ssa=cytron TestTransitiveInvokeModule\n+ * @run junit TestTransitiveInvokeModule\n+ * @run junit\/othervm -Dbabylon.ssa=cytron TestTransitiveInvokeModule\n@@ -31,0 +31,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -32,6 +33,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n@@ -40,1 +35,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -42,0 +36,1 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -43,1 +38,6 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -83,2 +83,2 @@\n-        Assert.assertEquals(r, List.of(9, 7, 5, 3, 1, -1));\n-        Assert.assertEquals(result, -2);\n+        Assertions.assertEquals(List.of(9, 7, 5, 3, 1, -1), r);\n+        Assertions.assertEquals(-2, result);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTransitiveInvokeModule.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestTraverse\n+ * @run junit TestTraverse\n@@ -30,4 +30,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n@@ -35,0 +31,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -39,1 +36,4 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n@@ -81,1 +81,1 @@\n-        Assert.assertEquals(op.elements().toList(), tl);\n+        Assertions.assertEquals(tl, op.elements().toList());\n@@ -83,1 +83,1 @@\n-        Assert.assertEquals(op.elements().limit(2).toList(), tl.subList(0, 2));\n+        Assertions.assertEquals(tl.subList(0, 2), op.elements().limit(2).toList());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTraverse.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestTry\n+ * @run junit TestTry\n@@ -30,3 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -35,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -37,0 +35,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -274,4 +273,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTry.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestTryFinally\n+ * @run junit TestTryFinally\n@@ -30,3 +30,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -35,1 +34,0 @@\n-import jdk.incubator.code.Op;\n@@ -37,0 +35,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -245,4 +244,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinally.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestTryNested\n+ * @run junit TestTryNested\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,3 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -37,0 +35,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -456,4 +455,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryNested.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestUninitializedVariable\n+ * @run junit TestUninitializedVariable\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,6 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n@@ -39,1 +34,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -41,1 +35,7 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -66,6 +66,2 @@\n-    @DataProvider\n-    Object[][] methods() {\n-        return new Object[][] {\n-                { \"simple\" },\n-                { \"controlFlow\" }\n-        };\n+    static Stream<String> methods() {\n+        return Stream.of(\"simple\", \"controlFlow\");\n@@ -74,1 +70,2 @@\n-    @Test(dataProvider = \"methods\")\n+    @ParameterizedTest\n+    @MethodSource(\"methods\")\n@@ -79,1 +76,1 @@\n-        Assert.assertThrows(Interpreter.InterpreterException.class, () -> Interpreter.invoke(MethodHandles.lookup(), f, 1));\n+        Assertions.assertThrows(Interpreter.InterpreterException.class, () -> Interpreter.invoke(MethodHandles.lookup(), f, 1));\n@@ -82,1 +79,2 @@\n-    @Test(dataProvider = \"methods\")\n+    @ParameterizedTest\n+    @MethodSource(\"methods\")\n@@ -87,1 +85,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> SSA.transform(f));\n+        Assertions.assertThrows(IllegalStateException.class, () -> SSA.transform(f));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestUninitializedVariable.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestUsesDependsOn\n+ * @run junit TestUsesDependsOn\n@@ -30,4 +30,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.*;\n+import jdk.incubator.code.Block;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.Value;\n@@ -35,0 +34,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -80,1 +81,1 @@\n-        Assert.assertEquals(dependsUpon, expected);\n+        Assertions.assertEquals(expected, dependsUpon);\n@@ -107,1 +108,1 @@\n-        Assert.assertEquals(uses, expected);\n+        Assertions.assertEquals(expected, uses);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestUsesDependsOn.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestVarArgsInvoke\n+ * @run junit TestVarArgsInvoke\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,0 +32,2 @@\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,2 +35,4 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.dialect.java.JavaType;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -37,5 +42,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.interpreter.Interpreter;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.dialect.java.JavaType;\n-import jdk.incubator.code.CodeReflection;\n@@ -101,2 +101,2 @@\n-            Assert.assertFalse(iop.isVarArgs());\n-            Assert.assertNull(iop.varArgOperands());\n+            Assertions.assertFalse(iop.isVarArgs());\n+            Assertions.assertNull(iop.varArgOperands());\n@@ -107,3 +107,3 @@\n-            Assert.assertEquals(\n-                    Interpreter.invoke(MethodHandles.lookup(), f, this, array, mk),\n-                    fArray(array, mk));\n+            Assertions.assertEquals(\n+                    fArray(array, mk), Interpreter.invoke(MethodHandles.lookup(), f, this, array, mk)\n+            );\n@@ -129,2 +129,2 @@\n-            Assert.assertTrue(iop.isVarArgs());\n-            Assert.assertTrue(iop.varArgOperands().isEmpty());\n+            Assertions.assertTrue(iop.isVarArgs());\n+            Assertions.assertTrue(iop.varArgOperands().isEmpty());\n@@ -135,3 +135,3 @@\n-            Assert.assertEquals(\n-                    Interpreter.invoke(MethodHandles.lookup(), f, this, mk),\n-                    fEmpty(mk));\n+            Assertions.assertEquals(\n+                    fEmpty(mk), Interpreter.invoke(MethodHandles.lookup(), f, this, mk)\n+            );\n@@ -157,2 +157,2 @@\n-            Assert.assertTrue(iop.isVarArgs());\n-            Assert.assertEquals(iop.varArgOperands().size(), 1);\n+            Assertions.assertTrue(iop.isVarArgs());\n+            Assertions.assertEquals(1, iop.varArgOperands().size());\n@@ -162,3 +162,3 @@\n-            Assert.assertEquals(\n-                    Interpreter.invoke(MethodHandles.lookup(), f, this, \"one\", mk),\n-                    fOne(\"one\", mk));\n+            Assertions.assertEquals(\n+                    fOne(\"one\", mk), Interpreter.invoke(MethodHandles.lookup(), f, this, \"one\", mk)\n+            );\n@@ -184,2 +184,2 @@\n-            Assert.assertTrue(iop.isVarArgs());\n-            Assert.assertEquals(iop.varArgOperands().size(), 2);\n+            Assertions.assertTrue(iop.isVarArgs());\n+            Assertions.assertEquals(2, iop.varArgOperands().size());\n@@ -189,3 +189,3 @@\n-            Assert.assertEquals(\n-                    Interpreter.invoke(MethodHandles.lookup(), f, this, \"one\", \"two\", mk),\n-                    fMany(\"one\", \"two\", mk));\n+            Assertions.assertEquals(\n+                    fMany(\"one\", \"two\", mk), Interpreter.invoke(MethodHandles.lookup(), f, this, \"one\", \"two\", mk)\n+            );\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestVarArgsInvoke.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestVarOp\n+ * @run junit TestVarOp\n@@ -30,6 +30,1 @@\n-import jdk.incubator.code.dialect.core.CoreType;\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n+import jdk.incubator.code.CodeReflection;\n@@ -40,1 +35,2 @@\n-import jdk.incubator.code.extern.OpParser;\n+import jdk.incubator.code.dialect.core.CoreType;\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -42,1 +38,5 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.extern.OpParser;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n@@ -67,1 +67,1 @@\n-        Assert.assertEquals(vops.get(0).resultType().valueType(), JavaType.type(CharSequence.class));\n+        Assertions.assertEquals(JavaType.type(CharSequence.class), vops.get(0).resultType().valueType());\n@@ -69,1 +69,1 @@\n-        Assert.assertEquals(vops.get(1).resultType().valueType(), JavaType.J_L_OBJECT);\n+        Assertions.assertEquals(JavaType.J_L_OBJECT, vops.get(1).resultType().valueType());\n@@ -90,1 +90,1 @@\n-        Assert.assertTrue(allNullNames);\n+        Assertions.assertTrue(allNullNames);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestVarOp.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -24,4 +24,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n@@ -30,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -32,0 +29,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -33,1 +34,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -40,1 +40,1 @@\n- * @run testng TestWhileOp\n+ * @run junit TestWhileOp\n@@ -64,1 +64,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), whileLoop());\n+        Assertions.assertEquals(whileLoop(), Interpreter.invoke(MethodHandles.lookup(), lf));\n@@ -86,1 +86,1 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf), doWhileLoop());\n+        Assertions.assertEquals(doWhileLoop(), Interpreter.invoke(MethodHandles.lookup(), lf));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestWhileOp.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,3 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -28,2 +25,1 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -31,0 +27,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -33,0 +30,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -34,0 +32,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -46,2 +45,2 @@\n- * @run testng TestForwardAutoDiff\n- * @run testng\/othervm -Dbabylon.ssa=cytron TestForwardAutoDiff\n+ * @run junit TestForwardAutoDiff\n+ * @run junit\/othervm -Dbabylon.ssa=cytron TestForwardAutoDiff\n@@ -61,2 +60,2 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 0.0, 1.0), f(0.0, 1.0));\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, PI_4, PI_4), f(PI_4, PI_4));\n+        Assertions.assertEquals(f(0.0, 1.0), Interpreter.invoke(MethodHandles.lookup(), f, 0.0, 1.0));\n+        Assertions.assertEquals(f(PI_4, PI_4), Interpreter.invoke(MethodHandles.lookup(), f, PI_4, PI_4));\n@@ -70,2 +69,2 @@\n-        Assert.assertEquals((double) dff_dx_mh.invoke(0.0, 1.0), df_dx(0.0, 1.0));\n-        Assert.assertEquals((double) dff_dx_mh.invoke(PI_4, PI_4), df_dx(PI_4, PI_4));\n+        Assertions.assertEquals(df_dx(0.0, 1.0), (double) dff_dx_mh.invoke(0.0, 1.0));\n+        Assertions.assertEquals(df_dx(PI_4, PI_4), (double) dff_dx_mh.invoke(PI_4, PI_4));\n@@ -76,2 +75,2 @@\n-        Assert.assertEquals((double) dff_dy_mh.invoke(0.0, 1.0), df_dy(0.0, 1.0));\n-        Assert.assertEquals((double) dff_dy_mh.invoke(PI_4, PI_4), df_dy(PI_4, PI_4));\n+        Assertions.assertEquals(df_dy(0.0, 1.0), (double) dff_dy_mh.invoke(0.0, 1.0));\n+        Assertions.assertEquals(df_dy(PI_4, PI_4), (double) dff_dy_mh.invoke(PI_4, PI_4));\n@@ -104,3 +103,3 @@\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 6), fcf(2.0, 6));\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 5), fcf(2.0, 5));\n-        Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 4), fcf(2.0, 4));\n+        Assertions.assertEquals(fcf(2.0, 6), Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 6));\n+        Assertions.assertEquals(fcf(2.0, 5), Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 5));\n+        Assertions.assertEquals(fcf(2.0, 4), Interpreter.invoke(MethodHandles.lookup(), f, 2.0, 4));\n@@ -114,3 +113,3 @@\n-        Assert.assertEquals((double) df_dx_mh.invoke(2.0, 6), dfcf_dx(2.0, 6));\n-        Assert.assertEquals((double) df_dx_mh.invoke(2.0, 5), dfcf_dx(2.0, 5));\n-        Assert.assertEquals((double) df_dx_mh.invoke(2.0, 4), dfcf_dx(2.0, 4));\n+        Assertions.assertEquals(dfcf_dx(2.0, 6), (double) df_dx_mh.invoke(2.0, 6));\n+        Assertions.assertEquals(dfcf_dx(2.0, 5), (double) df_dx_mh.invoke(2.0, 5));\n+        Assertions.assertEquals(dfcf_dx(2.0, 4), (double) df_dx_mh.invoke(2.0, 4));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/TestForwardAutoDiff.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -24,5 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -30,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -31,0 +28,3 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -42,1 +41,1 @@\n- * @run testng TestArrayCreation\n+ * @run junit TestArrayCreation\n@@ -57,1 +56,1 @@\n-        Assert.assertEquals((String[]) mh.invoke(), f());\n+        Assertions.assertArrayEquals(f(), (String[]) mh.invoke());\n@@ -71,1 +70,1 @@\n-        Assert.assertEquals((String[][]) mh.invoke(), f2());\n+        Assertions.assertArrayEquals(f2(), (String[][]) mh.invoke());\n@@ -85,1 +84,1 @@\n-        Assert.assertEquals((String[][]) mh.invoke(), f3());\n+        Assertions.assertArrayEquals(f3(), (String[][]) mh.invoke());\n@@ -99,1 +98,1 @@\n-        Assert.assertEquals((String[][]) mh.invoke(), f4());\n+        Assertions.assertArrayEquals(f4(), (String[][]) mh.invoke());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestArrayCreation.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -24,0 +24,5 @@\n+import jdk.incubator.code.bytecode.impl.BranchCompactor;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n@@ -27,2 +32,0 @@\n-import jdk.internal.classfile.components.ClassPrinter;\n-import static java.lang.classfile.Opcode.*;\n@@ -31,1 +34,0 @@\n-import jdk.incubator.code.bytecode.impl.BranchCompactor;\n@@ -33,2 +35,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+\n+import static java.lang.classfile.Opcode.*;\n@@ -42,1 +44,1 @@\n- * @run testng TestBranchCompactor\n+ * @run junit TestBranchCompactor\n@@ -79,4 +81,4 @@\n-        Assert.assertEquals(\n-                code.elementList().stream().mapMulti((e, ec) -> {if (e instanceof Instruction i) ec.accept(i.opcode());}).toList(),\n-                List.of(NOP, ICONST_0, IFEQ, GOTO, NOP, RETURN));\n-        Assert.assertEquals(code.findAttribute(Attributes.lineNumberTable()).get().lineNumbers().size(), 2);\n+        Assertions.assertEquals(\n+                List.of(NOP, ICONST_0, IFEQ, GOTO, NOP, RETURN), code.elementList().stream().mapMulti((e, ec) -> {if (e instanceof Instruction i) ec.accept(i.opcode());}).toList()\n+        );\n+        Assertions.assertEquals(2, code.findAttribute(Attributes.lineNumberTable()).get().lineNumbers().size());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,0 +24,14 @@\n+import jdk.incubator.code.*;\n+import jdk.incubator.code.bytecode.BytecodeGenerator;\n+import jdk.incubator.code.bytecode.BytecodeLift;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.opentest4j.TestSkippedException;\n+\n@@ -27,3 +41,0 @@\n-\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import jdk.internal.classfile.components.ClassPrinter;\n@@ -34,10 +45,0 @@\n-import org.testng.Assert;\n-import org.testng.SkipException;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.*;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.bytecode.BytecodeLift;\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -45,3 +46,0 @@\n-import jdk.incubator.code.bytecode.BytecodeGenerator;\n-import jdk.incubator.code.dialect.java.JavaType;\n-import jdk.incubator.code.CodeReflection;\n@@ -61,1 +59,1 @@\n- * @run testng\/othervm -Djdk.invoke.MethodHandle.dumpClassFiles=true TestBytecode\n+ * @run junit\/othervm -Djdk.invoke.MethodHandle.dumpClassFiles=true TestBytecode\n@@ -392,3 +390,3 @@\n-        Assert.assertNotNull(Op.ofQuotable(f).get());\n-        Assert.assertNotNull(Op.ofQuotable(f).get().op());\n-        Assert.assertTrue(Op.ofQuotable(f).get().op() instanceof JavaOp.LambdaOp);\n+        Assertions.assertNotNull(Op.ofQuotable(f).get());\n+        Assertions.assertNotNull(Op.ofQuotable(f).get().op());\n+        Assertions.assertTrue(Op.ofQuotable(f).get().op() instanceof JavaOp.LambdaOp);\n@@ -571,2 +569,1 @@\n-    @DataProvider(name = \"testMethods\")\n-    public static TestData[]testMethods() {\n+    public static Stream<TestData> testMethods() {\n@@ -575,1 +572,1 @@\n-                .map(TestData::new).toArray(TestData[]::new);\n+                .map(TestData::new);\n@@ -581,1 +578,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -639,1 +636,2 @@\n-    @Test(dataProvider = \"testMethods\")\n+    @ParameterizedTest\n+    @MethodSource(\"testMethods\")\n@@ -662,1 +660,1 @@\n-                Assert.assertEquals(invokeAndConvert(flift, receiver1, args), d.testMethod.invoke(receiver2, args)));\n+                    assertEquals(d.testMethod.invoke(receiver2, args), invokeAndConvert(flift, receiver1, args)));\n@@ -692,1 +690,2 @@\n-    @Test(dataProvider = \"testMethods\")\n+    @ParameterizedTest\n+    @MethodSource(\"testMethods\")\n@@ -700,1 +699,1 @@\n-            throw new SkipException(\"lowering caused:\", uoe);\n+            throw new TestSkippedException(\"lowering caused:\", uoe);\n@@ -714,4 +713,4 @@\n-                    List argl = new ArrayList(args.length + 1);\n-                    if (receiver1 != null) argl.add(receiver1);\n-                    argl.addAll(Arrays.asList(args));\n-                    Assert.assertEquals(mh.invokeWithArguments(argl), d.testMethod.invoke(receiver2, args));\n+                List argl = new ArrayList(args.length + 1);\n+                if (receiver1 != null) argl.add(receiver1);\n+                argl.addAll(Arrays.asList(args));\n+                assertEquals(d.testMethod.invoke(receiver2, args), mh.invokeWithArguments(argl));\n@@ -741,0 +740,8 @@\n+\n+    private static void assertEquals(Object expected, Object actual) {\n+        switch (expected) {\n+            case int[] expArr when actual instanceof int[] actArr -> Assertions.assertArrayEquals(expArr, actArr);\n+            case Object[] expArr when actual instanceof Object[] actArr -> Assertions.assertArrayEquals(expArr, actArr);\n+            case null, default -> Assertions.assertEquals(expected, actual);\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestInvokeSuper\n+ * @run junit TestInvokeSuper\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,3 +32,6 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Ignore;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.bytecode.BytecodeGenerator;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -38,4 +42,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.bytecode.BytecodeGenerator;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n@@ -67,1 +67,1 @@\n-    @Ignore\n+    @Disabled\n@@ -75,1 +75,1 @@\n-            Assert.assertEquals(mh.invoke(b), b.f());\n+            Assertions.assertEquals(b.f(), mh.invoke(b));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestInvokeSuper.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -24,2 +24,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.bytecode.BytecodeLift;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -29,5 +32,1 @@\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDescs;\n-import java.lang.constant.DynamicCallSiteDesc;\n-import java.lang.constant.DynamicConstantDesc;\n-import java.lang.constant.MethodTypeDesc;\n+import java.lang.constant.*;\n@@ -36,3 +35,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.bytecode.BytecodeLift;\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -44,1 +40,1 @@\n- * @run testng TestLiftCustomBytecode\n+ * @run junit TestLiftCustomBytecode\n@@ -70,1 +66,1 @@\n-        Assert.assertEquals((int) Interpreter.invoke(MethodHandles.lookup(), f, 42), 42);\n+        Assertions.assertEquals(42, (int) Interpreter.invoke(MethodHandles.lookup(), f, 42));\n@@ -85,1 +81,1 @@\n-        Assert.assertEquals((long) Interpreter.invoke(MethodHandles.lookup(), f), 4);\n+        Assertions.assertEquals(4, (long) Interpreter.invoke(MethodHandles.lookup(), f));\n@@ -100,8 +96,8 @@\n-        Assert.assertEquals((String)Interpreter.invoke(lookup, toString, tr1), tr1.toString());\n-        Assert.assertEquals((String)Interpreter.invoke(lookup, toString, tr2), tr2.toString());\n-        Assert.assertEquals((int)Interpreter.invoke(lookup, hashCode, tr1), tr1.hashCode());\n-        Assert.assertEquals((int)Interpreter.invoke(lookup, hashCode, tr2), tr2.hashCode());\n-        Assert.assertTrue((boolean)Interpreter.invoke(lookup, equals, tr1, tr1));\n-        Assert.assertFalse((boolean)Interpreter.invoke(lookup, equals, tr1, tr2));\n-        Assert.assertTrue((boolean)Interpreter.invoke(lookup, equals, tr1, tr3));\n-        Assert.assertFalse((boolean)Interpreter.invoke(lookup, equals, tr1, \"hello\"));\n+        Assertions.assertEquals(tr1.toString(), (String)Interpreter.invoke(lookup, toString, tr1));\n+        Assertions.assertEquals(tr2.toString(), (String)Interpreter.invoke(lookup, toString, tr2));\n+        Assertions.assertEquals(tr1.hashCode(), (int)Interpreter.invoke(lookup, hashCode, tr1));\n+        Assertions.assertEquals(tr2.hashCode(), (int)Interpreter.invoke(lookup, hashCode, tr2));\n+        Assertions.assertTrue((boolean)Interpreter.invoke(lookup, equals, tr1, tr1));\n+        Assertions.assertFalse((boolean)Interpreter.invoke(lookup, equals, tr1, tr2));\n+        Assertions.assertTrue((boolean)Interpreter.invoke(lookup, equals, tr1, tr3));\n+        Assertions.assertFalse((boolean)Interpreter.invoke(lookup, equals, tr1, \"hello\"));\n@@ -123,1 +119,1 @@\n-        Assert.assertEquals((Class)Interpreter.invoke(lookup, primitiveInteger), int.class);\n+        Assertions.assertEquals(int.class, (Class)Interpreter.invoke(lookup, primitiveInteger));\n@@ -139,1 +135,1 @@\n-        Assert.assertEquals((String)Interpreter.invoke(lookup, concatMethod), \"ABC\");\n+        Assertions.assertEquals(\"ABC\", (String)Interpreter.invoke(lookup, concatMethod));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftCustomBytecode.java","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -24,4 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.dialect.core.CoreOp;\n@@ -29,0 +25,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -30,0 +27,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +39,1 @@\n- * @run testng TestLiftExample\n+ * @run junit TestLiftExample\n@@ -78,1 +77,1 @@\n-        Assert.assertEquals((int) pf.apply(1), 2);\n+        Assertions.assertEquals(2, (int) pf.apply(1));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftExample.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestNestedCapturingLambda\n+ * @run junit TestNestedCapturingLambda\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,6 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n@@ -41,1 +36,6 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -66,1 +66,1 @@\n-        Assert.assertEquals(capture.value().intValue(), a);\n+        Assertions.assertEquals(a, capture.value().intValue());\n@@ -75,2 +75,2 @@\n-        Assert.assertEquals((int) mh.invoke(42), f(42));\n-        Assert.assertEquals((int) mh.invoke(-1), f(-1));\n+        Assertions.assertEquals(f(42), (int) mh.invoke(42));\n+        Assertions.assertEquals(f(-1), (int) mh.invoke(-1));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestNestedCapturingLambda.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,3 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -28,0 +25,1 @@\n+import jdk.incubator.code.Op;\n@@ -30,2 +28,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.Op;\n@@ -33,0 +29,3 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +39,1 @@\n- * @run testng TestQuoted\n+ * @run junit TestQuoted\n@@ -55,1 +54,1 @@\n-        Assert.assertEquals(3, (int) mh.invoke(1, 2));\n+        Assertions.assertEquals((int) mh.invoke(1, 2), 3);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestQuoted.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -23,3 +23,0 @@\n-import jdk.incubator.code.dialect.core.CoreType;\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.annotations.Test;\n@@ -32,0 +29,2 @@\n+import jdk.incubator.code.dialect.core.CoreType;\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -34,0 +33,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n- * @run testng TestSlots\n+ * @run junit TestSlots\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlotOps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,5 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -30,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -31,0 +28,3 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -42,1 +41,1 @@\n- * @run testng TestSlots\n+ * @run junit TestSlots\n@@ -61,1 +60,1 @@\n-        Assert.assertEquals(f(1.0d, 2.0d), (double) mh.invoke(1.0d, 2.0d));\n+        Assertions.assertEquals((double) mh.invoke(1.0d, 2.0d), f(1.0d, 2.0d));\n@@ -75,1 +74,1 @@\n-        Assert.assertEquals(f2(1.0d, 2.0d), (double) mh.invoke(1.0d, 2.0d));\n+        Assertions.assertEquals((double) mh.invoke(1.0d, 2.0d), f2(1.0d, 2.0d));\n@@ -99,1 +98,1 @@\n-            Assert.assertEquals(f3(2.0d, i), (double) mh.invoke(2.0d, i));\n+            Assertions.assertEquals((double) mh.invoke(2.0d, i), f3(2.0d, i));\n@@ -116,1 +115,1 @@\n-            Assert.fail(\"invalid class file generated\", e);\n+            Assertions.fail(\"invalid class file generated\", e);\n@@ -120,1 +119,1 @@\n-        Assert.assertEquals(f4(1, 2), (int) mh.invoke(1, 2));\n+        Assertions.assertEquals((int) mh.invoke(1, 2), f4(1, 2));\n@@ -136,1 +135,1 @@\n-            Assert.fail(\"invalid class file generated\", e);\n+            Assertions.fail(\"invalid class file generated\", e);\n@@ -140,1 +139,1 @@\n-        Assert.assertEquals(f5(1.0, 2.0), (double) mh.invoke(1.0, 2.0));\n+        Assertions.assertEquals((double) mh.invoke(1.0, 2.0), f5(1.0, 2.0));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -24,9 +24,0 @@\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.Instruction;\n-import java.lang.classfile.Label;\n-import java.lang.classfile.MethodModel;\n-import java.lang.classfile.Opcode;\n-import java.lang.classfile.attribute.CodeAttribute;\n-import jdk.internal.classfile.components.ClassPrinter;\n-import java.lang.classfile.instruction.*;\n-import java.lang.invoke.MethodHandles;\n@@ -36,0 +27,9 @@\n+import jdk.internal.classfile.components.ClassPrinter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.classfile.*;\n+import java.lang.classfile.attribute.CodeAttribute;\n+import java.lang.classfile.instruction.*;\n+import java.lang.invoke.MethodHandles;\n@@ -44,3 +44,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Ignore;\n-import org.testng.annotations.Test;\n@@ -54,1 +51,1 @@\n- * @run testng TestSmallCorpus\n+ * @run junit TestSmallCorpus\n@@ -82,1 +79,1 @@\n-    @Ignore\n+    @Disabled\n@@ -102,1 +99,1 @@\n-        Assert.assertTrue(stable > 54500 && unstable == 0, String.format(\"stable: %d unstable: %d\", stable, unstable));\n+        Assertions.assertTrue(stable > 54500 && unstable == 0, String.format(\"stable: %d unstable: %d\", stable, unstable));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng TestSynchronizedOp\n+ * @run junit TestSynchronizedOp\n@@ -31,0 +31,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -32,2 +33,5 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.bytecode.BytecodeGenerator;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -43,4 +47,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.bytecode.BytecodeGenerator;\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.CodeReflection;\n@@ -79,1 +79,1 @@\n-        Assert.assertEquals(monitorCount, Map.of(\n+        Assertions.assertEquals(Map.of(\n@@ -81,1 +81,1 @@\n-                Opcode.MONITOREXIT, 2L));\n+                Opcode.MONITOREXIT, 2L), monitorCount);\n@@ -93,1 +93,1 @@\n-        Assert.assertEquals((int) mf.invoke(monitor, 0, a), 1);\n+        Assertions.assertEquals(1, (int) mf.invoke(monitor, 0, a));\n@@ -95,1 +95,1 @@\n-        Assert.assertThrows(RuntimeException.class, () -> {\n+        Assertions.assertThrows(RuntimeException.class, () -> {\n@@ -98,1 +98,1 @@\n-        Assert.assertEquals(a[0], 0);\n+        Assertions.assertEquals(0, a[0]);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSynchronizedOp.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -24,5 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -30,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -31,0 +28,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,0 +30,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -47,1 +46,1 @@\n- * @run testng TestTry\n+ * @run junit TestTry\n@@ -254,4 +253,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTry.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -24,5 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -30,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -31,0 +28,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,0 +30,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -47,1 +46,1 @@\n- * @run testng TestTryFinally\n+ * @run junit TestTryFinally\n@@ -255,4 +254,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinally.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -24,5 +24,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.CodeReflection;\n@@ -30,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -31,0 +28,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,0 +30,2 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -47,1 +46,1 @@\n- * @run testng TestTryFinallyNested\n+ * @run junit TestTryFinallyNested\n@@ -213,4 +212,4 @@\n-            Assert.assertEquals(\n-                    actualT != null ? actualT.getClass() : null,\n-                    expectedT != null ? expectedT.getClass() : null);\n-            Assert.assertEquals(actual, expected);\n+            Assertions.assertEquals(\n+                    expectedT != null ? expectedT.getClass() : null, actualT != null ? actualT.getClass() : null\n+            );\n+            Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinallyNested.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -6,2 +6,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -10,1 +11,0 @@\n-import jdk.internal.classfile.components.ClassPrinter;\n@@ -23,1 +23,1 @@\n- * @run testng TestVarArg\n+ * @run junit TestVarArg\n@@ -41,1 +41,1 @@\n-        Assert.assertEquals(mh.invoke(), f());\n+        Assertions.assertEquals(f(), mh.invoke());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestVarArg.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,4 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n@@ -29,2 +25,0 @@\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.dialect.core.CoreOp;\n@@ -32,0 +26,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -34,0 +29,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -35,0 +31,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -39,1 +39,1 @@\n- * @run testng TestExpressionElimination\n+ * @run junit TestExpressionElimination\n@@ -48,1 +48,1 @@\n-        Assert.assertEquals((double) Interpreter.invoke(MethodHandles.lookup(), lf, 1.0d), 1.0d);\n+        Assertions.assertEquals(1.0d, (double) Interpreter.invoke(MethodHandles.lookup(), lf, 1.0d));\n@@ -55,1 +55,1 @@\n-        Assert.assertEquals((double) Interpreter.invoke(MethodHandles.lookup(), lf, 1.0d, 1.0d), 0.0d);\n+        Assertions.assertEquals(0.0d, (double) Interpreter.invoke(MethodHandles.lookup(), lf, 1.0d, 1.0d));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/expression\/TestExpressionElimination.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,1 @@\n- * @run testng TestArgsTypesValidationWhenInterpreting\n+ * @run junit TestArgsTypesValidationWhenInterpreting\n@@ -53,1 +53,1 @@\n-        Assert.assertEquals(res, 4d);\n+        Assertions.assertEquals(4d, res);\n@@ -57,1 +57,1 @@\n-        Assert.assertEquals(res, 4d);\n+        Assertions.assertEquals(4d, res);\n@@ -59,1 +59,1 @@\n-        Assert.assertThrows(() -> Interpreter.invoke(MethodHandles.lookup(), funcOp, new Object(), 2));\n+        Assertions.assertThrows(Throwable.class, () -> Interpreter.invoke(MethodHandles.lookup(), funcOp, new Object(), 2));\n@@ -61,1 +61,1 @@\n-        Assert.assertThrows(() -> Interpreter.invoke(MethodHandles.lookup(), funcOp, this, 2d));\n+        Assertions.assertThrows(Throwable.class, () -> Interpreter.invoke(MethodHandles.lookup(), funcOp, this, 2d));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestArgsTypesValidationWhenInterpreting.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -23,0 +23,2 @@\n+\n+import jdk.incubator.code.CodeReflection;\n@@ -25,4 +27,0 @@\n-import java.util.List;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -30,1 +28,3 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -32,2 +32,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.util.List;\n@@ -38,1 +39,1 @@\n- * @run testng\/othervm -ea TestAssert\n+ * @run junit\/othervm -ea TestAssert\n@@ -67,1 +68,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -75,1 +76,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -83,1 +84,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -91,1 +92,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -99,1 +100,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -107,1 +108,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -115,1 +116,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -123,1 +124,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -131,1 +132,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -139,1 +140,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -147,1 +148,1 @@\n-            Assert.fail(\"Assertion failure messages do not match.\");\n+            Assertions.fail(\"Assertion failure messages do not match.\");\n@@ -185,1 +186,1 @@\n-            Assert.assertNotNull(ae);\n+            Assertions.assertNotNull(ae);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestAssert.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -24,3 +24,1 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n-\n+import jdk.incubator.code.CodeReflection;\n@@ -29,1 +27,3 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -31,3 +31,2 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -38,1 +37,1 @@\n- * @run testng TestThrowing\n+ * @run junit TestThrowing\n@@ -43,1 +42,2 @@\n-    @Test(dataProvider = \"methods-exceptions\")\n+    @ParameterizedTest\n+    @MethodSource(\"testData\")\n@@ -46,1 +46,1 @@\n-        Assert.assertThrows(expectedExceptionType, () -> Interpreter.invoke(MethodHandles.lookup(), Op.ofMethod(method).orElseThrow()));\n+        Assertions.assertThrows(expectedExceptionType, () -> Interpreter.invoke(MethodHandles.lookup(), Op.ofMethod(method).orElseThrow()));\n@@ -49,2 +49,1 @@\n-    @DataProvider(name = \"methods-exceptions\")\n-    static Object[][] testData() throws NoSuchMethodException {\n+    static Object[][] testData() {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestThrowing.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -24,2 +24,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -28,1 +29,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -35,1 +35,1 @@\n- * @run testng TestLinq\n+ * @run junit TestLinq\n@@ -61,1 +61,1 @@\n-        Assert.assertEquals(qr.expression().toText(), qr2.expression().toText());\n+        Assertions.assertEquals(qr2.expression().toText(), qr.expression().toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/TestLinq.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestLocation\n+ * @run junit TestLocation\n@@ -30,5 +30,1 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.io.StringWriter;\n-import java.lang.reflect.Method;\n+import jdk.incubator.code.CodeReflection;\n@@ -42,1 +38,5 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n@@ -53,1 +53,1 @@\n-                Assert.assertNotNull(loc);\n+                Assertions.assertNotNull(loc);\n@@ -57,1 +57,1 @@\n-                Assert.assertEquals(actualLine, expectedLine);\n+                Assertions.assertEquals(expectedLine, actualLine);\n@@ -105,1 +105,1 @@\n-        Assert.assertTrue(noLocations);\n+        Assertions.assertTrue(noLocations);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/location\/TestLocation.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestParse\n+ * @run junit TestParse\n@@ -30,4 +30,0 @@\n-import jdk.incubator.code.dialect.java.JavaOp;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n@@ -35,1 +31,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n@@ -37,0 +32,2 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n@@ -39,0 +36,3 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n@@ -42,1 +42,2 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.return_;\n+import static jdk.incubator.code.dialect.core.CoreOp.*;\n+import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -44,2 +45,0 @@\n-import static jdk.incubator.code.dialect.core.CoreOp.constant;\n-import static jdk.incubator.code.dialect.core.CoreOp.func;\n@@ -47,1 +46,0 @@\n-import static jdk.incubator.code.dialect.core.CoreType.functionType;\n@@ -120,1 +118,1 @@\n-        Assert.assertEquals(v, \"\\b \\f \\n \\r \\t \\' \\\" \\\\\");\n+        Assertions.assertEquals(\"\\b \\f \\n \\r \\t \\' \\\" \\\\\", v);\n@@ -124,1 +122,1 @@\n-        Assert.assertEquals(a.toText(), b.toText());\n+        Assertions.assertEquals(b.toText(), a.toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestParse.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -24,4 +24,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -30,0 +26,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -38,1 +38,1 @@\n- * @run testng TestScanner\n+ * @run junit TestScanner\n@@ -43,2 +43,1 @@\n-    @DataProvider\n-    Object[][] data() {\n+    static Object[][] data() {\n@@ -83,1 +82,2 @@\n-    @Test(dataProvider = \"data\")\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n@@ -95,1 +95,1 @@\n-        Assert.assertEquals(actualTokens.size(), expectedTokens.size());\n+        Assertions.assertEquals(expectedTokens.size(), actualTokens.size());\n@@ -100,1 +100,1 @@\n-                Assert.assertEquals(a.kind, t);\n+                Assertions.assertEquals(t, a.kind);\n@@ -107,1 +107,1 @@\n-                Assert.assertEquals(as, v);\n+                Assertions.assertEquals(v, as);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestScanner.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestStream\n+ * @run junit TestStream\n@@ -30,4 +30,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n@@ -37,0 +33,4 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -94,1 +94,1 @@\n-        Assert.assertEquals(expected, actual);\n+        Assertions.assertEquals(actual, expected);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStream.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestStreamUsingQuotable\n+ * @run junit TestStreamUsingQuotable\n@@ -30,5 +30,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-\n@@ -36,1 +31,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -38,0 +32,5 @@\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n@@ -94,1 +93,1 @@\n-        Assert.assertEquals(expected, actual);\n+        Assertions.assertEquals(actual, expected);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStreamUsingQuotable.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run testng TestErasure\n+ * @run junit TestErasure\n@@ -32,9 +32,1 @@\n-import static org.testng.Assert.*;\n-\n-import org.testng.annotations.*;\n-\n-import jdk.incubator.code.dialect.java.ArrayType;\n-import jdk.incubator.code.dialect.java.ClassType;\n-import jdk.incubator.code.dialect.java.JavaType;\n-import jdk.incubator.code.dialect.java.PrimitiveType;\n-import jdk.incubator.code.dialect.java.TypeVariableType;\n+import jdk.incubator.code.dialect.java.*;\n@@ -42,0 +34,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -44,0 +39,3 @@\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +43,0 @@\n-@Test\n@@ -48,1 +45,2 @@\n-    @Test(dataProvider = \"typesAndErasures\")\n+    @ParameterizedTest\n+    @MethodSource(\"typesAndErasures\")\n@@ -55,2 +53,1 @@\n-    @DataProvider\n-    public static Object[][] typesAndErasures() {\n+    public static Stream<Object[]> typesAndErasures() {\n@@ -65,2 +62,1 @@\n-                .map(t -> new Object[] { t.type.toString(), t })\n-                .toArray(Object[][]::new);\n+                .map(t -> new Object[] { t.type.toString(), t });\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestErasure.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -26,3 +26,4 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,1 +36,0 @@\n-\n@@ -45,1 +45,1 @@\n- * @run testng TestJavaType\n+ * @run junit TestJavaType\n@@ -50,2 +50,1 @@\n-    @DataProvider\n-    public Object[][] JavaTypes() {\n+    public static Object[][] JavaTypes() {\n@@ -70,1 +69,2 @@\n-    @Test(dataProvider = \"JavaTypes\")\n+    @ParameterizedTest\n+    @MethodSource(\"JavaTypes\")\n@@ -73,3 +73,3 @@\n-        Assert.assertEquals(jt.toString(), tds);\n-        Assert.assertEquals(jt.toNominalDescriptor().descriptorString(), bcd);\n-        Assert.assertEquals(jt, JavaType.type(ClassDesc.ofDescriptor(bcd)));\n+        Assertions.assertEquals(tds, jt.toString());\n+        Assertions.assertEquals(bcd, jt.toNominalDescriptor().descriptorString());\n+        Assertions.assertEquals(JavaType.type(ClassDesc.ofDescriptor(bcd)), jt);\n@@ -78,2 +78,1 @@\n-    @DataProvider\n-    public Object[][] classDescriptors() {\n+    public static Object[][] classDescriptors() {\n@@ -85,1 +84,2 @@\n-    @Test(dataProvider = \"classDescriptors\")\n+    @ParameterizedTest\n+    @MethodSource(\"classDescriptors\")\n@@ -88,2 +88,2 @@\n-        Assert.assertEquals(jt.toString(), tds);\n-        Assert.assertEquals(jt.toClassName(), bcd);\n+        Assertions.assertEquals(tds, jt.toString());\n+        Assertions.assertEquals(bcd, jt.toClassName());\n@@ -92,3 +92,1 @@\n-\n-    @DataProvider\n-    public Object[][] basicJavaTypes() {\n+    public static Object[][] basicJavaTypes() {\n@@ -115,1 +113,2 @@\n-    @Test(dataProvider = \"basicJavaTypes\")\n+    @ParameterizedTest\n+    @MethodSource(\"basicJavaTypes\")\n@@ -118,2 +117,2 @@\n-        Assert.assertEquals(jt.toString(), tds);\n-        Assert.assertEquals(jt.toBasicType().toString(), btds);\n+        Assertions.assertEquals(tds, jt.toString());\n+        Assertions.assertEquals(btds, jt.toBasicType().toString());\n@@ -123,2 +122,1 @@\n-    @DataProvider\n-    public Object[][] argumentJavaTypes() {\n+    public static Object[][] argumentJavaTypes() {\n@@ -126,7 +124,7 @@\n-                {\"java.util.List<T>\", \"T\"},\n-                {\"java.util.List<T>[]\", \"T\"},\n-                {\"java.util.List<java.util.function.Supplier<T>>\", \"java.util.function.Supplier<T>\"},\n-                {\"java.util.List<java.util.function.Supplier<T>>[][]\", \"java.util.function.Supplier<T>\"},\n-                {\"java.util.Map<K, V>\", \"K\", \"V\"},\n-                {\"ab<cd<S<T, V>, N>>\", \"cd<S<T, V>, N>\"},\n-                {\"java.util.Consumer<java.util.Function<String, Number>>\", \"java.util.Function<String, Number>\"},\n+                {\"java.util.List<T>\", new String[] {\"T\"}},\n+                {\"java.util.List<T>[]\", new String[] {\"T\"}},\n+                {\"java.util.List<java.util.function.Supplier<T>>\", new String[] {\"java.util.function.Supplier<T>\"}},\n+                {\"java.util.List<java.util.function.Supplier<T>>[][]\", new String[] {\"java.util.function.Supplier<T>\"}},\n+                {\"java.util.Map<K, V>\", new String[] {\"K\", \"V\"}},\n+                {\"ab<cd<S<T, V>, N>>\", new String[] {\"cd<S<T, V>, N>\"}},\n+                {\"java.util.Consumer<java.util.Function<String, Number>>\", new String[] {\"java.util.Function<String, Number>\"}},\n@@ -136,1 +134,2 @@\n-    @Test(dataProvider = \"argumentJavaTypes\")\n+    @ParameterizedTest\n+    @MethodSource(\"argumentJavaTypes\")\n@@ -139,1 +138,1 @@\n-        Assert.assertEquals(jt.toString(), tds);\n+        Assertions.assertEquals(tds, jt.toString());\n@@ -146,1 +145,1 @@\n-        Assert.assertEquals(argTypes.length, ct.typeArguments().size());\n+        Assertions.assertEquals(ct.typeArguments().size(), argTypes.length);\n@@ -148,1 +147,1 @@\n-        Assert.assertEquals(ct.typeArguments(), Stream.of(argTypes).map(TestJavaType::typeFromFlatString).toList());\n+        Assertions.assertEquals(Stream.of(argTypes).map(TestJavaType::typeFromFlatString).toList(), ct.typeArguments());\n@@ -151,1 +150,2 @@\n-    @Test(dataProvider = \"classDescs\")\n+    @ParameterizedTest\n+    @MethodSource(\"classDescs\")\n@@ -153,1 +153,1 @@\n-        Assert.assertEquals(classDesc, JavaType.type(classDesc).toNominalDescriptor());\n+        Assertions.assertEquals(JavaType.type(classDesc).toNominalDescriptor(), classDesc);\n@@ -156,2 +156,1 @@\n-    @DataProvider\n-    public Object[][] classDescs() throws ReflectiveOperationException {\n+    public static Object[][] classDescs() throws ReflectiveOperationException {\n@@ -172,1 +171,2 @@\n-    @Test(dataProvider = \"types\")\n+    @ParameterizedTest\n+    @MethodSource(\"types\")\n@@ -175,2 +175,2 @@\n-        Assert.assertEquals(type, javaType.resolve(MethodHandles.lookup()));\n-        Assert.assertEquals(javaType, JavaType.JAVA_ONLY_TYPE_FACTORY.constructType(javaType.externalize()));\n+        Assertions.assertEquals(javaType.resolve(MethodHandles.lookup()), type);\n+        Assertions.assertEquals(JavaType.JAVA_ONLY_TYPE_FACTORY.constructType(javaType.externalize()), javaType);\n@@ -179,1 +179,2 @@\n-    @Test(dataProvider = \"types\")\n+    @ParameterizedTest\n+    @MethodSource(\"types\")\n@@ -182,3 +183,3 @@\n-        Assert.assertEquals(type.getTypeName(),\n-                replaceTypeVariables(javaType).toString()\n-                        .replaceAll(\"::\", \"\\\\$\"));\n+        Assertions.assertEquals(replaceTypeVariables(javaType).toString()\n+                .replaceAll(\"::\", \"\\\\$\"), type.getTypeName()\n+        );\n@@ -211,2 +212,1 @@\n-    @DataProvider\n-    public Object[][] types() throws ReflectiveOperationException {\n+    public static Object[][] types() throws ReflectiveOperationException {\n@@ -427,1 +427,1 @@\n-        Assert.assertEquals(member.enclosingType().get(), innertypes);\n+        Assertions.assertEquals(innertypes, member.enclosingType().get());\n@@ -430,2 +430,2 @@\n-        Assert.assertEquals(memberOne.enclosingType().get(), member);\n-        Assert.assertEquals(memberOne.toClassName(), InnerTypes.Member.One.class.getName());\n+        Assertions.assertEquals(member, memberOne.enclosingType().get());\n+        Assertions.assertEquals(InnerTypes.Member.One.class.getName(), memberOne.toClassName());\n@@ -434,2 +434,2 @@\n-        Assert.assertEquals(memberTwo.enclosingType().get(), memberOne);\n-        Assert.assertEquals(memberTwo.toClassName(), InnerTypes.Member.One.Two.class.getName());\n+        Assertions.assertEquals(memberOne, memberTwo.enclosingType().get());\n+        Assertions.assertEquals(InnerTypes.Member.One.Two.class.getName(), memberTwo.toClassName());\n@@ -438,2 +438,2 @@\n-        Assert.assertEquals(memberThree.enclosingType().get(), memberTwo);\n-        Assert.assertEquals(memberThree.toClassName(), InnerTypes.Member.One.Two.Three.class.getName());\n+        Assertions.assertEquals(memberTwo, memberThree.enclosingType().get());\n+        Assertions.assertEquals(InnerTypes.Member.One.Two.Three.class.getName(), memberThree.toClassName());\n@@ -442,1 +442,1 @@\n-        Assert.assertTrue(nested.enclosingType().isEmpty());\n+        Assertions.assertTrue(nested.enclosingType().isEmpty());\n@@ -445,1 +445,1 @@\n-        Assert.assertTrue(local_s_m.enclosingType().isEmpty());\n+        Assertions.assertTrue(local_s_m.enclosingType().isEmpty());\n@@ -448,1 +448,1 @@\n-        Assert.assertEquals(local_i_m.enclosingType().get(), innertypes);\n+        Assertions.assertEquals(innertypes, local_i_m.enclosingType().get());\n@@ -451,1 +451,1 @@\n-        Assert.assertEquals(local_c.enclosingType().get(), innertypes);\n+        Assertions.assertEquals(innertypes, local_c.enclosingType().get());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":59,"deletions":59,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -34,1 +34,1 @@\n- * @run testng TestReferences\n+ * @run junit TestReferences\n@@ -47,2 +47,1 @@\n-    @DataProvider\n-    public Object[][] methodRefs() {\n+    public static Object[][] methodRefs() {\n@@ -60,1 +59,2 @@\n-    @Test(dataProvider = \"methodRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"methodRefs\")\n@@ -63,3 +63,3 @@\n-        Assert.assertEquals(mr.toString(), mds);\n-        Assert.assertEquals(mr.refType().toString(), refType);\n-        Assert.assertEquals(mr.name(), name);\n+        Assertions.assertEquals(mds, mr.toString());\n+        Assertions.assertEquals(refType, mr.refType().toString());\n+        Assertions.assertEquals(name, mr.name());\n@@ -69,2 +69,1 @@\n-    @DataProvider\n-    public Object[][] externalizedMethodRefs() {\n+    public static Object[][] externalizedMethodRefs() {\n@@ -82,1 +81,2 @@\n-    @Test(dataProvider = \"externalizedMethodRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"externalizedMethodRefs\")\n@@ -86,3 +86,3 @@\n-        Assert.assertEquals(JavaTypeUtils.flatten(mr.externalize()).toString(), mds);\n-        Assert.assertEquals(mr.refType().toString(), refType);\n-        Assert.assertEquals(mr.name(), name);\n+        Assertions.assertEquals(mds, JavaTypeUtils.flatten(mr.externalize()).toString());\n+        Assertions.assertEquals(refType, mr.refType().toString());\n+        Assertions.assertEquals(name, mr.name());\n@@ -92,2 +92,1 @@\n-    @DataProvider\n-    public Object[][] constructorRefs() {\n+    public static Object[][] constructorRefs() {\n@@ -100,1 +99,2 @@\n-    @Test(dataProvider = \"constructorRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"constructorRefs\")\n@@ -103,2 +103,2 @@\n-        Assert.assertEquals(cr.toString(), cds);\n-        Assert.assertEquals(cr.refType().toString(), refType);\n+        Assertions.assertEquals(cds, cr.toString());\n+        Assertions.assertEquals(refType, cr.refType().toString());\n@@ -107,2 +107,1 @@\n-    @DataProvider\n-    public Object[][] externalizedConstructorRefs() {\n+    public static Object[][] externalizedConstructorRefs() {\n@@ -115,1 +114,2 @@\n-    @Test(dataProvider = \"externalizedConstructorRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"externalizedConstructorRefs\")\n@@ -120,2 +120,2 @@\n-        Assert.assertEquals(JavaTypeUtils.flatten(cr.externalize()).toString(), crs);\n-        Assert.assertEquals(cr.refType().toString(), refType);\n+        Assertions.assertEquals(crs, JavaTypeUtils.flatten(cr.externalize()).toString());\n+        Assertions.assertEquals(refType, cr.refType().toString());\n@@ -125,2 +125,1 @@\n-    @DataProvider\n-    public Object[][] fieldRefs() {\n+    public static Object[][] fieldRefs() {\n@@ -135,1 +134,2 @@\n-    @Test(dataProvider = \"fieldRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"fieldRefs\")\n@@ -138,4 +138,4 @@\n-        Assert.assertEquals(fr.toString(), fds);\n-        Assert.assertEquals(fr.refType().toString(), refType);\n-        Assert.assertEquals(fr.name(), name);\n-        Assert.assertEquals(fr.type().toString(), type);\n+        Assertions.assertEquals(fds, fr.toString());\n+        Assertions.assertEquals(refType, fr.refType().toString());\n+        Assertions.assertEquals(name, fr.name());\n+        Assertions.assertEquals(type, fr.type().toString());\n@@ -144,2 +144,1 @@\n-    @DataProvider\n-    public Object[][] externalizedFieldRefs() {\n+    public static Object[][] externalizedFieldRefs() {\n@@ -154,1 +153,2 @@\n-    @Test(dataProvider = \"externalizedFieldRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"externalizedFieldRefs\")\n@@ -159,4 +159,4 @@\n-        Assert.assertEquals(JavaTypeUtils.flatten(fr.externalize()).toString(), frs);\n-        Assert.assertEquals(fr.refType().toString(), refType);\n-        Assert.assertEquals(fr.name(), name);\n-        Assert.assertEquals(fr.type().toString(), type);\n+        Assertions.assertEquals(frs, JavaTypeUtils.flatten(fr.externalize()).toString());\n+        Assertions.assertEquals(refType, fr.refType().toString());\n+        Assertions.assertEquals(name, fr.name());\n+        Assertions.assertEquals(type, fr.type().toString());\n@@ -166,2 +166,1 @@\n-    @DataProvider\n-    public Object[][] recordTypeRefs() {\n+    public static Object[][] recordTypeRefs() {\n@@ -177,1 +176,2 @@\n-    @Test(dataProvider = \"recordTypeRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"recordTypeRefs\")\n@@ -180,1 +180,1 @@\n-        Assert.assertEquals(rtr.toString(), rtds);\n+        Assertions.assertEquals(rtds, rtr.toString());\n@@ -183,2 +183,1 @@\n-    @DataProvider\n-    public Object[][] externalizedRecordTypeRefs() {\n+    public static Object[][] externalizedRecordTypeRefs() {\n@@ -194,1 +193,2 @@\n-    @Test(dataProvider = \"externalizedRecordTypeRefs\")\n+    @ParameterizedTest\n+    @MethodSource(\"externalizedRecordTypeRefs\")\n@@ -198,1 +198,1 @@\n-        Assert.assertEquals(JavaTypeUtils.flatten(rtr.externalize()).toString(), rtds);\n+        Assertions.assertEquals(rtds, JavaTypeUtils.flatten(rtr.externalize()).toString());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestReferences.java","additions":48,"deletions":48,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestAttributeSerialization\n+ * @run junit TestAttributeSerialization\n@@ -30,1 +30,4 @@\n-import jdk.incubator.code.*;\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n@@ -33,3 +36,3 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -76,1 +79,0 @@\n-    @DataProvider\n@@ -85,1 +87,2 @@\n-    @Test(dataProvider = \"attributes\")\n+    @ParameterizedTest\n+    @MethodSource(\"attributes\")\n@@ -89,1 +92,1 @@\n-        Assert.assertTrue(serOp.contains(s), serOp);\n+        Assertions.assertTrue(serOp.contains(s), serOp);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestAttributeSerialization.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -24,7 +24,1 @@\n-import jdk.incubator.code.extern.DialectFactory;\n-import jdk.incubator.code.dialect.java.JavaType;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n+import jdk.incubator.code.CodeReflection;\n@@ -34,1 +28,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -37,0 +30,2 @@\n+import jdk.incubator.code.dialect.java.JavaType;\n+import jdk.incubator.code.extern.DialectFactory;\n@@ -38,1 +33,6 @@\n-import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.interpreter.Interpreter;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n@@ -46,1 +46,1 @@\n- * @run testng TestCodeBuilder\n+ * @run junit TestCodeBuilder\n@@ -130,1 +130,1 @@\n-        Assert.assertEquals(fActual.toText(), fExpected.toText());\n+        Assertions.assertEquals(fExpected.toText(), fActual.toText());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestCodeBuilder.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestNaming\n+ * @run junit TestNaming\n@@ -30,4 +30,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n@@ -35,0 +31,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -40,1 +37,2 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n@@ -42,0 +40,1 @@\n+import java.lang.reflect.Method;\n@@ -84,1 +83,1 @@\n-        Assert.assertEquals(actual, expected);\n+        Assertions.assertEquals(expected, actual);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestNaming.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng TestOptions\n+ * @run junit TestOptions\n@@ -30,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -31,4 +32,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Method;\n@@ -37,1 +34,4 @@\n-import jdk.incubator.code.CodeReflection;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.lang.reflect.Method;\n@@ -52,3 +52,3 @@\n-        Assert.assertFalse(OpWriter.toText(f).contains(\"void\"));\n-        Assert.assertFalse(OpWriter.toText(f, OpWriter.VoidOpResultOption.DROP_VOID).contains(\"void\"));\n-        Assert.assertTrue(OpWriter.toText(f, OpWriter.VoidOpResultOption.WRITE_VOID).contains(\"void\"));\n+        Assertions.assertFalse(OpWriter.toText(f).contains(\"void\"));\n+        Assertions.assertFalse(OpWriter.toText(f, OpWriter.VoidOpResultOption.DROP_VOID).contains(\"void\"));\n+        Assertions.assertTrue(OpWriter.toText(f, OpWriter.VoidOpResultOption.WRITE_VOID).contains(\"void\"));\n@@ -61,3 +61,3 @@\n-        Assert.assertTrue(OpWriter.toText(f).lines().count() > 1);\n-        Assert.assertTrue(OpWriter.toText(f, OpWriter.OpDescendantsOption.WRITE_DESCENDANTS).lines().count() > 1);\n-        Assert.assertTrue(OpWriter.toText(f, OpWriter.OpDescendantsOption.DROP_DESCENDANTS).lines().count() == 1);\n+        Assertions.assertTrue(OpWriter.toText(f).lines().count() > 1);\n+        Assertions.assertTrue(OpWriter.toText(f, OpWriter.OpDescendantsOption.WRITE_DESCENDANTS).lines().count() > 1);\n+        Assertions.assertTrue(OpWriter.toText(f, OpWriter.OpDescendantsOption.DROP_DESCENDANTS).lines().count() == 1);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestOptions.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}