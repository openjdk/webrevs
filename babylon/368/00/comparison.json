{"files":[{"patch":"@@ -93,1 +93,13 @@\n-   OpenCLBackend * openclBackend = dynamic_cast<OpenCLBackend *>(kernel->program->backend);\n+\/\/std::cout << \"shouldCopyToDevice( Arg_s *arg)\" <<std::endl;\n+\/\/ std::cout <<std::hex;\n+\/\/\/\/ std::cout << \"arg==\"<<((long) arg) <<std::endl;\n+\/\/ std::cout << \"arg->idx==\"<<arg->idx <<std::endl;\n+ \/\/  std::cout << \"bufferState==\"<<((long) bufferState) <<std::endl;\n+  \/\/  std::cout << \"kernel==\"<<((long) kernel) <<std::endl;\n+  \/\/    std::cout << \"kernel->name==\"<<kernel->name <<std::endl;\n+  \/\/   std::cout << \"kernel->program==\"<<((long) kernel->program) <<std::endl;\n+   \/\/   std::cout << \"kernel->program->backend==\"<<((long) kernel->program->backend) <<std::endl;\n+   \/\/   std::cout <<std::dec;\n+         OpenCLBackend * openclBackend = dynamic_cast<OpenCLBackend *>(kernel->program->backend);\n+\n+\n@@ -99,0 +111,1 @@\n+\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  \/\/  std::cout << \"Kernel name '\"<< (dynamic_cast<Backend::Program::Kernel*>(this))->name<<\"'\"<<std::endl;\n+  \/\/\n@@ -65,0 +65,1 @@\n+        std::cout << \"Kernel name '\"<< (dynamic_cast<Backend::Program::Kernel*>(this))->name<<\"'\"<<std::endl;\n@@ -93,0 +94,7 @@\n+               if ((bufferState->vendorPtr == 0L) && (bufferState->state != BufferState_s::NEW_STATE)){\n+                   std::cerr << \"Warning:  Unexpected initial state for arg \"<< i\n+                      <<\" of kernel '\"<<(dynamic_cast<Backend::Program::Kernel*>(this))->name<<\"'\"\n+                      << \" state=\" << bufferState->state<< \" '\"\n+                      << BufferState_s::stateNames[bufferState->state]<< \"'\"\n+                      << \" vendorPtr\" << bufferState->vendorPtr<<std::endl;\n+               }\n@@ -94,1 +102,2 @@\n-               if (bufferState->state == BufferState_s::NEW_STATE){\n+\n+               if (bufferState->vendorPtr == 0L || bufferState->state == BufferState_s::NEW_STATE){\n@@ -96,1 +105,1 @@\n-                  if (openclBackend->openclConfig.trace){\n+                 if (openclBackend->openclConfig.trace){\n@@ -182,1 +191,2 @@\n-                bufferState->state = BufferState_s::HOST_OWNED;\n+                  bufferState->state = BufferState_s::DEVICE_OWNED;\n+             \/\/   bufferState->state = BufferState_s::HOST_OWNED;\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend_kernel_dispatch.cpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -134,1 +134,3 @@\n-        b.setState(BufferState.HOST_OWNED);\n+        if (b.getState() != BufferState.NEW_STATE) {\n+            b.setState(BufferState.HOST_OWNED);\n+        }\n@@ -176,1 +178,1 @@\n-\n+\/*\n@@ -215,1 +217,1 @@\n-    }\n+    } *\/\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-        if ((((System.getenv(\"HAT\") instanceof String e) ? e : \"\") +\n-                ((System.getProperty(\"HAT\") instanceof String p) ? p : \"\")) instanceof String opts) {\n+        if (System.getenv(\"HAT\") instanceof String opts){\n+            System.out.println(\"From env \"+opts);\n@@ -51,1 +51,5 @@\n-        return of();\n+        if (System.getProperty(\"HAT\") instanceof String opts) {\n+            System.out.println(\"From prop \"+opts);\n+            return of(opts);\n+        }\n+        return of(\"\");\n@@ -79,0 +83,3 @@\n+        if (name == null || name.equals(\"\")){\n+            return OpenCLConfig.of(0);\n+        }\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLConfig.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","status":"renamed"},{"patch":"@@ -36,7 +36,0 @@\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.foreign.Arena;\n-import java.lang.invoke.MethodHandles;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n@@ -52,0 +45,6 @@\n+import java.lang.annotation.Annotation;\n+import java.lang.foreign.Arena;\n+import java.lang.invoke.MethodHandles;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n@@ -53,1 +52,1 @@\n-import static hat.ComputeContext.WRAPPER.ESCAPE;\n+\/\/import static hat.ComputeContext.WRAPPER.ESCAPE;\n@@ -148,3 +147,3 @@\n-            static PrePost escape() {\n-                return new PrePost(ESCAPE.pre, ESCAPE.post);\n-            }\n+          \/\/  static PrePost escape() {\n+            \/\/    return new PrePost(ESCAPE.pre, ESCAPE.post);\n+           \/\/ }\n@@ -188,1 +187,1 @@\n-                    System.out.println(\"args \"+list.size());\n+                 \/\/   System.out.println(\"args \"+list.size());\n@@ -190,1 +189,1 @@\n-                        System.out.println(\"method \"+invokeOW.method());\n+                       \/\/ System.out.println(\"method \"+invokeOW.method());\n@@ -193,1 +192,1 @@\n-                        System.out.println(\"params length\"+parameterAnnotations.length);\n+                     \/\/   System.out.println(\"params length\"+parameterAnnotations.length);\n@@ -207,2 +206,2 @@\n-                                     }else if (typeAndAccess.wo()||typeAndAccess.rw()) {\n-                                         bldr.op(CoreOp.invoke(MUTATE.pre, cc, bldrCntxt.getValue(typeAndAccess.value)));\n+                                  \/\/   }else if (typeAndAccess.wo()||typeAndAccess.rw()) {\n+                                    \/\/     bldr.op(CoreOp.invoke(MUTATE.pre, cc, bldrCntxt.getValue(typeAndAccess.value)));\n@@ -210,1 +209,1 @@\n-                                         bldr.op(CoreOp.invoke(ESCAPE.pre, cc, bldrCntxt.getValue(typeAndAccess.value)));\n+                                         bldr.op(CoreOp.invoke(MUTATE.pre, cc, bldrCntxt.getValue(typeAndAccess.value)));\n@@ -224,2 +223,2 @@\n-                                    }else if (typeAndAccess.rw() || typeAndAccess.wo()) {\n-                                        bldr.op(CoreOp.invoke(MUTATE.post, cc, bldrCntxt.getValue(typeAndAccess.value)));\n+                                 \/\/   }else if (typeAndAccess.rw() || typeAndAccess.wo()) {\n+                                 \/\/       bldr.op(CoreOp.invoke(MUTATE.post, cc, bldrCntxt.getValue(typeAndAccess.value)));\n@@ -227,1 +226,1 @@\n-                                        bldr.op(CoreOp.invoke(ESCAPE.post, cc, bldrCntxt.getValue(typeAndAccess.value)));\n+                                        bldr.op(CoreOp.invoke(MUTATE.post, cc, bldrCntxt.getValue(typeAndAccess.value)));\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackend.java","additions":19,"deletions":20,"binary":false,"changes":39,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/ffi\/FFIBackend.java","status":"renamed"},{"patch":"","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackendDriver.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/ffi\/FFIBackendDriver.java","status":"renamed"},{"patch":"","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFILib.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/ffi\/FFILib.java","status":"renamed"},{"patch":"@@ -31,1 +31,1 @@\n-import hat.backend.ffi.C99FFIBackend;\n+\/\/import hat.backend.ffi.C99FFIBackend;\n@@ -39,1 +39,1 @@\n-public class OpenCLBackend extends C99FFIBackend {\n+public class OpenCLBackend extends C99JExtractedBackend{\n@@ -44,1 +44,1 @@\n-            backendHandle = (long) getBackend_MH.invoke(mode, platform, device);\n+         \/\/   backendHandle = (long) getBackend_MH.invoke(mode, platform, device);\n@@ -48,1 +48,1 @@\n-        return backendHandle;\n+        return 0l;\/\/backendHandle;\n@@ -53,1 +53,1 @@\n-        getBackend_MH  =  nativeLibrary.longFunc(\"getBackend\",JAVA_INT,JAVA_INT, JAVA_INT);\n+        getBackend_MH  = null;\/\/ nativeLibrary.longFunc(\"getBackend\",JAVA_INT,JAVA_INT, JAVA_INT);\n@@ -62,1 +62,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true,true);\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint);\n@@ -69,1 +69,1 @@\n-            String code = createCode(kernelCallGraph, new OpenCLHatKernelBuilder(), args, true);\n+            String code = createCode(kernelCallGraph, new OpenCLHatKernelBuilder(), args);\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLBackend.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import hat.backend.ffi.FFIBackend;\n@@ -44,1 +43,1 @@\n-public abstract class C99JExtractedBackend extends FFIBackend {\n+public abstract class C99JExtractedBackend extends JExtractedBackend {\n@@ -71,1 +70,1 @@\n-            c99NativeBackend.ndRange(kernelHandle, this.argArray);\n+         \/\/   c99NativeBackend.ndRange(kernelHandle, this.argArray);\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/C99JExtractedBackend.java","additions":2,"deletions":3,"binary":false,"changes":5,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/jextracted\/C99JExtractedBackend.java","status":"renamed"},{"patch":"@@ -29,1 +29,0 @@\n-import hat.backend.ffi.FFIBackendDriver;\n@@ -47,1 +46,1 @@\n-import static hat.ComputeContext.WRAPPER.ESCAPE;\n+\/\/import static hat.ComputeContext.WRAPPER.ESCAPE;\n@@ -50,1 +49,1 @@\n-public abstract class JExtractedBackend extends FFIBackendDriver {\n+public abstract class JExtractedBackend extends JExtractedBackendDriver {\n@@ -119,1 +118,1 @@\n-                                    bldr.op(CoreOp.invoke(ESCAPE.pre, cc, bldrCntxt.getValue(value)))\n+                                    bldr.op(CoreOp.invoke(MUTATE.pre, cc, bldrCntxt.getValue(value)))\n@@ -125,1 +124,1 @@\n-                                    CoreOp.invoke(ESCAPE.post, cc, bldrCntxt.getValue(value)))\n+                                    CoreOp.invoke(MUTATE.post, cc, bldrCntxt.getValue(value)))\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackend.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackend.java","status":"renamed"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.backend.jextracted;\n+\n+\n+import hat.backend.Backend;\n+import hat.buffer.ArgArray;\n+import hat.buffer.Buffer;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.invoke.MethodHandle;\n+\n+import static java.lang.foreign.ValueLayout.ADDRESS;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+\n+public abstract class JExtractedBackendDriver implements Backend {\n+\/*\n+    public boolean isAvailable() {\n+        return nativeLibrary.available;\n+    }\n+\n+    final MethodHandle getBackend_MH;\n+    final MethodHandle dumpArgArray_MH;\n+    final MethodHandle getDevice_MH;\n+\n+    final MethodHandle releaseDevice_MH;\n+    final MethodHandle getMaxComputeUnits_MH;\n+\n+    final MethodHandle compileProgram_MH;\n+    final MethodHandle releaseProgram_MH;\n+    final MethodHandle getKernel_MH;\n+\n+    final MethodHandle programOK_MH;\n+\n+    final MethodHandle releaseKernel_MH;\n+\n+    final MethodHandle ndrange_MH;\n+    final MethodHandle info_MH;\n+\n+    public long backendHandle = 0;\n+\n+*\/\n+    \/\/public final FFILib nativeLibrary;\n+\n+    public JExtractedBackendDriver(String libName) {\n+      \/*  this.nativeLibrary = new FFILib(libName);\n+        this.dumpArgArray_MH = nativeLibrary.voidFunc(\"dumpArgArray\", ADDRESS);\n+        this.getDevice_MH = nativeLibrary.longFunc(\"getDeviceHandle\");\n+        this.releaseDevice_MH = nativeLibrary.voidFunc(\"releaseDeviceHandle\", JAVA_LONG);\n+        this.getMaxComputeUnits_MH = nativeLibrary.intFunc(\"getMaxComputeUnits\", JAVA_LONG);\n+        this.compileProgram_MH = nativeLibrary.longFunc(\"compileProgram\", JAVA_LONG, JAVA_INT, ADDRESS);\n+        this.releaseProgram_MH = nativeLibrary.voidFunc(\"releaseProgram\", JAVA_LONG);\n+        this.getKernel_MH = nativeLibrary.longFunc(\"getKernel\", JAVA_LONG, JAVA_INT, ADDRESS);\n+        this.programOK_MH = nativeLibrary.booleanFunc(\"programOK\", JAVA_LONG);\n+        this.releaseKernel_MH = nativeLibrary.voidFunc(\"releaseKernel\", JAVA_LONG);\n+        this.ndrange_MH = nativeLibrary.longFunc(\"ndrange\", JAVA_LONG,  ADDRESS);\n+        this.info_MH = nativeLibrary.voidFunc(\"info\", JAVA_LONG);\n+        this.getBackend_MH = nativeLibrary.longFunc(\"getBackend\", ADDRESS, JAVA_INT, ADDRESS);\n+*\/\n+    }\n+\n+    public long getBackend() {\n+\n+        try {\n+     \/\/       backendHandle = (long) getBackend_MH.invoke();\n+        } catch (Throwable throwable) {\n+            throw new IllegalStateException(throwable);\n+        }\n+        return 0l;\/\/backendHandle;\n+    }\n+\n+    public int getGetMaxComputeUnits() {\n+      \/\/  if (backendHandle == 0L) {\n+       \/\/     throw new IllegalStateException(\"no backend handle\");\n+      \/\/  }\n+        try {\n+            return (int)0;\/\/ getMaxComputeUnits_MH.invoke(backendHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void info() {\n+     \/\/\/   if (backendHandle == 0L) {\n+       \/\/     throw new IllegalStateException(\"no backend handle\");\n+     \/\/   }\n+        try {\n+           ;\/\/ info_MH.invoke(backendHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void dumpArgArray(ArgArray argArray) {\n+        try {\n+           \/\/ dumpArgArray_MH.invoke(Buffer.getMemorySegment(argArray));\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public long compileProgram(String source) {\n+     \/\/  if (backendHandle == 0L) {\n+         \/\/   throw new IllegalStateException(\"no backend handle\");\n+       \/\/ }\n+        try {\n+            var arena = Arena.global();\n+            var cstr = arena.allocateFrom(source);\n+            return (Long)0L;\/\/ compileProgram_MH.invoke(backendHandle, source.length(), cstr);\n+\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void ndRange(long kernelHandle,  ArgArray argArray) {\n+        try {\n+           \/\/ this.ndrange_MH.invoke(kernelHandle, Buffer.getMemorySegment(argArray));\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public boolean programOK(long programHandle) {\n+        try {\n+            return (Boolean) false;\/\/ programOK_MH.invoke(programHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public long getKernel(long programHandle, String kernelName) {\n+        try {\n+            var arena = Arena.global();\n+            var cstr = arena.allocateFrom(kernelName);\n+            return ((Long) 0L);\/\/ getKernel_MH.invoke(programHandle, kernelName.length(), cstr)).longValue();\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void releaseKernel(long kernelHandle) {\n+        try {\n+          \/\/  releaseKernel_MH.invoke(kernelHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void releaseProgram(long programHandle) {\n+        try {\n+         \/\/   releaseProgram_MH.invoke(programHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n+    public void release() {\n+      \/\/  if (backendHandle == 0L) {\n+        \/\/    throw new IllegalStateException(\"no backend handle\");\n+       \/\/ }\n+        try {\n+         \/\/   releaseDevice_MH.invoke(backendHandle);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n+}\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackendDriver.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.backend.jextracted;\n-\n-public class SoWeCanBuild {\n-}\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/SoWeCanBuild.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -145,1 +145,1 @@\n-\n+\/*\n@@ -158,1 +158,1 @@\n-    }\n+    } *\/\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/Accelerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        MUTATE(\"Mutate\"), ACCESS(\"Access\"), ESCAPE(\"Escape\");\n+        MUTATE(\"Mutate\"), ACCESS(\"Access\");\/\/, ESCAPE(\"Escape\");\n@@ -173,1 +173,1 @@\n-\n+\/*\n@@ -186,1 +186,1 @@\n-    }\n+    } *\/\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ComputeContext.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import hat.backend.ffi.FFIBackend;\n@@ -56,2 +55,1 @@\n-    Predicate<Backend> FIRST_NATIVE = backend -> backend instanceof FFIBackend FFIBackend && FFIBackend.isAvailable();\n-    Predicate<Backend> JAVA_MULTITHREADED = backend -> backend instanceof JavaMultiThreadedBackend;\n+     Predicate<Backend> JAVA_MULTITHREADED = backend -> backend instanceof JavaMultiThreadedBackend;\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/Backend.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,197 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.backend.jextracted;\n-\n-\n-import hat.backend.Backend;\n-import hat.backend.ffi.FFILib;\n-import hat.buffer.ArgArray;\n-import hat.buffer.Buffer;\n-import hat.buffer.SchemaBuilder;\n-\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.invoke.MethodHandle;\n-\n-import static java.lang.foreign.ValueLayout.ADDRESS;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n-\n-public abstract class JExtractedBackendDriver implements Backend {\n-\n-    public boolean isAvailable() {\n-        return nativeLibrary.available;\n-    }\n-\n-    final MethodHandle getBackend_MH;\n-    final MethodHandle dumpArgArray_MH;\n-    final MethodHandle getDevice_MH;\n-\n-    final MethodHandle releaseDevice_MH;\n-    final MethodHandle getMaxComputeUnits_MH;\n-\n-    final MethodHandle compileProgram_MH;\n-    final MethodHandle releaseProgram_MH;\n-    final MethodHandle getKernel_MH;\n-\n-    final MethodHandle programOK_MH;\n-\n-    final MethodHandle releaseKernel_MH;\n-\n-    final MethodHandle ndrange_MH;\n-    final MethodHandle info_MH;\n-\n-    public long backendHandle = 0;\n-\n-\n-    public final FFILib nativeLibrary;\n-\n-    public JExtractedBackendDriver(String libName) {\n-        this.nativeLibrary = new FFILib(libName);\n-        this.dumpArgArray_MH = nativeLibrary.voidFunc(\"dumpArgArray\", ADDRESS);\n-        this.getDevice_MH = nativeLibrary.longFunc(\"getDeviceHandle\");\n-        this.releaseDevice_MH = nativeLibrary.voidFunc(\"releaseDeviceHandle\", JAVA_LONG);\n-        this.getMaxComputeUnits_MH = nativeLibrary.intFunc(\"getMaxComputeUnits\", JAVA_LONG);\n-        this.compileProgram_MH = nativeLibrary.longFunc(\"compileProgram\", JAVA_LONG, JAVA_INT, ADDRESS);\n-        this.releaseProgram_MH = nativeLibrary.voidFunc(\"releaseProgram\", JAVA_LONG);\n-        this.getKernel_MH = nativeLibrary.longFunc(\"getKernel\", JAVA_LONG, JAVA_INT, ADDRESS);\n-        this.programOK_MH = nativeLibrary.booleanFunc(\"programOK\", JAVA_LONG);\n-        this.releaseKernel_MH = nativeLibrary.voidFunc(\"releaseKernel\", JAVA_LONG);\n-        this.ndrange_MH = nativeLibrary.longFunc(\"ndrange\", JAVA_LONG,  ADDRESS);\n-        this.info_MH = nativeLibrary.voidFunc(\"info\", JAVA_LONG);\n-        this.getBackend_MH = nativeLibrary.longFunc(\"getBackend\", ADDRESS, JAVA_INT, ADDRESS);\n-\n-    }\n-\n-    public long getBackend() {\n-\n-        try {\n-            backendHandle = (long) getBackend_MH.invoke();\n-        } catch (Throwable throwable) {\n-            throw new IllegalStateException(throwable);\n-        }\n-        return backendHandle;\n-    }\n-\n-    public int getGetMaxComputeUnits() {\n-        if (backendHandle == 0L) {\n-            throw new IllegalStateException(\"no backend handle\");\n-        }\n-        try {\n-            return (int) getMaxComputeUnits_MH.invoke(backendHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void info() {\n-        if (backendHandle == 0L) {\n-            throw new IllegalStateException(\"no backend handle\");\n-        }\n-        try {\n-            info_MH.invoke(backendHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void dumpArgArray(ArgArray argArray) {\n-        try {\n-            dumpArgArray_MH.invoke(Buffer.getMemorySegment(argArray));\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public long compileProgram(String source) {\n-        if (backendHandle == 0L) {\n-            throw new IllegalStateException(\"no backend handle\");\n-        }\n-        try {\n-            var arena = Arena.global();\n-            var cstr = arena.allocateFrom(source);\n-            return (Long) compileProgram_MH.invoke(backendHandle, source.length(), cstr);\n-\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void ndRange(long kernelHandle,  ArgArray argArray) {\n-        try {\n-            this.ndrange_MH.invoke(kernelHandle, Buffer.getMemorySegment(argArray));\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public boolean programOK(long programHandle) {\n-        try {\n-            return (Boolean) programOK_MH.invoke(programHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public long getKernel(long programHandle, String kernelName) {\n-        try {\n-            var arena = Arena.global();\n-            var cstr = arena.allocateFrom(kernelName);\n-            return ((Long) getKernel_MH.invoke(programHandle, kernelName.length(), cstr)).longValue();\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void releaseKernel(long kernelHandle) {\n-        try {\n-            releaseKernel_MH.invoke(kernelHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void releaseProgram(long programHandle) {\n-        try {\n-            releaseProgram_MH.invoke(programHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-\n-    public void release() {\n-        if (backendHandle == 0L) {\n-            throw new IllegalStateException(\"no backend handle\");\n-        }\n-        try {\n-            releaseDevice_MH.invoke(backendHandle);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-\n-}\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackendDriver.java","additions":0,"deletions":197,"binary":false,"changes":197,"status":"deleted"},{"patch":"@@ -37,1 +37,1 @@\n-     void preEscape(Buffer b);\n+   \/\/  void preEscape(Buffer b);\n@@ -39,1 +39,1 @@\n-     void postEscape(Buffer b) ;\n+    \/\/ void postEscape(Buffer b) ;\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/buffer\/BufferTracker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,39 @@\n-import static java.lang.System.*;\n+import static java.lang.System.out;\n+\n+static class Targets {\n+    final Script.BuildDir buildDir;\n+    final public Script.JarFile wrapJar;\n+    final Script.JarFile clWrapJar;\n+    final public Script.JarFile glWrapJar;\n+    final public Script.JarFile cuWrapJar;\n+    final public Script.JarFile hatJar;\n+    final public Script.CMakeBuildDir cmakeBuildDir;\n+\n+    Targets(Script.BuildDir buildDir) {\n+        this.buildDir = buildDir;\n+        this.wrapJar = buildDir.jarFile(\"hat-wrap-1.0.jar\");\n+        this.clWrapJar = buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n+        this.glWrapJar = buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n+        this.cuWrapJar = buildDir.jarFile(\"hat-cuwrap-1.0.jar\");\n+        this.hatJar = buildDir.jarFile(\"hat-core-1.0.jar\");\n+\n+        cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+    }\n+}\n+\n+static class Example {\n+\n+    Script.JarFile jarFile;\n+    Script.DirEntry dir;\n+    String name;\n+\n+    Example(Script.JarFile jarFile, Script.DirEntry dir, String name) {\n+        this.jarFile = jarFile;\n+        this.dir = dir;\n+        this.name = name;\n+    }\n+\n+    static Example of(Script.BuildDir buildDir, Script.DirEntry dir) {\n+        return new Example(buildDir.jarFile(\"hat-example-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName());\n+    }\n+}\n@@ -93,1 +131,1 @@\n-    var examples = dir.existingDir(\"examples\");\n+    var examplesDir = dir.existingDir(\"examples\");\n@@ -96,0 +134,1 @@\n+\n@@ -97,1 +136,2 @@\n-    var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+    var targets = new Targets(buildDir);\n+\n@@ -112,1 +152,1 @@\n-    capabilities.capabilities().forEach(fw -> out.print( \"[\"+fw.name + (fw.available() ? \"\\u2714\" : \"\\u2715\") +\"]\"));\n+    capabilities.capabilities().forEach(fw -> out.print(\"[\" + fw.name + (fw.available() ? \"\\u2714\" : \"\\u2715\") + \"]\"));\n@@ -116,5 +156,0 @@\n-    var wrapJar= buildDir.jarFile(\"hat-wrap-1.0.jar\");\n-    var clWrapJar= buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n-    var glWrapJar= buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n-    var cuWrapJar= buildDir.jarFile(\"hat-cuwrap-1.0.jar\");\n-    var hatJar = buildDir.jarFile(\"hat-core-1.0.jar\");\n@@ -122,1 +157,2 @@\n- var hatJavacOpts = Script.javacBuilder($ -> $\n+\n+    var hatJavacOpts = Script.javacBuilder($ -> $\n@@ -125,1 +161,0 @@\n-          \/\/  .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\", \"jdk.internal.vm.annotation\")\n@@ -133,1 +168,1 @@\n-            .jarFile(hatJar)\n+            .jarFile(targets.hatJar)\n@@ -140,3 +175,3 @@\n-         .jarFile(wrapJar)\n-         .maven_style_root(wrapsDir.dir(\"wrap\"))\n-         .javac(javac -> javac.current_source())\n+            .jarFile(targets.wrapJar)\n+            .maven_style_root(wrapsDir.dir(\"wrap\"))\n+            .javac(javac -> javac.current_source())\n@@ -149,3 +184,3 @@\n-                    Script.jextract(jextractCapability.executable, $ -> $ .verbose(verbose) .capability(openclCapability,stageDir));\n-                }else{\n-                    out.println(\"Using previously extracted  \"+openclCapability.stage(buildDir).fileName());\n+                    Script.jextract(jextractCapability.executable, $ -> $.verbose(verbose).capability(openclCapability, stageDir));\n+                } else {\n+                    out.println(\"Using previously extracted  \" + openclCapability.stage(buildDir).fileName());\n@@ -154,2 +189,2 @@\n-                    .jarFile(openclCapability.jarFile(buildDir))\n-                    .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openclCapability.stage(stageDir).path())))\n+                        .jarFile(openclCapability.jarFile(buildDir))\n+                        .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openclCapability.stage(stageDir).path())))\n@@ -158,2 +193,2 @@\n-            }else{\n-                out.println(\"Using existing extracted \"+openclCapability.jarFile(buildDir).fileName());\n+            } else {\n+                out.println(\"Using existing extracted \" + openclCapability.jarFile(buildDir).fileName());\n@@ -162,3 +197,3 @@\n-               .jarFile(clWrapJar)\n-               .maven_style_root(wrapsDir.dir(\"clwrap\"))\n-               .javac(javac -> javac.current_source().class_path(wrapJar,hatJar, openclCapability.jarFile(buildDir)))\n+                    .jarFile(targets.clWrapJar)\n+                    .maven_style_root(wrapsDir.dir(\"clwrap\"))\n+                    .javac(javac -> javac.current_source().class_path(targets.wrapJar, targets.hatJar, openclCapability.jarFile(buildDir)))\n@@ -173,3 +208,3 @@\n-                    Script.jextract(jextractCapability, $ -> $ .verbose(verbose) .capability(openglCapability, stageDir));\n-                }else{\n-                    out.println(\"Using previously extracted  \"+openglCapability.stage(buildDir).fileName());\n+                    Script.jextract(jextractCapability, $ -> $.verbose(verbose).capability(openglCapability, stageDir));\n+                } else {\n+                    out.println(\"Using previously extracted  \" + openglCapability.stage(buildDir).fileName());\n@@ -181,2 +216,2 @@\n-            }else{\n-                out.println(\"Using existing extracted \"+openglCapability.jarFile(buildDir).fileName());\n+            } else {\n+                out.println(\"Using existing extracted \" + openglCapability.jarFile(buildDir).fileName());\n@@ -185,8 +220,8 @@\n-               .jarFile(glWrapJar)\n-               .maven_style_root(wrapsDir.dir(\"glwrap\"))\n-               .javac(javac -> javac\n-                  .current_source()\n-                  .exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"))\n-                  \/\/.exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"))\n-                  .class_path(wrapJar, openglCapability.jarFile(buildDir))\n-               )\n+                    .jarFile(targets.glWrapJar)\n+                    .maven_style_root(wrapsDir.dir(\"glwrap\"))\n+                    .javac(javac -> javac\n+                            .current_source()\n+                            .exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"))\n+                            \/\/.exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"))\n+                            .class_path(targets.wrapJar, openglCapability.jarFile(buildDir))\n+                    )\n@@ -211,0 +246,12 @@\n+    var ffiBackendSharedDir = ffiBackends.dir(\"shared\");\n+    out.println(\"Shared ffi \" + ffiBackendSharedDir.path());\n+    var ffiSharedBackendJar = buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\");\n+    backendJars.add(ffiSharedBackendJar);\n+    var ffiBackendSharedResult = Script.jar(hatJarOptions, jar -> jar\n+            .jarFile(ffiSharedBackendJar)\n+            .maven_style_root(ffiBackendSharedDir)\n+            .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n+                    .class_path(targets.hatJar)\n+            )\n+    );\n+\n@@ -220,1 +267,1 @@\n-                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))\n+                        .javac(hatJavacOpts, javac -> javac.class_path(targets.hatJar, ffiSharedBackendJar))\n@@ -227,2 +274,2 @@\n-    out.println(\"Shared jextracted \"+jextractedBackendSharedDir.path());\n-    var jextractedSharedBackendJar=buildDir.jarFile(\"hat-backend-jextracted-shared-1.0.jar\");\n+    out.println(\"Shared jextracted \" + jextractedBackendSharedDir.path());\n+    var jextractedSharedBackendJar = buildDir.jarFile(\"hat-backend-jextracted-shared-1.0.jar\");\n@@ -231,5 +278,5 @@\n-          .jarFile(jextractedSharedBackendJar)\n-          .maven_style_root(jextractedBackendSharedDir)\n-          .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n-              .class_path(hatJar)\n-          )\n+            .jarFile(jextractedSharedBackendJar)\n+            .maven_style_root(jextractedBackendSharedDir)\n+            .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n+                    .class_path(targets.hatJar)\n+            )\n@@ -238,13 +285,13 @@\n-    if (openclCapability.available()){\n-       var jextractedBackendOpenCLDir = jextractedBackends.dir(\"opencl\");\n-       out.println(\"OpenCL jextracted \"+jextractedBackendOpenCLDir.path());\n-       var jextractedOpenCLBackendJar = buildDir.jarFile(\"hat-backend-jextracted-opencl-1.0.jar\");\n-       backendJars.add(jextractedOpenCLBackendJar);\n-       Script.jar(hatJarOptions, jar -> jar\n-          .jarFile(jextractedOpenCLBackendJar)\n-          .maven_style_root(jextractedBackendOpenCLDir)\n-          .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n-              .class_path(hatJar, openclCapability.jarFile(buildDir), jextractedBackendSharedResult )\n-          )\n-       );\n-   }\n+    if (openclCapability.available()) {\n+        var jextractedBackendOpenCLDir = jextractedBackends.dir(\"opencl\");\n+        out.println(\"OpenCL jextracted \" + jextractedBackendOpenCLDir.path());\n+        var jextractedOpenCLBackendJar = buildDir.jarFile(\"hat-backend-jextracted-opencl-1.0.jar\");\n+        backendJars.add(jextractedOpenCLBackendJar);\n+        Script.jar(hatJarOptions, jar -> jar\n+                .jarFile(jextractedOpenCLBackendJar)\n+                .maven_style_root(jextractedBackendOpenCLDir)\n+                .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n+                        .class_path(targets.hatJar, openclCapability.jarFile(buildDir), jextractedBackendSharedResult)\n+                )\n+        );\n+    }\n@@ -267,2 +314,1 @@\n-    backendJars.forEach(j->out.println(\" backend \"+j.path()));\n-\n+    backendJars.forEach(j -> out.println(\" backend \" + j.path()));\n@@ -270,3 +316,3 @@\n-    \/\/ here we create the example jars\n-    examples.subDirs()\n-            .filter(example -> example.failsToMatch(\"^.*(experiments|nbody|life|target|.idea)$\"))\n+    examplesDir.subDirs()\n+            .filter(exampleDir -> exampleDir.failsToMatch(\"^.*(experiments|target|.idea)$\"))\n+            .map(exampleDir -> Example.of(targets.buildDir, exampleDir))\n@@ -274,2 +320,1 @@\n-                var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n-                out.println(exampleJarFile.fileName());\n+                out.println(example.jarFile.fileName());\n@@ -277,4 +322,20 @@\n-                        .jarFile(exampleJarFile)\n-                        .maven_style_root(example)\n-                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))\n-                        .manifest(manifest -> manifest .main_class(example.fileName() + \".Main\"))\n+                        .jarFile(example.jarFile)\n+                        .maven_style_root(example.dir)\n+                        .javac(hatJavacOpts, javac ->\n+                                javac.class_path(targets.hatJar)\n+                                        .when(example.dir.matches(\"^.*(life|nbody)$\") && jextractCapability.available() && openclCapability.available(), _ ->\n+                                                javac.class_path(targets.wrapJar,\n+                                                        targets.clWrapJar,\n+                                                        openclCapability.jarFile(buildDir),\n+                                                        buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\")\n+                                                )\n+                                        )\n+                                        .when(example.dir.matches(\"^.*(nbody)$\") && jextractCapability.available() && openclCapability.available() && openglCapability.available(), _ ->\n+                                                javac.class_path(targets.wrapJar,\n+                                                        targets.glWrapJar,\n+                                                        openglCapability.jarFile(buildDir)\n+\n+                                                )\n+                                        )\n+                        )\n+                        .manifest(manifest -> manifest.main_class(example.name + \".Main\"))\n@@ -285,27 +346,0 @@\n-    if (jextractCapability.available() && openclCapability.available()) {\n-        var example = examples.dir(\"life\");\n-        var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n-        out.println(exampleJarFile.fileName());\n-        Script.jar(hatJarOptions, jar -> jar\n-                .jarFile(exampleJarFile)\n-                .maven_style_root(example)\n-                .javac(hatJavacOpts, javac -> javac\n-                   .class_path(hatJar, wrapJar, clWrapJar, openclCapability.jarFile(buildDir), buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"))\n-                )\n-        );\n-    }\n-\n-\n-    if (jextractCapability.available() && openclCapability.available() && openglCapability.available()) {\n-        var example = examples.dir(\"nbody\");\n-        var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n-        out.println(exampleJarFile.fileName());\n-        Script.jar(hatJarOptions, jar -> jar\n-                .jarFile(exampleJarFile)\n-                .maven_style_root(example)\n-                .javac(hatJavacOpts, javac -> javac\n-                    .class_path( hatJar, wrapJar, clWrapJar, glWrapJar, openclCapability.jarFile(buildDir), openglCapability.jarFile(buildDir),buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"))\n-                )\n-        );\n-    }\n-\n@@ -313,1 +347,1 @@\n-        if (!cmakeBuildDir.exists()) {\n+        if (!targets.cmakeBuildDir.exists()) {\n@@ -317,1 +351,1 @@\n-                    .build_dir(cmakeBuildDir)\n+                    .build_dir(targets.cmakeBuildDir)\n@@ -322,1 +356,1 @@\n-                .build(cmakeBuildDir)\n+                .build(targets.cmakeBuildDir)\n","filename":"hat\/hat\/bld.java","additions":134,"deletions":100,"binary":false,"changes":234,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+  var ffiBackendSharedJar = buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\");\n@@ -74,1 +75,1 @@\n-               haveBackend.class_path(wrapJar, clwrapJar, jextractedOpenCLJar);\n+               haveBackend.class_path(wrapJar, clwrapJar, jextractedOpenCLJar, ffiBackendSharedJar );\n","filename":"hat\/hat\/run.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}