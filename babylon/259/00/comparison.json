{"files":[{"patch":"@@ -3,2 +3,1 @@\n-target\/\n-maven-build\/\n+repo\/\n","filename":"hat\/.gitignore","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        ├── maven-build (created by the build)\n+        ├── build (created by the build)\n","filename":"hat\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-cmake-build-debug\n-bld-debug\n-opencl\/build\n-cuda\/build\n","filename":"hat\/backends\/.gitignore","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -67,1 +67,1 @@\n-                      <argument>cmake-build-debug<\/argument>\n+                      <argument>${hat.target}\/cmake-build-debug<\/argument>\n@@ -81,1 +81,1 @@\n-                      <argument>cmake-build-debug<\/argument>\n+                      <argument>${hat.target}\/cmake-build-debug<\/argument>\n","filename":"hat\/backends\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-cp beehive-spirv-toolkit\/lib\/target\/beehive-spirv-lib-0.0.4.jar ..\/..\/..\/maven-build\/\n+cp beehive-spirv-toolkit\/lib\/target\/beehive-spirv-lib-0.0.4.jar ..\/..\/..\/build\/\n","filename":"hat\/backends\/spirv\/scripts\/build-beehive-spirv-toolkit.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-cp levelzero.jar ..\/..\/..\/maven-build\/\n+cp levelzero.jar ..\/..\/..\/build\/\n","filename":"hat\/backends\/spirv\/scripts\/generate-level-zero-binding.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n-import module java.compiler;\n-import static bldr.Bldr.*;\n+import static bldr.Bldr.*;           \/\/ all the helpers are here \n+import static java.nio.file.Files.*; \/\/ so we can use isDirectory(path);\n+\n@@ -30,7 +31,1 @@\n-   var hatDir = Path.of(System.getProperty(\"user.dir\"));\n-   var thirdPartyDir = path(hatDir, \"thirdparty\");\/\/ maybe clean?\n-   var jextractDir = untarIfNeeded(\n-         curlIfNeeded(\n-            new URI(\"https:\/\/download.java.net\/java\/early_access\/jextract\/22\/5\/openjdk-22-jextract+5-33_macos-aarch64_bin.tar.gz\").toURL(),\n-            path(thirdPartyDir, \"jextract.tar\")),\n-         path(thirdPartyDir, \"jextract-22\"));\n+   var hatDir = new Root();\n@@ -38,3 +33,7 @@\n-   var licensePattern = Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\");\n-   var eolws = Pattern.compile(\"^.* $\");\n-   var tab = Pattern.compile(\"^.*\\\\t.*\");\n+   withExpectedDirectory(hatDir.path(), \"hat\", hatProjectDir -> {\n+      var hatJavacOpts = new JavacBuilder().opts(\n+         \"--source\", \"24\",\n+         \"--enable-preview\",\n+         \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+         \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+      );\n@@ -42,17 +41,1 @@\n-   paths(hatDir, \"docs\", \"hat\", \"examples\", \"backends\").forEach(dir -> {\n-         paths(dir, path -> !Pattern.matches(\"^.*(-debug|rleparser).*$\", path.toString())\n-               && Pattern.matches(\"^.*\\\\.(java|md|cpp|h|hpp)$\", path.toString())\n-              ).stream().map(path -> new TextFile(path)).forEach(textFile -> {\n-                 if (!Pattern.matches(\"^.*md$\", textFile.path().toString()) && !textFile.grep(licensePattern)) {\n-                     System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n-                 }\n-                 textFile.lines().forEach(line -> {\n-                    if (line.grep(tab)) {\n-                       System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                    if (line.grep(eolws)) {\n-                       System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                 });\n-         });\n-   });\n+      var hatJarResult = new Project(hatDir.buildDir(), hatProjectDir, \"1.0\").build(hatJavacOpts);\n@@ -60,1 +43,1 @@\n-   var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n+      var hatExampleJavacConfig = new JavacBuilder().basedOn(hatJavacOpts).class_path(hatJarResult.jar);\n@@ -62,6 +45,5 @@\n-   var hatJavacOpts = javacjarconfig($ -> $.opts(\n-            \"--source\", \"24\",\n-            \"--enable-preview\",\n-            \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-            \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n-            ));\n+      withExpectedDirectory(hatDir.path(), \"backends\", backendsDir -> {\n+         subDirStream(backendsDir, \"opencl\", \"ptx\", \"cuda\", \"mock\")\n+             .map(backendDir -> new Project(hatDir.buildDir(), backendDir, \"1.0\"))\n+             .parallel()\n+             .forEach(project -> project.build(\"hat-backend\", hatExampleJavacConfig));\n@@ -69,0 +51,1 @@\n+         var cmakeBuildDir = hatDir.buildDir().resolve(\"cmake-build-debug\");\n@@ -70,25 +53,4 @@\n-   var hatJarResult = javacjar($ -> $\n-         .seed(hatJavacOpts)\n-         .jar(path(target, \"hat-1.0.jar\"))\n-         .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n-         );\n-   var hatExampleJavaConfig = javacjarconfig($ -> $.seed(hatJavacOpts).class_path(hatJarResult.jar));\n-   println(hatJarResult.jar);\n-   for (var exampleDir : paths(path(hatDir, \"examples\"), \"blackscholes\", \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n-      javacjar($ -> $\n-            .seed(hatExampleJavaConfig)\n-            .jar(path(target, \"hat-example-\" + exampleDir.getFileName() + \"-1.0.jar\"))\n-            .source_path(path(exampleDir, \"src\/main\/java\"))\n-            .resource_path(path(exampleDir, \"src\/main\/resources\"))\n-            );\n-   }\n-   var backendsDir = path(hatDir, \"backends\");\n-   for (var backendDir : paths(backendsDir, \"opencl\", \"ptx\")) {\n-      javacjar($ -> $\n-            .seed(hatExampleJavaConfig)\n-            .jar(path(target, \"hat-backend-\" + backendDir.getFileName() + \"-1.0.jar\"))\n-            .source_path(path(backendDir, \"src\/main\/java\"))\n-            .resource_path(path(backendDir, \"src\/main\/resources\"))\n-            );\n-   }\n-   var hattricksDir = path(hatDir, \"hattricks\");\n+         if (!isDirectory(cmakeBuildDir)) { \/\/ We need to rerun build -B defaultCMakeBuilder.buildDir\n+            mkdir(cmakeBuildDir);\n+            cmake($ -> $ .S(backendsDir) .B(cmakeBuildDir) .opts(\"-DHAT_TARGET=\" + hatDir.buildDir()));\n+         }\n@@ -96,9 +58,16 @@\n-   if (Files.exists(hattricksDir)) {\n-      for (var hattrickDir : paths(hattricksDir, \"chess\", \"view\")) {\n-         javacjar($ -> $\n-               .seed(hatExampleJavaConfig)\n-               .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n-               .source_path(path(hattrickDir, \"src\/main\/java\"))\n-               .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n-               );\n-      }\n+         cmake($->$ .build(cmakeBuildDir));\n+      });\n+\n+\n+      withExpectedDirectory(hatDir.path(), \"examples\", examplesDir ->\n+         subDirStream(examplesDir, \"blackscholes\", \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")\n+             .map(exampleDir -> new Project(hatDir.buildDir(), exampleDir, \"1.0\"))\n+             .parallel()\n+             .forEach(project -> project.build(\"hat-example\", hatExampleJavacConfig))\n+      );\n+\n+      withOptionalDirectory(hatDir.path(), \"hattricks\", hattricksDir -> {\n+         subDirStream(hattricksDir, \"chess\", \"view\")\n+             .map(hattrickDir -> new Project(hatDir.buildDir(), hattrickDir, \"1.0\"))\n+             .parallel()\n+             .forEach(project -> project.build(\"hat-example\", hatExampleJavacConfig));\n@@ -106,30 +75,0 @@\n-      for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n-         var appFrameworks = \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\";\n-         var MAC_APP_FRAMEWORKS = Path.of(appFrameworks);\n-         var MAC_LIB_FRAMEWORKS = Path.of(\"\/System\/Library\/Frameworks\");\n-         var jextractedJava = path(target, \"jextracted-java\");\n-         mkdir(jextractedJava);\n-         var jextractedOpenCL = path(jextractedJava, \"opencl\");\n-         var jextractedOpenGL = path(jextractedJava, \"opengl\");\n-         var jextractconfig = jextractconfig($ -> $\n-               .home(jextractDir)\n-               .cwd(hattrickDir)\n-               .output(jextractedJava)\n-               .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n-               );\n-         if (!existingDir(jextractedOpenCL)) {\n-            jextract($ -> $\n-                  .seed(jextractconfig)\n-                  .target_package(\"opencl\")\n-                  .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n-                  .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n-                  );\n-         }\n-         if (!existingDir(jextractedOpenGL)) {\n-            jextract($ -> $\n-                  .seed(jextractconfig)\n-                  .target_package(\"opengl\")\n-                  .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n-                  .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n-                  );\n-         }\n@@ -137,8 +76,35 @@\n-         javacjar($ -> $\n-               .seed(hatExampleJavaConfig)\n-               .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n-               .source_path(path(hattrickDir, \"src\/main\/java\"), jextractedOpenCL, jextractedOpenGL)\n-               .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n-               );\n-      }\n-   }\n+             withOptionalDirectory(hattricksDir, \"nbody\", nbody -> {\n+                var jextractedJava = mkdir(hatDir.buildDir().resolve(\"jextracted-java\"));\n+                var extractedOpenCLCode = jextractedJava.resolve(\"opencl\");\n+                if (!isDirectory(extractedOpenCLCode)) {\n+                   mkdir(extractedOpenCLCode);\n+                   jextract($$ -> $$\n+                      .home(hatDir.requireJExtract())\n+                      .cwd(nbody)\n+                      .output(jextractedJava)\n+                      .target_package(\"opencl\")\n+                      .when(os.isMac(), $$$ -> $$$\n+                         .compile_flag(\"-F\" + os.macAppLibFrameworks())\n+                         .library(os.macFramework(\"OpenCL.framework\/OpenCL\"))\n+                         .header(os.macFrameworkHeaderFile(\"OpenCL.framework\/Headers\/opencl.h\"))\n+                      )\n+                   );\n+                }\n+                var extractedOpenGLCode = jextractedJava.resolve(\"opengl\");\n+                if (!isDirectory(extractedOpenGLCode)) {\n+                   mkdir(extractedOpenGLCode);\n+                   jextract($$ -> $$\n+                      .home(hatDir.requireJExtract())\n+                      .cwd(nbody)\n+                      .output(jextractedJava)\n+                      .target_package(\"opengl\")\n+                      .when(os.isMac(), $$$ -> $$$\n+                         .compile_flag(\"-F\" + os.macAppLibFrameworks())\n+                         .library(\n+                             os.macFramework(\"GLUT.framework\/GLUT\"),\n+                             os.macFramework(\"OpenGL.framework\/OpenGL\")\n+                         )\n+                         .header(os.macFrameworkHeaderFile(\"GLUT.framework\/Headers\/glut.h\"))\n+                      )\n+                   );\n+                }\n@@ -146,6 +112,10 @@\n-   var cmakeBldDebugDir = backendsDir.resolve(\"bld-debug\");\n-   if (!existingDir(cmakeBldDebugDir)) {\n-      mkdir(cmakeBldDebugDir);\n-      cmake($ -> $.cwd(backendsDir)._B(cmakeBldDebugDir).opts(\"-DHAT_TARGET=\" + target));\n-   }\n-   cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));\n+                jar($ -> $\n+                   .jar(hatDir.buildDir().resolve(\"hat-example-nbody-1.0.jar\"))\n+                   .path_list(nbody.resolve(\"src\/main\/resources\"))\n+                   .javac($$ -> $$.basedOn(hatExampleJavacConfig)\n+                       .source_path(nbody.resolve(\"src\/main\/java\"), extractedOpenCLCode, extractedOpenGLCode)\n+                   )\n+                );\n+             });\n+          });\n+      });\n","filename":"hat\/bld","additions":84,"deletions":114,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.io.StringWriter;\n@@ -53,0 +54,1 @@\n+import java.net.URLEncoder;\n@@ -65,0 +67,1 @@\n+import java.util.Optional;\n@@ -73,0 +76,1 @@\n+import java.util.zip.ZipFile;\n@@ -75,0 +79,2 @@\n+import static java.nio.file.Files.isDirectory;\n+import static java.nio.file.Files.isRegularFile;\n@@ -77,0 +83,190 @@\n+    public interface PathHolder {\n+        Path path();\n+    }\n+\n+    interface TargetDirProvider extends PathHolder {\n+        Path targetDir();\n+    }\n+\n+    interface JavaSourceDirProvider {\n+        Path javaSourceDir();\n+    }\n+\n+    interface ResourceDirProvider {\n+        Path resourcesDir();\n+    }\n+\n+    public interface DirPathHolder extends PathHolder {\n+    }\n+\n+    public interface FilePathHolder extends PathHolder {\n+    }\n+\n+    public interface ClassPathEntry extends PathHolder {\n+    }\n+\n+    public record ClassDir(Path path) implements ClassPathEntry, DirPathHolder {\n+    }\n+\n+    public record JarFile(Path path) implements ClassPathEntry, FilePathHolder {\n+    }\n+\n+    public record SourcePathEntry(Path path) implements DirPathHolder {\n+    }\n+\n+    public interface SourceFile extends FilePathHolder {\n+    }\n+\n+    public record JavaSourceFile(Path path) implements SourceFile {\n+    }\n+\n+    public record CppSourceFile(Path path) implements SourceFile {\n+    }\n+\n+    public record HeaderSourceFile(Path path) implements SourceFile {\n+    }\n+\n+\n+    public record ClassPath(List<ClassPathEntry> entries) {\n+    }\n+\n+    public record SourcePath(List<SourcePathEntry> entries) {\n+    }\n+\n+    public record XMLFile(Path path) implements FilePathHolder {\n+    }\n+\n+\n+    public static class Repo {\n+        public record Id(Repo repo, String groupId, String artifactId, String versionId) {\n+            static String groupId(XMLNode xmlNode) {\n+                return xmlNode.xpathQueryString(\"groupId\/text()\");\n+            }\n+\n+            static String artifactId(XMLNode xmlNode) {\n+                return xmlNode.xpathQueryString(\"artifactId\/text()\");\n+            }\n+\n+            static String versionId(XMLNode xmlNode) {\n+                return xmlNode.xpathQueryString(\"versionId\/text()\");\n+            }\n+\n+            public Id(Repo repo, XMLNode xmlNode) {\n+                this(repo, groupId(xmlNode), artifactId(xmlNode), versionId(xmlNode));\n+            }\n+\n+            private String artifactAndVersion() {\n+                return artifactId() + '-' + versionId();\n+            }\n+\n+            private String pathName() {\n+                return groupId() + '.' + artifactAndVersion();\n+            }\n+\n+            private String name(String suffix) {\n+                return artifactAndVersion() + \".\" + suffix;\n+            }\n+        }\n+\n+        private final String repoBase = \"https:\/\/repo1.maven.org\/maven2\/\";\n+        private final String searchBase = \"https:\/\/search.maven.org\/solrsearch\/\";\n+        private Path path;\n+\n+        public Repo(Path path) {\n+            this.path = path;\n+        }\n+\n+        public XMLNode select(String query) {\n+            try {\n+                URL url = new URI(searchBase + \"select?q=\" +\n+                        URLEncoder.encode(query, StandardCharsets.UTF_8)\n+                        + \"&core=gav&wt=xml\").toURL();\n+                try {\n+                    return new XMLNode(url);\n+                } catch (Throwable e) {\n+                    throw new RuntimeException(e);\n+                }\n+            } catch (MalformedURLException | URISyntaxException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        public XMLNode queryXMLByGroup(String groupId) {\n+            return select(\"g:\" + groupId);\n+        }\n+\n+        public XMLNode queryXMLByArtifact(String artifactId) {\n+            return select(\"a:\" + artifactId);\n+        }\n+\n+        public XMLNode queryByGroupAndArtifact(String groupId, String artifactId) {\n+            return select(\"g:\" + groupId + \" AND a:\" + artifactId);\n+        }\n+\n+        public XMLNode queryByGroupArtifactAndVersion(String groupId, String artifactId, String versionId) {\n+            return select(\"g:\" + groupId + \" AND a:\" + artifactId + \" AND v:\" + versionId);\n+        }\n+\n+        public Optional<Id> id(String groupId, String artifactId, String versionId) {\n+            var xmlNode = queryByGroupArtifactAndVersion(groupId, artifactId, versionId);\n+            var numFound = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n+            if (numFound.isEmpty() || numFound.equals(\"0\")) {\n+                return Optional.empty();\n+            } else {\n+                return Optional.of(new Id(this, groupId, artifactId, versionId));\n+            }\n+        }\n+\n+        public Stream<String> versions(String groupId, String artifactId) {\n+            var xmlNode = queryByGroupAndArtifact(groupId, artifactId);\n+            \/\/  var numFound = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n+            \/\/ if (numFound.isEmpty() || numFound.equals(\"0\")){\n+            \/\/   return Stream.empty();\n+            \/\/ }else {\n+            return xmlNode.xmlNodes(xmlNode.xpath(\"\/response\/result\/doc\"))\n+                    .map(xmln -> xmln.xpathQueryString(\"str[@name='v']\/text()\"));\n+            \/\/}\n+        }\n+\n+        public boolean forEachVersion(String groupId, String artifactId, Consumer<String> idConsumer) {\n+            boolean[] found = new boolean[]{false};\n+            versions(groupId, artifactId).forEach(id -> {\n+                idConsumer.accept(id);\n+                found[0] = true;\n+            });\n+            return found[0];\n+        }\n+\n+        public Stream<Id> ids(String groupId, String artifactId) {\n+            var xmlNode = queryByGroupAndArtifact(groupId, artifactId);\n+            var numFound = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n+            if (numFound.isEmpty() || numFound.equals(\"0\")) {\n+                return Stream.empty();\n+            } else {\n+                return xmlNode.xmlNodes(xmlNode.xpath(\"\/response\/result\/doc\"))\n+                        .map(xmln -> {\n+                            var a = xmln.xpathQueryString(\"str[@name='a']\/text()\");\n+                            var g = xmln.xpathQueryString(\"str[@name='g']\/text()\");\n+                            var v = xmln.xpathQueryString(\"str[@name='v']\/text()\");\n+                            return new Id(this, g, a, v);\n+                        });\n+            }\n+        }\n+\n+        public boolean forEachId(String groupId, String artifactId, Consumer<Id> idConsumer) {\n+            boolean[] found = new boolean[]{false};\n+            ids(groupId, artifactId).forEach(id -> {\n+                idConsumer.accept(id);\n+                found[0] = true;\n+            });\n+            return found[0];\n+        }\n+\n+\n+        \/\/ https:\/\/search.maven.org\/solrsearch\/select?q=a:aparapi&core=gav&wt=xml\n+        \/\/https:\/\/search.maven.org\/solrsearch\/select?q=aparapi&wt=xml\n+        \/\/https:\/\/repo1.maven.org\/maven2\/com\/aparapi\/aparapi-jni\/1.0.0\/aparapi-jni-1.0.0.pom\n+        \/\/https:\/\/repo1.maven.org\/maven2\/com\/aparapi\/aparapi-jni\/maven-metadata.xml\n+        \/\/\n+    }\n+\n@@ -78,0 +274,29 @@\n+        static final String MacName = \"Mac OS X\";\n+\n+        public String nameArchTuple() {\n+            return switch (name()) {\n+                case MacName -> \"macos\";\n+                default -> name().toLowerCase();\n+            } + '-' + arch();\n+        }\n+\n+        public boolean isMac() {\n+            return name().equals(MacName);\n+        }\n+\n+        public Path macAppLibFrameworks() {\n+            return Path.of(\"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/\"\n+                    + \"MacOSX.sdk\/System\/Library\/Frameworks\");\n+        }\n+\n+        public Path macFrameworkHeaderFile(String resolveMe) {\n+            return macAppLibFrameworks().resolve(resolveMe);\n+        }\n+\n+        public Path macLibFrameworks() {\n+            return Path.of(\"\/System\/Library\/Frameworks\");\n+        }\n+\n+        public Path macFramework(String resolveMe) {\n+            return macLibFrameworks().resolve(resolveMe);\n+        }\n@@ -101,2 +326,3 @@\n-            for (int i = 0; i < this.element.getChildNodes().getLength(); i++) {\n-                if (this.element.getChildNodes().item(i) instanceof org.w3c.dom.Element e) {\n+            NodeList nodeList = element.getChildNodes();\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                if (nodeList.item(i) instanceof org.w3c.dom.Element e) {\n@@ -121,0 +347,4 @@\n+        XMLNode(Path path) throws Throwable {\n+            this(javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(path.toFile()).getDocumentElement());\n+        }\n+\n@@ -129,1 +359,1 @@\n-        void write(File file) throws Throwable {\n+        void write(StreamResult streamResult) throws Throwable {\n@@ -134,1 +364,1 @@\n-            transformer.transform(new DOMSource(element.getOwnerDocument()), new StreamResult(file));\n+            transformer.transform(new DOMSource(element.getOwnerDocument()), streamResult);\n@@ -137,3 +367,2 @@\n-        XPathExpression xpath(String expression) throws XPathExpressionException {\n-            XPath xpath = XPathFactory.newInstance().newXPath();\n-            return xpath.compile(expression);\n+        void write(File file) throws Throwable {\n+            write(new StreamResult(file));\n@@ -142,2 +371,14 @@\n-        Node node(XPathExpression xPathExpression) throws XPathExpressionException {\n-            return (Node) xPathExpression.evaluate(this.element, XPathConstants.NODE);\n+        @Override\n+        public String toString() {\n+            var stringWriter = new StringWriter();\n+            try {\n+                var transformer = TransformerFactory.newInstance().newTransformer();\n+                transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+                transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+                transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n+                transformer.transform(new DOMSource(element), new StreamResult(stringWriter));\n+                return stringWriter.toString();\n+            } catch (Throwable e) {\n+                throw new RuntimeException(e);\n+            }\n+\n@@ -146,2 +387,7 @@\n-        String string(XPathExpression xPathExpression) throws XPathExpressionException {\n-            return (String) xPathExpression.evaluate(this.element, XPathConstants.STRING);\n+        XPathExpression xpath(String expression) {\n+            XPath xpath = XPathFactory.newInstance().newXPath();\n+            try {\n+                return xpath.compile(expression);\n+            } catch (XPathExpressionException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -150,2 +396,6 @@\n-        NodeList nodeList(XPathExpression xPathExpression) throws XPathExpressionException {\n-            return (NodeList) xPathExpression.evaluate(this.element, XPathConstants.NODESET);\n+        Node node(XPathExpression xPathExpression) {\n+            try {\n+                return (Node) xPathExpression.evaluate(this.element, XPathConstants.NODE);\n+            } catch (XPathExpressionException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -153,1 +403,0 @@\n-    }\n@@ -155,1 +404,7 @@\n-    static class POM {\n+        String str(XPathExpression xPathExpression) {\n+            try {\n+                return (String) xPathExpression.evaluate(this.element, XPathConstants.STRING);\n+            } catch (XPathExpressionException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n@@ -157,1 +412,7 @@\n-        static Pattern varPattern = Pattern.compile(\"\\\\$\\\\{([^}]*)\\\\}\");\n+        String xpathQueryString(String xpathString) {\n+            try {\n+                return (String) xpath(xpathString).evaluate(this.element, XPathConstants.STRING);\n+            } catch (XPathExpressionException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n@@ -159,10 +420,13 @@\n-        static public String varExpand(Map<String, String> props, String value) { \/\/ recurse\n-            String result = value;\n-            if (varPattern.matcher(value) instanceof Matcher matcher && matcher.find()) {\n-                var v = matcher.group(1);\n-                result = varExpand(props, value.substring(0, matcher.start())\n-                        + (v.startsWith(\"env\")\n-                        ? System.getenv(v.substring(4))\n-                        : props.get(v))\n-                        + value.substring(matcher.end()));\n-                \/\/out.println(\"incomming ='\"+value+\"'  v= '\"+v+\"' value='\"+value+\"'->'\"+result+\"'\");\n+        NodeList nodeList(XPathExpression xPathExpression) {\n+            try {\n+                return (NodeList) xPathExpression.evaluate(this.element, XPathConstants.NODESET);\n+            } catch (XPathExpressionException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        Stream<org.w3c.dom.Node> nodes(XPathExpression xPathExpression) {\n+            var nodeList = nodeList(xPathExpression);\n+            List<org.w3c.dom.Node> nodes = new ArrayList<>();\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                nodes.add(nodeList.item(i));\n@@ -170,1 +434,1 @@\n-            return result;\n+            return nodes.stream();\n@@ -173,9 +437,3 @@\n-        POM(Path dir) throws Throwable {\n-            var topPom = new XMLNode(new File(dir.toFile(), \"pom.xml\"));\n-            var babylonDirKey = \"babylon.dir\";\n-            var spirvDirKey = \"beehive.spirv.toolkit.dir\";\n-            var hatDirKey = \"hat.dir\";\n-            var interestingKeys = Set.of(spirvDirKey, babylonDirKey, hatDirKey);\n-            var requiredDirKeys = Set.of(babylonDirKey, hatDirKey);\n-            var dirKeyToDirMap = new HashMap<String, File>();\n-            var props = new HashMap<String, String>();\n+        Stream<org.w3c.dom.Element> elements(XPathExpression xPathExpression) {\n+            return nodes(xPathExpression).filter(n -> n instanceof org.w3c.dom.Element).map(n -> (Element) n);\n+        }\n@@ -183,10 +441,44 @@\n-            topPom.children.stream().filter(e -> e.element.getNodeName().equals(\"properties\")).forEach(properties ->\n-                    properties.children.stream().forEach(property -> {\n-                        var key = property.element.getNodeName();\n-                        var value = varExpand(props, property.element.getTextContent());\n-                        props.put(key, value);\n-                        if (interestingKeys.contains(key)) {\n-                            var file = new File(value);\n-                            if (requiredDirKeys.contains(key) && !file.exists()) {\n-                                System.err.println(\"ERR pom.xml has property '\" + key + \"' with value '\" + value + \"' but that dir does not exists!\");\n-                                System.exit(1);\n+        Stream<XMLNode> xmlNodes(XPathExpression xPathExpression) {\n+            return elements(xPathExpression).map(e -> new XMLNode(e));\n+        }\n+    }\n+\n+    \/*\n+        static class POM {\n+            static Pattern varPattern = Pattern.compile(\"\\\\$\\\\{([^}]*)\\\\}\");\n+            static public String varExpand(Map<String, String> props, String value) { \/\/ recurse\n+                String result = value;\n+                if (varPattern.matcher(value) instanceof Matcher matcher && matcher.find()) {\n+                    var v = matcher.groupId(1);\n+                    result = varExpand(props, value.substring(0, matcher.start())\n+                            + (v.startsWith(\"env\")\n+                            ? System.getenv(v.substring(4))\n+                            : props.get(v))\n+                            + value.substring(matcher.end()));\n+                    \/\/out.println(\"incomming ='\"+value+\"'  v= '\"+v+\"' value='\"+value+\"'->'\"+result+\"'\");\n+                }\n+                return result;\n+            }\n+\n+            POM(Path dir) throws Throwable {\n+                var topPom = new XMLNode(new File(dir.toFile(), \"pom.xml\"));\n+                var babylonDirKey = \"babylon.dir\";\n+                var spirvDirKey = \"beehive.spirv.toolkit.dir\";\n+                var hatDirKey = \"hat.dir\";\n+                var interestingKeys = Set.of(spirvDirKey, babylonDirKey, hatDirKey);\n+                var requiredDirKeys = Set.of(babylonDirKey, hatDirKey);\n+                var dirKeyToDirMap = new HashMap<String, File>();\n+                var props = new HashMap<String, String>();\n+\n+                topPom.children.stream().filter(e -> e.element.getNodeName().equals(\"properties\")).forEach(properties ->\n+                        properties.children.stream().forEach(property -> {\n+                            var key = property.element.getNodeName();\n+                            var value = varExpand(props, property.element.getTextContent());\n+                            props.put(key, value);\n+                            if (interestingKeys.contains(key)) {\n+                                var file = new File(value);\n+                                if (requiredDirKeys.contains(key) && !file.exists()) {\n+                                    System.err.println(\"ERR pom.xml has property '\" + key + \"' with value '\" + value + \"' but that dir does not exists!\");\n+                                    System.exit(1);\n+                                }\n+                                dirKeyToDirMap.put(key, file);\n@@ -194,8 +486,7 @@\n-                            dirKeyToDirMap.put(key, file);\n-                        }\n-                    })\n-            );\n-            for (var key : requiredDirKeys) {\n-                if (!props.containsKey(key)) {\n-                    System.err.println(\"ERR pom.xml expected to have property '\" + key + \"' \");\n-                    System.exit(1);\n+                        })\n+                );\n+                for (var key : requiredDirKeys) {\n+                    if (!props.containsKey(key)) {\n+                        System.err.println(\"ERR pom.xml expected to have property '\" + key + \"' \");\n+                        System.exit(1);\n+                    }\n@@ -205,2 +496,1 @@\n-    }\n-\n+    *\/\n@@ -229,0 +519,40 @@\n+    public static Stream<Path> subDirStream(Path path, String... dirNames) {\n+        return Stream.of(dirNames).map(path::resolve).filter(Files::isDirectory);\n+    }\n+\n+    public static void forEachSubDir(Path path, Stream<String> dirNames, Consumer<Path> pathConsumer) {\n+        dirNames.map(path::resolve).filter(Files::isDirectory).forEach(pathConsumer);\n+    }\n+\n+    public static void forEachSubDir(Path path, Consumer<Path> pathConsumer) {\n+        try {\n+            Files.walk(path, 1).filter(file -> !file.equals(path)).filter(Files::isDirectory).forEach(pathConsumer);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static Stream<Path> findFiles(Path dir) {\n+        return find(dir, Files::isRegularFile);\n+    }\n+\n+    public static Stream<Path> findDirs(Path dir) {\n+        return find(dir, Files::isDirectory);\n+    }\n+\n+    public static Stream<Path> findFiles(Path dir, Predicate<Path> predicate) {\n+        return findFiles(dir).filter(predicate);\n+    }\n+\n+    public static Stream<TextFile> findTextFiles(Path dir, String... suffixes) {\n+        return findFiles(dir).map(TextFile::new).filter(textFile -> textFile.hasSuffix(suffixes));\n+    }\n+\n+    public static Stream<Path> findDirs(Path dir, Predicate<Path> predicate) {\n+        return find(dir, Files::isDirectory).filter(predicate);\n+    }\n+\n+    public static class Builder<T extends Builder<T>> {\n+        T self() {\n+            return (T) this;\n+        }\n@@ -230,2 +560,0 @@\n-    public static class JavacJarConfig {\n-        public Path jar;\n@@ -233,0 +561,37 @@\n+\n+        public T opts(List<String> opts) {\n+            this.opts.addAll(opts);\n+            return self();\n+        }\n+\n+        public T opts(String... opts) {\n+            opts(Arrays.asList(opts));\n+            return self();\n+        }\n+\n+        public T basedOn(T stem) {\n+            if (stem != null) {\n+                opts.addAll(stem.opts);\n+            }\n+            return self();\n+        }\n+\n+        public T when(boolean condition, Consumer<T> consumer) {\n+            if (condition) {\n+                consumer.accept(self());\n+            }\n+            return self();\n+        }\n+\n+        public T either(boolean condition, Consumer<T> trueConsumer, Consumer<T> falseConsumer) {\n+            if (condition) {\n+                trueConsumer.accept(self());\n+            } else {\n+                falseConsumer.accept(self());\n+            }\n+            return self();\n+        }\n+\n+    }\n+\n+    public static class JavacBuilder extends Builder<JavacBuilder> {\n@@ -236,1 +601,0 @@\n-        public List<Path> resourcePath;\n@@ -238,1 +602,2 @@\n-        public JavacJarConfig seed(JavacJarConfig stem) {\n+        public JavacBuilder basedOn(JavacBuilder stem) {\n+            super.basedOn(stem);\n@@ -240,6 +605,0 @@\n-                if (stem.jar != null) {\n-                    this.jar = stem.jar;\n-                }\n-                if (stem.opts != null) {\n-                    this.opts = new ArrayList<>(stem.opts);\n-                }\n@@ -255,3 +614,0 @@\n-                if (stem.resourcePath != null) {\n-                    this.resourcePath = new ArrayList<>(stem.resourcePath);\n-                }\n@@ -262,2 +618,2 @@\n-        public JavacJarConfig jar(Path jar) {\n-            this.jar = jar;\n+        public JavacBuilder classes_dir(Path classesDir) {\n+            this.classesDir = classesDir;\n@@ -267,2 +623,3 @@\n-        public JavacJarConfig opts(List<String> opts) {\n-            this.opts.addAll(opts);\n+        public JavacBuilder source_path(Path... sourcePaths) {\n+            this.sourcePath = this.sourcePath==null?new ArrayList<>():this.sourcePath;\n+            this.sourcePath.addAll(Arrays.asList(sourcePaths));\n@@ -272,7 +629,3 @@\n-        public JavacJarConfig opts(String... opts) {\n-            opts(Arrays.asList(opts));\n-            return this;\n-        }\n-\n-        public JavacJarConfig source_path(Path... sourcePaths) {\n-            this.sourcePath = new ArrayList<>(Arrays.asList(sourcePaths));\n+        public JavacBuilder class_path(Path... classPaths) {\n+            this.classPath = this.classPath==null?new ArrayList<>():this.classPath;\n+            this.classPath.addAll(Arrays.asList(classPaths));\n@@ -281,0 +634,1 @@\n+    }\n@@ -282,3 +636,5 @@\n-        public JavacJarConfig class_path(Path... classPaths) {\n-            this.classPath = new ArrayList<>(Arrays.asList(classPaths));\n-            return this;\n+    public static Stream<Path> find(Path dir) {\n+        try {\n+            return Files.walk(dir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -286,0 +642,1 @@\n+    }\n@@ -287,4 +644,2 @@\n-        public JavacJarConfig resource_path(Path... resourcePaths) {\n-            this.resourcePath = new ArrayList<>(Arrays.asList(resourcePaths));\n-            return this;\n-        }\n+    public static Stream<Path> find(Path dir, Predicate<Path> predicate) {\n+        return find(dir).filter(predicate);\n@@ -293,4 +648,4 @@\n-    public static JavacJarConfig javacjarconfig(Consumer<JavacJarConfig> javacJarConfigConsumer) {\n-        JavacJarConfig javacJarConfig = new JavacJarConfig();\n-        javacJarConfigConsumer.accept(javacJarConfig);\n-        return javacJarConfig;\n+    record RootAndPath(Path root, Path path) {\n+        Path relativize() {\n+            return root().relativize(path());\n+        }\n@@ -299,2 +654,8 @@\n-    public static JavacJarConfig javacjar(Consumer<JavacJarConfig> javacJarConfigConsumer) throws IOException {\n-        JavacJarConfig javacJarConfig = javacjarconfig(javacJarConfigConsumer);\n+    public static JavacBuilder javac(JavacBuilder javacBuilder) {\n+        try {\n+            if (javacBuilder.classesDir == null) {\n+                javacBuilder.classesDir = Files.createTempDirectory(\"javacClasses\");\n+                \/\/   javacBuilder.classesDir = javacBuilder.jar.resolveSibling(javacBuilder.jar.getFileName().toString() + \".classes\");\n+            }\n+            javacBuilder.opts.addAll(List.of(\"-d\", javacBuilder.classesDir.toString()));\n+            mkdir(rmdir(javacBuilder.classesDir));\n@@ -302,5 +663,3 @@\n-        if (javacJarConfig.classesDir == null) {\n-            javacJarConfig.classesDir = javacJarConfig.jar.resolveSibling(javacJarConfig.jar.getFileName().toString() + \".classes\");\n-        }\n-        javacJarConfig.opts.addAll(List.of(\"-d\", javacJarConfig.classesDir.toString()));\n-        mkdir(rmdir(javacJarConfig.classesDir));\n+            if (javacBuilder.classPath != null) {\n+                javacBuilder.opts.addAll(List.of(\"--class-path\", pathCharSeparated(javacBuilder.classPath)));\n+            }\n@@ -308,3 +667,3 @@\n-        if (javacJarConfig.classPath != null) {\n-            javacJarConfig.opts.addAll(List.of(\"--class-path\", pathCharSeparated(javacJarConfig.classPath)));\n-        }\n+            javacBuilder.opts.addAll(List.of(\"--source-path\", pathCharSeparated(javacBuilder.sourcePath)));\n+            var src = new ArrayList<Path>();\n+            javacBuilder.sourcePath.forEach(entry -> findFiles(entry, file -> file.toString().endsWith(\".java\")).forEach(src::add));\n@@ -312,42 +671,4 @@\n-        javacJarConfig.opts.addAll(List.of(\"--source-path\", pathCharSeparated(javacJarConfig.sourcePath)));\n-        var src = new ArrayList<Path>();\n-        javacJarConfig.sourcePath.forEach(entry ->\n-                src.addAll(paths(entry, path -> path.toString().endsWith(\".java\")))\n-        );\n-        if (javacJarConfig.resourcePath == null) {\n-            javacJarConfig.resourcePath = new ArrayList<>();\n-        }\n-        DiagnosticListener<JavaFileObject> dl = (diagnostic) -> {\n-            if (!diagnostic.getKind().equals(Diagnostic.Kind.NOTE)) {\n-                System.out.println(diagnostic.getKind()\n-                        + \" \" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \" \" + diagnostic.getMessage(null));\n-            }\n-        };\n-\n-        \/\/ System.out.println(builder.opts);\n-        record RootAndPath(Path root, Path path) {\n-            Path relativize() {\n-                return root().relativize(path());\n-            }\n-        }\n-        List<RootAndPath> pathsToJar = new ArrayList<>();\n-        JavaCompiler javac = javax.tools.ToolProvider.getSystemJavaCompiler();\n-        ((com.sun.source.util.JavacTask) javac.getTask(new PrintWriter(System.err), javac.getStandardFileManager(dl, null, null), dl, javacJarConfig.opts, null,\n-                src.stream().map(path ->\n-                        new SimpleJavaFileObject(path.toUri(), JavaFileObject.Kind.SOURCE) {\n-                            public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n-                                try {\n-                                    return Files.readString(Path.of(toUri()));\n-                                } catch (IOException e) {\n-                                    throw new RuntimeException(e);\n-                                }\n-                            }\n-                        }).toList()\n-        )).generate().forEach(fileObject -> pathsToJar.add(new RootAndPath(javacJarConfig.classesDir, Path.of(fileObject.toUri()))));\n-\n-        var jarStream = new JarOutputStream(Files.newOutputStream(javacJarConfig.jar));\n-        var setOfDirs = new HashSet<Path>();\n-        javacJarConfig.resourcePath.stream().sorted().forEach(resourceDir -> {\n-                    if (Files.isDirectory(resourceDir)) {\n-                        paths(resourceDir, Files::isRegularFile).forEach(path -> pathsToJar.add(new RootAndPath(resourceDir, path)));\n-                    }\n+            DiagnosticListener<JavaFileObject> dl = (diagnostic) -> {\n+                if (!diagnostic.getKind().equals(Diagnostic.Kind.NOTE)) {\n+                    System.out.println(diagnostic.getKind()\n+                            + \" \" + diagnostic.getLineNumber() + \":\" + diagnostic.getColumnNumber() + \" \" + diagnostic.getMessage(null));\n@@ -355,1 +676,21 @@\n-        );\n+            };\n+\n+         \/\/   List<RootAndPath> pathsToJar = new ArrayList<>();\n+            JavaCompiler javac = javax.tools.ToolProvider.getSystemJavaCompiler();\n+            var compilationUnits = src.stream().map(path ->\n+                    new SimpleJavaFileObject(path.toUri(), JavaFileObject.Kind.SOURCE) {\n+                        public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n+                            try {\n+                                return Files.readString(Path.of(toUri()));\n+                            } catch (IOException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        }\n+                    }).toList();\n+            JavaCompiler.CompilationTask compilationTask = (javac.getTask(\n+                    new PrintWriter(System.err),\n+                    javac.getStandardFileManager(dl, null, null),\n+                    dl,\n+                    javacBuilder.opts,\n+                    null,\n+                    compilationUnits\n@@ -357,23 +698,4 @@\n-        pathsToJar.stream().sorted((l, r) -> l.path().compareTo(r.path)).forEach(rootAndPath -> {\n-            var parentDir = rootAndPath.path().getParent();\n-            try {\n-                if (!setOfDirs.contains(parentDir)) {\n-                    setOfDirs.add(parentDir);\n-                    PosixFileAttributes attributes = Files.readAttributes(rootAndPath.path(), PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS);\n-                    var entry = new JarEntry(rootAndPath.relativize() + \"\/\");\n-                    entry.setTime(attributes.lastModifiedTime().toMillis());\n-                    jarStream.putNextEntry(entry);\n-                    jarStream.closeEntry();\n-                }\n-                PosixFileAttributes attributes = Files.readAttributes(rootAndPath.path(), PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS);\n-                var entry = new JarEntry(rootAndPath.relativize().toString());\n-                entry.setTime(attributes.lastModifiedTime().toMillis());\n-                jarStream.putNextEntry(entry);\n-                if (attributes.isRegularFile()) {\n-                    Files.newInputStream(rootAndPath.path()).transferTo(jarStream);\n-                }\n-                jarStream.closeEntry();\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n+            ));\n+            ((com.sun.source.util.JavacTask) compilationTask)\n+                    .generate();\n+                    \/\/.forEach(fileObject -> pathsToJar.add(new RootAndPath(javacBuilder.classesDir, Path.of(fileObject.toUri()))));\n@@ -381,4 +703,0 @@\n-        jarStream.finish();\n-        jarStream.close();\n-        return javacJarConfig;\n-    }\n@@ -386,2 +704,4 @@\n-    public static Path path(String name) {\n-        return Path.of(name);\n+            return javacBuilder;\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -390,2 +710,4 @@\n-    public static Path path(Path parent, String name) {\n-        return parent.resolve(name);\n+    public static JavacBuilder javac(Consumer<JavacBuilder> javacBuilderConsumer) {\n+        JavacBuilder javacBuilder = new JavacBuilder();\n+        javacBuilderConsumer.accept(javacBuilder);\n+        return javac(javacBuilder);\n@@ -394,9 +716,3 @@\n-    public static List<Path> paths(Path... paths) {\n-        List<Path> selectedPaths = new ArrayList<>();\n-        Arrays.asList(paths).forEach(path -> {\n-            if (Files.isDirectory(path)) {\n-                selectedPaths.add(path);\n-            }\n-        });\n-        return selectedPaths;\n-    }\n+    public static class JarBuilder extends Builder<JarBuilder> {\n+        public Path jar;\n+        public List<Path> pathList;\n@@ -404,6 +720,9 @@\n-    public static List<Path> paths(Path parent, String... names) {\n-        List<Path> selectedPaths = new ArrayList<>();\n-        Arrays.asList(names).forEach(name -> {\n-            Path path = path(parent, name);\n-            if (Files.isDirectory(path)) {\n-                selectedPaths.add(path);\n+        public JarBuilder basedOn(JarBuilder stem) {\n+            super.basedOn(stem);\n+            if (stem != null) {\n+                if (stem.jar != null) {\n+                    this.jar = stem.jar;\n+                }\n+                if (stem.pathList != null) {\n+                    this.pathList = new ArrayList<>(stem.pathList);\n+                }\n@@ -411,2 +730,21 @@\n-        });\n-        return selectedPaths;\n+            return this;\n+        }\n+\n+        public JarBuilder jar(Path jar) {\n+            this.jar = jar;\n+            return this;\n+        }\n+\n+        public JarBuilder javac(Consumer<JavacBuilder> javacBuilderConsumer) {\n+            JavacBuilder javacBuilder = new JavacBuilder();\n+            javacBuilderConsumer.accept(javacBuilder);\n+            var result = Bldr.javac(javacBuilder);\n+            pathList = (pathList == null) ? new ArrayList<>() : pathList;\n+            pathList.add(result.classesDir);\n+            return this;\n+        }\n+\n+        public JarBuilder path_list(Path... paths) {\n+            this.pathList = new ArrayList<>(Arrays.asList(paths));\n+            return this;\n+        }\n@@ -415,1 +753,1 @@\n-    public static List<Path> paths(Path path, Predicate<Path> predicate) {\n+    public static JarBuilder jar(Consumer<JarBuilder> jarBuilderConsumer) {\n@@ -417,3 +755,37 @@\n-            return Files.walk(path).filter(predicate).toList();\n-        } catch (IOException ioe) {\n-            throw new IllegalStateException(ioe);\n+            JarBuilder jarBuilder = new JarBuilder();\n+            jarBuilderConsumer.accept(jarBuilder);\n+\n+            List<RootAndPath> pathsToJar = new ArrayList<>();\n+            var jarStream = new JarOutputStream(Files.newOutputStream(jarBuilder.jar));\n+            var setOfDirs = new HashSet<Path>();\n+            jarBuilder.pathList.stream().sorted().filter(Files::isDirectory).forEach(root ->\n+                    pathsToJar.addAll(findFiles(root).map(path -> new RootAndPath(root, path)).toList()));\n+\n+            pathsToJar.stream().sorted(Comparator.comparing(RootAndPath::path)).forEach(rootAndPath -> {\n+                var parentDir = rootAndPath.path().getParent();\n+                try {\n+                    if (!setOfDirs.contains(parentDir)) {\n+                        setOfDirs.add(parentDir);\n+                        PosixFileAttributes attributes = Files.readAttributes(rootAndPath.path(), PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS);\n+                        var entry = new JarEntry(rootAndPath.relativize() + \"\/\");\n+                        entry.setTime(attributes.lastModifiedTime().toMillis());\n+                        jarStream.putNextEntry(entry);\n+                        jarStream.closeEntry();\n+                    }\n+                    PosixFileAttributes attributes = Files.readAttributes(rootAndPath.path(), PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS);\n+                    var entry = new JarEntry(rootAndPath.relativize().toString());\n+                    entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n+                    jarStream.putNextEntry(entry);\n+                    if (attributes.isRegularFile()) {\n+                        Files.newInputStream(rootAndPath.path()).transferTo(jarStream);\n+                    }\n+                    jarStream.closeEntry();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+            jarStream.finish();\n+            jarStream.close();\n+            return jarBuilder;\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -423,2 +795,1 @@\n-    public static class CMakeConfig {\n-        public List<String> opts = new ArrayList<>(List.of(\"cmake\"));\n+    public static class CMakeBuilder extends Builder<CMakeBuilder> {\n@@ -426,3 +797,3 @@\n-        public Path cmakeBldDebugDir;\n-        public Path cwd;\n-        private String targetPackage;\n+        public Path buildDir;\n+        public Path sourceDir;\n+        \/\/ public Path cwd;\n@@ -431,1 +802,3 @@\n-        public CMakeConfig seed(CMakeConfig stem) {\n+        public CMakeBuilder() {\n+            opts.add(\"cmake\");\n+        }\n@@ -433,0 +806,2 @@\n+        public CMakeBuilder basedOn(CMakeBuilder stem) {\n+            \/\/ super.basedOn(stem); you will get two cmakes ;)\n@@ -437,3 +812,0 @@\n-                if (stem.opts != null) {\n-                    this.opts = new ArrayList<>(stem.opts);\n-                }\n@@ -443,2 +815,5 @@\n-                if (stem.cwd != null) {\n-                    this.cwd = stem.cwd;\n+                \/\/  if (stem.cwd != null) {\n+                \/\/    this.cwd = stem.cwd;\n+                \/\/ }\n+                if (stem.buildDir != null) {\n+                    this.buildDir = stem.buildDir;\n@@ -446,5 +821,2 @@\n-                if (stem.cmakeBldDebugDir != null) {\n-                    this.cmakeBldDebugDir = stem.cmakeBldDebugDir;\n-                }\n-                if (stem.targetPackage != null) {\n-                    this.targetPackage = targetPackage;\n+                if (stem.sourceDir != null) {\n+                    this.sourceDir = stem.sourceDir;\n@@ -456,3 +828,3 @@\n-        public CMakeConfig _B(Path cmakeBldDebugDir) {\n-            this.cmakeBldDebugDir = cmakeBldDebugDir;\n-            opts.addAll(List.of(\"-B\", cmakeBldDebugDir.getFileName().toString()));\n+        public CMakeBuilder B(Path buildDir) {\n+            this.buildDir = buildDir;\n+            opts(\"-B\", buildDir.toString());\n@@ -462,3 +834,3 @@\n-        public CMakeConfig __build(Path cmakeBldDebugDir) {\n-            this.cmakeBldDebugDir = cmakeBldDebugDir;\n-            opts.addAll(List.of(\"--build\", cmakeBldDebugDir.getFileName().toString()));\n+        public CMakeBuilder S(Path sourceDir) {\n+            this.sourceDir = sourceDir;\n+            opts(\"-S\", sourceDir.toString());\n@@ -468,2 +840,3 @@\n-        public CMakeConfig cwd(Path cwd) {\n-            this.cwd = cwd;\n+        public CMakeBuilder build(Path buildDir) {\n+            this.buildDir = buildDir;\n+            opts(\"--build\", buildDir.toString());\n@@ -473,4 +846,4 @@\n-        public CMakeConfig opts(String... opts) {\n-            this.opts.addAll(Arrays.asList(opts));\n-            return this;\n-        }\n+        \/\/  public CMakeBuilder cwd(Path cwd) {\n+        \/\/     this.cwd = cwd;\n+        \/\/    return this;\n+        \/\/ }\n@@ -478,1 +851,0 @@\n-    }\n@@ -480,4 +852,0 @@\n-    public static CMakeConfig cmakeconfig(Consumer<CMakeConfig> cMakeConfigConsumer) {\n-        CMakeConfig cmakeConfig = new CMakeConfig();\n-        cMakeConfigConsumer.accept(cmakeConfig);\n-        return cmakeConfig;\n@@ -486,2 +854,4 @@\n-    public static void cmake(Consumer<CMakeConfig> cMakeConfigConsumer) {\n-        CMakeConfig cmakeConfig = cmakeconfig(cMakeConfigConsumer);\n+    public static void cmake(Consumer<CMakeBuilder> cmakeBuilderConsumer) {\n+\n+        CMakeBuilder cmakeBuilder = new CMakeBuilder();\n+        cmakeBuilderConsumer.accept(cmakeBuilder);\n@@ -489,1 +859,1 @@\n-            Files.createDirectories(cmakeConfig.cmakeBldDebugDir);\n+            Files.createDirectories(cmakeBuilder.buildDir);\n@@ -492,1 +862,1 @@\n-                    .directory(cmakeConfig.cwd.toFile())\n+                    \/\/ .directory(cmakeBuilder.cwd.toFile())\n@@ -494,1 +864,1 @@\n-                    .command(cmakeConfig.opts)\n+                    .command(cmakeBuilder.opts)\n@@ -504,2 +874,1 @@\n-    public static class JExtractConfig {\n-        public List<String> opts = new ArrayList<>(List.of(\"jextract\"));\n+    public static class JExtractBuilder extends Builder<JExtractBuilder> {\n@@ -515,1 +884,6 @@\n-        public JExtractConfig seed(JExtractConfig stem) {\n+        public JExtractBuilder() {\n+            opts.add(\"jextract\");\n+        }\n+\n+        public JExtractBuilder basedOn(JExtractBuilder stem) {\n+            super.basedOn(stem);\n@@ -520,3 +894,0 @@\n-                if (stem.opts != null) {\n-                    this.opts = new ArrayList<>(stem.opts);\n-                }\n@@ -543,1 +914,1 @@\n-        public JExtractConfig cwd(Path cwd) {\n+        public JExtractBuilder cwd(Path cwd) {\n@@ -548,1 +919,1 @@\n-        public JExtractConfig home(Path home) {\n+        public JExtractBuilder home(Path home) {\n@@ -550,2 +921,1 @@\n-            opts.remove(0);\n-            opts.add(0, path(home, \"bin\/jextract\").toString());\n+            opts.set(0, home.resolve(\"bin\/jextract\").toString());\n@@ -555,1 +925,1 @@\n-        public JExtractConfig opts(String... opts) {\n+        public JExtractBuilder opts(String... opts) {\n@@ -560,1 +930,1 @@\n-        public JExtractConfig target_package(String targetPackage) {\n+        public JExtractBuilder target_package(String targetPackage) {\n@@ -562,4 +932,1 @@\n-            this.opts.addAll(List.of(\n-                    \"--target-package\",\n-                    targetPackage\n-            ));\n+            opts(\"--target-package\", targetPackage);\n@@ -569,1 +936,1 @@\n-        public JExtractConfig output(Path output) {\n+        public JExtractBuilder output(Path output) {\n@@ -571,4 +938,1 @@\n-            this.opts.addAll(List.of(\n-                    \"--output\",\n-                    output.toString()\n-            ));\n+            opts(\"--output\", output.toString());\n@@ -578,1 +942,1 @@\n-        public JExtractConfig library(Path... libraries) {\n+        public JExtractBuilder library(Path... libraries) {\n@@ -581,1 +945,1 @@\n-                this.opts.addAll(List.of(\"--library\", \":\" + library));\n+                opts(\"--library\", \":\" + library);\n@@ -586,5 +950,1 @@\n-        public JExtractConfig l(Path... libraries) {\n-            return library(libraries);\n-        }\n-\n-        public JExtractConfig compile_flag(String... compileFlags) {\n+        public JExtractBuilder compile_flag(String... compileFlags) {\n@@ -595,1 +955,1 @@\n-        public JExtractConfig header(Path header) {\n+        public JExtractBuilder header(Path header) {\n@@ -602,4 +962,29 @@\n-    public static JExtractConfig jextractconfig(Consumer<JExtractConfig> jextractConfigConsumer) {\n-        JExtractConfig extractConfig = new JExtractConfig();\n-        jextractConfigConsumer.accept(extractConfig);\n-        return extractConfig;\n+\n+    static Path unzip(Path in, Path dir) {\n+        try {\n+            Files.createDirectories(dir);\n+            ZipFile zip = new ZipFile(in.toFile());\n+            zip.entries().asIterator().forEachRemaining(entry -> {\n+                try {\n+                    String currentEntry = entry.getName();\n+\n+                    Path destFile = dir.resolve(currentEntry);\n+                    \/\/destFile = new File(newPath, destFile.getName());\n+                    Path destinationParent = destFile.getParent();\n+                    Files.createDirectories(destinationParent);\n+                    \/\/ create the parent directory structure if needed\n+\n+\n+                    if (!entry.isDirectory()) {\n+                        zip.getInputStream(entry).transferTo(Files.newOutputStream(destFile));\n+                    }\n+                } catch (IOException ioe) {\n+                    throw new RuntimeException(ioe);\n+                }\n+            });\n+            zip.close();\n+\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return dir;\n@@ -608,2 +993,3 @@\n-    public static void jextract(Consumer<JExtractConfig> jextractConfigConsumer) {\n-        JExtractConfig extractConfig = jextractconfig(jextractConfigConsumer);\n+    public static void jextract(Consumer<JExtractBuilder> jextractBuilderConsumer) {\n+        JExtractBuilder extractConfig = new JExtractBuilder();\n+        jextractBuilderConsumer.accept(extractConfig);\n@@ -611,1 +997,1 @@\n-        var compilerFlags = path(extractConfig.cwd, \"compiler_flags.txt\");\n+        var compilerFlags = extractConfig.cwd.resolve(\"compiler_flags.txt\");\n@@ -632,4 +1018,0 @@\n-    public static boolean existingDir(Path dir) {\n-        return Files.exists(dir);\n-    }\n-\n@@ -644,1 +1026,0 @@\n-\n@@ -659,0 +1040,6 @@\n+\n+        public boolean hasSuffix(String... suffixes) {\n+            var suffixSet = Set.of(suffixes);\n+            int dotIndex = path().toString().lastIndexOf('.');\n+            return dotIndex == -1 || suffixSet.contains(path().toString().substring(dotIndex + 1));\n+        }\n@@ -667,1 +1054,2 @@\n-    record GroupArtifactVersion(String group, String artifact, String version) {\n+    public enum Scope {\n+        TEST, COMPILE, PROVIDED, RUNTIME, SYSTEM;\n@@ -669,0 +1057,10 @@\n+        static Scope of(String name) {\n+            return switch (name.toLowerCase()) {\n+                case \"test\" -> TEST;\n+                case \"compile\" -> COMPILE;\n+                case \"provided\" -> PROVIDED;\n+                case \"runtime\" -> RUNTIME;\n+                case \"system\" -> SYSTEM;\n+                default -> COMPILE;\n+            };\n+        }\n@@ -671,2 +1069,19 @@\n-    interface RepoNode {\n-        XMLNode xmlNode();\n+    public record Version(int maj, int min, int point, String modifier) {\n+        public String spec() {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            if (maj >= 0) {\n+                stringBuilder.append(maj);\n+                if (min >= 0) {\n+                    stringBuilder.append(\".\").append(min);\n+                    if (point >= 0) {\n+                        stringBuilder.append(\".\").append(point);\n+                        if (modifier != null && !modifier.isEmpty()) {\n+                            stringBuilder.append(\"-\").append(modifier);\n+                        }\n+                    }\n+                }\n+            } else {\n+                stringBuilder.append(1);\n+            }\n+            return stringBuilder.toString();\n+        }\n@@ -674,11 +1089,29 @@\n-        default GroupArtifactVersion groupArtifactVersion() {\n-            try {\n-                var groupIdXPath = xmlNode().xpath(\"groupId\/text()\");\n-                var group = xmlNode().string(groupIdXPath);\n-                var artifactIdXPath = xmlNode().xpath(\"artifactId\/text()\");\n-                var artifact = xmlNode().string(artifactIdXPath);\n-                var versionXPath = xmlNode().xpath(\"version\/text()\");\n-                var version = xmlNode().string(versionXPath);\n-                return new GroupArtifactVersion(group, artifact, version);\n-            } catch (XPathExpressionException xPathExpressionException) {\n-                throw new RuntimeException(xPathExpressionException);\n+        record Spec(int maj, int min, int point, String modifier) {\n+        }\n+\n+        static Pattern IntPrefixPattern = Pattern.compile(\"^\\\\.?([0-9]+)(.*)$\");\n+\n+        static Spec parse(String spec) {\n+\n+            if (spec.isEmpty()) {\n+                return new Spec(-1, -1, -1, null);\n+            } else {\n+                var majMatch = IntPrefixPattern.matcher(spec);\n+                if (majMatch.matches()) {\n+                    int maj = Integer.parseInt(majMatch.group(1));\n+                    var minMatch = IntPrefixPattern.matcher(majMatch.group(2));\n+                    if (minMatch.matches()) {\n+                        int min = Integer.parseInt(minMatch.group(1));\n+                        var pointMatch = IntPrefixPattern.matcher(minMatch.group(2));\n+                        if (pointMatch.matches()) {\n+                            int point = Integer.parseInt(pointMatch.group(1));\n+                            return new Spec(maj, min, point, pointMatch.group(2));\n+                        } else {\n+                            return new Spec(maj, min, -1, null);\n+                        }\n+                    } else {\n+                        return new Spec(maj, -1, -1, null);\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid spec: \" + spec);\n+                }\n@@ -686,0 +1119,3 @@\n+\n+            \/\/var matcher = Pattern.compile(\"^([0-9]*)\\\\.([0-9]*)\\\\.([0-9]*)(.*)$\").matcher(spec);\n+            \/\/ return new Spec(1,-1,-1,\"\");\n@@ -688,3 +1124,2 @@\n-        default String location() {\n-            GroupArtifactVersion groupArtifactVersion = groupArtifactVersion();\n-            return \"https:\/\/repo1.maven.org\/maven2\/\" + groupArtifactVersion.group().replace('.', '\/') + \"\/\" + groupArtifactVersion().artifact() + \"\/\" + groupArtifactVersion.version();\n+        Version() {\n+            this(-1, -1, -1, null);\n@@ -693,3 +1128,2 @@\n-        default String name(String suffix) {\n-            GroupArtifactVersion groupArtifactVersion = groupArtifactVersion();\n-            return groupArtifactVersion.artifact() + \"-\" + groupArtifactVersion.version + \".\" + suffix;\n+        Version(int maj) {\n+            this(maj, -1, -1, null);\n@@ -698,8 +1132,2 @@\n-        default URL url(String suffix) {\n-            try {\n-                return new URI(location() + \"\/\" + name(suffix)).toURL();\n-            } catch (MalformedURLException e) {\n-                throw new RuntimeException(e);\n-            } catch (URISyntaxException e) {\n-                throw new RuntimeException(e);\n-            }\n+        Version(int maj, int min) {\n+            this(maj, min, -1, null);\n@@ -708,8 +1136,11 @@\n-        default void downloadTo(Path thirdPartyDir, String suffix) {\n-            var thirdPartyFile = thirdPartyDir.resolve(name(suffix));\n-            try {\n-                println(\"Downloading \" + name(suffix) + \"->\" + thirdPartyDir);\n-                url(suffix).openStream().transferTo(Files.newOutputStream(thirdPartyFile));\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n+        Version(int maj, int min, int point) {\n+            this(maj, min, point, null);\n+        }\n+\n+\n+        Version(String spec) {\n+            this(parse(spec));\n+        }\n+\n+        Version(Spec spec) {\n+            this(spec.maj, spec.min, spec.point, spec.modifier);\n@@ -719,2 +1150,50 @@\n-    record Dependency(XMLNode xmlNode) implements RepoNode {\n-        public URL pomURL() {\n+    public record Artifact(Path dir, String groupId, String artifactId, Version version, Scope scope,\n+                           boolean optional) {\n+        static final String MAVEN_REPO = \"https:\/\/repo.maven.apache.org\/maven2\/\";\n+\n+        static String groupId(XMLNode xmlNode) {\n+            return xmlNode.xpathQueryString(\"groupId\/text()\");\n+        }\n+\n+        static String artifactId(XMLNode xmlNode) {\n+            return xmlNode.xpathQueryString(\"artifactId\/text()\");\n+        }\n+\n+        static String versionId(XMLNode xmlNode) {\n+            return xmlNode.xpathQueryString(\"versionId\/text()\");\n+        }\n+\n+        Artifact(Path dir, XMLNode xmlNode) {\n+            this(dir,\n+                    groupId(xmlNode), artifactId(xmlNode),\n+                    new Version(versionId(xmlNode)),\n+                    Scope.of(xmlNode.xpathQueryString(\"scope\/text()\")),\n+                    Boolean.parseBoolean(xmlNode.xpathQueryString(\"optional\/text()\"))\n+            );\n+        }\n+\n+        public Artifact(Path dir, String group, String artifact, Version version) {\n+            this(dir, group, artifact, version, Scope.COMPILE, false);\n+        }\n+\n+        public String artifactAndVersion() {\n+            return artifactId() + '-' + version().spec();\n+        }\n+\n+        public String pathName() {\n+            return groupId() + '.' + artifactAndVersion();\n+        }\n+\n+        private String location() {\n+            return MAVEN_REPO + groupId().replace('.', '\/') + \"\/\" + artifactId() + \"\/\" + version().spec();\n+        }\n+\n+        private String name(String suffix) {\n+            return artifactAndVersion() + \".\" + suffix;\n+        }\n+\n+        public Path pomPath() {\n+            return dir.resolve(name(\"pom\"));\n+        }\n+\n+        public URL url(String suffix) {\n@@ -722,3 +1201,1 @@\n-                GroupArtifactVersion groupArtifactVersion = groupArtifactVersion();\n-                return new URI(\"https:\/\/repo1.maven.org\/maven2\/\" + groupArtifactVersion.group().replace('.', '\/') + \"\/\" + groupArtifactVersion.artifact() + \"\/\" + groupArtifactVersion.version() + \"\/\"\n-                        + groupArtifactVersion.artifact() + \"-\" + groupArtifactVersion.version() + \".pom\").toURL();\n+                return new URI(location() + \"\/\" + name(suffix)).toURL();\n@@ -731,1 +1208,0 @@\n-    }\n@@ -733,14 +1209,6 @@\n-    record RepoPom(XMLNode xmlNode) implements RepoNode {\n-        List<Dependency> dependencies() {\n-            List<Dependency> dependencies = new ArrayList<>();\n-            try {\n-                var dependenciesXPath = xmlNode().xpath(\"\/project\/dependencies\/dependency\");\n-                var nodeList = xmlNode().nodeList(dependenciesXPath);\n-                for (int i = 0; i < nodeList.getLength(); i++) {\n-                    var node = nodeList.item(i);\n-                    dependencies.add(new Dependency(new XMLNode((Element) node)));\n-                }\n-                return dependencies;\n-            } catch (XPathExpressionException xPathExpressionException) {\n-                throw new RuntimeException(xPathExpressionException);\n-            }\n+        public URL pomURL() {\n+            return url(\"pom\");\n+        }\n+\n+        public URL jarURL() {\n+            return url(\"jar\");\n@@ -748,1 +1216,0 @@\n-    }\n@@ -750,2 +1217,0 @@\n-    public static class Repo {\n-        Path dir;\n@@ -753,2 +1218,2 @@\n-        Repo(Path dir) {\n-            this.dir = dir;\n+        public Path jarPath() {\n+            return dir.resolve(name(\"jar\"));\n@@ -757,1 +1222,23 @@\n-        Map<GroupArtifactVersion, Path> map = new HashMap<>();\n+        public Artifact download() {\n+            if (isRegularFile(pomPath())) {\n+                println(\"We already have \" + pomPath());\n+            } else {\n+                println(\"Downloading \" + pomPath() + \" and \" + jarPath());\n+                try {\n+                    pomURL().openStream().transferTo(Files.newOutputStream(pomPath()));\n+                    jarURL().openStream().transferTo(Files.newOutputStream(jarPath()));\n+                    dependencies();\n+                } catch (IOException e) {\n+                    if (version.maj() == -1) {\n+                        Artifact artifact = new Artifact(this.dir, this.groupId, this.artifactId, new Version(1));\n+                        artifact.download();\n+                    } else if (version.min() == -1) {\n+                        Artifact artifact = new Artifact(this.dir, this.groupId, this.artifactId, new Version(version.maj, 0));\n+                        artifact.download();\n+                    } else {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            }\n+            return this;\n+        }\n@@ -759,1 +1246,1 @@\n-        RepoPom get(String groupId, String artifactId, String version) {\n+        public XMLNode pomXML() {\n@@ -761,6 +1248,3 @@\n-                var pom = new RepoPom(new XMLNode(new URI(\"https:\/\/repo1.maven.org\/maven2\/\" + groupId.replace('.', '\/') + \"\/\"\n-                        + artifactId + \"\/\" + version + \"\/\"\n-                        + artifactId + \"-\" + version + \".pom\").toURL()));\n-                return pom;\n-            } catch (Throwable exception) {\n-                throw new RuntimeException(exception);\n+                return new XMLNode(dir.resolve(name(\"pom\")));\n+            } catch (Throwable e) {\n+                throw new RuntimeException(e);\n@@ -768,0 +1252,1 @@\n+        }\n@@ -769,0 +1254,20 @@\n+        public List<Artifact> dependencies() {\n+            List<Artifact> artifacts = new ArrayList<>();\n+            var xmlNode = pomXML();\n+            var nodeList = xmlNode.nodeList(xmlNode.xpath(\"\/project\/dependencies\/dependency\"));\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                var node = nodeList.item(i);\n+                var dependency = new Artifact(dir, new XMLNode((Element) node));\n+                \/\/ if (!Files.exists(dependency.pomPath())){\n+                dependency.download();\n+                \/\/\/ }\n+                if (dependency.optional()) {\n+                    println(dependency + \" is optional\");\n+                } else if (dependency.scope.equals(Scope.COMPILE)) {\n+                    artifacts.add(dependency);\n+                    artifacts.addAll(dependency.dependencies());\n+                } else {\n+                    println(\"skipping \" + dependency);\n+                }\n+            }\n+            return artifacts;\n@@ -783,5 +1288,5 @@\n-    public static Path curlIfNeeded(URL url, Path file) {\n-        if (!Files.isRegularFile(file)) {\n-            curl(url, file);\n-        }\n-        return file;\n+    public static Optional<Path> which(String execName) {\n+        \/\/ which and whereis had issues.\n+        return Arrays.asList(System.getenv(\"PATH\").split(File.pathSeparator)).stream()\n+                .map(dirName -> Path.of(dirName).resolve(execName).normalize())\n+                .filter(Files::isExecutable).findFirst();\n@@ -790,5 +1295,3 @@\n-    public static Path untarIfNeeded(Path tarFile, Path expectedDir) {\n-        if (!existingDir(expectedDir)) {\n-            untar(tarFile, tarFile.getParent());\n-        }\n-        return expectedDir;\n+    public static boolean canExecute(String execName) {\n+        \/\/ which and whereis had issues.\n+        return which(execName).isPresent();\n@@ -797,2 +1300,1 @@\n-    public static boolean available(String execName) {\n-        \/\/ We could just look up the env.PATH?  or we could just try to execute assuming it will need some args ;)\n+    public static Path untar(Path tarFile, Path dir) {\n@@ -800,2 +1302,2 @@\n-            new ProcessBuilder().command(execName).start().waitFor();\n-            return true;\n+            new ProcessBuilder().inheritIO().command(\"tar\", \"xvf\", tarFile.toString(), \"--directory\", tarFile.getParent().toString()).start().waitFor();\n+            return dir;\n@@ -804,1 +1306,1 @@\n-            return true;\n+            return null;\n@@ -807,1 +1309,1 @@\n-            return false;\n+            return null;\n@@ -811,5 +1313,62 @@\n-    public static boolean untar(Path tarFile, Path dir) {\n-        \/\/ We could just look up the env.PATH?  or we could just try to execute assuming it will need some args ;)\n-        try {\n-            \/\/ tar xvf thirdparty\/jextract.tar --directory thirdparty\n-            new ProcessBuilder().inheritIO().command(\"tar\", \"xvf\", tarFile.toString(), \"--directory\", dir.toString()).start().waitFor();\n+\n+    public static Matcher pathMatcher(Path path, Pattern pattern) {\n+        return pattern.matcher(path.toString());\n+    }\n+\n+    public static boolean matches(Path path, Pattern pattern) {\n+        return pathMatcher(path, pattern).matches();\n+    }\n+\n+    public static boolean matches(Path path, String pattern) {\n+        return pathMatcher(path, Pattern.compile(pattern)).matches();\n+    }\n+\n+    public static boolean failsAndMatches(Path path, String failMe, String passMe) {\n+        return !matches(path, failMe) && matches(path, Pattern.compile(passMe));\n+    }\n+\n+    public static Artifact artifact(Path path, String group, String artifact, Version version) {\n+        return new Artifact(path, group, artifact, version);\n+    }\n+\n+\n+    public record Project(Path targetDir, Path path,\n+                          String variant) implements TargetDirProvider, JavaSourceDirProvider, ResourceDirProvider {\n+\n+\n+        public Path javaSourceDir() {\n+            return path().resolve(\"src\/main\/java\");\n+        }\n+\n+        public Path resourcesDir() {\n+            return path().resolve(\"src\/main\/resources\");\n+        }\n+\n+        public String prefixNameVariantSuffix(String prefix, String suffix) {\n+            return (prefix.isEmpty() ? \"\" : prefix + \"-\") + path().getFileName() + \"-\" + variant() + suffix;\n+        }\n+\n+        public Path target(String prefix, String suffix) {\n+            return targetDir.resolve(prefixNameVariantSuffix(prefix, suffix));\n+        }\n+\n+        public JarBuilder build(String prefix, JavacBuilder javacBuilder) {\n+            println(\"Building  \" + path().getFileName() + \"-\" + variant());\n+            return jar($ -> $\n+                    .jar(target(prefix, \".jar\"))\n+                    .when(isDirectory(resourcesDir()), $$ -> $$.path_list(resourcesDir()))\n+                    .javac($$ -> $$.basedOn(javacBuilder)\n+                            .classes_dir(target(prefix, \".jar.classes\"))\n+                            .source_path(javaSourceDir())\n+                    )\n+            );\n+        }\n+\n+        public JarBuilder build(JavacBuilder javacBuilder) {\n+            return build(\"\", javacBuilder);\n+        }\n+    }\n+\n+    public static boolean withOptionalDirectory(Path dir, Consumer<Path> pathConsumer) {\n+        if (isDirectory(dir)) {\n+            pathConsumer.accept(dir);\n@@ -817,5 +1376,1 @@\n-        } catch (\n-                InterruptedException e) { \/\/ We get IOException if the executable not found, at least on Mac so interuppted means it exists\n-            return false;\n-        } catch (IOException e) { \/\/ We get IOException if the executable not found, at least on Mac\n-            \/\/throw new RuntimeException(e);\n+        } else {\n@@ -826,0 +1381,106 @@\n+    public static void withExpectedDirectory(Path dir, Consumer<Path> pathConsumer) {\n+        if (isDirectory(dir)) {\n+            pathConsumer.accept(dir);\n+        } else {\n+            throw new IllegalStateException(\"Failed to find directory \" + dir);\n+        }\n+    }\n+\n+    public static void withExpectedDirectory(Path parent, String subDirName, Consumer<Path> pathConsumer) {\n+        withExpectedDirectory(parent.resolve(subDirName), pathConsumer);\n+    }\n+\n+    public static boolean withOptionalDirectory(Path parent, String subDirName, Consumer<Path> pathConsumer) {\n+        return withOptionalDirectory(parent.resolve(subDirName), pathConsumer);\n+    }\n+\n+    public record Root(Path path) {\n+        public Path buildDir() {\n+            return mkdir(path.resolve(\"build\"));\n+        }\n+\n+        public Path thirdPartyDir() {\n+            return mkdir(path.resolve(\"thirdparty\"));\n+        }\n+\n+        public Path repoDir() {\n+            return mkdir(path.resolve(\"repoDir\"));\n+        }\n+\n+        public Root() {\n+            this(Path.of(System.getProperty(\"user.dir\")));\n+        }\n+\n+        public Repo repo() {\n+            return new Repo(repoDir());\n+        }\n+\n+\n+        public Path requireJExtract() {\n+            var optional = executablesInPath(\"jextract\").findFirst();\n+            if (optional.isPresent()) {\n+                println(\"Found jextract in PATH\");\n+                return optional.get().getParent().getParent(); \/\/ we want the 'HOME' dir\n+            }\n+            println(\"No jextract in PATH\");\n+            URL downloadURL = null;\n+            var extractVersionMaj = \"22\";\n+            var extractVersionMin = \"5\";\n+            var extractVersionPoint = \"33\";\n+            try {\n+                downloadURL = new URI(\"https:\/\/download.java.net\/java\/early_access\"\n+                        + \"\/jextract\/\" + extractVersionMaj + \"\/\" + extractVersionMin\n+                        + \"\/openjdk-\" + extractVersionMaj + \"-jextract+\" + extractVersionMin + \"-\" + extractVersionPoint + \"_\"\n+                        + os.nameArchTuple() + \"_bin.tar.gz\").toURL();\n+            } catch (MalformedURLException e) {\n+                throw new RuntimeException(e);\n+            } catch (URISyntaxException e) {\n+                throw new RuntimeException(e);\n+            }\n+            URL finalDownloadURL = downloadURL;\n+\n+            println(\"... attempting download from\" + downloadURL);\n+            var jextractTar = thirdPartyDir().resolve(\"jextract.tar\");\n+\n+            if (!isRegularFile(jextractTar)) { \/\/ Have we downloaded already?\n+                jextractTar = curl(finalDownloadURL, jextractTar); \/\/ if not\n+            }\n+\n+            var jextractHome = thirdPartyDir().resolve(\"jextract-22\");\n+            if (!isDirectory(jextractHome)) {\n+                untar(jextractTar, jextractHome);\n+            }\n+            return jextractHome;\n+\n+        }\n+    }\n+\n+    public static Stream<Path> executablesInPath(String name) {\n+        return Arrays.asList(System.getenv(\"PATH\").split(File.pathSeparator)).stream()\n+                .map(dirName -> Path.of(dirName).resolve(name).normalize())\n+                .filter(Files::isExecutable);\n+\n+    }\n+\n+    public static void sanity(Root hatDir) {\n+        var rleParserDir = hatDir.path().resolve(\"examples\/life\/src\/main\/java\/io\");\n+        subDirStream(hatDir.path(), \"hat\", \"examples\", \"backends\", \"docs\").forEach(dir ->\n+                findTextFiles(dir, \"java\", \"cpp\", \"h\", \"hpp\", \"md\")\n+                        .forEach(textFile -> {\n+                            if (!textFile.hasSuffix(\"md\")\n+                                    && !textFile.path().startsWith(rleParserDir)\n+                                    && !textFile.grep(Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\"))) {\n+                                System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n+                            }\n+                            textFile.lines().forEach(line -> {\n+                                if (line.grep(Pattern.compile(\"^.*\\\\t.*\"))) {\n+                                    System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                                }\n+                                if (line.grep(Pattern.compile(\"^.* $\"))) {\n+                                    System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                                }\n+                            });\n+                        })\n+        );\n+    }\n+\n@@ -828,3 +1489,5 @@\n-        var hatDir = path(\"\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\");\n-        var thirdPartyDir = path(hatDir, \"thirdparty\");\/\/ maybe clean?\n-        var repo = new Repo(thirdPartyDir);\n+        var hatDir = new Root(Path.of(\"\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\"));\n+        \/\/ println(which(\"java\")+\"?\");\n+        \/\/  System.exit(1);\n+\n+        \/\/repo.versions(\"org.testng\", \"testng\").forEach(s->println(s));\n@@ -832,5 +1495,1 @@\n-        var jextractDir = untarIfNeeded(\n-                curlIfNeeded(\n-                        new URI(\"https:\/\/download.java.net\/java\/early_access\/jextract\/22\/5\/openjdk-22-jextract+5-33_macos-aarch64_bin.tar.gz\").toURL(),\n-                        path(thirdPartyDir, \"jextract.tar\")),\n-                path(thirdPartyDir, \"jextract-22\"));\n+        println(hatDir.repo().forEachVersion(\"org.testng\", \"testng\", version -> println(version)));\n@@ -838,0 +1497,5 @@\n+        println(hatDir.repo().forEachId(\"org.testng\", \"testng\", id -> println(id)));\n+        \/\/   var testng = artifact(thirdPartyDir,\"org.testng\", \"testng\", new Version(7,1,0));\n+        \/\/   testng.download().dependencies();\n+        \/\/ g.dependencies().stream().forEach(artifactId->println(artifactId.artifactAndVersion()));\n+        \/\/ println(g.pathName());\n@@ -839,5 +1503,4 @@\n-        GroupArtifactVersion g = new GroupArtifactVersion(\"org.testng\", \"testng\", \"7.1.0\");\n-        GroupArtifactVersion aparapi = new GroupArtifactVersion(\"com.aparapi\", \"aparapi\", \"3.0.2\");\n-        GroupArtifactVersion aparapi_jni = new GroupArtifactVersion(\"com.aparapi\", \"aparapi-jni\", \"1.4.3\");\n-        GroupArtifactVersion aparapi_examples = new GroupArtifactVersion(\"com.aparapi\", \"aparapi-examples\", \"3.0.0\");\n-        RepoPom testng = repo.get(\"org.testng\", \"testng\", \"7.1.0\");\n+        \/\/  Artifact aparapi = Artifact.of(\"com.aparapi\", \"aparapi\", \"3.0.2\").download(thirdPartyDir);\n+        \/\/  Artifact aparapi_jni = Artifact.of(\"com.aparapi\", \"aparapi-jni\", \"1.4.3\").download(thirdPartyDir);\n+        \/\/  Artifact aparapi_examples = Artifact.of(\"com.aparapi\", \"aparapi-examples\", \"3.0.0\").download(thirdPartyDir);\n+        \/\/  RepoPom testng = repo.get(\"org.testng\", \"testng\", \"7.1.0\");\n@@ -848,2 +1511,2 @@\n-        testng.downloadTo(repo.dir, \"jar\");\n-        \/\/ testng.dependencies().stream().forEach(dependency->println(dependency.group()));\n+        \/\/  testng.downloadTo(repo.dir, \"jar\");\n+        \/\/ testng.dependencies().stream().forEach(dependency->println(dependency.groupId()));\n@@ -854,21 +1517,0 @@\n-        var licensePattern = Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\");\n-        var eolws = Pattern.compile(\"^.* $\");\n-        var tab = Pattern.compile(\"^.*\\\\t.*\");\n-\n-        paths(hatDir, \"hat\", \"examples\", \"backends\").forEach(dir -> {\n-            paths(dir, path -> !Pattern.matches(\"^.*(-debug|rleparser).*$\", path.toString())\n-                    && Pattern.matches(\"^.*\\\\.(java|cpp|h|hpp)$\", path.toString())\n-            ).stream().map(path -> new TextFile(path)).forEach(textFile -> {\n-                if (!textFile.grep(licensePattern)) {\n-                    System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n-                }\n-                textFile.lines().forEach(line -> {\n-                    if (line.grep(tab)) {\n-                        System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                    if (line.grep(eolws)) {\n-                        System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                });\n-            });\n-        });\n@@ -876,1 +1518,1 @@\n-        var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n+        sanity(hatDir);\n@@ -878,6 +1520,7 @@\n-        var hatJavacOpts = javacjarconfig($ -> $.opts(\n-                \"--source\", \"24\",\n-                \"--enable-preview\",\n-                \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-                \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n-        ));\n+        withExpectedDirectory(hatDir.path(), \"hat\", hatProjectDir -> {\n+            var hatJavacOpts = new JavacBuilder().opts(\n+                    \"--source\", \"24\",\n+                    \"--enable-preview\",\n+                    \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+                    \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+            );\n@@ -885,0 +1528,1 @@\n+            var hatJarResult = new Project(hatDir.buildDir(), hatProjectDir, \"1.0\").build(hatJavacOpts);\n@@ -886,25 +1530,1 @@\n-        var hatJarResult = javacjar($ -> $\n-                .seed(hatJavacOpts)\n-                .jar(path(target, \"hat-1.0.jar\"))\n-                .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n-        );\n-        var hatExampleJavaConfig = javacjarconfig($ -> $.seed(hatJavacOpts).class_path(hatJarResult.jar));\n-        println(hatJarResult.jar);\n-        for (var exampleDir : paths(path(hatDir, \"examples\"), \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n-            javacjar($ -> $\n-                    .seed(hatExampleJavaConfig)\n-                    .jar(path(target, \"hat-example-\" + exampleDir.getFileName() + \"-1.0.jar\"))\n-                    .source_path(path(exampleDir, \"src\/main\/java\"))\n-                    .resource_path(path(exampleDir, \"src\/main\/resources\"))\n-            );\n-        }\n-        var backendsDir = path(hatDir, \"backends\");\n-        for (var backendDir : paths(backendsDir, \"opencl\", \"ptx\")) {\n-            javacjar($ -> $\n-                    .seed(hatExampleJavaConfig)\n-                    .jar(path(target, \"hat-backend-\" + backendDir.getFileName() + \"-1.0.jar\"))\n-                    .source_path(path(backendDir, \"src\/main\/java\"))\n-                    .resource_path(path(backendDir, \"src\/main\/resources\"))\n-            );\n-        }\n-        var hattricksDir = path(hatDir, \"hattricks\");\n+            var hatExampleJavacConfig = new JavacBuilder().basedOn(hatJavacOpts).class_path(hatJarResult.jar);\n@@ -912,9 +1532,5 @@\n-        if (Files.exists(hattricksDir)) {\n-            for (var hattrickDir : paths(hattricksDir, \"chess\", \"view\")) {\n-                javacjar($ -> $\n-                        .seed(hatExampleJavaConfig)\n-                        .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n-                        .source_path(path(hattrickDir, \"src\/main\/java\"))\n-                        .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n-                );\n-            }\n+            withExpectedDirectory(hatDir.path(), \"backends\", backendsDir -> {\n+                subDirStream(backendsDir, \"opencl\", \"ptx\")\n+                        .map(backendDir -> new Project(hatDir.buildDir(), backendDir, \"1.0\"))\n+                        .parallel()\n+                        .forEach(project -> project.build(\"hat-backend\", hatExampleJavacConfig));\n@@ -922,28 +1538,8 @@\n-            for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n-                var appFrameworks = \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\";\n-                var MAC_APP_FRAMEWORKS = Path.of(appFrameworks);\n-                var MAC_LIB_FRAMEWORKS = Path.of(\"\/System\/Library\/Frameworks\");\n-                var jextractedJava = path(target, \"jextracted-java\");\n-                mkdir(jextractedJava);\n-                var jextractedOpenCL = path(jextractedJava, \"opencl\");\n-                var jextractedOpenGL = path(jextractedJava, \"opengl\");\n-                var jextractconfig = jextractconfig($ -> $\n-                        .home(jextractDir)\n-                        .cwd(hattrickDir)\n-                        .output(jextractedJava)\n-                        .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n-                );\n-                if (!existingDir(jextractedOpenCL)) {\n-                    jextract($ -> $\n-                            .seed(jextractconfig)\n-                            .target_package(\"opencl\")\n-                            .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n-                            .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n-                    );\n-                }\n-                if (!existingDir(jextractedOpenGL)) {\n-                    jextract($ -> $\n-                            .seed(jextractconfig)\n-                            .target_package(\"opengl\")\n-                            .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n-                            .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n+                var cmakeBuildDir = hatDir.buildDir().resolve(\"cmake-build-debug\");\n+\n+                if (!isDirectory(cmakeBuildDir)) { \/\/ We need to rerun build -B defaultCMakeBuilder.buildDir\n+                    mkdir(cmakeBuildDir);\n+                    cmake($ -> $\n+                            .S(backendsDir)\n+                            .B(cmakeBuildDir)\n+                            .opts(\"-DHAT_TARGET=\" + hatDir.buildDir())\n@@ -953,5 +1549,3 @@\n-                javacjar($ -> $\n-                        .seed(hatExampleJavaConfig)\n-                        .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n-                        .source_path(path(hattrickDir, \"src\/main\/java\"), jextractedOpenCL, jextractedOpenGL)\n-                        .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n+                cmake($ -> $\n+                        \/\/ .S(backendsDir)\n+                        .build(cmakeBuildDir)\n@@ -959,2 +1553,1 @@\n-            }\n-        }\n+            });\n@@ -962,6 +1555,6 @@\n-        var cmakeBldDebugDir = backendsDir.resolve(\"bld-debug\");\n-        if (!existingDir(cmakeBldDebugDir)) {\n-            mkdir(cmakeBldDebugDir);\n-            cmake($ -> $.cwd(backendsDir)._B(cmakeBldDebugDir).opts(\"-DHAT_TARGET=\" + target));\n-        }\n-        cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));\n+            withExpectedDirectory(hatDir.path, \"examples\", examplesDir ->\n+                    subDirStream(examplesDir, \"blackscholes\", \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")\n+                            .map(exampleDir -> new Project(hatDir.buildDir(), exampleDir, \"1.0\"))\n+                            .parallel()\n+                            .forEach(project -> project.build(\"hat-example\", hatExampleJavacConfig))\n+            );\n@@ -969,0 +1562,53 @@\n+            withOptionalDirectory(hatDir.path, \"hattricks\", hattricksDir -> {\n+                subDirStream(hattricksDir, \"chess\", \"view\")\n+                        .map(hattrickDir -> new Project(hatDir.buildDir(), hattrickDir, \"1.0\"))\n+                        .parallel()\n+                        .forEach(project -> project.build(\"hat-example\", hatExampleJavacConfig));\n+\n+\n+                withOptionalDirectory(hattricksDir, \"nbody\", nbody -> {\n+                    var jextractedJava = mkdir(hatDir.buildDir().resolve(\"jextracted-java\"));\n+                    var extractedOpenCLCode = jextractedJava.resolve(\"opencl\");\n+                    if (!isDirectory(extractedOpenCLCode)) {\n+                        mkdir(extractedOpenCLCode);\n+                        jextract($$ -> $$\n+                                .home(hatDir.requireJExtract())\n+                                .cwd(nbody)\n+                                .output(jextractedJava)\n+                                .target_package(\"opencl\")\n+                                .when(os.isMac(), $$$ -> $$$\n+                                        .compile_flag(\"-F\" + os.macAppLibFrameworks())\n+                                        .library(os.macFramework(\"OpenCL.framework\/OpenCL\"))\n+                                        .header(os.macFrameworkHeaderFile(\"OpenCL.framework\/Headers\/opencl.h\"))\n+                                )\n+                        );\n+                    }\n+                    var extractedOpenGLCode = jextractedJava.resolve(\"opengl\");\n+                    if (!isDirectory(extractedOpenGLCode)) {\n+                        mkdir(extractedOpenGLCode);\n+                        jextract($$ -> $$\n+                                .home(hatDir.requireJExtract())\n+                                .cwd(nbody)\n+                                .output(jextractedJava)\n+                                .target_package(\"opengl\")\n+                                .when(os.isMac(), $$$ -> $$$\n+                                        .compile_flag(\"-F\" + os.macAppLibFrameworks())\n+                                        .library(\n+                                                os.macFramework(\"GLUT.framework\/GLUT\"),\n+                                                os.macFramework(\"OpenGL.framework\/OpenGL\")\n+                                        )\n+                                        .header(os.macFrameworkHeaderFile(\"GLUT.framework\/Headers\/glut.h\"))\n+                                )\n+                        );\n+                    }\n+\n+                    jar($ -> $\n+                            .jar(hatDir.buildDir().resolve(\"hat-example-nbody-1.0.jar\"))\n+                            .path_list(nbody.resolve(\"src\/main\/resources\"))\n+                            .javac($$ -> $$.basedOn(hatExampleJavacConfig)\n+                                    .source_path(nbody.resolve(\"src\/main\/java\"), extractedOpenCLCode, extractedOpenGLCode)\n+                            )\n+                    );\n+                });\n+            });\n+        });\n","filename":"hat\/bldr\/src\/main\/java\/bldr\/Bldr.java","additions":1134,"deletions":488,"binary":false,"changes":1622,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        <hat.target>${hat.dir}\/maven-build<\/hat.target>\n+        <hat.target>${hat.dir}\/build<\/hat.target>\n@@ -95,1 +95,1 @@\n-Now we should be able to use maven to build, if successful maven will place all jars and libs in a newly created `maven-build` dir in your top level hat dir.\n+Now we should be able to use maven to build, if successful maven will place all jars and libs in a newly created `build` dir in your top level hat dir.\n@@ -101,1 +101,1 @@\n-ls maven-build\n+ls build\n@@ -119,1 +119,1 @@\n-To run an example we should be able to use the maven artifacts in `maven-build`\n+To run an example we should be able to use the maven artifacts in `build`\n@@ -124,1 +124,1 @@\n-   --class-path maven-build\/hat-1.0.jar:maven-build\/hat-example-mandel-1.0.jar:maven-build\/hat-backend-opencl-1.0.jar \\\n+   --class-path build\/hat-1.0.jar:build\/hat-example-mandel-1.0.jar:build\/hat-backend-opencl-1.0.jar \\\n@@ -126,1 +126,1 @@\n-   -Djava.library.path=maven-build\\\n+   -Djava.library.path=build\\\n","filename":"hat\/docs\/hat-01-03-building-hat-with-maven.md","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-target\/\n","filename":"hat\/examples\/heal\/.gitignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-target\/\n","filename":"hat\/examples\/mandel\/.gitignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-target\/\n","filename":"hat\/examples\/squares\/.gitignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-target\/\n","filename":"hat\/examples\/violajones\/.gitignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-target\/\n","filename":"hat\/hat\/.gitignore","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,5 +34,2 @@\n-   if test -d maven-build; then\n-      echo using trad maven-build\n-      build_dir=maven-build\n-   elif test -d build; then\n-      echo using new build dir\n+   if test -d build; then\n+      echo using build dir\n@@ -41,1 +38,1 @@\n-      echo No maven-build or build dir!\n+      echo no build dir!\n","filename":"hat\/hatrun.bash","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+#!\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/classes\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static bldr.Bldr.*;           \/\/ all the helpers are here \n+\/\/import static java.nio.file.Files.*; \/\/ so we can use isDirectory(path);\n+\n+void main(String[] args) throws IOException, InterruptedException, URISyntaxException {\n+     var hatDir = new Root();\n+     var rleParserDir = hatDir.path().resolve(\"examples\/life\/src\/main\/java\/io\");\n+     subDirStream(hatDir.path(), \"hat\", \"examples\", \"backends\", \"docs\")\n+        .forEach(dir ->\n+           findTextFiles(dir, \"java\", \"cpp\", \"h\", \"hpp\", \"md\")\n+              .forEach(textFile -> {\n+                 if (!textFile.hasSuffix(\"md\")\n+                    && !textFile.path().startsWith(rleParserDir)\n+                    && !textFile.grep(Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\"))) {\n+                      System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n+                 }\n+                 textFile.lines().forEach(line -> {\n+                    if (line.grep(Pattern.compile(\"^.*\\\\t.*\"))) {\n+                       System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                    }\n+                    if (line.grep(Pattern.compile(\"^.* $\"))) {\n+                       System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                    }\n+                 });\n+              })\n+        );\n+}\n","filename":"hat\/sanity","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}