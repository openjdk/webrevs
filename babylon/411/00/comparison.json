{"files":[{"patch":"@@ -666,10 +666,1 @@\n-            String typeLiteralString = switch (aType) {\n-                \/\/ @@@ sub-graphs have inputs and outputs\n-                default -> {\n-                    if (a.required()) {\n-                        yield aType.type().getSimpleName();\n-                    } else {\n-                        yield toBoxType(aType.type()).getSimpleName();\n-                    }\n-                }\n-            };\n+\n@@ -687,0 +678,3 @@\n+            \/\/ @@@ sub-graphs have inputs and outputs\n+            String typeLiteralString = toBoxType(aType.type()).getSimpleName();\n+\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/onnx\/opgen\/OpGen.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3584,1 +3584,1 @@\n-            long to = Attribute.to.access(long.class, onnxAttributes);\n+            long to = Attribute.to.access(Long.class, onnxAttributes);\n@@ -5056,1 +5056,1 @@\n-            long axis = Attribute.axis.access(long.class, onnxAttributes);\n+            long axis = Attribute.axis.access(Long.class, onnxAttributes);\n@@ -5203,1 +5203,1 @@\n-            long axis = Attribute.axis.access(long.class, onnxAttributes);\n+            long axis = Attribute.axis.access(Long.class, onnxAttributes);\n@@ -6991,1 +6991,1 @@\n-            long blocksize = Attribute.blocksize.access(long.class, onnxAttributes);\n+            long blocksize = Attribute.blocksize.access(Long.class, onnxAttributes);\n@@ -11218,1 +11218,1 @@\n-            long num_groups = Attribute.num_groups.access(long.class, onnxAttributes);\n+            long num_groups = Attribute.num_groups.access(Long.class, onnxAttributes);\n@@ -12925,1 +12925,1 @@\n-            long size = Attribute.size.access(long.class, onnxAttributes);\n+            long size = Attribute.size.access(Long.class, onnxAttributes);\n@@ -16712,1 +16712,1 @@\n-            float norm_coefficient = Attribute.norm_coefficient.access(float.class, onnxAttributes);\n+            float norm_coefficient = Attribute.norm_coefficient.access(Float.class, onnxAttributes);\n@@ -16717,1 +16717,1 @@\n-            float alpha = Attribute.alpha.access(float.class, onnxAttributes);\n+            float alpha = Attribute.alpha.access(Float.class, onnxAttributes);\n@@ -16722,1 +16722,1 @@\n-            float beta = Attribute.beta.access(float.class, onnxAttributes);\n+            float beta = Attribute.beta.access(Float.class, onnxAttributes);\n@@ -27019,1 +27019,1 @@\n-            long blocksize = Attribute.blocksize.access(long.class, onnxAttributes);\n+            long blocksize = Attribute.blocksize.access(Long.class, onnxAttributes);\n@@ -28610,1 +28610,1 @@\n-            long min_gram_length = Attribute.min_gram_length.access(long.class, onnxAttributes);\n+            long min_gram_length = Attribute.min_gram_length.access(Long.class, onnxAttributes);\n@@ -28625,1 +28625,1 @@\n-            long max_gram_length = Attribute.max_gram_length.access(long.class, onnxAttributes);\n+            long max_gram_length = Attribute.max_gram_length.access(Long.class, onnxAttributes);\n@@ -28630,1 +28630,1 @@\n-            long max_skip_count = Attribute.max_skip_count.access(long.class, onnxAttributes);\n+            long max_skip_count = Attribute.max_skip_count.access(Long.class, onnxAttributes);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OnnxOps.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-public sealed interface ConstructorRef extends TypeVarRef.Owner permits ConstructorRefImpl {\n+public sealed interface ConstructorRef extends JavaRef, TypeVarRef.Owner\n+        permits ConstructorRefImpl {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ConstructorRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-public sealed interface FieldRef permits FieldRefImpl {\n+public sealed interface FieldRef extends JavaRef\n+        permits FieldRefImpl {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/FieldRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+package jdk.incubator.code.type;\n+\n+\/**\n+ * A symbolic reference to a Java class member or type, commonly containing\n+ * symbolic names together with {@link JavaType symbolic descriptions} of Java types.\n+ * <p>\n+ * A symbolic Java reference can be resolved to a corresponding instance of its\n+ * reflected representation, much like the symbolic description of a Java type\n+ * can be resolved to an instance of {@link java.lang.reflect.Type Type}.\n+ *\/\n+public sealed interface JavaRef\n+    permits MethodRef, ConstructorRef, FieldRef, RecordTypeRef {\n+    \/\/ @@@ Extend from TypeElement\n+    \/\/     - Uniform externalization of Java types and Java refs,\n+    \/\/       therefore we don't require specific string representations\n+    \/\/       and parser implementations. (Human readability of Java types\n+    \/\/       and refs is a separate issue.)\n+    \/\/       e.g., the description of a type-variable reference Java type\n+    \/\/       (TypeVarRef) contains an owner, a description of Java class\n+    \/\/       or a symbolic reference to a Java method or constructor.\n+    \/\/ @@@ Enhance TypeElement to traverse children\n+    \/\/     - Uniform tree traversal and transformation independent of\n+    \/\/       externalization.\n+    \/\/ @@@ Make RecordTypeRef.ComponentRef implement JavaRef\n+    \/\/     - resolve to accessor method\n+    \/\/     - (RecordTypeRef resolves to Class.)\n+    \/\/ @@@ AnnotatedElement is the common top type for resolved Java refs and types\n+}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/JavaRef.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -46,1 +46,2 @@\n-public sealed interface MethodRef extends TypeVarRef.Owner permits MethodRefImpl {\n+public sealed interface MethodRef extends JavaRef, TypeVarRef.Owner\n+        permits MethodRefImpl {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/MethodRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n-public sealed interface RecordTypeRef permits RecordTypeRefImpl {\n+public sealed interface RecordTypeRef extends JavaRef\n+        permits RecordTypeRefImpl {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/RecordTypeRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}