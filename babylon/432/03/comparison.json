{"files":[{"patch":"@@ -48,9 +48,0 @@\n-            \/\/ Unpack array-like identifier [+\n-            int dimensions = 0;\n-            if (t.arguments.size() == 1) {\n-                dimensions = dimensions(t.identifier);\n-                if (dimensions > 0) {\n-                    t = t.arguments.getFirst();\n-                }\n-            }\n-\n@@ -66,5 +57,0 @@\n-            \/\/ Write out array-like syntax at end []+\n-            if (dimensions > 0) {\n-                s.append(\"[]\".repeat(dimensions));\n-            }\n-\n@@ -74,13 +60,0 @@\n-        static int dimensions(String identifier) {\n-            if (!identifier.isEmpty() && identifier.charAt(0) == '[') {\n-                for (int i = 1; i < identifier.length(); i++) {\n-                    if (identifier.charAt(i) != '[') {\n-                        return 0;\n-                    }\n-                }\n-                return identifier.length();\n-            } else {\n-                return 0;\n-            }\n-        }\n-\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/TypeElement.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.incubator.code.type.JavaType;\n@@ -39,0 +40,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -124,2 +127,1 @@\n-    static final TypeElement.ExternalizedTypeElement VOID =\n-            new TypeElement.ExternalizedTypeElement(\"void\", List.of());\n+    static final TypeElement.ExternalizedTypeElement VOID = JavaType.VOID.externalize();\n@@ -604,1 +606,1 @@\n-        return DescParser.parseExTypeElem(lexer);\n+        return JavaTypeUtils.inflate(DescParser.parseExTypeElem(lexer));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/parser\/OpParser.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.incubator.code.parser.impl.Tokens.Token;\n@@ -30,1 +29,0 @@\n-import jdk.incubator.code.type.*;\n@@ -32,5 +30,1 @@\n-import jdk.incubator.code.type.RecordTypeRef;\n-import jdk.incubator.code.type.impl.ConstructorRefImpl;\n-import jdk.incubator.code.type.impl.FieldRefImpl;\n-import jdk.incubator.code.type.impl.MethodRefImpl;\n-import jdk.incubator.code.type.impl.RecordTypeRefImpl;\n+\n@@ -54,48 +48,15 @@\n-    \/**\n-     * Parse a method reference from its serialized textual form.\n-     *\n-     * @param desc the serialized method reference\n-     * @return the method reference\n-     *\/\n-    public static MethodRef parseMethodRef(String desc) {\n-        Scanner s = Scanner.factory().newScanner(desc);\n-        s.nextToken();\n-        return parseMethodRef(s);\n-    }\n-\n-    \/**\n-     * Parse a constructor reference from its serialized textual form.\n-     *\n-     * @param desc the serialized constructor reference\n-     * @return the constructor reference\n-     *\/\n-    public static ConstructorRef parseConstructorRef(String desc) {\n-        Scanner s = Scanner.factory().newScanner(desc);\n-        s.nextToken();\n-        return parseConstructorRef(s);\n-    }\n-\n-    \/**\n-     * Parse a field reference from its serialized textual form.\n-     *\n-     * @param desc the serialized field reference\n-     * @return the field reference\n-     *\/\n-    public static FieldRef parseFieldRef(String desc) {\n-        Scanner s = Scanner.factory().newScanner(desc);\n-        s.nextToken();\n-        return parseFieldRef(s);\n-    }\n-\n-    \/**\n-     * Parse a record type reference from its serialized textual form.\n-     *\n-     * @param desc the serialized record type reference\n-     * @return the record type reference\n-     *\/\n-    public static RecordTypeRef parseRecordTypeRef(String desc) {\n-        Scanner s = Scanner.factory().newScanner(desc);\n-        s.nextToken();\n-        return parseRecordTypeRef(s);\n-    }\n-\n+    \/\/    ExType:\n+    \/\/        ExTypeName\n+    \/\/        ExTypeName '<' ExType* '>'\n+    \/\/\n+    \/\/    ExTypeName:\n+    \/\/        ExIdentPart\n+    \/\/        ExIdentPart ExIdentSep ExIdentPart\n+    \/\/\n+    \/\/    ExIdentPart:\n+    \/\/        ident\n+    \/\/        string\n+    \/\/\n+    \/\/    ExIdentSep:\n+    \/\/        '.'\n+    \/\/        ':'\n@@ -104,21 +65,5 @@\n-        if (l.token().kind == TokenKind.HASH || l.token().kind == TokenKind.AMP) {\n-            \/\/ Quoted identifier\n-            Token t = l.token();\n-            while (t.kind != TokenKind.LT) {\n-                identifier.append(t.kind == TokenKind.IDENTIFIER ? t.name() : t.kind.name);\n-                l.nextToken();\n-                t = l.token();\n-            }\n-        } else {\n-            \/\/ type element identifier\n-            Tokens.Token t = l.accept(TokenKind.IDENTIFIER,\n-                    TokenKind.PLUS, TokenKind.SUB, TokenKind.DOT);\n-            identifier.append(t.kind == TokenKind.IDENTIFIER ? t.name() : t.kind.name);\n-            if (t.kind == TokenKind.IDENTIFIER) {\n-                \/\/ keep going if we see \".\"\n-                while (l.acceptIf(Tokens.TokenKind.DOT)) {\n-                    identifier.append(Tokens.TokenKind.DOT.name);\n-                    t = l.accept(Tokens.TokenKind.IDENTIFIER);\n-                    identifier.append(t.name());\n-                }\n-            }\n+        identifier.append(parseExTypeNamePart(l));\n+        while (l.is(TokenKind.DOT) || l.is(TokenKind.COLON)) {\n+            identifier.append(l.token().kind.name);\n+            l.nextToken();\n+            identifier.append(parseExTypeNamePart(l));\n@@ -126,43 +71,7 @@\n-\n-        \/\/ Type parameters\n-        List<TypeElement.ExternalizedTypeElement> args;\n-        if (l.token().kind == Tokens.TokenKind.LT) {\n-            args = new ArrayList<>();\n-            do {\n-                l.nextToken();\n-                TypeElement.ExternalizedTypeElement arg = parseExTypeElem(l);\n-                args.add(arg);\n-            } while (l.token().kind == Tokens.TokenKind.COMMA);\n-            l.accept(Tokens.TokenKind.GT);\n-        } else {\n-            args = List.of();\n-        }\n-\n-        \/\/ Parse array-like syntax []+\n-        int dims = 0;\n-        while (l.acceptIf(Tokens.TokenKind.LBRACKET)) {\n-            l.accept(Tokens.TokenKind.RBRACKET);\n-            dims++;\n-        }\n-\n-        TypeElement.ExternalizedTypeElement td = new TypeElement.ExternalizedTypeElement(identifier.toString(), args);\n-        if (dims > 0) {\n-            \/\/ If array-like then type definition becomes a child with identifier [+\n-            return new TypeElement.ExternalizedTypeElement(\"[\".repeat(dims), List.of(td));\n-        } else {\n-            return td;\n-        }\n-    }\n-\n-    static TypeElement parseTypeElement(Lexer l) {\n-        TypeElement.ExternalizedTypeElement typeDesc = parseExTypeElem(l);\n-        return CoreTypeFactory.CORE_TYPE_FACTORY.constructType(typeDesc);\n-    }\n-\n-    static List<TypeElement> parseParameterTypes(Lexer l) {\n-        List<TypeElement> ptypes = new ArrayList<>();\n-        l.accept(Tokens.TokenKind.LPAREN);\n-        if (l.token().kind != Tokens.TokenKind.RPAREN) {\n-            ptypes.add(parseTypeElement(l));\n-            while (l.acceptIf(Tokens.TokenKind.COMMA)) {\n-                ptypes.add(parseTypeElement(l));\n+        List<TypeElement.ExternalizedTypeElement> args = new ArrayList<>();\n+        if (l.is(TokenKind.LT)) {\n+            l.accept(TokenKind.LT);\n+            args.add(parseExTypeElem(l));\n+            while (l.is(TokenKind.COMMA)) {\n+                l.accept(TokenKind.COMMA);\n+                args.add(parseExTypeElem(l));\n@@ -170,0 +79,1 @@\n+            l.accept(TokenKind.GT);\n@@ -171,21 +81,1 @@\n-        l.accept(Tokens.TokenKind.RPAREN);\n-        return ptypes;\n-    }\n-\n-    \/\/ (T, T, T, T)R\n-    static FunctionType parseMethodType(Lexer l) {\n-        List<TypeElement> ptypes = parseParameterTypes(l);\n-        TypeElement rtype = parseTypeElement(l);\n-        return FunctionType.functionType(rtype, ptypes);\n-    }\n-\n-    static MethodRef parseMethodRef(Lexer l) {\n-        TypeElement refType = parseTypeElement(l);\n-\n-        l.accept(Tokens.TokenKind.COLCOL);\n-\n-        String methodName = l.accept(Tokens.TokenKind.IDENTIFIER).name();\n-\n-        FunctionType mtype = parseMethodType(l);\n-\n-        return new MethodRefImpl(refType, methodName, mtype);\n+        return new TypeElement.ExternalizedTypeElement(identifier.toString(), args);\n@@ -194,45 +84,8 @@\n-    static ConstructorRef parseConstructorRef(Lexer l) {\n-        TypeElement refType = parseTypeElement(l);\n-\n-        l.accept(Tokens.TokenKind.COLCOL);\n-\n-        \/\/ Constructor reference has the special name \"<new>\"\n-        l.accept(Tokens.TokenKind.LT);\n-        Tokens.Token t = l.accept(Tokens.TokenKind.IDENTIFIER);\n-        if (!t.name().equals(\"new\")) {\n-            throw new IllegalArgumentException(\"Invalid name for constructor reference: \" + t.name());\n-        }\n-        l.accept(Tokens.TokenKind.GT);\n-\n-        List<TypeElement> ptypes = parseParameterTypes(l);\n-        return new ConstructorRefImpl(FunctionType.functionType(refType, ptypes));\n-    }\n-\n-    static FieldRef parseFieldRef(Lexer l) {\n-        TypeElement refType = parseTypeElement(l);\n-\n-        l.accept(Tokens.TokenKind.COLCOL);\n-\n-        String fieldName = l.accept(Tokens.TokenKind.IDENTIFIER).name();\n-\n-        FunctionType mtype = parseMethodType(l);\n-        if (!mtype.parameterTypes().isEmpty()) {\n-            throw new IllegalArgumentException();\n-        }\n-        return new FieldRefImpl(refType, fieldName, mtype.returnType());\n-    }\n-\n-    static RecordTypeRef parseRecordTypeRef(Lexer l) {\n-        List<RecordTypeRef.ComponentRef> components = new ArrayList<>();\n-        l.accept(Tokens.TokenKind.LPAREN);\n-        if (l.token().kind != Tokens.TokenKind.RPAREN) {\n-            do {\n-                TypeElement componentType = parseTypeElement(l);\n-                String componentName = l.accept(Tokens.TokenKind.IDENTIFIER).name();\n-\n-                components.add(new RecordTypeRef.ComponentRef(componentType, componentName));\n-            } while(l.acceptIf(Tokens.TokenKind.COMMA));\n-        }\n-        l.accept(Tokens.TokenKind.RPAREN);\n-        TypeElement recordType = parseTypeElement(l);\n-        return new RecordTypeRefImpl(recordType, components);\n+    private static String parseExTypeNamePart(Lexer l) {\n+        String namePart = switch (l.token().kind) {\n+            case IDENTIFIER -> l.token().name();\n+            case STRINGLITERAL -> \"\\\"\" + l.token().stringVal() + \"\\\"\";\n+            default -> throw l.unexpected();\n+        };\n+        l.nextToken();\n+        return namePart;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/parser\/impl\/DescParser.java","additions":38,"deletions":185,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.reflect.Array;\n@@ -33,2 +32,2 @@\n-import jdk.incubator.code.TypeElement;\n-import java.util.List;\n+\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -83,7 +82,1 @@\n-        int dims = 0;\n-        TypeElement current = this;\n-        while (current instanceof ArrayType at) {\n-            dims++;\n-            current = at.componentType();\n-        }\n-        return new ExternalizedTypeElement(\"[\".repeat(dims), List.of(current.externalize()));\n+        return JavaTypeUtils.arrayType(componentType.externalize());\n@@ -94,1 +87,1 @@\n-        return componentType.toString() + \"[]\";\n+        return JavaTypeUtils.toExternalTypeString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ArrayType.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -32,1 +34,1 @@\n-import jdk.incubator.code.TypeElement;\n+\n@@ -37,1 +39,0 @@\n-import java.util.stream.Collectors;\n@@ -43,0 +44,1 @@\n+\n@@ -88,9 +90,7 @@\n-        List<ExternalizedTypeElement> args = typeArguments.stream()\n-                .map(TypeElement::externalize)\n-                .toList();\n-\n-        ExternalizedTypeElement td = new ExternalizedTypeElement(toClassName(), args);\n-        if (enclosing != null) {\n-            td = new ExternalizedTypeElement(\".\", List.of(enclosing.externalize(), td));\n-        }\n-        return td;\n+        ExternalizedTypeElement exEnclosing = enclosing == null ?\n+                VOID.externalize() : enclosing.externalize();\n+        String name = enclosing == null ?\n+                toClassName() :\n+                type.displayName().substring(enclosing.type.displayName().length() + 1);\n+        return JavaTypeUtils.classType(name, exEnclosing,\n+                typeArguments().stream().map(JavaType::externalize).toList());\n@@ -101,12 +101,1 @@\n-        String prefix = enclosing != null ?\n-                enclosing + \"$\":\n-                (!type.packageName().isEmpty() ?\n-                        type.packageName() + \".\" : \"\");\n-        String name = enclosing == null ?\n-                type.displayName() :\n-                type.displayName().substring(enclosing.type.displayName().length() + 1);\n-        String typeArgs = hasTypeArguments() ?\n-                typeArguments().stream().map(JavaType::toString)\n-                        .collect(Collectors.joining(\", \", \"<\", \">\")) :\n-                \"\";\n-        return String.format(\"%s%s%s\", prefix, name, typeArgs);\n+        return JavaTypeUtils.toExternalTypeString(externalize());\n@@ -164,1 +153,3 @@\n-        return new ClassType(type);\n+        return enclosing == null ?\n+                new ClassType(type) :\n+                new ClassType(enclosing.rawType(), type);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ClassType.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -91,1 +92,1 @@\n-        return jdk.incubator.code.parser.impl.DescParser.parseConstructorRef(s);\n+        return (ConstructorRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ConstructorRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import jdk.incubator.code.parser.impl.DescParser;\n@@ -7,0 +8,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -93,162 +96,5 @@\n-    public static final TypeElementFactory JAVA_TYPE_FACTORY = new TypeElementFactory() {\n-        \/\/ Returns JavaType or JavaRef\n-        @Override\n-        public TypeElement constructType(TypeElement.ExternalizedTypeElement tree) {\n-            String identifier = tree.identifier();\n-\n-            if (identifier.startsWith(\"[\")) {\n-                \/\/ Array types are \"flattened\". Skip over '[', but keep track of them in 'dimensions'\n-                if (tree.arguments().size() != 1) {\n-                    throw badType(tree, \"array type\");\n-                }\n-                for (int i = 1; i < identifier.length(); i++) {\n-                    if (identifier.charAt(i) != '[') {\n-                        throw badType(tree, \"array type\");\n-                    }\n-                }\n-                JavaType elemType = (JavaType) constructType(tree.arguments().getFirst());\n-                return JavaType.array(elemType, identifier.length());\n-            } else if (identifier.equals(\"+\") || identifier.equals(\"-\")) {\n-                \/\/ wildcard type\n-                if (tree.arguments().size() != 1) {\n-                    throw badType(tree, \"wildcard type argument\");\n-                }\n-                BoundKind kind = identifier.equals(\"+\") ?\n-                        BoundKind.EXTENDS : BoundKind.SUPER;\n-                return JavaType.wildcard(kind,\n-                        constructTypeArgument(tree, 0, NO_WILDCARDS));\n-            } else if (identifier.startsWith(\"#\")) {\n-                \/\/ type-var\n-                if (tree.arguments().size() != 2) {\n-                    throw badType(tree, \"type variable\");\n-                }\n-\n-                String name = tree.identifier().substring(1);\n-                if (name.isEmpty()) {\n-                    throw badType(tree, \"type variable\");\n-                }\n-\n-                if (!(constructType(tree.arguments().get(0)) instanceof TypeVariableType.Owner owner)) {\n-                    throw badType(tree, \"type variable\");\n-                }\n-\n-                return JavaType.typeVarRef(name,\n-                        owner,\n-                        constructTypeArgument(tree, 1, NO_WILDCARDS));\n-            } else if (identifier.startsWith(\"&\")) {\n-                if (identifier.equals(\"&m\")) {\n-                    if (tree.arguments().size() != 3) {\n-                        throw badType(tree, \"method reference\");\n-                    }\n-\n-                    ExternalizedTypeElement name = tree.arguments().get(1);\n-                    if (!name.arguments().isEmpty()) {\n-                        throw badType(tree, \"method reference\");\n-                    }\n-                    if (!(CORE_TYPE_FACTORY.constructType(tree.arguments().get(2)) instanceof FunctionType type)) {\n-                        throw badType(tree, \"method reference\");\n-                    }\n-                    return MethodRef.method(\n-                            constructType(tree.arguments().get(0)),\n-                            name.identifier(),\n-                            type\n-                    );\n-                } else if (identifier.startsWith(\"&c\")) {\n-                    if (tree.arguments().size() != 1) {\n-                        throw badType(tree, \"constructor reference\");\n-                    }\n-\n-                    if (!(CORE_TYPE_FACTORY.constructType(tree.arguments().get(0)) instanceof FunctionType type)) {\n-                        throw badType(tree, \"method reference\");\n-                    }\n-                    return ConstructorRef.constructor(type);\n-                } else if (identifier.startsWith(\"&f\")) {\n-                    if (tree.arguments().size() != 3) {\n-                        throw badType(tree, \"field reference\");\n-                    }\n-\n-                    ExternalizedTypeElement name = tree.arguments().get(1);\n-                    if (!name.arguments().isEmpty()) {\n-                        throw badType(tree, \"field reference\");\n-                    }\n-                    return FieldRef.field(\n-                            constructType(tree.arguments().get(0)),\n-                            name.identifier(),\n-                            constructType(tree.arguments().get(2))\n-                            );\n-                } else if (identifier.startsWith(\"&r\")) {\n-                    if (tree.arguments().isEmpty()) {\n-                        throw badType(tree, \"record reference\");\n-                    }\n-\n-                    List<RecordTypeRef.ComponentRef> cs = new ArrayList<>();\n-                    for (int i = 1; i < tree.arguments().size(); i += 2) {\n-                        ExternalizedTypeElement cname = tree.arguments().get(i + 1);\n-                        if (!cname.arguments().isEmpty()) {\n-                            throw badType(tree, \"record reference\");\n-                        }\n-                        cs.add(new RecordTypeRef.ComponentRef(\n-                                constructType(tree.arguments().get(i)),\n-                                cname.identifier()));\n-                    }\n-                    return RecordTypeRef.recordType(constructType(tree.arguments().get(0)), cs);\n-                } else {\n-                    throw badType(tree, \"unknown reference\");\n-                }\n-            } else if (identifier.equals(\".\")) {\n-                \/\/ qualified type\n-                if (tree.arguments().size() != 2) {\n-                    throw badType(tree, \"qualified type\");\n-                }\n-                ClassType enclType = (ClassType)constructTypeArgument(tree, 0, CLASS);\n-                ClassType innerType = (ClassType)constructTypeArgument(tree, 1, CLASS);\n-                \/\/ the inner class name is obtained by subtracting the name of the enclosing type\n-                \/\/ from the name of the inner type (and also dropping an extra '$')\n-                String innerName = innerType.toNominalDescriptor().displayName()\n-                        .substring(enclType.toNominalDescriptor().displayName().length() + 1);\n-                JavaType qual = JavaType.qualified(enclType, innerName);\n-                return (innerType.hasTypeArguments()) ?\n-                    JavaType.parameterized(qual, innerType.typeArguments()) : qual;\n-            } else {\n-                \/\/ primitive or reference\n-                JavaType t = switch (identifier) {\n-                    case \"boolean\" -> JavaType.BOOLEAN;\n-                    case \"byte\" -> JavaType.BYTE;\n-                    case \"char\" -> JavaType.CHAR;\n-                    case \"short\" -> JavaType.SHORT;\n-                    case \"int\" -> JavaType.INT;\n-                    case \"long\" -> JavaType.LONG;\n-                    case \"float\" -> JavaType.FLOAT;\n-                    case \"double\" -> JavaType.DOUBLE;\n-                    case \"void\" -> JavaType.VOID;\n-                    default -> JavaType.type(ClassDesc.of(identifier));\n-                };\n-                if (!tree.arguments().isEmpty()) {\n-                    if (t instanceof PrimitiveType) {\n-                        throw new IllegalArgumentException(\"primitive type: \" + tree);\n-                    }\n-                    return JavaType.parameterized(t,\n-                            tree.arguments().stream().map(ete -> (JavaType) constructType(ete)).toList());\n-                } else {\n-                    return t;\n-                }\n-            }\n-        }\n-\n-        static IllegalArgumentException badType(ExternalizedTypeElement tree, String str) {\n-            return new IllegalArgumentException(String.format(\"Bad %s: %s\", str, tree));\n-        }\n-\n-        private JavaType constructTypeArgument(ExternalizedTypeElement element, int index, Predicate<JavaType> filter) {\n-            ExternalizedTypeElement arg = element.arguments().get(index);\n-            JavaType type = (JavaType) constructType(arg);\n-            if (!filter.test(type)) {\n-                throw new IllegalArgumentException(String.format(\"Unexpected argument %s\", element));\n-            } else {\n-                return type;\n-            }\n-        }\n-\n-        private static Predicate<JavaType> NO_WILDCARDS = t -> !(t instanceof WildcardType);\n-        private static Predicate<JavaType> CLASS = t -> t instanceof ClassType;\n-    };\n+    public static final TypeElementFactory JAVA_TYPE_FACTORY = tree -> switch (JavaTypeUtils.Kind.of(tree)) {\n+            case INFLATED_TYPE -> JavaTypeUtils.toJavaType(tree);\n+            case INFLATED_REF -> JavaTypeUtils.toJavaRef(tree);\n+            default -> throw new UnsupportedOperationException(\"Unsupported: \" + tree);\n+        };\n@@ -263,12 +109,0 @@\n-\n-    static MethodRef parseMethodRef(String desc) {\n-        return jdk.incubator.code.parser.impl.DescParser.parseMethodRef(desc);\n-    }\n-\n-    static ConstructorRef parseConstructorRef(String desc) {\n-        return jdk.incubator.code.parser.impl.DescParser.parseConstructorRef(desc);\n-    }\n-\n-    static TypeElement.ExternalizedTypeElement parseExTypeElem(String desc) {\n-        return jdk.incubator.code.parser.impl.DescParser.parseExTypeElem(desc);\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/CoreTypeFactory.java","additions":8,"deletions":174,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -39,0 +40,1 @@\n+\n@@ -66,1 +68,1 @@\n-        return jdk.incubator.code.parser.impl.DescParser.parseFieldRef(s);\n+        return (FieldRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/FieldRef.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,0 +5,2 @@\n+import java.util.List;\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/JavaRef.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -356,1 +358,1 @@\n-        return (JavaType) CoreTypeFactory.JAVA_TYPE_FACTORY.constructType(jdk.incubator.code.parser.impl.DescParser.parseExTypeElem(s));\n+        return JavaTypeUtils.toJavaType(JavaTypeUtils.parseExternalTypeString(s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/JavaType.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -100,1 +101,1 @@\n-        return jdk.incubator.code.parser.impl.DescParser.parseMethodRef(s);\n+        return (MethodRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/MethodRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -31,1 +33,0 @@\n-import java.util.List;\n@@ -53,1 +54,1 @@\n-        return new ExternalizedTypeElement(type.displayName(), List.of());\n+        return JavaTypeUtils.primitiveType(type.displayName());\n@@ -58,1 +59,1 @@\n-        return type.displayName();\n+        return JavaTypeUtils.toExternalTypeString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/PrimitiveType.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -69,1 +70,1 @@\n-        return jdk.incubator.code.parser.impl.DescParser.parseRecordTypeRef(s);\n+        return (RecordTypeRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/RecordTypeRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -34,1 +37,0 @@\n-import java.util.List;\n@@ -103,7 +105,1 @@\n-        ExternalizedTypeElement eOwner = switch (owner) {\n-            \/\/ @@@ Should be able to use single case matching TypeElement\n-            case JavaRef ref -> ref.externalize();\n-            case ClassType classType -> classType.externalize();\n-        };\n-        return new ExternalizedTypeElement(\"#\" + name,\n-                List.of(eOwner, bound.externalize()));\n+        return JavaTypeUtils.typeVarType(name, owner.externalize(), bound.externalize());\n@@ -114,2 +110,1 @@\n-        \/\/ @@@ required to pass TestJavaType.java\n-        return name;\n+        return JavaTypeUtils.toExternalTypeString(externalize());\n@@ -144,1 +139,1 @@\n-    public sealed interface Owner permits ClassType, MethodRef, ConstructorRef { }\n+    public sealed interface Owner extends TypeElement permits ClassType, MethodRef, ConstructorRef { }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/TypeVariableType.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n+\n@@ -31,1 +33,0 @@\n-import java.util.List;\n@@ -76,2 +77,1 @@\n-        String prefix = kind == BoundKind.EXTENDS ? \"+\" : \"-\";\n-        return new ExternalizedTypeElement(prefix, List.of(boundType.externalize()));\n+        return JavaTypeUtils.wildcardType(boundKind(), boundType.externalize());\n@@ -82,3 +82,1 @@\n-        return boundKind() == BoundKind.EXTENDS &&\n-                boundType.equals(J_L_OBJECT) ?\n-                \"?\" : boundKind().boundStr + boundType.toString();\n+        return JavaTypeUtils.toExternalTypeString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/WildcardType.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.util.List;\n@@ -47,1 +46,0 @@\n-    static final String NAME = \"&c\";\n@@ -113,2 +111,2 @@\n-        return new ExternalizedTypeElement(NAME,\n-                List.of(type.externalize()));\n+        return JavaTypeUtils.constructorRef(type.returnType().externalize(),\n+                type.parameterTypes().stream().map(TypeElement::externalize).toList());\n@@ -119,3 +117,1 @@\n-        return type.returnType().externalize() + \"::<new>\" +\n-            type.parameterTypes().stream().map(t -> t.externalize().toString())\n-                    .collect(joining(\", \", \"(\", \")\"));\n+        return JavaTypeUtils.toExternalRefString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/impl\/ConstructorRefImpl.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.List;\n@@ -38,1 +37,0 @@\n-    static final String NAME = \"&f\";\n@@ -120,2 +118,1 @@\n-        return new ExternalizedTypeElement(NAME,\n-                List.of(refType.externalize(), ExternalizedTypeElement.ofString(name), type.externalize()));\n+        return JavaTypeUtils.fieldRef(name, refType.externalize(), type.externalize());\n@@ -126,1 +123,1 @@\n-        return refType.externalize() + \"::\" + name + \"()\" + type.externalize();\n+        return JavaTypeUtils.toExternalRefString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/impl\/FieldRefImpl.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,706 @@\n+package jdk.incubator.code.type.impl;\n+\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.TypeElement.ExternalizedTypeElement;\n+import jdk.incubator.code.parser.impl.Lexer;\n+import jdk.incubator.code.parser.impl.Scanner;\n+import jdk.incubator.code.parser.impl.Tokens;\n+import jdk.incubator.code.type.*;\n+import jdk.incubator.code.type.RecordTypeRef.ComponentRef;\n+import jdk.incubator.code.type.WildcardType.BoundKind;\n+\n+import java.lang.constant.ClassDesc;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+\/**\n+ * This class defines several helper methods to work with externalized Java type forms.\n+ * There are two different kinds of externalized type forms: inflated type forms and flattened type forms.\n+ * An inflated type form closely follow the structure of the {@code JavaType} or {@code JavaRef} it models.\n+ * For instance, the Java type {@code Foo<? extends Bar>} is modelled as follows:\n+ * {@snippet\n+ * java.type.class(Foo, java.type.primitive(void),\n+ *                  java.type.wildcard(EXTENDS,\n+ *                                     java.type.class(Bar, java.type.primitive(void))))\n+ * }\n+ * Inflated type forms are {@link #flatten(ExternalizedTypeElement) flattened}, to derive a form that is more suitable\n+ * for humans. For instance, the above inflated form is flattened as follows:\n+ * {@snippet\n+ * java.type:\"Foo<? extends Bar>\"\n+ * }\n+ * Flattened type forms can be {@link #inflate(ExternalizedTypeElement) inflated} to go back to the original\n+ * inflated form.\n+ *\/\n+public class JavaTypeUtils {\n+\n+    \/\/ useful type identifiers\n+\n+    \/**  Inflated Java class type name *\/\n+    public static final String JAVA_TYPE_CLASS_NAME = \"java.type.class\";\n+    \/**  Inflated Java array type name *\/\n+    public static final String JAVA_TYPE_ARRAY_NAME = \"java.type.array\";\n+    \/**  Inflated Java wildcard type name *\/\n+    public static final String JAVA_TYPE_WILDCARD_NAME = \"java.type.wildcard\";\n+    \/**  Inflated Java type var name *\/\n+    public static final String JAVA_TYPE_VAR_NAME = \"java.type.var\";\n+    \/**  Inflated Java primitive type name *\/\n+    public static final String JAVA_TYPE_PRIMITIVE_NAME = \"java.type.primitive\";\n+\n+    \/** Inflated Java field reference name *\/\n+    public static final String JAVA_REF_FIELD_NAME = \"java.ref.field\";\n+    \/** Inflated Java method reference name *\/\n+    public static final String JAVA_REF_METHOD_NAME = \"java.ref.method\";\n+    \/** Inflated Java constructor reference name *\/\n+    public static final String JAVA_REF_CONSTRUCTOR_NAME = \"java.ref.constructor\";\n+    \/** Inflated Java record name *\/\n+    public static final String JAVA_REF_RECORD_NAME = \"java.ref.record\";\n+\n+    \/** Flattened Java type name *\/\n+    public static final String JAVA_TYPE_FLAT_NAME_PREFIX = \"java.type:\";\n+    \/** Flattened Java reference name *\/\n+    public static final String JAVA_REF_FLAT_NAME_PREFIX = \"java.ref:\";\n+\n+    \/**\n+     * An enum modelling the Java type form kind. Useful for switching.\n+     *\/\n+    public enum Kind {\n+        \/** A flattened type form *\/\n+        FLATTENED_TYPE,\n+        \/** A flattened reference form *\/\n+        FLATTENED_REF,\n+        \/** An inflated type form *\/\n+        INFLATED_TYPE,\n+        \/** An inflated reference form *\/\n+        INFLATED_REF,\n+        \/** Some other form *\/\n+        OTHER;\n+\n+        \/**\n+         * Constructs a new kind from an externalized type form\n+         * @param tree the externalized type form\n+         * @return the kind modelling {@code tree}\n+         *\/\n+        public static Kind of(ExternalizedTypeElement tree) {\n+            return switch (tree.identifier()) {\n+                case JAVA_TYPE_CLASS_NAME, JAVA_TYPE_ARRAY_NAME,\n+                     JAVA_TYPE_PRIMITIVE_NAME, JAVA_TYPE_WILDCARD_NAME,\n+                     JAVA_TYPE_VAR_NAME -> INFLATED_TYPE;\n+                case JAVA_REF_FIELD_NAME, JAVA_REF_CONSTRUCTOR_NAME,\n+                     JAVA_REF_METHOD_NAME, JAVA_REF_RECORD_NAME -> INFLATED_REF;\n+                case String s when s.startsWith(JAVA_TYPE_FLAT_NAME_PREFIX) -> FLATTENED_TYPE;\n+                case String s when s.startsWith(JAVA_REF_FLAT_NAME_PREFIX) -> FLATTENED_REF;\n+                default -> OTHER;\n+            };\n+        }\n+    }\n+\n+    \/\/ Externalized Java type\/ref factories\n+\n+    \/**\n+     * {@return an inflated Java class type form}\n+     * @param name the class type name\n+     * @param encl the enclosing type\n+     * @param typeargs the type arguments\n+     *\/\n+    public static ExternalizedTypeElement classType(String name, ExternalizedTypeElement encl, List<ExternalizedTypeElement> typeargs) {\n+        if (encl == null) {\n+            encl = JavaType.VOID.externalize();\n+        } else {\n+            \/\/ watch out for names like \"1Foo\"\n+            name = escapeInnerClassName(name);\n+        }\n+        List<ExternalizedTypeElement> args = Stream.concat(\n+                Stream.of(nameToType(name), encl),\n+                typeargs.stream()).toList();\n+        return ExternalizedTypeElement.of(JAVA_TYPE_CLASS_NAME, args);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java array type form}\n+     * @param component the array component type\n+     *\/\n+    public static ExternalizedTypeElement arrayType(ExternalizedTypeElement component) {\n+        return ExternalizedTypeElement.of(JAVA_TYPE_ARRAY_NAME, component);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java wildcard type form}\n+     * @param boundKind the wildcard bound kind\n+     * @param bound the wildcard bound\n+     *\/\n+    public static ExternalizedTypeElement wildcardType(BoundKind boundKind, ExternalizedTypeElement bound) {\n+        return ExternalizedTypeElement.of(JAVA_TYPE_WILDCARD_NAME,\n+                nameToType(boundKind.name()), bound);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java type-variable type form}\n+     * @param name the type-variable name\n+     * @param owner the type-variable owner\n+     * @param bound the type-variable bound\n+     *\/\n+    public static ExternalizedTypeElement typeVarType(String name, ExternalizedTypeElement owner, ExternalizedTypeElement bound) {\n+        return ExternalizedTypeElement.of(JAVA_TYPE_VAR_NAME,\n+                nameToType(name), owner, bound);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java primitive type form}\n+     * @param name the name of the primitive type\n+     *\/\n+    public static ExternalizedTypeElement primitiveType(String name) {\n+        return ExternalizedTypeElement.of(JAVA_TYPE_PRIMITIVE_NAME,\n+                nameToType(name));\n+    }\n+\n+    \/**\n+     * {@return an inflated Java field reference form}\n+     * @param name the field name\n+     * @param owner the field owner\n+     * @param type the field type\n+     *\/\n+    public static ExternalizedTypeElement fieldRef(String name, ExternalizedTypeElement owner, ExternalizedTypeElement type) {\n+        return ExternalizedTypeElement.of(JAVA_REF_FIELD_NAME,\n+                owner, nameToType(name), type);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java method reference form}\n+     * @param name the method name\n+     * @param owner the method owner\n+     * @param restype the method return type\n+     * @param paramtypes the method parameter types\n+     *\/\n+    public static ExternalizedTypeElement methodRef(String name, ExternalizedTypeElement owner, ExternalizedTypeElement restype, List<ExternalizedTypeElement> paramtypes) {\n+        return ExternalizedTypeElement.of(JAVA_REF_METHOD_NAME,\n+                owner, ExternalizedTypeElement.of(name, paramtypes), restype);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java constructor reference form}\n+     * @param owner the constructor owner\n+     * @param paramtypes the constructor parameter types\n+     *\/\n+    public static ExternalizedTypeElement constructorRef(ExternalizedTypeElement owner, List<ExternalizedTypeElement> paramtypes) {\n+        return ExternalizedTypeElement.of(JAVA_REF_CONSTRUCTOR_NAME,\n+                owner, ExternalizedTypeElement.of(\"\", paramtypes));\n+    }\n+\n+    \/**\n+     * {@return an inflated Java record reference form}\n+     * @param owner the record type\n+     * @param componentNames the record component names\n+     * @param componentTypes the record component types\n+     *\/\n+    public static ExternalizedTypeElement recordRef(ExternalizedTypeElement owner, List<String> componentNames, List<ExternalizedTypeElement> componentTypes) {\n+        return ExternalizedTypeElement.of(JAVA_REF_RECORD_NAME,\n+                Stream.concat(\n+                        Stream.of(owner),\n+                        IntStream.range(0, componentNames.size())\n+                                .mapToObj(i -> ExternalizedTypeElement.of(componentNames.get(i), componentTypes.get(i)))\n+                ).toList());\n+    }\n+\n+    \/\/ From externalized Java types\/refs into actual Java types\/refs\n+\n+    \/**\n+     * {@return a {@code JavaType} modelling the provided inflated Java type form}.\n+     * @param tree the inflated Java type form\n+     *\/\n+    public static JavaType toJavaType(ExternalizedTypeElement tree) {\n+        return switch (tree.identifier()) {\n+            case JAVA_TYPE_CLASS_NAME -> {\n+                String name = unescapeInnerClassName(select(tree, 0, JavaTypeUtils::typeToName));\n+                JavaType encl = select(tree, 1, JavaTypeUtils::toJavaType);\n+                List<JavaType> typeargs = selectFrom(tree, 2, JavaTypeUtils::toJavaType);\n+                JavaType type = !encl.equals(JavaType.VOID) ?\n+                        JavaType.qualified(encl, name) :\n+                        JavaType.type(ClassDesc.of(name));\n+                yield typeargs.isEmpty() ?\n+                        type :\n+                        JavaType.parameterized(type, typeargs);\n+            }\n+            case JAVA_TYPE_ARRAY_NAME -> {\n+                JavaType componentType = select(tree, 0, JavaTypeUtils::toJavaType);\n+                yield JavaType.array(componentType);\n+            }\n+            case JAVA_TYPE_WILDCARD_NAME -> {\n+                BoundKind boundKind = select(tree, 0, t -> BoundKind.valueOf(typeToName(t)));\n+                JavaType bound = select(tree, 1, JavaTypeUtils::toJavaType);\n+                yield JavaType.wildcard(boundKind, bound);\n+            }\n+            case JAVA_TYPE_VAR_NAME -> {\n+                String tvarName = select(tree, 0, JavaTypeUtils::typeToName);\n+                TypeVariableType.Owner owner = (TypeVariableType.Owner)select(tree, 1, t ->\n+                        switch (Kind.of(t)) {\n+                            case INFLATED_TYPE -> toJavaType(t);\n+                            case INFLATED_REF -> toJavaRef(t);\n+                            default -> throw unsupported(t);\n+                        });\n+                JavaType bound = select(tree, 2, JavaTypeUtils::toJavaType);\n+                yield JavaType.typeVarRef(tvarName, owner, bound);\n+            }\n+            case JAVA_TYPE_PRIMITIVE_NAME -> {\n+                String primitiveName = select(tree, 0, JavaTypeUtils::typeToName);\n+                yield PRIMITIVE_TYPES.get(primitiveName);\n+            }\n+            default -> throw unsupported(tree);\n+        };\n+    }\n+\n+    \/**\n+     * {@return a {@code JavaRef} modelling the provided inflated Java reference form}.\n+     * @param tree the inflated Java reference form\n+     *\/\n+    public static JavaRef toJavaRef(ExternalizedTypeElement tree) {\n+        return switch (tree.identifier()) {\n+            case JAVA_REF_FIELD_NAME -> {\n+                JavaType owner = select(tree, 0, JavaTypeUtils::toJavaType);\n+                String fieldName = select(tree, 1, JavaTypeUtils::typeToName);\n+                JavaType fieldType = select(tree, 2, JavaTypeUtils::toJavaType);\n+                yield FieldRef.field(owner, fieldName, fieldType);\n+            }\n+            case JAVA_REF_METHOD_NAME -> {\n+                JavaType owner = select(tree, 0, JavaTypeUtils::toJavaType);\n+                ExternalizedTypeElement nameAndArgs = select(tree, 1, Function.identity());\n+                String methodName = nameAndArgs.identifier();\n+                List<JavaType> paramTypes = selectFrom(nameAndArgs, 0, JavaTypeUtils::toJavaType);\n+                JavaType restype = select(tree, 2, JavaTypeUtils::toJavaType);\n+                yield MethodRef.method(owner, methodName, restype, paramTypes);\n+            }\n+            case JAVA_REF_CONSTRUCTOR_NAME -> {\n+                JavaType owner = select(tree, 0, JavaTypeUtils::toJavaType);\n+                ExternalizedTypeElement nameAndArgs = select(tree, 1, Function.identity());\n+                List<JavaType> paramTypes = selectFrom(nameAndArgs, 0, JavaTypeUtils::toJavaType);\n+                yield ConstructorRef.constructor(owner, paramTypes);\n+            }\n+            case JAVA_REF_RECORD_NAME -> {\n+                JavaType owner = select(tree, 0, JavaTypeUtils::toJavaType);\n+                List<ComponentRef> components = selectFrom(tree, 1, Function.identity()).stream()\n+                        .map(t -> {\n+                            String componentName = t.identifier();\n+                            JavaType componentType = select(t, 0, JavaTypeUtils::toJavaType);\n+                            return new ComponentRef(componentType, componentName);\n+                        }).toList();\n+                yield RecordTypeRef.recordType(owner, components);\n+            }\n+            default -> throw unsupported(tree);\n+        };\n+    }\n+\n+    \/\/ From externalized Java types\/refs into external type\/refs strings\n+\n+    \/**\n+     * {@return a flat string modelling the provided inflated Java type form}.\n+     * @param tree the inflated Java type form\n+     *\/\n+    public static String toExternalTypeString(ExternalizedTypeElement tree) {\n+        return switch (tree.identifier()) {\n+            case JAVA_TYPE_CLASS_NAME -> {\n+                String className = select(tree, 0, JavaTypeUtils::typeToName);\n+                ExternalizedTypeElement enclosing = select(tree, 1, Function.identity());\n+                String typeargs = tree.arguments().size() == 2 ?\n+                        \"\" :\n+                        selectFrom(tree, 2, JavaTypeUtils::toExternalTypeString).stream()\n+                                .collect(Collectors.joining(\", \", \"<\", \">\"));\n+                if (isSameType(enclosing, JavaType.VOID)) {\n+                    yield String.format(\"%s%s\", className, typeargs);\n+                } else {\n+                    String enclosingString = toExternalTypeString(enclosing);\n+                    yield String.format(\"%s::%s%s\", enclosingString, className, typeargs);\n+                }\n+            }\n+            case JAVA_TYPE_ARRAY_NAME -> {\n+                String componentType = select(tree, 0, JavaTypeUtils::toExternalTypeString);\n+                yield String.format(\"%s[]\", componentType);\n+            }\n+            case JAVA_TYPE_WILDCARD_NAME -> {\n+                BoundKind boundKind = select(tree, 0, t -> BoundKind.valueOf(typeToName(t)));\n+                ExternalizedTypeElement bound = select(tree, 1, Function.identity());\n+                yield boundKind == BoundKind.EXTENDS && isSameType(bound, JavaType.J_L_OBJECT) ?\n+                        \"?\" :\n+                        String.format(\"? %s %s\", boundKind.name().toLowerCase(), toExternalTypeString(bound));\n+            }\n+            case JAVA_TYPE_VAR_NAME -> {\n+                String tvarName = select(tree, 0, JavaTypeUtils::typeToName);\n+                String owner = select(tree, 1, t ->\n+                        switch (Kind.of(t)) {\n+                            case INFLATED_REF -> \"&\" + toExternalRefString(t);\n+                            case INFLATED_TYPE -> toExternalTypeString(t);\n+                            default -> throw unsupported(t);\n+                        });\n+                ExternalizedTypeElement bound = select(tree, 2, Function.identity());\n+                yield isSameType(bound, JavaType.J_L_OBJECT) ?\n+                        String.format(\"%s::<%s>\", owner, tvarName) :\n+                        String.format(\"%s::<%s extends %s>\", owner, tvarName, toExternalTypeString(bound));\n+            }\n+            case JAVA_TYPE_PRIMITIVE_NAME -> select(tree, 0, JavaTypeUtils::typeToName);\n+            default -> throw unsupported(tree);\n+        };\n+    }\n+\n+    \/**\n+     * {@return a flat string modelling the provided inflated Java reference form}.\n+     * @param tree the inflated Java type form\n+     *\/\n+    public static String toExternalRefString(ExternalizedTypeElement tree) {\n+        return switch (tree.identifier()) {\n+            case JAVA_REF_FIELD_NAME -> {\n+                String owner = select(tree, 0, JavaTypeUtils::toExternalTypeString);\n+                String fieldName = select(tree, 1, JavaTypeUtils::typeToName);\n+                String fieldType = select(tree, 2, JavaTypeUtils::toExternalTypeString);\n+                yield String.format(\"%s::%s:%s\", owner, fieldName, fieldType);\n+            }\n+            case JAVA_REF_METHOD_NAME -> {\n+                String owner = select(tree, 0, JavaTypeUtils::toExternalTypeString);\n+                ExternalizedTypeElement nameAndArgs = select(tree, 1, Function.identity());\n+                String methodName = nameAndArgs.identifier();\n+                List<String> paramTypes = selectFrom(nameAndArgs, 0, JavaTypeUtils::toExternalTypeString);\n+                String restype = select(tree, 2, JavaTypeUtils::toExternalTypeString);\n+                yield String.format(\"%s::%s(%s):%s\", owner, methodName, String.join(\", \", paramTypes), restype);\n+            }\n+            case JAVA_REF_CONSTRUCTOR_NAME -> {\n+                String owner = select(tree, 0, JavaTypeUtils::toExternalTypeString);\n+                ExternalizedTypeElement nameAndArgs = select(tree, 1, Function.identity());\n+                List<String> paramTypes = selectFrom(nameAndArgs, 0, JavaTypeUtils::toExternalTypeString);\n+                yield String.format(\"%s::(%s)\", owner, String.join(\", \", paramTypes));\n+            }\n+            case JAVA_REF_RECORD_NAME -> {\n+                String owner = select(tree, 0, JavaTypeUtils::toExternalTypeString);\n+                List<String> components = selectFrom(tree, 1, Function.identity()).stream()\n+                        .map(t -> {\n+                            String componentName = t.identifier();\n+                            String componentType = select(t, 0, JavaTypeUtils::toExternalTypeString);\n+                            return String.format(\"%s %s\", componentType, componentName);\n+                        }).toList();\n+                yield String.format(\"(%s)%s\", String.join(\", \", components), owner);\n+            }\n+            default -> throw unsupported(tree);\n+        };\n+    }\n+\n+    \/\/ From external type\/refs strings to externalized Java types\/refs\n+\n+    \/**\n+     * {@return an inflated Java type form, parsed from the provided external type string}\n+     * @param desc the external type string to be parsed\n+     *\/\n+    public static ExternalizedTypeElement parseExternalTypeString(String desc) {\n+        Scanner s = Scanner.factory().newScanner(desc);\n+        s.nextToken();\n+        return parseExternalTypeString(s);\n+    }\n+\n+    \/**\n+     * {@return an inflated Java reference form, parsed from the provided external reference string}\n+     * @param desc the external reference string to be parsed\n+     *\/\n+    public static ExternalizedTypeElement parseExternalRefString(String desc) {\n+        Scanner s = Scanner.factory().newScanner(desc);\n+        s.nextToken();\n+        return parseExternalRefString(s);\n+    }\n+\n+    \/\/ From inflated externalized types\/refs to flattened externalized types\/refs and back\n+\n+    \/**\n+     * {@return the flat Java form corresponding to the provided inflated Java form}\n+     * @param tree the inflated Java form\n+     *\/\n+    public static ExternalizedTypeElement flatten(ExternalizedTypeElement tree) {\n+        return switch (Kind.of(tree)) {\n+            case INFLATED_TYPE -> nameToType(String.format(\"%s\\\"%s\\\"\", JAVA_TYPE_FLAT_NAME_PREFIX, toExternalTypeString(tree)));\n+            case INFLATED_REF -> nameToType(String.format(\"%s\\\"%s\\\"\", JAVA_REF_FLAT_NAME_PREFIX, toExternalRefString(tree)));\n+            default -> ExternalizedTypeElement.of(tree.identifier(), tree.arguments().stream().map(JavaTypeUtils::flatten).toList());\n+        };\n+    }\n+\n+    \/**\n+     * {@return the inflated Java form corresponding to the provided flattened Java form}\n+     * @param tree the flattened Java form\n+     *\/\n+    public static ExternalizedTypeElement inflate(ExternalizedTypeElement tree) {\n+        return switch (Kind.of(tree)) {\n+            case FLATTENED_TYPE -> parseExternalTypeString(getDesc(tree, JAVA_TYPE_FLAT_NAME_PREFIX));\n+            case FLATTENED_REF -> parseExternalRefString(getDesc(tree, JAVA_REF_FLAT_NAME_PREFIX));\n+            default -> ExternalizedTypeElement.of(tree.identifier(), tree.arguments().stream().map(JavaTypeUtils::inflate).toList());\n+        };\n+    }\n+\n+    \/\/ internal utility methods\n+\n+    private static final Map<String, JavaType> PRIMITIVE_TYPES = Map.of(\n+            \"boolean\", JavaType.BOOLEAN,\n+            \"char\", JavaType.CHAR,\n+            \"byte\", JavaType.BYTE,\n+            \"short\", JavaType.SHORT,\n+            \"int\", JavaType.INT,\n+            \"float\", JavaType.FLOAT,\n+            \"long\", JavaType.LONG,\n+            \"double\", JavaType.DOUBLE,\n+            \"void\", JavaType.VOID);\n+\n+    private static String escapeInnerClassName(String s) {\n+        return (!s.isEmpty() && Character.isDigit(s.charAt(0))) ?\n+                \"$\" + s : s;\n+    }\n+\n+    private static String unescapeInnerClassName(String s) {\n+        return (s.length() > 1 && s.charAt(0) == '$' &&\n+                Character.isDigit(s.charAt(1))) ?\n+                s.substring(1) : s;\n+    }\n+\n+    private static ExternalizedTypeElement nameToType(String name) {\n+        return ExternalizedTypeElement.of(name);\n+    }\n+\n+    private static String typeToName(ExternalizedTypeElement tree) {\n+        if (!tree.arguments().isEmpty()) {\n+            throw unsupported(tree);\n+        }\n+        return tree.identifier();\n+    }\n+\n+    private static boolean isSameType(ExternalizedTypeElement tree, TypeElement typeElement) {\n+        return tree.equals(typeElement.externalize());\n+    }\n+\n+    private static boolean isPrimitive(String name) {\n+        return PRIMITIVE_TYPES.containsKey(name);\n+    }\n+\n+    private static <T> T select(ExternalizedTypeElement tree, int index, Function<ExternalizedTypeElement, T> valueFunc) {\n+        if (index >= tree.arguments().size()) {\n+            throw unsupported(tree);\n+        }\n+        return valueFunc.apply(tree.arguments().get(index));\n+    }\n+\n+    private static <T> List<T> selectFrom(ExternalizedTypeElement tree, int startIncl, Function<ExternalizedTypeElement, T> valueFunc) {\n+        if (startIncl >= tree.arguments().size()) {\n+            return List.of();\n+        }\n+        return IntStream.range(startIncl, tree.arguments().size())\n+                .mapToObj(i -> valueFunc.apply(tree.arguments().get(i)))\n+                .toList();\n+    }\n+\n+    private static String getDesc(ExternalizedTypeElement tree, String prefix) {\n+        String id = tree.identifier();\n+        return id.substring(prefix.length() + 1, id.length() - 1);\n+    }\n+\n+    \/\/    JavaType:\n+    \/\/        ClassType                                             \/\/ class type\n+    \/\/        PrimitiveType                                         \/\/ primitive type\n+    \/\/        TypeVar                                               \/\/ type variable\n+    \/\/        JavaType '[' ']'                                      \/\/ array type\n+    \/\/\n+    \/\/    ClassType:\n+    \/\/        ClassTypeNoPackage\n+    \/\/        Package '.' ClassTypeNoPackage\n+    \/\/\n+    \/\/    Package:\n+    \/\/        ident\n+    \/\/        Package '.' ident\n+    \/\/\n+    \/\/    ClassTypeNoPackage:\n+    \/\/        ident                                                 \/\/ simple class type\n+    \/\/        ident '<' TypeArg* '>'                                \/\/ parameterized class type\n+    \/\/        ClassTypeNoPackage '::' ClassTypeNoPackage            \/\/ inner class type\n+    \/\/\n+    \/\/    PrimitiveType:\n+    \/\/        'boolean'\n+    \/\/        'char'\n+    \/\/        'byte'\n+    \/\/        'short'\n+    \/\/        'int'\n+    \/\/        'float'\n+    \/\/        'long'\n+    \/\/        'double'\n+    \/\/        'void'\n+    \/\/\n+    \/\/    TypeVar:\n+    \/\/        '&' JavaRef TypeVarRest                               \/\/ method\/constructor type variable\n+    \/\/        ClassType TypeVarRest                                 \/\/ class type variable\n+    \/\/\n+    \/\/    TypeVarRest:\n+    \/\/        '::' '<' ident '>'\n+    \/\/        '::' '<' ident 'extends' JavaType '>'\n+    \/\/\n+    \/\/    TypeArg:\n+    \/\/        '?'                                                   \/\/ bivariant type argument\n+    \/\/        '?' 'extends' JavaType                                \/\/ covariant type argument\n+    \/\/        '?' 'super' JavaType                                  \/\/ contravariant type argument\n+    \/\/        JavaType\n+    private static ExternalizedTypeElement parseExternalTypeString(Lexer l) {\n+        ExternalizedTypeElement type = null;\n+        if (l.is(Tokens.TokenKind.AMP)) {\n+            l.nextToken();\n+            \/\/ method or constructor type variable\n+            ExternalizedTypeElement owner = parseExternalRefString(l);\n+            l.accept(Tokens.TokenKind.COLCOL);\n+            type = parseTypeVariableRest(owner, l);\n+        } else if (l.is(Tokens.TokenKind.IDENTIFIER)) {\n+            if (JavaTypeUtils.isPrimitive(l.token().name())) {\n+                \/\/ primitive type\n+                type = JavaTypeUtils.primitiveType(l.token().name());\n+                l.nextToken();\n+            } else {\n+                \/\/ class type\n+                while (l.is(Tokens.TokenKind.IDENTIFIER)) {\n+                    StringBuilder className = new StringBuilder();\n+                    className.append(l.token().name());\n+                    l.nextToken();\n+                    while (type == null && l.is(Tokens.TokenKind.DOT)) {\n+                        l.accept(Tokens.TokenKind.DOT);\n+                        className.append(\".\");\n+                        className.append(l.token().name());\n+                        l.nextToken();\n+                    }\n+                    List<ExternalizedTypeElement> typeargs = new ArrayList<>();\n+                    if (l.acceptIf(Tokens.TokenKind.LT)) {\n+                        if (l.token().kind != Tokens.TokenKind.GT) {\n+                            typeargs.add(parseTypeArgument(l));\n+                            while (l.acceptIf(Tokens.TokenKind.COMMA)) {\n+                                typeargs.add(parseTypeArgument(l));\n+                            }\n+                        }\n+                        l.accept(Tokens.TokenKind.GT);\n+                    }\n+                    type = JavaTypeUtils.classType(className.toString(),\n+                            type, typeargs);\n+                    if (l.token(0).kind == Tokens.TokenKind.COLCOL) {\n+                        if (l.token(1).kind == Tokens.TokenKind.LT) {\n+                            \/\/ class type variable\n+                            l.nextToken();\n+                            type = parseTypeVariableRest(type, l);\n+                            break;\n+                        } else if (l.token(1).kind == Tokens.TokenKind.IDENTIFIER) {\n+                            if (l.token(2).kind == Tokens.TokenKind.LPAREN || l.token(2).kind == Tokens.TokenKind.COLON) {\n+                                \/\/ this looks like the middle of a field\/method reference -- stop consuming\n+                                break;\n+                            }\n+                            l.nextToken(); \/\/ inner type, keep going\n+                        }\n+                    } else {\n+                        \/\/ not an inner type\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        while (l.is(Tokens.TokenKind.LBRACKET)) {\n+            l.accept(Tokens.TokenKind.LBRACKET);\n+            l.accept(Tokens.TokenKind.RBRACKET);\n+            type = JavaTypeUtils.arrayType(type);\n+        }\n+        return type;\n+    }\n+\n+    private static ExternalizedTypeElement parseTypeVariableRest(ExternalizedTypeElement owner, Lexer l) {\n+        l.accept(Tokens.TokenKind.LT);\n+        String name = l.token().name();\n+        l.nextToken();\n+        ExternalizedTypeElement bound = JavaType.J_L_OBJECT.externalize();\n+        if (l.is(Tokens.TokenKind.IDENTIFIER) &&\n+                l.token().name().equals(\"extends\")) {\n+            l.nextToken();\n+            bound = parseExternalTypeString(l);\n+        }\n+        l.accept(Tokens.TokenKind.GT);\n+        return JavaTypeUtils.typeVarType(name, owner, bound);\n+    }\n+\n+    private static ExternalizedTypeElement parseTypeArgument(Lexer l) {\n+        if (l.is(Tokens.TokenKind.QUES)) {\n+            \/\/ wildcard\n+            l.nextToken();\n+            ExternalizedTypeElement bound = JavaType.J_L_OBJECT.externalize();\n+            WildcardType.BoundKind bk = BoundKind.EXTENDS;\n+            if (l.is(Tokens.TokenKind.IDENTIFIER)) {\n+                bk = switch (l.token().name()) {\n+                    case \"extends\" -> BoundKind.EXTENDS;\n+                    case \"super\" -> BoundKind.SUPER;\n+                    default -> throw l.unexpected();\n+                };\n+                l.nextToken();\n+                bound = parseExternalTypeString(l);\n+            }\n+            return JavaTypeUtils.wildcardType(bk, bound);\n+        } else {\n+            return parseExternalTypeString(l);\n+        }\n+    }\n+\n+    private static List<ExternalizedTypeElement> parseParameterTypes(Lexer l) {\n+        List<ExternalizedTypeElement> ptypes = new ArrayList<>();\n+        l.accept(Tokens.TokenKind.LPAREN);\n+        if (l.token().kind != Tokens.TokenKind.RPAREN) {\n+            ptypes.add(parseExternalTypeString(l));\n+            while (l.acceptIf(Tokens.TokenKind.COMMA)) {\n+                ptypes.add(parseExternalTypeString(l));\n+            }\n+        }\n+        l.accept(Tokens.TokenKind.RPAREN);\n+        return ptypes;\n+    }\n+\n+    \/\/    JavaRef:\n+    \/\/        JavaType `::` ident ':' JavaType                      \/\/ field reference\n+    \/\/        JavaType `::` ident '(' JavaType* ')' ':' JavaType    \/\/ method reference\n+    \/\/        JavaType `::` '(' JavaType* ')'                       \/\/ constructor reference\n+    \/\/        '(' RecordComponent* ')' JavaType                     \/\/ record reference\n+    \/\/\n+    \/\/    RecordComponent:\n+    \/\/        JavaType ident\n+    private static ExternalizedTypeElement parseExternalRefString(Lexer l) {\n+        if (l.acceptIf(Tokens.TokenKind.LPAREN)) {\n+            \/\/ record type reference\n+            List<String> componentNames = new ArrayList<>();\n+            List<ExternalizedTypeElement> componentTypes = new ArrayList<>();\n+            if (l.token().kind != Tokens.TokenKind.RPAREN) {\n+                do {\n+                    componentTypes.add(parseExternalTypeString(l));\n+                    componentNames.add(l.accept(Tokens.TokenKind.IDENTIFIER).name());\n+                } while(l.acceptIf(Tokens.TokenKind.COMMA));\n+            }\n+            l.accept(Tokens.TokenKind.RPAREN);\n+            ExternalizedTypeElement recordType = parseExternalTypeString(l);\n+            return JavaTypeUtils.recordRef(recordType, componentNames, componentTypes);\n+        }\n+        ExternalizedTypeElement refType = parseExternalTypeString(l);\n+\n+        l.accept(Tokens.TokenKind.COLCOL);\n+        if (l.is(Tokens.TokenKind.LPAREN)) {\n+            \/\/ constructor ref\n+            List<ExternalizedTypeElement> ptypes = parseParameterTypes(l);\n+            return JavaTypeUtils.constructorRef(refType, ptypes);\n+        }\n+\n+        \/\/ field or method ref\n+        String memberName = l.accept(Tokens.TokenKind.IDENTIFIER).name();\n+        if (l.is(Tokens.TokenKind.LPAREN)) {\n+            \/\/ method ref\n+            List<ExternalizedTypeElement> params = parseParameterTypes(l);\n+            l.accept(Tokens.TokenKind.COLON);\n+            ExternalizedTypeElement rtype = parseExternalTypeString(l);\n+            return JavaTypeUtils.methodRef(memberName, refType, rtype, params);\n+        } else {\n+            \/\/ field ref\n+            l.accept(Tokens.TokenKind.COLON);\n+            ExternalizedTypeElement ftype = parseExternalTypeString(l);\n+            return JavaTypeUtils.fieldRef(memberName, refType, ftype);\n+        }\n+    }\n+\n+    private static UnsupportedOperationException unsupported(ExternalizedTypeElement tree) {\n+        throw new UnsupportedOperationException(\"Unsupported type: \" + tree);\n+    }\n+}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/impl\/JavaTypeUtils.java","additions":706,"deletions":0,"binary":false,"changes":706,"status":"added"},{"patch":"@@ -44,1 +44,0 @@\n-    static final String NAME = \"&m\";\n@@ -144,2 +143,3 @@\n-        return new ExternalizedTypeElement(NAME,\n-                List.of(refType.externalize(), new ExternalizedTypeElement(name, List.of()), type.externalize()));\n+        return JavaTypeUtils.methodRef(name, refType.externalize(),\n+                type.returnType().externalize(),\n+                type.parameterTypes().stream().map(TypeElement::externalize).toList());\n@@ -150,3 +150,1 @@\n-        return refType.externalize() + \"::\" + name +\n-            type.parameterTypes().stream().map(t -> t.externalize().toString())\n-                    .collect(joining(\", \", \"(\", \")\")) + type.returnType().externalize();\n+        return JavaTypeUtils.toExternalRefString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/impl\/MethodRefImpl.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,3 +33,0 @@\n-import java.util.stream.Stream;\n-\n-import static java.util.stream.Collectors.joining;\n@@ -38,1 +35,0 @@\n-    static final String NAME = \"&r\";\n@@ -70,6 +66,3 @@\n-        return new ExternalizedTypeElement(NAME,\n-                Stream.concat(\n-                        Stream.of(recordType.externalize()),\n-                        components.stream().flatMap(cr ->\n-                                Stream.of(cr.type().externalize(), new ExternalizedTypeElement(cr.name(), List.of())))\n-                ).toList());\n+        return JavaTypeUtils.recordRef(recordType.externalize(),\n+                components.stream().map(ComponentRef::name).toList(),\n+                components.stream().map(c -> c.type().externalize()).toList());\n@@ -80,4 +73,1 @@\n-        return components.stream()\n-                .map(c -> c.type().externalize() + \" \" + c.name())\n-                .collect(joining(\", \", \"(\", \")\")) +\n-                recordType.externalize();\n+        return JavaTypeUtils.toExternalRefString(externalize());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/impl\/RecordTypeRefImpl.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -560,1 +561,1 @@\n-        write(te.externalize().toString());\n+        write(JavaTypeUtils.flatten(te.externalize()).toString());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/writer\/OpWriter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-            func @\"f\" (%0 : int, %1 : int)int -> {\n-                %2 : int = add %0 %1;\n+            func @\"f\" (%0 : java.type:\"int\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : java.type:\"int\" = add %0 %1;\n@@ -68,3 +68,3 @@\n-            func @\"ifelse\" (%0 : int, %1 : int, %2 : int)int -> {\n-                %3 : int = constant @\"10\";\n-                %4 : boolean = lt %2 %3;\n+            func @\"ifelse\" (%0 : java.type:\"int\", %1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %3 : java.type:\"int\" = constant @\"10\";\n+                %4 : java.type:\"boolean\" = lt %2 %3;\n@@ -74,2 +74,2 @@\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %0 %5;\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %0 %5;\n@@ -79,2 +79,2 @@\n-                %7 : int = constant @\"2\";\n-                %8 : int = add %1 %7;\n+                %7 : java.type:\"int\" = constant @\"2\";\n+                %8 : java.type:\"int\" = add %1 %7;\n@@ -83,2 +83,2 @@\n-              ^block_2(%9 : int, %10 : int):\n-                %11 : int = add %9 %10;\n+              ^block_2(%9 : java.type:\"int\", %10 : java.type:\"int\"):\n+                %11 : java.type:\"int\" = add %9 %10;\n@@ -104,3 +104,3 @@\n-            func @\"loop\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : int = constant @\"0\";\n+            func @\"loop\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n@@ -109,2 +109,2 @@\n-              ^block_0(%3 : int, %4 : int):\n-                %5 : boolean = lt %4 %0;\n+              ^block_0(%3 : java.type:\"int\", %4 : java.type:\"int\"):\n+                %5 : java.type:\"boolean\" = lt %4 %0;\n@@ -114,1 +114,1 @@\n-                %6 : int = add %3 %4;\n+                %6 : java.type:\"int\" = add %3 %4;\n@@ -118,2 +118,2 @@\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %4 %7;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %4 %7;\n@@ -143,3 +143,3 @@\n-            func @\"ifelseNested\" (%0 : int, %1 : int, %2 : int, %3 : int, %4 : int)int -> {\n-                %5 : int = constant @\"20\";\n-                %6 : boolean = lt %4 %5;\n+            func @\"ifelseNested\" (%0 : java.type:\"int\", %1 : java.type:\"int\", %2 : java.type:\"int\", %3 : java.type:\"int\", %4 : java.type:\"int\")java.type:\"int\" -> {\n+                %5 : java.type:\"int\" = constant @\"20\";\n+                %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -149,2 +149,2 @@\n-                %7 : int = constant @\"10\";\n-                %8 : boolean = lt %4 %7;\n+                %7 : java.type:\"int\" = constant @\"10\";\n+                %8 : java.type:\"boolean\" = lt %4 %7;\n@@ -154,2 +154,2 @@\n-                %9 : int = constant @\"1\";\n-                %10 : int = add %0 %9;\n+                %9 : java.type:\"int\" = constant @\"1\";\n+                %10 : java.type:\"int\" = add %0 %9;\n@@ -159,2 +159,2 @@\n-                %11 : int = constant @\"2\";\n-                %12 : int = add %1 %11;\n+                %11 : java.type:\"int\" = constant @\"2\";\n+                %12 : java.type:\"int\" = add %1 %11;\n@@ -163,3 +163,3 @@\n-              ^block_4(%13 : int, %14 : int):\n-                %15 : int = constant @\"3\";\n-                %16 : int = add %2 %15;\n+              ^block_4(%13 : java.type:\"int\", %14 : java.type:\"int\"):\n+                %15 : java.type:\"int\" = constant @\"3\";\n+                %16 : java.type:\"int\" = add %2 %15;\n@@ -169,2 +169,2 @@\n-                %17 : int = constant @\"20\";\n-                %18 : boolean = gt %4 %17;\n+                %17 : java.type:\"int\" = constant @\"20\";\n+                %18 : java.type:\"boolean\" = gt %4 %17;\n@@ -174,2 +174,2 @@\n-                %19 : int = constant @\"4\";\n-                %20 : int = add %0 %19;\n+                %19 : java.type:\"int\" = constant @\"4\";\n+                %20 : java.type:\"int\" = add %0 %19;\n@@ -179,2 +179,2 @@\n-                %21 : int = constant @\"5\";\n-                %22 : int = add %1 %21;\n+                %21 : java.type:\"int\" = constant @\"5\";\n+                %22 : java.type:\"int\" = add %1 %21;\n@@ -183,3 +183,3 @@\n-              ^block_8(%23 : int, %24 : int):\n-                %25 : int = constant @\"6\";\n-                %26 : int = add %3 %25;\n+              ^block_8(%23 : java.type:\"int\", %24 : java.type:\"int\"):\n+                %25 : java.type:\"int\" = constant @\"6\";\n+                %26 : java.type:\"int\" = add %3 %25;\n@@ -188,4 +188,4 @@\n-              ^block_5(%27 : int, %28 : int, %29 : int, %30 : int):\n-                %31 : int = add %27 %28;\n-                %32 : int = add %31 %29;\n-                %33 : int = add %32 %30;\n+              ^block_5(%27 : java.type:\"int\", %28 : java.type:\"int\", %29 : java.type:\"int\", %30 : java.type:\"int\"):\n+                %31 : java.type:\"int\" = add %27 %28;\n+                %32 : java.type:\"int\" = add %31 %29;\n+                %33 : java.type:\"int\" = add %32 %30;\n@@ -217,3 +217,3 @@\n-            func @\"loopNested\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : int = constant @\"0\";\n+            func @\"loopNested\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n@@ -222,2 +222,2 @@\n-              ^block_0(%3 : int, %4 : int):\n-                %5 : boolean = lt %4 %0;\n+              ^block_0(%3 : java.type:\"int\", %4 : java.type:\"int\"):\n+                %5 : java.type:\"boolean\" = lt %4 %0;\n@@ -227,1 +227,1 @@\n-                %6 : int = constant @\"0\";\n+                %6 : java.type:\"int\" = constant @\"0\";\n@@ -230,2 +230,2 @@\n-              ^block_3(%7 : int, %8 : int):\n-                %9 : boolean = lt %8 %0;\n+              ^block_3(%7 : java.type:\"int\", %8 : java.type:\"int\"):\n+                %9 : java.type:\"boolean\" = lt %8 %0;\n@@ -235,2 +235,2 @@\n-                %10 : int = add %7 %4;\n-                %11 : int = add %10 %8;\n+                %10 : java.type:\"int\" = add %7 %4;\n+                %11 : java.type:\"int\" = add %10 %8;\n@@ -240,2 +240,2 @@\n-                %12 : int = constant @\"1\";\n-                %13 : int = add %8 %12;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"int\" = add %8 %12;\n@@ -248,2 +248,2 @@\n-                %14 : int = constant @\"1\";\n-                %15 : int = add %4 %14;\n+                %14 : java.type:\"int\" = constant @\"1\";\n+                %15 : java.type:\"int\" = add %4 %14;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLiveness.java","additions":58,"deletions":58,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = invoke @\"C::m()int\";\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = invoke @\"C::m():int\";\n@@ -47,1 +47,1 @@\n-                %2 : int = invoke %1 @\"C::m(int)int\";\n+                %2 : java.type:\"int\" = invoke %1 @\"C::m(int):int\";\n@@ -50,2 +50,2 @@\n-              ^block_2(%3: int):\n-                %4 : int = invoke %2 %3 @\"C::m(int, int)int\";\n+              ^block_2(%3: java.type:\"int\"):\n+                %4 : java.type:\"int\" = invoke %2 %3 @\"C::m(int, int):int\";\n@@ -54,2 +54,2 @@\n-              ^block_3(%5: int):\n-                %6 : int = invoke %4 %3 %5 @\"C::m(int, int, int)int\";\n+              ^block_3(%5: java.type:\"int\"):\n+                %6 : java.type:\"int\" = invoke %4 %3 %5 @\"C::m(int, int, int):int\";\n@@ -63,5 +63,5 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = invoke @\"C::m()int\";\n-                %2 : int = invoke %1 @\"C::m(int)int\";\n-                %3 : int = invoke %2 %2 @\"C::m(int, int)int\";\n-                %4 : int = invoke %3 %2 %2 @\"C::m(int, int, int)int\";\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = invoke @\"C::m():int\";\n+                %2 : java.type:\"int\" = invoke %1 @\"C::m(int):int\";\n+                %3 : java.type:\"int\" = invoke %2 %2 @\"C::m(int, int):int\";\n+                %4 : java.type:\"int\" = invoke %3 %2 %2 @\"C::m(int, int, int):int\";\n@@ -73,2 +73,2 @@\n-            func @\"f\" (%0 : java.lang.Object)void -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+            func @\"f\" (%0 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n@@ -78,1 +78,1 @@\n-                %3 : int = invoke @\"A::try_()int\";\n+                %3 : java.type:\"int\" = invoke @\"A::try_():int\";\n@@ -84,1 +84,1 @@\n-              ^block_3(%4 : java.lang.RuntimeException):\n+              ^block_3(%4 : java.type:\"java.lang.RuntimeException\"):\n@@ -88,1 +88,1 @@\n-                %6 : Var<java.lang.RuntimeException> = var %4 @\"e\";\n+                %6 : Var<java.type:\"java.lang.RuntimeException\"> = var %4 @\"e\";\n@@ -95,1 +95,1 @@\n-                %7 : int = invoke @\"A::finally_()int\";\n+                %7 : java.type:\"int\" = invoke @\"A::finally_():int\";\n@@ -101,2 +101,2 @@\n-              ^block_8(%8 : java.lang.Throwable):\n-                %9 : int = invoke @\"A::finally_()int\";\n+              ^block_8(%8 : java.type:\"java.lang.Throwable\"):\n+                %9 : java.type:\"int\" = invoke @\"A::finally_():int\";\n@@ -107,2 +107,2 @@\n-            func @\"f\" (%0 : java.lang.Object)void -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+            func @\"f\" (%0 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n@@ -112,1 +112,1 @@\n-                %3 : int = invoke @\"A::try_()int\";\n+                %3 : java.type:\"int\" = invoke @\"A::try_():int\";\n@@ -115,1 +115,1 @@\n-              ^block_2(%4 : java.lang.RuntimeException):\n+              ^block_2(%4 : java.type:\"java.lang.RuntimeException\"):\n@@ -119,1 +119,1 @@\n-                %6 : Var<java.lang.RuntimeException> = var %4 @\"e\";\n+                %6 : Var<java.type:\"java.lang.RuntimeException\"> = var %4 @\"e\";\n@@ -123,1 +123,1 @@\n-                %7 : int = invoke @\"A::finally_()int\";\n+                %7 : java.type:\"int\" = invoke @\"A::finally_():int\";\n@@ -126,2 +126,2 @@\n-              ^block_5(%8 : java.lang.Throwable):\n-                %9 : int = invoke @\"A::finally_()int\";\n+              ^block_5(%8 : java.type:\"java.lang.Throwable\"):\n+                %9 : java.type:\"int\" = invoke @\"A::finally_():int\";\n@@ -132,3 +132,3 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : boolean = gt %0 %1;\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"boolean\" = gt %0 %1;\n@@ -138,1 +138,1 @@\n-                %3 : int = constant @\"1\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n@@ -145,1 +145,1 @@\n-                %4 : int = constant @\"-1\";\n+                %4 : java.type:\"int\" = constant @\"-1\";\n@@ -151,1 +151,1 @@\n-              ^block_3(%5 : int):\n+              ^block_3(%5 : java.type:\"int\"):\n@@ -155,3 +155,3 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : boolean = gt %0 %1;\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"boolean\" = gt %0 %1;\n@@ -161,1 +161,1 @@\n-                %3 : int = constant @\"1\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n@@ -165,1 +165,1 @@\n-                %4 : int = constant @\"-1\";\n+                %4 : java.type:\"int\" = constant @\"-1\";\n@@ -168,1 +168,1 @@\n-              ^block_3(%5 : int):\n+              ^block_3(%5 : java.type:\"int\"):\n@@ -174,3 +174,3 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : boolean = gt %0 %1;\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"boolean\" = gt %0 %1;\n@@ -180,1 +180,1 @@\n-                %3 : int = constant @\"1\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n@@ -187,1 +187,1 @@\n-                %4 : int = constant @\"-1\";\n+                %4 : java.type:\"int\" = constant @\"-1\";\n@@ -193,1 +193,1 @@\n-              ^block_3(%unused_1 : int, %5 : int, %unused_2 : int):\n+              ^block_3(%unused_1 : java.type:\"int\", %5 : java.type:\"int\", %unused_2 : java.type:\"int\"):\n@@ -197,3 +197,3 @@\n-            func @\"f\" (%0 : int)int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : boolean = gt %0 %1;\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"boolean\" = gt %0 %1;\n@@ -203,1 +203,1 @@\n-                %3 : int = constant @\"1\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n@@ -207,1 +207,1 @@\n-                %4 : int = constant @\"-1\";\n+                %4 : java.type:\"int\" = constant @\"-1\";\n@@ -210,1 +210,1 @@\n-              ^block_3(%5 : int):\n+              ^block_3(%5 : java.type:\"int\"):\n@@ -216,1 +216,1 @@\n-            func @\"f\" ()void -> {\n+            func @\"f\" ()java.type:\"void\" -> {\n@@ -220,1 +220,1 @@\n-                invoke @\"A::m()void\";\n+                invoke @\"A::m():void\";\n@@ -229,1 +229,1 @@\n-              ^block_4(%1 : java.lang.Throwable):\n+              ^block_4(%1 : java.type:\"java.lang.Throwable\"):\n@@ -237,1 +237,1 @@\n-            func @\"f\" ()void -> {\n+            func @\"f\" ()java.type:\"void\" -> {\n@@ -241,1 +241,1 @@\n-                invoke @\"A::m()void\";\n+                invoke @\"A::m():void\";\n@@ -247,1 +247,1 @@\n-              ^block_3(%1 : java.lang.Throwable):\n+              ^block_3(%1 : java.type:\"java.lang.Throwable\"):\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestNormalizeBlocksTransformer.java","additions":58,"deletions":58,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -46,4 +46,4 @@\n-            func @\"f\" (%0 : int, %1 : int)int -> {\n-                %2 : int = add %0 %1;\n-                %3 : boolean = lt %0 %1;\n-                %4 : void = cbranch %3 ^b1(%2, %2) ^b2(%0, %1);\n+            func @\"f\" (%0 : java.type:\"int\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : java.type:\"int\" = add %0 %1;\n+                %3 : java.type:\"boolean\" = lt %0 %1;\n+                %4 : java.type:\"void\" = cbranch %3 ^b1(%2, %2) ^b2(%0, %1);\n@@ -51,2 +51,2 @@\n-              ^b1(%5 : int, %6 : int):\n-                %7 : void = return %5;\n+              ^b1(%5 : java.type:\"int\", %6 : java.type:\"int\"):\n+                %7 : java.type:\"void\" = return %5;\n@@ -54,2 +54,2 @@\n-              ^b2(%8 : int, %9 : int):\n-                %10 : void = return %8;\n+              ^b2(%8 : java.type:\"int\", %9 : java.type:\"int\"):\n+                %10 : java.type:\"void\" = return %8;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestUsesDependsOn.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,6 +38,6 @@\n-            func @\"testFor\" (%0 : int[])int -> {\n-                %1 : Var<int[]> = var %0 @\"a\";\n-                %2 : int = constant @\"0\";\n-                %3 : Var<int> = var %2 @\"sum\";\n-                %4 : int = constant @\"0\";\n-                %5 : Var<int> = var %4 @\"i\";\n+            func @\"testFor\" (%0 : java.type:\"int[]\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int[]\"> = var %0 @\"a\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n+                %3 : Var<java.type:\"int\"> = var %2 @\"sum\";\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : Var<java.type:\"int\"> = var %4 @\"i\";\n@@ -47,4 +47,4 @@\n-                %6 : int = var.load %5;\n-                %7 : int[] = var.load %1;\n-                %8 : int = array.length %7;\n-                %9 : boolean = lt %6 %8;\n+                %6 : java.type:\"int\" = var.load %5;\n+                %7 : java.type:\"int[]\" = var.load %1;\n+                %8 : java.type:\"int\" = array.length %7;\n+                %9 : java.type:\"boolean\" = lt %6 %8;\n@@ -54,5 +54,5 @@\n-                %10 : int = var.load %3;\n-                %11 : int[] = var.load %1;\n-                %12 : int = var.load %5;\n-                %13 : int = array.load %11 %12;\n-                %14 : int = add %10 %13;\n+                %10 : java.type:\"int\" = var.load %3;\n+                %11 : java.type:\"int[]\" = var.load %1;\n+                %12 : java.type:\"int\" = var.load %5;\n+                %13 : java.type:\"int\" = array.load %11 %12;\n+                %14 : java.type:\"int\" = add %10 %13;\n@@ -63,3 +63,3 @@\n-                %15 : int = var.load %5;\n-                %16 : int = constant @\"1\";\n-                %17 : int = add %15 %16;\n+                %15 : java.type:\"int\" = var.load %5;\n+                %16 : java.type:\"int\" = constant @\"1\";\n+                %17 : java.type:\"int\" = add %15 %16;\n@@ -70,1 +70,1 @@\n-                %18 : int = var.load %3;\n+                %18 : java.type:\"int\" = var.load %3;\n@@ -84,3 +84,3 @@\n-            func @\"testForSSA\" (%0 : int[])int -> {\n-                %1 : int = constant @\"0\";\n-                %2 : int = constant @\"0\";\n+            func @\"testForSSA\" (%0 : java.type:\"int[]\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n@@ -89,3 +89,3 @@\n-              ^block_1(%3 : int, %4 : int):\n-                %5 : int = array.length %0;\n-                %6 : boolean = lt %3 %5;\n+              ^block_1(%3 : java.type:\"int\", %4 : java.type:\"int\"):\n+                %5 : java.type:\"int\" = array.length %0;\n+                %6 : java.type:\"boolean\" = lt %3 %5;\n@@ -95,2 +95,2 @@\n-                %7 : int = array.load %0 %3;\n-                %8 : int = add %4 %7;\n+                %7 : java.type:\"int\" = array.load %0 %3;\n+                %8 : java.type:\"int\" = add %4 %7;\n@@ -100,2 +100,2 @@\n-                %9 : int = constant @\"1\";\n-                %10 : int = add %3 %9;\n+                %9 : java.type:\"int\" = constant @\"1\";\n+                %10 : java.type:\"int\" = add %3 %9;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/TestLoop.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -39,4 +39,4 @@\n-            func @\"test1\" (%0 : java.lang.Object, %1 : int)int -> {\n-                %2 : Var<java.lang.Object> = var %0 @\"m\";\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : java.lang.Object = var.load %2;\n+            func @\"test1\" (%0 : java.type:\"java.lang.Object\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %0 @\"m\";\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %2;\n@@ -45,1 +45,1 @@\n-              ^block_1(%5 : java.lang.Object):\n+              ^block_1(%5 : java.type:\"java.lang.Object\"):\n@@ -50,3 +50,3 @@\n-                %7 : int = var.load %3;\n-                %8 : int = constant @\"1\";\n-                %9 : int = add %7 %8;\n+                %7 : java.type:\"int\" = var.load %3;\n+                %8 : java.type:\"int\" = constant @\"1\";\n+                %9 : java.type:\"int\" = add %7 %8;\n@@ -58,1 +58,1 @@\n-                %10 : int = var.load %3;\n+                %10 : java.type:\"int\" = var.load %3;\n@@ -61,1 +61,1 @@\n-              ^block_4(%11 : java.lang.Throwable):\n+              ^block_4(%11 : java.type:\"java.lang.Throwable\"):\n@@ -82,4 +82,4 @@\n-            func @\"test2\" (%0 : java.lang.Object, %1 : int)int -> {\n-                %2 : Var<java.lang.Object> = var %0 @\"m\";\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : java.lang.Object = var.load %2;\n+            func @\"test2\" (%0 : java.type:\"java.lang.Object\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %0 @\"m\";\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %2;\n@@ -88,1 +88,1 @@\n-              ^block_1(%5 : java.lang.Object):\n+              ^block_1(%5 : java.type:\"java.lang.Object\"):\n@@ -93,3 +93,3 @@\n-                %7 : int = var.load %3;\n-                %8 : int = constant @\"0\";\n-                %9 : boolean = gt %7 %8;\n+                %7 : java.type:\"int\" = var.load %3;\n+                %8 : java.type:\"int\" = constant @\"0\";\n+                %9 : java.type:\"boolean\" = gt %7 %8;\n@@ -99,1 +99,1 @@\n-                %10 : int = constant @\"-1\";\n+                %10 : java.type:\"int\" = constant @\"-1\";\n@@ -110,3 +110,3 @@\n-                %11 : int = var.load %3;\n-                %12 : int = constant @\"1\";\n-                %13 : int = add %11 %12;\n+                %11 : java.type:\"int\" = var.load %3;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"int\" = add %11 %12;\n@@ -118,1 +118,1 @@\n-                %14 : int = var.load %3;\n+                %14 : java.type:\"int\" = var.load %3;\n@@ -121,1 +121,1 @@\n-              ^block_8(%15 : java.lang.Throwable):\n+              ^block_8(%15 : java.type:\"java.lang.Throwable\"):\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/TestSynchronized.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -88,3 +88,3 @@\n-            func @\"test\" ^body1(%0 : int, %1 : int)int -> {\n-                %2 : int = constant @\"5\";\n-                %3 : int = constant @\"2\";\n+            func @\"test\" ^body1(%0 : java.type:\"int\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : java.type:\"int\" = constant @\"5\";\n+                %3 : java.type:\"int\" = constant @\"2\";\n@@ -93,1 +93,1 @@\n-              ^b1(%0 : int, %1 : int):\n+              ^b1(%0 : java.type:\"int\", %1 : java.type:\"int\"):\n@@ -106,2 +106,2 @@\n-            func @\"test\" ()String -> {\n-                %0 : java.lang.String = constant @\"\\\\b \\\\f \\\\n \\\\r \\\\t \\\\' \\\\\" \\\\\\\\\";\n+            func @\"test\" ()java.type:\"java.lang.String\" -> {\n+                %0 : java.type:\"java.lang.String\" = constant @\"\\\\b \\\\f \\\\n \\\\r \\\\t \\\\' \\\\\" \\\\\\\\\";\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestParse.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,0 +24,3 @@\n+import jdk.incubator.code.type.PrimitiveType;\n+import jdk.incubator.code.type.TypeVariableType;\n+import jdk.incubator.code.type.WildcardType;\n@@ -183,1 +186,27 @@\n-        Assert.assertEquals(type.getTypeName(), javaType.toString());\n+        Assert.assertEquals(type.getTypeName(),\n+                replaceTypeVariables(javaType).toString()\n+                        .replaceAll(\"::\", \"\\\\$\"));\n+    }\n+\n+    JavaType replaceTypeVariables(JavaType type) {\n+        \/\/ This type transformation replaces type variables with simple class types.\n+        \/\/ This obtains a JavaType whose toString behaves the same as Type::getTypeName\n+        return switch (type) {\n+            case PrimitiveType p -> p;\n+            case WildcardType w -> JavaType.wildcard(w.boundKind(), replaceTypeVariables(w.boundType()));\n+            case ArrayType a -> JavaType.array(replaceTypeVariables(a.componentType()));\n+            case ClassType c -> {\n+                ClassType res = c.rawType();\n+                if (c.enclosingType().isPresent()) {\n+                    JavaType encl = replaceTypeVariables(c.enclosingType().get());\n+                    String nestedName = c.toClassName().substring(encl.toNominalDescriptor().displayName().length() + 1);\n+                    res = JavaType.qualified(replaceTypeVariables(c.enclosingType().get()), nestedName);\n+                }\n+                if (c.hasTypeArguments()) {\n+                    res = JavaType.parameterized(res,\n+                            c.typeArguments().stream().map(this::replaceTypeVariables).toList());\n+                }\n+                yield res;\n+            }\n+            case TypeVariableType t -> JavaType.type(ClassDesc.of(t.name()));\n+        };\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -33,0 +34,3 @@\n+\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -37,1 +41,1 @@\n- * @modules jdk.incubator.code\n+ * @modules jdk.incubator.code\/jdk.incubator.code.type.impl\n@@ -46,7 +50,7 @@\n-                {\"a::b()void\", \"a\", \"b\"},\n-                {\"a.b::c(int)int\", \"a.b\", \"c\"},\n-                {\"a.b.c::d(int, int)int\", \"a.b.c\", \"d\"},\n-                {\"a::b(Func<String, Number>, Entry<List<String>, val>, int, long)void\", \"a\", \"b\"},\n-                {\"java.io.PrintStream::println(java.lang.String)void\", \"java.io.PrintStream\", \"println\"},\n-                {\"MethodReferenceTest$A::m(java.lang.Object)java.lang.Object\", \"MethodReferenceTest$A\", \"m\"},\n-                {\"R<#T<R, java.lang.Number>>::n()#T<R, java.lang.Number>\", \"R<#T<R, java.lang.Number>>\", \"n\"}\n+                {\"a::b():void\", \"a\", \"b\"},\n+                {\"a.b::c(int):int\", \"a.b\", \"c\"},\n+                {\"a.b.c::d(int, int):int\", \"a.b.c\", \"d\"},\n+                {\"a::b(Func<String, Number>, Entry<List<String>, val>, int, long):void\", \"a\", \"b\"},\n+                {\"java.io.PrintStream::println(java.lang.String):void\", \"java.io.PrintStream\", \"println\"},\n+                {\"MethodReferenceTest$A::m(java.lang.Object):java.lang.Object\", \"MethodReferenceTest$A\", \"m\"},\n+                {\"R<R::<T extends java.lang.Number>>::n():R::<T extends java.lang.Number>\", \"R<R::<T extends java.lang.Number>>\", \"n\"}\n@@ -60,1 +64,1 @@\n-        Assert.assertEquals(mr.refType().externalize().toString(), refType);\n+        Assert.assertEquals(mr.refType().toString(), refType);\n@@ -68,7 +72,7 @@\n-                {\"&m<a, b, func<void>>\", \"a\", \"b\"},\n-                {\"&m<a.b, c, func<int, int>>\", \"a.b\", \"c\"},\n-                {\"&m<a.b.c, d, func<int, int, int>>\", \"a.b.c\", \"d\"},\n-                {\"&m<a, b, func<void, Func<String, Number>, Entry<List<String>, val>, int, long>>\", \"a\", \"b\"},\n-                {\"&m<java.io.PrintStream, println, func<void, java.lang.String>>\", \"java.io.PrintStream\", \"println\"},\n-                {\"&m<MethodReferenceTest$A, m, func<java.lang.Object, java.lang.Object>>\", \"MethodReferenceTest$A\", \"m\"},\n-                {\"&m<R<#T<R, java.lang.Number>>, n, func<#T<R, java.lang.Number>>>\", \"R<#T<R, java.lang.Number>>\", \"n\"}\n+                {\"java.ref:\\\"a::b():void\\\"\", \"a\", \"b\"},\n+                {\"java.ref:\\\"a.b::c(int):int\\\"\", \"a.b\", \"c\"},\n+                {\"java.ref:\\\"a.b.c::d(int, int):int\\\"\", \"a.b.c\", \"d\"},\n+                {\"java.ref:\\\"a::b(Func<String, Number>, Entry<List<String>, val>, int, long):void\\\"\", \"a\", \"b\"},\n+                {\"java.ref:\\\"java.io.PrintStream::println(java.lang.String):void\\\"\", \"java.io.PrintStream\", \"println\"},\n+                {\"java.ref:\\\"MethodReferenceTest$A::m(java.lang.Object):java.lang.Object\\\"\", \"MethodReferenceTest$A\", \"m\"},\n+                {\"java.ref:\\\"R<R::<T extends java.lang.Number>>::n():R::<T extends java.lang.Number>\\\"\", \"R<R::<T extends java.lang.Number>>\", \"n\"}\n@@ -81,3 +85,3 @@\n-        MethodRef mr = (MethodRef) CoreTypeFactory.CORE_TYPE_FACTORY.constructType(emr);\n-        Assert.assertEquals(mr.externalize().toString(), mds);\n-        Assert.assertEquals(mr.refType().externalize().toString(), refType);\n+        MethodRef mr = (MethodRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.inflate(emr));\n+        Assert.assertEquals(JavaTypeUtils.flatten(mr.externalize()).toString(), mds);\n+        Assert.assertEquals(mr.refType().toString(), refType);\n@@ -91,2 +95,2 @@\n-                {\"MethodReferenceTest$X::<new>(int)\", \"MethodReferenceTest$X\"},\n-                {\"MethodReferenceTest$A[]::<new>(int)\", \"MethodReferenceTest$A[]\"},\n+                {\"MethodReferenceTest$X::(int)\", \"MethodReferenceTest$X\"},\n+                {\"MethodReferenceTest$A[]::(int)\", \"MethodReferenceTest$A[]\"},\n@@ -100,1 +104,1 @@\n-        Assert.assertEquals(cr.refType().externalize().toString(), refType);\n+        Assert.assertEquals(cr.refType().toString(), refType);\n@@ -106,2 +110,2 @@\n-                {\"&c<func<MethodReferenceTest$X, int>>\", \"MethodReferenceTest$X\"},\n-                {\"&c<func<MethodReferenceTest$A[], int>>\", \"MethodReferenceTest$A[]\"},\n+                {\"java.ref:\\\"MethodReferenceTest$X::(int)\\\"\", \"MethodReferenceTest$X\"},\n+                {\"java.ref:\\\"MethodReferenceTest$A[]::(int)\\\"\", \"MethodReferenceTest$A[]\"},\n@@ -114,1 +118,1 @@\n-        ConstructorRef cr = (ConstructorRef) CoreTypeFactory.CORE_TYPE_FACTORY.constructType(ecr);\n+        ConstructorRef cr = (ConstructorRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.inflate(ecr));\n@@ -116,2 +120,2 @@\n-        Assert.assertEquals(cr.externalize().toString(), crs);\n-        Assert.assertEquals(cr.refType().externalize().toString(), refType);\n+        Assert.assertEquals(JavaTypeUtils.flatten(cr.externalize()).toString(), crs);\n+        Assert.assertEquals(cr.refType().toString(), refType);\n@@ -124,4 +128,4 @@\n-                {\"a.b::c()int\", \"a.b\", \"c\", \"int\"},\n-                {\"a.b.c::d()int\", \"a.b.c\", \"d\", \"int\"},\n-                {\"java.lang.System::out()java.io.PrintStream\", \"java.lang.System\", \"out\", \"java.io.PrintStream\"},\n-                {\"R<#T<R, java.lang.Number>>::n()#T<R, java.lang.Number>\", \"R<#T<R, java.lang.Number>>\", \"n\", \"#T<R, java.lang.Number>\"}\n+                {\"a.b::c:int\", \"a.b\", \"c\", \"int\"},\n+                {\"a.b.c::d:int\", \"a.b.c\", \"d\", \"int\"},\n+                {\"java.lang.System::out:java.io.PrintStream\", \"java.lang.System\", \"out\", \"java.io.PrintStream\"},\n+                {\"R<R::<T extends java.lang.Number>>::n:R::<T extends java.lang.Number>\", \"R<R::<T extends java.lang.Number>>\", \"n\", \"R::<T extends java.lang.Number>\"}\n@@ -135,1 +139,1 @@\n-        Assert.assertEquals(fr.refType().externalize().toString(), refType);\n+        Assert.assertEquals(fr.refType().toString(), refType);\n@@ -137,1 +141,1 @@\n-        Assert.assertEquals(fr.type().externalize().toString(), type);\n+        Assert.assertEquals(fr.type().toString(), type);\n@@ -143,4 +147,4 @@\n-                {\"&f<a.b, c, int>\", \"a.b\", \"c\", \"int\"},\n-                {\"&f<a.b.c, d, int>\", \"a.b.c\", \"d\", \"int\"},\n-                {\"&f<java.lang.System, out, java.io.PrintStream>\", \"java.lang.System\", \"out\", \"java.io.PrintStream\"},\n-                {\"&f<R<#T<R, java.lang.Number>>, n, #T<R, java.lang.Number>>\", \"R<#T<R, java.lang.Number>>\", \"n\", \"#T<R, java.lang.Number>\"}\n+                {\"java.ref:\\\"a.b::c:int\\\"\", \"a.b\", \"c\", \"int\"},\n+                {\"java.ref:\\\"a.b.c::d:int\\\"\", \"a.b.c\", \"d\", \"int\"},\n+                {\"java.ref:\\\"java.lang.System::out:java.io.PrintStream\\\"\", \"java.lang.System\", \"out\", \"java.io.PrintStream\"},\n+                {\"java.ref:\\\"R<R::<T extends java.lang.Number>>::n:R::<T extends java.lang.Number>\\\"\", \"R<R::<T extends java.lang.Number>>\", \"n\", \"R::<T extends java.lang.Number>\"}\n@@ -153,1 +157,1 @@\n-        FieldRef fr = (FieldRef) CoreTypeFactory.CORE_TYPE_FACTORY.constructType(efr);\n+        FieldRef fr = (FieldRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.inflate(efr));\n@@ -155,2 +159,2 @@\n-        Assert.assertEquals(fr.externalize().toString(), frs);\n-        Assert.assertEquals(fr.refType().externalize().toString(), refType);\n+        Assert.assertEquals(JavaTypeUtils.flatten(fr.externalize()).toString(), frs);\n+        Assert.assertEquals(fr.refType().toString(), refType);\n@@ -158,1 +162,1 @@\n-        Assert.assertEquals(fr.type().externalize().toString(), type);\n+        Assert.assertEquals(fr.type().toString(), type);\n@@ -169,1 +173,1 @@\n-                {\"(#T<R, java.lang.Number> n)R<#T<R, java.lang.Number>>\"}\n+                {\"(R::<T extends java.lang.Number> n)R<R::<T extends java.lang.Number>>\"}\n@@ -182,6 +186,5 @@\n-                {\"&r<A>\"},\n-                {\"&r<A, B, b>\"},\n-                {\"&r<A, B, b, C, c>\"},\n-                {\"&r<p.A<R>, p.Func<String, Number>, f, Entry<List<String>, val>, e, int, i, long, l>\"},\n-                \/\/ @@@ Fails because of externalize().toString()\n-                {\"&r<R<#T<R, java.lang.Number>>, #T<R, java.lang.Number>, n>\"}\n+                {\"java.ref:\\\"()A\\\"\"},\n+                {\"java.ref:\\\"(B b)A\\\"\"},\n+                {\"java.ref:\\\"(B b, C c)A\\\"\"},\n+                {\"java.ref:\\\"(p.Func<String, Number> f, Entry<List<String>, val> e, int i, long l)p.A<R>\\\"\"},\n+                {\"java.ref:\\\"(R::<T extends java.lang.Number> n)R<R::<T extends java.lang.Number>>\\\"\"}\n@@ -194,2 +197,2 @@\n-        RecordTypeRef rtr = (RecordTypeRef) CoreTypeFactory.CORE_TYPE_FACTORY.constructType(ertr);\n-        Assert.assertEquals(rtr.externalize().toString(), rtds);\n+        RecordTypeRef rtr = (RecordTypeRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.inflate(ertr));\n+        Assert.assertEquals(JavaTypeUtils.flatten(rtr.externalize()).toString(), rtds);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestReferences.java","additions":53,"deletions":50,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,5 +38,5 @@\n-            func @\"test1\" (%0 : ArrayAccessTest, %1 : int[])int -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : int = array.load %3 %4;\n+            func @\"test1\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"int\" = array.load %3 %4;\n@@ -52,8 +52,8 @@\n-            func @\"test2\" (%0 : ArrayAccessTest, %1 : int[], %2 : int)int -> {\n-                %3 : Var<int[]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[] = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %6 %7;\n-                %9 : int = array.load %5 %8;\n+            func @\"test2\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %3 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[]\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %6 %7;\n+                %9 : java.type:\"int\" = array.load %5 %8;\n@@ -69,5 +69,5 @@\n-            func @\"test3\" (%0 : ArrayAccessTest, %1 : int[])void -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : int = constant @\"1\";\n+            func @\"test3\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n@@ -84,8 +84,8 @@\n-            func @\"test4\" (%0 : ArrayAccessTest, %1 : int[], %2 : int)void -> {\n-                %3 : Var<int[]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[] = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %6 %7;\n-                %9 : int = constant @\"1\";\n+            func @\"test4\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[]\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %6 %7;\n+                %9 : java.type:\"int\" = constant @\"1\";\n@@ -102,12 +102,12 @@\n-            func @\"test5\" (%0 : ArrayAccessTest, %1 : int[][], %2 : int)int -> {\n-                %3 : Var<int[][]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[][] = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %6 %7;\n-                %9 : int[] = array.load %5 %8;\n-                %10 : int = var.load %4;\n-                %11 : int = constant @\"2\";\n-                %12 : int = add %10 %11;\n-                %13 : int = array.load %9 %12;\n+            func @\"test5\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[][]\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %3 : Var<java.type:\"int[][]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[][]\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %6 %7;\n+                %9 : java.type:\"int[]\" = array.load %5 %8;\n+                %10 : java.type:\"int\" = var.load %4;\n+                %11 : java.type:\"int\" = constant @\"2\";\n+                %12 : java.type:\"int\" = add %10 %11;\n+                %13 : java.type:\"int\" = array.load %9 %12;\n@@ -123,12 +123,12 @@\n-            func @\"test6\" (%0 : ArrayAccessTest, %1 : int[][], %2 : int)void -> {\n-                %3 : Var<int[][]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[][] = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %6 %7;\n-                %9 : int[] = array.load %5 %8;\n-                %10 : int = var.load %4;\n-                %11 : int = constant @\"2\";\n-                %12 : int = add %10 %11;\n-                %13 : int = constant @\"1\";\n+            func @\"test6\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[][]\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int[][]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[][]\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %6 %7;\n+                %9 : java.type:\"int[]\" = array.load %5 %8;\n+                %10 : java.type:\"int\" = var.load %4;\n+                %11 : java.type:\"int\" = constant @\"2\";\n+                %12 : java.type:\"int\" = add %10 %11;\n+                %13 : java.type:\"int\" = constant @\"1\";\n@@ -147,4 +147,4 @@\n-            func @\"test7\" (%0 : ArrayAccessTest)int -> {\n-                %1 : int[] = field.load %0 @\"ArrayAccessTest::ia()int[]\";\n-                %2 : int = constant @\"0\";\n-                %3 : int = array.load %1 %2;\n+            func @\"test7\" (%0 : java.type:\"ArrayAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int[]\" = field.load %0 @\"ArrayAccessTest::ia:int[]\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n+                %3 : java.type:\"int\" = array.load %1 %2;\n@@ -160,4 +160,4 @@\n-            func @\"test8\" (%0 : ArrayAccessTest)int -> {\n-                %1 : int[] = field.load %0 @\"ArrayAccessTest::ia()int[]\";\n-                %2 : int = constant @\"0\";\n-                %3 : int = array.load %1 %2;\n+            func @\"test8\" (%0 : java.type:\"ArrayAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int[]\" = field.load %0 @\"ArrayAccessTest::ia:int[]\";\n+                %2 : java.type:\"int\" = constant @\"0\";\n+                %3 : java.type:\"int\" = array.load %1 %2;\n@@ -177,6 +177,6 @@\n-            func @\"test9\" (%0 : ArrayAccessTest, %1 : ArrayAccessTest$A[])int -> {\n-                %2 : Var<ArrayAccessTest$A[]> = var %1 @\"aa\";\n-                %3 : ArrayAccessTest$A[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : ArrayAccessTest$A = array.load %3 %4;\n-                %6 : int = field.load %5 @\"ArrayAccessTest$A::i()int\";\n+            func @\"test9\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"ArrayAccessTest$A[]\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"ArrayAccessTest$A[]\"> = var %1 @\"aa\";\n+                %3 : java.type:\"ArrayAccessTest$A[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"ArrayAccessTest$A\" = array.load %3 %4;\n+                %6 : java.type:\"int\" = field.load %5 @\"ArrayAccessTest$A::i:int\";\n@@ -192,7 +192,7 @@\n-            func @\"test10\" (%0 : ArrayAccessTest, %1 : ArrayAccessTest$A[])void -> {\n-                %2 : Var<ArrayAccessTest$A[]> = var %1 @\"aa\";\n-                %3 : ArrayAccessTest$A[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : ArrayAccessTest$A = array.load %3 %4;\n-                %6 : int = constant @\"1\";\n-                field.store %5 %6 @\"ArrayAccessTest$A::i()int\";\n+            func @\"test10\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"ArrayAccessTest$A[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"ArrayAccessTest$A[]\"> = var %1 @\"aa\";\n+                %3 : java.type:\"ArrayAccessTest$A[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"ArrayAccessTest$A\" = array.load %3 %4;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                field.store %5 %6 @\"ArrayAccessTest$A::i:int\";\n@@ -208,7 +208,7 @@\n-            func @\"test11\" (%0 : ArrayAccessTest, %1 : int[])void -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : int = array.load %3 %4;\n-                %6 : int = constant @\"1\";\n-                %7 : int = add %5 %6;\n+            func @\"test11\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"int\" = array.load %3 %4;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -225,12 +225,12 @@\n-            func @\"test12\" (%0 : ArrayAccessTest, %1 : int[], %2 : int)void -> {\n-                %3 : Var<int[]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[] = var.load %3;\n-                %6 : int = constant @\"1\";\n-                %7 : int[] = var.load %3;\n-                %8 : int = var.load %4;\n-                %9 : int = constant @\"2\";\n-                %10 : int = add %8 %9;\n-                %11 : int = array.load %7 %10;\n-                %12 : int = constant @\"1\";\n-                %13 : int = add %11 %12;\n+            func @\"test12\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[]\" = var.load %3;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int[]\" = var.load %3;\n+                %8 : java.type:\"int\" = var.load %4;\n+                %9 : java.type:\"int\" = constant @\"2\";\n+                %10 : java.type:\"int\" = add %8 %9;\n+                %11 : java.type:\"int\" = array.load %7 %10;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"int\" = add %11 %12;\n@@ -248,13 +248,13 @@\n-            func @\"test13\" (%0 : ArrayAccessTest, %1 : int[], %2 : int)void -> {\n-                %3 : Var<int[]> = var %1 @\"ia\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int[] = var.load %3;\n-                %6 : int = constant @\"1\";\n-                %7 : int = array.load %5 %6;\n-                %8 : int[] = var.load %3;\n-                %9 : int = var.load %4;\n-                %10 : int = constant @\"2\";\n-                %11 : int = add %9 %10;\n-                %12 : int = array.load %8 %11;\n-                %13 : int = constant @\"1\";\n-                %14 : int = add %12 %13;\n+            func @\"test13\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[]\" = var.load %3;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = array.load %5 %6;\n+                %8 : java.type:\"int[]\" = var.load %3;\n+                %9 : java.type:\"int\" = var.load %4;\n+                %10 : java.type:\"int\" = constant @\"2\";\n+                %11 : java.type:\"int\" = add %9 %10;\n+                %12 : java.type:\"int\" = array.load %8 %11;\n+                %13 : java.type:\"int\" = constant @\"1\";\n+                %14 : java.type:\"int\" = add %12 %13;\n@@ -262,1 +262,1 @@\n-                %15 : int = add %7 %14;\n+                %15 : java.type:\"int\" = add %7 %14;\n@@ -274,7 +274,7 @@\n-            func @\"test14\" (%0 : ArrayAccessTest, %1 : int[])void -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : int = array.load %3 %4;\n-                %6 : int = constant @\"1\";\n-                %7 : int = add %5 %6;\n+            func @\"test14\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"int\" = array.load %3 %4;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -282,6 +282,6 @@\n-                %8 : Var<int> = var %5 @\"x\";\n-                %9 : int[] = var.load %2;\n-                %10 : int = constant @\"0\";\n-                %11 : int = array.load %9 %10;\n-                %12 : int = constant @\"1\";\n-                %13 : int = sub %11 %12;\n+                %8 : Var<java.type:\"int\"> = var %5 @\"x\";\n+                %9 : java.type:\"int[]\" = var.load %2;\n+                %10 : java.type:\"int\" = constant @\"0\";\n+                %11 : java.type:\"int\" = array.load %9 %10;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"int\" = sub %11 %12;\n@@ -289,1 +289,1 @@\n-                %14 : Var<int> = var %11 @\"y\";\n+                %14 : Var<java.type:\"int\"> = var %11 @\"y\";\n@@ -300,7 +300,7 @@\n-            func @\"test15\" (%0 : ArrayAccessTest, %1 : int[])void -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : int = array.load %3 %4;\n-                %6 : int = constant @\"1\";\n-                %7 : int = add %5 %6;\n+            func @\"test15\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"int\" = array.load %3 %4;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -308,6 +308,6 @@\n-                %8 : Var<int> = var %7 @\"x\";\n-                %9 : int[] = var.load %2;\n-                %10 : int = constant @\"0\";\n-                %11 : int = array.load %9 %10;\n-                %12 : int = constant @\"1\";\n-                %13 : int = sub %11 %12;\n+                %8 : Var<java.type:\"int\"> = var %7 @\"x\";\n+                %9 : java.type:\"int[]\" = var.load %2;\n+                %10 : java.type:\"int\" = constant @\"0\";\n+                %11 : java.type:\"int\" = array.load %9 %10;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"int\" = sub %11 %12;\n@@ -315,1 +315,1 @@\n-                %14 : Var<int> = var %13 @\"y\";\n+                %14 : Var<java.type:\"int\"> = var %13 @\"y\";\n@@ -326,7 +326,7 @@\n-            func @\"test16\" (%0 : ArrayAccessTest, %1 : int[])int -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n-                %3 : int[] = var.load %2;\n-                %4 : int = array.length %3;\n-                %5 : int[] = var.load %2;\n-                %6 : int = invoke %5 @\"java.lang.Object::hashCode()int\";\n-                %7 : int = add %4 %6;\n+            func @\"test16\" (%0 : java.type:\"ArrayAccessTest\", %1 : java.type:\"int[]\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %3 : java.type:\"int[]\" = var.load %2;\n+                %4 : java.type:\"int\" = array.length %3;\n+                %5 : java.type:\"int[]\" = var.load %2;\n+                %6 : java.type:\"int\" = invoke %5 @\"java.lang.Object::hashCode():int\";\n+                %7 : java.type:\"int\" = add %4 %6;\n@@ -342,6 +342,6 @@\n-            func @\"test17\" (%0 : java.lang.Object[])java.lang.Object -> {\n-                %1 : Var<java.lang.Object[]> = var %0 @\"a\";\n-                %2 : java.lang.Object[] = var.load %1;\n-                %3 : char = constant @\"c\";\n-                %4 : int = conv %3;\n-                %5 : java.lang.Object = array.load %2 %4;\n+            func @\"test17\" (%0 : java.type:\"java.lang.Object[]\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.Object[]\"> = var %0 @\"a\";\n+                %2 : java.type:\"java.lang.Object[]\" = var.load %1;\n+                %3 : java.type:\"char\" = constant @\"c\";\n+                %4 : java.type:\"int\" = conv %3;\n+                %5 : java.type:\"java.lang.Object\" = array.load %2 %4;\n","filename":"test\/langtools\/tools\/javac\/reflect\/ArrayAccessTest.java","additions":146,"deletions":146,"binary":false,"changes":292,"status":"modified"},{"patch":"@@ -38,15 +38,15 @@\n-              func @\"assertTest\" (%0 : int)void -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  assert\n-                      ()boolean -> {\n-                          %2 : int = var.load %1;\n-                          %3 : int = constant @\"1\";\n-                          %4 : boolean = eq %2 %3;\n-                          yield %4;\n-                      }\n-                      ()java.lang.String -> {\n-                          %5 : java.lang.String = constant @\"i does not equal 1\";\n-                          yield %5;\n-                      };\n-                  return;\n-              };\n+            func @\"assertTest\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                assert\n+                    ()java.type:\"boolean\" -> {\n+                        %2 : java.type:\"int\" = var.load %1;\n+                        %3 : java.type:\"int\" = constant @\"1\";\n+                        %4 : java.type:\"boolean\" = eq %2 %3;\n+                        yield %4;\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"i does not equal 1\";\n+                        yield %5;\n+                    };\n+                return;\n+            };\n@@ -60,10 +60,10 @@\n-            func @\"assertTest2\" (%0 : int)void -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  assert ()boolean -> {\n-                      %2 : int = var.load %1;\n-                      %3 : int = constant @\"1\";\n-                      %4 : boolean = eq %2 %3;\n-                      yield %4;\n-                  };\n-                  return;\n-              };\n+            func @\"assertTest2\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                assert ()java.type:\"boolean\" -> {\n+                    %2 : java.type:\"int\" = var.load %1;\n+                    %3 : java.type:\"int\" = constant @\"1\";\n+                    %4 : java.type:\"boolean\" = eq %2 %3;\n+                    yield %4;\n+                };\n+                return;\n+            };\n","filename":"test\/langtools\/tools\/javac\/reflect\/AssertTest.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -39,8 +39,8 @@\n-            func @\"test\" (%0 : BinopTest)int -> {\n-                %1 : int = constant @\"5\";\n-                %2 : int = constant @\"2\";\n-                %3 : int = constant @\"4\";\n-                %4 : int = mul %2 %3;\n-                %5 : int = add %1 %4;\n-                %6 : int = constant @\"3\";\n-                %7 : int = sub %5 %6;\n+            func @\"test\" (%0 : java.type:\"BinopTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"5\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"int\" = constant @\"4\";\n+                %4 : java.type:\"int\" = mul %2 %3;\n+                %5 : java.type:\"int\" = add %1 %4;\n+                %6 : java.type:\"int\" = constant @\"3\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n@@ -56,8 +56,8 @@\n-            func @\"test2\" (%0 : BinopTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : int = constant @\"2\";\n-                %3 : int = constant @\"3\";\n-                %4 : int = constant @\"4\";\n-                %5 : int = add %3 %4;\n-                %6 : int = add %2 %5;\n-                %7 : int = add %1 %6;\n+            func @\"test2\" (%0 : java.type:\"BinopTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"int\" = constant @\"3\";\n+                %4 : java.type:\"int\" = constant @\"4\";\n+                %5 : java.type:\"int\" = add %3 %4;\n+                %6 : java.type:\"int\" = add %2 %5;\n+                %7 : java.type:\"int\" = add %1 %6;\n@@ -73,8 +73,8 @@\n-            func @\"test3\" (%0 : BinopTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : int = constant @\"2\";\n-                %3 : int = add %1 %2;\n-                %4 : int = constant @\"3\";\n-                %5 : int = add %3 %4;\n-                %6 : int = constant @\"4\";\n-                %7 : int = add %5 %6;\n+            func @\"test3\" (%0 : java.type:\"BinopTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                %4 : java.type:\"int\" = constant @\"3\";\n+                %5 : java.type:\"int\" = add %3 %4;\n+                %6 : java.type:\"int\" = constant @\"4\";\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -90,5 +90,5 @@\n-            func @\"test4\" (%0 : BinopTest, %1 : int)int -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : int = add %3 %4;\n+            func @\"test4\" (%0 : java.type:\"BinopTest\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"int\" = add %3 %4;\n@@ -96,3 +96,3 @@\n-                %6 : int = var.load %2;\n-                %7 : int = constant @\"1\";\n-                %8 : int = mul %6 %7;\n+                %6 : java.type:\"int\" = var.load %2;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = mul %6 %7;\n@@ -100,4 +100,4 @@\n-                %9 : int = add %5 %8;\n-                %10 : int = var.load %2;\n-                %11 : int = constant @\"1\";\n-                %12 : int = div %10 %11;\n+                %9 : java.type:\"int\" = add %5 %8;\n+                %10 : java.type:\"int\" = var.load %2;\n+                %11 : java.type:\"int\" = constant @\"1\";\n+                %12 : java.type:\"int\" = div %10 %11;\n@@ -105,4 +105,4 @@\n-                %13 : int = add %9 %12;\n-                %14 : int = var.load %2;\n-                %15 : int = constant @\"1\";\n-                %16 : int = sub %14 %15;\n+                %13 : java.type:\"int\" = add %9 %12;\n+                %14 : java.type:\"int\" = var.load %2;\n+                %15 : java.type:\"int\" = constant @\"1\";\n+                %16 : java.type:\"int\" = sub %14 %15;\n@@ -110,4 +110,4 @@\n-                %17 : int = add %13 %16;\n-                %18 : int = var.load %2;\n-                %19 : int = constant @\"1\";\n-                %20 : int = mod %18 %19;\n+                %17 : java.type:\"int\" = add %13 %16;\n+                %18 : java.type:\"int\" = var.load %2;\n+                %19 : java.type:\"int\" = constant @\"1\";\n+                %20 : java.type:\"int\" = mod %18 %19;\n@@ -115,1 +115,1 @@\n-                %21 : int = add %17 %20;\n+                %21 : java.type:\"int\" = add %17 %20;\n@@ -125,6 +125,6 @@\n-            func @\"test5\" (%0 : BinopTest, %1 : int)boolean -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : boolean = eq %3 %4;\n-                %6 : boolean = not %5;\n+            func @\"test5\" (%0 : java.type:\"BinopTest\", %1 : java.type:\"int\")java.type:\"boolean\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"boolean\" = eq %3 %4;\n+                %6 : java.type:\"boolean\" = not %5;\n@@ -140,4 +140,4 @@\n-            func @\"test6\" (%0 : BinopTest)int -> {\n-                %1 : int = constant @\"5\";\n-                %2 : int = constant @\"2\";\n-                %3 : int = mod %1 %2;\n+            func @\"test6\" (%0 : java.type:\"BinopTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"5\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"int\" = mod %1 %2;\n@@ -153,6 +153,6 @@\n-            func @\"test7\" (%0 : BinopTest, %1 : double)void -> {\n-                %2 : Var<double> = var %1 @\"d\";\n-                %3 : double = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : double = conv %4;\n-                %6 : double = add %3 %5;\n+            func @\"test7\" (%0 : java.type:\"BinopTest\", %1 : java.type:\"double\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"double\"> = var %1 @\"d\";\n+                %3 : java.type:\"double\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"double\" = conv %4;\n+                %6 : java.type:\"double\" = add %3 %5;\n@@ -160,4 +160,4 @@\n-                %7 : long = constant @\"1\";\n-                %8 : double = conv %7;\n-                %9 : double = var.load %2;\n-                %10 : double = add %8 %9;\n+                %7 : java.type:\"long\" = constant @\"1\";\n+                %8 : java.type:\"double\" = conv %7;\n+                %9 : java.type:\"double\" = var.load %2;\n+                %10 : java.type:\"double\" = add %8 %9;\n@@ -165,4 +165,4 @@\n-                %11 : double = var.load %2;\n-                %12 : long = constant @\"1\";\n-                %13 : double = conv %12;\n-                %14 : double = sub %11 %13;\n+                %11 : java.type:\"double\" = var.load %2;\n+                %12 : java.type:\"long\" = constant @\"1\";\n+                %13 : java.type:\"double\" = conv %12;\n+                %14 : java.type:\"double\" = sub %11 %13;\n@@ -170,4 +170,4 @@\n-                %15 : int = constant @\"1\";\n-                %16 : double = conv %15;\n-                %17 : double = var.load %2;\n-                %18 : double = sub %16 %17;\n+                %15 : java.type:\"int\" = constant @\"1\";\n+                %16 : java.type:\"double\" = conv %15;\n+                %17 : java.type:\"double\" = var.load %2;\n+                %18 : java.type:\"double\" = sub %16 %17;\n@@ -175,4 +175,4 @@\n-                %19 : double = var.load %2;\n-                %20 : int = constant @\"1\";\n-                %21 : double = conv %20;\n-                %22 : double = mul %19 %21;\n+                %19 : java.type:\"double\" = var.load %2;\n+                %20 : java.type:\"int\" = constant @\"1\";\n+                %21 : java.type:\"double\" = conv %20;\n+                %22 : java.type:\"double\" = mul %19 %21;\n@@ -180,4 +180,4 @@\n-                %23 : long = constant @\"1\";\n-                %24 : double = conv %23;\n-                %25 : double = var.load %2;\n-                %26 : double = mul %24 %25;\n+                %23 : java.type:\"long\" = constant @\"1\";\n+                %24 : java.type:\"double\" = conv %23;\n+                %25 : java.type:\"double\" = var.load %2;\n+                %26 : java.type:\"double\" = mul %24 %25;\n@@ -185,4 +185,4 @@\n-                %27 : double = var.load %2;\n-                %28 : long = constant @\"1\";\n-                %29 : double = conv %28;\n-                %30 : double = div %27 %29;\n+                %27 : java.type:\"double\" = var.load %2;\n+                %28 : java.type:\"long\" = constant @\"1\";\n+                %29 : java.type:\"double\" = conv %28;\n+                %30 : java.type:\"double\" = div %27 %29;\n@@ -190,4 +190,4 @@\n-                %31 : int = constant @\"1\";\n-                %32 : double = conv %31;\n-                %33 : double = var.load %2;\n-                %34 : double = div %32 %33;\n+                %31 : java.type:\"int\" = constant @\"1\";\n+                %32 : java.type:\"double\" = conv %31;\n+                %33 : java.type:\"double\" = var.load %2;\n+                %34 : java.type:\"double\" = div %32 %33;\n@@ -195,4 +195,4 @@\n-                %35 : double = var.load %2;\n-                %36 : int = constant @\"1\";\n-                %37 : double = conv %36;\n-                %38 : double = mod %35 %37;\n+                %35 : java.type:\"double\" = var.load %2;\n+                %36 : java.type:\"int\" = constant @\"1\";\n+                %37 : java.type:\"double\" = conv %36;\n+                %38 : java.type:\"double\" = mod %35 %37;\n@@ -200,4 +200,4 @@\n-                %39 : long = constant @\"1\";\n-                %40 : double = conv %39;\n-                %41 : double = var.load %2;\n-                %42 : double = mod %40 %41;\n+                %39 : java.type:\"long\" = constant @\"1\";\n+                %40 : java.type:\"double\" = conv %39;\n+                %41 : java.type:\"double\" = var.load %2;\n+                %42 : java.type:\"double\" = mod %40 %41;\n@@ -205,2 +205,2 @@\n-                %43 : int = constant @\"-1\";\n-                %44 : double = conv %43;\n+                %43 : java.type:\"int\" = constant @\"-1\";\n+                %44 : java.type:\"double\" = conv %43;\n@@ -232,6 +232,6 @@\n-            func @\"test8\" (%0 : BinopTest, %1 : double)void -> {\n-                %2 : Var<double> = var %1 @\"d\";\n-                %3 : double = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : double = conv %4;\n-                %6 : double = add %3 %5;\n+            func @\"test8\" (%0 : java.type:\"BinopTest\", %1 : java.type:\"double\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"double\"> = var %1 @\"d\";\n+                %3 : java.type:\"double\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"double\" = conv %4;\n+                %6 : java.type:\"double\" = add %3 %5;\n@@ -239,4 +239,4 @@\n-                %7 : double = var.load %2;\n-                %8 : long = constant @\"1\";\n-                %9 : double = conv %8;\n-                %10 : double = sub %7 %9;\n+                %7 : java.type:\"double\" = var.load %2;\n+                %8 : java.type:\"long\" = constant @\"1\";\n+                %9 : java.type:\"double\" = conv %8;\n+                %10 : java.type:\"double\" = sub %7 %9;\n@@ -244,4 +244,4 @@\n-                %11 : double = var.load %2;\n-                %12 : int = constant @\"1\";\n-                %13 : double = conv %12;\n-                %14 : double = mul %11 %13;\n+                %11 : java.type:\"double\" = var.load %2;\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                %13 : java.type:\"double\" = conv %12;\n+                %14 : java.type:\"double\" = mul %11 %13;\n@@ -249,4 +249,4 @@\n-                %15 : double = var.load %2;\n-                %16 : long = constant @\"1\";\n-                %17 : double = conv %16;\n-                %18 : double = div %15 %17;\n+                %15 : java.type:\"double\" = var.load %2;\n+                %16 : java.type:\"long\" = constant @\"1\";\n+                %17 : java.type:\"double\" = conv %16;\n+                %18 : java.type:\"double\" = div %15 %17;\n@@ -254,4 +254,4 @@\n-                %19 : double = var.load %2;\n-                %20 : int = constant @\"1\";\n-                %21 : double = conv %20;\n-                %22 : double = mod %19 %21;\n+                %19 : java.type:\"double\" = var.load %2;\n+                %20 : java.type:\"int\" = constant @\"1\";\n+                %21 : java.type:\"double\" = conv %20;\n+                %22 : java.type:\"double\" = mod %19 %21;\n@@ -276,7 +276,7 @@\n-            func @\"test9\" (%0 : BinopTest, %1 : byte, %2 : byte, %3 : short)void -> {\n-                %4 : Var<byte> = var %1 @\"a\";\n-                %5 : Var<byte> = var %2 @\"b\";\n-                %6 : Var<short> = var %3 @\"s\";\n-                %7 : byte = var.load %4;\n-                %8 : byte = var.load %5;\n-                %9 : byte = add %7 %8;\n+            func @\"test9\" (%0 : java.type:\"BinopTest\", %1 : java.type:\"byte\", %2 : java.type:\"byte\", %3 : java.type:\"short\")java.type:\"void\" -> {\n+                %4 : Var<java.type:\"byte\"> = var %1 @\"a\";\n+                %5 : Var<java.type:\"byte\"> = var %2 @\"b\";\n+                %6 : Var<java.type:\"short\"> = var %3 @\"s\";\n+                %7 : java.type:\"byte\" = var.load %4;\n+                %8 : java.type:\"byte\" = var.load %5;\n+                %9 : java.type:\"byte\" = add %7 %8;\n@@ -284,4 +284,4 @@\n-                %10 : byte = var.load %4;\n-                %11 : short = var.load %6;\n-                %12 : byte = conv %11;\n-                %13 : byte = div %10 %12;\n+                %10 : java.type:\"byte\" = var.load %4;\n+                %11 : java.type:\"short\" = var.load %6;\n+                %12 : java.type:\"byte\" = conv %11;\n+                %13 : java.type:\"byte\" = div %10 %12;\n@@ -289,4 +289,4 @@\n-                %14 : byte = var.load %4;\n-                %15 : double = constant @\"3.5\";\n-                %16 : byte = conv %15;\n-                %17 : byte = mul %14 %16;\n+                %14 : java.type:\"byte\" = var.load %4;\n+                %15 : java.type:\"double\" = constant @\"3.5\";\n+                %16 : java.type:\"byte\" = conv %15;\n+                %17 : java.type:\"byte\" = mul %14 %16;\n@@ -294,3 +294,3 @@\n-                %18 : byte = var.load %4;\n-                %19 : byte = var.load %5;\n-                %20 : byte = lshl %18 %19;\n+                %18 : java.type:\"byte\" = var.load %4;\n+                %19 : java.type:\"byte\" = var.load %5;\n+                %20 : java.type:\"byte\" = lshl %18 %19;\n@@ -298,4 +298,4 @@\n-                %21 : byte = var.load %4;\n-                %22 : int = constant @\"1\";\n-                %23 : byte = conv %22;\n-                %24 : byte = ashr %21 %23;\n+                %21 : java.type:\"byte\" = var.load %4;\n+                %22 : java.type:\"int\" = constant @\"1\";\n+                %23 : java.type:\"byte\" = conv %22;\n+                %24 : java.type:\"byte\" = ashr %21 %23;\n@@ -303,4 +303,4 @@\n-                %25 : byte = var.load %4;\n-                %26 : long = constant @\"1\";\n-                %27 : byte = conv %26;\n-                %28 : byte = ashr %25 %27;\n+                %25 : java.type:\"byte\" = var.load %4;\n+                %26 : java.type:\"long\" = constant @\"1\";\n+                %27 : java.type:\"byte\" = conv %26;\n+                %28 : java.type:\"byte\" = ashr %25 %27;\n","filename":"test\/langtools\/tools\/javac\/reflect\/BinopTest.java","additions":147,"deletions":147,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-            func @\"test1\" (%0 : BlockTest)void -> {\n-                java.block ()void -> {\n-                    %1 : int = constant @\"0\";\n-                    %2 : Var<int> = var %1 @\"i\";\n+            func @\"test1\" (%0 : java.type:\"BlockTest\")java.type:\"void\" -> {\n+                java.block ()java.type:\"void\" -> {\n+                    %1 : java.type:\"int\" = constant @\"0\";\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -46,6 +46,6 @@\n-                java.block ()void -> {\n-                    %3 : int = constant @\"1\";\n-                    %4 : Var<int> = var %3 @\"i\";\n-                    java.block ()void -> {\n-                        %5 : int = constant @\"2\";\n-                        %6 : Var<int> = var %5 @\"j\";\n+                java.block ()java.type:\"void\" -> {\n+                    %3 : java.type:\"int\" = constant @\"1\";\n+                    %4 : Var<java.type:\"int\"> = var %3 @\"i\";\n+                    java.block ()java.type:\"void\" -> {\n+                        %5 : java.type:\"int\" = constant @\"2\";\n+                        %6 : Var<java.type:\"int\"> = var %5 @\"j\";\n@@ -75,2 +75,2 @@\n-            func @\"test2\" (%0 : BlockTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test2\" (%0 : java.type:\"BlockTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -78,4 +78,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -84,5 +84,5 @@\n-                    ^then()void -> {\n-                        java.block ()void -> {\n-                            %6 : int = var.load %2;\n-                            %7 : int = constant @\"1\";\n-                            %8 : int = add %6 %7;\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %6 : java.type:\"int\" = var.load %2;\n+                            %7 : java.type:\"int\" = constant @\"1\";\n+                            %8 : java.type:\"int\" = add %6 %7;\n@@ -94,4 +94,4 @@\n-                    ^else_if()boolean -> {\n-                        %9 : int = var.load %2;\n-                        %10 : int = constant @\"2\";\n-                        %11 : boolean = lt %9 %10;\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"int\" = var.load %2;\n+                        %10 : java.type:\"int\" = constant @\"2\";\n+                        %11 : java.type:\"boolean\" = lt %9 %10;\n@@ -100,5 +100,5 @@\n-                    ^then()void -> {\n-                        java.block ()void -> {\n-                            %12 : int = var.load %2;\n-                            %13 : int = constant @\"2\";\n-                            %14 : int = add %12 %13;\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %12 : java.type:\"int\" = var.load %2;\n+                            %13 : java.type:\"int\" = constant @\"2\";\n+                            %14 : java.type:\"int\" = add %12 %13;\n@@ -110,5 +110,5 @@\n-                    ^else()void -> {\n-                        java.block ()void -> {\n-                            %15 : int = var.load %2;\n-                            %16 : int = constant @\"3\";\n-                            %17 : int = add %15 %16;\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %15 : java.type:\"int\" = var.load %2;\n+                            %16 : java.type:\"int\" = constant @\"3\";\n+                            %17 : java.type:\"int\" = add %15 %16;\n@@ -141,1 +141,1 @@\n-            func @\"test3\" (%0 : BlockTest)void -> {\n+            func @\"test3\" (%0 : java.type:\"BlockTest\")java.type:\"void\" -> {\n@@ -143,1 +143,1 @@\n-                    ^init()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -146,2 +146,2 @@\n-                    ^cond()boolean -> {\n-                        %1 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %1 : java.type:\"boolean\" = constant @\"true\";\n@@ -150,1 +150,1 @@\n-                    ^update()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -153,4 +153,4 @@\n-                    ^body()void -> {\n-                        java.block ()void -> {\n-                            %2 : int = constant @\"0\";\n-                            %3 : Var<int> = var %2 @\"i\";\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %2 : java.type:\"int\" = constant @\"0\";\n+                            %3 : Var<java.type:\"int\"> = var %2 @\"i\";\n@@ -174,2 +174,2 @@\n-            func @\"test4\" (%0 : BlockTest, %1 : int[])void -> {\n-                %2 : Var<int[]> = var %1 @\"ia\";\n+            func @\"test4\" (%0 : java.type:\"BlockTest\", %1 : java.type:\"int[]\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n@@ -177,2 +177,2 @@\n-                    ^expr()int[] -> {\n-                        %3 : int[] = var.load %2;\n+                    ()java.type:\"int[]\" -> {\n+                        %3 : java.type:\"int[]\" = var.load %2;\n@@ -181,2 +181,2 @@\n-                    ^def(%4 : int)Var<int> -> {\n-                        %5 : Var<int> = var %4 @\"i\";\n+                    (%4 : java.type:\"int\")Var<java.type:\"int\"> -> {\n+                        %5 : Var<java.type:\"int\"> = var %4 @\"i\";\n@@ -185,5 +185,5 @@\n-                    ^body(%6 : Var<int>)void -> {\n-                        java.block ()void -> {\n-                            %7 : int = var.load %6;\n-                            %8 : int = constant @\"1\";\n-                            %9 : int = add %7 %8;\n+                    (%6 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %7 : java.type:\"int\" = var.load %6;\n+                            %8 : java.type:\"int\" = constant @\"1\";\n+                            %9 : java.type:\"int\" = add %7 %8;\n@@ -208,7 +208,7 @@\n-            func @\"test5\" (%0 : BlockTest)void -> {\n-                %1 : java.util.function.Consumer<java.lang.String> = lambda (%2 : java.lang.String)void -> {\n-                    %3 : Var<java.lang.String> = var %2 @\"s\";\n-                    java.block ()void -> {\n-                        %4 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %5 : java.lang.String = var.load %3;\n-                        invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String)void\";\n+            func @\"test5\" (%0 : java.type:\"BlockTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Consumer<java.lang.String>\" = lambda (%2 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"s\";\n+                    java.block ()java.type:\"void\" -> {\n+                        %4 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %5 : java.type:\"java.lang.String\" = var.load %3;\n+                        invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -219,1 +219,1 @@\n-                %6 : Var<java.util.function.Consumer<java.lang.String>> = var %1 @\"c\";\n+                %6 : Var<java.type:\"java.util.function.Consumer<java.lang.String>\"> = var %1 @\"c\";\n@@ -234,33 +234,33 @@\n-            func @\"test6\" (%0 : BlockTest)void -> {\n-                 java.if\n-                     ()boolean -> {\n-                         %1 : boolean = constant @\"true\";\n-                         yield %1;\n-                     }\n-                     ^then()void -> {\n-                         java.block ()void -> {\n-                             return;\n-                         };\n-                         yield;\n-                     }\n-                     ^else()void -> {\n-                         yield;\n-                     };\n-                 java.if\n-                     ()boolean -> {\n-                         %2 : boolean = constant @\"true\";\n-                         yield %2;\n-                     }\n-                     ^then()void -> {\n-                         java.block ()void -> {\n-                             %3 : java.lang.RuntimeException = new @\"java.lang.RuntimeException::<new>()\";\n-                             throw %3;\n-                         };\n-                         yield;\n-                     }\n-                     ^else()void -> {\n-                         yield;\n-                     };\n-                 return;\n-             };\n-             \"\"\")\n+            func @\"test6\" (%0 : java.type:\"BlockTest\")java.type:\"void\" -> {\n+                java.if\n+                    ()java.type:\"boolean\" -> {\n+                        %1 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %1;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            return;\n+                        };\n+                        yield;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        yield;\n+                    };\n+                java.if\n+                    ()java.type:\"boolean\" -> {\n+                        %2 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %2;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %3 : java.type:\"java.lang.RuntimeException\" = new @\"java.lang.RuntimeException::()\";\n+                            throw %3;\n+                        };\n+                        yield;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n","filename":"test\/langtools\/tools\/javac\/reflect\/BlockTest.java","additions":96,"deletions":96,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -39,5 +39,5 @@\n-            func @\"test1\" (%0 : BoxingConversionTest)void -> {\n-                  %1 : long = constant @\"1\";\n-                  %2 : java.lang.Long = invoke %1 @\"java.lang.Long::valueOf(long)java.lang.Long\";\n-                  %3 : Var<java.lang.Long> = var %2 @\"x\";\n-                  return;\n+            func @\"test1\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"long\" = constant @\"1\";\n+                %2 : java.type:\"java.lang.Long\" = invoke %1 @\"java.lang.Long::valueOf(long):java.lang.Long\";\n+                %3 : Var<java.type:\"java.lang.Long\"> = var %2 @\"x\";\n+                return;\n@@ -52,5 +52,5 @@\n-            func @\"test2\" (%0 : BoxingConversionTest, %1 : java.lang.Long)void -> {\n-                %2 : Var<java.lang.Long> = var %1 @\"L\";\n-                %3 : java.lang.Long = var.load %2;\n-                %4 : long = invoke %3 @\"java.lang.Long::longValue()long\";\n-                %5 : Var<long> = var %4 @\"l\";\n+            func @\"test2\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"java.lang.Long\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Long\"> = var %1 @\"L\";\n+                %3 : java.type:\"java.lang.Long\" = var.load %2;\n+                %4 : java.type:\"long\" = invoke %3 @\"java.lang.Long::longValue():long\";\n+                %5 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -66,4 +66,4 @@\n-            func @\"test3\" (%0 : BoxingConversionTest)void -> {\n-                %1 : long = constant @\"0\";\n-                %2 : java.lang.Long = invoke %1 @\"java.lang.Long::valueOf(long)java.lang.Long\";\n-                %3 : Var<java.lang.Object> = var %2 @\"o\";\n+            func @\"test3\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"long\" = constant @\"0\";\n+                %2 : java.type:\"java.lang.Long\" = invoke %1 @\"java.lang.Long::valueOf(long):java.lang.Long\";\n+                %3 : Var<java.type:\"java.lang.Object\"> = var %2 @\"o\";\n@@ -79,6 +79,6 @@\n-            func @\"test4\" (%0 : BoxingConversionTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : java.lang.Long = cast %3 @\"java.lang.Long\";\n-                %5 : long = invoke %4 @\"java.lang.Long::longValue()long\";\n-                %6 : Var<long> = var %5 @\"l\";\n+            func @\"test4\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"java.lang.Long\" = cast %3 @\"java.lang.Long\";\n+                %5 : java.type:\"long\" = invoke %4 @\"java.lang.Long::longValue():long\";\n+                %6 : Var<java.type:\"long\"> = var %5 @\"l\";\n@@ -94,7 +94,7 @@\n-            func @\"test5\" (%0 : BoxingConversionTest, %1 : java.lang.Integer)void -> {\n-                %2 : Var<java.lang.Integer> = var %1 @\"i2\";\n-                %3 : java.lang.Integer = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : int = invoke %3 @\"java.lang.Integer::intValue()int\";\n-                %6 : int = add %5 %4;\n-                %7 : java.lang.Integer = invoke %6 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test5\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Integer\"> = var %1 @\"i2\";\n+                %3 : java.type:\"java.lang.Integer\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"int\" = invoke %3 @\"java.lang.Integer::intValue():int\";\n+                %6 : java.type:\"int\" = add %5 %4;\n+                %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -111,7 +111,7 @@\n-            func @\"test6\" (%0 : BoxingConversionTest, %1 : java.lang.Integer)void -> {\n-                %2 : Var<java.lang.Integer> = var %1 @\"i2\";\n-                %3 : java.lang.Integer = var.load %2;\n-                %4 : int = constant @\"3\";\n-                %5 : int = invoke %3 @\"java.lang.Integer::intValue()int\";\n-                %6 : int = add %5 %4;\n-                %7 : java.lang.Integer = invoke %6 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test6\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Integer\"> = var %1 @\"i2\";\n+                %3 : java.type:\"java.lang.Integer\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"3\";\n+                %5 : java.type:\"int\" = invoke %3 @\"java.lang.Integer::intValue():int\";\n+                %6 : java.type:\"int\" = add %5 %4;\n+                %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -132,8 +132,8 @@\n-            func @\"test7\" (%0 : BoxingConversionTest)void -> {\n-                %1 : BoxingConversionTest$Box = new @\"BoxingConversionTest$Box::<new>()\";\n-                %2 : java.lang.Integer = field.load %1 @\"BoxingConversionTest$Box::i()java.lang.Integer\";\n-                %3 : int = constant @\"1\";\n-                %4 : int = invoke %2 @\"java.lang.Integer::intValue()int\";\n-                %5 : int = add %4 %3;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                field.store %1 %6 @\"BoxingConversionTest$Box::i()java.lang.Integer\";\n+            func @\"test7\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"BoxingConversionTest$Box\" = new @\"BoxingConversionTest$Box::()\";\n+                %2 : java.type:\"java.lang.Integer\" = field.load %1 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                %4 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %5 : java.type:\"int\" = add %4 %3;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                field.store %1 %6 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -149,8 +149,8 @@\n-            func @\"test8\" (%0 : BoxingConversionTest)void -> {\n-                %1 : BoxingConversionTest$Box = new @\"BoxingConversionTest$Box::<new>()\";\n-                %2 : java.lang.Integer = field.load %1 @\"BoxingConversionTest$Box::i()java.lang.Integer\";\n-                %3 : int = constant @\"3\";\n-                %4 : int = invoke %2 @\"java.lang.Integer::intValue()int\";\n-                %5 : int = add %4 %3;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                field.store %1 %6 @\"BoxingConversionTest$Box::i()java.lang.Integer\";\n+            func @\"test8\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"BoxingConversionTest$Box\" = new @\"BoxingConversionTest$Box::()\";\n+                %2 : java.type:\"java.lang.Integer\" = field.load %1 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %3 : java.type:\"int\" = constant @\"3\";\n+                %4 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %5 : java.type:\"int\" = add %4 %3;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                field.store %1 %6 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -166,9 +166,9 @@\n-            func @\"test9\" (%0 : BoxingConversionTest, %1 : int[], %2 : java.lang.Integer)void -> {\n-                %3 : Var<int[]> = var %1 @\"ia\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"i\";\n-                %5 : int[] = var.load %3;\n-                %6 : int = constant @\"0\";\n-                %7 : int = array.load %5 %6;\n-                %8 : java.lang.Integer = var.load %4;\n-                %9 : int = invoke %8 @\"java.lang.Integer::intValue()int\";\n-                %10 : int = add %7 %9;\n+            func @\"test9\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int[]\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int[]\"> = var %1 @\"ia\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"i\";\n+                %5 : java.type:\"int[]\" = var.load %3;\n+                %6 : java.type:\"int\" = constant @\"0\";\n+                %7 : java.type:\"int\" = array.load %5 %6;\n+                %8 : java.type:\"java.lang.Integer\" = var.load %4;\n+                %9 : java.type:\"int\" = invoke %8 @\"java.lang.Integer::intValue():int\";\n+                %10 : java.type:\"int\" = add %7 %9;\n@@ -185,6 +185,6 @@\n-            func @\"test10\" (%0 : BoxingConversionTest, %1 : boolean, %2 : java.lang.Integer)void -> {\n-                %3 : Var<boolean> = var %1 @\"cond\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = java.cexpression\n-                    ^cond()boolean -> {\n-                        %6 : boolean = var.load %3;\n+            func @\"test10\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %6 : java.type:\"boolean\" = var.load %3;\n@@ -193,3 +193,3 @@\n-                    ^truepart()int -> {\n-                        %7 : java.lang.Integer = var.load %4;\n-                        %8 : int = invoke %7 @\"java.lang.Integer::intValue()int\";\n+                    ()java.type:\"int\" -> {\n+                        %7 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %8 : java.type:\"int\" = invoke %7 @\"java.lang.Integer::intValue():int\";\n@@ -198,2 +198,2 @@\n-                    ^falsepart()int -> {\n-                        %9 : int = constant @\"2\";\n+                    ()java.type:\"int\" -> {\n+                        %9 : java.type:\"int\" = constant @\"2\";\n@@ -202,1 +202,1 @@\n-                %10 : Var<int> = var %5 @\"res\";\n+                %10 : Var<java.type:\"int\"> = var %5 @\"res\";\n@@ -212,6 +212,6 @@\n-            func @\"test11\" (%0 : BoxingConversionTest, %1 : boolean, %2 : java.lang.Integer)void -> {\n-                %3 : Var<boolean> = var %1 @\"cond\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = java.cexpression\n-                    ^cond()boolean -> {\n-                        %6 : boolean = var.load %3;\n+            func @\"test11\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %6 : java.type:\"boolean\" = var.load %3;\n@@ -220,2 +220,2 @@\n-                    ^truepart()int -> {\n-                        %7 : int = constant @\"2\";\n+                    ()java.type:\"int\" -> {\n+                        %7 : java.type:\"int\" = constant @\"2\";\n@@ -224,3 +224,3 @@\n-                    ^falsepart()int -> {\n-                        %8 : java.lang.Integer = var.load %4;\n-                        %9 : int = invoke %8 @\"java.lang.Integer::intValue()int\";\n+                    ()java.type:\"int\" -> {\n+                        %8 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %9 : java.type:\"int\" = invoke %8 @\"java.lang.Integer::intValue():int\";\n@@ -229,1 +229,1 @@\n-                %10 : Var<int> = var %5 @\"res\";\n+                %10 : Var<java.type:\"int\"> = var %5 @\"res\";\n@@ -239,20 +239,20 @@\n-            func @\"test12\" (%0 : BoxingConversionTest, %1 : boolean)void -> {\n-                 %2 : Var<boolean> = var %1 @\"cond\";\n-                 %3 : int = java.cexpression\n-                     ^cond()boolean -> {\n-                         %4 : boolean = var.load %2;\n-                         yield %4;\n-                     }\n-                     ^truepart()int -> {\n-                         %5 : int = constant @\"1\";\n-                         yield %5;\n-                     }\n-                     ^falsepart()int -> {\n-                         %6 : int = constant @\"2\";\n-                         yield %6;\n-                     };\n-                 %7 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                 %8 : Var<java.lang.Integer> = var %7 @\"x\";\n-                 return;\n-             };\n-             \"\"\")\n+            func @\"test12\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"boolean\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = var.load %2;\n+                        yield %4;\n+                    }\n+                    ()java.type:\"int\" -> {\n+                        %5 : java.type:\"int\" = constant @\"1\";\n+                        yield %5;\n+                    }\n+                    ()java.type:\"int\" -> {\n+                        %6 : java.type:\"int\" = constant @\"2\";\n+                        yield %6;\n+                    };\n+                %7 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %8 : Var<java.type:\"java.lang.Integer\"> = var %7 @\"x\";\n+                return;\n+            };\n+            \"\"\")\n@@ -265,4 +265,4 @@\n-            func @\"test13\" (%0 : BoxingConversionTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.Integer> = lambda ()java.lang.Integer -> {\n-                    %2 : int = constant @\"1\";\n-                    %3 : java.lang.Integer = invoke %2 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test13\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = lambda ()java.type:\"java.lang.Integer\" -> {\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -271,1 +271,1 @@\n-                %4 : Var<java.util.function.Supplier<java.lang.Integer>> = var %1 @\"s\";\n+                %4 : Var<java.type:\"java.util.function.Supplier<java.lang.Integer>\"> = var %1 @\"s\";\n@@ -281,4 +281,4 @@\n-            func @\"test14\" (%0 : BoxingConversionTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.Integer> = lambda ()java.lang.Integer -> {\n-                    %2 : int = constant @\"1\";\n-                    %3 : java.lang.Integer = invoke %2 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test14\" (%0 : java.type:\"BoxingConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = lambda ()java.type:\"java.lang.Integer\" -> {\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -287,1 +287,1 @@\n-                %4 : Var<java.util.function.Supplier<java.lang.Integer>> = var %1 @\"s\";\n+                %4 : Var<java.type:\"java.util.function.Supplier<java.lang.Integer>\"> = var %1 @\"s\";\n@@ -297,8 +297,8 @@\n-            func @\"test15\" (%0 : BoxingConversionTest, %1 : int, %2 : java.lang.Integer)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = var.load %3;\n-                %6 : int = java.switch.expression %5\n-                    ^constantCaseLabel(%7 : int)boolean -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : boolean = eq %7 %8;\n+            func @\"test15\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = java.switch.expression %5\n+                    (%7 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"boolean\" = eq %7 %8;\n@@ -307,3 +307,3 @@\n-                    ()int -> {\n-                        %10 : java.lang.Integer = var.load %4;\n-                        %11 : int = invoke %10 @\"java.lang.Integer::intValue()int\";\n+                    ()java.type:\"int\" -> {\n+                        %10 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %11 : java.type:\"int\" = invoke %10 @\"java.lang.Integer::intValue():int\";\n@@ -312,6 +312,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n-                    }\n-                    ()int -> {\n-                        %12 : int = constant @\"0\";\n+                    ()java.type:\"boolean\" -> {\n+                        %12 : java.type:\"boolean\" = constant @\"true\";\n@@ -319,0 +315,4 @@\n+                    }\n+                    ()java.type:\"int\" -> {\n+                        %13 : java.type:\"int\" = constant @\"0\";\n+                        yield %13;\n@@ -320,1 +320,1 @@\n-                %13 : Var<int> = var %6 @\"x\";\n+                %14 : Var<java.type:\"int\"> = var %6 @\"x\";\n@@ -333,8 +333,8 @@\n-            func @\"test16\" (%0 : BoxingConversionTest, %1 : int, %2 : java.lang.Integer)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = var.load %3;\n-                %6 : int = java.switch.expression %5\n-                    ^constantCaseLabel(%7 : int)boolean -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : boolean = eq %7 %8;\n+            func @\"test16\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = java.switch.expression %5\n+                    (%7 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"boolean\" = eq %7 %8;\n@@ -343,2 +343,2 @@\n-                    ()int -> {\n-                        %10 : int = constant @\"1\";\n+                    ()java.type:\"int\" -> {\n+                        %10 : java.type:\"int\" = constant @\"1\";\n@@ -347,3 +347,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %11;\n@@ -351,4 +351,4 @@\n-                    ()int -> {\n-                        %11 : java.lang.Integer = var.load %4;\n-                        %12 : int = invoke %11 @\"java.lang.Integer::intValue()int\";\n-                        yield %12;\n+                    ()java.type:\"int\" -> {\n+                        %12 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %13 : java.type:\"int\" = invoke %12 @\"java.lang.Integer::intValue():int\";\n+                        yield %13;\n@@ -356,1 +356,1 @@\n-                %13 : Var<int> = var %6 @\"x\";\n+                %14 : Var<java.type:\"int\"> = var %6 @\"x\";\n@@ -369,7 +369,7 @@\n-            func @\"test17\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Integer = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test17\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Integer\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -378,3 +378,3 @@\n-                    ()java.lang.Integer -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : java.lang.Integer = invoke %8 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                    ()java.type:\"java.lang.Integer\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -383,3 +383,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -387,4 +387,4 @@\n-                    ()java.lang.Integer -> {\n-                        %10 : int = constant @\"0\";\n-                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        yield %11;\n+                    ()java.type:\"java.lang.Integer\" -> {\n+                        %11 : java.type:\"int\" = constant @\"0\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        yield %12;\n@@ -392,1 +392,1 @@\n-                %12 : Var<java.lang.Integer> = var %4 @\"x\";\n+                %13 : Var<java.type:\"java.lang.Integer\"> = var %4 @\"x\";\n@@ -405,8 +405,8 @@\n-            func @\"test18\" (%0 : BoxingConversionTest, %1 : int, %2 : java.lang.Integer)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = var.load %3;\n-                %6 : int = java.switch.expression %5\n-                    ^constantCaseLabel(%7 : int)boolean -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : boolean = eq %7 %8;\n+            func @\"test18\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = java.switch.expression %5\n+                    (%7 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"boolean\" = eq %7 %8;\n@@ -415,3 +415,3 @@\n-                    ()int -> {\n-                        %10 : java.lang.Integer = var.load %4;\n-                        %11 : int = invoke %10 @\"java.lang.Integer::intValue()int\";\n+                    ()java.type:\"int\" -> {\n+                        %10 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %11 : java.type:\"int\" = invoke %10 @\"java.lang.Integer::intValue():int\";\n@@ -420,3 +420,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %12 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %12;\n@@ -424,3 +424,3 @@\n-                    ()int -> {\n-                        %12 : int = constant @\"0\";\n-                        java.yield %12;\n+                    ()java.type:\"int\" -> {\n+                        %13 : java.type:\"int\" = constant @\"0\";\n+                        java.yield %13;\n@@ -428,1 +428,1 @@\n-                %13 : Var<int> = var %6 @\"x\";\n+                %14 : Var<java.type:\"int\"> = var %6 @\"x\";\n@@ -441,8 +441,8 @@\n-            func @\"test19\" (%0 : BoxingConversionTest, %1 : int, %2 : java.lang.Integer)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = var.load %3;\n-                %6 : int = java.switch.expression %5\n-                    ^constantCaseLabel(%7 : int)boolean -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : boolean = eq %7 %8;\n+            func @\"test19\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = java.switch.expression %5\n+                    (%7 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"boolean\" = eq %7 %8;\n@@ -451,2 +451,2 @@\n-                    ()int -> {\n-                        %10 : int = constant @\"1\";\n+                    ()java.type:\"int\" -> {\n+                        %10 : java.type:\"int\" = constant @\"1\";\n@@ -455,3 +455,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %11;\n@@ -459,4 +459,4 @@\n-                    ()int -> {\n-                        %11 : java.lang.Integer = var.load %4;\n-                        %12 : int = invoke %11 @\"java.lang.Integer::intValue()int\";\n-                        java.yield %12;\n+                    ()java.type:\"int\" -> {\n+                        %12 : java.type:\"java.lang.Integer\" = var.load %4;\n+                        %13 : java.type:\"int\" = invoke %12 @\"java.lang.Integer::intValue():int\";\n+                        java.yield %13;\n@@ -464,1 +464,1 @@\n-                %13 : Var<int> = var %6 @\"x\";\n+                %14 : Var<java.type:\"int\"> = var %6 @\"x\";\n@@ -477,7 +477,7 @@\n-            func @\"test20\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Integer = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test20\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Integer\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -486,3 +486,3 @@\n-                    ()java.lang.Integer -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : java.lang.Integer = invoke %8 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                    ()java.type:\"java.lang.Integer\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -491,3 +491,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -495,4 +495,4 @@\n-                    ()java.lang.Integer -> {\n-                        %10 : int = constant @\"0\";\n-                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        java.yield %11;\n+                    ()java.type:\"java.lang.Integer\" -> {\n+                        %11 : java.type:\"int\" = constant @\"0\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        java.yield %12;\n@@ -500,1 +500,1 @@\n-                %12 : Var<java.lang.Integer> = var %4 @\"x\";\n+                %13 : Var<java.type:\"java.lang.Integer\"> = var %4 @\"x\";\n@@ -513,8 +513,8 @@\n-            func @\"test21\" (%0 : BoxingConversionTest, %1 : int, %2 : java.lang.Integer)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<java.lang.Integer> = var %2 @\"I\";\n-                %5 : int = var.load %3;\n-                %6 : java.lang.Integer = var.load %4;\n-                %7 : int = invoke %6 @\"java.lang.Integer::intValue()int\";\n-                %8 : int = add %5 %7;\n-                %9 : Var<int> = var %8 @\"l\";\n+            func @\"test21\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\", %2 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"I\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"java.lang.Integer\" = var.load %4;\n+                %7 : java.type:\"int\" = invoke %6 @\"java.lang.Integer::intValue():int\";\n+                %8 : java.type:\"int\" = add %5 %7;\n+                %9 : Var<java.type:\"int\"> = var %8 @\"l\";\n@@ -532,5 +532,5 @@\n-            func @\"test22\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                invoke %0 %4 @\"BoxingConversionTest::m(java.lang.Integer)void\";\n+            func @\"test22\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %4 @\"BoxingConversionTest::m(java.lang.Integer):void\";\n@@ -548,5 +548,5 @@\n-            func @\"test23\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                invoke %0 %3 %4 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"BoxingConversionTest::m(int, int, java.lang.Integer[])void\";\n+            func @\"test23\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                invoke %0 %3 %4 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -562,7 +562,7 @@\n-            func @\"test24\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                invoke %0 %3 %4 %6 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"BoxingConversionTest::m(int, int, java.lang.Integer[])void\";\n+            func @\"test24\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %3 %4 %6 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -578,9 +578,9 @@\n-            func @\"test25\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                %7 : int = var.load %2;\n-                %8 : java.lang.Integer = invoke %7 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                invoke %0 %3 %4 %6 %8 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"BoxingConversionTest::m(int, int, java.lang.Integer[])void\";\n+            func @\"test25\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"java.lang.Integer\" = invoke %7 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %3 %4 %6 %8 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -601,5 +601,5 @@\n-            func @\"test26\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                %5 : BoxingConversionTest$Box2 = new %4 @\"BoxingConversionTest$Box2::<new>(java.lang.Integer)\";\n+            func @\"test26\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %5 : java.type:\"BoxingConversionTest$Box2\" = new %4 @\"BoxingConversionTest$Box2::(java.lang.Integer)\";\n@@ -615,5 +615,5 @@\n-            func @\"test27\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : BoxingConversionTest$Box2 = new %3 %4 @new.varargs=\"true\" @\"BoxingConversionTest$Box2::<new>(int,int,java.lang.Integer[])\";\n+            func @\"test27\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -629,7 +629,7 @@\n-            func @\"test28\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                %7 : BoxingConversionTest$Box2 = new %3 %4 %6 @new.varargs=\"true\" @\"BoxingConversionTest$Box2::<new>(int,int,java.lang.Integer[])\";\n+            func @\"test28\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -645,9 +645,9 @@\n-            func @\"test29\" (%0 : BoxingConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                %7 : int = var.load %2;\n-                %8 : java.lang.Integer = invoke %7 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                %9 : BoxingConversionTest$Box2 = new %3 %4 %6 %8 @new.varargs=\"true\" @\"BoxingConversionTest$Box2::<new>(int,int,java.lang.Integer[])\";\n+            func @\"test29\" (%0 : java.type:\"BoxingConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"java.lang.Integer\" = invoke %7 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %9 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 %8 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -663,7 +663,7 @@\n-            func @\"test30\" (%0 : java.lang.Integer)void -> {\n-                  %1 : Var<java.lang.Integer> = var %0 @\"i\";\n-                  %2 : java.lang.Integer = var.load %1;\n-                  %3 : int = invoke %2 @\"java.lang.Integer::intValue()int\";\n-                  %4 : int = neg %3;\n-                  %5 : Var<int> = var %4 @\"j\";\n-                  return;\n+            func @\"test30\" (%0 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.lang.Integer\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.Integer\" = var.load %1;\n+                %3 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %4 : java.type:\"int\" = neg %3;\n+                %5 : Var<java.type:\"int\"> = var %4 @\"j\";\n+                return;\n@@ -678,7 +678,7 @@\n-            func @\"test31\" (%0 : int)void -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  %2 : int = var.load %1;\n-                  %3 : int = neg %2;\n-                  %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                  %5 : Var<java.lang.Integer> = var %4 @\"j\";\n-                  return;\n+            func @\"test31\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"int\" = neg %2;\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %5 : Var<java.type:\"java.lang.Integer\"> = var %4 @\"j\";\n+                return;\n@@ -693,7 +693,7 @@\n-            func @\"test32\" (%0 : boolean)void -> {\n-                  %1 : Var<boolean> = var %0 @\"i\";\n-                  %2 : boolean = var.load %1;\n-                  %3 : boolean = not %2;\n-                  %4 : java.lang.Boolean = invoke %3 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n-                  %5 : Var<java.lang.Boolean> = var %4 @\"j\";\n-                  return;\n+            func @\"test32\" (%0 : java.type:\"boolean\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"boolean\"> = var %0 @\"i\";\n+                %2 : java.type:\"boolean\" = var.load %1;\n+                %3 : java.type:\"boolean\" = not %2;\n+                %4 : java.type:\"java.lang.Boolean\" = invoke %3 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                %5 : Var<java.type:\"java.lang.Boolean\"> = var %4 @\"j\";\n+                return;\n@@ -708,7 +708,7 @@\n-            func @\"test33\" (%0 : java.lang.Boolean)void -> {\n-                  %1 : Var<java.lang.Boolean> = var %0 @\"i\";\n-                  %2 : java.lang.Boolean = var.load %1;\n-                  %3 : boolean = invoke %2 @\"java.lang.Boolean::booleanValue()boolean\";\n-                  %4 : boolean = not %3;\n-                  %5 : Var<boolean> = var %4 @\"j\";\n-                  return;\n+            func @\"test33\" (%0 : java.type:\"java.lang.Boolean\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.lang.Boolean\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.Boolean\" = var.load %1;\n+                %3 : java.type:\"boolean\" = invoke %2 @\"java.lang.Boolean::booleanValue():boolean\";\n+                %4 : java.type:\"boolean\" = not %3;\n+                %5 : Var<java.type:\"boolean\"> = var %4 @\"j\";\n+                return;\n","filename":"test\/langtools\/tools\/javac\/reflect\/BoxingConversionTest.java","additions":309,"deletions":309,"binary":false,"changes":618,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-            func @\"test1\" (%0 : BreakContinueTest)void -> {\n+            func @\"test1\" (%0 : java.type:\"BreakContinueTest\")java.type:\"void\" -> {\n@@ -42,3 +42,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -47,4 +47,4 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : int = var.load %3;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %3;\n+                        %5 : java.type:\"int\" = constant @\"10\";\n+                        %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -53,4 +53,4 @@\n-                    ^update(%7 : Var<int>)void -> {\n-                        %8 : int = var.load %7;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %8 : java.type:\"int\" = var.load %7;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -60,1 +60,1 @@\n-                    ^body(%11 : Var<int>)void -> {\n+                    (%11 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -62,2 +62,2 @@\n-                            ()boolean -> {\n-                                %12 : boolean = constant @\"true\";\n+                            ()java.type:\"boolean\" -> {\n+                                %12 : java.type:\"boolean\" = constant @\"true\";\n@@ -66,1 +66,1 @@\n-                            ^then()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -69,1 +69,1 @@\n-                            ^else()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -73,2 +73,2 @@\n-                            ()boolean -> {\n-                                %13 : boolean = constant @\"true\";\n+                            ()java.type:\"boolean\" -> {\n+                                %13 : java.type:\"boolean\" = constant @\"true\";\n@@ -77,1 +77,1 @@\n-                            ^then()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -80,1 +80,1 @@\n-                            ^else()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -84,3 +84,3 @@\n-                            ^init()Var<int> -> {\n-                                %14 : int = constant @\"0\";\n-                                %15 : Var<int> = var %14 @\"j\";\n+                            ()Var<java.type:\"int\"> -> {\n+                                %14 : java.type:\"int\" = constant @\"0\";\n+                                %15 : Var<java.type:\"int\"> = var %14 @\"j\";\n@@ -89,4 +89,4 @@\n-                            ^cond(%16 : Var<int>)boolean -> {\n-                                %17 : int = var.load %16;\n-                                %18 : int = constant @\"10\";\n-                                %19 : boolean = lt %17 %18;\n+                            (%16 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                                %17 : java.type:\"int\" = var.load %16;\n+                                %18 : java.type:\"int\" = constant @\"10\";\n+                                %19 : java.type:\"boolean\" = lt %17 %18;\n@@ -95,4 +95,4 @@\n-                            ^update(%20 : Var<int>)void -> {\n-                                %21 : int = var.load %20;\n-                                %22 : int = constant @\"1\";\n-                                %23 : int = add %21 %22;\n+                            (%20 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                                %21 : java.type:\"int\" = var.load %20;\n+                                %22 : java.type:\"int\" = constant @\"1\";\n+                                %23 : java.type:\"int\" = add %21 %22;\n@@ -102,1 +102,1 @@\n-                            ^body(%24 : Var<int>)void -> {\n+                            (%24 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -104,2 +104,2 @@\n-                                    ()boolean -> {\n-                                        %25 : boolean = constant @\"true\";\n+                                    ()java.type:\"boolean\" -> {\n+                                        %25 : java.type:\"boolean\" = constant @\"true\";\n@@ -108,1 +108,1 @@\n-                                    ^then()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -111,1 +111,1 @@\n-                                    ^else()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -115,2 +115,2 @@\n-                                    ()boolean -> {\n-                                        %26 : boolean = constant @\"true\";\n+                                    ()java.type:\"boolean\" -> {\n+                                        %26 : java.type:\"boolean\" = constant @\"true\";\n@@ -119,1 +119,1 @@\n-                                    ^then()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -122,1 +122,1 @@\n-                                    ^else()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -153,3 +153,3 @@\n-            func @\"test2\" (%0 : BreakContinueTest)void -> {\n-                java.labeled ()void -> {\n-                    %1 : java.lang.String = constant @\"outer\";\n+            func @\"test2\" (%0 : java.type:\"BreakContinueTest\")java.type:\"void\" -> {\n+                java.labeled ()java.type:\"void\" -> {\n+                    %1 : java.type:\"java.lang.String\" = constant @\"outer\";\n@@ -157,3 +157,3 @@\n-                        ^init()Var<int> -> {\n-                            %2 : int = constant @\"0\";\n-                            %3 : Var<int> = var %2 @\"i\";\n+                        ()Var<java.type:\"int\"> -> {\n+                            %2 : java.type:\"int\" = constant @\"0\";\n+                            %3 : Var<java.type:\"int\"> = var %2 @\"i\";\n@@ -162,4 +162,4 @@\n-                        ^cond(%4 : Var<int>)boolean -> {\n-                            %5 : int = var.load %4;\n-                            %6 : int = constant @\"10\";\n-                            %7 : boolean = lt %5 %6;\n+                        (%4 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                            %5 : java.type:\"int\" = var.load %4;\n+                            %6 : java.type:\"int\" = constant @\"10\";\n+                            %7 : java.type:\"boolean\" = lt %5 %6;\n@@ -168,4 +168,4 @@\n-                        ^update(%8 : Var<int>)void -> {\n-                            %9 : int = var.load %8;\n-                            %10 : int = constant @\"1\";\n-                            %11 : int = add %9 %10;\n+                        (%8 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                            %9 : java.type:\"int\" = var.load %8;\n+                            %10 : java.type:\"int\" = constant @\"1\";\n+                            %11 : java.type:\"int\" = add %9 %10;\n@@ -175,1 +175,1 @@\n-                        ^body(%12 : Var<int>)void -> {\n+                        (%12 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -177,2 +177,2 @@\n-                                ()boolean -> {\n-                                    %13 : boolean = constant @\"true\";\n+                                ()java.type:\"boolean\" -> {\n+                                    %13 : java.type:\"boolean\" = constant @\"true\";\n@@ -181,1 +181,1 @@\n-                                ^then()void -> {\n+                                ()java.type:\"void\" -> {\n@@ -184,1 +184,1 @@\n-                                ^else()void -> {\n+                                ()java.type:\"void\" -> {\n@@ -188,2 +188,2 @@\n-                                ()boolean -> {\n-                                    %14 : boolean = constant @\"true\";\n+                                ()java.type:\"boolean\" -> {\n+                                    %14 : java.type:\"boolean\" = constant @\"true\";\n@@ -192,1 +192,1 @@\n-                                ^then()void -> {\n+                                ()java.type:\"void\" -> {\n@@ -195,1 +195,1 @@\n-                                ^else()void -> {\n+                                ()java.type:\"void\" -> {\n@@ -198,2 +198,2 @@\n-                            java.labeled ()void -> {\n-                                %15 : java.lang.String = constant @\"inner\";\n+                            java.labeled ()java.type:\"void\" -> {\n+                                %15 : java.type:\"java.lang.String\" = constant @\"inner\";\n@@ -201,3 +201,3 @@\n-                                    ^init()Var<int> -> {\n-                                        %16 : int = constant @\"0\";\n-                                        %17 : Var<int> = var %16 @\"j\";\n+                                    ()Var<java.type:\"int\"> -> {\n+                                        %16 : java.type:\"int\" = constant @\"0\";\n+                                        %17 : Var<java.type:\"int\"> = var %16 @\"j\";\n@@ -206,4 +206,4 @@\n-                                    ^cond(%18 : Var<int>)boolean -> {\n-                                        %19 : int = var.load %18;\n-                                        %20 : int = constant @\"10\";\n-                                        %21 : boolean = lt %19 %20;\n+                                    (%18 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                                        %19 : java.type:\"int\" = var.load %18;\n+                                        %20 : java.type:\"int\" = constant @\"10\";\n+                                        %21 : java.type:\"boolean\" = lt %19 %20;\n@@ -212,4 +212,4 @@\n-                                    ^update(%22 : Var<int>)void -> {\n-                                        %23 : int = var.load %22;\n-                                        %24 : int = constant @\"1\";\n-                                        %25 : int = add %23 %24;\n+                                    (%22 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                                        %23 : java.type:\"int\" = var.load %22;\n+                                        %24 : java.type:\"int\" = constant @\"1\";\n+                                        %25 : java.type:\"int\" = add %23 %24;\n@@ -219,1 +219,1 @@\n-                                    ^body(%26 : Var<int>)void -> {\n+                                    (%26 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -221,2 +221,2 @@\n-                                            ()boolean -> {\n-                                                %27 : boolean = constant @\"true\";\n+                                            ()java.type:\"boolean\" -> {\n+                                                %27 : java.type:\"boolean\" = constant @\"true\";\n@@ -225,1 +225,1 @@\n-                                            ^then()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -228,1 +228,1 @@\n-                                            ^else()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -232,2 +232,2 @@\n-                                            ()boolean -> {\n-                                                %28 : boolean = constant @\"true\";\n+                                            ()java.type:\"boolean\" -> {\n+                                                %28 : java.type:\"boolean\" = constant @\"true\";\n@@ -236,1 +236,1 @@\n-                                            ^then()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -239,1 +239,1 @@\n-                                            ^else()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -243,2 +243,2 @@\n-                                            ()boolean -> {\n-                                                %29 : boolean = constant @\"true\";\n+                                            ()java.type:\"boolean\" -> {\n+                                                %29 : java.type:\"boolean\" = constant @\"true\";\n@@ -247,1 +247,1 @@\n-                                            ^then()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -250,1 +250,1 @@\n-                                            ^else()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -254,2 +254,2 @@\n-                                            ()boolean -> {\n-                                                %30 : boolean = constant @\"true\";\n+                                            ()java.type:\"boolean\" -> {\n+                                                %30 : java.type:\"boolean\" = constant @\"true\";\n@@ -258,1 +258,1 @@\n-                                            ^then()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -261,1 +261,1 @@\n-                                            ^else()void -> {\n+                                            ()java.type:\"void\" -> {\n@@ -304,7 +304,7 @@\n-            func @\"test3\" (%0 : BreakContinueTest)void -> {\n-                java.labeled ()void -> {\n-                    %1 : java.lang.String = constant @\"b1\";\n-                    java.block ()void -> {\n-                        java.labeled ()void -> {\n-                            %2 : java.lang.String = constant @\"b2\";\n-                            java.block ()void -> {\n+            func @\"test3\" (%0 : java.type:\"BreakContinueTest\")java.type:\"void\" -> {\n+                java.labeled ()java.type:\"void\" -> {\n+                    %1 : java.type:\"java.lang.String\" = constant @\"b1\";\n+                    java.block ()java.type:\"void\" -> {\n+                        java.labeled ()java.type:\"void\" -> {\n+                            %2 : java.type:\"java.lang.String\" = constant @\"b2\";\n+                            java.block ()java.type:\"void\" -> {\n@@ -312,2 +312,2 @@\n-                                    ()boolean -> {\n-                                        %3 : boolean = constant @\"true\";\n+                                    ()java.type:\"boolean\" -> {\n+                                        %3 : java.type:\"boolean\" = constant @\"true\";\n@@ -316,1 +316,1 @@\n-                                    ^then()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -319,1 +319,1 @@\n-                                    ^else()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -323,2 +323,2 @@\n-                                    ()boolean -> {\n-                                        %4 : boolean = constant @\"true\";\n+                                    ()java.type:\"boolean\" -> {\n+                                        %4 : java.type:\"boolean\" = constant @\"true\";\n@@ -327,1 +327,1 @@\n-                                    ^then()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -330,1 +330,1 @@\n-                                    ^else()void -> {\n+                                    ()java.type:\"void\" -> {\n@@ -361,3 +361,3 @@\n-            func @\"test4\" (%0 : BreakContinueTest)void -> {\n-                java.labeled ()void -> {\n-                    %1 : java.lang.String = constant @\"b\";\n+            func @\"test4\" (%0 : java.type:\"BreakContinueTest\")java.type:\"void\" -> {\n+                java.labeled ()java.type:\"void\" -> {\n+                    %1 : java.type:\"java.lang.String\" = constant @\"b\";\n@@ -366,7 +366,7 @@\n-                %2 : int = constant @\"0\";\n-                %3 : Var<int> = var %2 @\"i\";\n-                java.labeled ()void -> {\n-                    %4 : java.lang.String = constant @\"b\";\n-                    %5 : int = var.load %3;\n-                    %6 : int = constant @\"1\";\n-                    %7 : int = add %5 %6;\n+                %2 : java.type:\"int\" = constant @\"0\";\n+                %3 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                java.labeled ()java.type:\"void\" -> {\n+                    %4 : java.type:\"java.lang.String\" = constant @\"b\";\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = constant @\"1\";\n+                    %7 : java.type:\"int\" = add %5 %6;\n@@ -376,5 +376,5 @@\n-                java.labeled ()void -> {\n-                    %8 : java.lang.String = constant @\"a\";\n-                    java.labeled ()void -> {\n-                        %9 : java.lang.String = constant @\"b\";\n-                        java.block ()void -> {\n+                java.labeled ()java.type:\"void\" -> {\n+                    %8 : java.type:\"java.lang.String\" = constant @\"a\";\n+                    java.labeled ()java.type:\"void\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"b\";\n+                        java.block ()java.type:\"void\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/BreakContinueTest.java","additions":124,"deletions":124,"binary":false,"changes":248,"status":"modified"},{"patch":"@@ -41,7 +41,7 @@\n-            func @\"test1\" (%0 : CastInstanceOfTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : java.lang.String = cast %3 @\"java.lang.String\";\n-                %5 : Var<java.lang.String> = var %4 @\"s\";\n-                %6 : java.lang.String = var.load %5;\n-                %7 : Var<java.lang.String> = var %6 @\"ss\";\n+            func @\"test1\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = cast %3 @\"java.lang.String\";\n+                %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                %6 : java.type:\"java.lang.String\" = var.load %5;\n+                %7 : Var<java.type:\"java.lang.String\"> = var %6 @\"ss\";\n@@ -58,9 +58,9 @@\n-            func @\"test2\" (%0 : CastInstanceOfTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : java.util.List<java.lang.String> = cast %3 @\"java.util.List\";\n-                %5 : Var<java.util.List<java.lang.String>> = var %4 @\"l\";\n-                %6 : java.util.List<java.lang.String> = var.load %5;\n-                %7 : Var<java.util.Collection<java.lang.String>> = var %6 @\"c1\";\n-                %8 : java.util.List<java.lang.String> = var.load %5;\n-                %9 : Var<java.util.Collection<java.lang.String>> = var %8 @\"c2\";\n+            func @\"test2\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"java.util.List<java.lang.String>\" = cast %3 @\"java.util.List\";\n+                %5 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %4 @\"l\";\n+                %6 : java.type:\"java.util.List<java.lang.String>\" = var.load %5;\n+                %7 : Var<java.type:\"java.util.Collection<java.lang.String>\"> = var %6 @\"c1\";\n+                %8 : java.type:\"java.util.List<java.lang.String>\" = var.load %5;\n+                %9 : Var<java.type:\"java.util.Collection<java.lang.String>\"> = var %8 @\"c2\";\n@@ -78,6 +78,6 @@\n-            func @\"test3\" (%0 : CastInstanceOfTest, %1 : java.util.List<java.lang.String>)void -> {\n-                %2 : Var<java.util.List<java.lang.String>> = var %1 @\"l\";\n-                %3 : java.util.List<java.lang.String> = var.load %2;\n-                %4 : Var<java.util.List> = var %3 @\"raw\";\n-                %5 : java.util.List = var.load %4;\n-                %6 : Var<java.util.List<java.lang.Number>> = var %5 @\"ln\";\n+            func @\"test3\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"java.util.List<java.lang.String>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l\";\n+                %3 : java.type:\"java.util.List<java.lang.String>\" = var.load %2;\n+                %4 : Var<java.type:\"java.util.List\"> = var %3 @\"raw\";\n+                %5 : java.type:\"java.util.List\" = var.load %4;\n+                %6 : Var<java.type:\"java.util.List<java.lang.Number>\"> = var %5 @\"ln\";\n@@ -94,5 +94,5 @@\n-            func @\"test4\" (%0 : CastInstanceOfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = conv %3;\n-                %5 : Var<long> = var %4 @\"l\";\n+            func @\"test4\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = conv %3;\n+                %5 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -108,5 +108,5 @@\n-            func @\"test5\" (%0 : CastInstanceOfTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : boolean = instanceof %3 @\"java.lang.String\";\n-                %5 : Var<boolean> = var %4 @\"b\";\n+            func @\"test5\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"boolean\" = instanceof %3 @\"java.lang.String\";\n+                %5 : Var<java.type:\"boolean\"> = var %4 @\"b\";\n@@ -122,7 +122,7 @@\n-            func @\"test6\" (%0 : CastInstanceOfTest, %1 : java.util.List<java.lang.Object>)void -> {\n-                %2 : Var<java.util.List<java.lang.Object>> = var %1 @\"l\";\n-                %3 : java.util.List<java.lang.Object> = var.load %2;\n-                %4 : int = constant @\"0\";\n-                %5 : java.lang.Object = invoke %3 %4 @\"java.util.List::get(int)java.lang.Object\";\n-                %6 : boolean = instanceof %5 @\"java.lang.String\";\n-                %7 : Var<boolean> = var %6 @\"b\";\n+            func @\"test6\" (%0 : java.type:\"CastInstanceOfTest\", %1 : java.type:\"java.util.List<java.lang.Object>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.Object>\"> = var %1 @\"l\";\n+                %3 : java.type:\"java.util.List<java.lang.Object>\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"0\";\n+                %5 : java.type:\"java.lang.Object\" = invoke %3 %4 @\"java.util.List::get(int):java.lang.Object\";\n+                %6 : java.type:\"boolean\" = instanceof %5 @\"java.lang.String\";\n+                %7 : Var<java.type:\"boolean\"> = var %6 @\"b\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/CastInstanceOfTest.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.reflect.Constructor;\n@@ -48,0 +49,4 @@\n+        check(clazz);\n+    }\n+\n+    public static void check(Class<?> clazz) throws ReflectiveOperationException {\n@@ -54,0 +59,3 @@\n+        for (Class<?> c : clazz.getDeclaredClasses()) {\n+            check(c);\n+        }\n@@ -64,0 +72,22 @@\n+    static void checkModel(Member member, String found, IR ir) {\n+        String expected = null;\n+        try {\n+            expected = canonicalizeModel(member, ir.value());\n+        } catch (Throwable ex) {\n+            error(\"Cannot parse IR annotation in %s %s.\\nFound:\\n%s\", memberKind(member), member.getName(), found);\n+            return;\n+        }\n+        if (!found.equals(expected)) {\n+            error(\"Bad IR\\nFound:\\n%s\\n\\nExpected:\\n%s\", found, expected);\n+        }\n+    }\n+\n+    static String memberKind(Member member) {\n+        return switch (member) {\n+            case Field _ -> \"field\";\n+            case Method _ -> \"method\";\n+            case Constructor<?> _ -> \"constructor\";\n+            default -> throw new UnsupportedOperationException(\"Cannot get here\");\n+        };\n+    }\n+\n@@ -72,5 +102,1 @@\n-        String expected = canonicalizeModel(method, ir.value());\n-        if (!found.equals(expected)) {\n-            error(\"Bad IR\\nFound:\\n%s\\n\\nExpected:\\n%s\", found, expected);\n-            return;\n-        }\n+        checkModel(method, found, ir);\n@@ -86,5 +112,1 @@\n-            String expected = canonicalizeModel(field, ir.value());\n-            if (!found.equals(expected)) {\n-                error(\"Bad IR\\nFound:\\n%s\\n\\nExpected:\\n%s\", found, expected);\n-                return;\n-            }\n+            checkModel(field, found, ir);\n@@ -93,6 +115,3 @@\n-            String found = canonicalizeModel(field, getModelOfQuotedOp(Op.ofQuotable(quotable).get()));\n-            String expected = canonicalizeModel(field, ir.value());\n-            if (!found.equals(expected)) {\n-                error(\"Bad IR\\nFound:\\n%s\\n\\nExpected:\\n%s\", found, expected);\n-                return;\n-            }\n+            Quoted quoted = Op.ofQuotable(quotable).get();\n+            String found = canonicalizeModel(field, getModelOfQuotedOp(quoted));\n+            checkModel(field, found, ir);\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -39,7 +39,7 @@\n-            func @\"test1\" (%0 : ConditionalAndOrTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : boolean = java.cand\n-                    ()boolean -> {\n-                        %4 : int = var.load %2;\n-                        %5 : int = constant @\"1\";\n-                        %6 : boolean = gt %4 %5;\n+            func @\"test1\" (%0 : java.type:\"ConditionalAndOrTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"boolean\" = java.cand\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %2;\n+                        %5 : java.type:\"int\" = constant @\"1\";\n+                        %6 : java.type:\"boolean\" = gt %4 %5;\n@@ -48,4 +48,4 @@\n-                    ()boolean -> {\n-                        %7 : int = var.load %2;\n-                        %8 : int = constant @\"10\";\n-                        %9 : boolean = lt %7 %8;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"10\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n@@ -54,1 +54,1 @@\n-                %10 : Var<boolean> = var %3 @\"b\";\n+                %10 : Var<java.type:\"boolean\"> = var %3 @\"b\";\n@@ -64,7 +64,7 @@\n-            func @\"test2\" (%0 : ConditionalAndOrTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : boolean = java.cor\n-                    ()boolean -> {\n-                        %4 : int = var.load %2;\n-                        %5 : int = constant @\"1\";\n-                        %6 : boolean = gt %4 %5;\n+            func @\"test2\" (%0 : java.type:\"ConditionalAndOrTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"boolean\" = java.cor\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %2;\n+                        %5 : java.type:\"int\" = constant @\"1\";\n+                        %6 : java.type:\"boolean\" = gt %4 %5;\n@@ -73,4 +73,4 @@\n-                    ()boolean -> {\n-                        %7 : int = var.load %2;\n-                        %8 : int = constant @\"10\";\n-                        %9 : boolean = lt %7 %8;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"10\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n@@ -79,1 +79,1 @@\n-                %10 : Var<boolean> = var %3 @\"b\";\n+                %10 : Var<java.type:\"boolean\"> = var %3 @\"b\";\n@@ -89,9 +89,9 @@\n-            func @\"test3\" (%0 : ConditionalAndOrTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : boolean = java.cor\n-                    ()boolean -> {\n-                        %4 : boolean = java.cand\n-                            ()boolean -> {\n-                                %5 : int = var.load %2;\n-                                %6 : int = constant @\"1\";\n-                                %7 : boolean = gt %5 %6;\n+            func @\"test3\" (%0 : java.type:\"ConditionalAndOrTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"boolean\" = java.cor\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %5 : java.type:\"int\" = var.load %2;\n+                                %6 : java.type:\"int\" = constant @\"1\";\n+                                %7 : java.type:\"boolean\" = gt %5 %6;\n@@ -100,4 +100,4 @@\n-                            ()boolean -> {\n-                                %8 : int = var.load %2;\n-                                %9 : int = constant @\"10\";\n-                                %10 : boolean = lt %8 %9;\n+                            ()java.type:\"boolean\" -> {\n+                                %8 : java.type:\"int\" = var.load %2;\n+                                %9 : java.type:\"int\" = constant @\"10\";\n+                                %10 : java.type:\"boolean\" = lt %8 %9;\n@@ -108,4 +108,4 @@\n-                    ()boolean -> {\n-                        %11 : int = var.load %2;\n-                        %12 : int = constant @\"100\";\n-                        %13 : boolean = eq %11 %12;\n+                    ()java.type:\"boolean\" -> {\n+                        %11 : java.type:\"int\" = var.load %2;\n+                        %12 : java.type:\"int\" = constant @\"100\";\n+                        %13 : java.type:\"boolean\" = eq %11 %12;\n@@ -114,1 +114,1 @@\n-                %14 : Var<boolean> = var %3 @\"b\";\n+                %14 : Var<java.type:\"boolean\"> = var %3 @\"b\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConditionalAndOrTest.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -40,7 +40,7 @@\n-            func @\"test1\" (%0 : ConditionalExpressionTest, %1 : boolean, %2 : int, %3 : int)void -> {\n-                %4 : Var<boolean> = var %1 @\"b\";\n-                %5 : Var<int> = var %2 @\"x\";\n-                %6 : Var<int> = var %3 @\"y\";\n-                %7 : int = java.cexpression\n-                    ^cond()boolean -> {\n-                        %8 : boolean = var.load %4;\n+            func @\"test1\" (%0 : java.type:\"ConditionalExpressionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"int\", %3 : java.type:\"int\")java.type:\"void\" -> {\n+                %4 : Var<java.type:\"boolean\"> = var %1 @\"b\";\n+                %5 : Var<java.type:\"int\"> = var %2 @\"x\";\n+                %6 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                %7 : java.type:\"int\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = var.load %4;\n@@ -49,2 +49,2 @@\n-                    ^truepart()int -> {\n-                        %9 : int = var.load %5;\n+                    ()java.type:\"int\" -> {\n+                        %9 : java.type:\"int\" = var.load %5;\n@@ -53,2 +53,2 @@\n-                    ^falsepart()int -> {\n-                        %10 : int = var.load %6;\n+                    ()java.type:\"int\" -> {\n+                        %10 : java.type:\"int\" = var.load %6;\n@@ -57,1 +57,1 @@\n-                %11 : Var<int> = var %7 @\"z\";\n+                %11 : Var<java.type:\"int\"> = var %7 @\"z\";\n@@ -67,8 +67,8 @@\n-            func @\"test2\" (%0 : ConditionalExpressionTest, %1 : boolean, %2 : int, %3 : double)void -> {\n-                %4 : Var<boolean> = var %1 @\"b\";\n-                %5 : Var<int> = var %2 @\"x\";\n-                %6 : Var<double> = var %3 @\"y\";\n-                %7 : double = java.cexpression\n-                    ^cond()boolean -> {\n-                        %8 : boolean = var.load %4;\n-                        %9 : boolean = not %8;\n+            func @\"test2\" (%0 : java.type:\"ConditionalExpressionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"int\", %3 : java.type:\"double\")java.type:\"void\" -> {\n+                %4 : Var<java.type:\"boolean\"> = var %1 @\"b\";\n+                %5 : Var<java.type:\"int\"> = var %2 @\"x\";\n+                %6 : Var<java.type:\"double\"> = var %3 @\"y\";\n+                %7 : java.type:\"double\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = var.load %4;\n+                        %9 : java.type:\"boolean\" = not %8;\n@@ -77,3 +77,3 @@\n-                    ^truepart()double -> {\n-                        %10 : int = var.load %5;\n-                        %11 : double = conv %10;\n+                    ()java.type:\"double\" -> {\n+                        %10 : java.type:\"int\" = var.load %5;\n+                        %11 : java.type:\"double\" = conv %10;\n@@ -82,2 +82,2 @@\n-                    ^falsepart()double -> {\n-                        %12 : double = var.load %6;\n+                    ()java.type:\"double\" -> {\n+                        %12 : java.type:\"double\" = var.load %6;\n@@ -86,1 +86,1 @@\n-                %13 : Var<double> = var %7 @\"z\";\n+                %13 : Var<java.type:\"double\"> = var %7 @\"z\";\n@@ -96,7 +96,7 @@\n-            func @\"test3\" (%0 : ConditionalExpressionTest, %1 : boolean, %2 : int, %3 : double)void -> {\n-                %4 : Var<boolean> = var %1 @\"b\";\n-                %5 : Var<int> = var %2 @\"x\";\n-                %6 : Var<double> = var %3 @\"y\";\n-                %7 : java.util.function.Supplier<java.lang.Double> = java.cexpression\n-                    ^cond()boolean -> {\n-                        %8 : boolean = var.load %4;\n+            func @\"test3\" (%0 : java.type:\"ConditionalExpressionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"int\", %3 : java.type:\"double\")java.type:\"void\" -> {\n+                %4 : Var<java.type:\"boolean\"> = var %1 @\"b\";\n+                %5 : Var<java.type:\"int\"> = var %2 @\"x\";\n+                %6 : Var<java.type:\"double\"> = var %3 @\"y\";\n+                %7 : java.type:\"java.util.function.Supplier<java.lang.Double>\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = var.load %4;\n@@ -105,5 +105,5 @@\n-                    ^truepart()java.util.function.Supplier<java.lang.Double> -> {\n-                        %9 : java.util.function.Supplier<java.lang.Double> = lambda ()java.lang.Double -> {\n-                            %10 : int = var.load %5;\n-                            %11 : double = conv %10;\n-                            %12 : java.lang.Double = invoke %11 @\"java.lang.Double::valueOf(double)java.lang.Double\";\n+                    ()java.type:\"java.util.function.Supplier<java.lang.Double>\" -> {\n+                        %9 : java.type:\"java.util.function.Supplier<java.lang.Double>\" = lambda ()java.type:\"java.lang.Double\" -> {\n+                            %10 : java.type:\"int\" = var.load %5;\n+                            %11 : java.type:\"double\" = conv %10;\n+                            %12 : java.type:\"java.lang.Double\" = invoke %11 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n@@ -114,4 +114,4 @@\n-                    ^falsepart()java.util.function.Supplier<java.lang.Double> -> {\n-                        %13 : java.util.function.Supplier<java.lang.Double> = lambda ()java.lang.Double -> {\n-                            %14 : double = var.load %6;\n-                            %15 : java.lang.Double = invoke %14 @\"java.lang.Double::valueOf(double)java.lang.Double\";\n+                    ()java.type:\"java.util.function.Supplier<java.lang.Double>\" -> {\n+                        %13 : java.type:\"java.util.function.Supplier<java.lang.Double>\" = lambda ()java.type:\"java.lang.Double\" -> {\n+                            %14 : java.type:\"double\" = var.load %6;\n+                            %15 : java.type:\"java.lang.Double\" = invoke %14 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n@@ -122,1 +122,1 @@\n-                %16 : Var<java.util.function.Supplier<java.lang.Double>> = var %7 @\"z\";\n+                %16 : Var<java.type:\"java.util.function.Supplier<java.lang.Double>\"> = var %7 @\"z\";\n@@ -132,9 +132,9 @@\n-            func @\"test4\" (%0 : ConditionalExpressionTest, %1 : boolean, %2 : boolean, %3 : int, %4 : double, %5 : double)void -> {\n-                %6 : Var<boolean> = var %1 @\"b1\";\n-                %7 : Var<boolean> = var %2 @\"b2\";\n-                %8 : Var<int> = var %3 @\"x\";\n-                %9 : Var<double> = var %4 @\"y\";\n-                %10 : Var<double> = var %5 @\"z\";\n-                %11 : double = java.cexpression\n-                    ^cond()boolean -> {\n-                        %12 : boolean = var.load %6;\n+            func @\"test4\" (%0 : java.type:\"ConditionalExpressionTest\", %1 : java.type:\"boolean\", %2 : java.type:\"boolean\", %3 : java.type:\"int\", %4 : java.type:\"double\", %5 : java.type:\"double\")java.type:\"void\" -> {\n+                %6 : Var<java.type:\"boolean\"> = var %1 @\"b1\";\n+                %7 : Var<java.type:\"boolean\"> = var %2 @\"b2\";\n+                %8 : Var<java.type:\"int\"> = var %3 @\"x\";\n+                %9 : Var<java.type:\"double\"> = var %4 @\"y\";\n+                %10 : Var<java.type:\"double\"> = var %5 @\"z\";\n+                %11 : java.type:\"double\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %12 : java.type:\"boolean\" = var.load %6;\n@@ -143,4 +143,4 @@\n-                    ^truepart()double -> {\n-                        %13 : double = java.cexpression\n-                            ^cond()boolean -> {\n-                                %14 : boolean = var.load %7;\n+                    ()java.type:\"double\" -> {\n+                        %13 : java.type:\"double\" = java.cexpression\n+                            ()java.type:\"boolean\" -> {\n+                                %14 : java.type:\"boolean\" = var.load %7;\n@@ -149,3 +149,3 @@\n-                            ^truepart()double -> {\n-                                %15 : int = var.load %8;\n-                                %16 : double = conv %15;\n+                            ()java.type:\"double\" -> {\n+                                %15 : java.type:\"int\" = var.load %8;\n+                                %16 : java.type:\"double\" = conv %15;\n@@ -154,2 +154,2 @@\n-                            ^falsepart()double -> {\n-                                %17 : double = var.load %9;\n+                            ()java.type:\"double\" -> {\n+                                %17 : java.type:\"double\" = var.load %9;\n@@ -160,2 +160,2 @@\n-                    ^falsepart()double -> {\n-                        %18 : double = var.load %10;\n+                    ()java.type:\"double\" -> {\n+                        %18 : java.type:\"double\" = var.load %10;\n@@ -164,1 +164,1 @@\n-                %19 : Var<double> = var %11 @\"r\";\n+                %19 : Var<java.type:\"double\"> = var %11 @\"r\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConditionalExpressionTest.java","additions":64,"deletions":64,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-            func @\"test1\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.String = constant @\"\";\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n+            func @\"test1\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @\"\";\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n@@ -51,3 +51,3 @@\n-            func @\"test2\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.String = constant @\"Hello World\";\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n+            func @\"test2\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @\"Hello World\";\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n@@ -63,3 +63,3 @@\n-            func @\"test3\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n+            func @\"test3\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n@@ -74,3 +74,3 @@\n-            func @\"test4\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"java.util.function.Function\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test4\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"java.util.function.Function\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -86,6 +86,6 @@\n-            func @\"test5\" (%0 : ConstantsTest)void -> {\n-                %1 : int = constant @\"42\";\n-                %2 : byte = conv %1;\n-                %3 : Var<byte> = var %2 @\"v\";\n-                %4 : int = constant @\"-42\";\n-                %5 : byte = conv %4;\n+            func @\"test5\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"42\";\n+                %2 : java.type:\"byte\" = conv %1;\n+                %3 : Var<java.type:\"byte\"> = var %2 @\"v\";\n+                %4 : java.type:\"int\" = constant @\"-42\";\n+                %5 : java.type:\"byte\" = conv %4;\n@@ -103,6 +103,6 @@\n-            func @\"test6\" (%0 : ConstantsTest)void -> {\n-                %1 : int = constant @\"42\";\n-                %2 : short = conv %1;\n-                %3 : Var<short> = var %2 @\"v\";\n-                %4 : int = constant @\"-42\";\n-                %5 : short = conv %4;\n+            func @\"test6\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"42\";\n+                %2 : java.type:\"short\" = conv %1;\n+                %3 : Var<java.type:\"short\"> = var %2 @\"v\";\n+                %4 : java.type:\"int\" = constant @\"-42\";\n+                %5 : java.type:\"short\" = conv %4;\n@@ -120,4 +120,4 @@\n-            func @\"test7\" (%0 : ConstantsTest)void -> {\n-                %1 : int = constant @\"42\";\n-                %2 : Var<int> = var %1 @\"v\";\n-                %3 : int = constant @\"-42\";\n+            func @\"test7\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"42\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"v\";\n+                %3 : java.type:\"int\" = constant @\"-42\";\n@@ -135,4 +135,4 @@\n-            func @\"test8\" (%0 : ConstantsTest)void -> {\n-                %1 : long = constant @\"42\";\n-                %2 : Var<long> = var %1 @\"v\";\n-                %3 : long = constant @\"-42\";\n+            func @\"test8\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"long\" = constant @\"42\";\n+                %2 : Var<java.type:\"long\"> = var %1 @\"v\";\n+                %3 : java.type:\"long\" = constant @\"-42\";\n@@ -150,5 +150,5 @@\n-            func @\"test9\" (%0 : ConstantsTest)void -> {\n-                %1 : float = constant @\"42.0\";\n-                %2 : Var<float> = var %1 @\"v\";\n-                %3 : float = constant @\"42.0\";\n-                %4 : float = neg %3;\n+            func @\"test9\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"float\" = constant @\"42.0\";\n+                %2 : Var<java.type:\"float\"> = var %1 @\"v\";\n+                %3 : java.type:\"float\" = constant @\"42.0\";\n+                %4 : java.type:\"float\" = neg %3;\n@@ -166,5 +166,5 @@\n-            func @\"test10\" (%0 : ConstantsTest)void -> {\n-                %1 : double = constant @\"42.0\";\n-                %2 : Var<double> = var %1 @\"v\";\n-                %3 : double = constant @\"42.0\";\n-                %4 : double = neg %3;\n+            func @\"test10\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"double\" = constant @\"42.0\";\n+                %2 : Var<java.type:\"double\"> = var %1 @\"v\";\n+                %3 : java.type:\"double\" = constant @\"42.0\";\n+                %4 : java.type:\"double\" = neg %3;\n@@ -182,3 +182,3 @@\n-            func @\"test11\" (%0 : ConstantsTest)void -> {\n-                %1 : char = constant @\"a\";\n-                %2 : Var<char> = var %1 @\"v\";\n+            func @\"test11\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"char\" = constant @\"a\";\n+                %2 : Var<java.type:\"char\"> = var %1 @\"v\";\n@@ -194,4 +194,4 @@\n-            func @\"test12\" (%0 : ConstantsTest)void -> {\n-                %1 : boolean = constant @\"true\";\n-                %2 : Var<boolean> = var %1 @\"b\";\n-                %3 : boolean = constant @\"false\";\n+            func @\"test12\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"boolean\" = constant @\"true\";\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"b\";\n+                %3 : java.type:\"boolean\" = constant @\"false\";\n@@ -209,3 +209,3 @@\n-            func @\"test13\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"float\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test13\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"float\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -221,3 +221,3 @@\n-            func @\"test14\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"java.lang.String[]\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test14\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[]\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -233,3 +233,3 @@\n-            func @\"test15\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"java.lang.String[][]\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test15\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[][]\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -245,3 +245,3 @@\n-            func @\"test16\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"java.lang.String[][][]\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test16\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[][][]\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -257,3 +257,3 @@\n-            func @\"test17\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"boolean[]\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test17\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"boolean[]\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n@@ -269,3 +269,3 @@\n-            func @\"test18\" (%0 : ConstantsTest)void -> {\n-                %1 : java.lang.Class = constant @\"boolean[][][]\";\n-                %2 : Var<java.lang.Class<+<java.lang.Object>>> = var %1 @\"s\";\n+            func @\"test18\" (%0 : java.type:\"ConstantsTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Class\" = constant @\"boolean[][][]\";\n+                %2 : Var<java.type:\"java.lang.Class<?>\"> = var %1 @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConstantsTest.java","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-            func @\"test1\" ()void -> {\n-                  %0 : java.lang.Number = constant @null;\n-                  %1 : java.lang.Number = invoke %0 @\"DenotableTypesTest::m1(java.lang.Number)java.lang.Number\";\n-                  return;\n+            func @\"test1\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.lang.Number\" = constant @null;\n+                %1 : java.type:\"java.lang.Number\" = invoke %0 @\"DenotableTypesTest::m1(java.lang.Number):java.lang.Number\";\n+                return;\n@@ -52,7 +52,7 @@\n-            func @\"test2\" ()void -> {\n-                  %0 : int = constant @\"1\";\n-                  %1 : java.lang.Integer = invoke %0 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                  %2 : double = constant @\"3.0\";\n-                  %3 : java.lang.Double = invoke %2 @\"java.lang.Double::valueOf(double)java.lang.Double\";\n-                  %4 : java.util.List<+<java.lang.Number>> = invoke %1 %3 @\"java.util.List::of(java.lang.Object, java.lang.Object)java.util.List\";\n-                  return;\n+            func @\"test2\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"int\" = constant @\"1\";\n+                %1 : java.type:\"java.lang.Integer\" = invoke %0 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %2 : java.type:\"double\" = constant @\"3.0\";\n+                %3 : java.type:\"java.lang.Double\" = invoke %2 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n+                %4 : java.type:\"java.util.List<? extends java.lang.Number>\" = invoke %1 %3 @\"java.util.List::of(java.lang.Object, java.lang.Object):java.util.List\";\n+                return;\n@@ -69,3 +69,3 @@\n-            func @\"test3\" ()void -> {\n-                %0 : java.lang.RuntimeException = constant @null;\n-                %1 : java.lang.RuntimeException = invoke %0 @\"DenotableTypesTest::m2(java.lang.Throwable)java.lang.Throwable\";\n+            func @\"test3\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.lang.RuntimeException\" = constant @null;\n+                %1 : java.type:\"java.lang.RuntimeException\" = invoke %0 @\"DenotableTypesTest::m2(java.lang.Throwable):java.lang.Throwable\";\n@@ -88,7 +88,7 @@\n-            func @\"test4\" ()void -> {\n-                  %0 : java.lang.Object = constant @null;\n-                  %1 : DenotableTypesTest$C = cast %0 @\"DenotableTypesTest$C\";\n-                  %2 : java.lang.Object = constant @null;\n-                  %3 : DenotableTypesTest$D = cast %2 @\"DenotableTypesTest$D\";\n-                  %4 : DenotableTypesTest$A = invoke %1 %3 @\"DenotableTypesTest::pick(java.lang.Object, java.lang.Object)java.lang.Object\";\n-                  return;\n+            func @\"test4\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.lang.Object\" = constant @null;\n+                %1 : java.type:\"DenotableTypesTest$C\" = cast %0 @\"DenotableTypesTest$C\";\n+                %2 : java.type:\"java.lang.Object\" = constant @null;\n+                %3 : java.type:\"DenotableTypesTest$D\" = cast %2 @\"DenotableTypesTest$D\";\n+                %4 : java.type:\"DenotableTypesTest$A\" = invoke %1 %3 @\"DenotableTypesTest::pick(java.lang.Object, java.lang.Object):java.lang.Object\";\n+                return;\n@@ -103,7 +103,7 @@\n-            func @\"test5\" ()void -> {\n-                  %0 : java.util.List<+<java.lang.Number>> = constant @null;\n-                  %1 : Var<java.util.List<+<java.lang.Number>>> = var %0 @\"l\";\n-                  %2 : java.util.List<+<java.lang.Number>> = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : java.lang.Number = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n-                  return;\n+            func @\"test5\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.util.List<? extends java.lang.Number>\" = constant @null;\n+                %1 : Var<java.type:\"java.util.List<? extends java.lang.Number>\"> = var %0 @\"l\";\n+                %2 : java.type:\"java.util.List<? extends java.lang.Number>\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"java.lang.Number\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                return;\n@@ -119,7 +119,7 @@\n-            func @\"test6\" ()void -> {\n-                  %0 : java.util.List<-<java.lang.Number>> = constant @null;\n-                  %1 : Var<java.util.List<-<java.lang.Number>>> = var %0 @\"l\";\n-                  %2 : java.util.List<-<java.lang.Number>> = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : java.lang.Object = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n-                  return;\n+            func @\"test6\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.util.List<? super java.lang.Number>\" = constant @null;\n+                %1 : Var<java.type:\"java.util.List<? super java.lang.Number>\"> = var %0 @\"l\";\n+                %2 : java.type:\"java.util.List<? super java.lang.Number>\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"java.lang.Object\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                return;\n@@ -137,7 +137,7 @@\n-            func @\"test7\" ()void -> {\n-                  %0 : #X<&m<DenotableTypesTest, test7, func<void>>, java.lang.Object> = constant @null;\n-                  %1 : Var<#X<&m<DenotableTypesTest, test7, func<void>>, java.lang.Object>> = var %0 @\"x\";\n-                  %2 : #X<&m<DenotableTypesTest, test7, func<void>>, java.lang.Object> = var.load %1;\n-                  %3 : java.lang.Runnable = cast %2 @\"java.lang.Runnable\";\n-                  invoke %3 @\"DenotableTypesTest::consume(java.lang.Runnable)void\";\n-                  return;\n+            func @\"test7\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"&DenotableTypesTest::test7():void::<X>\" = constant @null;\n+                %1 : Var<java.type:\"&DenotableTypesTest::test7():void::<X>\"> = var %0 @\"x\";\n+                %2 : java.type:\"&DenotableTypesTest::test7():void::<X>\" = var.load %1;\n+                %3 : java.type:\"java.lang.Runnable\" = cast %2 @\"java.lang.Runnable\";\n+                invoke %3 @\"DenotableTypesTest::consume(java.lang.Runnable):void\";\n+                return;\n@@ -157,10 +157,10 @@\n-            func @\"test8\" (%0 : java.util.List<+<DenotableTypesTest$Adder<java.lang.Integer>>>)void -> {\n-                  %1 : Var<java.util.List<+<DenotableTypesTest$Adder<java.lang.Integer>>>> = var %0 @\"list\";\n-                  %2 : java.util.List<+<DenotableTypesTest$Adder<java.lang.Integer>>> = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : DenotableTypesTest$Adder<java.lang.Integer> = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n-                  %5 : java.util.List<+<DenotableTypesTest$Adder<java.lang.Integer>>> = var.load %1;\n-                  %6 : int = constant @\"1\";\n-                  %7 : DenotableTypesTest$Adder<java.lang.Integer> = invoke %5 %6 @\"java.util.List::get(int)java.lang.Object\";\n-                  invoke %4 %7 @\"DenotableTypesTest$Adder::add(DenotableTypesTest$Adder)void\";\n-                  return;\n+            func @\"test8\" (%0 : java.type:\"java.util.List<? extends DenotableTypesTest$Adder<java.lang.Integer>>\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.util.List<? extends DenotableTypesTest$Adder<java.lang.Integer>>\"> = var %0 @\"list\";\n+                %2 : java.type:\"java.util.List<? extends DenotableTypesTest$Adder<java.lang.Integer>>\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                %5 : java.type:\"java.util.List<? extends DenotableTypesTest$Adder<java.lang.Integer>>\" = var.load %1;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %5 %6 @\"java.util.List::get(int):java.lang.Object\";\n+                invoke %4 %7 @\"DenotableTypesTest$Adder::add(DenotableTypesTest$Adder):void\";\n+                return;\n@@ -179,8 +179,8 @@\n-            func @\"test9\" (%0 : java.util.List<+<DenotableTypesTest$Box<java.lang.Integer>>>)void -> {\n-                  %1 : Var<java.util.List<+<DenotableTypesTest$Box<java.lang.Integer>>>> = var %0 @\"list\";\n-                  %2 : java.util.List<+<DenotableTypesTest$Box<java.lang.Integer>>> = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : DenotableTypesTest$Box<java.lang.Integer> = invoke %2 %3 @\"java.util.List::get(int)java.lang.Object\";\n-                  %5 : java.lang.Integer = field.load %4 @\"DenotableTypesTest$Box::x()java.lang.Object\";\n-                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                  return;\n+            func @\"test9\" (%0 : java.type:\"java.util.List<? extends DenotableTypesTest$Box<java.lang.Integer>>\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.util.List<? extends DenotableTypesTest$Box<java.lang.Integer>>\"> = var %0 @\"list\";\n+                %2 : java.type:\"java.util.List<? extends DenotableTypesTest$Box<java.lang.Integer>>\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"DenotableTypesTest$Box<java.lang.Integer>\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                %5 : java.type:\"java.lang.Integer\" = field.load %4 @\"DenotableTypesTest$Box::x:java.lang.Object\";\n+                %6 : Var<java.type:\"java.lang.Integer\"> = var %5 @\"i\";\n+                return;\n@@ -209,14 +209,14 @@\n-            func @\"test10\" ()void -> {\n-                  java.try\n-                      ()void -> {\n-                          invoke @\"DenotableTypesTest::g()void\";\n-                          yield;\n-                      }\n-                      (%0 : java.lang.Exception)void -> {\n-                          %1 : Var<java.lang.Exception> = var %0 @\"x\";\n-                          %2 : java.lang.Exception = var.load %1;\n-                          %3 : DenotableTypesTest$E = cast %2 @\"DenotableTypesTest$E\";\n-                          invoke %3 @\"DenotableTypesTest$E::m()void\";\n-                          yield;\n-                      };\n-                  return;\n+            func @\"test10\" ()java.type:\"void\" -> {\n+                java.try\n+                    ()java.type:\"void\" -> {\n+                        invoke @\"DenotableTypesTest::g():void\";\n+                        yield;\n+                    }\n+                    (%0 : java.type:\"java.lang.Exception\")java.type:\"void\" -> {\n+                        %1 : Var<java.type:\"java.lang.Exception\"> = var %0 @\"x\";\n+                        %2 : java.type:\"java.lang.Exception\" = var.load %1;\n+                        %3 : java.type:\"DenotableTypesTest$E\" = cast %2 @\"DenotableTypesTest$E\";\n+                        invoke %3 @\"DenotableTypesTest$E::m():void\";\n+                        yield;\n+                    };\n+                return;\n","filename":"test\/langtools\/tools\/javac\/reflect\/DenotableTypesTest.java","additions":74,"deletions":74,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-            func @\"test1\" (%0 : EnumAccessTest)java.lang.constant.DirectMethodHandleDesc$Kind -> {\n-                %1 : java.lang.constant.DirectMethodHandleDesc$Kind = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL()java.lang.constant.DirectMethodHandleDesc$Kind\";\n+            func @\"test1\" (%0 : java.type:\"EnumAccessTest\")java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" -> {\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n@@ -53,2 +53,2 @@\n-            func @\"test2\" (%0 : EnumAccessTest)java.lang.constant.DirectMethodHandleDesc$Kind -> {\n-                %1 : java.lang.constant.DirectMethodHandleDesc$Kind = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL()java.lang.constant.DirectMethodHandleDesc$Kind\";\n+            func @\"test2\" (%0 : java.type:\"EnumAccessTest\")java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" -> {\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n@@ -64,2 +64,2 @@\n-            func @\"test3\" (%0 : EnumAccessTest)java.lang.constant.DirectMethodHandleDesc$Kind -> {\n-                %1 : java.lang.constant.DirectMethodHandleDesc$Kind = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL()java.lang.constant.DirectMethodHandleDesc$Kind\";\n+            func @\"test3\" (%0 : java.type:\"EnumAccessTest\")java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" -> {\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/EnumAccessTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,5 +47,5 @@\n-            func @\"test1\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = constant @\"1\";\n-                field.store %1 @\"FieldAccessTest::s_f()int\";\n-                %2 : int = constant @\"1\";\n-                field.store %0 %2 @\"FieldAccessTest::f()int\";\n+            func @\"test1\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                field.store %1 @\"FieldAccessTest::s_f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %2 @\"FieldAccessTest::f:int\";\n@@ -62,9 +62,9 @@\n-            func @\"test1_1\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %6 @\"FieldAccessTest::s_f()int\";\n+            func @\"test1_1\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %6 @\"FieldAccessTest::s_f:int\";\n@@ -81,4 +81,4 @@\n-            func @\"test2\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = constant @\"1\";\n-                field.store %0 %1 @\"FieldAccessTest::f()int\";\n-                field.store %1 @\"FieldAccessTest::s_f()int\";\n+            func @\"test2\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %1 @\"FieldAccessTest::f:int\";\n+                field.store %1 @\"FieldAccessTest::s_f:int\";\n@@ -94,3 +94,3 @@\n-            func @\"test2_1\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = constant @\"1\";\n-                field.store %0 %1 @\"FieldAccessTest::f()int\";\n+            func @\"test2_1\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %1 @\"FieldAccessTest::f:int\";\n@@ -106,2 +106,2 @@\n-            func @\"test2_2\" (%0 : FieldAccessTest)int -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n+            func @\"test2_2\" (%0 : java.type:\"FieldAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n@@ -117,3 +117,3 @@\n-            func @\"test2_3\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = constant @\"1\";\n-                field.store %0 %1 @\"FieldAccessTest::f()int\";\n+            func @\"test2_3\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %1 @\"FieldAccessTest::f:int\";\n@@ -129,2 +129,2 @@\n-            func @\"test2_4\" (%0 : FieldAccessTest)int -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n+            func @\"test2_4\" (%0 : java.type:\"FieldAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n@@ -140,4 +140,4 @@\n-            func @\"test3\" (%0 : FieldAccessTest)int -> {\n-                %1 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %2 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %3 : int = add %1 %2;\n+            func @\"test3\" (%0 : java.type:\"FieldAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %2 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %3 : java.type:\"int\" = add %1 %2;\n@@ -165,7 +165,7 @@\n-            func @\"test4\" (%0 : FieldAccessTest, %1 : FieldAccessTest$A)void -> {\n-                %2 : Var<FieldAccessTest$A> = var %1 @\"a\";\n-                %3 : FieldAccessTest$A = var.load %2;\n-                %4 : FieldAccessTest$B = field.load %3 @\"FieldAccessTest$A::b()FieldAccessTest$B\";\n-                %5 : FieldAccessTest$C = field.load %4 @\"FieldAccessTest$B::c()FieldAccessTest$C\";\n-                %6 : int = constant @\"1\";\n-                field.store %5 %6 @\"FieldAccessTest$C::f()int\";\n+            func @\"test4\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$A\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$A\"> = var %1 @\"a\";\n+                %3 : java.type:\"FieldAccessTest$A\" = var.load %2;\n+                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @\"FieldAccessTest$A::b:FieldAccessTest$B\";\n+                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @\"FieldAccessTest$B::c:FieldAccessTest$C\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                field.store %5 %6 @\"FieldAccessTest$C::f:int\";\n@@ -186,2 +186,2 @@\n-            func @\"test5\" (%0 : FieldAccessTest)int -> {\n-                %1 : int = field.load @\"FieldAccessTest$X::s_f()int\";\n+            func @\"test5\" (%0 : java.type:\"FieldAccessTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = field.load @\"FieldAccessTest$X::s_f:int\";\n@@ -197,3 +197,3 @@\n-            func @\"test6\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = constant @\"1\";\n-                field.store %1 @\"FieldAccessTest$X::s_f()int\";\n+            func @\"test6\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                field.store %1 @\"FieldAccessTest$X::s_f:int\";\n@@ -210,9 +210,9 @@\n-            func @\"test7\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %6 @\"FieldAccessTest::s_f()int\";\n+            func @\"test7\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %6 @\"FieldAccessTest::s_f:int\";\n@@ -229,9 +229,9 @@\n-            func @\"test8\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %6 @\"FieldAccessTest::s_f()int\";\n+            func @\"test8\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %6 @\"FieldAccessTest::s_f:int\";\n@@ -248,5 +248,5 @@\n-            func @\"test9\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load @\"FieldAccessTest$X::s_f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %3 @\"FieldAccessTest$X::s_f()int\";\n+            func @\"test9\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load @\"FieldAccessTest$X::s_f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %3 @\"FieldAccessTest$X::s_f:int\";\n@@ -262,6 +262,6 @@\n-            func @\"test10\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                field.store %3 @\"FieldAccessTest::s_f()int\";\n+            func @\"test10\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                field.store %3 @\"FieldAccessTest::s_f:int\";\n@@ -277,9 +277,9 @@\n-            func @\"test11\" (%0 : FieldAccessTest, %1 : FieldAccessTest$A)void -> {\n-                %2 : Var<FieldAccessTest$A> = var %1 @\"a\";\n-                %3 : FieldAccessTest$A = var.load %2;\n-                %4 : FieldAccessTest$B = field.load %3 @\"FieldAccessTest$A::b()FieldAccessTest$B\";\n-                %5 : FieldAccessTest$C = field.load %4 @\"FieldAccessTest$B::c()FieldAccessTest$C\";\n-                %6 : int = field.load %5 @\"FieldAccessTest$C::f()int\";\n-                %7 : int = constant @\"1\";\n-                %8 : int = add %6 %7;\n-                field.store %5 %8 @\"FieldAccessTest$C::f()int\";\n+            func @\"test11\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$A\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$A\"> = var %1 @\"a\";\n+                %3 : java.type:\"FieldAccessTest$A\" = var.load %2;\n+                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @\"FieldAccessTest$A::b:FieldAccessTest$B\";\n+                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @\"FieldAccessTest$B::c:FieldAccessTest$C\";\n+                %6 : java.type:\"int\" = field.load %5 @\"FieldAccessTest$C::f:int\";\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"int\" = add %6 %7;\n+                field.store %5 %8 @\"FieldAccessTest$C::f:int\";\n@@ -295,11 +295,11 @@\n-            func @\"test12\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : Var<int> = var %1 @\"x\";\n-                %5 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %0 %7 @\"FieldAccessTest::f()int\";\n-                %8 : Var<int> = var %5 @\"y\";\n+            func @\"test12\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                %8 : Var<java.type:\"int\"> = var %5 @\"y\";\n@@ -316,11 +316,11 @@\n-            func @\"test13\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : Var<int> = var %1 @\"x\";\n-                %5 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %0 %7 @\"FieldAccessTest::f()int\";\n-                %8 : Var<int> = var %5 @\"y\";\n+            func @\"test13\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                %8 : Var<java.type:\"int\"> = var %5 @\"y\";\n@@ -337,11 +337,11 @@\n-            func @\"test14\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %3 @\"FieldAccessTest::s_f()int\";\n-                %4 : Var<int> = var %1 @\"x\";\n-                %5 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %7 @\"FieldAccessTest::s_f()int\";\n-                %8 : Var<int> = var %5 @\"y\";\n+            func @\"test14\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %3 @\"FieldAccessTest::s_f:int\";\n+                %4 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %5 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %7 @\"FieldAccessTest::s_f:int\";\n+                %8 : Var<java.type:\"int\"> = var %5 @\"y\";\n@@ -358,14 +358,14 @@\n-            func @\"test15\" (%0 : FieldAccessTest, %1 : FieldAccessTest$X)void -> {\n-                %2 : Var<FieldAccessTest$X> = var %1 @\"h\";\n-                %3 : FieldAccessTest$X = var.load %2;\n-                %4 : int = field.load %3 @\"FieldAccessTest$X::f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %3 %6 @\"FieldAccessTest$X::f()int\";\n-                %7 : Var<int> = var %4 @\"x\";\n-                %8 : FieldAccessTest$X = var.load %2;\n-                %9 : int = field.load %8 @\"FieldAccessTest$X::f()int\";\n-                %10 : int = constant @\"1\";\n-                %11 : int = sub %9 %10;\n-                field.store %8 %11 @\"FieldAccessTest$X::f()int\";\n-                %12 : Var<int> = var %9 @\"y\";\n+            func @\"test15\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$X\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$X\"> = var %1 @\"h\";\n+                %3 : java.type:\"FieldAccessTest$X\" = var.load %2;\n+                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$X::f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %3 %6 @\"FieldAccessTest$X::f:int\";\n+                %7 : Var<java.type:\"int\"> = var %4 @\"x\";\n+                %8 : java.type:\"FieldAccessTest$X\" = var.load %2;\n+                %9 : java.type:\"int\" = field.load %8 @\"FieldAccessTest$X::f:int\";\n+                %10 : java.type:\"int\" = constant @\"1\";\n+                %11 : java.type:\"int\" = sub %9 %10;\n+                field.store %8 %11 @\"FieldAccessTest$X::f:int\";\n+                %12 : Var<java.type:\"int\"> = var %9 @\"y\";\n@@ -385,11 +385,11 @@\n-            func @\"test16\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : Var<int> = var %3 @\"x\";\n-                %5 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %0 %7 @\"FieldAccessTest::f()int\";\n-                %8 : Var<int> = var %7 @\"y\";\n+            func @\"test16\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"x\";\n+                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                %8 : Var<java.type:\"int\"> = var %7 @\"y\";\n@@ -406,11 +406,11 @@\n-            func @\"test17\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %0 %3 @\"FieldAccessTest::f()int\";\n-                %4 : Var<int> = var %3 @\"x\";\n-                %5 : int = field.load %0 @\"FieldAccessTest::f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %0 %7 @\"FieldAccessTest::f()int\";\n-                %8 : Var<int> = var %7 @\"y\";\n+            func @\"test17\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"x\";\n+                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                %8 : Var<java.type:\"int\"> = var %7 @\"y\";\n@@ -427,11 +427,11 @@\n-            func @\"test18\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %2 : int = constant @\"1\";\n-                %3 : int = add %1 %2;\n-                field.store %3 @\"FieldAccessTest::s_f()int\";\n-                %4 : Var<int> = var %3 @\"x\";\n-                %5 : int = field.load @\"FieldAccessTest::s_f()int\";\n-                %6 : int = constant @\"1\";\n-                %7 : int = sub %5 %6;\n-                field.store %7 @\"FieldAccessTest::s_f()int\";\n-                %8 : Var<int> = var %7 @\"y\";\n+            func @\"test18\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"int\" = add %1 %2;\n+                field.store %3 @\"FieldAccessTest::s_f:int\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"x\";\n+                %5 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                %7 : java.type:\"int\" = sub %5 %6;\n+                field.store %7 @\"FieldAccessTest::s_f:int\";\n+                %8 : Var<java.type:\"int\"> = var %7 @\"y\";\n@@ -448,14 +448,14 @@\n-            func @\"test19\" (%0 : FieldAccessTest, %1 : FieldAccessTest$X)void -> {\n-                %2 : Var<FieldAccessTest$X> = var %1 @\"h\";\n-                %3 : FieldAccessTest$X = var.load %2;\n-                %4 : int = field.load %3 @\"FieldAccessTest$X::f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %3 %6 @\"FieldAccessTest$X::f()int\";\n-                %7 : Var<int> = var %6 @\"x\";\n-                %8 : FieldAccessTest$X = var.load %2;\n-                %9 : int = field.load %8 @\"FieldAccessTest$X::f()int\";\n-                %10 : int = constant @\"1\";\n-                %11 : int = sub %9 %10;\n-                field.store %8 %11 @\"FieldAccessTest$X::f()int\";\n-                %12 : Var<int> = var %11 @\"y\";\n+            func @\"test19\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$X\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$X\"> = var %1 @\"h\";\n+                %3 : java.type:\"FieldAccessTest$X\" = var.load %2;\n+                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$X::f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %3 %6 @\"FieldAccessTest$X::f:int\";\n+                %7 : Var<java.type:\"int\"> = var %6 @\"x\";\n+                %8 : java.type:\"FieldAccessTest$X\" = var.load %2;\n+                %9 : java.type:\"int\" = field.load %8 @\"FieldAccessTest$X::f:int\";\n+                %10 : java.type:\"int\" = constant @\"1\";\n+                %11 : java.type:\"int\" = sub %9 %10;\n+                field.store %8 %11 @\"FieldAccessTest$X::f:int\";\n+                %12 : Var<java.type:\"int\"> = var %11 @\"y\";\n@@ -476,4 +476,4 @@\n-                func @\"test\" (%0 : FieldAccessTest$Y)void -> {\n-                    %1 : int = field.load %0 @\"FieldAccessTest$Y::f()int\";\n-                    %2 : Var<int> = var %1 @\"x\";\n-                    %3 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n+                func @\"test\" (%0 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                    %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest$Y::f:int\";\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %3 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n@@ -491,5 +491,5 @@\n-                func @\"test2\" (%0 : FieldAccessTest$Y)void -> {\n-                    %1 : int = constant @\"1\";\n-                    field.store %0 %1 @\"FieldAccessTest$Y::f()int\";\n-                    %2 : int = constant @\"1\";\n-                    field.store %2 @\"FieldAccessTest$Y::s_f()int\";\n+                func @\"test2\" (%0 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                    %1 : java.type:\"int\" = constant @\"1\";\n+                    field.store %0 %1 @\"FieldAccessTest$Y::f:int\";\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    field.store %2 @\"FieldAccessTest$Y::s_f:int\";\n@@ -506,9 +506,9 @@\n-                func @\"test3\" (%0 : FieldAccessTest$Y)void -> {\n-                    %1 : int = field.load %0 @\"FieldAccessTest$Y::f()int\";\n-                    %2 : int = constant @\"1\";\n-                    %3 : int = add %1 %2;\n-                    field.store %0 %3 @\"FieldAccessTest$Y::f()int\";\n-                    %4 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n-                    %5 : int = constant @\"1\";\n-                    %6 : int = add %4 %5;\n-                    field.store %6 @\"FieldAccessTest$Y::s_f()int\";\n+                func @\"test3\" (%0 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                    %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest$Y::f:int\";\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    %3 : java.type:\"int\" = add %1 %2;\n+                    field.store %0 %3 @\"FieldAccessTest$Y::f:int\";\n+                    %4 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                    %5 : java.type:\"int\" = constant @\"1\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    field.store %6 @\"FieldAccessTest$Y::s_f:int\";\n@@ -526,7 +526,7 @@\n-            func @\"test20\" (%0 : FieldAccessTest, %1 : FieldAccessTest$Y)void -> {\n-                %2 : Var<FieldAccessTest$Y> = var %1 @\"y\";\n-                %3 : FieldAccessTest$Y = var.load %2;\n-                %4 : int = field.load %3 @\"FieldAccessTest$Y::f()int\";\n-                %5 : Var<int> = var %4 @\"x\";\n-                %6 : FieldAccessTest$Y = var.load %2;\n-                %7 : int = field.load %6 @\"FieldAccessTest$Y::yf()int\";\n+            func @\"test20\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$Y\"> = var %1 @\"y\";\n+                %3 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$Y::f:int\";\n+                %5 : Var<java.type:\"int\"> = var %4 @\"x\";\n+                %6 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %7 : java.type:\"int\" = field.load %6 @\"FieldAccessTest$Y::yf:int\";\n@@ -534,2 +534,2 @@\n-                %8 : FieldAccessTest$Y = var.load %2;\n-                %9 : int = field.load @\"FieldAccessTest$Y::s_yf()int\";\n+                %8 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %9 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n@@ -537,1 +537,1 @@\n-                %10 : int = field.load @\"FieldAccessTest$Y::s_yf()int\";\n+                %10 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n@@ -539,2 +539,2 @@\n-                %11 : FieldAccessTest$Y = var.load %2;\n-                %12 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n+                %11 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %12 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n@@ -542,1 +542,1 @@\n-                %13 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n+                %13 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n@@ -558,18 +558,18 @@\n-            func @\"test21\" (%0 : FieldAccessTest, %1 : FieldAccessTest$Y)void -> {\n-                %2 : Var<FieldAccessTest$Y> = var %1 @\"y\";\n-                %3 : FieldAccessTest$Y = var.load %2;\n-                %4 : int = constant @\"1\";\n-                field.store %3 %4 @\"FieldAccessTest$Y::f()int\";\n-                %5 : FieldAccessTest$Y = var.load %2;\n-                %6 : int = constant @\"1\";\n-                field.store %5 %6 @\"FieldAccessTest$Y::yf()int\";\n-                %7 : FieldAccessTest$Y = var.load %2;\n-                %8 : int = constant @\"1\";\n-                field.store %8 @\"FieldAccessTest$Y::s_yf()int\";\n-                %9 : int = constant @\"1\";\n-                field.store %9 @\"FieldAccessTest$Y::s_yf()int\";\n-                %10 : FieldAccessTest$Y = var.load %2;\n-                %11 : int = constant @\"1\";\n-                field.store %11 @\"FieldAccessTest$Y::s_f()int\";\n-                %12 : int = constant @\"1\";\n-                field.store %12 @\"FieldAccessTest$Y::s_f()int\";\n+            func @\"test21\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$Y\"> = var %1 @\"y\";\n+                %3 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                field.store %3 %4 @\"FieldAccessTest$Y::f:int\";\n+                %5 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %6 : java.type:\"int\" = constant @\"1\";\n+                field.store %5 %6 @\"FieldAccessTest$Y::yf:int\";\n+                %7 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %8 : java.type:\"int\" = constant @\"1\";\n+                field.store %8 @\"FieldAccessTest$Y::s_yf:int\";\n+                %9 : java.type:\"int\" = constant @\"1\";\n+                field.store %9 @\"FieldAccessTest$Y::s_yf:int\";\n+                %10 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %11 : java.type:\"int\" = constant @\"1\";\n+                field.store %11 @\"FieldAccessTest$Y::s_f:int\";\n+                %12 : java.type:\"int\" = constant @\"1\";\n+                field.store %12 @\"FieldAccessTest$Y::s_f:int\";\n@@ -590,30 +590,30 @@\n-          func @\"test22\" (%0 : FieldAccessTest, %1 : FieldAccessTest$Y)void -> {\n-                %2 : Var<FieldAccessTest$Y> = var %1 @\"y\";\n-                %3 : FieldAccessTest$Y = var.load %2;\n-                %4 : int = field.load %3 @\"FieldAccessTest$Y::f()int\";\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                field.store %3 %6 @\"FieldAccessTest$Y::f()int\";\n-                %7 : FieldAccessTest$Y = var.load %2;\n-                %8 : int = field.load %7 @\"FieldAccessTest$Y::yf()int\";\n-                %9 : int = constant @\"1\";\n-                %10 : int = add %8 %9;\n-                field.store %7 %10 @\"FieldAccessTest$Y::yf()int\";\n-                %11 : FieldAccessTest$Y = var.load %2;\n-                %12 : int = field.load @\"FieldAccessTest$Y::s_yf()int\";\n-                %13 : int = constant @\"1\";\n-                %14 : int = add %12 %13;\n-                field.store %14 @\"FieldAccessTest$Y::s_yf()int\";\n-                %15 : int = field.load @\"FieldAccessTest$Y::s_yf()int\";\n-                %16 : int = constant @\"1\";\n-                %17 : int = add %15 %16;\n-                field.store %17 @\"FieldAccessTest$Y::s_yf()int\";\n-                %18 : FieldAccessTest$Y = var.load %2;\n-                %19 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n-                %20 : int = constant @\"1\";\n-                %21 : int = add %19 %20;\n-                field.store %21 @\"FieldAccessTest$Y::s_f()int\";\n-                %22 : int = field.load @\"FieldAccessTest$Y::s_f()int\";\n-                %23 : int = constant @\"1\";\n-                %24 : int = add %22 %23;\n-                field.store %24 @\"FieldAccessTest$Y::s_f()int\";\n+            func @\"test22\" (%0 : java.type:\"FieldAccessTest\", %1 : java.type:\"FieldAccessTest$Y\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"FieldAccessTest$Y\"> = var %1 @\"y\";\n+                %3 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$Y::f:int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                field.store %3 %6 @\"FieldAccessTest$Y::f:int\";\n+                %7 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %8 : java.type:\"int\" = field.load %7 @\"FieldAccessTest$Y::yf:int\";\n+                %9 : java.type:\"int\" = constant @\"1\";\n+                %10 : java.type:\"int\" = add %8 %9;\n+                field.store %7 %10 @\"FieldAccessTest$Y::yf:int\";\n+                %11 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %12 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                %13 : java.type:\"int\" = constant @\"1\";\n+                %14 : java.type:\"int\" = add %12 %13;\n+                field.store %14 @\"FieldAccessTest$Y::s_yf:int\";\n+                %15 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                %16 : java.type:\"int\" = constant @\"1\";\n+                %17 : java.type:\"int\" = add %15 %16;\n+                field.store %17 @\"FieldAccessTest$Y::s_yf:int\";\n+                %18 : java.type:\"FieldAccessTest$Y\" = var.load %2;\n+                %19 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                %20 : java.type:\"int\" = constant @\"1\";\n+                %21 : java.type:\"int\" = add %19 %20;\n+                field.store %21 @\"FieldAccessTest$Y::s_f:int\";\n+                %22 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                %23 : java.type:\"int\" = constant @\"1\";\n+                %24 : java.type:\"int\" = add %22 %23;\n+                field.store %24 @\"FieldAccessTest$Y::s_f:int\";\n@@ -635,4 +635,4 @@\n-            func @\"test23\" (%0 : FieldAccessTest)void -> {\n-                %1 : int = field.load @\"java.util.Spliterator$OfInt::CONCURRENT()int\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = field.load @\"java.util.Spliterator$OfInt::CONCURRENT()int\";\n+            func @\"test23\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n@@ -640,1 +640,1 @@\n-                %4 : int = field.load @\"java.util.Spliterator$OfInt::CONCURRENT()int\";\n+                %4 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n@@ -653,3 +653,3 @@\n-            func @\"test24\" (%0 : FieldAccessTest)void -> {\n-                %1 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                %2 : Var<java.io.PrintStream> = var %1 @\"ps\";\n+            func @\"test24\" (%0 : java.type:\"FieldAccessTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %2 : Var<java.type:\"java.io.PrintStream\"> = var %1 @\"ps\";\n@@ -673,8 +673,8 @@\n-            func @\"test25\" ()void -> {\n-                    %0 : java.lang.String = constant @\"abc\";\n-                    %1 : FieldAccessTest$Box<java.lang.String> = new %0 @\"FieldAccessTest$Box::<new>(java.lang.Object)\";\n-                    %2 : Var<FieldAccessTest$Box<java.lang.String>> = var %1 @\"b\";\n-                    %3 : FieldAccessTest$Box<java.lang.String> = var.load %2;\n-                    %4 : java.lang.String = field.load %3 @\"FieldAccessTest$Box::v()java.lang.Object\";\n-                    %5 : Var<java.lang.String> = var %4 @\"s\";\n-                    return;\n+            func @\"test25\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.lang.String\" = constant @\"abc\";\n+                %1 : java.type:\"FieldAccessTest$Box<java.lang.String>\" = new %0 @\"FieldAccessTest$Box::(java.lang.Object)\";\n+                %2 : Var<java.type:\"FieldAccessTest$Box<java.lang.String>\"> = var %1 @\"b\";\n+                %3 : java.type:\"FieldAccessTest$Box<java.lang.String>\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = field.load %3 @\"FieldAccessTest$Box::v:java.lang.Object\";\n+                %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                return;\n","filename":"test\/langtools\/tools\/javac\/reflect\/FieldAccessTest.java","additions":271,"deletions":271,"binary":false,"changes":542,"status":"modified"},{"patch":"@@ -39,30 +39,30 @@\n-            func @\"test1\" (%0 : ForLoopTest, %1 : java.util.List<java.util.List<java.lang.String>>)void -> {\n-              %2 : Var<java.util.List<java.util.List<java.lang.String>>> = var %1 @\"ll\";\n-              java.enhancedFor\n-                  ^expr()java.util.List<java.util.List<java.lang.String>> -> {\n-                      %3 : java.util.List<java.util.List<java.lang.String>> = var.load %2;\n-                      yield %3;\n-                  }\n-                  ^def(%4 : java.util.List<java.lang.String>)Var<java.util.List<java.lang.String>> -> {\n-                      %5 : Var<java.util.List<java.lang.String>> = var %4 @\"l\";\n-                      yield %5;\n-                  }\n-                  ^body(%6 : Var<java.util.List<java.lang.String>>)void -> {\n-                      java.enhancedFor\n-                          ^expr()java.util.List<java.lang.String> -> {\n-                              %7 : java.util.List<java.lang.String> = var.load %6;\n-                              yield %7;\n-                          }\n-                          ^def(%8 : java.lang.String)Var<java.lang.String> -> {\n-                              %9 : Var<java.lang.String> = var %8 @\"s\";\n-                              yield %9;\n-                          }\n-                          ^body(%10 : Var<java.lang.String>)void -> {\n-                              %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                              %12 : java.lang.String = var.load %10;\n-                              invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n-                              java.continue;\n-                          };\n-                      java.continue;\n-                  };\n-              return;\n+            func @\"test1\" (%0 : java.type:\"ForLoopTest\", %1 : java.type:\"java.util.List<java.util.List<java.lang.String>>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.util.List<java.lang.String>>\"> = var %1 @\"ll\";\n+                java.enhancedFor\n+                    ()java.type:\"java.util.List<java.util.List<java.lang.String>>\" -> {\n+                        %3 : java.type:\"java.util.List<java.util.List<java.lang.String>>\" = var.load %2;\n+                        yield %3;\n+                    }\n+                    (%4 : java.type:\"java.util.List<java.lang.String>\")Var<java.type:\"java.util.List<java.lang.String>\"> -> {\n+                        %5 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %4 @\"l\";\n+                        yield %5;\n+                    }\n+                    (%6 : Var<java.type:\"java.util.List<java.lang.String>\">)java.type:\"void\" -> {\n+                        java.enhancedFor\n+                            ()java.type:\"java.util.List<java.lang.String>\" -> {\n+                                %7 : java.type:\"java.util.List<java.lang.String>\" = var.load %6;\n+                                yield %7;\n+                            }\n+                            (%8 : java.type:\"java.lang.String\")Var<java.type:\"java.lang.String\"> -> {\n+                                %9 : Var<java.type:\"java.lang.String\"> = var %8 @\"s\";\n+                                yield %9;\n+                            }\n+                            (%10 : Var<java.type:\"java.lang.String\">)java.type:\"void\" -> {\n+                                %11 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                                %12 : java.type:\"java.lang.String\" = var.load %10;\n+                                invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                                java.continue;\n+                            };\n+                        java.continue;\n+                    };\n+                return;\n@@ -81,2 +81,2 @@\n-            func @\"test2\" (%0 : ForLoopTest, %1 : java.util.List<java.lang.String>)void -> {\n-                %2 : Var<java.util.List<java.lang.String>> = var %1 @\"l\";\n+            func @\"test2\" (%0 : java.type:\"ForLoopTest\", %1 : java.type:\"java.util.List<java.lang.String>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l\";\n@@ -84,9 +84,9 @@\n-                    ^expr()java.util.List<java.lang.String> -> {\n-                        %3 : java.util.List<java.lang.String> = var.load %2;\n-                        %4 : java.util.stream.Stream<java.lang.String> = invoke %3 @\"java.util.List::stream()java.util.stream.Stream\";\n-                        %5 : java.util.function.Predicate<java.lang.String> = lambda (%6 : java.lang.String)boolean -> {\n-                            %7 : Var<java.lang.String> = var %6 @\"s\";\n-                            %8 : java.lang.String = var.load %7;\n-                            %9 : int = invoke %8 @\"java.lang.String::length()int\";\n-                            %10 : int = constant @\"10\";\n-                            %11 : boolean = lt %9 %10;\n+                    ()java.type:\"java.util.List<java.lang.String>\" -> {\n+                        %3 : java.type:\"java.util.List<java.lang.String>\" = var.load %2;\n+                        %4 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %3 @\"java.util.List::stream():java.util.stream.Stream\";\n+                        %5 : java.type:\"java.util.function.Predicate<java.lang.String>\" = lambda (%6 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                            %7 : Var<java.type:\"java.lang.String\"> = var %6 @\"s\";\n+                            %8 : java.type:\"java.lang.String\" = var.load %7;\n+                            %9 : java.type:\"int\" = invoke %8 @\"java.lang.String::length():int\";\n+                            %10 : java.type:\"int\" = constant @\"10\";\n+                            %11 : java.type:\"boolean\" = lt %9 %10;\n@@ -95,2 +95,2 @@\n-                        %12 : java.util.stream.Stream<java.lang.String> = invoke %4 %5 @\"java.util.stream.Stream::filter(java.util.function.Predicate)java.util.stream.Stream\";\n-                        %13 : java.util.List<java.lang.String> = invoke %12 @\"java.util.stream.Stream::toList()java.util.List\";\n+                        %12 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %4 %5 @\"java.util.stream.Stream::filter(java.util.function.Predicate):java.util.stream.Stream\";\n+                        %13 : java.type:\"java.util.List<java.lang.String>\" = invoke %12 @\"java.util.stream.Stream::toList():java.util.List\";\n@@ -99,2 +99,2 @@\n-                    ^def(%14 : java.lang.String)Var<java.lang.String> -> {\n-                        %15 : Var<java.lang.String> = var %14 @\"s\";\n+                    (%14 : java.type:\"java.lang.String\")Var<java.type:\"java.lang.String\"> -> {\n+                        %15 : Var<java.type:\"java.lang.String\"> = var %14 @\"s\";\n@@ -103,4 +103,4 @@\n-                    ^body(%16 : Var<java.lang.String>)void -> {\n-                        %17 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %18 : java.lang.String = var.load %16;\n-                        invoke %17 %18 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    (%16 : Var<java.type:\"java.lang.String\">)java.type:\"void\" -> {\n+                        %17 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %18 : java.type:\"java.lang.String\" = var.load %16;\n+                        invoke %17 %18 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -120,15 +120,15 @@\n-            func @\"test2_1\" (%0 : ForLoopTest, %1 : java.util.List<java.lang.String>)void -> {\n-              %2 : Var<java.util.List<java.lang.String>> = var %1 @\"l\";\n-              java.enhancedFor\n-                  ^expr()java.util.List<java.lang.String> -> {\n-                      %3 : java.util.List<java.lang.String> = var.load %2;\n-                      yield %3;\n-                  }\n-                  ^def(%4 : java.lang.String)Var<java.lang.String> -> {\n-                      %5 : Var<java.lang.String> = var %4 @\"s\";\n-                      yield %5;\n-                  }\n-                  ^body(%6 : Var<java.lang.String>)void -> {\n-                      java.continue;\n-                  };\n-              return;\n+            func @\"test2_1\" (%0 : java.type:\"ForLoopTest\", %1 : java.type:\"java.util.List<java.lang.String>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l\";\n+                java.enhancedFor\n+                    ()java.type:\"java.util.List<java.lang.String>\" -> {\n+                        %3 : java.type:\"java.util.List<java.lang.String>\" = var.load %2;\n+                        yield %3;\n+                    }\n+                    (%4 : java.type:\"java.lang.String\")Var<java.type:\"java.lang.String\"> -> {\n+                        %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                        yield %5;\n+                    }\n+                    (%6 : Var<java.type:\"java.lang.String\">)java.type:\"void\" -> {\n+                        java.continue;\n+                    };\n+                return;\n@@ -143,17 +143,17 @@\n-            func @\"test2_2\" (%0 : ForLoopTest, %1 : java.util.List<java.lang.String>)java.lang.String -> {\n-              %2 : Var<java.util.List<java.lang.String>> = var %1 @\"l\";\n-              java.enhancedFor\n-                  ^expr()java.util.List<java.lang.String> -> {\n-                      %3 : java.util.List<java.lang.String> = var.load %2;\n-                      yield %3;\n-                  }\n-                  ^def(%4 : java.lang.String)Var<java.lang.String> -> {\n-                      %5 : Var<java.lang.String> = var %4 @\"s\";\n-                      yield %5;\n-                  }\n-                  ^body(%6 : Var<java.lang.String>)void -> {\n-                      %7 : java.lang.String = var.load %6;\n-                      return %7;\n-                  };\n-              %8 : java.lang.String = constant @\"\";\n-              return %8;\n+            func @\"test2_2\" (%0 : java.type:\"ForLoopTest\", %1 : java.type:\"java.util.List<java.lang.String>\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l\";\n+                java.enhancedFor\n+                    ()java.type:\"java.util.List<java.lang.String>\" -> {\n+                        %3 : java.type:\"java.util.List<java.lang.String>\" = var.load %2;\n+                        yield %3;\n+                    }\n+                    (%4 : java.type:\"java.lang.String\")Var<java.type:\"java.lang.String\"> -> {\n+                        %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                        yield %5;\n+                    }\n+                    (%6 : Var<java.type:\"java.lang.String\">)java.type:\"void\" -> {\n+                        %7 : java.type:\"java.lang.String\" = var.load %6;\n+                        return %7;\n+                    };\n+                %8 : java.type:\"java.lang.String\" = constant @\"\";\n+                return %8;\n@@ -171,1 +171,1 @@\n-            func @\"test3\" (%0 : ForLoopTest)void -> {\n+            func @\"test3\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -173,3 +173,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -178,4 +178,4 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : int = var.load %3;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %3;\n+                        %5 : java.type:\"int\" = constant @\"10\";\n+                        %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -184,4 +184,4 @@\n-                    ^update(%7 : Var<int>)void -> {\n-                        %8 : int = var.load %7;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %8 : java.type:\"int\" = var.load %7;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -191,4 +191,4 @@\n-                    ^body(%11 : Var<int>)void -> {\n-                        %12 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %13 : int = var.load %11;\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int)void\";\n+                    (%11 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %13 : java.type:\"int\" = var.load %11;\n+                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n@@ -208,1 +208,1 @@\n-            func @\"test3_1\" (%0 : ForLoopTest)int -> {\n+            func @\"test3_1\" (%0 : java.type:\"ForLoopTest\")java.type:\"int\" -> {\n@@ -210,3 +210,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -215,4 +215,4 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : int = var.load %3;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %3;\n+                        %5 : java.type:\"int\" = constant @\"10\";\n+                        %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -221,4 +221,4 @@\n-                    ^update(%7 : Var<int>)void -> {\n-                        %8 : int = var.load %7;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %8 : java.type:\"int\" = var.load %7;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -228,2 +228,2 @@\n-                    ^body(%11 : Var<int>)void -> {\n-                        %12 : int = var.load %11;\n+                    (%11 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %12 : java.type:\"int\" = var.load %11;\n@@ -232,1 +232,1 @@\n-                %13 : int = constant @\"-1\";\n+                %13 : java.type:\"int\" = constant @\"-1\";\n@@ -245,1 +245,1 @@\n-            func @\"test4\" (%0 : ForLoopTest)void -> {\n+            func @\"test4\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -247,3 +247,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -252,4 +252,4 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : int = var.load %3;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %3;\n+                        %5 : java.type:\"int\" = constant @\"10\";\n+                        %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -258,4 +258,4 @@\n-                    ^update(%7 : Var<int>)void -> {\n-                        %8 : int = var.load %7;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %8 : java.type:\"int\" = var.load %7;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -265,4 +265,4 @@\n-                    ^body(%11 : Var<int>)void -> {\n-                        %12 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %13 : int = var.load %11;\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int)void\";\n+                    (%11 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %13 : java.type:\"int\" = var.load %11;\n+                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n@@ -281,1 +281,1 @@\n-            func @\"test5\" (%0 : ForLoopTest)void -> {\n+            func @\"test5\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -283,3 +283,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -288,4 +288,4 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : int = var.load %3;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"int\" = var.load %3;\n+                        %5 : java.type:\"int\" = constant @\"10\";\n+                        %6 : java.type:\"boolean\" = lt %4 %5;\n@@ -294,4 +294,4 @@\n-                    ^update(%7 : Var<int>)void -> {\n-                        %8 : int = var.load %7;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %8 : java.type:\"int\" = var.load %7;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -301,1 +301,1 @@\n-                    ^body(%11 : Var<int>)void -> {\n+                    (%11 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -313,3 +313,3 @@\n-            func @\"test6\" (%0 : ForLoopTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test6\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -317,1 +317,1 @@\n-                    ^init()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -320,4 +320,4 @@\n-                    ^cond()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"10\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"10\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -326,4 +326,4 @@\n-                    ^update()void -> {\n-                        %6 : int = var.load %2;\n-                        %7 : int = constant @\"1\";\n-                        %8 : int = add %6 %7;\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = var.load %2;\n+                        %7 : java.type:\"int\" = constant @\"1\";\n+                        %8 : java.type:\"int\" = add %6 %7;\n@@ -333,4 +333,4 @@\n-                    ^body()void -> {\n-                        %9 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %10 : int = var.load %2;\n-                        invoke %9 %10 @\"java.io.PrintStream::println(int)void\";\n+                    ()java.type:\"void\" -> {\n+                        %9 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %10 : java.type:\"int\" = var.load %2;\n+                        invoke %9 %10 @\"java.io.PrintStream::println(int):void\";\n@@ -351,3 +351,3 @@\n-            func @\"test7\" (%0 : ForLoopTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test7\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -355,4 +355,4 @@\n-                    ^init()void -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : int = add %3 %4;\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"int\" = add %3 %4;\n@@ -362,4 +362,4 @@\n-                    ^cond()boolean -> {\n-                        %6 : int = var.load %2;\n-                        %7 : int = constant @\"10\";\n-                        %8 : boolean = lt %6 %7;\n+                    ()java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = var.load %2;\n+                        %7 : java.type:\"int\" = constant @\"10\";\n+                        %8 : java.type:\"boolean\" = lt %6 %7;\n@@ -368,4 +368,4 @@\n-                    ^update()void -> {\n-                        %9 : int = var.load %2;\n-                        %10 : int = constant @\"1\";\n-                        %11 : int = add %9 %10;\n+                    ()java.type:\"void\" -> {\n+                        %9 : java.type:\"int\" = var.load %2;\n+                        %10 : java.type:\"int\" = constant @\"1\";\n+                        %11 : java.type:\"int\" = add %9 %10;\n@@ -375,4 +375,4 @@\n-                    ^body()void -> {\n-                        %12 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %13 : int = var.load %2;\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int)void\";\n+                    ()java.type:\"void\" -> {\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %13 : java.type:\"int\" = var.load %2;\n+                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n@@ -393,1 +393,1 @@\n-            func @\"test8\" (%0 : ForLoopTest)void -> {\n+            func @\"test8\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -395,3 +395,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -400,2 +400,2 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : boolean = constant @\"true\";\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = constant @\"true\";\n@@ -404,4 +404,4 @@\n-                    ^update(%5 : Var<int>)void -> {\n-                        %6 : int = var.load %5;\n-                        %7 : int = constant @\"1\";\n-                        %8 : int = add %6 %7;\n+                    (%5 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = var.load %5;\n+                        %7 : java.type:\"int\" = constant @\"1\";\n+                        %8 : java.type:\"int\" = add %6 %7;\n@@ -411,4 +411,4 @@\n-                    ^body(%9 : Var<int>)void -> {\n-                        %10 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %11 : int = var.load %9;\n-                        invoke %10 %11 @\"java.io.PrintStream::println(int)void\";\n+                    (%9 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %10 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %11 : java.type:\"int\" = var.load %9;\n+                        invoke %10 %11 @\"java.io.PrintStream::println(int):void\";\n@@ -428,1 +428,1 @@\n-            func @\"test9\" (%0 : ForLoopTest)void -> {\n+            func @\"test9\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -430,3 +430,3 @@\n-                    ^init()Var<int> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -435,2 +435,2 @@\n-                    ^cond(%3 : Var<int>)boolean -> {\n-                        %4 : boolean = constant @\"true\";\n+                    (%3 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = constant @\"true\";\n@@ -439,1 +439,1 @@\n-                    ^update(%5 : Var<int>)void -> {\n+                    (%5 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -442,4 +442,4 @@\n-                    ^body(%6 : Var<int>)void -> {\n-                        %7 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %8 : int = var.load %6;\n-                        invoke %7 %8 @\"java.io.PrintStream::println(int)void\";\n+                    (%6 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %8 : java.type:\"int\" = var.load %6;\n+                        invoke %7 %8 @\"java.io.PrintStream::println(int):void\";\n@@ -459,1 +459,1 @@\n-            func @\"test10\" (%0 : ForLoopTest)void -> {\n+            func @\"test10\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -461,1 +461,1 @@\n-                    ^init()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -464,2 +464,2 @@\n-                    ^cond()boolean -> {\n-                        %1 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %1 : java.type:\"boolean\" = constant @\"true\";\n@@ -468,1 +468,1 @@\n-                    ^update()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -471,1 +471,1 @@\n-                    ^body()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -484,1 +484,1 @@\n-            func @\"test11\" (%0 : ForLoopTest)void -> {\n+            func @\"test11\" (%0 : java.type:\"ForLoopTest\")java.type:\"void\" -> {\n@@ -486,6 +486,6 @@\n-                    ^init()Tuple<Var<int>, Var<int>> -> {\n-                        %1 : int = constant @\"0\";\n-                        %2 : Var<int> = var %1 @\"i\";\n-                        %3 : int = constant @\"0\";\n-                        %4 : Var<int> = var %3 @\"j\";\n-                        %5 : Tuple<Var<int>, Var<int>> = tuple %2 %4;\n+                    ()Tuple<Var<java.type:\"int\">, Var<java.type:\"int\">> -> {\n+                        %1 : java.type:\"int\" = constant @\"0\";\n+                        %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                        %3 : java.type:\"int\" = constant @\"0\";\n+                        %4 : Var<java.type:\"int\"> = var %3 @\"j\";\n+                        %5 : Tuple<Var<java.type:\"int\">, Var<java.type:\"int\">> = tuple %2 %4;\n@@ -494,6 +494,6 @@\n-                    ^cond(%6 : Var<int>, %7 : Var<int>)boolean -> {\n-                        %8 : boolean = java.cand\n-                            ()boolean -> {\n-                                %9 : int = var.load %6;\n-                                %10 : int = constant @\"10\";\n-                                %11 : boolean = lt %9 %10;\n+                    (%6 : Var<java.type:\"int\">, %7 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %9 : java.type:\"int\" = var.load %6;\n+                                %10 : java.type:\"int\" = constant @\"10\";\n+                                %11 : java.type:\"boolean\" = lt %9 %10;\n@@ -502,4 +502,4 @@\n-                            ()boolean -> {\n-                                %12 : int = var.load %7;\n-                                %13 : int = constant @\"20\";\n-                                %14 : boolean = lt %12 %13;\n+                            ()java.type:\"boolean\" -> {\n+                                %12 : java.type:\"int\" = var.load %7;\n+                                %13 : java.type:\"int\" = constant @\"20\";\n+                                %14 : java.type:\"boolean\" = lt %12 %13;\n@@ -510,4 +510,4 @@\n-                    ^update(%15 : Var<int>, %16 : Var<int>)void -> {\n-                        %17 : int = var.load %15;\n-                        %18 : int = constant @\"1\";\n-                        %19 : int = add %17 %18;\n+                    (%15 : Var<java.type:\"int\">, %16 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %17 : java.type:\"int\" = var.load %15;\n+                        %18 : java.type:\"int\" = constant @\"1\";\n+                        %19 : java.type:\"int\" = add %17 %18;\n@@ -515,3 +515,3 @@\n-                        %20 : int = var.load %16;\n-                        %21 : int = constant @\"2\";\n-                        %22 : int = add %20 %21;\n+                        %20 : java.type:\"int\" = var.load %16;\n+                        %21 : java.type:\"int\" = constant @\"2\";\n+                        %22 : java.type:\"int\" = add %20 %21;\n@@ -521,7 +521,7 @@\n-                    ^body(%23 : Var<int>, %24 : Var<int>)void -> {\n-                        %25 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %26 : int = var.load %23;\n-                        invoke %25 %26 @\"java.io.PrintStream::println(int)void\";\n-                        %27 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %28 : int = var.load %24;\n-                        invoke %27 %28 @\"java.io.PrintStream::println(int)void\";\n+                    (%23 : Var<java.type:\"int\">, %24 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %25 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %26 : java.type:\"int\" = var.load %23;\n+                        invoke %25 %26 @\"java.io.PrintStream::println(int):void\";\n+                        %27 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %28 : java.type:\"int\" = var.load %24;\n+                        invoke %27 %28 @\"java.io.PrintStream::println(int):void\";\n@@ -542,2 +542,2 @@\n-            func @\"test12\" (%0 : ForLoopTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"r\";\n+            func @\"test12\" (%0 : java.type:\"ForLoopTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"r\";\n@@ -545,3 +545,3 @@\n-                    ^init()Var<int> -> {\n-                        %3 : int = constant @\"0\";\n-                        %4 : Var<int> = var %3 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %3 : java.type:\"int\" = constant @\"0\";\n+                        %4 : Var<java.type:\"int\"> = var %3 @\"i\";\n@@ -550,4 +550,4 @@\n-                    ^cond(%5 : Var<int>)boolean -> {\n-                        %6 : int = var.load %5;\n-                        %7 : int = constant @\"10\";\n-                        %8 : boolean = lt %6 %7;\n+                    (%5 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = var.load %5;\n+                        %7 : java.type:\"int\" = constant @\"10\";\n+                        %8 : java.type:\"boolean\" = lt %6 %7;\n@@ -556,4 +556,4 @@\n-                    ^update(%9 : Var<int>)void -> {\n-                        %10 : int = var.load %9;\n-                        %11 : int = constant @\"1\";\n-                        %12 : int = add %10 %11;\n+                    (%9 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %10 : java.type:\"int\" = var.load %9;\n+                        %11 : java.type:\"int\" = constant @\"1\";\n+                        %12 : java.type:\"int\" = add %10 %11;\n@@ -563,1 +563,1 @@\n-                    ^body(%13 : Var<int>)void -> {\n+                    (%13 : Var<java.type:\"int\">)java.type:\"void\" -> {\n@@ -565,4 +565,4 @@\n-                            ()boolean -> {\n-                                %14 : int = var.load %2;\n-                                %15 : int = constant @\"0\";\n-                                %16 : boolean = eq %14 %15;\n+                            ()java.type:\"boolean\" -> {\n+                                %14 : java.type:\"int\" = var.load %2;\n+                                %15 : java.type:\"int\" = constant @\"0\";\n+                                %16 : java.type:\"boolean\" = eq %14 %15;\n@@ -571,1 +571,1 @@\n-                            ^then()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -574,4 +574,4 @@\n-                            ^else_if()boolean -> {\n-                                %17 : int = var.load %2;\n-                                %18 : int = constant @\"1\";\n-                                %19 : boolean = eq %17 %18;\n+                            ()java.type:\"boolean\" -> {\n+                                %17 : java.type:\"int\" = var.load %2;\n+                                %18 : java.type:\"int\" = constant @\"1\";\n+                                %19 : java.type:\"boolean\" = eq %17 %18;\n@@ -580,1 +580,1 @@\n-                            ^then()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -583,1 +583,1 @@\n-                            ^else()void -> {\n+                            ()java.type:\"void\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/ForLoopTest.java","additions":263,"deletions":263,"binary":false,"changes":526,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-            func @\"test1\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test1\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -41,4 +41,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -47,2 +47,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -52,1 +52,1 @@\n-                    ^else()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -66,2 +66,2 @@\n-            func @\"test2\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test2\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -69,4 +69,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -75,2 +75,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -80,2 +80,2 @@\n-                    ^else()void -> {\n-                        %7 : int = constant @\"2\";\n+                    ()java.type:\"void\" -> {\n+                        %7 : java.type:\"int\" = constant @\"2\";\n@@ -98,2 +98,2 @@\n-            func @\"test3\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test3\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -101,4 +101,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -107,2 +107,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -112,4 +112,4 @@\n-                    ^else_if()boolean -> {\n-                        %7 : int = var.load %2;\n-                        %8 : int = constant @\"2\";\n-                        %9 : boolean = lt %7 %8;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"2\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n@@ -118,2 +118,2 @@\n-                    ^then()void -> {\n-                        %10 : int = constant @\"2\";\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"int\" = constant @\"2\";\n@@ -123,1 +123,1 @@\n-                    ^else()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -139,2 +139,2 @@\n-            func @\"test4\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test4\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -142,4 +142,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -148,2 +148,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -153,4 +153,4 @@\n-                    ^else_if()boolean -> {\n-                        %7 : int = var.load %2;\n-                        %8 : int = constant @\"2\";\n-                        %9 : boolean = lt %7 %8;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"2\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n@@ -159,2 +159,2 @@\n-                    ^then()void -> {\n-                        %10 : int = constant @\"2\";\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"int\" = constant @\"2\";\n@@ -164,2 +164,2 @@\n-                    ^else()void -> {\n-                        %11 : int = constant @\"3\";\n+                    ()java.type:\"void\" -> {\n+                        %11 : java.type:\"int\" = constant @\"3\";\n@@ -183,28 +183,28 @@\n-            func @\"test5\" (%0 : IfTest, %1 : int)int -> {\n-              %2 : Var<int> = var %1 @\"i\";\n-              java.if\n-                  ()boolean -> {\n-                      %3 : int = var.load %2;\n-                      %4 : int = constant @\"1\";\n-                      %5 : boolean = lt %3 %4;\n-                      yield %5;\n-                  }\n-                  ^then()void -> {\n-                      %6 : int = constant @\"1\";\n-                      return %6;\n-                  }\n-                  ^else_if()boolean -> {\n-                      %7 : int = var.load %2;\n-                      %8 : int = constant @\"2\";\n-                      %9 : boolean = lt %7 %8;\n-                      yield %9;\n-                  }\n-                  ^then()void -> {\n-                      %10 : int = constant @\"2\";\n-                      return %10;\n-                  }\n-                  ^else()void -> {\n-                      %11 : int = constant @\"3\";\n-                      return %11;\n-                  };\n-              unreachable;\n+            func @\"test5\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                java.if\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n+                        yield %5;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        return %6;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"2\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n+                        yield %9;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"int\" = constant @\"2\";\n+                        return %10;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %11 : java.type:\"int\" = constant @\"3\";\n+                        return %11;\n+                    };\n+                unreachable;\n@@ -226,2 +226,2 @@\n-            func @\"test6\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test6\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -229,4 +229,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -235,2 +235,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -240,1 +240,1 @@\n-                    ^else()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -253,2 +253,2 @@\n-            func @\"test7\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test7\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -256,4 +256,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -262,2 +262,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -267,2 +267,2 @@\n-                    ^else()void -> {\n-                        %7 : int = constant @\"2\";\n+                    ()java.type:\"void\" -> {\n+                        %7 : java.type:\"int\" = constant @\"2\";\n@@ -284,2 +284,2 @@\n-            func @\"test8\" (%0 : IfTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test8\" (%0 : java.type:\"IfTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -287,4 +287,4 @@\n-                    ()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -293,2 +293,2 @@\n-                    ^then()void -> {\n-                        %6 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n@@ -298,4 +298,4 @@\n-                    ^else_if()boolean -> {\n-                        %7 : int = var.load %2;\n-                        %8 : int = constant @\"2\";\n-                        %9 : boolean = lt %7 %8;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        %8 : java.type:\"int\" = constant @\"2\";\n+                        %9 : java.type:\"boolean\" = lt %7 %8;\n@@ -304,2 +304,2 @@\n-                    ^then()void -> {\n-                        %10 : int = constant @\"2\";\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"int\" = constant @\"2\";\n@@ -309,2 +309,2 @@\n-                    ^else()void -> {\n-                        %11 : int = constant @\"3\";\n+                    ()java.type:\"void\" -> {\n+                        %11 : java.type:\"int\" = constant @\"3\";\n@@ -327,3 +327,3 @@\n-            func @\"test9\" (%0 : java.lang.Boolean)void -> {\n-                %1 : Var<java.lang.Boolean> = var %0 @\"b\";\n-                %3 : Var<int> = var @\"i\";\n+            func @\"test9\" (%0 : java.type:\"java.lang.Boolean\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.lang.Boolean\"> = var %0 @\"b\";\n+                %2 : Var<java.type:\"int\"> = var @\"i\";\n@@ -331,4 +331,4 @@\n-                    ()boolean -> {\n-                        %4 : java.lang.Boolean = var.load %1;\n-                        %5 : boolean = invoke %4 @\"java.lang.Boolean::booleanValue()boolean\";\n-                        yield %5;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"java.lang.Boolean\" = var.load %1;\n+                        %4 : java.type:\"boolean\" = invoke %3 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        yield %4;\n@@ -336,3 +336,3 @@\n-                    ()void -> {\n-                        %6 : int = constant @\"1\";\n-                        var.store %3 %6;\n+                    ()java.type:\"void\" -> {\n+                        %5 : java.type:\"int\" = constant @\"1\";\n+                        var.store %2 %5;\n@@ -341,3 +341,3 @@\n-                    ()void -> {\n-                        %7 : int = constant @\"2\";\n-                        var.store %3 %7;\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = constant @\"2\";\n+                        var.store %2 %6;\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":126,"deletions":126,"binary":false,"changes":252,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n-            func @\"test1\" (%0: ImplicitConversionTest)void -> {\n-                %1 : int = constant @\"1\";\n-                %2 : long = conv %1;\n-                %3 : Var<long> = var %2 @\"x\";\n+            func @\"test1\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"long\" = conv %1;\n+                %3 : Var<java.type:\"long\"> = var %2 @\"x\";\n@@ -54,5 +54,5 @@\n-            func @\"test2\" (%0: ImplicitConversionTest)void -> {\n-                %2 : Var<long> = var @\"x\";\n-                %3 : int = constant @\"1\";\n-                %4 : long = conv %3;\n-                var.store %2 %4;\n+            func @\"test2\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"long\"> = var @\"x\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"long\" = conv %2;\n+                var.store %1 %3;\n@@ -69,7 +69,7 @@\n-            func @\"test3\" (%0: ImplicitConversionTest)void -> {\n-                %1 : long = constant @\"0\";\n-                %2 : Var<long> = var %1 @\"x\";\n-                %3 : long = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : long = conv %4;\n-                %6 : long = add %3 %5;\n+            func @\"test3\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"long\" = constant @\"0\";\n+                %2 : Var<java.type:\"long\"> = var %1 @\"x\";\n+                %3 : java.type:\"long\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"long\" = conv %4;\n+                %6 : java.type:\"long\" = add %3 %5;\n@@ -87,7 +87,7 @@\n-            func @\"test4\" (%0: ImplicitConversionTest, %1 : boolean)void -> {\n-                %2 : Var<boolean> = var %1 @\"cond\";\n-                %4 : Var<long> = var @\"x\";\n-                %5 : long = java.cexpression\n-                    ^cond()boolean -> {\n-                        %6 : boolean = var.load %2;\n-                        yield %6;\n+            func @\"test4\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"boolean\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : Var<java.type:\"long\"> = var @\"x\";\n+                %4 : java.type:\"long\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = var.load %2;\n+                        yield %5;\n@@ -95,3 +95,3 @@\n-                    ^truepart()long -> {\n-                        %7 : long = constant @\"1\";\n-                        yield %7;\n+                    ()java.type:\"long\" -> {\n+                        %6 : java.type:\"long\" = constant @\"1\";\n+                        yield %6;\n@@ -99,4 +99,4 @@\n-                    ^falsepart()long -> {\n-                        %8 : int = constant @\"2\";\n-                        %9 : long = conv %8;\n-                        yield %9;\n+                    ()java.type:\"long\" -> {\n+                        %7 : java.type:\"int\" = constant @\"2\";\n+                        %8 : java.type:\"long\" = conv %7;\n+                        yield %8;\n@@ -104,1 +104,1 @@\n-                var.store %4 %5;\n+                var.store %3 %4;\n@@ -115,20 +115,20 @@\n-           func @\"test5\" (%0: ImplicitConversionTest, %1 : boolean)void -> {\n-               %2 : Var<boolean> = var %1 @\"cond\";\n-               %4 : Var<long> = var @\"x\";\n-               %5 : long = java.cexpression\n-                   ^cond()boolean -> {\n-                       %6 : boolean = var.load %2;\n-                       yield %6;\n-                   }\n-                   ^truepart()long -> {\n-                       %7 : int = constant @\"1\";\n-                       %8 : long = conv %7;\n-                       yield %8;\n-                   }\n-                   ^falsepart()long -> {\n-                       %9 : long = constant @\"2\";\n-                       yield %9;\n-                   };\n-               var.store %4 %5;\n-               return;\n-           };\n+            func @\"test5\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"boolean\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : Var<java.type:\"long\"> = var @\"x\";\n+                %4 : java.type:\"long\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = var.load %2;\n+                        yield %5;\n+                    }\n+                    ()java.type:\"long\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"long\" = conv %6;\n+                        yield %7;\n+                    }\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"long\" = constant @\"2\";\n+                        yield %8;\n+                    };\n+                var.store %3 %4;\n+                return;\n+            };\n@@ -143,20 +143,20 @@\n-           func @\"test6\" (%0: ImplicitConversionTest, %1 : boolean)void -> {\n-               %2 : Var<boolean> = var %1 @\"cond\";\n-               %4 : Var<long> = var @\"x\";\n-               %5 : int = java.cexpression\n-                   ^cond()boolean -> {\n-                       %6 : boolean = var.load %2;\n-                       yield %6;\n-                   }\n-                   ^truepart()int -> {\n-                       %7 : int = constant @\"1\";\n-                       yield %7;\n-                   }\n-                   ^falsepart()int -> {\n-                       %8 : int = constant @\"2\";\n-                       yield %8;\n-                   };\n-               %9 : long = conv %5;\n-               var.store %4 %9;\n-               return;\n-           };\n+            func @\"test6\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"boolean\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : Var<java.type:\"long\"> = var @\"x\";\n+                %4 : java.type:\"int\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = var.load %2;\n+                        yield %5;\n+                    }\n+                    ()java.type:\"int\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        yield %6;\n+                    }\n+                    ()java.type:\"int\" -> {\n+                        %7 : java.type:\"int\" = constant @\"2\";\n+                        yield %7;\n+                    };\n+                %8 : java.type:\"long\" = conv %4;\n+                var.store %3 %8;\n+                return;\n+            };\n@@ -171,3 +171,3 @@\n-            func @\"test7\" (%0: ImplicitConversionTest)long -> {\n-                %1 : int = constant @\"1\";\n-                %2 : long = conv %1;\n+            func @\"test7\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"long\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"long\" = conv %1;\n@@ -183,4 +183,4 @@\n-            func @\"test8\" (%0: ImplicitConversionTest)void -> {\n-                %1 : java.util.function.LongSupplier = lambda ()long -> {\n-                    %2 : int = constant @\"1\";\n-                    %3 : long = conv %2;\n+            func @\"test8\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.LongSupplier\" = lambda ()java.type:\"long\" -> {\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    %3 : java.type:\"long\" = conv %2;\n@@ -189,1 +189,1 @@\n-                %4 : Var<java.util.function.LongSupplier> = var %1 @\"s\";\n+                %4 : Var<java.type:\"java.util.function.LongSupplier\"> = var %1 @\"s\";\n@@ -199,4 +199,4 @@\n-            func @\"test9\" (%0: ImplicitConversionTest)void -> {\n-                %1 : java.util.function.LongSupplier = lambda ()long -> {\n-                    %2 : int = constant @\"1\";\n-                    %3 : long = conv %2;\n+            func @\"test9\" (%0 : java.type:\"ImplicitConversionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.LongSupplier\" = lambda ()java.type:\"long\" -> {\n+                    %2 : java.type:\"int\" = constant @\"1\";\n+                    %3 : java.type:\"long\" = conv %2;\n@@ -205,1 +205,1 @@\n-                %4 : Var<java.util.function.LongSupplier> = var %1 @\"s\";\n+                %4 : Var<java.type:\"java.util.function.LongSupplier\"> = var %1 @\"s\";\n@@ -215,7 +215,7 @@\n-            func @\"test10\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test10\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -224,2 +224,2 @@\n-                    ()long -> {\n-                        %8 : long = constant @\"1\";\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"long\" = constant @\"1\";\n@@ -228,3 +228,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %9;\n@@ -232,4 +232,4 @@\n-                    ()long -> {\n-                        %9 : int = constant @\"0\";\n-                        %10 : long = conv %9;\n-                        yield %10;\n+                    ()java.type:\"long\" -> {\n+                        %10 : java.type:\"int\" = constant @\"0\";\n+                        %11 : java.type:\"long\" = conv %10;\n+                        yield %11;\n@@ -237,1 +237,1 @@\n-                %11 : Var<long> = var %4 @\"l\";\n+                %12 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -250,7 +250,7 @@\n-            func @\"test11\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test11\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -259,3 +259,3 @@\n-                    ()long -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : long = conv %8;\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"long\" = conv %8;\n@@ -264,6 +264,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n-                    }\n-                    ()long -> {\n-                        %10 : long = constant @\"0\";\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n@@ -271,0 +267,4 @@\n+                    }\n+                    ()java.type:\"long\" -> {\n+                        %11 : java.type:\"long\" = constant @\"0\";\n+                        yield %11;\n@@ -272,1 +272,1 @@\n-                %11 : Var<long> = var %4 @\"l\";\n+                %12 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -285,7 +285,7 @@\n-            func @\"test12\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test12\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -294,3 +294,3 @@\n-                    ()long -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : long = conv %8;\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"long\" = conv %8;\n@@ -299,3 +299,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -303,4 +303,4 @@\n-                    ()long -> {\n-                        %10 : int = constant @\"0\";\n-                        %11 : long = conv %10;\n-                        yield %11;\n+                    ()java.type:\"long\" -> {\n+                        %11 : java.type:\"int\" = constant @\"0\";\n+                        %12 : java.type:\"long\" = conv %11;\n+                        yield %12;\n@@ -308,1 +308,1 @@\n-                %12 : Var<long> = var %4 @\"l\";\n+                %13 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -321,7 +321,7 @@\n-            func @\"test13\" (%0 : ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test13\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -330,2 +330,2 @@\n-                    ()long -> {\n-                        %8 : long = constant @\"1\";\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"long\" = constant @\"1\";\n@@ -334,3 +334,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %9;\n@@ -338,4 +338,4 @@\n-                    ()long -> {\n-                        %9 : int = constant @\"0\";\n-                        %10 : long = conv %9;\n-                        java.yield %10;\n+                    ()java.type:\"long\" -> {\n+                        %10 : java.type:\"int\" = constant @\"0\";\n+                        %11 : java.type:\"long\" = conv %10;\n+                        java.yield %11;\n@@ -343,1 +343,1 @@\n-                %11 : Var<long> = var %4 @\"l\";\n+                %12 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -356,7 +356,7 @@\n-            func @\"test14\" (%0 : ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test14\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -365,3 +365,3 @@\n-                    ()long -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : long = conv %8;\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"long\" = conv %8;\n@@ -370,3 +370,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -374,3 +374,3 @@\n-                    ()long -> {\n-                        %10 : long = constant @\"0\";\n-                        java.yield %10;\n+                    ()java.type:\"long\" -> {\n+                        %11 : java.type:\"long\" = constant @\"0\";\n+                        java.yield %11;\n@@ -378,1 +378,1 @@\n-                %11 : Var<long> = var %4 @\"l\";\n+                %12 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -391,7 +391,7 @@\n-            func @\"test15\" (%0 : ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test15\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -400,3 +400,3 @@\n-                    ()long -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : long = conv %8;\n+                    ()java.type:\"long\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"long\" = conv %8;\n@@ -405,3 +405,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -409,4 +409,4 @@\n-                    ()long -> {\n-                        %10 : int = constant @\"0\";\n-                        %11 : long = conv %10;\n-                        java.yield %11;\n+                    ()java.type:\"long\" -> {\n+                        %11 : java.type:\"int\" = constant @\"0\";\n+                        %12 : java.type:\"long\" = conv %11;\n+                        java.yield %12;\n@@ -414,1 +414,1 @@\n-                %12 : Var<long> = var %4 @\"l\";\n+                %13 : Var<java.type:\"long\"> = var %4 @\"l\";\n@@ -427,7 +427,7 @@\n-            func @\"test16\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = conv %3;\n-                %5 : long = constant @\"2\";\n-                %6 : long = add %4 %5;\n-                %7 : Var<long> = var %6 @\"l\";\n+            func @\"test16\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = conv %3;\n+                %5 : java.type:\"long\" = constant @\"2\";\n+                %6 : java.type:\"long\" = add %4 %5;\n+                %7 : Var<java.type:\"long\"> = var %6 @\"l\";\n@@ -445,5 +445,5 @@\n-            func @\"test17\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = conv %3;\n-                invoke %0 %4 @\"ImplicitConversionTest::m(long)void\";\n+            func @\"test17\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = conv %3;\n+                invoke %0 %4 @\"ImplicitConversionTest::m(long):void\";\n@@ -461,5 +461,5 @@\n-            func @\"test18\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                invoke %0 %3 %4 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"ImplicitConversionTest::m(int, int, long[])void\";\n+            func @\"test18\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                invoke %0 %3 %4 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -475,7 +475,7 @@\n-           func @\"test19\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : long = conv %5;\n-                invoke %0 %3 %4 %6 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"ImplicitConversionTest::m(int, int, long[])void\";\n+            func @\"test19\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"long\" = conv %5;\n+                invoke %0 %3 %4 %6 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -483,1 +483,1 @@\n-           };\n+            };\n@@ -491,9 +491,9 @@\n-            func @\"test20\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : long = conv %5;\n-                %7 : int = var.load %2;\n-                %8 : long = conv %7;\n-                invoke %0 %3 %4 %6 %8 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"ImplicitConversionTest::m(int, int, long[])void\";\n+            func @\"test20\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"long\" = conv %5;\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"long\" = conv %7;\n+                invoke %0 %3 %4 %6 %8 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -514,5 +514,5 @@\n-            func @\"test21\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : long = conv %3;\n-                %5 : ImplicitConversionTest$Box = new %4 @\"ImplicitConversionTest$Box::<new>(long)\";\n+            func @\"test21\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"long\" = conv %3;\n+                %5 : java.type:\"ImplicitConversionTest$Box\" = new %4 @\"ImplicitConversionTest$Box::(long)\";\n@@ -528,5 +528,5 @@\n-            func @\"test22\" (%0: ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : ImplicitConversionTest$Box = new %3 %4 @new.varargs=\"true\" @\"ImplicitConversionTest$Box::<new>(int, int, long[])\";\n+            func @\"test22\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n@@ -542,9 +542,9 @@\n-           func @\"test23\" (%0 : ImplicitConversionTest, %1 : int)void -> {\n-               %2 : Var<int> = var %1 @\"i\";\n-               %3 : int = var.load %2;\n-               %4 : int = var.load %2;\n-               %5 : int = var.load %2;\n-               %6 : long = conv %5;\n-               %7 : ImplicitConversionTest$Box = new %3 %4 %6 @new.varargs=\"true\" @\"ImplicitConversionTest$Box::<new>(int, int, long[])\";\n-               return;\n-           };\n+            func @\"test23\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"long\" = conv %5;\n+                %7 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n+                return;\n+            };\n@@ -558,9 +558,9 @@\n-            func @\"test24\" (%0 : ImplicitConversionTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = var.load %2;\n-                %6 : long = conv %5;\n-                %7 : int = var.load %2;\n-                %8 : long = conv %7;\n-                %9 : ImplicitConversionTest$Box = new %3 %4 %6 %8 @new.varargs=\"true\" @\"ImplicitConversionTest$Box::<new>(int, int, long[])\";\n+            func @\"test24\" (%0 : java.type:\"ImplicitConversionTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"long\" = conv %5;\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"long\" = conv %7;\n+                %9 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 %8 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":250,"deletions":250,"binary":false,"changes":500,"status":"modified"},{"patch":"@@ -53,11 +53,11 @@\n-            func @\"test1\" (%0 : #X<&m<IntersectionTypeTest, test1, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>)void -> {\n-                  %1 : Var<#X<&m<IntersectionTypeTest, test1, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>> = var %0 @\"x\";\n-                  %2 : #X<&m<IntersectionTypeTest, test1, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  invoke %2 @\"IntersectionTypeTest$A::m_A()void\";\n-                  %3 : #X<&m<IntersectionTypeTest, test1, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %4 : IntersectionTypeTest$B = cast %3 @\"IntersectionTypeTest$B\";\n-                  invoke %4 @\"IntersectionTypeTest$B::m_B()void\";\n-                  %5 : #X<&m<IntersectionTypeTest, test1, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %6 : IntersectionTypeTest$C = cast %5 @\"IntersectionTypeTest$C\";\n-                  invoke %6 @\"IntersectionTypeTest$C::m_C()void\";\n-                  return;\n+            func @\"test1\" (%0 : java.type:\"&IntersectionTypeTest::test1(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"&IntersectionTypeTest::test1(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>\"> = var %0 @\"x\";\n+                %2 : java.type:\"&IntersectionTypeTest::test1(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>\" = var.load %1;\n+                invoke %2 @\"IntersectionTypeTest$A::m_A():void\";\n+                %3 : java.type:\"&IntersectionTypeTest::test1(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>\" = var.load %1;\n+                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @\"IntersectionTypeTest$B\";\n+                invoke %4 @\"IntersectionTypeTest$B::m_B():void\";\n+                %5 : java.type:\"&IntersectionTypeTest::test1(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>\" = var.load %1;\n+                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @\"IntersectionTypeTest$C\";\n+                invoke %6 @\"IntersectionTypeTest$C::m_C():void\";\n+                return;\n@@ -76,12 +76,12 @@\n-            func @\"test2\" (%0 : #X<&m<IntersectionTypeTest, test2, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>)void -> {\n-                  %1 : Var<#X<&m<IntersectionTypeTest, test2, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>> = var %0 @\"x\";\n-                  %2 : #X<&m<IntersectionTypeTest, test2, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %3 : java.lang.Object = field.load @\"IntersectionTypeTest$A::f_A()java.lang.Object\";\n-                  %4 : Var<java.lang.Object> = var %3 @\"oA\";\n-                  %5 : #X<&m<IntersectionTypeTest, test2, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %6 : java.lang.Object = field.load @\"IntersectionTypeTest$B::f_B()java.lang.Object\";\n-                  %7 : Var<java.lang.Object> = var %6 @\"oB\";\n-                  %8 : #X<&m<IntersectionTypeTest, test2, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %9 : java.lang.Object = field.load @\"IntersectionTypeTest$C::f_C()java.lang.Object\";\n-                  %10 : Var<java.lang.Object> = var %9 @\"oC\";\n-                  return;\n+            func @\"test2\" (%0 : java.type:\"&IntersectionTypeTest::test2(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"&IntersectionTypeTest::test2(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\"> = var %0 @\"x\";\n+                %2 : java.type:\"IntersectionTypeTest::test2(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n+                %4 : Var<java.type:\"java.lang.Object\"> = var %3 @\"oA\";\n+                %5 : java.type:\"&IntersectionTypeTest::test2(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %6 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n+                %7 : Var<java.type:\"java.lang.Object\"> = var %6 @\"oB\";\n+                %8 : java.type:\"&IntersectionTypeTest::test2(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %9 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n+                %10 : Var<java.type:\"java.lang.Object\"> = var %9 @\"oC\";\n+                return;\n@@ -98,29 +98,29 @@\n-            func @\"test3\" (%0 : #X<&m<IntersectionTypeTest, test3, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>)void -> {\n-                  %1 : Var<#X<&m<IntersectionTypeTest, test3, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>> = var %0 @\"x\";\n-                  %2 : #X<&m<IntersectionTypeTest, test3, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %3 : Var<IntersectionTypeTest$A> = var %2 @\"rec$\";\n-                  %4 : java.lang.Runnable = lambda ()void -> {\n-                      %5 : IntersectionTypeTest$A = var.load %3;\n-                      invoke %5 @\"IntersectionTypeTest$A::m_A()void\";\n-                      return;\n-                  };\n-                  %6 : Var<java.lang.Runnable> = var %4 @\"rA\";\n-                  %7 : #X<&m<IntersectionTypeTest, test3, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %8 : IntersectionTypeTest$B = cast %7 @\"IntersectionTypeTest$B\";\n-                  %9 : Var<IntersectionTypeTest$B> = var %8 @\"rec$\";\n-                  %10 : java.lang.Runnable = lambda ()void -> {\n-                      %11 : IntersectionTypeTest$B = var.load %9;\n-                      invoke %11 @\"IntersectionTypeTest$B::m_B()void\";\n-                      return;\n-                  };\n-                  %12 : Var<java.lang.Runnable> = var %10 @\"rB\";\n-                  %13 : #X<&m<IntersectionTypeTest, test3, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                  %14 : IntersectionTypeTest$C = cast %13 @\"IntersectionTypeTest$C\";\n-                  %15 : Var<IntersectionTypeTest$C> = var %14 @\"rec$\";\n-                  %16 : java.lang.Runnable = lambda ()void -> {\n-                      %17 : IntersectionTypeTest$C = var.load %15;\n-                      invoke %17 @\"IntersectionTypeTest$C::m_C()void\";\n-                      return;\n-                  };\n-                  %18 : Var<java.lang.Runnable> = var %16 @\"rC\";\n-                  return;\n+            func @\"test3\" (%0 : java.type:\"&IntersectionTypeTest::test3(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"&IntersectionTypeTest::test3(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\"> = var %0 @\"x\";\n+                %2 : java.type:\"&IntersectionTypeTest::test3(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %3 : Var<java.type:\"IntersectionTypeTest$A\"> = var %2 @\"rec$\";\n+                %4 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %5 : java.type:\"IntersectionTypeTest$A\" = var.load %3;\n+                    invoke %5 @\"IntersectionTypeTest$A::m_A():void\";\n+                    return;\n+                };\n+                %6 : Var<java.type:\"java.lang.Runnable\"> = var %4 @\"rA\";\n+                %7 : java.type:\"&IntersectionTypeTest::test3(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %8 : java.type:\"IntersectionTypeTest$B\" = cast %7 @\"IntersectionTypeTest$B\";\n+                %9 : Var<java.type:\"IntersectionTypeTest$B\"> = var %8 @\"rec$\";\n+                %10 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %11 : java.type:\"IntersectionTypeTest$B\" = var.load %9;\n+                    invoke %11 @\"IntersectionTypeTest$B::m_B():void\";\n+                    return;\n+                };\n+                %12 : Var<java.type:\"java.lang.Runnable\"> = var %10 @\"rB\";\n+                %13 : java.type:\"&IntersectionTypeTest::test3(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %14 : java.type:\"IntersectionTypeTest$C\" = cast %13 @\"IntersectionTypeTest$C\";\n+                %15 : Var<java.type:\"IntersectionTypeTest$C\"> = var %14 @\"rec$\";\n+                %16 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %17 : java.type:\"IntersectionTypeTest$C\" = var.load %15;\n+                    invoke %17 @\"IntersectionTypeTest$C::m_C():void\";\n+                    return;\n+                };\n+                %18 : Var<java.type:\"java.lang.Runnable\"> = var %16 @\"rC\";\n+                return;\n@@ -141,10 +141,10 @@\n-            func @\"test4\" (%0 : #X<&m<IntersectionTypeTest, test4, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>)void -> {\n-                %1 : Var<#X<&m<IntersectionTypeTest, test4, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A>> = var %0 @\"x\";\n-                %2 : #X<&m<IntersectionTypeTest, test4, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                invoke %2 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A)void\";\n-                %3 : #X<&m<IntersectionTypeTest, test4, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                %4 : IntersectionTypeTest$B = cast %3 @\"IntersectionTypeTest$B\";\n-                invoke %4 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B)void\";\n-                %5 : #X<&m<IntersectionTypeTest, test4, func<void, IntersectionTypeTest$A>>, IntersectionTypeTest$A> = var.load %1;\n-                %6 : IntersectionTypeTest$C = cast %5 @\"IntersectionTypeTest$C\";\n-                invoke %6 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C)void\";\n+            func @\"test4\" (%0 : java.type:\"&IntersectionTypeTest::test4(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"&IntersectionTypeTest::test4(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\"> = var %0 @\"x\";\n+                %2 : java.type:\"&IntersectionTypeTest::test4(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                invoke %2 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n+                %3 : java.type:\"&IntersectionTypeTest::test4(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @\"IntersectionTypeTest$B\";\n+                invoke %4 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n+                %5 : java.type:\"&IntersectionTypeTest::test4(IntersectionTypeTest$A):void::<X extends IntersectionTypeTest$A>)\" = var.load %1;\n+                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @\"IntersectionTypeTest$C\";\n+                invoke %6 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n@@ -184,15 +184,15 @@\n-            func @\"test5\" (%0 : IntersectionTypeTest$E1, %1 : IntersectionTypeTest$E2)void -> {\n-                %2 : Var<IntersectionTypeTest$E1> = var %0 @\"e1\";\n-                %3 : Var<IntersectionTypeTest$E2> = var %1 @\"e2\";\n-                %4 : IntersectionTypeTest$E1 = var.load %2;\n-                %5 : IntersectionTypeTest$E2 = var.load %3;\n-                %6 : IntersectionTypeTest$A = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A)IntersectionTypeTest$A\";\n-                %7 : Var<IntersectionTypeTest$A> = var %6 @\"x\";\n-                %8 : IntersectionTypeTest$A = var.load %7;\n-                invoke %8 @\"IntersectionTypeTest$A::m_A()void\";\n-                %9 : IntersectionTypeTest$A = var.load %7;\n-                %10 : IntersectionTypeTest$B = cast %9 @\"IntersectionTypeTest$B\";\n-                invoke %10 @\"IntersectionTypeTest$B::m_B()void\";\n-                %11 : IntersectionTypeTest$A = var.load %7;\n-                %12 : IntersectionTypeTest$C = cast %11 @\"IntersectionTypeTest$C\";\n-                invoke %12 @\"IntersectionTypeTest$C::m_C()void\";\n+            func @\"test5\" (%0 : java.type:\"IntersectionTypeTest$E1\", %1 : java.type:\"IntersectionTypeTest$E2\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"IntersectionTypeTest$E1\"> = var %0 @\"e1\";\n+                %3 : Var<java.type:\"IntersectionTypeTest$E2\"> = var %1 @\"e2\";\n+                %4 : java.type:\"IntersectionTypeTest$E1\" = var.load %2;\n+                %5 : java.type:\"IntersectionTypeTest$E2\" = var.load %3;\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %7 : Var<java.type:\"IntersectionTypeTest$A\"> = var %6 @\"x\";\n+                %8 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                invoke %8 @\"IntersectionTypeTest$A::m_A():void\";\n+                %9 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @\"IntersectionTypeTest$B\";\n+                invoke %10 @\"IntersectionTypeTest$B::m_B():void\";\n+                %11 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @\"IntersectionTypeTest$C\";\n+                invoke %12 @\"IntersectionTypeTest$C::m_C():void\";\n@@ -211,16 +211,16 @@\n-            func @\"test6\" (%0 : IntersectionTypeTest$E1, %1 : IntersectionTypeTest$E2)void -> {\n-                %2 : Var<IntersectionTypeTest$E1> = var %0 @\"e1\";\n-                %3 : Var<IntersectionTypeTest$E2> = var %1 @\"e2\";\n-                %4 : IntersectionTypeTest$E1 = var.load %2;\n-                %5 : IntersectionTypeTest$E2 = var.load %3;\n-                %6 : IntersectionTypeTest$A = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A)IntersectionTypeTest$A\";\n-                %7 : Var<IntersectionTypeTest$A> = var %6 @\"x\";\n-                %8 : IntersectionTypeTest$A = var.load %7;\n-                %9 : java.lang.Object = field.load @\"IntersectionTypeTest$A::f_A()java.lang.Object\";\n-                %10 : Var<java.lang.Object> = var %9 @\"oA\";\n-                %11 : IntersectionTypeTest$A = var.load %7;\n-                %12 : java.lang.Object = field.load @\"IntersectionTypeTest$B::f_B()java.lang.Object\";\n-                %13 : Var<java.lang.Object> = var %12 @\"oB\";\n-                %14 : IntersectionTypeTest$A = var.load %7;\n-                %15 : java.lang.Object = field.load @\"IntersectionTypeTest$C::f_C()java.lang.Object\";\n-                %16 : Var<java.lang.Object> = var %15 @\"oC\";\n+            func @\"test6\" (%0 : java.type:\"IntersectionTypeTest$E1\", %1 : java.type:\"IntersectionTypeTest$E2\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"IntersectionTypeTest$E1\"> = var %0 @\"e1\";\n+                %3 : Var<java.type:\"IntersectionTypeTest$E2\"> = var %1 @\"e2\";\n+                %4 : java.type:\"IntersectionTypeTest$E1\" = var.load %2;\n+                %5 : java.type:\"IntersectionTypeTest$E2\" = var.load %3;\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %7 : Var<java.type:\"IntersectionTypeTest$A\"> = var %6 @\"x\";\n+                %8 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %9 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n+                %10 : Var<java.type:\"java.lang.Object\"> = var %9 @\"oA\";\n+                %11 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %12 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n+                %13 : Var<java.type:\"java.lang.Object\"> = var %12 @\"oB\";\n+                %14 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %15 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n+                %16 : Var<java.type:\"java.lang.Object\"> = var %15 @\"oC\";\n@@ -239,12 +239,12 @@\n-            func @\"test7\" (%0 : IntersectionTypeTest$E1, %1 : IntersectionTypeTest$E2)void -> {\n-                %2 : Var<IntersectionTypeTest$E1> = var %0 @\"e1\";\n-                %3 : Var<IntersectionTypeTest$E2> = var %1 @\"e2\";\n-                %4 : IntersectionTypeTest$E1 = var.load %2;\n-                %5 : IntersectionTypeTest$E2 = var.load %3;\n-                %6 : IntersectionTypeTest$A = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A)IntersectionTypeTest$A\";\n-                %7 : Var<IntersectionTypeTest$A> = var %6 @\"x\";\n-                %8 : IntersectionTypeTest$A = var.load %7;\n-                %9 : Var<IntersectionTypeTest$A> = var %8 @\"rec$\";\n-                %10 : java.lang.Runnable = lambda ()void -> {\n-                    %11 : IntersectionTypeTest$A = var.load %9;\n-                    invoke %11 @\"IntersectionTypeTest$A::m_A()void\";\n+            func @\"test7\" (%0 : java.type:\"IntersectionTypeTest$E1\", %1 : java.type:\"IntersectionTypeTest$E2\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"IntersectionTypeTest$E1\"> = var %0 @\"e1\";\n+                %3 : Var<java.type:\"IntersectionTypeTest$E2\"> = var %1 @\"e2\";\n+                %4 : java.type:\"IntersectionTypeTest$E1\" = var.load %2;\n+                %5 : java.type:\"IntersectionTypeTest$E2\" = var.load %3;\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %7 : Var<java.type:\"IntersectionTypeTest$A\"> = var %6 @\"x\";\n+                %8 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %9 : Var<java.type:\"IntersectionTypeTest$A\"> = var %8 @\"rec$\";\n+                %10 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %11 : java.type:\"IntersectionTypeTest$A\" = var.load %9;\n+                    invoke %11 @\"IntersectionTypeTest$A::m_A():void\";\n@@ -253,7 +253,7 @@\n-                %12 : Var<java.lang.Runnable> = var %10 @\"rA\";\n-                %13 : IntersectionTypeTest$A = var.load %7;\n-                %14 : IntersectionTypeTest$B = cast %13 @\"IntersectionTypeTest$B\";\n-                %15 : Var<IntersectionTypeTest$B> = var %14 @\"rec$\";\n-                %16 : java.lang.Runnable = lambda ()void -> {\n-                    %17 : IntersectionTypeTest$B = var.load %15;\n-                    invoke %17 @\"IntersectionTypeTest$B::m_B()void\";\n+                %12 : Var<java.type:\"java.lang.Runnable\"> = var %10 @\"rA\";\n+                %13 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %14 : java.type:\"IntersectionTypeTest$B\" = cast %13 @\"IntersectionTypeTest$B\";\n+                %15 : Var<java.type:\"IntersectionTypeTest$B\"> = var %14 @\"rec$\";\n+                %16 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %17 : java.type:\"IntersectionTypeTest$B\" = var.load %15;\n+                    invoke %17 @\"IntersectionTypeTest$B::m_B():void\";\n@@ -262,7 +262,7 @@\n-                %18 : Var<java.lang.Runnable> = var %16 @\"rB\";\n-                %19 : IntersectionTypeTest$A = var.load %7;\n-                %20 : IntersectionTypeTest$C = cast %19 @\"IntersectionTypeTest$C\";\n-                %21 : Var<IntersectionTypeTest$C> = var %20 @\"rec$\";\n-                %22 : java.lang.Runnable = lambda ()void -> {\n-                    %23 : IntersectionTypeTest$C = var.load %21;\n-                    invoke %23 @\"IntersectionTypeTest$C::m_C()void\";\n+                %18 : Var<java.type:\"java.lang.Runnable\"> = var %16 @\"rB\";\n+                %19 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %20 : java.type:\"IntersectionTypeTest$C\" = cast %19 @\"IntersectionTypeTest$C\";\n+                %21 : Var<java.type:\"IntersectionTypeTest$C\"> = var %20 @\"rec$\";\n+                %22 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                    %23 : java.type:\"IntersectionTypeTest$C\" = var.load %21;\n+                    invoke %23 @\"IntersectionTypeTest$C::m_C():void\";\n@@ -271,1 +271,1 @@\n-                %24 : Var<java.lang.Runnable> = var %22 @\"rC\";\n+                %24 : Var<java.type:\"java.lang.Runnable\"> = var %22 @\"rC\";\n@@ -284,15 +284,15 @@\n-            func @\"test8\" (%0 : IntersectionTypeTest$E1, %1 : IntersectionTypeTest$E2)void -> {\n-                %2 : Var<IntersectionTypeTest$E1> = var %0 @\"e1\";\n-                %3 : Var<IntersectionTypeTest$E2> = var %1 @\"e2\";\n-                %4 : IntersectionTypeTest$E1 = var.load %2;\n-                %5 : IntersectionTypeTest$E2 = var.load %3;\n-                %6 : IntersectionTypeTest$A = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A)IntersectionTypeTest$A\";\n-                %7 : Var<IntersectionTypeTest$A> = var %6 @\"x\";\n-                %8 : IntersectionTypeTest$A = var.load %7;\n-                invoke %8 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A)void\";\n-                %9 : IntersectionTypeTest$A = var.load %7;\n-                %10 : IntersectionTypeTest$B = cast %9 @\"IntersectionTypeTest$B\";\n-                invoke %10 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B)void\";\n-                %11 : IntersectionTypeTest$A = var.load %7;\n-                %12 : IntersectionTypeTest$C = cast %11 @\"IntersectionTypeTest$C\";\n-                invoke %12 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C)void\";\n+            func @\"test8\" (%0 : java.type:\"IntersectionTypeTest$E1\", %1 : java.type:\"IntersectionTypeTest$E2\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"IntersectionTypeTest$E1\"> = var %0 @\"e1\";\n+                %3 : Var<java.type:\"IntersectionTypeTest$E2\"> = var %1 @\"e2\";\n+                %4 : java.type:\"IntersectionTypeTest$E1\" = var.load %2;\n+                %5 : java.type:\"IntersectionTypeTest$E2\" = var.load %3;\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %7 : Var<java.type:\"IntersectionTypeTest$A\"> = var %6 @\"x\";\n+                %8 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                invoke %8 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n+                %9 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @\"IntersectionTypeTest$B\";\n+                invoke %10 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n+                %11 : java.type:\"IntersectionTypeTest$A\" = var.load %7;\n+                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @\"IntersectionTypeTest$C\";\n+                invoke %12 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/IntersectionTypeTest.java","additions":135,"deletions":135,"binary":false,"changes":270,"status":"modified"},{"patch":"@@ -41,6 +41,6 @@\n-            func @\"test1\" (%0 : LambdaTest)void -> {\n-                %1 : java.util.function.Consumer<java.lang.String> = lambda (%2 : java.lang.String)void -> {\n-                    %3 : Var<java.lang.String> = var %2 @\"s\";\n-                    %4 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                    %5 : java.lang.String = var.load %3;\n-                    invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String)void\";\n+            func @\"test1\" (%0 : java.type:\"LambdaTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Consumer<java.lang.String>\" = lambda (%2 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"s\";\n+                    %4 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                    %5 : java.type:\"java.lang.String\" = var.load %3;\n+                    invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -49,4 +49,4 @@\n-                %6 : Var<java.util.function.Consumer<java.lang.String>> = var %1 @\"c\";\n-                %7 : java.util.function.Consumer<java.lang.String> = var.load %6;\n-                %8 : java.lang.String = constant @\"Hello World\";\n-                invoke %7 %8 @\"java.util.function.Consumer::accept(java.lang.Object)void\";\n+                %6 : Var<java.type:\"java.util.function.Consumer<java.lang.String>\"> = var %1 @\"c\";\n+                %7 : java.type:\"java.util.function.Consumer<java.lang.String>\" = var.load %6;\n+                %8 : java.type:\"java.lang.String\" = constant @\"Hello World\";\n+                invoke %7 %8 @\"java.util.function.Consumer::accept(java.lang.Object):void\";\n@@ -65,3 +65,3 @@\n-            func @\"test2\" (%0 : LambdaTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.String> = lambda ()java.lang.String -> {\n-                    %2 : java.lang.String = constant @\"Hello World\";\n+            func @\"test2\" (%0 : java.type:\"LambdaTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.String>\" = lambda ()java.type:\"java.lang.String\" -> {\n+                    %2 : java.type:\"java.lang.String\" = constant @\"Hello World\";\n@@ -70,4 +70,4 @@\n-                %3 : Var<java.util.function.Supplier<java.lang.String>> = var %1 @\"c\";\n-                %4 : java.util.function.Supplier<java.lang.String> = var.load %3;\n-                %5 : java.lang.String = invoke %4 @\"java.util.function.Supplier::get()java.lang.Object\";\n-                %6 : Var<java.lang.String> = var %5 @\"s\";\n+                %3 : Var<java.type:\"java.util.function.Supplier<java.lang.String>\"> = var %1 @\"c\";\n+                %4 : java.type:\"java.util.function.Supplier<java.lang.String>\" = var.load %3;\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @\"java.util.function.Supplier::get():java.lang.Object\";\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"s\";\n@@ -86,3 +86,3 @@\n-            func @\"test3\" (%0 : LambdaTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.String> = lambda ()java.lang.String -> {\n-                    %2 : java.lang.String = constant @\"Hello World\";\n+            func @\"test3\" (%0 : java.type:\"LambdaTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.String>\" = lambda ()java.type:\"java.lang.String\" -> {\n+                    %2 : java.type:\"java.lang.String\" = constant @\"Hello World\";\n@@ -91,1 +91,1 @@\n-                %3 : Var<java.util.function.Supplier<java.lang.String>> = var %1 @\"c\";\n+                %3 : Var<java.type:\"java.util.function.Supplier<java.lang.String>\"> = var %1 @\"c\";\n@@ -103,3 +103,3 @@\n-            func @\"test4\" (%0 : LambdaTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.String> = lambda ()java.lang.String -> {\n-                    %2 : java.lang.String = field.load %0 @\"LambdaTest::s_f()java.lang.String\";\n+            func @\"test4\" (%0 : java.type:\"LambdaTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.String>\" = lambda ()java.type:\"java.lang.String\" -> {\n+                    %2 : java.type:\"java.lang.String\" = field.load %0 @\"LambdaTest::s_f:java.lang.String\";\n@@ -108,1 +108,1 @@\n-                %3 : Var<java.util.function.Supplier<java.lang.String>> = var %1 @\"c\";\n+                %3 : Var<java.type:\"java.util.function.Supplier<java.lang.String>\"> = var %1 @\"c\";\n@@ -120,17 +120,17 @@\n-            func @\"test5\" (%0 : LambdaTest, %1 : int, %2 : int)void -> {\n-                %3 : Var<int> = var %1 @\"i\";\n-                %4 : Var<int> = var %2 @\"j\";\n-                %5 : int = constant @\"3\";\n-                %6 : Var<int> = var %5 @\"k\";\n-                %7 : java.util.function.Supplier<java.lang.Integer> = lambda ()java.lang.Integer -> {\n-                    %8 : int = constant @\"4\";\n-                    %9 : Var<int> = var %8 @\"l\";\n-                    %10 : java.util.function.Supplier<java.lang.Integer> = lambda ()java.lang.Integer -> {\n-                        %11 : int = var.load %4;\n-                        %12 : int = var.load %6;\n-                        %13 : int = add %11 %12;\n-                        %14 : int = var.load %9;\n-                        %15 : int = add %13 %14;\n-                        %16 : Var<int> = var %15 @\"r\";\n-                        %17 : int = var.load %16;\n-                        %18 : java.lang.Integer = invoke %17 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test5\" (%0 : java.type:\"LambdaTest\", %1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"j\";\n+                %5 : java.type:\"int\" = constant @\"3\";\n+                %6 : Var<java.type:\"int\"> = var %5 @\"k\";\n+                %7 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = lambda ()java.type:\"java.lang.Integer\" -> {\n+                    %8 : java.type:\"int\" = constant @\"4\";\n+                    %9 : Var<java.type:\"int\"> = var %8 @\"l\";\n+                    %10 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = lambda ()java.type:\"java.lang.Integer\" -> {\n+                        %11 : java.type:\"int\" = var.load %4;\n+                        %12 : java.type:\"int\" = var.load %6;\n+                        %13 : java.type:\"int\" = add %11 %12;\n+                        %14 : java.type:\"int\" = var.load %9;\n+                        %15 : java.type:\"int\" = add %13 %14;\n+                        %16 : Var<java.type:\"int\"> = var %15 @\"r\";\n+                        %17 : java.type:\"int\" = var.load %16;\n+                        %18 : java.type:\"java.lang.Integer\" = invoke %17 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -139,9 +139,9 @@\n-                    %19 : Var<java.util.function.Supplier<java.lang.Integer>> = var %10 @\"sInner\";\n-                    %20 : int = var.load %3;\n-                    %21 : java.util.function.Supplier<java.lang.Integer> = var.load %19;\n-                    %22 : java.lang.Integer = invoke %21 @\"java.util.function.Supplier::get()java.lang.Object\";\n-                    %23 : int = invoke %22 @\"java.lang.Integer::intValue()int\";\n-                    %24 : int = add %20 %23;\n-                    %25 : Var<int> = var %24 @\"r\";\n-                    %26 : int = var.load %25;\n-                    %27 : java.lang.Integer = invoke %26 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                    %19 : Var<java.type:\"java.util.function.Supplier<java.lang.Integer>\"> = var %10 @\"sInner\";\n+                    %20 : java.type:\"int\" = var.load %3;\n+                    %21 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = var.load %19;\n+                    %22 : java.type:\"java.lang.Integer\" = invoke %21 @\"java.util.function.Supplier::get():java.lang.Object\";\n+                    %23 : java.type:\"int\" = invoke %22 @\"java.lang.Integer::intValue():int\";\n+                    %24 : java.type:\"int\" = add %20 %23;\n+                    %25 : Var<java.type:\"int\"> = var %24 @\"r\";\n+                    %26 : java.type:\"int\" = var.load %25;\n+                    %27 : java.type:\"java.lang.Integer\" = invoke %26 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -150,1 +150,1 @@\n-                %28 : Var<java.util.function.Supplier<java.lang.Integer>> = var %7 @\"sOuter\";\n+                %28 : Var<java.type:\"java.util.function.Supplier<java.lang.Integer>\"> = var %7 @\"sOuter\";\n@@ -172,4 +172,4 @@\n-            func @\"test6\" (%0 : LambdaTest)void -> {\n-                %1 : java.util.function.Supplier<java.lang.Integer> = lambda ()java.lang.Integer -> {\n-                    %2 : int = field.load %0 @\"LambdaTest::f()int\";\n-                    %3 : java.lang.Integer = invoke %2 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+            func @\"test6\" (%0 : java.type:\"LambdaTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.Integer>\" = lambda ()java.type:\"java.lang.Integer\" -> {\n+                    %2 : java.type:\"int\" = field.load %0 @\"LambdaTest::f:int\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -178,1 +178,1 @@\n-                %4 : Var<java.util.function.Supplier<java.lang.Integer>> = var %1 @\"s\";\n+                %4 : Var<java.type:\"java.util.function.Supplier<java.lang.Integer>\"> = var %1 @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/LambdaTest.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -44,3 +44,3 @@\n-            func @\"testLocalNoCapture\" (%0 : LocalClassTest)void -> {\n-                %1 : .<LocalClassTest, LocalClassTest$1Foo> = new %0 @\".<LocalClassTest, LocalClassTest$1Foo>::<new>(LocalClassTest)\";\n-                invoke %1 @\".<LocalClassTest, LocalClassTest$1Foo>::m()void\";\n+            func @\"testLocalNoCapture\" (%0 : java.type:\"LocalClassTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"LocalClassTest::$1Foo\" = new %0 @\"LocalClassTest::$1Foo::(LocalClassTest)\";\n+                invoke %1 @\"LocalClassTest::$1Foo::m():void\";\n@@ -59,3 +59,3 @@\n-            func @\"testAnonNoCapture\" (%0 : LocalClassTest)void -> {\n-                %1 : .<LocalClassTest, LocalClassTest$1> = new %0 @\".<LocalClassTest, LocalClassTest$1>::<new>(LocalClassTest)\";\n-                invoke %1 @\".<LocalClassTest, LocalClassTest$1>::m()void\";\n+            func @\"testAnonNoCapture\" (%0 : java.type:\"LocalClassTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"LocalClassTest::$1\" = new %0 @\"LocalClassTest::$1::(LocalClassTest)\";\n+                invoke %1 @\"LocalClassTest::$1::m():void\";\n@@ -73,5 +73,5 @@\n-            func @\"testLocalCaptureParam\" (%0 : LocalClassTest, %1 : java.lang.String)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n-                %3 : java.lang.String = var.load %2;\n-                %4 : .<LocalClassTest, LocalClassTest$2Foo> = new %0 %3 @\".<LocalClassTest, LocalClassTest$2Foo>::<new>(LocalClassTest, java.lang.String)\";\n-                %5 : java.lang.String = invoke %4 @\".<LocalClassTest, LocalClassTest$2Foo>::m()java.lang.String\";\n+            func @\"testLocalCaptureParam\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n+                %3 : java.type:\"java.lang.String\" = var.load %2;\n+                %4 : java.type:\"LocalClassTest::$2Foo\" = new %0 %3 @\"LocalClassTest::$2Foo::(LocalClassTest, java.lang.String)\";\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @\"LocalClassTest::$2Foo::m():java.lang.String\";\n@@ -90,5 +90,5 @@\n-            func @\"testAnonCaptureParam\" (%0 : LocalClassTest, %1 : java.lang.String)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n-                %3 : java.lang.String = var.load %2;\n-                %4 : .<LocalClassTest, LocalClassTest$2> = new %0 %3 @\".<LocalClassTest, LocalClassTest$2>::<new>(LocalClassTest, java.lang.String)\";\n-                %5 : java.lang.String = invoke %4 @\".<LocalClassTest, LocalClassTest$2>::m()java.lang.String\";\n+            func @\"testAnonCaptureParam\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n+                %3 : java.type:\"java.lang.String\" = var.load %2;\n+                %4 : java.type:\"LocalClassTest::$2\" = new %0 %3 @\"LocalClassTest::$2::(LocalClassTest, java.lang.String)\";\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @\"LocalClassTest::$2::m():java.lang.String\";\n@@ -106,7 +106,7 @@\n-            func @\"testLocalCaptureParamAndField\" (%0 : LocalClassTest, %1 : java.lang.String)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n-                %3 : java.lang.String = constant @\"Hello!\";\n-                %4 : Var<java.lang.String> = var %3 @\"localConst\";\n-                %5 : java.lang.String = var.load %2;\n-                %6 : .<LocalClassTest, LocalClassTest$3Foo> = new %0 %5 @\".<LocalClassTest, LocalClassTest$3Foo>::<new>(LocalClassTest, java.lang.String)\";\n-                %7 : java.lang.String = invoke %6 @\".<LocalClassTest, LocalClassTest$3Foo>::m()java.lang.String\";\n+            func @\"testLocalCaptureParamAndField\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n+                %3 : java.type:\"java.lang.String\" = constant @\"Hello!\";\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"localConst\";\n+                %5 : java.type:\"java.lang.String\" = var.load %2;\n+                %6 : java.type:\"LocalClassTest::$3Foo\" = new %0 %5 @\"LocalClassTest::$3Foo::(LocalClassTest, java.lang.String)\";\n+                %7 : java.type:\"java.lang.String\" = invoke %6 @\"LocalClassTest::$3Foo::m():java.lang.String\";\n@@ -126,7 +126,7 @@\n-            func @\"testAnonCaptureParamAndField\" (%0 : LocalClassTest, %1 : java.lang.String)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n-                %3 : java.lang.String = constant @\"Hello!\";\n-                %4 : Var<java.lang.String> = var %3 @\"localConst\";\n-                %5 : java.lang.String = var.load %2;\n-                %6 : .<LocalClassTest, LocalClassTest$3> = new %0 %5 @\".<LocalClassTest, LocalClassTest$3>::<new>(LocalClassTest, java.lang.String)\";\n-                %7 : java.lang.String = invoke %6 @\".<LocalClassTest, LocalClassTest$3>::m()java.lang.String\";\n+            func @\"testAnonCaptureParamAndField\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n+                %3 : java.type:\"java.lang.String\" = constant @\"Hello!\";\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"localConst\";\n+                %5 : java.type:\"java.lang.String\" = var.load %2;\n+                %6 : java.type:\"LocalClassTest::$3\" = new %0 %5 @\"LocalClassTest::$3::(LocalClassTest, java.lang.String)\";\n+                %7 : java.type:\"java.lang.String\" = invoke %6 @\"LocalClassTest::$3::m():java.lang.String\";\n@@ -145,6 +145,6 @@\n-            func @\"testLocalDependency\" (%0 : LocalClassTest, %1 : int, %2 : int)void -> {\n-                %3 : Var<int> = var %1 @\"s\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : .<LocalClassTest, LocalClassTest$1Bar> = new %0 %5 %6 @\".<LocalClassTest, LocalClassTest$1Bar>::<new>(LocalClassTest, int, int)\";\n+            func @\"testLocalDependency\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"s\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"LocalClassTest::$1Bar\" = new %0 %5 %6 @\"LocalClassTest::$1Bar::(LocalClassTest, int, int)\";\n@@ -167,6 +167,6 @@\n-            func @\"testAnonDependency\" (%0 : LocalClassTest, %1 : int, %2 : int)void -> {\n-                %3 : Var<int> = var %1 @\"s\";\n-                %4 : Var<int> = var %2 @\"i\";\n-                %5 : int = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : .<LocalClassTest, LocalClassTest$4> = new %0 %5 %6 @\".<LocalClassTest, LocalClassTest$4>::<new>(LocalClassTest, int, int)\";\n+            func @\"testAnonDependency\" (%0 : java.type:\"LocalClassTest\", %1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"void\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"s\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"i\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"LocalClassTest::$4\" = new %0 %5 %6 @\"LocalClassTest::$4::(LocalClassTest, int, int)\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/LocalClassTest.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -39,8 +39,8 @@\n-            func @\"test1\" (%0 : LocalVarTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = constant @\"2\";\n-                %4 : Var<int> = var %3 @\"y\";\n-                %5 : int = var.load %2;\n-                %6 : int = var.load %4;\n-                %7 : int = add %5 %6;\n+            func @\"test1\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = constant @\"2\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                %5 : java.type:\"int\" = var.load %2;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -58,6 +58,6 @@\n-            func @\"test2\" (%0 : LocalVarTest, %1 : int, %2 : int)int -> {\n-                %3 : Var<int> = var %1 @\"x\";\n-                %4 : Var<int> = var %2 @\"y\";\n-                %5 : int = var.load %3;\n-                %6 : int = var.load %4;\n-                %7 : int = add %5 %6;\n+            func @\"test2\" (%0 : java.type:\"LocalVarTest\", %1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %3 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %4 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"int\" = var.load %4;\n+                %7 : java.type:\"int\" = add %5 %6;\n@@ -73,11 +73,11 @@\n-            func @\"test3\" (%0 : LocalVarTest)int -> {\n-                %2 : Var<int> = var @\"x\";\n-                %4 : Var<int> = var @\"y\";\n-                %5 : int = constant @\"1\";\n-                var.store %2 %5;\n-                %6 : int = constant @\"2\";\n-                var.store %4 %6;\n-                %7 : int = var.load %2;\n-                %8 : int = var.load %4;\n-                %9 : int = add %7 %8;\n-                return %9;\n+            func @\"test3\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var @\"x\";\n+                %2 : Var<java.type:\"int\"> = var @\"y\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                var.store %1 %3;\n+                %4 : java.type:\"int\" = constant @\"2\";\n+                var.store %2 %4;\n+                %5 : java.type:\"int\" = var.load %1;\n+                %6 : java.type:\"int\" = var.load %2;\n+                %7 : java.type:\"int\" = add %5 %6;\n+                return %7;\n@@ -96,8 +96,8 @@\n-            func @\"test4\" (%0 : LocalVarTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : int = add %3 %4;\n-                %6 : Var<int> = var %5 @\"y\";\n-                %7 : int = var.load %6;\n+            func @\"test4\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"int\" = add %3 %4;\n+                %6 : Var<java.type:\"int\"> = var %5 @\"y\";\n+                %7 : java.type:\"int\" = var.load %6;\n@@ -115,6 +115,6 @@\n-            func @\"test5\" (%0 : LocalVarTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = var.load %2;\n-                %4 : Var<int> = var %3 @\"y\";\n-                %5 : int = var.load %4;\n+            func @\"test5\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                %5 : java.type:\"int\" = var.load %4;\n@@ -132,8 +132,8 @@\n-            func @\"test6\" (%0 : LocalVarTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = constant @\"1\";\n-                %4 : Var<int> = var %3 @\"y\";\n-                %5 : int = constant @\"1\";\n-                %6 : Var<int> = var %5 @\"z\";\n-                %7 : int = var.load %2;\n+            func @\"test6\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : Var<java.type:\"int\"> = var %5 @\"z\";\n+                %7 : java.type:\"int\" = var.load %2;\n@@ -142,1 +142,1 @@\n-                %8 : int = var.load %6;\n+                %8 : java.type:\"int\" = var.load %6;\n@@ -156,6 +156,6 @@\n-            func @\"test7\" (%0 : LocalVarTest)int -> {\n-                %1 : int = constant @\"1\";\n-                %2 : Var<int> = var %1 @\"x\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"2\";\n-                %5 : int = add %3 %4;\n+            func @\"test7\" (%0 : java.type:\"LocalVarTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"2\";\n+                %5 : java.type:\"int\" = add %3 %4;\n@@ -163,4 +163,4 @@\n-                %6 : Var<int> = var %5 @\"y\";\n-                %7 : int = var.load %6;\n-                %8 : int = constant @\"3\";\n-                %9 : int = add %7 %8;\n+                %6 : Var<java.type:\"int\"> = var %5 @\"y\";\n+                %7 : java.type:\"int\" = var.load %6;\n+                %8 : java.type:\"int\" = constant @\"3\";\n+                %9 : java.type:\"int\" = add %7 %8;\n@@ -168,3 +168,3 @@\n-                %10 : int = var.load %2;\n-                %11 : int = constant @\"4\";\n-                %12 : int = add %10 %11;\n+                %10 : java.type:\"int\" = var.load %2;\n+                %11 : java.type:\"int\" = constant @\"4\";\n+                %12 : java.type:\"int\" = add %10 %11;\n@@ -172,1 +172,1 @@\n-                %13 : int = add %9 %12;\n+                %13 : java.type:\"int\" = add %9 %12;\n@@ -184,5 +184,5 @@\n-            func @\"test8\" (%0 : LocalVarTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : int = add %3 %4;\n+            func @\"test8\" (%0 : java.type:\"LocalVarTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"int\" = add %3 %4;\n@@ -190,4 +190,4 @@\n-                %6 : Var<int> = var %3 @\"x\";\n-                %7 : int = var.load %2;\n-                %8 : int = constant @\"1\";\n-                %9 : int = sub %7 %8;\n+                %6 : Var<java.type:\"int\"> = var %3 @\"x\";\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"int\" = constant @\"1\";\n+                %9 : java.type:\"int\" = sub %7 %8;\n@@ -195,1 +195,1 @@\n-                %10 : Var<int> = var %7 @\"y\";\n+                %10 : Var<java.type:\"int\"> = var %7 @\"y\";\n@@ -206,5 +206,5 @@\n-            func @\"test9\" (%0 : LocalVarTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"1\";\n-                %5 : int = add %3 %4;\n+            func @\"test9\" (%0 : java.type:\"LocalVarTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"1\";\n+                %5 : java.type:\"int\" = add %3 %4;\n@@ -212,4 +212,4 @@\n-                %6 : Var<int> = var %5 @\"x\";\n-                %7 : int = var.load %2;\n-                %8 : int = constant @\"1\";\n-                %9 : int = sub %7 %8;\n+                %6 : Var<java.type:\"int\"> = var %5 @\"x\";\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"int\" = constant @\"1\";\n+                %9 : java.type:\"int\" = sub %7 %8;\n@@ -217,1 +217,1 @@\n-                %10 : Var<int> = var %9 @\"y\";\n+                %10 : Var<java.type:\"int\"> = var %9 @\"y\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/LocalVarTest.java","additions":82,"deletions":82,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-            func @\"test1\" (%0 : MethodCallTest)void -> {\n-                invoke %0 @\"MethodCallTest::m()void\";\n+            func @\"test1\" (%0 : java.type:\"MethodCallTest\")java.type:\"void\" -> {\n+                invoke %0 @\"MethodCallTest::m():void\";\n@@ -59,2 +59,2 @@\n-            func @\"test2\" (%0 : MethodCallTest)void -> {\n-                invoke %0 @\"MethodCallTest::m()void\";\n+            func @\"test2\" (%0 : java.type:\"MethodCallTest\")java.type:\"void\" -> {\n+                invoke %0 @\"MethodCallTest::m():void\";\n@@ -70,2 +70,2 @@\n-            func @\"test2_1\" (%0 : MethodCallTest)void -> {\n-                invoke %0 @\"MethodCallTest::m()void\";\n+            func @\"test2_1\" (%0 : java.type:\"MethodCallTest\")java.type:\"void\" -> {\n+                invoke %0 @\"MethodCallTest::m():void\";\n@@ -81,2 +81,2 @@\n-            func @\"test3\" (%0 : MethodCallTest)int -> {\n-                %1 : int = invoke %0 @\"MethodCallTest::m_int()int\";\n+            func @\"test3\" (%0 : java.type:\"MethodCallTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = invoke %0 @\"MethodCallTest::m_int():int\";\n@@ -96,2 +96,2 @@\n-            func @\"test4\" (%0 : MethodCallTest)void -> {\n-                invoke @\"MethodCallTest::ms()void\";\n+            func @\"test4\" (%0 : java.type:\"MethodCallTest\")java.type:\"void\" -> {\n+                invoke @\"MethodCallTest::ms():void\";\n@@ -107,2 +107,2 @@\n-            func @\"test4_1\" (%0 : MethodCallTest)void -> {\n-                invoke @\"MethodCallTest::ms()void\";\n+            func @\"test4_1\" (%0 : java.type:\"MethodCallTest\")java.type:\"void\" -> {\n+                invoke @\"MethodCallTest::ms():void\";\n@@ -118,2 +118,2 @@\n-            func @\"test4_2\" (%0 : MethodCallTest)java.util.List<java.lang.String> -> {\n-                %1 : java.util.List<java.lang.String> = invoke @\"java.util.List::of()java.util.List\";\n+            func @\"test4_2\" (%0 : java.type:\"MethodCallTest\")java.type:\"java.util.List<java.lang.String>\" -> {\n+                %1 : java.type:\"java.util.List<java.lang.String>\" = invoke @\"java.util.List::of():java.util.List\";\n@@ -133,7 +133,7 @@\n-            func @\"test5\" (%0 : MethodCallTest, %1 : java.util.List<java.lang.Number>)void -> {\n-                %2 : Var<java.util.List<java.lang.Number>> = var %1 @\"l\";\n-                %3 : int = constant @\"1\";\n-                %4 : java.lang.String = constant @\"1\";\n-                %5 : java.util.List<java.lang.Number> = var.load %2;\n-                %6 : java.lang.String = invoke %0 %3 %4 %5 @\"MethodCallTest::m(int, java.lang.String, java.util.List)java.lang.String\";\n-                %7 : Var<java.lang.String> = var %6 @\"s\";\n+            func @\"test5\" (%0 : java.type:\"MethodCallTest\", %1 : java.type:\"java.util.List<java.lang.Number>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.Number>\"> = var %1 @\"l\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                %4 : java.type:\"java.lang.String\" = constant @\"1\";\n+                %5 : java.type:\"java.util.List<java.lang.Number>\" = var.load %2;\n+                %6 : java.type:\"java.lang.String\" = invoke %0 %3 %4 %5 @\"MethodCallTest::m(int, java.lang.String, java.util.List):java.lang.String\";\n+                %7 : Var<java.type:\"java.lang.String\"> = var %6 @\"s\";\n@@ -170,6 +170,6 @@\n-            func @\"test6\" (%0 : MethodCallTest, %1 : MethodCallTest$A)void -> {\n-                %2 : Var<MethodCallTest$A> = var %1 @\"a\";\n-                %3 : MethodCallTest$A = var.load %2;\n-                %4 : MethodCallTest$B = invoke %3 @\"MethodCallTest$A::m()MethodCallTest$B\";\n-                %5 : MethodCallTest$C = invoke %4 @\"MethodCallTest$B::m()MethodCallTest$C\";\n-                %6 : int = invoke %5 @\"MethodCallTest$C::m()int\";\n+            func @\"test6\" (%0 : java.type:\"MethodCallTest\", %1 : java.type:\"MethodCallTest$A\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"MethodCallTest$A\"> = var %1 @\"a\";\n+                %3 : java.type:\"MethodCallTest$A\" = var.load %2;\n+                %4 : java.type:\"MethodCallTest$B\" = invoke %3 @\"MethodCallTest$A::m():MethodCallTest$B\";\n+                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @\"MethodCallTest$B::m():MethodCallTest$C\";\n+                %6 : java.type:\"int\" = invoke %5 @\"MethodCallTest$C::m():int\";\n@@ -185,5 +185,5 @@\n-            func @\"test7\" (%0 : MethodCallTest, %1 : MethodCallTest$A)void -> {\n-                %2 : Var<MethodCallTest$A> = var %1 @\"a\";\n-                %3 : MethodCallTest$A = var.load %2;\n-                %4 : MethodCallTest$B = field.load %3 @\"MethodCallTest$A::b()MethodCallTest$B\";\n-                %5 : MethodCallTest$C = invoke %4 @\"MethodCallTest$B::m()MethodCallTest$C\";\n+            func @\"test7\" (%0 : java.type:\"MethodCallTest\", %1 : java.type:\"MethodCallTest$A\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"MethodCallTest$A\"> = var %1 @\"a\";\n+                %3 : java.type:\"MethodCallTest$A\" = var.load %2;\n+                %4 : java.type:\"MethodCallTest$B\" = field.load %3 @\"MethodCallTest$A::b:MethodCallTest$B\";\n+                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @\"MethodCallTest$B::m():MethodCallTest$C\";\n@@ -199,5 +199,5 @@\n-            func @\"test8\" (%0 : MethodCallTest, %1 : java.lang.String)void -> {\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n-                %3 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                %4 : java.lang.String = var.load %2;\n-                invoke %3 %4 @\"java.io.PrintStream::println(java.lang.String)void\";\n+            func @\"test8\" (%0 : java.type:\"MethodCallTest\", %1 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n+                %3 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %4 : java.type:\"java.lang.String\" = var.load %2;\n+                invoke %3 %4 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -224,7 +224,7 @@\n-                func @\"test\" (%0 : MethodCallTest$Y)void -> {\n-                    invoke %0 @\"MethodCallTest$Y::x()void\";\n-                    invoke %0 @\"MethodCallTest$Y::y()void\";\n-                    invoke @\"MethodCallTest$Y::sx()void\";\n-                    invoke @\"MethodCallTest$Y::sy()void\";\n-                    invoke @\"MethodCallTest$Y::sx()void\";\n-                    invoke @\"MethodCallTest$Y::sy()void\";\n+                func @\"test\" (%0 : java.type:\"MethodCallTest$Y\")java.type:\"void\" -> {\n+                    invoke %0 @\"MethodCallTest$Y::x():void\";\n+                    invoke %0 @\"MethodCallTest$Y::y():void\";\n+                    invoke @\"MethodCallTest$Y::sx():void\";\n+                    invoke @\"MethodCallTest$Y::sy():void\";\n+                    invoke @\"MethodCallTest$Y::sx():void\";\n+                    invoke @\"MethodCallTest$Y::sy():void\";\n@@ -248,12 +248,12 @@\n-            func @\"test9\" (%0 : MethodCallTest$Y)void -> {\n-                %1 : Var<MethodCallTest$Y> = var %0 @\"y\";\n-                %2 : MethodCallTest$Y = var.load %1;\n-                invoke %2 @\"MethodCallTest$Y::x()void\";\n-                %3 : MethodCallTest$Y = var.load %1;\n-                invoke %3 @\"MethodCallTest$Y::y()void\";\n-                %4 : MethodCallTest$Y = var.load %1;\n-                invoke @\"MethodCallTest$Y::sx()void\";\n-                %5 : MethodCallTest$Y = var.load %1;\n-                invoke @\"MethodCallTest$Y::sy()void\";\n-                invoke @\"MethodCallTest$Y::sx()void\";\n-                invoke @\"MethodCallTest$Y::sy()void\";\n+            func @\"test9\" (%0 : java.type:\"MethodCallTest$Y\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"MethodCallTest$Y\"> = var %0 @\"y\";\n+                %2 : java.type:\"MethodCallTest$Y\" = var.load %1;\n+                invoke %2 @\"MethodCallTest$Y::x():void\";\n+                %3 : java.type:\"MethodCallTest$Y\" = var.load %1;\n+                invoke %3 @\"MethodCallTest$Y::y():void\";\n+                %4 : java.type:\"MethodCallTest$Y\" = var.load %1;\n+                invoke @\"MethodCallTest$Y::sx():void\";\n+                %5 : java.type:\"MethodCallTest$Y\" = var.load %1;\n+                invoke @\"MethodCallTest$Y::sy():void\";\n+                invoke @\"MethodCallTest$Y::sx():void\";\n+                invoke @\"MethodCallTest$Y::sy():void\";\n@@ -276,11 +276,11 @@\n-            func @\"test10\" (%0 : java.util.ArrayList<java.lang.String>)void -> {\n-                %1 : Var<java.util.ArrayList<java.lang.String>> = var %0 @\"al\";\n-                %2 : java.util.ArrayList<java.lang.String> = var.load %1;\n-                %3 : int = constant @\"0\";\n-                %4 : java.lang.String = invoke %2 %3 @\"java.util.ArrayList::get(int)java.lang.Object\";\n-                %5 : Var<java.lang.String> = var %4 @\"s\";\n-                %6 : java.util.ArrayList<java.lang.String> = var.load %1;\n-                %7 : Var<java.util.List<java.lang.String>> = var %6 @\"l\";\n-                %8 : java.util.List<java.lang.String> = var.load %7;\n-                %9 : int = constant @\"0\";\n-                %10 : java.lang.String = invoke %8 %9 @\"java.util.List::get(int)java.lang.Object\";\n+            func @\"test10\" (%0 : java.type:\"java.util.ArrayList<java.lang.String>\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"java.util.ArrayList<java.lang.String>\"> = var %0 @\"al\";\n+                %2 : java.type:\"java.util.ArrayList<java.lang.String>\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"java.lang.String\" = invoke %2 %3 @\"java.util.ArrayList::get(int):java.lang.Object\";\n+                %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                %6 : java.type:\"java.util.ArrayList<java.lang.String>\" = var.load %1;\n+                %7 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %6 @\"l\";\n+                %8 : java.type:\"java.util.List<java.lang.String>\" = var.load %7;\n+                %9 : java.type:\"int\" = constant @\"0\";\n+                %10 : java.type:\"java.lang.String\" = invoke %8 %9 @\"java.util.List::get(int):java.lang.Object\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/MethodCallTest.java","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -48,5 +48,5 @@\n-            func @\"test1\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.Consumer<java.lang.String> = lambda (%2 : java.lang.String)void -> {\n-                    %3 : Var<java.lang.String> = var %2 @\"x$0\";\n-                    %4 : java.lang.String = var.load %3;\n-                    invoke %4 @\"MethodReferenceTest::m_s(java.lang.String)void\";\n+            func @\"test1\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Consumer<java.lang.String>\" = lambda (%2 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"java.lang.String\" = var.load %3;\n+                    invoke %4 @\"MethodReferenceTest::m_s(java.lang.String):void\";\n@@ -55,1 +55,1 @@\n-                %5 : Var<java.util.function.Consumer<java.lang.String>> = var %1 @\"c\";\n+                %5 : Var<java.type:\"java.util.function.Consumer<java.lang.String>\"> = var %1 @\"c\";\n@@ -65,7 +65,7 @@\n-            func @\"test2\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.BiConsumer<MethodReferenceTest, java.lang.String> = lambda (%2 : MethodReferenceTest, %3 : java.lang.String)void -> {\n-                    %4 : Var<MethodReferenceTest> = var %2 @\"rec$\";\n-                    %5 : Var<java.lang.String> = var %3 @\"x$0\";\n-                    %6 : MethodReferenceTest = var.load %4;\n-                    %7 : java.lang.String = var.load %5;\n-                    invoke %6 %7 @\"MethodReferenceTest::m(java.lang.String)void\";\n+            func @\"test2\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.BiConsumer<MethodReferenceTest, java.lang.String>\" = lambda (%2 : java.type:\"MethodReferenceTest\", %3 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %4 : Var<java.type:\"MethodReferenceTest\"> = var %2 @\"rec$\";\n+                    %5 : Var<java.type:\"java.lang.String\"> = var %3 @\"x$0\";\n+                    %6 : java.type:\"MethodReferenceTest\" = var.load %4;\n+                    %7 : java.type:\"java.lang.String\" = var.load %5;\n+                    invoke %6 %7 @\"MethodReferenceTest::m(java.lang.String):void\";\n@@ -74,1 +74,1 @@\n-                %8 : Var<java.util.function.BiConsumer<MethodReferenceTest, java.lang.String>> = var %1 @\"bc\";\n+                %8 : Var<java.type:\"java.util.function.BiConsumer<MethodReferenceTest, java.lang.String>\"> = var %1 @\"bc\";\n@@ -84,5 +84,5 @@\n-            func @\"test3\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.Consumer<java.lang.String> = lambda (%2 : java.lang.String)void -> {\n-                    %3 : Var<java.lang.String> = var %2 @\"x$0\";\n-                    %4 : java.lang.String = var.load %3;\n-                    invoke %0 %4 @\"MethodReferenceTest::m(java.lang.String)void\";\n+            func @\"test3\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Consumer<java.lang.String>\" = lambda (%2 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"java.lang.String\" = var.load %3;\n+                    invoke %0 %4 @\"MethodReferenceTest::m(java.lang.String):void\";\n@@ -91,1 +91,1 @@\n-                %5 : Var<java.util.function.Consumer<java.lang.String>> = var %1 @\"c\";\n+                %5 : Var<java.type:\"java.util.function.Consumer<java.lang.String>\"> = var %1 @\"c\";\n@@ -107,9 +107,9 @@\n-            func @\"test4\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.lang.String = constant @\"s\";\n-                %2 : .<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>> = invoke %0 %1 @\"MethodReferenceTest::a(java.lang.Object).<MethodReferenceTest, MethodReferenceTest$A>\";\n-                %3 : Var<.<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>> = var %2 @\"rec$\";\n-                %4 : java.util.function.Function<java.lang.String, java.lang.String> = lambda (%5 : java.lang.String)java.lang.String -> {\n-                    %6 : Var<java.lang.String> = var %5 @\"x$0\";\n-                    %7 : .<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>> = var.load %3;\n-                    %8 : java.lang.String = var.load %6;\n-                    %9 : java.lang.String = invoke %7 %8 @\".<MethodReferenceTest, MethodReferenceTest$A>::m(java.lang.Object)java.lang.Object\";\n+            func @\"test4\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @\"s\";\n+                %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = invoke %0 %1 @\"MethodReferenceTest::a(java.lang.Object):MethodReferenceTest::A\";\n+                %3 : Var<java.type:\"MethodReferenceTest::A<java.lang.String>\"> = var %2 @\"rec$\";\n+                %4 : java.type:\"java.util.function.Function<java.lang.String, java.lang.String>\" = lambda (%5 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                    %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"x$0\";\n+                    %7 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = var.load %3;\n+                    %8 : java.type:\"java.lang.String\" = var.load %6;\n+                    %9 : java.type:\"java.lang.String\" = invoke %7 %8 @\"MethodReferenceTest::A::m(java.lang.Object):java.lang.Object\";\n@@ -118,1 +118,1 @@\n-                %10 : Var<java.util.function.Function<java.lang.String, java.lang.String>> = var %4 @\"f\";\n+                %10 : Var<java.type:\"java.util.function.Function<java.lang.String, java.lang.String>\"> = var %4 @\"f\";\n@@ -128,8 +128,8 @@\n-            func @\"test5\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                %2 : Var<java.io.PrintStream> = var %1 @\"rec$\";\n-                %3 : java.util.function.Consumer<java.lang.String> = lambda (%4 : java.lang.String)void -> {\n-                    %5 : Var<java.lang.String> = var %4 @\"x$0\";\n-                    %6 : java.io.PrintStream = var.load %2;\n-                    %7 : java.lang.String = var.load %5;\n-                    invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+            func @\"test5\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %2 : Var<java.type:\"java.io.PrintStream\"> = var %1 @\"rec$\";\n+                %3 : java.type:\"java.util.function.Consumer<java.lang.String>\" = lambda (%4 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                    %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"x$0\";\n+                    %6 : java.type:\"java.io.PrintStream\" = var.load %2;\n+                    %7 : java.type:\"java.lang.String\" = var.load %5;\n+                    invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -138,1 +138,1 @@\n-                %8 : Var<java.util.function.Consumer<java.lang.String>> = var %3 @\"c3\";\n+                %8 : Var<java.type:\"java.util.function.Consumer<java.lang.String>\"> = var %3 @\"c3\";\n@@ -152,6 +152,6 @@\n-            func @\"test6\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.Function<java.lang.Integer, MethodReferenceTest$X> = lambda (%2 : java.lang.Integer)MethodReferenceTest$X -> {\n-                    %3 : Var<java.lang.Integer> = var %2 @\"x$0\";\n-                    %4 : java.lang.Integer = var.load %3;\n-                    %5 : int = invoke %4 @\"java.lang.Integer::intValue()int\";\n-                    %6 : MethodReferenceTest$X = new %5 @\"MethodReferenceTest$X::<new>(int)\";\n+            func @\"test6\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Function<java.lang.Integer, MethodReferenceTest$X>\" = lambda (%2 : java.type:\"java.lang.Integer\")java.type:\"MethodReferenceTest$X\" -> {\n+                    %3 : Var<java.type:\"java.lang.Integer\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"java.lang.Integer\" = var.load %3;\n+                    %5 : java.type:\"int\" = invoke %4 @\"java.lang.Integer::intValue():int\";\n+                    %6 : java.type:\"MethodReferenceTest$X\" = new %5 @\"MethodReferenceTest$X::(int)\";\n@@ -160,1 +160,1 @@\n-                %7 : Var<java.util.function.Function<java.lang.Integer, MethodReferenceTest$X>> = var %1 @\"xNew\";\n+                %7 : Var<java.type:\"java.util.function.Function<java.lang.Integer, MethodReferenceTest$X>\"> = var %1 @\"xNew\";\n@@ -170,3 +170,3 @@\n-            func @\"test7\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.Supplier<.<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>> = lambda ().<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>> -> {\n-                    %2 : .<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>> = new %0 @\".<MethodReferenceTest, MethodReferenceTest$A>::<new>(MethodReferenceTest)\";\n+            func @\"test7\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<MethodReferenceTest::A<java.lang.String>>\" = lambda ()java.type:\"MethodReferenceTest::A<java.lang.String>\" -> {\n+                    %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = new %0 @\"MethodReferenceTest::A::(MethodReferenceTest)\";\n@@ -175,1 +175,1 @@\n-                %3 : Var<java.util.function.Supplier<.<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>>> = var %1 @\"aNew\";\n+                %3 : Var<java.type:\"java.util.function.Supplier<MethodReferenceTest::A<java.lang.String>>\"> = var %1 @\"aNew\";\n@@ -185,5 +185,5 @@\n-            func @\"test8\" (%0 : MethodReferenceTest)void -> {\n-                %1 : java.util.function.IntFunction<.<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>[]> = lambda (%2 : int).<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>[] -> {\n-                    %3 : Var<int> = var %2 @\"x$0\";\n-                    %4 : int = var.load %3;\n-                    %5 : .<MethodReferenceTest, MethodReferenceTest$A>[] = new %4 @\".<MethodReferenceTest, MethodReferenceTest$A>[]::<new>(int)\";\n+            func @\"test8\" (%0 : java.type:\"MethodReferenceTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.IntFunction<MethodReferenceTest::A<java.lang.String>[]>\" = lambda (%2 : java.type:\"int\")java.type:\"MethodReferenceTest::A<java.lang.String>[]\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"int\" = var.load %3;\n+                    %5 : java.type:\"MethodReferenceTest::A[]\" = new %4 @\"MethodReferenceTest::A[]::(int)\";\n@@ -192,1 +192,1 @@\n-                %6 : Var<java.util.function.IntFunction<.<MethodReferenceTest, MethodReferenceTest$A<java.lang.String>>[]>> = var %1 @\"aNewArray\";\n+                %6 : Var<java.type:\"java.util.function.IntFunction<MethodReferenceTest::A<java.lang.String>[]>\"> = var %1 @\"aNewArray\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/MethodReferenceTest.java","additions":56,"deletions":56,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-            func @\"test1\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"10\";\n-                %2 : int[] = new %1 @\"int[]::<new>(int)\";\n-                %3 : Var<int[]> = var %2 @\"a\";\n+            func @\"test1\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"10\";\n+                %2 : java.type:\"int[]\" = new %1 @\"int[]::(int)\";\n+                %3 : Var<java.type:\"int[]\"> = var %2 @\"a\";\n@@ -53,7 +53,7 @@\n-            func @\"test2\" (%0 : NewArrayTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"l\";\n-                %3 : int = var.load %2;\n-                %4 : int = constant @\"10\";\n-                %5 : int = add %3 %4;\n-                %6 : int[] = new %5 @\"int[]::<new>(int)\";\n-                %7 : Var<int[]> = var %6 @\"a\";\n+            func @\"test2\" (%0 : java.type:\"NewArrayTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"l\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = constant @\"10\";\n+                %5 : java.type:\"int\" = add %3 %4;\n+                %6 : java.type:\"int[]\" = new %5 @\"int[]::(int)\";\n+                %7 : Var<java.type:\"int[]\"> = var %6 @\"a\";\n@@ -69,4 +69,4 @@\n-            func @\"test3\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"10\";\n-                %2 : java.lang.String[] = new %1 @\"java.lang.String[]::<new>(int)\";\n-                %3 : Var<java.lang.String[]> = var %2 @\"a\";\n+            func @\"test3\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"10\";\n+                %2 : java.type:\"java.lang.String[]\" = new %1 @\"java.lang.String[]::(int)\";\n+                %3 : Var<java.type:\"java.lang.String[]\"> = var %2 @\"a\";\n@@ -82,4 +82,4 @@\n-            func @\"test4\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"10\";\n-                %2 : java.lang.String[][] = new %1 @\"java.lang.String[][]::<new>(int)\";\n-                %3 : Var<java.lang.String[][]> = var %2 @\"a\";\n+            func @\"test4\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"10\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %3 : Var<java.type:\"java.lang.String[][]\"> = var %2 @\"a\";\n@@ -95,5 +95,5 @@\n-            func @\"test5\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"10\";\n-                %2 : int = constant @\"10\";\n-                %3 : java.lang.String[][] = new %1 %2 @\"java.lang.String[][]::<new>(int, int)\";\n-                %4 : Var<java.lang.String[][]> = var %3 @\"a\";\n+            func @\"test5\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"10\";\n+                %2 : java.type:\"int\" = constant @\"10\";\n+                %3 : java.type:\"java.lang.String[][]\" = new %1 %2 @\"java.lang.String[][]::(int, int)\";\n+                %4 : Var<java.type:\"java.lang.String[][]\"> = var %3 @\"a\";\n@@ -109,7 +109,7 @@\n-            func @\"test6\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"3\";\n-                %2 : java.lang.String[][] = new %1 @\"java.lang.String[][]::<new>(int)\";\n-                %3 : int = constant @\"2\";\n-                %4 : java.lang.String[] = new %3 @\"java.lang.String[]::<new>(int)\";\n-                %5 : java.lang.String = constant @\"one\";\n-                %6 : int = constant @\"0\";\n+            func @\"test6\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"3\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %3 : java.type:\"int\" = constant @\"2\";\n+                %4 : java.type:\"java.lang.String[]\" = new %3 @\"java.lang.String[]::(int)\";\n+                %5 : java.type:\"java.lang.String\" = constant @\"one\";\n+                %6 : java.type:\"int\" = constant @\"0\";\n@@ -117,2 +117,2 @@\n-                %7 : java.lang.String = constant @\"two\";\n-                %8 : int = constant @\"1\";\n+                %7 : java.type:\"java.lang.String\" = constant @\"two\";\n+                %8 : java.type:\"int\" = constant @\"1\";\n@@ -120,1 +120,1 @@\n-                %9 : int = constant @\"0\";\n+                %9 : java.type:\"int\" = constant @\"0\";\n@@ -122,4 +122,4 @@\n-                %10 : int = constant @\"1\";\n-                %11 : java.lang.String[] = new %10 @\"java.lang.String[]::<new>(int)\";\n-                %12 : java.lang.String = constant @\"three\";\n-                %13 : int = constant @\"0\";\n+                %10 : java.type:\"int\" = constant @\"1\";\n+                %11 : java.type:\"java.lang.String[]\" = new %10 @\"java.lang.String[]::(int)\";\n+                %12 : java.type:\"java.lang.String\" = constant @\"three\";\n+                %13 : java.type:\"int\" = constant @\"0\";\n@@ -127,1 +127,1 @@\n-                %14 : int = constant @\"1\";\n+                %14 : java.type:\"int\" = constant @\"1\";\n@@ -129,2 +129,2 @@\n-                %15 : java.lang.String[] = constant @null;\n-                %16 : int = constant @\"2\";\n+                %15 : java.type:\"java.lang.String[]\" = constant @null;\n+                %16 : java.type:\"int\" = constant @\"2\";\n@@ -132,1 +132,1 @@\n-                %17 : Var<java.lang.String[][]> = var %2 @\"a\";\n+                %17 : Var<java.type:\"java.lang.String[][]\"> = var %2 @\"a\";\n@@ -142,7 +142,7 @@\n-            func @\"test7\" (%0 : NewArrayTest)void -> {\n-                %1 : int = constant @\"3\";\n-                %2 : java.lang.String[][] = new %1 @\"java.lang.String[][]::<new>(int)\";\n-                %3 : int = constant @\"2\";\n-                %4 : java.lang.String[] = new %3 @\"java.lang.String[]::<new>(int)\";\n-                %5 : java.lang.String = constant @\"one\";\n-                %6 : int = constant @\"0\";\n+            func @\"test7\" (%0 : java.type:\"NewArrayTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"3\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %3 : java.type:\"int\" = constant @\"2\";\n+                %4 : java.type:\"java.lang.String[]\" = new %3 @\"java.lang.String[]::(int)\";\n+                %5 : java.type:\"java.lang.String\" = constant @\"one\";\n+                %6 : java.type:\"int\" = constant @\"0\";\n@@ -150,2 +150,2 @@\n-                %7 : java.lang.String = constant @\"two\";\n-                %8 : int = constant @\"1\";\n+                %7 : java.type:\"java.lang.String\" = constant @\"two\";\n+                %8 : java.type:\"int\" = constant @\"1\";\n@@ -153,1 +153,1 @@\n-                %9 : int = constant @\"0\";\n+                %9 : java.type:\"int\" = constant @\"0\";\n@@ -155,4 +155,4 @@\n-                %10 : int = constant @\"1\";\n-                %11 : java.lang.String[] = new %10 @\"java.lang.String[]::<new>(int)\";\n-                %12 : java.lang.String = constant @\"three\";\n-                %13 : int = constant @\"0\";\n+                %10 : java.type:\"int\" = constant @\"1\";\n+                %11 : java.type:\"java.lang.String[]\" = new %10 @\"java.lang.String[]::(int)\";\n+                %12 : java.type:\"java.lang.String\" = constant @\"three\";\n+                %13 : java.type:\"int\" = constant @\"0\";\n@@ -160,1 +160,1 @@\n-                %14 : int = constant @\"1\";\n+                %14 : java.type:\"int\" = constant @\"1\";\n@@ -162,2 +162,2 @@\n-                %15 : java.lang.String[] = constant @null;\n-                %16 : int = constant @\"2\";\n+                %15 : java.type:\"java.lang.String[]\" = constant @null;\n+                %16 : java.type:\"int\" = constant @\"2\";\n@@ -165,1 +165,1 @@\n-                %17 : Var<java.lang.String[][]> = var %2 @\"a\";\n+                %17 : Var<java.type:\"java.lang.String[][]\"> = var %2 @\"a\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NewArrayTest.java","additions":60,"deletions":60,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n-            func @\"test0\" (%0 : NewTest)void -> {\n-                %1 : java.lang.String = constant @\"1\";\n-                %2 : java.math.BigDecimal = new %1 @\"java.math.BigDecimal::<new>(java.lang.String)\";\n-                %3 : Var<java.math.BigDecimal> = var %2 @\"a\";\n+            func @\"test0\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @\"1\";\n+                %2 : java.type:\"java.math.BigDecimal\" = new %1 @\"java.math.BigDecimal::(java.lang.String)\";\n+                %3 : Var<java.type:\"java.math.BigDecimal\"> = var %2 @\"a\";\n@@ -60,3 +60,3 @@\n-            func @\"test1\" (%0 : NewTest)void -> {\n-                %1 : NewTest$A = new @\"NewTest$A::<new>()\";\n-                %2 : Var<NewTest$A> = var %1 @\"a\";\n+            func @\"test1\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"NewTest$A\" = new @\"NewTest$A::()\";\n+                %2 : Var<java.type:\"NewTest$A\"> = var %1 @\"a\";\n@@ -72,5 +72,5 @@\n-            func @\"test2\" (%0 : NewTest)void -> {\n-                %1 : int = constant @\"1\";\n-                %2 : int = constant @\"2\";\n-                %3 : NewTest$A = new %1 %2 @\"NewTest$A::<new>(int, int)\";\n-                %4 : Var<NewTest$A> = var %3 @\"a\";\n+            func @\"test2\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"NewTest$A\" = new %1 %2 @\"NewTest$A::(int, int)\";\n+                %4 : Var<java.type:\"NewTest$A\"> = var %3 @\"a\";\n@@ -99,3 +99,3 @@\n-            func @\"test3\" (%0 : NewTest)void -> {\n-                %1 : .<NewTest, NewTest$B> = new %0 @\".<NewTest, NewTest$B>::<new>(NewTest)\";\n-                %2 : Var<.<NewTest, NewTest$B>> = var %1 @\"b\";\n+            func @\"test3\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"NewTest::B\" = new %0 @\"NewTest::B::(NewTest)\";\n+                %2 : Var<java.type:\"NewTest::B\"> = var %1 @\"b\";\n@@ -111,5 +111,5 @@\n-            func @\"test4\" (%0 : NewTest)void -> {\n-                %1 : int = constant @\"1\";\n-                %2 : int = constant @\"2\";\n-                %3 : .<NewTest, NewTest$B> = new %0 %1 %2 @\".<NewTest, NewTest$B>::<new>(NewTest, int, int)\";\n-                %4 : Var<.<NewTest, NewTest$B>> = var %3 @\"b\";\n+            func @\"test4\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"1\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"NewTest::B\" = new %0 %1 %2 @\"NewTest::B::(NewTest, int, int)\";\n+                %4 : Var<java.type:\"NewTest::B\"> = var %3 @\"b\";\n@@ -125,3 +125,3 @@\n-            func @\"test5\" (%0 : NewTest)void -> {\n-                %1 : .<NewTest, NewTest$B> = new %0 @\".<NewTest, NewTest$B>::<new>(NewTest)\";\n-                %2 : Var<.<NewTest, NewTest$B>> = var %1 @\"b\";\n+            func @\"test5\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"NewTest::B\" = new %0 @\"NewTest::B::(NewTest)\";\n+                %2 : Var<java.type:\"NewTest::B\"> = var %1 @\"b\";\n@@ -137,4 +137,4 @@\n-            func @\"test6\" (%0 : NewTest)void -> {\n-                %1 : .<NewTest, NewTest$B> = field.load %0 @\"NewTest::f().<NewTest, NewTest$B>\";\n-                %2 : .<.<NewTest, NewTest$B>, NewTest$B$C> = new %1 @\".<.<NewTest, NewTest$B>, NewTest$B$C>::<new>(.<NewTest, NewTest$B>)\";\n-                %3 : Var<.<.<NewTest, NewTest$B>, NewTest$B$C>> = var %2 @\"c\";\n+            func @\"test6\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"NewTest::B\" = field.load %0 @\"NewTest::f:NewTest::B\";\n+                %2 : java.type:\"NewTest::B::C\" = new %1 @\"NewTest::B::C::(NewTest::B)\";\n+                %3 : Var<java.type:\"NewTest::B::C\"> = var %2 @\"c\";\n@@ -150,4 +150,4 @@\n-            func @\"test7\" (%0 : NewTest)void -> {\n-                %1 : .<NewTest, NewTest$B> = invoke %0 @\"NewTest::b().<NewTest, NewTest$B>\";\n-                %2 : .<.<NewTest, NewTest$B>, NewTest$B$C> = new %1 @\".<.<NewTest, NewTest$B>, NewTest$B$C>::<new>(.<NewTest, NewTest$B>)\";\n-                %3 : Var<.<.<NewTest, NewTest$B>, NewTest$B$C>> = var %2 @\"c\";\n+            func @\"test7\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"NewTest::B\" = invoke %0 @\"NewTest::b():NewTest::B\";\n+                %2 : java.type:\"NewTest::B::C\" = new %1 @\"NewTest::B::C::(NewTest::B)\";\n+                %3 : Var<java.type:\"NewTest::B::C\"> = var %2 @\"c\";\n@@ -167,5 +167,5 @@\n-            func @\"test8\" (%0 : NewTest, %1 : java.util.List<java.lang.String>)void -> {\n-                %2 : Var<java.util.List<java.lang.String>> = var %1 @\"l\";\n-                %3 : java.util.List<java.lang.String> = var.load %2;\n-                %4 : NewTest$AG<java.lang.String> = new %3 @\"NewTest$AG::<new>(java.util.List)\";\n-                %5 : Var<NewTest$AG<java.lang.String>> = var %4 @\"a\";\n+            func @\"test8\" (%0 : java.type:\"NewTest\", %1 : java.type:\"java.util.List<java.lang.String>\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l\";\n+                %3 : java.type:\"java.util.List<java.lang.String>\" = var.load %2;\n+                %4 : java.type:\"NewTest$AG<java.lang.String>\" = new %3 @\"NewTest$AG::(java.util.List)\";\n+                %5 : Var<java.type:\"NewTest$AG<java.lang.String>\"> = var %4 @\"a\";\n@@ -189,10 +189,10 @@\n-            func @\"test9\" (%0 : NewTest, %1 : java.util.List<java.lang.String>, %2 : java.util.List<java.lang.Number>)void -> {\n-                %3 : Var<java.util.List<java.lang.String>> = var %1 @\"l1\";\n-                %4 : Var<java.util.List<java.lang.Number>> = var %2 @\"l2\";\n-                %5 : java.util.List<java.lang.String> = var.load %3;\n-                %6 : .<NewTest, NewTest$BG<java.lang.String>> = new %0 %5 @\".<NewTest, NewTest$BG>::<new>(NewTest, java.util.List)\";\n-                %7 : java.util.List<java.lang.Number> = var.load %4;\n-                %8 : .<.<NewTest, NewTest$BG<java.lang.String>>, NewTest$BG$CG<java.lang.Number>> = new %6 %7 @\".<.<NewTest, NewTest$BG>, NewTest$BG$CG>::<new>(.<NewTest, NewTest$BG<java.lang.String>>, java.util.List)\";\n-                %9 : Var<.<.<NewTest, NewTest$BG<java.lang.String>>, NewTest$BG$CG<java.lang.Number>>> = var %8 @\"numberCG\";\n-                return;\n-            };\n+            func @\"test9\" (%0 : java.type:\"NewTest\", %1 : java.type:\"java.util.List<java.lang.String>\", %2 : java.type:\"java.util.List<java.lang.Number>\")java.type:\"void\" -> {\n+                  %3 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %1 @\"l1\";\n+                  %4 : Var<java.type:\"java.util.List<java.lang.Number>\"> = var %2 @\"l2\";\n+                  %5 : java.type:\"java.util.List<java.lang.String>\" = var.load %3;\n+                  %6 : java.type:\"NewTest::BG<java.lang.String>\" = new %0 %5 @\"NewTest::BG::(NewTest, java.util.List)\";\n+                  %7 : java.type:\"java.util.List<java.lang.Number>\" = var.load %4;\n+                  %8 : java.type:\"NewTest::BG<java.lang.String>::CG<java.lang.Number>\" = new %6 %7 @\"NewTest::BG::CG::(NewTest::BG<java.lang.String>, java.util.List)\";\n+                  %9 : Var<java.type:\"NewTest::BG<java.lang.String>::CG<java.lang.Number>\"> = var %8 @\"numberCG\";\n+                  return;\n+              };\n@@ -207,4 +207,4 @@\n-            func @\"test10\" (%0 : NewTest)void -> {\n-                %1 : int = constant @\"10\";\n-                %2 : int[] = new %1 @\"int[]::<new>(int)\";\n-                %3 : Var<int[]> = var %2 @\"i\";\n+            func @\"test10\" (%0 : java.type:\"NewTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"10\";\n+                %2 : java.type:\"int[]\" = new %1 @\"int[]::(int)\";\n+                %3 : Var<java.type:\"int[]\"> = var %2 @\"i\";\n@@ -220,11 +220,11 @@\n-            func @\"test11\" (%0 : NewTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = var.load %2;\n-                %4 : int = var.load %2;\n-                %5 : int = constant @\"1\";\n-                %6 : int = add %4 %5;\n-                %7 : int = var.load %2;\n-                %8 : int = constant @\"2\";\n-                %9 : int = add %7 %8;\n-                %10 : java.lang.String[][][] = new %3 %6 %9 @\"java.lang.String[][][]::<new>(int, int, int)\";\n-                %11 : Var<java.lang.String[][][]> = var %10 @\"s\";\n+            func @\"test11\" (%0 : java.type:\"NewTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"int\" = var.load %2;\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                %6 : java.type:\"int\" = add %4 %5;\n+                %7 : java.type:\"int\" = var.load %2;\n+                %8 : java.type:\"int\" = constant @\"2\";\n+                %9 : java.type:\"int\" = add %7 %8;\n+                %10 : java.type:\"java.lang.String[][][]\" = new %3 %6 %9 @\"java.lang.String[][][]::(int, int, int)\";\n+                %11 : Var<java.type:\"java.lang.String[][][]\"> = var %10 @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NewTest.java","additions":61,"deletions":61,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-            func @\"test1\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : Var<java.lang.String> = var %1 @\"s\";\n+            func @\"test1\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : Var<java.type:\"java.lang.String\"> = var %1 @\"s\";\n@@ -54,4 +54,4 @@\n-            func @\"test2\" (%0 : NullTest)void -> {\n-                %1 : java.lang.Object = constant @null;\n-                %2 : java.lang.String = cast %1 @\"java.lang.String\";\n-                %3 : Var<java.lang.String> = var %2 @\"s\";\n+            func @\"test2\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.Object\" = constant @null;\n+                %2 : java.type:\"java.lang.String\" = cast %1 @\"java.lang.String\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"s\";\n@@ -67,5 +67,5 @@\n-            func @\"test3\" (%0 : NullTest, %1 : boolean)java.lang.String -> {\n-                %2 : Var<boolean> = var %1 @\"cond\";\n-                %3 : java.lang.String = java.cexpression\n-                    ^cond()boolean -> {\n-                        %4 : boolean = var.load %2;\n+            func @\"test3\" (%0 : java.type:\"NullTest\", %1 : java.type:\"boolean\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : java.type:\"java.lang.String\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = var.load %2;\n@@ -74,2 +74,2 @@\n-                    ^truepart()java.lang.String -> {\n-                        %5 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @null;\n@@ -78,2 +78,2 @@\n-                    ^falsepart()java.lang.String -> {\n-                        %6 : java.lang.String = constant @\"\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -91,5 +91,5 @@\n-            func @\"test4\" (%0 : NullTest, %1 : boolean)java.lang.String -> {\n-                %2 : Var<boolean> = var %1 @\"cond\";\n-                %3 : java.lang.String = java.cexpression\n-                    ^cond()boolean -> {\n-                        %4 : boolean = var.load %2;\n+            func @\"test4\" (%0 : java.type:\"NullTest\", %1 : java.type:\"boolean\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : java.type:\"java.lang.String\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = var.load %2;\n@@ -98,2 +98,2 @@\n-                    ^truepart()java.lang.String -> {\n-                        %5 : java.lang.String = constant @\"\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -102,2 +102,2 @@\n-                    ^falsepart()java.lang.String -> {\n-                        %6 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @null;\n@@ -115,5 +115,5 @@\n-            func @\"test5\" (%0 : NullTest, %1 : boolean)java.lang.String -> {\n-                %2 : Var<boolean> = var %1 @\"cond\";\n-                %3 : java.lang.String = java.cexpression\n-                    ^cond()boolean -> {\n-                        %4 : boolean = var.load %2;\n+            func @\"test5\" (%0 : java.type:\"NullTest\", %1 : java.type:\"boolean\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : java.type:\"java.lang.String\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = var.load %2;\n@@ -122,2 +122,2 @@\n-                    ^truepart()java.lang.String -> {\n-                        %5 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @null;\n@@ -126,2 +126,2 @@\n-                    ^falsepart()java.lang.String -> {\n-                        %6 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @null;\n@@ -139,5 +139,5 @@\n-            func @\"test6\" (%0 : NullTest, %1 : boolean)java.lang.String -> {\n-                %2 : Var<boolean> = var %1 @\"cond\";\n-                %3 : java.lang.Object = java.cexpression\n-                    ^cond()boolean -> {\n-                        %4 : boolean = var.load %2;\n+            func @\"test6\" (%0 : java.type:\"NullTest\", %1 : java.type:\"boolean\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"boolean\"> = var %1 @\"cond\";\n+                %3 : java.type:\"java.lang.Object\" = java.cexpression\n+                    ()java.type:\"boolean\" -> {\n+                        %4 : java.type:\"boolean\" = var.load %2;\n@@ -146,2 +146,2 @@\n-                    ^truepart()java.lang.Object -> {\n-                        %5 : java.lang.Object = constant @null;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = constant @null;\n@@ -150,2 +150,2 @@\n-                    ^falsepart()java.lang.Object -> {\n-                        %6 : java.lang.Object = constant @null;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %6 : java.type:\"java.lang.Object\" = constant @null;\n@@ -154,1 +154,1 @@\n-                %7 : java.lang.String = cast %3 @\"java.lang.String\";\n+                %7 : java.type:\"java.lang.String\" = cast %3 @\"java.lang.String\";\n@@ -164,7 +164,7 @@\n-            func @\"test7\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test7\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -173,2 +173,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @\"\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -177,2 +177,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -181,3 +181,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @null;\n-                        yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @null;\n+                        yield %10;\n@@ -197,7 +197,7 @@\n-            func @\"test8\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test8\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -206,2 +206,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @null;\n@@ -210,2 +210,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -214,3 +214,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @\"\";\n-                        yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"\";\n+                        yield %10;\n@@ -230,7 +230,7 @@\n-            func @\"test9\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test9\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -239,2 +239,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @null;\n@@ -243,2 +243,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -247,3 +247,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @null;\n-                        yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @null;\n+                        yield %10;\n@@ -263,7 +263,7 @@\n-            func @\"test10\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Object = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test10\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Object\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -272,2 +272,2 @@\n-                    ()java.lang.Object -> {\n-                        %8 : java.lang.Object = constant @null;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %8 : java.type:\"java.lang.Object\" = constant @null;\n@@ -276,2 +276,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -280,3 +280,3 @@\n-                    ()java.lang.Object -> {\n-                        %9 : java.lang.Object = constant @null;\n-                        yield %9;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %10 : java.type:\"java.lang.Object\" = constant @null;\n+                        yield %10;\n@@ -284,2 +284,2 @@\n-                %10 : java.lang.String = cast %4 @\"java.lang.String\";\n-                return %10;\n+                %11 : java.type:\"java.lang.String\" = cast %4 @\"java.lang.String\";\n+                return %11;\n@@ -297,7 +297,7 @@\n-            func @\"test11\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test11\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -306,2 +306,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @\"\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -310,2 +310,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -314,3 +314,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @null;\n-                        java.yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @null;\n+                        java.yield %10;\n@@ -330,7 +330,7 @@\n-            func @\"test12\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test12\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -339,2 +339,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @null;\n@@ -343,2 +343,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -347,3 +347,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @\"\";\n-                        java.yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %10;\n@@ -363,7 +363,7 @@\n-            func @\"test13\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.String = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test13\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -372,2 +372,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @null;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @null;\n@@ -376,2 +376,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -380,3 +380,3 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @null;\n-                        java.yield %9;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @null;\n+                        java.yield %10;\n@@ -396,7 +396,7 @@\n-            func @\"test14\" (%0 : NullTest, %1 : int)java.lang.String -> {\n-                %2 : Var<int> = var %1 @\"cond\";\n-                %3 : int = var.load %2;\n-                %4 : java.lang.Object = java.switch.expression %3\n-                    ^constantCaseLabel(%5 : int)boolean -> {\n-                        %6 : int = constant @\"1\";\n-                        %7 : boolean = eq %5 %6;\n+            func @\"test14\" (%0 : java.type:\"NullTest\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"cond\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"java.lang.Object\" = java.switch.expression %3\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n@@ -405,2 +405,2 @@\n-                    ()java.lang.Object -> {\n-                        %8 : java.lang.Object = constant @null;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %8 : java.type:\"java.lang.Object\" = constant @null;\n@@ -409,2 +409,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n@@ -413,3 +413,3 @@\n-                    ()java.lang.Object -> {\n-                        %9 : java.lang.Object = constant @null;\n-                        java.yield %9;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %10 : java.type:\"java.lang.Object\" = constant @null;\n+                        java.yield %10;\n@@ -417,2 +417,2 @@\n-                %10 : java.lang.String = cast %4 @\"java.lang.String\";\n-                return %10;\n+                %11 : java.type:\"java.lang.String\" = cast %4 @\"java.lang.String\";\n+                return %11;\n@@ -430,3 +430,3 @@\n-            func @\"test15\" (%0 : NullTest)java.util.function.Supplier<java.lang.String> -> {\n-                %1 : java.util.function.Supplier<java.lang.String> = lambda ()java.lang.String -> {\n-                    %2 : java.lang.String = constant @null;\n+            func @\"test15\" (%0 : java.type:\"NullTest\")java.type:\"java.util.function.Supplier<java.lang.String>\" -> {\n+                %1 : java.type:\"java.util.function.Supplier<java.lang.String>\" = lambda ()java.type:\"java.lang.String\" -> {\n+                    %2 : java.type:\"java.lang.String\" = constant @null;\n@@ -446,3 +446,3 @@\n-            func @\"test16\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                invoke %1 @invoke.kind=\"STATIC\" @invoke.varargs=\"true\" @\"NullTest::m(java.lang.String, java.lang.String[])void\";\n+            func @\"test16\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                invoke %1 @\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n@@ -458,4 +458,4 @@\n-            func @\"test17\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : java.lang.String[] = constant @null;\n-                invoke %1 %2 @invoke.kind=\"STATIC\" @invoke.varargs=\"false\" @\"NullTest::m(java.lang.String, java.lang.String[])void\";\n+            func @\"test17\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : java.type:\"java.lang.String[]\" = constant @null;\n+                invoke %1 %2 @\"NullTest::m(java.lang.String, java.lang.String[]):void\";\n@@ -471,5 +471,5 @@\n-            func @\"test18\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : java.lang.String = constant @null;\n-                %3 : java.lang.String = constant @null;\n-                invoke %1 %2 %3 @invoke.kind=\"STATIC\" @invoke.varargs=\"true\" @\"NullTest::m(java.lang.String, java.lang.String[])void\";\n+            func @\"test18\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : java.type:\"java.lang.String\" = constant @null;\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                invoke %1 %2 %3 @\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n@@ -489,3 +489,3 @@\n-            func @\"test19\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : NullTest$Box = new %1 @new.varargs=\"true\" @\"NullTest$Box::<new>(java.lang.String, java.lang.String[])\";\n+            func @\"test19\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : java.type:\"NullTest$Box\" = new %1 @\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n@@ -501,4 +501,4 @@\n-            func @\"test20\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : java.lang.String[] = constant @null;\n-                %3 : NullTest$Box = new %1 %2 @\"NullTest$Box::<new>(java.lang.String, java.lang.String[])\";\n+            func @\"test20\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : java.type:\"java.lang.String[]\" = constant @null;\n+                %3 : java.type:\"NullTest$Box\" = new %1 %2 @\"NullTest$Box::(java.lang.String, java.lang.String[])\";\n@@ -514,5 +514,5 @@\n-            func @\"test21\" (%0 : NullTest)void -> {\n-                %1 : java.lang.String = constant @null;\n-                %2 : java.lang.String = constant @null;\n-                %3 : java.lang.String = constant @null;\n-                %4 : NullTest$Box = new %1 %2 %3 @new.varargs=\"true\" @\"NullTest$Box::<new>(java.lang.String, java.lang.String[])\";\n+            func @\"test21\" (%0 : java.type:\"NullTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.String\" = constant @null;\n+                %2 : java.type:\"java.lang.String\" = constant @null;\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                %4 : java.type:\"NullTest$Box\" = new %1 %2 %3 @\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NullTest.java","additions":187,"deletions":187,"binary":false,"changes":374,"status":"modified"},{"patch":"@@ -14,9 +14,9 @@\n-            func @\"f\" (%0 : java.lang.Object)boolean -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.Object = var.load %1;\n-                %3 : java.lang.Integer = constant @null;\n-                %4 : Var<java.lang.Integer> = var %3 @\"i\";\n-                %5 : boolean = pattern.match %2\n-                    ()jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<#T<PatternTest2$R, java.lang.Number>>> -> {\n-                        %6 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                        %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<#T<PatternTest2$R, java.lang.Number>>> = pattern.record %6 @\"(#T<PatternTest2$R, java.lang.Number> n)PatternTest2$R<#T<PatternTest2$R, java.lang.Number>>\";\n+            func @\"f\" (%0 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.Object\" = var.load %1;\n+                %3 : java.type:\"java.lang.Integer\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.Integer\"> = var %3 @\"i\";\n+                %5 : java.type:\"boolean\" = pattern.match %2\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>>\" -> {\n+                        %6 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>>\" = pattern.record %6 @\"(PatternTest2$R::<T extends java.lang.Number> n)PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>\";\n@@ -25,1 +25,1 @@\n-                    (%8 : java.lang.Integer)void -> {\n+                    (%8 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternTest2.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,8 +41,8 @@\n-            func @\"test1\" (%0 : PatternsTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : java.lang.String = constant @null;\n-                %5 : Var<java.lang.String> = var %4 @\"s\";\n-                %6 : boolean = pattern.match %3\n-                    ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                        %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+            func @\"test1\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = constant @null;\n+                %5 : Var<java.type:\"java.lang.String\"> = var %4 @\"s\";\n+                %6 : java.type:\"boolean\" = pattern.match %3\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -51,1 +51,1 @@\n-                    ^match(%8 : java.lang.String)void -> {\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -55,1 +55,1 @@\n-                %9 : Var<boolean> = var %6 @\"x\";\n+                %9 : Var<java.type:\"boolean\"> = var %6 @\"x\";\n@@ -65,4 +65,4 @@\n-            func @\"test2\" (%0 : PatternsTest, %1 : java.lang.Object)java.lang.String -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.String = constant @null;\n-                %4 : Var<java.lang.String> = var %3 @\"s\";\n+            func @\"test2\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"s\";\n@@ -70,5 +70,5 @@\n-                    ()boolean -> {\n-                        %5 : java.lang.Object = var.load %2;\n-                        %6 : boolean = pattern.match %5\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = var.load %2;\n+                        %6 : java.type:\"boolean\" = pattern.match %5\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -77,1 +77,1 @@\n-                            ^match(%8 : java.lang.String)void -> {\n+                            (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -83,2 +83,2 @@\n-                    ^then()void -> {\n-                        %9 : java.lang.String = var.load %4;\n+                    ()java.type:\"void\" -> {\n+                        %9 : java.type:\"java.lang.String\" = var.load %4;\n@@ -87,2 +87,2 @@\n-                    ^else()void -> {\n-                        %10 : java.lang.String = constant @\"\";\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -104,4 +104,4 @@\n-            func @\"test3\" (%0 : PatternsTest, %1 : java.lang.Object)java.lang.String -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.String = constant @null;\n-                %4 : Var<java.lang.String> = var %3 @\"s\";\n+            func @\"test3\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"s\";\n@@ -109,5 +109,5 @@\n-                    ()boolean -> {\n-                        %5 : java.lang.Object = var.load %2;\n-                        %6 : boolean = pattern.match %5\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = var.load %2;\n+                        %6 : java.type:\"boolean\" = pattern.match %5\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -116,1 +116,1 @@\n-                            ^match(%8 : java.lang.String)void -> {\n+                            (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -120,1 +120,1 @@\n-                        %9 : boolean = not %6;\n+                        %9 : java.type:\"boolean\" = not %6;\n@@ -123,2 +123,2 @@\n-                    ^then()void -> {\n-                        %10 : java.lang.String = constant @\"\";\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -127,1 +127,1 @@\n-                    ^else()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -130,1 +130,1 @@\n-                %11 : java.lang.String = var.load %4;\n+                %11 : java.type:\"java.lang.String\" = var.load %4;\n@@ -158,8 +158,8 @@\n-            func @\"test4\" (%0 : PatternsTest, %1 : PatternsTest$Rectangle)void -> {\n-                %2 : Var<PatternsTest$Rectangle> = var %1 @\"r\";\n-                %3 : PatternsTest$ConcretePoint = constant @null;\n-                %4 : Var<PatternsTest$ConcretePoint> = var %3 @\"p\";\n-                %5 : PatternsTest$Color = constant @null;\n-                %6 : Var<PatternsTest$Color> = var %5 @\"c\";\n-                %7 : PatternsTest$ColoredPoint = constant @null;\n-                %8 : Var<PatternsTest$ColoredPoint> = var %7 @\"lr\";\n+            func @\"test4\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"PatternsTest$Rectangle\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"PatternsTest$Rectangle\"> = var %1 @\"r\";\n+                %3 : java.type:\"PatternsTest$ConcretePoint\" = constant @null;\n+                %4 : Var<java.type:\"PatternsTest$ConcretePoint\"> = var %3 @\"p\";\n+                %5 : java.type:\"PatternsTest$Color\" = constant @null;\n+                %6 : Var<java.type:\"PatternsTest$Color\"> = var %5 @\"c\";\n+                %7 : java.type:\"PatternsTest$ColoredPoint\" = constant @null;\n+                %8 : Var<java.type:\"PatternsTest$ColoredPoint\"> = var %7 @\"lr\";\n@@ -167,9 +167,9 @@\n-                    ()boolean -> {\n-                        %9 : PatternsTest$Rectangle = var.load %2;\n-                        %10 : boolean = pattern.match %9\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> -> {\n-                                %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"p\";\n-                                %12 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$Color> = pattern.type @\"c\";\n-                                %13 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$ColoredPoint> = pattern.record %11 %12 @\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n-                                %14 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ColoredPoint> = pattern.type @\"lr\";\n-                                %15 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %13 %14 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"PatternsTest$Rectangle\" = var.load %2;\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint>\" = pattern.type @\"p\";\n+                                %12 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$Color>\" = pattern.type @\"c\";\n+                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$ColoredPoint>\" = pattern.record %11 %12 @\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n+                                %14 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ColoredPoint>\" = pattern.type @\"lr\";\n+                                %15 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %13 %14 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n@@ -178,1 +178,1 @@\n-                            ^match(%16 : PatternsTest$ConcretePoint, %17 : PatternsTest$Color, %18 : PatternsTest$ColoredPoint)void -> {\n+                            (%16 : java.type:\"PatternsTest$ConcretePoint\", %17 : java.type:\"PatternsTest$Color\", %18 : java.type:\"PatternsTest$ColoredPoint\")java.type:\"void\" -> {\n@@ -186,10 +186,10 @@\n-                    ^then()void -> {\n-                        %19 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %20 : PatternsTest$ConcretePoint = var.load %4;\n-                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.Object)void\";\n-                        %21 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %22 : PatternsTest$Color = var.load %6;\n-                        invoke %21 %22 @\"java.io.PrintStream::println(java.lang.Object)void\";\n-                        %23 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %24 : PatternsTest$ColoredPoint = var.load %8;\n-                        invoke %23 %24 @\"java.io.PrintStream::println(java.lang.Object)void\";\n+                    ()java.type:\"void\" -> {\n+                        %19 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %20 : java.type:\"PatternsTest$ConcretePoint\" = var.load %4;\n+                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        %21 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %22 : java.type:\"PatternsTest$Color\" = var.load %6;\n+                        invoke %21 %22 @\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        %23 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %24 : java.type:\"PatternsTest$ColoredPoint\" = var.load %8;\n+                        invoke %23 %24 @\"java.io.PrintStream::println(java.lang.Object):void\";\n@@ -198,4 +198,4 @@\n-                    ^else()void -> {\n-                        %25 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %26 : java.lang.String = constant @\"NO MATCH\";\n-                        invoke %25 %26 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    ()java.type:\"void\" -> {\n+                        %25 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %26 : java.type:\"java.lang.String\" = constant @\"NO MATCH\";\n+                        invoke %25 %26 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -223,4 +223,4 @@\n-            func @\"test5\" (%0 : PatternsTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.String = constant @null;\n-                %4 : Var<java.lang.String> = var %3 @\"s\";\n+            func @\"test5\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"s\";\n@@ -228,5 +228,5 @@\n-                    ^cond()boolean -> {\n-                        %5 : java.lang.Object = var.load %2;\n-                        %6 : boolean = pattern.match %5\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = var.load %2;\n+                        %6 : java.type:\"boolean\" = pattern.match %5\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -235,1 +235,1 @@\n-                            ^match(%8 : java.lang.String)void -> {\n+                            (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -241,4 +241,4 @@\n-                    ^body()void -> {\n-                        %9 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %10 : java.lang.String = var.load %4;\n-                        invoke %9 %10 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    ()java.type:\"void\" -> {\n+                        %9 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %10 : java.type:\"java.lang.String\" = var.load %4;\n+                        invoke %9 %10 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -258,4 +258,4 @@\n-            func @\"test6\" (%0 : PatternsTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.String = constant @null;\n-                %4 : Var<java.lang.String> = var %3 @\"s\";\n+            func @\"test6\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.String\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.String\"> = var %3 @\"s\";\n@@ -263,1 +263,1 @@\n-                    ^body()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -266,5 +266,5 @@\n-                    ^cond()boolean -> {\n-                        %5 : java.lang.Object = var.load %2;\n-                        %6 : boolean = pattern.match %5\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = var.load %2;\n+                        %6 : java.type:\"boolean\" = pattern.match %5\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -273,1 +273,1 @@\n-                            ^match(%8 : java.lang.String)void -> {\n+                            (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -277,1 +277,1 @@\n-                        %9 : boolean = not %6;\n+                        %9 : java.type:\"boolean\" = not %6;\n@@ -280,3 +280,3 @@\n-                %10 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                %11 : java.lang.String = var.load %4;\n-                invoke %10 %11 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                %10 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %11 : java.type:\"java.lang.String\" = var.load %4;\n+                invoke %10 %11 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -295,4 +295,4 @@\n-            func @\"test7\" (%0 : PatternsTest, %1 : java.lang.Object)void -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Number = constant @null;\n-                %4 : Var<java.lang.Number> = var %3 @\"n\";\n+            func @\"test7\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Number\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.Number\"> = var %3 @\"n\";\n@@ -300,3 +300,3 @@\n-                    ^init()Var<int> -> {\n-                        %5 : int = constant @\"0\";\n-                        %6 : Var<int> = var %5 @\"i\";\n+                    ()Var<java.type:\"int\"> -> {\n+                        %5 : java.type:\"int\" = constant @\"0\";\n+                        %6 : Var<java.type:\"int\"> = var %5 @\"i\";\n@@ -305,6 +305,6 @@\n-                    ^cond(%7 : Var<int>)boolean -> {\n-                        %8 : boolean = java.cand\n-                            ()boolean -> {\n-                                %9 : int = var.load %7;\n-                                %10 : int = constant @\"10\";\n-                                %11 : boolean = lt %9 %10;\n+                    (%7 : Var<java.type:\"int\">)java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %9 : java.type:\"int\" = var.load %7;\n+                                %10 : java.type:\"int\" = constant @\"10\";\n+                                %11 : java.type:\"boolean\" = lt %9 %10;\n@@ -313,5 +313,5 @@\n-                            ()boolean -> {\n-                                %12 : java.lang.Object = var.load %2;\n-                                %13 : boolean = pattern.match %12\n-                                    ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n-                                        %14 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n+                            ()java.type:\"boolean\" -> {\n+                                %12 : java.type:\"java.lang.Object\" = var.load %2;\n+                                %13 : java.type:\"boolean\" = pattern.match %12\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" -> {\n+                                        %14 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n@@ -320,1 +320,1 @@\n-                                    ^match(%15 : java.lang.Number)void -> {\n+                                    (%15 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -328,5 +328,5 @@\n-                    ^update(%16 : Var<int>)void -> {\n-                        %17 : int = var.load %16;\n-                        %18 : java.lang.Number = var.load %4;\n-                        %19 : int = invoke %18 @\"java.lang.Number::intValue()int\";\n-                        %20 : int = add %17 %19;\n+                    (%16 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %17 : java.type:\"int\" = var.load %16;\n+                        %18 : java.type:\"java.lang.Number\" = var.load %4;\n+                        %19 : java.type:\"int\" = invoke %18 @\"java.lang.Number::intValue():int\";\n+                        %20 : java.type:\"int\" = add %17 %19;\n@@ -336,4 +336,4 @@\n-                    ^body(%21 : Var<int>)void -> {\n-                        %22 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %23 : java.lang.Number = var.load %4;\n-                        invoke %22 %23 @\"java.io.PrintStream::println(java.lang.Object)void\";\n+                    (%21 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                        %22 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %23 : java.type:\"java.lang.Number\" = var.load %4;\n+                        invoke %22 %23 @\"java.io.PrintStream::println(java.lang.Object):void\";\n@@ -353,15 +353,15 @@\n-            func @\"test8\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n-                   %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                   %3 : java.lang.Object = var.load %2;\n-                   %4 : java.lang.String = constant @null;\n-                   %5 : Var<java.lang.String> = var %4;\n-                   %6 : boolean = pattern.match %3\n-                       ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                           %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type;\n-                           yield %7;\n-                       }\n-                       (%8 : java.lang.String)void -> {\n-                           var.store %5 %8;\n-                           yield;\n-                       };\n-                   return %6;\n+            func @\"test8\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"java.lang.String\" = constant @null;\n+                %5 : Var<java.type:\"java.lang.String\"> = var %4;\n+                %6 : java.type:\"boolean\" = pattern.match %3\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type;\n+                        yield %7;\n+                    }\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                        var.store %5 %8;\n+                        yield;\n+                    };\n+                return %6;\n@@ -376,10 +376,10 @@\n-            func @\"test9\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : PatternsTest$ConcretePoint = constant @null;\n-                %5 : Var<PatternsTest$ConcretePoint> = var %4 @\"cp\";\n-                %6 : boolean = pattern.match %3\n-                    ()jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> -> {\n-                        %7 : jdk.incubator.code.op.ExtendedOp$Pattern$MatchAll = pattern.match.all;\n-                        %8 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"cp\";\n-                        %9 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+            func @\"test9\" (%0 : java.type:\"PatternsTest\", %1 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                %2 : Var<java.type:\"java.lang.Object\"> = var %1 @\"o\";\n+                %3 : java.type:\"java.lang.Object\" = var.load %2;\n+                %4 : java.type:\"PatternsTest$ConcretePoint\" = constant @null;\n+                %5 : Var<java.type:\"PatternsTest$ConcretePoint\"> = var %4 @\"cp\";\n+                %6 : java.type:\"boolean\" = pattern.match %3\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" -> {\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$MatchAll\" = pattern.match.all;\n+                        %8 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint>\" = pattern.type @\"cp\";\n+                        %9 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n@@ -388,1 +388,1 @@\n-                    (%10 : PatternsTest$ConcretePoint)void -> {\n+                    (%10 : java.type:\"PatternsTest$ConcretePoint\")java.type:\"void\" -> {\n@@ -401,17 +401,17 @@\n-            func @\"test10\" (%0 : int)boolean -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  %2 : int = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : byte = conv %3;\n-                  %5 : Var<byte> = var %4 @\"b\";\n-                  %6 : boolean = pattern.match %2\n-                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte> -> {\n-                          %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte> = pattern.type @\"b\";\n-                          yield %7;\n-                      }\n-                      (%8 : byte)void -> {\n-                          var.store %5 %8;\n-                          yield;\n-                      };\n-                  return %6;\n-              };\n+            func @\"test10\" (%0 : java.type:\"int\")java.type:\"boolean\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"byte\" = conv %3;\n+                %5 : Var<java.type:\"byte\"> = var %4 @\"b\";\n+                %6 : java.type:\"boolean\" = pattern.match %2\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte>\" -> {\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte>\" = pattern.type @\"b\";\n+                        yield %7;\n+                    }\n+                    (%8 : java.type:\"byte\")java.type:\"void\" -> {\n+                        var.store %5 %8;\n+                        yield;\n+                    };\n+                return %6;\n+            };\n@@ -425,17 +425,17 @@\n-            func @\"test11\" (%0 : int)boolean -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  %2 : int = var.load %1;\n-                  %3 : int = constant @\"0\";\n-                  %4 : short = conv %3;\n-                  %5 : Var<short> = var %4 @\"s\";\n-                  %6 : boolean = pattern.match %2\n-                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<short> -> {\n-                          %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<short> = pattern.type @\"s\";\n-                          yield %7;\n-                      }\n-                      (%8 : short)void -> {\n-                          var.store %5 %8;\n-                          yield;\n-                      };\n-                  return %6;\n-              };\n+            func @\"test11\" (%0 : java.type:\"int\")java.type:\"boolean\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : java.type:\"short\" = conv %3;\n+                %5 : Var<java.type:\"short\"> = var %4 @\"s\";\n+                %6 : java.type:\"boolean\" = pattern.match %2\n+                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<short>\" -> {\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<short>\" = pattern.type @\"s\";\n+                        yield %7;\n+                    }\n+                    (%8 : java.type:\"short\")java.type:\"void\" -> {\n+                        var.store %5 %8;\n+                        yield;\n+                    };\n+                return %6;\n+            };\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":188,"deletions":188,"binary":false,"changes":376,"status":"modified"},{"patch":"@@ -39,22 +39,22 @@\n-            func @\"testFromDouble\" (%0 : PrimitiveCastTest, %1 : double)void -> {\n-                %2 : Var<double> = var %1 @\"v\";\n-                %3 : double = var.load %2;\n-                %4 : Var<double> = var %3 @\"d\";\n-                %5 : double = var.load %2;\n-                %6 : float = conv %5;\n-                %7 : Var<float> = var %6 @\"f\";\n-                %8 : double = var.load %2;\n-                %9 : long = conv %8;\n-                %10 : Var<long> = var %9 @\"l\";\n-                %11 : double = var.load %2;\n-                %12 : int = conv %11;\n-                %13 : Var<int> = var %12 @\"i\";\n-                %14 : double = var.load %2;\n-                %15 : short = conv %14;\n-                %16 : Var<short> = var %15 @\"s\";\n-                %17 : double = var.load %2;\n-                %18 : char = conv %17;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : double = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromDouble\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"double\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"double\"> = var %1 @\"v\";\n+                %3 : java.type:\"double\" = var.load %2;\n+                %4 : Var<java.type:\"double\"> = var %3 @\"d\";\n+                %5 : java.type:\"double\" = var.load %2;\n+                %6 : java.type:\"float\" = conv %5;\n+                %7 : Var<java.type:\"float\"> = var %6 @\"f\";\n+                %8 : java.type:\"double\" = var.load %2;\n+                %9 : java.type:\"long\" = conv %8;\n+                %10 : Var<java.type:\"long\"> = var %9 @\"l\";\n+                %11 : java.type:\"double\" = var.load %2;\n+                %12 : java.type:\"int\" = conv %11;\n+                %13 : Var<java.type:\"int\"> = var %12 @\"i\";\n+                %14 : java.type:\"double\" = var.load %2;\n+                %15 : java.type:\"short\" = conv %14;\n+                %16 : Var<java.type:\"short\"> = var %15 @\"s\";\n+                %17 : java.type:\"double\" = var.load %2;\n+                %18 : java.type:\"char\" = conv %17;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"double\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -77,22 +77,22 @@\n-            func @\"testFromFloat\" (%0 : PrimitiveCastTest, %1 : float)void -> {\n-                %2 : Var<float> = var %1 @\"v\";\n-                %3 : float = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : float = var.load %2;\n-                %7 : Var<float> = var %6 @\"f\";\n-                %8 : float = var.load %2;\n-                %9 : long = conv %8;\n-                %10 : Var<long> = var %9 @\"l\";\n-                %11 : float = var.load %2;\n-                %12 : int = conv %11;\n-                %13 : Var<int> = var %12 @\"i\";\n-                %14 : float = var.load %2;\n-                %15 : short = conv %14;\n-                %16 : Var<short> = var %15 @\"s\";\n-                %17 : float = var.load %2;\n-                %18 : char = conv %17;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : float = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromFloat\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"float\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"float\"> = var %1 @\"v\";\n+                %3 : java.type:\"float\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"float\" = var.load %2;\n+                %7 : Var<java.type:\"float\"> = var %6 @\"f\";\n+                %8 : java.type:\"float\" = var.load %2;\n+                %9 : java.type:\"long\" = conv %8;\n+                %10 : Var<java.type:\"long\"> = var %9 @\"l\";\n+                %11 : java.type:\"float\" = var.load %2;\n+                %12 : java.type:\"int\" = conv %11;\n+                %13 : Var<java.type:\"int\"> = var %12 @\"i\";\n+                %14 : java.type:\"float\" = var.load %2;\n+                %15 : java.type:\"short\" = conv %14;\n+                %16 : Var<java.type:\"short\"> = var %15 @\"s\";\n+                %17 : java.type:\"float\" = var.load %2;\n+                %18 : java.type:\"char\" = conv %17;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"float\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -115,22 +115,22 @@\n-            func @\"testFromLong\" (%0 : PrimitiveCastTest, %1 : long)void -> {\n-                %2 : Var<long> = var %1 @\"v\";\n-                %3 : long = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : long = var.load %2;\n-                %7 : float = conv %6;\n-                %8 : Var<float> = var %7 @\"f\";\n-                %9 : long = var.load %2;\n-                %10 : Var<long> = var %9 @\"l\";\n-                %11 : long = var.load %2;\n-                %12 : int = conv %11;\n-                %13 : Var<int> = var %12 @\"i\";\n-                %14 : long = var.load %2;\n-                %15 : short = conv %14;\n-                %16 : Var<short> = var %15 @\"s\";\n-                %17 : long = var.load %2;\n-                %18 : char = conv %17;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : long = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromLong\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"long\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"long\"> = var %1 @\"v\";\n+                %3 : java.type:\"long\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"long\" = var.load %2;\n+                %7 : java.type:\"float\" = conv %6;\n+                %8 : Var<java.type:\"float\"> = var %7 @\"f\";\n+                %9 : java.type:\"long\" = var.load %2;\n+                %10 : Var<java.type:\"long\"> = var %9 @\"l\";\n+                %11 : java.type:\"long\" = var.load %2;\n+                %12 : java.type:\"int\" = conv %11;\n+                %13 : Var<java.type:\"int\"> = var %12 @\"i\";\n+                %14 : java.type:\"long\" = var.load %2;\n+                %15 : java.type:\"short\" = conv %14;\n+                %16 : Var<java.type:\"short\"> = var %15 @\"s\";\n+                %17 : java.type:\"long\" = var.load %2;\n+                %18 : java.type:\"char\" = conv %17;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"long\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -153,22 +153,22 @@\n-            func @\"testFromInt\" (%0 : PrimitiveCastTest, %1 : int)void -> {\n-                %2 : Var<int> = var %1 @\"v\";\n-                %3 : int = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : int = var.load %2;\n-                %7 : float = conv %6;\n-                %8 : Var<float> = var %7 @\"f\";\n-                %9 : int = var.load %2;\n-                %10 : long = conv %9;\n-                %11 : Var<long> = var %10 @\"l\";\n-                %12 : int = var.load %2;\n-                %13 : Var<int> = var %12 @\"i\";\n-                %14 : int = var.load %2;\n-                %15 : short = conv %14;\n-                %16 : Var<short> = var %15 @\"s\";\n-                %17 : int = var.load %2;\n-                %18 : char = conv %17;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : int = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromInt\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"int\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"v\";\n+                %3 : java.type:\"int\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"int\" = var.load %2;\n+                %7 : java.type:\"float\" = conv %6;\n+                %8 : Var<java.type:\"float\"> = var %7 @\"f\";\n+                %9 : java.type:\"int\" = var.load %2;\n+                %10 : java.type:\"long\" = conv %9;\n+                %11 : Var<java.type:\"long\"> = var %10 @\"l\";\n+                %12 : java.type:\"int\" = var.load %2;\n+                %13 : Var<java.type:\"int\"> = var %12 @\"i\";\n+                %14 : java.type:\"int\" = var.load %2;\n+                %15 : java.type:\"short\" = conv %14;\n+                %16 : Var<java.type:\"short\"> = var %15 @\"s\";\n+                %17 : java.type:\"int\" = var.load %2;\n+                %18 : java.type:\"char\" = conv %17;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"int\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -191,22 +191,22 @@\n-            func @\"testFromShort\" (%0 : PrimitiveCastTest, %1 : short)void -> {\n-                %2 : Var<short> = var %1 @\"v\";\n-                %3 : short = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : short = var.load %2;\n-                %7 : float = conv %6;\n-                %8 : Var<float> = var %7 @\"f\";\n-                %9 : short = var.load %2;\n-                %10 : long = conv %9;\n-                %11 : Var<long> = var %10 @\"l\";\n-                %12 : short = var.load %2;\n-                %13 : int = conv %12;\n-                %14 : Var<int> = var %13 @\"i\";\n-                %15 : short = var.load %2;\n-                %16 : Var<short> = var %15 @\"s\";\n-                %17 : short = var.load %2;\n-                %18 : char = conv %17;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : short = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromShort\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"short\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"short\"> = var %1 @\"v\";\n+                %3 : java.type:\"short\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"short\" = var.load %2;\n+                %7 : java.type:\"float\" = conv %6;\n+                %8 : Var<java.type:\"float\"> = var %7 @\"f\";\n+                %9 : java.type:\"short\" = var.load %2;\n+                %10 : java.type:\"long\" = conv %9;\n+                %11 : Var<java.type:\"long\"> = var %10 @\"l\";\n+                %12 : java.type:\"short\" = var.load %2;\n+                %13 : java.type:\"int\" = conv %12;\n+                %14 : Var<java.type:\"int\"> = var %13 @\"i\";\n+                %15 : java.type:\"short\" = var.load %2;\n+                %16 : Var<java.type:\"short\"> = var %15 @\"s\";\n+                %17 : java.type:\"short\" = var.load %2;\n+                %18 : java.type:\"char\" = conv %17;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"short\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -229,22 +229,22 @@\n-            func @\"testFromChar\" (%0 : PrimitiveCastTest, %1 : char)void -> {\n-                %2 : Var<char> = var %1 @\"v\";\n-                %3 : char = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : char = var.load %2;\n-                %7 : float = conv %6;\n-                %8 : Var<float> = var %7 @\"f\";\n-                %9 : char = var.load %2;\n-                %10 : long = conv %9;\n-                %11 : Var<long> = var %10 @\"l\";\n-                %12 : char = var.load %2;\n-                %13 : int = conv %12;\n-                %14 : Var<int> = var %13 @\"i\";\n-                %15 : char = var.load %2;\n-                %16 : short = conv %15;\n-                %17 : Var<short> = var %16 @\"s\";\n-                %18 : char = var.load %2;\n-                %19 : Var<char> = var %18 @\"c\";\n-                %20 : char = var.load %2;\n-                %21 : byte = conv %20;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromChar\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"char\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"char\"> = var %1 @\"v\";\n+                %3 : java.type:\"char\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"char\" = var.load %2;\n+                %7 : java.type:\"float\" = conv %6;\n+                %8 : Var<java.type:\"float\"> = var %7 @\"f\";\n+                %9 : java.type:\"char\" = var.load %2;\n+                %10 : java.type:\"long\" = conv %9;\n+                %11 : Var<java.type:\"long\"> = var %10 @\"l\";\n+                %12 : java.type:\"char\" = var.load %2;\n+                %13 : java.type:\"int\" = conv %12;\n+                %14 : Var<java.type:\"int\"> = var %13 @\"i\";\n+                %15 : java.type:\"char\" = var.load %2;\n+                %16 : java.type:\"short\" = conv %15;\n+                %17 : Var<java.type:\"short\"> = var %16 @\"s\";\n+                %18 : java.type:\"char\" = var.load %2;\n+                %19 : Var<java.type:\"char\"> = var %18 @\"c\";\n+                %20 : java.type:\"char\" = var.load %2;\n+                %21 : java.type:\"byte\" = conv %20;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n@@ -267,22 +267,22 @@\n-            func @\"testFromByte\" (%0 : PrimitiveCastTest, %1 : byte)void -> {\n-                %2 : Var<byte> = var %1 @\"v\";\n-                %3 : byte = var.load %2;\n-                %4 : double = conv %3;\n-                %5 : Var<double> = var %4 @\"d\";\n-                %6 : byte = var.load %2;\n-                %7 : float = conv %6;\n-                %8 : Var<float> = var %7 @\"f\";\n-                %9 : byte = var.load %2;\n-                %10 : long = conv %9;\n-                %11 : Var<long> = var %10 @\"l\";\n-                %12 : byte = var.load %2;\n-                %13 : int = conv %12;\n-                %14 : Var<int> = var %13 @\"i\";\n-                %15 : byte = var.load %2;\n-                %16 : short = conv %15;\n-                %17 : Var<short> = var %16 @\"s\";\n-                %18 : byte = var.load %2;\n-                %19 : char = conv %18;\n-                %20 : Var<char> = var %19 @\"c\";\n-                %21 : byte = var.load %2;\n-                %22 : Var<byte> = var %21 @\"b\";\n+            func @\"testFromByte\" (%0 : java.type:\"PrimitiveCastTest\", %1 : java.type:\"byte\")java.type:\"void\" -> {\n+                %2 : Var<java.type:\"byte\"> = var %1 @\"v\";\n+                %3 : java.type:\"byte\" = var.load %2;\n+                %4 : java.type:\"double\" = conv %3;\n+                %5 : Var<java.type:\"double\"> = var %4 @\"d\";\n+                %6 : java.type:\"byte\" = var.load %2;\n+                %7 : java.type:\"float\" = conv %6;\n+                %8 : Var<java.type:\"float\"> = var %7 @\"f\";\n+                %9 : java.type:\"byte\" = var.load %2;\n+                %10 : java.type:\"long\" = conv %9;\n+                %11 : Var<java.type:\"long\"> = var %10 @\"l\";\n+                %12 : java.type:\"byte\" = var.load %2;\n+                %13 : java.type:\"int\" = conv %12;\n+                %14 : Var<java.type:\"int\"> = var %13 @\"i\";\n+                %15 : java.type:\"byte\" = var.load %2;\n+                %16 : java.type:\"short\" = conv %15;\n+                %17 : Var<java.type:\"short\"> = var %16 @\"s\";\n+                %18 : java.type:\"byte\" = var.load %2;\n+                %19 : java.type:\"char\" = conv %18;\n+                %20 : Var<java.type:\"char\"> = var %19 @\"c\";\n+                %21 : java.type:\"byte\" = var.load %2;\n+                %22 : Var<java.type:\"byte\"> = var %21 @\"b\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/PrimitiveCastTest.java","additions":154,"deletions":154,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -42,5 +42,5 @@\n-            func @\"f\" ()void -> {\n-                  %0 : jdk.incubator.code.Quotable = lambda ()void -> {\n-                      return;\n-                  };\n-                  return;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                    return;\n+                };\n+                return;\n@@ -53,4 +53,4 @@\n-            func @\"f\" ()void -> {\n-                %0 : jdk.incubator.code.Quotable = lambda ()int -> {\n-                    %2 : int = constant @\"1\";\n-                    return %2;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"int\" -> {\n+                    %1 : java.type:\"int\" = constant @\"1\";\n+                    return %1;\n@@ -64,7 +64,7 @@\n-            func @\"f\" ()void -> {\n-                  %0 : jdk.incubator.code.Quotable = lambda (%1 : int)int -> {\n-                      %2 : Var<int> = var %1 @\"x\";\n-                      %3 : int = var.load %2;\n-                      return %3;\n-                  };\n-                  return;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    return %3;\n+                };\n+                return;\n@@ -76,7 +76,7 @@\n-            func @\"f\" ()void -> {\n-                %0 : jdk.incubator.code.Quotable = lambda (%1 : int, %2 : int)int -> {\n-                    %3 : Var<int> = var %1 @\"x\";\n-                    %4 : Var<int> = var %2 @\"y\";\n-                    %5 : int = var.load %3;\n-                    %6 : int = var.load %4;\n-                    %7 : int = add %5 %6;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %4 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = var.load %4;\n+                    %7 : java.type:\"int\" = add %5 %6;\n@@ -91,3 +91,3 @@\n-            func @\"f\" ()void -> {\n-                %0 : jdk.incubator.code.Quotable = lambda ()void -> {\n-                    %1 : java.lang.AssertionError = new @\"java.lang.AssertionError::<new>()\";\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n@@ -104,7 +104,7 @@\n-            func @\"f\" (%1 : Var<int>)void -> {\n-                %2 : jdk.incubator.code.Quotable = lambda (%4 : int)int -> {\n-                    %5 : Var<int> = var %4 @\"y\";\n-                    %6 : int = var.load %1;\n-                    %7 : int = var.load %5;\n-                    %8 : int = add %6 %7;\n-                    return %8;\n+            func @\"f\" (%0 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %4 : java.type:\"int\" = var.load %0;\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    return %6;\n@@ -130,9 +130,9 @@\n-            func @\"f\" (%0 : QuotableIntersectionTest$Context)void -> {\n-                %1 : jdk.incubator.code.Quotable = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"z\";\n-                    %5 : int = field.load %0 @\"QuotableIntersectionTest$Context::x()int\";\n-                    %6 : int = field.load %0 @\"QuotableIntersectionTest$Context::y()int\";\n-                    %7 : int = add %5 %6;\n-                    %8 : int = var.load %4;\n-                    %9 : int = add %7 %8;\n-                    return %9;\n+            func @\"f\" (%0 : java.type:\"QuotableIntersectionTest$Context\")java.type:\"void\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"z\";\n+                    %4 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest$Context::y:int\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    %7 : java.type:\"int\" = var.load %3;\n+                    %8 : java.type:\"int\" = add %6 %7;\n+                    return %8;\n@@ -147,7 +147,7 @@\n-            func @\"captureParam\" (%0 : int)void -> {\n-                %1 : Var<int> = var %0 @\"x\";\n-                %2 : java.util.function.IntUnaryOperator = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"y\";\n-                    %5 : int = var.load %1;\n-                    %6 : int = var.load %4;\n-                    %7 : int = add %5 %6;\n+            func @\"captureParam\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"x\";\n+                %2 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%3 : java.type:\"int\")java.type:\"int\" -> {\n+                    %4 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                    %5 : java.type:\"int\" = var.load %1;\n+                    %6 : java.type:\"int\" = var.load %4;\n+                    %7 : java.type:\"int\" = add %5 %6;\n@@ -156,1 +156,1 @@\n-                %8 : Var<java.util.function.IntUnaryOperator> = var %2 @\"op\";\n+                %8 : Var<java.type:\"java.util.function.IntUnaryOperator\"> = var %2 @\"op\";\n@@ -168,8 +168,8 @@\n-            func @\"captureField\" (%0 : QuotableIntersectionTest)void -> {\n-                %1 : java.util.function.IntUnaryOperator = lambda (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"z\";\n-                    %4 : int = field.load %0 @\"QuotableIntersectionTest::x()int\";\n-                    %5 : int = field.load %0 @\"QuotableIntersectionTest::y()int\";\n-                    %6 : int = add %4 %5;\n-                    %7 : int = var.load %3;\n-                    %8 : int = add %6 %7;\n+            func @\"captureField\" (%0 : java.type:\"QuotableIntersectionTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"z\";\n+                    %4 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest::y:int\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    %7 : java.type:\"int\" = var.load %3;\n+                    %8 : java.type:\"int\" = add %6 %7;\n@@ -178,1 +178,1 @@\n-                %9 : Var<java.util.function.IntUnaryOperator> = var %1 @\"op\";\n+                %9 : Var<java.type:\"java.util.function.IntUnaryOperator\"> = var %1 @\"op\";\n@@ -190,6 +190,6 @@\n-            func @\"f\" ()void -> {\n-                  %0 : jdk.incubator.code.Quotable = lambda ()void -> {\n-                      invoke @\"QuotableIntersectionTest::m()void\";\n-                      return;\n-                  };\n-                  return;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                    invoke @\"QuotableIntersectionTest::m():void\";\n+                    return;\n+                };\n+                return;\n@@ -205,8 +205,8 @@\n-            func @\"f\" ()void -> {\n-                  %0 : jdk.incubator.code.Quotable = lambda (%1 : int)int -> {\n-                      %2 : Var<int> = var %1 @\"x$0\";\n-                      %3 : int = var.load %2;\n-                      %4 : int = invoke %3 @\"QuotableIntersectionTest::g(int)int\";\n-                      return %4;\n-                  };\n-                  return;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x$0\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    %4 : java.type:\"int\" = invoke %3 @\"QuotableIntersectionTest::g(int):int\";\n+                    return %4;\n+                };\n+                return;\n@@ -218,5 +218,5 @@\n-            func @\"f\" ()void -> {\n-                %0 : jdk.incubator.code.Quotable = lambda (%1 : int)int[] -> {\n-                    %2 : Var<int> = var %1 @\"x$0\";\n-                    %3 : int = var.load %2;\n-                    %4 : int[] = new %3 @\"int[]::<new>(int)\";\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x$0\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    %4 : java.type:\"int[]\" = new %3 @\"int[]::(int)\";\n@@ -241,6 +241,6 @@\n-            func @\"f\" (%0 : QuotableIntersectionTest$ContextRef)void -> {\n-                %1 : jdk.incubator.code.Quotable = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"x$0\";\n-                    %5 : int = var.load %4;\n-                    %6 : int = invoke %0 %5 @\"QuotableIntersectionTest$ContextRef::g(int)int\";\n-                    return %6;\n+            func @\"f\" (%0 : java.type:\"QuotableIntersectionTest$ContextRef\")java.type:\"void\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"int\" = var.load %3;\n+                    %5 : java.type:\"int\" = invoke %0 %4 @\"QuotableIntersectionTest$ContextRef::g(int):int\";\n+                    return %5;\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableIntersectionTest.java","additions":84,"deletions":84,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableRunnable = lambda ()void -> {\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n@@ -57,4 +57,4 @@\n-           func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntSupplier = lambda ()int -> {\n-                    %2 : int = constant @\"1\";\n-                    return %2;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntSupplier\" = lambda ()java.type:\"int\" -> {\n+                    %1 : java.type:\"int\" = constant @\"1\";\n+                    return %1;\n@@ -63,1 +63,1 @@\n-           };\n+            };\n@@ -70,5 +70,5 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"x\";\n-                    %4 : int = var.load %3;\n-                    return %4;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    return %3;\n@@ -84,8 +84,8 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntBinaryOperator = lambda (%2 : int, %3 : int)int -> {\n-                    %4 : Var<int> = var %2 @\"x\";\n-                    %5 : Var<int> = var %3 @\"y\";\n-                    %6 : int = var.load %4;\n-                    %7 : int = var.load %5;\n-                    %8 : int = add %6 %7;\n-                    return %8;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntBinaryOperator\" = lambda (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %4 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = var.load %4;\n+                    %7 : java.type:\"int\" = add %5 %6;\n+                    return %7;\n@@ -98,4 +98,4 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableRunnable = lambda ()void -> {\n-                    %2 : java.lang.AssertionError = new @\"java.lang.AssertionError::<new>()\";\n-                    throw %2;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n+                    throw %1;\n@@ -109,7 +109,7 @@\n-            func @\"f\" (%1 : Var<int>)void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%4 : int)int -> {\n-                    %5 : Var<int> = var %4 @\"y\";\n-                    %6 : int = var.load %1;\n-                    %7 : int = var.load %5;\n-                    %8 : int = add %6 %7;\n-                    return %8;\n+            func @\"f\" (%0 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %4 : java.type:\"int\" = var.load %0;\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    return %6;\n@@ -135,9 +135,9 @@\n-            func @\"f\" (%0 : QuotableSubtypeTest$Context)void -> {\n-                %1 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"z\";\n-                    %5 : int = field.load %0 @\"QuotableSubtypeTest$Context::x()int\";\n-                    %6 : int = field.load %0 @\"QuotableSubtypeTest$Context::y()int\";\n-                    %7 : int = add %5 %6;\n-                    %8 : int = var.load %4;\n-                    %9 : int = add %7 %8;\n-                    return %9;\n+            func @\"f\" (%0 : java.type:\"QuotableSubtypeTest$Context\")java.type:\"void\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"z\";\n+                    %4 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest$Context::y:int\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    %7 : java.type:\"int\" = var.load %3;\n+                    %8 : java.type:\"int\" = add %6 %7;\n+                    return %8;\n@@ -152,7 +152,7 @@\n-            func @\"captureParam\" (%0 : int)void -> {\n-                %1 : Var<int> = var %0 @\"x\";\n-                %2 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"y\";\n-                    %5 : int = var.load %1;\n-                    %6 : int = var.load %4;\n-                    %7 : int = add %5 %6;\n+            func @\"captureParam\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"x\";\n+                %2 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%3 : java.type:\"int\")java.type:\"int\" -> {\n+                    %4 : Var<java.type:\"int\"> = var %3 @\"y\";\n+                    %5 : java.type:\"int\" = var.load %1;\n+                    %6 : java.type:\"int\" = var.load %4;\n+                    %7 : java.type:\"int\" = add %5 %6;\n@@ -161,1 +161,1 @@\n-                %8 : Var<QuotableSubtypeTest$QuotableIntUnaryOperator> = var %2 @\"op\";\n+                %8 : Var<java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\"> = var %2 @\"op\";\n@@ -173,8 +173,8 @@\n-            func @\"captureField\" (%0 : QuotableSubtypeTest)void -> {\n-                %1 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"z\";\n-                    %4 : int = field.load %0 @\"QuotableSubtypeTest::x()int\";\n-                    %5 : int = field.load %0 @\"QuotableSubtypeTest::y()int\";\n-                    %6 : int = add %4 %5;\n-                    %7 : int = var.load %3;\n-                    %8 : int = add %6 %7;\n+            func @\"captureField\" (%0 : java.type:\"QuotableSubtypeTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"z\";\n+                    %4 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest::y:int\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    %7 : java.type:\"int\" = var.load %3;\n+                    %8 : java.type:\"int\" = add %6 %7;\n@@ -183,1 +183,1 @@\n-                %9 : Var<QuotableSubtypeTest$QuotableIntUnaryOperator> = var %1 @\"op\";\n+                %9 : Var<java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\"> = var %1 @\"op\";\n@@ -194,3 +194,3 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableRunnable = lambda ()void -> {\n-                    invoke @\"QuotableSubtypeTest::m()void\";\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                    invoke @\"QuotableSubtypeTest::m():void\";\n@@ -207,6 +207,6 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"x$0\";\n-                    %4 : int = var.load %3;\n-                    %5 : int = invoke %4 @\"QuotableSubtypeTest::g(int)int\";\n-                    return %5;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x$0\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    %4 : java.type:\"int\" = invoke %3 @\"QuotableSubtypeTest::g(int):int\";\n+                    return %4;\n@@ -222,6 +222,6 @@\n-            func @\"f\" ()void -> {\n-                %0 : QuotableSubtypeTest$QuotableIntFunction<int[]> = lambda (%2 : int)int[] -> {\n-                    %3 : Var<int> = var %2 @\"x$0\";\n-                    %4 : int = var.load %3;\n-                    %5 : int[] = new %4 @\"int[]::<new>(int)\";\n-                    return %5;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntFunction<int[]>\" = lambda (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x$0\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    %4 : java.type:\"int[]\" = new %3 @\"int[]::(int)\";\n+                    return %4;\n@@ -243,6 +243,6 @@\n-            func @\"f\" (%0 : QuotableSubtypeTest$ContextRef)void -> {\n-                %1 : QuotableSubtypeTest$QuotableIntUnaryOperator = lambda (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"x$0\";\n-                    %5 : int = var.load %4;\n-                    %6 : int = invoke %0 %5 @\"QuotableSubtypeTest$ContextRef::g(int)int\";\n-                    return %6;\n+            func @\"f\" (%0 : java.type:\"QuotableSubtypeTest$ContextRef\")java.type:\"void\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"x$0\";\n+                    %4 : java.type:\"int\" = var.load %3;\n+                    %5 : java.type:\"int\" = invoke %0 %4 @\"QuotableSubtypeTest$ContextRef::g(int):int\";\n+                    return %5;\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableSubtypeTest.java","additions":78,"deletions":78,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-            func @\"f\" ()void -> {\n-                 %0 : func<void> = closure ()void -> {\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"void\"> = closure ()java.type:\"void\" -> {\n@@ -49,4 +49,4 @@\n-            func @\"f\" ()void -> {\n-                %0 : func<int> = closure ()int -> {\n-                    %2 : int = constant @\"1\";\n-                    return %2;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"int\"> = closure ()java.type:\"int\" -> {\n+                    %1 : java.type:\"int\" = constant @\"1\";\n+                    return %1;\n@@ -60,5 +60,5 @@\n-            func @\"f\" ()void -> {\n-                %0 : func<int, int> = closure (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"x\";\n-                    %4 : int = var.load %3;\n-                    return %4;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"int\", java.type:\"int\"> = closure (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %3 : java.type:\"int\" = var.load %2;\n+                    return %3;\n@@ -72,8 +72,8 @@\n-            func @\"f\" ()void -> {\n-                %0 : func<int, int, int> = closure (%2 : int, %3 : int)int -> {\n-                    %4 : Var<int> = var %2 @\"x\";\n-                    %5 : Var<int> = var %3 @\"y\";\n-                    %6 : int = var.load %4;\n-                    %7 : int = var.load %5;\n-                    %8 : int = add %6 %7;\n-                    return %8;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"int\", java.type:\"int\", java.type:\"int\"> = closure (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %1 @\"x\";\n+                    %4 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = var.load %4;\n+                    %7 : java.type:\"int\" = add %5 %6;\n+                    return %7;\n@@ -87,4 +87,4 @@\n-            func @\"f\" ()void -> {\n-                %0 : func<java.lang.Object> = closure ()java.lang.Object -> {\n-                    %2 : java.lang.AssertionError = new @\"java.lang.AssertionError::<new>()\";\n-                    throw %2;\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"java.lang.Object\"> = closure ()java.type:\"java.lang.Object\" -> {\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n+                    throw %1;\n@@ -102,7 +102,7 @@\n-            func @\"f\" (%1: Var<int>)void -> {\n-                %0 : func<int, int> = closure (%4 : int)int -> {\n-                    %5 : Var<int> = var %4 @\"y\";\n-                    %6 : int = var.load %1;\n-                    %7 : int = var.load %5;\n-                    %8 : int = add %6 %7;\n-                    return %8;\n+            func @\"f\" (%0 : Var<java.type:\"int\">)java.type:\"void\" -> {\n+                %1 : func<java.type:\"int\", java.type:\"int\"> = closure (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"y\";\n+                    %4 : java.type:\"int\" = var.load %0;\n+                    %5 : java.type:\"int\" = var.load %3;\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    return %6;\n@@ -128,9 +128,9 @@\n-            func @\"f\" (%0 : QuotedTest$Context)void -> {\n-                %1 : func<int, int> = closure (%3 : int)int -> {\n-                    %4 : Var<int> = var %3 @\"z\";\n-                    %5 : int = field.load %0 @\"QuotedTest$Context::x()int\";\n-                    %6 : int = field.load %0 @\"QuotedTest$Context::y()int\";\n-                    %7 : int = add %5 %6;\n-                    %8 : int = var.load %4;\n-                    %9 : int = add %7 %8;\n-                    return %9;\n+            func @\"f\" (%0 : java.type:\"QuotedTest$Context\")java.type:\"void\" -> {\n+                %1 : func<java.type:\"int\", java.type:\"int\"> = closure (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                    %3 : Var<java.type:\"int\"> = var %2 @\"z\";\n+                    %4 : java.type:\"int\" = field.load %0 @\"QuotedTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @\"QuotedTest$Context::y:int\";\n+                    %6 : java.type:\"int\" = add %4 %5;\n+                    %7 : java.type:\"int\" = var.load %3;\n+                    %8 : java.type:\"int\" = add %6 %7;\n+                    return %8;\n@@ -145,8 +145,8 @@\n-            func @\"captureParam\" (%0 : int)void -> {\n-                %1 : Var<int> = var %0 @\"x\";\n-                %2 : jdk.incubator.code.Quoted = quoted ()void -> {\n-                    %3 : func<int, int> = closure (%4 : int)int -> {\n-                        %5 : Var<int> = var %4 @\"y\";\n-                        %6 : int = var.load %1;\n-                        %7 : int = var.load %5;\n-                        %8 : int = add %6 %7;\n+            func @\"captureParam\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"x\";\n+                %2 : java.type:\"jdk.incubator.code.Quoted\" = quoted ()java.type:\"void\" -> {\n+                    %3 : func<java.type:\"int\", java.type:\"int\"> = closure (%4 : java.type:\"int\")java.type:\"int\" -> {\n+                        %5 : Var<java.type:\"int\"> = var %4 @\"y\";\n+                        %6 : java.type:\"int\" = var.load %1;\n+                        %7 : java.type:\"int\" = var.load %5;\n+                        %8 : java.type:\"int\" = add %6 %7;\n@@ -157,1 +157,1 @@\n-                %9 : Var<jdk.incubator.code.Quoted> = var %2 @\"op\";\n+                %9 : Var<java.type:\"jdk.incubator.code.Quoted\"> = var %2 @\"op\";\n@@ -169,9 +169,9 @@\n-            func @\"captureField\" (%0 : QuotedTest)void -> {\n-                %1 : jdk.incubator.code.Quoted = quoted ()void -> {\n-                    %2 : func<int, int> = closure (%3 : int)int -> {\n-                        %4 : Var<int> = var %3 @\"z\";\n-                        %5 : int = field.load %0 @\"QuotedTest::x()int\";\n-                        %6 : int = field.load %0 @\"QuotedTest::y()int\";\n-                        %7 : int = add %5 %6;\n-                        %8 : int = var.load %4;\n-                        %9 : int = add %7 %8;\n+            func @\"captureField\" (%0 : java.type:\"QuotedTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quoted\" = quoted ()java.type:\"void\" -> {\n+                    %2 : func<java.type:\"int\", java.type:\"int\"> = closure (%3 : java.type:\"int\")java.type:\"int\" -> {\n+                        %4 : Var<java.type:\"int\"> = var %3 @\"z\";\n+                        %5 : java.type:\"int\" = field.load %0 @\"QuotedTest::x:int\";\n+                        %6 : java.type:\"int\" = field.load %0 @\"QuotedTest::y:int\";\n+                        %7 : java.type:\"int\" = add %5 %6;\n+                        %8 : java.type:\"int\" = var.load %4;\n+                        %9 : java.type:\"int\" = add %7 %8;\n@@ -182,1 +182,1 @@\n-                %10 : Var<jdk.incubator.code.Quoted> = var %1 @\"op\";\n+                %10 : Var<java.type:\"jdk.incubator.code.Quoted\"> = var %1 @\"op\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedTest.java","additions":58,"deletions":58,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -13,6 +13,6 @@\n-            func @\"test1\" (%0 : java.lang.String, %1 : int)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %0 @\"a\";\n-                %3 : Var<int> = var %1 @\"b\";\n-                %4 : java.lang.String = var.load %2;\n-                %5 : int = var.load %3;\n-                %6 : java.lang.String = concat %4 %5;\n+            func @\"test1\" (%0 : java.type:\"java.lang.String\", %1 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %0 @\"a\";\n+                %3 : Var<java.type:\"int\"> = var %1 @\"b\";\n+                %4 : java.type:\"java.lang.String\" = var.load %2;\n+                %5 : java.type:\"int\" = var.load %3;\n+                %6 : java.type:\"java.lang.String\" = concat %4 %5;\n@@ -28,6 +28,6 @@\n-            func @\"test2\" (%0 : java.lang.String, %1 : char)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %0 @\"a\";\n-                %3 : Var<char> = var %1 @\"b\";\n-                %4 : java.lang.String = var.load %2;\n-                %5 : char = var.load %3;\n-                %6 : java.lang.String = concat %4 %5;\n+            func @\"test2\" (%0 : java.type:\"java.lang.String\", %1 : java.type:\"char\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %0 @\"a\";\n+                %3 : Var<java.type:\"char\"> = var %1 @\"b\";\n+                %4 : java.type:\"java.lang.String\" = var.load %2;\n+                %5 : java.type:\"char\" = var.load %3;\n+                %6 : java.type:\"java.lang.String\" = concat %4 %5;\n@@ -35,1 +35,1 @@\n-                %7 : java.lang.String = var.load %2;\n+                %7 : java.type:\"java.lang.String\" = var.load %2;\n@@ -46,6 +46,6 @@\n-            func @\"test3\" (%0 : java.lang.String, %1 : float)java.lang.String -> {\n-                %2 : Var<java.lang.String> = var %0 @\"a\";\n-                %3 : Var<float> = var %1 @\"b\";\n-                %4 : java.lang.String = var.load %2;\n-                %5 : float = var.load %3;\n-                %6 : java.lang.String = concat %4 %5;\n+            func @\"test3\" (%0 : java.type:\"java.lang.String\", %1 : java.type:\"float\")java.type:\"java.lang.String\" -> {\n+                %2 : Var<java.type:\"java.lang.String\"> = var %0 @\"a\";\n+                %3 : Var<java.type:\"float\"> = var %1 @\"b\";\n+                %4 : java.type:\"java.lang.String\" = var.load %2;\n+                %5 : java.type:\"float\" = var.load %3;\n+                %6 : java.type:\"java.lang.String\" = concat %4 %5;\n@@ -53,1 +53,1 @@\n-                %7 : java.lang.String = var.load %2;\n+                %7 : java.type:\"java.lang.String\" = var.load %2;\n","filename":"test\/langtools\/tools\/javac\/reflect\/StringConcatTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -45,6 +45,6 @@\n-            func @\"superClassFieldAccess\" (%0 : SuperTest)void -> {\n-                %1 : int = field.load %0 @\"SuperClass::f()int\";\n-                %2 : Var<int> = var %1 @\"i\";\n-                %3 : int = constant @\"1\";\n-                field.store %0 %3 @\"SuperClass::f()int\";\n-                %4 : int = field.load %0 @\"SuperClass::f()int\";\n+            func @\"superClassFieldAccess\" (%0 : java.type:\"SuperTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = field.load %0 @\"SuperClass::f:int\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %3 @\"SuperClass::f:int\";\n+                %4 : java.type:\"int\" = field.load %0 @\"SuperClass::f:int\";\n@@ -52,3 +52,3 @@\n-                %5 : int = constant @\"1\";\n-                field.store %0 %5 @\"SuperClass::f()int\";\n-                %6 : int = field.load @\"SuperClass::sf()int\";\n+                %5 : java.type:\"int\" = constant @\"1\";\n+                field.store %0 %5 @\"SuperClass::f:int\";\n+                %6 : java.type:\"int\" = field.load @\"SuperClass::sf:int\";\n@@ -56,3 +56,3 @@\n-                %7 : int = constant @\"1\";\n-                field.store %7 @\"SuperClass::sf()int\";\n-                %8 : int = field.load @\"SuperClass::sf()int\";\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                field.store %7 @\"SuperClass::sf:int\";\n+                %8 : java.type:\"int\" = field.load @\"SuperClass::sf:int\";\n@@ -60,2 +60,2 @@\n-                %9 : int = constant @\"1\";\n-                field.store %9 @\"SuperClass::sf()int\";\n+                %9 : java.type:\"int\" = constant @\"1\";\n+                field.store %9 @\"SuperClass::sf:int\";\n@@ -79,5 +79,5 @@\n-            func @\"superClassMethodInvocation\" (%0 : SuperTest)void -> {\n-                invoke %0 @invoke.kind=\"SUPER\" @\"SuperClass::get()void\";\n-                invoke %0 @invoke.kind=\"SUPER\" @\"SuperClass::get()void\";\n-                invoke @\"SuperClass::sget()void\";\n-                invoke @\"SuperClass::sget()void\";\n+            func @\"superClassMethodInvocation\" (%0 : java.type:\"SuperTest\")java.type:\"void\" -> {\n+                invoke %0 @\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n+                invoke %0 @\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n+                invoke @\"SuperClass::sget():void\";\n+                invoke @\"SuperClass::sget():void\";\n@@ -97,2 +97,2 @@\n-            func @\"superInterfaceMethodInvocation\" (%0 : SuperTest)void -> {\n-                invoke %0 @invoke.kind=\"SUPER\" @\"SuperInterface::get()void\";\n+            func @\"superInterfaceMethodInvocation\" (%0 : java.type:\"SuperTest\")java.type:\"void\" -> {\n+                invoke %0 @\"SuperInterface::get():void\" @invoke.kind=\"SUPER\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SuperTest.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -42,7 +42,7 @@\n-            func @\"constantCaseLabelRule\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelRule\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -51,2 +51,2 @@\n-                    ()java.lang.Object -> {\n-                        %7 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -55,3 +55,3 @@\n-                    ^constantCaseLabel(%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -60,2 +60,2 @@\n-                    ()java.lang.Object -> {\n-                        %11 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -64,3 +64,3 @@\n-                    ^constantCaseLabel(%12 : java.lang.String)boolean -> {\n-                        %13 : java.lang.String = constant @\"BAZ\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%12 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -69,2 +69,2 @@\n-                    ()java.lang.Object -> {\n-                        %15 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -73,6 +73,2 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n-                    }\n-                    ()java.lang.Object -> {\n-                        %16 : java.lang.String = constant @\"\";\n+                    ()java.type:\"boolean\" -> {\n+                        %16 : java.type:\"boolean\" = constant @\"true\";\n@@ -80,0 +76,4 @@\n+                    }\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"\";\n+                        yield %17;\n@@ -95,9 +95,9 @@\n-            func @\"constantCaseLabelsRule\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : boolean = java.cor\n-                            ()boolean -> {\n-                                %6 : java.lang.String = constant @\"FOO\";\n-                                %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelsRule\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %6 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -106,3 +106,3 @@\n-                            ()boolean -> {\n-                                %8 : java.lang.String = constant @\"BAR\";\n-                                %9 : boolean = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %8 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -111,3 +111,3 @@\n-                            ()boolean -> {\n-                                %10 : java.lang.String = constant @\"BAZ\";\n-                                %11 : boolean = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %10 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -118,2 +118,2 @@\n-                    ()java.lang.Object -> {\n-                        %12 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -122,3 +122,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %14 : boolean = constant @\"true\";\n-                        yield %14;\n+                    ()java.type:\"boolean\" -> {\n+                        %13 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %13;\n@@ -126,3 +126,3 @@\n-                    ()java.lang.Object -> {\n-                        %13 : java.lang.String = constant @\"\";\n-                        java.yield %13;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %14 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %14;\n@@ -144,7 +144,7 @@\n-            func @\"constantCaseLabelStatement\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelStatement\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -153,2 +153,2 @@\n-                    ()java.lang.Object -> {\n-                        %7 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -157,3 +157,3 @@\n-                    ^constantCaseLabel(%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -162,2 +162,2 @@\n-                    ()java.lang.Object -> {\n-                        %11 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -166,3 +166,3 @@\n-                    ^constantCaseLabel(%12 : java.lang.String)boolean -> {\n-                        %13 : java.lang.String = constant @\"BAZ\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%12 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -171,2 +171,2 @@\n-                    ()java.lang.Object -> {\n-                        %15 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -175,3 +175,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %16 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %16;\n@@ -179,3 +179,3 @@\n-                    ()java.lang.Object -> {\n-                        %16 : java.lang.String = constant @\"\";\n-                        java.yield %16;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %17;\n@@ -197,9 +197,9 @@\n-            func @\"constantCaseLabelsStatement\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : boolean = java.cor\n-                            ()boolean -> {\n-                                %6 : java.lang.String = constant @\"FOO\";\n-                                %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelsStatement\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %6 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -208,3 +208,3 @@\n-                            ()boolean -> {\n-                                %8 : java.lang.String = constant @\"BAR\";\n-                                %9 : boolean = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %8 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -213,3 +213,3 @@\n-                            ()boolean -> {\n-                                %10 : java.lang.String = constant @\"BAZ\";\n-                                %11 : boolean = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %10 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -220,2 +220,2 @@\n-                    ()java.lang.Object -> {\n-                        %12 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -224,3 +224,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %13 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %13;\n@@ -228,4 +228,4 @@\n-                    ()java.lang.Object -> {\n-                        java.block ()void -> {\n-                            %13 : java.lang.String = constant @\"\";\n-                            java.yield %13;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %14 : java.type:\"java.lang.String\" = constant @\"\";\n+                            java.yield %14;\n@@ -247,7 +247,7 @@\n-            func @\"constantCaseLabelStatements\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelStatements\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -256,5 +256,5 @@\n-                    ()java.lang.Object -> {\n-                        java.block ()void -> {\n-                            %7 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                            %8 : java.lang.String = constant @\"FOO\";\n-                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                            %8 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -263,2 +263,2 @@\n-                        java.block ()void -> {\n-                            %9 : java.lang.String = constant @\"FOO\";\n+                        java.block ()java.type:\"void\" -> {\n+                            %9 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -269,3 +269,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %11 : boolean = constant @\"true\";\n-                        yield %11;\n+                    ()java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %10;\n@@ -273,3 +273,3 @@\n-                    ()java.lang.Object -> {\n-                        %10 : java.lang.String = constant @\"\";\n-                        java.yield %10;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %11;\n@@ -294,7 +294,7 @@\n-            func @\"constantCaseLabelFallthrough\" (%0 : java.lang.String)java.lang.Object -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = java.switch.expression %2\n-                    ^constantCaseLabel(%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"constantCaseLabelFallthrough\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -303,5 +303,5 @@\n-                    ()java.lang.Object -> {\n-                        java.block ()void -> {\n-                            %7 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                            %8 : java.lang.String = constant @\"FOO\";\n-                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        java.block ()java.type:\"void\" -> {\n+                            %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                            %8 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -312,3 +312,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %10 : boolean = constant @\"true\";\n-                        yield %10;\n+                    ()java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %9;\n@@ -316,3 +316,3 @@\n-                    ()java.lang.Object -> {\n-                        %9 : java.lang.String = constant @\"\";\n-                        java.yield %9;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %10;\n@@ -337,13 +337,13 @@\n-            func @\"patternCaseLabel\" (%0 : java.lang.Object)java.lang.Object -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"r\";\n-                %2 : java.lang.Object = var.load %1;\n-                %3 : java.lang.Number = constant @null;\n-                %4 : Var<java.lang.Number> = var %3 @\"n\";\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"s\";\n-                %7 : java.lang.Object = java.switch.expression %2\n-                    ^patternCaseLabel(%8 : java.lang.Object)boolean -> {\n-                        %9 : boolean = pattern.match %8\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> -> {\n-                                %10 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n-                                %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> = pattern.record %10 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+            func @\"patternCaseLabel\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.Object\" = var.load %1;\n+                %3 : java.type:\"java.lang.Number\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.Number\"> = var %3 @\"n\";\n+                %5 : java.type:\"java.lang.String\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"s\";\n+                %7 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%8 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = pattern.match %8\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" -> {\n+                                %10 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %10 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -352,1 +352,1 @@\n-                            ^match(%12 : java.lang.Number)void -> {\n+                            (%12 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -358,2 +358,2 @@\n-                    ()java.lang.Object -> {\n-                        %13 : java.lang.Number = var.load %4;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %13 : java.type:\"java.lang.Number\" = var.load %4;\n@@ -362,4 +362,4 @@\n-                    ^patternCaseLabel(%14 : java.lang.Object)boolean -> {\n-                        %15 : boolean = pattern.match %14\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %16 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    (%14 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %15 : java.type:\"boolean\" = pattern.match %14\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %16 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -368,1 +368,1 @@\n-                            ^match(%17 : java.lang.String)void -> {\n+                            (%17 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -374,2 +374,2 @@\n-                    ()java.lang.Object -> {\n-                        %18 : java.lang.String = var.load %6;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %6;\n@@ -378,3 +378,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %10 : boolean = constant @\"true\";\n-                        yield %10;\n+                    ()java.type:\"boolean\" -> {\n+                        %19 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %19;\n@@ -382,3 +382,3 @@\n-                    ()java.lang.Object -> {\n-                        %19 : java.lang.String = constant @\"\";\n-                        java.yield %19;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %20 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %20;\n@@ -405,15 +405,15 @@\n-            func @\"patternCaseLabelGuard\" (%0 : java.lang.Object)java.lang.Object -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"r\";\n-                %2 : java.lang.Object = var.load %1;\n-                %3 : java.lang.Number = constant @null;\n-                %4 : Var<java.lang.Number> = var %3 @\"n\";\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"s\";\n-                %7 : java.lang.String = constant @null;\n-                %8 : Var<java.lang.String> = var %7 @\"s\";\n-                %9 : java.lang.Object = java.switch.expression %2\n-                    ^patternCaseLabel(%10 : java.lang.Object)boolean -> {\n-                        %11 : boolean = pattern.match %10\n-                            ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> -> {\n-                                %12 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n-                                %13 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> = pattern.record %12 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+            func @\"patternCaseLabelGuard\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.Object\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.Object\" = var.load %1;\n+                %3 : java.type:\"java.lang.Number\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.Number\"> = var %3 @\"n\";\n+                %5 : java.type:\"java.lang.String\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"s\";\n+                %7 : java.type:\"java.lang.String\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.String\"> = var %7 @\"s\";\n+                %9 : java.type:\"java.lang.Object\" = java.switch.expression %2\n+                    (%10 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = pattern.match %10\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" -> {\n+                                %12 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n+                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %12 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -422,1 +422,1 @@\n-                            ^match(%14 : java.lang.Number)void -> {\n+                            (%14 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -428,2 +428,2 @@\n-                    ()java.lang.Object -> {\n-                        %15 : java.lang.Number = var.load %4;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %15 : java.type:\"java.lang.Number\" = var.load %4;\n@@ -432,6 +432,6 @@\n-                    ^patternCaseLabel(%16 : java.lang.Object)boolean -> {\n-                        %17 : boolean = java.cand\n-                            ()boolean -> {\n-                                %18 : boolean = pattern.match %16\n-                                    ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                        %19 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    (%16 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %18 : java.type:\"boolean\" = pattern.match %16\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                        %19 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -440,1 +440,1 @@\n-                                    ^match(%20 : java.lang.String)void -> {\n+                                    (%20 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -446,5 +446,5 @@\n-                            ()boolean -> {\n-                                %21 : java.lang.String = var.load %6;\n-                                %22 : int = invoke %21 @\"java.lang.String::length()int\";\n-                                %23 : int = constant @\"5\";\n-                                %24 : boolean = lt %22 %23;\n+                            ()java.type:\"boolean\" -> {\n+                                %21 : java.type:\"java.lang.String\" = var.load %6;\n+                                %22 : java.type:\"int\" = invoke %21 @\"java.lang.String::length():int\";\n+                                %23 : java.type:\"int\" = constant @\"5\";\n+                                %24 : java.type:\"boolean\" = lt %22 %23;\n@@ -455,2 +455,2 @@\n-                    ()java.lang.Object -> {\n-                        %25 : java.lang.String = var.load %6;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %25 : java.type:\"java.lang.String\" = var.load %6;\n@@ -459,6 +459,6 @@\n-                    ^patternCaseLabel(%26 : java.lang.Object)boolean -> {\n-                        %27 : boolean = java.cand\n-                            ()boolean -> {\n-                                %28 : boolean = pattern.match %26\n-                                    ^pattern()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                        %29 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    (%26 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %27 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %28 : java.type:\"boolean\" = pattern.match %26\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                        %29 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -467,1 +467,1 @@\n-                                    ^match(%30 : java.lang.String)void -> {\n+                                    (%30 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -473,5 +473,5 @@\n-                            ()boolean -> {\n-                                %31 : java.lang.String = var.load %8;\n-                                %32 : int = invoke %31 @\"java.lang.String::length()int\";\n-                                %33 : int = constant @\"10\";\n-                                %34 : boolean = lt %32 %33;\n+                            ()java.type:\"boolean\" -> {\n+                                %31 : java.type:\"java.lang.String\" = var.load %8;\n+                                %32 : java.type:\"int\" = invoke %31 @\"java.lang.String::length():int\";\n+                                %33 : java.type:\"int\" = constant @\"10\";\n+                                %34 : java.type:\"boolean\" = lt %32 %33;\n@@ -482,2 +482,2 @@\n-                    ()java.lang.Object -> {\n-                        %35 : java.lang.String = var.load %8;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %35 : java.type:\"java.lang.String\" = var.load %8;\n@@ -486,3 +486,3 @@\n-                    ^defaultCaseLabel()boolean -> {\n-                        %37 : boolean = constant @\"true\";\n-                        yield %37;\n+                    ()java.type:\"boolean\" -> {\n+                        %36 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %36;\n@@ -490,3 +490,3 @@\n-                    ()java.lang.Object -> {\n-                        %36 : java.lang.String = constant @\"\";\n-                        java.yield %36;\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %37 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %37;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":216,"deletions":216,"binary":false,"changes":432,"status":"modified"},{"patch":"@@ -14,7 +14,7 @@\n-            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantRuleExpression\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -23,2 +23,2 @@\n-                    ()java.lang.String -> {\n-                        %7 : java.lang.String = constant @\"BAR\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"BAR\";\n@@ -27,3 +27,3 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -32,2 +32,2 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"BAZ\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n@@ -36,3 +36,3 @@\n-                    (%12 : java.lang.String)boolean -> {\n-                        %13 : java.lang.String = constant @\"BAZ\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%12 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -41,2 +41,2 @@\n-                    ()java.lang.String -> {\n-                        %15 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -45,6 +45,2 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n-                    }\n-                    ()java.lang.String -> {\n-                        %16 : java.lang.String = constant @\"\";\n+                    ()java.type:\"boolean\" -> {\n+                        %16 : java.type:\"boolean\" = constant @\"true\";\n@@ -52,0 +48,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"\";\n+                        yield %17;\n@@ -67,7 +67,7 @@\n-            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantRuleBlock\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -76,2 +76,2 @@\n-                    ()java.lang.String -> {\n-                        %7 : java.lang.String = constant @\"BAR\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"BAR\";\n@@ -80,3 +80,3 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -85,2 +85,2 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"BAZ\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n@@ -89,3 +89,3 @@\n-                    (%12 : java.lang.String)boolean -> {\n-                        %13 : java.lang.String = constant @\"BAZ\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%12 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -94,2 +94,2 @@\n-                    ()java.lang.String -> {\n-                        %15 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -98,3 +98,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %16 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %16;\n@@ -102,3 +102,3 @@\n-                    ()java.lang.String -> {\n-                        %16 : java.lang.String = constant @\"\";\n-                        java.yield %16;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %17;\n@@ -128,7 +128,7 @@\n-            func @\"caseConstantStatement\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.String = constant @\"FOO\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantStatement\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -137,2 +137,2 @@\n-                    ()java.lang.String -> {\n-                        %7 : java.lang.String = constant @\"BAR\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"BAR\";\n@@ -141,3 +141,3 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -146,2 +146,2 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"BAZ\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n@@ -150,3 +150,3 @@\n-                    (%12 : java.lang.String)boolean -> {\n-                        %13 : java.lang.String = constant @\"BAZ\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%12 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -155,2 +155,2 @@\n-                    ()java.lang.String -> {\n-                        %15 : java.lang.String = constant @\"FOO\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"FOO\";\n@@ -159,3 +159,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %16 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %16;\n@@ -163,3 +163,3 @@\n-                    ()java.lang.String -> {\n-                        %16 : java.lang.String = constant @\"\";\n-                        java.yield %16;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"\";\n+                        java.yield %17;\n@@ -181,10 +181,10 @@\n-            func @\"caseConstantMultiLabels\" (%0 : char)java.lang.String -> {\n-                %1 : Var<char> = var %0 @\"c\";\n-                %2 : char = var.load %1;\n-                %3 : char = invoke %2 @\"java.lang.Character::toLowerCase(char)char\";\n-                %4 : java.lang.String = java.switch.expression %3\n-                    (%5 : char)boolean -> {\n-                        %6 : boolean = java.cor\n-                            ()boolean -> {\n-                                %7 : char = constant @\"a\";\n-                                %8 : boolean = eq %5 %7;\n+            func @\"caseConstantMultiLabels\" (%0 : java.type:\"char\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"char\"> = var %0 @\"c\";\n+                %2 : java.type:\"char\" = var.load %1;\n+                %3 : java.type:\"char\" = invoke %2 @\"java.lang.Character::toLowerCase(char):char\";\n+                %4 : java.type:\"java.lang.String\" = java.switch.expression %3\n+                    (%5 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %7 : java.type:\"char\" = constant @\"a\";\n+                                %8 : java.type:\"boolean\" = eq %5 %7;\n@@ -193,3 +193,3 @@\n-                            ()boolean -> {\n-                                %9 : char = constant @\"e\";\n-                                %10 : boolean = eq %5 %9;\n+                            ()java.type:\"boolean\" -> {\n+                                %9 : java.type:\"char\" = constant @\"e\";\n+                                %10 : java.type:\"boolean\" = eq %5 %9;\n@@ -198,3 +198,3 @@\n-                            ()boolean -> {\n-                                %11 : char = constant @\"i\";\n-                                %12 : boolean = eq %5 %11;\n+                            ()java.type:\"boolean\" -> {\n+                                %11 : java.type:\"char\" = constant @\"i\";\n+                                %12 : java.type:\"boolean\" = eq %5 %11;\n@@ -203,3 +203,3 @@\n-                            ()boolean -> {\n-                                %13 : char = constant @\"o\";\n-                                %14 : boolean = eq %5 %13;\n+                            ()java.type:\"boolean\" -> {\n+                                %13 : java.type:\"char\" = constant @\"o\";\n+                                %14 : java.type:\"boolean\" = eq %5 %13;\n@@ -208,3 +208,3 @@\n-                            ()boolean -> {\n-                                %15 : char = constant @\"u\";\n-                                %16 : boolean = eq %5 %15;\n+                            ()java.type:\"boolean\" -> {\n+                                %15 : java.type:\"char\" = constant @\"u\";\n+                                %16 : java.type:\"boolean\" = eq %5 %15;\n@@ -215,2 +215,2 @@\n-                    ()java.lang.String -> {\n-                        %17 : java.lang.String = constant @\"vowel\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"vowel\";\n@@ -219,3 +219,3 @@\n-                    ()boolean -> {\n-                        %19 : boolean = constant @\"true\";\n-                        yield %19;\n+                    ()java.type:\"boolean\" -> {\n+                        %18 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %18;\n@@ -223,3 +223,3 @@\n-                    ()java.lang.String -> {\n-                        %18 : java.lang.String = constant @\"consonant\";\n-                        java.yield %18;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %19 : java.type:\"java.lang.String\" = constant @\"consonant\";\n+                        java.yield %19;\n@@ -239,8 +239,8 @@\n-            func @\"caseConstantThrow\" (%0 : java.lang.Integer)java.lang.String -> {\n-                %1 : Var<java.lang.Integer> = var %0 @\"i\";\n-                %2 : java.lang.Integer = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : java.lang.Integer)boolean -> {\n-                        %5 : int = constant @\"8\";\n-                        %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantThrow\" (%0 : java.type:\"java.lang.Integer\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Integer\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.Integer\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"int\" = constant @\"8\";\n+                        %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -249,2 +249,2 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.IllegalArgumentException = new @\"java.lang.IllegalArgumentException::<new>()\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %8 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n@@ -253,4 +253,4 @@\n-                    (%9 : java.lang.Integer)boolean -> {\n-                        %10 : int = constant @\"9\";\n-                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%9 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"int\" = constant @\"9\";\n+                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"boolean\" = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -259,2 +259,2 @@\n-                    ()java.lang.String -> {\n-                        %13 : java.lang.String = constant @\"NINE\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"NINE\";\n@@ -263,6 +263,2 @@\n-                    ()boolean -> {\n-                        %15 : boolean = constant @\"true\";\n-                        yield %15;\n-                    }\n-                    ()java.lang.String -> {\n-                        %14 : java.lang.String = constant @\"An integer\";\n+                    ()java.type:\"boolean\" -> {\n+                        %14 : java.type:\"boolean\" = constant @\"true\";\n@@ -270,0 +266,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %15 : java.type:\"java.lang.String\" = constant @\"An integer\";\n+                        yield %15;\n@@ -284,7 +284,7 @@\n-            func @\"caseConstantNullLabel\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : java.lang.String)boolean -> {\n-                        %5 : java.lang.Object = constant @null;\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantNullLabel\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Object\" = constant @null;\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -293,2 +293,2 @@\n-                    ()java.lang.String -> {\n-                        %7 : java.lang.String = constant @\"null\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"null\";\n@@ -297,6 +297,2 @@\n-                    ()boolean -> {\n-                        %9 : boolean = constant @\"true\";\n-                        yield %9;\n-                    }\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @\"non null\";\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = constant @\"true\";\n@@ -304,0 +300,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"non null\";\n+                        yield %9;\n@@ -327,7 +327,7 @@\n-            func @\"caseConstantFallThrough\" (%0 : char)java.lang.String -> {\n-                %1 : Var<char> = var %0 @\"c\";\n-                %2 : char = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : char)boolean -> {\n-                        %5 : char = constant @\"A\";\n-                        %6 : boolean = eq %4 %5;\n+            func @\"caseConstantFallThrough\" (%0 : java.type:\"char\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"char\"> = var %0 @\"c\";\n+                %2 : java.type:\"char\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"char\" = constant @\"A\";\n+                        %6 : java.type:\"boolean\" = eq %4 %5;\n@@ -336,1 +336,1 @@\n-                    ()java.lang.String -> {\n+                    ()java.type:\"java.lang.String\" -> {\n@@ -339,3 +339,3 @@\n-                    (%7 : char)boolean -> {\n-                        %8 : char = constant @\"B\";\n-                        %9 : boolean = eq %7 %8;\n+                    (%7 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"char\" = constant @\"B\";\n+                        %9 : java.type:\"boolean\" = eq %7 %8;\n@@ -344,2 +344,2 @@\n-                    ()java.lang.String -> {\n-                        %10 : java.lang.String = constant @\"A or B\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %10 : java.type:\"java.lang.String\" = constant @\"A or B\";\n@@ -348,3 +348,3 @@\n-                    ()boolean -> {\n-                        %12 : boolean = constant @\"true\";\n-                        yield %12;\n+                    ()java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %11;\n@@ -352,3 +352,3 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"Neither A nor B\";\n-                        java.yield %11;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"Neither A nor B\";\n+                        java.yield %12;\n@@ -374,9 +374,9 @@\n-            func @\"caseConstantEnum\" (%0 : SwitchExpressionTest2$Day)int -> {\n-                %1 : Var<SwitchExpressionTest2$Day> = var %0 @\"d\";\n-                %2 : SwitchExpressionTest2$Day = var.load %1;\n-                %3 : int = java.switch.expression %2\n-                    (%4 : SwitchExpressionTest2$Day)boolean -> {\n-                        %5 : boolean = java.cor\n-                            ()boolean -> {\n-                                %6 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::MON()SwitchExpressionTest2$Day\";\n-                                %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantEnum\" (%0 : java.type:\"SwitchExpressionTest2$Day\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"SwitchExpressionTest2$Day\"> = var %0 @\"d\";\n+                %2 : java.type:\"SwitchExpressionTest2$Day\" = var.load %1;\n+                %3 : java.type:\"int\" = java.switch.expression %2\n+                    (%4 : java.type:\"SwitchExpressionTest2$Day\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %6 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::MON:SwitchExpressionTest2$Day\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -385,3 +385,3 @@\n-                            ()boolean -> {\n-                                %8 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::FRI()SwitchExpressionTest2$Day\";\n-                                %9 : boolean = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %8 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::FRI:SwitchExpressionTest2$Day\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -390,3 +390,3 @@\n-                            ()boolean -> {\n-                                %10 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::SUN()SwitchExpressionTest2$Day\";\n-                                %11 : boolean = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %10 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::SUN:SwitchExpressionTest2$Day\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -397,2 +397,2 @@\n-                    ()int -> {\n-                        %12 : int = constant @\"6\";\n+                    ()java.type:\"int\" -> {\n+                        %12 : java.type:\"int\" = constant @\"6\";\n@@ -401,3 +401,3 @@\n-                    (%13 : SwitchExpressionTest2$Day)boolean -> {\n-                        %14 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::TUE()SwitchExpressionTest2$Day\";\n-                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%13 : java.type:\"SwitchExpressionTest2$Day\")java.type:\"boolean\" -> {\n+                        %14 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::TUE:SwitchExpressionTest2$Day\";\n+                        %15 : java.type:\"boolean\" = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -406,2 +406,2 @@\n-                    ()int -> {\n-                        %16 : int = constant @\"7\";\n+                    ()java.type:\"int\" -> {\n+                        %16 : java.type:\"int\" = constant @\"7\";\n@@ -410,5 +410,5 @@\n-                    (%17 : SwitchExpressionTest2$Day)boolean -> {\n-                        %18 : boolean = java.cor\n-                            ()boolean -> {\n-                                %19 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::THU()SwitchExpressionTest2$Day\";\n-                                %20 : boolean = invoke %17 %19 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%17 : java.type:\"SwitchExpressionTest2$Day\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %19 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::THU:SwitchExpressionTest2$Day\";\n+                                %20 : java.type:\"boolean\" = invoke %17 %19 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -417,3 +417,3 @@\n-                            ()boolean -> {\n-                                %21 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::SAT()SwitchExpressionTest2$Day\";\n-                                %22 : boolean = invoke %17 %21 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %21 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::SAT:SwitchExpressionTest2$Day\";\n+                                %22 : java.type:\"boolean\" = invoke %17 %21 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -424,2 +424,2 @@\n-                    ()int -> {\n-                        %23 : int = constant @\"8\";\n+                    ()java.type:\"int\" -> {\n+                        %23 : java.type:\"int\" = constant @\"8\";\n@@ -428,3 +428,3 @@\n-                    (%24 : SwitchExpressionTest2$Day)boolean -> {\n-                        %25 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::WED()SwitchExpressionTest2$Day\";\n-                        %26 : boolean = invoke %24 %25 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%24 : java.type:\"SwitchExpressionTest2$Day\")java.type:\"boolean\" -> {\n+                        %25 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::WED:SwitchExpressionTest2$Day\";\n+                        %26 : java.type:\"boolean\" = invoke %24 %25 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -433,2 +433,2 @@\n-                    ()int -> {\n-                        %27 : int = constant @\"9\";\n+                    ()java.type:\"int\" -> {\n+                        %27 : java.type:\"int\" = constant @\"9\";\n@@ -437,3 +437,3 @@\n-                    ()boolean -> {\n-                        %29 : boolean = constant @\"true\";\n-                        yield %29;\n+                    ()java.type:\"boolean\" -> {\n+                        %28 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %28;\n@@ -441,3 +441,3 @@\n-                    ()int -> {\n-                        %28 : java.lang.MatchException = new @\"java.lang.MatchException::<new>()\";\n-                        throw %28;\n+                    ()java.type:\"int\" -> {\n+                        %29 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        throw %29;\n@@ -462,11 +462,11 @@\n-            func @\"caseConstantOtherKindsOfExpr\" (%0 : int)java.lang.String -> {\n-                %1 : Var<int> = var %0 @\"i\";\n-                %2 : int = constant @\"11\";\n-                %3 : Var<int> = var %2 @\"eleven\";\n-                %4 : int = var.load %1;\n-                %5 : java.lang.String = java.switch.expression %4\n-                    (%6 : int)boolean -> {\n-                        %7 : int = constant @\"1\";\n-                        %8 : int = constant @\"15\";\n-                        %9 : int = and %7 %8;\n-                        %10 : boolean = eq %6 %9;\n+            func @\"caseConstantOtherKindsOfExpr\" (%0 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : java.type:\"int\" = constant @\"11\";\n+                %3 : Var<java.type:\"int\"> = var %2 @\"eleven\";\n+                %4 : java.type:\"int\" = var.load %1;\n+                %5 : java.type:\"java.lang.String\" = java.switch.expression %4\n+                    (%6 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %7 : java.type:\"int\" = constant @\"1\";\n+                        %8 : java.type:\"int\" = constant @\"15\";\n+                        %9 : java.type:\"int\" = and %7 %8;\n+                        %10 : java.type:\"boolean\" = eq %6 %9;\n@@ -475,2 +475,2 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"1\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"1\";\n@@ -479,5 +479,5 @@\n-                    (%12 : int)boolean -> {\n-                        %13 : int = constant @\"4\";\n-                        %14 : int = constant @\"1\";\n-                        %15 : int = ashr %13 %14;\n-                        %16 : boolean = eq %12 %15;\n+                    (%12 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"int\" = constant @\"4\";\n+                        %14 : java.type:\"int\" = constant @\"1\";\n+                        %15 : java.type:\"int\" = ashr %13 %14;\n+                        %16 : java.type:\"boolean\" = eq %12 %15;\n@@ -486,2 +486,2 @@\n-                    ()java.lang.String -> {\n-                        %17 : java.lang.String = constant @\"2\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"2\";\n@@ -490,4 +490,4 @@\n-                    (%18 : int)boolean -> {\n-                        %19 : long = constant @\"3\";\n-                        %20 : int = conv %19;\n-                        %21 : boolean = eq %18 %20;\n+                    (%18 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %19 : java.type:\"long\" = constant @\"3\";\n+                        %20 : java.type:\"int\" = conv %19;\n+                        %21 : java.type:\"boolean\" = eq %18 %20;\n@@ -496,2 +496,2 @@\n-                    ()java.lang.String -> {\n-                        %22 : java.lang.String = constant @\"3\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %22 : java.type:\"java.lang.String\" = constant @\"3\";\n@@ -500,5 +500,5 @@\n-                    (%23 : int)boolean -> {\n-                        %24 : int = constant @\"2\";\n-                        %25 : int = constant @\"1\";\n-                        %26 : int = lshl %24 %25;\n-                        %27 : boolean = eq %23 %26;\n+                    (%23 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %24 : java.type:\"int\" = constant @\"2\";\n+                        %25 : java.type:\"int\" = constant @\"1\";\n+                        %26 : java.type:\"int\" = lshl %24 %25;\n+                        %27 : java.type:\"boolean\" = eq %23 %26;\n@@ -507,2 +507,2 @@\n-                    ()java.lang.String -> {\n-                        %28 : java.lang.String = constant @\"4\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %28 : java.type:\"java.lang.String\" = constant @\"4\";\n@@ -511,5 +511,5 @@\n-                    (%29 : int)boolean -> {\n-                        %30 : int = constant @\"10\";\n-                        %31 : int = constant @\"2\";\n-                        %32 : int = div %30 %31;\n-                        %33 : boolean = eq %29 %32;\n+                    (%29 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %30 : java.type:\"int\" = constant @\"10\";\n+                        %31 : java.type:\"int\" = constant @\"2\";\n+                        %32 : java.type:\"int\" = div %30 %31;\n+                        %33 : java.type:\"boolean\" = eq %29 %32;\n@@ -518,2 +518,2 @@\n-                    ()java.lang.String -> {\n-                        %34 : java.lang.String = constant @\"5\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %34 : java.type:\"java.lang.String\" = constant @\"5\";\n@@ -522,5 +522,5 @@\n-                    (%35 : int)boolean -> {\n-                        %36 : int = constant @\"12\";\n-                        %37 : int = constant @\"6\";\n-                        %38 : int = sub %36 %37;\n-                        %39 : boolean = eq %35 %38;\n+                    (%35 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %36 : java.type:\"int\" = constant @\"12\";\n+                        %37 : java.type:\"int\" = constant @\"6\";\n+                        %38 : java.type:\"int\" = sub %36 %37;\n+                        %39 : java.type:\"boolean\" = eq %35 %38;\n@@ -529,2 +529,2 @@\n-                    ()java.lang.String -> {\n-                        %40 : java.lang.String = constant @\"6\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %40 : java.type:\"java.lang.String\" = constant @\"6\";\n@@ -533,5 +533,5 @@\n-                    (%41 : int)boolean -> {\n-                        %42 : int = constant @\"3\";\n-                        %43 : int = constant @\"4\";\n-                        %44 : int = add %42 %43;\n-                        %45 : boolean = eq %41 %44;\n+                    (%41 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %42 : java.type:\"int\" = constant @\"3\";\n+                        %43 : java.type:\"int\" = constant @\"4\";\n+                        %44 : java.type:\"int\" = add %42 %43;\n+                        %45 : java.type:\"boolean\" = eq %41 %44;\n@@ -540,2 +540,2 @@\n-                    ()java.lang.String -> {\n-                        %46 : java.lang.String = constant @\"7\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %46 : java.type:\"java.lang.String\" = constant @\"7\";\n@@ -544,7 +544,7 @@\n-                    (%47 : int)boolean -> {\n-                        %48 : int = constant @\"2\";\n-                        %49 : int = constant @\"2\";\n-                        %50 : int = mul %48 %49;\n-                        %51 : int = constant @\"2\";\n-                        %52 : int = mul %50 %51;\n-                        %53 : boolean = eq %47 %52;\n+                    (%47 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %48 : java.type:\"int\" = constant @\"2\";\n+                        %49 : java.type:\"int\" = constant @\"2\";\n+                        %50 : java.type:\"int\" = mul %48 %49;\n+                        %51 : java.type:\"int\" = constant @\"2\";\n+                        %52 : java.type:\"int\" = mul %50 %51;\n+                        %53 : java.type:\"boolean\" = eq %47 %52;\n@@ -553,2 +553,2 @@\n-                    ()java.lang.String -> {\n-                        %54 : java.lang.String = constant @\"8\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %54 : java.type:\"java.lang.String\" = constant @\"8\";\n@@ -557,5 +557,5 @@\n-                    (%55 : int)boolean -> {\n-                        %56 : int = constant @\"8\";\n-                        %57 : int = constant @\"1\";\n-                        %58 : int = or %56 %57;\n-                        %59 : boolean = eq %55 %58;\n+                    (%55 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %56 : java.type:\"int\" = constant @\"8\";\n+                        %57 : java.type:\"int\" = constant @\"1\";\n+                        %58 : java.type:\"int\" = or %56 %57;\n+                        %59 : java.type:\"boolean\" = eq %55 %58;\n@@ -564,2 +564,2 @@\n-                    ()java.lang.String -> {\n-                        %60 : java.lang.String = constant @\"9\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %60 : java.type:\"java.lang.String\" = constant @\"9\";\n@@ -568,3 +568,3 @@\n-                    (%61 : int)boolean -> {\n-                        %62 : int = constant @\"10\";\n-                        %63 : boolean = eq %61 %62;\n+                    (%61 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %62 : java.type:\"int\" = constant @\"10\";\n+                        %63 : java.type:\"boolean\" = eq %61 %62;\n@@ -573,2 +573,2 @@\n-                    ()java.lang.String -> {\n-                        %64 : java.lang.String = constant @\"10\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %64 : java.type:\"java.lang.String\" = constant @\"10\";\n@@ -577,3 +577,3 @@\n-                    (%65 : int)boolean -> {\n-                        %66 : int = var.load %3;\n-                        %67 : boolean = eq %65 %66;\n+                    (%65 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %66 : java.type:\"int\" = var.load %3;\n+                        %67 : java.type:\"boolean\" = eq %65 %66;\n@@ -582,2 +582,2 @@\n-                    ()java.lang.String -> {\n-                        %68 : java.lang.String = constant @\"11\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %68 : java.type:\"java.lang.String\" = constant @\"11\";\n@@ -586,3 +586,3 @@\n-                    (%69 : int)boolean -> {\n-                        %70 : int = field.load @\"SwitchExpressionTest2$Constants::c1()int\";\n-                        %71 : boolean = eq %69 %70;\n+                    (%69 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %70 : java.type:\"int\" = field.load @\"SwitchExpressionTest2$Constants::c1:int\";\n+                        %71 : java.type:\"boolean\" = eq %69 %70;\n@@ -591,3 +591,3 @@\n-                    ()java.lang.String -> {\n-                        %72 : int = field.load @\"SwitchExpressionTest2$Constants::c1()int\";\n-                        %73 : java.lang.String = invoke %72 @\"java.lang.String::valueOf(int)java.lang.String\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %72 : java.type:\"int\" = field.load @\"SwitchExpressionTest2$Constants::c1:int\";\n+                        %73 : java.type:\"java.lang.String\" = invoke %72 @\"java.lang.String::valueOf(int):java.lang.String\";\n@@ -596,6 +596,6 @@\n-                    (%74 : int)boolean -> {\n-                        %75 : int = java.cexpression\n-                            ()boolean -> {\n-                                %76 : int = constant @\"1\";\n-                                %77 : int = constant @\"0\";\n-                                %78 : boolean = gt %76 %77;\n+                    (%74 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %75 : java.type:\"int\" = java.cexpression\n+                            ()java.type:\"boolean\" -> {\n+                                %76 : java.type:\"int\" = constant @\"1\";\n+                                %77 : java.type:\"int\" = constant @\"0\";\n+                                %78 : java.type:\"boolean\" = gt %76 %77;\n@@ -604,2 +604,2 @@\n-                            ()int -> {\n-                                %79 : int = constant @\"13\";\n+                            ()java.type:\"int\" -> {\n+                                %79 : java.type:\"int\" = constant @\"13\";\n@@ -608,2 +608,2 @@\n-                            ()int -> {\n-                                %80 : int = constant @\"133\";\n+                            ()java.type:\"int\" -> {\n+                                %80 : java.type:\"int\" = constant @\"133\";\n@@ -612,1 +612,1 @@\n-                        %81 : boolean = eq %74 %75;\n+                        %81 : java.type:\"boolean\" = eq %74 %75;\n@@ -615,2 +615,2 @@\n-                    ()java.lang.String -> {\n-                        %82 : java.lang.String = constant @\"13\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %82 : java.type:\"java.lang.String\" = constant @\"13\";\n@@ -619,6 +619,2 @@\n-                    ()boolean -> {\n-                        %84 : boolean = constant @\"true\";\n-                        yield %84;\n-                    }\n-                    ()java.lang.String -> {\n-                        %83 : java.lang.String = constant @\"an int\";\n+                    ()java.type:\"boolean\" -> {\n+                        %83 : java.type:\"boolean\" = constant @\"true\";\n@@ -626,0 +622,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %84 : java.type:\"java.lang.String\" = constant @\"an int\";\n+                        yield %84;\n@@ -654,13 +654,13 @@\n-            func @\"caseConstantConv\" (%0 : short)java.lang.String -> {\n-                %1 : Var<short> = var %0 @\"a\";\n-                %2 : int = constant @\"1\";\n-                %3 : short = conv %2;\n-                %4 : Var<short> = var %3 @\"s\";\n-                %5 : int = constant @\"2\";\n-                %6 : byte = conv %5;\n-                %7 : Var<byte> = var %6 @\"b\";\n-                %8 : short = var.load %1;\n-                %9 : java.lang.String = java.switch.expression %8\n-                    (%10 : short)boolean -> {\n-                        %11 : short = var.load %4;\n-                        %12 : boolean = eq %10 %11;\n+            func @\"caseConstantConv\" (%0 : java.type:\"short\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"short\"> = var %0 @\"a\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"short\" = conv %2;\n+                %4 : Var<java.type:\"short\"> = var %3 @\"s\";\n+                %5 : java.type:\"int\" = constant @\"2\";\n+                %6 : java.type:\"byte\" = conv %5;\n+                %7 : Var<java.type:\"byte\"> = var %6 @\"b\";\n+                %8 : java.type:\"short\" = var.load %1;\n+                %9 : java.type:\"java.lang.String\" = java.switch.expression %8\n+                    (%10 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %11 : java.type:\"short\" = var.load %4;\n+                        %12 : java.type:\"boolean\" = eq %10 %11;\n@@ -669,2 +669,2 @@\n-                    ()java.lang.String -> {\n-                        %13 : java.lang.String = constant @\"one\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"one\";\n@@ -673,4 +673,4 @@\n-                    (%14 : short)boolean -> {\n-                        %15 : byte = var.load %7;\n-                        %16 : short = conv %15;\n-                        %17 : boolean = eq %14 %16;\n+                    (%14 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %15 : java.type:\"byte\" = var.load %7;\n+                        %16 : java.type:\"short\" = conv %15;\n+                        %17 : java.type:\"boolean\" = eq %14 %16;\n@@ -679,2 +679,2 @@\n-                    ()java.lang.String -> {\n-                        %18 : java.lang.String = constant @\"three\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %18 : java.type:\"java.lang.String\" = constant @\"three\";\n@@ -683,4 +683,4 @@\n-                    (%19 : short)boolean -> {\n-                        %20 : int = constant @\"3\";\n-                        %21 : short = conv %20;\n-                        %22 : boolean = eq %19 %21;\n+                    (%19 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %20 : java.type:\"int\" = constant @\"3\";\n+                        %21 : java.type:\"short\" = conv %20;\n+                        %22 : java.type:\"boolean\" = eq %19 %21;\n@@ -689,2 +689,2 @@\n-                    ()java.lang.String -> {\n-                        %23 : java.lang.String = constant @\"two\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %23 : java.type:\"java.lang.String\" = constant @\"two\";\n@@ -693,6 +693,2 @@\n-                    ()boolean -> {\n-                        %25 : boolean = constant @\"true\";\n-                        yield %25;\n-                    }\n-                    ()java.lang.String -> {\n-                        %24 : java.lang.String = constant @\"default\";\n+                    ()java.type:\"boolean\" -> {\n+                        %24 : java.type:\"boolean\" = constant @\"true\";\n@@ -700,0 +696,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %25 : java.type:\"java.lang.String\" = constant @\"default\";\n+                        yield %25;\n@@ -717,12 +717,12 @@\n-            func @\"caseConstantConv2\" (%0 : java.lang.Byte)java.lang.String -> {\n-                %1 : Var<java.lang.Byte> = var %0 @\"a\";\n-                %2 : int = constant @\"2\";\n-                %3 : byte = conv %2;\n-                %4 : Var<byte> = var %3 @\"b\";\n-                %5 : java.lang.Byte = var.load %1;\n-                %6 : java.lang.String = java.switch.expression %5\n-                    (%7 : java.lang.Byte)boolean -> {\n-                        %8 : int = constant @\"1\";\n-                        %9 : byte = conv %8;\n-                        %10 : java.lang.Byte = invoke %9 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n-                        %11 : boolean = invoke %7 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"caseConstantConv2\" (%0 : java.type:\"java.lang.Byte\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Byte\"> = var %0 @\"a\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"byte\" = conv %2;\n+                %4 : Var<java.type:\"byte\"> = var %3 @\"b\";\n+                %5 : java.type:\"java.lang.Byte\" = var.load %1;\n+                %6 : java.type:\"java.lang.String\" = java.switch.expression %5\n+                    (%7 : java.type:\"java.lang.Byte\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"byte\" = conv %8;\n+                        %10 : java.type:\"java.lang.Byte\" = invoke %9 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %11 : java.type:\"boolean\" = invoke %7 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -731,2 +731,2 @@\n-                    ()java.lang.String -> {\n-                        %12 : java.lang.String = constant @\"one\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"one\";\n@@ -735,4 +735,4 @@\n-                    (%13 : java.lang.Byte)boolean -> {\n-                        %14 : byte = var.load %4;\n-                        %15 : java.lang.Byte = invoke %14 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n-                        %16 : boolean = invoke %13 %15 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%13 : java.type:\"java.lang.Byte\")java.type:\"boolean\" -> {\n+                        %14 : java.type:\"byte\" = var.load %4;\n+                        %15 : java.type:\"java.lang.Byte\" = invoke %14 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %16 : java.type:\"boolean\" = invoke %13 %15 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -741,2 +741,2 @@\n-                    ()java.lang.String -> {\n-                        %17 : java.lang.String = constant @\"two\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"two\";\n@@ -745,6 +745,2 @@\n-                    ()boolean -> {\n-                        %19 : boolean = constant @\"true\";\n-                        yield %19;\n-                    }\n-                    ()java.lang.String -> {\n-                        %18 : java.lang.String = constant @\"default\";\n+                    ()java.type:\"boolean\" -> {\n+                        %18 : java.type:\"boolean\" = constant @\"true\";\n@@ -752,0 +748,4 @@\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %19 : java.type:\"java.lang.String\" = constant @\"default\";\n+                        yield %19;\n@@ -769,7 +769,7 @@\n-            func @\"noDefaultLabelEnum\" (%0 : SwitchExpressionTest2$E)java.lang.String -> {\n-                %1 : Var<SwitchExpressionTest2$E> = var %0 @\"e\";\n-                %2 : SwitchExpressionTest2$E = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : SwitchExpressionTest2$E)boolean -> {\n-                        %5 : SwitchExpressionTest2$E = field.load @\"SwitchExpressionTest2$E::F()SwitchExpressionTest2$E\";\n-                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"noDefaultLabelEnum\" (%0 : java.type:\"SwitchExpressionTest2$E\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"SwitchExpressionTest2$E\"> = var %0 @\"e\";\n+                %2 : java.type:\"SwitchExpressionTest2$E\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"SwitchExpressionTest2$E\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"SwitchExpressionTest2$E\" = field.load @\"SwitchExpressionTest2$E::F:SwitchExpressionTest2$E\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -778,2 +778,2 @@\n-                    ()java.lang.String -> {\n-                        %7 : java.lang.String = constant @\"f\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"f\";\n@@ -782,3 +782,3 @@\n-                    (%8 : SwitchExpressionTest2$E)boolean -> {\n-                        %9 : SwitchExpressionTest2$E = field.load @\"SwitchExpressionTest2$E::G()SwitchExpressionTest2$E\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"SwitchExpressionTest2$E\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"SwitchExpressionTest2$E\" = field.load @\"SwitchExpressionTest2$E::G:SwitchExpressionTest2$E\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -787,2 +787,2 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"g\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"g\";\n@@ -791,3 +791,3 @@\n-                    ()boolean -> {\n-                        %13 : boolean = constant @\"true\";\n-                        yield %13;\n+                    ()java.type:\"boolean\" -> {\n+                        %12 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %12;\n@@ -795,3 +795,3 @@\n-                    ()java.lang.String -> {\n-                        %12 : java.lang.MatchException = new @\"java.lang.MatchException::<new>()\";\n-                        throw %12;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %13 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        throw %13;\n@@ -811,9 +811,9 @@\n-            func @\"unconditionalPattern\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.Object = constant @null;\n-                %4 : Var<java.lang.Object> = var %3 @\"o\";\n-                %5 : java.lang.String = java.switch.expression %2\n-                    (%6 : java.lang.String)boolean -> {\n-                        %7 : java.lang.String = constant @\"A\";\n-                        %8 : boolean = invoke %6 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"unconditionalPattern\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.Object\" = constant @null;\n+                %4 : Var<java.type:\"java.lang.Object\"> = var %3 @\"o\";\n+                %5 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%6 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"A\";\n+                        %8 : java.type:\"boolean\" = invoke %6 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -822,2 +822,2 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @\"Alphabet\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"Alphabet\";\n@@ -826,4 +826,4 @@\n-                    (%10 : java.lang.String)boolean -> {\n-                        %11 : boolean = pattern.match %10\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object> -> {\n-                                %12 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object> = pattern.type @\"o\";\n+                    (%10 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = pattern.match %10\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object>\" -> {\n+                                %12 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object>\" = pattern.type @\"o\";\n@@ -832,1 +832,1 @@\n-                            (%13 : java.lang.Object)void -> {\n+                            (%13 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n@@ -838,2 +838,2 @@\n-                    ()java.lang.String -> {\n-                        %14 : java.lang.String = constant @\"default\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %14 : java.type:\"java.lang.String\" = constant @\"default\";\n@@ -857,12 +857,12 @@\n-            func @\"noDefault\" (%0 : SwitchExpressionTest2$A)java.lang.String -> {\n-                %1 : Var<SwitchExpressionTest2$A> = var %0 @\"a\";\n-                %2 : SwitchExpressionTest2$A = var.load %1;\n-                %3 : SwitchExpressionTest2$B = constant @null;\n-                %4 : Var<SwitchExpressionTest2$B> = var %3 @\"b\";\n-                %5 : .<SwitchExpressionTest2, SwitchExpressionTest2$C> = constant @null;\n-                %6 : Var<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = var %5 @\"c\";\n-                %7 : java.lang.String = java.switch.expression %2\n-                    (%8 : SwitchExpressionTest2$A)boolean -> {\n-                        %9 : boolean = pattern.match %8\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B> -> {\n-                                %10 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B> = pattern.type @\"b\";\n+            func @\"noDefault\" (%0 : java.type:\"SwitchExpressionTest2$A\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"SwitchExpressionTest2$A\"> = var %0 @\"a\";\n+                %2 : java.type:\"SwitchExpressionTest2$A\" = var.load %1;\n+                %3 : java.type:\"SwitchExpressionTest2$B\" = constant @null;\n+                %4 : Var<java.type:\"SwitchExpressionTest2$B\"> = var %3 @\"b\";\n+                %5 : java.type:\"SwitchExpressionTest2::C\" = constant @null;\n+                %6 : Var<java.type:\"SwitchExpressionTest2::C\"> = var %5 @\"c\";\n+                %7 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%8 : java.type:\"SwitchExpressionTest2$A\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"boolean\" = pattern.match %8\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B>\" -> {\n+                                %10 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B>\" = pattern.type @\"b\";\n@@ -871,1 +871,1 @@\n-                            (%11 : SwitchExpressionTest2$B)void -> {\n+                            (%11 : java.type:\"SwitchExpressionTest2$B\")java.type:\"void\" -> {\n@@ -877,2 +877,2 @@\n-                    ()java.lang.String -> {\n-                        %12 : java.lang.String = constant @\"B\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"B\";\n@@ -881,4 +881,4 @@\n-                    (%13 : SwitchExpressionTest2$A)boolean -> {\n-                        %14 : boolean = pattern.match %13\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> -> {\n-                                %15 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = pattern.type @\"c\";\n+                    (%13 : java.type:\"SwitchExpressionTest2$A\")java.type:\"boolean\" -> {\n+                        %14 : java.type:\"boolean\" = pattern.match %13\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2::C>\" -> {\n+                                %15 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchExpressionTest2::C>\" = pattern.type @\"c\";\n@@ -887,1 +887,1 @@\n-                            (%16 : .<SwitchExpressionTest2, SwitchExpressionTest2$C>)void -> {\n+                            (%16 : java.type:\"SwitchExpressionTest2::C\")java.type:\"void\" -> {\n@@ -893,2 +893,2 @@\n-                    ()java.lang.String -> {\n-                        %17 : java.lang.String = constant @\"C\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %17 : java.type:\"java.lang.String\" = constant @\"C\";\n@@ -897,3 +897,3 @@\n-                    ()boolean -> {\n-                        %19 : boolean = constant @\"true\";\n-                        yield %19;\n+                    ()java.type:\"boolean\" -> {\n+                        %18 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %18;\n@@ -901,3 +901,3 @@\n-                    ()java.lang.String -> {\n-                        %18 : java.lang.MatchException = new @\"java.lang.MatchException::<new>()\";\n-                        throw %18;\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %19 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        throw %19;\n@@ -917,7 +917,11 @@\n-            func @\"defaultNotTheLastLabel\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.String = constant @\"M\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+            func @\"defaultNotTheLastLabel\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.String\" = constant @\"M\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %7 : java.type:\"java.lang.String\" = constant @\"Mow\";\n@@ -926,3 +930,4 @@\n-                    ()java.lang.String -> {\n-                        %8 : java.lang.String = constant @\"Mow\";\n-                        yield %8;\n+                    (%8 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"A\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %10;\n@@ -930,3 +935,2 @@\n-                    (%9 : java.lang.String)boolean -> {\n-                        %10 : java.lang.String = constant @\"A\";\n-                        %11 : boolean = invoke %9 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %11 : java.type:\"java.lang.String\" = constant @\"Aow\";\n@@ -935,2 +939,2 @@\n-                    ()java.lang.String -> {\n-                        %12 : java.lang.String = constant @\"Aow\";\n+                    ()java.type:\"boolean\" -> {\n+                        %12 : java.type:\"boolean\" = constant @\"true\";\n@@ -939,2 +943,2 @@\n-                    ()boolean -> {\n-                        %13 : boolean = constant @\"true\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %13 : java.type:\"java.lang.String\" = constant @\"else\";\n@@ -942,4 +946,0 @@\n-                    }\n-                    ()java.lang.String -> {\n-                        %4 : java.lang.String = constant @\"else\";\n-                        yield %4;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":455,"deletions":455,"binary":false,"changes":910,"status":"modified"},{"patch":"@@ -16,56 +16,56 @@\n-            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)java.lang.String -> {\n-                  %1 : Var<java.lang.String> = var %0 @\"r\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"s\";\n-                  %4 : java.lang.String = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : java.lang.String)boolean -> {\n-                          %6 : java.lang.String = constant @\"FOO\";\n-                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : java.lang.String = constant @\"BAR\";\n-                          %10 : java.lang.String = concat %8 %9;\n-                          var.store %3 %10;\n-                          yield;\n-                      }\n-                      (%11 : java.lang.String)boolean -> {\n-                          %12 : java.lang.String = constant @\"BAR\";\n-                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %13;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %3;\n-                          %15 : java.lang.String = constant @\"BAZ\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %3 %16;\n-                          yield;\n-                      }\n-                      (%17 : java.lang.String)boolean -> {\n-                          %18 : java.lang.String = constant @\"BAZ\";\n-                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %19;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"FOO\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %26 : boolean = constant @\"true\";\n-                          yield %26;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"caseConstantRuleExpression\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"s\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    (%11 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %13;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n+                        var.store %3 %16;\n+                        yield;\n+                    }\n+                    (%17 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %19;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -86,56 +86,56 @@\n-            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)java.lang.String -> {\n-                  %1 : Var<java.lang.String> = var %0 @\"r\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"s\";\n-                  %4 : java.lang.String = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : java.lang.String)boolean -> {\n-                          %6 : java.lang.String = constant @\"FOO\";\n-                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : java.lang.String = constant @\"BAR\";\n-                          %10 : java.lang.String = concat %8 %9;\n-                          var.store %3 %10;\n-                          yield;\n-                      }\n-                      (%11 : java.lang.String)boolean -> {\n-                          %12 : java.lang.String = constant @\"BAR\";\n-                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %13;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %3;\n-                          %15 : java.lang.String = constant @\"BAZ\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %3 %16;\n-                          yield;\n-                      }\n-                      (%17 : java.lang.String)boolean -> {\n-                          %18 : java.lang.String = constant @\"BAZ\";\n-                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %19;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"FOO\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %26 : boolean = constant @\"true\";\n-                          yield %26;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"caseConstantRuleBlock\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"r\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"s\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    (%11 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %13;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n+                        var.store %3 %16;\n+                        yield;\n+                    }\n+                    (%17 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %19;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -164,56 +164,56 @@\n-            func @\"caseConstantStatement\" (%0 : java.lang.String)java.lang.String -> {\n-                  %1 : Var<java.lang.String> = var %0 @\"s\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.String = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : java.lang.String)boolean -> {\n-                          %6 : java.lang.String = constant @\"FOO\";\n-                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : java.lang.String = constant @\"BAR\";\n-                          %10 : java.lang.String = concat %8 %9;\n-                          var.store %3 %10;\n-                          java.break;\n-                      }\n-                      (%11 : java.lang.String)boolean -> {\n-                          %12 : java.lang.String = constant @\"BAR\";\n-                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %13;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %3;\n-                          %15 : java.lang.String = constant @\"BAZ\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %3 %16;\n-                          java.break;\n-                      }\n-                      (%17 : java.lang.String)boolean -> {\n-                          %18 : java.lang.String = constant @\"BAZ\";\n-                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %19;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"FOO\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          java.break;\n-                      }\n-                      ()boolean -> {\n-                          %26 : boolean = constant @\"true\";\n-                          yield %26;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"caseConstantStatement\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n+                        var.store %3 %10;\n+                        java.break;\n+                    }\n+                    (%11 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"BAR\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %13;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n+                        var.store %3 %16;\n+                        java.break;\n+                    }\n+                    (%17 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"java.lang.String\" = constant @\"BAZ\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %19;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"FOO\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        java.break;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -241,6 +241,6 @@\n-            func @\"caseConstantMultiLabels\" (%0 : char)java.lang.String -> {\n-                %1 : Var<char> = var %0 @\"c\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : char = var.load %1;\n-                %5 : char = invoke %4 @\"java.lang.Character::toLowerCase(char)char\";\n+            func @\"caseConstantMultiLabels\" (%0 : java.type:\"char\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"char\"> = var %0 @\"c\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"char\" = var.load %1;\n+                %5 : java.type:\"char\" = invoke %4 @\"java.lang.Character::toLowerCase(char):char\";\n@@ -248,5 +248,5 @@\n-                    (%6 : char)boolean -> {\n-                        %7 : boolean = java.cor\n-                            ()boolean -> {\n-                                %8 : char = constant @\"a\";\n-                                %9 : boolean = eq %6 %8;\n+                    (%6 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %7 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %8 : java.type:\"char\" = constant @\"a\";\n+                                %9 : java.type:\"boolean\" = eq %6 %8;\n@@ -255,3 +255,3 @@\n-                            ()boolean -> {\n-                                %10 : char = constant @\"e\";\n-                                %11 : boolean = eq %6 %10;\n+                            ()java.type:\"boolean\" -> {\n+                                %10 : java.type:\"char\" = constant @\"e\";\n+                                %11 : java.type:\"boolean\" = eq %6 %10;\n@@ -260,3 +260,3 @@\n-                            ()boolean -> {\n-                                %12 : char = constant @\"i\";\n-                                %13 : boolean = eq %6 %12;\n+                            ()java.type:\"boolean\" -> {\n+                                %12 : java.type:\"char\" = constant @\"i\";\n+                                %13 : java.type:\"boolean\" = eq %6 %12;\n@@ -265,3 +265,3 @@\n-                            ()boolean -> {\n-                                %14 : char = constant @\"o\";\n-                                %15 : boolean = eq %6 %14;\n+                            ()java.type:\"boolean\" -> {\n+                                %14 : java.type:\"char\" = constant @\"o\";\n+                                %15 : java.type:\"boolean\" = eq %6 %14;\n@@ -270,3 +270,3 @@\n-                            ()boolean -> {\n-                                %16 : char = constant @\"u\";\n-                                %17 : boolean = eq %6 %16;\n+                            ()java.type:\"boolean\" -> {\n+                                %16 : java.type:\"char\" = constant @\"u\";\n+                                %17 : java.type:\"boolean\" = eq %6 %16;\n@@ -277,4 +277,4 @@\n-                    ()void -> {\n-                        %18 : java.lang.String = var.load %3;\n-                        %19 : java.lang.String = constant @\"vowel\";\n-                        %20 : java.lang.String = concat %18 %19;\n+                    ()java.type:\"void\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %3;\n+                        %19 : java.type:\"java.lang.String\" = constant @\"vowel\";\n+                        %20 : java.type:\"java.lang.String\" = concat %18 %19;\n@@ -284,3 +284,3 @@\n-                    ()boolean -> {\n-                        %24 : boolean = constant @\"true\";\n-                        yield %24;\n+                    ()java.type:\"boolean\" -> {\n+                        %21 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %21;\n@@ -288,5 +288,5 @@\n-                    ()void -> {\n-                        %21 : java.lang.String = var.load %3;\n-                        %22 : java.lang.String = constant @\"consonant\";\n-                        %23 : java.lang.String = concat %21 %22;\n-                        var.store %3 %23;\n+                    ()java.type:\"void\" -> {\n+                        %22 : java.type:\"java.lang.String\" = var.load %3;\n+                        %23 : java.type:\"java.lang.String\" = constant @\"consonant\";\n+                        %24 : java.type:\"java.lang.String\" = concat %22 %23;\n+                        var.store %3 %24;\n@@ -295,2 +295,2 @@\n-                %24 : java.lang.String = var.load %3;\n-                return %24;\n+                %25 : java.type:\"java.lang.String\" = var.load %3;\n+                return %25;\n@@ -313,5 +313,5 @@\n-            func @\"caseConstantThrow\" (%0 : java.lang.Integer)java.lang.String -> {\n-                %1 : Var<java.lang.Integer> = var %0 @\"i\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Integer = var.load %1;\n+            func @\"caseConstantThrow\" (%0 : java.type:\"java.lang.Integer\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Integer\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Integer\" = var.load %1;\n@@ -319,4 +319,4 @@\n-                    (%5 : java.lang.Integer)boolean -> {\n-                        %6 : int = constant @\"8\";\n-                        %7 : java.lang.Integer = invoke %6 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %8 : boolean = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%5 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"8\";\n+                        %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %8 : java.type:\"boolean\" = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -325,2 +325,2 @@\n-                    ()void -> {\n-                        %9 : java.lang.IllegalArgumentException = new @\"java.lang.IllegalArgumentException::<new>()\";\n+                    ()java.type:\"void\" -> {\n+                        %9 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n@@ -329,4 +329,4 @@\n-                    (%10 : java.lang.Integer)boolean -> {\n-                        %11 : int = constant @\"9\";\n-                        %12 : java.lang.Integer = invoke %11 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %13 : boolean = invoke %10 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%10 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %11 : java.type:\"int\" = constant @\"9\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %13 : java.type:\"boolean\" = invoke %10 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -335,4 +335,4 @@\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"Nine\";\n-                        %16 : java.lang.String = concat %14 %15;\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"Nine\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n@@ -342,2 +342,2 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = constant @\"true\";\n@@ -346,5 +346,5 @@\n-                    ()void -> {\n-                        %17 : java.lang.String = var.load %3;\n-                        %18 : java.lang.String = constant @\"An integer\";\n-                        %19 : java.lang.String = concat %17 %18;\n-                        var.store %3 %19;\n+                    ()java.type:\"void\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %3;\n+                        %19 : java.type:\"java.lang.String\" = constant @\"An integer\";\n+                        %20 : java.type:\"java.lang.String\" = concat %18 %19;\n+                        var.store %3 %20;\n@@ -353,2 +353,2 @@\n-                %20 : java.lang.String = var.load %3;\n-                return %20;\n+                %21 : java.type:\"java.lang.String\" = var.load %3;\n+                return %21;\n@@ -369,5 +369,5 @@\n-            func @\"caseConstantNullLabel\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.String = var.load %1;\n+            func @\"caseConstantNullLabel\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n@@ -375,3 +375,3 @@\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.Object = constant @null;\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%5 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"java.lang.Object\" = constant @null;\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -380,4 +380,4 @@\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : java.lang.String = constant @\"null\";\n-                        %10 : java.lang.String = concat %8 %9;\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"null\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n@@ -387,3 +387,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %11 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %11;\n@@ -391,5 +391,5 @@\n-                    ()void -> {\n-                        %11 : java.lang.String = var.load %3;\n-                        %12 : java.lang.String = constant @\"non null\";\n-                        %13 : java.lang.String = concat %11 %12;\n-                        var.store %3 %13;\n+                    ()java.type:\"void\" -> {\n+                        %12 : java.type:\"java.lang.String\" = var.load %3;\n+                        %13 : java.type:\"java.lang.String\" = constant @\"non null\";\n+                        %14 : java.type:\"java.lang.String\" = concat %12 %13;\n+                        var.store %3 %14;\n@@ -398,2 +398,2 @@\n-                %14 : java.lang.String = var.load %3;\n-                return %14;\n+                %15 : java.type:\"java.lang.String\" = var.load %3;\n+                return %15;\n@@ -424,40 +424,40 @@\n-            func @\"caseConstantFallThrough\" (%0 : char)java.lang.String -> {\n-                  %1 : Var<char> = var %0 @\"c\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : char = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : char)boolean -> {\n-                          %6 : char = constant @\"A\";\n-                          %7 : boolean = eq %5 %6;\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          java.switch.fallthrough;\n-                      }\n-                      (%8 : char)boolean -> {\n-                          %9 : char = constant @\"B\";\n-                          %10 : boolean = eq %8 %9;\n-                          yield %10;\n-                      }\n-                      ()void -> {\n-                          %11 : java.lang.String = var.load %3;\n-                          %12 : java.lang.String = constant @\"A or B\";\n-                          %13 : java.lang.String = concat %11 %12;\n-                          var.store %3 %13;\n-                          java.break;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %3;\n-                          %15 : java.lang.String = constant @\"Neither A nor B\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %3 %16;\n-                          yield;\n-                      };\n-                  %17 : java.lang.String = var.load %3;\n-                  return %17;\n-              };\n+            func @\"caseConstantFallThrough\" (%0 : java.type:\"char\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"char\"> = var %0 @\"c\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"char\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"char\" = constant @\"A\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        java.switch.fallthrough;\n+                    }\n+                    (%8 : java.type:\"char\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"char\" = constant @\"B\";\n+                        %10 : java.type:\"boolean\" = eq %8 %9;\n+                        yield %10;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %11 : java.type:\"java.lang.String\" = var.load %3;\n+                        %12 : java.type:\"java.lang.String\" = constant @\"A or B\";\n+                        %13 : java.type:\"java.lang.String\" = concat %11 %12;\n+                        var.store %3 %13;\n+                        java.break;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %14 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %14;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %15 : java.type:\"java.lang.String\" = var.load %3;\n+                        %16 : java.type:\"java.lang.String\" = constant @\"Neither A nor B\";\n+                        %17 : java.type:\"java.lang.String\" = concat %15 %16;\n+                        var.store %3 %17;\n+                        yield;\n+                    };\n+                %18 : java.type:\"java.lang.String\" = var.load %3;\n+                return %18;\n+            };\n@@ -483,80 +483,80 @@\n-            func @\"caseConstantEnum\" (%0 : SwitchStatementTest$Day)java.lang.String -> {\n-                  %1 : Var<SwitchStatementTest$Day> = var %0 @\"d\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : SwitchStatementTest$Day = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : SwitchStatementTest$Day)boolean -> {\n-                          %6 : boolean = java.cor\n-                              ()boolean -> {\n-                                  %7 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::MON()SwitchStatementTest$Day\";\n-                                  %8 : boolean = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                  yield %8;\n-                              }\n-                              ()boolean -> {\n-                                  %9 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::FRI()SwitchStatementTest$Day\";\n-                                  %10 : boolean = invoke %5 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                  yield %10;\n-                              }\n-                              ()boolean -> {\n-                                  %11 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SUN()SwitchStatementTest$Day\";\n-                                  %12 : boolean = invoke %5 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                  yield %12;\n-                              };\n-                          yield %6;\n-                      }\n-                      ()void -> {\n-                          %13 : java.lang.String = var.load %3;\n-                          %14 : int = constant @\"6\";\n-                          %15 : java.lang.String = concat %13 %14;\n-                          var.store %3 %15;\n-                          yield;\n-                      }\n-                      (%16 : SwitchStatementTest$Day)boolean -> {\n-                          %17 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::TUE()SwitchStatementTest$Day\";\n-                          %18 : boolean = invoke %16 %17 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %18;\n-                      }\n-                      ()void -> {\n-                          %19 : java.lang.String = var.load %3;\n-                          %20 : int = constant @\"7\";\n-                          %21 : java.lang.String = concat %19 %20;\n-                          var.store %3 %21;\n-                          yield;\n-                      }\n-                      (%22 : SwitchStatementTest$Day)boolean -> {\n-                          %23 : boolean = java.cor\n-                              ()boolean -> {\n-                                  %24 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::THU()SwitchStatementTest$Day\";\n-                                  %25 : boolean = invoke %22 %24 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                  yield %25;\n-                              }\n-                              ()boolean -> {\n-                                  %26 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SAT()SwitchStatementTest$Day\";\n-                                  %27 : boolean = invoke %22 %26 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                  yield %27;\n-                              };\n-                          yield %23;\n-                      }\n-                      ()void -> {\n-                          %28 : java.lang.String = var.load %3;\n-                          %29 : int = constant @\"8\";\n-                          %30 : java.lang.String = concat %28 %29;\n-                          var.store %3 %30;\n-                          yield;\n-                      }\n-                      (%31 : SwitchStatementTest$Day)boolean -> {\n-                          %32 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::WED()SwitchStatementTest$Day\";\n-                          %33 : boolean = invoke %31 %32 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %33;\n-                      }\n-                      ()void -> {\n-                          %34 : java.lang.String = var.load %3;\n-                          %35 : int = constant @\"9\";\n-                          %36 : java.lang.String = concat %34 %35;\n-                          var.store %3 %36;\n-                          yield;\n-                      };\n-                  %37 : java.lang.String = var.load %3;\n-                  return %37;\n-              };\n+            func @\"caseConstantEnum\" (%0 : java.type:\"SwitchStatementTest$Day\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"SwitchStatementTest$Day\"> = var %0 @\"d\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"SwitchStatementTest$Day\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"SwitchStatementTest$Day\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %7 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::MON:SwitchStatementTest$Day\";\n+                                %8 : java.type:\"boolean\" = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                yield %8;\n+                            }\n+                            ()java.type:\"boolean\" -> {\n+                                %9 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::FRI:SwitchStatementTest$Day\";\n+                                %10 : java.type:\"boolean\" = invoke %5 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                yield %10;\n+                            }\n+                            ()java.type:\"boolean\" -> {\n+                                %11 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::SUN:SwitchStatementTest$Day\";\n+                                %12 : java.type:\"boolean\" = invoke %5 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                yield %12;\n+                            };\n+                        yield %6;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"int\" = constant @\"6\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.type:\"SwitchStatementTest$Day\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::TUE:SwitchStatementTest$Day\";\n+                        %18 : java.type:\"boolean\" = invoke %16 %17 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %18;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %19 : java.type:\"java.lang.String\" = var.load %3;\n+                        %20 : java.type:\"int\" = constant @\"7\";\n+                        %21 : java.type:\"java.lang.String\" = concat %19 %20;\n+                        var.store %3 %21;\n+                        yield;\n+                    }\n+                    (%22 : java.type:\"SwitchStatementTest$Day\")java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = java.cor\n+                            ()java.type:\"boolean\" -> {\n+                                %24 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::THU:SwitchStatementTest$Day\";\n+                                %25 : java.type:\"boolean\" = invoke %22 %24 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                yield %25;\n+                            }\n+                            ()java.type:\"boolean\" -> {\n+                                %26 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::SAT:SwitchStatementTest$Day\";\n+                                %27 : java.type:\"boolean\" = invoke %22 %26 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                yield %27;\n+                            };\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %28 : java.type:\"java.lang.String\" = var.load %3;\n+                        %29 : java.type:\"int\" = constant @\"8\";\n+                        %30 : java.type:\"java.lang.String\" = concat %28 %29;\n+                        var.store %3 %30;\n+                        yield;\n+                    }\n+                    (%31 : java.type:\"SwitchStatementTest$Day\")java.type:\"boolean\" -> {\n+                        %32 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::WED:SwitchStatementTest$Day\";\n+                        %33 : java.type:\"boolean\" = invoke %31 %32 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %33;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %34 : java.type:\"java.lang.String\" = var.load %3;\n+                        %35 : java.type:\"int\" = constant @\"9\";\n+                        %36 : java.type:\"java.lang.String\" = concat %34 %35;\n+                        var.store %3 %36;\n+                        yield;\n+                    };\n+                %37 : java.type:\"java.lang.String\" = var.load %3;\n+                return %37;\n+            };\n@@ -581,211 +581,211 @@\n-            func @\"caseConstantOtherKindsOfExpr\" (%0 : int)java.lang.String -> {\n-                  %1 : Var<int> = var %0 @\"i\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : int = constant @\"11\";\n-                  %5 : Var<int> = var %4 @\"eleven\";\n-                  %6 : int = var.load %1;\n-                  java.switch.statement %6\n-                      (%7 : int)boolean -> {\n-                          %8 : int = constant @\"1\";\n-                          %9 : int = constant @\"15\";\n-                          %10 : int = and %8 %9;\n-                          %11 : boolean = eq %7 %10;\n-                          yield %11;\n-                      }\n-                      ()void -> {\n-                          %12 : java.lang.String = var.load %3;\n-                          %13 : int = constant @\"1\";\n-                          %14 : java.lang.String = concat %12 %13;\n-                          var.store %3 %14;\n-                          yield;\n-                      }\n-                      (%15 : int)boolean -> {\n-                          %16 : int = constant @\"4\";\n-                          %17 : int = constant @\"1\";\n-                          %18 : int = ashr %16 %17;\n-                          %19 : boolean = eq %15 %18;\n-                          yield %19;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"2\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          yield;\n-                      }\n-                      (%23 : int)boolean -> {\n-                          %24 : long = constant @\"3\";\n-                          %25 : int = conv %24;\n-                          %26 : boolean = eq %23 %25;\n-                          yield %26;\n-                      }\n-                      ()void -> {\n-                          %27 : java.lang.String = var.load %3;\n-                          %28 : int = constant @\"3\";\n-                          %29 : java.lang.String = concat %27 %28;\n-                          var.store %3 %29;\n-                          yield;\n-                      }\n-                      (%30 : int)boolean -> {\n-                          %31 : int = constant @\"2\";\n-                          %32 : int = constant @\"1\";\n-                          %33 : int = lshl %31 %32;\n-                          %34 : boolean = eq %30 %33;\n-                          yield %34;\n-                      }\n-                      ()void -> {\n-                          %35 : java.lang.String = var.load %3;\n-                          %36 : int = constant @\"4\";\n-                          %37 : java.lang.String = concat %35 %36;\n-                          var.store %3 %37;\n-                          yield;\n-                      }\n-                      (%38 : int)boolean -> {\n-                          %39 : int = constant @\"10\";\n-                          %40 : int = constant @\"2\";\n-                          %41 : int = div %39 %40;\n-                          %42 : boolean = eq %38 %41;\n-                          yield %42;\n-                      }\n-                      ()void -> {\n-                          %43 : java.lang.String = var.load %3;\n-                          %44 : int = constant @\"5\";\n-                          %45 : java.lang.String = concat %43 %44;\n-                          var.store %3 %45;\n-                          yield;\n-                      }\n-                      (%46 : int)boolean -> {\n-                          %47 : int = constant @\"12\";\n-                          %48 : int = constant @\"6\";\n-                          %49 : int = sub %47 %48;\n-                          %50 : boolean = eq %46 %49;\n-                          yield %50;\n-                      }\n-                      ()void -> {\n-                          %51 : java.lang.String = var.load %3;\n-                          %52 : int = constant @\"6\";\n-                          %53 : java.lang.String = concat %51 %52;\n-                          var.store %3 %53;\n-                          yield;\n-                      }\n-                      (%54 : int)boolean -> {\n-                          %55 : int = constant @\"3\";\n-                          %56 : int = constant @\"4\";\n-                          %57 : int = add %55 %56;\n-                          %58 : boolean = eq %54 %57;\n-                          yield %58;\n-                      }\n-                      ()void -> {\n-                          %59 : java.lang.String = var.load %3;\n-                          %60 : int = constant @\"7\";\n-                          %61 : java.lang.String = concat %59 %60;\n-                          var.store %3 %61;\n-                          yield;\n-                      }\n-                      (%62 : int)boolean -> {\n-                          %63 : int = constant @\"2\";\n-                          %64 : int = constant @\"2\";\n-                          %65 : int = mul %63 %64;\n-                          %66 : int = constant @\"2\";\n-                          %67 : int = mul %65 %66;\n-                          %68 : boolean = eq %62 %67;\n-                          yield %68;\n-                      }\n-                      ()void -> {\n-                          %69 : java.lang.String = var.load %3;\n-                          %70 : int = constant @\"8\";\n-                          %71 : java.lang.String = concat %69 %70;\n-                          var.store %3 %71;\n-                          yield;\n-                      }\n-                      (%72 : int)boolean -> {\n-                          %73 : int = constant @\"8\";\n-                          %74 : int = constant @\"1\";\n-                          %75 : int = or %73 %74;\n-                          %76 : boolean = eq %72 %75;\n-                          yield %76;\n-                      }\n-                      ()void -> {\n-                          %77 : java.lang.String = var.load %3;\n-                          %78 : int = constant @\"9\";\n-                          %79 : java.lang.String = concat %77 %78;\n-                          var.store %3 %79;\n-                          yield;\n-                      }\n-                      (%80 : int)boolean -> {\n-                          %81 : int = constant @\"10\";\n-                          %82 : boolean = eq %80 %81;\n-                          yield %82;\n-                      }\n-                      ()void -> {\n-                          %83 : java.lang.String = var.load %3;\n-                          %84 : int = constant @\"10\";\n-                          %85 : java.lang.String = concat %83 %84;\n-                          var.store %3 %85;\n-                          yield;\n-                      }\n-                      (%86 : int)boolean -> {\n-                          %87 : int = var.load %5;\n-                          %88 : boolean = eq %86 %87;\n-                          yield %88;\n-                      }\n-                      ()void -> {\n-                          %89 : java.lang.String = var.load %3;\n-                          %90 : int = constant @\"11\";\n-                          %91 : java.lang.String = concat %89 %90;\n-                          var.store %3 %91;\n-                          yield;\n-                      }\n-                      (%92 : int)boolean -> {\n-                          %93 : int = field.load @\"SwitchStatementTest$Constants::c1()int\";\n-                          %94 : boolean = eq %92 %93;\n-                          yield %94;\n-                      }\n-                      ()void -> {\n-                          %95 : java.lang.String = var.load %3;\n-                          %96 : int = field.load @\"SwitchStatementTest$Constants::c1()int\";\n-                          %97 : java.lang.String = concat %95 %96;\n-                          var.store %3 %97;\n-                          yield;\n-                      }\n-                      (%98 : int)boolean -> {\n-                          %99 : int = java.cexpression\n-                              ()boolean -> {\n-                                  %100 : int = constant @\"1\";\n-                                  %101 : int = constant @\"0\";\n-                                  %102 : boolean = gt %100 %101;\n-                                  yield %102;\n-                              }\n-                              ()int -> {\n-                                  %103 : int = constant @\"13\";\n-                                  yield %103;\n-                              }\n-                              ()int -> {\n-                                  %104 : int = constant @\"133\";\n-                                  yield %104;\n-                              };\n-                          %105 : boolean = eq %98 %99;\n-                          yield %105;\n-                      }\n-                      ()void -> {\n-                          %106 : java.lang.String = var.load %3;\n-                          %107 : int = constant @\"13\";\n-                          %108 : java.lang.String = concat %106 %107;\n-                          var.store %3 %108;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %109 : boolean = constant @\"true\";\n-                          yield %109;\n-                      }\n-                      ()void -> {\n-                          %110 : java.lang.String = var.load %3;\n-                          %111 : java.lang.String = constant @\"an int\";\n-                          %112 : java.lang.String = concat %110 %111;\n-                          var.store %3 %112;\n-                          yield;\n-                      };\n-                  %113 : java.lang.String = var.load %3;\n-                  return %113;\n-              };\n+            func @\"caseConstantOtherKindsOfExpr\" (%0 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"int\" = constant @\"11\";\n+                %5 : Var<java.type:\"int\"> = var %4 @\"eleven\";\n+                %6 : java.type:\"int\" = var.load %1;\n+                java.switch.statement %6\n+                    (%7 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"int\" = constant @\"15\";\n+                        %10 : java.type:\"int\" = and %8 %9;\n+                        %11 : java.type:\"boolean\" = eq %7 %10;\n+                        yield %11;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %12 : java.type:\"java.lang.String\" = var.load %3;\n+                        %13 : java.type:\"int\" = constant @\"1\";\n+                        %14 : java.type:\"java.lang.String\" = concat %12 %13;\n+                        var.store %3 %14;\n+                        yield;\n+                    }\n+                    (%15 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %16 : java.type:\"int\" = constant @\"4\";\n+                        %17 : java.type:\"int\" = constant @\"1\";\n+                        %18 : java.type:\"int\" = ashr %16 %17;\n+                        %19 : java.type:\"boolean\" = eq %15 %18;\n+                        yield %19;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"2\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    (%23 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %24 : java.type:\"long\" = constant @\"3\";\n+                        %25 : java.type:\"int\" = conv %24;\n+                        %26 : java.type:\"boolean\" = eq %23 %25;\n+                        yield %26;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %27 : java.type:\"java.lang.String\" = var.load %3;\n+                        %28 : java.type:\"int\" = constant @\"3\";\n+                        %29 : java.type:\"java.lang.String\" = concat %27 %28;\n+                        var.store %3 %29;\n+                        yield;\n+                    }\n+                    (%30 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %31 : java.type:\"int\" = constant @\"2\";\n+                        %32 : java.type:\"int\" = constant @\"1\";\n+                        %33 : java.type:\"int\" = lshl %31 %32;\n+                        %34 : java.type:\"boolean\" = eq %30 %33;\n+                        yield %34;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %35 : java.type:\"java.lang.String\" = var.load %3;\n+                        %36 : java.type:\"int\" = constant @\"4\";\n+                        %37 : java.type:\"java.lang.String\" = concat %35 %36;\n+                        var.store %3 %37;\n+                        yield;\n+                    }\n+                    (%38 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %39 : java.type:\"int\" = constant @\"10\";\n+                        %40 : java.type:\"int\" = constant @\"2\";\n+                        %41 : java.type:\"int\" = div %39 %40;\n+                        %42 : java.type:\"boolean\" = eq %38 %41;\n+                        yield %42;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %43 : java.type:\"java.lang.String\" = var.load %3;\n+                        %44 : java.type:\"int\" = constant @\"5\";\n+                        %45 : java.type:\"java.lang.String\" = concat %43 %44;\n+                        var.store %3 %45;\n+                        yield;\n+                    }\n+                    (%46 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %47 : java.type:\"int\" = constant @\"12\";\n+                        %48 : java.type:\"int\" = constant @\"6\";\n+                        %49 : java.type:\"int\" = sub %47 %48;\n+                        %50 : java.type:\"boolean\" = eq %46 %49;\n+                        yield %50;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %51 : java.type:\"java.lang.String\" = var.load %3;\n+                        %52 : java.type:\"int\" = constant @\"6\";\n+                        %53 : java.type:\"java.lang.String\" = concat %51 %52;\n+                        var.store %3 %53;\n+                        yield;\n+                    }\n+                    (%54 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %55 : java.type:\"int\" = constant @\"3\";\n+                        %56 : java.type:\"int\" = constant @\"4\";\n+                        %57 : java.type:\"int\" = add %55 %56;\n+                        %58 : java.type:\"boolean\" = eq %54 %57;\n+                        yield %58;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %59 : java.type:\"java.lang.String\" = var.load %3;\n+                        %60 : java.type:\"int\" = constant @\"7\";\n+                        %61 : java.type:\"java.lang.String\" = concat %59 %60;\n+                        var.store %3 %61;\n+                        yield;\n+                    }\n+                    (%62 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %63 : java.type:\"int\" = constant @\"2\";\n+                        %64 : java.type:\"int\" = constant @\"2\";\n+                        %65 : java.type:\"int\" = mul %63 %64;\n+                        %66 : java.type:\"int\" = constant @\"2\";\n+                        %67 : java.type:\"int\" = mul %65 %66;\n+                        %68 : java.type:\"boolean\" = eq %62 %67;\n+                        yield %68;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %69 : java.type:\"java.lang.String\" = var.load %3;\n+                        %70 : java.type:\"int\" = constant @\"8\";\n+                        %71 : java.type:\"java.lang.String\" = concat %69 %70;\n+                        var.store %3 %71;\n+                        yield;\n+                    }\n+                    (%72 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %73 : java.type:\"int\" = constant @\"8\";\n+                        %74 : java.type:\"int\" = constant @\"1\";\n+                        %75 : java.type:\"int\" = or %73 %74;\n+                        %76 : java.type:\"boolean\" = eq %72 %75;\n+                        yield %76;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %77 : java.type:\"java.lang.String\" = var.load %3;\n+                        %78 : java.type:\"int\" = constant @\"9\";\n+                        %79 : java.type:\"java.lang.String\" = concat %77 %78;\n+                        var.store %3 %79;\n+                        yield;\n+                    }\n+                    (%80 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %81 : java.type:\"int\" = constant @\"10\";\n+                        %82 : java.type:\"boolean\" = eq %80 %81;\n+                        yield %82;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %83 : java.type:\"java.lang.String\" = var.load %3;\n+                        %84 : java.type:\"int\" = constant @\"10\";\n+                        %85 : java.type:\"java.lang.String\" = concat %83 %84;\n+                        var.store %3 %85;\n+                        yield;\n+                    }\n+                    (%86 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %87 : java.type:\"int\" = var.load %5;\n+                        %88 : java.type:\"boolean\" = eq %86 %87;\n+                        yield %88;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %89 : java.type:\"java.lang.String\" = var.load %3;\n+                        %90 : java.type:\"int\" = constant @\"11\";\n+                        %91 : java.type:\"java.lang.String\" = concat %89 %90;\n+                        var.store %3 %91;\n+                        yield;\n+                    }\n+                    (%92 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %93 : java.type:\"int\" = field.load @\"SwitchStatementTest$Constants::c1:int\";\n+                        %94 : java.type:\"boolean\" = eq %92 %93;\n+                        yield %94;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %95 : java.type:\"java.lang.String\" = var.load %3;\n+                        %96 : java.type:\"int\" = field.load @\"SwitchStatementTest$Constants::c1:int\";\n+                        %97 : java.type:\"java.lang.String\" = concat %95 %96;\n+                        var.store %3 %97;\n+                        yield;\n+                    }\n+                    (%98 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %99 : java.type:\"int\" = java.cexpression\n+                            ()java.type:\"boolean\" -> {\n+                                %100 : java.type:\"int\" = constant @\"1\";\n+                                %101 : java.type:\"int\" = constant @\"0\";\n+                                %102 : java.type:\"boolean\" = gt %100 %101;\n+                                yield %102;\n+                            }\n+                            ()java.type:\"int\" -> {\n+                                %103 : java.type:\"int\" = constant @\"13\";\n+                                yield %103;\n+                            }\n+                            ()java.type:\"int\" -> {\n+                                %104 : java.type:\"int\" = constant @\"133\";\n+                                yield %104;\n+                            };\n+                        %105 : java.type:\"boolean\" = eq %98 %99;\n+                        yield %105;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %106 : java.type:\"java.lang.String\" = var.load %3;\n+                        %107 : java.type:\"int\" = constant @\"13\";\n+                        %108 : java.type:\"java.lang.String\" = concat %106 %107;\n+                        var.store %3 %108;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %109 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %109;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %110 : java.type:\"java.lang.String\" = var.load %3;\n+                        %111 : java.type:\"java.lang.String\" = constant @\"an int\";\n+                        %112 : java.type:\"java.lang.String\" = concat %110 %111;\n+                        var.store %3 %112;\n+                        yield;\n+                    };\n+                %113 : java.type:\"java.lang.String\" = var.load %3;\n+                return %113;\n+            };\n@@ -817,64 +817,64 @@\n-            func @\"caseConstantConv\" (%0 : short)java.lang.String -> {\n-                  %1 : Var<short> = var %0 @\"a\";\n-                  %2 : int = constant @\"1\";\n-                  %3 : short = conv %2;\n-                  %4 : Var<short> = var %3 @\"s\";\n-                  %5 : int = constant @\"2\";\n-                  %6 : byte = conv %5;\n-                  %7 : Var<byte> = var %6 @\"b\";\n-                  %8 : java.lang.String = constant @\"\";\n-                  %9 : Var<java.lang.String> = var %8 @\"r\";\n-                  %10 : short = var.load %1;\n-                  java.switch.statement %10\n-                      (%11 : short)boolean -> {\n-                          %12 : short = var.load %4;\n-                          %13 : boolean = eq %11 %12;\n-                          yield %13;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %9;\n-                          %15 : java.lang.String = constant @\"one\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %9 %16;\n-                          yield;\n-                      }\n-                      (%17 : short)boolean -> {\n-                          %18 : byte = var.load %7;\n-                          %19 : short = conv %18;\n-                          %20 : boolean = eq %17 %19;\n-                          yield %20;\n-                      }\n-                      ()void -> {\n-                          %21 : java.lang.String = var.load %9;\n-                          %22 : java.lang.String = constant @\"two\";\n-                          %23 : java.lang.String = concat %21 %22;\n-                          var.store %9 %23;\n-                          yield;\n-                      }\n-                      (%24 : short)boolean -> {\n-                          %25 : int = constant @\"3\";\n-                          %26 : short = conv %25;\n-                          %27 : boolean = eq %24 %26;\n-                          yield %27;\n-                      }\n-                      ()void -> {\n-                          %28 : java.lang.String = var.load %9;\n-                          %29 : java.lang.String = constant @\"three\";\n-                          %30 : java.lang.String = concat %28 %29;\n-                          var.store %9 %30;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %31 : java.lang.String = var.load %9;\n-                          %32 : java.lang.String = constant @\"else\";\n-                          %33 : java.lang.String = concat %31 %32;\n-                          var.store %9 %33;\n-                          yield;\n-                      };\n-                  %34 : java.lang.String = var.load %9;\n-                  return %34;\n-              };\n+            func @\"caseConstantConv\" (%0 : java.type:\"short\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"short\"> = var %0 @\"a\";\n+                %2 : java.type:\"int\" = constant @\"1\";\n+                %3 : java.type:\"short\" = conv %2;\n+                %4 : Var<java.type:\"short\"> = var %3 @\"s\";\n+                %5 : java.type:\"int\" = constant @\"2\";\n+                %6 : java.type:\"byte\" = conv %5;\n+                %7 : Var<java.type:\"byte\"> = var %6 @\"b\";\n+                %8 : java.type:\"java.lang.String\" = constant @\"\";\n+                %9 : Var<java.type:\"java.lang.String\"> = var %8 @\"r\";\n+                %10 : java.type:\"short\" = var.load %1;\n+                java.switch.statement %10\n+                    (%11 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"short\" = var.load %4;\n+                        %13 : java.type:\"boolean\" = eq %11 %12;\n+                        yield %13;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %9;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"one\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n+                        var.store %9 %16;\n+                        yield;\n+                    }\n+                    (%17 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"byte\" = var.load %7;\n+                        %19 : java.type:\"short\" = conv %18;\n+                        %20 : java.type:\"boolean\" = eq %17 %19;\n+                        yield %20;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %21 : java.type:\"java.lang.String\" = var.load %9;\n+                        %22 : java.type:\"java.lang.String\" = constant @\"two\";\n+                        %23 : java.type:\"java.lang.String\" = concat %21 %22;\n+                        var.store %9 %23;\n+                        yield;\n+                    }\n+                    (%24 : java.type:\"short\")java.type:\"boolean\" -> {\n+                        %25 : java.type:\"int\" = constant @\"3\";\n+                        %26 : java.type:\"short\" = conv %25;\n+                        %27 : java.type:\"boolean\" = eq %24 %26;\n+                        yield %27;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %28 : java.type:\"java.lang.String\" = var.load %9;\n+                        %29 : java.type:\"java.lang.String\" = constant @\"three\";\n+                        %30 : java.type:\"java.lang.String\" = concat %28 %29;\n+                        var.store %9 %30;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %31 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %31;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %32 : java.type:\"java.lang.String\" = var.load %9;\n+                        %33 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %34 : java.type:\"java.lang.String\" = concat %32 %33;\n+                        var.store %9 %34;\n+                        yield;\n+                    };\n+                %35 : java.type:\"java.lang.String\" = var.load %9;\n+                return %35;\n+            };\n@@ -897,8 +897,8 @@\n-            func @\"caseConstantConv2\" (%0 : java.lang.Byte)java.lang.String -> {\n-                %1 : Var<java.lang.Byte> = var %0 @\"a\";\n-                %2 : int = constant @\"2\";\n-                %3 : byte = conv %2;\n-                %4 : Var<byte> = var %3 @\"b\";\n-                %5 : java.lang.String = constant @\"\";\n-                %6 : Var<java.lang.String> = var %5 @\"r\";\n-                %7 : java.lang.Byte = var.load %1;\n+            func @\"caseConstantConv2\" (%0 : java.type:\"java.lang.Byte\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Byte\"> = var %0 @\"a\";\n+                %2 : java.type:\"int\" = constant @\"2\";\n+                %3 : java.type:\"byte\" = conv %2;\n+                %4 : Var<java.type:\"byte\"> = var %3 @\"b\";\n+                %5 : java.type:\"java.lang.String\" = constant @\"\";\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"r\";\n+                %7 : java.type:\"java.lang.Byte\" = var.load %1;\n@@ -906,5 +906,5 @@\n-                    (%8 : java.lang.Byte)boolean -> {\n-                        %9 : int = constant @\"1\";\n-                        %10 : byte = conv %9;\n-                        %11 : java.lang.Byte = invoke %10 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n-                        %12 : boolean = invoke %8 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%8 : java.type:\"java.lang.Byte\")java.type:\"boolean\" -> {\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"byte\" = conv %9;\n+                        %11 : java.type:\"java.lang.Byte\" = invoke %10 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %12 : java.type:\"boolean\" = invoke %8 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -913,4 +913,4 @@\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %6;\n-                        %14 : java.lang.String = constant @\"one\";\n-                        %15 : java.lang.String = concat %13 %14;\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %6;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"one\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n@@ -920,4 +920,4 @@\n-                    (%16 : java.lang.Byte)boolean -> {\n-                        %17 : byte = var.load %4;\n-                        %18 : java.lang.Byte = invoke %17 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n-                        %19 : boolean = invoke %16 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%16 : java.type:\"java.lang.Byte\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"byte\" = var.load %4;\n+                        %18 : java.type:\"java.lang.Byte\" = invoke %17 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %19 : java.type:\"boolean\" = invoke %16 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -926,4 +926,4 @@\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %6;\n-                        %21 : java.lang.String = constant @\"two\";\n-                        %22 : java.lang.String = concat %20 %21;\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %6;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"two\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n@@ -933,3 +933,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n@@ -937,5 +937,5 @@\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %6;\n-                        %24 : java.lang.String = constant @\"default\";\n-                        %25 : java.lang.String = concat %23 %24;\n-                        var.store %6 %25;\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %6;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"default\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %6 %26;\n@@ -944,2 +944,2 @@\n-                %26 : java.lang.String = var.load %6;\n-                return %26;\n+                %27 : java.type:\"java.lang.String\" = var.load %6;\n+                return %27;\n@@ -961,33 +961,33 @@\n-            func @\"nonEnhancedSwStatNoDefault\" (%0 : int)java.lang.String -> {\n-                  %1 : Var<int> = var %0 @\"a\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : int = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : int)boolean -> {\n-                          %6 : int = constant @\"1\";\n-                          %7 : boolean = eq %5 %6;\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : java.lang.String = constant @\"1\";\n-                          %10 : java.lang.String = concat %8 %9;\n-                          var.store %3 %10;\n-                          yield;\n-                      }\n-                      (%11 : int)boolean -> {\n-                          %12 : int = constant @\"2\";\n-                          %13 : boolean = eq %11 %12;\n-                          yield %13;\n-                      }\n-                      ()void -> {\n-                          %14 : java.lang.String = var.load %3;\n-                          %15 : int = constant @\"2\";\n-                          %16 : java.lang.String = concat %14 %15;\n-                          var.store %3 %16;\n-                          yield;\n-                      };\n-                  %17 : java.lang.String = var.load %3;\n-                  return %17;\n-              };\n+            func @\"nonEnhancedSwStatNoDefault\" (%0 : java.type:\"int\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"a\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"int\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"boolean\" = eq %5 %6;\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"1\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    (%11 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"int\" = constant @\"2\";\n+                        %13 : java.type:\"boolean\" = eq %11 %12;\n+                        yield %13;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"int\" = constant @\"2\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n+                        var.store %3 %16;\n+                        yield;\n+                    };\n+                %17 : java.type:\"java.lang.String\" = var.load %3;\n+                return %17;\n+            };\n@@ -1007,55 +1007,55 @@\n-            func @\"enhancedSwStatNoDefault1\" (%0 : SwitchStatementTest$E)java.lang.String -> {\n-                  %1 : Var<SwitchStatementTest$E> = var %0 @\"e\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : SwitchStatementTest$E = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : SwitchStatementTest$E)boolean -> {\n-                          %6 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n-                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n-                          %10 : java.lang.String = cast %9 @\"java.lang.String\";\n-                          %11 : java.lang.String = concat %8 %10;\n-                          var.store %3 %11;\n-                          yield;\n-                      }\n-                      (%12 : SwitchStatementTest$E)boolean -> {\n-                          %13 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n-                          %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %14;\n-                      }\n-                      ()void -> {\n-                          %15 : java.lang.String = var.load %3;\n-                          %16 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n-                          %17 : java.lang.String = cast %16 @\"java.lang.String\";\n-                          %18 : java.lang.String = concat %15 %17;\n-                          var.store %3 %18;\n-                          yield;\n-                      }\n-                      (%19 : SwitchStatementTest$E)boolean -> {\n-                          %20 : java.lang.Object = constant @null;\n-                          %21 : boolean = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %21;\n-                      }\n-                      ()void -> {\n-                          %22 : java.lang.String = var.load %3;\n-                          %23 : java.lang.String = constant @\"null\";\n-                          %24 : java.lang.String = concat %22 %23;\n-                          var.store %3 %24;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %25 : java.lang.MatchException = new @\"java.lang.MatchException::<new>()\";\n-                          throw %25;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"enhancedSwStatNoDefault1\" (%0 : java.type:\"SwitchStatementTest$E\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"SwitchStatementTest$E\"> = var %0 @\"e\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"SwitchStatementTest$E\" = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.type:\"SwitchStatementTest$E\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n+                        %10 : java.type:\"java.lang.String\" = cast %9 @\"java.lang.String\";\n+                        %11 : java.type:\"java.lang.String\" = concat %8 %10;\n+                        var.store %3 %11;\n+                        yield;\n+                    }\n+                    (%12 : java.type:\"SwitchStatementTest$E\")java.type:\"boolean\" -> {\n+                        %13 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %14;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %15 : java.type:\"java.lang.String\" = var.load %3;\n+                        %16 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n+                        %17 : java.type:\"java.lang.String\" = cast %16 @\"java.lang.String\";\n+                        %18 : java.type:\"java.lang.String\" = concat %15 %17;\n+                        var.store %3 %18;\n+                        yield;\n+                    }\n+                    (%19 : java.type:\"SwitchStatementTest$E\")java.type:\"boolean\" -> {\n+                        %20 : java.type:\"java.lang.Object\" = constant @null;\n+                        %21 : java.type:\"boolean\" = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %21;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %22 : java.type:\"java.lang.String\" = var.load %3;\n+                        %23 : java.type:\"java.lang.String\" = constant @\"null\";\n+                        %24 : java.type:\"java.lang.String\" = concat %22 %23;\n+                        var.store %3 %24;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %25 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %25;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %26 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        throw %26;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -1078,9 +1078,9 @@\n-            func @\"enhancedSwStatNoDefault2\" (%0 : SwitchStatementTest$I)java.lang.String -> {\n-                %1 : Var<SwitchStatementTest$I> = var %0 @\"i\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : SwitchStatementTest$I = var.load %1;\n-                %5 : SwitchStatementTest$K = constant @null;\n-                %6 : Var<SwitchStatementTest$K> = var %5 @\"k\";\n-                %7 : SwitchStatementTest$J = constant @null;\n-                %8 : Var<SwitchStatementTest$J> = var %7 @\"j\";\n+            func @\"enhancedSwStatNoDefault2\" (%0 : java.type:\"SwitchStatementTest$I\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"SwitchStatementTest$I\"> = var %0 @\"i\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"SwitchStatementTest$I\" = var.load %1;\n+                %5 : java.type:\"SwitchStatementTest$K\" = constant @null;\n+                %6 : Var<java.type:\"SwitchStatementTest$K\"> = var %5 @\"k\";\n+                %7 : java.type:\"SwitchStatementTest$J\" = constant @null;\n+                %8 : Var<java.type:\"SwitchStatementTest$J\"> = var %7 @\"j\";\n@@ -1088,4 +1088,4 @@\n-                    (%9 : SwitchStatementTest$I)boolean -> {\n-                        %10 : boolean = pattern.match %9\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$K> -> {\n-                                %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$K> = pattern.type @\"k\";\n+                    (%9 : java.type:\"SwitchStatementTest$I\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$K>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$K>\" = pattern.type @\"k\";\n@@ -1094,1 +1094,1 @@\n-                            (%12 : SwitchStatementTest$K)void -> {\n+                            (%12 : java.type:\"SwitchStatementTest$K\")java.type:\"void\" -> {\n@@ -1100,4 +1100,4 @@\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %3;\n-                        %14 : java.lang.String = constant @\"K\";\n-                        %15 : java.lang.String = concat %13 %14;\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"K\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n@@ -1107,4 +1107,4 @@\n-                    (%16 : SwitchStatementTest$I)boolean -> {\n-                        %17 : boolean = pattern.match %16\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$J> -> {\n-                                %18 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$J> = pattern.type @\"j\";\n+                    (%16 : java.type:\"SwitchStatementTest$I\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = pattern.match %16\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$J>\" -> {\n+                                %18 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<SwitchStatementTest$J>\" = pattern.type @\"j\";\n@@ -1113,1 +1113,1 @@\n-                            (%19 : SwitchStatementTest$J)void -> {\n+                            (%19 : java.type:\"SwitchStatementTest$J\")java.type:\"void\" -> {\n@@ -1119,4 +1119,4 @@\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"J\";\n-                        %22 : java.lang.String = concat %20 %21;\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"J\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n@@ -1126,3 +1126,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n@@ -1130,3 +1130,3 @@\n-                    ()void -> {\n-                        %23 : java.lang.MatchException = new @\"java.lang.MatchException::<new>()\";\n-                        throw %23;\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        throw %24;\n@@ -1134,2 +1134,2 @@\n-                %24 : java.lang.String = var.load %3;\n-                return %24;\n+                %25 : java.type:\"java.lang.String\" = var.load %3;\n+                return %25;\n@@ -1149,7 +1149,7 @@\n-            func @\"enhancedSwStatUnconditionalPattern\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.String = var.load %1;\n-                %5 : java.lang.Object = constant @null;\n-                %6 : Var<java.lang.Object> = var %5 @\"o\";\n+            func @\"enhancedSwStatUnconditionalPattern\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n+                %5 : java.type:\"java.lang.Object\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Object\"> = var %5 @\"o\";\n@@ -1157,3 +1157,3 @@\n-                    (%7 : java.lang.String)boolean -> {\n-                        %8 : java.lang.String = constant @\"A\";\n-                        %9 : boolean = invoke %7 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%7 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"java.lang.String\" = constant @\"A\";\n+                        %9 : java.type:\"boolean\" = invoke %7 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1162,4 +1162,4 @@\n-                    ()void -> {\n-                        %10 : java.lang.String = var.load %3;\n-                        %11 : java.lang.String = constant @\"A\";\n-                        %12 : java.lang.String = concat %10 %11;\n+                    ()java.type:\"void\" -> {\n+                        %10 : java.type:\"java.lang.String\" = var.load %3;\n+                        %11 : java.type:\"java.lang.String\" = constant @\"A\";\n+                        %12 : java.type:\"java.lang.String\" = concat %10 %11;\n@@ -1169,4 +1169,4 @@\n-                    (%13 : java.lang.String)boolean -> {\n-                        %14 : boolean = pattern.match %13\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object> -> {\n-                                %15 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object> = pattern.type @\"o\";\n+                    (%13 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %14 : java.type:\"boolean\" = pattern.match %13\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object>\" -> {\n+                                %15 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Object>\" = pattern.type @\"o\";\n@@ -1175,1 +1175,1 @@\n-                            (%16 : java.lang.Object)void -> {\n+                            (%16 : java.type:\"java.lang.Object\")java.type:\"void\" -> {\n@@ -1181,4 +1181,4 @@\n-                    ()void -> {\n-                        %17 : java.lang.String = var.load %3;\n-                        %18 : java.lang.String = constant @\"obj\";\n-                        %19 : java.lang.String = concat %17 %18;\n+                    ()java.type:\"void\" -> {\n+                        %17 : java.type:\"java.lang.String\" = var.load %3;\n+                        %18 : java.type:\"java.lang.String\" = constant @\"obj\";\n+                        %19 : java.type:\"java.lang.String\" = concat %17 %18;\n@@ -1188,1 +1188,1 @@\n-                %20 : java.lang.String = var.load %3;\n+                %20 : java.type:\"java.lang.String\" = var.load %3;\n@@ -1203,62 +1203,62 @@\n-            func @\"casePatternRuleExpression\" (%0 : java.lang.Object)java.lang.String -> {\n-                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.Object = var.load %1;\n-                  %5 : java.lang.Integer = constant @null;\n-                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                  %7 : java.lang.String = constant @null;\n-                  %8 : Var<java.lang.String> = var %7 @\"s\";\n-                  java.switch.statement %4\n-                      (%9 : java.lang.Object)boolean -> {\n-                          %10 : boolean = pattern.match %9\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n-                                  %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                                  yield %11;\n-                              }\n-                              (%12 : java.lang.Integer)void -> {\n-                                  var.store %6 %12;\n-                                  yield;\n-                              };\n-                          yield %10;\n-                      }\n-                      ()void -> {\n-                          %13 : java.lang.String = var.load %3;\n-                          %14 : java.lang.String = constant @\"integer\";\n-                          %15 : java.lang.String = concat %13 %14;\n-                          var.store %3 %15;\n-                          yield;\n-                      }\n-                      (%16 : java.lang.Object)boolean -> {\n-                          %17 : boolean = pattern.match %16\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                  %18 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n-                                  yield %18;\n-                              }\n-                              (%19 : java.lang.String)void -> {\n-                                  var.store %8 %19;\n-                                  yield;\n-                              };\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"string\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"casePatternRuleExpression\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.Integer\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Integer\"> = var %5 @\"i\";\n+                %7 : java.type:\"java.lang.String\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.String\"> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"integer\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = pattern.match %16\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %18 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"string\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -1278,62 +1278,62 @@\n-            func @\"casePatternRuleBlock\" (%0 : java.lang.Object)java.lang.String -> {\n-                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.Object = var.load %1;\n-                  %5 : java.lang.Integer = constant @null;\n-                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                  %7 : java.lang.String = constant @null;\n-                  %8 : Var<java.lang.String> = var %7 @\"s\";\n-                  java.switch.statement %4\n-                      (%9 : java.lang.Object)boolean -> {\n-                          %10 : boolean = pattern.match %9\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n-                                  %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                                  yield %11;\n-                              }\n-                              (%12 : java.lang.Integer)void -> {\n-                                  var.store %6 %12;\n-                                  yield;\n-                              };\n-                          yield %10;\n-                      }\n-                      ()void -> {\n-                          %13 : java.lang.String = var.load %3;\n-                          %14 : java.lang.String = constant @\"integer\";\n-                          %15 : java.lang.String = concat %13 %14;\n-                          var.store %3 %15;\n-                          yield;\n-                      }\n-                      (%16 : java.lang.Object)boolean -> {\n-                          %17 : boolean = pattern.match %16\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                  %18 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n-                                  yield %18;\n-                              }\n-                              (%19 : java.lang.String)void -> {\n-                                  var.store %8 %19;\n-                                  yield;\n-                              };\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"string\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"casePatternRuleBlock\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.Integer\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Integer\"> = var %5 @\"i\";\n+                %7 : java.type:\"java.lang.String\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.String\"> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"integer\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = pattern.match %16\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %18 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"string\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -1359,62 +1359,62 @@\n-            func @\"casePatternStatement\" (%0 : java.lang.Object)java.lang.String -> {\n-                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.Object = var.load %1;\n-                  %5 : java.lang.Integer = constant @null;\n-                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                  %7 : java.lang.String = constant @null;\n-                  %8 : Var<java.lang.String> = var %7 @\"s\";\n-                  java.switch.statement %4\n-                      (%9 : java.lang.Object)boolean -> {\n-                          %10 : boolean = pattern.match %9\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n-                                  %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                                  yield %11;\n-                              }\n-                              (%12 : java.lang.Integer)void -> {\n-                                  var.store %6 %12;\n-                                  yield;\n-                              };\n-                          yield %10;\n-                      }\n-                      ()void -> {\n-                          %13 : java.lang.String = var.load %3;\n-                          %14 : java.lang.String = constant @\"integer\";\n-                          %15 : java.lang.String = concat %13 %14;\n-                          var.store %3 %15;\n-                          java.break;\n-                      }\n-                      (%16 : java.lang.Object)boolean -> {\n-                          %17 : boolean = pattern.match %16\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                  %18 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n-                                  yield %18;\n-                              }\n-                              (%19 : java.lang.String)void -> {\n-                                  var.store %8 %19;\n-                                  yield;\n-                              };\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %20 : java.lang.String = var.load %3;\n-                          %21 : java.lang.String = constant @\"string\";\n-                          %22 : java.lang.String = concat %20 %21;\n-                          var.store %3 %22;\n-                          java.break;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %23 : java.lang.String = var.load %3;\n-                          %24 : java.lang.String = constant @\"else\";\n-                          %25 : java.lang.String = concat %23 %24;\n-                          var.store %3 %25;\n-                          yield;\n-                      };\n-                  %26 : java.lang.String = var.load %3;\n-                  return %26;\n-              };\n+            func @\"casePatternStatement\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.Integer\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Integer\"> = var %5 @\"i\";\n+                %7 : java.type:\"java.lang.String\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.String\"> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"integer\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n+                        var.store %3 %15;\n+                        java.break;\n+                    }\n+                    (%16 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = pattern.match %16\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %18 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %20 : java.type:\"java.lang.String\" = var.load %3;\n+                        %21 : java.type:\"java.lang.String\" = constant @\"string\";\n+                        %22 : java.type:\"java.lang.String\" = concat %20 %21;\n+                        var.store %3 %22;\n+                        java.break;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %23 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %23;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %24 : java.type:\"java.lang.String\" = var.load %3;\n+                        %25 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %26 : java.type:\"java.lang.String\" = concat %24 %25;\n+                        var.store %3 %26;\n+                        yield;\n+                    };\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n+            };\n@@ -1439,9 +1439,9 @@\n-            func @\"casePatternThrow\" (%0 : java.lang.Object)java.lang.String -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Number = constant @null;\n-                %6 : Var<java.lang.Number> = var %5 @\"n\";\n-                %7 : java.lang.String = constant @null;\n-                %8 : Var<java.lang.String> = var %7 @\"s\";\n+            func @\"casePatternThrow\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.Number\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Number\"> = var %5 @\"n\";\n+                %7 : java.type:\"java.lang.String\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.String\"> = var %7 @\"s\";\n@@ -1449,4 +1449,4 @@\n-                    (%9 : java.lang.Object)boolean -> {\n-                        %10 : boolean = pattern.match %9\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n-                                %11 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n+                    (%9 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = pattern.match %9\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" -> {\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n@@ -1455,1 +1455,1 @@\n-                            (%12 : java.lang.Number)void -> {\n+                            (%12 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -1461,2 +1461,2 @@\n-                    ()void -> {\n-                        %13 : java.lang.IllegalArgumentException = new @\"java.lang.IllegalArgumentException::<new>()\";\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n@@ -1465,4 +1465,4 @@\n-                    (%14 : java.lang.Object)boolean -> {\n-                        %15 : boolean = pattern.match %14\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                %16 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    (%14 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %15 : java.type:\"boolean\" = pattern.match %14\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %16 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -1471,1 +1471,1 @@\n-                            (%17 : java.lang.String)void -> {\n+                            (%17 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -1477,4 +1477,4 @@\n-                    ()void -> {\n-                        %18 : java.lang.String = var.load %3;\n-                        %19 : java.lang.String = constant @\"a string\";\n-                        %20 : java.lang.String = concat %18 %19;\n+                    ()java.type:\"void\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %3;\n+                        %19 : java.type:\"java.lang.String\" = constant @\"a string\";\n+                        %20 : java.type:\"java.lang.String\" = concat %18 %19;\n@@ -1484,3 +1484,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %21 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %21;\n@@ -1488,7 +1488,7 @@\n-                    ()void -> {\n-                        %21 : java.lang.String = var.load %3;\n-                        %22 : java.lang.Object = var.load %1;\n-                        %23 : java.lang.Class<+<java.lang.Object>> = invoke %22 @\"java.lang.Object::getClass()java.lang.Class\";\n-                        %24 : java.lang.String = invoke %23 @\"java.lang.Class::getName()java.lang.String\";\n-                        %25 : java.lang.String = concat %21 %24;\n-                        var.store %3 %25;\n+                    ()java.type:\"void\" -> {\n+                        %22 : java.type:\"java.lang.String\" = var.load %3;\n+                        %23 : java.type:\"java.lang.Object\" = var.load %1;\n+                        %24 : java.type:\"java.lang.Class<?>\" = invoke %23 @\"java.lang.Object::getClass():java.lang.Class\";\n+                        %25 : java.type:\"java.lang.String\" = invoke %24 @\"java.lang.Class::getName():java.lang.String\";\n+                        %26 : java.type:\"java.lang.String\" = concat %22 %25;\n+                        var.store %3 %26;\n@@ -1497,2 +1497,2 @@\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n+                %27 : java.type:\"java.lang.String\" = var.load %3;\n+                return %27;\n@@ -1524,97 +1524,97 @@\n-            func @\"casePatternWithCaseConstant\" (%0 : java.lang.Integer)java.lang.String -> {\n-                  %1 : Var<java.lang.Integer> = var %0 @\"a\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.Integer = var.load %1;\n-                  %5 : java.lang.Integer = constant @null;\n-                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                  %7 : java.lang.Integer = constant @null;\n-                  %8 : Var<java.lang.Integer> = var %7 @\"i\";\n-                  java.switch.statement %4\n-                      (%9 : java.lang.Integer)boolean -> {\n-                          %10 : int = constant @\"42\";\n-                          %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                          %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %12;\n-                      }\n-                      ()void -> {\n-                          %13 : java.lang.String = var.load %3;\n-                          %14 : java.lang.String = constant @\"forty two\";\n-                          %15 : java.lang.String = concat %13 %14;\n-                          var.store %3 %15;\n-                          yield;\n-                      }\n-                      (%16 : java.lang.Integer)boolean -> {\n-                          %17 : boolean = java.cand\n-                              ()boolean -> {\n-                                  %18 : boolean = pattern.match %16\n-                                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n-                                          %19 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                                          yield %19;\n-                                      }\n-                                      (%20 : java.lang.Integer)void -> {\n-                                          var.store %6 %20;\n-                                          yield;\n-                                      };\n-                                  yield %18;\n-                              }\n-                              ()boolean -> {\n-                                  %21 : java.lang.Integer = var.load %6;\n-                                  %22 : int = invoke %21 @\"java.lang.Integer::intValue()int\";\n-                                  %23 : int = constant @\"0\";\n-                                  %24 : boolean = gt %22 %23;\n-                                  yield %24;\n-                              };\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %25 : java.lang.String = var.load %3;\n-                          %26 : java.lang.String = constant @\"positive int\";\n-                          %27 : java.lang.String = concat %25 %26;\n-                          var.store %3 %27;\n-                          yield;\n-                      }\n-                      (%28 : java.lang.Integer)boolean -> {\n-                          %29 : boolean = java.cand\n-                              ()boolean -> {\n-                                  %30 : boolean = pattern.match %28\n-                                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n-                                          %31 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n-                                          yield %31;\n-                                      }\n-                                      (%32 : java.lang.Integer)void -> {\n-                                          var.store %8 %32;\n-                                          yield;\n-                                      };\n-                                  yield %30;\n-                              }\n-                              ()boolean -> {\n-                                  %33 : java.lang.Integer = var.load %8;\n-                                  %34 : int = invoke %33 @\"java.lang.Integer::intValue()int\";\n-                                  %35 : int = constant @\"0\";\n-                                  %36 : boolean = lt %34 %35;\n-                                  yield %36;\n-                              };\n-                          yield %29;\n-                      }\n-                      ()void -> {\n-                          %37 : java.lang.String = var.load %3;\n-                          %38 : java.lang.String = constant @\"negative int\";\n-                          %39 : java.lang.String = concat %37 %38;\n-                          var.store %3 %39;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %17 : boolean = constant @\"true\";\n-                          yield %17;\n-                      }\n-                      ()void -> {\n-                          %40 : java.lang.String = var.load %3;\n-                          %41 : java.lang.String = constant @\"zero\";\n-                          %42 : java.lang.String = concat %40 %41;\n-                          var.store %3 %42;\n-                          yield;\n-                      };\n-                  %43 : java.lang.String = var.load %3;\n-                  return %43;\n-              };\n+            func @\"casePatternWithCaseConstant\" (%0 : java.type:\"java.lang.Integer\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Integer\"> = var %0 @\"a\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Integer\" = var.load %1;\n+                %5 : java.type:\"java.lang.Integer\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Integer\"> = var %5 @\"i\";\n+                %7 : java.type:\"java.lang.Integer\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.Integer\"> = var %7 @\"i\";\n+                java.switch.statement %4\n+                    (%9 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"int\" = constant @\"42\";\n+                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"boolean\" = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        yield %12;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %13 : java.type:\"java.lang.String\" = var.load %3;\n+                        %14 : java.type:\"java.lang.String\" = constant @\"forty two\";\n+                        %15 : java.type:\"java.lang.String\" = concat %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %18 : java.type:\"boolean\" = pattern.match %16\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" -> {\n+                                        %19 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                                        yield %19;\n+                                    }\n+                                    (%20 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                                        var.store %6 %20;\n+                                        yield;\n+                                    };\n+                                yield %18;\n+                            }\n+                            ()java.type:\"boolean\" -> {\n+                                %21 : java.type:\"java.lang.Integer\" = var.load %6;\n+                                %22 : java.type:\"int\" = invoke %21 @\"java.lang.Integer::intValue():int\";\n+                                %23 : java.type:\"int\" = constant @\"0\";\n+                                %24 : java.type:\"boolean\" = gt %22 %23;\n+                                yield %24;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %25 : java.type:\"java.lang.String\" = var.load %3;\n+                        %26 : java.type:\"java.lang.String\" = constant @\"positive int\";\n+                        %27 : java.type:\"java.lang.String\" = concat %25 %26;\n+                        var.store %3 %27;\n+                        yield;\n+                    }\n+                    (%28 : java.type:\"java.lang.Integer\")java.type:\"boolean\" -> {\n+                        %29 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %30 : java.type:\"boolean\" = pattern.match %28\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" -> {\n+                                        %31 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Integer>\" = pattern.type @\"i\";\n+                                        yield %31;\n+                                    }\n+                                    (%32 : java.type:\"java.lang.Integer\")java.type:\"void\" -> {\n+                                        var.store %8 %32;\n+                                        yield;\n+                                    };\n+                                yield %30;\n+                            }\n+                            ()java.type:\"boolean\" -> {\n+                                %33 : java.type:\"java.lang.Integer\" = var.load %8;\n+                                %34 : java.type:\"int\" = invoke %33 @\"java.lang.Integer::intValue():int\";\n+                                %35 : java.type:\"int\" = constant @\"0\";\n+                                %36 : java.type:\"boolean\" = lt %34 %35;\n+                                yield %36;\n+                            };\n+                        yield %29;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %37 : java.type:\"java.lang.String\" = var.load %3;\n+                        %38 : java.type:\"java.lang.String\" = constant @\"negative int\";\n+                        %39 : java.type:\"java.lang.String\" = concat %37 %38;\n+                        var.store %3 %39;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %40 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %40;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %41 : java.type:\"java.lang.String\" = var.load %3;\n+                        %42 : java.type:\"java.lang.String\" = constant @\"zero\";\n+                        %43 : java.type:\"java.lang.String\" = concat %41 %42;\n+                        var.store %3 %43;\n+                        yield;\n+                    };\n+                %44 : java.type:\"java.lang.String\" = var.load %3;\n+                return %44;\n+            };\n@@ -1636,145 +1636,145 @@\n-            func @\"caseTypePattern\" (%0 : java.lang.Object)java.lang.String -> {\n-                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.Object = var.load %1;\n-                  %5 : java.lang.String = constant @null;\n-                  %6 : Var<java.lang.String> = var %5;\n-                  %7 : java.util.RandomAccess = constant @null;\n-                  %8 : Var<java.util.RandomAccess> = var %7;\n-                  %9 : int[] = constant @null;\n-                  %10 : Var<int[]> = var %9;\n-                  %11 : java.util.Stack[][] = constant @null;\n-                  %12 : Var<java.util.Stack[][]> = var %11;\n-                  %13 : java.util.Collection[][][] = constant @null;\n-                  %14 : Var<java.util.Collection[][][]> = var %13;\n-                  %15 : java.lang.Number = constant @null;\n-                  %16 : Var<java.lang.Number> = var %15 @\"n\";\n-                  java.switch.statement %4\n-                      (%17 : java.lang.Object)boolean -> {\n-                          %18 : boolean = pattern.match %17\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                  %19 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type;\n-                                  yield %19;\n-                              }\n-                              (%20 : java.lang.String)void -> {\n-                                  var.store %6 %20;\n-                                  yield;\n-                              };\n-                          yield %18;\n-                      }\n-                      ()void -> {\n-                          %21 : java.lang.String = var.load %3;\n-                          %22 : java.lang.String = constant @\"String\";\n-                          %23 : java.lang.String = concat %21 %22;\n-                          var.store %3 %23;\n-                          yield;\n-                      }\n-                      (%24 : java.lang.Object)boolean -> {\n-                          %25 : boolean = pattern.match %24\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.RandomAccess> -> {\n-                                  %26 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.RandomAccess> = pattern.type;\n-                                  yield %26;\n-                              }\n-                              (%27 : java.util.RandomAccess)void -> {\n-                                  var.store %8 %27;\n-                                  yield;\n-                              };\n-                          yield %25;\n-                      }\n-                      ()void -> {\n-                          %28 : java.lang.String = var.load %3;\n-                          %29 : java.lang.String = constant @\"RandomAccess\";\n-                          %30 : java.lang.String = concat %28 %29;\n-                          var.store %3 %30;\n-                          yield;\n-                      }\n-                      (%31 : java.lang.Object)boolean -> {\n-                          %32 : boolean = pattern.match %31\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<int[]> -> {\n-                                  %33 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<int[]> = pattern.type;\n-                                  yield %33;\n-                              }\n-                              (%34 : int[])void -> {\n-                                  var.store %10 %34;\n-                                  yield;\n-                              };\n-                          yield %32;\n-                      }\n-                      ()void -> {\n-                          %35 : java.lang.String = var.load %3;\n-                          %36 : java.lang.String = constant @\"int[]\";\n-                          %37 : java.lang.String = concat %35 %36;\n-                          var.store %3 %37;\n-                          yield;\n-                      }\n-                      (%38 : java.lang.Object)boolean -> {\n-                          %39 : boolean = pattern.match %38\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Stack[][]> -> {\n-                                  %40 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Stack[][]> = pattern.type;\n-                                  yield %40;\n-                              }\n-                              (%41 : java.util.Stack[][])void -> {\n-                                  var.store %12 %41;\n-                                  yield;\n-                              };\n-                          yield %39;\n-                      }\n-                      ()void -> {\n-                          %42 : java.lang.String = var.load %3;\n-                          %43 : java.lang.String = constant @\"Stack[][]\";\n-                          %44 : java.lang.String = concat %42 %43;\n-                          var.store %3 %44;\n-                          yield;\n-                      }\n-                      (%45 : java.lang.Object)boolean -> {\n-                          %46 : boolean = pattern.match %45\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Collection[][][]> -> {\n-                                  %47 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Collection[][][]> = pattern.type;\n-                                  yield %47;\n-                              }\n-                              (%48 : java.util.Collection[][][])void -> {\n-                                  var.store %14 %48;\n-                                  yield;\n-                              };\n-                          yield %46;\n-                      }\n-                      ()void -> {\n-                          %49 : java.lang.String = var.load %3;\n-                          %50 : java.lang.String = constant @\"Collection[][][]\";\n-                          %51 : java.lang.String = concat %49 %50;\n-                          var.store %3 %51;\n-                          yield;\n-                      }\n-                      (%52 : java.lang.Object)boolean -> {\n-                          %53 : boolean = pattern.match %52\n-                              ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n-                                  %54 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n-                                  yield %54;\n-                              }\n-                              (%55 : java.lang.Number)void -> {\n-                                  var.store %16 %55;\n-                                  yield;\n-                              };\n-                          yield %53;\n-                      }\n-                      ()void -> {\n-                          %56 : java.lang.String = var.load %3;\n-                          %57 : java.lang.String = constant @\"Number\";\n-                          %58 : java.lang.String = concat %56 %57;\n-                          var.store %3 %58;\n-                          yield;\n-                      }\n-                      ()boolean -> {\n-                          %59 : boolean = constant @\"true\";\n-                          yield %59;\n-                      }\n-                      ()void -> {\n-                          %60 : java.lang.String = var.load %3;\n-                          %61 : java.lang.String = constant @\"something else\";\n-                          %62 : java.lang.String = concat %60 %61;\n-                          var.store %3 %62;\n-                          yield;\n-                      };\n-                  %63 : java.lang.String = var.load %3;\n-                  return %63;\n+            func @\"caseTypePattern\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.String\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5;\n+                %7 : java.type:\"java.util.RandomAccess\" = constant @null;\n+                %8 : Var<java.type:\"java.util.RandomAccess\"> = var %7;\n+                %9 : java.type:\"int[]\" = constant @null;\n+                %10 : Var<java.type:\"int[]\"> = var %9;\n+                %11 : java.type:\"java.util.Stack[][]\" = constant @null;\n+                %12 : Var<java.type:\"java.util.Stack[][]\"> = var %11;\n+                %13 : java.type:\"java.util.Collection[][][]\" = constant @null;\n+                %14 : Var<java.type:\"java.util.Collection[][][]\"> = var %13;\n+                %15 : java.type:\"java.lang.Number\" = constant @null;\n+                %16 : Var<java.type:\"java.lang.Number\"> = var %15 @\"n\";\n+                java.switch.statement %4\n+                    (%17 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %18 : java.type:\"boolean\" = pattern.match %17\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                %19 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type;\n+                                yield %19;\n+                            }\n+                            (%20 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n+                                var.store %6 %20;\n+                                yield;\n+                            };\n+                        yield %18;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %21 : java.type:\"java.lang.String\" = var.load %3;\n+                        %22 : java.type:\"java.lang.String\" = constant @\"String\";\n+                        %23 : java.type:\"java.lang.String\" = concat %21 %22;\n+                        var.store %3 %23;\n+                        yield;\n+                    }\n+                    (%24 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %25 : java.type:\"boolean\" = pattern.match %24\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.RandomAccess>\" -> {\n+                                %26 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.RandomAccess>\" = pattern.type;\n+                                yield %26;\n+                            }\n+                            (%27 : java.type:\"java.util.RandomAccess\")java.type:\"void\" -> {\n+                                var.store %8 %27;\n+                                yield;\n+                            };\n+                        yield %25;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %28 : java.type:\"java.lang.String\" = var.load %3;\n+                        %29 : java.type:\"java.lang.String\" = constant @\"RandomAccess\";\n+                        %30 : java.type:\"java.lang.String\" = concat %28 %29;\n+                        var.store %3 %30;\n+                        yield;\n+                    }\n+                    (%31 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %32 : java.type:\"boolean\" = pattern.match %31\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<int[]>\" -> {\n+                                %33 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<int[]>\" = pattern.type;\n+                                yield %33;\n+                            }\n+                            (%34 : java.type:\"int[]\")java.type:\"void\" -> {\n+                                var.store %10 %34;\n+                                yield;\n+                            };\n+                        yield %32;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %35 : java.type:\"java.lang.String\" = var.load %3;\n+                        %36 : java.type:\"java.lang.String\" = constant @\"int[]\";\n+                        %37 : java.type:\"java.lang.String\" = concat %35 %36;\n+                        var.store %3 %37;\n+                        yield;\n+                    }\n+                    (%38 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %39 : java.type:\"boolean\" = pattern.match %38\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Stack[][]>\" -> {\n+                                %40 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Stack[][]>\" = pattern.type;\n+                                yield %40;\n+                            }\n+                            (%41 : java.type:\"java.util.Stack[][]\")java.type:\"void\" -> {\n+                                var.store %12 %41;\n+                                yield;\n+                            };\n+                        yield %39;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %42 : java.type:\"java.lang.String\" = var.load %3;\n+                        %43 : java.type:\"java.lang.String\" = constant @\"Stack[][]\";\n+                        %44 : java.type:\"java.lang.String\" = concat %42 %43;\n+                        var.store %3 %44;\n+                        yield;\n+                    }\n+                    (%45 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %46 : java.type:\"boolean\" = pattern.match %45\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Collection[][][]>\" -> {\n+                                %47 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.util.Collection[][][]>\" = pattern.type;\n+                                yield %47;\n+                            }\n+                            (%48 : java.type:\"java.util.Collection[][][]\")java.type:\"void\" -> {\n+                                var.store %14 %48;\n+                                yield;\n+                            };\n+                        yield %46;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %49 : java.type:\"java.lang.String\" = var.load %3;\n+                        %50 : java.type:\"java.lang.String\" = constant @\"Collection[][][]\";\n+                        %51 : java.type:\"java.lang.String\" = concat %49 %50;\n+                        var.store %3 %51;\n+                        yield;\n+                    }\n+                    (%52 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %53 : java.type:\"boolean\" = pattern.match %52\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" -> {\n+                                %54 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n+                                yield %54;\n+                            }\n+                            (%55 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n+                                var.store %16 %55;\n+                                yield;\n+                            };\n+                        yield %53;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %56 : java.type:\"java.lang.String\" = var.load %3;\n+                        %57 : java.type:\"java.lang.String\" = constant @\"Number\";\n+                        %58 : java.type:\"java.lang.String\" = concat %56 %57;\n+                        var.store %3 %58;\n+                        yield;\n+                    }\n+                    ()java.type:\"boolean\" -> {\n+                        %59 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %59;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %60 : java.type:\"java.lang.String\" = var.load %3;\n+                        %61 : java.type:\"java.lang.String\" = constant @\"something else\";\n+                        %62 : java.type:\"java.lang.String\" = concat %60 %61;\n+                        var.store %3 %62;\n+                        yield;\n+                    };\n+                %63 : java.type:\"java.lang.String\" = var.load %3;\n+                return %63;\n@@ -1800,7 +1800,7 @@\n-            func @\"caseRecordPattern\" (%0 : java.lang.Object)java.lang.String -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Number = constant @null;\n-                %6 : Var<java.lang.Number> = var %5 @\"n\";\n+            func @\"caseRecordPattern\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"o\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.Number\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.Number\"> = var %5 @\"n\";\n@@ -1808,5 +1808,5 @@\n-                    (%7 : java.lang.Object)boolean -> {\n-                        %8 : boolean = pattern.match %7\n-                            ()jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R> -> {\n-                                %9 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n-                                %10 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R> = pattern.record %9 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                    (%7 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = pattern.match %7\n+                            ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" -> {\n+                                %9 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n+                                %10 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %9 @\"(java.lang.Number n)SwitchStatementTest$R\";\n@@ -1815,1 +1815,1 @@\n-                            (%11 : java.lang.Number)void -> {\n+                            (%11 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -1821,4 +1821,4 @@\n-                    ()void -> {\n-                        %12 : java.lang.String = var.load %3;\n-                        %13 : java.lang.String = constant @\"R(_)\";\n-                        %14 : java.lang.String = concat %12 %13;\n+                    ()java.type:\"void\" -> {\n+                        %12 : java.type:\"java.lang.String\" = var.load %3;\n+                        %13 : java.type:\"java.lang.String\" = constant @\"R(_)\";\n+                        %14 : java.type:\"java.lang.String\" = concat %12 %13;\n@@ -1828,3 +1828,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %15 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %15;\n@@ -1832,5 +1832,5 @@\n-                    ()void -> {\n-                        %15 : java.lang.String = var.load %3;\n-                        %16 : java.lang.String = constant @\"else\";\n-                        %17 : java.lang.String = concat %15 %16;\n-                        var.store %3 %17;\n+                    ()java.type:\"void\" -> {\n+                        %16 : java.type:\"java.lang.String\" = var.load %3;\n+                        %17 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %18 : java.type:\"java.lang.String\" = concat %16 %17;\n+                        var.store %3 %18;\n@@ -1839,2 +1839,2 @@\n-                %18 : java.lang.String = var.load %3;\n-                return %18;\n+                %19 : java.type:\"java.lang.String\" = var.load %3;\n+                return %19;\n@@ -1854,9 +1854,9 @@\n-            func @\"casePatternGuard\" (%0 : java.lang.Object)java.lang.String -> {\n-                %1 : Var<java.lang.Object> = var %0 @\"obj\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"s\";\n-                %7 : java.lang.Number = constant @null;\n-                %8 : Var<java.lang.Number> = var %7 @\"n\";\n+            func @\"casePatternGuard\" (%0 : java.type:\"java.lang.Object\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.Object\"> = var %0 @\"obj\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.Object\" = var.load %1;\n+                %5 : java.type:\"java.lang.String\" = constant @null;\n+                %6 : Var<java.type:\"java.lang.String\"> = var %5 @\"s\";\n+                %7 : java.type:\"java.lang.Number\" = constant @null;\n+                %8 : Var<java.type:\"java.lang.Number\"> = var %7 @\"n\";\n@@ -1864,6 +1864,6 @@\n-                    (%9 : java.lang.Object)boolean -> {\n-                        %10 : boolean = java.cand\n-                            ()boolean -> {\n-                                %11 : boolean = pattern.match %9\n-                                    ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> -> {\n-                                        %12 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n+                    (%9 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %10 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %11 : java.type:\"boolean\" = pattern.match %9\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" -> {\n+                                        %12 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.String>\" = pattern.type @\"s\";\n@@ -1872,1 +1872,1 @@\n-                                    (%13 : java.lang.String)void -> {\n+                                    (%13 : java.type:\"java.lang.String\")java.type:\"void\" -> {\n@@ -1878,5 +1878,5 @@\n-                            ()boolean -> {\n-                                %14 : java.lang.String = var.load %6;\n-                                %15 : int = invoke %14 @\"java.lang.String::length()int\";\n-                                %16 : int = constant @\"3\";\n-                                %17 : boolean = gt %15 %16;\n+                            ()java.type:\"boolean\" -> {\n+                                %14 : java.type:\"java.lang.String\" = var.load %6;\n+                                %15 : java.type:\"int\" = invoke %14 @\"java.lang.String::length():int\";\n+                                %16 : java.type:\"int\" = constant @\"3\";\n+                                %17 : java.type:\"boolean\" = gt %15 %16;\n@@ -1887,8 +1887,8 @@\n-                    ()void -> {\n-                        %18 : java.lang.String = var.load %3;\n-                        %19 : java.lang.String = constant @\"str with length > %d\";\n-                        %20 : java.lang.String = var.load %6;\n-                        %21 : int = invoke %20 @\"java.lang.String::length()int\";\n-                        %22 : java.lang.Integer = invoke %21 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %23 : java.lang.String = invoke %19 %22 @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\" @\"java.lang.String::formatted(java.lang.Object[])java.lang.String\";\n-                        %24 : java.lang.String = concat %18 %23;\n+                    ()java.type:\"void\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %3;\n+                        %19 : java.type:\"java.lang.String\" = constant @\"str with length > %d\";\n+                        %20 : java.type:\"java.lang.String\" = var.load %6;\n+                        %21 : java.type:\"int\" = invoke %20 @\"java.lang.String::length():int\";\n+                        %22 : java.type:\"java.lang.Integer\" = invoke %21 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %23 : java.type:\"java.lang.String\" = invoke %19 %22 @\"java.lang.String::formatted(java.lang.Object[]):java.lang.String\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                        %24 : java.type:\"java.lang.String\" = concat %18 %23;\n@@ -1898,7 +1898,7 @@\n-                    (%25 : java.lang.Object)boolean -> {\n-                        %26 : boolean = java.cand\n-                            ()boolean -> {\n-                                %27 : boolean = pattern.match %25\n-                                    ()jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R> -> {\n-                                        %28 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n-                                        %29 : jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R> = pattern.record %28 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                    (%25 : java.type:\"java.lang.Object\")java.type:\"boolean\" -> {\n+                        %26 : java.type:\"boolean\" = java.cand\n+                            ()java.type:\"boolean\" -> {\n+                                %27 : java.type:\"boolean\" = pattern.match %25\n+                                    ()java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" -> {\n+                                        %28 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Type<java.lang.Number>\" = pattern.type @\"n\";\n+                                        %29 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %28 @\"(java.lang.Number n)SwitchStatementTest$R\";\n@@ -1907,1 +1907,1 @@\n-                                    (%30 : java.lang.Number)void -> {\n+                                    (%30 : java.type:\"java.lang.Number\")java.type:\"void\" -> {\n@@ -1913,5 +1913,5 @@\n-                            ()boolean -> {\n-                                %31 : java.lang.Number = var.load %8;\n-                                %32 : java.lang.Class<+<java.lang.Object>> = invoke %31 @\"java.lang.Object::getClass()java.lang.Class\";\n-                                %33 : java.lang.Class = constant @\"java.lang.Double\";\n-                                %34 : boolean = invoke %32 %33 @\"java.lang.Object::equals(java.lang.Object)boolean\";\n+                            ()java.type:\"boolean\" -> {\n+                                %31 : java.type:\"java.lang.Number\" = var.load %8;\n+                                %32 : java.type:\"java.lang.Class<?>\" = invoke %31 @\"java.lang.Object::getClass():java.lang.Class\";\n+                                %33 : java.type:\"java.lang.Class\" = constant @\"java.lang.Double\";\n+                                %34 : java.type:\"boolean\" = invoke %32 %33 @\"java.lang.Object::equals(java.lang.Object):boolean\";\n@@ -1922,4 +1922,4 @@\n-                    ()void -> {\n-                        %35 : java.lang.String = var.load %3;\n-                        %36 : java.lang.String = constant @\"R(Double)\";\n-                        %37 : java.lang.String = concat %35 %36;\n+                    ()java.type:\"void\" -> {\n+                        %35 : java.type:\"java.lang.String\" = var.load %3;\n+                        %36 : java.type:\"java.lang.String\" = constant @\"R(Double)\";\n+                        %37 : java.type:\"java.lang.String\" = concat %35 %36;\n@@ -1929,3 +1929,3 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                    ()java.type:\"boolean\" -> {\n+                        %38 : java.type:\"boolean\" = constant @\"true\";\n+                        yield %38;\n@@ -1933,5 +1933,5 @@\n-                    ()void -> {\n-                        %38 : java.lang.String = var.load %3;\n-                        %39 : java.lang.String = constant @\"else\";\n-                        %40 : java.lang.String = concat %38 %39;\n-                        var.store %3 %40;\n+                    ()java.type:\"void\" -> {\n+                        %39 : java.type:\"java.lang.String\" = var.load %3;\n+                        %40 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %41 : java.type:\"java.lang.String\" = concat %39 %40;\n+                        var.store %3 %41;\n@@ -1940,2 +1940,2 @@\n-                %41 : java.lang.String = var.load %3;\n-                return %41;\n+                %42 : java.type:\"java.lang.String\" = var.load %3;\n+                return %42;\n@@ -1956,5 +1956,5 @@\n-            func @\"defaultCaseNotTheLast\" (%0 : java.lang.String)java.lang.String -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.String = var.load %1;\n+            func @\"defaultCaseNotTheLast\" (%0 : java.type:\"java.lang.String\")java.type:\"java.lang.String\" -> {\n+                %1 : Var<java.type:\"java.lang.String\"> = var %0 @\"s\";\n+                %2 : java.type:\"java.lang.String\" = constant @\"\";\n+                %3 : Var<java.type:\"java.lang.String\"> = var %2 @\"r\";\n+                %4 : java.type:\"java.lang.String\" = var.load %1;\n@@ -1962,3 +1962,3 @@\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.String = constant @\"M\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%5 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %6 : java.type:\"java.lang.String\" = constant @\"M\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1967,4 +1967,4 @@\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : java.lang.String = constant @\"Mow\";\n-                        %10 : java.lang.String = concat %8 %9;\n+                    ()java.type:\"void\" -> {\n+                        %8 : java.type:\"java.lang.String\" = var.load %3;\n+                        %9 : java.type:\"java.lang.String\" = constant @\"Mow\";\n+                        %10 : java.type:\"java.lang.String\" = concat %8 %9;\n@@ -1974,3 +1974,3 @@\n-                    (%11 : java.lang.String)boolean -> {\n-                        %12 : java.lang.String = constant @\"A\";\n-                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                    (%11 : java.type:\"java.lang.String\")java.type:\"boolean\" -> {\n+                        %12 : java.type:\"java.lang.String\" = constant @\"A\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1979,4 +1979,4 @@\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"Aow\";\n-                        %16 : java.lang.String = concat %14 %15;\n+                    ()java.type:\"void\" -> {\n+                        %14 : java.type:\"java.lang.String\" = var.load %3;\n+                        %15 : java.type:\"java.lang.String\" = constant @\"Aow\";\n+                        %16 : java.type:\"java.lang.String\" = concat %14 %15;\n@@ -1986,2 +1986,2 @@\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %17 : java.type:\"boolean\" = constant @\"true\";\n@@ -1990,5 +1990,5 @@\n-                    ()void -> {\n-                        %17 : java.lang.String = var.load %3;\n-                        %18 : java.lang.String = constant @\"else\";\n-                        %19 : java.lang.String = concat %17 %18;\n-                        var.store %3 %19;\n+                    ()java.type:\"void\" -> {\n+                        %18 : java.type:\"java.lang.String\" = var.load %3;\n+                        %19 : java.type:\"java.lang.String\" = constant @\"else\";\n+                        %20 : java.type:\"java.lang.String\" = concat %18 %19;\n+                        var.store %3 %20;\n@@ -1997,2 +1997,2 @@\n-                %20 : java.lang.String = var.load %3;\n-                return %20;\n+                %21 : java.type:\"java.lang.String\" = var.load %3;\n+                return %21;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":1408,"deletions":1408,"binary":false,"changes":2816,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-            func @\"test1\" (%0 : SynchronizedTest, %1 : int)int -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test1\" (%0 : java.type:\"SynchronizedTest\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -41,1 +41,1 @@\n-                    ()SynchronizedTest -> {\n+                    ()java.type:\"SynchronizedTest\" -> {\n@@ -44,4 +44,4 @@\n-                    ()void -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"1\";\n-                        %5 : int = add %3 %4;\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"1\";\n+                        %5 : java.type:\"int\" = add %3 %4;\n@@ -51,1 +51,1 @@\n-                %6 : int = var.load %2;\n+                %6 : java.type:\"int\" = var.load %2;\n@@ -68,2 +68,2 @@\n-            func @\"test2\" (%0 : SynchronizedTest, %1 : int)int -> {\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test2\" (%0 : java.type:\"SynchronizedTest\", %1 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -71,2 +71,2 @@\n-                    ()java.lang.Object -> {\n-                        %3 : java.lang.Object = invoke @\"SynchronizedTest::m()java.lang.Object\";\n+                    ()java.type:\"java.lang.Object\" -> {\n+                        %3 : java.type:\"java.lang.Object\" = invoke @\"SynchronizedTest::m():java.lang.Object\";\n@@ -75,4 +75,4 @@\n-                    ()void -> {\n-                        %4 : int = var.load %2;\n-                        %5 : int = constant @\"1\";\n-                        %6 : int = add %4 %5;\n+                    ()java.type:\"void\" -> {\n+                        %4 : java.type:\"int\" = var.load %2;\n+                        %5 : java.type:\"int\" = constant @\"1\";\n+                        %6 : java.type:\"int\" = add %4 %5;\n@@ -82,1 +82,1 @@\n-                %7 : int = var.load %2;\n+                %7 : java.type:\"int\" = var.load %2;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SynchronizedTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-            func @\"test1\" (%0 : ThrowTest)void -> {\n-                %1 : java.lang.RuntimeException = new @\"java.lang.RuntimeException::<new>()\";\n+            func @\"test1\" (%0 : java.type:\"ThrowTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"java.lang.RuntimeException\" = new @\"java.lang.RuntimeException::()\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ThrowTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-            func @\"test1\" (%0 : TryTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test1\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -43,2 +43,2 @@\n-                    ()void -> {\n-                        %3 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = constant @\"1\";\n@@ -48,3 +48,3 @@\n-                    ^catch(%4 : java.lang.Exception)void -> {\n-                        %5 : Var<java.lang.Exception> = var %4 @\"e\";\n-                        %6 : int = constant @\"2\";\n+                    (%4 : java.type:\"java.lang.Exception\")java.type:\"void\" -> {\n+                        %5 : Var<java.type:\"java.lang.Exception\"> = var %4 @\"e\";\n+                        %6 : java.type:\"int\" = constant @\"2\";\n@@ -54,2 +54,2 @@\n-                    ^finally()void -> {\n-                        %7 : int = constant @\"3\";\n+                    ()java.type:\"void\" -> {\n+                        %7 : java.type:\"int\" = constant @\"3\";\n@@ -75,3 +75,3 @@\n-            func @\"test2\" (%0 : TryTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test2\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -79,2 +79,2 @@\n-                    ()void -> {\n-                        %3 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = constant @\"1\";\n@@ -84,2 +84,2 @@\n-                    ^finally()void -> {\n-                        %4 : int = constant @\"3\";\n+                    ()java.type:\"void\" -> {\n+                        %4 : java.type:\"int\" = constant @\"3\";\n@@ -103,3 +103,3 @@\n-            func @\"test3\" (%0 : TryTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test3\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -107,2 +107,2 @@\n-                    ()void -> {\n-                        %3 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = constant @\"1\";\n@@ -112,4 +112,4 @@\n-                    ^catch(%4 : java.lang.Exception)void -> {\n-                        %5 : Var<java.lang.Exception> = var %4 @\"e\";\n-                        %6 : java.lang.Exception = var.load %5;\n-                        invoke %6 @\"java.lang.Exception::printStackTrace()void\";\n+                    (%4 : java.type:\"java.lang.Exception\")java.type:\"void\" -> {\n+                        %5 : Var<java.type:\"java.lang.Exception\"> = var %4 @\"e\";\n+                        %6 : java.type:\"java.lang.Exception\" = var.load %5;\n+                        invoke %6 @\"java.lang.Exception::printStackTrace():void\";\n@@ -166,1 +166,1 @@\n-            func @\"test4\" (%0 : TryTest)void -> {\n+            func @\"test4\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n@@ -168,10 +168,10 @@\n-                    ^resources()Tuple<Var<TryTest$A>, TryTest$B, Var<TryTest$C>> -> {\n-                        %1 : TryTest$A = invoke %0 @\"TryTest::a()TryTest$A\";\n-                        %2 : Var<TryTest$A> = var %1 @\"a\";\n-                        %3 : TryTest$A = var.load %2;\n-                        %4 : TryTest$B = field.load %3 @\"TryTest$A::b()TryTest$B\";\n-                        %5 : TryTest$A = var.load %2;\n-                        %6 : TryTest$B = field.load %5 @\"TryTest$A::b()TryTest$B\";\n-                        %7 : TryTest$C = field.load %6 @\"TryTest$B::c()TryTest$C\";\n-                        %8 : Var<TryTest$C> = var %7 @\"c\";\n-                        %9 : Tuple<Var<TryTest$A>, TryTest$B, Var<TryTest$C>> = tuple %2 %4 %8;\n+                    ()Tuple<Var<java.type:\"TryTest$A\">, java.type:\"TryTest$B\", Var<java.type:\"TryTest$C\">> -> {\n+                        %1 : java.type:\"TryTest$A\" = invoke %0 @\"TryTest::a():TryTest$A\";\n+                        %2 : Var<java.type:\"TryTest$A\"> = var %1 @\"a\";\n+                        %3 : java.type:\"TryTest$A\" = var.load %2;\n+                        %4 : java.type:\"TryTest$B\" = field.load %3 @\"TryTest$A::b:TryTest$B\";\n+                        %5 : java.type:\"TryTest$A\" = var.load %2;\n+                        %6 : java.type:\"TryTest$B\" = field.load %5 @\"TryTest$A::b:TryTest$B\";\n+                        %7 : java.type:\"TryTest$C\" = field.load %6 @\"TryTest$B::c:TryTest$C\";\n+                        %8 : Var<java.type:\"TryTest$C\"> = var %7 @\"c\";\n+                        %9 : Tuple<Var<java.type:\"TryTest$A\">, java.type:\"TryTest$B\", Var<java.type:\"TryTest$C\">> = tuple %2 %4 %8;\n@@ -180,5 +180,5 @@\n-                    (%10 : Var<TryTest$A>, %11 : Var<TryTest$C>)void -> {\n-                        %12 : TryTest$A = var.load %10;\n-                        %13 : Var<TryTest$A> = var %12 @\"_a\";\n-                        %14 : TryTest$C = var.load %11;\n-                        %15 : Var<TryTest$C> = var %14 @\"_c\";\n+                    (%10 : Var<java.type:\"TryTest$A\">, %11 : Var<java.type:\"TryTest$C\">)java.type:\"void\" -> {\n+                        %12 : java.type:\"TryTest$A\" = var.load %10;\n+                        %13 : Var<java.type:\"TryTest$A\"> = var %12 @\"_a\";\n+                        %14 : java.type:\"TryTest$C\" = var.load %11;\n+                        %15 : Var<java.type:\"TryTest$C\"> = var %14 @\"_c\";\n@@ -187,4 +187,4 @@\n-                    ^catch(%16 : java.lang.Throwable)void -> {\n-                        %17 : Var<java.lang.Throwable> = var %16 @\"t\";\n-                        %18 : java.lang.Throwable = var.load %17;\n-                        invoke %18 @\"java.lang.Throwable::printStackTrace()void\";\n+                    (%16 : java.type:\"java.lang.Throwable\")java.type:\"void\" -> {\n+                        %17 : Var<java.type:\"java.lang.Throwable\"> = var %16 @\"t\";\n+                        %18 : java.type:\"java.lang.Throwable\" = var.load %17;\n+                        invoke %18 @\"java.lang.Throwable::printStackTrace():void\";\n@@ -193,4 +193,4 @@\n-                    ^finally()void -> {\n-                        %19 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %20 : java.lang.String = constant @\"F\";\n-                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                    ()java.type:\"void\" -> {\n+                        %19 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %20 : java.type:\"java.lang.String\" = constant @\"F\";\n+                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -215,3 +215,3 @@\n-            func @\"test5\" (%0 : TryTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test5\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -219,2 +219,2 @@\n-                    ()void -> {\n-                        %3 : int = constant @\"1\";\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = constant @\"1\";\n@@ -224,3 +224,3 @@\n-                    ^catch(%4 : java.lang.NullPointerException)void -> {\n-                        %5 : Var<java.lang.NullPointerException> = var %4 @\"e\";\n-                        %6 : int = constant @\"2\";\n+                    (%4 : java.type:\"java.lang.NullPointerException\")java.type:\"void\" -> {\n+                        %5 : Var<java.type:\"java.lang.NullPointerException\"> = var %4 @\"e\";\n+                        %6 : java.type:\"int\" = constant @\"2\";\n@@ -230,3 +230,3 @@\n-                    ^catch(%7 : java.lang.OutOfMemoryError)void -> {\n-                        %8 : Var<java.lang.OutOfMemoryError> = var %7 @\"e\";\n-                        %9 : int = constant @\"3\";\n+                    (%7 : java.type:\"java.lang.OutOfMemoryError\")java.type:\"void\" -> {\n+                        %8 : Var<java.type:\"java.lang.OutOfMemoryError\"> = var %7 @\"e\";\n+                        %9 : java.type:\"int\" = constant @\"3\";\n@@ -252,3 +252,3 @@\n-            func @\"test6\" (%0 : TryTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test6\" (%0 : java.type:\"TryTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -256,1 +256,1 @@\n-                    ()void -> {\n+                    ()java.type:\"void\" -> {\n@@ -259,3 +259,3 @@\n-                    ^catch(%3 : java.lang.Exception)void -> {\n-                        %4 : Var<java.lang.Exception> = var %3 @\"e\";\n-                        %5 : java.lang.Exception = var.load %4;\n+                    (%3 : java.type:\"java.lang.Exception\")java.type:\"void\" -> {\n+                        %4 : Var<java.type:\"java.lang.Exception\"> = var %3 @\"e\";\n+                        %5 : java.type:\"java.lang.Exception\" = var.load %4;\n@@ -264,1 +264,1 @@\n-                    ^finally()void -> {\n+                    ()java.type:\"void\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/TryTest.java","additions":69,"deletions":69,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -38,5 +38,5 @@\n-            func @\"test\" (%0 : int)int -> {\n-                %1 : Var<int> = var %0 @\"v\" ;\n-                %2 : int = var.load %1 ;\n-                %3 : int = neg %2 ;\n-                return %3 ;\n+            func @\"test\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"v\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"int\" = neg %2;\n+                return %3;\n@@ -51,3 +51,3 @@\n-            func @\"test2\" (%0 : int)int -> {\n-                %1 : Var<int> = var %0 @\"v\";\n-                %2 : int = var.load %1;\n+            func @\"test2\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"v\";\n+                %2 : java.type:\"int\" = var.load %1;\n@@ -63,5 +63,5 @@\n-            func @\"test3\"  (%0 : int)java.lang.Integer -> {\n-                %1 : Var<int> = var %0 @\"v\" ;\n-                %2 : int = var.load %1 ;\n-                %3 : java.lang.Integer = invoke %2 @\"java.lang.Integer::valueOf(int)java.lang.Integer\" ;\n-                return %3 ;\n+            func @\"test3\" (%0 : java.type:\"int\")java.type:\"java.lang.Integer\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"v\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                return %3;\n@@ -77,6 +77,6 @@\n-            func @\"test4\"  (%0 : java.lang.Integer)java.lang.Integer -> {\n-                %1 : Var<java.lang.Integer> = var %0 @\"v\" ;\n-                %2 : java.lang.Integer = var.load %1 ;\n-                %3 : int = invoke %2 @\"java.lang.Integer::intValue()int\" ;\n-                %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\" ;\n-                return %4 ;\n+            func @\"test4\" (%0 : java.type:\"java.lang.Integer\")java.type:\"java.lang.Integer\" -> {\n+                %1 : Var<java.type:\"java.lang.Integer\"> = var %0 @\"v\";\n+                %2 : java.type:\"java.lang.Integer\" = var.load %1;\n+                %3 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                return %4;\n@@ -92,5 +92,5 @@\n-            func @\"test5\" (%0 : int)int -> {\n-                %1 : Var<int> = var %0 @\"v\" ;\n-                %2 : int = var.load %1 ;\n-                %3 : int = compl %2 ;\n-                return %3 ;\n+            func @\"test5\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"v\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"int\" = compl %2;\n+                return %3;\n@@ -104,24 +104,24 @@\n-            func @\"test6\" (%0 : byte)void -> {\n-                  %1 : Var<byte> = var %0 @\"b\";\n-                  %2 : byte = var.load %1;\n-                  %3 : int = constant @\"1\";\n-                  %4 : byte = conv %3;\n-                  %5 : byte = add %2 %4;\n-                  var.store %1 %5;\n-                  %6 : byte = var.load %1;\n-                  %7 : int = constant @\"1\";\n-                  %8 : byte = conv %7;\n-                  %9 : byte = sub %6 %8;\n-                  var.store %1 %9;\n-                  %10 : byte = var.load %1;\n-                  %11 : int = constant @\"1\";\n-                  %12 : byte = conv %11;\n-                  %13 : byte = add %10 %12;\n-                  var.store %1 %13;\n-                  %14 : byte = var.load %1;\n-                  %15 : int = constant @\"1\";\n-                  %16 : byte = conv %15;\n-                  %17 : byte = sub %14 %16;\n-                  var.store %1 %17;\n-                  return;\n-              };\n+            func @\"test6\" (%0 : java.type:\"byte\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"byte\"> = var %0 @\"b\";\n+                %2 : java.type:\"byte\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                %4 : java.type:\"byte\" = conv %3;\n+                %5 : java.type:\"byte\" = add %2 %4;\n+                var.store %1 %5;\n+                %6 : java.type:\"byte\" = var.load %1;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"byte\" = conv %7;\n+                %9 : java.type:\"byte\" = sub %6 %8;\n+                var.store %1 %9;\n+                %10 : java.type:\"byte\" = var.load %1;\n+                %11 : java.type:\"int\" = constant @\"1\";\n+                %12 : java.type:\"byte\" = conv %11;\n+                %13 : java.type:\"byte\" = add %10 %12;\n+                var.store %1 %13;\n+                %14 : java.type:\"byte\" = var.load %1;\n+                %15 : java.type:\"int\" = constant @\"1\";\n+                %16 : java.type:\"byte\" = conv %15;\n+                %17 : java.type:\"byte\" = sub %14 %16;\n+                var.store %1 %17;\n+                return;\n+            };\n@@ -138,24 +138,24 @@\n-            func @\"test7\" (%0 : short)void -> {\n-                  %1 : Var<short> = var %0 @\"s\";\n-                  %2 : short = var.load %1;\n-                  %3 : int = constant @\"1\";\n-                  %4 : short = conv %3;\n-                  %5 : short = add %2 %4;\n-                  var.store %1 %5;\n-                  %6 : short = var.load %1;\n-                  %7 : int = constant @\"1\";\n-                  %8 : short = conv %7;\n-                  %9 : short = sub %6 %8;\n-                  var.store %1 %9;\n-                  %10 : short = var.load %1;\n-                  %11 : int = constant @\"1\";\n-                  %12 : short = conv %11;\n-                  %13 : short = add %10 %12;\n-                  var.store %1 %13;\n-                  %14 : short = var.load %1;\n-                  %15 : int = constant @\"1\";\n-                  %16 : short = conv %15;\n-                  %17 : short = sub %14 %16;\n-                  var.store %1 %17;\n-                  return;\n-              };\n+            func @\"test7\" (%0 : java.type:\"short\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"short\"> = var %0 @\"s\";\n+                %2 : java.type:\"short\" = var.load %1;\n+                %3 : java.type:\"int\" = constant @\"1\";\n+                %4 : java.type:\"short\" = conv %3;\n+                %5 : java.type:\"short\" = add %2 %4;\n+                var.store %1 %5;\n+                %6 : java.type:\"short\" = var.load %1;\n+                %7 : java.type:\"int\" = constant @\"1\";\n+                %8 : java.type:\"short\" = conv %7;\n+                %9 : java.type:\"short\" = sub %6 %8;\n+                var.store %1 %9;\n+                %10 : java.type:\"short\" = var.load %1;\n+                %11 : java.type:\"int\" = constant @\"1\";\n+                %12 : java.type:\"short\" = conv %11;\n+                %13 : java.type:\"short\" = add %10 %12;\n+                var.store %1 %13;\n+                %14 : java.type:\"short\" = var.load %1;\n+                %15 : java.type:\"int\" = constant @\"1\";\n+                %16 : java.type:\"short\" = conv %15;\n+                %17 : java.type:\"short\" = sub %14 %16;\n+                var.store %1 %17;\n+                return;\n+            };\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnaryopTest.java","additions":72,"deletions":72,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-            func @\"test1\" ()void -> {\n-                java.block ()void -> {\n+            func @\"test1\" ()java.type:\"void\" -> {\n+                java.block ()java.type:\"void\" -> {\n@@ -58,4 +58,4 @@\n-            func @\"test2\" (%0 : int)int -> {\n-                %1 : Var<int> = var %0 @\"i\";\n-                java.block ()void -> {\n-                    %2 : int = var.load %1;\n+            func @\"test2\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                java.block ()java.type:\"void\" -> {\n+                    %2 : java.type:\"int\" = var.load %1;\n@@ -75,2 +75,2 @@\n-            func @\"test3\" (%0 : int)int -> {\n-                %1 : Var<int> = var %0 @\"i\";\n+            func @\"test3\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n@@ -78,2 +78,2 @@\n-                    ()boolean -> {\n-                        %2 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %2 : java.type:\"boolean\" = constant @\"true\";\n@@ -82,2 +82,2 @@\n-                    ()void -> {\n-                        %3 : int = var.load %1;\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = var.load %1;\n@@ -86,2 +86,2 @@\n-                    ()void -> {\n-                        %4 : int = var.load %1;\n+                    ()java.type:\"void\" -> {\n+                        %4 : java.type:\"int\" = var.load %1;\n@@ -104,3 +104,3 @@\n-            func @\"test4\" ()void -> {\n-                %0 : java.util.function.IntUnaryOperator = lambda (%1 : int)int -> {\n-                    %2 : Var<int> = var %1 @\"i\";\n+            func @\"test4\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -108,2 +108,2 @@\n-                        ()boolean -> {\n-                            %3 : boolean = constant @\"true\";\n+                        ()java.type:\"boolean\" -> {\n+                            %3 : java.type:\"boolean\" = constant @\"true\";\n@@ -112,2 +112,2 @@\n-                        ()void -> {\n-                            %4 : int = var.load %2;\n+                        ()java.type:\"void\" -> {\n+                            %4 : java.type:\"int\" = var.load %2;\n@@ -116,2 +116,2 @@\n-                        ()void -> {\n-                            %5 : int = var.load %2;\n+                        ()java.type:\"void\" -> {\n+                            %5 : java.type:\"int\" = var.load %2;\n@@ -122,1 +122,1 @@\n-                %6 : Var<java.util.function.IntUnaryOperator> = var %0 @\"f\";\n+                %6 : Var<java.type:\"java.util.function.IntUnaryOperator\"> = var %0 @\"f\";\n@@ -138,7 +138,7 @@\n-            func @\"test5\" (%0 : int)void -> {\n-                %1 : Var<int> = var %0 @\"n\";\n-                %2 : int = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : int)boolean -> {\n-                        %5 : int = constant @\"42\";\n-                        %6 : boolean = eq %4 %5;\n+            func @\"test5\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"n\";\n+                %2 : java.type:\"int\" = var.load %1;\n+                %3 : java.type:\"java.lang.String\" = java.switch.expression %2\n+                    (%4 : java.type:\"int\")java.type:\"boolean\" -> {\n+                        %5 : java.type:\"int\" = constant @\"42\";\n+                        %6 : java.type:\"boolean\" = eq %4 %5;\n@@ -147,1 +147,1 @@\n-                    ()java.lang.String -> {\n+                    ()java.type:\"java.lang.String\" -> {\n@@ -149,2 +149,2 @@\n-                            ()boolean -> {\n-                                %7 : boolean = constant @\"true\";\n+                            ()java.type:\"boolean\" -> {\n+                                %7 : java.type:\"boolean\" = constant @\"true\";\n@@ -153,1 +153,1 @@\n-                            ()void -> {\n+                            ()java.type:\"void\" -> {\n@@ -158,2 +158,2 @@\n-                    ()boolean -> {\n-                        %8 : boolean = constant @\"true\";\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"boolean\" = constant @\"true\";\n@@ -162,2 +162,2 @@\n-                    ()java.lang.String -> {\n-                        %9 : java.lang.String = constant @\"\";\n+                    ()java.type:\"java.lang.String\" -> {\n+                        %9 : java.type:\"java.lang.String\" = constant @\"\";\n@@ -166,1 +166,1 @@\n-                %10 : Var<java.lang.String> = var %3 @\"s\";\n+                %10 : Var<java.type:\"java.lang.String\"> = var %3 @\"s\";\n@@ -178,3 +178,3 @@\n-            func @\"f\" ()void -> {\n-                %1 : java.util.function.IntUnaryOperator = lambda (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"i\";\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -182,3 +182,3 @@\n-                        ()boolean -> {\n-                            %4 : boolean = constant @\"true\";\n-                            yield %4;\n+                        ()java.type:\"boolean\" -> {\n+                            %3 : java.type:\"boolean\" = constant @\"true\";\n+                            yield %3;\n@@ -186,3 +186,3 @@\n-                        ()void -> {\n-                            %5 : int = var.load %3;\n-                            return %5;\n+                        ()java.type:\"void\" -> {\n+                            %4 : java.type:\"int\" = var.load %2;\n+                            return %4;\n@@ -190,3 +190,3 @@\n-                        ()void -> {\n-                            %6 : int = var.load %3;\n-                            return %6;\n+                        ()java.type:\"void\" -> {\n+                            %5 : java.type:\"int\" = var.load %2;\n+                            return %5;\n@@ -208,3 +208,3 @@\n-            func @\"f\" ()void -> {\n-                %1 : func<int, int> = closure (%2 : int)int -> {\n-                    %3 : Var<int> = var %2 @\"i\";\n+            func @\"f\" ()java.type:\"void\" -> {\n+                %0 : func<java.type:\"int\", java.type:\"int\"> = closure (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                    %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -212,3 +212,3 @@\n-                        ()boolean -> {\n-                            %4 : boolean = constant @\"true\";\n-                            yield %4;\n+                        ()java.type:\"boolean\" -> {\n+                            %3 : java.type:\"boolean\" = constant @\"true\";\n+                            yield %3;\n@@ -216,3 +216,3 @@\n-                        ()void -> {\n-                            %5 : int = var.load %3;\n-                            return %5;\n+                        ()java.type:\"void\" -> {\n+                            %4 : java.type:\"int\" = var.load %2;\n+                            return %4;\n@@ -220,3 +220,3 @@\n-                        ()void -> {\n-                            %6 : int = var.load %3;\n-                            return %6;\n+                        ()java.type:\"void\" -> {\n+                            %5 : java.type:\"int\" = var.load %2;\n+                            return %5;\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnreachableTest.java","additions":64,"deletions":64,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-            func @\"test1\" (%0 : WhileLoopTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test1\" (%0 : java.type:\"WhileLoopTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -42,4 +42,4 @@\n-                    ^cond()boolean -> {\n-                        %3 : int = var.load %2;\n-                        %4 : int = constant @\"10\";\n-                        %5 : boolean = lt %3 %4;\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"10\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n@@ -48,7 +48,7 @@\n-                    ^body()void -> {\n-                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %7 : int = var.load %2;\n-                        invoke %6 %7 @\"java.io.PrintStream::println(int)void\";\n-                        %8 : int = var.load %2;\n-                        %9 : int = constant @\"1\";\n-                        %10 : int = add %8 %9;\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %7 : java.type:\"int\" = var.load %2;\n+                        invoke %6 %7 @\"java.io.PrintStream::println(int):void\";\n+                        %8 : java.type:\"int\" = var.load %2;\n+                        %9 : java.type:\"int\" = constant @\"1\";\n+                        %10 : java.type:\"int\" = add %8 %9;\n@@ -71,16 +71,16 @@\n-            func @\"test2\" (%0 : WhileLoopTest)int -> {\n-              %1 : int = constant @\"0\";\n-              %2 : Var<int> = var %1 @\"i\";\n-              java.while\n-                  ^cond()boolean -> {\n-                      %3 : int = var.load %2;\n-                      %4 : int = constant @\"10\";\n-                      %5 : boolean = lt %3 %4;\n-                      yield %5;\n-                  }\n-                  ^body()void -> {\n-                      %6 : int = var.load %2;\n-                      return %6;\n-                  };\n-              %7 : int = constant @\"-1\";\n-              return %7;\n+            func @\"test2\" (%0 : java.type:\"WhileLoopTest\")java.type:\"int\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n+                java.while\n+                    ()java.type:\"boolean\" -> {\n+                        %3 : java.type:\"int\" = var.load %2;\n+                        %4 : java.type:\"int\" = constant @\"10\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n+                        yield %5;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %6 : java.type:\"int\" = var.load %2;\n+                        return %6;\n+                    };\n+                %7 : java.type:\"int\" = constant @\"-1\";\n+                return %7;\n@@ -99,3 +99,3 @@\n-            func @\"test3\" (%0 : WhileLoopTest)void -> {\n-                %1 : int = constant @\"0\";\n-                %2 : Var<int> = var %1 @\"i\";\n+            func @\"test3\" (%0 : java.type:\"WhileLoopTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"int\" = constant @\"0\";\n+                %2 : Var<java.type:\"int\"> = var %1 @\"i\";\n@@ -103,7 +103,7 @@\n-                    ^body()void -> {\n-                        %3 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %4 : int = var.load %2;\n-                        invoke %3 %4 @\"java.io.PrintStream::println(int)void\";\n-                        %5 : int = var.load %2;\n-                        %6 : int = constant @\"1\";\n-                        %7 : int = add %5 %6;\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %4 : java.type:\"int\" = var.load %2;\n+                        invoke %3 %4 @\"java.io.PrintStream::println(int):void\";\n+                        %5 : java.type:\"int\" = var.load %2;\n+                        %6 : java.type:\"int\" = constant @\"1\";\n+                        %7 : java.type:\"int\" = add %5 %6;\n@@ -113,4 +113,4 @@\n-                    ^cond()boolean -> {\n-                        %8 : int = var.load %2;\n-                        %9 : int = constant @\"10\";\n-                        %10 : boolean = lt %8 %9;\n+                    ()java.type:\"boolean\" -> {\n+                        %8 : java.type:\"int\" = var.load %2;\n+                        %9 : java.type:\"int\" = constant @\"10\";\n+                        %10 : java.type:\"boolean\" = lt %8 %9;\n@@ -132,26 +132,26 @@\n-            func @\"test4\" ()void -> {\n-                  %0 : boolean = constant @\"true\";\n-                  %1 : java.lang.Boolean = invoke %0 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n-                  %2 : Var<java.lang.Boolean> = var %1 @\"b\";\n-                  %3 : int = constant @\"0\";\n-                  %4 : Var<int> = var %3 @\"i\";\n-                  java.while\n-                      ()boolean -> {\n-                          %5 : java.lang.Boolean = var.load %2;\n-                          %6 : boolean = invoke %5 @\"java.lang.Boolean::booleanValue()boolean\";\n-                          yield %6;\n-                      }\n-                      ()void -> {\n-                          %7 : int = var.load %4;\n-                          %8 : int = constant @\"1\";\n-                          %9 : int = add %7 %8;\n-                          var.store %4 %9;\n-                          %10 : int = var.load %4;\n-                          %11 : int = constant @\"10\";\n-                          %12 : boolean = lt %10 %11;\n-                          %13 : java.lang.Boolean = invoke %12 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n-                          var.store %2 %13;\n-                          java.continue;\n-                      };\n-                  return;\n-              };\n+            func @\"test4\" ()java.type:\"void\" -> {\n+                %0 : java.type:\"boolean\" = constant @\"true\";\n+                %1 : java.type:\"java.lang.Boolean\" = invoke %0 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                %2 : Var<java.type:\"java.lang.Boolean\"> = var %1 @\"b\";\n+                %3 : java.type:\"int\" = constant @\"0\";\n+                %4 : Var<java.type:\"int\"> = var %3 @\"i\";\n+                java.while\n+                    ()java.type:\"boolean\" -> {\n+                        %5 : java.type:\"java.lang.Boolean\" = var.load %2;\n+                        %6 : java.type:\"boolean\" = invoke %5 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.type:\"void\" -> {\n+                        %7 : java.type:\"int\" = var.load %4;\n+                        %8 : java.type:\"int\" = constant @\"1\";\n+                        %9 : java.type:\"int\" = add %7 %8;\n+                        var.store %4 %9;\n+                        %10 : java.type:\"int\" = var.load %4;\n+                        %11 : java.type:\"int\" = constant @\"10\";\n+                        %12 : java.type:\"boolean\" = lt %10 %11;\n+                        %13 : java.type:\"java.lang.Boolean\" = invoke %12 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                        var.store %2 %13;\n+                        java.continue;\n+                    };\n+                return;\n+            };\n@@ -170,3 +170,3 @@\n-            func @\"test5\" (%0 : int)void -> {\n-                %1 : Var<int> = var %0 @\"i\";\n-                %3 : Var<java.lang.Boolean> = var @\"b\";\n+            func @\"test5\" (%0 : java.type:\"int\")java.type:\"void\" -> {\n+                %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                %2 : Var<java.type:\"java.lang.Boolean\"> = var @\"b\";\n@@ -174,6 +174,6 @@\n-                    ()void -> {\n-                        %4 : int = var.load %1;\n-                        %5 : int = constant @\"10\";\n-                        %6 : boolean = lt %4 %5;\n-                        %7 : java.lang.Boolean = invoke %6 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n-                        var.store %3 %7;\n+                    ()java.type:\"void\" -> {\n+                        %3 : java.type:\"int\" = var.load %1;\n+                        %4 : java.type:\"int\" = constant @\"10\";\n+                        %5 : java.type:\"boolean\" = lt %3 %4;\n+                        %6 : java.type:\"java.lang.Boolean\" = invoke %5 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                        var.store %2 %6;\n@@ -182,4 +182,4 @@\n-                    ()boolean -> {\n-                        %8 : java.lang.Boolean = var.load %3;\n-                        %9 : boolean = invoke %8 @\"java.lang.Boolean::booleanValue()boolean\";\n-                        yield %9;\n+                    ()java.type:\"boolean\" -> {\n+                        %7 : java.type:\"java.lang.Boolean\" = var.load %2;\n+                        %8 : java.type:\"boolean\" = invoke %7 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        yield %8;\n","filename":"test\/langtools\/tools\/javac\/reflect\/WhileLoopTest.java","additions":83,"deletions":83,"binary":false,"changes":166,"status":"modified"}]}