{"files":[{"patch":"@@ -3,1 +3,11 @@\n-https:\/\/www.khronos.org\/spir.\n\\ No newline at end of file\n+https:\/\/www.khronos.org\/spir.\n+\n+\n+Dependencies:\n+\n+This code depends on the Beehive SPIR-V Toolkit (https:\/\/github.com\/beehive-lab\/beehive-spirv-toolkit)\n+which must be cloned and installed locally. For example:\n+\n+git clone https:\/\/github.com\/beehive-lab\/beehive-spirv-toolkit\n+cd beehive-spirv-toolkit\n+mvn clean install\n","filename":"cr-examples\/spirv\/README.md","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.ArrayList;\n-import java.util.Map;\n@@ -58,1 +56,0 @@\n-import java.lang.reflect.code.descriptor.MethodDesc;\n@@ -60,1 +57,1 @@\n-import java.lang.reflect.code.type.FunctionType;\n+import java.lang.reflect.code.type.MethodRef;\n@@ -62,1 +59,0 @@\n-import uk.ac.manchester.beehivespirvtoolkit.lib.InvalidSPIRVModuleException;\n@@ -71,2 +67,0 @@\n-import uk.ac.manchester.beehivespirvtoolkit.lib.disassembler.CLIHighlighter;\n-import uk.ac.manchester.beehivespirvtoolkit.lib.disassembler.SPIRVPrintingOptions;\n@@ -117,1 +111,1 @@\n-        this.module = new SPIRVModule(new SPIRVHeader(1, 2, 29, 0, 0));\n+        this.module = new SPIRVModule(new SPIRVHeader(1, 2, 32, 0, 0));\n@@ -283,2 +277,2 @@\n-                        if (call.callDescriptor().equals(MethodDesc.ofString(\"spirvdemo.IntArray::get(long)int\")) ||\n-                            call.callDescriptor().equals(MethodDesc.ofString(\"spirvdemo.FloatArray::get(long)float\"))) {\n+                        if (call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.IntArray::get(long)int\")) ||\n+                            call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.FloatArray::get(long)float\"))) {\n@@ -301,2 +295,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.ofString(\"spirvdemo.IntArray::set(long, int)void\")) ||\n-                                call.callDescriptor().equals(MethodDesc.ofString(\"spirvdemo.FloatArray::set(long, float)void\"))) {\n+                        else if (call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.IntArray::set(long, int)void\")) ||\n+                                call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.FloatArray::set(long, float)void\"))) {\n@@ -319,2 +313,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"fromArray\", IntVector.class, VectorSpecies.class, int[].class, int.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"fromArray\", FloatVector.class, VectorSpecies.class, float[].class, int.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"fromArray\", IntVector.class, VectorSpecies.class, int[].class, int.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"fromArray\", FloatVector.class, VectorSpecies.class, float[].class, int.class))) {\n@@ -339,2 +333,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"fromMemorySegment\", IntVector.class, VectorSpecies.class, MemorySegment.class, long.class, ByteOrder.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"fromMemorySegment\", FloatVector.class, VectorSpecies.class, MemorySegment.class, long.class, ByteOrder.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"fromMemorySegment\", IntVector.class, VectorSpecies.class, MemorySegment.class, long.class, ByteOrder.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"fromMemorySegment\", FloatVector.class, VectorSpecies.class, MemorySegment.class, long.class, ByteOrder.class))) {\n@@ -363,2 +357,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"intoArray\", void.class, int[].class, int.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"intoArray\", void.class, float[].class, int.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"intoArray\", void.class, int[].class, int.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"intoArray\", void.class, float[].class, int.class))) {\n@@ -379,2 +373,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"intoMemorySegment\", void.class, MemorySegment.class, long.class, ByteOrder.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"intoMemorySegment\", void.class, MemorySegment.class, long.class, ByteOrder.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"intoMemorySegment\", void.class, MemorySegment.class, long.class, ByteOrder.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"intoMemorySegment\", void.class, MemorySegment.class, long.class, ByteOrder.class))) {\n@@ -400,2 +394,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"reduceLanes\", int.class, VectorOperators.Associative.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"reduceLanes\", float.class, VectorOperators.Associative.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"reduceLanes\", int.class, VectorOperators.Associative.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"reduceLanes\", float.class, VectorOperators.Associative.class))) {\n@@ -431,4 +425,4 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"add\", IntVector.class, Vector.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"mul\", IntVector.class, Vector.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"add\", FloatVector.class, Vector.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"mul\", FloatVector.class, Vector.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"add\", IntVector.class, Vector.class))\n+                              || call.callDescriptor().equals(MethodRef.method(IntVector.class, \"mul\", IntVector.class, Vector.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"add\", FloatVector.class, Vector.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"mul\", FloatVector.class, Vector.class))) {\n@@ -449,1 +443,1 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"fma\", FloatVector.class, Vector.class, Vector.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"fma\", FloatVector.class, Vector.class, Vector.class))) {\n@@ -463,2 +457,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"zero\", IntVector.class, VectorSpecies.class))\n-                             || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"zero\", FloatVector.class, VectorSpecies.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"zero\", IntVector.class, VectorSpecies.class))\n+                             || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"zero\", FloatVector.class, VectorSpecies.class))) {\n@@ -476,2 +470,2 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(IntVector.class, \"lane\", int.class, int.class))\n-                              || call.callDescriptor().equals(MethodDesc.method(FloatVector.class, \"lane\", float.class, int.class)))  {\n+                        else if (call.callDescriptor().equals(MethodRef.method(IntVector.class, \"lane\", int.class, int.class))\n+                              || call.callDescriptor().equals(MethodRef.method(FloatVector.class, \"lane\", float.class, int.class)))  {\n@@ -491,1 +485,1 @@\n-                        else if (call.callDescriptor().equals(MethodDesc.method(VectorSpecies.class, \"length\", int.class))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(VectorSpecies.class, \"length\", int.class))) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":26,"deletions":32,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.lang.reflect.code.OpTransformer;\n-import java.lang.reflect.code.type.FunctionType;\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvOp.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.code.op.CoreOps;\n@@ -37,2 +36,2 @@\n-import java.lang.reflect.code.descriptor.MethodDesc;\n-import java.lang.reflect.code.descriptor.FieldDesc;\n+import java.lang.reflect.code.type.MethodRef;\n+import java.lang.reflect.code.type.FieldRef;\n@@ -85,1 +84,1 @@\n-        private final FieldDesc fieldDesc;\n+        private final FieldRef fieldDesc;\n@@ -87,1 +86,1 @@\n-        public FieldLoadOp(TypeElement resultType, FieldDesc fieldDesc, List<Value> operands) {\n+        public FieldLoadOp(TypeElement resultType, FieldRef fieldRef, List<Value> operands) {\n@@ -102,1 +101,1 @@\n-        public FieldDesc fieldDescriptor() {\n+        public FieldRef fieldDescriptor() {\n@@ -126,1 +125,1 @@\n-        private MethodDesc descriptor;\n+        private MethodRef descriptor;\n@@ -128,1 +127,1 @@\n-        public CallOp(MethodDesc descriptor, List<Value> operands) {\n+        public CallOp(MethodRef descriptor, List<Value> operands) {\n@@ -142,1 +141,1 @@\n-        public MethodDesc callDescriptor() {\n+        public MethodRef callDescriptor() {\n@@ -146,1 +145,1 @@\n-        private static String nameString(MethodDesc descriptor) {\n+        private static String nameString(MethodRef descriptor) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvOps.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.code.TypeElement;\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/StorageType.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import java.lang.reflect.code.descriptor.MethodDesc;\n-import java.lang.reflect.code.type.FunctionType;\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/TranslateToSpirvModel.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}