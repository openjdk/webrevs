{"files":[{"patch":"@@ -27,1 +27,0 @@\n-\n@@ -39,2 +38,0 @@\n-import jdk.incubator.code.Block;\n-import jdk.incubator.code.Body;\n@@ -64,2 +61,2 @@\n-            case CoreOp.VarOp varOp -> varName(varOp);\n-            case HatMemoryOp hatMemoryOp -> varName(hatMemoryOp);\n+            case CoreOp.VarOp $ -> varName($);\n+            case HatMemoryOp $ -> varName($);\n@@ -121,3 +118,1 @@\n-        if (OpTk.isKernelContextAccess(fieldLoadOp)) {\n-            identifier(\"kc\").rarrow().fieldName(fieldLoadOp);\n-        } else if (fieldLoadOp.operands().isEmpty() && fieldLoadOp.result().type() instanceof PrimitiveType) {\n+        if (fieldLoadOp.operands().isEmpty() && fieldLoadOp.result().type() instanceof PrimitiveType) {\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    public HatBlockThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(dimension, operands);\n+    public HatBlockThreadIdOp(int dimension, TypeElement resultType) {\n+        super(dimension, List.of());\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatBlockThreadIdOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    public HatGlobalSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(dimension, operands);\n+    public HatGlobalSizeOp(int dimension, TypeElement resultType) {\n+        super(dimension, List.of());\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalSizeOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    public HatGlobalThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(dimension, operands);\n+    public HatGlobalThreadIdOp(int dimension, TypeElement resultType) {\n+        super(dimension, List.of());\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalThreadIdOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    public HatLocalSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(dimension, operands);\n+    public HatLocalSizeOp(int dimension, TypeElement resultType) {\n+        super(dimension, List.of());\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatLocalSizeOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,2 +41,2 @@\n-    public HatLocalThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(dimension, operands);\n+    public HatLocalThreadIdOp(int dimension, TypeElement resultType) {\n+        super(dimension, List.of());\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatLocalThreadIdOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+        hatBarrierOp.setLocation(invokeOp.location());\n@@ -63,0 +64,1 @@\n+        \/\/System.out.println(\"[INFO] Code model before HatDialectifyBarrierPhase: \" + funcOp.toText());\n@@ -86,2 +88,1 @@\n-        \/\/ System.out.println(\"[INFO] Code model: \" + funcOp.toText());\n-        \/\/entrypoint.funcOp(funcOp);\n+        \/\/System.out.println(\"[INFO] Code model after HatDialectifyBarrierPhase: \" + funcOp.toText());\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatDialectifyBarrierPhase.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            \/\/IO.println(\"ORIGINAL: \" + funcOp.toText());\n+            \/\/ IO.println(\"[INFO] Code model before HatDialectifyMemoryPhase: \" + funcOp.toText());\n@@ -115,0 +115,1 @@\n+\n@@ -116,0 +117,4 @@\n+\n+                            \/\/ update location\n+                            memoryOp.setLocation(varOp.location());\n+\n@@ -125,2 +130,1 @@\n-            \/\/ IO.println(\"[INFO] Code model: \" + funcOp.toText());\n-            \/\/entrypoint.funcOp(funcOp);\n+            \/\/ IO.println(\"[INFO] Code model after HatDialectifyMemoryPhase: \" + funcOp.toText());\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatDialectifyMemoryPhase.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public class HatDilectifyThreadsPhase implements HatDialectifyPhase {\n+public class HatDialectifyThreadsPhase implements HatDialectifyPhase {\n@@ -49,1 +49,1 @@\n-    public HatDilectifyThreadsPhase(ThreadAccess threadAccess) {\n+    public HatDialectifyThreadsPhase(ThreadAccess threadAccess) {\n@@ -55,0 +55,1 @@\n+        \/\/ IO.println(\"[INFO] Code model before HatDialectifyThreadsPhase: \" + funcOp.toText());\n@@ -103,5 +104,5 @@\n-                            case GLOBAL_ID -> new HatGlobalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n-                            case GLOBAL_SIZE -> new HatGlobalSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n-                            case LOCAL_ID -> new HatLocalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n-                            case LOCAL_SIZE -> new HatLocalSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n-                            case BLOCK_ID -> new HatBlockThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case GLOBAL_ID -> new HatGlobalThreadIdOp(dim, fieldLoadOp.resultType());\n+                            case GLOBAL_SIZE -> new HatGlobalSizeOp(dim, fieldLoadOp.resultType());\n+                            case LOCAL_ID -> new HatLocalThreadIdOp(dim, fieldLoadOp.resultType());\n+                            case LOCAL_SIZE -> new HatLocalSizeOp(dim, fieldLoadOp.resultType());\n+                            case BLOCK_ID -> new HatBlockThreadIdOp(dim, fieldLoadOp.resultType());\n@@ -110,0 +111,4 @@\n+\n+                        \/\/ update location\n+                        threadOP.setLocation(fieldLoadOp.location());\n+\n@@ -116,2 +121,1 @@\n-        \/\/IO.println(\"[INFO] Code model: \" + funcOp.toText());\n-        \/\/entrypoint.funcOp(funcOp);\n+        \/\/ IO.println(\"[INFO] Code model after HatDialectifyThreadsPhase: \" + funcOp.toText());\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatDialectifyThreadsPhase.java","additions":13,"deletions":9,"binary":false,"changes":22,"previous_filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatDilectifyThreadsPhase.java","status":"renamed"},{"patch":"@@ -47,2 +47,2 @@\n-        for (HatDilectifyThreadsPhase.ThreadAccess threadAccess: HatDilectifyThreadsPhase.ThreadAccess.values()) {\n-            hatPhases.add(new HatDilectifyThreadsPhase(threadAccess));\n+        for (HatDialectifyThreadsPhase.ThreadAccess threadAccess: HatDialectifyThreadsPhase.ThreadAccess.values()) {\n+            hatPhases.add(new HatDialectifyThreadsPhase(threadAccess));\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatDialectifyTier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}