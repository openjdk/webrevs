{"files":[{"patch":"@@ -4,0 +4,3 @@\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.UndeclaredThrowableException;\n@@ -9,0 +12,1 @@\n+import java.util.stream.LongStream;\n@@ -12,0 +16,1 @@\n+import jdk.incubator.code.type.JavaType;\n@@ -262,0 +267,1 @@\n+    static final JavaType TENSOR_CLASS = JavaType.type(oracle.code.onnx.Tensor.class);\n@@ -267,1 +273,1 @@\n-    static byte[] build(Block block) {\n+    static byte[] build(MethodHandles.Lookup lookup, Block block) {\n@@ -279,0 +285,19 @@\n+                block.ops().stream().<TensorProto>mapMulti((op, opNodes) -> {\n+                    \/\/ @@@ initializers\n+                    if (op instanceof CoreOp.InvokeOp co && co.invokeKind() == CoreOp.InvokeOp.InvokeKind.STATIC\n+                                                         && co.invokeDescriptor().type().parameterTypes().isEmpty()\n+                                                         && co.invokeDescriptor().type().returnType() instanceof JavaType jt\n+                                                         && jt.erasure().equals(TENSOR_CLASS)) {\n+                        try {\n+                            opNodes.accept(tensorProto(\n+                                    indexer.getName(op.result()),\n+                                    (oracle.code.onnx.Tensor)co.invokeDescriptor()\n+                                            .resolveToHandle(lookup, CoreOp.InvokeOp.InvokeKind.STATIC)\n+                                            .invokeExact()));\n+                        } catch (RuntimeException | Error e) {\n+                            throw e;\n+                        } catch (Throwable e) {\n+                            throw new UndeclaredThrowableException(e);\n+                        }\n+                    }\n+                }).toList(),\n@@ -288,1 +313,1 @@\n-                        case CoreOp.ReturnOp _ -> { \/\/ skip\n+                        case CoreOp.ReturnOp _, CoreOp.InvokeOp _ -> { \/\/ skip\n@@ -299,1 +324,1 @@\n-    static byte[] build(List<ValueInfoProto> inputs, List<NodeProto> ops, List<String> outputNames) {\n+    static byte[] build(List<TensorProto> initializers, List<ValueInfoProto> inputs, List<NodeProto> ops, List<String> outputNames) {\n@@ -302,1 +327,1 @@\n-                .graph(graph(inputs, ops, outputNames))\n+                .graph(graph(initializers, inputs, ops, outputNames))\n@@ -307,1 +332,1 @@\n-    static GraphProto graph(List<ValueInfoProto> inputs, List<NodeProto> ops, List<String> outputNames) {\n+    static GraphProto graph(List<TensorProto> initializers, List<ValueInfoProto> inputs, List<NodeProto> ops, List<String> outputNames) {\n@@ -309,0 +334,1 @@\n+                .forEach(initializers, (g, i) -> g.initializer(i))\n@@ -339,0 +365,8 @@\n+    static TensorProto tensorProto(String name, oracle.code.onnx.Tensor t) {\n+        return new TensorProto()\n+                .name(name)\n+                .data_type(t.elementType().id)\n+                .forEach(LongStream.of(t.shape()).boxed().toList(), (tp, d) -> tp.dims(d))\n+                .raw_data(t.data().toArray(ValueLayout.JAVA_BYTE));\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-                    OnnxProtoBuilder.build(onnxFunc.body().entryBlock())), operandsMapping);\n+                    OnnxProtoBuilder.build(l, onnxFunc.body().entryBlock())), operandsMapping);\n@@ -274,0 +274,1 @@\n+                List.of(),\n@@ -285,2 +286,2 @@\n-    public List<Tensor> run(Arena arena, Block block, List<Tensor> inputValues) {\n-        var protoModel = OnnxProtoBuilder.build(block);\n+    public List<Tensor> run(Arena arena, MethodHandles.Lookup lookup, Block block, List<Tensor> inputValues) {\n+        var protoModel = OnnxProtoBuilder.build(lookup, block);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import oracle.code.onnx.Tensor;\n@@ -44,0 +45,1 @@\n+    static final JavaType TENSOR_CLASS = JavaType.type(Tensor.class);\n@@ -300,1 +302,1 @@\n-            assert o.operands().subList(0, inputs.size()).stream().noneMatch(oc::isValueDefined);\n+\/\/            assert o.operands().subList(0, inputs.size()).stream().noneMatch(oc::isValueDefined);\n@@ -324,0 +326,7 @@\n+            unevaluatedOperations.add(o);\n+            return null;\n+        } else if (o instanceof CoreOp.InvokeOp co && co.invokeKind() == CoreOp.InvokeOp.InvokeKind.STATIC\n+                                                   && co.invokeDescriptor().type().parameterTypes().isEmpty()\n+                                                   && co.invokeDescriptor().type().returnType() instanceof JavaType jt\n+                                                   && jt.erasure().equals(TENSOR_CLASS)) {\n+            \/\/ @@@ static no-arg method calls returning Tensor are passed as initializers\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxPartialEvaluator.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -20,0 +20,1 @@\n+                    List.of(),\n@@ -24,4 +25,5 @@\n-             var addOp = ort.createSession(arena, build(\n-                     List.of(tensorInfo(\"a\", FLOAT.id), tensorInfo(\"b\", FLOAT.id)),\n-                     List.of(node(\"Add\", List.of(\"a\", \"b\"), List.of(\"y\"), Map.of())),\n-                     List.of(\"y\")));\n+            var addOp = ort.createSession(arena, build(\n+                    List.of(),\n+                    List.of(tensorInfo(\"a\", FLOAT.id), tensorInfo(\"b\", FLOAT.id)),\n+                    List.of(node(\"Add\", List.of(\"a\", \"b\"), List.of(\"y\"), Map.of())),\n+                    List.of(\"y\")));\n@@ -64,0 +66,1 @@\n+                    List.of(),\n@@ -67,0 +70,1 @@\n+                                    List.of(),\n@@ -71,0 +75,1 @@\n+                                    List.of(),\n@@ -88,0 +93,1 @@\n+                    List.of(),\n@@ -91,0 +97,1 @@\n+                                    List.of(),\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -119,0 +119,19 @@\n+    static Tensor<Float> constantOf42f() {\n+        return Tensor.ofScalar(42f);\n+    }\n+\n+    @CodeReflection\n+    public static Tensor<Float> identityOfInitializer() {\n+        return OnnxOperators.Identity(constantOf42f());\n+    }\n+\n+    @Test\n+    public void testIdentityOfInitializer() {\n+        assertEquals(\n+                constantOf42f(),\n+                identityOfInitializer());\n+        assertEquals(\n+                constantOf42f(),\n+                OnnxRuntime.execute(MethodHandles.lookup(), () -> identityOfInitializer()));\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    public static float[] loadConstant(String resource) {\n+    private static Tensor<Float> initialize(String resource, long... shape) {\n@@ -47,2 +47,2 @@\n-            return MemorySegment.ofArray(in.readAllBytes())\n-                    .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n+            return Tensor.ofShape(shape, MemorySegment.ofArray(in.readAllBytes())\n+                    .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED));\n@@ -54,0 +54,40 @@\n+    static Tensor<Float> conv1Weights() {\n+        return initialize(\"conv1-weight-float-le\", 6, 1, 5, 5);\n+    }\n+\n+    static Tensor<Float> conv1Biases() {\n+        return initialize(\"conv1-bias-float-le\", 6);\n+    }\n+\n+    static Tensor<Float> conv2Weights() {\n+        return initialize(\"conv2-weight-float-le\", 16, 6, 5, 5);\n+    }\n+\n+    static Tensor<Float> conv2Biases() {\n+        return initialize(\"conv2-bias-float-le\", 16);\n+    }\n+\n+    static Tensor<Float> fc1Weights() {\n+        return initialize(\"fc1-weight-float-le\", 120, 256);\n+    }\n+\n+    static Tensor<Float> fc1Biases() {\n+        return initialize(\"fc1-bias-float-le\", 120);\n+    }\n+\n+    static Tensor<Float> fc2Weights() {\n+        return initialize(\"fc2-weight-float-le\", 84, 120);\n+    }\n+\n+    static Tensor<Float> fc2Biases() {\n+        return initialize(\"fc2-bias-float-le\", 84);\n+    }\n+\n+    static Tensor<Float> fc3Weights() {\n+        return initialize(\"fc3-weight-float-le\", 10, 84);\n+    }\n+\n+    static Tensor<Float> fc3Biases() {\n+        return initialize(\"fc3-bias-float-le\", 10);\n+    }\n+\n@@ -60,3 +100,1 @@\n-        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float-le\")), Constant(new long[]{6, 1, 5, 5}), empty());\n-        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float-le\")), Constant(new long[]{6}), empty());\n-        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n+        var conv1 = Conv(scaledInput, conv1Weights(), of(conv1Biases()), of(new long[4]),\n@@ -72,3 +110,1 @@\n-        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float-le\")), Constant(new long[]{16, 6, 5, 5}), empty());\n-        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float-le\")), Constant(new long[]{16}), empty());\n-        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n+        var conv2 = Conv(pool1.Y(), conv2Weights(), of(conv2Biases()), of(new long[4]),\n@@ -87,3 +123,1 @@\n-        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float-le\")), Constant(new long[]{120, 256}), empty());\n-        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float-le\")), Constant(new long[]{120}), empty());\n-        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n+        var fc1 = Gemm(flatten, fc1Weights(), of(fc1Biases()), of(1f), of(1L), of(1f), empty());\n@@ -93,3 +127,1 @@\n-        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float-le\")), Constant(new long[]{84, 120}), empty());\n-        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float-le\")), Constant(new long[]{84}), empty());\n-        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n+        var fc2 = Gemm(relu3, fc2Weights(), of(fc2Biases()), of(1f), of(1L), of(1f), empty());\n@@ -99,3 +131,1 @@\n-        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float-le\")), Constant(new long[]{10, 84}), empty());\n-        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float-le\")), Constant(new long[]{10}), empty());\n-        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n+        var fc3 = Gemm(relu4, fc3Weights(), of(fc3Biases()), of(1f), of(1L), of(1f), empty());\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/mnist\/MNISTDemo.java","additions":48,"deletions":18,"binary":false,"changes":66,"status":"modified"}]}