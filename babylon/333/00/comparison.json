{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.BufferedImage;\n@@ -35,4 +32,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n@@ -45,0 +38,3 @@\n+\n+    static final int IMAGE_SIZE = 28;\n+\n@@ -107,61 +103,7 @@\n-    static final int IMAGE_SIZE = 28;\n-    static final int DRAW_AREA_SIZE = 600;\n-    static final int PEN_SIZE = 20;\n-    static final String[] COLORS = {\"1034a6\", \"412f88\", \"722b6a\", \"a2264b\", \"d3212d\", \"f62d2d\"};\n-\n-    public static void main(String[] args) throws Exception {\n-        var frame = new JFrame(\"CNN MNIST Demo - Handwritten Digit Classification\");\n-        var drawPane = new JPanel(false);\n-        var results = new JLabel();\n-        var cleanFlag = new AtomicBoolean(true);\n-        var drawImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-\n-        results.setPreferredSize(new Dimension(100, 0));\n-        drawPane.setPreferredSize(new Dimension(DRAW_AREA_SIZE, DRAW_AREA_SIZE));\n-        drawPane.addMouseMotionListener(new MouseAdapter() {\n-            @Override\n-            public void mouseMoved(MouseEvent e) {\n-                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n-                    if (cleanFlag.getAndSet(false)) {\n-                        drawImage.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n-                        drawPane.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n-                    }\n-                    drawImage.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n-                    drawPane.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n-                }\n-            }\n-        });\n-        frame.setLayout(new BorderLayout());\n-        frame.add(drawPane, BorderLayout.CENTER);\n-        frame.add(results, BorderLayout.EAST);\n-        frame.add(new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\"), BorderLayout.SOUTH);\n-        frame.pack();\n-        frame.setResizable(false);\n-        frame.addKeyListener(new KeyAdapter(){\n-            @Override\n-            public void keyPressed(KeyEvent e) {\n-                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n-                    var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-                    scaledImage.createGraphics().drawImage(drawImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n-                    var imageData = new float[IMAGE_SIZE * IMAGE_SIZE];\n-                    scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, imageData);\n-                    var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n-\n-                    var prediction = OnnxRuntime.execute(MethodHandles.lookup(),\n-                            () -> cnn(imageTensor));\n-\n-                    var result = prediction.data().toArray(ValueLayout.JAVA_FLOAT);\n-                    var report = new StringBuilder(\"<html>\");\n-                    for (int i = 0; i < result.length; i++) {\n-                        var w = result[i];\n-                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n-                                .formatted((int)(20 * w) + 3, COLORS[(int)(5.99 * w)], i, 100 * w));\n-                    }\n-                    results.setText(report.toString());\n-                    cleanFlag.set(true);\n-                }\n-            }\n-        });\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n+    public static float[] classify(float[] imageData) {\n+        var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+\n+        var predictionTensor = OnnxRuntime.execute(MethodHandles.lookup(),\n+                () -> cnn(imageTensor));\n+\n+        return predictionTensor.data().toArray(ValueLayout.JAVA_FLOAT);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemo.java","additions":10,"deletions":68,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx;\n+\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+\n+import static oracle.code.onnx.MNISTDemo.IMAGE_SIZE;\n+\n+public class MNISTDemoUI {\n+\n+    static final int DRAW_AREA_SIZE = 600;\n+    static final int PEN_SIZE = 20;\n+    static final String[] COLORS = {\"1034a6\", \"412f88\", \"722b6a\", \"a2264b\", \"d3212d\", \"f62d2d\"};\n+\n+    public static void main(String[] args) throws Exception {\n+        var frame = new JFrame(\"CNN MNIST Demo - Handwritten Digit Classification\");\n+        var drawPane = new JPanel(false);\n+        var resultsBoard = new JLabel();\n+        var cleanFlag = new AtomicBoolean(true);\n+        var drawImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+\n+        resultsBoard.setPreferredSize(new Dimension(100, 0));\n+        drawPane.setPreferredSize(new Dimension(DRAW_AREA_SIZE, DRAW_AREA_SIZE));\n+        drawPane.addMouseMotionListener(new MouseAdapter() {\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n+                    if (cleanFlag.getAndSet(false)) {\n+                        drawImage.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                        drawPane.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                    }\n+                    drawImage.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                    drawPane.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                }\n+            }\n+        });\n+        frame.setLayout(new BorderLayout());\n+        frame.add(drawPane, BorderLayout.CENTER);\n+        frame.add(resultsBoard, BorderLayout.EAST);\n+        frame.add(new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\"), BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setResizable(false);\n+        frame.addKeyListener(new KeyAdapter(){\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n+                    var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+                    scaledImage.createGraphics().drawImage(drawImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n+                    var imageData = new float[IMAGE_SIZE * IMAGE_SIZE];\n+                    scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, imageData);\n+\n+                    var results = MNISTDemo.classify(imageData);\n+\n+                    var report = new StringBuilder(\"<html>\");\n+                    for (int i = 0; i < results.length; i++) {\n+                        var w = results[i];\n+                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n+                                .formatted((int)(20 * w) + 3, COLORS[(int)(5.99 * w)], i, 100 * w));\n+                    }\n+                    resultsBoard.setText(report.toString());\n+                    cleanFlag.set(true);\n+                }\n+            }\n+        });\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemoUI.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}