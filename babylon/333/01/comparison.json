{"files":[{"patch":"@@ -12,1 +12,0 @@\n-import jdk.incubator.code.op.CoreOp.FuncOp;\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -353,10 +353,10 @@\n-        var conv1Weight = floatTensor(\"conv1-weight-float-le\", 6, 1, 5, 5);\n-        var conv1Bias = floatTensor(\"conv1-bias-float-le\", 6);\n-        var conv2Weight = floatTensor(\"conv2-weight-float-le\", 16, 6, 5, 5);\n-        var conv2Bias = floatTensor(\"conv2-bias-float-le\", 16);\n-        var fc1Weight = floatTensor(\"fc1-weight-float-le\", 120, 256);\n-        var fc1Bias = floatTensor(\"fc1-bias-float-le\", 120);\n-        var fc2Weight = floatTensor(\"fc2-weight-float-le\", 84, 120);\n-        var fc2Bias = floatTensor(\"fc2-bias-float-le\", 84);\n-        var fc3Weight = floatTensor(\"fc3-weight-float-le\", 10, 84);\n-        var fc3Bias = floatTensor(\"fc3-bias-float-le\", 10);\n+        var conv1Weight = floatTensor(\"mnist\/conv1-weight-float-le\", 6, 1, 5, 5);\n+        var conv1Bias = floatTensor(\"mnist\/conv1-bias-float-le\", 6);\n+        var conv2Weight = floatTensor(\"mnist\/conv2-weight-float-le\", 16, 6, 5, 5);\n+        var conv2Bias = floatTensor(\"mnist\/conv2-bias-float-le\", 16);\n+        var fc1Weight = floatTensor(\"mnist\/fc1-weight-float-le\", 120, 256);\n+        var fc1Bias = floatTensor(\"mnist\/fc1-bias-float-le\", 120);\n+        var fc2Weight = floatTensor(\"mnist\/fc2-weight-float-le\", 84, 120);\n+        var fc2Bias = floatTensor(\"mnist\/fc2-bias-float-le\", 84);\n+        var fc3Weight = floatTensor(\"mnist\/fc3-weight-float-le\", 10, 84);\n+        var fc3Bias = floatTensor(\"mnist\/fc3-bias-float-le\", 10);\n@@ -370,10 +370,10 @@\n-        var conv1Weight = floatTensor(\"conv1-weight-float-le\", 6, 1, 5, 5);\n-        var conv1Bias = floatTensor(\"conv1-bias-float-le\", 6);\n-        var conv2Weight = floatTensor(\"conv2-weight-float-le\", 16, 6, 5, 5);\n-        var conv2Bias = floatTensor(\"conv2-bias-float-le\", 16);\n-        var fc1Weight = floatTensor(\"fc1-weight-float-le\", 120, 256);\n-        var fc1Bias = floatTensor(\"fc1-bias-float-le\", 120);\n-        var fc2Weight = floatTensor(\"fc2-weight-float-le\", 84, 120);\n-        var fc2Bias = floatTensor(\"fc2-bias-float-le\", 84);\n-        var fc3Weight = floatTensor(\"fc3-weight-float-le\", 10, 84);\n-        var fc3Bias = floatTensor(\"fc3-bias-float-le\", 10);\n+        var conv1Weight = floatTensor(\"mnist\/conv1-weight-float-le\", 6, 1, 5, 5);\n+        var conv1Bias = floatTensor(\"mnist\/conv1-bias-float-le\", 6);\n+        var conv2Weight = floatTensor(\"mnist\/conv2-weight-float-le\", 16, 6, 5, 5);\n+        var conv2Bias = floatTensor(\"mnist\/conv2-bias-float-le\", 16);\n+        var fc1Weight = floatTensor(\"mnist\/fc1-weight-float-le\", 120, 256);\n+        var fc1Bias = floatTensor(\"mnist\/fc1-bias-float-le\", 120);\n+        var fc2Weight = floatTensor(\"mnist\/fc2-weight-float-le\", 84, 120);\n+        var fc2Bias = floatTensor(\"mnist\/fc2-bias-float-le\", 84);\n+        var fc3Weight = floatTensor(\"mnist\/fc3-weight-float-le\", 10, 84);\n+        var fc3Bias = floatTensor(\"mnist\/fc3-bias-float-le\", 10);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,169 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package oracle.code.onnx;\n-\n-import jdk.incubator.code.CodeReflection;\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.BufferedImage;\n-import java.io.*;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.ValueLayout;\n-import java.lang.invoke.MethodHandles;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n-\n-import static java.util.Optional.empty;\n-import static java.util.Optional.of;\n-import static oracle.code.onnx.OnnxOperators.*;\n-\n-public class MNISTDemo {\n-    public static float[] loadConstant(String resource) {\n-        try (var in = MNISTDemo.class.getResourceAsStream(resource)) {\n-            return MemorySegment.ofArray(in.readAllBytes())\n-                    .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    @CodeReflection\n-    public static Tensor<Float> cnn(Tensor<Float> inputImage) {\n-        \/\/ Scaling to 0-1\n-        var scaledInput = Div(inputImage, Constant(255f));\n-\n-        \/\/ First conv layer\n-        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float-le\")), Constant(new long[]{6, 1, 5, 5}), empty());\n-        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float-le\")), Constant(new long[]{6}), empty());\n-        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu1 = Relu(conv1);\n-\n-        \/\/ First pooling layer\n-        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Second conv layer\n-        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float-le\")), Constant(new long[]{16, 6, 5, 5}), empty());\n-        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float-le\")), Constant(new long[]{16}), empty());\n-        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu2 = Relu(conv2);\n-\n-        \/\/ Second pooling layer\n-        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Flatten inputs\n-        var flatten = Flatten(pool2.Y(), of(1L));\n-\n-        \/\/ First fully connected layer\n-        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float-le\")), Constant(new long[]{120, 256}), empty());\n-        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float-le\")), Constant(new long[]{120}), empty());\n-        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n-        var relu3 = Relu(fc1);\n-\n-        \/\/ Second fully connected layer\n-        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float-le\")), Constant(new long[]{84, 120}), empty());\n-        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float-le\")), Constant(new long[]{84}), empty());\n-        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n-        var relu4 = Relu(fc2);\n-\n-        \/\/ Softmax layer\n-        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float-le\")), Constant(new long[]{10, 84}), empty());\n-        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float-le\")), Constant(new long[]{10}), empty());\n-        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n-        var prediction = Softmax(fc3, of(1L));\n-\n-        return prediction;\n-    }\n-\n-    static final int IMAGE_SIZE = 28;\n-    static final int DRAW_AREA_SIZE = 600;\n-    static final int PEN_SIZE = 20;\n-    static final String[] COLORS = {\"1034a6\", \"412f88\", \"722b6a\", \"a2264b\", \"d3212d\", \"f62d2d\"};\n-\n-    public static void main(String[] args) throws Exception {\n-        var frame = new JFrame(\"CNN MNIST Demo - Handwritten Digit Classification\");\n-        var drawPane = new JPanel(false);\n-        var results = new JLabel();\n-        var cleanFlag = new AtomicBoolean(true);\n-        var drawImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-\n-        results.setPreferredSize(new Dimension(100, 0));\n-        drawPane.setPreferredSize(new Dimension(DRAW_AREA_SIZE, DRAW_AREA_SIZE));\n-        drawPane.addMouseMotionListener(new MouseAdapter() {\n-            @Override\n-            public void mouseMoved(MouseEvent e) {\n-                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n-                    if (cleanFlag.getAndSet(false)) {\n-                        drawImage.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n-                        drawPane.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n-                    }\n-                    drawImage.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n-                    drawPane.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n-                }\n-            }\n-        });\n-        frame.setLayout(new BorderLayout());\n-        frame.add(drawPane, BorderLayout.CENTER);\n-        frame.add(results, BorderLayout.EAST);\n-        frame.add(new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\"), BorderLayout.SOUTH);\n-        frame.pack();\n-        frame.setResizable(false);\n-        frame.addKeyListener(new KeyAdapter(){\n-            @Override\n-            public void keyPressed(KeyEvent e) {\n-                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n-                    var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-                    scaledImage.createGraphics().drawImage(drawImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n-                    var imageData = new float[IMAGE_SIZE * IMAGE_SIZE];\n-                    scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, imageData);\n-                    var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n-\n-                    var prediction = OnnxRuntime.execute(MethodHandles.lookup(),\n-                            () -> cnn(imageTensor));\n-\n-                    var result = prediction.data().toArray(ValueLayout.JAVA_FLOAT);\n-                    var report = new StringBuilder(\"<html>\");\n-                    for (int i = 0; i < result.length; i++) {\n-                        var w = result[i];\n-                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n-                                .formatted((int)(20 * w) + 3, COLORS[(int)(5.99 * w)], i, 100 * w));\n-                    }\n-                    results.setText(report.toString());\n-                    cleanFlag.set(true);\n-                }\n-            }\n-        });\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-    }\n-}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemo.java","additions":0,"deletions":169,"binary":false,"changes":169,"status":"deleted"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.mnist;\n+\n+import jdk.incubator.code.CodeReflection;\n+\n+import java.io.*;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandles;\n+import oracle.code.onnx.OnnxRuntime;\n+import oracle.code.onnx.Tensor;\n+\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static oracle.code.onnx.OnnxOperators.*;\n+\n+public class MNISTDemo {\n+\n+    static final int IMAGE_SIZE = 28;\n+\n+    public static float[] loadConstant(String resource) {\n+        try (var in = MNISTDemo.class.getResourceAsStream(resource)) {\n+            return MemorySegment.ofArray(in.readAllBytes())\n+                    .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @CodeReflection\n+    public static Tensor<Float> cnn(Tensor<Float> inputImage) {\n+        \/\/ Scaling to 0-1\n+        var scaledInput = Div(inputImage, Constant(255f));\n+\n+        \/\/ First conv layer\n+        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float-le\")), Constant(new long[]{6, 1, 5, 5}), empty());\n+        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float-le\")), Constant(new long[]{6}), empty());\n+        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu1 = Relu(conv1);\n+\n+        \/\/ First pooling layer\n+        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Second conv layer\n+        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float-le\")), Constant(new long[]{16, 6, 5, 5}), empty());\n+        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float-le\")), Constant(new long[]{16}), empty());\n+        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu2 = Relu(conv2);\n+\n+        \/\/ Second pooling layer\n+        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Flatten inputs\n+        var flatten = Flatten(pool2.Y(), of(1L));\n+\n+        \/\/ First fully connected layer\n+        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float-le\")), Constant(new long[]{120, 256}), empty());\n+        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float-le\")), Constant(new long[]{120}), empty());\n+        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n+        var relu3 = Relu(fc1);\n+\n+        \/\/ Second fully connected layer\n+        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float-le\")), Constant(new long[]{84, 120}), empty());\n+        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float-le\")), Constant(new long[]{84}), empty());\n+        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n+        var relu4 = Relu(fc2);\n+\n+        \/\/ Softmax layer\n+        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float-le\")), Constant(new long[]{10, 84}), empty());\n+        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float-le\")), Constant(new long[]{10}), empty());\n+        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n+        var prediction = Softmax(fc3, of(1L));\n+\n+        return prediction;\n+    }\n+\n+    public static float[] classify(float[] imageData) {\n+        var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+\n+        var predictionTensor = OnnxRuntime.execute(MethodHandles.lookup(),\n+                () -> cnn(imageTensor));\n+\n+        return predictionTensor.data().toArray(ValueLayout.JAVA_FLOAT);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/mnist\/MNISTDemo.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.mnist;\n+\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+\n+import static oracle.code.onnx.mnist.MNISTDemo.IMAGE_SIZE;\n+\n+public class MNISTDemoUI {\n+\n+    static final int DRAW_AREA_SIZE = 600;\n+    static final int PEN_SIZE = 20;\n+    static final String[] COLORS = {\"1034a6\", \"412f88\", \"722b6a\", \"a2264b\", \"d3212d\", \"f62d2d\"};\n+\n+    public static void main(String[] args) throws Exception {\n+        var frame = new JFrame(\"CNN MNIST Demo - Handwritten Digit Classification\");\n+        var drawPane = new JPanel(false);\n+        var resultsBoard = new JLabel();\n+        var cleanFlag = new AtomicBoolean(true);\n+        var drawImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+\n+        resultsBoard.setPreferredSize(new Dimension(100, 0));\n+        drawPane.setPreferredSize(new Dimension(DRAW_AREA_SIZE, DRAW_AREA_SIZE));\n+        drawPane.addMouseMotionListener(new MouseAdapter() {\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n+                    if (cleanFlag.getAndSet(false)) {\n+                        drawImage.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                        drawPane.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                    }\n+                    drawImage.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                    drawPane.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                }\n+            }\n+        });\n+        frame.setLayout(new BorderLayout());\n+        frame.add(drawPane, BorderLayout.CENTER);\n+        frame.add(resultsBoard, BorderLayout.EAST);\n+        frame.add(new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\"), BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setResizable(false);\n+        frame.addKeyListener(new KeyAdapter(){\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n+                    var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+                    scaledImage.createGraphics().drawImage(drawImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n+                    var imageData = new float[IMAGE_SIZE * IMAGE_SIZE];\n+                    scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, imageData);\n+\n+                    var results = MNISTDemo.classify(imageData);\n+\n+                    var report = new StringBuilder(\"<html>\");\n+                    for (int i = 0; i < results.length; i++) {\n+                        var w = results[i];\n+                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n+                                .formatted((int)(20 * w) + 3, COLORS[(int)(5.99 * w)], i, 100 * w));\n+                    }\n+                    resultsBoard.setText(report.toString());\n+                    cleanFlag.set(true);\n+                }\n+            }\n+        });\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/mnist\/MNISTDemoUI.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/conv1-bias-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv1-bias-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/conv1-weight-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv1-weight-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/conv2-bias-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv2-bias-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/conv2-weight-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv2-weight-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc1-bias-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc1-bias-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc1-weight-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc1-weight-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc2-bias-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc2-bias-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc2-weight-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc2-weight-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc3-bias-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc3-bias-float-le","status":"renamed"},{"patch":"","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/mnist\/fc3-weight-float-le","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc3-weight-float-le","status":"renamed"}]}