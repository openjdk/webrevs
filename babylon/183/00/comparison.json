{"files":[{"patch":"@@ -78,1 +78,1 @@\n-\n+        originalFuncOpWrapper.op().writeTo(System.out);\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/NativeBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.lang.reflect.Field;\n@@ -62,0 +63,1 @@\n+import java.lang.reflect.code.TypeElement;\n@@ -186,0 +188,3 @@\n+        } else if (fieldLoadOpWrapper.isStaticFinalPrimitive()) {\n+            Object value = fieldLoadOpWrapper.getStaticFinalPrimitiveValue();\n+            literal(value.toString());\n@@ -187,1 +192,1 @@\n-            \/\/ throw new IllegalStateException(\"What is this field load ?\" + fieldLoadOpWrapper.fieldRef());\n+            throw new IllegalStateException(\"What is this field load ?\" + fieldLoadOpWrapper.fieldRef());\n@@ -189,0 +194,1 @@\n+\n@@ -443,2 +449,2 @@\n-                                        boundSchema.boundArrayFields().forEach(a->{\n-                                            if (a.field.equals(array)){\n+                                        boundSchema.boundArrayFields().forEach(a -> {\n+                                            if (a.field.equals(array)) {\n@@ -484,1 +490,1 @@\n-                        }else if (field instanceof Schema.SchemaNode.Padding){\n+                        } else if (field instanceof Schema.SchemaNode.Padding) {\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilder.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n@@ -30,0 +33,2 @@\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.reflect.code.type.PrimitiveType;\n@@ -39,0 +44,1 @@\n+            \/\/ This should not rely on string\n@@ -44,0 +50,5 @@\n+    public boolean isStaticFinalPrimitive() {\n+      return hasNoOperands() && resultType() instanceof PrimitiveType;\n+      \/\/ Can we check for final?\n+    }\n+\n@@ -52,0 +63,4 @@\n+    public TypeElement fieldType() {\n+        return fieldRef().refType();\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FieldAccessOpWrapper.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.reflect.Field;\n+import java.lang.reflect.code.TypeElement;\n@@ -36,0 +38,16 @@\n+    public Object getStaticFinalPrimitiveValue() {\n+        TypeElement te = fieldType();\n+        String fieldName = fieldName();\n+        try {\n+            Class<?> clazz = Class.forName(te.toString());\n+            Field field = clazz.getField(fieldName);\n+           return  field.get(null);\n+\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(e);\n+        } catch (NoSuchFieldException e) {\n+            throw new RuntimeException(e);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FieldLoadOpWrapper.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}