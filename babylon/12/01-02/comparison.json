{"files":[{"patch":"@@ -38,3 +38,0 @@\n-import java.lang.classfile.CodeElement;\n-import java.lang.classfile.CodeTransform;\n-import java.lang.classfile.Instruction;\n@@ -46,2 +43,0 @@\n-import java.lang.classfile.instruction.BranchInstruction;\n-import java.lang.classfile.instruction.LabelTarget;\n@@ -60,1 +55,0 @@\n-import java.lang.reflect.code.Block.Reference;\n@@ -75,1 +69,0 @@\n-import java.util.Queue;\n@@ -119,16 +112,0 @@\n-    private static class DebugTransform implements CodeTransform {\n-        private int bci = 0;\n-\n-        @Override\n-        public void accept(CodeBuilder cob, CodeElement coe) {\n-            cob.accept(coe);\n-\/\/            switch (coe) {\n-\/\/                case LabelTarget lt -> System.out.println(bci + \": \" + lt + \" (\" + lt.label().hashCode() + \")\");\n-\/\/                case BranchInstruction bi -> System.out.println(bci + \": \" + bi + \" (\" + bi.target().hashCode() + \")\");\n-\/\/                default -> System.out.println(bci + \": \" + coe);\n-\/\/            }\n-            if (coe instanceof Instruction ins) bci += ins.sizeInBytes();\n-        }\n-\n-    }\n-\n@@ -146,1 +123,1 @@\n-                        cb -> cb.transforming(new DebugTransform(), cob -> {\n+                        cob -> {\n@@ -149,1 +126,1 @@\n-                        })));\n+                        }));\n@@ -208,1 +185,0 @@\n-\n@@ -213,4 +189,0 @@\n-        int getOrAssignSlot(Value v) {\n-            return getOrAssignSlot(v, false);\n-        }\n-\n@@ -347,2 +319,2 @@\n-    private static void computeExceptionRegionMembership(Body r, CodeBuilder cob, ConversionContext c) {\n-        final List<Block> blocks = r.blocks();\n+    private static void computeExceptionRegionMembership(Body body, CodeBuilder cob, ConversionContext c) {\n+        final List<Block> blocks = body.blocks();\n@@ -351,1 +323,1 @@\n-        \/\/ List of all activeRegions\n+        \/\/ List of all regions\n@@ -355,2 +327,2 @@\n-            final BitSet activeRegions;\n-            BlockWithActiveExceptionRegions(Block block, BitSet activeRegions) {\n+            final BitSet activeRegionStack;\n+            BlockWithActiveExceptionRegions(Block block, BitSet activeRegionStack) {\n@@ -358,1 +330,1 @@\n-                this.activeRegions = activeRegions;\n+                this.activeRegionStack = activeRegionStack;\n@@ -360,1 +332,1 @@\n-                activeRegions.stream().forEach(r -> allRegions.get(r).blocks.set(index));\n+                activeRegionStack.stream().forEach(r -> allRegions.get(r).blocks.set(index));\n@@ -365,1 +337,1 @@\n-        stack.push(new BlockWithActiveExceptionRegions(r.entryBlock(), new BitSet()));\n+        stack.push(new BlockWithActiveExceptionRegions(body.entryBlock(), new BitSet()));\n@@ -375,1 +347,1 @@\n-                stack.push(new BlockWithActiveExceptionRegions(bop.branch().targetBlock(), bm.activeRegions));\n+                stack.push(new BlockWithActiveExceptionRegions(bop.branch().targetBlock(), bm.activeRegionStack));\n@@ -377,2 +349,2 @@\n-                stack.push(new BlockWithActiveExceptionRegions(cop.falseBranch().targetBlock(), bm.activeRegions));\n-                stack.push(new BlockWithActiveExceptionRegions(cop.trueBranch().targetBlock(), bm.activeRegions));\n+                stack.push(new BlockWithActiveExceptionRegions(cop.falseBranch().targetBlock(), bm.activeRegionStack));\n+                stack.push(new BlockWithActiveExceptionRegions(cop.trueBranch().targetBlock(), bm.activeRegionStack));\n@@ -380,1 +352,0 @@\n-                ArrayList<Block.Reference> catchBlocks = new ArrayList<>(er.catchBlocks());\n@@ -383,1 +354,1 @@\n-                    stack.push(new BlockWithActiveExceptionRegions(catchBlock.targetBlock(), bm.activeRegions));\n+                    stack.push(new BlockWithActiveExceptionRegions(catchBlock.targetBlock(), bm.activeRegionStack));\n@@ -385,2 +356,2 @@\n-                BitSet activeRegions = (BitSet)bm.activeRegions.clone();\n-                activeRegions.set(allRegions.size());\n+                BitSet activeRegionStack = (BitSet)bm.activeRegionStack.clone();\n+                activeRegionStack.set(allRegions.size());\n@@ -389,1 +360,1 @@\n-                stack.push(new BlockWithActiveExceptionRegions(er.start().targetBlock(), activeRegions));\n+                stack.push(new BlockWithActiveExceptionRegions(er.start().targetBlock(), activeRegionStack));\n@@ -391,3 +362,3 @@\n-                BitSet activeRegions = (BitSet)bm.activeRegions.clone();\n-                activeRegions.clear(activeRegions.length() - 1);\n-                stack.push(new BlockWithActiveExceptionRegions(er.end().targetBlock(), activeRegions));\n+                BitSet activeRegionStack = (BitSet)bm.activeRegionStack.clone();\n+                activeRegionStack.clear(activeRegionStack.length() - 1);\n+                stack.push(new BlockWithActiveExceptionRegions(er.end().targetBlock(), activeRegionStack));\n@@ -454,2 +425,0 @@\n-\/\/                clb.parameter(ex.type());\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":20,"deletions":51,"binary":false,"changes":71,"status":"modified"}]}