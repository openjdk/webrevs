{"files":[{"patch":"@@ -41,1 +41,4 @@\n-final class BranchCompactor implements CodeTransform {\n+public final class BranchCompactor implements CodeTransform {\n+\n+    public BranchCompactor() {\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BranchCompactor.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.components.ClassPrinter;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.reflect.code.bytecode.BranchCompactor;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @run testng TestBranchCompactor\n+ *\/\n+public class TestBranchCompactor {\n+\n+    @Test\n+    public void testBranchCompactor() {\n+        var cc = ClassFile.of();\n+        var clm = cc.parse(cc.build(ClassDesc.of(\"c\"), clb -> clb.withMethodBody(\"m\", ConstantDescs.MTD_void, 0,\n+                cb -> cb.transforming(new BranchCompactor(), cob -> {\n+                    var l1 = cob.newLabel();\n+                    cob.goto_(l1);\n+                    cob.labelBinding(l1);\n+                    l1 = cob.newLabel();\n+                    cob.goto_(l1);\n+                    cob.labelBinding(l1);\n+                    cob.iconst_0();\n+                    cob.ifThenElse(tb -> {\n+                        var l2 = tb.newLabel();\n+                        tb.goto_(l2);\n+                        tb.labelBinding(l2);\n+                        l2 = tb.newLabel();\n+                        tb.goto_(l2);\n+                        tb.labelBinding(l2);\n+                    }, eb -> {\n+                        var l2 = eb.newLabel();\n+                        eb.goto_(l2);\n+                        eb.labelBinding(l2);\n+                        l2 = eb.newLabel();\n+                        eb.goto_(l2);\n+                        eb.labelBinding(l2);\n+                    });\n+                    l1 = cob.newLabel();\n+                    cob.goto_(l1);\n+                    cob.labelBinding(l1);\n+                    l1 = cob.newLabel();\n+                    cob.goto_(l1);\n+                    cob.labelBinding(l1);\n+                    cob.return_();\n+                }))));\n+\n+        ClassPrinter.toYaml(clm, ClassPrinter.Verbosity.TRACE_ALL, System.out::print);\n+        \/\/only iconst_0 and return_ should remain\n+        Assert.assertEquals(clm.methods().get(0).code().get().elementList().size(), 2);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}