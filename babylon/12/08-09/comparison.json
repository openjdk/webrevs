{"files":[{"patch":"@@ -59,12 +59,7 @@\n-                case LabelTarget lt -> {\n-                    if (branch.target() == lt.label()) {\n-                        \/\/skip branch to immediate target\n-                        branch = null;\n-                        \/\/flush the buffer\n-                        atEnd(cob);\n-                        \/\/pass the target\n-                        cob.with(lt);\n-                    } else {\n-                        \/\/buffer other targets\n-                        buffer.add(lt);\n-                    }\n+                case LabelTarget lt when branch.target() == lt.label() -> {\n+                    \/\/skip branch to immediate target\n+                    branch = null;\n+                    \/\/flush the buffer\n+                    atEnd(cob);\n+                    \/\/pass the target\n+                    cob.with(lt);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BranchCompactor.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -320,1 +320,0 @@\n-        final List<Block> blocks = body.blocks();\n@@ -331,2 +330,1 @@\n-                int index = blocks.indexOf(block);\n-                activeRegionStack.stream().forEach(r -> allRegions.get(r).blocks.set(index));\n+                activeRegionStack.stream().forEach(r -> allRegions.get(r).blocks.set(block.index()));\n@@ -368,0 +366,1 @@\n+        final List<Block> blocks = body.blocks();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}