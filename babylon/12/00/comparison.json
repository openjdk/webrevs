{"files":[{"patch":"@@ -69,1 +69,0 @@\n-import java.util.Collections;\n@@ -76,0 +75,1 @@\n+import java.util.Queue;\n@@ -125,5 +125,5 @@\n-            switch (coe) {\n-                case LabelTarget lt -> System.out.println(bci + \": \" + lt + \" (\" + lt.label().hashCode() + \")\");\n-                case BranchInstruction bi -> System.out.println(bci + \": \" + bi + \" (\" + bi.target().hashCode() + \")\");\n-                default -> System.out.println(bci + \": \" + coe);\n-            }\n+\/\/            switch (coe) {\n+\/\/                case LabelTarget lt -> System.out.println(bci + \": \" + lt + \" (\" + lt.label().hashCode() + \")\");\n+\/\/                case BranchInstruction bi -> System.out.println(bci + \": \" + bi + \" (\" + bi.target().hashCode() + \")\");\n+\/\/                default -> System.out.println(bci + \": \" + coe);\n+\/\/            }\n@@ -170,1 +170,0 @@\n-        final Map<Block, ExceptionRegionNode> coveredBlocks;\n@@ -180,1 +179,0 @@\n-            this.coveredBlocks = new HashMap<>();\n@@ -348,9 +346,0 @@\n-    record ExceptionRegionNode(CoreOps.ExceptionRegionEnter ere, int size, ExceptionRegionNode next) {\n-    }\n-\n-    static final ExceptionRegionNode NIL = new ExceptionRegionNode(null, 0, null);\n-\n-    private static void computeExceptionRegionMembership(Body r, ConversionContext c) {\n-        Set<Block> visited = new HashSet<>();\n-        Deque<Block> stack = new ArrayDeque<>();\n-        stack.push(r.entryBlock());\n@@ -358,4 +347,19 @@\n-        \/\/ Set of catching blocks\n-        Set<Block> catchingBlocks = c.catchingBlocks;\n-        \/\/ Map of block to stack of covered exception regions\n-        Map<Block, ExceptionRegionNode> coveredBlocks = c.coveredBlocks;\n+    private static void computeExceptionRegionMembership(Body r, CodeBuilder cob, ConversionContext c) {\n+        final List<Block> blocks = r.blocks();\n+        record ExceptionRegionWithBlocks(CoreOps.ExceptionRegionEnter ere, BitSet blocks) {\n+        }\n+        \/\/ List of all activeRegions\n+        final List<ExceptionRegionWithBlocks> allRegions = new ArrayList<>();\n+        class BlockWithActiveExceptionRegions {\n+            final Block block;\n+            final BitSet activeRegions;\n+            BlockWithActiveExceptionRegions(Block block, BitSet activeRegions) {\n+                this.block = block;\n+                this.activeRegions = activeRegions;\n+                int index = blocks.indexOf(block);\n+                activeRegions.stream().forEach(r -> allRegions.get(r).blocks.set(index));\n+            }\n+        }\n+        final Set<Block> visited = new HashSet<>();\n+        final Deque<BlockWithActiveExceptionRegions> stack = new ArrayDeque<>();\n+        stack.push(new BlockWithActiveExceptionRegions(r.entryBlock(), new BitSet()));\n@@ -364,1 +368,2 @@\n-            Block b = stack.pop();\n+            BlockWithActiveExceptionRegions bm = stack.pop();\n+            Block b = bm.block;\n@@ -368,1 +373,0 @@\n-\n@@ -370,1 +374,0 @@\n-            ExceptionRegionNode bRegions = coveredBlocks.get(b);\n@@ -372,5 +375,1 @@\n-                if (bRegions != null) {\n-                    coveredBlocks.put(bop.branch().targetBlock(), bRegions);\n-                }\n-\n-                stack.push(bop.branch().targetBlock());\n+                stack.push(new BlockWithActiveExceptionRegions(bop.branch().targetBlock(), bm.activeRegions));\n@@ -378,7 +377,2 @@\n-                if (bRegions != null) {\n-                    coveredBlocks.put(cop.falseBranch().targetBlock(), bRegions);\n-                    coveredBlocks.put(cop.trueBranch().targetBlock(), bRegions);\n-                }\n-\n-                stack.push(cop.falseBranch().targetBlock());\n-                stack.push(cop.trueBranch().targetBlock());\n+                stack.push(new BlockWithActiveExceptionRegions(cop.falseBranch().targetBlock(), bm.activeRegions));\n+                stack.push(new BlockWithActiveExceptionRegions(cop.trueBranch().targetBlock(), bm.activeRegions));\n@@ -387,8 +381,3 @@\n-                Collections.reverse(catchBlocks);\n-                for (Block.Reference catchBlock : catchBlocks) {\n-                    catchingBlocks.add(catchBlock.targetBlock());\n-                    if (bRegions != null) {\n-                        coveredBlocks.put(catchBlock.targetBlock(), bRegions);\n-                    }\n-\n-                    stack.push(catchBlock.targetBlock());\n+                for (Block.Reference catchBlock : catchBlocks.reversed()) {\n+                    c.catchingBlocks.add(catchBlock.targetBlock());\n+                    stack.push(new BlockWithActiveExceptionRegions(catchBlock.targetBlock(), bm.activeRegions));\n@@ -396,10 +385,5 @@\n-\n-                ExceptionRegionNode n;\n-                if (bRegions != null) {\n-                    n = new ExceptionRegionNode(er, bRegions.size + 1, bRegions);\n-                } else {\n-                    n = new ExceptionRegionNode(er, 1, NIL);\n-                }\n-                coveredBlocks.put(er.start().targetBlock(), n);\n-\n-                stack.push(er.start().targetBlock());\n+                BitSet activeRegions = (BitSet)bm.activeRegions.clone();\n+                activeRegions.set(allRegions.size());\n+                ExceptionRegionWithBlocks newNode = new ExceptionRegionWithBlocks(er, new BitSet());\n+                allRegions.add(newNode);\n+                stack.push(new BlockWithActiveExceptionRegions(er.start().targetBlock(), activeRegions));\n@@ -407,4 +391,20 @@\n-                assert bRegions != null;\n-\n-                if (bRegions.size() > 1) {\n-                    coveredBlocks.put(er.end().targetBlock(), bRegions.next());\n+                BitSet activeRegions = (BitSet)bm.activeRegions.clone();\n+                activeRegions.clear(activeRegions.length() - 1);\n+                stack.push(new BlockWithActiveExceptionRegions(er.end().targetBlock(), activeRegions));\n+            }\n+        }\n+        \/\/ Declare the exception regions\n+        for (ExceptionRegionWithBlocks erNode : allRegions.reversed()) {\n+            int start  = erNode.blocks.nextSetBit(0);\n+            while (start >= 0) {\n+                int end = erNode.blocks.nextClearBit(start);\n+                Label startLabel = c.getLabel(blocks.get(start));\n+                Label endLabel = c.getLabel(blocks.get(end));\n+                for (Block.Reference cbr : erNode.ere.catchBlocks()) {\n+                    Block cb = cbr.targetBlock();\n+                    if (!cb.parameters().isEmpty()) {\n+                        ClassDesc type = cb.parameters().get(0).type().toNominalDescriptor();\n+                        cob.exceptionCatch(startLabel, endLabel, c.getLabel(cb), type);\n+                    } else {\n+                        cob.exceptionCatchAll(startLabel, endLabel, c.getLabel(cb));\n+                    }\n@@ -412,2 +412,1 @@\n-\n-                stack.push(er.end().targetBlock());\n+                start = erNode.blocks.nextSetBit(end);\n@@ -429,1 +428,1 @@\n-        computeExceptionRegionMembership(body, c);\n+        computeExceptionRegionMembership(body, cob, c);\n@@ -777,12 +776,0 @@\n-                    ExceptionRegionEnter enterOp = op.regionStart();\n-                    Label start = c.getLabel(enterOp.start().targetBlock());\n-                    Label end = cob.newBoundLabel();\n-                    for (Reference cbr : enterOp.catchBlocks()) {\n-                        Block cb = cbr.targetBlock();\n-                        if (!cb.parameters().isEmpty()) {\n-                            ClassDesc type = cb.parameters().get(0).type().toNominalDescriptor();\n-                            cob.exceptionCatch(start, end, c.getLabel(cb), type);\n-                        } else {\n-                            cob.exceptionCatchAll(start, end, c.getLabel(cb));\n-                        }\n-                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":60,"deletions":73,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -131,2 +131,1 @@\n-    @Test(enabled = false)\n-    \/\/finalizer in exception handler is invalid (missing exception.region.exit)\n+    @Test\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinally.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -87,2 +87,1 @@\n-    @Test(enabled = false)\n-    \/\/finalizer in exception handler is invalid (missing exception.region.exit)\n+    @Test\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinallyNested.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}