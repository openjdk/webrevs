{"files":[{"patch":"@@ -1664,3 +1664,2 @@\n-            ArrayType arrayType = (ArrayType) array.type();\n-            if (!arrayType.isArray()) {\n-                throw new IllegalArgumentException(\"Type is not an array type: \" + arrayType);\n+            if (!(array.type() instanceof ArrayType arrayType)) {\n+                throw new IllegalArgumentException(\"Type is not an array type: \" + array.type());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,15 +102,0 @@\n-\n-    @Override\n-    public boolean isClass() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isArray() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isPrimitive() {\n-        return false;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ArrayType.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -92,15 +92,0 @@\n-    @Override\n-    public boolean isArray() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isPrimitive() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isClass() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ClassType.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-\/\/ @@@ Extend from this interface to model Java types with more fidelity\n@@ -144,8 +143,0 @@\n-    \/\/ Predicates\n-\n-    boolean isClass();\n-\n-    boolean isArray();\n-\n-    boolean isPrimitive();\n-\n@@ -221,11 +212,5 @@\n-        if (t.isPrimitive()) {\n-            throw new IllegalArgumentException(\"Cannot parameterize a primitive type\");\n-        } else if (t.isArray()) {\n-            return array(type(((ArrayType)t).componentType(), typeArguments));\n-        } else {\n-            ClassType ct = (ClassType)t;\n-            if (ct.hasTypeArguments()) {\n-                throw new IllegalArgumentException(\"Type must not have type arguments: \" + ct);\n-            }\n-            return new ClassType(ct.toClassName(), typeArguments);\n-        }\n+        return switch (t) {\n+            case ArrayType at -> array(type(at.componentType(), typeArguments));\n+            case ClassType ct when !ct.hasTypeArguments() -> new ClassType(ct.toClassName(), typeArguments);\n+            default -> throw new IllegalArgumentException(\"Cannot parameterize type: \" + t);\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":5,"deletions":20,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-\/* package *\/ final class PrimitiveType implements JavaType {\n+public final class PrimitiveType implements JavaType {\n@@ -73,15 +73,0 @@\n-    public boolean isArray() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isPrimitive() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean isClass() {\n-        return false;\n-    }\n-\n-    @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/PrimitiveType.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -114,15 +114,0 @@\n-\n-    @Override\n-    public boolean isClass() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isArray() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isPrimitive() {\n-        return false;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TypeVarRef.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -97,15 +97,0 @@\n-    @Override\n-    public boolean isClass() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isArray() {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean isPrimitive() {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/WildcardType.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}