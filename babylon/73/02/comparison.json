{"files":[{"patch":"@@ -55,1 +55,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -71,1 +71,1 @@\n-    public static MemorySegment generateModule(String moduleName, CoreOps.FuncOp func) {\n+    public static MemorySegment generateModule(String moduleName, CoreOp.FuncOp func) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -44,2 +44,2 @@\n-    public static SpirvOps.FuncOp translateFunction(CoreOps.FuncOp func) {\n-        CoreOps.FuncOp lowFunc = lowerMethod(func);\n+    public static SpirvOps.FuncOp translateFunction(CoreOp.FuncOp func) {\n+        CoreOp.FuncOp lowFunc = lowerMethod(func);\n@@ -75,1 +75,1 @@\n-            assert entryBlock.ops().get(i) instanceof CoreOps.VarOp;\n+            assert entryBlock.ops().get(i) instanceof CoreOp.VarOp;\n@@ -84,1 +84,1 @@\n-            CoreOps.VarOp jvop = (CoreOps.VarOp)entryBlock.ops().get(i);\n+            CoreOp.VarOp jvop = (CoreOp.VarOp)entryBlock.ops().get(i);\n@@ -99,1 +99,1 @@\n-                if (op instanceof CoreOps.VarOp jvop) {\n+                if (op instanceof CoreOp.VarOp jvop) {\n@@ -113,1 +113,1 @@\n-                    case CoreOps.ReturnOp rop -> {\n+                    case CoreOp.ReturnOp rop -> {\n@@ -116,1 +116,1 @@\n-                    case CoreOps.VarOp vop -> {\n+                    case CoreOp.VarOp vop -> {\n@@ -122,1 +122,1 @@\n-                    case CoreOps.VarAccessOp.VarLoadOp vlo -> {\n+                    case CoreOp.VarAccessOp.VarLoadOp vlo -> {\n@@ -128,1 +128,1 @@\n-                    case CoreOps.VarAccessOp.VarStoreOp vso -> {\n+                    case CoreOp.VarAccessOp.VarStoreOp vso -> {\n@@ -133,1 +133,1 @@\n-                    case CoreOps.ArrayAccessOp.ArrayLoadOp alo -> {\n+                    case CoreOp.ArrayAccessOp.ArrayLoadOp alo -> {\n@@ -146,1 +146,1 @@\n-                    case CoreOps.ArrayAccessOp.ArrayStoreOp aso -> {\n+                    case CoreOp.ArrayAccessOp.ArrayStoreOp aso -> {\n@@ -154,1 +154,1 @@\n-                    case CoreOps.ArrayLengthOp alo -> {\n+                    case CoreOp.ArrayLengthOp alo -> {\n@@ -159,1 +159,1 @@\n-                    case CoreOps.AddOp aop -> {\n+                    case CoreOp.AddOp aop -> {\n@@ -169,1 +169,1 @@\n-                    case CoreOps.SubOp sop -> {\n+                    case CoreOp.SubOp sop -> {\n@@ -179,1 +179,1 @@\n-                    case CoreOps.MulOp mop -> {\n+                    case CoreOp.MulOp mop -> {\n@@ -189,1 +189,1 @@\n-                    case CoreOps.DivOp dop -> {\n+                    case CoreOp.DivOp dop -> {\n@@ -199,1 +199,1 @@\n-                    case CoreOps.ModOp mop -> {\n+                    case CoreOp.ModOp mop -> {\n@@ -206,1 +206,1 @@\n-                    case CoreOps.EqOp eqop -> {\n+                    case CoreOp.EqOp eqop -> {\n@@ -216,1 +216,1 @@\n-                    case CoreOps.NeqOp neqop -> {\n+                    case CoreOp.NeqOp neqop -> {\n@@ -226,1 +226,1 @@\n-                    case CoreOps.LtOp ltop -> {\n+                    case CoreOp.LtOp ltop -> {\n@@ -233,1 +233,1 @@\n-                    case CoreOps.InvokeOp inv -> {\n+                    case CoreOp.InvokeOp inv -> {\n@@ -239,1 +239,1 @@\n-                    case CoreOps.ConstantOp cop -> {\n+                    case CoreOp.ConstantOp cop -> {\n@@ -244,1 +244,1 @@\n-                    case CoreOps.ConvOp cop -> {\n+                    case CoreOp.ConvOp cop -> {\n@@ -250,1 +250,1 @@\n-                    case CoreOps.FieldAccessOp.FieldLoadOp flo -> {\n+                    case CoreOp.FieldAccessOp.FieldLoadOp flo -> {\n@@ -255,1 +255,1 @@\n-                    case CoreOps.BranchOp bop -> {\n+                    case CoreOp.BranchOp bop -> {\n@@ -259,1 +259,1 @@\n-                    case CoreOps.ConditionalBranchOp cbop -> {\n+                    case CoreOp.ConditionalBranchOp cbop -> {\n@@ -277,2 +277,2 @@\n-    private static CoreOps.FuncOp lowerMethod(CoreOps.FuncOp fop) {\n-        CoreOps.FuncOp lfop = fop.transform((block, op) -> {\n+    private static CoreOp.FuncOp lowerMethod(CoreOp.FuncOp fop) {\n+        CoreOp.FuncOp lfop = fop.transform((block, op) -> {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/TranslateToSpirvModel.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp javaFunc = method.getCodeModel().get();\n+        CoreOp.FuncOp javaFunc = method.getCodeModel().get();\n","filename":"cr-examples\/spirv\/src\/test\/java\/intel\/code\/spirv\/ExampleUseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -53,1 +53,1 @@\n-    static CoreOps.FuncOp getJavaCodeModel(String name) {\n+    static CoreOp.FuncOp getJavaCodeModel(String name) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/Functions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.CoreOps.VarAccessOp.VarLoadOp;\n-import java.lang.reflect.code.op.CoreOps.VarAccessOp.VarStoreOp;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.CoreOp.VarAccessOp.VarLoadOp;\n+import java.lang.reflect.code.op.CoreOp.VarAccessOp.VarStoreOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -44,1 +44,1 @@\n-    final ExtendedOps.JavaForOp fop;\n+    final ExtendedOp.JavaForOp fop;\n@@ -46,1 +46,1 @@\n-    SimpleCountedForLoopInfo(ExtendedOps.JavaForOp fop) {\n+    SimpleCountedForLoopInfo(ExtendedOp.JavaForOp fop) {\n@@ -66,2 +66,2 @@\n-        Patterns.OpPattern p = opP(CoreOps.YieldOp.class,\n-                opP(CoreOps.VarOp.class,\n+        Patterns.OpPattern p = opP(CoreOp.YieldOp.class,\n+                opP(CoreOp.VarOp.class,\n@@ -93,2 +93,2 @@\n-        Patterns.OpPattern p = opP(CoreOps.YieldOp.class,\n-                opP(CoreOps.LtOp.class,\n+        Patterns.OpPattern p = opP(CoreOp.YieldOp.class,\n+                opP(CoreOp.LtOp.class,\n@@ -125,1 +125,1 @@\n-                opP(CoreOps.AddOp.class,\n+                opP(CoreOp.AddOp.class,\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/SimpleCountedForLoopInfo.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                } else if (op instanceof CoreOps.UnreachableOp _) {\n+                } else if (op instanceof CoreOp.UnreachableOp _) {\n@@ -118,1 +118,1 @@\n-            entryBlock.op(CoreOps.unreachable());\n+            entryBlock.op(CoreOp.unreachable());\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -42,1 +42,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n@@ -191,1 +191,1 @@\n-                case ExtendedOps.JavaForOp fop -> {\n+                case ExtendedOp.JavaForOp fop -> {\n@@ -206,1 +206,1 @@\n-                case ExtendedOps.JavaContinueOp _ -> {\n+                case ExtendedOp.JavaContinueOp _ -> {\n@@ -625,1 +625,1 @@\n-                    Op.Result result = kblock.op(CoreOps.constant(iop.resultType(), aType));\n+                    Op.Result result = kblock.op(CoreOp.constant(iop.resultType(), aType));\n@@ -643,1 +643,1 @@\n-            case ExtendedOps.JavaForOp fop -> {\n+            case ExtendedOp.JavaForOp fop -> {\n@@ -659,1 +659,1 @@\n-    static void transformToSCFFor(CopyContext cc, Block.Builder kblock, ExtendedOps.JavaForOp fop,\n+    static void transformToSCFFor(CopyContext cc, Block.Builder kblock, ExtendedOp.JavaForOp fop,\n@@ -730,1 +730,1 @@\n-                        if (op instanceof ExtendedOps.JavaContinueOp) {\n+                        if (op instanceof ExtendedOp.JavaContinueOp) {\n@@ -947,1 +947,1 @@\n-            return block.op(CoreOps.constant(JavaType.type(TensorType.class), r.type()));\n+            return block.op(CoreOp.constant(JavaType.type(TensorType.class), r.type()));\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -97,1 +97,1 @@\n-                            .andThen(CoreOps.FACTORY),\n+                            .andThen(CoreOp.FACTORY),\n@@ -102,1 +102,1 @@\n-        void test(CoreOps.FuncOp javaKernel,\n+        void test(CoreOp.FuncOp javaKernel,\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TritonTestExtension.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.op.CoreOps.FuncOp;\n+import java.lang.reflect.code.op.CoreOp.FuncOp;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -57,1 +56,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n@@ -300,1 +299,1 @@\n-            List<Op> ops = OpParser.fromString(ExtendedOps.FACTORY, modelText);\n+            List<Op> ops = OpParser.fromString(ExtendedOp.FACTORY, modelText);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -34,2 +34,2 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.branch;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.branch;\n@@ -74,2 +74,2 @@\n-         * {@snippet lang = \"java\" :\n-         *     if (p.invokableOperation() instanceof CoreOps.FuncOp f) {\n+         * {@snippet lang = \"java\":\n+         *     if (p.invokableOperation() instanceof CoreOp.FuncOp f) {\n@@ -78,1 +78,1 @@\n-         * }\n+         *}\n@@ -633,1 +633,1 @@\n-                if (op instanceof CoreOps.ReturnOp rop && getNearestInvokeableAncestorOp(op) == invokableOp) {\n+                if (op instanceof CoreOp.ReturnOp rop && getNearestInvokeableAncestorOp(op) == invokableOp) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Block.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @sealedGraph\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/CodeElement.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+ * @sealedGraph\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/CodeItem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ * @sealedGraph\n@@ -36,1 +37,1 @@\n-public abstract sealed class Value implements Comparable<Value>, CodeItem\n+public sealed abstract class Value implements Comparable<Value>, CodeItem\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Value.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -308,1 +308,1 @@\n-    public static sealed abstract class Pattern {\n+    public sealed static abstract class Pattern {\n@@ -497,1 +497,1 @@\n-     * Creates an operation pattern that tests if the operation is a {@link CoreOps.ConstantOp constant} operation\n+     * Creates an operation pattern that tests if the operation is a {@link CoreOp.ConstantOp constant} operation\n@@ -506,1 +506,1 @@\n-            if (op instanceof CoreOps.ConstantOp cop) {\n+            if (op instanceof CoreOp.ConstantOp cop) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/Patterns.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -65,2 +65,2 @@\n-        Map<Block, Set<CoreOps.VarOp>> joinPoints = new HashMap<>();\n-        Map<CoreOps.VarAccessOp.VarLoadOp, Object> loadValues = new HashMap<>();\n+        Map<Block, Set<CoreOp.VarOp>> joinPoints = new HashMap<>();\n+        Map<CoreOp.VarAccessOp.VarLoadOp, Object> loadValues = new HashMap<>();\n@@ -70,1 +70,1 @@\n-        Map<Block, Map<CoreOps.VarOp, Block.Parameter>> joinBlockArguments = new HashMap<>();\n+        Map<Block, Map<CoreOp.VarOp, Block.Parameter>> joinBlockArguments = new HashMap<>();\n@@ -80,1 +80,1 @@\n-            if (op instanceof CoreOps.VarOp || op instanceof CoreOps.VarAccessOp) {\n+            if (op instanceof CoreOp.VarOp || op instanceof CoreOp.VarAccessOp) {\n@@ -82,1 +82,1 @@\n-                if (op instanceof CoreOps.VarAccessOp.VarLoadOp vl) {\n+                if (op instanceof CoreOp.VarAccessOp.VarLoadOp vl) {\n@@ -133,1 +133,1 @@\n-    record VarOpBlockArgument(Block b, CoreOps.VarOp vop) {\n+    record VarOpBlockArgument(Block b, CoreOp.VarOp vop) {\n@@ -141,2 +141,2 @@\n-                                Map<Block, Set<CoreOps.VarOp>> joinPoints,\n-                                Map<CoreOps.VarAccessOp.VarLoadOp, Object> loadValues,\n+                                Map<Block, Set<CoreOp.VarOp>> joinPoints,\n+                                Map<CoreOp.VarAccessOp.VarLoadOp, Object> loadValues,\n@@ -144,1 +144,1 @@\n-        Map<CoreOps.VarOp, Deque<Object>> variableStack = new HashMap<>();\n+        Map<CoreOp.VarOp, Deque<Object>> variableStack = new HashMap<>();\n@@ -164,3 +164,3 @@\n-                                Map<CoreOps.VarOp, Deque<Object>> variableStack,\n-                                Map<Block, Set<CoreOps.VarOp>> joinPoints,\n-                                Map<CoreOps.VarAccessOp.VarLoadOp, Object> loadValues,\n+                                Map<CoreOp.VarOp, Deque<Object>> variableStack,\n+                                Map<Block, Set<CoreOp.VarOp>> joinPoints,\n+                                Map<CoreOp.VarAccessOp.VarLoadOp, Object> loadValues,\n@@ -173,1 +173,1 @@\n-            Set<CoreOps.VarOp> varOps = joinPoints.get(n.b());\n+            Set<CoreOp.VarOp> varOps = joinPoints.get(n.b());\n@@ -186,1 +186,1 @@\n-                if (op instanceof CoreOps.VarOp varOp) {\n+                if (op instanceof CoreOp.VarOp varOp) {\n@@ -191,1 +191,1 @@\n-                } else if (op instanceof CoreOps.VarAccessOp.VarStoreOp storeOp) {\n+                } else if (op instanceof CoreOp.VarAccessOp.VarStoreOp storeOp) {\n@@ -196,1 +196,1 @@\n-                } else if (op instanceof CoreOps.VarAccessOp.VarLoadOp loadOp) {\n+                } else if (op instanceof CoreOp.VarAccessOp.VarLoadOp loadOp) {\n@@ -203,1 +203,1 @@\n-                        if (o instanceof CoreOps.VarAccessOp.VarLoadOp loadOp &&\n+                        if (o instanceof CoreOp.VarAccessOp.VarLoadOp loadOp &&\n@@ -215,1 +215,1 @@\n-                Set<CoreOps.VarOp> varOps = joinPoints.get(succ.targetBlock());\n+                Set<CoreOp.VarOp> varOps = joinPoints.get(succ.targetBlock());\n@@ -234,1 +234,1 @@\n-            Set<CoreOps.VarOp> varOps = joinPoints.get(n.b());\n+            Set<CoreOp.VarOp> varOps = joinPoints.get(n.b());\n@@ -244,1 +244,1 @@\n-                if (op instanceof CoreOps.VarOp varOp) {\n+                if (op instanceof CoreOp.VarOp varOp) {\n@@ -246,1 +246,1 @@\n-                } else if (op instanceof CoreOps.VarAccessOp.VarStoreOp storeOp) {\n+                } else if (op instanceof CoreOp.VarAccessOp.VarStoreOp storeOp) {\n@@ -271,1 +271,1 @@\n-    public static void findJoinPoints(Body body, Map<Block, Set<CoreOps.VarOp>> joinPoints) {\n+    public static void findJoinPoints(Body body, Map<Block, Set<CoreOp.VarOp>> joinPoints) {\n@@ -273,1 +273,1 @@\n-        Map<CoreOps.VarOp, Set<Block>> a = findVarStores(body);\n+        Map<CoreOp.VarOp, Set<Block>> a = findVarStores(body);\n@@ -281,1 +281,1 @@\n-        for (CoreOps.VarOp v : a.keySet()) {\n+        for (CoreOp.VarOp v : a.keySet()) {\n@@ -313,1 +313,1 @@\n-    static Map<CoreOps.VarOp, Set<Block>> findVarStores(Body r) {\n+    static Map<CoreOp.VarOp, Set<Block>> findVarStores(Body r) {\n@@ -315,1 +315,1 @@\n-            if (op instanceof CoreOps.VarAccessOp.VarStoreOp storeOp) {\n+            if (op instanceof CoreOp.VarAccessOp.VarStoreOp storeOp) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/SSA.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-import java.lang.reflect.code.op.CoreOps.*;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.CoreOp.*;\n@@ -40,1 +41,0 @@\n-import java.lang.reflect.code.op.CoreOps;\n@@ -180,1 +180,1 @@\n-    private record ExceptionRegionWithBlocks(CoreOps.ExceptionRegionEnter ere, BitSet blocks) {}\n+    private record ExceptionRegionWithBlocks(CoreOp.ExceptionRegionEnter ere, BitSet blocks) {}\n@@ -265,1 +265,1 @@\n-                or.op() instanceof CoreOps.ConstantOp constantOp &&\n+                or.op() instanceof CoreOp.ConstantOp constantOp &&\n@@ -342,1 +342,1 @@\n-            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof CoreOps.BinaryTestOp bto ->\n+            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp bto ->\n@@ -363,1 +363,1 @@\n-    private static boolean isConditionForCondBrOp(CoreOps.BinaryTestOp op) {\n+    private static boolean isConditionForCondBrOp(CoreOp.BinaryTestOp op) {\n@@ -384,1 +384,1 @@\n-        return use.op() instanceof CoreOps.ConditionalBranchOp;\n+        return use.op() instanceof CoreOp.ConditionalBranchOp;\n@@ -440,1 +440,1 @@\n-                case CoreOps.BranchOp bop ->\n+                case CoreOp.BranchOp bop ->\n@@ -442,1 +442,1 @@\n-                case CoreOps.ConditionalBranchOp cop -> {\n+                case CoreOp.ConditionalBranchOp cop -> {\n@@ -446,1 +446,1 @@\n-                case CoreOps.ExceptionRegionEnter er -> {\n+                case CoreOp.ExceptionRegionEnter er -> {\n@@ -457,1 +457,1 @@\n-                case CoreOps.ExceptionRegionExit er -> {\n+                case CoreOp.ExceptionRegionExit er -> {\n@@ -885,1 +885,1 @@\n-                case CoreOps.ReturnOp op -> {\n+                case CoreOp.ReturnOp op -> {\n@@ -903,1 +903,1 @@\n-                    if (getConditionForCondBrOp(op) instanceof CoreOps.BinaryTestOp btop) {\n+                    if (getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp btop) {\n@@ -961,1 +961,1 @@\n-    private static Op getConditionForCondBrOp(CoreOps.ConditionalBranchOp op) {\n+    private static Op getConditionForCondBrOp(CoreOp.ConditionalBranchOp op) {\n@@ -1132,1 +1132,1 @@\n-    static CoreOps.FuncOp quote(CoreOps.LambdaOp lop) {\n+    static CoreOp.FuncOp quote(CoreOp.LambdaOp lop) {\n@@ -1139,1 +1139,1 @@\n-        FunctionType ft = FunctionType.functionType(CoreOps.QuotedOp.QUOTED_TYPE, params);\n+        FunctionType ft = FunctionType.functionType(CoreOp.QuotedOp.QUOTED_TYPE, params);\n@@ -1142,1 +1142,1 @@\n-        return CoreOps.func(\"q\", ft).body(b -> {\n+        return CoreOp.func(\"q\", ft).body(b -> {\n@@ -1150,1 +1150,1 @@\n-                    Value var = b.op(CoreOps.var(String.valueOf(i), p));\n+                    Value var = b.op(CoreOp.var(String.valueOf(i), p));\n@@ -1158,1 +1158,1 @@\n-            Value q = b.op(CoreOps.quoted(b.parentBody(), qb -> {\n+            Value q = b.op(CoreOp.quoted(b.parentBody(), qb -> {\n@@ -1167,1 +1167,1 @@\n-            b.op(CoreOps._return(q));\n+            b.op(CoreOp._return(q));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -125,1 +125,1 @@\n-                return op(CoreOps.var(varName, value));\n+                return op(CoreOp.var(varName, value));\n@@ -127,1 +127,1 @@\n-                op(CoreOps.varStore(var, value));\n+                op(CoreOp.varStore(var, value));\n@@ -144,1 +144,1 @@\n-    public static CoreOps.FuncOp lift(byte[] classdata, String methodName) {\n+    public static CoreOp.FuncOp lift(byte[] classdata, String methodName) {\n@@ -148,1 +148,1 @@\n-    public static CoreOps.FuncOp lift(byte[] classdata, String methodName, MethodTypeDesc methodType) {\n+    public static CoreOp.FuncOp lift(byte[] classdata, String methodName, MethodTypeDesc methodType) {\n@@ -156,2 +156,2 @@\n-    public static CoreOps.FuncOp lift(MethodModel methodModel) {\n-        return CoreOps.func(\n+    public static CoreOp.FuncOp lift(MethodModel methodModel) {\n+        return CoreOp.func(\n@@ -209,1 +209,1 @@\n-                        op(CoreOps.branch(next.successor(List.copyOf(stack))));\n+                        op(CoreOp.branch(next.successor(List.copyOf(stack))));\n@@ -218,1 +218,1 @@\n-                            Op ere = CoreOps.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor());\n+                            Op ere = CoreOp.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor());\n@@ -230,1 +230,1 @@\n-                            op(CoreOps.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor()));\n+                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor()));\n@@ -236,1 +236,1 @@\n-                    op(CoreOps.branch(getBlock(inst.target()).successor(List.copyOf(stack))));\n+                    op(CoreOp.branch(getBlock(inst.target()).successor(List.copyOf(stack))));\n@@ -243,16 +243,16 @@\n-                        case IFNE -> CoreOps.eq(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFEQ -> CoreOps.neq(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFGE -> CoreOps.lt(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFLE -> CoreOps.gt(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFGT -> CoreOps.le(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFLT -> CoreOps.ge(operand, op(CoreOps.constant(JavaType.INT, 0)));\n-                        case IFNULL -> CoreOps.neq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, null)));\n-                        case IFNONNULL -> CoreOps.eq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, null)));\n-                        case IF_ICMPNE -> CoreOps.eq(stack.pop(), operand);\n-                        case IF_ICMPEQ -> CoreOps.neq(stack.pop(), operand);\n-                        case IF_ICMPGE -> CoreOps.lt(stack.pop(), operand);\n-                        case IF_ICMPLE -> CoreOps.gt(stack.pop(), operand);\n-                        case IF_ICMPGT -> CoreOps.le(stack.pop(), operand);\n-                        case IF_ICMPLT -> CoreOps.ge(stack.pop(), operand);\n-                        case IF_ACMPEQ -> CoreOps.neq(stack.pop(), operand);\n-                        case IF_ACMPNE -> CoreOps.eq(stack.pop(), operand);\n+                        case IFNE -> CoreOp.eq(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFEQ -> CoreOp.neq(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFGE -> CoreOp.lt(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFLE -> CoreOp.gt(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFGT -> CoreOp.le(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFLT -> CoreOp.ge(operand, op(CoreOp.constant(JavaType.INT, 0)));\n+                        case IFNULL -> CoreOp.neq(operand, op(CoreOp.constant(JavaType.J_L_OBJECT, null)));\n+                        case IFNONNULL -> CoreOp.eq(operand, op(CoreOp.constant(JavaType.J_L_OBJECT, null)));\n+                        case IF_ICMPNE -> CoreOp.eq(stack.pop(), operand);\n+                        case IF_ICMPEQ -> CoreOp.neq(stack.pop(), operand);\n+                        case IF_ICMPGE -> CoreOp.lt(stack.pop(), operand);\n+                        case IF_ICMPLE -> CoreOp.gt(stack.pop(), operand);\n+                        case IF_ICMPGT -> CoreOp.le(stack.pop(), operand);\n+                        case IF_ICMPLT -> CoreOp.ge(stack.pop(), operand);\n+                        case IF_ACMPEQ -> CoreOp.neq(stack.pop(), operand);\n+                        case IF_ACMPNE -> CoreOp.eq(stack.pop(), operand);\n@@ -265,1 +265,1 @@\n-                    op(CoreOps.conditionalBranch(op(cop),\n+                    op(CoreOp.conditionalBranch(op(cop),\n@@ -281,1 +281,1 @@\n-                    op(CoreOps._return());\n+                    op(CoreOp._return());\n@@ -285,1 +285,1 @@\n-                    op(CoreOps._return(stack.pop()));\n+                    op(CoreOp._return(stack.pop()));\n@@ -289,1 +289,1 @@\n-                    op(CoreOps._throw(stack.pop()));\n+                    op(CoreOp._throw(stack.pop()));\n@@ -293,1 +293,1 @@\n-                    stack.push(op(CoreOps.varLoad(var(inst.slot(), inst.typeKind()))));\n+                    stack.push(op(CoreOp.varLoad(var(inst.slot(), inst.typeKind()))));\n@@ -299,3 +299,3 @@\n-                    varStore(inst.slot(), TypeKind.IntType, op(CoreOps.add(\n-                            op(CoreOps.varLoad(var(inst.slot(), TypeKind.IntType))),\n-                            op(CoreOps.constant(JavaType.INT, inst.constant())))));\n+                    varStore(inst.slot(), TypeKind.IntType, op(CoreOp.add(\n+                            op(CoreOp.varLoad(var(inst.slot(), TypeKind.IntType))),\n+                            op(CoreOp.constant(JavaType.INT, inst.constant())))));\n@@ -305,6 +305,6 @@\n-                        case ClassDesc v -> CoreOps.constant(JavaType.J_L_CLASS, JavaType.ofNominalDescriptor(v));\n-                        case Double v -> CoreOps.constant(JavaType.DOUBLE, v);\n-                        case Float v -> CoreOps.constant(JavaType.FLOAT, v);\n-                        case Integer v -> CoreOps.constant(JavaType.INT, v);\n-                        case Long v -> CoreOps.constant(JavaType.LONG, v);\n-                        case String v -> CoreOps.constant(JavaType.J_L_STRING, v);\n+                        case ClassDesc v -> CoreOp.constant(JavaType.J_L_CLASS, JavaType.ofNominalDescriptor(v));\n+                        case Double v -> CoreOp.constant(JavaType.DOUBLE, v);\n+                        case Float v -> CoreOp.constant(JavaType.FLOAT, v);\n+                        case Integer v -> CoreOp.constant(JavaType.INT, v);\n+                        case Long v -> CoreOp.constant(JavaType.LONG, v);\n+                        case String v -> CoreOp.constant(JavaType.J_L_STRING, v);\n@@ -317,1 +317,1 @@\n-                    stack.push(op(CoreOps.conv(switch (inst.toType()) {\n+                    stack.push(op(CoreOp.conv(switch (inst.toType()) {\n@@ -334,1 +334,1 @@\n-                                CoreOps.add(stack.pop(), operand);\n+                                CoreOp.add(stack.pop(), operand);\n@@ -336,1 +336,1 @@\n-                                CoreOps.sub(stack.pop(), operand);\n+                                CoreOp.sub(stack.pop(), operand);\n@@ -338,1 +338,1 @@\n-                                CoreOps.mul(stack.pop(), operand);\n+                                CoreOp.mul(stack.pop(), operand);\n@@ -340,1 +340,1 @@\n-                                CoreOps.div(stack.pop(), operand);\n+                                CoreOp.div(stack.pop(), operand);\n@@ -342,1 +342,1 @@\n-                                CoreOps.mod(stack.pop(), operand);\n+                                CoreOp.mod(stack.pop(), operand);\n@@ -344,1 +344,1 @@\n-                                CoreOps.neg(operand);\n+                                CoreOp.neg(operand);\n@@ -346,1 +346,1 @@\n-                                CoreOps.arrayLength(operand);\n+                                CoreOp.arrayLength(operand);\n@@ -348,1 +348,1 @@\n-                                CoreOps.and(stack.pop(), operand);\n+                                CoreOp.and(stack.pop(), operand);\n@@ -350,1 +350,1 @@\n-                                CoreOps.or(stack.pop(), operand);\n+                                CoreOp.or(stack.pop(), operand);\n@@ -352,1 +352,1 @@\n-                                CoreOps.xor(stack.pop(), operand);\n+                                CoreOp.xor(stack.pop(), operand);\n@@ -364,1 +364,1 @@\n-                                stack.push(op(CoreOps.fieldLoad(fd, stack.pop())));\n+                                stack.push(op(CoreOp.fieldLoad(fd, stack.pop())));\n@@ -366,1 +366,1 @@\n-                                stack.push(op(CoreOps.fieldLoad(fd)));\n+                                stack.push(op(CoreOp.fieldLoad(fd)));\n@@ -369,1 +369,1 @@\n-                                stack.push(op(CoreOps.fieldStore(fd, stack.pop(), value)));\n+                                stack.push(op(CoreOp.fieldStore(fd, stack.pop(), value)));\n@@ -372,1 +372,1 @@\n-                                stack.push(op(CoreOps.fieldStore(fd, stack.pop())));\n+                                stack.push(op(CoreOp.fieldStore(fd, stack.pop())));\n@@ -380,1 +380,1 @@\n-                    op(CoreOps.arrayStoreOp(stack.pop(), index, value));\n+                    op(CoreOp.arrayStoreOp(stack.pop(), index, value));\n@@ -384,1 +384,1 @@\n-                    stack.push(op(CoreOps.arrayLoadOp(stack.pop(), index)));\n+                    stack.push(op(CoreOp.arrayLoadOp(stack.pop(), index)));\n@@ -399,1 +399,1 @@\n-                            yield op(CoreOps.invoke(mDesc, operands.reversed()));\n+                            yield op(CoreOp.invoke(mDesc, operands.reversed()));\n@@ -402,1 +402,1 @@\n-                            op(CoreOps.invoke(mDesc, operands.reversed()));\n+                            op(CoreOp.invoke(mDesc, operands.reversed()));\n@@ -405,1 +405,1 @@\n-                                yield op(CoreOps._new(\n+                                yield op(CoreOp._new(\n@@ -412,1 +412,1 @@\n-                                yield op(CoreOps.invoke(mDesc, operands.reversed()));\n+                                yield op(CoreOp.invoke(mDesc, operands.reversed()));\n@@ -433,1 +433,1 @@\n-                    stack.push(op(CoreOps.newArray(\n+                    stack.push(op(CoreOp.newArray(\n@@ -449,1 +449,1 @@\n-                    stack.push(op(CoreOps.newArray(\n+                    stack.push(op(CoreOp.newArray(\n@@ -454,1 +454,1 @@\n-                    stack.push(op(CoreOps._new(\n+                    stack.push(op(CoreOp._new(\n@@ -461,1 +461,1 @@\n-                    stack.push(op(CoreOps.cast(JavaType.ofNominalDescriptor(inst.type().asSymbol()), stack.pop())));\n+                    stack.push(op(CoreOp.cast(JavaType.ofNominalDescriptor(inst.type().asSymbol()), stack.pop())));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.op.CoreOp;\n@@ -35,1 +36,0 @@\n-import java.lang.reflect.code.op.CoreOps;\n@@ -131,1 +131,1 @@\n-        void popExceptionRegion(CoreOps.ExceptionRegionEnter ers) {\n+        void popExceptionRegion(CoreOp.ExceptionRegionEnter ers) {\n@@ -159,1 +159,1 @@\n-            implements CoreOps.Var<Object> {\n+            implements CoreOp.Var<Object> {\n@@ -171,1 +171,1 @@\n-    record ClosureRecord(CoreOps.ClosureOp op,\n+    record ClosureRecord(CoreOp.ClosureOp op,\n@@ -187,2 +187,2 @@\n-    record ExceptionRegionRecord(BlockContext mark, CoreOps.ExceptionRegionEnter ers)\n-            implements CoreOps.ExceptionRegion {\n+    record ExceptionRegionRecord(BlockContext mark, CoreOp.ExceptionRegionEnter ers)\n+            implements CoreOp.ExceptionRegion {\n@@ -297,1 +297,1 @@\n-            if (to instanceof CoreOps.ConditionalBranchOp cb) {\n+            if (to instanceof CoreOp.ConditionalBranchOp cb) {\n@@ -313,1 +313,1 @@\n-            } else if (to instanceof CoreOps.BranchOp b) {\n+            } else if (to instanceof CoreOp.BranchOp b) {\n@@ -317,1 +317,1 @@\n-            } else if (to instanceof CoreOps.ThrowOp _throw) {\n+            } else if (to instanceof CoreOp.ThrowOp _throw) {\n@@ -320,1 +320,1 @@\n-            } else if (to instanceof CoreOps.ReturnOp ret) {\n+            } else if (to instanceof CoreOp.ReturnOp ret) {\n@@ -323,1 +323,1 @@\n-            } else if (to instanceof CoreOps.YieldOp yop) {\n+            } else if (to instanceof CoreOp.YieldOp yop) {\n@@ -326,1 +326,1 @@\n-            } else if (to instanceof CoreOps.ExceptionRegionEnter ers) {\n+            } else if (to instanceof CoreOp.ExceptionRegionEnter ers) {\n@@ -333,1 +333,1 @@\n-            } else if (to instanceof CoreOps.ExceptionRegionExit ere) {\n+            } else if (to instanceof CoreOp.ExceptionRegionExit ere) {\n@@ -378,1 +378,1 @@\n-        if (o instanceof CoreOps.ConstantOp co) {\n+        if (o instanceof CoreOp.ConstantOp co) {\n@@ -384,1 +384,1 @@\n-        } else if (o instanceof CoreOps.FuncCallOp fco) {\n+        } else if (o instanceof CoreOp.FuncCallOp fco) {\n@@ -395,2 +395,2 @@\n-            if (top instanceof CoreOps.ModuleOp mop) {\n-                CoreOps.FuncOp funcOp = mop.functionTable().get(name);\n+            if (top instanceof CoreOp.ModuleOp mop) {\n+                CoreOp.FuncOp funcOp = mop.functionTable().get(name);\n@@ -410,1 +410,1 @@\n-        } else if (o instanceof CoreOps.InvokeOp co) {\n+        } else if (o instanceof CoreOp.InvokeOp co) {\n@@ -421,1 +421,1 @@\n-        } else if (o instanceof CoreOps.NewOp no) {\n+        } else if (o instanceof CoreOp.NewOp no) {\n@@ -437,1 +437,1 @@\n-        } else if (o instanceof CoreOps.QuotedOp qo) {\n+        } else if (o instanceof CoreOp.QuotedOp qo) {\n@@ -441,1 +441,1 @@\n-        } else if (o instanceof CoreOps.LambdaOp lo) {\n+        } else if (o instanceof CoreOp.LambdaOp lo) {\n@@ -465,1 +465,1 @@\n-        } else if (o instanceof CoreOps.ClosureOp co) {\n+        } else if (o instanceof CoreOp.ClosureOp co) {\n@@ -469,1 +469,1 @@\n-        } else if (o instanceof CoreOps.ClosureCallOp cco) {\n+        } else if (o instanceof CoreOp.ClosureCallOp cco) {\n@@ -474,1 +474,1 @@\n-        } else if (o instanceof CoreOps.VarOp vo) {\n+        } else if (o instanceof CoreOp.VarOp vo) {\n@@ -476,2 +476,2 @@\n-        } else if (o instanceof CoreOps.VarAccessOp.VarLoadOp vlo) {\n-            \/\/ Cast to CoreOps.Var, since the instance may have originated as an external instance\n+        } else if (o instanceof CoreOp.VarAccessOp.VarLoadOp vlo) {\n+            \/\/ Cast to CoreOp.Var, since the instance may have originated as an external instance\n@@ -479,1 +479,1 @@\n-            CoreOps.Var<?> vb = (CoreOps.Var<?>) oc.getValue(o.operands().get(0));\n+            CoreOp.Var<?> vb = (CoreOp.Var<?>) oc.getValue(o.operands().get(0));\n@@ -481,1 +481,1 @@\n-        } else if (o instanceof CoreOps.VarAccessOp.VarStoreOp vso) {\n+        } else if (o instanceof CoreOp.VarAccessOp.VarStoreOp vso) {\n@@ -485,1 +485,1 @@\n-        } else if (o instanceof CoreOps.TupleOp to) {\n+        } else if (o instanceof CoreOp.TupleOp to) {\n@@ -488,1 +488,1 @@\n-        } else if (o instanceof CoreOps.TupleLoadOp tlo) {\n+        } else if (o instanceof CoreOp.TupleLoadOp tlo) {\n@@ -491,1 +491,1 @@\n-        } else if (o instanceof CoreOps.TupleWithOp two) {\n+        } else if (o instanceof CoreOp.TupleWithOp two) {\n@@ -494,1 +494,1 @@\n-        } else if (o instanceof CoreOps.FieldAccessOp.FieldLoadOp fo) {\n+        } else if (o instanceof CoreOp.FieldAccessOp.FieldLoadOp fo) {\n@@ -503,1 +503,1 @@\n-        } else if (o instanceof CoreOps.FieldAccessOp.FieldStoreOp fo) {\n+        } else if (o instanceof CoreOp.FieldAccessOp.FieldStoreOp fo) {\n@@ -515,1 +515,1 @@\n-        } else if (o instanceof CoreOps.InstanceOfOp io) {\n+        } else if (o instanceof CoreOp.InstanceOfOp io) {\n@@ -518,1 +518,1 @@\n-        } else if (o instanceof CoreOps.CastOp co) {\n+        } else if (o instanceof CoreOp.CastOp co) {\n@@ -521,1 +521,1 @@\n-        } else if (o instanceof CoreOps.ArrayLengthOp) {\n+        } else if (o instanceof CoreOp.ArrayLengthOp) {\n@@ -524,1 +524,1 @@\n-        } else if (o instanceof CoreOps.ArrayAccessOp.ArrayLoadOp) {\n+        } else if (o instanceof CoreOp.ArrayAccessOp.ArrayLoadOp) {\n@@ -528,1 +528,1 @@\n-        } else if (o instanceof CoreOps.ArrayAccessOp.ArrayStoreOp) {\n+        } else if (o instanceof CoreOp.ArrayAccessOp.ArrayStoreOp) {\n@@ -534,1 +534,1 @@\n-        } else if (o instanceof CoreOps.ArithmeticOperation || o instanceof CoreOps.TestOperation) {\n+        } else if (o instanceof CoreOp.ArithmeticOperation || o instanceof CoreOp.TestOperation) {\n@@ -538,1 +538,1 @@\n-        } else if (o instanceof CoreOps.ConvOp) {\n+        } else if (o instanceof CoreOp.ConvOp) {\n@@ -542,1 +542,1 @@\n-        } else if (o instanceof CoreOps.AssertOp _assert) {\n+        } else if (o instanceof CoreOp.AssertOp _assert) {\n@@ -557,1 +557,1 @@\n-        } else if (o instanceof CoreOps.ConcatOp) {\n+        } else if (o instanceof CoreOp.ConcatOp) {\n@@ -573,1 +573,1 @@\n-                            CoreOps.LambdaOp.class, Map.class, Object[].class));\n+                            CoreOp.LambdaOp.class, Map.class, Object[].class));\n@@ -579,1 +579,1 @@\n-    static Object invokeLambda(MethodHandles.Lookup l, CoreOps.LambdaOp op, Map<Value, Object> capturedValues, Object[] args) {\n+    static Object invokeLambda(MethodHandles.Lookup l, CoreOp.LambdaOp op, Map<Value, Object> capturedValues, Object[] args) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -39,3 +39,5 @@\n- * The set of core operations. A code model, produced by the Java compiler from Java program source and lowered to\n- * consist only of core operations, represents the same Java program and preserves the program meaning as defined by\n- * the Java Language Specification.\n+ * The top-level operation class for the set of enclosed core operations.\n+ * <p>\n+ * A code model, produced by the Java compiler from Java program source, may consist of extended operations and core\n+ * operations. Such a model represents the same Java program and preserves the program meaning as defined by the\n+ * Java Language Specification\n@@ -43,2 +45,1 @@\n-public final class CoreOps {\n-\n+public sealed abstract class CoreOp extends ExternalizableOp {\n@@ -49,1 +50,9 @@\n-    static final String CoreOps_CLASS_NAME = PACKAGE_NAME + \".\" + CoreOps.class.getSimpleName();\n+    static final String CoreOp_CLASS_NAME = PACKAGE_NAME + \".\" + CoreOp.class.getSimpleName();\n+\n+    protected CoreOp(Op that, CopyContext cc) {\n+        super(that, cc);\n+    }\n+\n+    protected CoreOp(String name, List<? extends Value> operands) {\n+        super(name, operands);\n+    }\n@@ -51,1 +60,2 @@\n-    private CoreOps() {\n+    protected CoreOp(ExternalizedOp def) {\n+        super(def);\n@@ -54,0 +64,1 @@\n+\n@@ -58,1 +69,1 @@\n-    public static final class FuncOp extends ExternalizableOp implements Op.Invokable, Op.Isolated, Op.Lowerable {\n+    public static final class FuncOp extends CoreOp implements Op.Invokable, Op.Isolated, Op.Lowerable {\n@@ -182,1 +193,1 @@\n-    public static final class FuncCallOp extends ExternalizableOp {\n+    public static final class FuncCallOp extends CoreOp {\n@@ -247,1 +258,1 @@\n-    public static final class ModuleOp extends ExternalizableOp implements Op.Isolated {\n+    public static final class ModuleOp extends CoreOp implements Op.Isolated {\n@@ -331,1 +342,1 @@\n-    public static final class QuotedOp extends ExternalizableOp implements Op.Nested, Op.Lowerable, Op.Pure {\n+    public static final class QuotedOp extends CoreOp implements Op.Nested, Op.Lowerable, Op.Pure {\n@@ -417,1 +428,1 @@\n-    public static final class LambdaOp extends ExternalizableOp implements Op.Invokable, Op.Lowerable {\n+    public static final class LambdaOp extends CoreOp implements Op.Invokable, Op.Lowerable {\n@@ -551,1 +562,1 @@\n-            CoreOps.InvokeOp methodRefInvokeOp = extractMethodInvoke(valueMapping, body().entryBlock().ops());\n+            CoreOp.InvokeOp methodRefInvokeOp = extractMethodInvoke(valueMapping, body().entryBlock().ops());\n@@ -570,2 +581,2 @@\n-        static CoreOps.InvokeOp extractMethodInvoke(Map<Value, Value> valueMapping, List<Op> ops) {\n-            CoreOps.InvokeOp methodRefInvokeOp = null;\n+        static CoreOp.InvokeOp extractMethodInvoke(Map<Value, Value> valueMapping, List<Op> ops) {\n+            CoreOp.InvokeOp methodRefInvokeOp = null;\n@@ -574,2 +585,2 @@\n-                    case CoreOps.VarOp varOp -> {\n-                        if (isValueUsedWithOp(varOp.result(), o -> o instanceof CoreOps.VarAccessOp.VarStoreOp)) {\n+                    case CoreOp.VarOp varOp -> {\n+                        if (isValueUsedWithOp(varOp.result(), o -> o instanceof CoreOp.VarAccessOp.VarStoreOp)) {\n@@ -579,1 +590,1 @@\n-                    case CoreOps.VarAccessOp.VarLoadOp varLoadOp -> {\n+                    case CoreOp.VarAccessOp.VarLoadOp varLoadOp -> {\n@@ -583,1 +594,1 @@\n-                    case CoreOps.InvokeOp iop when isBoxOrUnboxInvocation(iop) -> {\n+                    case CoreOp.InvokeOp iop when isBoxOrUnboxInvocation(iop) -> {\n@@ -587,1 +598,1 @@\n-                    case CoreOps.InvokeOp iop -> {\n+                    case CoreOp.InvokeOp iop -> {\n@@ -597,1 +608,1 @@\n-                    case CoreOps.ReturnOp rop -> {\n+                    case CoreOp.ReturnOp rop -> {\n@@ -639,1 +650,1 @@\n-        private static boolean isBoxOrUnboxInvocation(CoreOps.InvokeOp iop) {\n+        private static boolean isBoxOrUnboxInvocation(CoreOp.InvokeOp iop) {\n@@ -651,1 +662,1 @@\n-    public static final class ClosureOp extends ExternalizableOp implements Op.Invokable, Op.Lowerable {\n+    public static final class ClosureOp extends CoreOp implements Op.Invokable, Op.Lowerable {\n@@ -743,1 +754,1 @@\n-    public static final class ClosureCallOp extends ExternalizableOp {\n+    public static final class ClosureCallOp extends CoreOp {\n@@ -776,1 +787,1 @@\n-    public static final class ReturnOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class ReturnOp extends CoreOp implements Op.BodyTerminating {\n@@ -823,1 +834,1 @@\n-    public static final class ThrowOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class ThrowOp extends CoreOp implements Op.BodyTerminating {\n@@ -861,1 +872,1 @@\n-    public static final class AssertOp extends ExternalizableOp implements Op.Nested {\n+    public static final class AssertOp extends CoreOp implements Op.Nested {\n@@ -912,1 +923,1 @@\n-    public static class UnreachableOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class UnreachableOp extends CoreOp implements Op.BodyTerminating {\n@@ -949,1 +960,1 @@\n-    public static class YieldOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class YieldOp extends CoreOp implements Op.BodyTerminating {\n@@ -998,1 +1009,1 @@\n-    public static class BranchOp extends ExternalizableOp implements Op.BlockTerminating {\n+    public static final class BranchOp extends CoreOp implements Op.BlockTerminating {\n@@ -1053,1 +1064,1 @@\n-    public static class ConditionalBranchOp extends ExternalizableOp implements Op.BlockTerminating {\n+    public static final class ConditionalBranchOp extends CoreOp implements Op.BlockTerminating {\n@@ -1116,1 +1127,1 @@\n-    public static class ConstantOp extends ExternalizableOp implements Op.Pure {\n+    public static final class ConstantOp extends CoreOp implements Op.Pure {\n@@ -1251,1 +1262,1 @@\n-    public static final class InvokeOp extends ExternalizableOp implements ReflectiveOp {\n+    public static final class InvokeOp extends CoreOp implements ReflectiveOp {\n@@ -1325,1 +1336,1 @@\n-    public static final class ConvOp extends ExternalizableOp implements Op.Pure {\n+    public static final class ConvOp extends CoreOp implements Op.Pure {\n@@ -1363,1 +1374,1 @@\n-    public static final class NewOp extends ExternalizableOp implements ReflectiveOp {\n+    public static final class NewOp extends CoreOp implements ReflectiveOp {\n@@ -1447,1 +1458,1 @@\n-    public abstract static sealed class FieldAccessOp extends ExternalizableOp implements AccessOp, ReflectiveOp {\n+    public sealed abstract static class FieldAccessOp extends CoreOp implements AccessOp, ReflectiveOp {\n@@ -1604,1 +1615,1 @@\n-    public static final class ArrayLengthOp extends ExternalizableOp implements ReflectiveOp {\n+    public static final class ArrayLengthOp extends CoreOp implements ReflectiveOp {\n@@ -1633,1 +1644,1 @@\n-    public abstract static sealed class ArrayAccessOp extends ExternalizableOp implements AccessOp, ReflectiveOp {\n+    public sealed abstract static class ArrayAccessOp extends CoreOp implements AccessOp, ReflectiveOp {\n@@ -1747,1 +1758,1 @@\n-    public static final class InstanceOfOp extends ExternalizableOp implements Op.Pure, ReflectiveOp {\n+    public static final class InstanceOfOp extends CoreOp implements Op.Pure, ReflectiveOp {\n@@ -1812,1 +1823,1 @@\n-    public static final class CastOp extends ExternalizableOp implements Op.Pure, ReflectiveOp {\n+    public static final class CastOp extends CoreOp implements Op.Pure, ReflectiveOp {\n@@ -1907,1 +1918,1 @@\n-    public static final class VarOp extends ExternalizableOp {\n+    public static final class VarOp extends CoreOp {\n@@ -1986,1 +1997,1 @@\n-    public abstract static sealed class VarAccessOp extends ExternalizableOp implements AccessOp {\n+    public sealed abstract static class VarAccessOp extends CoreOp implements AccessOp {\n@@ -2104,1 +2115,1 @@\n-    public static final class TupleOp extends ExternalizableOp {\n+    public static final class TupleOp extends CoreOp {\n@@ -2134,1 +2145,1 @@\n-    public static final class TupleLoadOp extends ExternalizableOp {\n+    public static final class TupleLoadOp extends CoreOp {\n@@ -2205,1 +2216,1 @@\n-    public static final class TupleWithOp extends ExternalizableOp {\n+    public static final class TupleWithOp extends CoreOp {\n@@ -2294,1 +2305,1 @@\n-    public static final class ExceptionRegionEnter extends ExternalizableOp implements Op.BlockTerminating {\n+    public static final class ExceptionRegionEnter extends CoreOp implements Op.BlockTerminating {\n@@ -2357,1 +2368,1 @@\n-    public static final class ExceptionRegionExit extends ExternalizableOp implements Op.BlockTerminating {\n+    public static final class ExceptionRegionExit extends CoreOp implements Op.BlockTerminating {\n@@ -2430,1 +2441,1 @@\n-    public static final class ConcatOp extends ExternalizableOp implements Op.Pure {\n+    public static final class ConcatOp extends CoreOp implements Op.Pure {\n@@ -2465,1 +2476,1 @@\n-    public static abstract class ArithmeticOperation extends ExternalizableOp implements Op.Pure {\n+    public sealed static abstract class ArithmeticOperation extends CoreOp implements Op.Pure {\n@@ -2486,1 +2497,1 @@\n-    public static abstract class TestOperation extends ExternalizableOp implements Op.Pure {\n+    public sealed static abstract class TestOperation extends CoreOp implements Op.Pure {\n@@ -2507,1 +2518,1 @@\n-    public static abstract class BinaryOp extends ArithmeticOperation {\n+    public sealed static abstract class BinaryOp extends ArithmeticOperation {\n@@ -2533,1 +2544,1 @@\n-    public static abstract class UnaryOp extends ArithmeticOperation {\n+    public sealed static abstract class UnaryOp extends ArithmeticOperation {\n@@ -2556,21 +2567,0 @@\n-    \/**\n-     * The unary test operation.\n-     *\/\n-    public static abstract class UnaryTestOp extends TestOperation {\n-        protected UnaryTestOp(ExternalizedOp def) {\n-            super(def);\n-\n-            if (def.operands().size() != 1) {\n-                throw new IllegalArgumentException(\"Number of operands must be 1: \" + def.operands().size());\n-            }\n-        }\n-\n-        protected UnaryTestOp(UnaryTestOp that, CopyContext cc) {\n-            super(that, cc);\n-        }\n-\n-        protected UnaryTestOp(String name, Value v) {\n-            super(name, List.of(v));\n-        }\n-    }\n-\n@@ -2580,1 +2570,1 @@\n-    public static abstract class BinaryTestOp extends TestOperation {\n+    public sealed static abstract class BinaryTestOp extends TestOperation {\n@@ -2835,1 +2825,1 @@\n-    public static final class AshrOp extends CoreOps.BinaryOp {\n+    public static final class AshrOp extends CoreOp.BinaryOp {\n@@ -2860,1 +2850,1 @@\n-    public static final class LshrOp extends CoreOps.BinaryOp {\n+    public static final class LshrOp extends CoreOp.BinaryOp {\n@@ -3091,1 +3081,1 @@\n-    public static final OpFactory FACTORY = OpFactory.OP_FACTORY.get(CoreOps.class);\n+    public static final OpFactory FACTORY = OpFactory.OP_FACTORY.get(CoreOp.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":67,"deletions":77,"binary":false,"changes":144,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","status":"renamed"},{"patch":"@@ -45,1 +45,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n@@ -49,3 +49,5 @@\n- * The set of extended operations. A code model, produced by the Java compiler from Java program source, may consist of\n- * extended operations and core operations. Such a model represents the same Java program and preserves the program\n- * meaning as defined by the Java Language Specification\n+ * The top-level operation class for the enclosed set of extended operations.\n+ * <p>\n+ * A code model, produced by the Java compiler from Java program source, may consist of extended operations and core\n+ * operations. Such a model represents the same Java program and preserves the program meaning as defined by the\n+ * Java Language Specification\n@@ -62,1 +64,1 @@\n-public class ExtendedOps {\n+public sealed abstract class ExtendedOp extends ExternalizableOp {\n@@ -67,1 +69,9 @@\n-    static final String ExtendedOps_CLASS_NAME = PACKAGE_NAME + \".\" + ExtendedOps.class.getSimpleName();\n+    static final String ExtendedOp_CLASS_NAME = PACKAGE_NAME + \".\" + ExtendedOp.class.getSimpleName();\n+\n+    protected ExtendedOp(Op that, CopyContext cc) {\n+        super(that, cc);\n+    }\n+\n+    protected ExtendedOp(String name, List<? extends Value> operands) {\n+        super(name, operands);\n+    }\n@@ -69,1 +79,2 @@\n-    ExtendedOps() {\n+    protected ExtendedOp(ExternalizableOp.ExternalizedOp def) {\n+        super(def);\n@@ -72,0 +83,1 @@\n+\n@@ -75,1 +87,1 @@\n-    public static sealed abstract class JavaLabelOp extends ExternalizableOp implements Op.Lowerable, Op.BodyTerminating {\n+    public sealed static abstract class JavaLabelOp extends ExtendedOp implements Op.Lowerable, Op.BodyTerminating {\n@@ -248,1 +260,1 @@\n-    public static final class JavaYieldOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class JavaYieldOp extends ExtendedOp implements Op.BodyTerminating {\n@@ -293,1 +305,1 @@\n-    public static final class JavaBlockOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaBlockOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -374,1 +386,1 @@\n-    public static final class JavaLabeledOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaLabeledOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -465,1 +477,1 @@\n-    public static final class JavaIfOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaIfOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -690,1 +702,1 @@\n-    public static final class JavaSwitchExpressionOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaSwitchExpressionOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -757,1 +769,1 @@\n-    public static final class JavaSwitchFallthroughOp extends ExternalizableOp implements Op.BodyTerminating {\n+    public static final class JavaSwitchFallthroughOp extends ExtendedOp implements Op.BodyTerminating {\n@@ -787,1 +799,1 @@\n-    public static final class JavaForOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n+    public static final class JavaForOp extends ExtendedOp implements Op.Loop, Op.Lowerable {\n@@ -969,1 +981,1 @@\n-                if (op instanceof CoreOps.TupleOp) {\n+                if (op instanceof CoreOp.TupleOp) {\n@@ -981,1 +993,1 @@\n-                        if (or.op() instanceof CoreOps.TupleOp top) {\n+                        if (or.op() instanceof CoreOp.TupleOp top) {\n@@ -1046,1 +1058,1 @@\n-    public static final class JavaEnhancedForOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n+    public static final class JavaEnhancedForOp extends ExtendedOp implements Op.Loop, Op.Lowerable {\n@@ -1261,1 +1273,1 @@\n-                Value iterator = preHeader.op(CoreOps.invoke(iterable, ITERABLE_ITERATOR, preHeader.parameters().get(0)));\n+                Value iterator = preHeader.op(CoreOp.invoke(iterable, ITERABLE_ITERATOR, preHeader.parameters().get(0)));\n@@ -1264,1 +1276,1 @@\n-                Value p = header.op(CoreOps.invoke(ITERATOR_HAS_NEXT, iterator));\n+                Value p = header.op(CoreOp.invoke(ITERATOR_HAS_NEXT, iterator));\n@@ -1267,1 +1279,1 @@\n-                Value e = init.op(CoreOps.invoke(elementType, ITERATOR_NEXT, iterator));\n+                Value e = init.op(CoreOp.invoke(elementType, ITERATOR_NEXT, iterator));\n@@ -1306,1 +1318,1 @@\n-    public static final class JavaWhileOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n+    public static final class JavaWhileOp extends ExtendedOp implements Op.Loop, Op.Lowerable {\n@@ -1413,1 +1425,1 @@\n-                if (op instanceof CoreOps.YieldOp yo) {\n+                if (op instanceof CoreOp.YieldOp yo) {\n@@ -1451,1 +1463,1 @@\n-    public static final class JavaDoWhileOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n+    public static final class JavaDoWhileOp extends ExtendedOp implements Op.Loop, Op.Lowerable {\n@@ -1569,1 +1581,1 @@\n-                if (op instanceof CoreOps.YieldOp yo) {\n+                if (op instanceof CoreOp.YieldOp yo) {\n@@ -1593,1 +1605,1 @@\n-    public static sealed abstract class JavaConditionalOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public sealed static abstract class JavaConditionalOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -1651,1 +1663,1 @@\n-                        if (op instanceof CoreOps.YieldOp yop) {\n+                        if (op instanceof CoreOp.YieldOp yop) {\n@@ -1666,1 +1678,1 @@\n-                        if (op instanceof CoreOps.YieldOp yop) {\n+                        if (op instanceof CoreOp.YieldOp yop) {\n@@ -1816,1 +1828,1 @@\n-    public static final class JavaConditionalExpressionOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaConditionalExpressionOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -1921,1 +1933,1 @@\n-    public static final class JavaTryOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n+    public static final class JavaTryOp extends ExtendedOp implements Op.Nested, Op.Lowerable {\n@@ -2162,1 +2174,1 @@\n-                    if (op instanceof CoreOps.ReturnOp) {\n+                    if (op instanceof CoreOp.ReturnOp) {\n@@ -2164,1 +2176,1 @@\n-                    } else if (op instanceof ExtendedOps.JavaLabelOp lop && ifExitFromTry(lop)) {\n+                    } else if (op instanceof ExtendedOp.JavaLabelOp lop && ifExitFromTry(lop)) {\n@@ -2174,1 +2186,1 @@\n-                    if (op instanceof CoreOps.ReturnOp) {\n+                    if (op instanceof CoreOp.ReturnOp) {\n@@ -2228,1 +2240,1 @@\n-                        if (op instanceof CoreOps.ReturnOp) {\n+                        if (op instanceof CoreOp.ReturnOp) {\n@@ -2230,1 +2242,1 @@\n-                        } else if (op instanceof ExtendedOps.JavaLabelOp lop && ifExitFromTry(lop)) {\n+                        } else if (op instanceof ExtendedOp.JavaLabelOp lop && ifExitFromTry(lop)) {\n@@ -2363,1 +2375,1 @@\n-    static final String Pattern_CLASS_NAME = ExtendedOps_CLASS_NAME + \"$\" + Pattern.class.getSimpleName();\n+    static final String Pattern_CLASS_NAME = ExtendedOp_CLASS_NAME + \"$\" + Pattern.class.getSimpleName();\n@@ -2423,1 +2435,1 @@\n-        public static sealed abstract class PatternOp extends ExternalizableOp implements Op.Pure {\n+        public sealed static abstract class PatternOp extends ExtendedOp implements Op.Pure {\n@@ -2453,1 +2465,2 @@\n-                            default -> throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n+                            default ->\n+                                    throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n@@ -2517,1 +2530,1 @@\n-                RecordTypeRef recordDescriptor = def.extractAttributeValue(ATTRIBUTE_RECORD_DESCRIPTOR,true,\n+                RecordTypeRef recordDescriptor = def.extractAttributeValue(ATTRIBUTE_RECORD_DESCRIPTOR, true,\n@@ -2521,1 +2534,2 @@\n-                            default -> throw new UnsupportedOperationException(\"Unsupported record type descriptor value:\" + v);\n+                            default ->\n+                                    throw new UnsupportedOperationException(\"Unsupported record type descriptor value:\" + v);\n@@ -2577,1 +2591,1 @@\n-        public static final class MatchOp extends ExternalizableOp implements Op.Isolated, Op.Lowerable {\n+        public static final class MatchOp extends ExtendedOp implements Op.Isolated, Op.Lowerable {\n@@ -2674,1 +2688,1 @@\n-                if (pattern instanceof ExtendedOps.PatternOps.RecordPatternOp rp) {\n+                if (pattern instanceof ExtendedOp.PatternOps.RecordPatternOp rp) {\n@@ -2676,1 +2690,1 @@\n-                } else if (pattern instanceof ExtendedOps.PatternOps.BindingPatternOp bp) {\n+                } else if (pattern instanceof ExtendedOp.PatternOps.BindingPatternOp bp) {\n@@ -2684,2 +2698,2 @@\n-                                       List<Value> bindings,\n-                                       ExtendedOps.PatternOps.RecordPatternOp rpOp, Value target) {\n+                                                    List<Value> bindings,\n+                                                    ExtendedOp.PatternOps.RecordPatternOp rpOp, Value target) {\n@@ -2691,1 +2705,1 @@\n-                Op.Result isInstance = currentBlock.op(CoreOps.instanceOf(targetType, target));\n+                Op.Result isInstance = currentBlock.op(CoreOp.instanceOf(targetType, target));\n@@ -2696,1 +2710,1 @@\n-                target = currentBlock.op(CoreOps.cast(targetType, target));\n+                target = currentBlock.op(CoreOp.cast(targetType, target));\n@@ -2703,1 +2717,1 @@\n-                    Value nestedTarget = currentBlock.op(CoreOps.invoke(rpOp.recordDescriptor().methodForComponent(i), target));\n+                    Value nestedTarget = currentBlock.op(CoreOp.invoke(rpOp.recordDescriptor().methodForComponent(i), target));\n@@ -2712,2 +2726,2 @@\n-                                       List<Value> bindings,\n-                                       ExtendedOps.PatternOps.BindingPatternOp bpOp, Value target) {\n+                                                     List<Value> bindings,\n+                                                     ExtendedOp.PatternOps.BindingPatternOp bpOp, Value target) {\n@@ -2719,1 +2733,1 @@\n-                currentBlock.op(conditionalBranch(currentBlock.op(CoreOps.instanceOf(targetType, target)),\n+                currentBlock.op(conditionalBranch(currentBlock.op(CoreOp.instanceOf(targetType, target)),\n@@ -2724,1 +2738,1 @@\n-                target = currentBlock.op(CoreOps.cast(targetType, target));\n+                target = currentBlock.op(CoreOp.cast(targetType, target));\n@@ -2742,1 +2756,1 @@\n-    public static final OpFactory FACTORY = CoreOps.FACTORY.andThen(OpFactory.OP_FACTORY.get(ExtendedOps.class));\n+    public static final OpFactory FACTORY = CoreOp.FACTORY.andThen(OpFactory.OP_FACTORY.get(ExtendedOp.class));\n@@ -2747,0 +2761,1 @@\n+     *\n@@ -2755,0 +2770,1 @@\n+     *\n@@ -2764,0 +2780,1 @@\n+     *\n@@ -2772,0 +2789,1 @@\n+     *\n@@ -2781,0 +2799,1 @@\n+     *\n@@ -2789,0 +2808,1 @@\n+     *\n@@ -2798,0 +2818,1 @@\n+     *\n@@ -2807,0 +2828,1 @@\n+     *\n@@ -2816,0 +2838,1 @@\n+     *\n@@ -2817,1 +2840,1 @@\n-     *                             body builders for this operation\n+     *                     body builders for this operation\n@@ -2830,0 +2853,1 @@\n+     *\n@@ -2841,0 +2865,1 @@\n+     *\n@@ -2853,2 +2878,2 @@\n-     * @param target the switch target value\n-     * @param bodies the body builders of the operation to be built and become its children\n+     * @param target     the switch target value\n+     * @param bodies     the body builders of the operation to be built and become its children\n@@ -2865,0 +2890,1 @@\n+     *\n@@ -2873,0 +2899,1 @@\n+     *\n@@ -2874,2 +2901,2 @@\n-     *                             body builders for this operation\n-     * @param initTypes the types of initialized variables\n+     *                     body builders for this operation\n+     * @param initTypes    the types of initialized variables\n@@ -2884,0 +2911,1 @@\n+     *\n@@ -2885,2 +2913,2 @@\n-     *                             body builders for this operation\n-     * @param initTypes the types of initialized variables\n+     *                     body builders for this operation\n+     * @param initTypes    the types of initialized variables\n@@ -2896,2 +2924,3 @@\n-     * @param init the init body builder of the operation to be built and become its child\n-     * @param cond the cond body builder of the operation to be built and become its child\n+     *\n+     * @param init   the init body builder of the operation to be built and become its child\n+     * @param cond   the cond body builder of the operation to be built and become its child\n@@ -2899,1 +2928,1 @@\n-     * @param body the main body builder of the operation to be built and become its child\n+     * @param body   the main body builder of the operation to be built and become its child\n@@ -2915,0 +2944,1 @@\n+     *\n@@ -2916,1 +2946,1 @@\n-     *                             body builders for this operation\n+     *                     body builders for this operation\n@@ -2918,1 +2948,1 @@\n-     * @param elementType the element type\n+     * @param elementType  the element type\n@@ -2932,0 +2962,1 @@\n+     *\n@@ -2933,2 +2964,2 @@\n-     * @param init the init body builder of the operation to be built and become its child\n-     * @param body the main body builder of the operation to be built and become its child\n+     * @param init       the init body builder of the operation to be built and become its child\n+     * @param body       the main body builder of the operation to be built and become its child\n@@ -2945,0 +2976,1 @@\n+     *\n@@ -2946,1 +2978,1 @@\n-     *                             body builders for this operation\n+     *                     body builders for this operation\n@@ -2955,0 +2987,1 @@\n+     *\n@@ -2956,1 +2989,1 @@\n-     * @param body the main body builder of the operation to be built and become its child\n+     * @param body      the main body builder of the operation to be built and become its child\n@@ -2967,0 +3000,1 @@\n+     *\n@@ -2968,1 +3002,1 @@\n-     *                             body builders for this operation\n+     *                     body builders for this operation\n@@ -2977,0 +3011,1 @@\n+     *\n@@ -2978,1 +3013,1 @@\n-     * @param body the main body builder of the operation to be built and become its child\n+     * @param body      the main body builder of the operation to be built and become its child\n@@ -2987,0 +3022,1 @@\n+     *\n@@ -2988,3 +3024,3 @@\n-     *                             body builders for this operation\n-     * @param lhs a consumer that builds the left-hand side body\n-     * @param rhs a consumer that builds the right-hand side body\n+     *                     body builders for this operation\n+     * @param lhs          a consumer that builds the left-hand side body\n+     * @param rhs          a consumer that builds the right-hand side body\n@@ -3000,0 +3036,1 @@\n+     *\n@@ -3001,3 +3038,3 @@\n-     *                             body builders for this operation\n-     * @param lhs a consumer that builds the left-hand side body\n-     * @param rhs a consumer that builds the right-hand side body\n+     *                     body builders for this operation\n+     * @param lhs          a consumer that builds the left-hand side body\n+     * @param rhs          a consumer that builds the right-hand side body\n@@ -3013,0 +3050,1 @@\n+     *\n@@ -3023,0 +3061,1 @@\n+     *\n@@ -3033,0 +3072,1 @@\n+     *\n@@ -3034,1 +3074,1 @@\n-     * @param bodies the body builders of operation to be built and become its children\n+     * @param bodies         the body builders of operation to be built and become its children\n@@ -3047,0 +3087,1 @@\n+     *\n@@ -3056,0 +3097,1 @@\n+     *\n@@ -3057,2 +3099,2 @@\n-     *                             body builders for this operation\n-     * @param c a consumer that builds the try body\n+     *                     body builders for this operation\n+     * @param c            a consumer that builds the try body\n@@ -3069,0 +3111,1 @@\n+     *\n@@ -3070,2 +3113,2 @@\n-     *                             body builders for this operation\n-     * @param c a consumer that builds the resources body\n+     *                     body builders for this operation\n+     * @param c            a consumer that builds the resources body\n@@ -3091,0 +3134,1 @@\n+     *\n@@ -3093,2 +3137,2 @@\n-     * @param body the try body builder of the operation to be built and become its child\n-     * @param catchers the catch body builders of the operation to be built and become its children\n+     * @param body      the try body builder of the operation to be built and become its child\n+     * @param catchers  the catch body builders of the operation to be built and become its children\n@@ -3110,1 +3154,2 @@\n-     * @param target the target value\n+     *\n+     * @param target  the target value\n@@ -3112,1 +3157,1 @@\n-     * @param match the match body builder of the operation to be built and become its child\n+     * @param match   the match body builder of the operation to be built and become its child\n@@ -3122,1 +3167,2 @@\n-     * @param type the type of value to be bound\n+     *\n+     * @param type        the type of value to be bound\n@@ -3132,0 +3178,1 @@\n+     *\n@@ -3133,1 +3180,1 @@\n-     * @param nestedPatterns the nested pattern values\n+     * @param nestedPatterns   the nested pattern values\n@@ -3142,0 +3189,1 @@\n+     *\n@@ -3143,1 +3191,1 @@\n-     * @param nestedPatterns the nested pattern values\n+     * @param nestedPatterns   the nested pattern values\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":137,"deletions":89,"binary":false,"changes":226,"previous_filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","status":"renamed"},{"patch":"@@ -167,2 +167,2 @@\n-        Op op = fromString(ExtendedOps.FACTORY, in).get(0);\n-        if (!(op instanceof CoreOps.FuncOp)) {\n+        Op op = fromString(ExtendedOp.FACTORY, in).get(0);\n+        if (!(op instanceof CoreOp.FuncOp)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/OpParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+ * @sealedGraph\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -68,1 +68,1 @@\n-    Optional<CoreOps.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException;\n+    Optional<CoreOp.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/MethodRef.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -119,1 +119,1 @@\n-    public Optional<CoreOps.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException {\n+    public Optional<CoreOp.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/impl\/MethodRefImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -244,1 +244,1 @@\n-    public void write(GlobalValueBlockNaming gn, CoreOps.FuncOp fRep) {\n+    public void write(GlobalValueBlockNaming gn, CoreOp.FuncOp fRep) {\n","filename":"src\/jdk.code.tools\/share\/classes\/jdk\/code\/tools\/renderer\/SRRenderer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -645,2 +645,2 @@\n-        closureOpType = enterClass(\"java.lang.reflect.code.op.CoreOps$ClosureOp\");\n-        lambdaOpType = enterClass(\"java.lang.reflect.code.op.CoreOps$LambdaOp\");\n+        closureOpType = enterClass(\"java.lang.reflect.code.op.CoreOp$ClosureOp\");\n+        lambdaOpType = enterClass(\"java.lang.reflect.code.op.CoreOp$LambdaOp\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-import jdk.internal.java.lang.reflect.code.op.CoreOps;\n-import jdk.internal.java.lang.reflect.code.op.ExtendedOps;\n+import jdk.internal.java.lang.reflect.code.op.CoreOp;\n+import jdk.internal.java.lang.reflect.code.op.ExtendedOp;\n@@ -185,1 +185,1 @@\n-                CoreOps.FuncOp funcOp = bodyScanner.scanMethod();\n+                CoreOp.FuncOp funcOp = bodyScanner.scanMethod();\n@@ -227,1 +227,1 @@\n-                CoreOps.FuncOp funcOp = bodyScanner.scanLambda();\n+                CoreOp.FuncOp funcOp = bodyScanner.scanLambda();\n@@ -281,1 +281,1 @@\n-                CoreOps.FuncOp funcOp = bodyScanner.scanLambda();\n+                CoreOp.FuncOp funcOp = bodyScanner.scanLambda();\n@@ -355,1 +355,1 @@\n-    private JCVariableDecl opFieldDecl(Name prefix, long flags, CoreOps.FuncOp op) {\n+    private JCVariableDecl opFieldDecl(Name prefix, long flags, CoreOp.FuncOp op) {\n@@ -374,1 +374,1 @@\n-    public CoreOps.FuncOp getMethodBody(Symbol.ClassSymbol classSym, JCMethodDecl methodDecl, JCBlock attributedBody, TreeMaker make) {\n+    public CoreOp.FuncOp getMethodBody(Symbol.ClassSymbol classSym, JCMethodDecl methodDecl, JCBlock attributedBody, TreeMaker make) {\n@@ -491,1 +491,1 @@\n-                Op.Result paramOp = append(CoreOps.var(\n+                Op.Result paramOp = append(CoreOp.var(\n@@ -559,1 +559,1 @@\n-                capturedVar = top.block.op(CoreOps.var(sym.name.toString(), capturedArg));\n+                capturedVar = top.block.op(CoreOp.var(sym.name.toString(), capturedArg));\n@@ -649,1 +649,1 @@\n-                return append(CoreOps.cast(typeToTypeElement(targetType), sourceValue));\n+                return append(CoreOp.cast(typeToTypeElement(targetType), sourceValue));\n@@ -678,1 +678,1 @@\n-                    return append(CoreOps.conv(typeToTypeElement(target), exprVal));\n+                    return append(CoreOp.conv(typeToTypeElement(target), exprVal));\n@@ -700,1 +700,1 @@\n-            return append(CoreOps.invoke(boxMethod, valueExpr));\n+            return append(CoreOp.invoke(boxMethod, valueExpr));\n@@ -708,1 +708,1 @@\n-                valueExpr = append(CoreOps.cast(typeToTypeElement(box), valueExpr));\n+                valueExpr = append(CoreOp.cast(typeToTypeElement(box), valueExpr));\n@@ -714,1 +714,1 @@\n-            return append(CoreOps.invoke(unboxMethod, valueExpr));\n+            return append(CoreOp.invoke(unboxMethod, valueExpr));\n@@ -731,1 +731,1 @@\n-            result = append(CoreOps.var(tree.name.toString(), typeToTypeElement(tree.type), initOp));\n+            result = append(CoreOp.var(tree.name.toString(), typeToTypeElement(tree.type), initOp));\n@@ -751,1 +751,1 @@\n-                            append(CoreOps.varStore(varOp, result));\n+                            append(CoreOp.varStore(varOp, result));\n@@ -756,1 +756,1 @@\n-                                append(CoreOps.fieldStore(fd, result));\n+                                append(CoreOp.fieldStore(fd, result));\n@@ -758,1 +758,1 @@\n-                                append(CoreOps.fieldStore(fd, thisValue(), result));\n+                                append(CoreOp.fieldStore(fd, thisValue(), result));\n@@ -779,1 +779,1 @@\n-                        append(CoreOps.fieldStore(fr, result));\n+                        append(CoreOp.fieldStore(fr, result));\n@@ -781,1 +781,1 @@\n-                        append(CoreOps.fieldStore(fr, receiver, result));\n+                        append(CoreOp.fieldStore(fr, receiver, result));\n@@ -794,1 +794,1 @@\n-                    append(CoreOps.arrayStoreOp(array, index, result));\n+                    append(CoreOp.arrayStoreOp(array, index, result));\n@@ -814,5 +814,5 @@\n-                    case PLUS_ASG -> append(CoreOps.add(lhs, rhs));\n-                    case MINUS_ASG -> append(CoreOps.sub(lhs, rhs));\n-                    case MUL_ASG -> append(CoreOps.mul(lhs, rhs));\n-                    case DIV_ASG -> append(CoreOps.div(lhs, rhs));\n-                    case MOD_ASG -> append(CoreOps.mod(lhs, rhs));\n+                    case PLUS_ASG -> append(CoreOp.add(lhs, rhs));\n+                    case MINUS_ASG -> append(CoreOp.sub(lhs, rhs));\n+                    case MUL_ASG -> append(CoreOp.mul(lhs, rhs));\n+                    case DIV_ASG -> append(CoreOp.div(lhs, rhs));\n+                    case MOD_ASG -> append(CoreOp.mod(lhs, rhs));\n@@ -840,1 +840,1 @@\n-                            Op.Result lhsOpValue = append(CoreOps.varLoad(varOp));\n+                            Op.Result lhsOpValue = append(CoreOp.varLoad(varOp));\n@@ -844,1 +844,1 @@\n-                            append(CoreOps.varStore(varOp, r));\n+                            append(CoreOp.varStore(varOp, r));\n@@ -852,1 +852,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fr));\n+                                lhsOpValue = append(CoreOp.fieldLoad(resultType, fr));\n@@ -854,1 +854,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fr, thisValue()));\n+                                lhsOpValue = append(CoreOp.fieldLoad(resultType, fr, thisValue()));\n@@ -860,1 +860,1 @@\n-                                append(CoreOps.fieldStore(fr, r));\n+                                append(CoreOp.fieldStore(fr, r));\n@@ -862,1 +862,1 @@\n-                                append(CoreOps.fieldStore(fr, thisValue(), r));\n+                                append(CoreOp.fieldStore(fr, thisValue(), r));\n@@ -882,1 +882,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fr));\n+                        lhsOpValue = append(CoreOp.fieldLoad(resultType, fr));\n@@ -884,1 +884,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fr, receiver));\n+                        lhsOpValue = append(CoreOp.fieldLoad(resultType, fr, receiver));\n@@ -890,1 +890,1 @@\n-                        append(CoreOps.fieldStore(fr, r));\n+                        append(CoreOp.fieldStore(fr, r));\n@@ -892,1 +892,1 @@\n-                        append(CoreOps.fieldStore(fr, receiver, r));\n+                        append(CoreOp.fieldStore(fr, receiver, r));\n@@ -901,1 +901,1 @@\n-                    Op.Result lhsOpValue = append(CoreOps.arrayLoadOp(array, index));\n+                    Op.Result lhsOpValue = append(CoreOp.arrayLoadOp(array, index));\n@@ -905,1 +905,1 @@\n-                    append(CoreOps.arrayStoreOp(array, index, r));\n+                    append(CoreOp.arrayStoreOp(array, index, r));\n@@ -921,1 +921,1 @@\n-                        result = append(CoreOps.varLoad(varOp));\n+                        result = append(CoreOp.varLoad(varOp));\n@@ -934,1 +934,1 @@\n-                            result = append(CoreOps.fieldLoad(resultType, fr));\n+                            result = append(CoreOp.fieldLoad(resultType, fr));\n@@ -936,1 +936,1 @@\n-                            result = append(CoreOps.fieldLoad(resultType, fr, thisValue()));\n+                            result = append(CoreOp.fieldLoad(resultType, fr, thisValue()));\n@@ -969,1 +969,1 @@\n-                result = append(CoreOps.constant(JavaType.J_L_CLASS, typeToTypeElement(tree.selected.type)));\n+                result = append(CoreOp.constant(JavaType.J_L_CLASS, typeToTypeElement(tree.selected.type)));\n@@ -972,1 +972,1 @@\n-                    result = append(CoreOps.arrayLength(receiver));\n+                    result = append(CoreOp.arrayLength(receiver));\n@@ -985,1 +985,1 @@\n-                            result = append(CoreOps.fieldLoad(resultType, fr));\n+                            result = append(CoreOp.fieldLoad(resultType, fr));\n@@ -987,1 +987,1 @@\n-                            result = append(CoreOps.fieldLoad(resultType, fr, receiver));\n+                            result = append(CoreOp.fieldLoad(resultType, fr, receiver));\n@@ -1009,1 +1009,1 @@\n-            result = append(CoreOps.arrayLoadOp(array, index));\n+            result = append(CoreOp.arrayLoadOp(array, index));\n@@ -1036,1 +1036,1 @@\n-                    Value res = append(CoreOps.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n+                    Value res = append(CoreOp.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n@@ -1058,1 +1058,1 @@\n-                    Value res = append(CoreOps.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n+                    Value res = append(CoreOp.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n@@ -1115,1 +1115,1 @@\n-                    result = append(CoreOps.conv(typeToTypeElement(type), v));\n+                    result = append(CoreOp.conv(typeToTypeElement(type), v));\n@@ -1126,1 +1126,1 @@\n-                result = append(CoreOps.cast(typeToTypeElement(type), jt, v));\n+                result = append(CoreOp.cast(typeToTypeElement(type), jt, v));\n@@ -1137,1 +1137,1 @@\n-                result = append(CoreOps.instanceOf(typeToTypeElement(tree.pattern.type), target));\n+                result = append(CoreOp.instanceOf(typeToTypeElement(tree.pattern.type), target));\n@@ -1145,1 +1145,1 @@\n-                patternType = ExtendedOps.Pattern.bindingType(typeToTypeElement(p.type));\n+                patternType = ExtendedOp.Pattern.bindingType(typeToTypeElement(p.type));\n@@ -1147,1 +1147,1 @@\n-                patternType = ExtendedOps.Pattern.recordType(typeToTypeElement(p.record.type));\n+                patternType = ExtendedOp.Pattern.recordType(typeToTypeElement(p.record.type));\n@@ -1171,1 +1171,1 @@\n-                    result = append(ExtendedOps.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n@@ -1184,1 +1184,1 @@\n-                    result = append(ExtendedOps.recordPattern(symbolToRecordTypeRef(record.record), nestedValues));\n+                    result = append(ExtendedOp.recordPattern(symbolToRecordTypeRef(record.record), nestedValues));\n@@ -1195,1 +1195,1 @@\n-            append(CoreOps._yield(patternValue));\n+            append(CoreOp._yield(patternValue));\n@@ -1213,1 +1213,1 @@\n-                Op.Result op = variablesStack.block.op(CoreOps.var(jcVar.name.toString(), typeToTypeElement(jcVar.type), init));\n+                Op.Result op = variablesStack.block.op(CoreOp.var(jcVar.name.toString(), typeToTypeElement(jcVar.type), init));\n@@ -1227,1 +1227,1 @@\n-                matchBuilder.op(CoreOps.varStore(var, v));\n+                matchBuilder.op(CoreOp.varStore(var, v));\n@@ -1229,1 +1229,1 @@\n-            matchBuilder.op(CoreOps._yield());\n+            matchBuilder.op(CoreOp._yield());\n@@ -1232,1 +1232,1 @@\n-            return append(ExtendedOps.match(target, patternBody, matchBody));\n+            return append(ExtendedOp.match(target, patternBody, matchBody));\n@@ -1267,1 +1267,1 @@\n-            result = append(CoreOps._new(typeToTypeElement(type), constructorType, args));\n+            result = append(CoreOp._new(typeToTypeElement(type), constructorType, args));\n@@ -1274,1 +1274,1 @@\n-                Op.Result a = append(CoreOps.newArray(\n+                Op.Result a = append(CoreOp.newArray(\n@@ -1276,1 +1276,1 @@\n-                        append(CoreOps.constant(JavaType.INT, length))));\n+                        append(CoreOp.constant(JavaType.INT, length))));\n@@ -1280,1 +1280,1 @@\n-                    append(CoreOps.arrayStoreOp(\n+                    append(CoreOp.arrayStoreOp(\n@@ -1282,1 +1282,1 @@\n-                            append(CoreOps.constant(JavaType.INT, i)),\n+                            append(CoreOp.constant(JavaType.INT, i)),\n@@ -1297,1 +1297,1 @@\n-                result = append(CoreOps._new(arrayType, constructorType, indexes));\n+                result = append(CoreOp._new(arrayType, constructorType, indexes));\n@@ -1322,1 +1322,1 @@\n-                Op.Result paramOp = append(CoreOps.var(\n+                Op.Result paramOp = append(CoreOp.var(\n@@ -1332,1 +1332,1 @@\n-                    append(CoreOps._return(exprVal));\n+                    append(CoreOp._return(exprVal));\n@@ -1334,1 +1334,1 @@\n-                    appendTerminating(CoreOps::_return);\n+                    appendTerminating(CoreOp::_return);\n@@ -1342,1 +1342,1 @@\n-                    appendTerminating(CoreOps::_return);\n+                    appendTerminating(CoreOp::_return);\n@@ -1350,1 +1350,1 @@\n-                    yield CoreOps.closure(stack.body);\n+                    yield CoreOp.closure(stack.body);\n@@ -1356,1 +1356,1 @@\n-                    yield CoreOps.lambda(fiType, stack.body);\n+                    yield CoreOp.lambda(fiType, stack.body);\n@@ -1371,2 +1371,2 @@\n-                append(CoreOps._yield(lambdaResult));\n-                CoreOps.QuotedOp quotedOp = CoreOps.quoted(stack.body);\n+                append(CoreOp._yield(lambdaResult));\n+                CoreOp.QuotedOp quotedOp = CoreOp.quoted(stack.body);\n@@ -1397,1 +1397,1 @@\n-                append(CoreOps._yield(last));\n+                append(CoreOp._yield(last));\n@@ -1407,1 +1407,1 @@\n-                appendTerminating(CoreOps::_yield);\n+                appendTerminating(CoreOp::_yield);\n@@ -1422,1 +1422,1 @@\n-                    appendTerminating(CoreOps::_yield);\n+                    appendTerminating(CoreOp::_yield);\n@@ -1435,1 +1435,1 @@\n-            append(ExtendedOps._if(bodies));\n+            append(ExtendedOp._if(bodies));\n@@ -1464,1 +1464,1 @@\n-                        append(CoreOps._yield(patVal));\n+                        append(CoreOp._yield(patVal));\n@@ -1469,1 +1469,1 @@\n-                        append(CoreOps._yield(toValue(c.guard)));\n+                        append(CoreOp._yield(toValue(c.guard)));\n@@ -1473,1 +1473,1 @@\n-                        localResult = append(ExtendedOps.conditionalAnd(clBodies));\n+                        localResult = append(ExtendedOp.conditionalAnd(clBodies));\n@@ -1478,1 +1478,1 @@\n-                    append(CoreOps._yield(localResult));\n+                    append(CoreOp._yield(localResult));\n@@ -1492,1 +1492,1 @@\n-                            localResult = append(CoreOps.eq(localTarget, expr));\n+                            localResult = append(CoreOp.eq(localTarget, expr));\n@@ -1494,1 +1494,1 @@\n-                            localResult = append(CoreOps.invoke(\n+                            localResult = append(CoreOp.invoke(\n@@ -1508,1 +1508,1 @@\n-                                labelResult = append(CoreOps.eq(localTarget, expr));\n+                                labelResult = append(CoreOp.eq(localTarget, expr));\n@@ -1510,1 +1510,1 @@\n-                                labelResult = append(CoreOps.invoke(\n+                                labelResult = append(CoreOp.invoke(\n@@ -1515,1 +1515,1 @@\n-                            append(CoreOps._yield(labelResult));\n+                            append(CoreOp._yield(labelResult));\n@@ -1522,1 +1522,1 @@\n-                        localResult = append(ExtendedOps.conditionalOr(clBodies));\n+                        localResult = append(ExtendedOp.conditionalOr(clBodies));\n@@ -1525,1 +1525,1 @@\n-                    append(CoreOps._yield(localResult));\n+                    append(CoreOp._yield(localResult));\n@@ -1534,1 +1534,1 @@\n-                    append(CoreOps._yield());\n+                    append(CoreOp._yield());\n@@ -1551,1 +1551,1 @@\n-                            append(CoreOps._yield(bodyVal));\n+                            append(CoreOp._yield(bodyVal));\n@@ -1575,2 +1575,2 @@\n-                                ? ExtendedOps::switchFallthroughOp\n-                                : CoreOps::unreachable);\n+                                ? ExtendedOp::switchFallthroughOp\n+                                : CoreOp::unreachable);\n@@ -1586,1 +1586,1 @@\n-            result = append(ExtendedOps.switchExpression(actionType.returnType(), target, bodies));\n+            result = append(ExtendedOp.switchExpression(actionType.returnType(), target, bodies));\n@@ -1593,1 +1593,1 @@\n-                result = append(ExtendedOps.java_yield());\n+                result = append(ExtendedOp.java_yield());\n@@ -1595,1 +1595,1 @@\n-                result = append(ExtendedOps.java_yield(retVal));\n+                result = append(ExtendedOp.java_yield(retVal));\n@@ -1609,1 +1609,1 @@\n-            append(CoreOps._yield(last));\n+            append(CoreOp._yield(last));\n@@ -1618,1 +1618,1 @@\n-            appendTerminating(ExtendedOps::_continue);\n+            appendTerminating(ExtendedOp::_continue);\n@@ -1624,1 +1624,1 @@\n-            append(ExtendedOps._while(condition, body));\n+            append(ExtendedOp._while(condition, body));\n@@ -1637,1 +1637,1 @@\n-            appendTerminating(ExtendedOps::_continue);\n+            appendTerminating(ExtendedOp::_continue);\n@@ -1647,1 +1647,1 @@\n-            append(CoreOps._yield(last));\n+            append(CoreOp._yield(last));\n@@ -1653,1 +1653,1 @@\n-            append(ExtendedOps.doWhile(body, condition));\n+            append(ExtendedOp.doWhile(body, condition));\n@@ -1663,1 +1663,1 @@\n-            append(CoreOps._yield(last));\n+            append(CoreOp._yield(last));\n@@ -1677,2 +1677,2 @@\n-            Op.Result varEResult = append(CoreOps.var(var.name.toString(), stack.block.parameters().get(0)));\n-            append(CoreOps._yield(varEResult));\n+            Op.Result varEResult = append(CoreOp.var(var.name.toString(), stack.block.parameters().get(0)));\n+            append(CoreOp._yield(varEResult));\n@@ -1688,1 +1688,1 @@\n-            appendTerminating(ExtendedOps::_continue);\n+            appendTerminating(ExtendedOp::_continue);\n@@ -1693,1 +1693,1 @@\n-            append(ExtendedOps.enhancedFor(expression, init, body));\n+            append(ExtendedOp.enhancedFor(expression, init, body));\n@@ -1742,1 +1742,1 @@\n-                append(CoreOps._yield(append(CoreOps.tuple(vds.varValues()))));\n+                append(CoreOp._yield(append(CoreOp.tuple(vds.varValues()))));\n@@ -1747,1 +1747,1 @@\n-                append(CoreOps._yield(vds.varValues().get(0)));\n+                append(CoreOp._yield(vds.varValues().get(0)));\n@@ -1752,1 +1752,1 @@\n-                append(CoreOps._yield());\n+                append(CoreOp._yield());\n@@ -1766,1 +1766,1 @@\n-                append(CoreOps._yield(last));\n+                append(CoreOp._yield(last));\n@@ -1768,1 +1768,1 @@\n-                append(CoreOps._yield(append(CoreOps.constant(JavaType.BOOLEAN, true))));\n+                append(CoreOp._yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n@@ -1783,1 +1783,1 @@\n-            append(CoreOps._yield());\n+            append(CoreOp._yield());\n@@ -1796,1 +1796,1 @@\n-            appendTerminating(ExtendedOps::_continue);\n+            appendTerminating(ExtendedOp::_continue);\n@@ -1802,1 +1802,1 @@\n-            append(ExtendedOps._for(init, cond, update, body));\n+            append(ExtendedOp._for(init, cond, update, body));\n@@ -1817,1 +1817,1 @@\n-            append(CoreOps._yield(condVal));\n+            append(CoreOp._yield(condVal));\n@@ -1833,1 +1833,1 @@\n-            append(CoreOps._yield(trueVal));\n+            append(CoreOp._yield(trueVal));\n@@ -1847,1 +1847,1 @@\n-            append(CoreOps._yield(falseVal));\n+            append(CoreOp._yield(falseVal));\n@@ -1853,1 +1853,1 @@\n-            result = append(ExtendedOps.conditionalExpression(typeToTypeElement(condType), bodies));\n+            result = append(ExtendedOp.conditionalExpression(typeToTypeElement(condType), bodies));\n@@ -1883,1 +1883,1 @@\n-            append(CoreOps._yield(condVal));\n+            append(CoreOp._yield(condVal));\n@@ -1896,1 +1896,1 @@\n-                append(CoreOps._yield(detailVal));\n+                append(CoreOp._yield(detailVal));\n@@ -1903,1 +1903,1 @@\n-            result = append(CoreOps._assert(bodies));\n+            result = append(CoreOp._assert(bodies));\n@@ -1918,1 +1918,1 @@\n-                appendTerminating(CoreOps::_yield);\n+                appendTerminating(CoreOp::_yield);\n@@ -1924,1 +1924,1 @@\n-                append(ExtendedOps.block(body));\n+                append(ExtendedOp.block(body));\n@@ -1935,1 +1935,1 @@\n-            Op.Result label = append(CoreOps.constant(JavaType.J_L_STRING, labelName));\n+            Op.Result label = append(CoreOp.constant(JavaType.J_L_STRING, labelName));\n@@ -1939,1 +1939,1 @@\n-            appendTerminating(CoreOps::_yield);\n+            appendTerminating(CoreOp::_yield);\n@@ -1945,1 +1945,1 @@\n-            result = append(ExtendedOps.labeled(body));\n+            result = append(ExtendedOp.labeled(body));\n@@ -1973,1 +1973,1 @@\n-                append(CoreOps._yield(append(CoreOps.tuple(rValues))));\n+                append(CoreOp._yield(append(CoreOp.tuple(rValues))));\n@@ -1994,1 +1994,1 @@\n-            appendTerminating(CoreOps::_yield);\n+            appendTerminating(CoreOp::_yield);\n@@ -2004,1 +2004,1 @@\n-                Op.Result exVariable = append(CoreOps.var(\n+                Op.Result exVariable = append(CoreOp.var(\n@@ -2009,1 +2009,1 @@\n-                appendTerminating(CoreOps::_yield);\n+                appendTerminating(CoreOp::_yield);\n@@ -2021,1 +2021,1 @@\n-                appendTerminating(CoreOps::_yield);\n+                appendTerminating(CoreOp::_yield);\n@@ -2031,1 +2031,1 @@\n-            result = append(ExtendedOps._try(resources, body, catchers, finalizer));\n+            result = append(ExtendedOp._try(resources, body, catchers, finalizer));\n@@ -2046,2 +2046,2 @@\n-                            case POSTINC, PREINC -> append(CoreOps.add(unboxedLhs, one));\n-                            case POSTDEC, PREDEC -> append(CoreOps.sub(unboxedLhs, one));\n+                            case POSTINC, PREINC -> append(CoreOp.add(unboxedLhs, one));\n+                            case POSTDEC, PREDEC -> append(CoreOp.sub(unboxedLhs, one));\n@@ -2067,1 +2067,1 @@\n-                    result = append(CoreOps.neg(rhs));\n+                    result = append(CoreOp.neg(rhs));\n@@ -2071,1 +2071,1 @@\n-                    result = append(CoreOps.not(rhs));\n+                    result = append(CoreOp.not(rhs));\n@@ -2088,1 +2088,1 @@\n-                append(CoreOps._yield(lhs));\n+                append(CoreOp._yield(lhs));\n@@ -2098,1 +2098,1 @@\n-                append(CoreOps._yield(rhs));\n+                append(CoreOp._yield(rhs));\n@@ -2106,2 +2106,2 @@\n-                        ? ExtendedOps.conditionalAnd(bodies)\n-                        : ExtendedOps.conditionalOr(bodies));\n+                        ? ExtendedOp.conditionalAnd(bodies)\n+                        : ExtendedOp.conditionalOr(bodies));\n@@ -2116,1 +2116,1 @@\n-                result = append(CoreOps.concat(lhs, rhs));\n+                result = append(CoreOp.concat(lhs, rhs));\n@@ -2127,5 +2127,5 @@\n-                    case PLUS -> append(CoreOps.add(lhs, rhs));\n-                    case MINUS -> append(CoreOps.sub(lhs, rhs));\n-                    case MUL -> append(CoreOps.mul(lhs, rhs));\n-                    case DIV -> append(CoreOps.div(lhs, rhs));\n-                    case MOD -> append(CoreOps.mod(lhs, rhs));\n+                    case PLUS -> append(CoreOp.add(lhs, rhs));\n+                    case MINUS -> append(CoreOp.sub(lhs, rhs));\n+                    case MUL -> append(CoreOp.mul(lhs, rhs));\n+                    case DIV -> append(CoreOp.div(lhs, rhs));\n+                    case MOD -> append(CoreOp.mod(lhs, rhs));\n@@ -2134,2 +2134,2 @@\n-                    case EQ -> append(CoreOps.eq(lhs, rhs));\n-                    case NE -> append(CoreOps.neq(lhs, rhs));\n+                    case EQ -> append(CoreOp.eq(lhs, rhs));\n+                    case NE -> append(CoreOp.neq(lhs, rhs));\n@@ -2137,4 +2137,4 @@\n-                    case LT -> append(CoreOps.lt(lhs, rhs));\n-                    case LE -> append(CoreOps.le(lhs, rhs));\n-                    case GT -> append(CoreOps.gt(lhs, rhs));\n-                    case GE -> append(CoreOps.ge(lhs, rhs));\n+                    case LT -> append(CoreOp.lt(lhs, rhs));\n+                    case LE -> append(CoreOp.le(lhs, rhs));\n+                    case GT -> append(CoreOp.gt(lhs, rhs));\n+                    case GE -> append(CoreOp.ge(lhs, rhs));\n@@ -2143,3 +2143,3 @@\n-                    case BITOR -> append(CoreOps.or(lhs, rhs));\n-                    case BITAND -> append(CoreOps.and(lhs, rhs));\n-                    case BITXOR -> append(CoreOps.xor(lhs, rhs));\n+                    case BITOR -> append(CoreOp.or(lhs, rhs));\n+                    case BITAND -> append(CoreOp.and(lhs, rhs));\n+                    case BITXOR -> append(CoreOp.xor(lhs, rhs));\n@@ -2148,3 +2148,3 @@\n-                    case SL -> append(CoreOps.lshl(lhs, rhs));\n-                    case SR -> append(CoreOps.ashr(lhs, rhs));\n-                    case USR -> append(CoreOps.lshr(lhs, rhs));\n+                    case SL -> append(CoreOp.lshl(lhs, rhs));\n+                    case SR -> append(CoreOp.ashr(lhs, rhs));\n+                    case USR -> append(CoreOp.lshr(lhs, rhs));\n@@ -2165,1 +2165,1 @@\n-            result = append(CoreOps.constant(typeToTypeElement(constantType), value));\n+            result = append(CoreOp.constant(typeToTypeElement(constantType), value));\n@@ -2172,1 +2172,1 @@\n-                result = append(CoreOps._return());\n+                result = append(CoreOp._return());\n@@ -2174,1 +2174,1 @@\n-                result = append(CoreOps._return(retVal));\n+                result = append(CoreOp._return(retVal));\n@@ -2181,1 +2181,1 @@\n-            result = append(CoreOps._throw(throwVal));\n+            result = append(CoreOp._throw(throwVal));\n@@ -2189,1 +2189,1 @@\n-            result = append(ExtendedOps._break(label));\n+            result = append(ExtendedOp._break(label));\n@@ -2197,1 +2197,1 @@\n-            result = append(ExtendedOps._continue(label));\n+            result = append(ExtendedOp._continue(label));\n@@ -2210,1 +2210,1 @@\n-        CoreOps.FuncOp scanMethod() {\n+        CoreOp.FuncOp scanMethod() {\n@@ -2213,2 +2213,2 @@\n-            appendTerminating(CoreOps::_return);\n-            CoreOps.FuncOp func = CoreOps.func(name.toString(), stack.body);\n+            appendTerminating(CoreOp::_return);\n+            CoreOp.FuncOp func = CoreOp.func(name.toString(), stack.body);\n@@ -2219,1 +2219,1 @@\n-        CoreOps.FuncOp scanLambda() {\n+        CoreOp.FuncOp scanLambda() {\n@@ -2221,2 +2221,2 @@\n-            append(CoreOps._return(result));\n-            return CoreOps.func(name.toString(), stack.body);\n+            append(CoreOp._return(result));\n+            return CoreOp.func(name.toString(), stack.body);\n@@ -2337,9 +2337,9 @@\n-                case BYTE -> CoreOps.constant(typeToTypeElement(t), (byte)0);\n-                case CHAR -> CoreOps.constant(typeToTypeElement(t), (char)0);\n-                case BOOLEAN -> CoreOps.constant(typeToTypeElement(t), false);\n-                case SHORT -> CoreOps.constant(typeToTypeElement(t), (short)0);\n-                case INT -> CoreOps.constant(typeToTypeElement(t), 0);\n-                case FLOAT -> CoreOps.constant(typeToTypeElement(t), 0f);\n-                case LONG -> CoreOps.constant(typeToTypeElement(t), 0L);\n-                case DOUBLE -> CoreOps.constant(typeToTypeElement(t), 0d);\n-                default -> CoreOps.constant(typeToTypeElement(t), null);\n+                case BYTE -> CoreOp.constant(typeToTypeElement(t), (byte)0);\n+                case CHAR -> CoreOp.constant(typeToTypeElement(t), (char)0);\n+                case BOOLEAN -> CoreOp.constant(typeToTypeElement(t), false);\n+                case SHORT -> CoreOp.constant(typeToTypeElement(t), (short)0);\n+                case INT -> CoreOp.constant(typeToTypeElement(t), 0);\n+                case FLOAT -> CoreOp.constant(typeToTypeElement(t), 0f);\n+                case LONG -> CoreOp.constant(typeToTypeElement(t), 0L);\n+                case DOUBLE -> CoreOp.constant(typeToTypeElement(t), 0d);\n+                default -> CoreOp.constant(typeToTypeElement(t), null);\n@@ -2351,7 +2351,7 @@\n-                case BYTE -> CoreOps.constant(typeToTypeElement(t), (byte)1);\n-                case CHAR -> CoreOps.constant(typeToTypeElement(t), (char)1);\n-                case SHORT -> CoreOps.constant(typeToTypeElement(t), (short)1);\n-                case INT -> CoreOps.constant(typeToTypeElement(t), 1);\n-                case FLOAT -> CoreOps.constant(typeToTypeElement(t), 1f);\n-                case LONG -> CoreOps.constant(typeToTypeElement(t), 1L);\n-                case DOUBLE -> CoreOps.constant(typeToTypeElement(t), 1d);\n+                case BYTE -> CoreOp.constant(typeToTypeElement(t), (byte)1);\n+                case CHAR -> CoreOp.constant(typeToTypeElement(t), (char)1);\n+                case SHORT -> CoreOp.constant(typeToTypeElement(t), (short)1);\n+                case INT -> CoreOp.constant(typeToTypeElement(t), 1);\n+                case FLOAT -> CoreOp.constant(typeToTypeElement(t), 1f);\n+                case LONG -> CoreOp.constant(typeToTypeElement(t), 1L);\n+                case DOUBLE -> CoreOp.constant(typeToTypeElement(t), 1d);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":187,"deletions":187,"binary":false,"changes":374,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-import jdk.internal.java.lang.reflect.code.op.CoreOps;\n+import jdk.internal.java.lang.reflect.code.op.CoreOp;\n@@ -817,1 +817,1 @@\n-        CoreOps.FuncOp funcOp;\n+        CoreOp.FuncOp funcOp;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -168,1 +168,1 @@\n-    void test(CoreOps.FuncOp funcOp, Object left, Object right) {\n+    void test(CoreOp.FuncOp funcOp, Object left, Object right) {\n@@ -206,1 +206,1 @@\n-                        CoreOps.FuncOp funcOp = method.getCodeModel().orElseThrow(\n+                        CoreOp.FuncOp funcOp = method.getCodeModel().orElseThrow(\n@@ -237,1 +237,1 @@\n-        private static CoreOps.FuncOp retype(CoreOps.FuncOp original, Class<?> newType) {\n+        private static CoreOp.FuncOp retype(CoreOp.FuncOp original, Class<?> newType) {\n@@ -251,1 +251,1 @@\n-            return CoreOps.func(original.funcName(), FunctionType.functionType(retType, type, type))\n+            return CoreOp.func(original.funcName(), FunctionType.functionType(retType, type, type))\n@@ -261,2 +261,2 @@\n-                case CoreOps.VarOp varOp ->\n-                        CoreOps.var(varOp.varName(), context.getValueOrDefault(varOp.operands().getFirst(), varOp.operands().getFirst()));\n+                case CoreOp.VarOp varOp ->\n+                        CoreOp.var(varOp.varName(), context.getValueOrDefault(varOp.operands().getFirst(), varOp.operands().getFirst()));\n@@ -267,1 +267,1 @@\n-        private static Stream<Arguments> argumentsForMethod(CoreOps.FuncOp funcOp, Method testMethod) {\n+        private static Stream<Arguments> argumentsForMethod(CoreOp.FuncOp funcOp, Method testMethod) {\n@@ -273,1 +273,1 @@\n-            if (testMethodParameters[0].getType() != CoreOps.FuncOp.class) {\n+            if (testMethodParameters[0].getType() != CoreOp.FuncOp.class) {\n@@ -276,1 +276,1 @@\n-            Named<CoreOps.FuncOp> opNamed = Named.of(funcOp.funcName() + \"{\" + funcOp.invokableType() + \"}\", funcOp);\n+            Named<CoreOp.FuncOp> opNamed = Named.of(funcOp.funcName() + \"{\" + funcOp.invokableType() + \"}\", funcOp);\n@@ -322,1 +322,1 @@\n-    private static Object interpret(Object left, Object right, CoreOps.FuncOp op) {\n+    private static Object interpret(Object left, Object right, CoreOp.FuncOp op) {\n@@ -326,2 +326,2 @@\n-    private static Object bytecode(Object left, Object right, CoreOps.FuncOp op) throws Throwable {\n-        CoreOps.FuncOp func = SSA.transform(op.transform((block, o) -> {\n+    private static Object bytecode(Object left, Object right, CoreOp.FuncOp op) throws Throwable {\n+        CoreOp.FuncOp func = SSA.transform(op.transform((block, o) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/CoreBinaryOpsTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -47,1 +47,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -61,1 +61,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+        CoreOp.FuncOp f = getFuncOp(\"f2\");\n@@ -75,1 +75,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+        CoreOp.FuncOp f = getFuncOp(\"f3\");\n@@ -82,1 +82,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestArrayCreation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -47,1 +47,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -61,1 +61,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+        CoreOp.FuncOp f = getFuncOp(\"f2\");\n@@ -70,1 +70,1 @@\n-        return CoreOps.ArrayLengthOp[][][][][][][].class;\n+        return CoreOp.ArrayLengthOp[][][][][][][].class;\n@@ -75,1 +75,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+        CoreOp.FuncOp f = getFuncOp(\"f3\");\n@@ -82,1 +82,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestArrayTypes.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -48,1 +48,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"not\");\n+        CoreOp.FuncOp f = getFuncOp(\"not\");\n@@ -63,1 +63,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"mod\");\n+        CoreOp.FuncOp f = getFuncOp(\"mod\");\n@@ -77,1 +77,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"bitand\");\n+        CoreOp.FuncOp f = getFuncOp(\"bitand\");\n@@ -91,1 +91,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"bitor\");\n+        CoreOp.FuncOp f = getFuncOp(\"bitor\");\n@@ -105,1 +105,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"bitxor\");\n+        CoreOp.FuncOp f = getFuncOp(\"bitxor\");\n@@ -119,1 +119,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"booland\");\n+        CoreOp.FuncOp f = getFuncOp(\"booland\");\n@@ -133,1 +133,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"boolor\");\n+        CoreOp.FuncOp f = getFuncOp(\"boolor\");\n@@ -147,1 +147,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"boolxor\");\n+        CoreOp.FuncOp f = getFuncOp(\"boolxor\");\n@@ -161,1 +161,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"doublemod\");\n+        CoreOp.FuncOp f = getFuncOp(\"doublemod\");\n@@ -168,1 +168,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBinops.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -71,1 +71,1 @@\n-                    redundant.op(CoreOps._return());\n+                    redundant.op(CoreOp._return());\n@@ -80,1 +80,1 @@\n-    static void assertBlockIndexes(CoreOps.FuncOp f) {\n+    static void assertBlockIndexes(CoreOp.FuncOp f) {\n@@ -86,1 +86,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockIndexes.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -57,1 +57,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n@@ -68,1 +68,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -72,1 +72,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockOp.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockParameters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -62,1 +62,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"forLoopBreakContinue\");\n+        CoreOp.FuncOp f = getFuncOp(\"forLoopBreakContinue\");\n@@ -66,1 +66,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -113,1 +113,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"nestedForLoopBreakContinue\");\n+        CoreOp.FuncOp f = getFuncOp(\"nestedForLoopBreakContinue\");\n@@ -117,1 +117,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -168,1 +168,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"forLoopLabeledBreakContinue\");\n+        CoreOp.FuncOp f = getFuncOp(\"forLoopLabeledBreakContinue\");\n@@ -172,1 +172,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -225,1 +225,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"blockBreak\");\n+        CoreOp.FuncOp f = getFuncOp(\"blockBreak\");\n@@ -229,1 +229,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -248,1 +248,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBreakContinue.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBuild.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -41,7 +41,7 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.add;\n-import static java.lang.reflect.code.op.CoreOps.closure;\n-import static java.lang.reflect.code.op.CoreOps.closureCall;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n-import static java.lang.reflect.code.op.CoreOps.func;\n-import static java.lang.reflect.code.op.CoreOps.quoted;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.add;\n+import static java.lang.reflect.code.op.CoreOp.closure;\n+import static java.lang.reflect.code.op.CoreOp.closureCall;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n+import static java.lang.reflect.code.op.CoreOp.func;\n+import static java.lang.reflect.code.op.CoreOp.quoted;\n@@ -56,1 +56,1 @@\n-                INT, CoreOps.QuotedOp.QUOTED_TYPE);\n+                INT, CoreOp.QuotedOp.QUOTED_TYPE);\n@@ -71,1 +71,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -77,1 +77,1 @@\n-                    CoreOps.QuotedOp qop = quoted(block.parentBody(), qblock -> {\n+                    CoreOp.QuotedOp qop = quoted(block.parentBody(), qblock -> {\n@@ -90,1 +90,1 @@\n-                    Op.Result or = block.op(CoreOps.invoke(TestClosureOps.Builder.ACCEPT_METHOD, cquoted));\n+                    Op.Result or = block.op(CoreOp.invoke(TestClosureOps.Builder.ACCEPT_METHOD, cquoted));\n@@ -103,1 +103,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -109,1 +109,1 @@\n-                    CoreOps.ClosureOp closure = CoreOps.closure(block.parentBody(),\n+                    CoreOp.ClosureOp closure = CoreOp.closure(block.parentBody(),\n@@ -135,1 +135,1 @@\n-        Assert.assertTrue(top instanceof CoreOps.FuncOp);\n+        Assert.assertTrue(top instanceof CoreOp.FuncOp);\n@@ -137,1 +137,1 @@\n-        CoreOps.FuncOp fop = (CoreOps.FuncOp) top;\n+        CoreOp.FuncOp fop = (CoreOp.FuncOp) top;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestClosureOps.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -215,1 +215,1 @@\n-            CoreOps.FuncOp f = method.getCodeModel().orElseThrow();\n+            CoreOp.FuncOp f = method.getCodeModel().orElseThrow();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConcat.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -48,1 +48,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"simpleExpression\");\n+        CoreOp.FuncOp f = getFuncOp(\"simpleExpression\");\n@@ -52,1 +52,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -68,1 +68,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalExpression.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -67,1 +67,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n@@ -78,1 +78,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -82,1 +82,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalOp.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -160,1 +160,1 @@\n-            CoreOps.FuncOp f = m.getCodeModel().get();\n+            CoreOp.FuncOp f = m.getCodeModel().get();\n@@ -179,1 +179,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"compareNull\");\n+        CoreOp.FuncOp f = getFuncOp(\"compareNull\");\n@@ -183,1 +183,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -197,1 +197,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConstants.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -52,1 +52,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -61,1 +61,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -64,1 +64,1 @@\n-        Op copy = CoreOps.FACTORY.constructOp(odef);\n+        Op copy = CoreOp.FACTORY.constructOp(odef);\n@@ -69,1 +69,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -39,5 +39,5 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.branch;\n-import static java.lang.reflect.code.op.CoreOps.conditionalBranch;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n-import static java.lang.reflect.code.op.CoreOps.func;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.branch;\n+import static java.lang.reflect.code.op.CoreOp.conditionalBranch;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n+import static java.lang.reflect.code.op.CoreOp.func;\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n+        CoreOp.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n@@ -81,1 +81,1 @@\n-        CoreOps.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n+        CoreOp.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n@@ -117,1 +117,1 @@\n-        CoreOps.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n+        CoreOp.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n@@ -146,1 +146,1 @@\n-    static void test(CoreOps.FuncOp f, boolean[][] bvs) {\n+    static void test(CoreOp.FuncOp f, boolean[][] bvs) {\n@@ -160,1 +160,1 @@\n-        CoreOps.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n+        CoreOp.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n@@ -201,1 +201,1 @@\n-        CoreOps.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n+        CoreOp.FuncOp f = func(\"f\", FunctionType.VOID).body(entry -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestDominate.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -52,1 +52,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n@@ -63,1 +63,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -67,1 +67,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -93,1 +93,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"array\");\n+        CoreOp.FuncOp f = getFuncOp(\"array\");\n@@ -97,1 +97,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestEnhancedForOp.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -42,7 +42,7 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps._throw;\n-import static java.lang.reflect.code.op.CoreOps.branch;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n-import static java.lang.reflect.code.op.CoreOps.exceptionRegionEnter;\n-import static java.lang.reflect.code.op.CoreOps.exceptionRegionExit;\n-import static java.lang.reflect.code.op.CoreOps.func;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp._throw;\n+import static java.lang.reflect.code.op.CoreOp.branch;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n+import static java.lang.reflect.code.op.CoreOp.exceptionRegionEnter;\n+import static java.lang.reflect.code.op.CoreOp.exceptionRegionExit;\n+import static java.lang.reflect.code.op.CoreOp.func;\n@@ -72,1 +72,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n+        CoreOp.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n@@ -88,2 +88,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -96,2 +96,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -103,2 +103,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -110,2 +110,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -163,1 +163,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n+        CoreOp.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n@@ -179,2 +179,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -187,2 +187,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -194,2 +194,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -201,2 +201,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -257,1 +257,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n+        CoreOp.FuncOp f = func(\"f\", functionType(VOID, type(IntConsumer.class)))\n@@ -275,2 +275,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -284,2 +284,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -292,2 +292,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -298,2 +298,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -306,2 +306,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 4))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 4))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -313,2 +313,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 5))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 5))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -378,1 +378,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(VOID, JavaType.type(IntConsumer.class)))\n+        CoreOp.FuncOp f = func(\"f\", functionType(VOID, JavaType.type(IntConsumer.class)))\n@@ -397,2 +397,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -404,2 +404,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -415,2 +415,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -422,2 +422,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -429,2 +429,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n@@ -436,2 +436,2 @@\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(CoreOps.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n+                        b.op(CoreOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExceptionRegionOps.java","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -53,1 +53,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -57,1 +57,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -83,1 +83,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+        CoreOp.FuncOp f = getFuncOp(\"f2\");\n@@ -87,1 +87,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -115,1 +115,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+        CoreOp.FuncOp f = getFuncOp(\"f3\");\n@@ -119,1 +119,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -133,1 +133,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestForOp.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -59,1 +59,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n@@ -70,1 +70,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -74,1 +74,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestIfOp.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -37,1 +37,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n@@ -51,1 +51,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -73,1 +73,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -76,1 +76,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -107,1 +107,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -109,1 +109,1 @@\n-        CoreOps.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n+        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n@@ -120,1 +120,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -143,1 +143,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -145,1 +145,1 @@\n-        CoreOps.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n+        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n@@ -156,1 +156,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -185,1 +185,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -188,1 +188,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -219,1 +219,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n@@ -222,1 +222,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(JavaType.VOID, JavaType.type(int[].class)))\n+        CoreOp.FuncOp f = func(\"f\", functionType(JavaType.VOID, JavaType.type(int[].class)))\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.CoreOps.FuncOp;\n-import java.lang.reflect.code.op.CoreOps.LambdaOp;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.CoreOp.FuncOp;\n+import java.lang.reflect.code.op.CoreOp.LambdaOp;\n@@ -49,2 +49,2 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n+import static java.lang.reflect.code.op.CoreOp.*;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n@@ -59,1 +59,1 @@\n-                INT, CoreOps.QuotedOp.QUOTED_TYPE);\n+                INT, CoreOp.QuotedOp.QUOTED_TYPE);\n@@ -154,1 +154,1 @@\n-        Assert.assertTrue(top instanceof CoreOps.FuncOp);\n+        Assert.assertTrue(top instanceof CoreOp.FuncOp);\n@@ -156,1 +156,1 @@\n-        CoreOps.FuncOp fop = (CoreOps.FuncOp) top;\n+        CoreOp.FuncOp fop = (CoreOp.FuncOp) top;\n@@ -189,1 +189,1 @@\n-                    CoreOps.Var.of(0)\n+                    CoreOp.Var.of(0)\n@@ -210,1 +210,1 @@\n-                    CoreOps.Var.of(0)\n+                    CoreOp.Var.of(0)\n@@ -239,1 +239,1 @@\n-        CoreOps.LambdaOp lop = (CoreOps.LambdaOp) quoted.op();\n+        CoreOp.LambdaOp lop = (CoreOp.LambdaOp) quoted.op();\n@@ -260,1 +260,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLambdaOps.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLinqUsingQuoted.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -58,1 +58,1 @@\n-        Op op = OpParser.fromString(CoreOps.FACTORY, F).getFirst();\n+        Op op = OpParser.fromString(CoreOp.FACTORY, F).getFirst();\n@@ -90,1 +90,1 @@\n-        Op op = OpParser.fromString(CoreOps.FACTORY, IF_ELSE).getFirst();\n+        Op op = OpParser.fromString(CoreOp.FACTORY, IF_ELSE).getFirst();\n@@ -128,1 +128,1 @@\n-        Op op = OpParser.fromString(CoreOps.FACTORY, LOOP).getFirst();\n+        Op op = OpParser.fromString(CoreOp.FACTORY, LOOP).getFirst();\n@@ -197,1 +197,1 @@\n-        Op op = OpParser.fromString(CoreOps.FACTORY, IF_ELSE_NESTED).getFirst();\n+        Op op = OpParser.fromString(CoreOp.FACTORY, IF_ELSE_NESTED).getFirst();\n@@ -258,1 +258,1 @@\n-        Op op = OpParser.fromString(CoreOps.FACTORY, LOOP_NESTED).getFirst();\n+        Op op = OpParser.fromString(CoreOp.FACTORY, LOOP_NESTED).getFirst();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLiveness.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -48,4 +48,4 @@\n-import static java.lang.reflect.code.op.CoreOps.arrayStoreOp;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n-import static java.lang.reflect.code.op.CoreOps.fieldLoad;\n-import static java.lang.reflect.code.op.CoreOps.newArray;\n+import static java.lang.reflect.code.op.CoreOp.arrayStoreOp;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n+import static java.lang.reflect.code.op.CoreOp.fieldLoad;\n+import static java.lang.reflect.code.op.CoreOp.newArray;\n@@ -96,1 +96,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -122,1 +122,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -126,1 +126,1 @@\n-        CoreOps.FuncOp fc = f.transform((block, op) -> {\n+        CoreOp.FuncOp fc = f.transform((block, op) -> {\n@@ -133,1 +133,1 @@\n-                case CoreOps.ReturnOp returnOp when getNearestInvokeableAncestorOp(returnOp) instanceof CoreOps.FuncOp: {\n+                case CoreOp.ReturnOp returnOp when getNearestInvokeableAncestorOp(returnOp) instanceof CoreOp.FuncOp: {\n@@ -137,1 +137,1 @@\n-                case CoreOps.ThrowOp throwOp: {\n+                case CoreOp.ThrowOp throwOp: {\n@@ -174,1 +174,1 @@\n-        opBuilder.apply(CoreOps.invoke(method(PrintStream.class, \"println\", void.class, String.class), System_out, c));\n+        opBuilder.apply(CoreOp.invoke(method(PrintStream.class, \"println\", void.class, String.class), System_out, c));\n@@ -187,1 +187,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -190,1 +190,1 @@\n-        CoreOps.FuncOp fc = f.transform((block, op) -> {\n+        CoreOp.FuncOp fc = f.transform((block, op) -> {\n@@ -192,1 +192,1 @@\n-                case CoreOps.InvokeOp invokeOp when invokeOp.invokeDescriptor().equals(ADD_METHOD): {\n+                case CoreOp.InvokeOp invokeOp when invokeOp.invokeDescriptor().equals(ADD_METHOD): {\n@@ -195,1 +195,1 @@\n-                    Op.Result adaptedResult = block.apply(CoreOps.invoke(ADD_WITH_PRINT_METHOD, adaptedOperands));\n+                    Op.Result adaptedResult = block.apply(CoreOp.invoke(ADD_WITH_PRINT_METHOD, adaptedOperands));\n@@ -226,1 +226,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -229,1 +229,1 @@\n-        CoreOps.FuncOp fc = f.transform((block, op) -> {\n+        CoreOp.FuncOp fc = f.transform((block, op) -> {\n@@ -231,1 +231,1 @@\n-                case CoreOps.InvokeOp invokeOp: {\n+                case CoreOp.InvokeOp invokeOp: {\n@@ -257,1 +257,1 @@\n-    static void printCall(CopyContext cc, CoreOps.InvokeOp invokeOp, Function<Op, Op.Result> opBuilder) {\n+    static void printCall(CopyContext cc, CoreOp.InvokeOp invokeOp, Function<Op, Op.Result> opBuilder) {\n@@ -279,1 +279,1 @@\n-                        CoreOps.invoke(method(Integer.class, \"valueOf\", Integer.class, int.class), operand));\n+                        CoreOp.invoke(method(Integer.class, \"valueOf\", Integer.class, int.class), operand));\n@@ -291,1 +291,1 @@\n-                CoreOps.invoke(method(PrintStream.class, \"printf\", PrintStream.class, String.class, Object[].class),\n+                CoreOp.invoke(method(PrintStream.class, \"printf\", PrintStream.class, String.class, Object[].class),\n@@ -304,1 +304,1 @@\n-                    CoreOps.invoke(method(Integer.class, \"valueOf\", Integer.class, int.class), adaptedInvokeResult));\n+                    CoreOp.invoke(method(Integer.class, \"valueOf\", Integer.class, int.class), adaptedInvokeResult));\n@@ -314,1 +314,1 @@\n-                CoreOps.invoke(method(PrintStream.class, \"printf\", PrintStream.class, String.class, Object[].class),\n+                CoreOp.invoke(method(PrintStream.class, \"printf\", PrintStream.class, String.class, Object[].class),\n@@ -348,1 +348,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLocalTransformationsAdaption.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -72,1 +72,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"recordPatterns\");\n+        CoreOp.FuncOp f = getFuncOp(\"recordPatterns\");\n@@ -76,1 +76,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -115,1 +115,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -168,1 +168,1 @@\n-        CoreOps.FuncOp f = getFuncOp(name);\n+        CoreOp.FuncOp f = getFuncOp(name);\n@@ -177,1 +177,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveCast.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -16,4 +16,4 @@\n-import static java.lang.reflect.code.op.CoreOps.FuncOp;\n-import static java.lang.reflect.code.op.CoreOps.VarAccessOp.VarLoadOp;\n-import static java.lang.reflect.code.op.CoreOps.VarAccessOp.VarStoreOp;\n-import static java.lang.reflect.code.op.CoreOps.VarOp;\n+import static java.lang.reflect.code.op.CoreOp.FuncOp;\n+import static java.lang.reflect.code.op.CoreOp.VarAccessOp.VarLoadOp;\n+import static java.lang.reflect.code.op.CoreOp.VarAccessOp.VarStoreOp;\n+import static java.lang.reflect.code.op.CoreOp.VarOp;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestRemoveFinalVars.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -55,1 +55,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"ifelse\");\n+        CoreOp.FuncOp f = getFuncOp(\"ifelse\");\n@@ -57,1 +57,1 @@\n-        CoreOps.FuncOp lf = generate(f);\n+        CoreOp.FuncOp lf = generate(f);\n@@ -85,1 +85,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"ifelseNested\");\n+        CoreOp.FuncOp f = getFuncOp(\"ifelseNested\");\n@@ -87,1 +87,1 @@\n-        CoreOps.FuncOp lf = generate(f);\n+        CoreOp.FuncOp lf = generate(f);\n@@ -105,1 +105,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"loop\");\n+        CoreOp.FuncOp f = getFuncOp(\"loop\");\n@@ -107,1 +107,1 @@\n-        CoreOps.FuncOp lf = generate(f);\n+        CoreOp.FuncOp lf = generate(f);\n@@ -125,1 +125,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"nestedLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"nestedLoop\");\n@@ -127,1 +127,1 @@\n-        CoreOps.FuncOp lf = generate(f);\n+        CoreOp.FuncOp lf = generate(f);\n@@ -132,1 +132,1 @@\n-    static CoreOps.FuncOp generate(CoreOps.FuncOp f) {\n+    static CoreOp.FuncOp generate(CoreOp.FuncOp f) {\n@@ -135,1 +135,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -150,1 +150,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSSA.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -64,1 +64,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -91,1 +91,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTraverse.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -67,1 +67,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catching\");\n+        CoreOp.FuncOp f = getFuncOp(\"catching\");\n@@ -71,1 +71,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -131,1 +131,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchThrowable\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchThrowable\");\n@@ -135,1 +135,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -198,1 +198,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchNested\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchNested\");\n@@ -202,1 +202,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -255,1 +255,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTry.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -65,1 +65,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinally\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryCatchFinally\");\n@@ -69,1 +69,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -108,1 +108,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryReturn\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryReturn\");\n@@ -112,1 +112,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -151,1 +151,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchThrow\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchThrow\");\n@@ -155,1 +155,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -192,1 +192,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"finallyReturn\");\n+        CoreOp.FuncOp f = getFuncOp(\"finallyReturn\");\n@@ -196,1 +196,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -236,1 +236,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinally.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,2 +32,1 @@\n-import java.lang.reflect.code.analysis.SSA;\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -86,1 +85,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinally\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryCatchFinally\");\n@@ -90,1 +89,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -162,1 +161,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinallyBreak\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryCatchFinallyBreak\");\n@@ -166,1 +165,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -220,1 +219,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryForLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryForLoop\");\n@@ -224,1 +223,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -270,1 +269,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryLabeledForLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryLabeledForLoop\");\n@@ -274,1 +273,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -316,1 +315,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryLambda\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryLambda\");\n@@ -320,1 +319,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -342,1 +341,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinallyNested.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -53,1 +53,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"whileLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"whileLoop\");\n@@ -57,1 +57,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -82,1 +82,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"doWhileLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"doWhileLoop\");\n@@ -86,1 +86,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -100,1 +100,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestWhileOp.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -39,1 +39,1 @@\n-    public static Set<Value> activeSet(CoreOps.FuncOp f, Block.Parameter fv) {\n+    public static Set<Value> activeSet(CoreOp.FuncOp f, Block.Parameter fv) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/ActiveSet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -32,1 +32,1 @@\n-import static java.lang.reflect.code.op.CoreOps.sub;\n+import static java.lang.reflect.code.op.CoreOp.sub;\n@@ -42,1 +42,1 @@\n-        return opP(CoreOps.NegOp.class, operand);\n+        return opP(CoreOp.NegOp.class, operand);\n@@ -46,1 +46,1 @@\n-        return opP(CoreOps.AddOp.class, lhs, rhs);\n+        return opP(CoreOp.AddOp.class, lhs, rhs);\n@@ -50,1 +50,1 @@\n-        return opP(CoreOps.MulOp.class, lhs, rhs);\n+        return opP(CoreOp.MulOp.class, lhs, rhs);\n@@ -103,1 +103,1 @@\n-                return op instanceof CoreOps.InvokeOp c && c.invokeDescriptor().refType().equals(J_L_MATH);\n+                return op instanceof CoreOp.InvokeOp c && c.invokeDescriptor().refType().equals(J_L_MATH);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/ExpressionElimination.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.op.CoreOp;\n@@ -29,1 +30,0 @@\n-import java.lang.reflect.code.op.CoreOps;\n@@ -38,1 +38,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n@@ -131,1 +131,1 @@\n-            case CoreOps.NegOp _ -> {\n+            case CoreOp.NegOp _ -> {\n@@ -140,1 +140,1 @@\n-            case CoreOps.AddOp _ -> {\n+            case CoreOp.AddOp _ -> {\n@@ -151,1 +151,1 @@\n-            case CoreOps.MulOp _ -> {\n+            case CoreOp.MulOp _ -> {\n@@ -167,1 +167,1 @@\n-            case CoreOps.ConstantOp _ -> {\n+            case CoreOp.ConstantOp _ -> {\n@@ -173,1 +173,1 @@\n-            case CoreOps.InvokeOp c -> {\n+            case CoreOp.InvokeOp c -> {\n@@ -195,1 +195,1 @@\n-            case CoreOps.ReturnOp _ -> {\n+            case CoreOp.ReturnOp _ -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/ForwardDifferentiation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -51,1 +51,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -63,1 +63,1 @@\n-        CoreOps.FuncOp dff_dx = ExpressionElimination.eliminate(ForwardDifferentiation.partialDiff(f, x));\n+        CoreOp.FuncOp dff_dx = ExpressionElimination.eliminate(ForwardDifferentiation.partialDiff(f, x));\n@@ -69,1 +69,1 @@\n-        CoreOps.FuncOp dff_dy = ExpressionElimination.eliminate(ForwardDifferentiation.partialDiff(f, y));\n+        CoreOp.FuncOp dff_dy = ExpressionElimination.eliminate(ForwardDifferentiation.partialDiff(f, y));\n@@ -91,1 +91,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"fcf\");\n+        CoreOp.FuncOp f = getFuncOp(\"fcf\");\n@@ -113,1 +113,1 @@\n-        CoreOps.FuncOp df_dx = ForwardDifferentiation.partialDiff(f, x);\n+        CoreOp.FuncOp df_dx = ForwardDifferentiation.partialDiff(f, x);\n@@ -150,1 +150,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -154,1 +154,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/TestForwardAutoDiff.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -50,1 +50,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -64,1 +64,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+        CoreOp.FuncOp f = getFuncOp(\"f2\");\n@@ -78,1 +78,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+        CoreOp.FuncOp f = getFuncOp(\"f3\");\n@@ -92,1 +92,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f4\");\n+        CoreOp.FuncOp f = getFuncOp(\"f4\");\n@@ -99,1 +99,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -102,1 +102,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -115,1 +115,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestArrayCreation.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -393,1 +393,1 @@\n-        Assert.assertTrue(f.quoted().op() instanceof CoreOps.LambdaOp);\n+        Assert.assertTrue(f.quoted().op() instanceof CoreOp.LambdaOp);\n@@ -525,1 +525,1 @@\n-        CoreOps.FuncOp flift;\n+        CoreOp.FuncOp flift;\n@@ -542,1 +542,1 @@\n-    private static Object invokeAndConvert(CoreOps.FuncOp func, Object[] args) {\n+    private static Object invokeAndConvert(CoreOp.FuncOp func, Object[] args) {\n@@ -561,1 +561,1 @@\n-        CoreOps.FuncOp func = d.testMethod.getCodeModel().get();\n+        CoreOp.FuncOp func = d.testMethod.getCodeModel().get();\n@@ -563,1 +563,1 @@\n-        CoreOps.FuncOp lfunc = func.transform(CopyContext.create(), (block, op) -> {\n+        CoreOp.FuncOp lfunc = func.transform(CopyContext.create(), (block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -46,1 +46,1 @@\n-        CoreOps.FuncOp f = getFuncOp(ClassFile.of().build(ClassDesc.of(\"BackJumps\"), clb ->\n+        CoreOp.FuncOp f = getFuncOp(ClassFile.of().build(ClassDesc.of(\"BackJumps\"), clb ->\n@@ -68,2 +68,2 @@\n-    static CoreOps.FuncOp getFuncOp(byte[] classdata, String method) {\n-        CoreOps.FuncOp flift = BytecodeLift.lift(classdata, method);\n+    static CoreOp.FuncOp getFuncOp(byte[] classdata, String method) {\n+        CoreOp.FuncOp flift = BytecodeLift.lift(classdata, method);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftCustomBytecode.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -68,1 +68,1 @@\n-        CoreOps.FuncOp flift = BytecodeLift.lift(classdata, \"proxy\");\n+        CoreOp.FuncOp flift = BytecodeLift.lift(classdata, \"proxy\");\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -34,6 +34,0 @@\n-import java.lang.reflect.Method;\n-import java.lang.runtime.CodeReflection;\n-import java.util.Optional;\n-import java.util.function.Function;\n-import java.util.function.IntBinaryOperator;\n-import java.util.stream.Stream;\n@@ -54,1 +48,1 @@\n-        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+        CoreOp.ClosureOp cop = (CoreOp.ClosureOp) q.op();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestQuoted.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -68,1 +68,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+        CoreOp.FuncOp f = getFuncOp(\"f2\");\n@@ -91,1 +91,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+        CoreOp.FuncOp f = getFuncOp(\"f3\");\n@@ -107,1 +107,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f4\");\n+        CoreOp.FuncOp f = getFuncOp(\"f4\");\n@@ -127,1 +127,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f5\");\n+        CoreOp.FuncOp f = getFuncOp(\"f5\");\n@@ -140,1 +140,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -143,1 +143,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -156,1 +156,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -106,1 +106,1 @@\n-                CoreOps.FuncOp firstLift = lift(originalModel);\n+                CoreOp.FuncOp firstLift = lift(originalModel);\n@@ -108,1 +108,1 @@\n-                    CoreOps.FuncOp firstTransform = transform(firstLift);\n+                    CoreOp.FuncOp firstTransform = transform(firstLift);\n@@ -112,1 +112,1 @@\n-                            CoreOps.FuncOp secondLift = lift(firstModel);\n+                            CoreOp.FuncOp secondLift = lift(firstModel);\n@@ -114,1 +114,1 @@\n-                                CoreOps.FuncOp secondTransform = transform(secondLift);\n+                                CoreOp.FuncOp secondTransform = transform(secondLift);\n@@ -151,1 +151,1 @@\n-    private static void printInColumns(CoreOps.FuncOp first, CoreOps.FuncOp second) {\n+    private static void printInColumns(CoreOp.FuncOp first, CoreOp.FuncOp second) {\n@@ -168,1 +168,1 @@\n-    private static CoreOps.FuncOp lift(MethodModel mm) {\n+    private static CoreOp.FuncOp lift(MethodModel mm) {\n@@ -172,1 +172,1 @@\n-    private static CoreOps.FuncOp transform(CoreOps.FuncOp func) {\n+    private static CoreOp.FuncOp transform(CoreOp.FuncOp func) {\n@@ -183,1 +183,1 @@\n-    private static MethodModel lower(CoreOps.FuncOp func) {\n+    private static MethodModel lower(CoreOp.FuncOp func) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -69,1 +69,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catching\");\n+        CoreOp.FuncOp f = getFuncOp(\"catching\");\n@@ -121,1 +121,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchThrowable\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchThrowable\");\n@@ -177,1 +177,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchNested\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchNested\");\n@@ -258,1 +258,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -261,1 +261,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -289,1 +289,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTry.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -67,1 +67,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinally\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryCatchFinally\");\n@@ -99,1 +99,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryReturn\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryReturn\");\n@@ -131,1 +131,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"catchThrow\");\n+        CoreOp.FuncOp f = getFuncOp(\"catchThrow\");\n@@ -161,1 +161,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"finallyReturn\");\n+        CoreOp.FuncOp f = getFuncOp(\"finallyReturn\");\n@@ -194,1 +194,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -197,1 +197,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -225,1 +225,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinally.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -87,1 +87,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinally\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryCatchFinally\");\n@@ -133,1 +133,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryForLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryForLoop\");\n@@ -172,1 +172,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"tryLabeledForLoop\");\n+        CoreOp.FuncOp f = getFuncOp(\"tryLabeledForLoop\");\n@@ -217,1 +217,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n@@ -220,1 +220,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -256,1 +256,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinallyNested.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -29,1 +29,1 @@\n-import static java.lang.reflect.code.op.CoreOps.sub;\n+import static java.lang.reflect.code.op.CoreOp.sub;\n@@ -37,1 +37,1 @@\n-        return opP(CoreOps.NegOp.class, operand);\n+        return opP(CoreOp.NegOp.class, operand);\n@@ -41,1 +41,1 @@\n-        return opP(CoreOps.AddOp.class, lhs, rhs);\n+        return opP(CoreOp.AddOp.class, lhs, rhs);\n@@ -45,1 +45,1 @@\n-        return opP(CoreOps.MulOp.class, lhs, rhs);\n+        return opP(CoreOp.MulOp.class, lhs, rhs);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/expression\/ExpressionElimination.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -43,1 +43,1 @@\n-        CoreOps.ClosureOp lf = generate((double a) -> a + 0.0);\n+        CoreOp.ClosureOp lf = generate((double a) -> a + 0.0);\n@@ -50,1 +50,1 @@\n-        CoreOps.ClosureOp lf = generate((double a, double b) -> -a + b);\n+        CoreOp.ClosureOp lf = generate((double a, double b) -> -a + b);\n@@ -55,2 +55,2 @@\n-    static CoreOps.ClosureOp generate(Quoted q) {\n-        return generateF((CoreOps.ClosureOp) q.op());\n+    static CoreOp.ClosureOp generate(Quoted q) {\n+        return generateF((CoreOp.ClosureOp) q.op());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/expression\/TestExpressionElimination.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.util.Optional;\n-import java.util.stream.Stream;\n@@ -30,1 +28,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -34,1 +32,0 @@\n-import org.testng.annotations.DataProvider;\n@@ -164,1 +161,1 @@\n-            CoreOps.FuncOp f = method.getCodeModel().orElseThrow();\n+            CoreOp.FuncOp f = method.getCodeModel().orElseThrow();\n@@ -186,1 +183,1 @@\n-            CoreOps.FuncOp f = method.getCodeModel().orElseThrow();\n+            CoreOp.FuncOp f = method.getCodeModel().orElseThrow();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestAssert.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -30,1 +30,1 @@\n-    protected abstract Queryable<?> createQuery(JavaType elementType, CoreOps.FuncOp queryExpression);\n+    protected abstract Queryable<?> createQuery(JavaType elementType, CoreOp.FuncOp queryExpression);\n@@ -32,1 +32,1 @@\n-    protected abstract QueryResult<?> createQueryResult(JavaType resultType, CoreOps.FuncOp expression);\n+    protected abstract QueryResult<?> createQueryResult(JavaType resultType, CoreOp.FuncOp expression);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/QueryProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -34,1 +34,1 @@\n-    CoreOps.FuncOp expression();\n+    CoreOp.FuncOp expression();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/QueryResult.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.op.CoreOp.*;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/Queryable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -27,2 +27,2 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.func;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.func;\n@@ -42,1 +42,1 @@\n-    protected Queryable<?> createQuery(JavaType elementType, CoreOps.FuncOp expression) {\n+    protected Queryable<?> createQuery(JavaType elementType, CoreOp.FuncOp expression) {\n@@ -47,1 +47,1 @@\n-    protected QueryResult<?> createQueryResult(JavaType resultType, CoreOps.FuncOp expression) {\n+    protected QueryResult<?> createQueryResult(JavaType resultType, CoreOp.FuncOp expression) {\n@@ -54,1 +54,1 @@\n-        final CoreOps.FuncOp expression;\n+        final CoreOp.FuncOp expression;\n@@ -67,1 +67,1 @@\n-        TestQueryable(JavaType elementType, TestQueryProvider provider, CoreOps.FuncOp expression) {\n+        TestQueryable(JavaType elementType, TestQueryProvider provider, CoreOp.FuncOp expression) {\n@@ -84,1 +84,1 @@\n-        public CoreOps.FuncOp expression() {\n+        public CoreOp.FuncOp expression() {\n@@ -89,1 +89,1 @@\n-    record TestQueryResult<T>(JavaType resultType, CoreOps.FuncOp expression) implements QueryResult<T> {\n+    record TestQueryResult<T>(JavaType resultType, CoreOp.FuncOp expression) implements QueryResult<T> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/TestQueryProvider.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -48,1 +48,1 @@\n-        CoreOps.FuncOp f = getFuncOp(ClassWithReflectedMethod.class, \"f\");\n+        CoreOp.FuncOp f = getFuncOp(ClassWithReflectedMethod.class, \"f\");\n@@ -50,1 +50,1 @@\n-            if (ce instanceof CoreOps.ConstantOp cop) {\n+            if (ce instanceof CoreOp.ConstantOp cop) {\n@@ -75,1 +75,1 @@\n-        CoreOps.FuncOp f = getFuncOp(TestLocation.class, \"f\");\n+        CoreOp.FuncOp f = getFuncOp(TestLocation.class, \"f\");\n@@ -77,1 +77,1 @@\n-        CoreOps.FuncOp tf = f.transform(OpTransformer.DROP_LOCATION_TRANSFORMER);\n+        CoreOp.FuncOp tf = f.transform(OpTransformer.DROP_LOCATION_TRANSFORMER);\n@@ -81,1 +81,1 @@\n-        CoreOps.FuncOp tlf = lower(f).transform(OpTransformer.DROP_LOCATION_TRANSFORMER);\n+        CoreOp.FuncOp tlf = lower(f).transform(OpTransformer.DROP_LOCATION_TRANSFORMER);\n@@ -88,1 +88,1 @@\n-        CoreOps.FuncOp f = getFuncOp(TestLocation.class, \"f\");\n+        CoreOp.FuncOp f = getFuncOp(TestLocation.class, \"f\");\n@@ -93,1 +93,1 @@\n-        CoreOps.FuncOp tf = (CoreOps.FuncOp) OpParser.fromString(ExtendedOps.FACTORY, tfText).getFirst();\n+        CoreOp.FuncOp tf = (CoreOp.FuncOp) OpParser.fromString(ExtendedOp.FACTORY, tfText).getFirst();\n@@ -97,1 +97,1 @@\n-    static CoreOps.FuncOp lower(CoreOps.FuncOp f) {\n+    static CoreOp.FuncOp lower(CoreOp.FuncOp f) {\n@@ -115,1 +115,1 @@\n-    static CoreOps.FuncOp getFuncOp(Class<?> c, String name) {\n+    static CoreOp.FuncOp getFuncOp(Class<?> c, String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/location\/TestLocation.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -58,1 +58,1 @@\n-        CoreOps.FuncOp f = method.getCodeModel().orElseThrow(() ->\n+        CoreOp.FuncOp f = method.getCodeModel().orElseThrow(() ->\n@@ -69,1 +69,1 @@\n-    static CoreOps.FuncOp lower(CoreOps.FuncOp f, boolean ssa) {\n+    static CoreOp.FuncOp lower(CoreOp.FuncOp f, boolean ssa) {\n@@ -97,1 +97,1 @@\n-            o = OpParser.fromString(ExtendedOps.FACTORY, d).get(0);\n+            o = OpParser.fromString(ExtendedOp.FACTORY, d).get(0);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/CodeReflectionTester.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -41,5 +41,5 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.add;\n-import static java.lang.reflect.code.op.CoreOps.constant;\n-import static java.lang.reflect.code.op.CoreOps.func;\n-import static java.lang.reflect.code.op.CoreOps.lambda;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.add;\n+import static java.lang.reflect.code.op.CoreOp.constant;\n+import static java.lang.reflect.code.op.CoreOp.func;\n+import static java.lang.reflect.code.op.CoreOp.lambda;\n@@ -59,1 +59,1 @@\n-        CoreOps.FuncOp f = func(\"f\", functionType(INT, INT))\n+        CoreOp.FuncOp f = func(\"f\", functionType(INT, INT))\n@@ -66,1 +66,1 @@\n-                    CoreOps.LambdaOp lambda = lambda(block.parentBody(),\n+                    CoreOp.LambdaOp lambda = lambda(block.parentBody(),\n@@ -78,1 +78,1 @@\n-                    Op.Result or = block.op(CoreOps.invoke(INT_UNARY_OPERATOR_METHOD, fi, fortyTwo));\n+                    Op.Result or = block.op(CoreOp.invoke(INT_UNARY_OPERATOR_METHOD, fi, fortyTwo));\n@@ -82,1 +82,1 @@\n-        List<Op> ops = OpParser.fromString(CoreOps.FACTORY, f.toText());\n+        List<Op> ops = OpParser.fromString(CoreOp.FACTORY, f.toText());\n@@ -99,2 +99,2 @@\n-        Op opE = OpParser.fromString(CoreOps.FACTORY, NAMED_BODY).get(0);\n-        Op opA = OpParser.fromString(CoreOps.FACTORY, opE.toText()).get(0);\n+        Op opE = OpParser.fromString(CoreOp.FACTORY, NAMED_BODY).get(0);\n+        Op opA = OpParser.fromString(CoreOp.FACTORY, opE.toText()).get(0);\n@@ -113,2 +113,2 @@\n-        Op opE = OpParser.fromString(CoreOps.FACTORY, ESCAPED_STRING).get(0);\n-        Op opA = OpParser.fromString(CoreOps.FACTORY, opE.toText()).get(0);\n+        Op opE = OpParser.fromString(CoreOp.FACTORY, ESCAPED_STRING).get(0);\n+        Op opA = OpParser.fromString(CoreOp.FACTORY, opE.toText()).get(0);\n@@ -117,1 +117,1 @@\n-        CoreOps.ConstantOp cop = (CoreOps.ConstantOp) opE.bodies().get(0).entryBlock().firstOp();\n+        CoreOp.ConstantOp cop = (CoreOp.ConstantOp) opE.bodies().get(0).entryBlock().firstOp();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestParse.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps.JavaEnhancedForOp;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.ExtendedOp.JavaEnhancedForOp;\n@@ -37,3 +37,3 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n-import static java.lang.reflect.code.op.ExtendedOps._continue;\n-import static java.lang.reflect.code.op.ExtendedOps.enhancedFor;\n+import static java.lang.reflect.code.op.CoreOp.*;\n+import static java.lang.reflect.code.op.ExtendedOp._continue;\n+import static java.lang.reflect.code.op.ExtendedOp.enhancedFor;\n@@ -58,1 +58,1 @@\n-                if (!(quotedClosure.op() instanceof CoreOps.ClosureOp)) {\n+                if (!(quotedClosure.op() instanceof CoreOp.ClosureOp)) {\n@@ -64,2 +64,2 @@\n-            CoreOps.ClosureOp op() {\n-                return (CoreOps.ClosureOp) quotedClosure.op();\n+            CoreOp.ClosureOp op() {\n+                return (CoreOp.ClosureOp) quotedClosure.op();\n@@ -182,1 +182,1 @@\n-            if (!(quotedConsumer.op() instanceof CoreOps.ClosureOp consumer)) {\n+            if (!(quotedConsumer.op() instanceof CoreOp.ClosureOp consumer)) {\n@@ -207,1 +207,1 @@\n-            if (!(quotedSupplier.op() instanceof CoreOps.ClosureOp supplier)) {\n+            if (!(quotedSupplier.op() instanceof CoreOp.ClosureOp supplier)) {\n@@ -210,1 +210,1 @@\n-            if (!(quotedAccumulator.op() instanceof CoreOps.ClosureOp accumulator)) {\n+            if (!(quotedAccumulator.op() instanceof CoreOp.ClosureOp accumulator)) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/StreamFuser.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.lang.reflect.code.op.ExtendedOps.JavaEnhancedForOp;\n+import java.lang.reflect.code.op.ExtendedOp.JavaEnhancedForOp;\n@@ -33,3 +33,3 @@\n-import static java.lang.reflect.code.op.CoreOps.*;\n-import static java.lang.reflect.code.op.ExtendedOps._continue;\n-import static java.lang.reflect.code.op.ExtendedOps.enhancedFor;\n+import static java.lang.reflect.code.op.CoreOp.*;\n+import static java.lang.reflect.code.op.ExtendedOp._continue;\n+import static java.lang.reflect.code.op.ExtendedOp.enhancedFor;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/StreamFuserUsingQuotable.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -45,1 +45,1 @@\n-        CoreOps.FuncOp f = StreamFuser.fromList(type(Integer.class))\n+        CoreOp.FuncOp f = StreamFuser.fromList(type(Integer.class))\n@@ -54,1 +54,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -70,1 +70,1 @@\n-        CoreOps.FuncOp f = StreamFuser.fromList(type(Integer.class))\n+        CoreOp.FuncOp f = StreamFuser.fromList(type(Integer.class))\n@@ -80,1 +80,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -43,1 +43,1 @@\n-        CoreOps.FuncOp f = StreamFuserUsingQuotable.fromList(Integer.class)\n+        CoreOp.FuncOp f = StreamFuserUsingQuotable.fromList(Integer.class)\n@@ -53,1 +53,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n@@ -69,1 +69,1 @@\n-        CoreOps.FuncOp f = StreamFuserUsingQuotable.fromList(Integer.class)\n+        CoreOp.FuncOp f = StreamFuserUsingQuotable.fromList(Integer.class)\n@@ -79,1 +79,1 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        CoreOp.FuncOp lf = f.transform((block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStreamUsingQuotable.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -30,1 +29,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -109,1 +108,1 @@\n-        Optional<CoreOps.FuncOp> m = xr.codeModel(MethodHandles.lookup());\n+        Optional<CoreOp.FuncOp> m = xr.codeModel(MethodHandles.lookup());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestReferences.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import java.lang.reflect.code.op.CoreOps;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -111,1 +111,1 @@\n-    public void testWithTransforms(CoreOps.FuncOp f) {\n+    public void testWithTransforms(CoreOp.FuncOp f) {\n@@ -128,4 +128,4 @@\n-    static void test(CoreOps.FuncOp fExpected) {\n-        CoreOps.FuncOp fb = OpBuilder.createBuilderFunction(fExpected);\n-        CoreOps.FuncOp fActual = (CoreOps.FuncOp) Interpreter.invoke(MethodHandles.lookup(),\n-                fb, ExtendedOps.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY);\n+    static void test(CoreOp.FuncOp fExpected) {\n+        CoreOp.FuncOp fb = OpBuilder.createBuilderFunction(fExpected);\n+        CoreOp.FuncOp fActual = (CoreOp.FuncOp) Interpreter.invoke(MethodHandles.lookup(),\n+                fb, ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY);\n@@ -135,1 +135,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestCodeBuilder.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.CoreOp;\n@@ -60,1 +60,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -67,1 +67,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n@@ -96,1 +96,1 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n+    static CoreOp.FuncOp getFuncOp(String name) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestNaming.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -34,2 +34,2 @@\n-import static java.lang.reflect.code.op.CoreOps._return;\n-import static java.lang.reflect.code.op.CoreOps.func;\n+import static java.lang.reflect.code.op.CoreOp._return;\n+import static java.lang.reflect.code.op.CoreOp.func;\n@@ -100,1 +100,1 @@\n-            o = OpParser.fromString(ExtendedOps.FACTORY, d).get(0);\n+            o = OpParser.fromString(ExtendedOp.FACTORY, d).get(0);\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-                    ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                        %7 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -72,2 +72,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -111,2 +111,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -169,6 +169,6 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Record<PatternsTest$Rectangle> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<PatternsTest$ConcretePoint> = pattern.binding @\"p\";\n-                                %12 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<PatternsTest$Color> = pattern.binding @\"c\";\n-                                %13 : java.lang.reflect.code.ExtendedOps$Pattern$Record<PatternsTest$ColoredPoint> = pattern.record %11 %12 @\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n-                                %14 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<PatternsTest$ColoredPoint> = pattern.binding @\"lr\";\n-                                %15 : java.lang.reflect.code.ExtendedOps$Pattern$Record<PatternsTest$Rectangle> = pattern.record %13 %14 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ConcretePoint> = pattern.binding @\"p\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$Color> = pattern.binding @\"c\";\n+                                %13 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$ColoredPoint> = pattern.record %11 %12 @\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n+                                %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ColoredPoint> = pattern.binding @\"lr\";\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %13 %14 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n@@ -230,2 +230,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -268,2 +268,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -315,2 +315,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.Number> -> {\n-                                        %14 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n+                                        %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                 %0 : java.lang.reflect.code.CoreOps$Closure<void> = closure ()void -> {\n+                 %0 : func<void> = closure ()void -> {\n@@ -49,1 +49,1 @@\n-                %0 : java.lang.reflect.code.CoreOps$Closure<int> = closure ()int -> {\n+                %0 : func<int> = closure ()int -> {\n@@ -60,1 +60,1 @@\n-                %0 : java.lang.reflect.code.CoreOps$Closure<int, int> = closure (%2 : int)int -> {\n+                %0 : func<int, int> = closure (%2 : int)int -> {\n@@ -72,1 +72,1 @@\n-                %0 : java.lang.reflect.code.CoreOps$Closure<int, int, int> = closure (%2 : int, %3 : int)int -> {\n+                %0 : func<int, int, int> = closure (%2 : int, %3 : int)int -> {\n@@ -87,1 +87,1 @@\n-                %0 : java.lang.reflect.code.CoreOps$Closure<java.lang.Object> = closure ()java.lang.Object -> {\n+                %0 : func<java.lang.Object> = closure ()java.lang.Object -> {\n@@ -102,1 +102,1 @@\n-                %0 : java.lang.reflect.code.CoreOps$Closure<int, int> = closure (%4 : int)int -> {\n+                %0 : func<int, int> = closure (%4 : int)int -> {\n@@ -128,1 +128,1 @@\n-                %1 : java.lang.reflect.code.CoreOps$Closure<int, int> = closure (%3 : int)int -> {\n+                %1 : func<int, int> = closure (%3 : int)int -> {\n@@ -147,1 +147,1 @@\n-                    %3 : java.lang.reflect.code.CoreOps$Closure<int, int> = closure (%4 : int)int -> {\n+                    %3 : func<int, int> = closure (%4 : int)int -> {\n@@ -170,1 +170,1 @@\n-                    %2 : java.lang.reflect.code.CoreOps$Closure<int, int> = closure (%3 : int)int -> {\n+                    %2 : func<int, int> = closure (%3 : int)int -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -340,3 +340,3 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Record<SwitchExpressionTest$A> -> {\n-                                %10 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n-                                %11 : java.lang.reflect.code.ExtendedOps$Pattern$Record<SwitchExpressionTest$A> = pattern.record %10 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> -> {\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> = pattern.record %10 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -357,2 +357,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                %16 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -409,3 +409,3 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Record<SwitchExpressionTest$A> -> {\n-                                %12 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n-                                %13 : java.lang.reflect.code.ExtendedOps$Pattern$Record<SwitchExpressionTest$A> = pattern.record %12 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> -> {\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %13 : java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchExpressionTest$A> = pattern.record %12 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -428,2 +428,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                        %19 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n@@ -455,2 +455,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> -> {\n-                                        %29 : java.lang.reflect.code.ExtendedOps$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import java.lang.reflect.code.op.CoreOps.FuncOp;\n-import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.op.CoreOp.FuncOp;\n+import java.lang.reflect.code.op.ExtendedOp;\n@@ -166,1 +166,1 @@\n-        return serialize(OpParser.fromString(ExtendedOps.FACTORY, d).get(0));\n+        return serialize(OpParser.fromString(ExtendedOp.FACTORY, d).get(0));\n","filename":"test\/langtools\/tools\/javac\/reflect\/TestIRFromAnnotation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.CoreOps.Var;\n+import java.lang.reflect.code.op.CoreOp.Var;\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuotable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.op.CoreOps.Var;\n+import java.lang.reflect.code.op.CoreOp.Var;\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuoted.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}