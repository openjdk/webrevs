{"files":[{"patch":"@@ -22,0 +22,1 @@\n+import jdk.incubator.code.type.FieldRef;\n@@ -79,1 +80,1 @@\n-        static List<Tensor> getInitValues(MethodHandles.Lookup lookup, List<OnnxType.Initializer> initializers, SequencedCollection<Object> possibleReceivers) {\n+        static List<Tensor> getInitValues(MethodHandles.Lookup lookup, SequencedCollection<FieldRef> initializers, SequencedCollection<Object> possibleReceivers) {\n@@ -82,3 +83,1 @@\n-                    int split = i.name().lastIndexOf('.');\n-                    Class<?> initializerClass = lookup.findClass(i.name().substring(0, split));\n-                    Field initializerField = initializerClass.getDeclaredField(i.name().substring(split + 1, i.name().length()));\n+                    Field initializerField = i.resolveToMember(lookup);\n@@ -89,0 +88,1 @@\n+                        Class<?> initializerClass = initializerField.getDeclaringClass();\n@@ -99,9 +99,1 @@\n-            CoreOp.ModuleOp module = OnnxTransformer.transform(l, q);\n-\n-            \/\/ initializers filtered from the model main function parameters\n-            List<OnnxType.Initializer> initializers =\n-                    module.functionTable().sequencedValues().getLast()\n-                            .parameters().stream()\n-                                    .map(Block.Parameter::type)\n-                                    .filter(OnnxType.Initializer.class::isInstance)\n-                                    .map(OnnxType.Initializer.class::cast).toList();\n+            OnnxTransformer.ModuleAndInitializers mi = OnnxTransformer.transform(l, q);\n@@ -110,1 +102,1 @@\n-            byte[] protobufModel = OnnxProtoBuilder.build(domainName, module, getInitValues(l, initializers, q.capturedValues().sequencedValues()));\n+            byte[] protobufModel = OnnxProtoBuilder.build(domainName, mi.module(), getInitValues(l, mi.initializers(), q.capturedValues().sequencedValues()));\n@@ -113,1 +105,1 @@\n-                System.out.println(module.toText());\n+                System.out.println(mi.module().toText());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -52,1 +52,3 @@\n-    public static CoreOp.ModuleOp transform(MethodHandles.Lookup l, Quoted quotedLambda) {\n+    public record ModuleAndInitializers(CoreOp.ModuleOp module, SequencedCollection<FieldRef> initializers) {}\n+\n+    public static ModuleAndInitializers transform(MethodHandles.Lookup l, Quoted quotedLambda) {\n@@ -85,1 +87,2 @@\n-    public static CoreOp.ModuleOp transform(MethodHandles.Lookup l, CoreOp.FuncOp inputFunc) {\n+\n+    public static ModuleAndInitializers transform(MethodHandles.Lookup l, CoreOp.FuncOp inputFunc) {\n@@ -87,3 +90,2 @@\n-        m = remapInitializers(l, m);\n-        m = transformModule(l, m);\n-        return m;\n+        ModuleAndInitializers mi = remapInitializers(l, m);\n+        return new ModuleAndInitializers(transformModule(l, mi.module()), mi.initializers());\n@@ -136,1 +138,2 @@\n-    static CoreOp.ModuleOp remapInitializers(MethodHandles.Lookup l, CoreOp.ModuleOp module) {\n+\n+    static ModuleAndInitializers remapInitializers(MethodHandles.Lookup l, CoreOp.ModuleOp module) {\n@@ -138,1 +141,1 @@\n-        record TI(OnnxType.Initializer type, int index) {}\n+        record TI(OnnxType type, int index) {}\n@@ -141,1 +144,1 @@\n-                i.putIfAbsent(flo.fieldDescriptor(), new TI(new OnnxType.Initializer((OnnxType)convertType(l, ct), ((ClassType)flo.fieldDescriptor().refType()).rawType().toClassName() + \".\" + flo.fieldDescriptor().name()), i.size()));\n+                i.putIfAbsent(flo.fieldDescriptor(), new TI((OnnxType)convertType(l, ct), i.size()));\n@@ -147,1 +150,1 @@\n-            return module;\n+            return new ModuleAndInitializers(module, List.of());\n@@ -151,2 +154,2 @@\n-        List<OnnxType.Initializer> initTypes = initializers.sequencedValues().stream().map(TI::type).toList();\n-        return CoreOp.module(module.functionTable().sequencedValues().stream().map(f -> {\n+        List<OnnxType> initTypes = initializers.sequencedValues().stream().map(TI::type).toList();\n+        return new ModuleAndInitializers(CoreOp.module(module.functionTable().sequencedValues().stream().map(f -> {\n@@ -177,1 +180,1 @@\n-        }).toList());\n+        }).toList()), initializers.sequencedKeySet());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -89,8 +89,0 @@\n-                case Initializer.NAME: {\n-                    if (tree.arguments().size() != 2) {\n-                        throw new IllegalArgumentException();\n-                    }\n-                    return new Initializer(\n-                            constructType(tree.arguments().getFirst()),\n-                            tree.arguments().get(1).toString());\n-                }\n@@ -477,25 +469,0 @@\n-    public static final class Initializer extends OnnxType {\n-        static final String NAME = \"init\";\n-\n-        final OnnxType type;\n-        final String name;\n-\n-        public Initializer(OnnxType type, String name) {\n-            this.type = type;\n-            this.name = name;\n-        }\n-\n-        public OnnxType type() {\n-            return type;\n-        }\n-\n-        public String name() {\n-            return name;\n-        }\n-\n-        @Override\n-        public ExternalizedTypeElement externalize() {\n-            return new ExternalizedTypeElement(NAME, List.of(type.externalize(), ExternalizedTypeElement.ofString(name)));\n-        }\n-    }\n-\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OnnxType.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-            CoreOp.ModuleOp onnxModel = OnnxTransformer.transform(MethodHandles.lookup(), f);\n+            CoreOp.ModuleOp onnxModel = OnnxTransformer.transform(MethodHandles.lookup(), f).module();\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}