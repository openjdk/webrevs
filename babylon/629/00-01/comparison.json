{"files":[{"patch":"@@ -33,0 +33,2 @@\n+    \/\/ Interface for Floating Point numbers of 16-bits\n+    \/\/ Values are stored in a short format.\n@@ -34,0 +36,2 @@\n+        String HAT_MAPPING_TYPE = \"half\";\n+\n@@ -37,0 +41,3 @@\n+        \/\/ Intrinsic for the HAT compiler to create a\n+        \/\/ new half\n+        String F16_INSTANCE_OF = \"of\";\n@@ -41,1 +48,1 @@\n-        static short float2half(float value) {\n+        static short floatToF16(float value) {\n@@ -44,1 +51,2 @@\n-        static float half2float(short value) {\n+\n+        static float f16ToFloat(short value) {\n@@ -47,0 +55,1 @@\n+\n@@ -62,2 +71,0 @@\n-\n-        String HAT_MAPPING_TYPE = \"half\";\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/F16Array.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+import static hat.buffer.F16Array.F16;\n+\n@@ -234,1 +236,1 @@\n-                        if (isFP16Operation(invokeOp, \"of\") && invokeOp.resultType() != JavaType.VOID) {\n+                        if (isFP16Operation(invokeOp, F16.F16_INSTANCE_OF) && invokeOp.resultType() != JavaType.VOID) {\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HATDialectifyFP16Phase.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-            arrayA.array(i).value(F16.float2half(i));\n+            arrayA.array(i).value(F16.floatToF16(i));\n@@ -170,1 +170,1 @@\n-            HatAsserts.assertEquals((float)i, F16.half2float(val), 0.001f);\n+            HatAsserts.assertEquals((float)i, F16.f16ToFloat(val), 0.001f);\n@@ -185,2 +185,2 @@\n-            arrayA.array(i).value(F16.float2half(random.nextFloat()));\n-            arrayB.array(i).value(F16.float2half(random.nextFloat()));\n+            arrayA.array(i).value(F16.floatToF16(random.nextFloat()));\n+            arrayB.array(i).value(F16.floatToF16(random.nextFloat()));\n@@ -197,1 +197,1 @@\n-            HatAsserts.assertEquals((fa + fb), F16.half2float(val), 0.001f);\n+            HatAsserts.assertEquals((fa + fb), F16.f16ToFloat(val), 0.001f);\n@@ -212,2 +212,2 @@\n-            arrayA.array(i).value(F16.float2half(random.nextFloat()));\n-            arrayB.array(i).value(F16.float2half(random.nextFloat()));\n+            arrayA.array(i).value(F16.floatToF16(random.nextFloat()));\n+            arrayB.array(i).value(F16.floatToF16(random.nextFloat()));\n@@ -224,1 +224,1 @@\n-            HatAsserts.assertEquals((fa + fb + fb), F16.half2float(val), 0.001f);\n+            HatAsserts.assertEquals((fa + fb + fb), F16.f16ToFloat(val), 0.001f);\n@@ -239,2 +239,2 @@\n-            arrayA.array(i).value(F16.float2half(random.nextFloat()));\n-            arrayB.array(i).value(F16.float2half(random.nextFloat()));\n+            arrayA.array(i).value(F16.floatToF16(random.nextFloat()));\n+            arrayB.array(i).value(F16.floatToF16(random.nextFloat()));\n@@ -270,1 +270,1 @@\n-            arrayA.array(i).value(F16.float2half(0.0f));\n+            arrayA.array(i).value(F16.floatToF16(0.0f));\n@@ -290,1 +290,1 @@\n-            arrayA.array(i).value(F16.float2half(0.0f));\n+            arrayA.array(i).value(F16.floatToF16(0.0f));\n","filename":"hat\/tests\/src\/main\/java\/hat\/test\/TestFP16Type.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -443,2 +443,2 @@\n-            matrixA.array(j).value(F16.float2half(r.nextFloat()));\n-            matrixB.array(j).value(F16.float2half(r.nextFloat()));\n+            matrixA.array(j).value(F16.floatToF16(r.nextFloat()));\n+            matrixB.array(j).value(F16.floatToF16(r.nextFloat()));\n","filename":"hat\/tests\/src\/main\/java\/hat\/test\/TestMatMul.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}