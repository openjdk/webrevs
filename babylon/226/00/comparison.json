{"files":[{"patch":"@@ -833,1 +833,7 @@\n-                Value rhs = toValue(tree.rhs, unboxedType);\n+                \/\/ if string concat and rhs is primitive, toValue(rhs)\n+                Value rhs;\n+                if (tree.operator.opcode == ByteCodes.string_add && tree.rhs.type.isPrimitive()) {\n+                    rhs = toValue(tree.rhs);\n+                } else {\n+                    rhs = toValue(tree.rhs, unboxedType);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+import java.lang.runtime.CodeReflection;\n+\n+\/*\n+ * @test\n+ * @build StringConcatTest\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester StringConcatTest\n+ *\/\n+public class StringConcatTest {\n+\n+    @IR(\"\"\"\n+            func @\"test1\" (%0 : java.lang.String, %1 : int)java.lang.String -> {\n+                %2 : Var<java.lang.String> = var %0 @\"a\";\n+                %3 : Var<int> = var %1 @\"b\";\n+                %4 : java.lang.String = var.load %2;\n+                %5 : int = var.load %3;\n+                %6 : java.lang.String = concat %4 %5;\n+                return %6;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String test1(String a, int b) {\n+        return a + b;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test2\" (%0 : java.lang.String, %1 : char)java.lang.String -> {\n+                %2 : Var<java.lang.String> = var %0 @\"a\";\n+                %3 : Var<char> = var %1 @\"b\";\n+                %4 : java.lang.String = var.load %2;\n+                %5 : char = var.load %3;\n+                %6 : java.lang.String = concat %4 %5;\n+                var.store %2 %6;\n+                %7 : java.lang.String = var.load %2;\n+                return %7;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String test2(String a, char b) {\n+        a += b;\n+        return a;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test3\" (%0 : java.lang.String, %1 : float)java.lang.String -> {\n+                %2 : Var<java.lang.String> = var %0 @\"a\";\n+                %3 : Var<float> = var %1 @\"b\";\n+                %4 : java.lang.String = var.load %2;\n+                %5 : float = var.load %3;\n+                %6 : java.lang.String = concat %4 %5;\n+                var.store %2 %6;\n+                %7 : java.lang.String = var.load %2;\n+                return %7;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String test3(String a, float b) {\n+        a = a + b;\n+        return a;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/StringConcatTest.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}