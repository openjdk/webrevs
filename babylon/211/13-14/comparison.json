{"files":[{"patch":"@@ -16,54 +16,54 @@\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"s\";\n-                %4 : java.lang.String = var.load %1;\n-                java.switch.statement %4\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.String = constant @\"FOO\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %7;\n-                    }\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : java.lang.String = add %8 %9;\n-                        var.store %3 %10;\n-                        yield;\n-                    }\n-                    (%11 : java.lang.String)boolean -> {\n-                        %12 : java.lang.String = constant @\"BAR\";\n-                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %13;\n-                    }\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"BAZ\";\n-                        %16 : java.lang.String = add %14 %15;\n-                        var.store %3 %16;\n-                        yield;\n-                    }\n-                    (%17 : java.lang.String)boolean -> {\n-                        %18 : java.lang.String = constant @\"BAZ\";\n-                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %19;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"FOO\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.String> = var %0 @\"r\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"s\";\n+                  %4 : java.lang.String = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : java.lang.String)boolean -> {\n+                          %6 : java.lang.String = constant @\"FOO\";\n+                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          %8 : java.lang.String = var.load %3;\n+                          %9 : java.lang.String = constant @\"BAR\";\n+                          %10 : java.lang.String = concat %8 %9;\n+                          var.store %3 %10;\n+                          yield;\n+                      }\n+                      (%11 : java.lang.String)boolean -> {\n+                          %12 : java.lang.String = constant @\"BAR\";\n+                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %13;\n+                      }\n+                      ()void -> {\n+                          %14 : java.lang.String = var.load %3;\n+                          %15 : java.lang.String = constant @\"BAZ\";\n+                          %16 : java.lang.String = concat %14 %15;\n+                          var.store %3 %16;\n+                          yield;\n+                      }\n+                      (%17 : java.lang.String)boolean -> {\n+                          %18 : java.lang.String = constant @\"BAZ\";\n+                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %19;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"FOO\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -85,54 +85,54 @@\n-                %1 : Var<java.lang.String> = var %0 @\"r\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"s\";\n-                %4 : java.lang.String = var.load %1;\n-                java.switch.statement %4\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.String = constant @\"FOO\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %7;\n-                    }\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : java.lang.String = add %8 %9;\n-                        var.store %3 %10;\n-                        yield;\n-                    }\n-                    (%11 : java.lang.String)boolean -> {\n-                        %12 : java.lang.String = constant @\"BAR\";\n-                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %13;\n-                    }\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"BAZ\";\n-                        %16 : java.lang.String = add %14 %15;\n-                        var.store %3 %16;\n-                        yield;\n-                    }\n-                    (%17 : java.lang.String)boolean -> {\n-                        %18 : java.lang.String = constant @\"BAZ\";\n-                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %19;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"FOO\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.String> = var %0 @\"r\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"s\";\n+                  %4 : java.lang.String = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : java.lang.String)boolean -> {\n+                          %6 : java.lang.String = constant @\"FOO\";\n+                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          %8 : java.lang.String = var.load %3;\n+                          %9 : java.lang.String = constant @\"BAR\";\n+                          %10 : java.lang.String = concat %8 %9;\n+                          var.store %3 %10;\n+                          yield;\n+                      }\n+                      (%11 : java.lang.String)boolean -> {\n+                          %12 : java.lang.String = constant @\"BAR\";\n+                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %13;\n+                      }\n+                      ()void -> {\n+                          %14 : java.lang.String = var.load %3;\n+                          %15 : java.lang.String = constant @\"BAZ\";\n+                          %16 : java.lang.String = concat %14 %15;\n+                          var.store %3 %16;\n+                          yield;\n+                      }\n+                      (%17 : java.lang.String)boolean -> {\n+                          %18 : java.lang.String = constant @\"BAZ\";\n+                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %19;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"FOO\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -162,54 +162,54 @@\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.String = var.load %1;\n-                java.switch.statement %4\n-                    (%5 : java.lang.String)boolean -> {\n-                        %6 : java.lang.String = constant @\"FOO\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %7;\n-                    }\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : java.lang.String = add %8 %9;\n-                        var.store %3 %10;\n-                        java.break;\n-                    }\n-                    (%11 : java.lang.String)boolean -> {\n-                        %12 : java.lang.String = constant @\"BAR\";\n-                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %13;\n-                    }\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"BAZ\";\n-                        %16 : java.lang.String = add %14 %15;\n-                        var.store %3 %16;\n-                        java.break;\n-                    }\n-                    (%17 : java.lang.String)boolean -> {\n-                        %18 : java.lang.String = constant @\"BAZ\";\n-                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %19;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"FOO\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        java.break;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.String> = var %0 @\"s\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.String = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : java.lang.String)boolean -> {\n+                          %6 : java.lang.String = constant @\"FOO\";\n+                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          %8 : java.lang.String = var.load %3;\n+                          %9 : java.lang.String = constant @\"BAR\";\n+                          %10 : java.lang.String = concat %8 %9;\n+                          var.store %3 %10;\n+                          java.break;\n+                      }\n+                      (%11 : java.lang.String)boolean -> {\n+                          %12 : java.lang.String = constant @\"BAR\";\n+                          %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %13;\n+                      }\n+                      ()void -> {\n+                          %14 : java.lang.String = var.load %3;\n+                          %15 : java.lang.String = constant @\"BAZ\";\n+                          %16 : java.lang.String = concat %14 %15;\n+                          var.store %3 %16;\n+                          java.break;\n+                      }\n+                      (%17 : java.lang.String)boolean -> {\n+                          %18 : java.lang.String = constant @\"BAZ\";\n+                          %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %19;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"FOO\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          java.break;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -276,1 +276,1 @@\n-                        %20 : java.lang.String = add %18 %19;\n+                        %20 : java.lang.String = concat %18 %19;\n@@ -286,1 +286,1 @@\n-                        %23 : java.lang.String = add %21 %22;\n+                        %23 : java.lang.String = concat %21 %22;\n@@ -333,1 +333,1 @@\n-                        %16 : java.lang.String = add %14 %15;\n+                        %16 : java.lang.String = concat %14 %15;\n@@ -343,1 +343,1 @@\n-                        %19 : java.lang.String = add %17 %18;\n+                        %19 : java.lang.String = concat %17 %18;\n@@ -364,30 +364,30 @@\n-                  %1 : Var<java.lang.String> = var %0 @\"s\";\n-                  %2 : java.lang.String = constant @\"\";\n-                  %3 : Var<java.lang.String> = var %2 @\"r\";\n-                  %4 : java.lang.String = var.load %1;\n-                  java.switch.statement %4\n-                      (%5 : java.lang.String)boolean -> {\n-                          %6 : java.lang.Object = constant @null;\n-                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                          yield %7;\n-                      }\n-                      ()void -> {\n-                          %8 : java.lang.String = var.load %3;\n-                          %9 : java.lang.String = constant @\"null\";\n-                          %10 : java.lang.String = add %8 %9;\n-                          var.store %3 %10;\n-                          yield;\n-                      }\n-                      ()void -> {\n-                          yield;\n-                      }\n-                      ()void -> {\n-                          %11 : java.lang.String = var.load %3;\n-                          %12 : java.lang.String = constant @\"non null\";\n-                          %13 : java.lang.String = add %11 %12;\n-                          var.store %3 %13;\n-                          yield;\n-                      };\n-                  %14 : java.lang.String = var.load %3;\n-                  return %14;\n-              };\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.String = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.Object = constant @null;\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n+                    }\n+                    ()void -> {\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"null\";\n+                        %10 : java.lang.String = concat %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %11 : java.lang.String = var.load %3;\n+                        %12 : java.lang.String = constant @\"non null\";\n+                        %13 : java.lang.String = concat %11 %12;\n+                        var.store %3 %13;\n+                        yield;\n+                    };\n+                %14 : java.lang.String = var.load %3;\n+                return %14;\n+            };\n@@ -418,38 +418,38 @@\n-                %1 : Var<char> = var %0 @\"c\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : char = var.load %1;\n-                java.switch.statement %4\n-                    (%5 : char)boolean -> {\n-                        %6 : char = constant @\"A\";\n-                        %7 : boolean = eq %5 %6;\n-                        yield %7;\n-                    }\n-                    ()void -> {\n-                        java.switch.fallthrough;\n-                    }\n-                    (%8 : char)boolean -> {\n-                        %9 : char = constant @\"B\";\n-                        %10 : boolean = eq %8 %9;\n-                        yield %10;\n-                    }\n-                    ()void -> {\n-                        %11 : java.lang.String = var.load %3;\n-                        %12 : java.lang.String = constant @\"A or B\";\n-                        %13 : java.lang.String = add %11 %12;\n-                        var.store %3 %13;\n-                        java.break;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %3;\n-                        %15 : java.lang.String = constant @\"Neither A nor B\";\n-                        %16 : java.lang.String = add %14 %15;\n-                        var.store %3 %16;\n-                        yield;\n-                    };\n-                %17 : java.lang.String = var.load %3;\n-                return %17;\n-            };\n+                  %1 : Var<char> = var %0 @\"c\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : char = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : char)boolean -> {\n+                          %6 : char = constant @\"A\";\n+                          %7 : boolean = eq %5 %6;\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          java.switch.fallthrough;\n+                      }\n+                      (%8 : char)boolean -> {\n+                          %9 : char = constant @\"B\";\n+                          %10 : boolean = eq %8 %9;\n+                          yield %10;\n+                      }\n+                      ()void -> {\n+                          %11 : java.lang.String = var.load %3;\n+                          %12 : java.lang.String = constant @\"A or B\";\n+                          %13 : java.lang.String = concat %11 %12;\n+                          var.store %3 %13;\n+                          java.break;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %14 : java.lang.String = var.load %3;\n+                          %15 : java.lang.String = constant @\"Neither A nor B\";\n+                          %16 : java.lang.String = concat %14 %15;\n+                          var.store %3 %16;\n+                          yield;\n+                      };\n+                  %17 : java.lang.String = var.load %3;\n+                  return %17;\n+              };\n@@ -504,1 +504,1 @@\n-                        %16 : java.lang.String = add %13 %15;\n+                        %16 : java.lang.String = concat %13 %15;\n@@ -517,1 +517,1 @@\n-                        %23 : java.lang.String = add %20 %22;\n+                        %23 : java.lang.String = concat %20 %22;\n@@ -539,1 +539,1 @@\n-                        %33 : java.lang.String = add %30 %32;\n+                        %33 : java.lang.String = concat %30 %32;\n@@ -552,1 +552,1 @@\n-                        %40 : java.lang.String = add %37 %39;\n+                        %40 : java.lang.String = concat %37 %39;\n@@ -596,1 +596,1 @@\n-                        %15 : java.lang.String = add %12 %14;\n+                        %15 : java.lang.String = concat %12 %14;\n@@ -610,1 +610,1 @@\n-                        %23 : java.lang.String = add %21 %22;\n+                        %23 : java.lang.String = concat %21 %22;\n@@ -624,1 +624,1 @@\n-                        %31 : java.lang.String = add %28 %30;\n+                        %31 : java.lang.String = concat %28 %30;\n@@ -639,1 +639,1 @@\n-                        %40 : java.lang.String = add %37 %39;\n+                        %40 : java.lang.String = concat %37 %39;\n@@ -654,1 +654,1 @@\n-                        %49 : java.lang.String = add %46 %48;\n+                        %49 : java.lang.String = concat %46 %48;\n@@ -669,1 +669,1 @@\n-                        %58 : java.lang.String = add %55 %57;\n+                        %58 : java.lang.String = concat %55 %57;\n@@ -684,1 +684,1 @@\n-                        %67 : java.lang.String = add %64 %66;\n+                        %67 : java.lang.String = concat %64 %66;\n@@ -701,1 +701,1 @@\n-                        %78 : java.lang.String = add %75 %77;\n+                        %78 : java.lang.String = concat %75 %77;\n@@ -716,1 +716,1 @@\n-                        %87 : java.lang.String = add %84 %86;\n+                        %87 : java.lang.String = concat %84 %86;\n@@ -729,1 +729,1 @@\n-                        %94 : java.lang.String = add %91 %93;\n+                        %94 : java.lang.String = concat %91 %93;\n@@ -742,1 +742,1 @@\n-                        %101 : java.lang.String = add %98 %100;\n+                        %101 : java.lang.String = concat %98 %100;\n@@ -755,1 +755,1 @@\n-                        %108 : java.lang.String = add %105 %107;\n+                        %108 : java.lang.String = concat %105 %107;\n@@ -782,1 +782,1 @@\n-                        %120 : java.lang.String = add %117 %119;\n+                        %120 : java.lang.String = concat %117 %119;\n@@ -792,1 +792,1 @@\n-                        %123 : java.lang.String = add %121 %122;\n+                        %123 : java.lang.String = concat %121 %122;\n@@ -825,62 +825,62 @@\n-                %1 : Var<short> = var %0 @\"a\";\n-                %2 : int = constant @\"1\";\n-                %3 : short = conv %2;\n-                %4 : Var<short> = var %3 @\"s\";\n-                %5 : int = constant @\"2\";\n-                %6 : byte = conv %5;\n-                %7 : Var<byte> = var %6 @\"b\";\n-                %8 : java.lang.String = constant @\"\";\n-                %9 : Var<java.lang.String> = var %8 @\"r\";\n-                %10 : short = var.load %1;\n-                java.switch.statement %10\n-                    (%11 : short)boolean -> {\n-                        %12 : short = var.load %4;\n-                        %13 : boolean = eq %11 %12;\n-                        yield %13;\n-                    }\n-                    ()void -> {\n-                        %14 : java.lang.String = var.load %9;\n-                        %15 : java.lang.String = constant @\"one\";\n-                        %16 : java.lang.String = add %14 %15;\n-                        var.store %9 %16;\n-                        yield;\n-                    }\n-                    (%17 : short)boolean -> {\n-                        %18 : byte = var.load %7;\n-                        %19 : short = conv %18;\n-                        %20 : boolean = eq %17 %19;\n-                        yield %20;\n-                    }\n-                    ()void -> {\n-                        %21 : java.lang.String = var.load %9;\n-                        %22 : java.lang.String = constant @\"two\";\n-                        %23 : java.lang.String = add %21 %22;\n-                        var.store %9 %23;\n-                        yield;\n-                    }\n-                    (%24 : short)boolean -> {\n-                        %25 : int = constant @\"3\";\n-                        %26 : short = conv %25;\n-                        %27 : boolean = eq %24 %26;\n-                        yield %27;\n-                    }\n-                    ()void -> {\n-                        %28 : java.lang.String = var.load %9;\n-                        %29 : java.lang.String = constant @\"three\";\n-                        %30 : java.lang.String = add %28 %29;\n-                        var.store %9 %30;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %31 : java.lang.String = var.load %9;\n-                        %32 : java.lang.String = constant @\"else\";\n-                        %33 : java.lang.String = add %31 %32;\n-                        var.store %9 %33;\n-                        yield;\n-                    };\n-                %34 : java.lang.String = var.load %9;\n-                return %34;\n-            };\n+                  %1 : Var<short> = var %0 @\"a\";\n+                  %2 : int = constant @\"1\";\n+                  %3 : short = conv %2;\n+                  %4 : Var<short> = var %3 @\"s\";\n+                  %5 : int = constant @\"2\";\n+                  %6 : byte = conv %5;\n+                  %7 : Var<byte> = var %6 @\"b\";\n+                  %8 : java.lang.String = constant @\"\";\n+                  %9 : Var<java.lang.String> = var %8 @\"r\";\n+                  %10 : short = var.load %1;\n+                  java.switch.statement %10\n+                      (%11 : short)boolean -> {\n+                          %12 : short = var.load %4;\n+                          %13 : boolean = eq %11 %12;\n+                          yield %13;\n+                      }\n+                      ()void -> {\n+                          %14 : java.lang.String = var.load %9;\n+                          %15 : java.lang.String = constant @\"one\";\n+                          %16 : java.lang.String = concat %14 %15;\n+                          var.store %9 %16;\n+                          yield;\n+                      }\n+                      (%17 : short)boolean -> {\n+                          %18 : byte = var.load %7;\n+                          %19 : short = conv %18;\n+                          %20 : boolean = eq %17 %19;\n+                          yield %20;\n+                      }\n+                      ()void -> {\n+                          %21 : java.lang.String = var.load %9;\n+                          %22 : java.lang.String = constant @\"two\";\n+                          %23 : java.lang.String = concat %21 %22;\n+                          var.store %9 %23;\n+                          yield;\n+                      }\n+                      (%24 : short)boolean -> {\n+                          %25 : int = constant @\"3\";\n+                          %26 : short = conv %25;\n+                          %27 : boolean = eq %24 %26;\n+                          yield %27;\n+                      }\n+                      ()void -> {\n+                          %28 : java.lang.String = var.load %9;\n+                          %29 : java.lang.String = constant @\"three\";\n+                          %30 : java.lang.String = concat %28 %29;\n+                          var.store %9 %30;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %31 : java.lang.String = var.load %9;\n+                          %32 : java.lang.String = constant @\"else\";\n+                          %33 : java.lang.String = concat %31 %32;\n+                          var.store %9 %33;\n+                          yield;\n+                      };\n+                  %34 : java.lang.String = var.load %9;\n+                  return %34;\n+              };\n@@ -889,1 +889,1 @@\n-    static String caseConstantConv(short a) { \/\/ @@@ tests should be easy to test with interpreter, e.g. tests returning a string result\n+    static String caseConstantConv(short a) {\n@@ -894,1 +894,0 @@\n-            \/\/ @@@ string concat is modeled as: add s1 s2\n@@ -923,1 +922,1 @@\n-                        %15 : java.lang.String = add %13 %14;\n+                        %15 : java.lang.String = concat %13 %14;\n@@ -936,1 +935,1 @@\n-                        %22 : java.lang.String = add %20 %21;\n+                        %22 : java.lang.String = concat %20 %21;\n@@ -946,1 +945,1 @@\n-                        %25 : java.lang.String = add %23 %24;\n+                        %25 : java.lang.String = concat %23 %24;\n@@ -981,1 +980,1 @@\n-                        %10 : java.lang.String = add %8 %9;\n+                        %10 : java.lang.String = concat %8 %9;\n@@ -994,1 +993,1 @@\n-                        %17 : java.lang.String = add %14 %16;\n+                        %17 : java.lang.String = concat %14 %16;\n@@ -1015,53 +1014,53 @@\n-                %1 : Var<SwitchStatementTest$E> = var %0 @\"e\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : SwitchStatementTest$E = var.load %1;\n-                java.switch.statement %4\n-                    (%5 : SwitchStatementTest$E)boolean -> {\n-                        %6 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n-                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %7;\n-                    }\n-                    ()void -> {\n-                        %8 : java.lang.String = var.load %3;\n-                        %9 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n-                        %10 : java.lang.String = cast %9 @\"java.lang.String\";\n-                        %11 : java.lang.String = add %8 %10;\n-                        var.store %3 %11;\n-                        yield;\n-                    }\n-                    (%12 : SwitchStatementTest$E)boolean -> {\n-                        %13 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n-                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %14;\n-                    }\n-                    ()void -> {\n-                        %15 : java.lang.String = var.load %3;\n-                        %16 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n-                        %17 : java.lang.String = cast %16 @\"java.lang.String\";\n-                        %18 : java.lang.String = add %15 %17;\n-                        var.store %3 %18;\n-                        yield;\n-                    }\n-                    (%19 : SwitchStatementTest$E)boolean -> {\n-                        %20 : java.lang.Object = constant @null;\n-                        %21 : boolean = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %21;\n-                    }\n-                    ()void -> {\n-                        %22 : java.lang.String = var.load %3;\n-                        %23 : java.lang.String = constant @\"null\";\n-                        %24 : java.lang.String = add %22 %23;\n-                        var.store %3 %24;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %25 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n-                        throw %25;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<SwitchStatementTest$E> = var %0 @\"e\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : SwitchStatementTest$E = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : SwitchStatementTest$E)boolean -> {\n+                          %6 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n+                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          %8 : java.lang.String = var.load %3;\n+                          %9 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n+                          %10 : java.lang.String = cast %9 @\"java.lang.String\";\n+                          %11 : java.lang.String = concat %8 %10;\n+                          var.store %3 %11;\n+                          yield;\n+                      }\n+                      (%12 : SwitchStatementTest$E)boolean -> {\n+                          %13 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n+                          %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %14;\n+                      }\n+                      ()void -> {\n+                          %15 : java.lang.String = var.load %3;\n+                          %16 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n+                          %17 : java.lang.String = cast %16 @\"java.lang.String\";\n+                          %18 : java.lang.String = concat %15 %17;\n+                          var.store %3 %18;\n+                          yield;\n+                      }\n+                      (%19 : SwitchStatementTest$E)boolean -> {\n+                          %20 : java.lang.Object = constant @null;\n+                          %21 : boolean = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %21;\n+                      }\n+                      ()void -> {\n+                          %22 : java.lang.String = var.load %3;\n+                          %23 : java.lang.String = constant @\"null\";\n+                          %24 : java.lang.String = concat %22 %23;\n+                          var.store %3 %24;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %25 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n+                          throw %25;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -1109,1 +1108,1 @@\n-                        %15 : java.lang.String = add %13 %14;\n+                        %15 : java.lang.String = concat %13 %14;\n@@ -1128,1 +1127,1 @@\n-                        %22 : java.lang.String = add %20 %21;\n+                        %22 : java.lang.String = concat %20 %21;\n@@ -1170,1 +1169,1 @@\n-                        %12 : java.lang.String = add %10 %11;\n+                        %12 : java.lang.String = concat %10 %11;\n@@ -1189,1 +1188,1 @@\n-                        %19 : java.lang.String = add %17 %18;\n+                        %19 : java.lang.String = concat %17 %18;\n@@ -1209,60 +1208,60 @@\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Integer = constant @null;\n-                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                %7 : java.lang.String = constant @null;\n-                %8 : Var<java.lang.String> = var %7 @\"s\";\n-                java.switch.statement %4\n-                    (%9 : java.lang.Object)boolean -> {\n-                        %10 : boolean = pattern.match %9\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n-                                yield %11;\n-                            }\n-                            (%12 : java.lang.Integer)void -> {\n-                                var.store %6 %12;\n-                                yield;\n-                            };\n-                        yield %10;\n-                    }\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %3;\n-                        %14 : java.lang.String = constant @\"integer\";\n-                        %15 : java.lang.String = add %13 %14;\n-                        var.store %3 %15;\n-                        yield;\n-                    }\n-                    (%16 : java.lang.Object)boolean -> {\n-                        %17 : boolean = pattern.match %16\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n-                                yield %18;\n-                            }\n-                            (%19 : java.lang.String)void -> {\n-                                var.store %8 %19;\n-                                yield;\n-                            };\n-                        yield %17;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"string\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Object = var.load %1;\n+                  %5 : java.lang.Integer = constant @null;\n+                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                  %7 : java.lang.String = constant @null;\n+                  %8 : Var<java.lang.String> = var %7 @\"s\";\n+                  java.switch.statement %4\n+                      (%9 : java.lang.Object)boolean -> {\n+                          %10 : boolean = pattern.match %9\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  yield %11;\n+                              }\n+                              (%12 : java.lang.Integer)void -> {\n+                                  var.store %6 %12;\n+                                  yield;\n+                              };\n+                          yield %10;\n+                      }\n+                      ()void -> {\n+                          %13 : java.lang.String = var.load %3;\n+                          %14 : java.lang.String = constant @\"integer\";\n+                          %15 : java.lang.String = concat %13 %14;\n+                          var.store %3 %15;\n+                          yield;\n+                      }\n+                      (%16 : java.lang.Object)boolean -> {\n+                          %17 : boolean = pattern.match %16\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  yield %18;\n+                              }\n+                              (%19 : java.lang.String)void -> {\n+                                  var.store %8 %19;\n+                                  yield;\n+                              };\n+                          yield %17;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"string\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -1283,60 +1282,60 @@\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Integer = constant @null;\n-                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                %7 : java.lang.String = constant @null;\n-                %8 : Var<java.lang.String> = var %7 @\"s\";\n-                java.switch.statement %4\n-                    (%9 : java.lang.Object)boolean -> {\n-                        %10 : boolean = pattern.match %9\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n-                                yield %11;\n-                            }\n-                            (%12 : java.lang.Integer)void -> {\n-                                var.store %6 %12;\n-                                yield;\n-                            };\n-                        yield %10;\n-                    }\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %3;\n-                        %14 : java.lang.String = constant @\"integer\";\n-                        %15 : java.lang.String = add %13 %14;\n-                        var.store %3 %15;\n-                        yield;\n-                    }\n-                    (%16 : java.lang.Object)boolean -> {\n-                        %17 : boolean = pattern.match %16\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n-                                yield %18;\n-                            }\n-                            (%19 : java.lang.String)void -> {\n-                                var.store %8 %19;\n-                                yield;\n-                            };\n-                        yield %17;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"string\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Object = var.load %1;\n+                  %5 : java.lang.Integer = constant @null;\n+                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                  %7 : java.lang.String = constant @null;\n+                  %8 : Var<java.lang.String> = var %7 @\"s\";\n+                  java.switch.statement %4\n+                      (%9 : java.lang.Object)boolean -> {\n+                          %10 : boolean = pattern.match %9\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  yield %11;\n+                              }\n+                              (%12 : java.lang.Integer)void -> {\n+                                  var.store %6 %12;\n+                                  yield;\n+                              };\n+                          yield %10;\n+                      }\n+                      ()void -> {\n+                          %13 : java.lang.String = var.load %3;\n+                          %14 : java.lang.String = constant @\"integer\";\n+                          %15 : java.lang.String = concat %13 %14;\n+                          var.store %3 %15;\n+                          yield;\n+                      }\n+                      (%16 : java.lang.Object)boolean -> {\n+                          %17 : boolean = pattern.match %16\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  yield %18;\n+                              }\n+                              (%19 : java.lang.String)void -> {\n+                                  var.store %8 %19;\n+                                  yield;\n+                              };\n+                          yield %17;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"string\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -1363,60 +1362,60 @@\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Integer = constant @null;\n-                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                %7 : java.lang.String = constant @null;\n-                %8 : Var<java.lang.String> = var %7 @\"s\";\n-                java.switch.statement %4\n-                    (%9 : java.lang.Object)boolean -> {\n-                        %10 : boolean = pattern.match %9\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n-                                yield %11;\n-                            }\n-                            (%12 : java.lang.Integer)void -> {\n-                                var.store %6 %12;\n-                                yield;\n-                            };\n-                        yield %10;\n-                    }\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %3;\n-                        %14 : java.lang.String = constant @\"integer\";\n-                        %15 : java.lang.String = add %13 %14;\n-                        var.store %3 %15;\n-                        java.break;\n-                    }\n-                    (%16 : java.lang.Object)boolean -> {\n-                        %17 : boolean = pattern.match %16\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n-                                yield %18;\n-                            }\n-                            (%19 : java.lang.String)void -> {\n-                                var.store %8 %19;\n-                                yield;\n-                            };\n-                        yield %17;\n-                    }\n-                    ()void -> {\n-                        %20 : java.lang.String = var.load %3;\n-                        %21 : java.lang.String = constant @\"string\";\n-                        %22 : java.lang.String = add %20 %21;\n-                        var.store %3 %22;\n-                        java.break;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %23 : java.lang.String = var.load %3;\n-                        %24 : java.lang.String = constant @\"else\";\n-                        %25 : java.lang.String = add %23 %24;\n-                        var.store %3 %25;\n-                        yield;\n-                    };\n-                %26 : java.lang.String = var.load %3;\n-                return %26;\n-            };\n+                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Object = var.load %1;\n+                  %5 : java.lang.Integer = constant @null;\n+                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                  %7 : java.lang.String = constant @null;\n+                  %8 : Var<java.lang.String> = var %7 @\"s\";\n+                  java.switch.statement %4\n+                      (%9 : java.lang.Object)boolean -> {\n+                          %10 : boolean = pattern.match %9\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  yield %11;\n+                              }\n+                              (%12 : java.lang.Integer)void -> {\n+                                  var.store %6 %12;\n+                                  yield;\n+                              };\n+                          yield %10;\n+                      }\n+                      ()void -> {\n+                          %13 : java.lang.String = var.load %3;\n+                          %14 : java.lang.String = constant @\"integer\";\n+                          %15 : java.lang.String = concat %13 %14;\n+                          var.store %3 %15;\n+                          java.break;\n+                      }\n+                      (%16 : java.lang.Object)boolean -> {\n+                          %17 : boolean = pattern.match %16\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  yield %18;\n+                              }\n+                              (%19 : java.lang.String)void -> {\n+                                  var.store %8 %19;\n+                                  yield;\n+                              };\n+                          yield %17;\n+                      }\n+                      ()void -> {\n+                          %20 : java.lang.String = var.load %3;\n+                          %21 : java.lang.String = constant @\"string\";\n+                          %22 : java.lang.String = concat %20 %21;\n+                          var.store %3 %22;\n+                          java.break;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %23 : java.lang.String = var.load %3;\n+                          %24 : java.lang.String = constant @\"else\";\n+                          %25 : java.lang.String = concat %23 %24;\n+                          var.store %3 %25;\n+                          yield;\n+                      };\n+                  %26 : java.lang.String = var.load %3;\n+                  return %26;\n+              };\n@@ -1482,1 +1481,1 @@\n-                        %20 : java.lang.String = add %18 %19;\n+                        %20 : java.lang.String = concat %18 %19;\n@@ -1494,1 +1493,1 @@\n-                        %25 : java.lang.String = add %21 %24;\n+                        %25 : java.lang.String = concat %21 %24;\n@@ -1526,95 +1525,95 @@\n-                %1 : Var<java.lang.Integer> = var %0 @\"a\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Integer = var.load %1;\n-                %5 : java.lang.Integer = constant @null;\n-                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n-                %7 : java.lang.Integer = constant @null;\n-                %8 : Var<java.lang.Integer> = var %7 @\"i\";\n-                java.switch.statement %4\n-                    (%9 : java.lang.Integer)boolean -> {\n-                        %10 : int = constant @\"42\";\n-                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %12;\n-                    }\n-                    ()void -> {\n-                        %13 : java.lang.String = var.load %3;\n-                        %14 : java.lang.String = constant @\"forty two\";\n-                        %15 : java.lang.String = add %13 %14;\n-                        var.store %3 %15;\n-                        yield;\n-                    }\n-                    (%16 : java.lang.Integer)boolean -> {\n-                        %17 : boolean = java.cand\n-                            ()boolean -> {\n-                                %18 : boolean = pattern.match %16\n-                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n-                                        yield %19;\n-                                    }\n-                                    (%20 : java.lang.Integer)void -> {\n-                                        var.store %6 %20;\n-                                        yield;\n-                                    };\n-                                yield %18;\n-                            }\n-                            ()boolean -> {\n-                                %21 : java.lang.Integer = var.load %6;\n-                                %22 : int = invoke %21 @\"java.lang.Integer::intValue()int\";\n-                                %23 : int = constant @\"0\";\n-                                %24 : boolean = gt %22 %23;\n-                                yield %24;\n-                            };\n-                        yield %17;\n-                    }\n-                    ()void -> {\n-                        %25 : java.lang.String = var.load %3;\n-                        %26 : java.lang.String = constant @\"positive int\";\n-                        %27 : java.lang.String = add %25 %26;\n-                        var.store %3 %27;\n-                        yield;\n-                    }\n-                    (%28 : java.lang.Integer)boolean -> {\n-                        %29 : boolean = java.cand\n-                            ()boolean -> {\n-                                %30 : boolean = pattern.match %28\n-                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                        %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n-                                        yield %31;\n-                                    }\n-                                    (%32 : java.lang.Integer)void -> {\n-                                        var.store %8 %32;\n-                                        yield;\n-                                    };\n-                                yield %30;\n-                            }\n-                            ()boolean -> {\n-                                %33 : java.lang.Integer = var.load %8;\n-                                %34 : int = invoke %33 @\"java.lang.Integer::intValue()int\";\n-                                %35 : int = constant @\"0\";\n-                                %36 : boolean = lt %34 %35;\n-                                yield %36;\n-                            };\n-                        yield %29;\n-                    }\n-                    ()void -> {\n-                        %37 : java.lang.String = var.load %3;\n-                        %38 : java.lang.String = constant @\"negative int\";\n-                        %39 : java.lang.String = add %37 %38;\n-                        var.store %3 %39;\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %40 : java.lang.String = var.load %3;\n-                        %41 : java.lang.String = constant @\"zero\";\n-                        %42 : java.lang.String = add %40 %41;\n-                        var.store %3 %42;\n-                        yield;\n-                    };\n-                %43 : java.lang.String = var.load %3;\n-                return %43;\n-            };\n+                  %1 : Var<java.lang.Integer> = var %0 @\"a\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Integer = var.load %1;\n+                  %5 : java.lang.Integer = constant @null;\n+                  %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                  %7 : java.lang.Integer = constant @null;\n+                  %8 : Var<java.lang.Integer> = var %7 @\"i\";\n+                  java.switch.statement %4\n+                      (%9 : java.lang.Integer)boolean -> {\n+                          %10 : int = constant @\"42\";\n+                          %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                          %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %12;\n+                      }\n+                      ()void -> {\n+                          %13 : java.lang.String = var.load %3;\n+                          %14 : java.lang.String = constant @\"forty two\";\n+                          %15 : java.lang.String = concat %13 %14;\n+                          var.store %3 %15;\n+                          yield;\n+                      }\n+                      (%16 : java.lang.Integer)boolean -> {\n+                          %17 : boolean = java.cand\n+                              ()boolean -> {\n+                                  %18 : boolean = pattern.match %16\n+                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                          %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                          yield %19;\n+                                      }\n+                                      (%20 : java.lang.Integer)void -> {\n+                                          var.store %6 %20;\n+                                          yield;\n+                                      };\n+                                  yield %18;\n+                              }\n+                              ()boolean -> {\n+                                  %21 : java.lang.Integer = var.load %6;\n+                                  %22 : int = invoke %21 @\"java.lang.Integer::intValue()int\";\n+                                  %23 : int = constant @\"0\";\n+                                  %24 : boolean = gt %22 %23;\n+                                  yield %24;\n+                              };\n+                          yield %17;\n+                      }\n+                      ()void -> {\n+                          %25 : java.lang.String = var.load %3;\n+                          %26 : java.lang.String = constant @\"positive int\";\n+                          %27 : java.lang.String = concat %25 %26;\n+                          var.store %3 %27;\n+                          yield;\n+                      }\n+                      (%28 : java.lang.Integer)boolean -> {\n+                          %29 : boolean = java.cand\n+                              ()boolean -> {\n+                                  %30 : boolean = pattern.match %28\n+                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                          %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                          yield %31;\n+                                      }\n+                                      (%32 : java.lang.Integer)void -> {\n+                                          var.store %8 %32;\n+                                          yield;\n+                                      };\n+                                  yield %30;\n+                              }\n+                              ()boolean -> {\n+                                  %33 : java.lang.Integer = var.load %8;\n+                                  %34 : int = invoke %33 @\"java.lang.Integer::intValue()int\";\n+                                  %35 : int = constant @\"0\";\n+                                  %36 : boolean = lt %34 %35;\n+                                  yield %36;\n+                              };\n+                          yield %29;\n+                      }\n+                      ()void -> {\n+                          %37 : java.lang.String = var.load %3;\n+                          %38 : java.lang.String = constant @\"negative int\";\n+                          %39 : java.lang.String = concat %37 %38;\n+                          var.store %3 %39;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %40 : java.lang.String = var.load %3;\n+                          %41 : java.lang.String = constant @\"zero\";\n+                          %42 : java.lang.String = concat %40 %41;\n+                          var.store %3 %42;\n+                          yield;\n+                      };\n+                  %43 : java.lang.String = var.load %3;\n+                  return %43;\n+              };\n@@ -1669,1 +1668,1 @@\n-                        %23 : java.lang.String = add %21 %22;\n+                        %23 : java.lang.String = concat %21 %22;\n@@ -1688,1 +1687,1 @@\n-                        %30 : java.lang.String = add %28 %29;\n+                        %30 : java.lang.String = concat %28 %29;\n@@ -1707,1 +1706,1 @@\n-                        %37 : java.lang.String = add %35 %36;\n+                        %37 : java.lang.String = concat %35 %36;\n@@ -1726,1 +1725,1 @@\n-                        %44 : java.lang.String = add %42 %43;\n+                        %44 : java.lang.String = concat %42 %43;\n@@ -1745,1 +1744,1 @@\n-                        %51 : java.lang.String = add %49 %50;\n+                        %51 : java.lang.String = concat %49 %50;\n@@ -1764,1 +1763,1 @@\n-                        %58 : java.lang.String = add %56 %57;\n+                        %58 : java.lang.String = concat %56 %57;\n@@ -1774,1 +1773,1 @@\n-                        %61 : java.lang.String = add %59 %60;\n+                        %61 : java.lang.String = concat %59 %60;\n@@ -1823,1 +1822,1 @@\n-                        %14 : java.lang.String = add %12 %13;\n+                        %14 : java.lang.String = concat %12 %13;\n@@ -1833,1 +1832,1 @@\n-                        %17 : java.lang.String = add %15 %16;\n+                        %17 : java.lang.String = concat %15 %16;\n@@ -1892,1 +1891,1 @@\n-                        %24 : java.lang.String = add %18 %23;\n+                        %24 : java.lang.String = concat %18 %23;\n@@ -1923,1 +1922,1 @@\n-                        %37 : java.lang.String = add %35 %36;\n+                        %37 : java.lang.String = concat %35 %36;\n@@ -1933,1 +1932,1 @@\n-                        %40 : java.lang.String = add %38 %39;\n+                        %40 : java.lang.String = concat %38 %39;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":666,"deletions":667,"binary":false,"changes":1333,"status":"modified"}]}