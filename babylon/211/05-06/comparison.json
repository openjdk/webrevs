{"files":[{"patch":"@@ -2,0 +2,3 @@\n+import java.util.Collection;\n+import java.util.RandomAccess;\n+import java.util.Stack;\n@@ -1192,0 +1195,745 @@\n+\n+    @IR(\"\"\"\n+            func @\"casePatternRuleExpression\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.Integer = constant @null;\n+                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                %7 : java.lang.String = constant @null;\n+                %8 : Var<java.lang.String> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Object)boolean -> {\n+                        %10 : boolean = pattern.match %9\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.lang.Integer)void -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : java.lang.String = constant @\"integer\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.lang.Object)boolean -> {\n+                        %17 : boolean = pattern.match %16\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.lang.String)void -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()void -> {\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"string\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n+                        yield;\n+                    };\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String casePatternRuleExpression(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case Integer i -> r += \"integer\";\n+            case String s -> r+= \"string\";\n+            default -> r+= \"else\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"casePatternRuleBlock\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.Integer = constant @null;\n+                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                %7 : java.lang.String = constant @null;\n+                %8 : Var<java.lang.String> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Object)boolean -> {\n+                        %10 : boolean = pattern.match %9\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.lang.Integer)void -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : java.lang.String = constant @\"integer\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.lang.Object)boolean -> {\n+                        %17 : boolean = pattern.match %16\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.lang.String)void -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()void -> {\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"string\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n+                        yield;\n+                    };\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String casePatternRuleBlock(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case Integer i -> {\n+                r += \"integer\";\n+            }\n+            case String s -> {\n+                r += \"string\";\n+            }\n+            default -> {\n+                r += \"else\";\n+            }\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"casePatternStatement\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.Integer = constant @null;\n+                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                %7 : java.lang.String = constant @null;\n+                %8 : Var<java.lang.String> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Object)boolean -> {\n+                        %10 : boolean = pattern.match %9\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.lang.Integer)void -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : java.lang.String = constant @\"integer\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %3 %15;\n+                        java.break;\n+                    }\n+                    (%16 : java.lang.Object)boolean -> {\n+                        %17 : boolean = pattern.match %16\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                yield %18;\n+                            }\n+                            (%19 : java.lang.String)void -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()void -> {\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"string\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n+                        java.break;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n+                        yield;\n+                    };\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String casePatternStatement(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case Integer i:\n+                r += \"integer\";\n+                break;\n+            case String s:\n+                r += \"string\";\n+                break;\n+            default:\n+                r += \"else\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"casePatternThrow\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.Number = constant @null;\n+                %6 : Var<java.lang.Number> = var %5 @\"n\";\n+                %7 : java.lang.String = constant @null;\n+                %8 : Var<java.lang.String> = var %7 @\"s\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Object)boolean -> {\n+                        %10 : boolean = pattern.match %9\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                yield %11;\n+                            }\n+                            (%12 : java.lang.Number)void -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.IllegalArgumentException = new @\"func<java.lang.IllegalArgumentException>\";\n+                        throw %13;\n+                    }\n+                    (%14 : java.lang.Object)boolean -> {\n+                        %15 : boolean = pattern.match %14\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                yield %16;\n+                            }\n+                            (%17 : java.lang.String)void -> {\n+                                var.store %8 %17;\n+                                yield;\n+                            };\n+                        yield %15;\n+                    }\n+                    ()void -> {\n+                        %18 : java.lang.String = var.load %3;\n+                        %19 : java.lang.String = constant @\"a string\";\n+                        %20 : java.lang.String = add %18 %19;\n+                        var.store %3 %20;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %21 : java.lang.String = var.load %3;\n+                        %22 : java.lang.Object = var.load %1;\n+                        %23 : java.lang.Class<+<java.lang.Object>> = invoke %22 @\"java.lang.Object::getClass()java.lang.Class\";\n+                        %24 : java.lang.String = invoke %23 @\"java.lang.Class::getName()java.lang.String\";\n+                        %25 : java.lang.String = add %21 %24;\n+                        var.store %3 %25;\n+                        yield;\n+                    };\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String casePatternThrow(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case Number n -> throw new IllegalArgumentException();\n+            case String s -> r += \"a string\";\n+            default -> r += o.getClass().getName();\n+        }\n+        return r;\n+    }\n+\n+    \/\/ @@@ code model for such as code is not supported\n+\/\/    @CodeReflection\n+    private static String casePatternMultiLabel(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case Integer _, Long _, Character _, Byte _, Short _-> r += \"integral type\";\n+            default -> r += \"non integral type\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"casePatternWithCaseConstant\" (%0 : java.lang.Integer)java.lang.String -> {\n+                %1 : Var<java.lang.Integer> = var %0 @\"a\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Integer = var.load %1;\n+                %5 : java.lang.Integer = constant @null;\n+                %6 : Var<java.lang.Integer> = var %5 @\"i\";\n+                %7 : java.lang.Integer = constant @null;\n+                %8 : Var<java.lang.Integer> = var %7 @\"i\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Integer)boolean -> {\n+                        %10 : int = constant @\"42\";\n+                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %12;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : java.lang.String = constant @\"forty two\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.lang.Integer)boolean -> {\n+                        %17 : boolean = java.cand\n+                            ()boolean -> {\n+                                %18 : boolean = pattern.match %16\n+                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                        yield %19;\n+                                    }\n+                                    (%20 : java.lang.Integer)void -> {\n+                                        var.store %6 %20;\n+                                        yield;\n+                                    };\n+                                yield %18;\n+                            }\n+                            ()boolean -> {\n+                                %21 : java.lang.Integer = var.load %6;\n+                                %22 : int = invoke %21 @\"java.lang.Integer::intValue()int\";\n+                                %23 : int = constant @\"0\";\n+                                %24 : boolean = gt %22 %23;\n+                                yield %24;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()void -> {\n+                        %25 : java.lang.String = var.load %3;\n+                        %26 : java.lang.String = constant @\"positive int\";\n+                        %27 : java.lang.String = add %25 %26;\n+                        var.store %3 %27;\n+                        yield;\n+                    }\n+                    (%28 : java.lang.Integer)boolean -> {\n+                        %29 : boolean = java.cand\n+                            ()boolean -> {\n+                                %30 : boolean = pattern.match %28\n+                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n+                                        %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                        yield %31;\n+                                    }\n+                                    (%32 : java.lang.Integer)void -> {\n+                                        var.store %8 %32;\n+                                        yield;\n+                                    };\n+                                yield %30;\n+                            }\n+                            ()boolean -> {\n+                                %33 : java.lang.Integer = var.load %8;\n+                                %34 : int = invoke %33 @\"java.lang.Integer::intValue()int\";\n+                                %35 : int = constant @\"0\";\n+                                %36 : boolean = lt %34 %35;\n+                                yield %36;\n+                            };\n+                        yield %29;\n+                    }\n+                    ()void -> {\n+                        %37 : java.lang.String = var.load %3;\n+                        %38 : java.lang.String = constant @\"negative int\";\n+                        %39 : java.lang.String = add %37 %38;\n+                        var.store %3 %39;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %40 : java.lang.String = var.load %3;\n+                        %41 : java.lang.String = constant @\"zero\";\n+                        %42 : java.lang.String = add %40 %41;\n+                        var.store %3 %42;\n+                        yield;\n+                    };\n+                %43 : java.lang.String = var.load %3;\n+                return %43;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String casePatternWithCaseConstant(Integer a) {\n+        String r = \"\";\n+        switch (a) {\n+            case 42 -> r += \"forty two\";\n+            \/\/ @@@ case int will not match, because of the way InstanceOfOp is interpreted\n+            case Integer i when i > 0 -> r += \"positive int\";\n+            case Integer i when i < 0 -> r += \"negative int\";\n+            default -> r += \"zero\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseTypePattern\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.String = constant @null;\n+                %6 : Var<java.lang.String> = var %5 @\"\";\n+                %7 : java.util.RandomAccess = constant @null;\n+                %8 : Var<java.util.RandomAccess> = var %7 @\"\";\n+                %9 : int[] = constant @null;\n+                %10 : Var<int[]> = var %9 @\"\";\n+                %11 : java.util.Stack[][] = constant @null;\n+                %12 : Var<java.util.Stack[][]> = var %11 @\"\";\n+                %13 : java.util.Collection[][][] = constant @null;\n+                %14 : Var<java.util.Collection[][][]> = var %13 @\"\";\n+                %15 : java.lang.Number = constant @null;\n+                %16 : Var<java.lang.Number> = var %15 @\"n\";\n+                java.switch.statement %4\n+                    (%17 : java.lang.Object)boolean -> {\n+                        %18 : boolean = pattern.match %17\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"\";\n+                                yield %19;\n+                            }\n+                            (%20 : java.lang.String)void -> {\n+                                var.store %6 %20;\n+                                yield;\n+                            };\n+                        yield %18;\n+                    }\n+                    ()void -> {\n+                        %21 : java.lang.String = var.load %3;\n+                        %22 : java.lang.String = constant @\"String\";\n+                        %23 : java.lang.String = add %21 %22;\n+                        var.store %3 %23;\n+                        yield;\n+                    }\n+                    (%24 : java.lang.Object)boolean -> {\n+                        %25 : boolean = pattern.match %24\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> -> {\n+                                %26 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"\";\n+                                yield %26;\n+                            }\n+                            (%27 : java.util.RandomAccess)void -> {\n+                                var.store %8 %27;\n+                                yield;\n+                            };\n+                        yield %25;\n+                    }\n+                    ()void -> {\n+                        %28 : java.lang.String = var.load %3;\n+                        %29 : java.lang.String = constant @\"RandomAccess\";\n+                        %30 : java.lang.String = add %28 %29;\n+                        var.store %3 %30;\n+                        yield;\n+                    }\n+                    (%31 : java.lang.Object)boolean -> {\n+                        %32 : boolean = pattern.match %31\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> -> {\n+                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"\";\n+                                yield %33;\n+                            }\n+                            (%34 : int[])void -> {\n+                                var.store %10 %34;\n+                                yield;\n+                            };\n+                        yield %32;\n+                    }\n+                    ()void -> {\n+                        %35 : java.lang.String = var.load %3;\n+                        %36 : java.lang.String = constant @\"int[]\";\n+                        %37 : java.lang.String = add %35 %36;\n+                        var.store %3 %37;\n+                        yield;\n+                    }\n+                    (%38 : java.lang.Object)boolean -> {\n+                        %39 : boolean = pattern.match %38\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> -> {\n+                                %40 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"\";\n+                                yield %40;\n+                            }\n+                            (%41 : java.util.Stack[][])void -> {\n+                                var.store %12 %41;\n+                                yield;\n+                            };\n+                        yield %39;\n+                    }\n+                    ()void -> {\n+                        %42 : java.lang.String = var.load %3;\n+                        %43 : java.lang.String = constant @\"Stack[][]\";\n+                        %44 : java.lang.String = add %42 %43;\n+                        var.store %3 %44;\n+                        yield;\n+                    }\n+                    (%45 : java.lang.Object)boolean -> {\n+                        %46 : boolean = pattern.match %45\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> -> {\n+                                %47 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"\";\n+                                yield %47;\n+                            }\n+                            (%48 : java.util.Collection[][][])void -> {\n+                                var.store %14 %48;\n+                                yield;\n+                            };\n+                        yield %46;\n+                    }\n+                    ()void -> {\n+                        %49 : java.lang.String = var.load %3;\n+                        %50 : java.lang.String = constant @\"Collection[][][]\";\n+                        %51 : java.lang.String = add %49 %50;\n+                        var.store %3 %51;\n+                        yield;\n+                    }\n+                    (%52 : java.lang.Object)boolean -> {\n+                        %53 : boolean = pattern.match %52\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n+                                %54 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                yield %54;\n+                            }\n+                            (%55 : java.lang.Number)void -> {\n+                                var.store %16 %55;\n+                                yield;\n+                            };\n+                        yield %53;\n+                    }\n+                    ()void -> {\n+                        %56 : java.lang.String = var.load %3;\n+                        %57 : java.lang.String = constant @\"Number\";\n+                        %58 : java.lang.String = add %56 %57;\n+                        var.store %3 %58;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %59 : java.lang.String = var.load %3;\n+                        %60 : java.lang.String = constant @\"something else\";\n+                        %61 : java.lang.String = add %59 %60;\n+                        var.store %3 %61;\n+                        yield;\n+                    };\n+                %62 : java.lang.String = var.load %3;\n+                return %62;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String caseTypePattern(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case String _ -> r+= \"String\"; \/\/ class\n+            case RandomAccess _ -> r+= \"RandomAccess\"; \/\/ interface\n+            case int[] _ -> r+= \"int[]\"; \/\/ array primitive\n+            case Stack[][] _ -> r+= \"Stack[][]\"; \/\/ array class\n+            case Collection[][][] _ -> r+= \"Collection[][][]\"; \/\/ array interface\n+            case final Number n -> r+= \"Number\"; \/\/ final modifier\n+            default -> r+= \"something else\";\n+        }\n+        return r;\n+    }\n+\n+    record R(Number n) {}\n+    @IR(\"\"\"\n+            func @\"caseRecordPattern\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.Number = constant @null;\n+                %6 : Var<java.lang.Number> = var %5 @\"n\";\n+                java.switch.statement %4\n+                    (%7 : java.lang.Object)boolean -> {\n+                        %8 : boolean = pattern.match %7\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchStatementTest$R> -> {\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchStatementTest$R> = pattern.record %9 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                                yield %10;\n+                            }\n+                            (%11 : java.lang.Number)void -> {\n+                                var.store %6 %11;\n+                                yield;\n+                            };\n+                        yield %8;\n+                    }\n+                    ()void -> {\n+                        %12 : java.lang.String = var.load %3;\n+                        %13 : java.lang.String = constant @\"R(_)\";\n+                        %14 : java.lang.String = add %12 %13;\n+                        var.store %3 %14;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %15 : java.lang.String = var.load %3;\n+                        %16 : java.lang.String = constant @\"else\";\n+                        %17 : java.lang.String = add %15 %16;\n+                        var.store %3 %17;\n+                        yield;\n+                    };\n+                %18 : java.lang.String = var.load %3;\n+                return %18;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String caseRecordPattern(Object o) {\n+        String r = \"\";\n+        switch (o) {\n+            case R(Number n) -> r += \"R(_)\";\n+            default -> r+= \"else\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"casePatternGuard\" (%0 : java.lang.Object)java.lang.String -> {\n+                %1 : Var<java.lang.Object> = var %0 @\"obj\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Object = var.load %1;\n+                %5 : java.lang.String = constant @null;\n+                %6 : Var<java.lang.String> = var %5 @\"s\";\n+                %7 : java.lang.Number = constant @null;\n+                %8 : Var<java.lang.Number> = var %7 @\"n\";\n+                java.switch.statement %4\n+                    (%9 : java.lang.Object)boolean -> {\n+                        %10 : boolean = java.cand\n+                            ()boolean -> {\n+                                %11 : boolean = pattern.match %9\n+                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                        %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                        yield %12;\n+                                    }\n+                                    (%13 : java.lang.String)void -> {\n+                                        var.store %6 %13;\n+                                        yield;\n+                                    };\n+                                yield %11;\n+                            }\n+                            ()boolean -> {\n+                                %14 : java.lang.String = var.load %6;\n+                                %15 : int = invoke %14 @\"java.lang.String::length()int\";\n+                                %16 : int = constant @\"3\";\n+                                %17 : boolean = gt %15 %16;\n+                                yield %17;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %18 : java.lang.String = var.load %3;\n+                        %19 : java.lang.String = constant @\"str with length > %d\";\n+                        %20 : java.lang.String = var.load %6;\n+                        %21 : int = invoke %20 @\"java.lang.String::length()int\";\n+                        %22 : java.lang.Integer = invoke %21 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %23 : java.lang.String = invoke %19 %22 @\"java.lang.String::formatted(java.lang.Object[])java.lang.String\";\n+                        %24 : java.lang.String = add %18 %23;\n+                        var.store %3 %24;\n+                        yield;\n+                    }\n+                    (%25 : java.lang.Object)boolean -> {\n+                        %26 : boolean = java.cand\n+                            ()boolean -> {\n+                                %27 : boolean = pattern.match %25\n+                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchStatementTest$R> -> {\n+                                        %28 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Record<SwitchStatementTest$R> = pattern.record %28 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                                        yield %29;\n+                                    }\n+                                    (%30 : java.lang.Number)void -> {\n+                                        var.store %8 %30;\n+                                        yield;\n+                                    };\n+                                yield %27;\n+                            }\n+                            ()boolean -> {\n+                                %31 : java.lang.Number = var.load %8;\n+                                %32 : java.lang.Class<+<java.lang.Object>> = invoke %31 @\"java.lang.Object::getClass()java.lang.Class\";\n+                                %33 : java.lang.Class = constant @\"java.lang.Double\";\n+                                %34 : boolean = invoke %32 %33 @\"java.lang.Object::equals(java.lang.Object)boolean\";\n+                                yield %34;\n+                            };\n+                        yield %26;\n+                    }\n+                    ()void -> {\n+                        %35 : java.lang.String = var.load %3;\n+                        %36 : java.lang.String = constant @\"R(Double)\";\n+                        %37 : java.lang.String = add %35 %36;\n+                        var.store %3 %37;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %38 : java.lang.String = var.load %3;\n+                        %39 : java.lang.String = constant @\"else\";\n+                        %40 : java.lang.String = add %38 %39;\n+                        var.store %3 %40;\n+                        yield;\n+                    };\n+                %41 : java.lang.String = var.load %3;\n+                return %41;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String casePatternGuard(Object obj) {\n+        String r = \"\";\n+        switch (obj) {\n+            case String s when s.length() > 3 -> r += \"str with length > %d\".formatted(s.length());\n+            case R(Number n) when n.getClass().equals(Double.class) -> r += \"R(Double)\";\n+            default -> r += \"else\";\n+        }\n+        return r;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":748,"deletions":0,"binary":false,"changes":748,"status":"modified"}]}