{"files":[{"patch":"@@ -7,0 +7,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -132,0 +133,99 @@\n+    @Test\n+    void testCaseConstantNullLabel() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantNullLabel\");\n+        String[] args = {null, \"non null\"};\n+        for (String arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), caseConstantNullLabel(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    private static String caseConstantNullLabel(String s) {\n+        String r = \"\";\n+        switch (s) {\n+            case null -> r += \"null\";\n+            default -> r += \"non null\";\n+        }\n+        return r;\n+    }\n+\n+    @Test\n+    void testCaseConstantFallThrough() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantFallThrough\");\n+        char[] args = {'A', 'B', 'C'};\n+        for (char arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), caseConstantFallThrough(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    private static String caseConstantFallThrough(char c) {\n+        String r = \"\";\n+        switch (c) {\n+            case 'A':\n+            case 'B':\n+                r += \"A or B\";\n+                break;\n+            default:\n+                r += \"Neither A nor B\";\n+        }\n+        return r;\n+    }\n+\n+    @Test\n+    void testCaseConstantEnum() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantEnum\");\n+        for (Day day : Day.values()) {\n+            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, day), caseConstantEnum(day));\n+        }\n+    }\n+\n+    enum Day {\n+        MON, TUE, WED, THU, FRI, SAT, SUN\n+    }\n+    @CodeReflection\n+    private static String caseConstantEnum(Day d) {\n+        String r = \"\";\n+        switch (d) {\n+            case MON, FRI, SUN -> r += 6;\n+            case TUE -> r += 7;\n+            case THU, SAT -> r += 8;\n+            case WED -> r += 9;\n+        }\n+        return r;\n+    }\n+\n+    @Test\n+    void testCaseConstantOtherKindsOfExpr() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantOtherKindsOfExpr\");\n+        for (int i = 0; i < 14; i++) {\n+            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lmodel, i), caseConstantOtherKindsOfExpr(i));\n+        }\n+    }\n+\n+    static class Constants {\n+        static final int c1 = 12;\n+    }\n+    @CodeReflection\n+    private static String caseConstantOtherKindsOfExpr(int i) {\n+        String r = \"\";\n+        final int eleven = 11;\n+        switch (i) {\n+            case 1 & 0xF -> r += 1;\n+            case 4>>1 -> r += \"2\";\n+            case (int) 3L -> r += 3;\n+            case 2<<1 -> r += 4;\n+            case 10 \/ 2 -> r += 5;\n+            case 12 - 6 -> r += 6;\n+            case 3 + 4 -> r += 7;\n+            case 2 * 2 * 2 -> r += 8;\n+            case 8 | 1 -> r += 9;\n+            case (10) -> r += 10;\n+            case eleven -> r += 11;\n+            case Constants.c1 -> r += Constants.c1;\n+            case 1 > 0 ? 13 : 133 -> r += 13;\n+            default -> r += \"an int\";\n+        }\n+        return r;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchStatementOp.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -403,0 +403,11 @@\n+    }\n+\n+\/\/    @CodeReflection\n+\/\/    @@@ not supported\n+    private static String caseConstantNullAndDefault(String s) {\n+        String r = \"\";\n+        switch (s) {\n+            case \"abc\" -> r += \"alphabet\";\n+            case null, default -> r += \"null or default\";\n+        }\n+        return r;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}