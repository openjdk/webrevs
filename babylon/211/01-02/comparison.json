{"files":[{"patch":"@@ -1718,6 +1718,1 @@\n-                        \/\/ we should add yield when no break\n-                        if (c.body instanceof JCTree.JCExpressionStatement es) {\n-                            Value bodyVal = toValue(es);\n-                            append(CoreOp._yield());\n-                        }\n-                        else if (c.body instanceof JCTree.JCBlock b) {\n+                        if (c.body instanceof JCTree.JCBlock b) {\n@@ -1726,0 +1721,6 @@\n+                                append(CoreOp._yield()); \/\/ @@@ _break is also an option\n+                            }\n+                        }\n+                        else if (c.body instanceof JCTree.JCStatement s) {\n+                            toValue(s);\n+                            if (!(s instanceof JCThrow)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,316 @@\n+import java.lang.runtime.CodeReflection;\n+\n+\/*\n+ * @test\n+ * @build SwitchStatementTest\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester SwitchStatementTest\n+ *\/\n+public class SwitchStatementTest {\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)void -> {\n+                %1 : Var<java.lang.String> = var %0 @\"r\";\n+                %2 : java.lang.String = var.load %1;\n+                java.switch.statement %2\n+                    (%3 : java.lang.String)boolean -> {\n+                        %4 : java.lang.String = constant @\"FOO\";\n+                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %12 : java.lang.String = constant @\"BAZ\";\n+                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    (%13 : java.lang.String)boolean -> {\n+                        %14 : java.lang.String = constant @\"BAZ\";\n+                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %15;\n+                    }\n+                    ()void -> {\n+                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %17 : java.lang.String = constant @\"FOO\";\n+                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %19 : java.lang.String = constant @\"else\";\n+                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    public static void caseConstantRuleExpression(String r) {\n+        switch (r) {\n+            case \"FOO\" -> System.out.println(\"BAR\");\n+            case \"BAR\" -> System.out.println(\"BAZ\");\n+            case \"BAZ\" -> System.out.println(\"FOO\");\n+            default -> System.out.println(\"else\");\n+        }\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)void -> {\n+                %1 : Var<java.lang.String> = var %0 @\"r\";\n+                %2 : java.lang.String = var.load %1;\n+                java.switch.statement %2\n+                    (%3 : java.lang.String)boolean -> {\n+                        %4 : java.lang.String = constant @\"FOO\";\n+                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %12 : java.lang.String = constant @\"BAZ\";\n+                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    (%13 : java.lang.String)boolean -> {\n+                        %14 : java.lang.String = constant @\"BAZ\";\n+                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %15;\n+                    }\n+                    ()void -> {\n+                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %17 : java.lang.String = constant @\"FOO\";\n+                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %19 : java.lang.String = constant @\"else\";\n+                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    public static void caseConstantRuleBlock(String r) {\n+        switch (r) {\n+            case \"FOO\" -> {\n+                System.out.println(\"BAR\");\n+            }\n+            case \"BAR\" -> {\n+                System.out.println(\"BAZ\");\n+            }\n+            case \"BAZ\" -> {\n+                System.out.println(\"FOO\");\n+            }\n+            default -> {\n+                System.out.println(\"else\");\n+            }\n+        }\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantStatement\" (%0 : java.lang.String)void -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = var.load %1;\n+                java.switch.statement %2\n+                    (%3 : java.lang.String)boolean -> {\n+                        %4 : java.lang.String = constant @\"FOO\";\n+                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        java.break;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %12 : java.lang.String = constant @\"BAZ\";\n+                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        java.break;\n+                    }\n+                    (%13 : java.lang.String)boolean -> {\n+                        %14 : java.lang.String = constant @\"BAZ\";\n+                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %15;\n+                    }\n+                    ()void -> {\n+                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %17 : java.lang.String = constant @\"FOO\";\n+                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        java.break;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %19 : java.lang.String = constant @\"else\";\n+                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static void caseConstantStatement(String s) {\n+        switch (s) {\n+            case \"FOO\":\n+                System.out.println(\"BAR\");\n+                break;\n+            case \"BAR\":\n+                System.out.println(\"BAZ\");\n+                break;\n+            case \"BAZ\":\n+                System.out.println(\"FOO\");;\n+                break;\n+            default:\n+                System.out.println(\"else\");\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantMultiLabels\" (%0 : char)void -> {\n+                %1 : Var<char> = var %0 @\"c\";\n+                %2 : char = var.load %1;\n+                %3 : char = invoke %2 @\"java.lang.Character::toLowerCase(char)char\";\n+                java.switch.statement %3\n+                    (%4 : char)boolean -> {\n+                        %5 : boolean = java.cor\n+                            ()boolean -> {\n+                                %6 : char = constant @\"a\";\n+                                %7 : boolean = eq %4 %6;\n+                                yield %7;\n+                            }\n+                            ()boolean -> {\n+                                %8 : char = constant @\"e\";\n+                                %9 : boolean = eq %4 %8;\n+                                yield %9;\n+                            }\n+                            ()boolean -> {\n+                                %10 : char = constant @\"i\";\n+                                %11 : boolean = eq %4 %10;\n+                                yield %11;\n+                            }\n+                            ()boolean -> {\n+                                %12 : char = constant @\"o\";\n+                                %13 : boolean = eq %4 %12;\n+                                yield %13;\n+                            }\n+                            ()boolean -> {\n+                                %14 : char = constant @\"u\";\n+                                %15 : boolean = eq %4 %14;\n+                                yield %15;\n+                            };\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %17 : java.lang.String = constant @\"vowel\";\n+                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        java.switch.fallthrough;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %19 : java.lang.String = constant @\"else\";\n+                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static void caseConstantMultiLabels(char c) {\n+        switch (Character.toLowerCase(c)) {\n+            case 'a', 'e', 'i', 'o', 'u':\n+                System.out.println(\"vowel\");\n+            default:\n+                System.out.println(\"else\");\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantThrow\" (%0 : java.lang.Integer)void -> {\n+                %1 : Var<java.lang.Integer> = var %0 @\"i\";\n+                %2 : java.lang.Integer = var.load %1;\n+                java.switch.statement %2\n+                    (%3 : java.lang.Integer)boolean -> {\n+                        %4 : int = constant @\"8\";\n+                        %5 : java.lang.Integer = invoke %4 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %6 : boolean = invoke %3 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %6;\n+                    }\n+                    ()void -> {\n+                        %7 : java.lang.IllegalArgumentException = new @\"func<java.lang.IllegalArgumentException>\";\n+                        throw %7;\n+                    }\n+                    (%8 : java.lang.Integer)boolean -> {\n+                        %9 : int = constant @\"9\";\n+                        %10 : java.lang.Integer = invoke %9 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %11 : boolean = invoke %8 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %11;\n+                    }\n+                    ()void -> {\n+                        %12 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %13 : java.lang.String = constant @\"Nine\";\n+                        invoke %12 %13 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %14 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n+                        %15 : java.lang.String = constant @\"An integer\";\n+                        invoke %14 %15 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static void caseConstantThrow(Integer i) {\n+        switch (i) {\n+            case 8 -> throw new IllegalArgumentException();\n+            case 9 -> System.out.println(\"Nine\");\n+            default -> System.out.println(\"An integer\");\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":316,"deletions":0,"binary":false,"changes":316,"status":"added"}]}