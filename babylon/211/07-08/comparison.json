{"files":[{"patch":"@@ -87,0 +87,45 @@\n+    @Test\n+    void testCaseConstantMultiLabels() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantMultiLabels\");\n+        char[] args = {'a', 'e', 'i', 'o', 'u', 'j', 'p', 'g'};\n+        for (char arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), caseConstantMultiLabels(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    private static String caseConstantMultiLabels(char c) {\n+        String r = \"\";\n+        switch (Character.toLowerCase(c)) {\n+            case 'a', 'e', 'i', 'o', 'u':\n+                r += \"vowel\";\n+                break;\n+            default:\n+                r += \"consonant\";\n+        }\n+        return r;\n+    }\n+\n+    @Test\n+    void testCaseConstantThrow() {\n+        CoreOp.FuncOp lmodel = lower(\"caseConstantThrow\");\n+\n+        Assert.assertThrows(IllegalArgumentException.class, () -> Interpreter.invoke(lmodel, 8));\n+\n+        int[] args = {9, 10};\n+        for (int arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), caseConstantThrow(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    private static String caseConstantThrow(Integer i) {\n+        String r = \"\";\n+        switch (i) {\n+            case 8 -> throw new IllegalArgumentException();\n+            case 9 -> r += \"Nine\";\n+            default -> r += \"An integer\";\n+        }\n+        return r;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchStatementOp.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}