{"files":[{"patch":"@@ -951,0 +951,241 @@\n+\n+    @IR(\"\"\"\n+            func @\"nonEnhancedSwStatNoDefault\" (%0 : int)java.lang.String -> {\n+                %1 : Var<int> = var %0 @\"a\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : int = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : int)boolean -> {\n+                        %6 : int = constant @\"1\";\n+                        %7 : boolean = eq %5 %6;\n+                        yield %7;\n+                    }\n+                    ()void -> {\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"1\";\n+                        %10 : java.lang.String = add %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    (%11 : int)boolean -> {\n+                        %12 : int = constant @\"2\";\n+                        %13 : boolean = eq %11 %12;\n+                        yield %13;\n+                    }\n+                    ()void -> {\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : int = constant @\"2\";\n+                        %16 : java.lang.Integer = invoke %15 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %17 : java.lang.String = add %14 %16;\n+                        var.store %3 %17;\n+                        yield;\n+                    };\n+                %18 : java.lang.String = var.load %3;\n+                return %18;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String nonEnhancedSwStatNoDefault(int a) {\n+        String r = \"\";\n+        switch (a) {\n+            case 1 -> r += \"1\";\n+            case 2 -> r += 2;\n+        }\n+        return r;\n+    }\n+\n+    enum E {A, B}\n+    @IR(\"\"\"\n+            func @\"enhancedSwStatNoDefault1\" (%0 : SwitchStatementTest$E)java.lang.String -> {\n+                %1 : Var<SwitchStatementTest$E> = var %0 @\"e\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : SwitchStatementTest$E = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : SwitchStatementTest$E)boolean -> {\n+                        %6 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n+                    }\n+                    ()void -> {\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::A()SwitchStatementTest$E\";\n+                        %10 : java.lang.String = cast %9 @\"java.lang.String\";\n+                        %11 : java.lang.String = add %8 %10;\n+                        var.store %3 %11;\n+                        yield;\n+                    }\n+                    (%12 : SwitchStatementTest$E)boolean -> {\n+                        %13 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n+                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %14;\n+                    }\n+                    ()void -> {\n+                        %15 : java.lang.String = var.load %3;\n+                        %16 : SwitchStatementTest$E = field.load @\"SwitchStatementTest$E::B()SwitchStatementTest$E\";\n+                        %17 : java.lang.String = cast %16 @\"java.lang.String\";\n+                        %18 : java.lang.String = add %15 %17;\n+                        var.store %3 %18;\n+                        yield;\n+                    }\n+                    (%19 : SwitchStatementTest$E)boolean -> {\n+                        %20 : java.lang.Object = constant @null;\n+                        %21 : boolean = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %21;\n+                    }\n+                    ()void -> {\n+                        %22 : java.lang.String = var.load %3;\n+                        %23 : java.lang.String = constant @\"null\";\n+                        %24 : java.lang.String = add %22 %23;\n+                        var.store %3 %24;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %25 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n+                        throw %25;\n+                    };\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String enhancedSwStatNoDefault1(E e) {\n+        String r = \"\";\n+        switch (e) {\n+            case A -> r += E.A;\n+            case B -> r += E.B;\n+            case null -> r += \"null\";\n+        }\n+        return r;\n+    }\n+\n+    sealed interface I permits K, J {}\n+    record K() implements I {}\n+    static final class J implements I {}\n+    @IR(\"\"\"\n+            func @\"enhancedSwStatNoDefault2\" (%0 : SwitchStatementTest$I)java.lang.String -> {\n+                %1 : Var<SwitchStatementTest$I> = var %0 @\"i\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : SwitchStatementTest$I = var.load %1;\n+                %5 : SwitchStatementTest$K = constant @null;\n+                %6 : Var<SwitchStatementTest$K> = var %5 @\"k\";\n+                %7 : SwitchStatementTest$J = constant @null;\n+                %8 : Var<SwitchStatementTest$J> = var %7 @\"j\";\n+                java.switch.statement %4\n+                    (%9 : SwitchStatementTest$I)boolean -> {\n+                        %10 : boolean = pattern.match %9\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> = pattern.binding @\"k\";\n+                                yield %11;\n+                            }\n+                            (%12 : SwitchStatementTest$K)void -> {\n+                                var.store %6 %12;\n+                                yield;\n+                            };\n+                        yield %10;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : java.lang.String = constant @\"K\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : SwitchStatementTest$I)boolean -> {\n+                        %17 : boolean = pattern.match %16\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> -> {\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> = pattern.binding @\"j\";\n+                                yield %18;\n+                            }\n+                            (%19 : SwitchStatementTest$J)void -> {\n+                                var.store %8 %19;\n+                                yield;\n+                            };\n+                        yield %17;\n+                    }\n+                    ()void -> {\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"J\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %23 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n+                        throw %23;\n+                    };\n+                %24 : java.lang.String = var.load %3;\n+                return %24;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String enhancedSwStatNoDefault2(I i) {\n+        String r = \"\";\n+        switch (i) {\n+            case K k -> r += \"K\";\n+            case J j -> r += \"J\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"enhancedSwStatUnconditionalPattern\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.String = var.load %1;\n+                %5 : java.lang.Object = constant @null;\n+                %6 : Var<java.lang.Object> = var %5 @\"o\";\n+                java.switch.statement %4\n+                    (%7 : java.lang.String)boolean -> {\n+                        %8 : java.lang.String = constant @\"A\";\n+                        %9 : boolean = invoke %7 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %9;\n+                    }\n+                    ()void -> {\n+                        %10 : java.lang.String = var.load %3;\n+                        %11 : java.lang.String = constant @\"A\";\n+                        %12 : java.lang.String = add %10 %11;\n+                        var.store %3 %12;\n+                        yield;\n+                    }\n+                    (%13 : java.lang.String)boolean -> {\n+                        %14 : boolean = pattern.match %13\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> -> {\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.binding @\"o\";\n+                                yield %15;\n+                            }\n+                            (%16 : java.lang.Object)void -> {\n+                                var.store %6 %16;\n+                                yield;\n+                            };\n+                        yield %14;\n+                    }\n+                    ()void -> {\n+                        %17 : java.lang.String = var.load %3;\n+                        %18 : java.lang.String = constant @\"obj\";\n+                        %19 : java.lang.String = add %17 %18;\n+                        var.store %3 %19;\n+                        yield;\n+                    };\n+                %20 : java.lang.String = var.load %3;\n+                return %20;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String enhancedSwStatUnconditionalPattern(String s) {\n+        String r = \"\";\n+        switch (s) {\n+            case \"A\" -> r += \"A\";\n+            case Object o -> r += \"obj\";\n+        }\n+        return r;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"modified"}]}