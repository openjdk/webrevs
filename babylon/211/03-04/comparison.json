{"files":[{"patch":"@@ -12,1 +12,1 @@\n-            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)void -> {\n+            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)java.lang.String -> {\n@@ -14,6 +14,8 @@\n-                %2 : java.lang.String = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : java.lang.String)boolean -> {\n-                        %4 : java.lang.String = constant @\"FOO\";\n-                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %5;\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"s\";\n+                %4 : java.lang.String = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.String = constant @\"FOO\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n@@ -22,3 +24,4 @@\n-                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %7 : java.lang.String = constant @\"BAR\";\n-                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : java.lang.String = add %8 %9;\n+                        var.store %3 %10;\n@@ -27,4 +30,4 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %10;\n+                    (%11 : java.lang.String)boolean -> {\n+                        %12 : java.lang.String = constant @\"BAR\";\n+                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %13;\n@@ -33,3 +36,4 @@\n-                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %12 : java.lang.String = constant @\"BAZ\";\n-                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"BAZ\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %3 %16;\n@@ -38,4 +42,4 @@\n-                    (%13 : java.lang.String)boolean -> {\n-                        %14 : java.lang.String = constant @\"BAZ\";\n-                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %15;\n+                    (%17 : java.lang.String)boolean -> {\n+                        %18 : java.lang.String = constant @\"BAZ\";\n+                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %19;\n@@ -44,3 +48,4 @@\n-                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %17 : java.lang.String = constant @\"FOO\";\n-                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"FOO\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n@@ -53,3 +58,4 @@\n-                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %19 : java.lang.String = constant @\"else\";\n-                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n@@ -58,1 +64,2 @@\n-                return;\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n@@ -62,1 +69,2 @@\n-    public static void caseConstantRuleExpression(String r) {\n+    public static String caseConstantRuleExpression(String r) {\n+        String s = \"\";\n@@ -64,4 +72,4 @@\n-            case \"FOO\" -> System.out.println(\"BAR\");\n-            case \"BAR\" -> System.out.println(\"BAZ\");\n-            case \"BAZ\" -> System.out.println(\"FOO\");\n-            default -> System.out.println(\"else\");\n+            case \"FOO\" -> s += \"BAR\";\n+            case \"BAR\" -> s += \"BAZ\";\n+            case \"BAZ\" -> s += \"FOO\";\n+            default -> s += \"else\";\n@@ -69,0 +77,1 @@\n+        return s;\n@@ -72,1 +81,1 @@\n-            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)void -> {\n+            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)java.lang.String -> {\n@@ -74,6 +83,8 @@\n-                %2 : java.lang.String = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : java.lang.String)boolean -> {\n-                        %4 : java.lang.String = constant @\"FOO\";\n-                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %5;\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"s\";\n+                %4 : java.lang.String = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.String = constant @\"FOO\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n@@ -82,3 +93,4 @@\n-                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %7 : java.lang.String = constant @\"BAR\";\n-                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : java.lang.String = add %8 %9;\n+                        var.store %3 %10;\n@@ -87,4 +99,4 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %10;\n+                    (%11 : java.lang.String)boolean -> {\n+                        %12 : java.lang.String = constant @\"BAR\";\n+                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %13;\n@@ -93,3 +105,4 @@\n-                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %12 : java.lang.String = constant @\"BAZ\";\n-                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"BAZ\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %3 %16;\n@@ -98,4 +111,4 @@\n-                    (%13 : java.lang.String)boolean -> {\n-                        %14 : java.lang.String = constant @\"BAZ\";\n-                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %15;\n+                    (%17 : java.lang.String)boolean -> {\n+                        %18 : java.lang.String = constant @\"BAZ\";\n+                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %19;\n@@ -104,3 +117,4 @@\n-                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %17 : java.lang.String = constant @\"FOO\";\n-                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"FOO\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n@@ -113,3 +127,4 @@\n-                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %19 : java.lang.String = constant @\"else\";\n-                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n@@ -118,1 +133,2 @@\n-                return;\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n@@ -122,1 +138,2 @@\n-    public static void caseConstantRuleBlock(String r) {\n+    public static String caseConstantRuleBlock(String r) {\n+        String s = \"\";\n@@ -125,1 +142,1 @@\n-                System.out.println(\"BAR\");\n+                s += \"BAR\";\n@@ -128,1 +145,1 @@\n-                System.out.println(\"BAZ\");\n+                s += \"BAZ\";\n@@ -131,1 +148,1 @@\n-                System.out.println(\"FOO\");\n+                s += \"FOO\";\n@@ -134,1 +151,1 @@\n-                System.out.println(\"else\");\n+                s += \"else\";\n@@ -137,0 +154,1 @@\n+        return s;\n@@ -140,1 +158,1 @@\n-            func @\"caseConstantStatement\" (%0 : java.lang.String)void -> {\n+            func @\"caseConstantStatement\" (%0 : java.lang.String)java.lang.String -> {\n@@ -142,6 +160,8 @@\n-                %2 : java.lang.String = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : java.lang.String)boolean -> {\n-                        %4 : java.lang.String = constant @\"FOO\";\n-                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %5;\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.String = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.String = constant @\"FOO\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n@@ -150,3 +170,4 @@\n-                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %7 : java.lang.String = constant @\"BAR\";\n-                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : java.lang.String = add %8 %9;\n+                        var.store %3 %10;\n@@ -155,4 +176,4 @@\n-                    (%8 : java.lang.String)boolean -> {\n-                        %9 : java.lang.String = constant @\"BAR\";\n-                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %10;\n+                    (%11 : java.lang.String)boolean -> {\n+                        %12 : java.lang.String = constant @\"BAR\";\n+                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %13;\n@@ -161,3 +182,4 @@\n-                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %12 : java.lang.String = constant @\"BAZ\";\n-                        invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"BAZ\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %3 %16;\n@@ -166,4 +188,4 @@\n-                    (%13 : java.lang.String)boolean -> {\n-                        %14 : java.lang.String = constant @\"BAZ\";\n-                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %15;\n+                    (%17 : java.lang.String)boolean -> {\n+                        %18 : java.lang.String = constant @\"BAZ\";\n+                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %19;\n@@ -172,3 +194,4 @@\n-                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %17 : java.lang.String = constant @\"FOO\";\n-                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : java.lang.String = constant @\"FOO\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %3 %22;\n@@ -181,3 +204,4 @@\n-                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %19 : java.lang.String = constant @\"else\";\n-                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %23 : java.lang.String = var.load %3;\n+                        %24 : java.lang.String = constant @\"else\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %3 %25;\n@@ -186,1 +210,2 @@\n-                return;\n+                %26 : java.lang.String = var.load %3;\n+                return %26;\n@@ -190,1 +215,2 @@\n-    private static void caseConstantStatement(String s) {\n+    private static String caseConstantStatement(String s) {\n+        String r = \"\";\n@@ -193,1 +219,1 @@\n-                System.out.println(\"BAR\");\n+                r += \"BAR\";\n@@ -196,1 +222,1 @@\n-                System.out.println(\"BAZ\");\n+                r += \"BAZ\";\n@@ -199,1 +225,1 @@\n-                System.out.println(\"FOO\");;\n+                r += \"FOO\";\n@@ -202,2 +228,3 @@\n-                System.out.println(\"else\");\n-        };\n+                r += \"else\";\n+        }\n+        return r;\n@@ -207,1 +234,1 @@\n-            func @\"caseConstantMultiLabels\" (%0 : char)void -> {\n+            func @\"caseConstantMultiLabels\" (%0 : char)java.lang.String -> {\n@@ -209,10 +236,7 @@\n-                %2 : char = var.load %1;\n-                %3 : char = invoke %2 @\"java.lang.Character::toLowerCase(char)char\";\n-                java.switch.statement %3\n-                    (%4 : char)boolean -> {\n-                        %5 : boolean = java.cor\n-                            ()boolean -> {\n-                                %6 : char = constant @\"a\";\n-                                %7 : boolean = eq %4 %6;\n-                                yield %7;\n-                            }\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : char = var.load %1;\n+                %5 : char = invoke %4 @\"java.lang.Character::toLowerCase(char)char\";\n+                java.switch.statement %5\n+                    (%6 : char)boolean -> {\n+                        %7 : boolean = java.cor\n@@ -220,2 +244,2 @@\n-                                %8 : char = constant @\"e\";\n-                                %9 : boolean = eq %4 %8;\n+                                %8 : char = constant @\"a\";\n+                                %9 : boolean = eq %6 %8;\n@@ -225,2 +249,2 @@\n-                                %10 : char = constant @\"i\";\n-                                %11 : boolean = eq %4 %10;\n+                                %10 : char = constant @\"e\";\n+                                %11 : boolean = eq %6 %10;\n@@ -230,2 +254,2 @@\n-                                %12 : char = constant @\"o\";\n-                                %13 : boolean = eq %4 %12;\n+                                %12 : char = constant @\"i\";\n+                                %13 : boolean = eq %6 %12;\n@@ -235,2 +259,2 @@\n-                                %14 : char = constant @\"u\";\n-                                %15 : boolean = eq %4 %14;\n+                                %14 : char = constant @\"o\";\n+                                %15 : boolean = eq %6 %14;\n@@ -238,0 +262,5 @@\n+                            }\n+                            ()boolean -> {\n+                                %16 : char = constant @\"u\";\n+                                %17 : boolean = eq %6 %16;\n+                                yield %17;\n@@ -239,1 +268,1 @@\n-                        yield %5;\n+                        yield %7;\n@@ -242,4 +271,5 @@\n-                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %17 : java.lang.String = constant @\"vowel\";\n-                        invoke %16 %17 @\"java.io.PrintStream::println(java.lang.String)void\";\n-                        java.switch.fallthrough;\n+                        %18 : java.lang.String = var.load %3;\n+                        %19 : java.lang.String = constant @\"vowel\";\n+                        %20 : java.lang.String = add %18 %19;\n+                        var.store %3 %20;\n+                        java.break;\n@@ -251,3 +281,4 @@\n-                        %18 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %19 : java.lang.String = constant @\"else\";\n-                        invoke %18 %19 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %21 : java.lang.String = var.load %3;\n+                        %22 : java.lang.String = constant @\"consonant\";\n+                        %23 : java.lang.String = add %21 %22;\n+                        var.store %3 %23;\n@@ -256,1 +287,2 @@\n-                return;\n+                %24 : java.lang.String = var.load %3;\n+                return %24;\n@@ -260,1 +292,2 @@\n-    private static void caseConstantMultiLabels(char c) {\n+    private static String caseConstantMultiLabels(char c) {\n+        String r = \"\";\n@@ -263,1 +296,2 @@\n-                System.out.println(\"vowel\");\n+                r += \"vowel\";\n+                break;\n@@ -265,2 +299,3 @@\n-                System.out.println(\"else\");\n-        };\n+                r += \"consonant\";\n+        }\n+        return r;\n@@ -270,1 +305,1 @@\n-            func @\"caseConstantThrow\" (%0 : java.lang.Integer)void -> {\n+            func @\"caseConstantThrow\" (%0 : java.lang.Integer)java.lang.String -> {\n@@ -272,7 +307,9 @@\n-                %2 : java.lang.Integer = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : java.lang.Integer)boolean -> {\n-                        %4 : int = constant @\"8\";\n-                        %5 : java.lang.Integer = invoke %4 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %6 : boolean = invoke %3 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %6;\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.Integer = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.Integer)boolean -> {\n+                        %6 : int = constant @\"8\";\n+                        %7 : java.lang.Integer = invoke %6 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %8 : boolean = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %8;\n@@ -281,2 +318,2 @@\n-                        %7 : java.lang.IllegalArgumentException = new @\"func<java.lang.IllegalArgumentException>\";\n-                        throw %7;\n+                        %9 : java.lang.IllegalArgumentException = new @\"func<java.lang.IllegalArgumentException>\";\n+                        throw %9;\n@@ -284,5 +321,5 @@\n-                    (%8 : java.lang.Integer)boolean -> {\n-                        %9 : int = constant @\"9\";\n-                        %10 : java.lang.Integer = invoke %9 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n-                        %11 : boolean = invoke %8 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %11;\n+                    (%10 : java.lang.Integer)boolean -> {\n+                        %11 : int = constant @\"9\";\n+                        %12 : java.lang.Integer = invoke %11 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %13 : boolean = invoke %10 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %13;\n@@ -291,3 +328,4 @@\n-                        %12 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %13 : java.lang.String = constant @\"Nine\";\n-                        invoke %12 %13 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"Nine\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %3 %16;\n@@ -300,3 +338,4 @@\n-                        %14 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %15 : java.lang.String = constant @\"An integer\";\n-                        invoke %14 %15 @\"java.io.PrintStream::println(java.lang.String)void\";\n+                        %17 : java.lang.String = var.load %3;\n+                        %18 : java.lang.String = constant @\"An integer\";\n+                        %19 : java.lang.String = add %17 %18;\n+                        var.store %3 %19;\n@@ -305,1 +344,2 @@\n-                return;\n+                %20 : java.lang.String = var.load %3;\n+                return %20;\n@@ -309,1 +349,2 @@\n-    private static void caseConstantThrow(Integer i) {\n+    private static String caseConstantThrow(Integer i) {\n+        String r = \"\";\n@@ -312,3 +353,4 @@\n-            case 9 -> System.out.println(\"Nine\");\n-            default -> System.out.println(\"An integer\");\n-        };\n+            case 9 -> r += \"Nine\";\n+            default -> r += \"An integer\";\n+        }\n+        return r;\n@@ -318,26 +360,31 @@\n-            func @\"caseConstantNullLabel\" (%0 : java.lang.String)void -> {\n-                %1 : Var<java.lang.String> = var %0 @\"s\";\n-                %2 : java.lang.String = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : java.lang.String)boolean -> {\n-                        %4 : java.lang.Object = constant @null;\n-                        %5 : boolean = invoke %3 %4 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %5;\n-                    }\n-                    ()void -> {\n-                        %6 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %7 : java.lang.String = constant @\"null\";\n-                        invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String)void\";\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    }\n-                    ()void -> {\n-                        %8 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %9 : java.lang.String = constant @\"non null\";\n-                        invoke %8 %9 @\"java.io.PrintStream::println(java.lang.String)void\";\n-                        yield;\n-                    };\n-                return;\n-            };\n+            func @\"caseConstantNullLabel\" (%0 : java.lang.String)java.lang.String -> {\n+                  %1 : Var<java.lang.String> = var %0 @\"s\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.String = var.load %1;\n+                  java.switch.statement %4\n+                      (%5 : java.lang.String)boolean -> {\n+                          %6 : java.lang.Object = constant @null;\n+                          %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                          yield %7;\n+                      }\n+                      ()void -> {\n+                          %8 : java.lang.String = var.load %3;\n+                          %9 : java.lang.String = constant @\"null\";\n+                          %10 : java.lang.String = add %8 %9;\n+                          var.store %3 %10;\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          yield;\n+                      }\n+                      ()void -> {\n+                          %11 : java.lang.String = var.load %3;\n+                          %12 : java.lang.String = constant @\"non null\";\n+                          %13 : java.lang.String = add %11 %12;\n+                          var.store %3 %13;\n+                          yield;\n+                      };\n+                  %14 : java.lang.String = var.load %3;\n+                  return %14;\n+              };\n@@ -346,1 +393,2 @@\n-    private static void caseConstantNullLabel(String s) {\n+    private static String caseConstantNullLabel(String s) {\n+        String r = \"\";\n@@ -348,3 +396,4 @@\n-            case null -> System.out.println(\"null\");\n-            default -> System.out.println(\"non null\");\n-        };\n+            case null -> r += \"null\";\n+            default -> r += \"non null\";\n+        }\n+        return r;\n@@ -356,6 +405,8 @@\n-                %2 : char = var.load %1;\n-                %3 : java.lang.String = java.switch.expression %2\n-                    (%4 : char)boolean -> {\n-                        %5 : char = constant @\"A\";\n-                        %6 : boolean = eq %4 %5;\n-                        yield %6;\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : char = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : char)boolean -> {\n+                        %6 : char = constant @\"A\";\n+                        %7 : boolean = eq %5 %6;\n+                        yield %7;\n@@ -363,1 +414,1 @@\n-                    ()java.lang.String -> {\n+                    ()void -> {\n@@ -366,4 +417,4 @@\n-                    (%7 : char)boolean -> {\n-                        %8 : char = constant @\"B\";\n-                        %9 : boolean = eq %7 %8;\n-                        yield %9;\n+                    (%8 : char)boolean -> {\n+                        %9 : char = constant @\"B\";\n+                        %10 : boolean = eq %8 %9;\n+                        yield %10;\n@@ -371,3 +422,6 @@\n-                    ()java.lang.String -> {\n-                        %10 : java.lang.String = constant @\"A or B\";\n-                        java.yield %10;\n+                    ()void -> {\n+                        %11 : java.lang.String = var.load %3;\n+                        %12 : java.lang.String = constant @\"A or B\";\n+                        %13 : java.lang.String = add %11 %12;\n+                        var.store %3 %13;\n+                        java.break;\n@@ -378,3 +432,6 @@\n-                    ()java.lang.String -> {\n-                        %11 : java.lang.String = constant @\"Neither A nor B\";\n-                        java.yield %11;\n+                    ()void -> {\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"Neither A nor B\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %3 %16;\n+                        yield;\n@@ -382,1 +439,2 @@\n-                return %3;\n+                %17 : java.lang.String = var.load %3;\n+                return %17;\n@@ -387,1 +445,2 @@\n-        return switch (c) {\n+        String r = \"\";\n+        switch (c) {\n@@ -390,1 +449,2 @@\n-                yield \"A or B\";\n+                r += \"A or B\";\n+                break;\n@@ -392,2 +452,3 @@\n-                yield \"Neither A nor B\";\n-        };\n+                r += \"Neither A nor B\";\n+        }\n+        return r;\n@@ -400,1 +461,1 @@\n-            func @\"caseConstantEnum\" (%0 : SwitchStatementTest$Day)void -> {\n+            func @\"caseConstantEnum\" (%0 : SwitchStatementTest$Day)java.lang.String -> {\n@@ -402,4 +463,6 @@\n-                %2 : SwitchStatementTest$Day = var.load %1;\n-                java.switch.statement %2\n-                    (%3 : SwitchStatementTest$Day)boolean -> {\n-                        %4 : boolean = java.cor\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : SwitchStatementTest$Day = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : SwitchStatementTest$Day)boolean -> {\n+                        %6 : boolean = java.cor\n@@ -407,7 +470,2 @@\n-                                %5 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::MON()SwitchStatementTest$Day\";\n-                                %6 : boolean = invoke %3 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                yield %6;\n-                            }\n-                            ()boolean -> {\n-                                %7 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::FRI()SwitchStatementTest$Day\";\n-                                %8 : boolean = invoke %3 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                %7 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::MON()SwitchStatementTest$Day\";\n+                                %8 : boolean = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n@@ -417,2 +475,2 @@\n-                                %9 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SUN()SwitchStatementTest$Day\";\n-                                %10 : boolean = invoke %3 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                %9 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::FRI()SwitchStatementTest$Day\";\n+                                %10 : boolean = invoke %5 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n@@ -420,0 +478,5 @@\n+                            }\n+                            ()boolean -> {\n+                                %11 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SUN()SwitchStatementTest$Day\";\n+                                %12 : boolean = invoke %5 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %12;\n@@ -421,1 +484,1 @@\n-                        yield %4;\n+                        yield %6;\n@@ -424,3 +487,5 @@\n-                        %11 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %12 : int = constant @\"6\";\n-                        invoke %11 %12 @\"java.io.PrintStream::println(int)void\";\n+                        %13 : java.lang.String = var.load %3;\n+                        %14 : int = constant @\"6\";\n+                        %15 : java.lang.Integer = invoke %14 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %16 : java.lang.String = add %13 %15;\n+                        var.store %3 %16;\n@@ -429,4 +494,4 @@\n-                    (%13 : SwitchStatementTest$Day)boolean -> {\n-                        %14 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::TUE()SwitchStatementTest$Day\";\n-                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %15;\n+                    (%17 : SwitchStatementTest$Day)boolean -> {\n+                        %18 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::TUE()SwitchStatementTest$Day\";\n+                        %19 : boolean = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %19;\n@@ -435,3 +500,5 @@\n-                        %16 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %17 : int = constant @\"7\";\n-                        invoke %16 %17 @\"java.io.PrintStream::println(int)void\";\n+                        %20 : java.lang.String = var.load %3;\n+                        %21 : int = constant @\"7\";\n+                        %22 : java.lang.Integer = invoke %21 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %23 : java.lang.String = add %20 %22;\n+                        var.store %3 %23;\n@@ -440,2 +507,2 @@\n-                    (%18 : SwitchStatementTest$Day)boolean -> {\n-                        %19 : boolean = java.cor\n+                    (%24 : SwitchStatementTest$Day)boolean -> {\n+                        %25 : boolean = java.cor\n@@ -443,3 +510,3 @@\n-                                %20 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::THU()SwitchStatementTest$Day\";\n-                                %21 : boolean = invoke %18 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                yield %21;\n+                                %26 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::THU()SwitchStatementTest$Day\";\n+                                %27 : boolean = invoke %24 %26 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %27;\n@@ -448,3 +515,3 @@\n-                                %22 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SAT()SwitchStatementTest$Day\";\n-                                %23 : boolean = invoke %18 %22 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                                yield %23;\n+                                %28 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::SAT()SwitchStatementTest$Day\";\n+                                %29 : boolean = invoke %24 %28 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %29;\n@@ -452,1 +519,1 @@\n-                        yield %19;\n+                        yield %25;\n@@ -455,3 +522,5 @@\n-                        %24 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %25 : int = constant @\"8\";\n-                        invoke %24 %25 @\"java.io.PrintStream::println(int)void\";\n+                        %30 : java.lang.String = var.load %3;\n+                        %31 : int = constant @\"8\";\n+                        %32 : java.lang.Integer = invoke %31 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %33 : java.lang.String = add %30 %32;\n+                        var.store %3 %33;\n@@ -460,4 +529,4 @@\n-                    (%26 : SwitchStatementTest$Day)boolean -> {\n-                        %27 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::WED()SwitchStatementTest$Day\";\n-                        %28 : boolean = invoke %26 %27 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n-                        yield %28;\n+                    (%34 : SwitchStatementTest$Day)boolean -> {\n+                        %35 : SwitchStatementTest$Day = field.load @\"SwitchStatementTest$Day::WED()SwitchStatementTest$Day\";\n+                        %36 : boolean = invoke %34 %35 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %36;\n@@ -466,3 +535,5 @@\n-                        %29 : java.io.PrintStream = field.load @\"java.lang.System::out()java.io.PrintStream\";\n-                        %30 : int = constant @\"9\";\n-                        invoke %29 %30 @\"java.io.PrintStream::println(int)void\";\n+                        %37 : java.lang.String = var.load %3;\n+                        %38 : int = constant @\"9\";\n+                        %39 : java.lang.Integer = invoke %38 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %40 : java.lang.String = add %37 %39;\n+                        var.store %3 %40;\n@@ -471,1 +542,2 @@\n-                return;\n+                %41 : java.lang.String = var.load %3;\n+                return %41;\n@@ -475,1 +547,2 @@\n-    private static void caseConstantEnum(Day d) {\n+    private static String caseConstantEnum(Day d) {\n+        String r = \"\";\n@@ -477,4 +550,398 @@\n-            case MON, FRI, SUN -> System.out.println(6);\n-            case TUE -> System.out.println(7);\n-            case THU, SAT -> System.out.println(8);\n-            case WED -> System.out.println(9);\n+            \/\/ @@@ concat of String and int is modeled as: add str Integer\n+            case MON, FRI, SUN -> r += 6;\n+            case TUE -> r += 7;\n+            case THU, SAT -> r += 8;\n+            case WED -> r += 9;\n+        }\n+        return r;\n+    }\n+\n+    static class Constants {\n+        static final int c1 = 12;\n+    }\n+    @IR(\"\"\"\n+            func @\"caseConstantOtherKindsOfExpr\" (%0 : int)java.lang.String -> {\n+                %1 : Var<int> = var %0 @\"i\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : int = constant @\"11\";\n+                %5 : Var<int> = var %4 @\"eleven\";\n+                %6 : int = var.load %1;\n+                java.switch.statement %6\n+                    (%7 : int)boolean -> {\n+                        %8 : int = constant @\"1\";\n+                        %9 : int = constant @\"15\";\n+                        %10 : int = and %8 %9;\n+                        %11 : boolean = eq %7 %10;\n+                        yield %11;\n+                    }\n+                    ()void -> {\n+                        %12 : java.lang.String = var.load %3;\n+                        %13 : int = constant @\"1\";\n+                        %14 : java.lang.Integer = invoke %13 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %15 : java.lang.String = add %12 %14;\n+                        var.store %3 %15;\n+                        yield;\n+                    }\n+                    (%16 : int)boolean -> {\n+                        %17 : int = constant @\"4\";\n+                        %18 : int = constant @\"1\";\n+                        %19 : int = ashr %17 %18;\n+                        %20 : boolean = eq %16 %19;\n+                        yield %20;\n+                    }\n+                    ()void -> {\n+                        %21 : java.lang.String = var.load %3;\n+                        %22 : java.lang.String = constant @\"2\";\n+                        %23 : java.lang.String = add %21 %22;\n+                        var.store %3 %23;\n+                        yield;\n+                    }\n+                    (%24 : int)boolean -> {\n+                        %25 : long = constant @\"3\";\n+                        %26 : int = conv %25;\n+                        %27 : boolean = eq %24 %26;\n+                        yield %27;\n+                    }\n+                    ()void -> {\n+                        %28 : java.lang.String = var.load %3;\n+                        %29 : int = constant @\"3\";\n+                        %30 : java.lang.Integer = invoke %29 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %31 : java.lang.String = add %28 %30;\n+                        var.store %3 %31;\n+                        yield;\n+                    }\n+                    (%32 : int)boolean -> {\n+                        %33 : int = constant @\"2\";\n+                        %34 : int = constant @\"1\";\n+                        %35 : int = lshl %33 %34;\n+                        %36 : boolean = eq %32 %35;\n+                        yield %36;\n+                    }\n+                    ()void -> {\n+                        %37 : java.lang.String = var.load %3;\n+                        %38 : int = constant @\"4\";\n+                        %39 : java.lang.Integer = invoke %38 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %40 : java.lang.String = add %37 %39;\n+                        var.store %3 %40;\n+                        yield;\n+                    }\n+                    (%41 : int)boolean -> {\n+                        %42 : int = constant @\"10\";\n+                        %43 : int = constant @\"2\";\n+                        %44 : int = div %42 %43;\n+                        %45 : boolean = eq %41 %44;\n+                        yield %45;\n+                    }\n+                    ()void -> {\n+                        %46 : java.lang.String = var.load %3;\n+                        %47 : int = constant @\"5\";\n+                        %48 : java.lang.Integer = invoke %47 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %49 : java.lang.String = add %46 %48;\n+                        var.store %3 %49;\n+                        yield;\n+                    }\n+                    (%50 : int)boolean -> {\n+                        %51 : int = constant @\"12\";\n+                        %52 : int = constant @\"6\";\n+                        %53 : int = sub %51 %52;\n+                        %54 : boolean = eq %50 %53;\n+                        yield %54;\n+                    }\n+                    ()void -> {\n+                        %55 : java.lang.String = var.load %3;\n+                        %56 : int = constant @\"6\";\n+                        %57 : java.lang.Integer = invoke %56 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %58 : java.lang.String = add %55 %57;\n+                        var.store %3 %58;\n+                        yield;\n+                    }\n+                    (%59 : int)boolean -> {\n+                        %60 : int = constant @\"3\";\n+                        %61 : int = constant @\"4\";\n+                        %62 : int = add %60 %61;\n+                        %63 : boolean = eq %59 %62;\n+                        yield %63;\n+                    }\n+                    ()void -> {\n+                        %64 : java.lang.String = var.load %3;\n+                        %65 : int = constant @\"7\";\n+                        %66 : java.lang.Integer = invoke %65 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %67 : java.lang.String = add %64 %66;\n+                        var.store %3 %67;\n+                        yield;\n+                    }\n+                    (%68 : int)boolean -> {\n+                        %69 : int = constant @\"2\";\n+                        %70 : int = constant @\"2\";\n+                        %71 : int = mul %69 %70;\n+                        %72 : int = constant @\"2\";\n+                        %73 : int = mul %71 %72;\n+                        %74 : boolean = eq %68 %73;\n+                        yield %74;\n+                    }\n+                    ()void -> {\n+                        %75 : java.lang.String = var.load %3;\n+                        %76 : int = constant @\"8\";\n+                        %77 : java.lang.Integer = invoke %76 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %78 : java.lang.String = add %75 %77;\n+                        var.store %3 %78;\n+                        yield;\n+                    }\n+                    (%79 : int)boolean -> {\n+                        %80 : int = constant @\"8\";\n+                        %81 : int = constant @\"1\";\n+                        %82 : int = or %80 %81;\n+                        %83 : boolean = eq %79 %82;\n+                        yield %83;\n+                    }\n+                    ()void -> {\n+                        %84 : java.lang.String = var.load %3;\n+                        %85 : int = constant @\"9\";\n+                        %86 : java.lang.Integer = invoke %85 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %87 : java.lang.String = add %84 %86;\n+                        var.store %3 %87;\n+                        yield;\n+                    }\n+                    (%88 : int)boolean -> {\n+                        %89 : int = constant @\"10\";\n+                        %90 : boolean = eq %88 %89;\n+                        yield %90;\n+                    }\n+                    ()void -> {\n+                        %91 : java.lang.String = var.load %3;\n+                        %92 : int = constant @\"10\";\n+                        %93 : java.lang.Integer = invoke %92 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %94 : java.lang.String = add %91 %93;\n+                        var.store %3 %94;\n+                        yield;\n+                    }\n+                    (%95 : int)boolean -> {\n+                        %96 : int = var.load %5;\n+                        %97 : boolean = eq %95 %96;\n+                        yield %97;\n+                    }\n+                    ()void -> {\n+                        %98 : java.lang.String = var.load %3;\n+                        %99 : int = constant @\"11\";\n+                        %100 : java.lang.Integer = invoke %99 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %101 : java.lang.String = add %98 %100;\n+                        var.store %3 %101;\n+                        yield;\n+                    }\n+                    (%102 : int)boolean -> {\n+                        %103 : int = field.load @\"SwitchStatementTest$Constants::c1()int\";\n+                        %104 : boolean = eq %102 %103;\n+                        yield %104;\n+                    }\n+                    ()void -> {\n+                        %105 : java.lang.String = var.load %3;\n+                        %106 : int = field.load @\"SwitchStatementTest$Constants::c1()int\";\n+                        %107 : java.lang.Integer = invoke %106 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %108 : java.lang.String = add %105 %107;\n+                        var.store %3 %108;\n+                        yield;\n+                    }\n+                    (%109 : int)boolean -> {\n+                        %110 : int = java.cexpression\n+                            ()boolean -> {\n+                                %111 : int = constant @\"1\";\n+                                %112 : int = constant @\"0\";\n+                                %113 : boolean = gt %111 %112;\n+                                yield %113;\n+                            }\n+                            ()int -> {\n+                                %114 : int = constant @\"13\";\n+                                yield %114;\n+                            }\n+                            ()int -> {\n+                                %115 : int = constant @\"133\";\n+                                yield %115;\n+                            };\n+                        %116 : boolean = eq %109 %110;\n+                        yield %116;\n+                    }\n+                    ()void -> {\n+                        %117 : java.lang.String = var.load %3;\n+                        %118 : int = constant @\"13\";\n+                        %119 : java.lang.Integer = invoke %118 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %120 : java.lang.String = add %117 %119;\n+                        var.store %3 %120;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %121 : java.lang.String = var.load %3;\n+                        %122 : java.lang.String = constant @\"an int\";\n+                        %123 : java.lang.String = add %121 %122;\n+                        var.store %3 %123;\n+                        yield;\n+                    };\n+                %124 : java.lang.String = var.load %3;\n+                return %124;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantOtherKindsOfExpr(int i) {\n+        String r = \"\";\n+        final int eleven = 11;\n+        switch (i) {\n+            case 1 & 0xF -> r += 1;\n+            case 4>>1 -> r += \"2\";\n+            case (int) 3L -> r += 3;\n+            case 2<<1 -> r += 4;\n+            case 10 \/ 2 -> r += 5;\n+            case 12 - 6 -> r += 6;\n+            case 3 + 4 -> r += 7;\n+            case 2 * 2 * 2 -> r += 8;\n+            case 8 | 1 -> r += 9;\n+            case (10) -> r += 10;\n+            case eleven -> r += 11;\n+            case Constants.c1 -> r += Constants.c1;\n+            case 1 > 0 ? 13 : 133 -> r += 13;\n+            default -> r += \"an int\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantConv\" (%0 : short)java.lang.String -> {\n+                %1 : Var<short> = var %0 @\"a\";\n+                %2 : int = constant @\"1\";\n+                %3 : short = conv %2;\n+                %4 : Var<short> = var %3 @\"s\";\n+                %5 : int = constant @\"2\";\n+                %6 : byte = conv %5;\n+                %7 : Var<byte> = var %6 @\"b\";\n+                %8 : java.lang.String = constant @\"\";\n+                %9 : Var<java.lang.String> = var %8 @\"r\";\n+                %10 : short = var.load %1;\n+                java.switch.statement %10\n+                    (%11 : short)boolean -> {\n+                        %12 : short = var.load %4;\n+                        %13 : boolean = eq %11 %12;\n+                        yield %13;\n+                    }\n+                    ()void -> {\n+                        %14 : java.lang.String = var.load %9;\n+                        %15 : java.lang.String = constant @\"one\";\n+                        %16 : java.lang.String = add %14 %15;\n+                        var.store %9 %16;\n+                        yield;\n+                    }\n+                    (%17 : short)boolean -> {\n+                        %18 : byte = var.load %7;\n+                        %19 : short = conv %18;\n+                        %20 : boolean = eq %17 %19;\n+                        yield %20;\n+                    }\n+                    ()void -> {\n+                        %21 : java.lang.String = var.load %9;\n+                        %22 : java.lang.String = constant @\"two\";\n+                        %23 : java.lang.String = add %21 %22;\n+                        var.store %9 %23;\n+                        yield;\n+                    }\n+                    (%24 : short)boolean -> {\n+                        %25 : int = constant @\"3\";\n+                        %26 : short = conv %25;\n+                        %27 : boolean = eq %24 %26;\n+                        yield %27;\n+                    }\n+                    ()void -> {\n+                        %28 : java.lang.String = var.load %9;\n+                        %29 : java.lang.String = constant @\"three\";\n+                        %30 : java.lang.String = add %28 %29;\n+                        var.store %9 %30;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %31 : java.lang.String = var.load %9;\n+                        %32 : java.lang.String = constant @\"else\";\n+                        %33 : java.lang.String = add %31 %32;\n+                        var.store %9 %33;\n+                        yield;\n+                    };\n+                %34 : java.lang.String = var.load %9;\n+                return %34;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String caseConstantConv(short a) { \/\/ @@@ tests should be easy to test with interpreter, e.g. tests returning a string result\n+        final short s = 1;\n+        final byte b = 2;\n+        String r = \"\";\n+        switch (a) {\n+            \/\/ @@@ string concat is modeled as: add s1 s2\n+            case s -> r += \"one\"; \/\/ identity, short -> short\n+            case b -> r += \"two\"; \/\/ widening primitive conversion, byte -> short\n+            case 3 -> r += \"three\"; \/\/ narrowing primitive conversion, int -> short\n+            default -> r += \"else\";\n+        }\n+        return r;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantConv2\" (%0 : java.lang.Byte)java.lang.String -> {\n+                %1 : Var<java.lang.Byte> = var %0 @\"a\";\n+                %2 : int = constant @\"2\";\n+                %3 : byte = conv %2;\n+                %4 : Var<byte> = var %3 @\"b\";\n+                %5 : java.lang.String = constant @\"\";\n+                %6 : Var<java.lang.String> = var %5 @\"r\";\n+                %7 : java.lang.Byte = var.load %1;\n+                java.switch.statement %7\n+                    (%8 : java.lang.Byte)boolean -> {\n+                        %9 : int = constant @\"1\";\n+                        %10 : byte = conv %9;\n+                        %11 : java.lang.Byte = invoke %10 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n+                        %12 : boolean = invoke %8 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %12;\n+                    }\n+                    ()void -> {\n+                        %13 : java.lang.String = var.load %6;\n+                        %14 : java.lang.String = constant @\"one\";\n+                        %15 : java.lang.String = add %13 %14;\n+                        var.store %6 %15;\n+                        yield;\n+                    }\n+                    (%16 : java.lang.Byte)boolean -> {\n+                        %17 : byte = var.load %4;\n+                        %18 : java.lang.Byte = invoke %17 @\"java.lang.Byte::valueOf(byte)java.lang.Byte\";\n+                        %19 : boolean = invoke %16 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %19;\n+                    }\n+                    ()void -> {\n+                        %20 : java.lang.String = var.load %6;\n+                        %21 : java.lang.String = constant @\"two\";\n+                        %22 : java.lang.String = add %20 %21;\n+                        var.store %6 %22;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %23 : java.lang.String = var.load %6;\n+                        %24 : java.lang.String = constant @\"default\";\n+                        %25 : java.lang.String = add %23 %24;\n+                        var.store %6 %25;\n+                        yield;\n+                    };\n+                %26 : java.lang.String = var.load %6;\n+                return %26;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String caseConstantConv2(Byte a) {\n+        final byte b = 2;\n+        String r = \"\";\n+        switch (a) {\n+            case 1 -> r+= \"one\"; \/\/ narrowing primitive conversion followed by a boxing conversion, int -> bye -> Byte\n+            case b -> r+= \"two\"; \/\/ boxing, byte -> Byte\n+            default -> r+= \"default\";\n@@ -482,0 +949,1 @@\n+        return r;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":728,"deletions":260,"binary":false,"changes":988,"status":"modified"}]}