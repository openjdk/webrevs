{"files":[{"patch":"@@ -76,1 +76,21 @@\n-    sealed interface JavaStatement permits ArrayAccessOp.ArrayStoreOp, AssertOp, FieldAccessOp.FieldStoreOp, InvokeOp, NewOp, ReturnOp, ThrowOp, VarAccessOp.VarStoreOp, VarOp, ExtendedOp.JavaBlockOp, ExtendedOp.JavaDoWhileOp, ExtendedOp.JavaEnhancedForOp, ExtendedOp.JavaForOp, ExtendedOp.JavaIfOp, ExtendedOp.JavaLabelOp, ExtendedOp.JavaLabeledOp, ExtendedOp.JavaSwitchStatementOp, ExtendedOp.JavaTryOp, ExtendedOp.JavaWhileOp, ExtendedOp.JavaYieldOp {\n+    sealed interface JavaStatement permits\n+            ArrayAccessOp.ArrayStoreOp,\n+            AssertOp,\n+            FieldAccessOp.FieldStoreOp,\n+            InvokeOp,\n+            NewOp,\n+            ReturnOp,\n+            ThrowOp,\n+            VarAccessOp.VarStoreOp,\n+            VarOp,\n+            ExtendedOp.JavaBlockOp,\n+            ExtendedOp.JavaDoWhileOp,\n+            ExtendedOp.JavaEnhancedForOp,\n+            ExtendedOp.JavaForOp,\n+            ExtendedOp.JavaIfOp,\n+            ExtendedOp.JavaLabelOp,\n+            ExtendedOp.JavaLabeledOp,\n+            ExtendedOp.JavaTryOp,\n+            ExtendedOp.JavaWhileOp,\n+            ExtendedOp.JavaYieldOp,\n+            ExtendedOp.JavaSwitchStatementOp {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import com.sun.tools.javac.code.*;\n+import com.sun.tools.javac.code.Flags;\n@@ -32,0 +32,1 @@\n+import com.sun.tools.javac.code.Symbol;\n@@ -35,0 +36,2 @@\n+import com.sun.tools.javac.code.Symtab;\n+import com.sun.tools.javac.code.Type;\n@@ -37,0 +40,2 @@\n+import com.sun.tools.javac.code.Type.MethodType;\n+import com.sun.tools.javac.code.Type.TypeVar;\n@@ -38,1 +43,2 @@\n-import com.sun.tools.javac.code.Type.*;\n+import com.sun.tools.javac.code.TypeTag;\n+import com.sun.tools.javac.code.Types;\n@@ -44,1 +50,8 @@\n-import com.sun.tools.javac.tree.JCTree.*;\n+import com.sun.tools.javac.tree.JCTree.JCArrayAccess;\n+import com.sun.tools.javac.tree.JCTree.JCAssign;\n+import com.sun.tools.javac.tree.JCTree.JCBinary;\n+import com.sun.tools.javac.tree.JCTree.JCBlock;\n+import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n+import com.sun.tools.javac.tree.JCTree.JCExpression;\n+import com.sun.tools.javac.tree.JCTree.JCFieldAccess;\n+import com.sun.tools.javac.tree.JCTree.JCFunctionalExpression;\n@@ -46,0 +59,4 @@\n+import com.sun.tools.javac.tree.JCTree.JCIdent;\n+import com.sun.tools.javac.tree.JCTree.JCLambda;\n+import com.sun.tools.javac.tree.JCTree.JCLiteral;\n+import com.sun.tools.javac.tree.JCTree.JCMemberReference;\n@@ -47,0 +64,8 @@\n+import com.sun.tools.javac.tree.JCTree.JCMethodDecl;\n+import com.sun.tools.javac.tree.JCTree.JCMethodInvocation;\n+import com.sun.tools.javac.tree.JCTree.JCNewArray;\n+import com.sun.tools.javac.tree.JCTree.JCNewClass;\n+import com.sun.tools.javac.tree.JCTree.JCReturn;\n+import com.sun.tools.javac.tree.JCTree.JCVariableDecl;\n+import com.sun.tools.javac.tree.JCTree.JCAssert;\n+import com.sun.tools.javac.tree.JCTree.Tag;\n@@ -49,0 +74,1 @@\n+import com.sun.tools.javac.tree.TreeScanner;\n@@ -50,1 +76,2 @@\n-import com.sun.tools.javac.util.*;\n+import com.sun.tools.javac.util.Assert;\n+import com.sun.tools.javac.util.Context;\n@@ -52,0 +79,5 @@\n+import com.sun.tools.javac.util.ListBuffer;\n+import com.sun.tools.javac.util.Log;\n+import com.sun.tools.javac.util.Name;\n+import com.sun.tools.javac.util.Names;\n+import com.sun.tools.javac.util.Options;\n@@ -60,1 +92,0 @@\n-import java.util.List;\n@@ -65,1 +96,3 @@\n-import static com.sun.tools.javac.code.Flags.*;\n+import static com.sun.tools.javac.code.Flags.NOOUTERTHIS;\n+import static com.sun.tools.javac.code.Flags.PARAMETER;\n+import static com.sun.tools.javac.code.Flags.SYNTHETIC;\n@@ -67,1 +100,3 @@\n-import static com.sun.tools.javac.code.TypeTag.*;\n+import static com.sun.tools.javac.code.TypeTag.BOT;\n+import static com.sun.tools.javac.code.TypeTag.METHOD;\n+import static com.sun.tools.javac.code.TypeTag.NONE;\n@@ -69,4 +104,0 @@\n-import static jdk.internal.java.lang.reflect.code.op.CoreOp._new;\n-import static jdk.internal.java.lang.reflect.code.op.CoreOp._throw;\n-import static jdk.internal.java.lang.reflect.code.type.FunctionType.functionType;\n-import static jdk.internal.java.lang.reflect.code.type.JavaType.type;\n@@ -473,1 +504,1 @@\n-            FunctionType bodyType = functionType(\n+            FunctionType bodyType = FunctionType.functionType(\n@@ -500,1 +531,1 @@\n-            FunctionType mtDesc = functionType(typeToTypeElement(mtype.restype),\n+            FunctionType mtDesc = FunctionType.functionType(typeToTypeElement(mtype.restype),\n@@ -697,1 +728,1 @@\n-                    functionType(typeToTypeElement(box), typeToTypeElement(types.unboxedType(box))));\n+                    FunctionType.functionType(typeToTypeElement(box), typeToTypeElement(types.unboxedType(box))));\n@@ -711,1 +742,1 @@\n-                    functionType(typeToTypeElement(unboxedType)));\n+                    FunctionType.functionType(typeToTypeElement(unboxedType)));\n@@ -1166,1 +1197,1 @@\n-            pushBody(pattern, functionType(patternType));\n+            pushBody(pattern, FunctionType.functionType(patternType));\n@@ -1234,1 +1265,1 @@\n-            FunctionType matchFuncType = functionType(JavaType.VOID, patternDescParams);\n+            FunctionType matchFuncType = FunctionType.functionType(JavaType.VOID, patternDescParams);\n@@ -1289,1 +1320,1 @@\n-            FunctionType constructorType = functionType(\n+            FunctionType constructorType = FunctionType.functionType(\n@@ -1295,1 +1326,1 @@\n-            result = append(_new(typeToTypeElement(type), constructorType, args));\n+            result = append(CoreOp._new(typeToTypeElement(type), constructorType, args));\n@@ -1323,1 +1354,1 @@\n-                FunctionType constructorType = functionType(arrayType,\n+                FunctionType constructorType = FunctionType.functionType(arrayType,\n@@ -1325,1 +1356,1 @@\n-                result = append(_new(arrayType, constructorType, indexes));\n+                result = append(CoreOp._new(arrayType, constructorType, indexes));\n@@ -1420,1 +1451,1 @@\n-                        functionType(JavaType.BOOLEAN));\n+                        FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1468,1 +1499,1 @@\n-            FunctionType caseLabelType = functionType(JavaType.BOOLEAN, target.type());\n+            FunctionType caseLabelType = FunctionType.functionType(JavaType.BOOLEAN, target.type());\n@@ -1470,1 +1501,1 @@\n-            FunctionType actionType = functionType(typeToTypeElement(switchType));\n+            FunctionType actionType = FunctionType.functionType(typeToTypeElement(switchType));\n@@ -1487,1 +1518,1 @@\n-                        pushBody(pcl.pat, functionType(JavaType.BOOLEAN));\n+                        pushBody(pcl.pat, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1493,1 +1524,1 @@\n-                        pushBody(c.guard, functionType(JavaType.BOOLEAN));\n+                        pushBody(c.guard, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1529,1 +1560,1 @@\n-                            pushBody(ccl, functionType(JavaType.BOOLEAN));\n+                            pushBody(ccl, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1619,1 +1650,1 @@\n-            FunctionType caseLabelType = functionType(JavaType.BOOLEAN, target.type());\n+            FunctionType caseLabelType = FunctionType.functionType(JavaType.BOOLEAN, target.type());\n@@ -1637,1 +1668,1 @@\n-                        pushBody(pcl.pat, functionType(JavaType.BOOLEAN));\n+                        pushBody(pcl.pat, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1643,1 +1674,1 @@\n-                        pushBody(c.guard, functionType(JavaType.BOOLEAN));\n+                        pushBody(c.guard, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1679,1 +1710,1 @@\n-                            pushBody(ccl, functionType(JavaType.BOOLEAN));\n+                            pushBody(ccl, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1732,1 +1763,1 @@\n-                            if (!(s instanceof JCThrow)) {\n+                            if (!(s instanceof JCTree.JCThrow)) {\n@@ -1765,1 +1796,1 @@\n-            enhancedSw = enhancedSw && !isEnum(tree.selector.type.tsym);\n+            enhancedSw = enhancedSw && !Flags.isEnum(tree.selector.type.tsym);\n@@ -1779,2 +1810,2 @@\n-                append(_throw(\n-                        append(_new(functionType(type(MatchException.class))))\n+                append(CoreOp._throw(\n+                        append(CoreOp._new(FunctionType.functionType(JavaType.type(MatchException.class))))\n@@ -1805,1 +1836,1 @@\n-            pushBody(cond, functionType(JavaType.BOOLEAN));\n+            pushBody(cond, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1843,1 +1874,1 @@\n-            pushBody(cond, functionType(JavaType.BOOLEAN));\n+            pushBody(cond, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1860,1 +1891,1 @@\n-            pushBody(tree.expr, functionType(typeToTypeElement(tree.expr.type)));\n+            pushBody(tree.expr, FunctionType.functionType(typeToTypeElement(tree.expr.type)));\n@@ -1876,1 +1907,1 @@\n-            pushBody(var, functionType(varEType, eType));\n+            pushBody(var, FunctionType.functionType(varEType, eType));\n@@ -1884,1 +1915,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, varEType));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, varEType));\n@@ -1938,1 +1969,1 @@\n-                pushBody(null, functionType(TupleType.tupleType(varTypes)));\n+                pushBody(null, FunctionType.functionType(TupleType.tupleType(varTypes)));\n@@ -1944,1 +1975,1 @@\n-                pushBody(null, functionType(varTypes.get(0)));\n+                pushBody(null, FunctionType.functionType(varTypes.get(0)));\n@@ -1960,1 +1991,1 @@\n-            pushBody(tree.cond, functionType(JavaType.BOOLEAN, varTypes));\n+            pushBody(tree.cond, FunctionType.functionType(JavaType.BOOLEAN, varTypes));\n@@ -1977,1 +2008,1 @@\n-            pushBody(null, functionType(JavaType.VOID, varTypes));\n+            pushBody(null, FunctionType.functionType(JavaType.VOID, varTypes));\n@@ -1990,1 +2021,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, varTypes));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, varTypes));\n@@ -2014,1 +2045,1 @@\n-                    functionType(JavaType.BOOLEAN));\n+                    FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2029,1 +2060,1 @@\n-                    functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToTypeElement(condType)));\n@@ -2043,1 +2074,1 @@\n-                    functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToTypeElement(condType)));\n@@ -2079,1 +2110,1 @@\n-                    functionType(JavaType.BOOLEAN));\n+                    FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2093,1 +2124,1 @@\n-                         functionType(typeToTypeElement(tree.detail.type)));\n+                         FunctionType.functionType(typeToTypeElement(tree.detail.type)));\n@@ -2166,1 +2197,1 @@\n-                pushBody(null, functionType(TupleType.tupleType(rTypes)));\n+                pushBody(null, FunctionType.functionType(TupleType.tupleType(rTypes)));\n@@ -2193,1 +2224,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, rVarTypes));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, rVarTypes));\n@@ -2207,1 +2238,1 @@\n-                pushBody(catcher.body, functionType(JavaType.VOID, typeToTypeElement(catcher.param.type)));\n+                pushBody(catcher.body, FunctionType.functionType(JavaType.VOID, typeToTypeElement(catcher.param.type)));\n@@ -2289,1 +2320,1 @@\n-                pushBody(tree.lhs, functionType(JavaType.BOOLEAN));\n+                pushBody(tree.lhs, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2299,1 +2330,1 @@\n-                pushBody(tree.rhs, functionType(JavaType.BOOLEAN));\n+                pushBody(tree.rhs, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2385,1 +2416,1 @@\n-            result = append(_throw(throwVal));\n+            result = append(CoreOp._throw(throwVal));\n@@ -2494,1 +2525,1 @@\n-                        typ = type(ClassDesc.of(t.tsym.flatName().toString()));\n+                        typ = JavaType.type(ClassDesc.of(t.tsym.flatName().toString()));\n@@ -2558,1 +2589,1 @@\n-            return functionType(\n+            return FunctionType.functionType(\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":89,"deletions":58,"binary":false,"changes":147,"status":"modified"}]}