{"files":[{"patch":"@@ -1683,0 +1683,2 @@\n+            Body.Builder defaultLabel = null;\n+            Body.Builder defaultStatements = null;\n@@ -1773,1 +1775,1 @@\n-                    bodies.add(stack.body);\n+                    defaultLabel = stack.body;\n@@ -1797,1 +1799,6 @@\n-                        bodies.add(stack.body);\n+\n+                        if (headCl instanceof JCTree.JCDefaultCaseLabel) {\n+                            defaultStatements = stack.body;\n+                        } else {\n+                            bodies.add(stack.body);\n+                        }\n@@ -1813,1 +1820,5 @@\n-                        bodies.add(stack.body);\n+                        if (headCl instanceof JCTree.JCDefaultCaseLabel) {\n+                            defaultStatements = stack.body;\n+                        } else {\n+                            bodies.add(stack.body);\n+                        }\n@@ -1821,1 +1832,4 @@\n-            if (tree.patternSwitch && !tree.hasUnconditionalPattern) {\n+            if (defaultLabel != null) {\n+                bodies.add(defaultLabel);\n+                bodies.add(defaultStatements);\n+            } else if (tree.patternSwitch && !tree.hasUnconditionalPattern) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-        String[] args = {\"FOO\", \"BAR\", \"BAZ\", \"OTHER\"};\n+        Object[] args = {1, \"2\", 3L};\n@@ -149,1 +149,1 @@\n-        for (String arg : args) {\n+        for (Object arg : args) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,0 +489,20 @@\n+    @Test\n+    void testDefaultCaseNotTheLast() {\n+        CoreOp.FuncOp lmodel = lower(\"defaultCaseNotTheLast\");\n+        String[] args = {\"something\", \"M\", \"A\"};\n+        for (String arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), defaultCaseNotTheLast(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    static String defaultCaseNotTheLast(String s) {\n+        String r = \"\";\n+        switch (s) {\n+            default -> r += \"else\";\n+            case \"M\" -> r += \"Mow\";\n+            case \"A\" -> r += \"Aow\";\n+        }\n+        return r;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchStatementOp.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1950,0 +1950,56 @@\n+\n+    @IR(\"\"\"\n+            func @\"defaultCaseNotTheLast\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = constant @\"\";\n+                %3 : Var<java.lang.String> = var %2 @\"r\";\n+                %4 : java.lang.String = var.load %1;\n+                java.switch.statement %4\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.String = constant @\"M\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n+                    }\n+                    ()void -> {\n+                        %8 : java.lang.String = var.load %3;\n+                        %9 : java.lang.String = constant @\"Mow\";\n+                        %10 : java.lang.String = concat %8 %9;\n+                        var.store %3 %10;\n+                        yield;\n+                    }\n+                    (%11 : java.lang.String)boolean -> {\n+                        %12 : java.lang.String = constant @\"A\";\n+                        %13 : boolean = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %13;\n+                    }\n+                    ()void -> {\n+                        %14 : java.lang.String = var.load %3;\n+                        %15 : java.lang.String = constant @\"Aow\";\n+                        %16 : java.lang.String = concat %14 %15;\n+                        var.store %3 %16;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %17 : java.lang.String = var.load %3;\n+                        %18 : java.lang.String = constant @\"else\";\n+                        %19 : java.lang.String = concat %17 %18;\n+                        var.store %3 %19;\n+                        yield;\n+                    };\n+                %20 : java.lang.String = var.load %3;\n+                return %20;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String defaultCaseNotTheLast(String s) {\n+        String r = \"\";\n+        switch (s) {\n+            default -> r += \"else\";\n+            case \"M\" -> r += \"Mow\";\n+            case \"A\" -> r += \"Aow\";\n+        }\n+        return r;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"}]}