{"files":[{"patch":"@@ -115,1 +115,0 @@\n-            \/\/ @@@ expand to support innermost enclosing switch operation\n@@ -125,10 +124,6 @@\n-            \/\/ } while (!(op instanceof Op.Loop lop));\n-            \/\/ error: variable lop might not have been initialized\n-            if (op instanceof Op.Loop lop) {\n-                return lop.loopBody() == b ? op : null;\n-            } else if (op instanceof JavaSwitchStatementOp swStat) {\n-                return swStat.bodies().contains(b) ? op : null;\n-            } else {\n-                \/\/ @@@ can't happen (at least for now)\n-                throw new IllegalStateException();\n-            }\n+\n+            return switch (op) {\n+                case Op.Loop lop -> lop.loopBody() == b ? op : null;\n+                case JavaSwitchStatementOp swStat -> swStat.bodies().contains(b) ? op : null;\n+                default -> throw new IllegalStateException();\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -844,0 +844,1 @@\n+                            \/\/ @@@ avoid boxing of rhs when it's a primitive value\n@@ -1820,11 +1821,1 @@\n-            \/\/ if enhanced switch and no default label\n-            \/\/ enhanced: target type not byte, char short, int, String, or, has case pattern or case null\n-            boolean enhancedSw = !List.of(JavaType.BYTE, JavaType.CHAR, JavaType.SHORT, JavaType.INT,\n-                    JavaType.J_L_BYTE, JavaType.J_L_CHARACTER, JavaType.J_L_SHORT, JavaType.J_L_INTEGER,\n-                    JavaType.J_L_STRING).contains(typeToTypeElement(tree.selector.type));\n-            enhancedSw = enhancedSw && !Flags.isEnum(tree.selector.type.tsym);\n-            enhancedSw = enhancedSw || tree.patternSwitch;\n-            enhancedSw = enhancedSw || tree.cases.stream().anyMatch(c -> c.labels.stream().anyMatch(l -> {\n-                return l instanceof JCTree.JCConstantCaseLabel ccl && ccl.expr instanceof JCLiteral literal && literal.value == null;\n-            }));\n-            if (enhancedSw && !tree.hasUnconditionalPattern) {\n+            if (tree.patternSwitch && !tree.hasUnconditionalPattern) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"}]}