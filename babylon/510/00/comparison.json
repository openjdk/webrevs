{"files":[{"patch":"@@ -78,4 +78,1 @@\n-    if ((status = clGetPlatformIDs(0, NULL, &platformc)) != CL_SUCCESS) {\n-        std::cerr << \"clGetPlatformIDs (to get count) failed \" << errorMsg(status) << std::endl;\n-        std::exit(1);\n-    }\n+    OPENCL_CHECK(clGetPlatformIDs(0, nullptr, &platformc), \"clGetPlatformIDs\");\n@@ -88,1 +85,0 @@\n-        return;\n@@ -91,6 +87,3 @@\n-    if ((status = clGetPlatformIDs(platformc, platforms, nullptr)) != CL_SUCCESS) {\n-        std::cerr << \"clGetPlatformIDs failed \" << errorMsg(status) << std::endl;\n-        std::exit(1);\n-        return;\n-    }\n-    cl_uint devicec = 0;\n+    OPENCL_CHECK(clGetPlatformIDs(platformc, platforms, nullptr), \"clGetPlatformIDs\");\n+\n+    cl_uint numDevices = 0;\n@@ -98,1 +91,1 @@\n-    if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, 0, nullptr, &devicec)) != CL_SUCCESS) {\n+    if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, 0, nullptr, &numDevices)) != CL_SUCCESS) {\n@@ -105,3 +98,3 @@\n-    if (config->device >= devicec) {\n-        std::cerr << \"Platform[\" << config->platform << \"] only has \" << devicec << \" device\" << (\n-                    (devicec > 1) ? \"s\" : \"\") << \" (device[0]-device[\" << (devicec - 1) <<\n+    if (config->device >= numDevices) {\n+        std::cerr << \"Platform[\" << config->platform << \"] only has \" << numDevices << \" device\" << (\n+                    (numDevices > 1) ? \"s\" : \"\") << \" (device[0]-device[\" << (numDevices - 1) <<\n@@ -112,1 +105,0 @@\n-        return;\n@@ -115,1 +107,1 @@\n-    if (devicec == 0) {\n+    if (numDevices == 0) {\n@@ -121,2 +113,2 @@\n-    auto *device_ids = new cl_device_id[devicec]; \/\/ compute device id\n-    if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, devicec, device_ids, nullptr)) != CL_SUCCESS) {\n+    auto *device_ids = new cl_device_id[numDevices]; \/\/ compute device id\n+    if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, numDevices, device_ids, nullptr)) != CL_SUCCESS) {\n@@ -139,2 +131,1 @@\n-        == nullptr ||\n-        status != CL_SUCCESS) {\n+        == nullptr || status != CL_SUCCESS) {\n@@ -241,1 +232,0 @@\n-\n@@ -247,0 +237,1 @@\n+        \/\/ @formatter:off\n@@ -296,0 +287,1 @@\n+                \/\/ @formatter:on\n@@ -313,1 +305,0 @@\n-\n@@ -319,2 +310,1 @@\n-\n-void __checkOpenclErrors(cl_int status, const char *file, const int line) {\n+void __checkOpenclErrors(cl_int status, const char *functionName, const char *file, const int line) {\n@@ -322,1 +312,2 @@\n-        std::cerr << \"Opencl Driver API error = \" << status << \" from file \" << file << \" line \" << line << std::endl;\n+        std::cerr << \"Opencl Error ( \" << functionName << \") with error code: \" << status << \" from file \" << file <<\n+                \" line \" << line << std::endl;\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend.cpp","additions":17,"deletions":26,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -39,4 +39,1 @@\n-    if (status != CL_SUCCESS) {\n-        std::cerr << errorMsg(status) << std::endl;\n-        exit(1);\n-    }\n+    OPENCL_CHECK(status, \"clCreateBuffer\");\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_buffer.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    OPENCL_CHECK(status, \"clGetDeviceInfo\");\n@@ -38,0 +39,1 @@\n+    OPENCL_CHECK(status, \"clGetDeviceInfo\");\n@@ -40,0 +42,1 @@\n+    OPENCL_CHECK(status, \"clGetDeviceInfo\");\n@@ -46,0 +49,1 @@\n+    OPENCL_CHECK(status, \"clGetPlatformInfo\");\n@@ -48,0 +52,1 @@\n+    OPENCL_CHECK(status, \"clGetPlatformInfo\");\n@@ -113,6 +118,6 @@\n-    std::cerr << \"platform{\" <<std::endl;\n-    std::cerr << \"   CL_PLATFORM_VENDOR..\\\"\" << platformInfo.vendorName <<\"\\\"\"<<std::endl;\n-    std::cerr << \"   CL_PLATFORM_VERSION.\\\"\" << platformInfo.versionName <<\"\\\"\"<<std::endl;\n-    std::cerr << \"   CL_PLATFORM_NAME....\\\"\" << platformInfo.name <<\"\\\"\"<<std::endl;\n-    std::cerr << \"         CL_DEVICE_TYPE..................... \" <<  platformInfo.deviceInfo.deviceTypeStr << \" \"<<  platformInfo.deviceInfo.deviceType<<std::endl;\n-    std::cerr << \"         CL_DEVICE_MAX_COMPUTE_UNITS........ \" <<  platformInfo.deviceInfo.maxComputeUnits<<std::endl;\n+    std::cerr << \"platform{\" << std::endl;\n+    std::cerr << \"   CL_PLATFORM_VENDOR..\\\"\" << platformInfo.vendorName <<\"\\\"\"<< std::endl;\n+    std::cerr << \"   CL_PLATFORM_VERSION.\\\"\" << platformInfo.versionName <<\"\\\"\" <<std::endl;\n+    std::cerr << \"   CL_PLATFORM_NAME....\\\"\" << platformInfo.name <<\"\\\"\"<< std::endl;\n+    std::cerr << \"         CL_DEVICE_TYPE..................... \" <<  platformInfo.deviceInfo.deviceTypeStr << \" \"<<  platformInfo.deviceInfo.deviceType << std::endl;\n+    std::cerr << \"         CL_DEVICE_MAX_COMPUTE_UNITS........ \" <<  platformInfo.deviceInfo.maxComputeUnits << std::endl;\n@@ -123,13 +128,13 @@\n-    std::cerr<< \"}\"<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_MAX_WORK_GROUP_SIZE...... \"<<  platformInfo.deviceInfo.maxWorkGroupSize<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_MAX_MEM_ALLOC_SIZE....... \"<<  platformInfo.deviceInfo.maxMemAllocSize<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_GLOBAL_MEM_SIZE.......... \"<<  platformInfo.deviceInfo.globalMemSize<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_LOCAL_MEM_SIZE........... \"<<  platformInfo.deviceInfo.localMemSize<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_PROFILE.................. \"<<  platformInfo.deviceInfo.profile<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_VERSION.................. \"<<  platformInfo.deviceInfo.deviceVersion<<std::endl;\n-    std::cerr <<  \"         CL_DRIVER_VERSION.................. \"<<  platformInfo.deviceInfo.driverVersion<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_OPENCL_C_VERSION......... \"<<  platformInfo.deviceInfo.cVersion<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_NAME..................... \"<<  platformInfo.deviceInfo.name<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_EXTENSIONS............... \"<<  platformInfo.deviceInfo.extensions<<std::endl;\n-    std::cerr <<  \"         CL_DEVICE_BUILT_IN_KERNELS......... \"<<  platformInfo.deviceInfo.builtInKernels<<std::endl;\n-    std::cerr <<  \"}\"<<std::endl;\n+    std::cerr<< \"}\" << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_MAX_WORK_GROUP_SIZE...... \"<<  platformInfo.deviceInfo.maxWorkGroupSize << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_MAX_MEM_ALLOC_SIZE....... \"<<  platformInfo.deviceInfo.maxMemAllocSize << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_GLOBAL_MEM_SIZE.......... \"<<  platformInfo.deviceInfo.globalMemSize << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_LOCAL_MEM_SIZE........... \"<<  platformInfo.deviceInfo.localMemSize << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_PROFILE.................. \"<<  platformInfo.deviceInfo.profile << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_VERSION.................. \"<<  platformInfo.deviceInfo.deviceVersion << std::endl;\n+    std::cerr <<  \"         CL_DRIVER_VERSION.................. \"<<  platformInfo.deviceInfo.driverVersion <<std::endl;\n+    std::cerr <<  \"         CL_DEVICE_OPENCL_C_VERSION......... \"<<  platformInfo.deviceInfo.cVersion << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_NAME..................... \"<<  platformInfo.deviceInfo.name << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_EXTENSIONS............... \"<<  platformInfo.deviceInfo.extensions << std::endl;\n+    std::cerr <<  \"         CL_DEVICE_BUILT_IN_KERNELS......... \"<<  platformInfo.deviceInfo.builtInKernels << std::endl;\n+    std::cerr <<  \"}\" << std::endl;\n@@ -137,1 +142,0 @@\n-\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_info.cpp","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-OpenCLBackend::OpenCLProgram::OpenCLKernel::OpenCLKernel(Backend::CompilationUnit *compilationUnit, char* name, cl_kernel kernel)\n-    : Kernel(compilationUnit, name), kernel(kernel){\n+OpenCLBackend::OpenCLProgram::OpenCLKernel::OpenCLKernel(CompilationUnit *compilationUnit, char* name, cl_kernel kernel)\n+    : Kernel(compilationUnit, name), kernel(kernel) {\n@@ -32,1 +32,1 @@\n-    clReleaseKernel(kernel);\n+    OPENCL_CHECK(clReleaseKernel(kernel), \"clReleaseKernel\");\n@@ -35,1 +35,1 @@\n-bool OpenCLBackend::OpenCLProgram::OpenCLKernel::setArg(KernelArg *arg, Buffer *buffer){\n+bool OpenCLBackend::OpenCLProgram::OpenCLKernel::setArg(KernelArg *arg, Buffer *buffer) {\n@@ -46,1 +46,1 @@\n-    const cl_int status = clSetKernelArg(kernel, arg->idx, arg->size(), (void *) &arg->value);\n+    const cl_int status = clSetKernelArg(kernel, arg->idx, arg->size(), &arg->value);\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_kernel.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    clReleaseProgram(program);\n+    OPENCL_CHECK(clReleaseProgram(program), \"clReleaseProgram\");\n@@ -39,4 +39,2 @@\n-    if (status != CL_SUCCESS){\n-       std::cerr << \"Failed to get kernel \"<<name<<\" \"<<errorMsg(status)<<std::endl;\n-    }\n-    return new OpenCLKernel(this,name, kernel);\n+    OPENCL_CHECK(status, \"clCreateKernel\");\n+    return new OpenCLKernel(this, name, kernel);\n@@ -51,2 +49,0 @@\n-\n-\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_program.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- OpenCLBackend::OpenCLQueue::OpenCLQueue(Backend *backend)\n+OpenCLBackend::OpenCLQueue::OpenCLQueue(Backend *backend)\n@@ -34,2 +34,2 @@\n-      events(new cl_event[eventMax]){\n- }\n+      events(new cl_event[eventMax]) {\n+}\n@@ -37,1 +37,1 @@\n- cl_event *OpenCLBackend::OpenCLQueue::eventListPtr() const {\n+cl_event *OpenCLBackend::OpenCLQueue::eventListPtr() const {\n@@ -39,2 +39,3 @@\n- }\n- cl_event *OpenCLBackend::OpenCLQueue::nextEventPtr() const {\n+}\n+\n+cl_event *OpenCLBackend::OpenCLQueue::nextEventPtr() const {\n@@ -42,1 +43,1 @@\n- }\n+}\n@@ -45,1 +46,1 @@\n-    constexpr int  SAMPLE_TYPES=4;\n+    constexpr int SAMPLE_TYPES = 4;\n@@ -48,2 +49,2 @@\n-    cl_ulong min=CL_LONG_MAX;\n-    cl_ulong max=CL_LONG_MIN;\n+    cl_ulong min = CL_LONG_MAX;\n+    cl_ulong max = CL_LONG_MIN;\n@@ -53,2 +54,6 @@\n-            cl_profiling_info profiling_info_arr[]={CL_PROFILING_COMMAND_QUEUED,CL_PROFILING_COMMAND_SUBMIT,CL_PROFILING_COMMAND_START,CL_PROFILING_COMMAND_END};\n-            if ((clGetEventProfilingInfo(events[event], profiling_info_arr[type], sizeof(samples[sample]), &samples[sample], NULL)) !=\n+            cl_profiling_info profiling_info_arr[] = {\n+                CL_PROFILING_COMMAND_QUEUED,CL_PROFILING_COMMAND_SUBMIT,CL_PROFILING_COMMAND_START,\n+                CL_PROFILING_COMMAND_END\n+            };\n+            if ((clGetEventProfilingInfo(events[event], profiling_info_arr[type], sizeof(samples[sample]),\n+                                         &samples[sample], NULL)) !=\n@@ -56,1 +61,4 @@\n-                const char* profiling_info_name_arr[]={\"CL_PROFILING_COMMAND_QUEUED\",\"CL_PROFILING_COMMAND_SUBMIT\",\"CL_PROFILING_COMMAND_START\",\"CL_PROFILING_COMMAND_END\" };\n+                const char *profiling_info_name_arr[] = {\n+                    \"CL_PROFILING_COMMAND_QUEUED\", \"CL_PROFILING_COMMAND_SUBMIT\", \"CL_PROFILING_COMMAND_START\",\n+                    \"CL_PROFILING_COMMAND_END\"\n+                };\n@@ -60,2 +68,2 @@\n-                if (type == 0){\n-                   min = max = samples[sample];\n+                if (type == 0) {\n+                    min = max = samples[sample];\n@@ -76,4 +84,4 @@\n-    const cl_ulong scale = range \/ width;  \/\/ range per char\n-    std::cout << \"Range: \" <<min<< \"-\" <<max<< \"(\"<< range << \"ns)\"\n-        <<  \"  (\" << scale << \"ns) per char\"\n-        << \" +:submitted, .:started, =:end  \"<< std::endl;\n+    const cl_ulong scale = range \/ width; \/\/ range per char\n+    std::cout << \"Range: \" << min << \"-\" << max << \"(\" << range << \"ns)\"\n+            << \"  (\" << scale << \"ns) per char\"\n+            << \" +:submitted, .:started, =:end  \" << std::endl;\n@@ -82,10 +90,10 @@\n-      \/*  cl_command_type command_type;\n-        clGetEventInfo(events[event],CL_EVENT_COMMAND_TYPE,sizeof(command_type), &command_type, nullptr);\n-        switch (command_type){\n-          case CL_COMMAND_MARKER:         std::cout <<   \"marker \"; break;\n-          case CL_COMMAND_USER:           std::cout <<   \"  user \"; break;\n-          case CL_COMMAND_NDRANGE_KERNEL: std::cout <<   \"kernel \"; break;\n-          case CL_COMMAND_READ_BUFFER:    std::cout <<   \"  read \"; break;\n-          case CL_COMMAND_WRITE_BUFFER:   std::cout <<   \" write \"; break;\n-          default: std::cout <<                          \" other \"; break;\n-        } *\/\n+        \/*  cl_command_type command_type;\n+          clGetEventInfo(events[event],CL_EVENT_COMMAND_TYPE,sizeof(command_type), &command_type, nullptr);\n+          switch (command_type){\n+            case CL_COMMAND_MARKER:         std::cout <<   \"marker \"; break;\n+            case CL_COMMAND_USER:           std::cout <<   \"  user \"; break;\n+            case CL_COMMAND_NDRANGE_KERNEL: std::cout <<   \"kernel \"; break;\n+            case CL_COMMAND_READ_BUFFER:    std::cout <<   \"  read \"; break;\n+            case CL_COMMAND_WRITE_BUFFER:   std::cout <<   \" write \"; break;\n+            default: std::cout <<                          \" other \"; break;\n+          } *\/\n@@ -93,2 +101,2 @@\n-        if ((bits&CopyToDeviceBits)==CopyToDeviceBits){\n-           std::cout <<   \"  write \"<<(bits&0xffff)<<\" \" ;\n+        if ((bits & CopyToDeviceBits) == CopyToDeviceBits) {\n+            std::cout << \"  write \" << (bits & 0xffff) << \" \";\n@@ -96,2 +104,2 @@\n-        if ((bits&CopyFromDeviceBits)==CopyFromDeviceBits){\n-           std::cout <<   \"   read \"<<(bits&0xffff)<<\" \";\n+        if ((bits & CopyFromDeviceBits) == CopyFromDeviceBits) {\n+            std::cout << \"   read \" << (bits & 0xffff) << \" \";\n@@ -99,2 +107,2 @@\n-        if ((bits&StartComputeBits)==StartComputeBits){\n-           std::cout <<   \"  start    \";\n+        if ((bits & StartComputeBits) == StartComputeBits) {\n+            std::cout << \"  start    \";\n@@ -102,2 +110,2 @@\n-        if ((bits&EndComputeBits)==EndComputeBits){\n-           std::cout <<   \"    end    \";\n+        if ((bits & EndComputeBits) == EndComputeBits) {\n+            std::cout << \"    end    \";\n@@ -105,2 +113,2 @@\n-        if ((bits&NDRangeBits)==NDRangeBits){\n-           std::cout <<   \" kernel    \";\n+        if ((bits & NDRangeBits) == NDRangeBits) {\n+            std::cout << \" kernel    \";\n@@ -108,6 +116,5 @@\n-        if ((bits&EnterKernelDispatchBits)==EnterKernelDispatchBits){\n-           if ((bits&HasConstCharPtrArgBits)==HasConstCharPtrArgBits){\n-               std::cout<< eventInfoConstCharPtrArgs[event]<<std::endl;\n-           }\n-           std::cout <<   \"  enter{   \";\n-\n+        if ((bits & EnterKernelDispatchBits) == EnterKernelDispatchBits) {\n+            if ((bits & HasConstCharPtrArgBits) == HasConstCharPtrArgBits) {\n+                std::cout << eventInfoConstCharPtrArgs[event] << std::endl;\n+            }\n+            std::cout << \"  enter{   \";\n@@ -115,7 +122,6 @@\n-        if ((bits&LeaveKernelDispatchBits)==LeaveKernelDispatchBits){\n-          \/\/ std::cout <<   \"  leave    \";\n-            if ((bits&HasConstCharPtrArgBits)==HasConstCharPtrArgBits){\n-                          std::cout<< eventInfoConstCharPtrArgs[event] <<std::endl;\n-                      }\n-                          std::cout <<   \" }leave    \";\n-\n+        if ((bits & LeaveKernelDispatchBits) == LeaveKernelDispatchBits) {\n+            \/\/ std::cout <<   \"  leave    \";\n+            if ((bits & HasConstCharPtrArgBits) == HasConstCharPtrArgBits) {\n+                std::cout << eventInfoConstCharPtrArgs[event] << std::endl;\n+            }\n+            std::cout << \" }leave    \";\n@@ -130,1 +136,1 @@\n-        std::cout << std::setw(20)<< (queue-end) << \"(ns) \";\n+        std::cout << std::setw(20) << (queue - end) << \"(ns) \";\n@@ -133,1 +139,1 @@\n-            if (c >= queue && c<=submit) {\n+            if (c >= queue && c <= submit) {\n@@ -135,1 +141,1 @@\n-            }else if (c>submit && c<start){\n+            } else if (c > submit && c < start) {\n@@ -137,1 +143,1 @@\n-            }else if (c>=start && c<end){\n+            } else if (c >= start && c < end) {\n@@ -146,7 +152,4 @@\n-void OpenCLBackend::OpenCLQueue::wait(){\n-    if (eventc > 0){\n-       cl_int status = clWaitForEvents(eventc, events);\n-       if (status != CL_SUCCESS) {\n-          std::cerr << \"failed clWaitForEvents\" << OpenCLBackend::errorMsg(status) << std::endl;\n-          exit(1);\n-       }\n+\n+void OpenCLBackend::OpenCLQueue::wait() {\n+    if (eventc > 0) {\n+        OPENCL_CHECK(clWaitForEvents(eventc, events), \"clWaitForEvents\");\n@@ -154,19 +157,3 @@\n- }\n-\/\/ void clCallback(void *){\n-  \/\/    std::cerr<<\"start of compute\"<<std::endl;\n-\/\/ }\n-\n-  void OpenCLBackend::OpenCLQueue::marker(int bits){\n-      cl_int status = clEnqueueMarkerWithWaitList(\n-          command_queue,\n-          this->eventc,\n-          this->eventListPtr(),\n-          this->nextEventPtr()\n-          );\n-        if (status != CL_SUCCESS){\n-             std::cerr << \"failed to clEnqueueMarkerWithWaitList \"<<errorMsg(status)<< std::endl;\n-             std::exit(1);\n-         }\n-      inc(bits);\n-  }\n-    void OpenCLBackend::OpenCLQueue::marker(int bits, const char* arg){\n+}\n+\n+void OpenCLBackend::OpenCLQueue::marker(int bits) {\n@@ -175,7 +162,7 @@\n-        this->eventc, this->eventListPtr(),this->nextEventPtr()\n-        );\n-          if (status != CL_SUCCESS){\n-               std::cerr << \"failed to clEnqueueMarkerWithWaitList \"<<errorMsg(status)<< std::endl;\n-               std::exit(1);\n-           }\n-        inc(bits, arg);\n+        this->eventc,\n+        this->eventListPtr(),\n+        this->nextEventPtr()\n+    );\n+    if (status != CL_SUCCESS) {\n+        std::cerr << \"failed to clEnqueueMarkerWithWaitList \" << errorMsg(status) << std::endl;\n+        std::exit(1);\n@@ -183,0 +170,10 @@\n+    inc(bits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::marker(int bits, const char *arg) {\n+    OPENCL_CHECK(clEnqueueMarkerWithWaitList(\n+                     command_queue,\n+                     this->eventc,\n+                     this->eventListPtr(),\n+                     this->nextEventPtr()),\n+                 \"clEnqueueMarkerWithWaitList\");\n@@ -184,0 +181,2 @@\n+    inc(bits, arg);\n+}\n@@ -185,5 +184,0 @@\n- void OpenCLBackend::OpenCLQueue::computeStart(){\n-   wait(); \/\/ should be no-op\n-   release(); \/\/ also ;\n-   marker(StartComputeBits);\n- }\n@@ -191,3 +185,5 @@\n- void OpenCLBackend::OpenCLQueue::computeEnd(){\n-   marker(EndComputeBits);\n- }\n+void OpenCLBackend::OpenCLQueue::computeStart() {\n+    wait(); \/\/ should be no-op\n+    release(); \/\/ also ;\n+    marker(StartComputeBits);\n+}\n@@ -195,5 +191,9 @@\n- void OpenCLBackend::OpenCLQueue::inc(const int bits){\n-    if (eventc+1 >= eventMax){\n-       std::cerr << \"OpenCLBackend::OpenCLQueue event list overflowed!!\" << std::endl;\n-    }else{\n-        eventInfoBits[eventc]=bits;\n+void OpenCLBackend::OpenCLQueue::computeEnd() {\n+    marker(EndComputeBits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::inc(const int bits) {\n+    if (eventc + 1 >= eventMax) {\n+        std::cerr << \"OpenCLBackend::OpenCLQueue event list overflowed!!\" << std::endl;\n+    } else {\n+        eventInfoBits[eventc] = bits;\n@@ -202,1 +202,1 @@\n- }\n+}\n@@ -204,2 +204,2 @@\n-void OpenCLBackend::OpenCLQueue::inc(const int bits, const char *arg){\n-     if (eventc+1 >= eventMax){\n+void OpenCLBackend::OpenCLQueue::inc(const int bits, const char *arg) {\n+    if (eventc + 1 >= eventMax) {\n@@ -207,39 +207,37 @@\n-     }else{\n-         eventInfoBits[eventc]=bits|HasConstCharPtrArgBits;\n-         eventInfoConstCharPtrArgs[eventc]=arg;\n-     }\n-     eventc++;\n- }\n-\n- void OpenCLBackend::OpenCLQueue::markAsEndComputeAndInc(){\n-     inc(EndComputeBits);\n- }\n- void OpenCLBackend::OpenCLQueue::markAsStartComputeAndInc(){\n-     inc(StartComputeBits);\n- }\n-\n- void OpenCLBackend::OpenCLQueue::markAsEnterKernelDispatchAndInc(){\n-     inc(EnterKernelDispatchBits);\n- }\n- void OpenCLBackend::OpenCLQueue::markAsLeaveKernelDispatchAndInc(){\n-     inc(LeaveKernelDispatchBits);\n- }\n-\n- void OpenCLBackend::OpenCLQueue::release(){\n-     cl_int status = CL_SUCCESS;\n-     for (int i = 0; i < eventc; i++) {\n-         status = clReleaseEvent(events[i]);\n-         if (status != CL_SUCCESS) {\n-             std::cerr << OpenCLBackend::errorMsg(status) << std::endl;\n-             exit(1);\n-         }\n-     }\n-     eventc = 0;\n- }\n-\n- OpenCLBackend::OpenCLQueue::~OpenCLQueue(){\n-     clReleaseCommandQueue(command_queue);\n-     delete []events;\n- }\n-\n-void OpenCLBackend::OpenCLQueue::dispatch(KernelContext *kernelContext, Backend::CompilationUnit::Kernel *kernel){\n+    } else {\n+        eventInfoBits[eventc] = bits | HasConstCharPtrArgBits;\n+        eventInfoConstCharPtrArgs[eventc] = arg;\n+    }\n+    eventc++;\n+}\n+\n+void OpenCLBackend::OpenCLQueue::markAsEndComputeAndInc() {\n+    inc(EndComputeBits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::markAsStartComputeAndInc() {\n+    inc(StartComputeBits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::markAsEnterKernelDispatchAndInc() {\n+    inc(EnterKernelDispatchBits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::markAsLeaveKernelDispatchAndInc() {\n+    inc(LeaveKernelDispatchBits);\n+}\n+\n+void OpenCLBackend::OpenCLQueue::release() {\n+    \/\/ TODO: possible check ALL events before return from the macro\n+    for (int i = 0; i < eventc; i++) {\n+        OPENCL_CHECK(clReleaseEvent(events[i]), \"clReleaseEvent\");\n+    }\n+    eventc = 0;\n+}\n+\n+OpenCLBackend::OpenCLQueue::~OpenCLQueue() {\n+    OPENCL_CHECK(clReleaseCommandQueue(command_queue), \"clReleaseCommandQueue\");\n+    delete []events;\n+}\n+\n+void OpenCLBackend::OpenCLQueue::dispatch(KernelContext *kernelContext, Backend::CompilationUnit::Kernel *kernel) {\n@@ -268,4 +266,1 @@\n-    if (status != CL_SUCCESS) {\n-        std::cerr << errorMsg(status) << std::endl;\n-        exit(1);\n-    }\n+    OPENCL_CHECK(status, \"clEnqueueNDRangeKernel\");\n@@ -273,1 +268,2 @@\n-        std::cout << \"enqueued kernel dispatch \\\"\" << kernel->name << \"\\\" globalSize=\" << kernelContext->maxX << std::endl;\n+        std::cout << \"enqueued kernel dispatch \\\"\" << kernel->name << \"\\\" globalSize=\" << kernelContext->maxX <<\n+                std::endl;\n@@ -277,2 +273,1 @@\n-void OpenCLBackend::OpenCLQueue::copyToDevice(Backend::Buffer *buffer) {\n-\n+void OpenCLBackend::OpenCLQueue::copyToDevice(Buffer *buffer) {\n@@ -281,9 +276,9 @@\n-            command_queue,\n-            openclBuffer->clMem,\n-            CL_FALSE,\n-            0,\n-            buffer->bufferState->length,\n-            buffer->bufferState->ptr,\n-            eventc,\n-            eventListPtr(),\n-            nextEventPtr()\n+        command_queue,\n+        openclBuffer->clMem,\n+        CL_FALSE,\n+        0,\n+        buffer->bufferState->length,\n+        buffer->bufferState->ptr,\n+        eventc,\n+        eventListPtr(),\n+        nextEventPtr()\n@@ -292,4 +287,2 @@\n-    if (status != CL_SUCCESS) {\n-        std::cerr << OpenCLBackend::errorMsg(status) << std::endl;\n-        exit(1);\n-    }\n+    OPENCL_CHECK(status, \"clEnqueueWriteBuffer\");\n+\n@@ -297,1 +290,1 @@\n-  \/\/  markAsCopyToDeviceAndInc();\n+    \/\/  markAsCopyToDeviceAndInc();\n@@ -300,1 +293,1 @@\n-void  OpenCLBackend::OpenCLQueue::copyFromDevice(Backend::Buffer *buffer) {\n+void OpenCLBackend::OpenCLQueue::copyFromDevice(Buffer *buffer) {\n@@ -303,9 +296,9 @@\n-            command_queue,\n-            openclBuffer->clMem,\n-            CL_FALSE,\n-            0,\n-            buffer->bufferState->length,\n-            buffer->bufferState->ptr,\n-            eventc,\n-            eventListPtr(),\n-            nextEventPtr()\n+        command_queue,\n+        openclBuffer->clMem,\n+        CL_FALSE,\n+        0,\n+        buffer->bufferState->length,\n+        buffer->bufferState->ptr,\n+        eventc,\n+        eventListPtr(),\n+        nextEventPtr()\n@@ -313,4 +306,1 @@\n-    if (status != CL_SUCCESS) {\n-        std::cerr << OpenCLBackend::errorMsg(status) << std::endl;\n-        exit(1);\n-    }\n+    OPENCL_CHECK(status, \"clEnqueueReadBuffer\");\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_queue.cpp","additions":169,"deletions":179,"binary":false,"changes":348,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+\n@@ -125,1 +126,1 @@\n-    kernel->ndrange( reinterpret_cast<ArgArray_s *>(&args2Array));\n+    kernel->ndrange(&args2Array);\n@@ -130,1 +131,0 @@\n-\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/squares.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-   #include <opencl\/opencl.h>\n+#include <opencl\/opencl.h>\n@@ -50,1 +50,1 @@\n-extern void __checkOpenclErrors(cl_int status, const char *file, const int line);\n+extern void __checkOpenclErrors(cl_int status, const char *functionName, const char *file, const int line);\n@@ -52,1 +52,1 @@\n-#define checkOpenCLErrors(err)  __checkOpenclErrors (err, __FILE__, __LINE__)\n+#define OPENCL_CHECK(err, functionName) __checkOpenclErrors (err, functionName, __FILE__, __LINE__)\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/include\/opencl_backend.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}