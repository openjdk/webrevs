{"files":[{"patch":"@@ -26,1 +26,1 @@\n- package experiments;\n+package experiments;\n@@ -29,13 +29,13 @@\n- import java.lang.reflect.Method;\n- import java.lang.reflect.code.CopyContext;\n- import java.lang.reflect.code.Op;\n- import java.lang.reflect.code.OpTransformer;\n- import java.lang.reflect.code.TypeElement;\n- import java.lang.reflect.code.Value;\n- import java.lang.reflect.code.interpreter.Interpreter;\n- import java.lang.reflect.code.op.CoreOp;\n- import java.lang.reflect.code.type.JavaType;\n- import java.lang.reflect.code.type.MethodRef;\n- import java.lang.runtime.CodeReflection;\n- import java.util.List;\n- import java.util.Map;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.reflect.code.type.MethodRef;\n+import java.lang.runtime.CodeReflection;\n+import java.util.List;\n+import java.util.Map;\n@@ -43,1 +43,1 @@\n- public class PrePostInc {\n+public class PrePostInc {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/PrePostInc.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-        import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandle;\n@@ -37,1 +37,1 @@\n-        import java.lang.reflect.code.analysis.SSA;\n+import java.lang.reflect.code.analysis.SSA;\n@@ -46,1 +46,1 @@\n-        import java.util.stream.Stream;\n+import java.util.stream.Stream;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/RawLayout.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/MandelViewer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.io.File;\n+import java.io.*;\n@@ -36,0 +36,4 @@\n+import java.nio.file.*;\n+import java.util.stream.Stream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n@@ -70,0 +74,1 @@\n+   static Pattern trailingWhitespacePattern=Pattern.compile(\".*  *\");\n@@ -107,1 +112,1 @@\n-         out.println(\"javaVersion \"+javaVersion+\" looks OK\");\n+         \/\/out.println(\"javaVersion \"+javaVersion+\" looks OK\");\n@@ -127,1 +132,1 @@\n-                         out.println(\"pom.xml has property '\"+key+\"' with value '\"+value+\"' but that dir does not exists! BAD\");\n+                         err.println(\"ERR pom.xml has property '\"+key+\"' with value '\"+value+\"' but that dir does not exists!\");\n@@ -136,1 +141,1 @@\n-                 out.println(\"pom.xml expected to have property '\"+key+\"' \");\n+                 err.println(\"ERR pom.xml expected to have property '\"+key+\"' \");\n@@ -144,2 +149,0 @@\n-            out.println(\"babylon.dir '\"+babylonDir+\"' is parent of JAVA_HOME OK\");\n-\n@@ -148,1 +151,0 @@\n-               out.println(\"hat.dir='\"+hatDir+\"' OK\");\n@@ -152,1 +154,0 @@\n-\n@@ -154,1 +155,0 @@\n-\n@@ -157,4 +157,3 @@\n-                     if (spirvDir.exists()) {\n-                        out.println(\"OK \"+spirvDirKey + \" -> '\" + spirvDir + \"' dir exists and module included in backends\");\n-                     } else {\n-                        out.println(\"ERR \"+spirvDirKey + \" -> '\" + spirvDir + \"' dir does not exists but module included in backends \");\n+                     if (!spirvDir.exists()) {\n+                        err.println(\"ERR \"+spirvDirKey + \" -> '\" + spirvDir + \"' dir does not exists but module included in backends \");\n+                        System.exit(1);\n@@ -163,1 +162,2 @@\n-                     out.println(\"ERR \"+spirvDirKey + \" -> variable dir does not exists but module included in backends \");\n+                     err.println(\"ERR \"+spirvDirKey + \" -> variable dir does not exists but module included in backends \");\n+                     System.exit(1);\n@@ -169,1 +169,1 @@\n-                        out.println(\"ERR \"+spirvDirKey+\" -> '\"+spirvDir+\"' dir exists but spirv module not included in backends \");\n+                        out.println(\"WRN \"+spirvDirKey+\" -> '\"+spirvDir+\"' exists but spirv module not included in backends \");\n@@ -171,1 +171,1 @@\n-                        out.println(\"WARN \"+spirvDirKey+\" -> '\"+spirvDir+\"' dir does not exist and not included in backends \");\n+                        out.println(\"INF \"+spirvDirKey+\" -> '\"+spirvDir+\"' does not exist and not included in backends \");\n@@ -173,2 +173,0 @@\n-                  }else{\n-                     out.println(\"OK \"+ spirvDirKey + \" -> variable dir does not exist and module not included in backends \");\n@@ -178,1 +176,2 @@\n-               out.println(\"hat.dir='\"+hatDir+\"' != ${pwd}='\"+pwd+\"' BAD\");\n+               err.println(\"ERR hat.dir='\"+hatDir+\"' != ${pwd}='\"+pwd+\"'\");\n+               System.exit(1);\n@@ -181,1 +180,2 @@\n-            out.println(\"babylon.dir '\"+babylonDir+\"' is not a child of javaHome '\"+javaHome+\"' BAD\");\n+            err.println(\"ERR babylon.dir '\"+babylonDir+\"' is not a child of javaHome '\"+javaHome+\"'\");\n+            System.exit(1);\n@@ -184,1 +184,2 @@\n-         err.println(\"Incorrect Java version. Is babylon jdk in your path? BAD\");\n+         err.println(\"ERR Incorrect Java version. Is babylon jdk in your path?\");\n+         System.exit(1);\n@@ -186,0 +187,36 @@\n+\n+      Set.of(\"hat\", \"examples\", \"backends\").forEach(dirName->{\n+         try{\n+            Files.walk(Paths.get(dirName)).filter(p->{\n+              var name = p.toString();\n+              return !name.contains(\"cmake-build-debug\")\n+                && !name.contains(\"rleparser\")\n+                && ( name.endsWith(\".java\") || name.endsWith(\".cpp\") || name.endsWith(\".h\"));\n+              }).forEach(path->{\n+                try{\n+                   boolean license = false;\n+                   for (String line: Files.readAllLines(path,  StandardCharsets.UTF_8)){\n+                      if (line.contains(\"\\t\")){\n+                        err.println(\"ERR TAB \"+path+\":\"+line);\n+                      }\n+                      if (line.endsWith(\" \")) {\n+                        err.println(\"ERR TRAILING WHITESPACE \"+path+\":\"+line);\n+                      }\n+                      if (Pattern.matches(\"^  *(package|import).*$\",line)) { \/\/ I saw this a few times....?\n+                        err.println(\"ERR WEIRD INDENT \"+path+\":\"+line);\n+                      }\n+                      if (Pattern.matches(\"^.*Copyright.*202[4-9].*Oracle.*$\",line)) { \/\/ not foolproof I know\n+                        license = true;\n+                      }\n+                   }\n+                   if (!license){\n+                      err.println(\"ERR MISSING LICENSE \"+path);\n+                   }\n+                } catch(IOException ioe){\n+                  err.println(ioe);\n+                }\n+            });\n+         } catch(IOException ioe){\n+           err.println(ioe);\n+         }\n+      });\n","filename":"hat\/sanity.java","additions":58,"deletions":21,"binary":false,"changes":79,"status":"modified"}]}