{"files":[{"patch":"@@ -187,1 +187,1 @@\n-    private record ExceptionRegionWithBlocks(CoreOp.ExceptionRegionEnter ere, BitSet blocks) {}\n+    private record ExceptionRegionWithBlocks(ExceptionRegionEnter ere, BitSet blocks) {}\n@@ -281,1 +281,1 @@\n-                or.op() instanceof CoreOp.ConstantOp constantOp &&\n+                or.op() instanceof ConstantOp constantOp &&\n@@ -296,1 +296,17 @@\n-            cob.loadLocal(slot.typeKind(), slot.slot());\n+            if (slot == null) {\n+                if (v instanceof Op.Result or) {\n+                    \/\/ Handling of deferred variables\n+                    switch (or.op()) {\n+                        case VarOp vop ->\n+                            load(vop.initOperand());\n+                        case VarAccessOp.VarLoadOp vlop ->\n+                            load(vlop.varOperand());\n+                        default ->\n+                            throw new IllegalStateException(\"Missing slot for: \" + or.op());\n+                    }\n+                } else {\n+                    throw new IllegalStateException(\"Missing slot for: \" + v);\n+                }\n+            } else {\n+                cob.loadLocal(slot.typeKind(), slot.slot());\n+            }\n@@ -346,1 +362,1 @@\n-        return op.result().uses().isEmpty()\n+        return !moreThanOneUse(op.result())\n@@ -368,1 +384,1 @@\n-            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp bto ->\n+            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof BinaryTestOp bto ->\n@@ -395,1 +411,1 @@\n-    private static boolean isConditionForCondBrOp(CoreOp.BinaryTestOp op) {\n+    private static boolean isConditionForCondBrOp(BinaryTestOp op) {\n@@ -416,1 +432,1 @@\n-        return use.op() instanceof CoreOp.ConditionalBranchOp;\n+        return use.op() instanceof ConditionalBranchOp;\n@@ -448,1 +464,1 @@\n-                case CoreOp.BranchOp bop ->\n+                case BranchOp bop ->\n@@ -450,1 +466,1 @@\n-                case CoreOp.ConditionalBranchOp cop -> {\n+                case ConditionalBranchOp cop -> {\n@@ -454,1 +470,1 @@\n-                case CoreOp.ExceptionRegionEnter er -> {\n+                case ExceptionRegionEnter er -> {\n@@ -465,1 +481,1 @@\n-                case CoreOp.ExceptionRegionExit er -> {\n+                case ExceptionRegionExit er -> {\n@@ -932,1 +948,1 @@\n-                case CoreOp.ReturnOp op -> {\n+                case ReturnOp op -> {\n@@ -948,1 +964,1 @@\n-                    if (getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp btop) {\n+                    if (getConditionForCondBrOp(op) instanceof BinaryTestOp btop) {\n@@ -1006,1 +1022,1 @@\n-    private static Op getConditionForCondBrOp(CoreOp.ConditionalBranchOp op) {\n+    private static Op getConditionForCondBrOp(ConditionalBranchOp op) {\n@@ -1200,1 +1216,1 @@\n-    static CoreOp.FuncOp quote(CoreOp.LambdaOp lop) {\n+    static FuncOp quote(LambdaOp lop) {\n@@ -1207,1 +1223,1 @@\n-        FunctionType ft = FunctionType.functionType(CoreOp.QuotedOp.QUOTED_TYPE, params);\n+        FunctionType ft = FunctionType.functionType(QuotedOp.QUOTED_TYPE, params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":32,"deletions":16,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                case ITEM_NULL -> params.add(JavaType.wildcard());\n+                case ITEM_NULL -> params.add(JavaType.J_L_OBJECT);\n@@ -328,1 +328,1 @@\n-                    sl.var.value = op(CoreOp.var(initLocalValues.get(i)));\n+                    sl.var.value = op(CoreOp.var(\"slot#\" + i, sl.var.type(), initLocalValues.get(i)));\n@@ -442,1 +442,1 @@\n-                            var.value = op(CoreOp.var(null, var.type(), stack.pop()));\n+                            var.value = op(CoreOp.var(\"slot#\" + inst.slot(), var.type(), stack.pop()));\n@@ -848,1 +848,1 @@\n-                case null -> op(CoreOp.constant(JavaType.wildcard(), null));\n+                case null -> op(CoreOp.constant(JavaType.J_L_OBJECT, null));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            return type == NULL_TYPE ? JavaType.wildcard() : JavaType.type(type);\n+            return JavaType.type(type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-        \/\/ Roundtrip is >98% stable, no exceptions, no verification errors\n-        Assert.assertTrue(stable > 64490 && unstable < 870 && errorStats.isEmpty(), String.format(\"\"\"\n+        \/\/ Roundtrip is >99% stable, no exceptions, no verification errors\n+        Assert.assertTrue(stable > 65240 && unstable < 120 && errorStats.isEmpty(), String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}