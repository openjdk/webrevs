{"files":[{"patch":"@@ -187,1 +187,1 @@\n-    private record ExceptionRegionWithBlocks(CoreOp.ExceptionRegionEnter ere, BitSet blocks) {}\n+    private record ExceptionRegionWithBlocks(ExceptionRegionEnter ere, BitSet blocks) {}\n@@ -203,1 +203,1 @@\n-    private Op.Result oprOnStack;\n+    private Value oprOnStack;\n@@ -281,1 +281,1 @@\n-                or.op() instanceof CoreOp.ConstantOp constantOp &&\n+                or.op() instanceof ConstantOp constantOp &&\n@@ -296,1 +296,17 @@\n-            cob.loadLocal(slot.typeKind(), slot.slot());\n+            if (slot == null) {\n+                if (v instanceof Op.Result or) {\n+                    \/\/ Handling of deferred variables\n+                    switch (or.op()) {\n+                        case VarOp vop ->\n+                            load(vop.initOperand());\n+                        case VarAccessOp.VarLoadOp vlop ->\n+                            load(vlop.varOperand());\n+                        default ->\n+                            throw new IllegalStateException(\"Missing slot for: \" + or.op());\n+                    }\n+                } else {\n+                    throw new IllegalStateException(\"Missing slot for: \" + v);\n+                }\n+            } else {\n+                cob.loadLocal(slot.typeKind(), slot.slot());\n+            }\n@@ -344,1 +360,1 @@\n-    \/\/ Var with a single-use block parameter operand can be deferred\n+    \/\/ Var with a single-use entry block parameter operand can be deferred\n@@ -346,1 +362,2 @@\n-        return op.operands().getFirst() instanceof Block.Parameter bp && bp.uses().size() == 1;\n+        return !moreThanOneUse(op.result())\n+            || op.operands().getFirst() instanceof Block.Parameter bp && bp.declaringBlock().isEntryBlock() && !moreThanOneUse(bp);\n@@ -355,1 +372,1 @@\n-    private static boolean isFirstOperand(Op nextOp, Op.Result opr) {\n+    private static boolean isFirstOperand(Op nextOp, Value opr) {\n@@ -367,1 +384,1 @@\n-            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp bto ->\n+            case ConditionalBranchOp op when getConditionForCondBrOp(op) instanceof BinaryTestOp bto ->\n@@ -382,1 +399,5 @@\n-    private static boolean isNextUse(Op.Result opr) {\n+    private static boolean isNextUse(Value opr) {\n+        Op nextOp = switch (opr) {\n+            case Block.Parameter p -> p.declaringBlock().firstOp();\n+            case Op.Result r -> r.declaringBlock().nextOp(r.op());\n+        };\n@@ -384,4 +405,3 @@\n-        Op nextOp = opr.op();\n-        do {\n-            nextOp = opr.declaringBlock().nextOp(nextOp);\n-        } while (canDefer(nextOp));\n+        while (canDefer(nextOp)) {\n+            nextOp = nextOp.parentBlock().nextOp(nextOp);\n+        }\n@@ -391,1 +411,1 @@\n-    private static boolean isConditionForCondBrOp(CoreOp.BinaryTestOp op) {\n+    private static boolean isConditionForCondBrOp(BinaryTestOp op) {\n@@ -412,1 +432,1 @@\n-        return use.op() instanceof CoreOp.ConditionalBranchOp;\n+        return use.op() instanceof ConditionalBranchOp;\n@@ -444,1 +464,1 @@\n-                case CoreOp.BranchOp bop ->\n+                case BranchOp bop ->\n@@ -446,1 +466,1 @@\n-                case CoreOp.ConditionalBranchOp cop -> {\n+                case ConditionalBranchOp cop -> {\n@@ -450,1 +470,1 @@\n-                case CoreOp.ExceptionRegionEnter er -> {\n+                case ExceptionRegionEnter er -> {\n@@ -461,1 +481,1 @@\n-                case CoreOp.ExceptionRegionExit er -> {\n+                case ExceptionRegionExit er -> {\n@@ -522,0 +542,2 @@\n+            oprOnStack = null;\n+\n@@ -525,1 +547,1 @@\n-                storeIfUsed(b.parameters().get(0));\n+                push(b.parameters().getFirst());\n@@ -529,1 +551,0 @@\n-            oprOnStack = null;\n@@ -538,1 +559,6 @@\n-                            cob.ldc(((JavaType)op.value()).toNominalDescriptor());\n+                            Object v = op.value();\n+                            if (v == null) {\n+                                cob.aconst_null();\n+                            } else {\n+                                cob.ldc(((JavaType)v).toNominalDescriptor());\n+                            }\n@@ -545,2 +571,5 @@\n-                            \/\/ Var with a single-use block parameter operand can be deferred\n-                            slots.put(op.result(), slots.get(op.operands().getFirst()));\n+                            Slot s = slots.get(op.operands().getFirst());\n+                            if (s != null) {\n+                                \/\/ Var with a single-use entry block parameter can reuse its slot\n+                                slots.put(op.result(), s);\n+                            }\n@@ -548,3 +577,2 @@\n-                            processOperand(op.operands().getFirst());\n-                            allocateSlot(op.result());\n-                            push(op.result());\n+                            processFirstOperand(op);\n+                            storeIfUsed(op.result());\n@@ -558,1 +586,1 @@\n-                            processFirstOperand(op);\n+                            load(op.operands().getFirst());\n@@ -564,1 +592,2 @@\n-                        storeIfUsed(op.operands().get(0));\n+                        Slot slot = allocateSlot(op.operands().getFirst());\n+                        cob.storeLocal(slot.typeKind(), slot.slot());\n@@ -919,1 +948,1 @@\n-                case CoreOp.ReturnOp op -> {\n+                case ReturnOp op -> {\n@@ -935,1 +964,1 @@\n-                    if (getConditionForCondBrOp(op) instanceof CoreOp.BinaryTestOp btop) {\n+                    if (getConditionForCondBrOp(op) instanceof BinaryTestOp btop) {\n@@ -958,2 +987,2 @@\n-    private static boolean moreThanOneUse(Op.Result res) {\n-        return res.uses().stream().flatMap(u ->\n+    private static boolean moreThanOneUse(Value val) {\n+        return val.uses().stream().flatMap(u ->\n@@ -964,1 +993,1 @@\n-                .filter(res::equals).limit(2).count() > 1;\n+                .filter(val::equals).limit(2).count() > 1;\n@@ -967,1 +996,1 @@\n-    private void push(Op.Result res) {\n+    private void push(Value res) {\n@@ -993,1 +1022,1 @@\n-    private static Op getConditionForCondBrOp(CoreOp.ConditionalBranchOp op) {\n+    private static Op getConditionForCondBrOp(ConditionalBranchOp op) {\n@@ -1187,1 +1216,1 @@\n-    static CoreOp.FuncOp quote(CoreOp.LambdaOp lop) {\n+    static FuncOp quote(LambdaOp lop) {\n@@ -1194,1 +1223,1 @@\n-        FunctionType ft = FunctionType.functionType(CoreOp.QuotedOp.QUOTED_TYPE, params);\n+        FunctionType ft = FunctionType.functionType(QuotedOp.QUOTED_TYPE, params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":67,"deletions":38,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+    private final List<Value> initLocalValues;\n@@ -125,1 +126,2 @@\n-        ArrayList<ClassDesc> locals = new ArrayList<>();\n+        List<ClassDesc> initLocalTypes = new ArrayList<>();\n+        this.initLocalValues = new ArrayList<>();\n@@ -127,1 +129,0 @@\n-            op(SlotOp.store(locals.size(), val));\n@@ -129,2 +130,6 @@\n-            locals.add(locType);\n-            if (TypeKind.from(locType).slotSize() == 2) locals.add(null);\n+            initLocalTypes.add(locType);\n+            initLocalValues.add(val);\n+            if (TypeKind.from(locType).slotSize() == 2) {\n+                initLocalTypes.add(null);\n+                initLocalValues.add(null);\n+            }\n@@ -132,1 +137,1 @@\n-        this.codeTracker = new LocalsTypeMapper(classModel.thisClass().asSymbol(), locals, smta, elements);\n+        this.codeTracker = new LocalsTypeMapper(classModel.thisClass().asSymbol(), initLocalTypes, codeModel.exceptionHandlers(), smta, elements);\n@@ -264,5 +269,0 @@\n-        CoreOp.FuncOp lifted = liftToSlots(methodModel);\n-        return SlotSSA.transform(lifted);\n-     }\n-\n-    private static CoreOp.FuncOp liftToSlots(MethodModel methodModel) {\n@@ -321,0 +321,12 @@\n+        \/\/ Declare initial variables\n+        for (int i = 0; i < codeTracker.slotsToInitialize.size(); i++) {\n+            LocalsTypeMapper.Slot sl = codeTracker.slotsToInitialize.get(i);\n+            if (sl != null) {\n+                if (sl.var.isSingleValue) {\n+                    sl.var.value = initLocalValues.get(i);\n+                } else {\n+                    sl.var.value = op(CoreOp.var(\"slot#\" + i, sl.var.type(), initLocalValues.get(i)));\n+                }\n+            }\n+        }\n+\n@@ -414,1 +426,8 @@\n-                    stack.push(op(SlotOp.load(inst.slot(), JavaType.type(codeTracker.getTypeOf(i)))));\n+                    LocalsTypeMapper.Variable var = codeTracker.getVarOf(i);\n+                    if (var.isSingleValue) {\n+                        assert var.value != null;\n+                        stack.push(var.value);\n+                    } else {\n+                        assert var.value instanceof Op.Result r && r.op() instanceof CoreOp.VarOp;\n+                        stack.push(op(CoreOp.varLoad(var.value)));\n+                    }\n@@ -417,1 +436,12 @@\n-                    op(SlotOp.store(inst.slot(), stack.pop()));\n+                    LocalsTypeMapper.Variable var = codeTracker.getVarOf(i);\n+                    if (var.isSingleValue) {\n+                        assert var.value == null;\n+                        var.value = stack.pop();\n+                    } else {\n+                        if (var.value == null) {\n+                            var.value = op(CoreOp.var(\"slot#\" + inst.slot(), var.type(), stack.pop()));\n+                        } else {\n+                            assert var.value instanceof Op.Result r && r.op() instanceof CoreOp.VarOp;\n+                            op(CoreOp.varStore(var.value, stack.pop()));\n+                        }\n+                    }\n@@ -420,2 +450,4 @@\n-                    op(SlotOp.store(inst.slot(), op(CoreOp.add(\n-                            op(SlotOp.load(inst.slot(), JavaType.INT)),\n+                    LocalsTypeMapper.Variable var = codeTracker.getVarOf(i);\n+                    assert !var.isSingleValue && var.value instanceof Op.Result r && r.op() instanceof CoreOp.VarOp;\n+                    op(CoreOp.varStore(var.value, op(CoreOp.add(\n+                            op(CoreOp.varLoad(var.value)),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":46,"deletions":14,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -47,3 +50,5 @@\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.DynamicConstantDesc;\n-import java.lang.constant.MethodTypeDesc;\n+import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.type.JavaType;\n+import java.util.ArrayDeque;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n@@ -53,1 +58,13 @@\n-    record Frame(List<ClassDesc> stack, List<ClassDesc> locals) {}\n+    static class Variable {\n+        private ClassDesc type;\n+        boolean isSingleValue;\n+        Value value;\n+\n+        JavaType type() {\n+            return JavaType.type(type);\n+        }\n+    }\n+\n+    static class Slot {\n+\n+        record Link(Slot slot, Link other) {}\n@@ -55,1 +72,19 @@\n-    private final Map<Integer, ClassDesc> insMap;\n+        ClassDesc type;\n+        Link up, down;\n+        Variable var;\n+        boolean newValue;\n+\n+\n+        void link(Slot target) {\n+            if (this != target) {\n+                target.up = new Link(this, target.up);\n+                this.down = new Link(target, this.down);\n+            }\n+        }\n+    }\n+\n+    record Frame(List<ClassDesc> stack, List<Slot> locals) {}\n+\n+    private static final ClassDesc NULL_TYPE = ClassDesc.ofDescriptor(CD_Object.descriptorString());\n+    private final Map<Integer, Slot> insMap;\n+    private final Set<Slot> allSlots;\n@@ -57,2 +92,4 @@\n-    private final List<ClassDesc> stack, locals;\n-    final Map<Label, Frame> stackMap;\n+    private final List<ExceptionCatch> exceptionHandlers;\n+    private final List<ClassDesc> stack;\n+    private final List<Slot> locals;\n+    private final Map<Label, Frame> stackMap;\n@@ -61,0 +98,1 @@\n+    final List<Slot> slotsToInitialize;\n@@ -64,0 +102,1 @@\n+                         List<ExceptionCatch> exceptionHandlers,\n@@ -68,0 +107,1 @@\n+        this.exceptionHandlers = exceptionHandlers;\n@@ -69,1 +109,2 @@\n-        this.locals = new ArrayList<>(initFrameLocals.size());\n+        this.locals = new ArrayList<>();\n+        this.allSlots = new LinkedHashSet<>();\n@@ -71,0 +112,1 @@\n+        this.slotsToInitialize = new ArrayList<>();\n@@ -74,0 +116,3 @@\n+        for (ClassDesc cd : initFrameLocals) {\n+            slotsToInitialize.add(cd == null ? null : newSlot(cd, true));\n+        }\n@@ -75,1 +120,3 @@\n-            this.locals.addAll(initFrameLocals);\n+            for (int i = 0; i < initFrameLocals.size(); i++) {\n+                store(i, slotsToInitialize.get(i), locals);\n+            }\n@@ -82,0 +129,31 @@\n+\n+        \/\/ Assign variable to slots and calculate var type\n+        ArrayDeque<Slot> q = new ArrayDeque<>();\n+        for (Slot slot : allSlots) {\n+            if (slot.var == null) {\n+                Variable var = new Variable();\n+                q.add(slot);\n+                int sources = 0;\n+                var.type = slot.type;\n+                while (!q.isEmpty()) {\n+                    Slot v = q.pop();\n+                    if (v.var == null) {\n+                        if (v.newValue) sources++;\n+                        v.var = var;\n+                        Slot.Link l = v.up;\n+                        while (l != null) {\n+                            if (var.type == NULL_TYPE) var.type = l.slot.type;\n+                            if (l.slot.var == null) q.add(l.slot);\n+                            l = l.other;\n+                        }\n+                        l = v.down;\n+                        while (l != null) {\n+                            if (var.type == NULL_TYPE) var.type = l.slot.type;\n+                            if (l.slot.var == null) q.add(l.slot);\n+                            l = l.other;\n+                        }\n+                    }\n+                }\n+                var.isSingleValue = sources < 2;\n+            }\n+        }\n@@ -86,1 +164,1 @@\n-        List<ClassDesc> flocals = new ArrayList<>(smfi.locals().size() * 2);\n+        List<Slot> flocals = new ArrayList<>(smfi.locals().size() * 2);\n@@ -90,0 +168,1 @@\n+        int i = 0;\n@@ -91,4 +170,2 @@\n-            flocals.add(vtiToStackType(vti));\n-            if (vti == ITEM_DOUBLE || vti == ITEM_LONG) {\n-                flocals.add(null);\n-            }\n+            store(i, vtiToStackType(vti), flocals, false);\n+            i += vti == ITEM_DOUBLE || vti == ITEM_LONG ? 2 : 1;\n@@ -117,2 +194,2 @@\n-    ClassDesc getTypeOf(int li) {\n-        return insMap.get(li);\n+    Variable getVarOf(int li) {\n+        return insMap.get(li).var;\n@@ -121,2 +198,6 @@\n-    ClassDesc getUninitTypeOf(Label newLabel) {\n-        return newMap.get(newLabel);\n+    private Slot newSlot(ClassDesc type, boolean newValue) {\n+        Slot s = new Slot();\n+        s.type = type;\n+        s.newValue = newValue;\n+        allSlots.add(s);\n+        return s;\n@@ -132,1 +213,1 @@\n-            case ITEM_NULL -> CD_Object;\n+            case ITEM_NULL -> NULL_TYPE;\n@@ -179,2 +260,12 @@\n-        for (int i = locals.size(); i <= slot; i++) locals.add(null);\n-        locals.set(slot, type);\n+        store(slot, type, locals, true);\n+    }\n+\n+    private void store(int slot, ClassDesc type, List<Slot> where, boolean newValue) {\n+        store(slot, type == null ? null : newSlot(type, newValue), where);\n+    }\n+\n+    private void store(int slot, Slot s, List<Slot> where) {\n+        if (s != null) {\n+            for (int i = where.size(); i <= slot; i++) where.add(null);\n+            where.set(slot, s);\n+        }\n@@ -184,1 +275,1 @@\n-        return locals.get(slot);\n+        return locals.get(slot).type;\n@@ -211,1 +302,1 @@\n-                    case null -> CD_Object;\n+                    case null -> NULL_TYPE;\n@@ -218,0 +309,1 @@\n+                    case DynamicConstantDesc<?> cd when cd.equals(NULL) -> NULL_TYPE;\n@@ -236,0 +328,6 @@\n+            case IncrementInstruction i -> {\n+                Slot v = locals.get(i.slot());\n+                store(i.slot(), load(i.slot()));\n+                v.link(locals.get(i.slot()));\n+                insMap.put(elIndex, v);\n+            }\n@@ -245,1 +343,1 @@\n-            case StoreInstruction i ->\n+            case StoreInstruction i -> {\n@@ -247,0 +345,2 @@\n+                insMap.put(elIndex, locals.get(i.slot()));\n+            }\n@@ -305,0 +405,5 @@\n+                for (ExceptionCatch ec : exceptionHandlers) {\n+                    if (lt.label() == ec.tryStart()) {\n+                        mergeLocalsToTargetFrame(stackMap.get(ec.handler()));\n+                    }\n+                }\n@@ -341,3 +446,7 @@\n-            if (!se.equals(fe) && se.isPrimitive() && CD_int.equals(fe)) {\n-                targetFrame.stack.set(i, se);\n-                this.frameDirty = true;\n+            if (!se.equals(fe)) {\n+                if (se.isPrimitive() && CD_int.equals(fe)) {\n+                    targetFrame.stack.set(i, se); \/\/ Override int target frame type with more specific int sub-type\n+                    this.frameDirty = true;\n+                } else {\n+                    stack.set(i, fe); \/\/ Override stack type with target frame type\n+                }\n@@ -346,0 +455,4 @@\n+        mergeLocalsToTargetFrame(targetFrame);\n+    }\n+\n+    private void mergeLocalsToTargetFrame(Frame targetFrame) {\n@@ -349,5 +462,12 @@\n-            ClassDesc le = locals.get(i);\n-            ClassDesc fe = targetFrame.locals.get(i);\n-            if (le != null && !le.equals(fe) && le.isPrimitive() && CD_int.equals(fe)) {\n-                targetFrame.locals.set(i, le);\n-                this.frameDirty = true;\n+            Slot le = locals.get(i);\n+            Slot fe = targetFrame.locals.get(i);\n+            if (le != null && fe != null) {\n+                fe.link(le); \/\/ Link target frame var with its source\n+                if (!le.type.equals(fe.type)) {\n+                    if (le.type.isPrimitive() && CD_int.equals(fe.type) ) {\n+                        fe.type = le.type; \/\/ Override int target frame type with more specific int sub-type\n+                        this.frameDirty = true;\n+                    } else {\n+                        le.type = fe.type; \/\/ Override var type with target frame type\n+                    }\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java","additions":152,"deletions":32,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.reflect.code.bytecode;\n-\n-import java.lang.reflect.code.CopyContext;\n-import java.lang.reflect.code.OpTransformer;\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.Value;\n-import java.lang.reflect.code.op.ExternalizableOp;\n-import java.lang.reflect.code.op.OpFactory;\n-import java.lang.reflect.code.type.JavaType;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-public abstract class SlotOp extends ExternalizableOp {\n-    public static final String ATTRIBUTE_SLOT = \"slot\";\n-\n-    final int slot;\n-\n-    protected SlotOp(SlotOp that, CopyContext cc) {\n-        super(that, cc);\n-        this.slot = that.slot;\n-    }\n-\n-    protected SlotOp(String name, List<? extends Value> operands, int slot) {\n-        super(name, operands);\n-        this.slot = slot;\n-    }\n-\n-    protected SlotOp(ExternalizedOp def) {\n-        super(def);\n-\n-        this.slot = def.extractAttributeValue(ATTRIBUTE_SLOT, true,\n-                v -> switch (v) {\n-                    case String s -> Integer.parseInt(s);\n-                    case Integer i -> i;\n-                    case null, default -> throw new UnsupportedOperationException(\"Unsupported slot value:\" + v);\n-                });\n-    }\n-\n-    public int slot() {\n-        return slot;\n-    }\n-\n-    @Override\n-    public Map<String, Object> attributes() {\n-        HashMap<String, Object> m = new HashMap<>(super.attributes());\n-        m.put(\"\", slot);\n-        return Collections.unmodifiableMap(m);\n-    }\n-\n-    @OpFactory.OpDeclaration(SlotLoadOp.NAME)\n-    public static final class SlotLoadOp extends SlotOp {\n-        public static final String NAME = \"slot.load\";\n-\n-        final TypeElement resultType;\n-\n-        public SlotLoadOp(ExternalizedOp opdef) {\n-            super(opdef);\n-\n-            if (!opdef.operands().isEmpty()) {\n-                throw new IllegalArgumentException(\"Operation must not have any operands\");\n-            }\n-\n-            this.resultType = opdef.resultType();\n-        }\n-\n-        SlotLoadOp(SlotLoadOp that, CopyContext cc) {\n-            super(that, cc);\n-            this.resultType = that.resultType;\n-        }\n-\n-        @Override\n-        public SlotLoadOp transform(CopyContext cc, OpTransformer ot) {\n-            return new SlotLoadOp(this, cc);\n-        }\n-\n-        SlotLoadOp(int slot, TypeElement resultType) {\n-            super(NAME, List.of(), slot);\n-            this.resultType = resultType;\n-        }\n-\n-        @Override\n-        public TypeElement resultType() {\n-            return resultType;\n-        }\n-    }\n-\n-    @OpFactory.OpDeclaration(SlotStoreOp.NAME)\n-    public static final class SlotStoreOp extends SlotOp {\n-        public static final String NAME = \"slot.store\";\n-\n-        public SlotStoreOp(ExternalizedOp opdef) {\n-            super(opdef);\n-\n-            if (opdef.operands().size() != 1) {\n-                throw new IllegalArgumentException(\"Operation must have one operand\");\n-            }\n-        }\n-\n-        SlotStoreOp(SlotStoreOp that, CopyContext cc) {\n-            super(that, cc);\n-        }\n-\n-        @Override\n-        public SlotStoreOp transform(CopyContext cc, OpTransformer ot) {\n-            return new SlotStoreOp(this, cc);\n-        }\n-\n-        SlotStoreOp(int slot, Value v) {\n-            super(NAME, List.of(v), slot);\n-        }\n-\n-        @Override\n-        public TypeElement resultType() {\n-            return JavaType.VOID;\n-        }\n-    }\n-\n-    public static SlotLoadOp load(int slot) {\n-        return load(slot, JavaType.J_L_OBJECT);\n-    }\n-\n-    public static SlotLoadOp load(int slot, TypeElement resultType) {\n-        return new SlotLoadOp(slot, resultType);\n-    }\n-\n-    public static SlotStoreOp store(int slot, Value v) {\n-        return new SlotStoreOp(slot, v);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotOp.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -1,366 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.bytecode;\n-\n-import java.lang.reflect.code.*;\n-import java.lang.reflect.code.bytecode.SlotOp;\n-import java.lang.reflect.code.op.CoreOp;\n-import java.lang.reflect.code.type.PrimitiveType;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-\/**\n- * Functionality to transform a code model into pure SSA form, replacing operations that declare variables and\n- * access them with the use of values they depend on or additional block parameters.\n- *\/\n-public final class SlotSSA {\n-    private SlotSSA() {\n-    }\n-\n-    \/**\n-     * Applies an SSA transformation to an invokable operation, replacing operations that declare variables and\n-     * access them with the use of values they depend on or additional block parameters.\n-     * <p>\n-     * The operation should first be in lowered form before applying this transformation.\n-     * <p>\n-     * Note: this implementation does not currently work correctly when a variable is stored to within an exception\n-     * region and read from outside as a result of catching an exception. In such cases a complete transformation may be\n-     * not possible and such variables will need to be retained.\n-     *\n-     * @param iop the invokable operation\n-     * @return the transformed operation\n-     * @param <T> the invokable type\n-     *\/\n-    public static <T extends Op & Op.Invokable> T transform(T iop) {\n-        Map<Block, Map<Integer, TypeElement>> joinPoints = new HashMap<>();\n-        Map<SlotOp.SlotLoadOp, Object> loadValues = new HashMap<>();\n-        Map<Block.Reference, List<SlotValue>> joinSuccessorValues = new HashMap<>();\n-\n-        Map<Body, Boolean> visited = new HashMap<>();\n-        Map<Block, Map<Integer, Block.Parameter>> joinBlockArguments = new HashMap<>();\n-        @SuppressWarnings(\"unchecked\")\n-        T liop = (T) iop.transform(CopyContext.create(), (block, op) -> {\n-            \/\/ Compute join points and value mappings for body\n-            visited.computeIfAbsent(op.ancestorBody(), b -> {\n-                findJoinPoints(b, joinPoints);\n-                variableToValue(b, joinPoints, loadValues, joinSuccessorValues);\n-                return true;\n-            });\n-\n-            if (op instanceof SlotOp) {\n-                \/\/ Drop slot operations\n-                if (op instanceof SlotOp.SlotLoadOp vl) {\n-                    \/\/ Replace result of load\n-                    Object loadValue = loadValues.get(vl);\n-                    CopyContext cc = block.context();\n-                    Value v = loadValue instanceof SlotBlockArgument vba\n-                        ? joinBlockArguments.get(vba.b()).get(vba.slot())\n-                        : cc.getValue((Value) loadValue);\n-                    cc.mapValue(op.result(), v);\n-                }\n-            } else if (op instanceof Op.Terminating) {\n-                for (Block.Reference s : op.successors()) {\n-                    List<SlotValue> joinValues = joinSuccessorValues.get(s);\n-                    \/\/ Successor has join values\n-                    if (joinValues != null) {\n-                        CopyContext cc = block.context();\n-\n-                        \/\/ Lazily append target block arguments\n-                        joinBlockArguments.computeIfAbsent(s.targetBlock(), b -> {\n-                            Block.Builder bb = cc.getBlock(b);\n-                            return joinPoints.get(b).entrySet().stream().collect(Collectors.toMap(\n-                                    me -> me.getKey(),\n-                                    me -> bb.parameter(me.getValue())));\n-                        });\n-\n-                        \/\/ Append successor arguments\n-                        List<Value> values = new ArrayList<>();\n-                        for (SlotValue sv : joinValues) {\n-                            Value v = sv.value instanceof SlotBlockArgument vba\n-                                    ? joinBlockArguments.get(vba.b()).get(vba.slot())\n-                                    : cc.getValue((Value) sv.value);\n-                            values.add(v);\n-                        }\n-\n-                        \/\/ Map successor with append arguments\n-                        List<Value> toArgs = cc.getValues(s.arguments());\n-                        toArgs.addAll(values);\n-                        Block.Reference toS = cc.getBlock(s.targetBlock()).successor(toArgs);\n-                        cc.mapSuccessor(s, toS);\n-                    }\n-                }\n-\n-                block.apply(op);\n-            } else {\n-                block.apply(op);\n-            }\n-\n-            return block;\n-        });\n-        return liop;\n-    }\n-\n-    record SlotBlockArgument(Block b, int slot) {\n-    }\n-\n-    record SlotValue(int slot, Object value) {\n-    }\n-\n-    \/\/ @@@ Check for var uses in exception regions\n-    \/\/     A variable cannot be converted to SAA form if the variable is stored\n-    \/\/     to in an exception region and accessed from an associated catch region\n-\n-    static void variableToValue(Body body,\n-                                Map<Block, Map<Integer, TypeElement>> joinPoints,\n-                                Map<SlotOp.SlotLoadOp, Object> loadValues,\n-                                Map<Block.Reference, List<SlotValue>> joinSuccessorValues) {\n-        Map<Integer, Deque<Object>> variableStack = new HashMap<>();\n-        Node top = buildDomTree(body.entryBlock(), body.immediateDominators());\n-        variableToValue(top, variableStack, joinPoints, loadValues, joinSuccessorValues);\n-    }\n-\n-    \/**\n-     * Replaces usages of a variable with the corresponding value, from a given block node in the dominator tree.\n-     * <p>\n-     * The result of a {@code VarLoadOp} for variable, {@code V} say the result of a {@code VarOp} operation,\n-     * is replaced with the value passed as an operand to the immediately dominating {@code VarStoreOp} that operates\n-     * on {@code V}, or a block argument representing the equivalent of a phi-value of {@code V}.\n-     * After which, any related {@code VarOp}, {@code VarLoadOp}, or {@code VarStoreOp} operations are removed.\n-     *\n-     * @param n             the node in the dominator tree\n-     * @param variableStack the variable stack\n-     * @param joinPoints    the join points\n-     * @implNote See \"Efficiently Computing Static Single Assignment Form and the Control Dependence Graph\" by Ron Cytron et. al.\n-     * Section 5.2 and Figure 12.\n-     *\/\n-    static void variableToValue(Node n,\n-                                Map<Integer, Deque<Object>> variableStack,\n-                                Map<Block, Map<Integer, TypeElement>> joinPoints,\n-                                Map<SlotOp.SlotLoadOp, Object> loadValues,\n-                                Map<Block.Reference, List<SlotValue>> joinSuccessorValues) {\n-\n-        int size = n.b().ops().size();\n-\n-        \/\/ Check if slot is associated with block argument (phi)\n-        \/\/ Push argument onto slot's stack\n-        {\n-            Map<Integer, TypeElement> slots = joinPoints.get(n.b());\n-            if (slots != null) {\n-                slots.forEach((slot, _) -> {\n-                    \/\/ Regular variable is always declared in a dominant block, so it can be asserted in the variable SSA trasform.\n-                    \/\/ However slot is never declared, so it cannot be asserted in the SlotSSA transform.\n-                    variableStack.computeIfAbsent(slot, _ -> new ArrayDeque<>()).push(new SlotBlockArgument(n.b(), slot));\n-                });\n-            }\n-        }\n-\n-        {\n-            for (int i = 0; i < size - 1; i++) {\n-                Op op = n.b().ops().get(i);\n-\n-                if (op instanceof SlotOp.SlotStoreOp storeOp) {\n-                    \/\/ Value assigned to slot\n-                    Value current = op.operands().get(0);\n-                    \/\/ The slot is always stored without any prior declaration\n-                    variableStack.computeIfAbsent(storeOp.slot(), _ -> new ArrayDeque<>())\n-                            .push(current);\n-                } else if (op instanceof SlotOp.SlotLoadOp loadOp) {\n-                    Object to = variableStack.get(loadOp.slot()).peek();\n-                    loadValues.put(loadOp, to);\n-                }\n-            }\n-\n-            \/\/ Add successor args for joint points\n-            for (Block.Reference succ : n.b().successors()) {\n-                Map<Integer, TypeElement> slots = joinPoints.get(succ.targetBlock());\n-                if (slots != null) {\n-                    List<SlotValue> joinValues = slots.keySet().stream()\n-                            .map(vop -> new SlotValue(vop, variableStack.get(vop).peek())).toList();\n-                    joinSuccessorValues.put(succ, joinValues);\n-                }\n-            }\n-        }\n-\n-        \/\/ Traverse children of dom tree\n-        for (Node y : n.children()) {\n-            variableToValue(y, variableStack, joinPoints, loadValues, joinSuccessorValues);\n-        }\n-\n-        \/\/ Pop off values for slots\n-        {\n-            Map<Integer, TypeElement> slots = joinPoints.get(n.b());\n-            if (slots != null) {\n-                slots.forEach((slot, _) -> {\n-                    variableStack.get(slot).pop();\n-                });\n-            }\n-\n-            for (int i = 0; i < size - 1; i++) {\n-                Op op = n.b().ops().get(i);\n-\n-                if (op instanceof SlotOp.SlotStoreOp storeOp) {\n-                    variableStack.get(storeOp.slot()).pop();\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Finds the join points of a body.\n-     * <p>\n-     * A join point is a block that is in the dominance frontier of one or more predecessors, that make one or more\n-     * stores to variables (using the {@code VarStoreOp} operation on the result of a {@code VarOp} operation).\n-     * The join point contains the set variables ({@code VarOp} operations) that are stored to.\n-     * <p>\n-     * A variable of a joint point indicates that a block argument may need to be added to the join point's block\n-     * when converting variables to SSA form. Different values of a variable may occur at different control flow\n-     * paths at the join point. The block argument represents the convergence of multiple values for the same\n-     * variable, where a predecessor assigns to the block argument.\n-     * (Block arguments are equivalent to phi-values, or phi-nodes, used in other representations.)\n-     *\n-     * @param body the body.\n-     * @param joinPoints the returned join points.\n-     * @implNote See \"Efficiently Computing Static Single Assignment Form and the Control Dependence Graph\" by Ron Cytron et. al.\n-     * Section 5.1 and Figure 11.\n-     *\/\n-    public static void findJoinPoints(Body body, Map<Block, Map<Integer, TypeElement>> joinPoints) {\n-        Map<Block, Set<Block>> df = body.dominanceFrontier();\n-\n-        \/\/ @@@ Remove all catch blocks from dominance frontier to avoid adding block parameters to them\n-        for (Block b : body.blocks()) {\n-            if (b.terminatingOp() instanceof CoreOp.ExceptionRegionEnter ere) {\n-                df.values().forEach(dfs -> dfs.removeAll(ere.catchBlocks().stream().map(Block.Reference::targetBlock).toList()));\n-            }\n-        }\n-\n-        Map<Integer, SlotAccesses> a = findSlots(body);\n-\n-        int iterCount = 0;\n-        int[] hasAlready = new int[body.blocks().size()];\n-        int[] work = new int[body.blocks().size()];\n-\n-        Deque<Block> w = new ArrayDeque<>();\n-\n-        for (int slot : a.keySet()) {\n-            SlotAccesses sa = a.get(slot);\n-\n-            iterCount++;\n-            for (Block x : sa.stores) {\n-                work[x.index()] = iterCount;\n-                w.push(x);\n-            }\n-            while (!w.isEmpty()) {\n-                Block x = w.pop();\n-\n-                for (Block y : df.getOrDefault(x, Set.of())) {\n-                    if (hasAlready[y.index()] < iterCount) {\n-                        Set<SlotOp.SlotLoadOp> slotLoads = sa.loadsBeforeStores.get(y);\n-                        if (slotLoads != null) {\n-                            var slo = slotLoads.stream().filter(sl -> sl.slot == slot).findFirst();\n-                            if (slo.isPresent()) {\n-                                joinPoints.computeIfAbsent(y, _ -> new LinkedHashMap<>()).put(slot, slo.get().resultType());\n-                            }\n-                        }\n-                        hasAlready[y.index()] = iterCount;\n-\n-                        if (work[y.index()] < iterCount) {\n-                            work[y.index()] = iterCount;\n-                            w.push(y);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    record SlotAccesses(Set<Block> stores, Map<Block, Set<SlotOp.SlotLoadOp>> loadsBeforeStores) {\n-        public SlotAccesses() {\n-            this(new LinkedHashSet<>(), new LinkedHashMap<>());\n-        }\n-    }\n-\n-    \/\/ Returns map of slots to blocks that contain stores and to blocks containing load preceeding store\n-    \/\/ Throws ISE if a descendant store operation is encountered\n-    \/\/ @@@ Compute map for whole tree, then traverse keys with filter\n-    static Map<Integer, SlotAccesses> findSlots(Body r) {\n-        LinkedHashMap<Integer, SlotAccesses> slotMap = new LinkedHashMap<>();\n-        for (Block b : r.blocks()) {\n-            for (Op op : b.ops()) {\n-                if (op instanceof SlotOp.SlotStoreOp storeOp) {\n-                    slotMap.computeIfAbsent(storeOp.slot(), _ -> new SlotAccesses()).stores.add(storeOp.parentBlock());\n-                } else if (op instanceof SlotOp.SlotLoadOp loadOp) {\n-                    var sa = slotMap.computeIfAbsent(loadOp.slot(), _ -> new SlotAccesses());\n-                    if (!sa.stores.contains(loadOp.parentBlock())) sa.loadsBeforeStores.computeIfAbsent(loadOp.parentBlock(), _ -> new LinkedHashSet<>()).add(loadOp);\n-                }\n-            }\n-        }\n-\n-        int iterCount = 0;\n-        int[] work = new int[r.blocks().size()];\n-        Deque<Map.Entry<Block, Set<SlotOp.SlotLoadOp>>> w = new ArrayDeque<>();\n-        for (SlotAccesses sa : slotMap.values()) {\n-            iterCount++;\n-            for (var cb : sa.loadsBeforeStores.entrySet()) {\n-                work[cb.getKey().index()] = iterCount;\n-                w.push(cb);\n-            }\n-            while (!w.isEmpty()) {\n-                var x = w.pop();\n-                \/\/ propagate loadsBeforeStores to predecessor blocks\n-                for (Block y : x.getKey().predecessors()) {\n-                    if (work[y.index()] < iterCount){\n-                        work[y.index()] = iterCount;\n-                        if (!sa.stores.contains(y) && !sa.loadsBeforeStores.containsKey(y)) {\n-                            sa.loadsBeforeStores.put(y, x.getValue());\n-                            w.push(Map.entry(y, x.getValue()));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        return slotMap;\n-    }\n-\n-    record Node(Block b, Set<Node> children) {\n-    }\n-\n-    static Node buildDomTree(Block entryBlock, Map<Block, Block> idoms) {\n-        Map<Block, Node> tree = new HashMap<>();\n-        for (Map.Entry<Block, Block> e : idoms.entrySet()) {\n-            Block id = e.getValue();\n-            Block b = e.getKey();\n-\n-            Node parent = tree.computeIfAbsent(id, _k -> new Node(_k, new HashSet<>()));\n-            if (b == entryBlock) {\n-                continue;\n-            }\n-\n-            Node child = tree.computeIfAbsent(b, _k -> new Node(_k, new HashSet<>()));\n-            parent.children.add(child);\n-        }\n-        return tree.get(entryBlock);\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotSSA.java","additions":0,"deletions":366,"binary":false,"changes":366,"status":"deleted"},{"patch":"@@ -524,0 +524,13 @@\n+    @CodeReflection\n+    static int varModifiedInTryBlock(boolean b) {\n+        int i = 0;\n+        try {\n+            i++;\n+            if (b) throw new Exception();\n+            i++;\n+            throw new Exception();\n+        } catch (Exception ex) {\n+            return i;\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        Assert.assertTrue(stable > 65200 && unstable < 140 && errorStats.isEmpty(), String.format(\"\"\"\n+        Assert.assertTrue(stable > 65240 && unstable < 120 && errorStats.isEmpty(), String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}