{"files":[{"patch":"@@ -203,1 +203,1 @@\n-    private Op.Result oprOnStack;\n+    private Value oprOnStack;\n@@ -346,1 +346,2 @@\n-        return op.operands().getFirst() instanceof Block.Parameter bp && bp.declaringBlock().isEntryBlock() && !moreThanOneUse(bp);\n+        return op.result().uses().isEmpty()\n+            || op.operands().getFirst() instanceof Block.Parameter bp && bp.declaringBlock().isEntryBlock() && !moreThanOneUse(bp);\n@@ -355,1 +356,1 @@\n-    private static boolean isFirstOperand(Op nextOp, Op.Result opr) {\n+    private static boolean isFirstOperand(Op nextOp, Value opr) {\n@@ -382,1 +383,5 @@\n-    private static boolean isNextUse(Op.Result opr) {\n+    private static boolean isNextUse(Value opr) {\n+        Op nextOp = switch (opr) {\n+            case Block.Parameter p -> p.declaringBlock().firstOp();\n+            case Op.Result r -> r.declaringBlock().nextOp(r.op());\n+        };\n@@ -384,4 +389,3 @@\n-        Op nextOp = opr.op();\n-        do {\n-            nextOp = opr.declaringBlock().nextOp(nextOp);\n-        } while (canDefer(nextOp));\n+        while (canDefer(nextOp)) {\n+            nextOp = nextOp.parentBlock().nextOp(nextOp);\n+        }\n@@ -522,0 +526,2 @@\n+            oprOnStack = null;\n+\n@@ -525,1 +531,1 @@\n-                storeIfUsed(b.parameters().getFirst());\n+                push(b.parameters().getFirst());\n@@ -529,1 +535,0 @@\n-            oprOnStack = null;\n@@ -550,2 +555,5 @@\n-                            \/\/ Var with a single-use entry block parameter can reuse its slot\n-                            slots.put(op.result(), slots.get(op.operands().getFirst()));\n+                            Slot s = slots.get(op.operands().getFirst());\n+                            if (s != null) {\n+                                \/\/ Var with a single-use entry block parameter can reuse its slot\n+                                slots.put(op.result(), s);\n+                            }\n@@ -972,1 +980,1 @@\n-    private void push(Op.Result res) {\n+    private void push(Value res) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        Assert.assertTrue(stable > 64400 && unstable < 930 && errorStats.isEmpty(), String.format(\"\"\"\n+        Assert.assertTrue(stable > 64490 && unstable < 870 && errorStats.isEmpty(), String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}