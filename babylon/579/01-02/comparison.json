{"files":[{"patch":"@@ -142,1 +142,1 @@\n-        oparen();\n+        \/\/oparen();\n@@ -146,1 +146,1 @@\n-        cparen();\n+        \/\/cparen();\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import java.util.function.Predicate;\n+import java.util.Set;\n@@ -348,1 +348,12 @@\n-        return OpTk.precedenceOf(parent) < OpTk.precedenceOf(child);\n+        int parentValue = OpTk.precedenceOf(parent);\n+        int childValue = OpTk.precedenceOf(child);\n+        if (parentValue < childValue) {\n+            return true;\n+        } else if (parentValue == childValue) {\n+            \/\/ Check there is no dependency with another operation\n+            \/\/ If so, we need to generate a parenthesis\n+            Set<Value> values = parent.result().dependsOn();\n+            Op.Result result1 = child.result();\n+            return values.contains(result1);\n+        }\n+        return false;\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpTk.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -63,0 +63,9 @@\n+    @CodeReflection\n+    public static void compute3(@RO KernelContext context, @RW S32Array data) {\n+        final int TN = 2;\n+        final int TF = 128;\n+        final int MAX = 1024;\n+        int c = MAX * (TF + 2) \/ ((TN * TF) \/ (TN * TN));\n+        data.array(context.x, c);\n+    }\n+\n@@ -75,0 +84,6 @@\n+    @CodeReflection\n+    public static void compute3(@RO ComputeContext cc, @RW S32Array data) {\n+        ComputeRange computeRange = new ComputeRange(new GlobalMesh1D(data.length()));\n+        cc.dispatchKernel(computeRange,kc -> compute3(kc, data));\n+    }\n+\n@@ -111,0 +126,18 @@\n+    @HatTest\n+    public static void testParenthesis03() {\n+        final int size = 1;\n+        var accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+        var data = S32Array.create(accelerator, size);\n+\n+        \/\/ Initialize array\n+        data.fill(_ -> 0);\n+\n+        accelerator.compute(cc -> TestParenthesis.compute3(cc, data));\n+\n+        final int TN = 2;\n+        final int TF = 128;\n+        final int MAX = 1024;\n+        int c = MAX * (TF + 2) \/ ((TN * TF) \/ (TN * TN));\n+        HatAsserts.assertEquals(c, data.array(0));\n+    }\n+\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestParenthesis.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}