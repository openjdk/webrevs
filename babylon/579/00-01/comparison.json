{"files":[{"patch":"@@ -54,0 +54,9 @@\n+    @CodeReflection\n+    public static void compute2(@RO KernelContext context, @RW S32Array data) {\n+        final int TN = 2;\n+        final int TF = 128;\n+        final int MAX = 1024;\n+        int c = MAX \/ ((TN * TF) \/ (TN * TN));\n+        data.array(context.x, c);\n+    }\n+\n@@ -60,0 +69,6 @@\n+    @CodeReflection\n+    public static void compute2(@RO ComputeContext cc, @RW S32Array data) {\n+        ComputeRange computeRange = new ComputeRange(new GlobalMesh1D(data.length()));\n+        cc.dispatchKernel(computeRange,kc -> compute2(kc, data));\n+    }\n+\n@@ -61,1 +76,1 @@\n-    public static void testVectorAddition() {\n+    public static void testParenthesis01() {\n@@ -75,3 +90,19 @@\n-        for (int i = 0; i < data.length(); i++) {\n-            HatAsserts.assertEquals(c, data.array(i));\n-        }\n+        HatAsserts.assertEquals(c, data.array(0));\n+    }\n+\n+    @HatTest\n+    public static void testParenthesis02() {\n+        final int size = 1;\n+        var accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+        var data = S32Array.create(accelerator, size);\n+\n+        \/\/ Initialize array\n+        data.fill(_ -> 0);\n+\n+        accelerator.compute(cc -> TestParenthesis.compute2(cc, data));\n+\n+        final int TN = 2;\n+        final int TF = 128;\n+        final int MAX = 1024;\n+        int c = MAX \/ ((TN * TF) \/ (TN * TN));\n+        HatAsserts.assertEquals(c, data.array(0));\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestParenthesis.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"}]}