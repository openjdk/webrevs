{"files":[{"patch":"@@ -401,0 +401,1 @@\n+\n@@ -402,5 +403,5 @@\n-                            ifOpWrapper.wrappedYieldOpStream(\n-                                    ifOpWrapper.op.bodies().get(c.value()).entryBlock())\n-                            \/\/        ifOpWrapper.firstBlockOfBodyN(c.value()))\n-                            .forEach((wrapped) ->\n-                                    recurse(buildContext, wrapped))\n+                            ifOpWrapper.op.bodies().get(c.value()).entryBlock()            \/\/ get the entryblock if bodies[c.value]\n+                                    .ops().stream().filter(o->o instanceof CoreOp.YieldOp) \/\/ we want all the yields\n+                                    .forEach((yield) ->\n+                                            recurse(buildContext, OpWrapper.wrap(ifOpWrapper.lookup,yield))\n+                                    )\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -38,1 +39,1 @@\n-        return wrappedYieldOpStream(op.bodies().getFirst().entryBlock()\/*firstBlockOfBodyN(0)*\/);\n+       return  op.init().entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->OpWrapper.wrap(lookup,o) );\n@@ -43,1 +44,1 @@\n-        return wrappedYieldOpStream(op.bodies().get(1).entryBlock()\/*firstBlockOfBodyN(1)*\/);\n+        return  op.cond().entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->OpWrapper.wrap(lookup,o) );\n@@ -47,1 +48,1 @@\n-        return wrappedRootOpStream(op.bodies().get(2).entryBlock()\/*firstBlockOfBodyN(2)*\/);\n+          return wrappedRootOpStream(op.bodies().get(2).entryBlock()\/*firstBlockOfBodyN(2)*\/);\n@@ -52,1 +53,1 @@\n-        return wrappedRootOpStreamSansFinalContinue(op.bodies().get(3).entryBlock()\/*firstBlockOfBodyN(3)*\/);\n+          return wrappedRootOpStreamSansFinalContinue(op.bodies().get(3).entryBlock()\/*firstBlockOfBodyN(3)*\/);\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/ForOpWrapper.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -68,5 +68,0 @@\n-    public boolean isKernelContextMethod() {\n-        return isAssignable(javaRefType(), KernelContext.class);\n-\n-    }\n-\n@@ -75,6 +70,0 @@\n-\n-    }\n-\n-    private boolean isReturnTypeAssignableFrom(Class<?> clazz) {\n-        Optional<Class<?>> optionalClazz = javaReturnClass();\n-        return optionalClazz.isPresent() && clazz.isAssignableFrom(optionalClazz.get());\n@@ -82,1 +71,0 @@\n-\n@@ -87,4 +75,0 @@\n-    public boolean returnsVoid() {\n-        return javaReturnType().equals(JavaType.VOID);\n-    }\n-\n@@ -100,5 +84,1 @@\n-        return hasReceiver() ? op.operands().getFirst() : null;\n-    }\n-\n-    public boolean hasReceiver() {\n-        return op.hasReceiver();\n+        return op.hasReceiver() ? op.operands().getFirst() : null;\n@@ -110,2 +90,3 @@\n-        if (isIfaceBufferMethod() && !returnsVoid()) {\n-            return !isReturnTypeAssignableFrom(Buffer.class);\n+        if (isIfaceBufferMethod() && !javaReturnType().equals(JavaType.VOID)) {\n+            Optional<Class<?>> optionalClazz = javaReturnClass();\n+            return optionalClazz.isPresent() && Buffer.class.isAssignableFrom(optionalClazz.get());\n@@ -119,1 +100,1 @@\n-        return isIfaceBufferMethod() && returnsVoid();\n+        return isIfaceBufferMethod() && javaReturnType().equals(JavaType.VOID);\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/InvokeOpWrapper.java","additions":5,"deletions":24,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-\n@@ -72,1 +71,1 @@\n-                .map(varLoadOp -> (Op.Result) varLoadOp.operands().get(0))\n+                .map(varLoadOp -> (Op.Result) varLoadOp.operands().getFirst())\n@@ -74,1 +73,1 @@\n-                .map(varOp -> varOp.varName()).toArray();\n+                .map(CoreOp.VarOp::varName).toArray();\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/LambdaOpWrapper.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -38,1 +39,1 @@\n-        return wrappedYieldOpStream(op.bodies().getFirst().entryBlock()\/*firstBlockOfBodyN(0)*\/);\n+        return op.bodies().get(0).entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n@@ -42,1 +43,1 @@\n-        return wrappedYieldOpStream(op.bodies().get(1).entryBlock()\/*firstBlockOfBodyN(1)*\/);\n+        return op.bodies().get(1).entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/LogicalOpWrapper.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -103,8 +103,0 @@\n-    public Stream<OpWrapper<?>> wrappedOpStream(Block block) {\n-        return block.ops().stream().map(o->wrap(lookup,o));\n-    }\n-\n-    public Stream<OpWrapper<?>> wrappedYieldOpStream(Block block) {\n-        return wrappedOpStream(block).filter(wrapped -> wrapped instanceof YieldOpWrapper);\n-    }\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -39,1 +40,1 @@\n-        return wrappedYieldOpStream(op.bodies().getFirst().entryBlock()\/*,firstBlockOfBodyN(0)*\/);\n+        return op.bodies().get(0).entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n@@ -43,1 +44,1 @@\n-        return wrappedYieldOpStream(op.bodies().get(1).entryBlock()\/*firstBlockOfBodyN(1)*\/);\n+        return op.bodies().get(1).entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n@@ -47,1 +48,1 @@\n-        return wrappedYieldOpStream(op.bodies().get(2).entryBlock()\/*firstBlockOfBodyN(2)*\/);\n+        return op.bodies().get(2).entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/TernaryOpWrapper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -40,1 +41,1 @@\n-        return wrappedYieldOpStream(op.bodies().getFirst().entryBlock()\/*firstBlockOfBodyN(0)*\/);\n+        return op.bodies().getFirst().entryBlock().ops().stream().filter(o->o instanceof CoreOp.YieldOp).map(o->wrap(lookup,o));\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/WhileOpWrapper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}