{"files":[{"patch":"@@ -131,1 +131,1 @@\n-                return processConstantValue(TritonType.fromType(tt.eType()), value);\n+                return processConstantValue(tt.eType(), value);\n@@ -453,1 +453,1 @@\n-            return maxMinSuffixFromType(TritonType.fromType(tt.eType()));\n+            return maxMinSuffixFromType(tt.eType());\n@@ -455,1 +455,1 @@\n-            return maxMinSuffixFromType(TritonType.fromType(pt.rType()));\n+            return maxMinSuffixFromType(pt.rType());\n@@ -467,1 +467,1 @@\n-            return nameSuffixFromType(TritonType.fromType(tt.eType()), signed);\n+            return nameSuffixFromType(tt.eType(), signed);\n@@ -469,1 +469,1 @@\n-            return nameSuffixFromType(TritonType.fromType(pt.rType()), signed);\n+            return nameSuffixFromType(pt.rType(), signed);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ArithMathOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n@@ -30,1 +30,0 @@\n-import java.util.ArrayList;\n@@ -37,1 +36,1 @@\n-    final Type cType;\n+    final TypeElement cType;\n@@ -40,1 +39,1 @@\n-    public ConstantType(Type cType, Object value) {\n+    public ConstantType(TypeElement cType, Object value) {\n@@ -45,1 +44,1 @@\n-    public Type cType() {\n+    public TypeElement cType() {\n@@ -69,1 +68,1 @@\n-                List.of(fromType(cType).toTypeDefinition(),\n+                List.of(cType.toTypeDefinition(),\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ConstantType.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n@@ -35,1 +35,1 @@\n-    final Type rType;\n+    final TypeElement rType;\n@@ -37,1 +37,1 @@\n-    public PtrType(Type rType) {\n+    public PtrType(TypeElement rType) {\n@@ -41,1 +41,1 @@\n-    public Type rType() {\n+    public TypeElement rType() {\n@@ -60,1 +60,1 @@\n-        return new TypeDefinition(NAME, List.of(fromType(rType).toTypeDefinition()));\n+        return new TypeDefinition(NAME, List.of(rType.toTypeDefinition()));\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/PtrType.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n@@ -33,1 +33,0 @@\n-import java.util.stream.Collectors;\n@@ -38,1 +37,1 @@\n-    final Type eType;\n+    final TypeElement eType;\n@@ -42,1 +41,1 @@\n-    public TensorType(Type eType, List<Integer> shape) {\n+    public TensorType(TypeElement eType, List<Integer> shape) {\n@@ -52,1 +51,1 @@\n-    public Type eType() {\n+    public TypeElement eType() {\n@@ -83,1 +82,1 @@\n-        args.add(fromType(eType).toTypeDefinition());\n+        args.add(eType.toTypeDefinition());\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TensorType.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.invoke.MethodHandles;\n@@ -514,1 +513,1 @@\n-            return new TensorType(int.class, List.of(end - start));\n+            return new TensorType(JavaType.INT, List.of(end - start));\n@@ -840,4 +839,2 @@\n-                    if (v instanceof JavaType jt) {\n-                        yield new PtrType(resolve(jt));\n-                    } else if (v instanceof TensorType tt) {\n-                        yield new PtrType(tt);\n+                    if (v instanceof JavaType || v instanceof TritonType) {\n+                        yield new PtrType(v);\n@@ -872,4 +869,2 @@\n-                    if (v instanceof JavaType jt) {\n-                        yield new TensorType(resolve(jt), shape);\n-                    } else if (v instanceof TritonType tt) {\n-                        yield new TensorType(tt, shape);\n+                    if (v instanceof JavaType || v instanceof TritonType) {\n+                        yield new TensorType(v, shape);\n@@ -885,8 +880,0 @@\n-    static Class<?> resolve(JavaType t) {\n-        try {\n-            return t.resolve(MethodHandles.lookup());\n-        } catch (ReflectiveOperationException e) {\n-            throw new IllegalArgumentException(\"Bad type: \" + t, e);\n-        }\n-    }\n-\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":5,"deletions":18,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.Type;\n@@ -59,2 +58,2 @@\n-                                    Type rType,\n-                                    List<Type> argTypes) {\n+                                    TypeElement rType,\n+                                    List<? extends TypeElement> argTypes) {\n@@ -68,2 +67,2 @@\n-                                    Type rType,\n-                                    List<Type> argTypes,\n+                                    TypeElement rType,\n+                                    List<? extends TypeElement> argTypes,\n@@ -79,1 +78,1 @@\n-        Map<Value, Type> valueTypeMap = new HashMap<>();\n+        Map<Value, TypeElement> valueTypeMap = new HashMap<>();\n@@ -89,1 +88,1 @@\n-    static String signature(String name, Type rType, List<Type> argTypes) {\n+    static String signature(String name, TypeElement rType, List<? extends TypeElement> argTypes) {\n@@ -92,1 +91,1 @@\n-        for (Type argType : argTypes) {\n+        for (TypeElement argType : argTypes) {\n@@ -106,2 +105,2 @@\n-            O kernel, List<Type> argTypes,\n-            Map<Value, Type> valueTypeMap, Map<Op, Object> opData) {\n+            O kernel, List<? extends TypeElement> argTypes,\n+            Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData) {\n@@ -116,1 +115,1 @@\n-                case VarOp _ -> {\n+                case VarOp _, VarAccessOp.VarLoadOp _ -> {\n@@ -120,4 +119,0 @@\n-                case VarAccessOp.VarLoadOp _ -> {\n-                    Value var = op.operands().get(0);\n-                    valueTypeMap.put(op.result(), valueTypeMap.get(var));\n-                }\n@@ -126,1 +121,1 @@\n-                    Type varType = valueTypeMap.get(var);\n+                    TypeElement varType = valueTypeMap.get(var);\n@@ -128,1 +123,1 @@\n-                    Type vType = valueTypeMap.get(v);\n+                    TypeElement vType = valueTypeMap.get(v);\n@@ -137,21 +132,1 @@\n-                    JavaType td = (JavaType) op.result().type();\n-                    Class<?> type;\n-                    try {\n-                        type = td.resolve(MethodHandles.lookup());\n-                    } catch (ReflectiveOperationException e) {\n-                        throw new UnsupportedOperationException(\"Unsupported type of constant op: \" + td, e);\n-                    }\n-                    if (type.isPrimitive()) {\n-                        valueTypeMap.put(op.result(), new ConstantType(type, cop.value()));\n-                    } else if (type == Class.class) {\n-                        JavaType vtd = (JavaType) cop.value();\n-                        Class<?> value;\n-                        try {\n-                            value = vtd.resolve(MethodHandles.lookup());\n-                        } catch (ReflectiveOperationException e) {\n-                            throw new RuntimeException(e);\n-                        }\n-                        valueTypeMap.put(op.result(), new ConstantType(type, value));\n-                    } else {\n-                        throw new UnsupportedOperationException(\"Unsupported type of constant op: \" + type);\n-                    }\n+                    valueTypeMap.put(op.result(), new ConstantType(op.result().type(), cop.value()));\n@@ -160,1 +135,1 @@\n-                    Type t = checkWithTypeInterpreter(op, op.opName(), valueTypeMap);\n+                    TypeElement t = checkWithTypeInterpreter(op, op.opName(), valueTypeMap);\n@@ -180,1 +155,1 @@\n-                    valueTypeMap.put(op.result(), new ConstantType(f.getType(), value));\n+                    valueTypeMap.put(op.result(), new ConstantType(JavaType.type(f.getType()), value));\n@@ -209,1 +184,1 @@\n-                    Type t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n+                    TypeElement t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n@@ -213,1 +188,1 @@\n-                    Type t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n+                    TypeElement t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n@@ -223,1 +198,1 @@\n-                            valueTypeMap.put(b.entryBlock().parameters().get(0), int.class);\n+                            valueTypeMap.put(b.entryBlock().parameters().get(0), JavaType.INT);\n@@ -244,1 +219,1 @@\n-    static Type checkWithTypeInterpreter(Op op, String name, Map<Value, Type> valueTypeMap) {\n+    static TypeElement checkWithTypeInterpreter(Op op, String name, Map<Value, TypeElement> valueTypeMap) {\n@@ -258,1 +233,1 @@\n-        List<Type> operandTypes = op.operands().stream().map(valueTypeMap::get).toList();\n+        List<TypeElement> operandTypes = op.operands().stream().map(valueTypeMap::get).toList();\n@@ -260,1 +235,1 @@\n-            return (Type) mh.invokeWithArguments(operandTypes.toArray(Object[]::new));\n+            return (TypeElement) mh.invokeWithArguments(operandTypes.toArray(Object[]::new));\n@@ -272,2 +247,2 @@\n-        public static Class<?> programId(ConstantType axis) {\n-            assert axis.cType().equals(int.class);\n+        public static JavaType programId(ConstantType axis) {\n+            assert axis.cType().equals(JavaType.INT);\n@@ -279,1 +254,1 @@\n-            return int.class;\n+            return JavaType.INT;\n@@ -284,2 +259,2 @@\n-            assert start.cType().equals(int.class);\n-            assert end.cType().equals(int.class);\n+            assert start.cType().equals(JavaType.INT);\n+            assert end.cType().equals(JavaType.INT);\n@@ -290,1 +265,1 @@\n-            return new TensorType(int.class, List.of(endValue - startValue));\n+            return new TensorType(JavaType.INT, List.of(endValue - startValue));\n@@ -295,1 +270,1 @@\n-            assert axis.cType().equals(int.class);\n+            assert axis.cType().equals(JavaType.INT);\n@@ -329,1 +304,1 @@\n-            return new TensorType((Type) eType.value(), shape);\n+            return new TensorType((TypeElement) eType.value(), shape);\n@@ -333,1 +308,1 @@\n-        public static TensorType broadcast(Type o, TensorType type) {\n+        public static TensorType broadcast(TypeElement o, TensorType type) {\n@@ -352,1 +327,1 @@\n-        public static Type add(Type a, Type b) {\n+        public static TypeElement add(TypeElement a, TypeElement b) {\n@@ -357,1 +332,1 @@\n-        public static Type sub(Type a, Type b) {\n+        public static TypeElement sub(TypeElement a, TypeElement b) {\n@@ -361,1 +336,1 @@\n-        public static Type mul(Type a, Type b) {\n+        public static TypeElement mul(TypeElement a, TypeElement b) {\n@@ -365,1 +340,1 @@\n-        public static Type div(Type a, Type b) {\n+        public static TypeElement div(TypeElement a, TypeElement b) {\n@@ -369,1 +344,1 @@\n-        public static Type mod(Type a, Type b) {\n+        public static TypeElement mod(TypeElement a, TypeElement b) {\n@@ -373,1 +348,1 @@\n-        public static Type and(Type a, Type b) {\n+        public static TypeElement and(TypeElement a, TypeElement b) {\n@@ -377,1 +352,1 @@\n-        public static Type cdiv(Type a, Type b) {\n+        public static TypeElement cdiv(TypeElement a, TypeElement b) {\n@@ -379,2 +354,2 @@\n-            b = reduceScalarType(a);\n-            if (a != int.class && b != int.class) {\n+            b = reduceScalarType(b);\n+            if (!a.equals(JavaType.INT) && !b.equals(JavaType.INT)) {\n@@ -387,1 +362,1 @@\n-        public static Type conv(ConstantType eType, Type a) {\n+        public static TypeElement conv(ConstantType eType, TypeElement a) {\n@@ -391,1 +366,1 @@\n-        public static Type convTypes(ConstantType eType, Type a) {\n+        public static TypeElement convTypes(ConstantType eType, TypeElement a) {\n@@ -393,1 +368,1 @@\n-                Type e = convScalarTypes(eType, tb.eType());\n+                TypeElement e = convScalarTypes(eType, tb.eType());\n@@ -400,4 +375,4 @@\n-        public static Type convScalarTypes(ConstantType eType, Type a) {\n-            Type t = (Type) eType.value();\n-            if (t == Float16.class && a == float.class) {\n-                return Float16.class;\n+        public static TypeElement convScalarTypes(ConstantType eType, TypeElement a) {\n+            TypeElement t = (TypeElement) eType.value();\n+            if (t.equals(Float16.FLOAT_16_TYPE) && a.equals(JavaType.FLOAT)) {\n+                return Float16.FLOAT_16_TYPE;\n@@ -413,1 +388,1 @@\n-        public static Type exp(Type a) {\n+        public static TypeElement exp(TypeElement a) {\n@@ -417,1 +392,1 @@\n-        static Type unary(Type a) {\n+        static TypeElement unary(TypeElement a) {\n@@ -422,2 +397,2 @@\n-        public static Type compare(Type a, Type b, ConstantType kind) {\n-            assert kind.cType().equals(Triton.CompareKind.class);\n+        public static TypeElement compare(TypeElement a, TypeElement b, ConstantType kind) {\n+            assert kind.cType().equals(JavaType.type(Triton.CompareKind.class));\n@@ -444,1 +419,1 @@\n-            return new TensorType(float.class, List.of(a.shape().get(0), b.shape().get(1)));\n+            return new TensorType(JavaType.FLOAT, List.of(a.shape().get(0), b.shape().get(1)));\n@@ -449,1 +424,1 @@\n-        public static Type max(TensorType a, ConstantType axis) {\n+        public static TypeElement max(TensorType a, ConstantType axis) {\n@@ -454,1 +429,1 @@\n-        public static Type sum(TensorType a, ConstantType axis) {\n+        public static TypeElement sum(TensorType a, ConstantType axis) {\n@@ -458,2 +433,2 @@\n-        static Type reduce(TensorType a, ConstantType axis) {\n-            assert axis.cType().equals(int.class);\n+        static TypeElement reduce(TensorType a, ConstantType axis) {\n+            assert axis.cType().equals(JavaType.INT);\n@@ -482,1 +457,1 @@\n-        public static void consume(Type a) {\n+        public static void consume(TypeElement a) {\n@@ -486,1 +461,1 @@\n-        static Type binary(Type a, Type b) {\n+        static TypeElement binary(TypeElement a, TypeElement b) {\n@@ -500,1 +475,1 @@\n-            Type e = checkScalarTypes(a.eType(), b.eType());\n+            TypeElement e = checkScalarTypes(a.eType(), b.eType());\n@@ -536,1 +511,1 @@\n-        static Type checkScalarTypes(Type a, Type b) {\n+        static TypeElement checkScalarTypes(TypeElement a, TypeElement b) {\n@@ -539,1 +514,1 @@\n-                if (b != int.class) {\n+                if (!b.equals(JavaType.INT)) {\n@@ -547,1 +522,1 @@\n-            } else if (a != b) {\n+            } else if (!a.equals(b)) {\n@@ -554,1 +529,1 @@\n-        static Type reduceScalarType(Type a) {\n+        static TypeElement reduceScalarType(TypeElement a) {\n@@ -562,2 +537,2 @@\n-            Type rType,\n-            Map<Value, Type> valueTypeMap, Map<Op, Object> opData,\n+            TypeElement rType,\n+            Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n@@ -565,1 +540,1 @@\n-        TritonOps.FuncOp ttKernel = TritonOps.func(signature, functionType(TritonType.fromType(rType)))\n+        TritonOps.FuncOp ttKernel = TritonOps.func(signature, functionType(rType))\n@@ -570,1 +545,1 @@\n-                        Type type = valueTypeMap.get(kp);\n+                        TypeElement type = valueTypeMap.get(kp);\n@@ -574,1 +549,1 @@\n-                                    TritonType.fromType(ct.cType()), ct.value()));\n+                                    ct.cType(), ct.value()));\n@@ -577,1 +552,1 @@\n-                            args.add(fblock.parameter(TritonType.fromType(type)));\n+                            args.add(fblock.parameter(type));\n@@ -593,1 +568,1 @@\n-                                                    Map<Value, Type> valueTypeMap, Map<Op, Object> opData,\n+                                                    Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n@@ -607,1 +582,1 @@\n-                Type t = valueTypeMap.get(cop.result());\n+                TypeElement t = valueTypeMap.get(cop.result());\n@@ -610,1 +585,1 @@\n-                            TritonType.fromType(ct.cType()), ct.value()));\n+                            ct.cType(), ct.value()));\n@@ -685,1 +660,1 @@\n-                                  Map<Value, Type> valueTypeMap, Map<Op, Object> opData,\n+                                  Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n@@ -736,1 +711,1 @@\n-                    valueTypeMap.put(index, int.class);\n+                    valueTypeMap.put(index, JavaType.INT);\n@@ -738,1 +713,1 @@\n-                    valueTypeMap.put(varIndex, int.class);\n+                    valueTypeMap.put(varIndex, JavaType.INT);\n@@ -744,1 +719,1 @@\n-                        Type type = valueTypeMap.get(v);\n+                        TypeElement type = valueTypeMap.get(v);\n@@ -864,1 +839,1 @@\n-        Value build(Op op, String name, Map<Value, Type> valueTypeMap) {\n+        Value build(Op op, String name, Map<Value, TypeElement> valueTypeMap) {\n@@ -893,1 +868,1 @@\n-        public Value programId(Type rType, Op.Result r,\n+        public Value programId(TypeElement rType, Op.Result r,\n@@ -921,1 +896,2 @@\n-                zero = MethodHandles.zero((Class<?>) aType.value()).invoke();\n+                JavaType zeroType = (JavaType) aType.value();\n+                zero = MethodHandles.zero(zeroType.resolve(MethodHandles.lookup())).invoke();\n@@ -951,1 +927,1 @@\n-                               Type oType, Value o,\n+                               TypeElement oType, Value o,\n@@ -975,3 +951,3 @@\n-        public Value add(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value add(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -990,3 +966,3 @@\n-        public Value sub(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value sub(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1000,3 +976,3 @@\n-        public Value mul(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value mul(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1010,3 +986,3 @@\n-        public Value div(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value div(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1020,3 +996,3 @@\n-        public Value mod(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value mod(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1030,3 +1006,3 @@\n-        public Value and(Type rType, Op.Result r,\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+        public Value and(TypeElement rType, Op.Result r,\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1041,2 +1017,2 @@\n-                         Type aType, Value a,\n-                         Type bType, Value b) {\n+                         TypeElement aType, Value a,\n+                         TypeElement bType, Value b) {\n@@ -1049,3 +1025,3 @@\n-        public Value cdiv(Type rType, Op.Result r,\n-                          Type aType, Value a,\n-                          Type bType, Value b) {\n+        public Value cdiv(TypeElement rType, Op.Result r,\n+                          TypeElement aType, Value a,\n+                          TypeElement bType, Value b) {\n@@ -1069,1 +1045,1 @@\n-        public Value conv(Type rType, Op.Result r,\n+        public Value conv(TypeElement rType, Op.Result r,\n@@ -1071,1 +1047,1 @@\n-                          Type aType, Value a) {\n+                          TypeElement aType, Value a) {\n@@ -1074,2 +1050,2 @@\n-            Type rScalarType;\n-            Type aScalarType;\n+            TypeElement rScalarType;\n+            TypeElement aScalarType;\n@@ -1084,2 +1060,2 @@\n-            if (rScalarType == Float16.class && aScalarType == float.class) {\n-                return block.op(ArithMathOps.trunc(TritonType.fromType(rType), a));\n+            if (rScalarType.equals(Float16.FLOAT_16_TYPE) && aScalarType.equals(JavaType.FLOAT)) {\n+                return block.op(ArithMathOps.trunc(rType, a));\n@@ -1100,2 +1076,2 @@\n-                             Type aType, Value a,\n-                             Type bType, Value b,\n+                             TypeElement aType, Value a,\n+                             TypeElement bType, Value b,\n@@ -1118,1 +1094,1 @@\n-        public Value max(Type rType, Op.Result r,\n+        public Value max(TypeElement rType, Op.Result r,\n@@ -1126,1 +1102,1 @@\n-        public Value sum(Type rType, Op.Result r,\n+        public Value sum(TypeElement rType, Op.Result r,\n@@ -1134,4 +1110,4 @@\n-        Value reduce(Type rType, Op.Result r,\n-                            TensorType xType, Value x,\n-                            ConstantType axisType, Value axis,\n-                            TritonOps.FuncOp f) {\n+        Value reduce(TypeElement rType, Op.Result r,\n+                     TensorType xType, Value x,\n+                     ConstantType axisType, Value axis,\n+                     TritonOps.FuncOp f) {\n@@ -1141,1 +1117,0 @@\n-            TypeElement elementType = TritonType.fromType(rType);\n@@ -1143,1 +1118,1 @@\n-                    s -> reduce(elementType, xType, axisConstant, s, f));\n+                    s -> reduce(rType, xType, axisConstant, s, f));\n@@ -1171,2 +1146,2 @@\n-        public Value consume(Type rType, Op.Result r,\n-                             Type aType, Value a) {\n+        public Value consume(TypeElement rType, Op.Result r,\n+                             TypeElement aType, Value a) {\n@@ -1176,3 +1151,3 @@\n-        void broadcastConversion(Type rType,\n-                                 Type aType, Value a,\n-                                 Type bType, Value b) {\n+        void broadcastConversion(TypeElement rType,\n+                                 TypeElement aType, Value a,\n+                                 TypeElement bType, Value b) {\n@@ -1210,2 +1185,2 @@\n-        void broadcastConversionRight(Type aType,\n-                                      Type bType, Value b) {\n+        void broadcastConversionRight(TypeElement aType,\n+                                      TypeElement bType, Value b) {\n@@ -1213,2 +1188,1 @@\n-            if (aType instanceof TensorType && bType instanceof TensorType bTensorType) {\n-                TensorType aTensorType = (TensorType) aType;\n+            if (aType instanceof TensorType aTensorType && bType instanceof TensorType bTensorType) {\n@@ -1223,2 +1197,1 @@\n-            } else if (aType instanceof TensorType) {\n-                TensorType rTensorType = (TensorType) aType;\n+            } else if (aType instanceof TensorType rTensorType) {\n@@ -1237,1 +1210,1 @@\n-            O kernel, Map<Value, Type> valueTypeMap) {\n+            O kernel, Map<Value, TypeElement> valueTypeMap) {\n@@ -1260,1 +1233,1 @@\n-            Type type = valueTypeMap.get(value);\n+            TypeElement type = valueTypeMap.get(value);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":129,"deletions":156,"binary":false,"changes":285,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.Type;\n@@ -30,1 +29,0 @@\n-import java.lang.reflect.code.type.JavaType;\n@@ -32,1 +30,1 @@\n-public abstract sealed class TritonType implements Type, TypeElement\n+public abstract sealed class TritonType implements TypeElement\n@@ -34,10 +32,0 @@\n-\n-    public static TypeElement fromType(Type t) {\n-        if (t instanceof Class<?> c) {\n-            return JavaType.type(c);\n-        } else if (t instanceof TritonType tt) {\n-            return tt;\n-        } else {\n-            throw new UnsupportedOperationException(\"Unsupported type: \" + t);\n-        }\n-    }\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonType.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -95,6 +96,6 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                int.class,\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 64));\n@@ -164,6 +165,6 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                int.class,\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 64));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestAddKernel.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -76,4 +77,4 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(int.class),\n-                int.class,\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.INT),\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 64));\n@@ -120,4 +121,4 @@\n-        List<Type> argTypes = List.of(\n-                int.class,\n-                new ConstantType(int.class, 64),\n-                new ConstantType(int.class, 32)\n+        List<TypeElement> argTypes = List.of(\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 64),\n+                new ConstantType(JavaType.INT, 32)\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestBroadcast.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -65,3 +66,3 @@\n-        List<Type> argTypes = List.of(\n-                int.class,\n-                int.class);\n+        List<TypeElement> argTypes = List.of(\n+                JavaType.INT,\n+                JavaType.INT);\n@@ -99,3 +100,3 @@\n-        List<Type> argTypes = List.of(\n-                int.class,\n-                new ConstantType(int.class, 10));\n+        List<TypeElement> argTypes = List.of(\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 10));\n@@ -156,4 +157,4 @@\n-        List<Type> argTypes = List.of(\n-                int.class,\n-                int.class,\n-                new ConstantType(int.class, 10));\n+        List<TypeElement> argTypes = List.of(\n+                JavaType.INT,\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 10));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestCdiv.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -78,3 +79,3 @@\n-        List<Type> argTypes = List.of(\n-                int.class,\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                JavaType.INT,\n+                new ConstantType(JavaType.INT, 64));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestCountedLoop.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -302,11 +303,11 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                int.class, int.class, int.class,\n-                int.class, int.class,\n-                int.class, int.class,\n-                int.class, int.class,\n-                new ConstantType(int.class, 32), new ConstantType(int.class, 64), new ConstantType(int.class, 32),\n-                new ConstantType(int.class, 8),\n-                new ConstantType(int.class, false));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                JavaType.INT, JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                new ConstantType(JavaType.INT, 32), new ConstantType(JavaType.INT, 64), new ConstantType(JavaType.INT, 32),\n+                new ConstantType(JavaType.INT, 8),\n+                new ConstantType(JavaType.INT, false));\n@@ -549,11 +550,11 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(Float16.class),\n-                new PtrType(Float16.class),\n-                new PtrType(Float16.class),\n-                int.class, int.class, int.class,\n-                int.class, int.class,\n-                int.class, int.class,\n-                int.class, int.class,\n-                new ConstantType(int.class, 32), new ConstantType(int.class, 64), new ConstantType(int.class, 32),\n-                new ConstantType(int.class, 8),\n-                new ConstantType(int.class, false));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(Float16.FLOAT_16_TYPE),\n+                new PtrType(Float16.FLOAT_16_TYPE),\n+                new PtrType(Float16.FLOAT_16_TYPE),\n+                JavaType.INT, JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                JavaType.INT, JavaType.INT,\n+                new ConstantType(JavaType.INT, 32), new ConstantType(JavaType.INT, 64), new ConstantType(JavaType.INT, 32),\n+                new ConstantType(JavaType.INT, 8),\n+                new ConstantType(JavaType.INT, false));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestMatrix.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -126,7 +127,7 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                new ConstantType(int.class, 1),\n-                new ConstantType(int.class, 1),\n-                new ConstantType(int.class, 10),\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                new ConstantType(JavaType.INT, 1),\n+                new ConstantType(JavaType.INT, 1),\n+                new ConstantType(JavaType.INT, 10),\n+                new ConstantType(JavaType.INT, 64));\n@@ -223,7 +224,7 @@\n-        List<Type> argTypes = List.of(\n-                new PtrType(float.class),\n-                new PtrType(float.class),\n-                new ConstantType(int.class, 1),\n-                new ConstantType(int.class, 1),\n-                new ConstantType(int.class, 10),\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new PtrType(JavaType.FLOAT),\n+                new PtrType(JavaType.FLOAT),\n+                new ConstantType(JavaType.INT, 1),\n+                new ConstantType(JavaType.INT, 1),\n+                new ConstantType(JavaType.INT, 10),\n+                new ConstantType(JavaType.INT, 64));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestSoftMax.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -52,2 +53,2 @@\n-        List<Type> argTypes = List.of(\n-                new ConstantType(int.class, 32));\n+        List<TypeElement> argTypes = List.of(\n+                new ConstantType(JavaType.INT, 32));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestVariables.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.JavaType;\n@@ -57,3 +58,3 @@\n-        List<Type> argTypes = List.of(\n-                new ConstantType(int.class, 32),\n-                new ConstantType(int.class, 64));\n+        List<TypeElement> argTypes = List.of(\n+                new ConstantType(JavaType.INT, 32),\n+                new ConstantType(JavaType.INT, 64));\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestZeros.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.Type;\n+import java.lang.reflect.code.TypeElement;\n@@ -39,0 +39,1 @@\n+import java.lang.reflect.code.type.JavaType;\n@@ -76,1 +77,1 @@\n-        public void test(List<Type> argTypes) {\n+        public void test(List<? extends TypeElement> argTypes) {\n@@ -102,1 +103,1 @@\n-                  List<Type> argTypes,\n+                  List<? extends TypeElement> argTypes,\n@@ -106,1 +107,1 @@\n-                return TritonTransformer.tritonModule(javaKernel, void.class, argTypes);\n+                return TritonTransformer.tritonModule(javaKernel, JavaType.VOID, argTypes);\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TritonTestExtension.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}