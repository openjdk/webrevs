{"files":[{"patch":"@@ -366,1 +366,1 @@\n-    public MemorySegment createTensor(MemorySegment flatData, Tensor.ElementType elementType, MemorySegment shape) {\n+    public MemorySegment createTensor(Arena arena, MemorySegment flatData, Tensor.ElementType elementType, long[] shape) {\n@@ -368,5 +368,7 @@\n-        return retAddr(OrtApi.CreateTensorWithDataAsOrtValue(runtimeAddress, allocatorInfo, flatData, flatData.byteSize(), shape, shape.byteSize() \/ 8, elementType.id, ret));\n-    }\n-\n-    public void releaseValue(MemorySegment value) {\n-        OrtApi.ReleaseValue(runtimeAddress, value);\n+        return retAddr(OrtApi.CreateTensorWithDataAsOrtValue(\n+                runtimeAddress,\n+                allocatorInfo,\n+                flatData, flatData.byteSize(),\n+                shape.length == 0 ? MemorySegment.NULL : arena.allocateFrom(C_LONG_LONG, shape), (long)shape.length,\n+                elementType.id,\n+                ret)).reinterpret(arena, value -> OrtApi.ReleaseValue(runtimeAddress, value));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import oracle.code.onnx.foreign.OrtApi;\n-\n-import static oracle.code.onnx.foreign.onnxruntime_c_api_h.C_LONG_LONG;\n@@ -157,2 +154,1 @@\n-        this(dataAddr, OnnxRuntime.getInstance().createTensor(dataAddr, type, shape.length == 0 ? MemorySegment.NULL : arena.allocateFrom(C_LONG_LONG, shape))\n-                .reinterpret(arena, value -> OnnxRuntime.getInstance().releaseValue(value)));\n+        this(dataAddr, OnnxRuntime.getInstance().createTensor(arena, dataAddr, type, shape));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}