{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import hat.NDRange;\n@@ -32,2 +31,0 @@\n-import jdk.incubator.code.dialect.core.CoreOp;\n-import jdk.incubator.code.dialect.java.JavaType;\n@@ -36,7 +33,0 @@\n-\n-\n-    @Override\n-    public CudaHATKernelBuilder defines() {\n-        return self();  \/\/ nor this\n-    }\n-\n@@ -51,11 +41,0 @@\n-\n-    @Override\n-    public CudaHATKernelBuilder globalId(int id) {\n-        return paren(_->blockId(id).asterisk().localSize(id).plus().localId(id));\n-    }\n-\n-    @Override\n-    public CudaHATKernelBuilder localId(int id) {\n-        return keyword(\"threadIdx\").dot().threadDimId(id);\n-    }\n-\n@@ -63,12 +42,23 @@\n-    public CudaHATKernelBuilder globalSize(int id) {\n-        return keyword(\"gridDim\").dot().threadDimId(id).asterisk().localSize(id);\n-    }\n-\n-    @Override\n-    public CudaHATKernelBuilder localSize(int id) {\n-        return keyword(\"blockDim\").dot().threadDimId(id);\n-    }\n-\n-    @Override\n-    public CudaHATKernelBuilder blockId(int id) {\n-        return keyword(\"blockIdx\").dot().threadDimId(id);\n+    public CudaHATKernelBuilder defines() {\n+        return self()\n+               \/\/   .hashDefine(\"HAT_CUDA\")\n+                 \/\/ .hashIfdef(\"HAT_CUDA\", _ ->\n+                   \/\/     indent(_ -> self()\n+                .hashDefine(\"_gix()\", _ -> paren(_->blockId(0).asterisk().localSize(0).plus().localId(0)))\n+                .hashDefine(\"_giy()\", _ -> paren(_->blockId(1).asterisk().localSize(1).plus().localId(1)))\n+                .hashDefine(\"_giz()\", _ -> paren(_->blockId(2).asterisk().localSize(2).plus().localId(2)))\n+                .hashDefine(\"_lix()\", _ -> keyword(\"threadIdx\").dot().threadDimId(0))\n+                .hashDefine(\"_liy()\", _ -> keyword(\"threadIdx\").dot().threadDimId(1))\n+                .hashDefine(\"_liz()\", _ -> keyword(\"threadIdx\").dot().threadDimId(2))\n+                .hashDefine(\"_gsx()\", _ -> keyword(\"gridDim\").dot().threadDimId(0).asterisk().localSize(0))\n+                .hashDefine(\"_gsy()\", _ -> keyword(\"gridDim\").dot().threadDimId(1).asterisk().localSize(1))\n+                .hashDefine(\"_gsz()\", _ -> keyword(\"gridDim\").dot().threadDimId(2).asterisk().localSize(2))\n+                .hashDefine(\"_lsx()\", _ -> keyword(\"blockDim\").dot().threadDimId(0))\n+                .hashDefine(\"_lsy()\", _ -> keyword(\"blockDim\").dot().threadDimId(1))\n+                .hashDefine(\"_lsz()\", _ -> keyword(\"blockDim\").dot().threadDimId(2))\n+                .hashDefine(\"_bix()\", _ -> keyword(\"blockIdx\").dot().threadDimId(0))\n+                .hashDefine(\"_biy()\", _ -> keyword(\"blockIdx\").dot().threadDimId(1))\n+                .hashDefine(\"_biz()\", _ -> keyword(\"blockIdx\").dot().threadDimId(2))\n+                .hashDefine(\"_barrier()\", _->keyword(\"__syncthreads\").ocparen());\n+                    \/\/    )\n+        \/\/);\n@@ -76,1 +66,0 @@\n-\n@@ -78,3 +67,3 @@\n-    public CudaHATKernelBuilder kernelDeclaration(CoreOp.FuncOp funcOp) {\n-        return externC().space().keyword(\"__global__\").space().voidType().space().funcName(funcOp);\n-    }\n+   public CudaHATKernelBuilder kernelPrefix() {\n+       return externC().space().keyword(\"__global__\").space();\n+   }\n@@ -83,2 +72,2 @@\n-    public CudaHATKernelBuilder functionDeclaration(ScopedCodeBuilderContext codeBuilderContext, JavaType javaType, CoreOp.FuncOp funcOp) {\n-        return externC().space().keyword(\"__device__\").space().keyword(\"inline\").space().type(codeBuilderContext,javaType).space().funcName(funcOp);\n+    public CudaHATKernelBuilder functionPrefix() {\n+        return externC().space().keyword(\"__device__\").space().keyword(\"inline\").space();\n@@ -94,1 +83,1 @@\n-        return keyword(\"__shared__\");\n+        return keyword(\"__shared__\").space();\n@@ -105,5 +94,0 @@\n-\n-    @Override\n-    public CudaHATKernelBuilder syncBlockThreads() {\n-        return keyword(\"__syncthreads\").ocparen();\n-    }\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaHATKernelBuilder.java","additions":29,"deletions":45,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -66,59 +66,0 @@\n-    public OpenCLHATKernelBuilder globalId(int id) {\n-        switch (id) {\n-            case 0 -> identifier(\"_gix()\");\n-            case 1 -> identifier(\"_giy()\");\n-            case 2 -> identifier(\"_giz()\");\n-            default -> throw new RuntimeException(\"globalId id = \" + id);\n-        }\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder localId(int id) {\n-        switch (id) {\n-            case 0 -> identifier(\"_lix()\");\n-            case 1 -> identifier(\"_liy()\");\n-            case 2 -> identifier(\"_liz()\");\n-            default -> throw new RuntimeException(\"localId id = \" + id);\n-        }\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder globalSize(int id) {\n-        switch (id) {\n-            case 0 -> identifier(\"_gsx()\");\n-            case 1 -> identifier(\"_gsy()\");\n-            case 2 -> identifier(\"_gsz()\");\n-            default -> throw new RuntimeException(\"globalSize id = \" + id);\n-        }\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder localSize(int id) {\n-        switch (id) {\n-            case 0 -> identifier(\"_lsx()\");\n-            case 1 -> identifier(\"_lsy()\");\n-            case 2 -> identifier(\"_lsz()\");\n-            default -> throw new RuntimeException(\"localSize id = \" + id);\n-        }\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder blockId(int id) {\n-        switch (id) {\n-            case 0 -> identifier(\"_bix()\");\n-            case 1 -> identifier(\"_biy()\");\n-            case 2 -> identifier(\"_biz()\");\n-            default -> throw new RuntimeException(\"blockId id = \" + id);\n-        }\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder syncBlockThreads() {\n-        return identifier(\"_barrier\").ocparen();\n-    }\n-\n@@ -129,1 +70,0 @@\n-\n@@ -131,4 +71,0 @@\n-    public OpenCLHATKernelBuilder kernelDeclaration(CoreOp.FuncOp funcOp) {\n-        return kernelPrefix().voidType().space().identifier(funcOp.funcName());\n-    }\n-\n@@ -139,4 +75,0 @@\n-    @Override\n-    public OpenCLHATKernelBuilder functionDeclaration(ScopedCodeBuilderContext codeBuilderContext, JavaType type, CoreOp.FuncOp funcOp) {\n-        return functionPrefix().type(codeBuilderContext, type).space().identifier(funcOp.funcName());\n-    }\n@@ -146,1 +78,1 @@\n-        return keyword(\"__global\");\n+        return keyword(\"__global\").space();\n@@ -151,1 +83,1 @@\n-        return keyword(\"__local\");\n+        return keyword(\"__local\").space();\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLHATKernelBuilder.java","additions":2,"deletions":70,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.incubator.code.Op;\n@@ -76,1 +77,1 @@\n-            globalPtrPrefix().space().suffix_t(classType).asterisk();\n+            globalPtrPrefix().suffix_t(classType).asterisk();\n@@ -78,1 +79,1 @@\n-            globalPtrPrefix().space().suffix_t(\"KernelContext\").asterisk();\n+            globalPtrPrefix().suffix_t(\"KernelContext\").asterisk();\n@@ -131,1 +132,1 @@\n-        return localPtrPrefix().space() \/\/ we should be able to compose-call to privateDeclaration?\n+        return localPtrPrefix() \/\/ we should be able to compose-call to privateDeclaration?\n@@ -165,1 +166,0 @@\n-    public abstract T globalPtrPrefix();\n@@ -167,1 +167,0 @@\n-    public abstract T localPtrPrefix();\n@@ -169,1 +168,9 @@\n-    public abstract T defines();\n+    public T globalId(int id) {\n+        switch (id) {\n+            case 0 -> identifier(\"_gix()\");\n+            case 1 -> identifier(\"_giy()\");\n+            case 2 -> identifier(\"_giz()\");\n+            default -> throw new RuntimeException(\"globalId id = \" + id);\n+        }\n+        return self();\n+    }\n@@ -171,1 +178,9 @@\n-    public abstract T kernelDeclaration(CoreOp.FuncOp funcOp);\n+    public T localId(int id) {\n+        switch (id) {\n+            case 0 -> identifier(\"_lix()\");\n+            case 1 -> identifier(\"_liy()\");\n+            case 2 -> identifier(\"_liz()\");\n+            default -> throw new RuntimeException(\"localId id = \" + id);\n+        }\n+        return self();\n+    }\n@@ -173,1 +188,9 @@\n-    public abstract T functionDeclaration(ScopedCodeBuilderContext codeBuilderContext, JavaType javaType, CoreOp.FuncOp funcOp);\n+    public T globalSize(int id) {\n+        switch (id) {\n+            case 0 -> identifier(\"_gsx()\");\n+            case 1 -> identifier(\"_gsy()\");\n+            case 2 -> identifier(\"_gsz()\");\n+            default -> throw new RuntimeException(\"globalSize id = \" + id);\n+        }\n+        return self();\n+    }\n@@ -175,1 +198,9 @@\n-    public abstract T globalId(int id);\n+    public T localSize(int id) {\n+        switch (id) {\n+            case 0 -> identifier(\"_lsx()\");\n+            case 1 -> identifier(\"_lsy()\");\n+            case 2 -> identifier(\"_lsz()\");\n+            default -> throw new RuntimeException(\"localSize id = \" + id);\n+        }\n+        return self();\n+    }\n@@ -177,1 +208,0 @@\n-    public abstract T localId(int id);\n@@ -179,1 +209,22 @@\n-    public abstract T globalSize(int id);\n+    public T blockId(int id) {\n+        switch (id) {\n+            case 0 -> identifier(\"_bix()\");\n+            case 1 -> identifier(\"_biy()\");\n+            case 2 -> identifier(\"_biz()\");\n+            default -> throw new RuntimeException(\"blockId id = \" + id);\n+        }\n+        return self();\n+    }\n+    public abstract T kernelPrefix();\n+\n+\n+    public T kernelDeclaration(CoreOp.FuncOp funcOp) {\n+        return kernelPrefix().voidType().space().funcName(funcOp);\n+    }\n+    public abstract  T functionPrefix();\n+\n+\n+    public T functionDeclaration(ScopedCodeBuilderContext codeBuilderContext, JavaType javaType, CoreOp.FuncOp funcOp) {\n+        return functionPrefix().type(codeBuilderContext,javaType).space().funcName(funcOp);\n+    }\n+\n@@ -181,1 +232,10 @@\n-    public abstract T localSize(int id);\n+    public T syncBlockThreads() {\n+        return identifier(\"_barrier\").ocparen();\n+    }\n+\n+\n+    public abstract T globalPtrPrefix();\n+\n+    public abstract T localPtrPrefix();\n+\n+    public abstract T defines();\n@@ -183,1 +243,0 @@\n-    public abstract T blockId(int id);\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":72,"deletions":13,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+-cp hat\/job.jar --enable-preview --source 26 hat.java exp\n","filename":"hat\/hat\/exp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"}]}