{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -278,2 +279,2 @@\n-                        if (call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.IntArray::get(long):int\")) ||\n-                            call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.FloatArray::get(long):float\"))) {\n+                        if (call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc.of(\"spirvdemo.IntArray\")), \"get\", JavaType.INT, JavaType.LONG)) ||\n+                            call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc.of(\"spirvdemo.FloatArray\")), \"get\", JavaType.FLOAT, JavaType.LONG))) {\n@@ -296,2 +297,2 @@\n-                        else if (call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.IntArray::set(long, int):void\")) ||\n-                                call.callDescriptor().equals(MethodRef.ofString(\"spirvdemo.FloatArray::set(long, float):void\"))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc(\"spirvdemo.IntArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.INT) ||\n+                                call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc(\"spirvdemo.FloatArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.FLOAT)))) {\n@@ -534,1 +535,1 @@\n-                        if (flo.operands().size() > 0 && flo.operands().get(0).type().equals(JavaType.ofString(\"spirvdemo.GPU$Index\"))) {\n+                        if (flo.operands().size() > 0 && flo.operands().get(0).type().equals(JavaType.type(ClassDesc.of(\"spirvdemo.GPU$Index\")))) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -50,1 +51,1 @@\n-    static final JavaType TYPE_Triton_Test = JavaType.ofString(\"oracle.code.triton.TritonTest\");\n+    static final JavaType TYPE_Triton_Test = JavaType.type(ClassDesc.of(\"oracle.code.triton.TritonTest\"));\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.lang.constant.ClassDesc;\n@@ -60,0 +61,1 @@\n+import hat.buffer.*;\n@@ -382,1 +384,1 @@\n-                        if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array::array(long):int\")))\n+                        if (methodRef.equals(MethodRef.method(S32Array.class, \"array\", int.class, long.class)))\n@@ -406,2 +408,2 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array2D::array(long):int\")) ||\n-                                 methodRef.equals(MethodRef.ofString(\"hat.buffer.F32Array2D::array(long):float\")))\n+                        else if (methodRef.equals(MethodRef.method(S32Array2D.class, \"array\", int.class, long.class) ||\n+                                 methodRef.equals(MethodRef.method(F32Array2D.class, \"array\", float.class, long.class))\n@@ -431,1 +433,1 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array::array(long, int):void\"))) {\n+                        else if (methodRef.equals(MethodRef.method(S32Array.class, \"array\", void.class, long.class, int.class))) {\n@@ -454,2 +456,2 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array2D::array(long, int)void\")) ||\n-                                 methodRef.equals(MethodRef.ofString(\"hat.buffer.F32Array2D::array(long, float):void\"))) {\n+                        else if (methodRef.equals(MethodRef.method(S32Array2D.class, \"array\", void.class, long.class, int.class)) ||\n+                                 methodRef.equals(MethodRef.method(F32Array2D.class, \"array\", void.class, long.class, float.class))) {\n@@ -478,3 +480,3 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array::length():int\")) ||\n-                                 methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array2D::width():int\"))||\n-                                 methodRef.equals(MethodRef.ofString(\"hat.buffer.F32Array2D::width():int\"))) {\n+                        else if (methodRef.equals(MethodRef.method(S32Array.class, \"length\", int.class)) ||\n+                                 methodRef.equals(MethodRef.method(S32Array2D.class, \"width\", int.class)) ||\n+                                 methodRef.equals(MethodRef.method(F32Array2D.class, \"width\", int.class))) {\n@@ -494,2 +496,2 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"hat.buffer.S32Array2D::height():int\")) ||\n-                                 methodRef.equals(MethodRef.ofString(\"hat.buffer.F32Array2D::height():int\"))) {\n+                        else if (methodRef.equals(MethodRef.method(S32Array2D.class, \"height\", int.class)) ||\n+                                 methodRef.equals(MethodRef.method(F32Array2D.class, \"height\", int.class))) {\n@@ -509,1 +511,1 @@\n-                        else if (methodRef.equals(MethodRef.ofString(\"java.lang.Math::sqrt(double):double\"))) {\n+                        else if (methodRef.equals(MethodRef.method(Math.class, \"sqrt\", double.class, double.class))) {\n@@ -596,1 +598,1 @@\n-                        if (flo.operands().size() > 0 && (flo.operands().get(0).type().equals(JavaType.ofString(\"hat.KernelContext\")))) {\n+                        if (flo.operands().size() > 0 && (flo.operands().get(0).type().equals(KernelContext.class))) {\n@@ -616,1 +618,1 @@\n-                        else if (flo.operands().get(0).type().equals(JavaType.ofString(\"hat.KernelContext\"))) {\n+                        else if (flo.operands().get(0).type().equals(JavaType.type(KernelContext.class))) {\n","filename":"hat\/backends\/ffi\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1333,1 +1333,1 @@\n-                return value == NULL_ATTRIBUTE_VALUE ? null : JavaType.ofString(value.toString());\n+                return value == NULL_ATTRIBUTE_VALUE ? null : (TypeElement)value;\n@@ -1432,1 +1432,0 @@\n-                        case String s -> MethodRef.ofString(s);\n@@ -1634,1 +1633,0 @@\n-                        case String s -> ConstructorRef.ofString(s);\n@@ -1782,1 +1780,0 @@\n-                            case String s -> FieldRef.ofString(s);\n@@ -1843,1 +1840,0 @@\n-                            case String s -> FieldRef.ofString(s);\n@@ -2042,1 +2038,0 @@\n-                        case String s -> JavaType.ofString(s);\n@@ -2109,1 +2104,0 @@\n-                        case String s -> JavaType.ofString(s);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2926,1 +2926,0 @@\n-                            case String s -> RecordTypeRef.ofString(s);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/ExtendedOp.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.incubator.code.TypeElement.ExternalizedTypeElement;\n+import jdk.incubator.code.parser.impl.Tokens.TokenKind;\n@@ -259,1 +261,1 @@\n-                opNode.attributes,\n+                inflateAttributes(opNode.attributes, c.typeFactory),\n@@ -263,0 +265,13 @@\n+    static Map<String, Object> inflateAttributes(Map<String, Object> attributes, TypeElementFactory typeFactory) {\n+        Map<String, Object> newAttributes = new HashMap<>();\n+        for (Map.Entry<String, Object> e : attributes.entrySet()) {\n+            String name = e.getKey();\n+            Object value = e.getValue();\n+            if (value instanceof ExternalizedTypeElement ete) {\n+                value = typeFactory.constructType(JavaTypeUtils.inflate(ete));\n+            }\n+            newAttributes.put(name, value);\n+        }\n+        return newAttributes;\n+    }\n+\n@@ -408,1 +423,1 @@\n-            if (lexer.is(Tokens.TokenKind.IDENTIFIER)) {\n+            if (isNameStart()) {\n@@ -420,0 +435,17 @@\n+    boolean isNameStart() {\n+        \/\/ we need to lookahead to see if we can find an identifier followed by a '=',\n+        \/\/ in which case we know what we're looking at is an attribute name\n+        int curr = 0;\n+        while (true) {\n+            if (lexer.token(curr++).kind != TokenKind.IDENTIFIER) {\n+                return false;\n+            }\n+            TokenKind next = lexer.token(curr++).kind;\n+            if (next == TokenKind.EQ) {\n+                return true;\n+            } else if (next != TokenKind.DOT) {\n+                return false;\n+            }\n+        }\n+    }\n+\n@@ -422,1 +454,1 @@\n-            return parseName();\n+            return DescParser.parseExTypeElem(lexer);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/parser\/OpParser.java","additions":35,"deletions":3,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -90,4 +89,0 @@\n-\n-    static ConstructorRef ofString(String s) {\n-        return (ConstructorRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ConstructorRef.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -66,4 +65,0 @@\n-\n-    static FieldRef ofString(String s) {\n-        return (FieldRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/FieldRef.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -351,9 +350,0 @@\n-\n-    \/**\n-     * Constructs a Java type from a string representation.\n-     * @param s string representation\n-     * @return a Java type corresponding to the provided string representation\n-     *\/\n-    static JavaType ofString(String s) {\n-        return JavaTypeUtils.toJavaType(JavaTypeUtils.parseExternalTypeString(s));\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/JavaType.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -100,4 +99,0 @@\n-    static MethodRef ofString(String s) {\n-        return (MethodRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n-    }\n-\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/MethodRef.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -68,4 +67,0 @@\n-\n-    static RecordTypeRef ofString(String s) {\n-        return (RecordTypeRef) JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(s));\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/RecordTypeRef.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -79,0 +79,2 @@\n+            } else if (value instanceof TypeElement te) {\n+                return JavaTypeUtils.flatten(te.externalize()).toString();\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/writer\/OpWriter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                %1 : java.type:\"int\" = invoke @\"C::m():int\";\n+                %1 : java.type:\"int\" = invoke @java.ref:\"C::m():int\";\n@@ -47,1 +47,1 @@\n-                %2 : java.type:\"int\" = invoke %1 @\"C::m(int):int\";\n+                %2 : java.type:\"int\" = invoke %1 @java.ref:\"C::m(int):int\";\n@@ -51,1 +51,1 @@\n-                %4 : java.type:\"int\" = invoke %2 %3 @\"C::m(int, int):int\";\n+                %4 : java.type:\"int\" = invoke %2 %3 @java.ref:\"C::m(int, int):int\";\n@@ -55,1 +55,1 @@\n-                %6 : java.type:\"int\" = invoke %4 %3 %5 @\"C::m(int, int, int):int\";\n+                %6 : java.type:\"int\" = invoke %4 %3 %5 @java.ref:\"C::m(int, int, int):int\";\n@@ -64,4 +64,4 @@\n-                %1 : java.type:\"int\" = invoke @\"C::m():int\";\n-                %2 : java.type:\"int\" = invoke %1 @\"C::m(int):int\";\n-                %3 : java.type:\"int\" = invoke %2 %2 @\"C::m(int, int):int\";\n-                %4 : java.type:\"int\" = invoke %3 %2 %2 @\"C::m(int, int, int):int\";\n+                %1 : java.type:\"int\" = invoke @java.ref:\"C::m():int\";\n+                %2 : java.type:\"int\" = invoke %1 @java.ref:\"C::m(int):int\";\n+                %3 : java.type:\"int\" = invoke %2 %2 @java.ref:\"C::m(int, int):int\";\n+                %4 : java.type:\"int\" = invoke %3 %2 %2 @java.ref:\"C::m(int, int, int):int\";\n@@ -78,1 +78,1 @@\n-                %3 : java.type:\"int\" = invoke @\"A::try_():int\";\n+                %3 : java.type:\"int\" = invoke @java.ref:\"A::try_():int\";\n@@ -95,1 +95,1 @@\n-                %7 : java.type:\"int\" = invoke @\"A::finally_():int\";\n+                %7 : java.type:\"int\" = invoke @java.ref:\"A::finally_():int\";\n@@ -102,1 +102,1 @@\n-                %9 : java.type:\"int\" = invoke @\"A::finally_():int\";\n+                %9 : java.type:\"int\" = invoke @java.ref:\"A::finally_():int\";\n@@ -112,1 +112,1 @@\n-                %3 : java.type:\"int\" = invoke @\"A::try_():int\";\n+                %3 : java.type:\"int\" = invoke @java.ref:\"A::try_():int\";\n@@ -123,1 +123,1 @@\n-                %7 : java.type:\"int\" = invoke @\"A::finally_():int\";\n+                %7 : java.type:\"int\" = invoke @java.ref:\"A::finally_():int\";\n@@ -127,1 +127,1 @@\n-                %9 : java.type:\"int\" = invoke @\"A::finally_():int\";\n+                %9 : java.type:\"int\" = invoke @java.ref:\"A::finally_():int\";\n@@ -220,1 +220,1 @@\n-                invoke @\"A::m():void\";\n+                invoke @java.ref:\"A::m():void\";\n@@ -241,1 +241,1 @@\n-                invoke @\"A::m():void\";\n+                invoke @java.ref:\"A::m():void\";\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestNormalizeBlocksTransformer.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.incubator.code.type.impl.JavaTypeUtils;\n@@ -48,1 +49,1 @@\n- * @modules jdk.incubator.code\n+ * @modules jdk.incubator.code\/jdk.incubator.code.type.impl\n@@ -76,1 +77,1 @@\n-        JavaType jt = JavaType.ofString(tds);\n+        JavaType jt = typeFromFlatString(tds);\n@@ -91,1 +92,1 @@\n-        ClassType jt = (ClassType)JavaType.ofString(tds);\n+        ClassType jt = (ClassType) typeFromFlatString(tds);\n@@ -121,1 +122,1 @@\n-        JavaType jt = JavaType.ofString(tds);\n+        JavaType jt = typeFromFlatString(tds);\n@@ -142,1 +143,1 @@\n-        JavaType jt = JavaType.ofString(tds);\n+        JavaType jt = typeFromFlatString(tds);\n@@ -152,1 +153,1 @@\n-        Assert.assertEquals(ct.typeArguments(), Stream.of(argTypes).map(JavaType::ofString).toList());\n+        Assert.assertEquals(ct.typeArguments(), Stream.of(argTypes).map(TestJavaType::typeFromFlatString).toList());\n@@ -397,0 +398,4 @@\n+\n+    private static JavaType typeFromFlatString(String desc) {\n+        return JavaTypeUtils.toJavaType(JavaTypeUtils.parseExternalTypeString(desc));\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        MethodRef mr = MethodRef.ofString(mds);\n+        MethodRef mr = refFromFlatString(mds);\n@@ -102,1 +102,1 @@\n-        ConstructorRef cr = ConstructorRef.ofString(cds);\n+        ConstructorRef cr = refFromFlatString(cds);\n@@ -137,1 +137,1 @@\n-        FieldRef fr = FieldRef.ofString(fds);\n+        FieldRef fr = refFromFlatString(fds);\n@@ -179,1 +179,1 @@\n-        RecordTypeRef rtr = RecordTypeRef.ofString(rtds);\n+        RecordTypeRef rtr = refFromFlatString(rtds);\n@@ -200,0 +200,5 @@\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <R extends JavaRef> R refFromFlatString(String desc) {\n+        return (R)JavaTypeUtils.toJavaRef(JavaTypeUtils.parseExternalRefString(desc));\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestReferences.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-                %1 : java.type:\"int[]\" = field.load %0 @\"ArrayAccessTest::ia:int[]\";\n+                %1 : java.type:\"int[]\" = field.load %0 @java.ref:\"ArrayAccessTest::ia:int[]\";\n@@ -161,1 +161,1 @@\n-                %1 : java.type:\"int[]\" = field.load %0 @\"ArrayAccessTest::ia:int[]\";\n+                %1 : java.type:\"int[]\" = field.load %0 @java.ref:\"ArrayAccessTest::ia:int[]\";\n@@ -182,1 +182,1 @@\n-                %6 : java.type:\"int\" = field.load %5 @\"ArrayAccessTest$A::i:int\";\n+                %6 : java.type:\"int\" = field.load %5 @java.ref:\"ArrayAccessTest$A::i:int\";\n@@ -198,1 +198,1 @@\n-                field.store %5 %6 @\"ArrayAccessTest$A::i:int\";\n+                field.store %5 %6 @java.ref:\"ArrayAccessTest$A::i:int\";\n@@ -331,1 +331,1 @@\n-                %6 : java.type:\"int\" = invoke %5 @\"java.lang.Object::hashCode():int\";\n+                %6 : java.type:\"int\" = invoke %5 @java.ref:\"java.lang.Object::hashCode():int\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ArrayAccessTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-                        %4 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %4 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -214,1 +214,1 @@\n-                        invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                        invoke %4 %5 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -256,1 +256,1 @@\n-                            %3 : java.type:\"java.lang.RuntimeException\" = new @\"java.lang.RuntimeException::()\";\n+                            %3 : java.type:\"java.lang.RuntimeException\" = new @java.ref:\"java.lang.RuntimeException::()\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/BlockTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-                %2 : java.type:\"java.lang.Long\" = invoke %1 @\"java.lang.Long::valueOf(long):java.lang.Long\";\n+                %2 : java.type:\"java.lang.Long\" = invoke %1 @java.ref:\"java.lang.Long::valueOf(long):java.lang.Long\";\n@@ -55,1 +55,1 @@\n-                %4 : java.type:\"long\" = invoke %3 @\"java.lang.Long::longValue():long\";\n+                %4 : java.type:\"long\" = invoke %3 @java.ref:\"java.lang.Long::longValue():long\";\n@@ -68,1 +68,1 @@\n-                %2 : java.type:\"java.lang.Long\" = invoke %1 @\"java.lang.Long::valueOf(long):java.lang.Long\";\n+                %2 : java.type:\"java.lang.Long\" = invoke %1 @java.ref:\"java.lang.Long::valueOf(long):java.lang.Long\";\n@@ -82,2 +82,2 @@\n-                %4 : java.type:\"java.lang.Long\" = cast %3 @\"java.lang.Long\";\n-                %5 : java.type:\"long\" = invoke %4 @\"java.lang.Long::longValue():long\";\n+                %4 : java.type:\"java.lang.Long\" = cast %3 @java.type:\"java.lang.Long\";\n+                %5 : java.type:\"long\" = invoke %4 @java.ref:\"java.lang.Long::longValue():long\";\n@@ -98,1 +98,1 @@\n-                %5 : java.type:\"int\" = invoke %3 @\"java.lang.Integer::intValue():int\";\n+                %5 : java.type:\"int\" = invoke %3 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -100,1 +100,1 @@\n-                %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"java.lang.Integer\" = invoke %6 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -115,1 +115,1 @@\n-                %5 : java.type:\"int\" = invoke %3 @\"java.lang.Integer::intValue():int\";\n+                %5 : java.type:\"int\" = invoke %3 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -117,1 +117,1 @@\n-                %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"java.lang.Integer\" = invoke %6 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -133,2 +133,2 @@\n-                %1 : java.type:\"BoxingConversionTest$Box\" = new @\"BoxingConversionTest$Box::()\";\n-                %2 : java.type:\"java.lang.Integer\" = field.load %1 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %1 : java.type:\"BoxingConversionTest$Box\" = new @java.ref:\"BoxingConversionTest$Box::()\";\n+                %2 : java.type:\"java.lang.Integer\" = field.load %1 @java.ref:\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -136,1 +136,1 @@\n-                %4 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %4 : java.type:\"int\" = invoke %2 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -138,2 +138,2 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                field.store %1 %6 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                field.store %1 %6 @java.ref:\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -150,2 +150,2 @@\n-                %1 : java.type:\"BoxingConversionTest$Box\" = new @\"BoxingConversionTest$Box::()\";\n-                %2 : java.type:\"java.lang.Integer\" = field.load %1 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %1 : java.type:\"BoxingConversionTest$Box\" = new @java.ref:\"BoxingConversionTest$Box::()\";\n+                %2 : java.type:\"java.lang.Integer\" = field.load %1 @java.ref:\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -153,1 +153,1 @@\n-                %4 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %4 : java.type:\"int\" = invoke %2 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -155,2 +155,2 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                field.store %1 %6 @\"BoxingConversionTest$Box::i:java.lang.Integer\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                field.store %1 %6 @java.ref:\"BoxingConversionTest$Box::i:java.lang.Integer\";\n@@ -173,1 +173,1 @@\n-                %9 : java.type:\"int\" = invoke %8 @\"java.lang.Integer::intValue():int\";\n+                %9 : java.type:\"int\" = invoke %8 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -195,1 +195,1 @@\n-                        %8 : java.type:\"int\" = invoke %7 @\"java.lang.Integer::intValue():int\";\n+                        %8 : java.type:\"int\" = invoke %7 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -226,1 +226,1 @@\n-                        %9 : java.type:\"int\" = invoke %8 @\"java.lang.Integer::intValue():int\";\n+                        %9 : java.type:\"int\" = invoke %8 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -254,1 +254,1 @@\n-                %7 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"java.lang.Integer\" = invoke %3 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -268,1 +268,1 @@\n-                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -284,1 +284,1 @@\n-                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -309,1 +309,1 @@\n-                        %11 : java.type:\"int\" = invoke %10 @\"java.lang.Integer::intValue():int\";\n+                        %11 : java.type:\"int\" = invoke %10 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -353,1 +353,1 @@\n-                        %13 : java.type:\"int\" = invoke %12 @\"java.lang.Integer::intValue():int\";\n+                        %13 : java.type:\"int\" = invoke %12 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -380,1 +380,1 @@\n-                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -389,1 +389,1 @@\n-                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -417,1 +417,1 @@\n-                        %11 : java.type:\"int\" = invoke %10 @\"java.lang.Integer::intValue():int\";\n+                        %11 : java.type:\"int\" = invoke %10 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -461,1 +461,1 @@\n-                        %13 : java.type:\"int\" = invoke %12 @\"java.lang.Integer::intValue():int\";\n+                        %13 : java.type:\"int\" = invoke %12 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -488,1 +488,1 @@\n-                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %9 : java.type:\"java.lang.Integer\" = invoke %8 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -497,1 +497,1 @@\n-                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -518,1 +518,1 @@\n-                %7 : java.type:\"int\" = invoke %6 @\"java.lang.Integer::intValue():int\";\n+                %7 : java.type:\"int\" = invoke %6 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -535,2 +535,2 @@\n-                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                invoke %0 %4 @\"BoxingConversionTest::m(java.lang.Integer):void\";\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %4 @java.ref:\"BoxingConversionTest::m(java.lang.Integer):void\";\n@@ -552,1 +552,1 @@\n-                invoke %0 %3 %4 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                invoke %0 %3 %4 @java.ref:\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -567,2 +567,2 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                invoke %0 %3 %4 %6 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %3 %4 %6 @java.ref:\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -583,1 +583,1 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -585,2 +585,2 @@\n-                %8 : java.type:\"java.lang.Integer\" = invoke %7 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                invoke %0 %3 %4 %6 %8 @\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                %8 : java.type:\"java.lang.Integer\" = invoke %7 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                invoke %0 %3 %4 %6 %8 @java.ref:\"BoxingConversionTest::m(int, int, java.lang.Integer[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -604,2 +604,2 @@\n-                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                %5 : java.type:\"BoxingConversionTest$Box2\" = new %4 @\"BoxingConversionTest$Box2::(java.lang.Integer)\";\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %5 : java.type:\"BoxingConversionTest$Box2\" = new %4 @java.ref:\"BoxingConversionTest$Box2::(java.lang.Integer)\";\n@@ -619,1 +619,1 @@\n-                %5 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n+                %5 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 @java.ref:\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -634,2 +634,2 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                %7 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %7 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 @java.ref:\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -650,1 +650,1 @@\n-                %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -652,2 +652,2 @@\n-                %8 : java.type:\"java.lang.Integer\" = invoke %7 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                %9 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 %8 @\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n+                %8 : java.type:\"java.lang.Integer\" = invoke %7 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %9 : java.type:\"BoxingConversionTest$Box2\" = new %3 %4 %6 %8 @java.ref:\"BoxingConversionTest$Box2::(int, int, java.lang.Integer[])\" @new.varargs=\"true\";\n@@ -666,1 +666,1 @@\n-                %3 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n+                %3 : java.type:\"int\" = invoke %2 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -682,1 +682,1 @@\n-                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -697,1 +697,1 @@\n-                %4 : java.type:\"java.lang.Boolean\" = invoke %3 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                %4 : java.type:\"java.lang.Boolean\" = invoke %3 @java.ref:\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n@@ -711,1 +711,1 @@\n-                %3 : java.type:\"boolean\" = invoke %2 @\"java.lang.Boolean::booleanValue():boolean\";\n+                %3 : java.type:\"boolean\" = invoke %2 @java.ref:\"java.lang.Boolean::booleanValue():boolean\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/BoxingConversionTest.java","additions":54,"deletions":54,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                %4 : java.type:\"java.lang.String\" = cast %3 @\"java.lang.String\";\n+                %4 : java.type:\"java.lang.String\" = cast %3 @java.type:\"java.lang.String\";\n@@ -61,1 +61,1 @@\n-                %4 : java.type:\"java.util.List<java.lang.String>\" = cast %3 @\"java.util.List\";\n+                %4 : java.type:\"java.util.List<java.lang.String>\" = cast %3 @java.type:\"java.util.List\";\n@@ -111,1 +111,1 @@\n-                %4 : java.type:\"boolean\" = instanceof %3 @\"java.lang.String\";\n+                %4 : java.type:\"boolean\" = instanceof %3 @java.type:\"java.lang.String\";\n@@ -126,2 +126,2 @@\n-                %5 : java.type:\"java.lang.Object\" = invoke %3 %4 @\"java.util.List::get(int):java.lang.Object\";\n-                %6 : java.type:\"boolean\" = instanceof %5 @\"java.lang.String\";\n+                %5 : java.type:\"java.lang.Object\" = invoke %3 %4 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n+                %6 : java.type:\"boolean\" = instanceof %5 @java.type:\"java.lang.String\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/CastInstanceOfTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-                            %12 : java.type:\"java.lang.Double\" = invoke %11 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n+                            %12 : java.type:\"java.lang.Double\" = invoke %11 @java.ref:\"java.lang.Double::valueOf(double):java.lang.Double\";\n@@ -117,1 +117,1 @@\n-                            %15 : java.type:\"java.lang.Double\" = invoke %14 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n+                            %15 : java.type:\"java.lang.Double\" = invoke %14 @java.ref:\"java.lang.Double::valueOf(double):java.lang.Double\";\n@@ -173,1 +173,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConditionalExpressionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"java.util.function.Function\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"java.util.function.Function\";\n@@ -210,1 +210,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"float\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"float\";\n@@ -222,1 +222,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[]\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"java.lang.String[]\";\n@@ -234,1 +234,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[][]\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"java.lang.String[][]\";\n@@ -246,1 +246,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"java.lang.String[][][]\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"java.lang.String[][][]\";\n@@ -258,1 +258,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"boolean[]\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"boolean[]\";\n@@ -270,1 +270,1 @@\n-                %1 : java.type:\"java.lang.Class\" = constant @\"boolean[][][]\";\n+                %1 : java.type:\"java.lang.Class\" = constant @java.type:\"boolean[][][]\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConstantsTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                %1 : java.type:\"java.lang.Number\" = invoke %0 @\"DenotableTypesTest::m1(java.lang.Number):java.lang.Number\";\n+                %1 : java.type:\"java.lang.Number\" = invoke %0 @java.ref:\"DenotableTypesTest::m1(java.lang.Number):java.lang.Number\";\n@@ -54,1 +54,1 @@\n-                %1 : java.type:\"java.lang.Integer\" = invoke %0 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %1 : java.type:\"java.lang.Integer\" = invoke %0 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -56,2 +56,2 @@\n-                %3 : java.type:\"java.lang.Double\" = invoke %2 @\"java.lang.Double::valueOf(double):java.lang.Double\";\n-                %4 : java.type:\"java.util.List<? extends java.lang.Number>\" = invoke %1 %3 @\"java.util.List::of(java.lang.Object, java.lang.Object):java.util.List\";\n+                %3 : java.type:\"java.lang.Double\" = invoke %2 @java.ref:\"java.lang.Double::valueOf(double):java.lang.Double\";\n+                %4 : java.type:\"java.util.List<? extends java.lang.Number>\" = invoke %1 %3 @java.ref:\"java.util.List::of(java.lang.Object, java.lang.Object):java.util.List\";\n@@ -71,1 +71,1 @@\n-                %1 : java.type:\"java.lang.RuntimeException\" = invoke %0 @\"DenotableTypesTest::m2(java.lang.Throwable):java.lang.Throwable\";\n+                %1 : java.type:\"java.lang.RuntimeException\" = invoke %0 @java.ref:\"DenotableTypesTest::m2(java.lang.Throwable):java.lang.Throwable\";\n@@ -90,1 +90,1 @@\n-                %1 : java.type:\"DenotableTypesTest$C\" = cast %0 @\"DenotableTypesTest$C\";\n+                %1 : java.type:\"DenotableTypesTest$C\" = cast %0 @java.type:\"DenotableTypesTest$C\";\n@@ -92,2 +92,2 @@\n-                %3 : java.type:\"DenotableTypesTest$D\" = cast %2 @\"DenotableTypesTest$D\";\n-                %4 : java.type:\"DenotableTypesTest$A\" = invoke %1 %3 @\"DenotableTypesTest::pick(java.lang.Object, java.lang.Object):java.lang.Object\";\n+                %3 : java.type:\"DenotableTypesTest$D\" = cast %2 @java.type:\"DenotableTypesTest$D\";\n+                %4 : java.type:\"DenotableTypesTest$A\" = invoke %1 %3 @java.ref:\"DenotableTypesTest::pick(java.lang.Object, java.lang.Object):java.lang.Object\";\n@@ -108,1 +108,1 @@\n-                %4 : java.type:\"java.lang.Number\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                %4 : java.type:\"java.lang.Number\" = invoke %2 %3 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n@@ -124,1 +124,1 @@\n-                %4 : java.type:\"java.lang.Object\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                %4 : java.type:\"java.lang.Object\" = invoke %2 %3 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n@@ -141,2 +141,2 @@\n-                %3 : java.type:\"java.lang.Runnable\" = cast %2 @\"java.lang.Runnable\";\n-                invoke %3 @\"DenotableTypesTest::consume(java.lang.Runnable):void\";\n+                %3 : java.type:\"java.lang.Runnable\" = cast %2 @java.type:\"java.lang.Runnable\";\n+                invoke %3 @java.ref:\"DenotableTypesTest::consume(java.lang.Runnable):void\";\n@@ -161,1 +161,1 @@\n-                %4 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n+                %4 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %2 %3 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n@@ -164,2 +164,2 @@\n-                %7 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %5 %6 @\"java.util.List::get(int):java.lang.Object\";\n-                invoke %4 %7 @\"DenotableTypesTest$Adder::add(DenotableTypesTest$Adder):void\";\n+                %7 : java.type:\"DenotableTypesTest$Adder<java.lang.Integer>\" = invoke %5 %6 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n+                invoke %4 %7 @java.ref:\"DenotableTypesTest$Adder::add(DenotableTypesTest$Adder):void\";\n@@ -183,2 +183,2 @@\n-                %4 : java.type:\"DenotableTypesTest$Box<java.lang.Integer>\" = invoke %2 %3 @\"java.util.List::get(int):java.lang.Object\";\n-                %5 : java.type:\"java.lang.Integer\" = field.load %4 @\"DenotableTypesTest$Box::x:java.lang.Object\";\n+                %4 : java.type:\"DenotableTypesTest$Box<java.lang.Integer>\" = invoke %2 %3 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n+                %5 : java.type:\"java.lang.Integer\" = field.load %4 @java.ref:\"DenotableTypesTest$Box::x:java.lang.Object\";\n@@ -212,1 +212,1 @@\n-                        invoke @\"DenotableTypesTest::g():void\";\n+                        invoke @java.ref:\"DenotableTypesTest::g():void\";\n@@ -218,2 +218,2 @@\n-                        %3 : java.type:\"DenotableTypesTest$E\" = cast %2 @\"DenotableTypesTest$E\";\n-                        invoke %3 @\"DenotableTypesTest$E::m():void\";\n+                        %3 : java.type:\"DenotableTypesTest$E\" = cast %2 @java.type:\"DenotableTypesTest$E\";\n+                        invoke %3 @java.ref:\"DenotableTypesTest$E::m():void\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/DenotableTypesTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @java.ref:\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n@@ -54,1 +54,1 @@\n-                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @java.ref:\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n@@ -65,1 +65,1 @@\n-                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n+                %1 : java.type:\"java.lang.constant.DirectMethodHandleDesc$Kind\" = field.load @java.ref:\"java.lang.constant.DirectMethodHandleDesc$Kind::VIRTUAL:java.lang.constant.DirectMethodHandleDesc$Kind\";\n@@ -72,1 +72,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/EnumAccessTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                field.store %1 @\"FieldAccessTest::s_f:int\";\n+                field.store %1 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -51,1 +51,1 @@\n-                field.store %0 %2 @\"FieldAccessTest::f:int\";\n+                field.store %0 %2 @java.ref:\"FieldAccessTest::f:int\";\n@@ -63,1 +63,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -66,2 +66,2 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n-                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -70,1 +70,1 @@\n-                field.store %6 @\"FieldAccessTest::s_f:int\";\n+                field.store %6 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -83,2 +83,2 @@\n-                field.store %0 %1 @\"FieldAccessTest::f:int\";\n-                field.store %1 @\"FieldAccessTest::s_f:int\";\n+                field.store %0 %1 @java.ref:\"FieldAccessTest::f:int\";\n+                field.store %1 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -96,1 +96,1 @@\n-                field.store %0 %1 @\"FieldAccessTest::f:int\";\n+                field.store %0 %1 @java.ref:\"FieldAccessTest::f:int\";\n@@ -107,1 +107,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -119,1 +119,1 @@\n-                field.store %0 %1 @\"FieldAccessTest::f:int\";\n+                field.store %0 %1 @java.ref:\"FieldAccessTest::f:int\";\n@@ -130,1 +130,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -141,2 +141,2 @@\n-                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n-                %2 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n+                %2 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -168,2 +168,2 @@\n-                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @\"FieldAccessTest$A::b:FieldAccessTest$B\";\n-                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @\"FieldAccessTest$B::c:FieldAccessTest$C\";\n+                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @java.ref:\"FieldAccessTest$A::b:FieldAccessTest$B\";\n+                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @java.ref:\"FieldAccessTest$B::c:FieldAccessTest$C\";\n@@ -171,1 +171,1 @@\n-                field.store %5 %6 @\"FieldAccessTest$C::f:int\";\n+                field.store %5 %6 @java.ref:\"FieldAccessTest$C::f:int\";\n@@ -187,1 +187,1 @@\n-                %1 : java.type:\"int\" = field.load @\"FieldAccessTest$X::s_f:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$X::s_f:int\";\n@@ -199,1 +199,1 @@\n-                field.store %1 @\"FieldAccessTest$X::s_f:int\";\n+                field.store %1 @java.ref:\"FieldAccessTest$X::s_f:int\";\n@@ -211,1 +211,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -214,2 +214,2 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n-                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -218,1 +218,1 @@\n-                field.store %6 @\"FieldAccessTest::s_f:int\";\n+                field.store %6 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -230,1 +230,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -233,2 +233,2 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n-                %4 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n+                %4 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -237,1 +237,1 @@\n-                field.store %6 @\"FieldAccessTest::s_f:int\";\n+                field.store %6 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -249,1 +249,1 @@\n-                %1 : java.type:\"int\" = field.load @\"FieldAccessTest$X::s_f:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$X::s_f:int\";\n@@ -252,1 +252,1 @@\n-                field.store %3 @\"FieldAccessTest$X::s_f:int\";\n+                field.store %3 @java.ref:\"FieldAccessTest$X::s_f:int\";\n@@ -263,1 +263,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -266,2 +266,2 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n-                field.store %3 @\"FieldAccessTest::s_f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n+                field.store %3 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -280,3 +280,3 @@\n-                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @\"FieldAccessTest$A::b:FieldAccessTest$B\";\n-                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @\"FieldAccessTest$B::c:FieldAccessTest$C\";\n-                %6 : java.type:\"int\" = field.load %5 @\"FieldAccessTest$C::f:int\";\n+                %4 : java.type:\"FieldAccessTest$B\" = field.load %3 @java.ref:\"FieldAccessTest$A::b:FieldAccessTest$B\";\n+                %5 : java.type:\"FieldAccessTest$C\" = field.load %4 @java.ref:\"FieldAccessTest$B::c:FieldAccessTest$C\";\n+                %6 : java.type:\"int\" = field.load %5 @java.ref:\"FieldAccessTest$C::f:int\";\n@@ -285,1 +285,1 @@\n-                field.store %5 %8 @\"FieldAccessTest$C::f:int\";\n+                field.store %5 %8 @java.ref:\"FieldAccessTest$C::f:int\";\n@@ -296,1 +296,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -299,1 +299,1 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n@@ -301,1 +301,1 @@\n-                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %5 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -304,1 +304,1 @@\n-                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                field.store %0 %7 @java.ref:\"FieldAccessTest::f:int\";\n@@ -317,1 +317,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -320,1 +320,1 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n@@ -322,1 +322,1 @@\n-                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %5 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -325,1 +325,1 @@\n-                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                field.store %0 %7 @java.ref:\"FieldAccessTest::f:int\";\n@@ -338,1 +338,1 @@\n-                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -341,1 +341,1 @@\n-                field.store %3 @\"FieldAccessTest::s_f:int\";\n+                field.store %3 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -343,1 +343,1 @@\n-                %5 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %5 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -346,1 +346,1 @@\n-                field.store %7 @\"FieldAccessTest::s_f:int\";\n+                field.store %7 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -361,1 +361,1 @@\n-                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$X::f:int\";\n+                %4 : java.type:\"int\" = field.load %3 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -364,1 +364,1 @@\n-                field.store %3 %6 @\"FieldAccessTest$X::f:int\";\n+                field.store %3 %6 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -367,1 +367,1 @@\n-                %9 : java.type:\"int\" = field.load %8 @\"FieldAccessTest$X::f:int\";\n+                %9 : java.type:\"int\" = field.load %8 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -370,1 +370,1 @@\n-                field.store %8 %11 @\"FieldAccessTest$X::f:int\";\n+                field.store %8 %11 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -386,1 +386,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -389,1 +389,1 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n@@ -391,1 +391,1 @@\n-                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %5 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -394,1 +394,1 @@\n-                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                field.store %0 %7 @java.ref:\"FieldAccessTest::f:int\";\n@@ -407,1 +407,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -410,1 +410,1 @@\n-                field.store %0 %3 @\"FieldAccessTest::f:int\";\n+                field.store %0 %3 @java.ref:\"FieldAccessTest::f:int\";\n@@ -412,1 +412,1 @@\n-                %5 : java.type:\"int\" = field.load %0 @\"FieldAccessTest::f:int\";\n+                %5 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest::f:int\";\n@@ -415,1 +415,1 @@\n-                field.store %0 %7 @\"FieldAccessTest::f:int\";\n+                field.store %0 %7 @java.ref:\"FieldAccessTest::f:int\";\n@@ -428,1 +428,1 @@\n-                %1 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -431,1 +431,1 @@\n-                field.store %3 @\"FieldAccessTest::s_f:int\";\n+                field.store %3 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -433,1 +433,1 @@\n-                %5 : java.type:\"int\" = field.load @\"FieldAccessTest::s_f:int\";\n+                %5 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -436,1 +436,1 @@\n-                field.store %7 @\"FieldAccessTest::s_f:int\";\n+                field.store %7 @java.ref:\"FieldAccessTest::s_f:int\";\n@@ -451,1 +451,1 @@\n-                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$X::f:int\";\n+                %4 : java.type:\"int\" = field.load %3 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -454,1 +454,1 @@\n-                field.store %3 %6 @\"FieldAccessTest$X::f:int\";\n+                field.store %3 %6 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -457,1 +457,1 @@\n-                %9 : java.type:\"int\" = field.load %8 @\"FieldAccessTest$X::f:int\";\n+                %9 : java.type:\"int\" = field.load %8 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -460,1 +460,1 @@\n-                field.store %8 %11 @\"FieldAccessTest$X::f:int\";\n+                field.store %8 %11 @java.ref:\"FieldAccessTest$X::f:int\";\n@@ -477,1 +477,1 @@\n-                    %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest$Y::f:int\";\n+                    %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -479,1 +479,1 @@\n-                    %3 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                    %3 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -493,1 +493,1 @@\n-                    field.store %0 %1 @\"FieldAccessTest$Y::f:int\";\n+                    field.store %0 %1 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -495,1 +495,1 @@\n-                    field.store %2 @\"FieldAccessTest$Y::s_f:int\";\n+                    field.store %2 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -507,1 +507,1 @@\n-                    %1 : java.type:\"int\" = field.load %0 @\"FieldAccessTest$Y::f:int\";\n+                    %1 : java.type:\"int\" = field.load %0 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -510,2 +510,2 @@\n-                    field.store %0 %3 @\"FieldAccessTest$Y::f:int\";\n-                    %4 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                    field.store %0 %3 @java.ref:\"FieldAccessTest$Y::f:int\";\n+                    %4 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -514,1 +514,1 @@\n-                    field.store %6 @\"FieldAccessTest$Y::s_f:int\";\n+                    field.store %6 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -529,1 +529,1 @@\n-                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$Y::f:int\";\n+                %4 : java.type:\"int\" = field.load %3 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -532,1 +532,1 @@\n-                %7 : java.type:\"int\" = field.load %6 @\"FieldAccessTest$Y::yf:int\";\n+                %7 : java.type:\"int\" = field.load %6 @java.ref:\"FieldAccessTest$Y::yf:int\";\n@@ -535,1 +535,1 @@\n-                %9 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                %9 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -537,1 +537,1 @@\n-                %10 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                %10 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -540,1 +540,1 @@\n-                %12 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                %12 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -542,1 +542,1 @@\n-                %13 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                %13 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -562,1 +562,1 @@\n-                field.store %3 %4 @\"FieldAccessTest$Y::f:int\";\n+                field.store %3 %4 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -565,1 +565,1 @@\n-                field.store %5 %6 @\"FieldAccessTest$Y::yf:int\";\n+                field.store %5 %6 @java.ref:\"FieldAccessTest$Y::yf:int\";\n@@ -568,1 +568,1 @@\n-                field.store %8 @\"FieldAccessTest$Y::s_yf:int\";\n+                field.store %8 @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -570,1 +570,1 @@\n-                field.store %9 @\"FieldAccessTest$Y::s_yf:int\";\n+                field.store %9 @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -573,1 +573,1 @@\n-                field.store %11 @\"FieldAccessTest$Y::s_f:int\";\n+                field.store %11 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -575,1 +575,1 @@\n-                field.store %12 @\"FieldAccessTest$Y::s_f:int\";\n+                field.store %12 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -593,1 +593,1 @@\n-                %4 : java.type:\"int\" = field.load %3 @\"FieldAccessTest$Y::f:int\";\n+                %4 : java.type:\"int\" = field.load %3 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -596,1 +596,1 @@\n-                field.store %3 %6 @\"FieldAccessTest$Y::f:int\";\n+                field.store %3 %6 @java.ref:\"FieldAccessTest$Y::f:int\";\n@@ -598,1 +598,1 @@\n-                %8 : java.type:\"int\" = field.load %7 @\"FieldAccessTest$Y::yf:int\";\n+                %8 : java.type:\"int\" = field.load %7 @java.ref:\"FieldAccessTest$Y::yf:int\";\n@@ -601,1 +601,1 @@\n-                field.store %7 %10 @\"FieldAccessTest$Y::yf:int\";\n+                field.store %7 %10 @java.ref:\"FieldAccessTest$Y::yf:int\";\n@@ -603,1 +603,1 @@\n-                %12 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                %12 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -606,2 +606,2 @@\n-                field.store %14 @\"FieldAccessTest$Y::s_yf:int\";\n-                %15 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_yf:int\";\n+                field.store %14 @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n+                %15 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -610,1 +610,1 @@\n-                field.store %17 @\"FieldAccessTest$Y::s_yf:int\";\n+                field.store %17 @java.ref:\"FieldAccessTest$Y::s_yf:int\";\n@@ -612,1 +612,1 @@\n-                %19 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                %19 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -615,2 +615,2 @@\n-                field.store %21 @\"FieldAccessTest$Y::s_f:int\";\n-                %22 : java.type:\"int\" = field.load @\"FieldAccessTest$Y::s_f:int\";\n+                field.store %21 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n+                %22 : java.type:\"int\" = field.load @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -619,1 +619,1 @@\n-                field.store %24 @\"FieldAccessTest$Y::s_f:int\";\n+                field.store %24 @java.ref:\"FieldAccessTest$Y::s_f:int\";\n@@ -636,1 +636,1 @@\n-                %1 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n+                %1 : java.type:\"int\" = field.load @java.ref:\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n@@ -638,1 +638,1 @@\n-                %3 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n+                %3 : java.type:\"int\" = field.load @java.ref:\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n@@ -640,1 +640,1 @@\n-                %4 : java.type:\"int\" = field.load @\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n+                %4 : java.type:\"int\" = field.load @java.ref:\"java.util.Spliterator$OfInt::CONCURRENT:int\";\n@@ -654,1 +654,1 @@\n-                %1 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %1 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -675,1 +675,1 @@\n-                %1 : java.type:\"FieldAccessTest$Box<java.lang.String>\" = new %0 @\"FieldAccessTest$Box::(java.lang.Object)\";\n+                %1 : java.type:\"FieldAccessTest$Box<java.lang.String>\" = new %0 @java.ref:\"FieldAccessTest$Box::(java.lang.Object)\";\n@@ -678,1 +678,1 @@\n-                %4 : java.type:\"java.lang.String\" = field.load %3 @\"FieldAccessTest$Box::v:java.lang.Object\";\n+                %4 : java.type:\"java.lang.String\" = field.load %3 @java.ref:\"FieldAccessTest$Box::v:java.lang.Object\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/FieldAccessTest.java","additions":106,"deletions":106,"binary":false,"changes":212,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                                %11 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                                %11 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -63,1 +63,1 @@\n-                                invoke %11 %12 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                                invoke %11 %12 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -86,1 +86,1 @@\n-                        %4 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %3 @\"java.util.List::stream():java.util.stream.Stream\";\n+                        %4 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %3 @java.ref:\"java.util.List::stream():java.util.stream.Stream\";\n@@ -90,1 +90,1 @@\n-                            %9 : java.type:\"int\" = invoke %8 @\"java.lang.String::length():int\";\n+                            %9 : java.type:\"int\" = invoke %8 @java.ref:\"java.lang.String::length():int\";\n@@ -95,2 +95,2 @@\n-                        %12 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %4 %5 @\"java.util.stream.Stream::filter(java.util.function.Predicate):java.util.stream.Stream\";\n-                        %13 : java.type:\"java.util.List<java.lang.String>\" = invoke %12 @\"java.util.stream.Stream::toList():java.util.List\";\n+                        %12 : java.type:\"java.util.stream.Stream<java.lang.String>\" = invoke %4 %5 @java.ref:\"java.util.stream.Stream::filter(java.util.function.Predicate):java.util.stream.Stream\";\n+                        %13 : java.type:\"java.util.List<java.lang.String>\" = invoke %12 @java.ref:\"java.util.stream.Stream::toList():java.util.List\";\n@@ -104,1 +104,1 @@\n-                        %17 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %17 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -106,1 +106,1 @@\n-                        invoke %17 %18 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                        invoke %17 %18 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -192,1 +192,1 @@\n-                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -194,1 +194,1 @@\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %12 %13 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -266,1 +266,1 @@\n-                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -268,1 +268,1 @@\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %12 %13 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -334,1 +334,1 @@\n-                        %9 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %9 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -336,1 +336,1 @@\n-                        invoke %9 %10 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %9 %10 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -376,1 +376,1 @@\n-                        %12 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %12 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -378,1 +378,1 @@\n-                        invoke %12 %13 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %12 %13 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -412,1 +412,1 @@\n-                        %10 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %10 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -414,1 +414,1 @@\n-                        invoke %10 %11 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %10 %11 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -443,1 +443,1 @@\n-                        %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %7 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -445,1 +445,1 @@\n-                        invoke %7 %8 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %7 %8 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -522,1 +522,1 @@\n-                        %25 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %25 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -524,2 +524,2 @@\n-                        invoke %25 %26 @\"java.io.PrintStream::println(int):void\";\n-                        %27 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        invoke %25 %26 @java.ref:\"java.io.PrintStream::println(int):void\";\n+                        %27 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -527,1 +527,1 @@\n-                        invoke %27 %28 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %27 %28 @java.ref:\"java.io.PrintStream::println(int):void\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ForLoopTest.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -333,1 +333,1 @@\n-                        %4 : java.type:\"boolean\" = invoke %3 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        %4 : java.type:\"boolean\" = invoke %3 @java.ref:\"java.lang.Boolean::booleanValue():boolean\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-                invoke %0 %4 @\"ImplicitConversionTest::m(long):void\";\n+                invoke %0 %4 @java.ref:\"ImplicitConversionTest::m(long):void\";\n@@ -465,1 +465,1 @@\n-                invoke %0 %3 %4 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                invoke %0 %3 %4 @java.ref:\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -481,1 +481,1 @@\n-                invoke %0 %3 %4 %6 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                invoke %0 %3 %4 %6 @java.ref:\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -499,1 +499,1 @@\n-                invoke %0 %3 %4 %6 %8 @\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                invoke %0 %3 %4 %6 %8 @java.ref:\"ImplicitConversionTest::m(int, int, long[]):void\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -518,1 +518,1 @@\n-                %5 : java.type:\"ImplicitConversionTest$Box\" = new %4 @\"ImplicitConversionTest$Box::(long)\";\n+                %5 : java.type:\"ImplicitConversionTest$Box\" = new %4 @java.ref:\"ImplicitConversionTest$Box::(long)\";\n@@ -532,1 +532,1 @@\n-                %5 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n+                %5 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 @java.ref:\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n@@ -548,1 +548,1 @@\n-                %7 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n+                %7 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 @java.ref:\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n@@ -566,1 +566,1 @@\n-                %9 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 %8 @\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n+                %9 : java.type:\"ImplicitConversionTest$Box\" = new %3 %4 %6 %8 @java.ref:\"ImplicitConversionTest$Box::(int, int, long[])\" @new.varargs=\"true\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-                invoke %2 @\"IntersectionTypeTest$A::m_A():void\";\n+                invoke %2 @java.ref:\"IntersectionTypeTest$A::m_A():void\";\n@@ -58,2 +58,2 @@\n-                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @\"IntersectionTypeTest$B\";\n-                invoke %4 @\"IntersectionTypeTest$B::m_B():void\";\n+                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @java.type:\"IntersectionTypeTest$B\";\n+                invoke %4 @java.ref:\"IntersectionTypeTest$B::m_B():void\";\n@@ -61,2 +61,2 @@\n-                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @\"IntersectionTypeTest$C\";\n-                invoke %6 @\"IntersectionTypeTest$C::m_C():void\";\n+                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @java.type:\"IntersectionTypeTest$C\";\n+                invoke %6 @java.ref:\"IntersectionTypeTest$C::m_C():void\";\n@@ -79,1 +79,1 @@\n-                %3 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n+                %3 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n@@ -82,1 +82,1 @@\n-                %6 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n+                %6 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n@@ -85,1 +85,1 @@\n-                %9 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n+                %9 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n@@ -104,1 +104,1 @@\n-                    invoke %5 @\"IntersectionTypeTest$A::m_A():void\";\n+                    invoke %5 @java.ref:\"IntersectionTypeTest$A::m_A():void\";\n@@ -109,1 +109,1 @@\n-                %8 : java.type:\"IntersectionTypeTest$B\" = cast %7 @\"IntersectionTypeTest$B\";\n+                %8 : java.type:\"IntersectionTypeTest$B\" = cast %7 @java.type:\"IntersectionTypeTest$B\";\n@@ -113,1 +113,1 @@\n-                    invoke %11 @\"IntersectionTypeTest$B::m_B():void\";\n+                    invoke %11 @java.ref:\"IntersectionTypeTest$B::m_B():void\";\n@@ -118,1 +118,1 @@\n-                %14 : java.type:\"IntersectionTypeTest$C\" = cast %13 @\"IntersectionTypeTest$C\";\n+                %14 : java.type:\"IntersectionTypeTest$C\" = cast %13 @java.type:\"IntersectionTypeTest$C\";\n@@ -122,1 +122,1 @@\n-                    invoke %17 @\"IntersectionTypeTest$C::m_C():void\";\n+                    invoke %17 @java.ref:\"IntersectionTypeTest$C::m_C():void\";\n@@ -144,1 +144,1 @@\n-                invoke %2 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n+                invoke %2 @java.ref:\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n@@ -146,2 +146,2 @@\n-                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @\"IntersectionTypeTest$B\";\n-                invoke %4 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n+                %4 : java.type:\"IntersectionTypeTest$B\" = cast %3 @java.type:\"IntersectionTypeTest$B\";\n+                invoke %4 @java.ref:\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n@@ -149,2 +149,2 @@\n-                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @\"IntersectionTypeTest$C\";\n-                invoke %6 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n+                %6 : java.type:\"IntersectionTypeTest$C\" = cast %5 @java.type:\"IntersectionTypeTest$C\";\n+                invoke %6 @java.ref:\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n@@ -189,1 +189,1 @@\n-                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @java.ref:\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n@@ -192,1 +192,1 @@\n-                invoke %8 @\"IntersectionTypeTest$A::m_A():void\";\n+                invoke %8 @java.ref:\"IntersectionTypeTest$A::m_A():void\";\n@@ -194,2 +194,2 @@\n-                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @\"IntersectionTypeTest$B\";\n-                invoke %10 @\"IntersectionTypeTest$B::m_B():void\";\n+                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @java.type:\"IntersectionTypeTest$B\";\n+                invoke %10 @java.ref:\"IntersectionTypeTest$B::m_B():void\";\n@@ -197,2 +197,2 @@\n-                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @\"IntersectionTypeTest$C\";\n-                invoke %12 @\"IntersectionTypeTest$C::m_C():void\";\n+                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @java.type:\"IntersectionTypeTest$C\";\n+                invoke %12 @java.ref:\"IntersectionTypeTest$C::m_C():void\";\n@@ -216,1 +216,1 @@\n-                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @java.ref:\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n@@ -219,1 +219,1 @@\n-                %9 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n+                %9 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$A::f_A:java.lang.Object\";\n@@ -222,1 +222,1 @@\n-                %12 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n+                %12 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$B::f_B:java.lang.Object\";\n@@ -225,1 +225,1 @@\n-                %15 : java.type:\"java.lang.Object\" = field.load @\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n+                %15 : java.type:\"java.lang.Object\" = field.load @java.ref:\"IntersectionTypeTest$C::f_C:java.lang.Object\";\n@@ -244,1 +244,1 @@\n-                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @java.ref:\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n@@ -250,1 +250,1 @@\n-                    invoke %11 @\"IntersectionTypeTest$A::m_A():void\";\n+                    invoke %11 @java.ref:\"IntersectionTypeTest$A::m_A():void\";\n@@ -255,1 +255,1 @@\n-                %14 : java.type:\"IntersectionTypeTest$B\" = cast %13 @\"IntersectionTypeTest$B\";\n+                %14 : java.type:\"IntersectionTypeTest$B\" = cast %13 @java.type:\"IntersectionTypeTest$B\";\n@@ -259,1 +259,1 @@\n-                    invoke %17 @\"IntersectionTypeTest$B::m_B():void\";\n+                    invoke %17 @java.ref:\"IntersectionTypeTest$B::m_B():void\";\n@@ -264,1 +264,1 @@\n-                %20 : java.type:\"IntersectionTypeTest$C\" = cast %19 @\"IntersectionTypeTest$C\";\n+                %20 : java.type:\"IntersectionTypeTest$C\" = cast %19 @java.type:\"IntersectionTypeTest$C\";\n@@ -268,1 +268,1 @@\n-                    invoke %23 @\"IntersectionTypeTest$C::m_C():void\";\n+                    invoke %23 @java.ref:\"IntersectionTypeTest$C::m_C():void\";\n@@ -289,1 +289,1 @@\n-                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n+                %6 : java.type:\"IntersectionTypeTest$A\" = invoke %4 %5 @java.ref:\"IntersectionTypeTest::makeIntersection(IntersectionTypeTest$A, IntersectionTypeTest$A):IntersectionTypeTest$A\";\n@@ -292,1 +292,1 @@\n-                invoke %8 @\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n+                invoke %8 @java.ref:\"IntersectionTypeTest::g_A(IntersectionTypeTest$A):void\";\n@@ -294,2 +294,2 @@\n-                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @\"IntersectionTypeTest$B\";\n-                invoke %10 @\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n+                %10 : java.type:\"IntersectionTypeTest$B\" = cast %9 @java.type:\"IntersectionTypeTest$B\";\n+                invoke %10 @java.ref:\"IntersectionTypeTest::g_B(IntersectionTypeTest$B):void\";\n@@ -297,2 +297,2 @@\n-                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @\"IntersectionTypeTest$C\";\n-                invoke %12 @\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n+                %12 : java.type:\"IntersectionTypeTest$C\" = cast %11 @java.type:\"IntersectionTypeTest$C\";\n+                invoke %12 @java.ref:\"IntersectionTypeTest::g_C(IntersectionTypeTest$C):void\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/IntersectionTypeTest.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                    %4 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                    %4 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -46,1 +46,1 @@\n-                    invoke %4 %5 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                    invoke %4 %5 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -52,1 +52,1 @@\n-                invoke %7 %8 @\"java.util.function.Consumer::accept(java.lang.Object):void\";\n+                invoke %7 %8 @java.ref:\"java.util.function.Consumer::accept(java.lang.Object):void\";\n@@ -72,1 +72,1 @@\n-                %5 : java.type:\"java.lang.String\" = invoke %4 @\"java.util.function.Supplier::get():java.lang.Object\";\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @java.ref:\"java.util.function.Supplier::get():java.lang.Object\";\n@@ -105,1 +105,1 @@\n-                    %2 : java.type:\"java.lang.String\" = field.load %0 @\"LambdaTest::s_f:java.lang.String\";\n+                    %2 : java.type:\"java.lang.String\" = field.load %0 @java.ref:\"LambdaTest::s_f:java.lang.String\";\n@@ -136,1 +136,1 @@\n-                        %18 : java.type:\"java.lang.Integer\" = invoke %17 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %18 : java.type:\"java.lang.Integer\" = invoke %17 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -142,2 +142,2 @@\n-                    %22 : java.type:\"java.lang.Integer\" = invoke %21 @\"java.util.function.Supplier::get():java.lang.Object\";\n-                    %23 : java.type:\"int\" = invoke %22 @\"java.lang.Integer::intValue():int\";\n+                    %22 : java.type:\"java.lang.Integer\" = invoke %21 @java.ref:\"java.util.function.Supplier::get():java.lang.Object\";\n+                    %23 : java.type:\"int\" = invoke %22 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -147,1 +147,1 @@\n-                    %27 : java.type:\"java.lang.Integer\" = invoke %26 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                    %27 : java.type:\"java.lang.Integer\" = invoke %26 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -174,2 +174,2 @@\n-                    %2 : java.type:\"int\" = field.load %0 @\"LambdaTest::f:int\";\n-                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                    %2 : java.type:\"int\" = field.load %0 @java.ref:\"LambdaTest::f:int\";\n+                    %3 : java.type:\"java.lang.Integer\" = invoke %2 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/LambdaTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-                %1 : java.type:\"LocalClassTest::$1Foo\" = new %0 @\"LocalClassTest::$1Foo::(LocalClassTest)\";\n-                invoke %1 @\"LocalClassTest::$1Foo::m():void\";\n+                %1 : java.type:\"LocalClassTest::$1Foo\" = new %0 @java.ref:\"LocalClassTest::$1Foo::(LocalClassTest)\";\n+                invoke %1 @java.ref:\"LocalClassTest::$1Foo::m():void\";\n@@ -60,2 +60,2 @@\n-                %1 : java.type:\"LocalClassTest::$1\" = new %0 @\"LocalClassTest::$1::(LocalClassTest)\";\n-                invoke %1 @\"LocalClassTest::$1::m():void\";\n+                %1 : java.type:\"LocalClassTest::$1\" = new %0 @java.ref:\"LocalClassTest::$1::(LocalClassTest)\";\n+                invoke %1 @java.ref:\"LocalClassTest::$1::m():void\";\n@@ -76,2 +76,2 @@\n-                %4 : java.type:\"LocalClassTest::$2Foo\" = new %0 %3 @\"LocalClassTest::$2Foo::(LocalClassTest, java.lang.String)\";\n-                %5 : java.type:\"java.lang.String\" = invoke %4 @\"LocalClassTest::$2Foo::m():java.lang.String\";\n+                %4 : java.type:\"LocalClassTest::$2Foo\" = new %0 %3 @java.ref:\"LocalClassTest::$2Foo::(LocalClassTest, java.lang.String)\";\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @java.ref:\"LocalClassTest::$2Foo::m():java.lang.String\";\n@@ -93,2 +93,2 @@\n-                %4 : java.type:\"LocalClassTest::$2\" = new %0 %3 @\"LocalClassTest::$2::(LocalClassTest, java.lang.String)\";\n-                %5 : java.type:\"java.lang.String\" = invoke %4 @\"LocalClassTest::$2::m():java.lang.String\";\n+                %4 : java.type:\"LocalClassTest::$2\" = new %0 %3 @java.ref:\"LocalClassTest::$2::(LocalClassTest, java.lang.String)\";\n+                %5 : java.type:\"java.lang.String\" = invoke %4 @java.ref:\"LocalClassTest::$2::m():java.lang.String\";\n@@ -111,2 +111,2 @@\n-                %6 : java.type:\"LocalClassTest::$3Foo\" = new %0 %5 @\"LocalClassTest::$3Foo::(LocalClassTest, java.lang.String)\";\n-                %7 : java.type:\"java.lang.String\" = invoke %6 @\"LocalClassTest::$3Foo::m():java.lang.String\";\n+                %6 : java.type:\"LocalClassTest::$3Foo\" = new %0 %5 @java.ref:\"LocalClassTest::$3Foo::(LocalClassTest, java.lang.String)\";\n+                %7 : java.type:\"java.lang.String\" = invoke %6 @java.ref:\"LocalClassTest::$3Foo::m():java.lang.String\";\n@@ -131,2 +131,2 @@\n-                %6 : java.type:\"LocalClassTest::$3\" = new %0 %5 @\"LocalClassTest::$3::(LocalClassTest, java.lang.String)\";\n-                %7 : java.type:\"java.lang.String\" = invoke %6 @\"LocalClassTest::$3::m():java.lang.String\";\n+                %6 : java.type:\"LocalClassTest::$3\" = new %0 %5 @java.ref:\"LocalClassTest::$3::(LocalClassTest, java.lang.String)\";\n+                %7 : java.type:\"java.lang.String\" = invoke %6 @java.ref:\"LocalClassTest::$3::m():java.lang.String\";\n@@ -150,1 +150,1 @@\n-                %7 : java.type:\"LocalClassTest::$1Bar\" = new %0 %5 %6 @\"LocalClassTest::$1Bar::(LocalClassTest, int, int)\";\n+                %7 : java.type:\"LocalClassTest::$1Bar\" = new %0 %5 %6 @java.ref:\"LocalClassTest::$1Bar::(LocalClassTest, int, int)\";\n@@ -172,1 +172,1 @@\n-                %7 : java.type:\"LocalClassTest::$4\" = new %0 %5 %6 @\"LocalClassTest::$4::(LocalClassTest, int, int)\";\n+                %7 : java.type:\"LocalClassTest::$4\" = new %0 %5 %6 @java.ref:\"LocalClassTest::$4::(LocalClassTest, int, int)\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/LocalClassTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                invoke %0 @\"MethodCallTest::m():void\";\n+                invoke %0 @java.ref:\"MethodCallTest::m():void\";\n@@ -60,1 +60,1 @@\n-                invoke %0 @\"MethodCallTest::m():void\";\n+                invoke %0 @java.ref:\"MethodCallTest::m():void\";\n@@ -71,1 +71,1 @@\n-                invoke %0 @\"MethodCallTest::m():void\";\n+                invoke %0 @java.ref:\"MethodCallTest::m():void\";\n@@ -82,1 +82,1 @@\n-                %1 : java.type:\"int\" = invoke %0 @\"MethodCallTest::m_int():int\";\n+                %1 : java.type:\"int\" = invoke %0 @java.ref:\"MethodCallTest::m_int():int\";\n@@ -97,1 +97,1 @@\n-                invoke @\"MethodCallTest::ms():void\";\n+                invoke @java.ref:\"MethodCallTest::ms():void\";\n@@ -108,1 +108,1 @@\n-                invoke @\"MethodCallTest::ms():void\";\n+                invoke @java.ref:\"MethodCallTest::ms():void\";\n@@ -119,1 +119,1 @@\n-                %1 : java.type:\"java.util.List<java.lang.String>\" = invoke @\"java.util.List::of():java.util.List\";\n+                %1 : java.type:\"java.util.List<java.lang.String>\" = invoke @java.ref:\"java.util.List::of():java.util.List\";\n@@ -138,1 +138,1 @@\n-                %6 : java.type:\"java.lang.String\" = invoke %0 %3 %4 %5 @\"MethodCallTest::m(int, java.lang.String, java.util.List):java.lang.String\";\n+                %6 : java.type:\"java.lang.String\" = invoke %0 %3 %4 %5 @java.ref:\"MethodCallTest::m(int, java.lang.String, java.util.List):java.lang.String\";\n@@ -173,3 +173,3 @@\n-                %4 : java.type:\"MethodCallTest$B\" = invoke %3 @\"MethodCallTest$A::m():MethodCallTest$B\";\n-                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @\"MethodCallTest$B::m():MethodCallTest$C\";\n-                %6 : java.type:\"int\" = invoke %5 @\"MethodCallTest$C::m():int\";\n+                %4 : java.type:\"MethodCallTest$B\" = invoke %3 @java.ref:\"MethodCallTest$A::m():MethodCallTest$B\";\n+                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @java.ref:\"MethodCallTest$B::m():MethodCallTest$C\";\n+                %6 : java.type:\"int\" = invoke %5 @java.ref:\"MethodCallTest$C::m():int\";\n@@ -188,2 +188,2 @@\n-                %4 : java.type:\"MethodCallTest$B\" = field.load %3 @\"MethodCallTest$A::b:MethodCallTest$B\";\n-                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @\"MethodCallTest$B::m():MethodCallTest$C\";\n+                %4 : java.type:\"MethodCallTest$B\" = field.load %3 @java.ref:\"MethodCallTest$A::b:MethodCallTest$B\";\n+                %5 : java.type:\"MethodCallTest$C\" = invoke %4 @java.ref:\"MethodCallTest$B::m():MethodCallTest$C\";\n@@ -201,1 +201,1 @@\n-                %3 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %3 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -203,1 +203,1 @@\n-                invoke %3 %4 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                invoke %3 %4 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -225,6 +225,6 @@\n-                    invoke %0 @\"MethodCallTest$Y::x():void\";\n-                    invoke %0 @\"MethodCallTest$Y::y():void\";\n-                    invoke @\"MethodCallTest$Y::sx():void\";\n-                    invoke @\"MethodCallTest$Y::sy():void\";\n-                    invoke @\"MethodCallTest$Y::sx():void\";\n-                    invoke @\"MethodCallTest$Y::sy():void\";\n+                    invoke %0 @java.ref:\"MethodCallTest$Y::x():void\";\n+                    invoke %0 @java.ref:\"MethodCallTest$Y::y():void\";\n+                    invoke @java.ref:\"MethodCallTest$Y::sx():void\";\n+                    invoke @java.ref:\"MethodCallTest$Y::sy():void\";\n+                    invoke @java.ref:\"MethodCallTest$Y::sx():void\";\n+                    invoke @java.ref:\"MethodCallTest$Y::sy():void\";\n@@ -251,1 +251,1 @@\n-                invoke %2 @\"MethodCallTest$Y::x():void\";\n+                invoke %2 @java.ref:\"MethodCallTest$Y::x():void\";\n@@ -253,1 +253,1 @@\n-                invoke %3 @\"MethodCallTest$Y::y():void\";\n+                invoke %3 @java.ref:\"MethodCallTest$Y::y():void\";\n@@ -255,1 +255,1 @@\n-                invoke @\"MethodCallTest$Y::sx():void\";\n+                invoke @java.ref:\"MethodCallTest$Y::sx():void\";\n@@ -257,3 +257,3 @@\n-                invoke @\"MethodCallTest$Y::sy():void\";\n-                invoke @\"MethodCallTest$Y::sx():void\";\n-                invoke @\"MethodCallTest$Y::sy():void\";\n+                invoke @java.ref:\"MethodCallTest$Y::sy():void\";\n+                invoke @java.ref:\"MethodCallTest$Y::sx():void\";\n+                invoke @java.ref:\"MethodCallTest$Y::sy():void\";\n@@ -280,1 +280,1 @@\n-                %4 : java.type:\"java.lang.String\" = invoke %2 %3 @\"java.util.ArrayList::get(int):java.lang.Object\";\n+                %4 : java.type:\"java.lang.String\" = invoke %2 %3 @java.ref:\"java.util.ArrayList::get(int):java.lang.Object\";\n@@ -286,1 +286,1 @@\n-                %10 : java.type:\"java.lang.String\" = invoke %8 %9 @\"java.util.List::get(int):java.lang.Object\";\n+                %10 : java.type:\"java.lang.String\" = invoke %8 %9 @java.ref:\"java.util.List::get(int):java.lang.Object\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/MethodCallTest.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                    invoke %4 @\"MethodReferenceTest::m_s(java.lang.String):void\";\n+                    invoke %4 @java.ref:\"MethodReferenceTest::m_s(java.lang.String):void\";\n@@ -71,1 +71,1 @@\n-                    invoke %6 %7 @\"MethodReferenceTest::m(java.lang.String):void\";\n+                    invoke %6 %7 @java.ref:\"MethodReferenceTest::m(java.lang.String):void\";\n@@ -88,1 +88,1 @@\n-                    invoke %0 %4 @\"MethodReferenceTest::m(java.lang.String):void\";\n+                    invoke %0 %4 @java.ref:\"MethodReferenceTest::m(java.lang.String):void\";\n@@ -109,1 +109,1 @@\n-                %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = invoke %0 %1 @\"MethodReferenceTest::a(java.lang.Object):MethodReferenceTest::A\";\n+                %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = invoke %0 %1 @java.ref:\"MethodReferenceTest::a(java.lang.Object):MethodReferenceTest::A\";\n@@ -115,1 +115,1 @@\n-                    %9 : java.type:\"java.lang.String\" = invoke %7 %8 @\"MethodReferenceTest::A::m(java.lang.Object):java.lang.Object\";\n+                    %9 : java.type:\"java.lang.String\" = invoke %7 %8 @java.ref:\"MethodReferenceTest::A::m(java.lang.Object):java.lang.Object\";\n@@ -129,1 +129,1 @@\n-                %1 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %1 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -135,1 +135,1 @@\n-                    invoke %6 %7 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                    invoke %6 %7 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -156,2 +156,2 @@\n-                    %5 : java.type:\"int\" = invoke %4 @\"java.lang.Integer::intValue():int\";\n-                    %6 : java.type:\"MethodReferenceTest$X\" = new %5 @\"MethodReferenceTest$X::(int)\";\n+                    %5 : java.type:\"int\" = invoke %4 @java.ref:\"java.lang.Integer::intValue():int\";\n+                    %6 : java.type:\"MethodReferenceTest$X\" = new %5 @java.ref:\"MethodReferenceTest$X::(int)\";\n@@ -172,1 +172,1 @@\n-                    %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = new %0 @\"MethodReferenceTest::A::(MethodReferenceTest)\";\n+                    %2 : java.type:\"MethodReferenceTest::A<java.lang.String>\" = new %0 @java.ref:\"MethodReferenceTest::A::(MethodReferenceTest)\";\n@@ -189,1 +189,1 @@\n-                    %5 : java.type:\"MethodReferenceTest::A[]\" = new %4 @\"MethodReferenceTest::A[]::(int)\";\n+                    %5 : java.type:\"MethodReferenceTest::A[]\" = new %4 @java.ref:\"MethodReferenceTest::A[]::(int)\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/MethodReferenceTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-                %2 : java.type:\"int[]\" = new %1 @\"int[]::(int)\";\n+                %2 : java.type:\"int[]\" = new %1 @java.ref:\"int[]::(int)\";\n@@ -58,1 +58,1 @@\n-                %6 : java.type:\"int[]\" = new %5 @\"int[]::(int)\";\n+                %6 : java.type:\"int[]\" = new %5 @java.ref:\"int[]::(int)\";\n@@ -71,1 +71,1 @@\n-                %2 : java.type:\"java.lang.String[]\" = new %1 @\"java.lang.String[]::(int)\";\n+                %2 : java.type:\"java.lang.String[]\" = new %1 @java.ref:\"java.lang.String[]::(int)\";\n@@ -84,1 +84,1 @@\n-                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @java.ref:\"java.lang.String[][]::(int)\";\n@@ -98,1 +98,1 @@\n-                %3 : java.type:\"java.lang.String[][]\" = new %1 %2 @\"java.lang.String[][]::(int, int)\";\n+                %3 : java.type:\"java.lang.String[][]\" = new %1 %2 @java.ref:\"java.lang.String[][]::(int, int)\";\n@@ -111,1 +111,1 @@\n-                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @java.ref:\"java.lang.String[][]::(int)\";\n@@ -113,1 +113,1 @@\n-                %4 : java.type:\"java.lang.String[]\" = new %3 @\"java.lang.String[]::(int)\";\n+                %4 : java.type:\"java.lang.String[]\" = new %3 @java.ref:\"java.lang.String[]::(int)\";\n@@ -123,1 +123,1 @@\n-                %11 : java.type:\"java.lang.String[]\" = new %10 @\"java.lang.String[]::(int)\";\n+                %11 : java.type:\"java.lang.String[]\" = new %10 @java.ref:\"java.lang.String[]::(int)\";\n@@ -144,1 +144,1 @@\n-                %2 : java.type:\"java.lang.String[][]\" = new %1 @\"java.lang.String[][]::(int)\";\n+                %2 : java.type:\"java.lang.String[][]\" = new %1 @java.ref:\"java.lang.String[][]::(int)\";\n@@ -146,1 +146,1 @@\n-                %4 : java.type:\"java.lang.String[]\" = new %3 @\"java.lang.String[]::(int)\";\n+                %4 : java.type:\"java.lang.String[]\" = new %3 @java.ref:\"java.lang.String[]::(int)\";\n@@ -156,1 +156,1 @@\n-                %11 : java.type:\"java.lang.String[]\" = new %10 @\"java.lang.String[]::(int)\";\n+                %11 : java.type:\"java.lang.String[]\" = new %10 @java.ref:\"java.lang.String[]::(int)\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NewArrayTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                %2 : java.type:\"java.math.BigDecimal\" = new %1 @\"java.math.BigDecimal::(java.lang.String)\";\n+                %2 : java.type:\"java.math.BigDecimal\" = new %1 @java.ref:\"java.math.BigDecimal::(java.lang.String)\";\n@@ -61,1 +61,1 @@\n-                %1 : java.type:\"NewTest$A\" = new @\"NewTest$A::()\";\n+                %1 : java.type:\"NewTest$A\" = new @java.ref:\"NewTest$A::()\";\n@@ -75,1 +75,1 @@\n-                %3 : java.type:\"NewTest$A\" = new %1 %2 @\"NewTest$A::(int, int)\";\n+                %3 : java.type:\"NewTest$A\" = new %1 %2 @java.ref:\"NewTest$A::(int, int)\";\n@@ -100,1 +100,1 @@\n-                %1 : java.type:\"NewTest::B\" = new %0 @\"NewTest::B::(NewTest)\";\n+                %1 : java.type:\"NewTest::B\" = new %0 @java.ref:\"NewTest::B::(NewTest)\";\n@@ -114,1 +114,1 @@\n-                %3 : java.type:\"NewTest::B\" = new %0 %1 %2 @\"NewTest::B::(NewTest, int, int)\";\n+                %3 : java.type:\"NewTest::B\" = new %0 %1 %2 @java.ref:\"NewTest::B::(NewTest, int, int)\";\n@@ -126,1 +126,1 @@\n-                %1 : java.type:\"NewTest::B\" = new %0 @\"NewTest::B::(NewTest)\";\n+                %1 : java.type:\"NewTest::B\" = new %0 @java.ref:\"NewTest::B::(NewTest)\";\n@@ -138,2 +138,2 @@\n-                %1 : java.type:\"NewTest::B\" = field.load %0 @\"NewTest::f:NewTest::B\";\n-                %2 : java.type:\"NewTest::B::C\" = new %1 @\"NewTest::B::C::(NewTest::B)\";\n+                %1 : java.type:\"NewTest::B\" = field.load %0 @java.ref:\"NewTest::f:NewTest::B\";\n+                %2 : java.type:\"NewTest::B::C\" = new %1 @java.ref:\"NewTest::B::C::(NewTest::B)\";\n@@ -151,2 +151,2 @@\n-                %1 : java.type:\"NewTest::B\" = invoke %0 @\"NewTest::b():NewTest::B\";\n-                %2 : java.type:\"NewTest::B::C\" = new %1 @\"NewTest::B::C::(NewTest::B)\";\n+                %1 : java.type:\"NewTest::B\" = invoke %0 @java.ref:\"NewTest::b():NewTest::B\";\n+                %2 : java.type:\"NewTest::B::C\" = new %1 @java.ref:\"NewTest::B::C::(NewTest::B)\";\n@@ -170,1 +170,1 @@\n-                %4 : java.type:\"NewTest$AG<java.lang.String>\" = new %3 @\"NewTest$AG::(java.util.List)\";\n+                %4 : java.type:\"NewTest$AG<java.lang.String>\" = new %3 @java.ref:\"NewTest$AG::(java.util.List)\";\n@@ -193,1 +193,1 @@\n-                  %6 : java.type:\"NewTest::BG<java.lang.String>\" = new %0 %5 @\"NewTest::BG::(NewTest, java.util.List)\";\n+                  %6 : java.type:\"NewTest::BG<java.lang.String>\" = new %0 %5 @java.ref:\"NewTest::BG::(NewTest, java.util.List)\";\n@@ -195,1 +195,1 @@\n-                  %8 : java.type:\"NewTest::BG<java.lang.String>::CG<java.lang.Number>\" = new %6 %7 @\"NewTest::BG::CG::(NewTest::BG<java.lang.String>, java.util.List)\";\n+                  %8 : java.type:\"NewTest::BG<java.lang.String>::CG<java.lang.Number>\" = new %6 %7 @java.ref:\"NewTest::BG::CG::(NewTest::BG<java.lang.String>, java.util.List)\";\n@@ -209,1 +209,1 @@\n-                %2 : java.type:\"int[]\" = new %1 @\"int[]::(int)\";\n+                %2 : java.type:\"int[]\" = new %1 @java.ref:\"int[]::(int)\";\n@@ -229,1 +229,1 @@\n-                %10 : java.type:\"java.lang.String[][][]\" = new %3 %6 %9 @\"java.lang.String[][][]::(int, int, int)\";\n+                %10 : java.type:\"java.lang.String[][][]\" = new %3 %6 %9 @java.ref:\"java.lang.String[][][]::(int, int, int)\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NewTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-                %2 : java.type:\"java.lang.String\" = cast %1 @\"java.lang.String\";\n+                %2 : java.type:\"java.lang.String\" = cast %1 @java.type:\"java.lang.String\";\n@@ -154,1 +154,1 @@\n-                %7 : java.type:\"java.lang.String\" = cast %3 @\"java.lang.String\";\n+                %7 : java.type:\"java.lang.String\" = cast %3 @java.type:\"java.lang.String\";\n@@ -284,1 +284,1 @@\n-                %11 : java.type:\"java.lang.String\" = cast %4 @\"java.lang.String\";\n+                %11 : java.type:\"java.lang.String\" = cast %4 @java.type:\"java.lang.String\";\n@@ -417,1 +417,1 @@\n-                %11 : java.type:\"java.lang.String\" = cast %4 @\"java.lang.String\";\n+                %11 : java.type:\"java.lang.String\" = cast %4 @java.type:\"java.lang.String\";\n@@ -448,1 +448,1 @@\n-                invoke %1 @\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n+                invoke %1 @java.ref:\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n@@ -461,1 +461,1 @@\n-                invoke %1 %2 @\"NullTest::m(java.lang.String, java.lang.String[]):void\";\n+                invoke %1 %2 @java.ref:\"NullTest::m(java.lang.String, java.lang.String[]):void\";\n@@ -475,1 +475,1 @@\n-                invoke %1 %2 %3 @\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n+                invoke %1 %2 %3 @java.ref:\"NullTest::m(java.lang.String, java.lang.String[]):void\" @invoke.kind=\"STATIC\" @invoke.varargs=\"true\";\n@@ -491,1 +491,1 @@\n-                %2 : java.type:\"NullTest$Box\" = new %1 @\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n+                %2 : java.type:\"NullTest$Box\" = new %1 @java.ref:\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n@@ -504,1 +504,1 @@\n-                %3 : java.type:\"NullTest$Box\" = new %1 %2 @\"NullTest$Box::(java.lang.String, java.lang.String[])\";\n+                %3 : java.type:\"NullTest$Box\" = new %1 %2 @java.ref:\"NullTest$Box::(java.lang.String, java.lang.String[])\";\n@@ -518,1 +518,1 @@\n-                %4 : java.type:\"NullTest$Box\" = new %1 %2 %3 @\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n+                %4 : java.type:\"NullTest$Box\" = new %1 %2 %3 @java.ref:\"NullTest$Box::(java.lang.String, java.lang.String[])\" @new.varargs=\"true\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/NullTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>>\" = pattern.record %6 @\"(PatternTest2$R::<T extends java.lang.Number> n)PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>\";\n+                        %7 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>>\" = pattern.record %6 @java.ref:\"(PatternTest2$R::<T extends java.lang.Number> n)PatternTest2$R<PatternTest2$R::<T extends java.lang.Number>>\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternTest2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$ColoredPoint>\" = pattern.record %11 %12 @\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n+                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$ColoredPoint>\" = pattern.record %11 %12 @java.ref:\"(PatternsTest$ConcretePoint p, PatternsTest$Color c)PatternsTest$ColoredPoint\";\n@@ -175,1 +175,1 @@\n-                                %15 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %13 %14 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                                %15 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %13 %14 @java.ref:\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n@@ -187,1 +187,1 @@\n-                        %19 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %19 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -189,2 +189,2 @@\n-                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.Object):void\";\n-                        %21 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        invoke %19 %20 @java.ref:\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        %21 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -192,2 +192,2 @@\n-                        invoke %21 %22 @\"java.io.PrintStream::println(java.lang.Object):void\";\n-                        %23 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        invoke %21 %22 @java.ref:\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        %23 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -195,1 +195,1 @@\n-                        invoke %23 %24 @\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        invoke %23 %24 @java.ref:\"java.io.PrintStream::println(java.lang.Object):void\";\n@@ -199,1 +199,1 @@\n-                        %25 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %25 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -201,1 +201,1 @@\n-                        invoke %25 %26 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                        invoke %25 %26 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -242,1 +242,1 @@\n-                        %9 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %9 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -244,1 +244,1 @@\n-                        invoke %9 %10 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                        invoke %9 %10 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -280,1 +280,1 @@\n-                %10 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                %10 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -282,1 +282,1 @@\n-                invoke %10 %11 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                invoke %10 %11 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -331,1 +331,1 @@\n-                        %19 : java.type:\"int\" = invoke %18 @\"java.lang.Number::intValue():int\";\n+                        %19 : java.type:\"int\" = invoke %18 @java.ref:\"java.lang.Number::intValue():int\";\n@@ -337,1 +337,1 @@\n-                        %22 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %22 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -339,1 +339,1 @@\n-                        invoke %22 %23 @\"java.io.PrintStream::println(java.lang.Object):void\";\n+                        invoke %22 %23 @java.ref:\"java.io.PrintStream::println(java.lang.Object):void\";\n@@ -385,1 +385,1 @@\n-                        %9 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                        %9 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<PatternsTest$Rectangle>\" = pattern.record %7 %8 @java.ref:\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @java.ref:\"java.lang.AssertionError::()\";\n@@ -133,2 +133,2 @@\n-                    %4 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest$Context::x:int\";\n-                    %5 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest$Context::y:int\";\n+                    %4 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableIntersectionTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableIntersectionTest$Context::y:int\";\n@@ -171,2 +171,2 @@\n-                    %4 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest::x:int\";\n-                    %5 : java.type:\"int\" = field.load %0 @\"QuotableIntersectionTest::y:int\";\n+                    %4 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableIntersectionTest::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableIntersectionTest::y:int\";\n@@ -192,1 +192,1 @@\n-                    invoke @\"QuotableIntersectionTest::m():void\";\n+                    invoke @java.ref:\"QuotableIntersectionTest::m():void\";\n@@ -209,1 +209,1 @@\n-                    %4 : java.type:\"int\" = invoke %3 @\"QuotableIntersectionTest::g(int):int\";\n+                    %4 : java.type:\"int\" = invoke %3 @java.ref:\"QuotableIntersectionTest::g(int):int\";\n@@ -222,1 +222,1 @@\n-                    %4 : java.type:\"int[]\" = new %3 @\"int[]::(int)\";\n+                    %4 : java.type:\"int[]\" = new %3 @java.ref:\"int[]::(int)\";\n@@ -245,1 +245,1 @@\n-                    %5 : java.type:\"int\" = invoke %0 %4 @\"QuotableIntersectionTest$ContextRef::g(int):int\";\n+                    %5 : java.type:\"int\" = invoke %0 %4 @java.ref:\"QuotableIntersectionTest$ContextRef::g(int):int\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableIntersectionTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @java.ref:\"java.lang.AssertionError::()\";\n@@ -138,2 +138,2 @@\n-                    %4 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest$Context::x:int\";\n-                    %5 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest$Context::y:int\";\n+                    %4 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableSubtypeTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableSubtypeTest$Context::y:int\";\n@@ -176,2 +176,2 @@\n-                    %4 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest::x:int\";\n-                    %5 : java.type:\"int\" = field.load %0 @\"QuotableSubtypeTest::y:int\";\n+                    %4 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableSubtypeTest::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotableSubtypeTest::y:int\";\n@@ -196,1 +196,1 @@\n-                    invoke @\"QuotableSubtypeTest::m():void\";\n+                    invoke @java.ref:\"QuotableSubtypeTest::m():void\";\n@@ -211,1 +211,1 @@\n-                    %4 : java.type:\"int\" = invoke %3 @\"QuotableSubtypeTest::g(int):int\";\n+                    %4 : java.type:\"int\" = invoke %3 @java.ref:\"QuotableSubtypeTest::g(int):int\";\n@@ -226,1 +226,1 @@\n-                    %4 : java.type:\"int[]\" = new %3 @\"int[]::(int)\";\n+                    %4 : java.type:\"int[]\" = new %3 @java.ref:\"int[]::(int)\";\n@@ -247,1 +247,1 @@\n-                    %5 : java.type:\"int\" = invoke %0 %4 @\"QuotableSubtypeTest$ContextRef::g(int):int\";\n+                    %5 : java.type:\"int\" = invoke %0 %4 @java.ref:\"QuotableSubtypeTest$ContextRef::g(int):int\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableSubtypeTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                    %1 : java.type:\"java.lang.AssertionError\" = new @\"java.lang.AssertionError::()\";\n+                    %1 : java.type:\"java.lang.AssertionError\" = new @java.ref:\"java.lang.AssertionError::()\";\n@@ -131,2 +131,2 @@\n-                    %4 : java.type:\"int\" = field.load %0 @\"QuotedTest$Context::x:int\";\n-                    %5 : java.type:\"int\" = field.load %0 @\"QuotedTest$Context::y:int\";\n+                    %4 : java.type:\"int\" = field.load %0 @java.ref:\"QuotedTest$Context::x:int\";\n+                    %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotedTest$Context::y:int\";\n@@ -173,2 +173,2 @@\n-                        %5 : java.type:\"int\" = field.load %0 @\"QuotedTest::x:int\";\n-                        %6 : java.type:\"int\" = field.load %0 @\"QuotedTest::y:int\";\n+                        %5 : java.type:\"int\" = field.load %0 @java.ref:\"QuotedTest::x:int\";\n+                        %6 : java.type:\"int\" = field.load %0 @java.ref:\"QuotedTest::y:int\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                %1 : java.type:\"int\" = field.load %0 @\"SuperClass::f:int\";\n+                %1 : java.type:\"int\" = field.load %0 @java.ref:\"SuperClass::f:int\";\n@@ -49,2 +49,2 @@\n-                field.store %0 %3 @\"SuperClass::f:int\";\n-                %4 : java.type:\"int\" = field.load %0 @\"SuperClass::f:int\";\n+                field.store %0 %3 @java.ref:\"SuperClass::f:int\";\n+                %4 : java.type:\"int\" = field.load %0 @java.ref:\"SuperClass::f:int\";\n@@ -53,2 +53,2 @@\n-                field.store %0 %5 @\"SuperClass::f:int\";\n-                %6 : java.type:\"int\" = field.load @\"SuperClass::sf:int\";\n+                field.store %0 %5 @java.ref:\"SuperClass::f:int\";\n+                %6 : java.type:\"int\" = field.load @java.ref:\"SuperClass::sf:int\";\n@@ -57,2 +57,2 @@\n-                field.store %7 @\"SuperClass::sf:int\";\n-                %8 : java.type:\"int\" = field.load @\"SuperClass::sf:int\";\n+                field.store %7 @java.ref:\"SuperClass::sf:int\";\n+                %8 : java.type:\"int\" = field.load @java.ref:\"SuperClass::sf:int\";\n@@ -61,1 +61,1 @@\n-                field.store %9 @\"SuperClass::sf:int\";\n+                field.store %9 @java.ref:\"SuperClass::sf:int\";\n@@ -80,4 +80,4 @@\n-                invoke %0 @\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n-                invoke %0 @\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n-                invoke @\"SuperClass::sget():void\";\n-                invoke @\"SuperClass::sget():void\";\n+                invoke %0 @java.ref:\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n+                invoke %0 @java.ref:\"SuperClass::get():void\" @invoke.kind=\"SUPER\";\n+                invoke @java.ref:\"SuperClass::sget():void\";\n+                invoke @java.ref:\"SuperClass::sget():void\";\n@@ -98,1 +98,1 @@\n-                invoke %0 @\"SuperInterface::get():void\" @invoke.kind=\"SUPER\";\n+                invoke %0 @java.ref:\"SuperInterface::get():void\" @invoke.kind=\"SUPER\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SuperTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -57,1 +57,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -66,1 +66,1 @@\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -103,1 +103,1 @@\n-                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -108,1 +108,1 @@\n-                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -113,1 +113,1 @@\n-                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -150,1 +150,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -159,1 +159,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -168,1 +168,1 @@\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -205,1 +205,1 @@\n-                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -210,1 +210,1 @@\n-                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -215,1 +215,1 @@\n-                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -253,1 +253,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -258,1 +258,1 @@\n-                            %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                            %7 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -260,1 +260,1 @@\n-                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                            invoke %7 %8 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -300,1 +300,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -305,1 +305,1 @@\n-                            %7 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                            %7 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -307,1 +307,1 @@\n-                            invoke %7 %8 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                            invoke %7 %8 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -349,1 +349,1 @@\n-                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %10 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+                                %11 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %10 @java.ref:\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -419,1 +419,1 @@\n-                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %12 @\"(java.lang.Number n)SwitchExpressionTest$A\";\n+                                %13 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchExpressionTest$A>\" = pattern.record %12 @java.ref:\"(java.lang.Number n)SwitchExpressionTest$A\";\n@@ -448,1 +448,1 @@\n-                                %22 : java.type:\"int\" = invoke %21 @\"java.lang.String::length():int\";\n+                                %22 : java.type:\"int\" = invoke %21 @java.ref:\"java.lang.String::length():int\";\n@@ -475,1 +475,1 @@\n-                                %32 : java.type:\"int\" = invoke %31 @\"java.lang.String::length():int\";\n+                                %32 : java.type:\"int\" = invoke %31 @java.ref:\"java.lang.String::length():int\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -20,1 +20,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -29,1 +29,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -38,1 +38,1 @@\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -73,1 +73,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -82,1 +82,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -91,1 +91,1 @@\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -134,1 +134,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -143,1 +143,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -152,1 +152,1 @@\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -184,1 +184,1 @@\n-                %3 : java.type:\"char\" = invoke %2 @\"java.lang.Character::toLowerCase(char):char\";\n+                %3 : java.type:\"char\" = invoke %2 @java.ref:\"java.lang.Character::toLowerCase(char):char\";\n@@ -245,2 +245,2 @@\n-                        %6 : java.type:\"java.lang.Integer\" = invoke %5 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"java.lang.Integer\" = invoke %5 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %7 : java.type:\"boolean\" = invoke %4 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -250,1 +250,1 @@\n-                        %8 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n+                        %8 : java.type:\"java.lang.IllegalArgumentException\" = new @java.ref:\"java.lang.IllegalArgumentException::()\";\n@@ -255,2 +255,2 @@\n-                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %12 : java.type:\"boolean\" = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"boolean\" = invoke %9 %11 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -290,1 +290,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -381,2 +381,2 @@\n-                                %6 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::MON:SwitchExpressionTest2$Day\";\n-                                %7 : java.type:\"boolean\" = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %6 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::MON:SwitchExpressionTest2$Day\";\n+                                %7 : java.type:\"boolean\" = invoke %4 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -386,2 +386,2 @@\n-                                %8 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::FRI:SwitchExpressionTest2$Day\";\n-                                %9 : java.type:\"boolean\" = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %8 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::FRI:SwitchExpressionTest2$Day\";\n+                                %9 : java.type:\"boolean\" = invoke %4 %8 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -391,2 +391,2 @@\n-                                %10 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::SUN:SwitchExpressionTest2$Day\";\n-                                %11 : java.type:\"boolean\" = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %10 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::SUN:SwitchExpressionTest2$Day\";\n+                                %11 : java.type:\"boolean\" = invoke %4 %10 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -402,2 +402,2 @@\n-                        %14 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::TUE:SwitchExpressionTest2$Day\";\n-                        %15 : java.type:\"boolean\" = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %14 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::TUE:SwitchExpressionTest2$Day\";\n+                        %15 : java.type:\"boolean\" = invoke %13 %14 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -413,2 +413,2 @@\n-                                %19 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::THU:SwitchExpressionTest2$Day\";\n-                                %20 : java.type:\"boolean\" = invoke %17 %19 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %19 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::THU:SwitchExpressionTest2$Day\";\n+                                %20 : java.type:\"boolean\" = invoke %17 %19 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -418,2 +418,2 @@\n-                                %21 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::SAT:SwitchExpressionTest2$Day\";\n-                                %22 : java.type:\"boolean\" = invoke %17 %21 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %21 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::SAT:SwitchExpressionTest2$Day\";\n+                                %22 : java.type:\"boolean\" = invoke %17 %21 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -429,2 +429,2 @@\n-                        %25 : java.type:\"SwitchExpressionTest2$Day\" = field.load @\"SwitchExpressionTest2$Day::WED:SwitchExpressionTest2$Day\";\n-                        %26 : java.type:\"boolean\" = invoke %24 %25 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %25 : java.type:\"SwitchExpressionTest2$Day\" = field.load @java.ref:\"SwitchExpressionTest2$Day::WED:SwitchExpressionTest2$Day\";\n+                        %26 : java.type:\"boolean\" = invoke %24 %25 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -442,1 +442,1 @@\n-                        %29 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        %29 : java.type:\"java.lang.MatchException\" = new @java.ref:\"java.lang.MatchException::()\";\n@@ -587,1 +587,1 @@\n-                        %70 : java.type:\"int\" = field.load @\"SwitchExpressionTest2$Constants::c1:int\";\n+                        %70 : java.type:\"int\" = field.load @java.ref:\"SwitchExpressionTest2$Constants::c1:int\";\n@@ -592,2 +592,2 @@\n-                        %72 : java.type:\"int\" = field.load @\"SwitchExpressionTest2$Constants::c1:int\";\n-                        %73 : java.type:\"java.lang.String\" = invoke %72 @\"java.lang.String::valueOf(int):java.lang.String\";\n+                        %72 : java.type:\"int\" = field.load @java.ref:\"SwitchExpressionTest2$Constants::c1:int\";\n+                        %73 : java.type:\"java.lang.String\" = invoke %72 @java.ref:\"java.lang.String::valueOf(int):java.lang.String\";\n@@ -727,2 +727,2 @@\n-                        %10 : java.type:\"java.lang.Byte\" = invoke %9 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n-                        %11 : java.type:\"boolean\" = invoke %7 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"java.lang.Byte\" = invoke %9 @java.ref:\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %11 : java.type:\"boolean\" = invoke %7 %10 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -737,2 +737,2 @@\n-                        %15 : java.type:\"java.lang.Byte\" = invoke %14 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n-                        %16 : java.type:\"boolean\" = invoke %13 %15 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %15 : java.type:\"java.lang.Byte\" = invoke %14 @java.ref:\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %16 : java.type:\"boolean\" = invoke %13 %15 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -774,2 +774,2 @@\n-                        %5 : java.type:\"SwitchExpressionTest2$E\" = field.load @\"SwitchExpressionTest2$E::F:SwitchExpressionTest2$E\";\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %5 : java.type:\"SwitchExpressionTest2$E\" = field.load @java.ref:\"SwitchExpressionTest2$E::F:SwitchExpressionTest2$E\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -783,2 +783,2 @@\n-                        %9 : java.type:\"SwitchExpressionTest2$E\" = field.load @\"SwitchExpressionTest2$E::G:SwitchExpressionTest2$E\";\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %9 : java.type:\"SwitchExpressionTest2$E\" = field.load @java.ref:\"SwitchExpressionTest2$E::G:SwitchExpressionTest2$E\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -796,1 +796,1 @@\n-                        %13 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        %13 : java.type:\"java.lang.MatchException\" = new @java.ref:\"java.lang.MatchException::()\";\n@@ -819,1 +819,1 @@\n-                        %8 : java.type:\"boolean\" = invoke %6 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %8 : java.type:\"boolean\" = invoke %6 %7 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -902,1 +902,1 @@\n-                        %19 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        %19 : java.type:\"java.lang.MatchException\" = new @java.ref:\"java.lang.MatchException::()\";\n@@ -923,1 +923,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %4 %5 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -932,1 +932,1 @@\n-                        %10 : java.type:\"boolean\" = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %10 : java.type:\"boolean\" = invoke %8 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -36,1 +36,1 @@\n-                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -48,1 +48,1 @@\n-                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -94,1 +94,1 @@\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -106,1 +106,1 @@\n-                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -118,1 +118,1 @@\n-                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -172,1 +172,1 @@\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -184,1 +184,1 @@\n-                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -196,1 +196,1 @@\n-                        %19 : java.type:\"boolean\" = invoke %17 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %19 : java.type:\"boolean\" = invoke %17 %18 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -246,1 +246,1 @@\n-                %5 : java.type:\"char\" = invoke %4 @\"java.lang.Character::toLowerCase(char):char\";\n+                %5 : java.type:\"char\" = invoke %4 @java.ref:\"java.lang.Character::toLowerCase(char):char\";\n@@ -321,2 +321,2 @@\n-                        %7 : java.type:\"java.lang.Integer\" = invoke %6 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %8 : java.type:\"boolean\" = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"java.lang.Integer\" = invoke %6 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %8 : java.type:\"boolean\" = invoke %5 %7 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -326,1 +326,1 @@\n-                        %9 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n+                        %9 : java.type:\"java.lang.IllegalArgumentException\" = new @java.ref:\"java.lang.IllegalArgumentException::()\";\n@@ -331,2 +331,2 @@\n-                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %13 : java.type:\"boolean\" = invoke %10 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %12 : java.type:\"java.lang.Integer\" = invoke %11 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %13 : java.type:\"boolean\" = invoke %10 %12 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -377,1 +377,1 @@\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -492,2 +492,2 @@\n-                                %7 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::MON:SwitchStatementTest$Day\";\n-                                %8 : java.type:\"boolean\" = invoke %5 %7 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %7 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::MON:SwitchStatementTest$Day\";\n+                                %8 : java.type:\"boolean\" = invoke %5 %7 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -497,2 +497,2 @@\n-                                %9 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::FRI:SwitchStatementTest$Day\";\n-                                %10 : java.type:\"boolean\" = invoke %5 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %9 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::FRI:SwitchStatementTest$Day\";\n+                                %10 : java.type:\"boolean\" = invoke %5 %9 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -502,2 +502,2 @@\n-                                %11 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::SUN:SwitchStatementTest$Day\";\n-                                %12 : java.type:\"boolean\" = invoke %5 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %11 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::SUN:SwitchStatementTest$Day\";\n+                                %12 : java.type:\"boolean\" = invoke %5 %11 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -516,2 +516,2 @@\n-                        %17 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::TUE:SwitchStatementTest$Day\";\n-                        %18 : java.type:\"boolean\" = invoke %16 %17 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %17 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::TUE:SwitchStatementTest$Day\";\n+                        %18 : java.type:\"boolean\" = invoke %16 %17 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -530,2 +530,2 @@\n-                                %24 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::THU:SwitchStatementTest$Day\";\n-                                %25 : java.type:\"boolean\" = invoke %22 %24 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %24 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::THU:SwitchStatementTest$Day\";\n+                                %25 : java.type:\"boolean\" = invoke %22 %24 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -535,2 +535,2 @@\n-                                %26 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::SAT:SwitchStatementTest$Day\";\n-                                %27 : java.type:\"boolean\" = invoke %22 %26 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                                %26 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::SAT:SwitchStatementTest$Day\";\n+                                %27 : java.type:\"boolean\" = invoke %22 %26 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -549,2 +549,2 @@\n-                        %32 : java.type:\"SwitchStatementTest$Day\" = field.load @\"SwitchStatementTest$Day::WED:SwitchStatementTest$Day\";\n-                        %33 : java.type:\"boolean\" = invoke %31 %32 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %32 : java.type:\"SwitchStatementTest$Day\" = field.load @java.ref:\"SwitchStatementTest$Day::WED:SwitchStatementTest$Day\";\n+                        %33 : java.type:\"boolean\" = invoke %31 %32 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -741,1 +741,1 @@\n-                        %93 : java.type:\"int\" = field.load @\"SwitchStatementTest$Constants::c1:int\";\n+                        %93 : java.type:\"int\" = field.load @java.ref:\"SwitchStatementTest$Constants::c1:int\";\n@@ -747,1 +747,1 @@\n-                        %96 : java.type:\"int\" = field.load @\"SwitchStatementTest$Constants::c1:int\";\n+                        %96 : java.type:\"int\" = field.load @java.ref:\"SwitchStatementTest$Constants::c1:int\";\n@@ -909,2 +909,2 @@\n-                        %11 : java.type:\"java.lang.Byte\" = invoke %10 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n-                        %12 : java.type:\"boolean\" = invoke %8 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %11 : java.type:\"java.lang.Byte\" = invoke %10 @java.ref:\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %12 : java.type:\"boolean\" = invoke %8 %11 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -922,2 +922,2 @@\n-                        %18 : java.type:\"java.lang.Byte\" = invoke %17 @\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n-                        %19 : java.type:\"boolean\" = invoke %16 %18 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %18 : java.type:\"java.lang.Byte\" = invoke %17 @java.ref:\"java.lang.Byte::valueOf(byte):java.lang.Byte\";\n+                        %19 : java.type:\"boolean\" = invoke %16 %18 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1014,2 +1014,2 @@\n-                        %6 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %6 : java.type:\"SwitchStatementTest$E\" = field.load @java.ref:\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1020,2 +1020,2 @@\n-                        %9 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n-                        %10 : java.type:\"java.lang.String\" = cast %9 @\"java.lang.String\";\n+                        %9 : java.type:\"SwitchStatementTest$E\" = field.load @java.ref:\"SwitchStatementTest$E::A:SwitchStatementTest$E\";\n+                        %10 : java.type:\"java.lang.String\" = cast %9 @java.type:\"java.lang.String\";\n@@ -1027,2 +1027,2 @@\n-                        %13 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n-                        %14 : java.type:\"boolean\" = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %13 : java.type:\"SwitchStatementTest$E\" = field.load @java.ref:\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n+                        %14 : java.type:\"boolean\" = invoke %12 %13 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1033,2 +1033,2 @@\n-                        %16 : java.type:\"SwitchStatementTest$E\" = field.load @\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n-                        %17 : java.type:\"java.lang.String\" = cast %16 @\"java.lang.String\";\n+                        %16 : java.type:\"SwitchStatementTest$E\" = field.load @java.ref:\"SwitchStatementTest$E::B:SwitchStatementTest$E\";\n+                        %17 : java.type:\"java.lang.String\" = cast %16 @java.type:\"java.lang.String\";\n@@ -1041,1 +1041,1 @@\n-                        %21 : java.type:\"boolean\" = invoke %19 %20 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %21 : java.type:\"boolean\" = invoke %19 %20 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1056,1 +1056,1 @@\n-                        %26 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        %26 : java.type:\"java.lang.MatchException\" = new @java.ref:\"java.lang.MatchException::()\";\n@@ -1131,1 +1131,1 @@\n-                        %24 : java.type:\"java.lang.MatchException\" = new @\"java.lang.MatchException::()\";\n+                        %24 : java.type:\"java.lang.MatchException\" = new @java.ref:\"java.lang.MatchException::()\";\n@@ -1159,1 +1159,1 @@\n-                        %9 : java.type:\"boolean\" = invoke %7 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %9 : java.type:\"boolean\" = invoke %7 %8 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1462,1 +1462,1 @@\n-                        %13 : java.type:\"java.lang.IllegalArgumentException\" = new @\"java.lang.IllegalArgumentException::()\";\n+                        %13 : java.type:\"java.lang.IllegalArgumentException\" = new @java.ref:\"java.lang.IllegalArgumentException::()\";\n@@ -1491,2 +1491,2 @@\n-                        %24 : java.type:\"java.lang.Class<?>\" = invoke %23 @\"java.lang.Object::getClass():java.lang.Class\";\n-                        %25 : java.type:\"java.lang.String\" = invoke %24 @\"java.lang.Class::getName():java.lang.String\";\n+                        %24 : java.type:\"java.lang.Class<?>\" = invoke %23 @java.ref:\"java.lang.Object::getClass():java.lang.Class\";\n+                        %25 : java.type:\"java.lang.String\" = invoke %24 @java.ref:\"java.lang.Class::getName():java.lang.String\";\n@@ -1536,2 +1536,2 @@\n-                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %12 : java.type:\"boolean\" = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %11 : java.type:\"java.lang.Integer\" = invoke %10 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %12 : java.type:\"boolean\" = invoke %9 %11 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1563,1 +1563,1 @@\n-                                %22 : java.type:\"int\" = invoke %21 @\"java.lang.Integer::intValue():int\";\n+                                %22 : java.type:\"int\" = invoke %21 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -1593,1 +1593,1 @@\n-                                %34 : java.type:\"int\" = invoke %33 @\"java.lang.Integer::intValue():int\";\n+                                %34 : java.type:\"int\" = invoke %33 @java.ref:\"java.lang.Integer::intValue():int\";\n@@ -1812,1 +1812,1 @@\n-                                %10 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %9 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                                %10 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %9 @java.ref:\"(java.lang.Number n)SwitchStatementTest$R\";\n@@ -1880,1 +1880,1 @@\n-                                %15 : java.type:\"int\" = invoke %14 @\"java.lang.String::length():int\";\n+                                %15 : java.type:\"int\" = invoke %14 @java.ref:\"java.lang.String::length():int\";\n@@ -1891,3 +1891,3 @@\n-                        %21 : java.type:\"int\" = invoke %20 @\"java.lang.String::length():int\";\n-                        %22 : java.type:\"java.lang.Integer\" = invoke %21 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n-                        %23 : java.type:\"java.lang.String\" = invoke %19 %22 @\"java.lang.String::formatted(java.lang.Object[]):java.lang.String\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n+                        %21 : java.type:\"int\" = invoke %20 @java.ref:\"java.lang.String::length():int\";\n+                        %22 : java.type:\"java.lang.Integer\" = invoke %21 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                        %23 : java.type:\"java.lang.String\" = invoke %19 %22 @java.ref:\"java.lang.String::formatted(java.lang.Object[]):java.lang.String\" @invoke.kind=\"INSTANCE\" @invoke.varargs=\"true\";\n@@ -1904,1 +1904,1 @@\n-                                        %29 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %28 @\"(java.lang.Number n)SwitchStatementTest$R\";\n+                                        %29 : java.type:\"jdk.incubator.code.op.ExtendedOp$Pattern$Record<SwitchStatementTest$R>\" = pattern.record %28 @java.ref:\"(java.lang.Number n)SwitchStatementTest$R\";\n@@ -1915,3 +1915,3 @@\n-                                %32 : java.type:\"java.lang.Class<?>\" = invoke %31 @\"java.lang.Object::getClass():java.lang.Class\";\n-                                %33 : java.type:\"java.lang.Class\" = constant @\"java.lang.Double\";\n-                                %34 : java.type:\"boolean\" = invoke %32 %33 @\"java.lang.Object::equals(java.lang.Object):boolean\";\n+                                %32 : java.type:\"java.lang.Class<?>\" = invoke %31 @java.ref:\"java.lang.Object::getClass():java.lang.Class\";\n+                                %33 : java.type:\"java.lang.Class\" = constant @java.type:\"java.lang.Double\";\n+                                %34 : java.type:\"boolean\" = invoke %32 %33 @java.ref:\"java.lang.Object::equals(java.lang.Object):boolean\";\n@@ -1964,1 +1964,1 @@\n-                        %7 : java.type:\"boolean\" = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %7 : java.type:\"boolean\" = invoke %5 %6 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n@@ -1976,1 +1976,1 @@\n-                        %13 : java.type:\"boolean\" = invoke %11 %12 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n+                        %13 : java.type:\"boolean\" = invoke %11 %12 @java.ref:\"java.util.Objects::equals(java.lang.Object, java.lang.Object):boolean\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":66,"deletions":66,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-                        %3 : java.type:\"java.lang.Object\" = invoke @\"SynchronizedTest::m():java.lang.Object\";\n+                        %3 : java.type:\"java.lang.Object\" = invoke @java.ref:\"SynchronizedTest::m():java.lang.Object\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SynchronizedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                %1 : java.type:\"java.lang.RuntimeException\" = new @\"java.lang.RuntimeException::()\";\n+                %1 : java.type:\"java.lang.RuntimeException\" = new @java.ref:\"java.lang.RuntimeException::()\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/ThrowTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                        invoke %6 @\"java.lang.Exception::printStackTrace():void\";\n+                        invoke %6 @java.ref:\"java.lang.Exception::printStackTrace():void\";\n@@ -169,1 +169,1 @@\n-                        %1 : java.type:\"TryTest$A\" = invoke %0 @\"TryTest::a():TryTest$A\";\n+                        %1 : java.type:\"TryTest$A\" = invoke %0 @java.ref:\"TryTest::a():TryTest$A\";\n@@ -172,1 +172,1 @@\n-                        %4 : java.type:\"TryTest$B\" = field.load %3 @\"TryTest$A::b:TryTest$B\";\n+                        %4 : java.type:\"TryTest$B\" = field.load %3 @java.ref:\"TryTest$A::b:TryTest$B\";\n@@ -174,2 +174,2 @@\n-                        %6 : java.type:\"TryTest$B\" = field.load %5 @\"TryTest$A::b:TryTest$B\";\n-                        %7 : java.type:\"TryTest$C\" = field.load %6 @\"TryTest$B::c:TryTest$C\";\n+                        %6 : java.type:\"TryTest$B\" = field.load %5 @java.ref:\"TryTest$A::b:TryTest$B\";\n+                        %7 : java.type:\"TryTest$C\" = field.load %6 @java.ref:\"TryTest$B::c:TryTest$C\";\n@@ -190,1 +190,1 @@\n-                        invoke %18 @\"java.lang.Throwable::printStackTrace():void\";\n+                        invoke %18 @java.ref:\"java.lang.Throwable::printStackTrace():void\";\n@@ -194,1 +194,1 @@\n-                        %19 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %19 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -196,1 +196,1 @@\n-                        invoke %19 %20 @\"java.io.PrintStream::println(java.lang.String):void\";\n+                        invoke %19 %20 @java.ref:\"java.io.PrintStream::println(java.lang.String):void\";\n@@ -281,1 +281,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/TryTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                %3 : java.type:\"java.lang.Integer\" = invoke %2 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %3 : java.type:\"java.lang.Integer\" = invoke %2 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n@@ -80,2 +80,2 @@\n-                %3 : java.type:\"int\" = invoke %2 @\"java.lang.Integer::intValue():int\";\n-                %4 : java.type:\"java.lang.Integer\" = invoke %3 @\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n+                %3 : java.type:\"int\" = invoke %2 @java.ref:\"java.lang.Integer::intValue():int\";\n+                %4 : java.type:\"java.lang.Integer\" = invoke %3 @java.ref:\"java.lang.Integer::valueOf(int):java.lang.Integer\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnaryopTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-                        %6 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %6 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -51,1 +51,1 @@\n-                        invoke %6 %7 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %6 %7 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -104,1 +104,1 @@\n-                        %3 : java.type:\"java.io.PrintStream\" = field.load @\"java.lang.System::out:java.io.PrintStream\";\n+                        %3 : java.type:\"java.io.PrintStream\" = field.load @java.ref:\"java.lang.System::out:java.io.PrintStream\";\n@@ -106,1 +106,1 @@\n-                        invoke %3 %4 @\"java.io.PrintStream::println(int):void\";\n+                        invoke %3 %4 @java.ref:\"java.io.PrintStream::println(int):void\";\n@@ -134,1 +134,1 @@\n-                %1 : java.type:\"java.lang.Boolean\" = invoke %0 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                %1 : java.type:\"java.lang.Boolean\" = invoke %0 @java.ref:\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n@@ -141,1 +141,1 @@\n-                        %6 : java.type:\"boolean\" = invoke %5 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        %6 : java.type:\"boolean\" = invoke %5 @java.ref:\"java.lang.Boolean::booleanValue():boolean\";\n@@ -152,1 +152,1 @@\n-                        %13 : java.type:\"java.lang.Boolean\" = invoke %12 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                        %13 : java.type:\"java.lang.Boolean\" = invoke %12 @java.ref:\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n@@ -178,1 +178,1 @@\n-                        %6 : java.type:\"java.lang.Boolean\" = invoke %5 @\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n+                        %6 : java.type:\"java.lang.Boolean\" = invoke %5 @java.ref:\"java.lang.Boolean::valueOf(boolean):java.lang.Boolean\";\n@@ -184,1 +184,1 @@\n-                        %8 : java.type:\"boolean\" = invoke %7 @\"java.lang.Boolean::booleanValue():boolean\";\n+                        %8 : java.type:\"boolean\" = invoke %7 @java.ref:\"java.lang.Boolean::booleanValue():boolean\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/WhileLoopTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}