{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include <cuda_runtime_api.h>\n@@ -109,1 +110,1 @@\n-    arg->value.buffer.vendorPtr = static_cast<void*>(this);\n+    arg->value.buffer.vendorPtr = static_cast<void *>(this);\n@@ -118,1 +119,3 @@\n-    std::cout << \"copyToDevice()\" << std::endl;\n+    std::cout << \"copyToDevice()\"\n+              << arg->value.buffer.sizeInBytes\n+              << std::endl;\n@@ -123,1 +126,3 @@\n-    std::cout << \"copyFromDevice()\" << std::endl;\n+    std::cout << \"copyFromDevice()\"\n+              << arg->value.buffer.sizeInBytes\n+              << std::endl;\n@@ -138,1 +143,1 @@\n-    \/\/std::cout<<\"ndrange(\"<<range<<\") \"<< std::endl;\n+    std::cout << \"ndrange(\" << range << \") \" << std::endl;\n@@ -150,1 +155,2 @@\n-                argslist[arg->idx] = static_cast<void*>(&cudaBuffer->devicePtr);\n+                cudaError_t t = cudaDeviceSynchronize();\n+                argslist[arg->idx] = static_cast<void *>(&cudaBuffer->devicePtr);\n@@ -158,3 +164,2 @@\n-            case 'S':\n-            {\n-                argslist[arg->idx] = static_cast<void*>(&arg->value);\n+            case 'S': {\n+                argslist[arg->idx] = static_cast<void *>(&arg->value);\n@@ -171,3 +176,10 @@\n-#ifdef VERBOSE\n-    std::cout << \"Running the kernel... range = \"<< range << \"range mod 512 \" << (range%512)<< std::endl;\n-#endif\n+    int rangediv1024 = range \/ 1024;\n+    int rangemod1024 = range % 1024;\n+    if (rangemod1024 > 0) {\n+        rangediv1024++;\n+    }\n+    std::cout << \"Running the kernel...\" << std::endl;\n+    std::cout << \"   Requested range   = \" << range << std::endl;\n+    std::cout << \"   Range mod 1024    = \" << rangemod1024 << std::endl;\n+    std::cout << \"   Actual range 1024 = \" << (rangediv1024 * 1024) << std::endl;\n+\n@@ -176,1 +188,1 @@\n-                                   range \/ 1024, 1, 1,\n+                                   rangediv1024, 1, 1,\n@@ -181,1 +193,1 @@\n-    \/\/cudaError_t t = cudaDeviceSynchronize();\n+    cudaError_t t = cudaDeviceSynchronize();\n@@ -190,0 +202,1 @@\n+            cudaError_t t = cudaDeviceSynchronize();\n@@ -197,1 +210,1 @@\n-            arg->value.buffer.vendorPtr= nullptr;\n+            arg->value.buffer.vendorPtr = nullptr;\n@@ -308,1 +321,1 @@\n-        int jitLogBufferSize = 1024;\n+        int jitLogBufferSize = 8192;\n@@ -328,1 +341,2 @@\n-    return reinterpret_cast<long>(new CudaBackend(static_cast<CudaBackend::CudaConfig *>(config), configSchemaLen, configSchema));\n+    return reinterpret_cast<long>(new CudaBackend(static_cast<CudaBackend::CudaConfig *>(config), configSchemaLen,\n+                                                  configSchema));\n@@ -334,1 +348,3 @@\n-        std::cerr << \"CUDA Driver API error = \" << err << \" from file \" << file << \" line \" << line << std::endl;\n+        std::cerr << \"CUDA error = \" << err\n+                  <<\" \" << cudaGetErrorString(static_cast<cudaError_t>(err))\n+                  <<\" \" << file << \" line \" << line << std::endl;\n@@ -337,1 +353,69 @@\n-}\n\\ No newline at end of file\n+}\n+\n+const char *CudaBackend::errorMsg(CUresult status) {\n+    static struct {\n+        CUresult code;\n+        const char *msg;\n+    } error_table[] = {\n+            {CUDA_SUCCESS, \"success\"},\n+            \/\/ {CL_DEVICE_NOT_FOUND,                \"device not found\",},\n+            \/\/   {CL_DEVICE_NOT_AVAILABLE,            \"device not available\",},\n+            \/\/   {CL_COMPILER_NOT_AVAILABLE,          \"compiler not available\",},\n+            \/\/   {CL_MEM_OBJECT_ALLOCATION_FAILURE,   \"mem object allocation failure\",},\n+            \/\/   {CL_OUT_OF_RESOURCES,                \"out of resources\",},\n+            \/\/   {CL_OUT_OF_HOST_MEMORY,              \"out of host memory\",},\n+            \/\/   {CL_PROFILING_INFO_NOT_AVAILABLE,    \"profiling not available\",},\n+            \/\/   {CL_MEM_COPY_OVERLAP,                \"memcopy overlaps\",},\n+            \/\/   {CL_IMAGE_FORMAT_MISMATCH,           \"image format mismatch\",},\n+            \/\/   {CL_IMAGE_FORMAT_NOT_SUPPORTED,      \"image format not supported\",},\n+            \/\/   {CL_BUILD_PROGRAM_FAILURE,           \"build program failed\",},\n+            \/\/   {CL_MAP_FAILURE,                     \"map failed\",},\n+            \/\/   {CL_INVALID_VALUE,                   \"invalid value\",},\n+            \/\/   {CL_INVALID_DEVICE_TYPE,             \"invalid device type\",},\n+            \/\/   {CL_INVALID_PLATFORM,                \"invlaid platform\",},\n+            \/\/   {CL_INVALID_DEVICE,                  \"invalid device\",},\n+            \/\/   {CL_INVALID_CONTEXT,                 \"invalid context\",},\n+            \/\/   {CL_INVALID_QUEUE_PROPERTIES,        \"invalid queue properties\",},\n+            \/\/   {CL_INVALID_COMMAND_QUEUE,           \"invalid command queue\",},\n+            \/\/   {CL_INVALID_HOST_PTR,                \"invalid host ptr\",},\n+            \/\/   {CL_INVALID_MEM_OBJECT,              \"invalid mem object\",},\n+            \/\/   {CL_INVALID_IMAGE_FORMAT_DESCRIPTOR, \"invalid image format descriptor \",},\n+            \/\/   {CL_INVALID_IMAGE_SIZE,              \"invalid image size\",},\n+            \/\/   {CL_INVALID_SAMPLER,                 \"invalid sampler\",},\n+            \/\/   {CL_INVALID_BINARY,                  \"invalid binary\",},\n+            \/\/   {CL_INVALID_BUILD_OPTIONS,           \"invalid build options\",},\n+            \/\/   {CL_INVALID_PROGRAM,                 \"invalid program \",},\n+            \/\/   {CL_INVALID_PROGRAM_EXECUTABLE,      \"invalid program executable\",},\n+            \/\/   {CL_INVALID_KERNEL_NAME,             \"invalid kernel name\",},\n+            \/\/   {CL_INVALID_KERNEL_DEFINITION,       \"invalid definition\",},\n+            \/\/   {CL_INVALID_KERNEL,                  \"invalid kernel\",},\n+            \/\/   {CL_INVALID_ARG_INDEX,               \"invalid arg index\",},\n+            \/\/   {CL_INVALID_ARG_VALUE,               \"invalid arg value\",},\n+            \/\/   {CL_INVALID_ARG_SIZE,                \"invalid arg size\",},\n+            \/\/   {CL_INVALID_KERNEL_ARGS,             \"invalid kernel args\",},\n+            \/\/   {CL_INVALID_WORK_DIMENSION,          \"invalid work dimension\",},\n+            \/\/   {CL_INVALID_WORK_GROUP_SIZE,         \"invalid work group size\",},\n+            \/\/   {CL_INVALID_WORK_ITEM_SIZE,          \"invalid work item size\",},\n+            \/\/   {CL_INVALID_GLOBAL_OFFSET,           \"invalid global offset\",},\n+            \/\/   {CL_INVALID_EVENT_WAIT_LIST,         \"invalid event wait list\",},\n+            \/\/   {CL_INVALID_EVENT,                   \"invalid event\",},\n+            \/\/   {CL_INVALID_OPERATION,               \"invalid operation\",},\n+            \/\/   {CL_INVALID_GL_OBJECT,               \"invalid gl object\",},\n+            \/\/   {CL_INVALID_BUFFER_SIZE,             \"invalid buffer size\",},\n+            \/\/  {CL_INVALID_MIP_LEVEL,               \"invalid mip level\",},\n+            \/\/   {CL_INVALID_GLOBAL_WORK_SIZE,        \"invalid global work size\",},\n+            {(CUresult) 0, nullptr},\n+    };\n+    static char unknown[256];\n+    int ii;\n+\n+    for (ii = 0; error_table[ii].msg != NULL; ii++) {\n+        if (error_table[ii].code == status) {\n+            \/\/std::cerr << \" clerror '\" << error_table[ii].msg << \"'\" << std::endl;\n+            return error_table[ii].msg;\n+        }\n+    }\n+    SNPRINTF(unknown, sizeof(unknown), \"unknown error %d\", status);\n+    return unknown;\n+}\n+\n","filename":"hat\/backends\/cuda\/cpp\/cuda_backend.cpp","additions":102,"deletions":18,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -142,0 +142,2 @@\n+    static const char *errorMsg(CUresult status);\n+\n","filename":"hat\/backends\/cuda\/include\/cuda_backend.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-    arg->value.buffer.vendorPtr = static_cast<void*>(this);\n-    std::cout << \"created buffer \"<<std::endl;\n+    arg->value.buffer.vendorPtr = static_cast<void *>(this);\n+    std::cout << \"created buffer \" << std::endl;\n@@ -71,1 +71,0 @@\n-\n@@ -73,2 +72,1 @@\n-    std::cout << \"enqueued buffer copyToDevice \"<<std::endl;\n-\n+    std::cout << \"enqueued buffer copyToDevice \" << std::endl;\n@@ -95,1 +93,1 @@\n-    std::cout << \"enqueued buffer copyFromDevice \"<<std::endl;\n+    std::cout << \"enqueued buffer copyFromDevice \" << std::endl;\n@@ -132,1 +130,1 @@\n-                std::cout << \"set buffer arg \"<<arg->idx<<std::endl;\n+                std::cout << \"set buffer arg \" << arg->idx << std::endl;\n@@ -136,2 +134,1 @@\n-            case 'F':\n-            {\n+            case 'F': {\n@@ -143,1 +140,1 @@\n-                std::cout << \"set I or F arg \"<<arg->idx<<std::endl;\n+                std::cout << \"set I or F arg \" << arg->idx << std::endl;\n@@ -147,2 +144,1 @@\n-            case 'C':\n-            {\n+            case 'C': {\n@@ -154,1 +150,2 @@\n-                std::cout << \"set S or C arg \"<<arg->idx<<std::endl;\n+\n+                std::cout << \"set S or C arg \" << arg->idx << std::endl;\n@@ -158,2 +155,1 @@\n-            case 'D':\n-            {\n+            case 'D': {\n@@ -165,1 +161,1 @@\n-                std::cout << \"set J or D arg \"<<arg->idx<<std::endl;\n+                std::cout << \"set J or D arg \" << arg->idx << std::endl;\n@@ -185,1 +181,1 @@\n-            ((eventc == 0)?nullptr:events),\n+            ((eventc == 0) ? nullptr : events),\n@@ -191,1 +187,2 @@\n-    std::cout << \"enqueued dispatch  \"<<std::endl;\n+\n+    std::cout << \"enqueued dispatch  \" << std::endl;\n@@ -199,1 +196,1 @@\n-        if (arg->variant =='&') {\n+        if (arg->variant == '&') {\n@@ -221,3 +218,3 @@\n-        if (arg->variant =='&'){\n-            delete static_cast<OpenCLBuffer*>(arg->value.buffer.vendorPtr);\n-            arg->value.buffer.vendorPtr= nullptr;\n+        if (arg->variant == '&') {\n+            delete static_cast<OpenCLBuffer *>(arg->value.buffer.vendorPtr);\n+            arg->value.buffer.vendorPtr = nullptr;\n@@ -461,1 +458,4 @@\n-    fprintf(stderr, \"         CL_DEVICE_MAX_WORK_GROUP_SIZE...... \" Size_tNewline, maxWorkGroupSize);\n+\n+    fprintf(stderr, \"         CL_DEVICE_MAX_WORK_GROUP_SIZE...... \"\n+    Size_tNewline, maxWorkGroupSize);\n+\n@@ -465,1 +465,2 @@\n-    fprintf(stderr, \"         CL_DEVICE_MAX_MEM_ALLOC_SIZE....... \" LongUnsignedNewline, maxMemAllocSize);\n+    fprintf(stderr, \"         CL_DEVICE_MAX_MEM_ALLOC_SIZE....... \"\n+    LongUnsignedNewline, maxMemAllocSize);\n@@ -469,1 +470,2 @@\n-    fprintf(stderr, \"         CL_DEVICE_GLOBAL_MEM_SIZE.......... \" LongUnsignedNewline, globalMemSize);\n+    fprintf(stderr, \"         CL_DEVICE_GLOBAL_MEM_SIZE.......... \"\n+    LongUnsignedNewline, globalMemSize);\n@@ -473,1 +475,2 @@\n-    fprintf(stderr, \"         CL_DEVICE_LOCAL_MEM_SIZE........... \" LongUnsignedNewline, localMemSize);\n+    fprintf(stderr, \"         CL_DEVICE_LOCAL_MEM_SIZE........... \"\n+    LongUnsignedNewline, localMemSize);\n@@ -606,1 +609,1 @@\n-            {0, NULL},\n+            {0,                                  NULL},\n@@ -623,1 +626,2 @@\n-    return reinterpret_cast<long>(new OpenCLBackend(static_cast<OpenCLBackend::OpenCLConfig*>(config), configSchemaLen, configSchema));\n+    return reinterpret_cast<long>(new OpenCLBackend(static_cast<OpenCLBackend::OpenCLConfig *>(config), configSchemaLen,\n+                                                    configSchema));\n@@ -625,0 +629,8 @@\n+\n+void __checkOpenclErrors(cl_int status, const char *file, const int line) {\n+    if (CL_SUCCESS != status) {\n+        std::cerr << \"Opencl Driver API error = \" << cl_int << \" from file \" << file << \" line \" << line << std::endl;\n+        exit(-1);\n+    }\n+}\n+\n","filename":"hat\/backends\/opencl\/cpp\/opencl_backend.cpp","additions":40,"deletions":28,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+extern void __checkOpenclErrors(cl_int status, const char *file, const int line);\n+\n+#define checkOpenCLErrors(err)  __checkOpenclErrors (err, __FILE__, __LINE__)\n+\n@@ -84,3 +88,0 @@\n-           \/\/ void allocEvents(int max);\n-           \/\/ void releaseEvents();\n-           \/\/ void waitForEvents();\n@@ -128,3 +129,0 @@\n-\n-\n-\n","filename":"hat\/backends\/opencl\/include\/opencl_backend.h","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+        if (kc.x <kc.maxX){\n@@ -104,0 +105,1 @@\n+        }\n@@ -114,0 +116,1 @@\n+        if (kc.x <kc.maxX){\n@@ -118,0 +121,1 @@\n+        }\n@@ -265,10 +269,10 @@\n-            if (stillLooksLikeAFace) {\n-                int index = resultTable.atomicResultTableCountInc();\n-                if (index < resultTable.length()) {\n-                    ResultTable.Result result = resultTable.result(index);\n-                    result.x(x);\n-                    result.y(y);\n-                    result.width(w);\n-                    result.height(h);\n-                }\n-            }\n+           \/\/ if (stillLooksLikeAFace) {\n+            \/\/    int index = resultTable.atomicResultTableCountInc();\n+              \/\/  if (index < resultTable.length()) {\n+               \/\/     ResultTable.Result result = resultTable.result(index);\n+                \/\/    result.x(x);\n+                 \/\/   result.y(y);\n+                  \/\/  result.width(w);\n+                   \/\/ result.height(h);\n+              \/\/  }\n+           \/\/ }\n@@ -310,1 +314,1 @@\n-        ResultTable resultTable = ResultTable.create(accelerator, 1000);\n+        ResultTable resultTable = ResultTable.create(accelerator, 10000);\n@@ -314,1 +318,1 @@\n-        for (int i = 0; i < 10; i++) {\n+        for (int i = 0; i < 1; i++) {\n@@ -319,0 +323,1 @@\n+            System.out.println(\"results = \"+resultTable.atomicResultTableCount());\n","filename":"hat\/examples\/violajones\/src\/java\/violajones\/ViolaJonesCompute.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+            System.out.println(\"requesting dispatch range \"+ndRange.kid.maxX);\n","filename":"hat\/hat\/src\/java\/hat\/backend\/C99NativeBackend.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}