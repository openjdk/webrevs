{"files":[{"patch":"@@ -27,0 +27,3 @@\n+import java.io.StringWriter;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.Op;\n@@ -30,1 +33,1 @@\n-import java.lang.reflect.Method;\n+import java.lang.reflect.code.writer.OpWriter;\n@@ -65,5 +68,1 @@\n-        Assert.assertEquals(canonicalizeDescription(methodTree.toText()), canonicalizeDescription(expectedTree));\n-    }\n-\n-    static String canonicalizeDescription(String d) {\n-        return OpParser.fromString(ExtendedOps.FACTORY, d).get(0).toText();\n+        Assert.assertEquals(canonicalizeModel(methodTree), canonicalizeModel(expectedTree));\n@@ -84,0 +83,24 @@\n+\n+\n+    \/\/ serializes dropping location information, parses, and then serializes, dropping location information\n+    static String canonicalizeModel(Op o) {\n+        return canonicalizeModel(serialize(o));\n+    }\n+\n+    \/\/ parses, and then serializes, dropping location information\n+    static String canonicalizeModel(String d) {\n+        Op o;\n+        try {\n+            o = OpParser.fromString(ExtendedOps.FACTORY, d).get(0);\n+        } catch (Exception e) {\n+            throw new IllegalStateException(e);\n+        }\n+        return serialize(o);\n+    }\n+\n+    \/\/ serializes, dropping location information\n+    static String serialize(Op o) {\n+        StringWriter w = new StringWriter();\n+        OpWriter.writeTo(w, o, OpWriter.LocationOption.DROP_LOCATION);\n+        return w.toString();\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/cr\/TreeAccessTest.java","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"}]}