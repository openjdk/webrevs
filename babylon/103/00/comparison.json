{"files":[{"patch":"@@ -59,1 +59,1 @@\n-        compiledKernel.dispatch(args);\n+        compiledKernel.dispatch(ndRange,args);\n","filename":"hat\/backends\/cuda\/java\/hat\/backend\/CudaBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,2 +109,2 @@\n-long OpenCLBackend::OpenCLProgram::OpenCLKernel::ndrange(int range, void *argArray) {\n-    std::cout << \"ndrange(\" << range << \") \" << std::endl;\n+long OpenCLBackend::OpenCLProgram::OpenCLKernel::ndrange(void *argArray) {\n+   \/\/ std::cout << \"ndrange(\" << range << \") \" << std::endl;\n@@ -119,0 +119,1 @@\n+    NDRange *ndrange = nullptr;\n@@ -123,0 +124,4 @@\n+                if (arg->idx == 0){\n+                    ndrange = static_cast<NDRange *>(arg->value.buffer.memorySegment);\n+\n+                }\n@@ -171,1 +176,2 @@\n-    size_t globalSize = range;\n+    size_t globalSize = ndrange->maxX;\n+    std::cout << \"ndrange = \" << ndrange->maxX << std::endl;\n","filename":"hat\/backends\/opencl\/cpp\/opencl_backend.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-            long ndrange(int range, void *argArray);\n+            long ndrange( void *argArray);\n","filename":"hat\/backends\/opencl\/include\/opencl_backend.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-        compiledKernel.dispatch(args);\n+        compiledKernel.dispatch(ndRange,args);\n","filename":"hat\/backends\/opencl\/java\/hat\/backend\/OpenCLBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-\n-\n@@ -85,2 +83,0 @@\n-\n-\n","filename":"hat\/backends\/opencl\/java\/hat\/backend\/OpenCLHatKernelBuilder.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -524,2 +524,3 @@\n-extern \"C\" long ndrange(long kernelHandle, int range, void *argArray) {\n-  \/\/  std::cout << \"trampolining through kernelHandle to kernel.ndrange(...) \" << std::endl;\n+extern \"C\" long ndrange(long kernelHandle, void *argArray) {\n+    std::cout << \"trampolining through kernelHandle to kernel.ndrange(...) \" << std::endl;\n+\n@@ -527,1 +528,1 @@\n-    kernel->ndrange(range, argArray);\n+    kernel->ndrange( argArray);\n","filename":"hat\/backends\/shared\/cpp\/shared.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -427,0 +427,6 @@\n+class NDRange{\n+public:\n+    int x;\n+    int maxX;\n+};\n+\n@@ -456,1 +462,1 @@\n-            virtual long ndrange(int range, void *argArray) = 0;\n+            virtual long ndrange( void *argArray) = 0;\n@@ -512,1 +518,1 @@\n-extern \"C\" long ndrange(long kernelHandle, int range, void *argArray);\n+extern \"C\" long ndrange(long kernelHandle,  void *argArray);\n","filename":"hat\/backends\/shared\/include\/shared.h","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import hat.buffer.KernelContext;\n@@ -51,1 +52,1 @@\n-\n+        public final KernelContext kernelContext;\n@@ -57,4 +58,3 @@\n-\n-            Object[] args = new Object[ndRangeAndArgs.length - 1];\n-            System.arraycopy(ndRangeAndArgs, 1, args, 0, ndRangeAndArgs.length - 1);\n-            this.argArray = ArgArray.create(kernelCallGraph.computeContext.accelerator, args);\n+            this.kernelContext =KernelContext.create(c99NativeBackend.arena,kernelCallGraph.computeContext.accelerator.lookup,0,0);\n+            ndRangeAndArgs[0]=this.kernelContext;\n+            this.argArray = ArgArray.create(kernelCallGraph.computeContext.accelerator, ndRangeAndArgs);\n@@ -63,6 +63,4 @@\n-        public void dispatch(Object[] ndRangeAndArgs) {\n-            \/\/ Strip arg0 NDRange.\n-            NDRange ndRange = (NDRange) ndRangeAndArgs[0];\n-\n-            Object[] args = new Object[ndRangeAndArgs.length - 1];\n-            System.arraycopy(ndRangeAndArgs, 1, args, 0, ndRangeAndArgs.length - 1);\n+        public void dispatch(NDRange ndRange, Object[] args) {\n+         \/\/   KernelContext kernelContext = (KernelContext) args[0];\n+            kernelContext.maxX(ndRange.kid.maxX);\n+            args[0]=this.kernelContext;\n@@ -70,5 +68,1 @@\n-            \/\/    System.out.println(this.argArray.dump());\n-            \/\/ c99NativeBackend.dumpArgArray(argArray);\n-            \/\/System.out.println(\"requesting dispatch range \"+ndRange.kid.maxX);\n-            c99NativeBackend.ndRange(kernelHandle, ndRange.kid.maxX, this.argArray);\n-\n+            c99NativeBackend.ndRange(kernelHandle, this.argArray);\n@@ -94,4 +88,4 @@\n-        System.out.println(\"Original\");\n-        System.out.println(kernelCallGraph.entrypoint.funcOpWrapper().op().toText());\n-        System.out.println(\"Lowered\");\n-        System.out.println(kernelCallGraph.entrypoint.funcOpWrapper().lower().op().toText());\n+       \/\/ System.out.println(\"Original\");\n+       \/\/ System.out.println(kernelCallGraph.entrypoint.funcOpWrapper().op().toText());\n+       \/\/ System.out.println(\"Lowered\");\n+       \/\/ System.out.println(kernelCallGraph.entrypoint.funcOpWrapper().lower().op().toText());\n","filename":"hat\/hat\/src\/java\/hat\/backend\/C99NativeBackend.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        this.ndrange_MH = nativeLibrary.longFunc(\"ndrange\", JAVA_LONG, JAVA_INT, ADDRESS);\n+        this.ndrange_MH = nativeLibrary.longFunc(\"ndrange\", JAVA_LONG,  ADDRESS);\n@@ -146,1 +146,1 @@\n-    public void ndRange(long kernelHandle, int range, ArgArray argArray) {\n+    public void ndRange(long kernelHandle,  ArgArray argArray) {\n@@ -148,1 +148,1 @@\n-            this.ndrange_MH.invoke(kernelHandle, range, argArray.memorySegment());\n+            this.ndrange_MH.invoke(kernelHandle, argArray.memorySegment());\n","filename":"hat\/hat\/src\/java\/hat\/backend\/NativeBackendDriver.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-            identifier(\"kc\").dot().identifier(fieldLoadOpWrapper.fieldName());\n+            identifier(\"kc\").rarrow().identifier(fieldLoadOpWrapper.fieldName());\n","filename":"hat\/hat\/src\/java\/hat\/backend\/c99codebuilders\/C99HatBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.KernelContext;\n@@ -55,1 +56,0 @@\n-                \/\/  .doubleTypeDefs(\"f64_t\")\n@@ -64,1 +64,1 @@\n-        return \/\/defonce(name, _->{\n+        return\n@@ -68,1 +68,1 @@\n-        \/\/});\n+\n@@ -73,3 +73,3 @@\n-        return suffix_t(\"KernelContext\").space().identifier(\"kc\").semicolon().nl()\n-                .identifier(\"kc.x\").equals().globalId().semicolon().nl()\n-                .identifier(\"kc.maxX\").equals().globalSize().semicolon().nl();\n+        return\n+                identifier(\"kc\").rarrow().identifier(\"x\").equals().globalId().semicolon().nl()\n+                .identifier(\"kc\").rarrow().identifier(\"maxX\").equals().globalSize().semicolon().nl();\n@@ -104,1 +104,0 @@\n-            \/\/ type(buildContext.funcOpWrapper.getReturnType()).space().append(buildContext.funcOpWrapper.functionName());\n@@ -112,1 +111,1 @@\n-                scope();\n+                \/\/scope();\n@@ -138,4 +137,6 @@\n-            parenNlIndented(_ ->\n-                    commaSeparated(list.stream().skip(1).toList(), (info) ->\n-                            type(info.javaType).space().varName(info.varOp)\n-                    )\n+            parenNlIndented(_ -> {\n+                        globalPtrPrefix().space().suffix_t(\"KernelContext\").space().asterisk().identifier(\"kc\");\n+                        list.stream().skip(1).forEach(info ->\n+                                comma().space().type(info.javaType).space().varName(info.varOp)\n+                        );\n+                    }\n","filename":"hat\/hat\/src\/java\/hat\/backend\/c99codebuilders\/C99HatKernelBuilder.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+package hat.buffer;\n+\n+import hat.ifacemapper.SegmentMapper;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.invoke.MethodHandles;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n+public interface KernelContext extends CompleteBuffer {\n+    static KernelContext create(Arena arena, MethodHandles.Lookup lookup, int x, int maxX) {\n+        KernelContext kernelContext = SegmentMapper.of(lookup, KernelContext.class,\n+                JAVA_INT.withName(\"x\"),\n+                JAVA_INT.withName(\"maxX\")\n+        ).allocate(arena);\n+        kernelContext.x(x);\n+        kernelContext.maxX(x);\n+        return kernelContext;\n+    }\n+\n+    int x();\n+\n+    void x(int x);\n+\n+    int maxX();\n+\n+    void maxX(int maxX);\n+}\n\\ No newline at end of file\n","filename":"hat\/hat\/src\/java\/hat\/buffer\/KernelContext.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -320,0 +320,1 @@\n+\n","filename":"hat\/hat\/src\/java\/hat\/ifacemapper\/SegmentMapper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}