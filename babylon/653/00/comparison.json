{"files":[{"patch":"@@ -3,0 +3,23 @@\n+## TLDR\n+\n+If you have babylon jdk and jextract in your path you should be able to build using\n+\n+```bash\n+java @hat\/bld\n+```\n+\n+To run an example (say `mandel`) on a platform with opencl, you can run with\n+\n+```bash\n+java @hat\/run ffi-opencl mandel\n+```\n+\n+To run the test-suite (again assuming opencl)\n+\n+```bash\n+java @hat\/test-suite ffi-opencl\n+```\n+\n+\n+## For the more patient ;)\n+\n","filename":"hat\/README.md","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-static String logo = \"\"\"\n+static void logo(){\n+    System.out.println(\"\"\"\n@@ -39,2 +40,4 @@\n-        \"\"\";\n-static String help = \"\"\"\n+        \"\"\");\n+}\n+static void help(){\n+    System.out.println(\"\"\"\n@@ -70,1 +73,7 @@\n-        \"\"\";\n+        \"\"\");\n+}\n+\n+static  void logoAndHelp(){\n+    logo();\n+    help();\n+}\n@@ -76,1 +85,1 @@\n-        System.out.println(help);\n+        help();\n@@ -78,3 +87,2 @@\n-        Path hatDir = Path.of(System.getProperty(\"user.dir\"));\n-        var project = new Project(hatDir, Reporter.progressAndErrors);\n-        var cmake = project.isAvailable(\"cmake\", \"--version\");\n+        var hat = new Project(Path.of(System.getProperty(\"user.dir\")), Reporter.progressAndErrors);\n+        var cmake = hat.isAvailable(\"cmake\", \"--version\");\n@@ -84,1 +92,1 @@\n-        var jextract = project.isAvailable(\"jextract\", \"--version\");\n+        var jextract = hat.isAvailable(\"jextract\", \"--version\");\n@@ -89,3 +97,4 @@\n-        \/\/ A user defined optional dependency.  Anything depending on this will only build if it is true\n-        \/\/ In our case we pull the value from the headless system property\n-        var ui = new Opt(project.id(\"ui\"), !Boolean.getBoolean(\"headless\"));\n+        \/\/ This is an example of a user defined optional dependency.\n+        \/\/ Anything depending on this will only build if (In this case) the property is true\n+        \/\/ So in our case if the headless system property\n+        var ui = new Opt(hat.id(\"ui\"), !Boolean.getBoolean(\"headless\")); \/\/-Dheadless=true|false\n@@ -93,5 +102,4 @@\n-        \/\/ These dependencies are only 'true' on the appropriate platform.\n-        \/\/ So any target that depends on one of these, will only build on that platform\n-        var mac = new Mac(project.id(\"os-mac\"));\n-        var linux = new Linux(project.id(\"os-linux\"));\n-        \/\/ var windows = new Windows(project.id(\"os-windows\")); maybe one day\n+        \/\/ These dependencies are  'true' on the appropriate platform.\n+        \/\/ So any target depending on one these, will only build on that platform\n+        var mac = new Mac(hat.id(\"os-mac\"));\n+        var linux = new Linux(hat.id(\"os-linux\"));\n@@ -102,3 +110,3 @@\n-        var openclCmakeInfo = new OpenCL(project.id(\"cmake-info-opencl\"), cmake);\n-        var openglCmakeInfo = new OpenGL(project.id(\"cmake-info-opengl\"), cmake);\n-        var cudaCmakeInfo = new Cuda(project.id(\"cmake-info-cuda\"), cmake);\n+        var openclCmakeInfo = new OpenCL(hat.id(\"cmake-info-opencl\"), cmake);\n+        var openglCmakeInfo = new OpenGL(hat.id(\"cmake-info-opengl\"), cmake);\n+        var cudaCmakeInfo = new Cuda(hat.id(\"cmake-info-cuda\"), cmake);\n@@ -107,8 +115,9 @@\n-        var core = Jar.of(project.id(\"core\"));\n-        var tools = Jar.of(project.id(\"tools\"), core);\n-        var tests = Jar.of(project.id(\"tests\"), core, tools);\n-        var backend_ffi_native = CMake.of(project.id(\"backend{s}-ffi\"), core, cmake);\n-        var ffiSharedBackend = Jar.of(project.id(\"backend{s}-ffi-shared\"), backend_ffi_native);\n-        var backend_ffi_cuda = Jar.of(project.id(\"backend{s}-ffi-cuda\"), ffiSharedBackend);\n-        var backend_ffi_opencl = Jar.of(project.id(\"backend{s}-ffi-opencl\"), ffiSharedBackend);\n-        var backend_ffi_mock = Jar.of(project.id(\"backend{s}-ffi-mock\"), ffiSharedBackend);\n+        var core = hat.jar(\"core\");\n+        var tools = hat.jar(\"tools\", core);\n+        var tests = hat.jar(\"tests\", core, tools);\n+\n+        var backend_ffi_native = hat.cmakeAndJar(\"backend{s}-ffi\", core, cmake);\n+        var ffiSharedBackend = hat.jar(\"backend{s}-ffi-shared\", backend_ffi_native);\n+        var backend_ffi_cuda = hat.jar(\"backend{s}-ffi-cuda\", ffiSharedBackend);\n+        var backend_ffi_opencl = hat.jar(\"backend{s}-ffi-opencl\", ffiSharedBackend);\n+        var backend_ffi_mock = hat.jar(\"backend{s}-ffi-mock\", ffiSharedBackend);\n@@ -117,7 +126,7 @@\n-        var backend_mt_java = Jar.of(project.id(\"backend{s}-java-mt\"), core);\n-        var backend_seq_java = Jar.of(project.id(\"backend{s}-java-seq\"), core);\n-        var example_squares = Jar.of(project.id(\"example{s}-squares\"), core);\n-        var example_matmul = Jar.of(project.id(\"example{s}-matmul\"), core);\n-        var example_blackscholes = Jar.of(project.id(\"example{s}-blackscholes\"), core);\n-        var example_view = Jar.of(project.id(\"example{s}-view\"), core);\n-        var example_normmap = Jar.of(project.id(\"example{s}-normmap\"), core); \/\/ will probabvly need shared when we hatify\n+        var backend_mt_java = hat.jar(\"backend{s}-java-mt\", core);\n+        var backend_seq_java = hat.jar(\"backend{s}-java-seq\", core);\n+        var example_squares = hat.jar(\"example{s}-squares\", core);\n+        var example_matmul = hat.jar(\"example{s}-matmul\", core);\n+        var example_blackscholes = hat.jar(\"example{s}-blackscholes\", core);\n+        var example_view = hat.jar(\"example{s}-view\", core);\n+        var example_normmap = hat.jar(\"example{s}-normmap\", core); \/\/ will probabvly need shared when we hatify\n@@ -126,1 +135,1 @@\n-        var example_shared = Jar.of(project.id(\"example{s}-shared\"), ui, core);\n+        var example_shared = hat.jar(\"example{s}-shared\", ui, core);\n@@ -129,4 +138,4 @@\n-        var example_mandel = Jar.of(project.id(\"example{s}-mandel\"), example_shared);\n-        var example_life = Jar.of(project.id(\"example{s}-life\"), example_shared);\n-        var example_heal = Jar.of(project.id(\"example{s}-heal\"), example_shared);\n-        var example_violajones = Jar.of(project.id(\"example{s}-violajones\"), example_shared);\n+        var example_mandel = hat.jar(\"example{s}-mandel\", example_shared);\n+        var example_life = hat.jar(\"example{s}-life\", example_shared);\n+        var example_heal = hat.jar(\"example{s}-heal\", example_shared);\n+        var example_violajones = hat.jar(\"example{s}-violajones\", example_shared);\n@@ -135,1 +144,1 @@\n-        var example_experiments = Jar.of(project.id(\"example{s}-experiments\"), core);\n+        var example_experiments = hat.jar(\"example{s}-experiments\", core);\n@@ -138,6 +147,6 @@\n-        var wrapped_shared = Jar.of(project.id(\"wrap{s}-shared\"));\n-        var jextracted_opencl = JExtract.extract(project.id(\"extract{ions|ed}-opencl\"), jextract, openclCmakeInfo, core);\n-        var wrapped_jextracted_opencl = Jar.of(project.id(\"wrap{s}-opencl\"), jextracted_opencl, wrapped_shared);\n-        var backend_jextracted_shared = Jar.of(project.id(\"backend{s}-jextracted-shared\"), core);\n-        var backend_jextracted_opencl = Jar.of(project.id(\"backend{s}-jextracted-opencl\"), wrapped_jextracted_opencl, backend_jextracted_shared);\n-        var jextracted_opengl = JExtract.extract(project.id(\"extract{ions|ed}-opengl\"), jextract, ui, openglCmakeInfo, core);\n+        var wrapped_shared = hat.jar(\"wrap{s}-shared\");\n+        var jextracted_opencl = hat.jextract(\"extract{ions|ed}-opencl\", jextract, openclCmakeInfo, core);\n+        var wrapped_jextracted_opencl = hat.jar(\"wrap{s}-opencl\", jextracted_opencl, wrapped_shared);\n+        var backend_jextracted_shared = hat.jar(\"backend{s}-jextracted-shared\", core);\n+        var backend_jextracted_opencl = hat.jar(\"backend{s}-jextracted-opencl\", wrapped_jextracted_opencl, backend_jextracted_shared);\n+        var jextracted_opengl = hat.jextract(\"extract{ions|ed}-opengl\", jextract, ui, openglCmakeInfo, core);\n@@ -146,1 +155,1 @@\n-        var excludedOpenGLWrapSrc = project.rootPath().resolve(\n+        var excludedOpenGLWrapSrc = hat.rootPath().resolve(\n@@ -149,1 +158,1 @@\n-        var wrapped_jextracted_opengl = Jar.of(project.id(\"wrap{s}-opengl\"), Set.of(excludedOpenGLWrapSrc), jextracted_opengl, wrapped_shared);\n+        var wrapped_jextracted_opengl = hat.jar(\"wrap{s}-opengl\", Set.of(excludedOpenGLWrapSrc), jextracted_opengl, wrapped_shared);\n@@ -152,1 +161,1 @@\n-        var example_nbody = Jar.of(project.id(\"example{s}-nbody\"), ui, wrapped_jextracted_opengl, wrapped_jextracted_opencl);\n+        var example_nbody = hat.jar(\"example{s}-nbody\", ui, wrapped_jextracted_opengl, wrapped_jextracted_opencl);\n@@ -162,2 +171,2 @@\n-                case \"help\" -> System.out.println(logo + \"\\n\" + help);\n-                case \"clean\" -> project.clean();\n+                case \"help\" -> logoAndHelp();\n+                case \"clean\" -> hat.clean();\n@@ -165,1 +174,1 @@\n-                    var dag = project.all();\n+                    var dag = hat.all();\n@@ -171,1 +180,1 @@\n-                    var dag = project.all();\n+                    var dag = hat.all();\n@@ -173,1 +182,1 @@\n-                    project.build(available);\n+                    hat.build(available);\n@@ -183,1 +192,1 @@\n-                            .map(hatDir::resolve)\n+                            .map(hat.rootPath()::resolve)\n@@ -207,2 +216,2 @@\n-                        if (project.get(backendName) instanceof Jar backend) {\n-                            if (project.get(runnableName) instanceof Jar runnable) {\n+                        if (hat.get(backendName) instanceof Jar backend) {\n+                            if (hat.get(runnableName) instanceof Jar runnable) {\n@@ -214,1 +223,1 @@\n-                                System.err.println(\"Failed to find runnable \" + runnableName);\n+                                System.err.println(\"Found backend \"+ backendName  +\" but failed to find runnable\/example \" + runnableName);\n@@ -217,1 +226,1 @@\n-                            System.err.println(\"Failed to find \" + backendName);\n+                            System.err.println(\"Failed to find backend \" + backendName);\n@@ -228,1 +237,1 @@\n-                        if (project.get(backendName) instanceof Jar backend) {\n+                        if (hat.get(backendName) instanceof Jar backend) {\n@@ -244,1 +253,3 @@\n-                           System.out.println(\"\\n\\n\"+logo+\"                 HAT Test Report \");\n+                            System.out.println(\"\\n\\n\");\n+                           logo();\n+                           System.out.println(\"                 HAT Test Report \");\n@@ -261,1 +272,1 @@\n-                        System.err.println(\"For test we require a backend \");\n+                        System.err.println(\"For test-suite we require a backend \");\n@@ -269,1 +280,1 @@\n-                        if (project.get(backendName) instanceof Jar backend) {\n+                        if (hat.get(backendName) instanceof Jar backend) {\n@@ -298,2 +309,2 @@\n-                        if (project.get(backendName) instanceof Jar backend) {\n-                            if (project.get(runnableName) instanceof Jar runnable) {\n+                        if (hat.get(backendName) instanceof Jar backend) {\n+                            if (hat.get(runnableName) instanceof Jar runnable) {\n@@ -313,2 +324,2 @@\n-                    System.out.println(\"'\" + arg + \"' was unexpected \");\n-                    System.out.println(help);\n+                    System.err.println(\"'\" + arg + \"' was unexpected \");\n+                    help();\n","filename":"hat\/hat.java","additions":79,"deletions":68,"binary":false,"changes":147,"status":"modified"},{"filename":"hat\/hat\/job.jar","binary":true,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.nio.file.Paths;\n@@ -59,0 +58,13 @@\n+    public CMake cmakeAndJar(String strId, Dependency... dependencies) {\n+        return CMake.of(id(strId),dependencies);\n+    }\n+    public Jar jar(String strId, Dependency... dependencies) {\n+        return Jar.of(id(strId),dependencies);\n+    }\n+    public Jar jar(String strId, Set<Path> excludedFiles, Dependency... dependencies) {\n+        return Jar.of(id(strId),excludedFiles,dependencies);\n+    }\n+    public JExtract jextract(String strId, Dependency... dependencies){\n+        return JExtract.extract(id(strId),dependencies);\n+    }\n+\n","filename":"hat\/hat\/job\/src\/main\/java\/job\/Project.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}