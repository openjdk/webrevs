{"files":[{"patch":"@@ -3149,3 +3149,1 @@\n-        private final Value processorValue;\n-        private final List<Value> literalsValues;\n-        private final List<Body> expressionsBodies;\n+        private final List<Body> expressions;\n@@ -3156,3 +3154,1 @@\n-            this.processorValue = operands().get(0);\n-            this.literalsValues = operands().subList(1, operands().size());\n-            this.expressionsBodies = def.bodyDefinitions().stream().map(bd -> bd.build(this)).toList();\n+            this.expressions = def.bodyDefinitions().stream().map(bd -> bd.build(this)).toList();\n@@ -3164,3 +3160,1 @@\n-            this.processorValue = operands().get(0);\n-            this.literalsValues = operands().subList(1, operands().size());\n-            this.expressionsBodies = that.expressionsBodies.stream()\n+            this.expressions = that.expressions.stream()\n@@ -3170,1 +3164,2 @@\n-        public StringTemplateOp(Value processorValue, List<Value> literalsValues, List<Body.Builder> expressionsBodies) {\n+        public StringTemplateOp(Value processorValue, List<Value> literalsValues, List<Body.Builder> expressions) {\n+            \/\/ @@@ update to use statements before super when the compiler can depend on 22 features\n@@ -3173,8 +3168,1 @@\n-            this.processorValue = processorValue;\n-            this.literalsValues = literalsValues;\n-            this.expressionsBodies = expressionsBodies.stream().map(b -> b.build(this)).toList();\n-        }\n-\n-        @Override\n-        public StringTemplateOp transform(CopyContext cc, OpTransformer ot) {\n-            return new StringTemplateOp(this, cc, ot);\n+            this.expressions = expressions.stream().map(b -> b.build(this)).toList();\n@@ -3190,0 +3178,5 @@\n+        @Override\n+        public StringTemplateOp transform(CopyContext cc, OpTransformer ot) {\n+            return new StringTemplateOp(this, cc, ot);\n+        }\n+\n@@ -3192,3 +3185,4 @@\n-            \/\/ processor type: StringTemplate$Processor<R, ...>\n-            TypeDefinition processorReturnType = processorValue.type().toTypeDefinition().arguments().get(0);\n-            return CoreTypeFactory.JAVA_TYPE_FACTORY.constructType(processorReturnType);\n+            if (processor().type() instanceof JavaType t) {\n+                return t.typeArguments().get(0);\n+            }\n+            throw new IllegalStateException(\"processor type is not a java type\");\n@@ -3199,1 +3193,9 @@\n-            return expressionsBodies;\n+            return expressions;\n+        }\n+\n+        public Value processor() {\n+            return operands().get(0);\n+        }\n+\n+        public List<Value> fragments() {\n+            return operands().subList(1, operands().size());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -79,16 +79,10 @@\n-            func @\"f3\" (%0 : int, %1 : int)void -> {\n-                  %2 : Var<int> = var %0 @\"x\";\n-                  %3 : Var<int> = var %1 @\"y\";\n-                  %4 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n-                  %5 : java.lang.String = constant @\"x = \";\n-                  %6 : java.lang.String = constant @\"\";\n-                  %7 : java.lang.String = java.stringTemplate %4 %5 %6 ()int -> {\n-                      %8 : int = var.load %2;\n-                      yield %8;\n-                  };\n-                  %9 : Var<java.lang.String> = var %7 @\"s\";\n-                  %10 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n-                  %11 : java.lang.String = constant @\"y = \";\n-                  %12 : java.lang.String = constant @\", \";\n-                  %13 : java.lang.String = constant @\"\";\n-                  %14 : java.lang.String = java.stringTemplate %10 %11 %12 %13\n+            func @\"f3\" (%0 : int, %1 : int, %2 : int)void -> {\n+                  %3 : Var<int> = var %0 @\"x\";\n+                  %4 : Var<int> = var %1 @\"y\";\n+                  %5 : Var<int> = var %2 @\"z\";\n+                  %6 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n+                  %7 : java.lang.String = constant @\"x = \";\n+                  %8 : java.lang.String = constant @\", z = \";\n+                  %9 : java.lang.String = constant @\", x + z = \";\n+                  %10 : java.lang.String = constant @\"\";\n+                  %11 : java.lang.String = java.stringTemplate %6 %7 %8 %9 %10\n@@ -96,2 +90,2 @@\n-                          %15 : int = var.load %3;\n-                          yield %15;\n+                          %12 : int = var.load %3;\n+                          yield %12;\n@@ -99,2 +93,8 @@\n-                      ()java.lang.String -> {\n-                          %16 : java.lang.String = var.load %9;\n+                      ()int -> {\n+                          %13 : int = var.load %5;\n+                          yield %13;\n+                      }\n+                      ()int -> {\n+                          %14 : int = var.load %3;\n+                          %15 : int = var.load %5;\n+                          %16 : int = add %14 %15;\n@@ -103,1 +103,15 @@\n-                  %17 : Var<java.lang.String> = var %14 @\"s2\";\n+                  %17 : Var<java.lang.String> = var %11 @\"s\";\n+                  %18 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n+                  %19 : java.lang.String = constant @\"y = \";\n+                  %20 : java.lang.String = constant @\", \";\n+                  %21 : java.lang.String = constant @\"\";\n+                  %22 : java.lang.String = java.stringTemplate %18 %19 %20 %21\n+                      ()int -> {\n+                          %23 : int = var.load %4;\n+                          yield %23;\n+                      }\n+                      ()java.lang.String -> {\n+                          %24 : java.lang.String = var.load %17;\n+                          yield %24;\n+                      };\n+                  %25 : Var<java.lang.String> = var %22 @\"s2\";\n@@ -107,2 +121,2 @@\n-    static void f3(int x, int y) {\n-        String s = STR.\"x = \\{x}\";\n+    static void f3(int x, int y, int z) {\n+        String s = STR.\"x = \\{x}, z = \\{z}, x + z = \\{x + z}\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/StringTemplateTest.java","additions":37,"deletions":23,"binary":false,"changes":60,"status":"modified"}]}