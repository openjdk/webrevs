{"files":[{"patch":"@@ -31,3 +31,1 @@\n-import java.lang.reflect.code.type.FunctionType;\n-import java.lang.reflect.code.type.JavaType;\n-import java.lang.reflect.code.type.TupleType;\n+import java.lang.reflect.code.type.*;\n@@ -35,1 +33,0 @@\n-import java.lang.reflect.code.type.VarType;\n@@ -3148,1 +3145,1 @@\n-    public static final class StringTemplateOp extends OpWithDefinition {\n+    public static final class StringTemplateOp extends OpWithDefinition implements Op.Nested {\n@@ -3152,0 +3149,4 @@\n+        private final Value processorValue;\n+        private final List<Value> literalsValues;\n+        private final List<Body> expressionsBodies;\n+\n@@ -3154,0 +3155,4 @@\n+\n+            this.processorValue = operands().get(0);\n+            this.literalsValues = operands().subList(1, operands().size());\n+            this.expressionsBodies = def.bodyDefinitions().stream().map(bd -> bd.build(this)).toList();\n@@ -3158,0 +3163,13 @@\n+\n+            this.processorValue = operands().get(0);\n+            this.literalsValues = operands().subList(1, operands().size());\n+            this.expressionsBodies = that.expressionsBodies.stream()\n+                    .map(b -> b.transform(cc, ot).build(this)).toList();\n+        }\n+\n+        public StringTemplateOp(Value processorValue, List<Value> literalsValues, List<Body.Builder> expressionsBodies) {\n+            super(NAME, makeOperandsList(processorValue, literalsValues));\n+\n+            this.processorValue = processorValue;\n+            this.literalsValues = literalsValues;\n+            this.expressionsBodies = expressionsBodies.stream().map(b -> b.build(this)).toList();\n@@ -3165,5 +3183,1 @@\n-        public StringTemplateOp(List<Value> literalsValues, List<Value> expressionValues) {\n-            super(NAME, getOperandsList(literalsValues, expressionValues));\n-        }\n-\n-        private static List<Value> getOperandsList(List<Value> literalsValues, List<Value> expressionValues) {\n+        private static List<Value> makeOperandsList(Value processorValue, List<Value> literalsValues) {\n@@ -3171,6 +3185,2 @@\n-            for (int i = 0; i < literalsValues.size(); i++) {\n-                operands.add(literalsValues.get(i));\n-                if (i < expressionValues.size()) {\n-                    operands.add(expressionValues.get(i));\n-                }\n-            }\n+            operands.add(processorValue);\n+            operands.addAll(literalsValues);\n@@ -3182,1 +3192,8 @@\n-            return JavaType.J_L_STRING_TEMPLATE;\n+            \/\/ processor type: StringTemplate$Processor<R, ...>\n+            TypeDefinition processorReturnType = processorValue.type().toTypeDefinition().arguments().get(0);\n+            return CoreTypeFactory.JAVA_TYPE_FACTORY.constructType(processorReturnType);\n+        }\n+\n+        @Override\n+        public List<Body> bodies() {\n+            return expressionsBodies;\n@@ -3186,2 +3203,2 @@\n-    public static StringTemplateOp stringTemplate(List<Value> literalsValues, List<Value> expressionsValues) {\n-        return new StringTemplateOp(literalsValues, expressionsValues);\n+    public static StringTemplateOp stringTemplate(Value processorValue, List<Value> literalsValues, List<Body.Builder> expressionsBodies) {\n+        return new StringTemplateOp(processorValue, literalsValues, expressionsBodies);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":36,"deletions":19,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2108,10 +2108,0 @@\n-            \/*\n-            #1 = \"y= \"\n-            #2 = \"\"\n-            #3 = y\n-            #4 = StringTemplate(#1 #3 #2)\n-            #5 invoke StringTemplate.Processor.process #stp #4\n-            *\/\n-            List<Value> literalsValues = tree.fragments.map(f -> append(CoreOps.constant(JavaType.J_L_STRING, f)));\n-            List<Value> expressionsValues = tree.expressions.map(e -> toValue(e));\n-            Op.Result stringTemplateValue = append(ExtendedOps.stringTemplate(literalsValues, expressionsValues));\n@@ -2119,4 +2109,17 @@\n-            TypeElement processorReturnType = typeToTypeElement(tree.processor.type.allparams().get(0));\n-            result = append(CoreOps.invoke(\n-                    MethodDesc.method(JavaType.J_L_STRING_TEMPLATE_PROCESSOR, \"process\", processorReturnType, JavaType.J_L_STRING_TEMPLATE),\n-                    processorValue, stringTemplateValue));\n+\n+            List<Value> literalsValues = tree.fragments.map(f -> append(CoreOps.constant(JavaType.J_L_STRING, f)));\n+\n+            List<Body.Builder> expressionsBodies = new ArrayList<>();\n+            tree.expressions.forEach(e -> {\n+                pushBody(e, FunctionType.functionType(typeToTypeElement(e.type)));\n+                append(CoreOps._yield(toValue(e)));\n+                expressionsBodies.add(stack.body);\n+                popBody();\n+            });\n+            result = append(ExtendedOps.stringTemplate(processorValue, literalsValues, expressionsBodies));\n+\/\/            List<Value> expressionsValues = tree.expressions.map(e -> toValue(e));\n+\/\/            Op.Result stringTemplateValue = append(ExtendedOps.stringTemplate(literalsValues, expressionsValues));\n+\/\/            TypeElement processorReturnType = typeToTypeElement(tree.processor.type.allparams().get(0));\n+\/\/            result = append(CoreOps.invoke(\n+\/\/                    MethodDesc.method(JavaType.J_L_STRING_TEMPLATE_PROCESSOR, \"process\", processorReturnType, JavaType.J_L_STRING_TEMPLATE),\n+\/\/                    processorValue, stringTemplateValue));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -43,7 +43,8 @@\n-                  %2 : java.lang.String = constant @\"y = \";\n-                  %3 : java.lang.String = constant @\"\";\n-                  %4 : int = var.load %1;\n-                  %5 : java.lang.StringTemplate = java.stringTemplate %2 %4 %3;\n-                  %6 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n-                  %7 : java.lang.String = invoke %6 %5 @\"java.lang.StringTemplate$Processor::process(java.lang.StringTemplate)java.lang.String\";\n-                  %8 : Var<java.lang.String> = var %7 @\"s\";\n+                  %2 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n+                  %3 : java.lang.String = constant @\"y = \";\n+                  %4 : java.lang.String = constant @\"\";\n+                  %5 : java.lang.String = java.stringTemplate %2 %3 %4 ()int -> {\n+                      %6 : int = var.load %1;\n+                      yield %6;\n+                  };\n+                  %7 : Var<java.lang.String> = var %5 @\"s\";\n@@ -51,1 +52,1 @@\n-            };\n+              };\n@@ -54,1 +55,1 @@\n-        String s = STR. \"y = \\{y}\" ;\n+        String s = STR. \"y = \\{y}\";\n@@ -60,10 +61,11 @@\n-                %1 : Var<int> = var %0 @\"y\";\n-                %2 : java.lang.String = constant @\"y = \";\n-                %3 : java.lang.String = constant @\"\";\n-                %4 : int = var.load %1;\n-                %5 : java.lang.StringTemplate = java.stringTemplate %2 %4 %3;\n-                %6 : java.lang.StringTemplate$Processor<java.lang.StringTemplate, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::RAW()java.lang.StringTemplate$Processor<java.lang.StringTemplate, java.lang.RuntimeException>\";\n-                %7 : java.lang.StringTemplate = invoke %6 %5 @\"java.lang.StringTemplate$Processor::process(java.lang.StringTemplate)java.lang.StringTemplate\";\n-                %8 : Var<java.lang.StringTemplate> = var %7 @\"st\";\n-                return;\n-            };\n+                  %1 : Var<int> = var %0 @\"y\";\n+                  %2 : java.lang.StringTemplate$Processor<java.lang.StringTemplate, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::RAW()java.lang.StringTemplate$Processor<java.lang.StringTemplate, java.lang.RuntimeException>\";\n+                  %3 : java.lang.String = constant @\"y = \";\n+                  %4 : java.lang.String = constant @\"\";\n+                  %5 : java.lang.StringTemplate = java.stringTemplate %2 %3 %4 ()int -> {\n+                      %6 : int = var.load %1;\n+                      yield %6;\n+                  };\n+                  %7 : Var<java.lang.StringTemplate> = var %5 @\"st\";\n+                  return;\n+              };\n@@ -72,1 +74,36 @@\n-        StringTemplate st = RAW. \"y = \\{y}\" ;\n+        StringTemplate st = RAW. \"y = \\{y}\";\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"f3\" (%0 : int, %1 : int)void -> {\n+                  %2 : Var<int> = var %0 @\"x\";\n+                  %3 : Var<int> = var %1 @\"y\";\n+                  %4 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n+                  %5 : java.lang.String = constant @\"x = \";\n+                  %6 : java.lang.String = constant @\"\";\n+                  %7 : java.lang.String = java.stringTemplate %4 %5 %6 ()int -> {\n+                      %8 : int = var.load %2;\n+                      yield %8;\n+                  };\n+                  %9 : Var<java.lang.String> = var %7 @\"s\";\n+                  %10 : java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException> = field.load @\"java.lang.StringTemplate::STR()java.lang.StringTemplate$Processor<java.lang.String, java.lang.RuntimeException>\";\n+                  %11 : java.lang.String = constant @\"y = \";\n+                  %12 : java.lang.String = constant @\", \";\n+                  %13 : java.lang.String = constant @\"\";\n+                  %14 : java.lang.String = java.stringTemplate %10 %11 %12 %13\n+                      ()int -> {\n+                          %15 : int = var.load %3;\n+                          yield %15;\n+                      }\n+                      ()java.lang.String -> {\n+                          %16 : java.lang.String = var.load %9;\n+                          yield %16;\n+                      };\n+                  %17 : Var<java.lang.String> = var %14 @\"s2\";\n+                  return;\n+              };\n+            \"\"\")\n+    static void f3(int x, int y) {\n+        String s = STR.\"x = \\{x}\";\n+        String s2 = STR.\"y = \\{y}, \\{s}\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/StringTemplateTest.java","additions":57,"deletions":20,"binary":false,"changes":77,"status":"modified"}]}