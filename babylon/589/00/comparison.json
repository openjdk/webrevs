{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -361,1 +362,1 @@\n-        this(FFIConfig.of(configSpec));\n+        this(Config.of(configSpec));\n@@ -365,1 +366,1 @@\n-        this(FFIConfig.of());\n+        this(Config.of());\n@@ -368,1 +369,1 @@\n-    public CudaBackend(FFIConfig config) {\n+    public CudaBackend(Config config) {\n@@ -380,2 +381,2 @@\n-            String code = FFIConfig.PTX.isSet(config.bits()) ? createPTX(kernelCallGraph,  args) : createC99(kernelCallGraph, args);\n-            if (FFIConfig.SHOW_CODE.isSet(config.bits())) {\n+            String code = Config.PTX.isSet(config.bits()) ? createPTX(kernelCallGraph,  args) : createC99(kernelCallGraph, args);\n+            if (Config.SHOW_CODE.isSet(config.bits())) {\n@@ -441,1 +442,1 @@\n-        if (FFIConfig.SHOW_KERNEL_MODEL.isSet(config.bits())){\n+        if (Config.SHOW_KERNEL_MODEL.isSet(config.bits())){\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaBackend.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -41,1 +42,1 @@\n-        super(\"mock_backend\", FFIConfig.of(0));\n+        super(\"mock_backend\", Config.of(0));\n","filename":"hat\/backends\/ffi\/mock\/src\/main\/java\/hat\/backend\/ffi\/MockBackend.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -35,1 +36,1 @@\n-        this(FFIConfig.of(configSpec));\n+        this(Config.of(configSpec));\n@@ -39,1 +40,1 @@\n-        this(FFIConfig.of());\n+        this(Config.of());\n@@ -42,1 +43,1 @@\n-    public OpenCLBackend(FFIConfig config) {\n+    public OpenCLBackend(Config config) {\n@@ -56,1 +57,1 @@\n-            if (FFIConfig.SHOW_CODE.isSet(config.bits())) {\n+            if (Config.SHOW_CODE.isSet(config.bits())) {\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -61,1 +62,1 @@\n-    public C99FFIBackend(String libName, FFIConfig config) {\n+    public C99FFIBackend(String libName, Config config) {\n@@ -263,1 +264,1 @@\n-        if (FFIConfig.SHOW_KERNEL_MODEL.isSet(config.bits())) {\n+        if (Config.SHOW_KERNEL_MODEL.isSet(config.bits())) {\n@@ -280,1 +281,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -287,1 +288,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -291,1 +292,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -303,1 +304,1 @@\n-        if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -309,1 +310,1 @@\n-        if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -321,1 +322,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -329,1 +330,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -333,1 +334,1 @@\n-                if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config.bits())) {\n@@ -346,1 +347,1 @@\n-        if (FFIConfig.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config.bits())) {\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -62,1 +63,1 @@\n-    public FFIBackend(String libName, FFIConfig config) {\n+    public FFIBackend(String libName, Config config) {\n@@ -73,1 +74,1 @@\n-        if (FFIConfig.INTERPRET.isSet(config.bits())) {\n+        if (Config.INTERPRET.isSet(config.bits())) {\n@@ -131,2 +132,2 @@\n-        if (FFIConfig.MINIMIZE_COPIES.isSet(config.bits())) {\n-            if (FFIConfig.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+        if (Config.MINIMIZE_COPIES.isSet(config.bits())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n@@ -204,1 +205,1 @@\n-            if (FFIConfig.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n@@ -209,1 +210,1 @@\n-            if (FFIConfig.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackend.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -41,1 +42,1 @@\n-    protected final FFIConfig config;\n+    protected final Config config;\n@@ -113,1 +114,1 @@\n-        BackendBridge(FFILib ffiLib, FFIConfig config) {\n+        BackendBridge(FFILib ffiLib, Config config) {\n@@ -167,1 +168,1 @@\n-    public FFIBackendDriver(String libName, FFIConfig config) {\n+    public FFIBackendDriver(String libName, Config config) {\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackendDriver.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,320 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package hat.backend.ffi;\n-\n-import hat.Config;\n-import hat.codebuilders.HATCodeBuilder;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-\n-public class FFIConfig implements Config {\n-    private int bits;\n-    static private List<Bit> bitList;\n-\n-    @Override\n-    public int bits(){\n-        return bits;\n-    }\n-    @Override\n-    public void bits(int bits){\n-        this.bits = bits;\n-    }\n-\n-\n-    FFIConfig(int bits){\n-        bits(bits);\n-    }\n-\n-    \/\/ These must sync with hat\/backends\/ffi\/shared\/include\/config.h\n-    \/\/ We can create the above config by running main() below...\n-    \/\/ Bits 0-3 select platform id 0..5\n-    \/\/ Bits 4-7 select device id 0..15\n-    \/\/ Bits 8-15 unused at present.\n-    \/\/ These bits start at 16\n-\n-    public static final Bit MINIMIZE_COPIES =  Bit.of(16, \"MINIMIZE_COPIES\");\n-    public static final Bit TRACE = Bit.nextBit(MINIMIZE_COPIES,\"TRACE\");\n-    public static final Bit PROFILE = Bit.nextBit(TRACE, \"PROFILE\");\n-    public static final Bit SHOW_CODE = Bit.nextBit(PROFILE,\"SHOW_CODE\");\n-    public static final Bit SHOW_KERNEL_MODEL = Bit.nextBit(SHOW_CODE,\"SHOW_KERNEL_MODEL\");\n-    public static final Bit SHOW_COMPUTE_MODEL = Bit.nextBit(SHOW_KERNEL_MODEL,\"SHOW_COMPUTE_MODEL\");\n-    public static final Bit INFO = Bit.nextBit(SHOW_COMPUTE_MODEL, \"INFO\");\n-    public static final Bit TRACE_COPIES = Bit.nextBit(INFO, \"TRACE_COPIES\");\n-    public static final Bit TRACE_SKIPPED_COPIES = Bit.nextBit(TRACE_COPIES, \"TRACE_SKIPPED_COPIES\");\n-    public static final Bit TRACE_ENQUEUES = Bit.nextBit(TRACE_SKIPPED_COPIES,\"TRACE_ENQUEUES\");\n-    public static final Bit TRACE_CALLS= Bit.nextBit(TRACE_ENQUEUES, \"TRACE_CALLS\");\n-    public static final Bit SHOW_WHY = Bit.nextBit(TRACE_CALLS, \"SHOW_WHY\");\n-    public static final Bit SHOW_STATE = Bit.nextBit(SHOW_WHY, \"SHOW_STATE\");\n-    public static final Bit PTX = Bit.nextBit(SHOW_STATE, \"PTX\");\n-    public static final Bit INTERPRET = Bit.nextBit(PTX, \"INTERPRET\");\n-\n-    static {\n-        bitList = List.of(\n-                MINIMIZE_COPIES,\n-                TRACE,\n-                PROFILE,\n-                SHOW_CODE,\n-                SHOW_KERNEL_MODEL,\n-                SHOW_COMPUTE_MODEL,\n-                INFO,\n-                TRACE_COPIES,\n-                TRACE_SKIPPED_COPIES,\n-                TRACE_ENQUEUES,\n-                TRACE_CALLS,\n-                SHOW_WHY,\n-                SHOW_STATE,\n-                PTX,\n-                INTERPRET\n-        );\n-    }\n-\n-    public static FFIConfig of() {\n-        if (System.getenv(\"HAT\") instanceof String opts) {\n-            System.out.println(\"From env \" + opts);\n-            return of(opts);\n-        }\n-        if (System.getProperty(\"HAT\") instanceof String opts) {\n-            System.out.println(\"From prop \" + opts);\n-            return of(opts);\n-        }\n-        return of(\"\");\n-    }\n-\n-    public static FFIConfig of(int bits) {\n-        return new FFIConfig(bits);\n-    }\n-\n-    public static FFIConfig of(List<Config.Bit> configBits) {\n-        int allBits = 0;\n-        for (Config.Bit configBit : configBits) {\n-            allBits |= configBit.shifted();\n-        }\n-        return new FFIConfig(allBits);\n-    }\n-\n-    public static FFIConfig of(Config.Bit... configBits) {\n-        return of(List.of(configBits));\n-    }\n-\n-    public FFIConfig and(Config.Bit... configBits) {\n-        return FFIConfig.of(FFIConfig.of(List.of(configBits)).bits & bits);\n-    }\n-\n-    public FFIConfig or(Config.Bit... configBits) {\n-        return FFIConfig.of(FFIConfig.of(List.of(configBits)).bits | bits);\n-    }\n-\n-    public static FFIConfig of(String name) {\n-        if (name == null || name.equals(\"\")) {\n-            return FFIConfig.of(0);\n-        }\n-\n-        for (Bit bit:bitList) {\n-            if (bit.name().equals(name)) {\n-                return new FFIConfig(bit.shifted());\n-            }\n-        }\n-        if (name.contains(\",\")) {\n-            List<Config.Bit> configBits = new ArrayList<>();\n-            Arrays.stream(name.split(\",\")).forEach(opt -> {\n-                   boolean found = false;\n-                   for (var bit:FFIConfig.bitList) {\n-                       if (bit.name().equals(opt)) {\n-                           configBits.add(bit);\n-                           found = true;\n-                           break;\n-                       }\n-                   }\n-                   if (!found){\n-                       throw new IllegalStateException(\"WHAT HAT OPT ?\"+opt);\n-\n-                   }\n-            }\n-            );\n-            return of(configBits);\n-        } else if (name.contains(\":\")) {\n-            var tokens = name.split(\":\");\n-            if (tokens.length == 2) {\n-                var token = tokens[0];\n-                if (token.equals(\"PLATFORM\") || token.equals(\"DEVICE\")) {\n-                    int value = Integer.parseInt(tokens[1]);\n-                    return new FFIConfig(value << (token.equals(\"DEVICE\") ? 4 : 0));\n-                } else {\n-                    System.out.println(\"Unexpected opt '\" + name + \"'\");\n-                    return FFIConfig.of(0);\n-                }\n-            } else {\n-                System.out.println(\"Unexpected opt '\" + name + \"'\");\n-                return FFIConfig.of(0);\n-            }\n-        } else {\n-            System.out.println(\"Unexpected opt '\" + name + \"'\");\n-            System.exit(1);\n-            return FFIConfig.of(0);\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder builder = new StringBuilder();\n-        for (Bit bit:bitList){\n-            if (bit.isSet(bits)) {\n-                if (!builder.isEmpty()) {\n-                    builder.append(\"|\");\n-                }\n-                builder.append(bit.name());\n-\n-            }\n-        }\n-        return builder.toString();\n-    }\n-\n-    public static class Main {\n-        public static class ConfigBuilder extends HATCodeBuilder<ConfigBuilder> {\n-\n-            ConfigBuilder staticConstInt(String name, int padWidth, int value) {\n-                staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intHexValue(value).semicolon().nl();\n-                return this;\n-            }\n-\n-            ConfigBuilder staticConstIntShiftedOne(String name, int padWidth, int shift) {\n-                staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intValue(1).leftShift().intHexValue(shift).semicolon().nl();\n-                return this;\n-            }\n-\n-            ConfigBuilder className() {\n-                return identifier(\"BasicConfig\");\n-            }\n-\n-            ConfigBuilder bitNamesVar() {\n-                return identifier(\"bitNames\");\n-            }\n-\n-            ConfigBuilder configBitsVar() {\n-                return identifier(\"configBits\");\n-            }\n-\n-            ConfigBuilder configBitsAnd() {\n-                return configBitsVar().space().ampersand().space();\n-            }\n-\n-            ConfigBuilder configBitsAndBitName(String bitName) {\n-                return configBitsAnd().identifier(bitName + \"_BIT\");\n-            }\n-\n-            static String toCamelExceptFirst(String s) {\n-                String[] parts = s.split(\"_\");\n-                StringBuilder camelCaseString = new StringBuilder(\"\");\n-                for (String part : parts) {\n-                    camelCaseString.append(camelCaseString.isEmpty()\n-                            ? part.toLowerCase()\n-                            : part.substring(0, 1).toUpperCase() + part.substring(1).toLowerCase());\n-                }\n-                return camelCaseString.toString();\n-            }\n-\n-            ConfigBuilder camelExceptFirst(String s) {\n-                return identifier(toCamelExceptFirst(s));\n-            }\n-\n-            ConfigBuilder std(String s) {\n-                return identifier(\"std\").colon().colon().identifier(s);\n-            }\n-\n-            ConfigBuilder stdEndl() {\n-                return std(\"endl\");\n-            }\n-\n-            ConfigBuilder stdCout(String s) {\n-                return std(\"cout\").space().leftShift().space().dquote().literal(s).dquote();\n-            }\n-        }\n-\n-        public static void main(String[] args) {\n-            FFIConfig c = FFIConfig.of(\"INFO,PTX\");\n-            ConfigBuilder cb = new ConfigBuilder();\n-\n-            cb.lineComment(\"Auto generated from  \" + FFIConfig.class.getName());\n-            cb.pragma(\"once\").nl();\n-            cb.includeSys(\"iostream\").nl();\n-            final int START_BIT_INDEX = 0x10;\n-\n-            cb.structKeyword().space().className().braceNlIndented((_) -> {\n-                cb.staticConstInt(\"START_BIT_IDX\", 32, START_BIT_INDEX);\n-                int i = START_BIT_INDEX;\n-                for (var bit : FFIConfig.bitList) {\n-                    cb.staticConstIntShiftedOne(bit.name() + \"_BIT\", 32, i++);\n-                }\n-                cb.staticConstInt(\"END_BIT_IDX\", 32, i);\n-                cb.constKeyword().space().staticKeyword().space().charType().space().asterisk().bitNamesVar().osbrace().csbrace().semicolon().space().lineComment(\"See below for initialization\");\n-                cb.intType().space().identifier(\"configBits\").semicolon().nl();\n-\n-                for (var bit : FFIConfig.bitList) {\n-                    cb.identifier(\"bool\").space().camelExceptFirst(bit.name()).semicolon().nl();\n-                }\n-\n-                cb.intType().space().identifier(\"platform\").semicolon().nl();\n-                cb.intType().space().identifier(\"device\").semicolon().nl();\n-                cb.identifier(\"bool\").space().identifier(\"alwaysCopy\").semicolon().nl();\n-\/\/Constructor\n-                cb.explicitKeyword().space().className().paren((_) -> cb.intType().space().configBitsVar()).colon().nl().indent((_) -> {\n-                    cb.configBitsVar().paren((_) -> cb.configBitsVar()).comma().nl();\n-                    for (var bit : FFIConfig.bitList) {\n-                        cb.camelExceptFirst(bit.name()).paren((_) -> cb.paren((_) -> cb.configBitsAndBitName(bit.name())).eq().identifier(bit.name() + \"_BIT\")).comma().nl();\n-\n-                    }\n-                    cb.identifier(\"platform\").paren((_) -> cb.configBitsAnd().intHexValue(0xf)).comma().nl();\n-                    cb.identifier(\"alwaysCopy\").paren(_->cb.pling().camelExceptFirst(\"MINIMIZE_COPIES\")).comma().nl();\n-                    cb.identifier(\"device\").paren(_ ->\n-                            cb.paren(_ -> cb.configBitsAnd().intHexValue(0xf0)).space().rightShift().space().intValue(4)).braceNlIndented(_ ->\n-                            cb.ifKeyword().paren(_ -> cb.identifier(\"info\")).braceNlIndented(_ -> {\n-                                for (var bit : FFIConfig.bitList) {\n-                                    cb.stdCout(\"native \" + ConfigBuilder.toCamelExceptFirst(bit.name()) + \" \").space().leftShift().space().camelExceptFirst(bit.name()).space().leftShift().space().stdEndl().semicolon().nl();\n-                                }\n-                            })\n-                    );\n-                }).nl().nl();\n-\n-                cb.virtualKeyword().space().tilde().className().paren((_) -> {\n-                }).equals().space().defaultKeyword().semicolon();\n-            }).semicolon().nl().nl();\n-\n-\n-            cb.hashIfdef(\"shared_cpp\", (_) -> {\n-                cb.constKeyword().space().charType().space().asterisk().className().colon().colon().bitNamesVar().sbrace(_ -> {}).equals().brace((_) -> {\n-                    cb.nl();\n-                    for (var bit : FFIConfig.bitList) {\n-                        cb.dquote().identifier(bit.name() + \"_BIT\").dquote().comma().nl();\n-                    }\n-                }).semicolon().nl();\n-            });\n-            System.out.println(cb);\n-        }\n-    }\n-}\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIConfig.java","additions":0,"deletions":320,"binary":false,"changes":320,"status":"deleted"},{"patch":"@@ -2,27 +2,27 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ Auto generated from  hat.backend.ffi.Config\n-\/\/ Auto generated from  hat.backend.ffi.Config\n-\/\/ Auto generated from  hat.backend.ffi.Config\n+* Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.  Oracle designates this\n+* particular file as subject to the \"Classpath\" exception as provided\n+* by Oracle in the LICENSE file that accompanied this code.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\/*\n+You probably should not edit this this file!!!\n+It was auto generated 2025-10-01 11:34:45.328 by hat.FFIConfigCreator\n+*\/\n@@ -35,17 +35,15 @@\n-    static constexpr int START_BIT_IDX                    = 0x10;\n-    static constexpr int MINIMIZE_COPIES_BIT              = 1<<0x10;\n-    static constexpr int TRACE_BIT                        = 1<<0x11;\n-    static constexpr int PROFILE_BIT                      = 1<<0x12;\n-    static constexpr int SHOW_CODE_BIT                    = 1<<0x13;\n-    static constexpr int SHOW_KERNEL_MODEL_BIT            = 1<<0x14;\n-    static constexpr int SHOW_COMPUTE_MODEL_BIT           = 1<<0x15;\n-    static constexpr int INFO_BIT                         = 1<<0x16;\n-    static constexpr int TRACE_COPIES_BIT                 = 1<<0x17;\n-    static constexpr int TRACE_SKIPPED_COPIES_BIT         = 1<<0x18;\n-    static constexpr int TRACE_ENQUEUES_BIT               = 1<<0x19;\n-    static constexpr int TRACE_CALLS_BIT                  = 1<<0x1a;\n-    static constexpr int SHOW_WHY_BIT                     = 1<<0x1b;\n-    static constexpr int SHOW_STATE_BIT                   = 1<<0x1c;\n-    static constexpr int PTX_BIT                          = 1<<0x1d;\n-    static constexpr int INTERPRET_BIT                    = 1<<0x1e;\n-    static constexpr int END_BIT_IDX                      = 0x1f;\n+    static constexpr int MINIMIZE_COPIES_BIT              = 1<<0x8;\n+    static constexpr int TRACE_BIT                        = 1<<0x9;\n+    static constexpr int PROFILE_BIT                      = 1<<0xa;\n+    static constexpr int SHOW_CODE_BIT                    = 1<<0xb;\n+    static constexpr int SHOW_KERNEL_MODEL_BIT            = 1<<0xc;\n+    static constexpr int SHOW_COMPUTE_MODEL_BIT           = 1<<0xd;\n+    static constexpr int INFO_BIT                         = 1<<0xe;\n+    static constexpr int TRACE_COPIES_BIT                 = 1<<0xf;\n+    static constexpr int TRACE_SKIPPED_COPIES_BIT         = 1<<0x10;\n+    static constexpr int TRACE_ENQUEUES_BIT               = 1<<0x11;\n+    static constexpr int TRACE_CALLS_BIT                  = 1<<0x12;\n+    static constexpr int SHOW_WHY_BIT                     = 1<<0x13;\n+    static constexpr int SHOW_STATE_BIT                   = 1<<0x14;\n+    static constexpr int PTX_BIT                          = 1<<0x15;\n+    static constexpr int INTERPRET_BIT                    = 1<<0x16;\n@@ -53,0 +51,1 @@\n+    const static char *bitDescriptions[]; \/\/ See below for initialization\n@@ -108,1 +107,2 @@\n-\n+                std::cout << \"native platform \" << platform << std::endl;\n+                std::cout << \"native device \" << device << std::endl;\n@@ -111,1 +111,0 @@\n-\n@@ -133,1 +132,18 @@\n-#endif\n\\ No newline at end of file\n+const char *BasicConfig::bitDescriptions[]={\n+    \"FFI ONLY Try to minimize copies\",\n+    \"FFI ONLY trace code\",\n+    \"FFI ONLY Turn on profiling\",\n+    \"Show generated code (PTX\/OpenCL\/CUDA)\",\n+    \"Show (via OpWriter) Kernel Model\",\n+    \"Show (via OpWriter) Compute Model\",\n+    \"FFI ONLY Show platform and device info\",\n+    \"FFI ONLY trace copies\",\n+    \"FFI ONLY Trace skipped copies (see MINIMIZE_COPIES) \",\n+    \"FFI ONLY trace enqueued tasks\",\n+    \"FFI ONLY trace calls (enter\/leave)\",\n+    \"FFI ONLY show why we decided to copy buffer (H to D)\",\n+    \"Show iface buffer state changes\",\n+    \"FFI (NVIDIA) ONLY pass PTX rather than C99 CUDA code\",\n+    \"Interpret the code model rather than converting to bytecode\",\n+};\n+#endif\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/config.h","additions":63,"deletions":47,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -27,9 +28,7 @@\n-public interface Config {\n-    int bits();\n-    void bits(int bits);\n-    record Bit(int index, int size, String name) implements Comparable<Bit> {\n-        static Bit of(int index, int size, String name){\n-            return new Bit(index,size,name);\n-        }\n-        public static Bit of(int index, String name){\n-            return new Bit(index,1,name);\n+import java.util.List;\n+\n+public class Config {\n+\n+    public record Bit(int index, int size, String name, String description) implements Comparable<Bit> {\n+        static Bit of(int index, int size, String name, String description){\n+            return new Bit(index,size,name,description);\n@@ -37,2 +36,2 @@\n-        public static Bit nextBit(Bit bit, String name){\n-            return new Bit(bit.index+1,1,name);\n+        public static Bit of(int index, String name, String description){\n+            return new Bit(index,1,name,description);\n@@ -41,0 +40,6 @@\n+        public static Bit nextBit(Bit bit, int size, String name, String description){\n+            return new Bit(bit.index+bit.size,size,name, description);\n+        }\n+        public static Bit nextBit(Bit bit, String name, String description){\n+            return nextBit(bit, 1,name,description);\n+        }\n@@ -53,0 +58,144 @@\n+\n+\n+    \/\/ Bits 0-3 select platform id 0..5\n+    \/\/ Bits 4-7 select device id 0..15\n+    public static final Bit PLATFORM =  Bit.of(0,4, \"PLATFORM\", \"FFI ONLY platform id (0-15)\");\n+    public static final Bit DEVICE = Bit.nextBit(PLATFORM, 4, \"DEVICE\",\"FFI ONLY device id (0-15)\");\n+    public static final Bit MINIMIZE_COPIES =  Bit.nextBit(DEVICE, \"MINIMIZE_COPIES\",\"FFI ONLY Try to minimize copies\");\n+    public static final Bit TRACE = Bit.nextBit(MINIMIZE_COPIES,\"TRACE\", \"FFI ONLY trace code\");\n+    public static final Bit PROFILE = Bit.nextBit(TRACE, \"PROFILE\", \"FFI ONLY Turn on profiling\");\n+    public static final Bit SHOW_CODE = Bit.nextBit(PROFILE,\"SHOW_CODE\",\"Show generated code (PTX\/OpenCL\/CUDA)\");\n+    public static final Bit SHOW_KERNEL_MODEL = Bit.nextBit(SHOW_CODE,\"SHOW_KERNEL_MODEL\", \"Show (via OpWriter) Kernel Model\");\n+    public static final Bit SHOW_COMPUTE_MODEL = Bit.nextBit(SHOW_KERNEL_MODEL,\"SHOW_COMPUTE_MODEL\", \"Show (via OpWriter) Compute Model\");\n+    public static final Bit INFO = Bit.nextBit(SHOW_COMPUTE_MODEL, \"INFO\", \"FFI ONLY Show platform and device info\");\n+    public static final Bit TRACE_COPIES = Bit.nextBit(INFO, \"TRACE_COPIES\", \"FFI ONLY trace copies\");\n+    public static final Bit TRACE_SKIPPED_COPIES = Bit.nextBit(TRACE_COPIES, \"TRACE_SKIPPED_COPIES\", \"FFI ONLY Trace skipped copies (see MINIMIZE_COPIES) \");\n+    public static final Bit TRACE_ENQUEUES = Bit.nextBit(TRACE_SKIPPED_COPIES,\"TRACE_ENQUEUES\", \"FFI ONLY trace enqueued tasks\");\n+    public static final Bit TRACE_CALLS= Bit.nextBit(TRACE_ENQUEUES, \"TRACE_CALLS\", \"FFI ONLY trace calls (enter\/leave)\");\n+    public static final Bit SHOW_WHY = Bit.nextBit(TRACE_CALLS, \"SHOW_WHY\", \"FFI ONLY show why we decided to copy buffer (H to D)\");\n+    public static final Bit SHOW_STATE = Bit.nextBit(SHOW_WHY, \"SHOW_STATE\", \"Show iface buffer state changes\");\n+    public static final Bit PTX = Bit.nextBit(SHOW_STATE, \"PTX\", \"FFI (NVIDIA) ONLY pass PTX rather than C99 CUDA code\");\n+    public static final Bit INTERPRET = Bit.nextBit(PTX, \"INTERPRET\", \"Interpret the code model rather than converting to bytecode\");\n+\n+    public static final List<Bit> bitList = List.of(\n+            PLATFORM,\n+            DEVICE,\n+            MINIMIZE_COPIES,\n+            TRACE,\n+            PROFILE,\n+            SHOW_CODE,\n+            SHOW_KERNEL_MODEL,\n+            SHOW_COMPUTE_MODEL,\n+            INFO,\n+            TRACE_COPIES,\n+            TRACE_SKIPPED_COPIES,\n+            TRACE_ENQUEUES,\n+            TRACE_CALLS,\n+            SHOW_WHY,\n+            SHOW_STATE,\n+            PTX,\n+            INTERPRET\n+    );\n+\n+\n+\n+    private int bits;\n+\n+\n+    public int bits(){\n+        return bits;\n+    }\n+    public void bits(int bits){\n+        this.bits = bits;\n+    }\n+\n+    Config(int bits){\n+        bits(bits);\n+    }\n+\n+    \/\/ These must sync with hat\/backends\/ffi\/shared\/include\/config.h\n+    \/\/ We can create the above config by running main() below...\n+\n+    public static Config of() {\n+        if (System.getenv(\"HAT\") instanceof String opts) {\n+            System.out.println(\"From env \" + opts);\n+            return of(opts);\n+        }\n+        if (System.getProperty(\"HAT\") instanceof String opts) {\n+            System.out.println(\"From prop \" + opts);\n+            return of(opts);\n+        }\n+        return of(\"\");\n+    }\n+\n+    public static Config of(int bits) {\n+        return new Config(bits);\n+    }\n+\n+    public static Config of(List<Bit> configBits) {\n+        int allBits = 0;\n+        for (Bit configBit : configBits) {\n+            allBits |= configBit.shifted();\n+        }\n+        return new Config(allBits);\n+    }\n+\n+    public static Config of(Bit... configBits) {\n+        return of(List.of(configBits));\n+    }\n+\n+    public Config and(Bit... configBits) {\n+        return Config.of(Config.of(List.of(configBits)).bits & bits);\n+    }\n+\n+    public Config or(Bit... configBits) {\n+        return Config.of(Config.of(List.of(configBits)).bits | bits);\n+    }\n+\n+    public record BitValue(Bit bit, int value){}\n+\n+    public static Config of(String spec) {\n+        if (spec == null || spec.equals(\"\")) {\n+            return Config.of(0);\n+        }\n+        for (Bit bit:bitList) {\n+            if (bit.name().equals(spec)) {\n+                return new Config(bit.shifted());\n+            }\n+        }\n+        if (spec.contains(\",\")) {\n+            var bits = 0;\n+            for (var opt: spec.split(\",\")) {\n+                var split = opt.split(\":\");\n+                var valName=split[0];\n+                var value=split.length==1?1:Integer.parseInt(split[1]);\n+                var bitValue = Config.bitList.stream()\n+                        .filter(bit ->bit.name().equals(valName))\n+                        .map(bit -> new BitValue(bit, value))\n+                        .findFirst()\n+                        .orElseThrow();\n+                bits |= bitValue.value << bitValue.bit.index();\n+            }\n+            return of(bits);\n+        } else {\n+            System.out.println(\"Unexpected spec '\" + spec + \"'\");\n+            System.exit(1);\n+            return Config.of(0);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        for (Bit bit:bitList){\n+            if (bit.isSet(bits)) {\n+                if (!builder.isEmpty()) {\n+                    builder.append(\"|\");\n+                }\n+                builder.append(bit.name());\n+\n+            }\n+        }\n+        return builder.toString();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/Config.java","additions":161,"deletions":12,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+package hat;\n+\n+import hat.codebuilders.CodeBuilder;\n+import hat.codebuilders.C99HATConfigBuilder;\n+import hat.util.StreamMutable;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+public class FFIConfigCreator {\n+    public static void main(String[] args) throws IOException {\n+        Path ffiInclude = Path.of(\"backends\/ffi\/shared\/src\/main\/native\/include\");\n+        if (!Files.isDirectory(ffiInclude)) {\n+            System.out.println(\"No dir at \" + ffiInclude);\n+            System.exit(1);\n+        }\n+        Path configDotH = ffiInclude.resolve(\"config.h\");\n+        if (!Files.isRegularFile(configDotH)) {\n+            System.out.println(\"Expected to replace \" + configDotH + \" but no file exists\");\n+            System.exit(1);\n+        }\n+\n+        C99HATConfigBuilder cb = new C99HATConfigBuilder();\n+        cb.oracleCopyright();\n+        cb.blockComment(\"\"\"\n+                You probably should not edit this this file!!!\n+                It was auto generated\"\"\" + \" \" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\").format(new Date()) + \" by \" + FFIConfigCreator.class.getName()\n+        );\n+        cb.pragma(\"once\").nl();\n+        cb.includeSys(\"iostream\").nl();\n+        final int START_BIT_INDEX = Config.bitList.stream().filter(bit -> bit.size() == 1).findFirst().get().index();\n+\n+        cb.structKeyword().space().className().braceNlIndented((_) -> {\n+            var i = StreamMutable.of(START_BIT_INDEX);\n+            Config.bitList.stream().filter(bit -> bit.size() == 1).forEach(bit -> {\n+                cb.staticConstIntShiftedOne(bit.name() + \"_BIT\", 32, i.get());\n+                i.set(i.get() + 1);\n+            });\n+            cb.constKeyword().space().staticKeyword().space().charType().space().asterisk().bitNamesVar().osbrace().csbrace().semicolon().space().lineComment(\"See below for initialization\");\n+            cb.constKeyword().space().staticKeyword().space().charType().space().asterisk().bitDescriptionsVar().osbrace().csbrace().semicolon().space().lineComment(\"See below for initialization\");\n+\n+            cb.intType().space().identifier(\"configBits\").semicolon().nl();\n+\n+            Config.bitList.stream().filter(bit -> bit.size() == 1).forEach(bit ->\n+                    cb.identifier(\"bool\").space().camelExceptFirst(bit.name()).semicolon().nl()\n+            );\n+\n+            cb.intType().space().identifier(\"platform\").semicolon().nl();\n+            cb.intType().space().identifier(\"device\").semicolon().nl();\n+            cb.identifier(\"bool\").space().identifier(\"alwaysCopy\").semicolon().nl();\n+            \/\/Constructor\n+            cb.explicitKeyword().space().className().paren((_) -> cb.intType().space().configBitsVar()).colon().nl().indent((_) -> {\n+                cb.configBitsVar().paren((_) -> cb.configBitsVar()).comma().nl();\n+                Config.bitList.stream().filter(bit -> bit.size() == 1).forEach(bit ->\n+                        cb.camelExceptFirst(bit.name()).paren((_) -> cb.paren((_) -> cb.configBitsAndBitName(bit.name())).eq().identifier(bit.name() + \"_BIT\")).comma().nl()\n+                );\n+                cb.identifier(\"platform\").paren((_) -> cb.configBitsAnd().intHexValue(0xf)).comma().nl();\n+                cb.identifier(\"alwaysCopy\").paren(_ -> cb.pling().camelExceptFirst(\"MINIMIZE_COPIES\")).comma().nl();\n+                cb.identifier(\"device\").paren(_ ->\n+                        cb.paren(_ -> cb.configBitsAnd().intHexValue(0xf0)).space().rightShift().space().intValue(4)).braceNlIndented(_ ->\n+                        cb.ifKeyword().paren(_ -> cb.identifier(\"info\")).braceNlIndented(_ -> {\n+                            cb.separated(Config.bitList.stream().filter(bit -> bit.size() == 1), CodeBuilder::nl, bit ->\n+                                    cb.stdCout(\"native \" + C99HATConfigBuilder.toCamelExceptFirst(bit.name()) + \" \").space().leftShift().space().camelExceptFirst(bit.name()).space().leftShift().space().stdEndl().semicolon()\n+                            );\n+                            cb.nl().stdCout(\"native platform \").space().leftShift().space().identifier(\"platform\").space().leftShift().space().stdEndl().semicolon();\n+                            cb.nl().stdCout(\"native device \").space().leftShift().space().identifier(\"device\").space().leftShift().space().stdEndl().semicolon();\n+                        })\n+                );\n+            }).nl();\n+\n+            cb.virtualKeyword().space().tilde().className().ocparen().equals().space().defaultKeyword().semicolon();\n+        }).semicolon().nl().nl();\n+\n+\n+        cb.hashIfdef(\"shared_cpp\", (_) -> {\n+            cb.constKeyword().space().charType().space().asterisk().className().colon().colon().bitNamesVar().ocsbrace().equals().brace((_) -> {\n+                cb.nl();\n+                Config.bitList.stream().filter(bit -> bit.size() == 1).forEach(bit ->\n+                        cb.dquote().identifier(bit.name() + \"_BIT\").dquote().comma().nl()\n+                );\n+            }).semicolon().nl();\n+            cb.constKeyword().space().charType().space().asterisk().className().colon().colon().bitDescriptionsVar().ocsbrace().equals().brace((_) -> {\n+                cb.nl();\n+                Config.bitList.stream().filter(bit -> bit.size() == 1).forEach(bit ->\n+                        cb.dquote().identifier(bit.description()).dquote().comma().nl()\n+                );\n+            }).semicolon().nl();\n+        });\n+\n+        Files.writeString(configDotH, cb.toString());\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/FFIConfigCreator.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+package hat.codebuilders;\n+\n+import hat.Config;\n+\n+public class C99HATConfigBuilder extends HATCodeBuilder<C99HATConfigBuilder> {\n+\n+    C99HATConfigBuilder staticConstInt(String name, int padWidth, int value) {\n+        staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intHexValue(value).semicolon().nl();\n+        return this;\n+    }\n+\n+    public C99HATConfigBuilder staticConstIntShiftedOne(String name, int padWidth, int shift) {\n+        staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intValue(1).leftShift().intHexValue(shift).semicolon().nl();\n+        return this;\n+    }\n+\n+    public C99HATConfigBuilder className() {\n+        return identifier(\"BasicConfig\");\n+    }\n+\n+    public C99HATConfigBuilder bitNamesVar() {\n+        return identifier(\"bitNames\");\n+    }\n+\n+    public C99HATConfigBuilder bitDescriptionsVar() {\n+        return identifier(\"bitDescriptions\");\n+    }\n+\n+    public C99HATConfigBuilder configBitsVar() {\n+        return identifier(\"configBits\");\n+    }\n+\n+    public C99HATConfigBuilder configBitsAnd() {\n+        return configBitsVar().space().ampersand().space();\n+    }\n+\n+    public C99HATConfigBuilder configBitsAndBitName(String bitName) {\n+        return configBitsAnd().identifier(bitName + \"_BIT\");\n+    }\n+\n+    public static String toCamelExceptFirst(String s) {\n+        String[] parts = s.split(\"_\");\n+        StringBuilder camelCaseString = new StringBuilder(\"\");\n+        for (String part : parts) {\n+            camelCaseString.append(camelCaseString.isEmpty()\n+                    ? part.toLowerCase()\n+                    : part.substring(0, 1).toUpperCase() + part.substring(1).toLowerCase());\n+        }\n+        return camelCaseString.toString();\n+    }\n+\n+    public C99HATConfigBuilder camelExceptFirst(String s) {\n+        return identifier(toCamelExceptFirst(s));\n+    }\n+\n+    C99HATConfigBuilder std(String s) {\n+        return identifier(\"std\").colon().colon().identifier(s);\n+    }\n+\n+    public C99HATConfigBuilder stdEndl() {\n+        return std(\"endl\");\n+    }\n+\n+    public C99HATConfigBuilder stdCout(String s) {\n+        return std(\"cout\").space().leftShift().space().dquote().literal(s).dquote();\n+    }\n+\n+    static public void main(){\n+        var c = Config.of(\"INFO,SHOW_CODE,SHOW_KERNEL_MODEL,SHOW_COMPUTE_MODEL,PLATFORM:0,DEVICE:0\");\n+        System.out.println(c);\n+        System.exit(1);\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATConfigBuilder.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -309,0 +309,6 @@\n+    public T ocsbrace() {\n+        return osbrace().csbrace();\n+    }\n+    public T ocbrace() {\n+        return obrace().cbrace();\n+    }\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/CodeBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.FFIConfigCreator;\n@@ -35,0 +36,1 @@\n+import java.text.SimpleDateFormat;\n@@ -36,0 +38,1 @@\n+import java.util.Date;\n@@ -39,0 +42,29 @@\n+\n+    public T oracleCopyright(){\n+        return blockComment(\"\"\"\n+                * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+                * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                *\n+                * This code is free software; you can redistribute it and\/or modify it\n+                * under the terms of the GNU General Public License version 2 only, as\n+                * published by the Free Software Foundation.  Oracle designates this\n+                * particular file as subject to the \"Classpath\" exception as provided\n+                * by Oracle in the LICENSE file that accompanied this code.\n+                *\n+                * This code is distributed in the hope that it will be useful, but WITHOUT\n+                * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+                * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+                * version 2 for more details (a copy is included in the LICENSE file that\n+                * accompanied this code).\n+                *\n+                * You should have received a copy of the GNU General Public License version\n+                * 2 along with this work; if not, write to the Free Software Foundation,\n+                * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+                *\n+                * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+                * or visit www.oracle.com if you need additional information or have any\n+                * questions.\"\"\"\n+      );\n+    }\n+\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilder.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import hat.backend.ffi.FFIConfig;\n+import hat.Config;\n@@ -32,1 +32,1 @@\n-import static hat.backend.ffi.FFIConfig.*;\n+import static hat.Config.*;\n@@ -141,1 +141,1 @@\n-                ,new OpenCLBackend(of(FFIConfig.PROFILE,  FFIConfig.TRACE)));\n+                ,new OpenCLBackend(of(Config.PROFILE,  Config.TRACE)));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Mesh.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import hat.backend.ffi.FFIConfig;\n+import hat.Config;\n@@ -38,1 +38,1 @@\n-import static hat.backend.ffi.FFIConfig.*;\n+import static hat.Config.*;\n@@ -63,2 +63,2 @@\n-                        FFIConfig.TRACE_COPIES,\n-                        FFIConfig.MINIMIZE_COPIES\n+                        Config.TRACE_COPIES,\n+                        Config.MINIMIZE_COPIES\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/MinBufferTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 26 hat\/bld.java\n+-cp hat\/job.jar --enable-preview --source 26 hat.java bld\n","filename":"hat\/hat\/bld","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 26 hat\/clean.java\n+-cp hat\/job.jar --enable-preview --source 26 hat.java clean\n","filename":"hat\/hat\/clean","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"hat\/hat\/obld","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat\/bld","status":"copied"},{"patch":"","filename":"hat\/hat\/oclean","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat\/clean","status":"copied"},{"patch":"","filename":"hat\/hat\/orun","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat\/run","status":"copied"},{"patch":"","filename":"hat\/hat\/osanity","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat\/sanity","status":"copied"},{"patch":"","filename":"hat\/hat\/otest","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat\/test","status":"copied"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 26 hat\/run.java\n+-cp hat\/job.jar --enable-preview --source 26 hat.java run \n","filename":"hat\/hat\/run","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 26 hat\/sanity.java\n+-cp hat\/job.jar --enable-preview --source 26 hat.java sanity \n","filename":"hat\/hat\/sanity","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 26 hat\/test.java\n+-cp hat\/job.jar --enable-preview --source 26 hat.java test \n","filename":"hat\/hat\/test","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}