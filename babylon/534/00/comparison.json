{"files":[{"patch":"@@ -513,2 +513,2 @@\n-                        } else if (field instanceof Schema.SchemaNode.Padding) {\n-                            \/\/ SKIP\n+                        } else if (field instanceof Schema.SchemaNode.Padding padding) {\n+                            emitText(padding.toC99()).semicolon().nl();\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -53,0 +54,26 @@\n+            \/**\n+             * Generates a set of n-random characters from a set of legal characters in C99.\n+             * @param numCharsToBuild\n+             * @return {@link String}\n+             *\/\n+            private String generateRandomString(final int numCharsToBuild) {\n+                StringBuilder sb = new StringBuilder();\n+                String LEGAL_CHARS = \"_$ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n+                ThreadLocalRandom.current() \/\/\n+                        .ints(numCharsToBuild, 0, LEGAL_CHARS.length()) \/\/\n+                        .mapToObj(LEGAL_CHARS::charAt) \/\/\n+                        .forEach(sb::append);\n+                return sb.toString();\n+            }\n+\n+            \/**\n+             * Returns a string in C99 to represent the padding. It generates\n+             * the <code>pad$<\/code> name with a set of 5 characters in order to avoid\n+             * collision of names in the same iFace schema.\n+             * @return {@link String}\n+             *\/\n+            public String toC99() {\n+                String randomPostfix = generateRandomString(5);\n+                return \"char pad$\" + randomPostfix + \"[\" + len + \"]\";\n+            }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/ifacemapper\/Schema.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}