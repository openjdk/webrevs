{"files":[{"patch":"@@ -0,0 +1,73 @@\n+\n+package experiments;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.runtime.CodeReflection;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DNA {\n+    static int myFunc(int i) {\n+        return 0;\n+    }\n+\n+    @CodeReflection\n+    public static void addMul(int add, int mul) {\n+        int len = myFunc(add);\n+    }\n+\n+    public static class DNAOp extends Op { \/\/ externalized\n+        private final TypeElement type;\n+\n+        DNAOp(String opName, TypeElement type, List<Value> operands) {\n+            super(opName, operands);\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+            throw new IllegalStateException(\"in transform\");\n+            \/\/  return null;\n+        }\n+\n+\n+        @Override\n+        public TypeElement resultType() {\n+            System.out.println(\"in result type\");\n+            return type;\n+        }\n+    }\n+\n+\n+    static public void main(String[] args) throws Exception {\n+        Method method = DNA.class.getDeclaredMethod(\"addMul\", int.class, int.class);\n+        var funcOp = method.getCodeModel().get();\n+        var transformed = funcOp.transform((builder, op) -> {\n+            CopyContext cc = builder.context();\n+            if (op instanceof CoreOp.InvokeOp invokeOp) {\n+               \/\/ List<Value> operands = new ArrayList<>();\n+                \/\/builder.op(new DNAOp(\"dna\", JavaType.INT, operands));\n+                List<Value> inputOperands = invokeOp.operands();\n+                List<Value> outputOperands = cc.getValues(inputOperands);\n+                Op.Result inputResult = invokeOp.result();\n+                Op.Result outputResult = builder.op(new DNAOp(\"dna\", JavaType.INT, outputOperands));\n+                cc.mapValue(inputResult, outputResult);\n+            } else {\n+                builder.op(op);\n+            }\n+            return builder;\n+        });\n+\n+\n+        System.out.println(transformed.toText());\n+\n+    }\n+}\n+\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/DNA.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -32,2 +32,0 @@\n-    import hat.Accelerator;\n-    import hat.backend.Backend;\n@@ -35,0 +33,1 @@\n+    import hat.ops.HatPtrOp;\n@@ -36,2 +35,0 @@\n-    import hat.optools.InvokeOpWrapper;\n-    import hat.util.Result;\n@@ -39,2 +36,0 @@\n-    import java.lang.invoke.MethodHandles;\n-    import java.lang.management.OperatingSystemMXBean;\n@@ -42,2 +37,0 @@\n-    import java.lang.reflect.code.Block;\n-    import java.lang.reflect.code.Body;\n@@ -46,2 +39,0 @@\n-    import java.lang.reflect.code.OpTransformer;\n-    import java.lang.reflect.code.TypeElement;\n@@ -49,3 +40,0 @@\n-    import java.lang.reflect.code.interpreter.Interpreter;\n-    import java.lang.reflect.code.op.CoreOp;\n-    import java.lang.reflect.code.op.ExternalizableOp;\n@@ -53,1 +41,0 @@\n-    import java.lang.reflect.code.type.PrimitiveType;\n@@ -55,1 +42,0 @@\n-    import java.util.ArrayList;\n@@ -57,1 +43,0 @@\n-    import java.util.Map;\n@@ -69,68 +54,0 @@\n-        public static abstract class HatOp extends ExternalizableOp {\n-            private final TypeElement type;\n-\n-            HatOp(String opName) {\n-                super(opName, List.of());\n-                this.type = JavaType.INT;\n-            }\n-\n-            HatOp(String opName, TypeElement type, List<Value> operands) {\n-                super(opName, operands);\n-                this.type = type;\n-            }\n-\n-            HatOp(String opName, TypeElement type, List<Value> operands, Map<String, Object> attributes) {\n-                super(opName, operands);\n-                this.type = type;\n-            }\n-\n-            HatOp(HatOp that, CopyContext cc) {\n-                super(that, cc);\n-                this.type = that.type;\n-            }\n-\n-            @Override\n-            public TypeElement resultType() {\n-                return type;\n-            }\n-\n-           \/\/ @Override\n-           \/\/ public Body body() {\n-          \/\/      return body;\n-          \/\/  }\n-\n-           \/\/ public String functionName() {\n-             \/\/   return functionName;\n-          \/\/  }\n-        }\n-        public static class HatPtrOp extends HatOp  {\n-          \/\/  InvokeOpWrapper ifaceInvokeOpWrapper;\n-\n-            public HatPtrOp(TypeElement typeElement, List<Value> operands) {\n-\n-                super(\"Ptr\",typeElement,operands);\n-            }\n-\n-          \/\/  public HatPtrOp(InvokeOpWrapper ifaceInvokeOpWrapper) {\n-            \/\/    this();\n-            \/\/    this.ifaceInvokeOpWrapper = ifaceInvokeOpWrapper;\n-           \/\/ }\n-\n-            public HatPtrOp(HatOp that, CopyContext cc) {\n-                super(that, cc);\n-            }\n-\n-            @Override\n-            public Op transform(CopyContext cc, OpTransformer ot) {\n-                return new HatPtrOp(this, cc);\n-            }\n-\n-\n-           \/\/ @Override\n-           \/\/ public Block.Builder lower(Block.Builder builder, OpTransformer opTransformer) {\n-\n-             \/\/   builder.op(ifaceInvokeOpWrapper.op());\n-             \/\/   return builder;\n-           \/\/ }\n-        }\n-\n@@ -142,0 +59,1 @@\n+             \/\/   builder.op(invokeOpWrapper.op());\n@@ -143,7 +61,5 @@\n-                Value arg2 = cc.getValue(funcOpWrapper.parameter(2));\n-              \/\/  Value receiver = cc.\n-               \/\/ Value receiver = cc.getValue(invokeOpWrapper.operandNAsValue(0));\n-                List<Value> operands = new ArrayList<>();\n-                operands.add(arg2);\n-                builder.op(new HatPtrOp( JavaType.INT,operands));\n-            });\n+                List<Value> inputOperands = invokeOpWrapper.operands();\n+                List<Value> outputOperands = cc.getValues(inputOperands);\n+                Op.Result inputResult = invokeOpWrapper.result();\n+                Op.Result outputResult = builder.op(new HatPtrOp(JavaType.INT, outputOperands));\n+                cc.mapValue(inputResult, outputResult);\n@@ -151,1 +67,1 @@\n-            System.out.println(transformedFuncOpWrapper.toText());\n+            });\n@@ -153,0 +69,1 @@\n+          \/\/  System.out.println(transformedFuncOpWrapper.toText());\n@@ -154,11 +71,4 @@\n-            System.out.println(transformedFuncOpWrapper.toText());\n-            Accelerator accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n-            var s32Array = S32Array.create(accelerator, 64);\n-            for (int i = 0; i < 64; i++) {\n-                s32Array.array(i, i);\n-            }\n-\n-            Interpreter.invoke(MethodHandles.lookup(),loweredFuncOpWrapper.op(), s32Array, 2, 2);\n-            for (int i = 0; i < 6; i++) {\n-                System.out.println(s32Array.array(i));\n-            }\n+           \/\/ System.out.println(transformedFuncOpWrapper.toText());\n+            System.out.println(loweredFuncOpWrapper.toText());\n+             var ssa = loweredFuncOpWrapper.ssa();\n+            System.out.println(ssa.toText());\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Ptr.java","additions":13,"deletions":103,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -49,12 +49,12 @@\n-    <pluginManagement>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-surefire-plugin<\/artifactId>\n-                <version>3.1.2<\/version>\n-                <configuration>\n-                   <argLine> -enable-preview<\/argLine>\n-                <\/configuration>\n-            <\/plugin>\n-        <\/plugins>\n-    <\/pluginManagement>\n+        <pluginManagement>\n+            <plugins>\n+                <plugin>\n+                    <groupId>org.apache.maven.plugins<\/groupId>\n+                    <artifactId>maven-surefire-plugin<\/artifactId>\n+                    <version>3.1.2<\/version>\n+                    <configuration>\n+                        <argLine>-enable-preview<\/argLine>\n+                    <\/configuration>\n+                <\/plugin>\n+            <\/plugins>\n+        <\/pluginManagement>\n@@ -98,1 +98,1 @@\n-       <\/plugins>\n+        <\/plugins>\n","filename":"hat\/hat\/pom.xml","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-                if (opWrapper.parameterToVarOpMap.containsKey(blockParameter)) {\n-                    return opWrapper.parameterToVarOpMap.get(blockParameter);\n+                if (opWrapper.parameterVarOpMap.containsKey(blockParameter)) {\n+                    return opWrapper.parameterVarOpMap.get(blockParameter);\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuildContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+package hat.ops;\n+\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.util.List;\n+\n+public abstract class HatOp extends Op {\n+    private final TypeElement type;\n+\n+    HatOp(String opName, TypeElement type, List<Value> operands) {\n+        super(opName, operands);\n+        this.type = type;\n+    }\n+\n+    HatOp(HatOp that, CopyContext cc) {\n+        super(that, cc);\n+        this.type = that.type;\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return type;\n+    }\n+}\n","filename":"hat\/hat\/src\/main\/java\/hat\/ops\/HatOp.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+package hat.ops;\n+\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.util.List;\n+\n+public class HatPtrOp extends HatOp {\n+\n+    public HatPtrOp(TypeElement typeElement, List<Value> operands) {\n+        super(\"hat.ptr\", typeElement, operands);\n+    }\n+\n+    public HatPtrOp(HatOp that, CopyContext cc) {\n+        super(that, cc);\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext cc, OpTransformer ot) {\n+        return new HatPtrOp(this, cc);\n+    }\n+}\n","filename":"hat\/hat\/src\/main\/java\/hat\/ops\/HatPtrOp.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.ops.HatPtrOp;\n@@ -31,0 +32,1 @@\n+import java.lang.reflect.Parameter;\n@@ -36,0 +38,1 @@\n+import java.lang.reflect.code.analysis.SSA;\n@@ -194,2 +197,13 @@\n-    public Map<Block.Parameter, CoreOp.VarOp> parameterToVarOpMap = new LinkedHashMap<>();\n-    public Map<CoreOp.VarOp, Block.Parameter> varOpToParameterMap = new LinkedHashMap<>();\n+    public static class BiMap<T1 extends Block.Parameter,T2 extends Op>{\n+        public Map<T1, T2> t1ToT2 = new LinkedHashMap<>();\n+        public Map<T2,T1> t2ToT1 = new LinkedHashMap<>();\n+        public void add(T1 t1,T2 t2){\n+            t1ToT2.put(t1,t2);\n+            t2ToT1.put(t2,t1);\n+        }\n+        public T1 get(T2 t2){\n+            return t2ToT1.get(t2);\n+        }\n+        public T2 get(T1 t1){\n+            return t1ToT2.get(t1);\n+        }\n@@ -197,0 +211,11 @@\n+        public boolean containsKey(T1 t1) {\n+            return t1ToT2.containsKey(t1);\n+        }\n+        public boolean containsKey(T2 t2) {\n+            return t2ToT1.containsKey(t2);\n+        }\n+    }\n+\n+    public BiMap<Block.Parameter, CoreOp.VarOp> parameterVarOpMap = new BiMap<>();\n+    public BiMap<Block.Parameter, CoreOp.InvokeOp> parameterInvokeOpMap = new BiMap<>();\n+    public BiMap<Block.Parameter, HatPtrOp> parameterHatPtrOpMap = new BiMap<>();\n@@ -202,4 +227,11 @@\n-                CoreOp.VarOp varOp = (CoreOp.VarOp) result.op();\n-                parameterToVarOpMap.put(parameter, varOp);\n-                varOpToParameterMap.put(varOp, parameter);\n-                paramTable.add(Map.entry(parameter, varOp));\n+                var resultOp = result.op();\n+                if (resultOp instanceof CoreOp.VarOp varOp) {\n+                    parameterVarOpMap.add(parameter, varOp);\n+                    paramTable.add(Map.entry(parameter, varOp));\n+                }else if (resultOp instanceof CoreOp.InvokeOp invokeOp) {\n+                    parameterInvokeOpMap.add(parameter,invokeOp);\n+                }else if (resultOp instanceof HatPtrOp hatPtrOp) {\n+                    parameterHatPtrOpMap.add(parameter,hatPtrOp);\n+                }else{\n+                    \/\/System.out.println(\"neither varOp or an invokeOp \"+resultOp.getClass().getName());\n+                }\n@@ -213,1 +245,1 @@\n-        return new FuncOpWrapper(op().transform((block, op) -> {\n+        return OpWrapper.wrap(op().transform((block, op) -> {\n@@ -223,0 +255,5 @@\n+    public FuncOpWrapper ssa() {\n+        return OpWrapper.wrap(SSA.transform(op()));\n+    }\n+\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FuncOpWrapper.java","additions":44,"deletions":7,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -232,0 +232,4 @@\n+\n+    public Op.Result result() {\n+        return op.result();\n+    }\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-    <content url=\"file:\/\/$MODULE_DIR$\/..\/hat\/src\/main\/java\">\n+    <content url=\"file:\/\/$MODULE_DIR$\/..\/hat\/\">\n","filename":"hat\/intellij\/hat.iml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}