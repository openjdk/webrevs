{"files":[{"patch":"@@ -27,1 +27,1 @@\n-import hat.Accelerator;\n+import hat.buffer.BufferAllocator;\n@@ -37,2 +37,2 @@\n-    private static RgbaS32Image create(Accelerator accelerator, int width, int height) {\n-        return ImageBuffer.create(accelerator, RgbaS32Image.class, layout,width, height, BufferedImage.TYPE_INT_ARGB, 1);\n+    private static RgbaS32Image create(BufferAllocator bufferAllocator, int width, int height) {\n+        return ImageBuffer.create(bufferAllocator, RgbaS32Image.class, layout,width, height, BufferedImage.TYPE_INT_ARGB, 1);\n@@ -41,2 +41,2 @@\n-    static RgbaS32Image create(Accelerator accelerator, BufferedImage bufferedImage) {\n-        return create(accelerator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n+    static RgbaS32Image create(BufferAllocator bufferAllocator, BufferedImage bufferedImage) {\n+        return create(bufferAllocator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/buffers\/RgbaS32Image.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -67,1 +68,1 @@\n-        public IntegralWindow(Container container, Accelerator accelerator, F32Array2D integralImageF32, F32Array2D integralSqImageF32) {\n+        public IntegralWindow(Container container, BufferAllocator bufferAllocator, F32Array2D integralImageF32, F32Array2D integralSqImageF32) {\n@@ -76,2 +77,2 @@\n-                this.integralImageU16 = GreyU16Image.create(accelerator, integral);\n-                this.integralSqImageU16 = GreyU16Image.create(accelerator, integralSq);\n+                this.integralImageU16 = GreyU16Image.create(bufferAllocator, integral);\n+                this.integralSqImageU16 = GreyU16Image.create(bufferAllocator, integralSq);\n@@ -172,1 +173,1 @@\n-    public HaarViewer(Accelerator accelerator,\n+    public HaarViewer(BufferAllocator bufferAllocator,\n@@ -248,1 +249,1 @@\n-        this.integralWindow = new IntegralWindow(this, accelerator, integralImageF32, integralSqImageF32);\n+        this.integralWindow = new IntegralWindow(this, bufferAllocator, integralImageF32, integralSqImageF32);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/HaarViewer.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -319,3 +319,0 @@\n-\n-\n-\n@@ -323,2 +320,1 @@\n-        Accelerator accelerator = cc.accelerator;\n-        F32Array2D greyImage = F32Array2D.create(accelerator, width, height);\n+        F32Array2D greyImage = F32Array2D.create(cc, width, height);\n@@ -328,2 +324,2 @@\n-        F32Array2D integralImage = F32Array2D.create(accelerator, width, height);\n-        F32Array2D integralSqImage = F32Array2D.create(accelerator, width, height);\n+        F32Array2D integralImage = F32Array2D.create(cc, width, height);\n+        F32Array2D integralSqImage = F32Array2D.create(cc, width, height);\n@@ -338,1 +334,1 @@\n-        ScaleTable scaleTable = ScaleTable.create(accelerator, cascade, width, height);\n+        ScaleTable scaleTable = ScaleTable.create(cc, cascade, width, height);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ViolaJonesCoreCompute.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -38,2 +39,2 @@\n-    private static GreyU16Image create(Accelerator accelerator, int width, int height) {\n-        return ImageBuffer.create(accelerator, GreyU16Image.class, layout,width, height, BufferedImage.TYPE_USHORT_GRAY, 1);\n+    private static GreyU16Image create(BufferAllocator bufferAllocator, int width, int height) {\n+        return ImageBuffer.create(bufferAllocator, GreyU16Image.class, layout,width, height, BufferedImage.TYPE_USHORT_GRAY, 1);\n@@ -42,2 +43,2 @@\n-    static GreyU16Image create(Accelerator accelerator, BufferedImage bufferedImage) {\n-        return create(accelerator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n+    static GreyU16Image create(BufferAllocator bufferAllocator, BufferedImage bufferedImage) {\n+        return create(bufferAllocator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/buffers\/GreyU16Image.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -39,2 +40,2 @@\n-    private static RgbS08x3Image create(Accelerator accelerator, int width, int height) {\n-        return ImageBuffer.create(accelerator, RgbS08x3Image.class,layout, width, height, BufferedImage.TYPE_INT_RGB, 3);\n+    private static RgbS08x3Image create(BufferAllocator bufferAllocator, int width, int height) {\n+        return ImageBuffer.create(bufferAllocator, RgbS08x3Image.class,layout, width, height, BufferedImage.TYPE_INT_RGB, 3);\n@@ -43,2 +44,2 @@\n-    static RgbS08x3Image create(Accelerator accelerator, BufferedImage bufferedImage) {\n-        return create(accelerator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n+    static RgbS08x3Image create(BufferAllocator bufferAllocator, BufferedImage bufferedImage) {\n+        return create(bufferAllocator, bufferedImage.getWidth(), bufferedImage.getHeight()).syncFromRaster(bufferedImage);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/buffers\/RgbS08x3Image.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-    static ScaleTable create(Accelerator accelerator, Cascade cascade, int imageWidth, int imageHeight) {\n+    static ScaleTable create(BufferAllocator bufferAllocator, Cascade cascade, int imageWidth, int imageHeight) {\n@@ -150,1 +150,1 @@\n-        ScaleTable scaleTable = ScaleTable.create(accelerator, multiScaleCountVar);\n+        ScaleTable scaleTable = ScaleTable.create(bufferAllocator, multiScaleCountVar);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/ScaleTable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -6,0 +7,1 @@\n+import hat.ifacemapper.SegmentMapper;\n@@ -36,1 +38,1 @@\n-public class ComputeContext {\n+public class ComputeContext implements BufferAllocator {\n@@ -121,0 +123,5 @@\n+    @Override\n+    public <T extends Buffer> T allocate(SegmentMapper<T> segmentMapper) {\n+        return accelerator.allocate(segmentMapper);\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/ComputeContext.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-    static F32Array create(Accelerator accelerator, int length) {\n-        return Array1D.create(accelerator, F32Array.class,layout, length);\n+    static F32Array create(BufferAllocator bufferAllocator, int length) {\n+        return Array1D.create(bufferAllocator, F32Array.class,layout, length);\n@@ -40,2 +40,2 @@\n-    static F32Array create(Accelerator accelerator, float[] source) {\n-        return create(accelerator, source.length).copyFrom(source);\n+    static F32Array create(BufferAllocator bufferAllocator, float[] source) {\n+        return create(bufferAllocator, source.length).copyFrom(source);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/F32Array.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-    static F32Array2D create(Accelerator accelerator, int width, int height) {\n-        return Array2D.create(accelerator, F32Array2D.class, layout, width, height);\n+    static F32Array2D create(BufferAllocator bufferAllocator, int width, int height) {\n+        return Array2D.create(bufferAllocator, F32Array2D.class, layout, width, height);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/F32Array2D.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-    static S32Array create(Accelerator accelerator, int length) {\n-        return Array1D.create(accelerator, S32Array.class,layout, length);\n+    static S32Array create(BufferAllocator bufferAllocator, int length) {\n+        return Array1D.create(bufferAllocator, S32Array.class,layout, length);\n@@ -41,2 +41,2 @@\n-    static S32Array create(Accelerator accelerator, int[] source) {\n-        return create(accelerator, source.length).copyfrom(source);\n+    static S32Array create(BufferAllocator bufferAllocator, int[] source) {\n+        return create(bufferAllocator, source.length).copyfrom(source);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/S32Array.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-    static S32Array2D create(Accelerator accelerator, int width, int height) {\n-        return Array2D.create(accelerator, S32Array2D.class, layout, width, height);\n+    static S32Array2D create(BufferAllocator bufferAllocator, int width, int height) {\n+        return Array2D.create(bufferAllocator, S32Array2D.class, layout, width, height);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/S32Array2D.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}