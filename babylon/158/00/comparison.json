{"files":[{"patch":"@@ -35,1 +35,1 @@\n-public interface Cascade extends CompleteBuffer {\n+public interface Cascade extends Buffer {\n@@ -172,1 +172,1 @@\n-        var cascade = Cascade.schema.allocate(bufferAllocator, 10, 10, 10).instance;\n+        var cascade = Cascade.schema.allocate(bufferAllocator, 10, 10, 10);\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Cascade.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-        var s32Array = S32Array.schema.allocate(bufferAllocator, 100).instance;\n+        var s32Array = S32Array.schema.allocate(bufferAllocator, 100);\n+        Schema.BoundSchema boundSchema = (Schema.BoundSchema)Buffer.getHatData(s32Array);\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/S32Array.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        var s32Array = S32Array.schema.allocate(bufferAllocator, 100).instance;\n+        var s32Array = S32Array.schema.allocate(bufferAllocator, 100);\n@@ -50,1 +50,1 @@\n-        var resultTable = ResultTable.schema.allocate(bufferAllocator, 100).instance;\n+        var resultTable = ResultTable.schema.allocate(bufferAllocator, 100);\n@@ -58,1 +58,2 @@\n-        var cascade = Cascade.schema.allocate(bufferAllocator,10,10,10).instance;\n+        var cascade = Cascade.schema.allocate(bufferAllocator,10,10,10);\n+\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/SchemaLayoutTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,2 +72,2 @@\n-       var boundSchema = Cascade.schema.allocate(accelerator,haarCascade.featureCount(),haarCascade.stageCount(),haarCascade.treeCount());\n-       var cascade2 = boundSchema.instance;\n+       var cascade2 = Cascade.schema.allocate(accelerator,haarCascade.featureCount(),haarCascade.stageCount(),haarCascade.treeCount());\n+\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ViolaJonesCompute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+import hat.ifacemapper.HatData;\n@@ -15,1 +16,0 @@\n-import java.util.LinkedList;\n@@ -18,0 +18,1 @@\n+import java.util.Stack;\n@@ -31,1 +32,1 @@\n-    Class<T> iface;\n+    public Class<T> iface;\n@@ -34,3 +35,4 @@\n-        List<MemoryLayout> memoryLayouts = new ArrayList<>();\n-        int[] arrayLengths;\n-        int idx;\n+        private Stack<List<MemoryLayout>> stack = new Stack<>();\n+        private int[] arrayLengths;\n+        private List<AbstractField.FieldControlledArray> bound = new ArrayList<>();\n+        private int idx;\n@@ -40,0 +42,30 @@\n+        GroupLayout groupLayout = null;\n+        void pop(){\n+            if (stack.size()==1){\n+                groupLayout =  (GroupLayout) stack.peek().getFirst();;\n+            }\n+            stack.pop();\n+        }\n+        void push(){\n+            stack.push(new ArrayList<>());\n+        }\n+        void add(MemoryLayout memoryLayout){\n+            stack.peek().add(memoryLayout);\n+        }\n+        int getIdx(){\n+            return arrayLengths[idx++];\n+        }\n+        void add(AbstractField.FieldControlledArray boundArray){\n+            bound.add(boundArray);\n+        }\n+        public MemoryLayout[] array() {\n+            return stack.peek().toArray(new MemoryLayout[0]);\n+        }\n+\n+    }\n+    public LayoutCollector collectLayouts(int... arrayLengths) {\n+        LayoutCollector layoutCollector = new LayoutCollector(arrayLengths);\n+        layoutCollector.push();\n+        field.collectLayouts(layoutCollector);\n+        layoutCollector.pop();\n+        return layoutCollector;\n@@ -42,9 +74,1 @@\n-       \/\/ LayoutCollector layoutCollector = new LayoutCollector(arrayLengths);\n-        LinkedList<Integer> lengthsToBind = new LinkedList<>();\n-        for (var i : arrayLengths) {\n-            lengthsToBind.add(i);\n-        }\n-        List<MemoryLayout> memoryLayouts = new ArrayList<>();\n-        field.collectLayouts(memoryLayouts, lengthsToBind);\n-       \/\/ field.collectLayouts(layoutCollector);\n-        return (GroupLayout) memoryLayouts.getFirst().withName(iface.getSimpleName());\n+        return collectLayouts(arrayLengths).groupLayout.withName(iface.getSimpleName());\n@@ -234,2 +258,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd) {\n-                memoryLayouts.add(MemoryLayout.paddingLayout(len));\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                layoutCollector.add(MemoryLayout.paddingLayout(len));\n@@ -245,1 +269,1 @@\n-         * @param lengthsToBind\n+         * @param layoutCollector\n@@ -248,1 +272,2 @@\n-        MemoryLayout getLayout(AccessStyle accessStyle, LinkedList<Integer> lengthsToBind) {\n+      \/\/  MemoryLayout getLayout(AccessStyle accessStyle, LinkedList<Integer> lengthsToBind, List<FieldControlledArray> boundArrays) {\n+        MemoryLayout getLayout(AccessStyle accessStyle, LayoutCollector layoutCollector) {\n@@ -269,1 +294,2 @@\n-                List<MemoryLayout> layouts = new ArrayList<>();\n+                layoutCollector.push();\n+\n@@ -272,1 +298,2 @@\n-                        c.collectLayouts(layouts, lengthsToBind);\n+\n+                        c.collectLayouts(layoutCollector);\n@@ -275,1 +302,3 @@\n-                MemoryLayout[] childLayoutsAsArray = layouts.toArray(new MemoryLayout[0]);\n+\n+                MemoryLayout[] childLayoutsAsArray = layoutCollector.array();\n+                layoutCollector.pop();\n@@ -301,2 +330,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd) {\n-                memoryLayouts.add(getLayout(accessStyle, lengthsToAdd).withName(accessStyle.name));\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                 layoutCollector.add(getLayout(accessStyle, layoutCollector).withName(accessStyle.name));\n@@ -318,1 +347,0 @@\n-\n@@ -320,2 +348,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                memoryLayouts.add(getLayout(accessStyle, lengthsToBind).withName(accessStyle.name));\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                 layoutCollector.add(getLayout(accessStyle, layoutCollector).withName(accessStyle.name));\n@@ -337,1 +365,0 @@\n-\n@@ -339,3 +366,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                MemoryLayout fieldTypeLayout = getLayout(accessStyle, lengthsToBind).withName(accessStyle.name);\n-                memoryLayouts.add(fieldTypeLayout);\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                layoutCollector.add(getLayout(accessStyle, layoutCollector).withName(accessStyle.name));\n@@ -343,0 +369,1 @@\n+\n@@ -498,2 +525,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                List<MemoryLayout> layouts = new ArrayList<>();\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                layoutCollector.push();\n@@ -502,1 +529,1 @@\n-                        c.collectLayouts(layouts, lengthsToBind);\n+                        c.collectLayouts(layoutCollector);\n@@ -507,1 +534,1 @@\n-                    memoryLayout =MemoryLayout.unionLayout(layouts.toArray(new MemoryLayout[0]));\n+                    memoryLayout =MemoryLayout.unionLayout(layoutCollector.array());\n@@ -509,1 +536,1 @@\n-                    memoryLayout = MemoryLayout.structLayout(layouts.toArray(new MemoryLayout[0]));\n+                    memoryLayout = MemoryLayout.structLayout(layoutCollector.array());\n@@ -513,1 +540,2 @@\n-                memoryLayouts.add(memoryLayout);\n+                layoutCollector.pop();\n+                layoutCollector.add(memoryLayout);\n@@ -576,2 +604,2 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                MemoryLayout elementLayout = getLayout(elementAccessStyle, lengthsToBind).withName(elementAccessStyle.type.getSimpleName());;\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                MemoryLayout elementLayout = getLayout(elementAccessStyle, layoutCollector).withName(elementAccessStyle.type.getSimpleName());;\n@@ -579,1 +607,1 @@\n-                memoryLayouts.add(sequenceLayout);\n+                layoutCollector.add(sequenceLayout);\n@@ -593,3 +621,2 @@\n-            @Override\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                MemoryLayout elementLayout = getLayout(elementAccessStyle, lengthsToBind).withName(elementAccessStyle.type.getSimpleName());;\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                MemoryLayout elementLayout = getLayout(elementAccessStyle, layoutCollector).withName(elementAccessStyle.type.getSimpleName());;\n@@ -597,1 +624,1 @@\n-                memoryLayouts.add(sequenceLayout);\n+                layoutCollector.add(sequenceLayout);\n@@ -615,4 +642,5 @@\n-            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n-                MemoryLayout elementLayout = getLayout(elementAccessStyle, lengthsToBind).withName(elementAccessStyle.type.getSimpleName());\n-                SequenceLayout sequenceLayout = MemoryLayout.sequenceLayout(lengthsToBind.removeFirst(), elementLayout).withName(elementAccessStyle.name);\n-                memoryLayouts.add(sequenceLayout);\n+            void collectLayouts(LayoutCollector layoutCollector) {\n+                MemoryLayout elementLayout = getLayout(elementAccessStyle, layoutCollector).withName(elementAccessStyle.type.getSimpleName());;\n+                SequenceLayout sequenceLayout = MemoryLayout.sequenceLayout(layoutCollector.getIdx(), elementLayout).withName(elementAccessStyle.name);\n+                layoutCollector.add(sequenceLayout);\n+                layoutCollector.add(this);\n@@ -621,2 +649,1 @@\n-     \/\/   abstract void collectLayouts(LayoutCollector layoutCollector);\n-        abstract void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind);\n+      abstract void collectLayouts(LayoutCollector layoutCollector);\n@@ -631,3 +658,3 @@\n-    public static class BoundSchema<T extends Buffer> {\n-        Schema<T> schema;\n-        MemoryLayout memoryLayout;\n+    public static class BoundSchema<T extends Buffer> implements HatData {\n+        public Schema<T> schema;\n+        public GroupLayout layout;\n@@ -635,1 +662,0 @@\n-        public T instance;\n@@ -637,2 +663,3 @@\n-        BoundSchema(T instance, Schema<T> schema, MemoryLayout memoryLayout, int[] boundLengths) {\n-            this.instance = instance;\n+\n+        BoundSchema(Schema<T> schema, GroupLayout layout, int[] boundLengths) {\n+\n@@ -640,1 +667,1 @@\n-            this.memoryLayout = memoryLayout;\n+            this.layout = layout;\n@@ -645,1 +672,1 @@\n-    public BoundSchema<T> allocate(BufferAllocator bufferAllocator, int... boundLengths) {\n+    public T allocate(BufferAllocator bufferAllocator, int... boundLengths) {\n@@ -647,2 +674,4 @@\n-        var segmentMapper = SegmentMapper.of(MethodHandles.lookup(), iface, layout);\n-        return new BoundSchema<T>(bufferAllocator.allocate(segmentMapper), this, layout, boundLengths);\n+\n+        var boundSchema = new BoundSchema<T>( this, layout, boundLengths);\n+        var segmentMapper = SegmentMapper.of(MethodHandles.lookup(),iface, layout, boundSchema);\n+        return bufferAllocator.allocate(segmentMapper);\n","filename":"hat\/hat\/src\/main\/java\/hat\/Schema.java","additions":88,"deletions":59,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import hat.Schema;\n+import hat.ifacemapper.HatData;\n+\n@@ -35,0 +38,1 @@\n+import static hat.ifacemapper.MapperUtil.SECRET_HAT_DATA_METHOD_NAME;\n@@ -70,0 +74,9 @@\n+    static <T extends Buffer>HatData getHatData(T buffer) {\n+        try {\n+            return (HatData) buffer.getClass().getDeclaredMethod(SECRET_HAT_DATA_METHOD_NAME).invoke(buffer);\n+        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Buffer.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -50,0 +49,1 @@\n+    private final HatData hatData;\n@@ -56,0 +56,1 @@\n+\n@@ -57,0 +58,1 @@\n+                                    HatData hatData,\n@@ -63,0 +65,1 @@\n+        this.hatData = hatData;\n@@ -87,1 +90,4 @@\n-\n+    @Override\n+    public final HatData hatData() {\n+        return hatData;\n+    }\n@@ -94,1 +100,3 @@\n-                \"layout=\" + layout + \"]\";\n+                \"layout=\" + layout +\n+                \"hatData=\" + ((hatData==null)?\"null\":hatData) + \", \" +\n+                \"]\";\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/AbstractSegmentMapper.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import static hat.ifacemapper.MapperUtil.SECRET_HAT_DATA_METHOD_NAME;\n@@ -82,0 +83,1 @@\n+    static final String HAT_DATA_FIELD_NAME = \"boundSchema\";\n@@ -86,0 +88,2 @@\n+    private static final ClassDesc HAT_DATA_CLASS_DESC = desc(HatData.class);\n+\n@@ -119,0 +123,2 @@\n+        \/\/ private final GroupLayout layout;\n+        cb.withField(HAT_DATA_FIELD_NAME, HAT_DATA_CLASS_DESC, ACC_PRIVATE | ACC_FINAL);\n@@ -127,2 +133,3 @@\n-        final int OFFSET_VAR_SLOT = 3;\n-        cb.withMethodBody(INIT_NAME, MethodTypeDesc.of(CD_void, MEMORY_SEGMENT_CLASS_DESC, LAYOUT_CLASS_DESC, CD_long), ACC_PUBLIC,\n+        final int HAT_DATA_VAR_SLOT = 3;\n+        final int OFFSET_VAR_SLOT = 4;\n+        cb.withMethodBody(INIT_NAME, MethodTypeDesc.of(CD_void, MEMORY_SEGMENT_CLASS_DESC, LAYOUT_CLASS_DESC, HAT_DATA_CLASS_DESC, CD_long), ACC_PUBLIC,\n@@ -143,0 +150,5 @@\n+                        .aload(THIS_VAR_SLOT)\n+                        .aload(HAT_DATA_VAR_SLOT)\n+                        .checkcast(HAT_DATA_CLASS_DESC)\n+                        .putfield(classDesc, HAT_DATA_FIELD_NAME, HAT_DATA_CLASS_DESC) \/\/ this.boundSchema = boundSchema\n+\n@@ -173,0 +185,9 @@\n+\n+    void obscuredBoundSchema() {\n+        cb.withMethodBody(SECRET_HAT_DATA_METHOD_NAME, MethodTypeDesc.of(HAT_DATA_CLASS_DESC), ACC_PUBLIC, cob ->\n+                cob.aload(0)\n+                        .getfield(classDesc, HAT_DATA_FIELD_NAME, HAT_DATA_CLASS_DESC)\n+                        .areturn()\n+        );\n+    }\n+\n@@ -255,1 +276,3 @@\n-                            .getfield(classDesc, LAYOUT_FIELD_NAME, LAYOUT_CLASS_DESC); \/\/ Layout\n+                            .getfield(classDesc, LAYOUT_FIELD_NAME, LAYOUT_CLASS_DESC) \/\/ Layout\n+                            .aload(0)\n+                            .getfield(classDesc, HAT_DATA_FIELD_NAME, HAT_DATA_CLASS_DESC); \/\/ Layout\n@@ -257,2 +280,4 @@\n-                    offsetBlock(cob, info, classDesc)\n-                            .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDesc.of(CD_Object, MEMORY_SEGMENT_CLASS_DESC, LAYOUT_CLASS_DESC, CD_long))\n+\n+            offsetBlock(cob, info, classDesc)\n+                            .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDesc.of(CD_Object, MEMORY_SEGMENT_CLASS_DESC,\n+                                    LAYOUT_CLASS_DESC,HAT_DATA_CLASS_DESC, CD_long))\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/ByteCodeGenerator.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+package hat.ifacemapper;\n+\n+public interface HatData {\n+}\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/HatData.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -55,1 +55,0 @@\n-\n@@ -57,0 +56,1 @@\n+    public static final String SECRET_HAT_DATA_METHOD_NAME = \"$_$_$hAtDaTa$_$_$\";\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/MapperUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Schema;\n@@ -58,1 +59,1 @@\n- * A record mapper that is matching components of an interface with elements in a GroupLayout.\n+ * A mapper that is matching components of an interface with elements in a GroupLayout.\n@@ -83,0 +84,1 @@\n+                                   HatData hatData,\n@@ -85,1 +87,1 @@\n-        super(lookup, type, layout, leaf,\n+        super(lookup, type, layout, hatData,leaf,\n@@ -145,1 +147,1 @@\n-        return new Mapped<>(lookup(), newType, layout(), getHandle(), toMapper);\n+        return new Mapped<>(lookup(), newType ,layout(),hatData(), getHandle(), toMapper);\n@@ -159,1 +161,2 @@\n-            var ctor = lookup().findConstructor(implClass, MethodType.methodType(void.class, MemorySegment.class, GroupLayout.class, long.class));\n+            var ctor = lookup().findConstructor(implClass, MethodType.methodType(void.class, MemorySegment.class, GroupLayout.class, HatData.class,\n+            long.class));\n@@ -246,0 +249,4 @@\n+                    \/\/ MemorySegment $_$_$bOuNdScHeMa$_$_$() {\n+                    \/\/     return layout;\n+                    \/\/ }\n+                    generator.obscuredBoundSchema();\n@@ -417,2 +424,3 @@\n-                                                       GroupLayout layout) {\n-        return new SegmentInterfaceMapper<>(lookup, type, layout, false, new ArrayList<>());\n+                                                       GroupLayout layout,\n+                                                       HatData hatData) {\n+        return new SegmentInterfaceMapper<>(lookup, type,  layout, hatData, false, new ArrayList<>());\n@@ -438,0 +446,1 @@\n+            @Override HatData hatData,\n@@ -456,0 +465,1 @@\n+               HatData hatData,\n@@ -461,0 +471,1 @@\n+            this.hatData =hatData;\n@@ -475,1 +486,1 @@\n-            return new Mapped<>(lookup, newType, layout(), getHandle(), toMapper);\n+            return new Mapped<>(lookup, newType,  layout(), hatData(), getHandle(), toMapper);\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/SegmentInterfaceMapper.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import hat.buffer.Buffer;\n@@ -295,0 +296,1 @@\n+    HatData hatData();\n@@ -335,1 +337,1 @@\n-        return get(segment, layout());\n+        return get(segment, layout(), hatData());\n@@ -337,0 +339,1 @@\n+    default T allocate(Arena arena, HatData  hatData) {\n@@ -338,0 +341,16 @@\n+        \/\/ To help debug we add a tail marker\n+        \/\/ We add 16 bytes and then pad to the next 16 bytes\n+        \/\/ and request alignment on 16 byte boundary\n+        long byteSize = layout().byteSize();\n+        long extendedByteSize = byteSize+16;\n+        long byteSizePad = extendedByteSize%16;\n+        if (byteSizePad != 0){\n+            byteSizePad = 16-byteSizePad;\n+        }\n+        long extendedByteSizePaddedTo16Bytes = extendedByteSize+byteSizePad;\n+        \/\/System.out.println(\"Alloc 16 byte aligned layout + 16 bytes padded to next 16 bytes \"+byteSize+\"=>\"+extendedByteSizePaddedTo16Bytes);\n+        var segment = arena.allocate(extendedByteSizePaddedTo16Bytes, 16);\n+        segment.set(ValueLayout.JAVA_LONG, extendedByteSizePaddedTo16Bytes-16,0x1face00000facadeL);\n+        segment.set(ValueLayout.JAVA_LONG, extendedByteSizePaddedTo16Bytes-8, 0x1face00000facadeL);\n+        return get(segment, layout(), hatData);\n+    }\n@@ -363,2 +382,2 @@\n-    default T get(MemorySegment segment, GroupLayout groupLayout) {\n-        return get(segment, groupLayout, 0L);\n+    default T get(MemorySegment segment, GroupLayout groupLayout, HatData hatData) {\n+        return get(segment, groupLayout, hatData, 0L);\n@@ -486,1 +505,1 @@\n-    default T get(MemorySegment segment, GroupLayout layout, long offset) {\n+    default T get(MemorySegment segment, GroupLayout layout, HatData hatData, long offset) {\n@@ -489,1 +508,1 @@\n-                    .invokeExact(segment, layout, offset);\n+                    .invokeExact(segment, layout, hatData,offset);\n@@ -736,1 +755,1 @@\n-        return SegmentInterfaceMapper.create(lookup, type, layout);\n+        return SegmentInterfaceMapper.create(lookup, type, layout, null);\n@@ -780,0 +799,7 @@\n+    static <T extends Buffer> SegmentMapper<T> of(MethodHandles.Lookup lookup, Class<T> type, GroupLayout layout, HatData hatData) {\n+        Objects.requireNonNull(lookup);\n+        MapperUtil.requireImplementableInterfaceType(type);\n+        Objects.requireNonNull(layout);\n+        return SegmentInterfaceMapper.create(lookup,  type, layout, hatData);\n+\n+    }\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/SegmentMapper.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-    <mapping directory=\"$PROJECT_DIR$\/..\" vcs=\"Git\" \/>\n","filename":"hat\/intellij\/.idea\/vcs.xml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}