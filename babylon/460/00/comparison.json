{"files":[{"patch":"@@ -890,1 +890,1 @@\n-            TRITON_TYPE_FACTORY.andThen(JavaOp.JAVA_TYPE_FACTORY);\n+            TRITON_TYPE_FACTORY.andThen(JavaType.JAVA_ONLY_TYPE_FACTORY);\n@@ -899,1 +899,1 @@\n-                    .andThen(JavaOp.OP_FACTORY),\n+                    .andThen(JavaOp.JAVA_OP_FACTORY),\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1352,1 +1352,1 @@\n-    public static final OpFactory OP_FACTORY = OpFactory.OP_FACTORY.get(CoreOp.class);\n+    public static final OpFactory CORE_OP_FACTORY = OpFactory.OP_FACTORY.get(CoreOp.class);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.code.extern.TypeElementFactory;\n@@ -35,1 +34,0 @@\n-import jdk.incubator.code.dialect.java.impl.JavaTypeUtils;\n@@ -5294,1 +5292,1 @@\n-     * An operation factory for Java operations.\n+     * An operation factory for core operations composed with Java operations.\n@@ -5296,21 +5294,1 @@\n-    public static OpFactory JAVA_OP_FACTORY = OpFactory.OP_FACTORY.get(JavaOp.class);\n-\n-    \/**\n-     * A type element factory for Java type elements.\n-     *\/\n-    public static final TypeElementFactory JAVA_TYPE_FACTORY = tree -> switch (JavaTypeUtils.Kind.of(tree)) {\n-        case INFLATED_TYPE -> JavaTypeUtils.toJavaType(tree);\n-        case INFLATED_REF -> JavaTypeUtils.toJavaRef(tree);\n-        default -> throw new UnsupportedOperationException(\"Unsupported: \" + tree);\n-    };\n-\n-    \/**\n-     * An operation factory for core and Java operations.\n-     *\/\n-    public static final OpFactory OP_FACTORY = CoreOp.OP_FACTORY.andThen(JAVA_OP_FACTORY);\n-\n-    \/**\n-     * A type element factory for core type and Java type elements, where the core type elements can refer to\n-     * Java type elements.\n-     *\/\n-    public static final TypeElementFactory TYPE_FACTORY = CoreType.coreTypeFactory(JAVA_TYPE_FACTORY);\n+    public static final OpFactory JAVA_OP_FACTORY = CoreOp.CORE_OP_FACTORY.andThen(OpFactory.OP_FACTORY.get(JavaOp.class));\n@@ -5323,3 +5301,3 @@\n-    public static final DialectFactory DIALECT_FACTORY = new DialectFactory(\n-            OP_FACTORY,\n-            TYPE_FACTORY);\n+    public static final DialectFactory JAVA_DIALECT_FACTORY = new DialectFactory(\n+            JAVA_OP_FACTORY,\n+            JAVA_TYPE_FACTORY);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":5,"deletions":27,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.incubator.code.dialect.core.CoreType;\n+import jdk.incubator.code.dialect.java.impl.JavaTypeUtils;\n@@ -36,0 +38,1 @@\n+import jdk.incubator.code.extern.TypeElementFactory;\n@@ -186,0 +189,15 @@\n+    \/**\n+     * A type element factory for Java type elements that is not composed with any other type element factory.\n+     *\/\n+    TypeElementFactory JAVA_ONLY_TYPE_FACTORY = tree -> switch (JavaTypeUtils.Kind.of(tree)) {\n+        case INFLATED_TYPE -> JavaTypeUtils.toJavaType(tree);\n+        case INFLATED_REF -> JavaTypeUtils.toJavaRef(tree);\n+        default -> throw new UnsupportedOperationException(\"Unsupported: \" + tree);\n+    };\n+\n+    \/**\n+     * A type element factory for core type elements composed with Java type elements, where the core type elements can\n+     * refer to Java type elements.\n+     *\/\n+    TypeElementFactory JAVA_TYPE_FACTORY = CoreType.coreTypeFactory(JAVA_ONLY_TYPE_FACTORY);\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaType.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-     * This method uses the Java {@link JavaOp#DIALECT_FACTORY dialect factory}\n+     * This method uses the Java {@link JavaOp#JAVA_DIALECT_FACTORY dialect factory}\n@@ -182,1 +182,1 @@\n-        Op op = fromString(JavaOp.DIALECT_FACTORY, in).get(0);\n+        Op op = fromString(JavaOp.JAVA_DIALECT_FACTORY, in).get(0);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-                                FieldRef.field(JavaOp.class, \"DIALECT_FACTORY\", DialectFactory.class))));\n+                                FieldRef.field(JavaOp.class, \"JAVA_DIALECT_FACTORY\", DialectFactory.class))));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        Op copy = CoreOp.OP_FACTORY.constructOp(odef);\n+        Op copy = CoreOp.CORE_OP_FACTORY.constructOp(odef);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, F).getFirst();\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, F).getFirst();\n@@ -91,1 +91,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, IF_ELSE).getFirst();\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, IF_ELSE).getFirst();\n@@ -129,1 +129,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, LOOP).getFirst();\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, LOOP).getFirst();\n@@ -198,1 +198,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, IF_ELSE_NESTED).getFirst();\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, IF_ELSE_NESTED).getFirst();\n@@ -259,1 +259,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, LOOP_NESTED).getFirst();\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, LOOP_NESTED).getFirst();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLiveness.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-        return Stream.of(models).map(s -> OpParser.fromString(JavaOp.DIALECT_FACTORY, s).getFirst())\n+        return Stream.of(models).map(s -> OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, s).getFirst())\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestNormalizeBlocksTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        Op op = OpParser.fromString(JavaOp.DIALECT_FACTORY, f.toText()).get(0);\n+        Op op = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, f.toText()).get(0);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestVarOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        CoreOp.FuncOp tf = (CoreOp.FuncOp) OpParser.fromString(JavaOp.DIALECT_FACTORY, tfText).getFirst();\n+        CoreOp.FuncOp tf = (CoreOp.FuncOp) OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, tfText).getFirst();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/location\/TestLocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            o = OpParser.fromString(JavaOp.DIALECT_FACTORY, d).get(0);\n+            o = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, d).get(0);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/CodeReflectionTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        List<Op> ops = OpParser.fromString(JavaOp.DIALECT_FACTORY, f.toText());\n+        List<Op> ops = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, f.toText());\n@@ -99,2 +99,2 @@\n-        Op opE = OpParser.fromString(JavaOp.DIALECT_FACTORY, NAMED_BODY).get(0);\n-        Op opA = OpParser.fromString(JavaOp.DIALECT_FACTORY, opE.toText()).get(0);\n+        Op opE = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, NAMED_BODY).get(0);\n+        Op opA = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, opE.toText()).get(0);\n@@ -113,2 +113,2 @@\n-        Op opE = OpParser.fromString(JavaOp.DIALECT_FACTORY, ESCAPED_STRING).get(0);\n-        Op opA = OpParser.fromString(JavaOp.DIALECT_FACTORY, opE.toText()).get(0);\n+        Op opE = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, ESCAPED_STRING).get(0);\n+        Op opA = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, opE.toText()).get(0);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestParse.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-            o = OpParser.fromString(JavaOp.DIALECT_FACTORY, d).get(0);\n+            o = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, d).get(0);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/pe\/CodeReflectionTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-        Assert.assertEquals(javaType, JavaOp.JAVA_TYPE_FACTORY.constructType(javaType.externalize()));\n+        Assert.assertEquals(javaType, JavaType.JAVA_ONLY_TYPE_FACTORY.constructType(javaType.externalize()));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-                fb, JavaOp.DIALECT_FACTORY);\n+                fb, JavaOp.JAVA_DIALECT_FACTORY);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestCodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-            o = OpParser.fromString(JavaOp.DIALECT_FACTORY, d).get(0);\n+            o = OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, d).get(0);\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-        return serialize(OpParser.fromString(JavaOp.DIALECT_FACTORY, d).get(0));\n+        return serialize(OpParser.fromString(JavaOp.JAVA_DIALECT_FACTORY, d).get(0));\n","filename":"test\/langtools\/tools\/javac\/reflect\/TestIRFromAnnotation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}