{"files":[{"patch":"@@ -1563,0 +1563,9 @@\n+        public List<Value> argOperands() {\n+            if (!isVarArgs()){\n+                return operands();\n+            }\n+            int paramCount = invokeDescriptor().type().parameterTypes().size();\n+            int argOperandsCount = paramCount - (invokeKind() == InvokeKind.STATIC ? 1 : 0);\n+            return operands().subList(0, argOperandsCount);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.runtime.CodeReflection;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+\/*\n+ * @test\n+ * @run testng TestInvokeOp\n+ *\/\n+public class TestInvokeOp {\n+\n+    @Test\n+    void test() {\n+        var f = getFuncOp(this.getClass(), \"f\");\n+        var invokeOps = f.elements().filter(ce -> ce instanceof CoreOp.InvokeOp).map(ce -> ((CoreOp.InvokeOp) ce)).toList();\n+\n+        Assert.assertEquals(invokeOps.get(0).argOperands(), invokeOps.get(0).operands());\n+\n+        Assert.assertEquals(invokeOps.get(1).argOperands(), invokeOps.get(1).operands().subList(0, 1));\n+\n+        Assert.assertEquals(invokeOps.get(2).argOperands(), invokeOps.get(2).operands());\n+\n+        Assert.assertEquals(invokeOps.get(3).argOperands(), invokeOps.get(3).operands().subList(0, 1));\n+\n+        for (CoreOp.InvokeOp invokeOp : invokeOps) {\n+            var l = new ArrayList<>(invokeOp.argOperands());\n+            if (invokeOp.isVarArgs()) {\n+                l.addAll(invokeOp.varArgOperands());\n+            }\n+            Assert.assertEquals(l, invokeOp.operands());\n+        }\n+    }\n+\n+    @CodeReflection\n+    void f() {\n+        s(1);\n+        s(4, 2, 3);\n+        i();\n+        i(0.0, 0.0);\n+    }\n+\n+    static void s(int a, long... l) {}\n+    void i(double... d) {}\n+\n+    static CoreOp.FuncOp getFuncOp(Class<?> c, String name) {\n+        Optional<Method> om = Stream.of(c.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInvokeOp.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}