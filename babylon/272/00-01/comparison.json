{"files":[{"patch":"@@ -344,22 +344,1 @@\n-        if (op instanceof InvokeOp invokeOp && invokeOp.isVarArgs()) {\n-            processOperands(invokeOp.operands().subList(0, invokeOp.operands().size() - invokeOp.varArgOperands().size()));\n-\n-            var varArgOperands = invokeOp.varArgOperands();\n-            cob.loadConstant(varArgOperands.size());\n-            var compType = ((ArrayType) invokeOp.invokeDescriptor().type().parameterTypes().getLast()).componentType();\n-            var typeKind = TypeKind.fromDescriptor(compType.toNominalDescriptor().descriptorString());\n-            if (TypeKind.REFERENCE.equals(typeKind)) {\n-                var cd = ClassDesc.ofDescriptor(compType.toNominalDescriptor().descriptorString());\n-                cob.anewarray(cd);\n-            } else {\n-                cob.newarray(typeKind);\n-            }\n-            for (int i = 0; i < varArgOperands.size(); i++) {\n-                cob.dup();\n-                cob.loadConstant(i);\n-                load(varArgOperands.get(i));\n-                cob.arrayStore(typeKind);\n-            }\n-        } else {\n-            processOperands(op.operands());\n-        }\n+        processOperands(op.operands());\n@@ -884,2 +863,21 @@\n-                        \/\/ @@@ var args\n-                        processOperands(op);\n+                        if (op.isVarArgs()) {\n+                            processOperands(op.operands().subList(0, op.operands().size() - op.varArgOperands().size()));\n+                            var varArgOperands = op.varArgOperands();\n+                            cob.loadConstant(varArgOperands.size());\n+                            var compType = ((ArrayType) op.invokeDescriptor().type().parameterTypes().getLast()).componentType();\n+                            var typeKind = TypeKind.fromDescriptor(compType.toNominalDescriptor().descriptorString());\n+                            if (TypeKind.REFERENCE.equals(typeKind)) {\n+                                var cd = ClassDesc.ofDescriptor(compType.toNominalDescriptor().descriptorString());\n+                                cob.anewarray(cd);\n+                            } else {\n+                                cob.newarray(typeKind);\n+                            }\n+                            for (int j = 0; j < varArgOperands.size(); j++) {\n+                                cob.dup();\n+                                cob.loadConstant(j);\n+                                load(varArgOperands.get(j));\n+                                cob.arrayStore(typeKind);\n+                            }\n+                        } else {\n+                            processOperands(op);\n+                        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -56,0 +56,6 @@\n+        r += k();\n+\n+        r += w(11L, 12L);\n+\n+        r += w(21.0, 22.0);\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestVarArg.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}