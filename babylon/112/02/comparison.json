{"files":[{"patch":"@@ -30,9 +30,1 @@\n-import java.lang.reflect.code.type.ArrayType;\n-import java.lang.reflect.code.type.ClassType;\n-import java.lang.reflect.code.type.MethodRef;\n-import java.lang.reflect.code.type.RecordTypeRef;\n-import java.lang.reflect.code.type.FunctionType;\n-import java.lang.reflect.code.type.JavaType;\n-import java.lang.reflect.code.type.TupleType;\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.type.VarType;\n+import java.lang.reflect.code.type.*;\n@@ -829,1 +821,1 @@\n-            if (!haveNullCase()) {\n+            if (!(selectorExpression.type() instanceof PrimitiveType) && !haveNullCase()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.OpTransformer;\n@@ -96,0 +96,18 @@\n+    @CodeReflection\n+    private static String f5(int i) {\n+        return switch (i) {\n+            case 1 -> \"1\";\n+            case 2 -> \"2\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    @Test\n+    public void test5() {\n+        CoreOp.FuncOp lf = lower(\"f5\");\n+\n+        Assert.assertEquals(Interpreter.invoke(lf, 1), f5(1));\n+        Assert.assertEquals(Interpreter.invoke(lf, 2), f5(2));\n+        Assert.assertEquals(Interpreter.invoke(lf, 99), f5(99));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}