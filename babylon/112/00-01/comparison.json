{"files":[{"patch":"@@ -817,4 +817,0 @@\n-        private boolean isSelectorOfTypePrimitive() {\n-            return List.of(CHAR, BYTE, SHORT, INT).contains(operands().get(0).type());\n-        }\n-\n@@ -826,1 +822,1 @@\n-            if (!isSelectorOfTypePrimitive() && !haveNullCase()) {\n+            if (!(selectorExpression.type() instanceof PrimitiveType) && !haveNullCase()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,0 +96,18 @@\n+    @CodeReflection\n+    private static String f5(int i) {\n+        return switch (i) {\n+            case 1 -> \"1\";\n+            case 2 -> \"2\";\n+            default -> \"default\";\n+        };\n+    }\n+\n+    @Test\n+    public void test5() {\n+        CoreOp.FuncOp lf = lower(\"f5\");\n+\n+        Assert.assertEquals(Interpreter.invoke(lf, 1), f5(1));\n+        Assert.assertEquals(Interpreter.invoke(lf, 2), f5(2));\n+        Assert.assertEquals(Interpreter.invoke(lf, 99), f5(99));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}