{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.tools.javac.code.Source;\n@@ -37,2 +36,0 @@\n-import com.sun.tools.javac.comp.Modules;\n-import com.sun.tools.javac.main.JavaCompiler;\n@@ -44,1 +41,0 @@\n-import com.sun.tools.javac.util.Names;\n@@ -47,2 +43,0 @@\n-import jdk.incubator.code.op.ExtendedOp;\n-import jdk.incubator.code.parser.OpParser;\n@@ -57,1 +51,0 @@\n-import java.lang.reflect.Field;\n@@ -498,1 +491,0 @@\n-        Class<?> dc = method.getDeclaringClass();\n@@ -505,2 +497,2 @@\n-        String fieldName = new String(sig) + \"$\" + \"op\";\n-        Field f;\n+        String opMethodName = \"method$op$\" + new String(sig);\n+        Method opMethod;\n@@ -508,2 +500,3 @@\n-            f = dc.getDeclaredField(fieldName);\n-        } catch (NoSuchFieldException e) {\n+            \/\/ @@@ Use method handle with full power mode\n+            opMethod = method.getDeclaringClass().getDeclaredMethod(opMethodName);\n+        } catch (NoSuchMethodException e) {\n@@ -512,2 +505,1 @@\n-\n-        String modelText;\n+        opMethod.setAccessible(true);\n@@ -515,4 +507,3 @@\n-            \/\/ @@@ Use method handle with full power mode\n-            f.setAccessible(true);\n-            modelText = (String) f.get(null);\n-        } catch (IllegalAccessException e) {\n+            FuncOp funcOp = (FuncOp) opMethod.invoke(null);\n+            return Optional.of(funcOp);\n+        } catch (ReflectiveOperationException e) {\n@@ -521,10 +512,0 @@\n-\n-        FuncOp op;\n-        try {\n-            List<jdk.incubator.code.Op> ops = OpParser.fromString(ExtendedOp.FACTORY, modelText);\n-            op = (FuncOp) ops.get(0);\n-        } catch (RuntimeException e) {\n-            \/\/ @@@ Error or Exception?\n-            throw e;\n-        }\n-        return Optional.of(op);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":9,"deletions":28,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+    public final Type opType;\n+    public final Type funcOpType;\n@@ -58,1 +60,1 @@\n-        Type opType = syms.enterClass(jdk_incubator_code, \"jdk.incubator.code.Op\");\n+        opType = syms.enterClass(jdk_incubator_code, \"jdk.incubator.code.Op\");\n@@ -77,0 +79,1 @@\n+        funcOpType = syms.enterClass(jdk_incubator_code, \"jdk.incubator.code.op.CoreOp$FuncOp\");\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/CodeReflectionSymbols.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+import static com.sun.tools.javac.code.Flags.PUBLIC;\n+import static com.sun.tools.javac.code.Flags.STATIC;\n@@ -206,3 +208,2 @@\n-                \/\/ create a static final field holding the op' string text.\n-                \/\/ The name of the field is foo$op, where 'foo' is the name of the corresponding method.\n-                classOps.add(opFieldDecl(methodName(bodyScanner.symbolToErasedMethodRef(tree.sym)), tree.getModifiers().flags, funcOp));\n+                \/\/ create a static method that returns the op\n+                classOps.add(opMethodDecl(methodName(bodyScanner.symbolToErasedMethodRef(tree.sym)), funcOp));\n@@ -404,0 +405,15 @@\n+    private JCMethodDecl opMethodDecl(Name methodName, CoreOp.FuncOp op) {\n+        var mt = new MethodType(com.sun.tools.javac.util.List.nil(), crSyms.funcOpType,\n+                com.sun.tools.javac.util.List.nil(), syms.methodClass);\n+        var mn = names.fromString(\"method$op$\").append(methodName);\n+        var ms = new MethodSymbol(PUBLIC | STATIC | SYNTHETIC, mn, mt, currentClassSym);\n+        currentClassSym.members().enter(ms);\n+\n+        var opFromStr = make.App(make.Ident(crSyms.opParserFromString),\n+                com.sun.tools.javac.util.List.of(make.Literal(op.toText())));\n+        var ret = make.Return(make.TypeCast(crSyms.funcOpType, opFromStr));\n+\n+        var md = make.MethodDef(ms, make.Block(0, com.sun.tools.javac.util.List.of(ret)));\n+        return md;\n+    }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -165,0 +165,1 @@\n+    \/\/@@@ visit return type\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/parser\/OpParser.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}