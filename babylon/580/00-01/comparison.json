{"files":[{"patch":"@@ -41,0 +41,1 @@\n+  echo \"  --build-babylon         Build Babylon and HAT for all remote servers\"\n@@ -60,0 +61,2 @@\n+# Specify the Babylon fork to test\n+FORK=https:\/\/github.com\/openjdk\/babylon\n@@ -70,19 +73,2 @@\n-while [[ $# -gt 0 ]]; do\n-  key=\"$1\"\n-  case $key in\n-    --help)\n-      display_help\n-      ;;\n-    --generate-config-file)\n-      generate_config_file\n-      ;;\n-    *)\n-      # Unknown option\n-      echo \"Error: Unknown option '$key'\"\n-      echo \"Use --help for a list of available options.\"\n-      exit 1\n-      ;;\n-  esac\n-done\n-\n-CONFIG_FILE=\"remoteTesting.conf\"\n+read_config_file() {\n+  CONFIG_FILE=\"remoteTesting.conf\"\n@@ -90,2 +76,2 @@\n-# Check if the config file exists\n-if [ ! -f \"$CONFIG_FILE\" ]; then\n+  # Check if the config file exists\n+  if [ ! -f \"$CONFIG_FILE\" ]; then\n@@ -95,1 +81,1 @@\n-fi\n+  fi\n@@ -97,5 +83,41 @@\n-## Process the config file\n-while IFS='=' read -r key value\n-do\n-  if [[ -z \"$key\" || \"$key\" =~ ^# ]]; then\n-    continue\n+  ## Process the config file\n+  while IFS='=' read -r key value\n+  do\n+    if [[ -z \"$key\" || \"$key\" =~ ^# ]]; then\n+      continue\n+    fi\n+\n+    case \"$key\" in\n+      \"SERVERS\") SERVERS=\"$value\" ;;\n+      \"REMOTE_USERS\") REMOTE_USERS=\"$value\" ;;\n+      \"BACKENDS\") BACKENDS=$value ;;\n+      \"REMOTE_PATH\") REMOTE_PATH=\"$value\" ;;\n+      \"BRANCH\") BRANCH=\"$value\" ;;\n+      \"FORK\") FORK=\"$value\" ;;\n+    esac\n+  done < \"$CONFIG_FILE\"\n+\n+  isSet=1\n+  if [[ -z $SERVERS ]]; then\n+    echo \"❌ SERVERS is not set.\"\n+    isSet=0\n+  fi\n+  if [[ -z $REMOTE_USERS ]]; then\n+    echo \"❌ REMOTE_USERS is not set.\"\n+    isSet=0\n+  fi\n+  if [[ -z $BACKENDS ]]; then\n+    echo \"❌ BACKENDS is not set.\"\n+    isSet=0\n+  fi\n+  if [[ -z $REMOTE_PATH ]]; then\n+    echo \"❌ REMOTE_PATH is not set.\"\n+    isSet=0\n+  fi\n+  if [[ -z $BRANCH ]]; then\n+    echo \"❌ BRANCH is not set.\"\n+    isSet=0\n+  fi\n+  if [[ -z $FORK ]]; then\n+    echo \"❌ FORK is not set.\"\n+    isSet=0\n@@ -104,8 +126,3 @@\n-  case \"$key\" in\n-    \"SERVERS\") SERVERS=\"$value\" ;;\n-    \"REMOTE_USERS\") REMOTE_USERS=\"$value\" ;;\n-    \"BACKENDS\") BACKENDS=$value ;;\n-    \"REMOTE_PATH\") REMOTE_PATH=\"$value\" ;;\n-    \"BRANCH\") BRANCH=\"$value\" ;;\n-  esac\n-done < \"$CONFIG_FILE\"\n+  if [[ \"$isSet\" -eq 0 ]]; then\n+\t  exit\n+  fi\n@@ -113,21 +130,18 @@\n-isSet=1\n-if [[ -z $SERVERS ]]; then\n-  echo \"❌ SERVERS is not set.\"\n-  isSet=0\n-fi\n-if [[ -z $REMOTE_USERS ]]; then\n-  echo \"❌ REMOTE_USERS is not set.\"\n-  isSet=0\n-fi\n-if [[ -z $BACKENDS ]]; then\n-  echo \"❌ BACKENDS is not set.\"\n-  isSet=0\n-fi\n-if [[ -z $REMOTE_PATH ]]; then\n-  echo \"❌ REMOTE_PATH is not set.\"\n-  isSet=0\n-fi\n-if [[ -z $BRANCH ]]; then\n-  echo \"❌ BRANCH is not set.\"\n-  isSet=0\n-fi\n+  echo\n+  echo \"Servers    : $SERVERS\"\n+  echo \"Users      : $REMOTE_USERS\"\n+  echo \"Backends   : $BACKENDS\"\n+  echo \"Remote Path: $REMOTE_PATH\"\n+  echo \"Fork       : $FORK\"\n+  echo \"Branch     : $BRANCH\"\n+  echo\n+\n+  read -ra listOfServers <<< $SERVERS\n+  read -ra listOfUsers <<< $REMOTE_USERS\n+\n+  for backend in $BACKENDS\n+  do\n+    echo $backend > \/dev\/null\n+  done\n+\n+}\n@@ -135,2 +149,18 @@\n-if [[ \"$isSet\" -eq 0 ]]; then\n-\texit\n+build_babylon() {\n+\n+  echo \"Build Babylon and HAT\"\n+  \n+  read_config_file\n+\n+  for index in \"${!listOfServers[@]}\"\n+  do\n+    server=${listOfServers[$index]}\n+    user=${listOfUsers[$index]}\n+\n+    echo \"ssh $user@$server\"\n+    ssh -T $user@$server << EOF\n+if [ ! -d $REMOTE_PATH ]; \n+then \n+  mkdir -p \\$(dirname $REMOTE_PATH)\n+  cd \\$(dirname $REMOTE_PATH)\n+  git clone $FORK babylon\n@@ -139,7 +169,4 @@\n-echo\n-echo \"Servers    : $SERVERS\"\n-echo \"Users      : $REMOTE_USERS\"\n-echo \"Backends   : $BACKENDS\"\n-echo \"Remote Path: $REMOTE_PATH\"\n-echo \"Branch     : $BRANCH\"\n-echo\n+#Assuming the remote path ends with babylon\n+cd \"$REMOTE_PATH\"\n+git checkout $BRANCH\n+git pull\n@@ -147,2 +174,4 @@\n-read -ra listOfServers <<< $SERVERS\n-read -ra listOfUsers <<< $REMOTE_USERS\n+echo \"bash configure --with-boot-jdk=\\$HOME\/.sdkman\/candidates\/java\/current\"\n+bash configure --with-boot-jdk=\"\\$HOME\/.sdkman\/candidates\/java\/current\" > jvmconfig.log\n+make clean\n+make images > jvmbuild.log\n@@ -150,3 +179,21 @@\n-for backend in $BACKENDS\n-do\n-echo $backend > \/dev\/null\n+## Build HAT\n+cd hat \n+if [ ! -d jextract-22 ];\n+then\n+  echo \"ARCHITECTIRE \\$(uname -m)\"\n+  if [[ \"\\$(uname -m)\" == \"x86_64\" ]]; then\n+      wget https:\/\/download.java.net\/java\/early_access\/jextract\/22\/6\/openjdk-22-jextract+6-47_linux-x64_bin.tar.gz\n+      tar xvzf openjdk-22-jextract+6-47_linux-x64_bin.tar.gz\n+  elif [[ \"\\$(uname -m)\" == \"arm64\" ]]; then\n+      wget https:\/\/download.java.net\/java\/early_access\/jextract\/22\/6\/openjdk-22-jextract+6-47_macos-aarch64_bin.tar.gz\n+      tar xvzf openjdk-22-jextract+6-47_macos-aarch64_bin.tar.gz\n+  fi\n+  echo \"export PATH=\\$(pwd)\/jextract-22\/bin:\\$PATH\" >> setup.sh\n+  echo \"source env.bash\" >> setup.sh\n+fi\n+\n+source setup.sh\n+java @hat\/clean \n+java @hat\/bld > hatCompilation.log\n+echo \"✅ Babylon\/HAT Built\"\n+EOF\n@@ -155,0 +202,5 @@\n+}\n+\n+run_tests_hat() {\n+\n+read_config_file\n@@ -165,0 +217,1 @@\n+cd hat\/\n@@ -187,0 +240,29 @@\n+\n+}\n+\n+while [[ $# -gt 0 ]]; do\n+  key=\"$1\"\n+  case $key in\n+    --help)\n+      display_help\n+      exit\n+      ;;\n+    --generate-config-file)\n+      generate_config_file\n+      exit \n+      ;;\n+    --build-babylon)\n+      build_babylon\n+      exit 0\n+      ;;\n+    *)\n+      # Unknown option\n+      echo \"Error: Unknown option '$key'\"\n+      echo \"Use --help for a list of available options.\"\n+      exit 1\n+      ;;\n+  esac\n+done\n+\n+run_tests_hat\n+\n","filename":"hat\/scripts\/remoteTesting.sh","additions":152,"deletions":70,"binary":false,"changes":222,"status":"modified"}]}