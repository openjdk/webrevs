{"files":[{"patch":"@@ -27,0 +27,1 @@\n+remoteTesting.conf\n","filename":"hat\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,186 @@\n+#!\/bin\/env\/bash\n+\n+# Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+\n+##############################################\n+# How to use it?\n+# 1. Run this script with --generate-config-file  \n+# 2. Fill the template file: remoteTesting.conf\n+# 3. Run again this script without any parameters\n+# ############################################\n+\n+display_help() {\n+  echo \"Usage: $(basename \"$0\") [options]\"\n+  echo\n+  echo \"When running without any options, it reads the \\\"remoteTesting.conf\\\" and runs the testing framework on the remote machines.\"\n+  echo\n+  echo \"Options:\"\n+  echo \"  --help                  Display this help message and exit.\"\n+  echo \"  --generate-config-file  Generate a default configuration file and exit.\"\n+  echo\n+  echo \"How to use it?\"\n+  echo \"   1. Run this script with --generate-config-file \"\n+  echo \"   2. Fill the template file: remoteTesting.conf\"\n+  echo \"   3. Run again this script without any parameters \"\n+  exit 0\n+}\n+\n+generate_config_file() {\n+    cat << EOF > remoteTesting.conf \n+# HAT Remote Testing Settings\n+SERVERS=server1 server2 ...\n+REMOTE_USERS=user1 user2 ...\n+\n+## List of Backends to test\n+# To test one backend\n+#BACKENDS=ffi-opencl\n+# We can also test multiple backends\n+BACKENDS=ffi-cuda ffi-opencl\n+\n+## Remote path. It assumes all servers use the same path\n+REMOTE_PATH=repos\/babylon\/hat\n+## Branch to test\n+BRANCH=code-reflection\n+EOF\n+  echo \"✅ Default configuration file 'remoteTesting.conf' has been generated.\"\n+  exit 0\n+}\n+\n+while [[ $# -gt 0 ]]; do\n+  key=\"$1\"\n+  case $key in\n+    --help)\n+      display_help\n+      ;;\n+    --generate-config-file)\n+      generate_config_file\n+      ;;\n+    *)\n+      # Unknown option\n+      echo \"Error: Unknown option '$key'\"\n+      echo \"Use --help for a list of available options.\"\n+      exit 1\n+      ;;\n+  esac\n+done\n+\n+CONFIG_FILE=\"remoteTesting.conf\"\n+\n+# Check if the config file exists\n+if [ ! -f \"$CONFIG_FILE\" ]; then\n+    echo \"Error: $CONFIG_FILE not found.\"\n+    echo \"Run this script with --generate-config-file to generate a template.\"\n+    exit 1\n+fi\n+\n+## Process the config file\n+while IFS='=' read -r key value\n+do\n+  if [[ -z \"$key\" || \"$key\" =~ ^# ]]; then\n+    continue\n+  fi\n+\n+  case \"$key\" in\n+    \"SERVERS\") SERVERS=\"$value\" ;;\n+    \"REMOTE_USERS\") REMOTE_USERS=\"$value\" ;;\n+    \"BACKENDS\") BACKENDS=$value ;;\n+    \"REMOTE_PATH\") REMOTE_PATH=\"$value\" ;;\n+    \"BRANCH\") BRANCH=\"$value\" ;;\n+  esac\n+done < \"$CONFIG_FILE\"\n+\n+isSet=1\n+if [[ -z $SERVERS ]]; then\n+  echo \"❌ SERVERS is not set.\"\n+  isSet=0\n+fi\n+if [[ -z $REMOTE_USERS ]]; then\n+  echo \"❌ REMOTE_USERS is not set.\"\n+  isSet=0\n+fi\n+if [[ -z $BACKENDS ]]; then\n+  echo \"❌ BACKENDS is not set.\"\n+  isSet=0\n+fi\n+if [[ -z $REMOTE_PATH ]]; then\n+  echo \"❌ REMOTE_PATH is not set.\"\n+  isSet=0\n+fi\n+if [[ -z $BRANCH ]]; then\n+  echo \"❌ BRANCH is not set.\"\n+  isSet=0\n+fi\n+\n+if [[ \"$isSet\" -eq 0 ]]; then\n+\texit\n+fi\n+\n+echo\n+echo \"Servers    : $SERVERS\"\n+echo \"Users      : $REMOTE_USERS\"\n+echo \"Backends   : $BACKENDS\"\n+echo \"Remote Path: $REMOTE_PATH\"\n+echo \"Branch     : $BRANCH\"\n+echo\n+\n+read -ra listOfServers <<< $SERVERS\n+read -ra listOfUsers <<< $REMOTE_USERS\n+\n+for backend in $BACKENDS\n+do\n+echo $backend > \/dev\/null\n+done\n+\n+\n+for index in \"${!listOfServers[@]}\"\n+do\n+\n+server=${listOfServers[$index]}\n+user=${listOfUsers[$index]}\n+\n+echo \"ssh $user@$server\"\n+ssh $user@$server << EOF\n+cd \"$REMOTE_PATH\"\n+git checkout $BRANCH\n+git pull\n+\n+# compile\n+source setup.sh\n+java @hat\/clean \n+java @hat\/bld > compilation.log\n+\n+# run the test suite per backend\n+for backend in $BACKENDS\n+do\n+echo \"[running] java @hat\/test suite $backend  > $backend.txt\"\n+java @hat\/test suite $backend  > $backend.txt\n+done\n+\n+# Print logs\n+for backend in $BACKENDS\n+do\n+cat $backend.txt\n+done\n+EOF\n+done\n","filename":"hat\/scripts\/remoteTesting.sh","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"}]}