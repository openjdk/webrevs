{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.io.BufferedReader;\n@@ -36,2 +35,0 @@\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n@@ -48,0 +45,1 @@\n+import java.util.Locale;\n@@ -55,1 +53,0 @@\n-import java.util.jar.JarFile;\n@@ -551,1 +548,0 @@\n-             \/\/   println(\"looking for \"+entryName);\n@@ -553,1 +549,0 @@\n-\n@@ -555,1 +550,0 @@\n-              \/\/  println(\"entry = \"+entry);\n@@ -561,0 +555,10 @@\n+        public List<JarEntry> select(Regex regex) {\n+            java.util.jar.JarFile jarFile = null;\n+            try {\n+                jarFile = new java.util.jar.JarFile(path.toFile());\n+                return jarFile.stream().filter(je->regex.matches(je.getName())).toList();\n+\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n@@ -786,1 +790,1 @@\n-    public abstract static sealed class Result<T extends Builder<T>> permits  JarResult, JavaResult, JavacResult {\n+    public abstract static sealed class Result<T extends Builder<T>> implements DiagnosticListener <JavaFileObject>  permits  JarResult, JavaResult, JavacResult {\n@@ -789,1 +793,1 @@\n-\n+        public List<Diagnostic<? extends JavaFileObject>> diagnostics = new ArrayList<>();\n@@ -793,0 +797,88 @@\n+        @Override public void report(Diagnostic<? extends JavaFileObject> diagnostic){\n+            if (diagnostic.getKind().equals(Diagnostic.Kind.ERROR)) {\n+                ok = false;\n+            }\n+           diagnostics.add(diagnostic);\n+        }\n+        @Override\n+        public String toString() {\n+            StringBuilder builder = new StringBuilder();\n+            diagnostics.forEach(diagnostic -> {\n+                        builder\n+                                .append(\"\\n\")\n+                                .append(switch (diagnostic.getKind()){\n+                                    case ERROR -> \"\\u001B[31mERR :\";  \/\/RED\n+                                    case WARNING -> \"\\u001B[33mWARN:\"; \/\/YELLOW\n+                                    case NOTE -> \"\\u001B[32mNOTE:\"; \/\/ GREEN\n+                                    default -> \"diagnostic.getKind()\";\n+                                })\n+                                .append(\" \");\n+                        if (diagnostic.getSource() instanceof JavaSourceFile sourceFile) {\n+                            builder.\n+                                    append(sourceFile.path())\n+                                    .append(\" \");\n+                        }\n+                        builder\n+                                .append(diagnostic.getLineNumber())\n+                                .append(\":\")\n+                                .append(diagnostic.getColumnNumber())\n+                                .append(\"\\n\")\n+                                .append(diagnostic.getMessage(null))\n+                                .append(\"\\u001B[0m\");\n+\n+                    }\n+            );\n+            return builder.toString();\n+        }\n+\n+        public void note(JavaSourceFile javaSourceFile, String message) {\n+            diagnostics.add(new Diagnostic<JavaFileObject>() {\n+                                       @Override\n+                                       public Kind getKind() {\n+                                           return Kind.NOTE;\n+                                       }\n+\n+                                       @Override\n+                                       public JavaFileObject getSource() {\n+                                           return javaSourceFile;\n+                                       }\n+\n+                                       @Override\n+                                       public long getPosition() {\n+                                           return 0;\n+                                       }\n+\n+                                       @Override\n+                                       public long getStartPosition() {\n+                                           return 0;\n+                                       }\n+\n+                                       @Override\n+                                       public long getEndPosition() {\n+                                           return 0;\n+                                       }\n+\n+                                       @Override\n+                                       public long getLineNumber() {\n+                                           return 0;\n+                                       }\n+\n+                                       @Override\n+                                       public long getColumnNumber() {\n+                                           return 0;\n+                                       }\n+\n+                                       @Override\n+                                       public String getCode() {\n+                                           return \"\";\n+                                       }\n+\n+                                       @Override\n+                                       public String getMessage(Locale locale) {\n+                                           return message;\n+                                       }\n+                                   }\n+            );\n+            \/\/    println(\"Excluded \" + javaSourceFile);\n+        }\n+\n@@ -795,1 +887,1 @@\n-    public static class Strings {\n+    public static class StringList {\n@@ -798,1 +890,1 @@\n-        Strings() {\n+        StringList() {\n@@ -801,2 +893,2 @@\n-        Strings(Strings strings) {\n-            add(strings);\n+        StringList(StringList stringList) {\n+            add(stringList);\n@@ -805,1 +897,1 @@\n-        Strings(List<String> strings) {\n+        StringList(List<String> strings) {\n@@ -809,1 +901,1 @@\n-        Strings(String... strings) {\n+        StringList(String... strings) {\n@@ -813,1 +905,1 @@\n-        public Strings add(List<String> strings) {\n+        public StringList add(List<String> strings) {\n@@ -818,1 +910,1 @@\n-        public Strings add(String... strings) {\n+        public StringList add(String... strings) {\n@@ -823,2 +915,2 @@\n-        public Strings add(Strings strings) {\n-            add(strings.strings);\n+        public StringList add(StringList stringList) {\n+            add(stringList.strings);\n@@ -839,1 +931,1 @@\n-        public Strings modules;\n+        public StringList modules;\n@@ -856,1 +948,1 @@\n-                this.modules = new Strings(other.modules);\n+                this.modules = new StringList(other.modules);\n@@ -892,1 +984,1 @@\n-                this.modules = new Strings();\n+                this.modules = new StringList();\n@@ -1060,1 +1152,2 @@\n-        Strings opts = new Strings();\n+        StringList opts = new StringList();\n+\n@@ -1068,0 +1161,1 @@\n+\n@@ -1129,1 +1223,1 @@\n-            boolean[] failed = {false};\n+           result.ok = true;\n@@ -1131,18 +1225,0 @@\n-            DiagnosticListener<JavaFileObject> diagnosticListener =\n-                    (diagnostic) -> {\n-                        if (diagnostic.getKind().equals(Diagnostic.Kind.ERROR)) {\n-                            failed[0] = true;\n-                        }\n-                        if (!diagnostic.getKind().equals(Diagnostic.Kind.NOTE)) {\n-                            System.out.println(\"javac \"\n-                                    + diagnostic.getKind()\n-                                    + \" \"\n-                                    + ((JavaSourceFile) (diagnostic.getSource())).path().toString()\n-                                    + \"  \"\n-                                    + diagnostic.getLineNumber()\n-                                    + \":\"\n-                                    + diagnostic.getColumnNumber()\n-                                    + \" \"\n-                                    + diagnostic.getMessage(null));\n-                        }\n-                    };\n@@ -1157,1 +1233,1 @@\n-                                    println(\"Excluded \" + javaSourceFile);\n+                                    result.note(javaSourceFile, \"Excluded\");\n@@ -1165,0 +1241,1 @@\n+\n@@ -1172,2 +1249,2 @@\n-                            javac.getStandardFileManager(diagnosticListener, null, null),\n-                            diagnosticListener,\n+                            javac.getStandardFileManager(result, null, null),\n+                            result,\n@@ -1183,2 +1260,2 @@\n-            if (failed[0]) {\n-                throw new RuntimeException(\"javac failed\");\n+            if (!result.ok) {\n+                throw new RuntimeException(\"javac failed to compile \"+result);\n@@ -1206,3 +1283,3 @@\n-        public Strings vmargs = new Strings();\n-        public Strings args = new Strings();\n-        public Strings nativeAccessModules = new Strings();\n+        public StringList vmargs = new StringList();\n+        public StringList args = new StringList();\n+        public StringList nativeAccessModules = new StringList();\n@@ -1271,1 +1348,1 @@\n-        Strings opts = new Strings();\n+        StringList opts = new StringList();\n@@ -1280,0 +1357,1 @@\n+        result.ok = true;\n@@ -1333,0 +1411,1 @@\n+                result.ok = false;\n@@ -1495,1 +1574,1 @@\n-        public Strings opts = new Strings();\n+        public StringList opts = new StringList();\n@@ -1498,2 +1577,0 @@\n-        public JarFile jarFile;\n-\n@@ -1503,1 +1580,0 @@\n-            this.jarFile = jarBuilder.jar;\n@@ -1508,1 +1584,1 @@\n-            return List.of(jarFile);\n+            return List.of(builder.jar);\n@@ -1513,1 +1589,1 @@\n-            return jarFile.path.toString();\n+            return builder.jar.path.toString();\n@@ -1520,0 +1596,1 @@\n+        result.ok = true;\n@@ -1524,1 +1601,1 @@\n-                throw new RuntimeException(\"Nothing to jar \");\n+               result.ok=false;\n@@ -1526,4 +1603,9 @@\n-            if (jarBuilder.manifest != null) {\n-                \/\/ We must add manifest\n-                var entry = new JarEntry(\"META-INF\/MANIFEST.MF\");\n-                \/\/ entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n+            if (result.ok) {\n+                if (jarBuilder.manifest != null) {\n+                    \/\/ We must add manifest\n+                    var entry = new JarEntry(\"META-INF\/MANIFEST.MF\");\n+                    \/\/ entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n+                    result.note(null, \"Added manifest entry\");\n+                    jarStream.putNextEntry(entry);\n+                    jarBuilder.manifest.writeTo(jarStream);\n+                    jarStream.closeEntry();\n@@ -1531,3 +1613,1 @@\n-                jarStream.putNextEntry(entry);\n-                jarBuilder.manifest.writeTo(jarStream);\n-                jarStream.closeEntry();\n+                }\n@@ -1535,19 +1615,21 @@\n-            }\n-            jarBuilder.dirList.entries.forEach(\n-                    root ->\n-                            root.findFiles()\n-                                    .map(path -> new RootDirAndSubPath(root, path))\n-                                    .forEach(result.pathsToJar::add));\n-            result.pathsToJar.stream()\n-                    .sorted(Comparator.comparing(RootDirAndSubPath::path))\n-                    .forEach(\n-                            rootAndPath -> {\n-                                try {\n-                                    result.paths.add(rootAndPath.path);\n-                                    var entry = new JarEntry(rootAndPath.relativize().toString());\n-                                    entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n-                                    jarStream.putNextEntry(entry);\n-                                    Files.newInputStream(rootAndPath.path()).transferTo(jarStream);\n-                                    jarStream.closeEntry();\n-                                    if (jarBuilder.verbose) {\n-                                        println(\"INFO: adding \" + rootAndPath.relativize().toString());\n+                jarBuilder.dirList.entries.forEach(\n+                        root ->\n+                                root.findFiles()\n+                                        .map(path -> new RootDirAndSubPath(root, path))\n+                                        .forEach(result.pathsToJar::add));\n+                result.pathsToJar.stream()\n+                        .sorted(Comparator.comparing(RootDirAndSubPath::path))\n+                        .forEach(\n+                                rootAndPath -> {\n+                                    try {\n+                                        result.paths.add(rootAndPath.path);\n+                                        var entry = new JarEntry(rootAndPath.relativize().toString());\n+                                        entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n+                                        jarStream.putNextEntry(entry);\n+                                        Files.newInputStream(rootAndPath.path()).transferTo(jarStream);\n+                                        jarStream.closeEntry();\n+                                        if (jarBuilder.verbose) {\n+                                            println(\"INFO: adding \" + rootAndPath.relativize().toString());\n+                                        }\n+                                    } catch (IOException e) {\n+                                        throw new RuntimeException(e);\n@@ -1555,8 +1637,6 @@\n-                                } catch (IOException e) {\n-                                    throw new RuntimeException(e);\n-                                }\n-                            });\n-            jarStream.finish();\n-            jarStream.close();\n-            if (jarBuilder.verbose) {\n-                println(\"INFO: created \" + jarBuilder.jar.path.toString());\n+                                });\n+                jarStream.finish();\n+                jarStream.close();\n+                if (jarBuilder.verbose) {\n+                    println(\"INFO: created \" + jarBuilder.jar.path.toString());\n+                }\n@@ -1807,0 +1887,4 @@\n+\n+        boolean matches(String text) {\n+            return pattern().matcher(text) instanceof Matcher matcher && matcher.matches();\n+        }\n@@ -1811,0 +1895,1 @@\n+\n@@ -1815,1 +1900,1 @@\n-\n+        JarResult result =null;\n@@ -1857,1 +1942,1 @@\n-                Script.jar(jar -> jar\n+                result = Script.jar(jar -> jar\n@@ -1864,1 +1949,1 @@\n-                                .when(sourceFilePredicate != null, _-> javac.exclude(sourceFilePredicate))\n+                                .when(sourceFilePredicate != null, _ -> javac.exclude(sourceFilePredicate))\n@@ -1869,1 +1954,7 @@\n-                println(jarFile.fileName() + \" OK\");\n+              \/\/  print(result.builder.javacResult);\n+                if ((result.ok && result.builder.javacResult.ok)){\n+                    println(\"Created \\u001b[32m\"+jarFile.fileName()+\"\\u001b[0m\" );\n+                }else{\n+                    print(result.builder.javacResult);\n+                    println(\"Failed to create \\u001b[31m\"+jarFile.fileName()+\"\\u001b[0m\" );\n+                }\n@@ -1877,1 +1968,0 @@\n-\n","filename":"hat\/hat\/Script.java","additions":187,"deletions":97,"binary":false,"changes":284,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-    if (Artifacts.jextractedOpenGL.jarFile.contains(\"opengl\/glutKeyboardFunc$func.class\")) {\n+    if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$func.class$\")).isEmpty()) {\n@@ -190,1 +190,1 @@\n-    }else if (Artifacts.jextractedOpenGL.jarFile.contains(\"opengl\/glutKeyboardFunc$callback.class\")) {\n+    }else if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$callback.class$\")).isEmpty()) {\n","filename":"hat\/hat\/bld.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}