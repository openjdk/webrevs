{"files":[{"patch":"@@ -387,24 +387,0 @@\n-    \/**\n-     * Traverse the operands of this operation that are the results of prior operations, recursively.\n-     * <p>\n-     * Traversal is performed in pre-order, reporting the operation of each operand to the visitor.\n-     *\n-     * @param t   the traversing accumulator\n-     * @param v   the visitor\n-     * @param <T> accumulator type\n-     * @return the traversing accumulator\n-     * @apiNote A visitor that implements the abstract method of {@code OpVisitor} and does not override any\n-     * other default method will only visit operations. As such a lambda expression or method reference\n-     * may be used to visit operations.\n-     *\/\n-    public final <T> T traverseOperands(T t, BiFunction<T, Op, T> v) {\n-        for (Value arg : operands()) {\n-            if (arg instanceof Result or) {\n-                t = v.apply(t, or.op);\n-                t = or.op.traverseOperands(t, v);\n-            }\n-        }\n-\n-        return t;\n-    }\n-\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+    \/\/ @@@ Consider an additional method that returns a lazy stream of all dependent values, in order.\n@@ -93,0 +94,1 @@\n+    \/\/ @@@ Consider an additional method that returns a lazy stream of all uses, in order.\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Value.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,5 @@\n-    \/\/ @@@ this could be made generic with a method traversing backwards\n+    \/\/ @@@ this could be made generic with a method traversing up the model tree,\n+    \/\/ the challenge is controlling when to keep traversing or not, and it may make\n+    \/\/ it more complex that just writing it like below for specific cases\n+    \/\/ A better option may be to provide a lazy stream of the values that can be filtered\n+    \/\/ similar to CodeElement::elements\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/Patterns.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}