{"files":[{"patch":"@@ -31,2 +31,0 @@\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n@@ -140,4 +138,0 @@\n-    public ByteBuffer asByteBuffer() {\n-        return dataAddr.asByteBuffer().order(ByteOrder.nativeOrder());\n-    }\n-\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -48,1 +49,0 @@\n-import java.nio.FloatBuffer;\n@@ -354,13 +354,0 @@\n-    static int nextBestMatch(FloatBuffer fb) {\n-        float maxW = fb.get();\n-        int maxI = 0;\n-        for (int i = 1; i < 10; i++) {\n-            float w = fb.get();\n-            if (w > maxW) {\n-                maxW = w;\n-                maxI = i;\n-            }\n-        }\n-        return maxI;\n-    }\n-\n@@ -404,1 +391,1 @@\n-            FloatBuffer result = executor.apply(inputImage).asByteBuffer().asFloatBuffer();\n+            var result = executor.apply(inputImage).data().toArray(ValueLayout.JAVA_FLOAT);\n@@ -407,1 +394,2 @@\n-            while (result.remaining() > 0) {\n+            int i = 0;\n+            while (i < result.length) {\n@@ -409,1 +397,11 @@\n-                int actual = nextBestMatch(result);\n+\n+                int actual = 0;\n+                float maxW = result[i++];\n+                for (int j = 1; j < 10; j++) {\n+                    float w = result[i++];\n+                    if (w > maxW) {\n+                        maxW = w;\n+                        actual = j;\n+                    }\n+                }\n+\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -130,2 +131,14 @@\n-            case UINT8, INT8, UINT16, INT16, INT32, INT64, STRING, BOOL, UINT32, UINT64, UINT4, INT4 ->\n-                assertEquals(expected.asByteBuffer(), actual.asByteBuffer());\n+            case UINT8, INT8, BOOL, UINT4, INT4 ->\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_BYTE),\n+                                             actual.data().toArray(ValueLayout.JAVA_BYTE));\n+            case UINT16, INT16 ->\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_SHORT),\n+                                             actual.data().toArray(ValueLayout.JAVA_SHORT));\n+            case INT32, UINT32 ->\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_INT),\n+                                             actual.data().toArray(ValueLayout.JAVA_INT));\n+            case INT64, UINT64 ->\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_LONG),\n+                                             actual.data().toArray(ValueLayout.JAVA_LONG));\n+            case STRING ->\n+                Assertions.assertEquals(expected.data().getString(0), actual.data().getString(0));\n@@ -133,1 +146,2 @@\n-                assertEquals(expected.asByteBuffer().asFloatBuffer(), actual.asByteBuffer().asFloatBuffer());\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_FLOAT),\n+                                             actual.data().toArray(ValueLayout.JAVA_FLOAT));\n@@ -135,1 +149,2 @@\n-                assertEquals(expected.asByteBuffer().asDoubleBuffer(), actual.asByteBuffer().asDoubleBuffer());\n+                Assertions.assertArrayEquals(expected.data().toArray(ValueLayout.JAVA_DOUBLE),\n+                                             actual.data().toArray(ValueLayout.JAVA_DOUBLE));\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"}]}