{"files":[{"patch":"@@ -9,0 +9,1 @@\n+import jdk.incubator.code.Block;\n@@ -267,1 +268,1 @@\n-    static byte[] build(FuncOp model) {\n+    static byte[] build(Block block) {\n@@ -279,2 +280,2 @@\n-                model.body().entryBlock().parameters().stream().map(v -> tensorInfo(indexer.getName(v), ((OnnxType.TensorType)v.type()).eType().id())).toList(),\n-                model.body().entryBlock().ops().stream().<NodeProto>mapMulti((op, opNodes) -> {\n+                block.parameters().stream().map(v -> tensorInfo(indexer.getName(v), ((OnnxType.TensorType)v.type()).eType().id())).toList(),\n+                block.ops().stream().<NodeProto>mapMulti((op, opNodes) -> {\n@@ -296,1 +297,1 @@\n-                List.of(indexer.getName(model.body().entryBlock().terminatingOp().operands().getFirst())));\n+                List.of(indexer.getName(block.terminatingOp().operands().getFirst())));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -12,0 +13,1 @@\n+import java.util.function.Supplier;\n@@ -13,0 +15,1 @@\n+import jdk.incubator.code.*;\n@@ -15,0 +18,3 @@\n+import jdk.incubator.code.type.FunctionType;\n+import jdk.incubator.code.type.VarType;\n+import oracle.code.onnx.compiler.OnnxTransformer;\n@@ -46,1 +52,22 @@\n-    private static final String LOG_ID = \"onnx-ffm-java\";\n+    public static <T, U extends Quotable & Supplier<Tensor<T>>> Tensor<T> execute(U codeLambda) {\n+        var quotable = Op.ofQuotable(codeLambda).orElseThrow();\n+        var lambda = (CoreOp.LambdaOp) quotable.op();\n+        var capturedValues = lambda.capturedValues();\n+        var onnxFunc = OnnxTransformer.transform(MethodHandles.lookup(), CoreOp.func(\"onnxCode\", FunctionType.functionType(\n+                lambda.invokableType().returnType(),\n+                capturedValues.stream().map(Value::type).map(t -> t instanceof VarType vt ? vt.valueType() : t).toList()))\n+                .body(bb -> {\n+                    bb.context().mapValues(capturedValues, bb.parameters());\n+                    for (Op op : lambda.body().entryBlock().ops()) {\n+                        int i;\n+                        if (op instanceof CoreOp.VarAccessOp.VarLoadOp load && (i = capturedValues.indexOf(load.varOp().result())) >= 0) {\n+                            bb.context().mapValue(op.result(), bb.parameters().get(i)); \/\/ remap var load result to block param\n+                        } else {\n+                            bb.apply(op);\n+                        }\n+                    }\n+                }));\n+        try (var session = getInstance().createSession(OnnxProtoBuilder.build(onnxFunc.body().entryBlock()))) {\n+            return session.run(quotable.capturedValues().values().stream().map(val -> (Tensor)(val instanceof CoreOp.Var v ? v.value() : val)).toList()).getFirst();\n+        }\n+    }\n@@ -55,0 +82,1 @@\n+    private static final String LOG_ID = \"onnx-ffm-java\";\n@@ -88,2 +116,2 @@\n-    public List<Tensor> runFunc(CoreOp.FuncOp model, List<Tensor> inputValues) {\n-        var protoModel = OnnxProtoBuilder.build(model);\n+    public List<Tensor> run(Block block, List<Tensor> inputValues) {\n+        var protoModel = OnnxProtoBuilder.build(block);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -144,0 +144,4 @@\n+    public MemorySegment data() {\n+        return dataAddr;\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -390,2 +390,2 @@\n-        test(inputImage -> OnnxRuntime.getInstance().runFunc(\n-                    OnnxTransformer.transform(MethodHandles.lookup(), getFuncOp(\"cnn\")),\n+        test(inputImage -> OnnxRuntime.getInstance().run(\n+                    OnnxTransformer.transform(MethodHandles.lookup(), getFuncOp(\"cnn\")).body().entryBlock(),\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.incubator.code.CodeReflection;\n@@ -33,5 +32,0 @@\n-import java.lang.invoke.MethodHandles;\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.FloatBuffer;\n-import java.util.List;\n@@ -42,2 +36,0 @@\n-import jdk.incubator.code.Op;\n-import oracle.code.onnx.compiler.OnnxTransformer;\n@@ -48,1 +40,0 @@\n-import static oracle.code.onnx.Tensor.ElementType.*;\n@@ -51,3 +42,7 @@\n-    private static float[] loadConstant(String resource) throws IOException {\n-        return MemorySegment.ofArray(MNISTDemo.class.getResourceAsStream(resource).readAllBytes())\n-                .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n+    public static float[] loadConstant(String resource) {\n+        try {\n+            return MemorySegment.ofArray(MNISTDemo.class.getResourceAsStream(resource).readAllBytes())\n+                    .toArray(ValueLayout.JAVA_FLOAT_UNALIGNED);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n@@ -56,52 +51,52 @@\n-    @CodeReflection\n-    public static Tensor<Float> cnn(Tensor<Float> inputImage) throws IOException {\n-\n-        \/\/ Scaling to 0-1\n-        var scaledInput = Div(inputImage, Constant(255f));\n-\n-        \/\/ First conv layer\n-        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float-le\")), Constant(new long[]{6, 1, 5, 5}), empty());\n-        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float-le\")), Constant(new long[]{6}), empty());\n-        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu1 = Relu(conv1);\n-\n-        \/\/ First pooling layer\n-        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Second conv layer\n-        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float-le\")), Constant(new long[]{16, 6, 5, 5}), empty());\n-        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float-le\")), Constant(new long[]{16}), empty());\n-        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu2 = Relu(conv2);\n-\n-        \/\/ Second pooling layer\n-        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Flatten inputs\n-        var flatten = Flatten(pool2.Y(), of(1L));\n-\n-        \/\/ First fully connected layer\n-        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float-le\")), Constant(new long[]{120, 256}), empty());\n-        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float-le\")), Constant(new long[]{120}), empty());\n-        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n-        var relu3 = Relu(fc1);\n-\n-        \/\/ Second fully connected layer\n-        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float-le\")), Constant(new long[]{84, 120}), empty());\n-        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float-le\")), Constant(new long[]{84}), empty());\n-        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n-        var relu4 = Relu(fc2);\n-\n-        \/\/ Softmax layer\n-        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float-le\")), Constant(new long[]{10, 84}), empty());\n-        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float-le\")), Constant(new long[]{10}), empty());\n-        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n-        var prediction = Softmax(fc3, of(1L));\n-\n-        return prediction;\n+    public static Tensor<Float> cnn(Tensor<Float> inputImage) {\n+        return OnnxRuntime.execute(() -> {\n+            \/\/ Scaling to 0-1\n+            var scaledInput = Div(inputImage, Constant(255f));\n+\n+            \/\/ First conv layer\n+            var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float-le\")), Constant(new long[]{6, 1, 5, 5}), empty());\n+            var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float-le\")), Constant(new long[]{6}), empty());\n+            var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n+                    of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                    of(1L), of(new long[]{5,5}));\n+            var relu1 = Relu(conv1);\n+\n+            \/\/ First pooling layer\n+            var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n+                    of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+            \/\/ Second conv layer\n+            var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float-le\")), Constant(new long[]{16, 6, 5, 5}), empty());\n+            var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float-le\")), Constant(new long[]{16}), empty());\n+            var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n+                    of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                    of(1L), of(new long[]{5,5}));\n+            var relu2 = Relu(conv2);\n+\n+            \/\/ Second pooling layer\n+            var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n+                    of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+            \/\/ Flatten inputs\n+            var flatten = Flatten(pool2.Y(), of(1L));\n+\n+            \/\/ First fully connected layer\n+            var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float-le\")), Constant(new long[]{120, 256}), empty());\n+            var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float-le\")), Constant(new long[]{120}), empty());\n+            var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n+            var relu3 = Relu(fc1);\n+\n+            \/\/ Second fully connected layer\n+            var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float-le\")), Constant(new long[]{84, 120}), empty());\n+            var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float-le\")), Constant(new long[]{84}), empty());\n+            var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n+            var relu4 = Relu(fc2);\n+\n+            \/\/ Softmax layer\n+            var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float-le\")), Constant(new long[]{10, 84}), empty());\n+            var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float-le\")), Constant(new long[]{10}), empty());\n+            var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n+            var prediction = Softmax(fc3, of(1L));\n+\n+            return prediction;\n+        });\n@@ -118,1 +113,0 @@\n-        var statusBar = new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\");\n@@ -121,11 +115,1 @@\n-        var modelRuntimeSession = OnnxRuntime.getInstance().createSession(\n-                OnnxProtoBuilder.build(\n-                        OnnxTransformer.transform(MethodHandles.lookup(),\n-                                Op.ofMethod(MNISTDemo.class.getDeclaredMethod(\"cnn\", Tensor.class)).get())));\n-        var drawAreaImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-        var drawGraphics = drawAreaImage.createGraphics();\n-        var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n-        var scaledGraphics = scaledImage.createGraphics();\n-        var scaledImageDataBuffer = ByteBuffer.allocateDirect(IMAGE_SIZE * IMAGE_SIZE * 4).order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer();\n-        var inputArguments = List.of(new Tensor(MemorySegment.ofBuffer(scaledImageDataBuffer), FLOAT, 1, 1, IMAGE_SIZE, IMAGE_SIZE));\n-        var sampleArray = new float[IMAGE_SIZE * IMAGE_SIZE];\n+        var drawImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n@@ -134,1 +118,0 @@\n-\n@@ -141,1 +124,1 @@\n-                        drawGraphics.clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                        drawImage.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n@@ -144,1 +127,1 @@\n-                    drawGraphics.fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                    drawImage.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n@@ -149,1 +132,0 @@\n-\n@@ -153,1 +135,1 @@\n-        frame.add(statusBar, BorderLayout.SOUTH);\n+        frame.add(new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\"), BorderLayout.SOUTH);\n@@ -160,7 +142,10 @@\n-                    scaledGraphics.drawImage(drawAreaImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n-                    scaledImageDataBuffer.put(0, scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, sampleArray));\n-                    FloatBuffer result = modelRuntimeSession.run(inputArguments).getFirst().asByteBuffer().asFloatBuffer();\n-                    var msg = new StringBuilder(\"<html>\");\n-                    for (int i = 0; i < 10; i++) {\n-                        var w = result.get(i);\n-                        msg.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n+                    var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+                    scaledImage.createGraphics().drawImage(drawImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n+                    var imageData = new float[IMAGE_SIZE * IMAGE_SIZE];\n+                    scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, imageData);\n+                    var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+                    var result = cnn(imageTensor).data().toArray(ValueLayout.JAVA_FLOAT);\n+                    var report = new StringBuilder(\"<html>\");\n+                    for (int i = 0; i < result.length; i++) {\n+                        var w = result[i];\n+                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n@@ -169,1 +154,1 @@\n-                    results.setText(msg.toString());\n+                    results.setText(report.toString());\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemo.java","additions":74,"deletions":89,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        return OnnxRuntime.getInstance().runFunc(getOnnxModel(name), List.of(params)).getFirst();\n+        return OnnxRuntime.getInstance().run(getOnnxModel(name).body().entryBlock(), List.of(params)).getFirst();\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}