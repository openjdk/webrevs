{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import java.nio.ByteBuffer;\n@@ -324,1 +323,1 @@\n-    static void printImage(int imageIndex, ByteBuffer bb) {\n+    static void printImage(int imageIndex, MemorySegment data) {\n@@ -329,1 +328,1 @@\n-                System.out.print(GREY_SCALE.charAt(GREY_SCALE.length() * (0xff & bb.get(offset + y * 28 + x)) \/ 256));\n+                System.out.print(GREY_SCALE.charAt(GREY_SCALE.length() * (0xff & data.get(ValueLayout.JAVA_BYTE, offset + y * 28 + x)) \/ 256));\n@@ -386,2 +385,2 @@\n-            ByteBuffer imagesIn = imagesF.getChannel().map(FileChannel.MapMode.READ_ONLY, IMAGES_HEADER_SIZE, imagesF.length() - IMAGES_HEADER_SIZE);\n-            ByteBuffer labelsIn = labelsF.getChannel().map(FileChannel.MapMode.READ_ONLY, LABELS_HEADER_SIZE, labelsF.length() - LABELS_HEADER_SIZE);\n+            MemorySegment imagesIn = imagesF.getChannel().map(FileChannel.MapMode.READ_ONLY, IMAGES_HEADER_SIZE, imagesF.length() - IMAGES_HEADER_SIZE, ARENA);\n+            MemorySegment labelsIn = labelsF.getChannel().map(FileChannel.MapMode.READ_ONLY, LABELS_HEADER_SIZE, labelsF.length() - LABELS_HEADER_SIZE, ARENA);\n@@ -389,1 +388,1 @@\n-            Tensor<Byte> inputImage = new Tensor(MemorySegment.ofBuffer(imagesIn), Tensor.ElementType.UINT8, new long[]{imagesF.length() - IMAGES_HEADER_SIZE});\n+            Tensor<Byte> inputImage = new Tensor(imagesIn, Tensor.ElementType.UINT8, new long[]{imagesF.length() - IMAGES_HEADER_SIZE});\n@@ -391,1 +390,1 @@\n-            var result = executor.apply(inputImage).data().toArray(ValueLayout.JAVA_FLOAT);\n+            MemorySegment result = executor.apply(inputImage).data();\n@@ -395,2 +394,3 @@\n-            while (i < result.length) {\n-                int expected = labelsIn.get();\n+            int resultSize = (int)result.byteSize() \/ 4;\n+            while (i < resultSize) {\n+                int expected = labelsIn.get(ValueLayout.JAVA_BYTE, i \/ 10);\n@@ -399,1 +399,1 @@\n-                float maxW = result[i++];\n+                float maxW = result.getAtIndex(ValueLayout.JAVA_FLOAT, i++);\n@@ -401,1 +401,1 @@\n-                    float w = result[i++];\n+                    float w = result.getAtIndex(ValueLayout.JAVA_FLOAT, i++);\n@@ -411,1 +411,1 @@\n-                    int imageIndex = labelsIn.position() - 1;\n+                    int imageIndex = i \/ 10 - 1;\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -5,3 +5,0 @@\n-import java.nio.ByteBuffer;\n-import java.nio.DoubleBuffer;\n-import java.nio.FloatBuffer;\n@@ -155,21 +152,0 @@\n-\n-    static void assertEquals(ByteBuffer expectedData, ByteBuffer actualData) {\n-        Assertions.assertEquals(expectedData.capacity(), actualData.capacity());\n-        for (int i = 0; i < expectedData.capacity(); i++) {\n-            Assertions.assertEquals(expectedData.get(i), actualData.get(i));\n-        }\n-    }\n-\n-    static void assertEquals(FloatBuffer expectedData, FloatBuffer actualData) {\n-        Assertions.assertEquals(expectedData.capacity(), actualData.capacity());\n-        for (int i = 0; i < expectedData.capacity(); i++) {\n-            Assertions.assertEquals(expectedData.get(i), actualData.get(i), 1e-6f);\n-        }\n-    }\n-\n-    static void assertEquals(DoubleBuffer expectedData, DoubleBuffer actualData) {\n-        Assertions.assertEquals(expectedData.capacity(), actualData.capacity());\n-        for (int i = 0; i < expectedData.capacity(); i++) {\n-            Assertions.assertEquals(expectedData.get(i), actualData.get(i), 1e-6f);\n-        }\n-    }\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"}]}