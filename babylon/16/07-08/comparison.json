{"files":[{"patch":"@@ -137,4 +137,1 @@\n-                            \/\/ Keep the stack\n-                        } else {\n-                            \/\/ Flow discontinued, stack must be reconstructed from block parameters\n-                            nextBlock.parameters().forEach(stack::add);\n+                            stack.clear();\n@@ -142,0 +139,2 @@\n+                        \/\/ Stack is reconstructed from block parameters\n+                        nextBlock.parameters().forEach(stack::add);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -86,0 +86,12 @@\n+    static int conditionalExpression(int a, int b, int n) {\n+        return (n < 10) ? a : b;\n+    }\n+\n+    @Test\n+    public void testConditionalExpression() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"conditionalExpression\");\n+\n+        Assert.assertEquals((int) Interpreter.invoke(f, 1, 2, 1), conditionalExpression(1, 2, 1));\n+        Assert.assertEquals((int) Interpreter.invoke(f, 1, 2, 11), conditionalExpression(1, 2, 11));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftControl.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.IOException;\n@@ -28,3 +29,0 @@\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.analysis.SSA;\n-import java.lang.reflect.code.bytecode.BytecodeGenerator;\n@@ -32,2 +30,1 @@\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Method;\n+import java.lang.reflect.code.analysis.SSA;\n@@ -35,3 +32,1 @@\n-import java.lang.runtime.CodeReflection;\n-import java.util.*;\n-import java.util.stream.Stream;\n+import java.net.URL;\n@@ -46,1 +41,0 @@\n-    @CodeReflection\n@@ -58,4 +52,1 @@\n-        CoreOps.FuncOp f = getFuncOp(\"f\");\n-        byte[] classdata = generate(f);\n-\n-        CoreOps.FuncOp flift = BytecodeLift.lift(classdata, \"f\");\n+        CoreOps.FuncOp flift = getFuncOp(\"f\");\n@@ -66,17 +57,7 @@\n-    static byte[] generate(CoreOps.FuncOp f) {\n-        f.writeTo(System.out);\n-\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n-        lf.writeTo(System.out);\n-\n-        lf = SSA.transform(lf);\n-        lf.writeTo(System.out);\n-\n-        return BytecodeGenerator.generateClassData(MethodHandles.lookup(), lf);\n+    static CoreOps.FuncOp getFuncOp(String method) {\n+        byte[] classdata = getClassdata();\n+        CoreOps.FuncOp flift = BytecodeLift.lift(classdata, method);\n+        flift.writeTo(System.out);\n+        CoreOps.FuncOp fliftcoreSSA = SSA.transform(flift);\n+        fliftcoreSSA.writeTo(System.out);\n+        return fliftcoreSSA;\n@@ -85,7 +66,8 @@\n-    static CoreOps.FuncOp getFuncOp(String name) {\n-        Optional<Method> om = Stream.of(TestLiftTryFinally.class.getDeclaredMethods())\n-                .filter(m -> m.getName().equals(name))\n-                .findFirst();\n-\n-        Method m = om.get();\n-        return m.getCodeModel().get();\n+    static byte[] getClassdata() {\n+        URL resource = TestLiftTryFinally.class.getClassLoader()\n+                .getResource(TestLiftTryFinally.class.getName().replace('.', '\/') + \".class\");\n+        try {\n+            return resource.openStream().readAllBytes();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftTryFinally.java","additions":19,"deletions":37,"binary":false,"changes":56,"status":"modified"}]}