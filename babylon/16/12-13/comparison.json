{"files":[{"patch":"@@ -73,2 +73,0 @@\n-    private record CodeBlock(Block.Builder blockBuilder, Map<Integer, Op.Result> locals) {}\n-\n@@ -81,11 +79,1 @@\n-\n-            final var blockMap = new HashMap<Label, CodeBlock>() {\n-                public CodeBlock getOrCreate(Label l, Deque<Value> stack, Map<Integer, Op.Result> locals) {\n-                    return getOrCreate(l, stack.stream().map(Value::type).toList(), locals);\n-                }\n-                public CodeBlock getOrCreate(Label l, List<TypeDesc> parameters, Map<Integer, Op.Result> locals) {\n-                    return computeIfAbsent(l, _ ->\n-                            new CodeBlock(entryBlock.block(parameters), locals));\n-                }\n-            };\n-\n+            final HashMap<Label, Block.Builder> blockMap = new HashMap<>();\n@@ -96,1 +84,1 @@\n-            Map<Integer, Op.Result> locals = new HashMap<>();\n+            final Map<Integer, Op.Result> locals = new HashMap<>();\n@@ -98,1 +86,1 @@\n-            int uniqueVariableName = 0;\n+            int varIndex = 0;\n@@ -102,2 +90,1 @@\n-                Op.Result local = entryBlock.op(CoreOps.var(Integer.toString(uniqueVariableName), bp));\n-                locals.put(uniqueVariableName++, local);\n+                locals.put(varIndex, entryBlock.op(CoreOps.var(Integer.toString(varIndex++), bp)));\n@@ -111,1 +98,1 @@\n-                    \/\/ We start from the first unvisited block and mark it as visited\n+                    \/\/ We start from the first unvisited instruction and mark it as visited\n@@ -119,1 +106,1 @@\n-                            CodeBlock next = blockMap.get(lt.label());\n+                            Block.Builder next = blockMap.get(lt.label());\n@@ -124,1 +111,1 @@\n-                                    next = new CodeBlock(entryBlock.block(stack.stream().map(Value::type).toList()), locals);\n+                                    next = entryBlock.block(stack.stream().map(Value::type).toList());\n@@ -129,1 +116,1 @@\n-                                currentBlock.op(CoreOps.branch(next.blockBuilder.successor(List.copyOf(stack))));\n+                                currentBlock.op(CoreOps.branch(next.successor(List.copyOf(stack))));\n@@ -133,1 +120,1 @@\n-                                currentBlock = next.blockBuilder;\n+                                currentBlock = next;\n@@ -137,1 +124,0 @@\n-                                locals = next.locals;\n@@ -142,2 +128,3 @@\n-                                        CodeBlock handler = blockMap.getOrCreate(ec.handler(),\n-                                                List.of(TypeDesc.ofNominalDescriptor(ec.catchType().map(ClassEntry::asSymbol).orElse(ConstantDescs.CD_Throwable))), locals);\n+                                        Block.Builder handler = blockMap.computeIfAbsent(ec.handler(), _ ->\n+                                                entryBlock.block(List.of(TypeDesc.ofNominalDescriptor(\n+                                                        ec.catchType().map(ClassEntry::asSymbol).orElse(ConstantDescs.CD_Throwable)))));\n@@ -145,2 +132,2 @@\n-                                        Block.Builder startBlock = entryBlock.block(stack.stream().map(Value::type).toList());\n-                                        ExceptionRegionEnter ere = CoreOps.exceptionRegionEnter(startBlock.successor(List.copyOf(stack)), handler.blockBuilder.successor());\n+                                        next = entryBlock.block(stack.stream().map(Value::type).toList());\n+                                        ExceptionRegionEnter ere = CoreOps.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor());\n@@ -150,1 +137,1 @@\n-                                        currentBlock = startBlock;\n+                                        currentBlock = next;\n@@ -160,3 +147,3 @@\n-                                        Block.Builder endBlock = entryBlock.block(stack.stream().map(Value::type).toList());\n-                                        currentBlock.op(CoreOps.exceptionRegionExit(exceptionRegionsMap.get(ec), endBlock.successor()));\n-                                        currentBlock = endBlock;\n+                                        next = entryBlock.block(stack.stream().map(Value::type).toList());\n+                                        currentBlock.op(CoreOps.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor()));\n+                                        currentBlock = next;\n@@ -181,2 +168,2 @@\n-                            currentBlock.op(CoreOps.branch(blockMap.getOrCreate(inst.target(), stack, locals)\n-                                    .blockBuilder.successor(List.copyOf(stack))));\n+                            currentBlock.op(CoreOps.branch(blockMap.computeIfAbsent(inst.target(), _ ->\n+                                    entryBlock.block(stack.stream().map(Value::type).toList())).successor(List.copyOf(stack))));\n@@ -209,2 +196,1 @@\n-                            currentBlock.op(CoreOps.conditionalBranch(\n-                                    currentBlock.op(cop),\n+                            currentBlock.op(CoreOps.conditionalBranch(currentBlock.op(cop),\n@@ -213,1 +199,2 @@\n-                                    blockMap.getOrCreate(inst.target(), stack, locals).blockBuilder.successor()));\n+                                    blockMap.computeIfAbsent(inst.target(), _ ->\n+                                            entryBlock.block(stack.stream().map(Value::type).toList())).successor()));\n@@ -251,1 +238,1 @@\n-                                locals.put(inst.slot(), currentBlock.op(CoreOps.var(Integer.toString(uniqueVariableName), operand)));\n+                                locals.put(inst.slot(), currentBlock.op(CoreOps.var(Integer.toString(varIndex++), operand)));\n@@ -255,3 +242,2 @@\n-                                    \/\/ Fork locals to override the slot\n-                                    locals = new HashMap<>(locals);\n-                                    locals.put(inst.slot(), currentBlock.op(CoreOps.var(Integer.toString(uniqueVariableName++), operand)));\n+                                    \/\/ @@@ How to override local slots?\n+                                    locals.put(varIndex, currentBlock.op(CoreOps.var(Integer.toString(varIndex++), operand)));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":26,"deletions":40,"binary":false,"changes":66,"status":"modified"}]}