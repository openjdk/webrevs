{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.lang.reflect.code.Op.Result;\n@@ -50,0 +51,1 @@\n+import java.lang.reflect.code.op.CoreOps.ExceptionRegionEnter;\n@@ -83,1 +85,1 @@\n-                smta.entries().stream().collect(Collectors.toUnmodifiableMap(\n+                smta.entries().stream().collect(Collectors.toMap(\n@@ -105,1 +107,1 @@\n-                                }).toList())))).orElse(Map.of());\n+                                }).toList())))).orElseGet(HashMap::new);\n@@ -109,0 +111,1 @@\n+            final Map<ExceptionCatch, Result> exceptionRegionsMap = new HashMap<>();\n@@ -123,6 +126,1 @@\n-                        Block.Builder handler = blockMap.get(ec.handler());\n-                        if (handler.parameters().isEmpty() && ec.catchType().isPresent()) {\n-                            \/\/ Initialize handler block parameter with catch type\n-                            handler.parameter(TypeDesc.ofNominalDescriptor(ec.catchType().get().asSymbol()));\n-                        }\n-                        \/\/ @@@ construct also try-catch blocks\n+                        \/\/ Exception blocks are inserted by label target (below)\n@@ -132,1 +130,3 @@\n-                        Block.Builder nextBlock = blockMap.get(lt.label());\n+                        Block.Builder nextBlock = blockMap.computeIfAbsent(lt.label(), _ ->\n+                                \/\/ New block parameter types are calculated from the actual stack\n+                                entryBlock.block(stack.stream().map(Value::type).toList()));\n@@ -143,0 +143,17 @@\n+                        \/\/ Insert relevant tryStart and tryEnd blocks\n+                        for (ExceptionCatch ec : codeModel.exceptionHandlers().reversed()) {\n+                            if (lt.label() == ec.tryStart()) {\n+                                nextBlock = entryBlock.block(stack.stream().map(Value::type).toList());\n+                                ExceptionRegionEnter ere = CoreOps.exceptionRegionEnter(nextBlock.successor(List.copyOf(stack)), blockMap.get(ec.handler()).successor());\n+                                currentBlock.op(ere);\n+                                exceptionRegionsMap.put(ec, ere.result());\n+                                currentBlock = nextBlock;\n+                            }\n+                        }\n+                        for (ExceptionCatch ec : codeModel.exceptionHandlers()) {\n+                            if (lt.label() == ec.tryEnd()) {\n+                                nextBlock = entryBlock.block(stack.stream().map(Value::type).toList());\n+                                currentBlock.op(CoreOps.exceptionRegionExit(exceptionRegionsMap.get(ec), nextBlock.successor()));\n+                                currentBlock = nextBlock;\n+                            }\n+                        }\n@@ -201,0 +218,6 @@\n+                    case ThrowInstruction _ -> {\n+                        currentBlock.op(CoreOps._throw(stack.pop()));\n+                        \/\/ Flow discontinued, stack cleared to be ready for the next label target\n+                        stack.clear();\n+                        currentBlock = null;\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":32,"deletions":9,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.analysis.SSA;\n+import java.lang.reflect.code.bytecode.BytecodeGenerator;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.bytecode.BytecodeLift;\n+import java.lang.runtime.CodeReflection;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+\/*\n+ * @test\n+ * @run testng TestLiftTryFinally\n+ *\/\n+\n+public class TestLiftTryFinally {\n+\n+    @CodeReflection\n+    static int f(int i, int j) {\n+        try {\n+            i = i + j;\n+        } finally {\n+            i = i + j;\n+        }\n+        return i;\n+    }\n+\n+    @Test\n+    public void testF() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        byte[] classdata = generate(f);\n+\n+        CoreOps.FuncOp flift = BytecodeLift.lift(classdata, \"f\");\n+        flift.writeTo(System.out);\n+        Assert.assertEquals(Interpreter.invoke(flift, 1, 1), f(1, 1));\n+    }\n+\n+    static byte[] generate(CoreOps.FuncOp f) {\n+        f.writeTo(System.out);\n+\n+        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+            if (op instanceof Op.Lowerable lop) {\n+                return lop.lower(block);\n+            } else {\n+                block.op(op);\n+                return block;\n+            }\n+        });\n+        lf.writeTo(System.out);\n+\n+        lf = SSA.transform(lf);\n+        lf.writeTo(System.out);\n+\n+        return BytecodeGenerator.generateClassData(MethodHandles.lookup(), lf);\n+    }\n+\n+    static CoreOps.FuncOp getFuncOp(String name) {\n+        Optional<Method> om = Stream.of(TestLiftTryFinally.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftTryFinally.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}