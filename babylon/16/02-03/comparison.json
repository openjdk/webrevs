{"files":[{"patch":"@@ -90,3 +90,0 @@\n-    \/\/\n-    \/\/ Lift to core dialect\n-\n@@ -97,0 +94,2 @@\n+    \/\/\n+    \/\/ Lift to core dialect\n@@ -106,1 +105,0 @@\n-\n@@ -111,1 +109,0 @@\n-\n@@ -185,2 +182,1 @@\n-                            \/\/ Insert control instructions for exception start\/end bodies\n-        \/\/                    for (ExceptionCatch tryCatchBlock : bcr.codeModel.exceptionHandlers()) {\n+        \/\/ @@@                    for (ExceptionCatch tryCatchBlock : bcr.codeModel.exceptionHandlers()) {\n@@ -376,1 +372,1 @@\n-                                case POP, POP2 -> stack.pop(); \/\/check the type width\n+                                case POP, POP2 -> stack.pop(); \/\/ @@@ check the type width\n@@ -378,1 +374,1 @@\n-                                \/\/implement all other stack ops\n+                                \/\/@@@ implement all other stack ops\n@@ -433,1 +429,0 @@\n-                \/\/ @@@ cast, select last Instruction, and adjust prior loop\n@@ -542,1 +537,1 @@\n-                    \/\/ End of block, branch\n+                    \/\/ End of block\n@@ -556,4 +551,0 @@\n-                case BranchInstruction bi when bi.opcode().isUnconditionalBranch() -> {\n-                    BytecodeBasicBlock branch = blockMap.get(bi.target());\n-                    b.addSuccessor(branch);\n-                }\n@@ -561,7 +552,5 @@\n-                    \/\/ Conditional branch\n-                    BytecodeBasicBlock tBranch = blockMap.get(bi.target());\n-                    BytecodeBasicBlock fBranch = blocks.get(i + 1);\n-                    \/\/ True branch is first\n-                    b.addSuccessor(tBranch);\n-                    \/\/ False (or continuation) branch is second\n-                    b.addSuccessor(fBranch);\n+                    b.addSuccessor(blockMap.get(bi.target()));\n+                    if (!bi.opcode().isUnconditionalBranch()) {\n+                        \/\/ Conditional false branch\n+                        b.addSuccessor(blocks.get(i + 1));\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"}]}