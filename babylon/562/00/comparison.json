{"files":[{"patch":"@@ -460,1 +460,1 @@\n-            append(op.value().toString());\n+            constant(op.value().toString());\n@@ -508,1 +508,1 @@\n-                call().uni().space().oparen().retVal().cparen().commaSpace().append(OpTk.methodOrThrow(MethodHandles.lookup(),op).getName()).commaSpace();\n+                call().uni().space().oparen().retVal().cparen().commaSpace().identifier(OpTk.methodOrThrow(MethodHandles.lookup(),op).getName()).commaSpace();\n@@ -577,1 +577,1 @@\n-        return append(\"block_\").intVal(block.index());\n+        return typeName(\"block_\").intVal(block.index());\n@@ -613,1 +613,1 @@\n-        return append(addReg(op.result(), type));\n+        return identifier(addReg(op.result(), type));\n@@ -620,1 +620,1 @@\n-            return append(addReg(val, type));\n+            return identifier(addReg(val, type));\n@@ -670,1 +670,1 @@\n-        return dot().append(getResultType(type).getName());\n+        return dot().typeName(getResultType(type).getName());\n@@ -677,1 +677,1 @@\n-        return dot().append(getResultType(type).getName());\n+        return dot().typeName(getResultType(type).getName());\n@@ -719,1 +719,1 @@\n-        return osbrace().append(address).csbrace();\n+        return osbrace().constant(address).csbrace();\n@@ -723,1 +723,1 @@\n-        osbrace().append(address);\n+        osbrace().constant(address);\n@@ -738,1 +738,1 @@\n-        return append(\"param\");\n+        return keyword(\"param\");\n@@ -742,1 +742,1 @@\n-        return dot().append(\"global\");\n+        return dot().keyword(\"global\");\n@@ -746,1 +746,1 @@\n-        return dot().append(\"rn\");\n+        return dot().keyword(\"rn\");\n@@ -750,1 +750,1 @@\n-        return dot().append(\"rm\");\n+        return dot().keyword(\"rm\");\n@@ -754,1 +754,1 @@\n-        return dot().append(\"rzi\");\n+        return dot().keyword(\"rzi\");\n@@ -758,1 +758,1 @@\n-        return dot().append(\"to\");\n+        return dot().keyword(\"to\");\n@@ -762,1 +762,1 @@\n-        return dot().append(\"lo\");\n+        return dot().keyword(\"lo\");\n@@ -766,1 +766,1 @@\n-        return dot().append(\"wide\");\n+        return dot().keyword(\"wide\");\n@@ -770,1 +770,1 @@\n-        return dot().append(\"uni\");\n+        return dot().keyword(\"uni\");\n@@ -774,1 +774,1 @@\n-        return dot().append(\"sat\");\n+        return dot().keyword(\"sat\");\n@@ -778,1 +778,1 @@\n-        return dot().append(\"ftz\");\n+        return dot().keyword(\"ftz\");\n@@ -782,1 +782,1 @@\n-        return dot().append(\"approx\");\n+        return dot().keyword(\"approx\");\n@@ -786,1 +786,1 @@\n-        return append(\"mov\");\n+        return keyword(\"mov\");\n@@ -790,1 +790,1 @@\n-        return append(\"setp\");\n+        return keyword(\"setp\");\n@@ -794,1 +794,1 @@\n-        return append(\"selp\");\n+        return keyword(\"selp\");\n@@ -798,1 +798,1 @@\n-        return append(\"ld\");\n+        return keyword(\"ld\");\n@@ -802,1 +802,1 @@\n-        return append(\"st\");\n+        return keyword(\"st\");\n@@ -806,1 +806,1 @@\n-        return append(\"cvt\");\n+        return keyword(\"cvt\");\n@@ -810,1 +810,1 @@\n-        return append(\"bra\");\n+        return keyword(\"bra\");\n@@ -814,1 +814,1 @@\n-        return append(\"ret\");\n+        return keyword(\"ret\");\n@@ -818,1 +818,1 @@\n-        return append(\"rem\");\n+        return keyword(\"rem\");\n@@ -822,1 +822,1 @@\n-        return append(\"mul\");\n+        return keyword(\"mul\");\n@@ -826,1 +826,1 @@\n-        return append(\"div\");\n+        return keyword(\"div\");\n@@ -830,1 +830,1 @@\n-        return append(\"rcp\");\n+        return keyword(\"rcp\");\n@@ -834,1 +834,1 @@\n-        return append(\"add\");\n+        return keyword(\"add\");\n@@ -838,1 +838,1 @@\n-        return append(\"sub\");\n+        return keyword(\"sub\");\n@@ -842,1 +842,1 @@\n-        return append(\"lt\");\n+        return keyword(\"lt\");\n@@ -846,1 +846,1 @@\n-        return append(\"gt\");\n+        return keyword(\"gt\");\n@@ -850,1 +850,1 @@\n-        return append(\"le\");\n+        return keyword(\"le\");\n@@ -854,1 +854,1 @@\n-        return append(\"ge\");\n+        return keyword(\"ge\");\n@@ -858,1 +858,1 @@\n-        return append(\"geu\");\n+        return keyword(\"geu\");\n@@ -862,1 +862,1 @@\n-        return append(\"ne\");\n+        return keyword(\"ne\");\n@@ -866,1 +866,1 @@\n-        return append(\"eq\");\n+        return keyword(\"eq\");\n@@ -870,1 +870,1 @@\n-        return append(\"xor\");\n+        return keyword(\"xor\");\n@@ -874,1 +874,1 @@\n-        return append(\"or\");\n+        return keyword(\"or\");\n@@ -878,1 +878,1 @@\n-        return append(\"and\");\n+        return keyword(\"and\");\n@@ -882,1 +882,1 @@\n-        return append(\"cvta\");\n+        return keyword(\"cvta\");\n@@ -886,1 +886,1 @@\n-        return append(\"mad\");\n+        return keyword(\"mad\");\n@@ -890,1 +890,1 @@\n-        return append(\"fma\");\n+        return keyword(\"fma\");\n@@ -894,1 +894,1 @@\n-        return append(\"sqrt\");\n+        return keyword(\"sqrt\");\n@@ -898,1 +898,1 @@\n-        return append(\"abs\");\n+        return keyword(\"abs\");\n@@ -902,1 +902,1 @@\n-        return append(\"ex2\");\n+        return keyword(\"ex2\");\n@@ -906,1 +906,1 @@\n-        return append(\"shl\");\n+        return keyword(\"shl\");\n@@ -910,1 +910,1 @@\n-        return append(\"shr\");\n+        return keyword(\"shr\");\n@@ -914,1 +914,1 @@\n-        return append(\"neg\");\n+        return keyword(\"neg\");\n@@ -918,1 +918,1 @@\n-        return append(\"call\");\n+        return keyword(\"call\");\n@@ -922,1 +922,1 @@\n-        return append(\"exit\");\n+        return keyword(\"exit\");\n@@ -926,1 +926,1 @@\n-        return append(\"brkpt\");\n+        return keyword(\"brkpt\");\n@@ -930,1 +930,1 @@\n-        return append(\"    \");\n+        return space().space().space().space();\n@@ -934,1 +934,1 @@\n-        return dot().append(PTXRegister.Type.U32.getName());\n+        return dot().typeName(PTXRegister.Type.U32.getName());\n@@ -938,1 +938,1 @@\n-        return dot().append(PTXRegister.Type.S32.getName());\n+        return dot().typeName(PTXRegister.Type.S32.getName());\n@@ -942,1 +942,1 @@\n-        return dot().append(PTXRegister.Type.F32.getName());\n+        return dot().typeName(PTXRegister.Type.F32.getName());\n@@ -946,1 +946,1 @@\n-        return dot().append(PTXRegister.Type.B32.getName());\n+        return dot().typeName(PTXRegister.Type.B32.getName());\n@@ -950,1 +950,1 @@\n-        return dot().append(PTXRegister.Type.U64.getName());\n+        return dot().typeName(PTXRegister.Type.U64.getName());\n@@ -954,1 +954,1 @@\n-        return dot().append(PTXRegister.Type.S64.getName());\n+        return dot().typeName(PTXRegister.Type.S64.getName());\n@@ -958,1 +958,1 @@\n-        return dot().append(PTXRegister.Type.F64.getName());\n+        return dot().typeName(PTXRegister.Type.F64.getName());\n@@ -962,1 +962,1 @@\n-        return dot().append(PTXRegister.Type.B64.getName());\n+        return dot().typeName(PTXRegister.Type.B64.getName());\n@@ -966,1 +966,1 @@\n-        return dot().append(\"version\");\n+        return dot().keyword(\"version\");\n@@ -970,1 +970,1 @@\n-        return dot().append(\"target\");\n+        return dot().keyword(\"target\");\n@@ -974,1 +974,1 @@\n-        return dot().append(\"address_size\");\n+        return dot().keyword(\"address_size\");\n@@ -986,1 +986,1 @@\n-        return append(target);\n+        return keyword(target);\n@@ -994,1 +994,1 @@\n-        return append(funcName);\n+        return identifier(funcName);\n@@ -998,1 +998,1 @@\n-        return dot().append(\"visible\");\n+        return dot().keyword(\"visible\");\n@@ -1002,1 +1002,1 @@\n-        return dot().append(\"entry\");\n+        return dot().keyword(\"entry\");\n@@ -1006,1 +1006,1 @@\n-        return dot().append(\"func\");\n+        return dot().keyword(\"func\");\n@@ -1010,1 +1010,1 @@\n-        return append(\"<\");\n+        return symbol(\"<\");\n@@ -1014,1 +1014,1 @@\n-        return append(\">\");\n+        return symbol(\">\");\n@@ -1018,1 +1018,1 @@\n-        return append(reg.name());\n+        return identifier(reg.name());\n@@ -1022,1 +1022,1 @@\n-        return append(regName);\n+        return identifier(regName);\n@@ -1026,1 +1026,1 @@\n-        return append(getReg(val).type().getName());\n+        return keyword(getReg(val).type().getName());\n@@ -1030,1 +1030,1 @@\n-        return append(t.getName());\n+        return keyword(t.getName());\n@@ -1034,1 +1034,1 @@\n-        return append(t.getRegPrefix());\n+        return keyword(t.getRegPrefix());\n@@ -1038,1 +1038,1 @@\n-        return dot().append(\"reg\");\n+        return dot().keyword(\"reg\");\n@@ -1042,5 +1042,1 @@\n-        return append(\"retval\");\n-    }\n-\n-    public PTXHATKernelBuilder temp() {\n-        return append(\"temp\");\n+        return keyword(\"retval\");\n@@ -1050,1 +1046,1 @@\n-        return append(String.valueOf(i));\n+        return constant(String.valueOf(i));\n@@ -1054,1 +1050,1 @@\n-        return append(\"0f\").append(s);\n+        return constant(\"0f\").constant(s);\n@@ -1058,1 +1054,1 @@\n-        return append(\"0d\").append(s);\n+        return constant(\"0d\").constant(s);\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/PTXHATKernelBuilder.java","additions":86,"deletions":90,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-                return std(\"cout\").space().leftShift().space().dquote().emitText(s).dquote();\n+                return std(\"cout\").space().leftShift().space().dquote().literal(s).dquote();\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/Config.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-                    intDeclaration(\"dimensions\").semicolonNl();\n+                    intDeclaration(\"dimensions\").semicolon().nl();\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import hat.optools.OpTk;\n@@ -29,1 +28,0 @@\n-import jdk.incubator.code.Op;\n@@ -35,1 +33,1 @@\n- * Extends the base TextBuilder to add common constructs\/keywords for generating code.\n+ * Extends the base TextBuilder to add common constructs\/keywords for generating C99\/Java style code.\n@@ -45,5 +43,0 @@\n-    public T semicolonNl() {\n-        return semicolon().nl();\n-    }\n-\n-\n@@ -89,1 +82,6 @@\n-        return symbol(\"\/\/\").space().commented(line).nl();\n+        return comment(\"\/\/\").space().comment(line).nl();\n+    }\n+\n+    @Override\n+    public T constant(String text ){\n+       return emitText(text);\n@@ -94,1 +92,1 @@\n-        return symbol(\"\/*\").nl().commented(block).nl().symbol(\"*\/\").nl();\n+        return comment(\"\/*\").nl().comment(block).nl().symbol(\"*\/\").nl();\n@@ -98,1 +96,1 @@\n-        return symbol(\"\/*\").space().commented(block).space().symbol(\"*\/\").space();\n+        return comment(\"\/*\").space().comment(block).space().comment(\"*\/\");\n@@ -401,1 +399,1 @@\n-        return osquote().append(txt).csquote();\n+        return osquote().escaped(txt).csquote();\n@@ -463,1 +461,1 @@\n-        return append(\"int\");\n+        return typeName(\"int\");\n@@ -467,1 +465,1 @@\n-        return append(\"0\");\n+        return constant(\"0\");\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/CodeBuilder.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-        return hashIfdefKeyword().space().append(value).nl();\n+        return hashIfdefKeyword().space().constant(value).nl();\n@@ -123,1 +123,1 @@\n-        return hashIfndefKeyword().space().append(value).nl();\n+        return hashIfndefKeyword().space().constant(value).nl();\n@@ -148,1 +148,1 @@\n-            space().append(value);\n+            space().constant(value);\n@@ -156,1 +156,1 @@\n-            space().append(value);\n+            space().constant(value);\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-        return commented(\"\/*LAMBDA*\/\");\n+        return comment(\"\/*LAMBDA*\/\");\n@@ -205,1 +205,1 @@\n-                commented(\"\/*nothing to tuple*\/\");\n+                comment(\"\/*nothing to tuple*\/\");\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,3 @@\n-public abstract class TextBuilder<T extends TextBuilder<T>> {\n+public abstract class TextBuilder<T extends TextBuilder<T>> implements TextRenderer<T> {\n+\n+\n@@ -55,0 +57,29 @@\n+        public void indentation() {\n+            for (int i = 0; i < indent; i++) {\n+                stringBuilder.append(indentation);\n+            }\n+        }\n+\n+        public void indentIfNeededAndAppend(String text) {\n+            if (indenting && newLined) {\n+                indentation();\n+            }\n+            newLined = false;\n+            stringBuilder.append(text);\n+        }\n+\n+        public void incIndent() {\n+            indent++;\n+        }\n+        public void decIndent() {\n+            indent--;\n+        }\n+\n+        public void nl() {\n+            newLined = true;\n+        }\n+\n+        @Override\n+        public String toString(){\n+            return stringBuilder.toString();\n+        }\n@@ -98,1 +129,1 @@\n-        return append(text);\n+        return emitText(text);\n@@ -102,3 +133,1 @@\n-        for (int i = 0; i < state.indent; i++) {\n-            state.stringBuilder.append(state.indentation);\n-        }\n+        state.indentation();\n@@ -108,6 +137,2 @@\n-    final protected T emitText(String text) {\n-        if (state.indenting && state.newLined) {\n-            indent();\n-        }\n-        state.newLined = false;\n-        state.stringBuilder.append(text);\n+     T emitText(String text) {\n+        state.indentIfNeededAndAppend(text);\n@@ -117,1 +142,2 @@\n-    public final T commented(String text) {\n+    @Override\n+    public final T comment(String text) {\n@@ -120,1 +146,1 @@\n-\n+    @Override\n@@ -124,0 +150,11 @@\n+\n+    @Override\n+    public T reserved(String text) {\n+        return emitText(text);\n+    }\n+\n+    @Override\n+    public T label(String text) {\n+        return emitText(text);\n+    }\n+\n@@ -134,4 +171,1 @@\n-    public T append(String text) {\n-        return emitText(text);\n-    }\n-\n+    @Override\n@@ -141,1 +175,1 @@\n-\n+    @Override\n@@ -145,1 +179,1 @@\n-\n+    @Override\n@@ -150,0 +184,1 @@\n+    @Override\n@@ -163,1 +198,1 @@\n-        state.indent++;\n+        state.incIndent();\n@@ -168,7 +203,1 @@\n-        state.indent--;\n-        return self();\n-    }\n-\n-    final protected T emitNl() {\n-        state.stringBuilder.append(\"\\n\");\n-        state.newLined = true;\n+        state.decIndent();\n@@ -178,0 +207,1 @@\n+    @Override\n@@ -179,3 +209,2 @@\n-        return emitNl();\n-    }\n-\n+        emitText(\"\\n\");\n+        state.nl();\n@@ -183,2 +212,1 @@\n-    public T space() {\n-        return emitSpace();\n+        return self();\n@@ -187,2 +215,3 @@\n-    final protected T emitSpace() {\n-        return emitText(\" \");\n+    @Override\n+    public T space() {\n+         return emitText(\" \");\n@@ -193,1 +222,1 @@\n-        return state.stringBuilder.toString();\n+        return state.toString();\n@@ -196,6 +225,0 @@\n-    public static class ConcreteTextBuilder extends TextBuilder<ConcreteTextBuilder> {\n-    }\n-\n-    public static ConcreteTextBuilder concreteTextBuilder() {\n-        return new ConcreteTextBuilder();\n-    }\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/TextBuilder.java","additions":64,"deletions":41,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.codebuilders;\n+\n+public interface TextRenderer<T extends TextBuilder<T>>{\n+    T identifier(String text);\n+    T symbol(String text);\n+    T typeName(String text);\n+    T label(String text);\n+    T keyword(String text);\n+    T constant(String text);\n+    T literal(String text);\n+    T reserved(String text);\n+    T nl();\n+    T space();\n+    T comment(String text);\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/TextRenderer.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}