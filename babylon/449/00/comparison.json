{"files":[{"patch":"@@ -54,0 +54,2 @@\n+import jdk.incubator.code.bytecode.impl.BranchCompactor;\n+import jdk.incubator.code.bytecode.impl.LocalsCompactor;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,16 +0,0 @@\n-package jdk.incubator.code.bytecode;\n-\n-import java.lang.classfile.Opcode;\n-\n-final class BytecodeHelpers {\n-\n-    \/\/ Copied from java.base\/jdk.internal.classfile.impl.BytecodeHelpers\n-    \/\/ to avoid export of package from java.base to jdk.incubator.code\n-\n-    static boolean isUnconditionalBranch(Opcode opcode) {\n-        return switch (opcode) {\n-            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n-            default -> opcode.kind() == Opcode.Kind.RETURN;\n-        };\n-    }\n-}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeHelpers.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.code.bytecode.impl.BytecodeHelpers;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeLift.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.incubator.code.bytecode;\n+package jdk.incubator.code.bytecode.impl;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/impl\/BranchCompactor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BranchCompactor.java","status":"renamed"},{"patch":"@@ -0,0 +1,16 @@\n+package jdk.incubator.code.bytecode.impl;\n+\n+import java.lang.classfile.Opcode;\n+\n+public final class BytecodeHelpers {\n+\n+    \/\/ Copied from java.base\/jdk.internal.classfile.impl.BytecodeHelpers\n+    \/\/ to avoid export of package from java.base to jdk.incubator.code\n+\n+    public static boolean isUnconditionalBranch(Opcode opcode) {\n+        return switch (opcode) {\n+            case GOTO, ATHROW, GOTO_W, LOOKUPSWITCH, TABLESWITCH -> true;\n+            default -> opcode.kind() == Opcode.Kind.RETURN;\n+        };\n+    }\n+}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/impl\/BytecodeHelpers.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package jdk.incubator.code.bytecode;\n+package jdk.incubator.code.bytecode.impl;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/impl\/LocalsCompactor.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/LocalsCompactor.java","status":"renamed"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.incubator.code.bytecode.BranchCompactor;\n+import jdk.incubator.code.bytecode.impl.BranchCompactor;\n@@ -40,0 +40,1 @@\n+ * @modules jdk.incubator.code\/jdk.incubator.code.bytecode.impl\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}