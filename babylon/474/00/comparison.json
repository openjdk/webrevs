{"files":[{"patch":"@@ -8,0 +8,1 @@\n+compile_flags.txt\n","filename":"hat\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+        var linux = new Job.Linux(project.id(\"linux-1.0\"), Set.of());\n@@ -54,4 +55,1 @@\n-        var extractions_opengl = Job.JExtract.of(project.id(\"extraction-opengl-1.0\"), Job.JExtract.Mac.of(opengl,\"GLUT\", \"OpenGL\"), mac, opengl, core);\n-        var extractions_opencl = Job.JExtract.of(project.id(\"extraction-opencl-1.0\"), Job.JExtract.Mac.of(opencl,\"OpenCL\"), mac, opencl, core);\n-        var wraps_wrap = Job.Jar.of(project.id(\"wrap-wrap-1.0\"));\n-        var wraps_clwrap = Job.Jar.of(project.id(\"wrap-clwrap-1.0\"), extractions_opencl, wraps_wrap);\n+        if (mac.isAvailable()) {\n@@ -59,9 +57,14 @@\n-        var wraps_glwrap = Job.Jar.of(project.id(\"wrap-glwrap-1.0\"),\n-                Set.of(project.rootPath().resolve(\"wraps\/glwrap\/src\/main\/java\/wrap\/glwrap\/GLCallbackEventHandler.java\")), \/\/exclude\n-                extractions_opengl,\n-                wraps_wrap);\n-        var example_nbody = Job.RunnableJar.of(project.id(\"example-nbody-1.0\"), Set.of(wraps_glwrap, wraps_clwrap, wraps_wrap, core, mac));\n-        if (argArr.length == 0) {\n-            project.start(\"run\", \"ffi-opencl\", \"nbody\");\n-        } else {\n-            project.start(argArr);\n+            var extractions_opengl = Job.JExtract.of(project.id(\"extraction-opengl-1.0\"),\n+                    mac.isAvailable() ? Job.JExtract.Mac.of(opengl, \"GLUT\", \"OpenGL\") : Job.JExtract.Linux.of(opengl, \"GLUT\", \"OpenGL\"),\n+                    mac, opengl, core);\n+            var extractions_opencl = Job.JExtract.of(project.id(\"extraction-opencl-1.0\"),\n+                    mac.isAvailable() ? Job.JExtract.Mac.of(opencl, \"OpenCL\") : Job.JExtract.Linux.of(opengl, \"OpenCL\"),\n+                    mac, opencl, core);\n+            var wraps_wrap = Job.Jar.of(project.id(\"wrap-wrap-1.0\"));\n+            var wraps_clwrap = Job.Jar.of(project.id(\"wrap-clwrap-1.0\"), extractions_opencl, wraps_wrap);\n+\n+            var wraps_glwrap = Job.Jar.of(project.id(\"wrap-glwrap-1.0\"),\n+                    Set.of(project.rootPath().resolve(\"wraps\/glwrap\/src\/main\/java\/wrap\/glwrap\/GLCallbackEventHandler.java\")), \/\/exclude\n+                    extractions_opengl,\n+                    wraps_wrap);\n+            var example_nbody = Job.RunnableJar.of(project.id(\"example-nbody-1.0\"), Set.of(wraps_glwrap, wraps_clwrap, wraps_wrap, core, mac));\n@@ -69,0 +72,5 @@\n+        \/\/if (argArr.length == 0) {\n+          \/\/  project.start(\"run\", \"ffi-opencl\", \"nbody\");\n+        \/\/} else {\n+            project.start(argArr);\n+        \/\/}\n","filename":"hat\/hat\/Hat.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -783,1 +783,1 @@\n-                    \"\/Users\/grfrost\/github\/babylon-grfrost-fork\/build\/macosx-aarch64-server-release\/jdk\/bin\/java\",\n+                    \"java\",\n@@ -1026,0 +1026,24 @@\n+        record Linux(Path macSdkSysLibFrameWorks, Path macSysLibFrameWorks, Path header,\n+                   List<Path> frameworks) implements ExtractSpec {\n+            static Mac of(CMakeInfo cMakeInfo, String... frameworks) {\n+                var value = (String) cMakeInfo.properties.get(\"\");\n+                Path macSdkSysLibFrameWorks = Path.of(value);\n+                Path macSysLibFrameWorks = Path.of(\"\/System\/Library\/Frameworks\");\n+                var firstName = frameworks[0];\n+                return new Mac(\n+                        macSdkSysLibFrameWorks,\n+                        macSysLibFrameWorks,\n+                        macSdkSysLibFrameWorks.resolve(firstName.toUpperCase() + \".framework\/Headers\/\" + firstName + \".h\"),\n+                        Stream.of(frameworks).map(s -> macSysLibFrameWorks.resolve(s + \".framework\/\" + s)).collect(Collectors.toList())\n+                );\n+            }\n+\n+            void writeCompileFlags(Path outputDir) {\n+                try {\n+                    Path compileFLags = outputDir.resolve(\"compile_flags.txt\");\n+                    Files.writeString(compileFLags, \"-F\" + macSdkSysLibFrameWorks + \"\\n\", StandardCharsets.UTF_8, StandardOpenOption.CREATE);\n+                } catch (IOException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }\n+        }\n@@ -1034,1 +1058,1 @@\n-                        \"\/Users\/grfrost\/jextract-22\/bin\/jextract\",\n+                        \"jextract\",\n@@ -1203,0 +1227,1 @@\n+        final boolean available;\n@@ -1205,0 +1230,1 @@\n+            available = System.getProperty(\"os.name\").toLowerCase().contains(\"mac\");\n@@ -1209,1 +1235,1 @@\n-            return System.getProperty(\"os.name\").toLowerCase().contains(\"mac\");\n+            return available;\n@@ -1213,0 +1239,1 @@\n+        final boolean available;\n@@ -1215,0 +1242,1 @@\n+            available = System.getProperty(\"os.name\").toLowerCase().contains(\"linux\");\n@@ -1219,1 +1247,1 @@\n-            return System.getProperty(\"os.name\").toLowerCase().contains(\"linux\");\n+            return available;\n@@ -1231,0 +1259,4 @@\n+                    \"OPENGL_INCLUDE_DIR\",\n+                    \"OPENGL_LIBRARIES\",\n+                    \"OPENGL_LIBRARY\",\n+                    \"OpenGL_FOUND\",\n@@ -1249,1 +1281,5 @@\n-                    \"CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\"\n+                    \"CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES\",\n+                    \"OpenCL_FOUND\",\n+                    \"OpenCL_INCLUDE_DIRS\",\n+                    \"OpenCL_LIBRARY\",\n+                    \"OpenCL_VERSION_STRING\"\n@@ -1258,0 +1294,9 @@\n+                    \"CUDA_OpenCL_LIBRARY\",\n+                    \"CUDA_cuFile_LIBRARY\",\n+                    \"CUDA_cuda_driver_LIBRARY\",\n+                    \"CUDA_cudart_LIBRARY\",\n+                    \"CUDAToolkit_BIN_DIR\",\n+                    \"CUDAToolkit_INCLUDE_DIRS\",\n+                    \"CUDAToolkit_NVCC_EXECUTABLE\",\n+                    \"CUDAToolkit_LIBRARY_DIR\",\n+                    \"CUDAToolkit_Version\",\n","filename":"hat\/hat\/Job.java","additions":50,"deletions":5,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-    <mapping directory=\"$PROJECT_DIR$\/..\/..\/..\/beehive-spirv-toolkit\" vcs=\"Git\" \/>\n","filename":"hat\/intellij\/.idea\/vcs.xml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}