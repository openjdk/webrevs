{"files":[{"patch":"@@ -33,1 +33,1 @@\n- * A function type.\n+ * A class type.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ClassType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,6 +153,6 @@\n-        int dims = 0;\n-        if (c.isArray()) {\n-            while (c.isArray()) {\n-                c = c.getComponentType();\n-                dims++;\n-            }\n+        if (c.isPrimitive()) {\n+            return new PrimitiveType(c.getName());\n+        } else if (c.isArray()) {\n+            return array(type(c.getComponentType()));\n+        } else {\n+            return new ClassType(c.getName());\n@@ -160,6 +160,0 @@\n-        JavaType ctype = c.isPrimitive() ?\n-                new PrimitiveType(c.getName()) :\n-                new ClassType(c.getName());\n-        return dims == 0 ?\n-                ctype :\n-                array(ctype, dims);\n@@ -173,7 +167,0 @@\n-        int dims = 0;\n-        if (c.isArray()) {\n-            while (c.isArray()) {\n-                c = c.getComponentType();\n-                dims++;\n-            }\n-        }\n@@ -182,0 +169,5 @@\n+        } else if (c.isArray()) {\n+            return array(type(c.getComponentType(), typeArguments));\n+        } else {\n+            return new ClassType(c.getName(),\n+                    typeArguments.stream().map(JavaType::type).toList());\n@@ -183,4 +175,0 @@\n-        JavaType ctype = new ClassType(c.getName(), typeArguments.stream().map(JavaType::type).toList());\n-        return dims == 0 ?\n-                ctype :\n-                array(ctype, dims);\n@@ -226,5 +214,8 @@\n-        int dims = 0;\n-        if (t.isArray()) {\n-            while (t.isArray()) {\n-                t = ((ArrayType)t).componentType();\n-                dims++;\n+        if (t.isPrimitive()) {\n+            throw new IllegalArgumentException(\"Cannot parameterize a primitive type\");\n+        } else if (t.isArray()) {\n+            return array(type(((ArrayType)t).componentType(), typeArguments));\n+        } else {\n+            ClassType ct = (ClassType)t;\n+            if (ct.hasTypeArguments()) {\n+                throw new IllegalArgumentException(\"Type must not have type arguments: \" + ct);\n@@ -232,0 +223,1 @@\n+            return new ClassType(ct.toClassName(), typeArguments);\n@@ -233,7 +225,0 @@\n-        if (t instanceof ClassType ct && ct.hasTypeArguments() || t.isPrimitive()) {\n-            throw new IllegalArgumentException(\"Type must not have type arguments: \" + t);\n-        }\n-        JavaType ctype = new ClassType(((ClassType)t).toClassName(), typeArguments);\n-        return dims == 0 ?\n-                ctype :\n-                array(ctype, dims);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":20,"deletions":35,"binary":false,"changes":55,"status":"modified"}]}