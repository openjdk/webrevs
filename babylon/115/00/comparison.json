{"files":[{"patch":"@@ -2,0 +2,1 @@\n+target\/\n","filename":"hat\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,7 +62,4 @@\n-set_property(DIRECTORY PROPERTY ADDITIONAL_MAKE_CLEAN_FILES\n-   ${CMAKE_BINARY_DIR}\/hat ${CMAKE_BINARY_DIR}\/mandel ${CMAKE_BINARY_DIR}\/violajones ${CMAKE_BINARY_DIR}\/experiments\n-   ${CMAKE_BINARY_DIR}\/opencl_info ${CMAKE_BINARY_DIR}\/cuda_info ${CMAKE_BINARY_DIR}\/mock_info ${CMAKE_BINARY_DIR}\/spirv_info\n-   ${CMAKE_BINARY_DIR}\/ptx_backend ${CMAKE_BINARY_DIR}\/mock_backend ${CMAKE_BINARY_DIR}\/opencl_backend ${CMAKE_BINARY_DIR}\/cuda_backend ${CMAKE_BINARY_DIR}\/spirv_backend\n-   ${CMAKE_BINARY_DIR}\/libmock_backend.dylib ${CMAKE_BINARY_DIR}\/libptx_backend.dylib ${CMAKE_BINARY_DIR}\/libopencl_backend.dylib ${CMAKE_BINARY_DIR}\/libspirv_backend.dylib ${CMAKE_BINARY_DIR}\/libcuda_backend.dylib\n-   ${CMAKE_BINARY_DIR}\/libspirv_backend.so ${CMAKE_BINARY_DIR}\/libmock_backend.so ${CMAKE_BINARY_DIR}\/libptx_backend.so ${CMAKE_BINARY_DIR}\/libcuda_backend.so ${CMAKE_BINARY_DIR}\/libopencl_backend.so\n-)\n+#set_property(DIRECTORY PROPERTY ADDITIONAL_MAKE_CLEAN_FILES\n+#   ${CMAKE_BINARY_DIR}\/hat ${CMAKE_BINARY_DIR}\/mandel ${CMAKE_BINARY_DIR}\/violajones ${CMAKE_BINARY_DIR}\/experiments ${CMAKE_BINARY_DIR}\/heal ${CMAKE_BINARY_DIR}\/view \n+#   ${CMAKE_BINARY_DIR}\/backends\n+#)\n@@ -278,0 +275,9 @@\n+#### We delegate to the cmake config for backends which is clion compatible. \n+\n+set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/shared\")\n+set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/ptx\")\n+set (OPENCL_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/opencl\")\n+set (CUDA_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/opencl\")\n+set (SPIRV_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/spirv\")\n+set (MOCK_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/mock\")\n+add_subdirectory(\"backends\")\n@@ -314,106 +320,4 @@\n-\n-### libopencl_backend.so\/.dylib\n-\n-if(OPENCL_FOUND)\n-  message(\"OPENCL\")\n-  if (APPLE)\n-     include_directories(\n-        ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/include\n-        \"-framework OpenCL\"\n-     )\n-     link_directories(\n-        ${CMAKE_BINARY_DIR}\n-     )\n-\n-     add_library(opencl_backend SHARED\n-        ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/cpp\/opencl_backend.cpp\n-     )\n-\n-     target_link_libraries(opencl_backend\n-        \"-framework OpenCL\"\n-     )\n-\n-     add_executable(opencl_info\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/cpp\/info.cpp\n-     )\n-\n-     target_link_libraries(opencl_info\n-        opencl_backend\n-        \"-framework OpenCL\"\n-     )\n-     target_link_libraries(opencl_info\n-          \"-framework OpenCL\"\n-     )\n-\n-     add_custom_target(opencl_info_exec DEPENDS opencl_backend.jar opencl_backend\n-        COMMAND  ${DOIT}\n-          ${JAVA_HOME}\/bin\/java\n-            --enable-preview --enable-native-access=ALL-UNNAMED\n-            --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-            -classpath ${OPENCL_BACKEND_JAR}:${HAT_JAR}\n-            -Djava.library.path=${CMAKE_BINARY_DIR}\n-            hat.backend.OpenCLDeviceInfo\n-     )\n-     add_dependencies(info_executables opencl_info)\n-     add_dependencies(backend_libs opencl_backend)\n-\n-     set(AVAILABLE_BACKEND_JAR ${OPENCL_BACKEND_JAR})\n-  else()\n-     message(\"OPENCL but not on APPLE\")\n-     include_directories(\n-        ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/include\n-        ${OPENCL_INCLUDE_DIR}\n-     )\n-     link_directories(\n-        ${CMAKE_BINARY_DIR}\n-     )\n-\n-     add_library(opencl_backend SHARED\n-        ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/cpp\/opencl_backend.cpp\n-     )\n-\n-     target_link_libraries(opencl_backend\n-        \"OpenCL\"\n-     )\n-\n-     add_executable(opencl_info\n-        ${CMAKE_SOURCE_DIR}\/backends\/opencl\/cpp\/info.cpp\n-     )\n-\n-     target_link_libraries(opencl_info\n-        opencl_backend\n-        \"OpenCL\"\n-     )\n-     target_link_libraries(opencl_info\n-        \"OpenCL\"\n-     )\n-\n-     add_custom_target(opencl_info_exec DEPENDS opencl_backend.jar opencl_backend\n-        COMMAND  ${DOIT}\n-          ${JAVA_HOME}\/bin\/java\n-            --enable-preview --enable-native-access=ALL-UNNAMED\n-            --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-            -classpath ${OPENCL_BACKEND_JAR}:${HAT_JAR}\n-            -Djava.library.path=${CMAKE_BINARY_DIR}\n-            hat.backend.OpenCLDeviceInfo\n-     )\n-     add_dependencies(info_executables opencl_info)\n-     add_dependencies(backend_libs opencl_backend)\n-\n-     set(AVAILABLE_BACKEND_JAR ${OPENCL_BACKEND_JAR})\n-  endif()\n-\n-  if(is$ENV{ECHO_ONLY} STREQUAL isON )\n-     add_custom_target(echo_only DEPENDS opencl_backend add--with-jtreg=${JTREG_HOME}\n-      COMMAND\n-         sed -n '\/.command.:\/ s\/.command.: *.\\(.*\\).\/\\\\\\\\1\/p' ${CMAKE_BINARY_DIR}\/compile_commands.json\n-      COMMAND\n-         cat ${CMAKE_BINARY_DIR}\/CMakeFiles\/opencl_info.dir\/link.txt\n-      COMMAND\n-         cat ${CMAKE_BINARY_DIR}\/CMakeFiles\/opencl_backend.dir\/link.txt\n-   )\n-  endif()\n+find_package(OpenCL)\n+if(OPENCL_FOUND)  \n+    add_dependencies(info_executables opencl_info)\n+    add_dependencies(backend_libs opencl_backend)\n@@ -421,1 +325,0 @@\n-##End of OpenCL Backend\n@@ -423,2 +326,0 @@\n-##CUDA Backend\n-###cuda_backend.jar\n@@ -426,0 +327,1 @@\n+##CUDA Backend\n@@ -452,0 +354,1 @@\n+find_package(CUDAToolkit)\n@@ -453,1 +356,0 @@\n-### libcuda_backend.so\/.dylib\n@@ -455,54 +357,2 @@\n-  message(\"CUDA\")\n-\n-  include_directories(\n-      ${CUDAToolkit_INCLUDE_DIR}\n-      ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-      ${CMAKE_SOURCE_DIR}\/backends\/cuda\/include\n-  )\n-\n-  link_directories(\n-      ${CMAKE_BINARY_DIR}\n-      ${CUDAToolkit_LIBRARY_DIR}\n-  )\n-\n-  add_library(cuda_backend SHARED\n-     ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-     ${CMAKE_SOURCE_DIR}\/backends\/cuda\/cpp\/cuda_backend.cpp\n-  )\n-\n-  target_link_libraries(cuda_backend\n-     -lcudart\n-     -lcuda\n-  )\n-\n-  add_executable(cuda_info\n-     ${CMAKE_SOURCE_DIR}\/backends\/cuda\/cpp\/info.cpp\n-  )\n-\n-  target_link_libraries(cuda_info\n-     cuda_backend\n-     -lcudart -lcuda\n-  )\n-\n-  add_custom_target(cuda_info_exec DEPENDS cuda_backend.jar cuda_backend\n-      COMMAND  ${DOIT}\n-        ${JAVA_HOME}\/bin\/java\n-            --enable-preview --enable-native-access=ALL-UNNAMED\n-            --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-            -classpath ${CUDA_BACKEND_JAR}:${HAT_JAR}\n-            -Djava.library.path=${CMAKE_BINARY_DIR}\n-            hat.backend.CudaDeviceInfo\n-  )\n-  set(AVAILABLE_BACKEND_JAR ${CUDA_BACKEND_JAR})\n-  add_dependencies(info_executables cuda_info)\n-  add_dependencies(backend_libs cuda_backend)\n-\n-  if(is$ENV{ECHO_ONLY} STREQUAL isON )\n-   add_custom_target(echo_only DEPENDS cuda_backend\n-      COMMAND\n-         cat ${CMAKE_BINARY_DIR}\/CMakeFiles\/cuda_info.dir\/link.txt\n-      COMMAND\n-         cat ${CMAKE_BINARY_DIR}\/CMakeFiles\/cuda_backend.dir\/link.txt\n-   )\n-  endif()\n-\n+    add_dependencies(info_executables cuda_info)\n+    add_dependencies(backend_libs cuda_backend)\n@@ -510,1 +360,0 @@\n-\n@@ -551,25 +400,0 @@\n-## SPIRV binaries.\n-## We dont need to guard this yet because we don't need SPIRV headers or libs to link to\n-## if(SPIRV_FOUND)\n-\n-### libspirv_backend.so\/.dylib\n-\n-include_directories(\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-    ${CMAKE_SOURCE_DIR}\/backends\/spirv\/include\n-  )\n-  link_directories(\n-     ${CMAKE_BINARY_DIR}\n-  )\n-\n-  add_library(spirv_backend SHARED\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-    ${CMAKE_SOURCE_DIR}\/backends\/spirv\/cpp\/spirv_backend.cpp\n-  )\n-\n-  target_link_libraries(spirv_backend\n-  )\n-\n-  add_executable(spirv_info\n-      ${CMAKE_SOURCE_DIR}\/backends\/spirv\/cpp\/info.cpp\n-  )\n@@ -577,12 +401,8 @@\n-  target_link_libraries(spirv_info\n-       spirv_backend\n-  )\n-\n-  add_custom_target(spirv_info_exec DEPENDS spirv_backend.jar spirv_backend\n-      COMMAND  ${DOIT}\n-        ${JAVA_HOME}\/bin\/java\n-          --enable-preview --enable-native-access=ALL-UNNAMED\n-          --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-          -classpath ${SPIRV_BACKEND_JAR}:${HAT_JAR}\n-          -Djava.library.path=${CMAKE_BINARY_DIR}\n-          hat.backend.SpirvDeviceInfo\n+add_custom_target(spirv_info_exec DEPENDS spirv_backend.jar spirv_backend\n+   COMMAND  ${DOIT}\n+      ${JAVA_HOME}\/bin\/java\n+        --enable-preview --enable-native-access=ALL-UNNAMED\n+        --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n+        -classpath ${SPIRV_BACKEND_JAR}:${HAT_JAR}\n+        -Djava.library.path=${CMAKE_BINARY_DIR}\n+        hat.backend.SpirvDeviceInfo\n@@ -590,4 +410,2 @@\n-  add_dependencies(info_executables spirv_info)\n-  add_dependencies(backend_libs spirv_backend)\n-#endif()\n-\n+add_dependencies(info_executables spirv_info)\n+add_dependencies(backend_libs spirv_backend)\n@@ -628,31 +446,0 @@\n-\n-\n-## PTX binaries.\n-## We dont need to guard these during initial development because we don't need CUDA headers or libs to link to\n-## if(CUDAToolkit_FOUND)\n-### libptx_backend.so\/.dylib\n-\n-include_directories(\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-    ${CMAKE_SOURCE_DIR}\/backends\/ptx\/include\n-  )\n-  link_directories(\n-     ${CMAKE_BINARY_DIR}\n-  )\n-\n-  add_library(ptx_backend SHARED\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-    ${CMAKE_SOURCE_DIR}\/backends\/ptx\/cpp\/ptx_backend.cpp\n-  )\n-\n-  target_link_libraries(ptx_backend\n-  )\n-\n-  add_executable(ptx_info\n-      ${CMAKE_SOURCE_DIR}\/backends\/ptx\/cpp\/info.cpp\n-  )\n-\n-  target_link_libraries(ptx_info\n-       ptx_backend\n-  )\n-\n@@ -668,2 +455,2 @@\n-  add_dependencies(info_executables ptx_info)\n-  add_dependencies(backend_libs ptx_backend)\n+add_dependencies(info_executables ptx_info)   \n+add_dependencies(backend_libs ptx_backend)    \n@@ -705,28 +492,0 @@\n-## MOCK binaries.\n-## We dont need to guard these because we don't have headers or libs to link to\n-### libmock_backend.so\/.dylib\n-\n-include_directories(\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/include\n-    ${CMAKE_SOURCE_DIR}\/backends\/mock\/include\n-  )\n-  link_directories(\n-     ${CMAKE_BINARY_DIR}\n-  )\n-\n-  add_library(mock_backend SHARED\n-    ${CMAKE_SOURCE_DIR}\/backends\/shared\/cpp\/shared.cpp\n-    ${CMAKE_SOURCE_DIR}\/backends\/mock\/cpp\/mock_backend.cpp\n-  )\n-\n-  target_link_libraries(mock_backend\n-  )\n-\n-  add_executable(mock_info\n-      ${CMAKE_SOURCE_DIR}\/backends\/mock\/cpp\/info.cpp\n-  )\n-\n-  target_link_libraries(mock_info\n-       mock_backend\n-  )\n-\n@@ -742,2 +501,3 @@\n-  add_dependencies(info_executables mock_info)\n-  add_dependencies(backend_libs mock_backend)\n+\n+add_dependencies(info_executables mock_info) \n+add_dependencies(backend_libs mock_backend)  \n@@ -767,1 +527,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n@@ -777,1 +537,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n@@ -786,1 +546,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/ptx\n@@ -828,1 +588,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n@@ -838,1 +598,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n@@ -859,1 +619,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n@@ -869,1 +629,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n@@ -879,1 +639,0 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n@@ -890,1 +649,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n@@ -901,1 +660,1 @@\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n","filename":"hat\/CMakeLists.txt","additions":45,"deletions":286,"binary":false,"changes":331,"status":"modified"},{"patch":"@@ -2,0 +2,2 @@\n+opencl\/build\n+cuda\/build\n","filename":"hat\/backends\/.gitignore","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,43 +4,3 @@\n-set(CMAKE_CXX_STANDARD 14)\n-\n-find_package(OpenCL)\n-find_package(CUDAToolkit)\n-\n-if(OPENCL_FOUND)\n-    message(\"OPENCL\")\n-    if (APPLE)\n-       set(OPENCL_INCLUDE_DIR \"-framework OpenCL\")\n-       set(OPENCL_LIB \"-framework OpenCL\")\n-    else()\n-       #set(OPENCL_INCLUDE_DIR \"-framework OpenCL\")  \n-       set(OPENCL_LIB \"OpenCL\")\n-    endif()\n-\n-    include_directories(\n-        ${CMAKE_SOURCE_DIR}\/opencl\/shared\/include\n-        ${CMAKE_SOURCE_DIR}\/opencl\/include\n-        ${CMAKE_SOURCE_DIR}\/shared\/include\n-        ${OPENCL_INCLUDE_DIR}\n-    )\n-    link_directories(\n-        ${CMAKE_BINARY_DIR}\n-    )\n-\n-    add_library(opencl_backend SHARED\n-        ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n-        ${CMAKE_SOURCE_DIR}\/opencl\/cpp\/opencl_backend.cpp\n-    )\n-\n-    target_link_libraries(opencl_backend\n-        ${OPENCL_LIB}\n-    )\n-\n-    add_executable(opencl_info\n-        ${CMAKE_SOURCE_DIR}\/opencl\/cpp\/info.cpp\n-    )\n-\n-    target_link_libraries(opencl_info\n-        opencl_backend\n-        ${OPENCL_LIB}\n-    )\n-    add_custom_target(opencl_natives DEPENDS opencl_info opencl_backend)\n+if (\"${SHARED_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/shared\")\n+    message(\"SHARED_BACKEND=${SHARED_BACKEND}\")\n@@ -49,34 +9,1 @@\n-if(CUDAToolkit_FOUND)\n-    message(\"CUDA\")\n-\n-    include_directories(\n-            ${CUDAToolkit_INCLUDE_DIR}\n-            ${CMAKE_SOURCE_DIR}\/shared\/include\n-            ${CMAKE_SOURCE_DIR}\/cuda\/include\n-    )\n-\n-    link_directories(\n-            ${CMAKE_BINARY_DIR}\n-            ${CUDAToolkit_LIBRARY_DIR}\n-    )\n-\n-    add_library(cuda_backend SHARED\n-            ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n-            ${CMAKE_SOURCE_DIR}\/cuda\/cpp\/cuda_backend.cpp\n-    )\n-\n-    target_link_libraries(cuda_backend\n-            -lcudart\n-            -lcuda\n-    )\n-\n-    add_executable(cuda_info\n-            ${CMAKE_SOURCE_DIR}\/cuda\/cpp\/info.cpp\n-    )\n-\n-    target_link_libraries(cuda_info\n-            cuda_backend\n-            -lcudart\n-            -lcuda\n-    )\n-    add_custom_target(cuda_natives DEPENDS cuda_info cuda_backend)\n+set(CMAKE_CXX_STANDARD 14)\n@@ -84,0 +11,11 @@\n+include_directories(\n+    ${SHARED_BACKEND}\/include\n+)\n+if (\"${OPENCL_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (OPENCL_BACKEND \"${CMAKE_SOURCE_DIR}\/opencl\")\n+    message(\"OPENCL_BACKEND=${OPENCL_BACKEND}\")\n+endif()\n+add_subdirectory(opencl)\n+if (\"${CUDA_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (CUDA_BACKEND \"${CMAKE_SOURCE_DIR}\/cuda\")\n+    message(\"CUDA_BACKEND=${CUDA_BACKEND}\")\n@@ -85,0 +23,16 @@\n+add_subdirectory(cuda)\n+if (\"${SPIRV_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SPIRV_BACKEND \"${CMAKE_SOURCE_DIR}\/spirv\")\n+    message(\"SPIRV_BACKEND=${SPIRV_BACKEND}\")\n+endif()\n+add_subdirectory(spirv)\n+if (\"${PTX_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\/ptx\")\n+    message(\"PTX_BACKEND=${PTX_BACKEND}\")\n+endif()\n+add_subdirectory(ptx)\n+if (\"${MOCK_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (MOCK_BACKEND \"${CMAKE_SOURCE_DIR}\/mock\")\n+    message(\"MOCK_BACKEND=${MOCK_BACKEND}\")\n+endif()\n+add_subdirectory(mock)\n@@ -86,6 +40,2 @@\n-        ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n-        ${CMAKE_SOURCE_DIR}\/shared\/cpp\/schemadump.cpp\n-)\n-add_library(ptx_backend SHARED\n-        ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n-        ${CMAKE_SOURCE_DIR}\/ptx\/cpp\/ptx_backend.cpp\n+        ${SHARED_BACKEND}\/cpp\/shared.cpp\n+        ${SHARED_BACKEND}\/cpp\/schemadump.cpp\n@@ -93,0 +43,1 @@\n+\n","filename":"hat\/backends\/CMakeLists.txt","additions":34,"deletions":83,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(cuda_backend)\n+\n+set(CMAKE_CXX_STANDARD 14)\n+\n+find_package(CUDAToolkit)\n+if(CUDAToolkit_FOUND)\n+    message(\"CUDA\")\n+\n+    include_directories(\n+            ${CUDAToolkit_INCLUDE_DIR}\n+            ${CMAKE_SOURCE_DIR}\/${SHARED_PATH_ADJUST}\/shared\/include\n+            ${CMAKE_SOURCE_DIR}\/${CUDA_PATH_ADJUST}\/include\n+    )\n+\n+    link_directories(\n+            ${CMAKE_BINARY_DIR}\n+            ${CUDAToolkit_LIBRARY_DIR}\n+    )\n+\n+    add_library(cuda_backend SHARED\n+            ${CMAKE_SOURCE_DIR}\/${SHARED_PATH_ADJUST}\/cpp\/shared.cpp\n+            ${CMAKE_SOURCE_DIR}\/${CUDA_PATH_ADJUST}\/cpp\/cuda_backend.cpp\n+    )\n+\n+    target_link_libraries(cuda_backend\n+            -lcudart\n+            -lcuda\n+    )\n+\n+    add_executable(cuda_info\n+            ${CMAKE_SOURCE_DIR}\/${CUDA_PATH_ADJUST}\/cpp\/info.cpp\n+    )\n+\n+    target_link_libraries(cuda_info\n+            cuda_backend\n+            -lcudart\n+            -lcuda\n+    )\n+    add_custom_target(cuda_natives DEPENDS cuda_info cuda_backend)\n+\n+\n+endif()\n\\ No newline at end of file\n","filename":"hat\/backends\/cuda\/CMakeLists.txt","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(opencl_backend)\n+\n+set(CMAKE_CXX_STANDARD 14)\n+\n+find_package(OpenCL)\n+if (\"${MOCK_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (MOCK_BACKEND \"${CMAKE_SOURCE_DIR}\")\n+    message(\"MOCK_BACKEND=${MOCK_BACKEND}\")\n+endif()\n+if (\"${SHARED_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/..\/shared\")\n+    message(\"SHARED_BACKEND=${SHARED_BACKEND}\")\n+endif()\n+\n+\n+message(\"MOCK\")\n+\n+include_directories(\n+    ${MOCK_BACKEND}\/include\n+    ${SHARED_BACKEND}\/include\n+    ${MOCK_INCLUDE_DIR}\n+)\n+link_directories(\n+    ${CMAKE_BINARY_DIR}\n+)\n+\n+add_library(mock_backend SHARED\n+    ${SHARED_BACKEND}\/cpp\/shared.cpp\n+    ${MOCK_BACKEND}\/cpp\/mock_backend.cpp\n+)\n+\n+\n+add_executable(mock_info\n+    ${MOCK_BACKEND}\/cpp\/info.cpp\n+)\n+\n+target_link_libraries(mock_info\n+    mock_backend\n+)\n+add_custom_target(mock_natives DEPENDS mock_info mock_backend)\n+\n+\n+\n","filename":"hat\/backends\/mock\/CMakeLists.txt","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -36,2 +36,2 @@\n-            MockKernel(Backend::Program *program)\n-                    : Backend::Program::Kernel(program) {\n+            MockKernel(Backend::Program *program, char *name)\n+                    : Backend::Program::Kernel(program, name) {\n@@ -43,2 +43,2 @@\n-            long ndrange(int range, void *argArray) {\n-                std::cout << \"mock ndrange(\" << range << \") \" << std::endl;\n+            long ndrange(void *argArray) {\n+                std::cout << \"mock ndrange() \" << std::endl;\n@@ -58,1 +58,1 @@\n-            return (long) new MockKernel(this);\n+            return (long) new MockKernel(this, name);\n","filename":"hat\/backends\/mock\/cpp\/mock_backend.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(opencl_backend)\n+\n+set(CMAKE_CXX_STANDARD 14)\n+\n+find_package(OpenCL)\n+if(OPENCL_FOUND)\n+    message(\"OPENCL\")\n+    if (\"${OPENCL_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+        set (OPENCL_BACKEND \"${CMAKE_SOURCE_DIR}\")\n+        message(\"OPENCL_BACKEND=${OPENCL_BACKEND}\")\n+    endif()\n+    if (\"${SHARED_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+        set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/..\/shared\")\n+        message(\"SHARED_BACKEND=${SHARED_BACKEND}\")\n+    endif()\n+\n+    if (APPLE)\n+       set(OPENCL_INCLUDE_DIR \"-framework OpenCL\")\n+       set(OPENCL_LIB \"-framework OpenCL\")\n+    else()\n+       set(OPENCL_LIB \"OpenCL\")\n+    endif()\n+\n+    include_directories(\n+        ${OPENCL_BACKEND}\/include\n+        ${SHARED_BACKEND}\/include\n+        ${OPENCL_INCLUDE_DIR}\n+    )\n+    link_directories(\n+        ${CMAKE_BINARY_DIR}\n+    )\n+\n+    add_library(opencl_backend SHARED\n+        ${SHARED_BACKEND}\/cpp\/shared.cpp\n+        ${OPENCL_BACKEND}\/cpp\/opencl_backend.cpp\n+    )\n+\n+    target_link_libraries(opencl_backend\n+        ${OPENCL_LIB}\n+    )\n+\n+    add_executable(opencl_info\n+        ${OPENCL_BACKEND}\/cpp\/info.cpp\n+    )\n+\n+    target_link_libraries(opencl_info\n+        opencl_backend\n+        ${OPENCL_LIB}\n+    )\n+    add_custom_target(opencl_natives DEPENDS opencl_info opencl_backend)\n+endif()\n","filename":"hat\/backends\/opencl\/CMakeLists.txt","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(opencl_backend)\n+\n+set(CMAKE_CXX_STANDARD 14)\n+\n+find_package(OpenCL)\n+if (\"${PTX_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\")\n+    message(\"PTX_BACKEND=${PTX_BACKEND}\")\n+endif()\n+if (\"${SHARED_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/..\/shared\")\n+    message(\"SHARED_BACKEND=${SHARED_BACKEND}\")\n+endif()\n+\n+\n+message(\"PTX\")\n+\n+include_directories(\n+    ${PTX_BACKEND}\/include\n+    ${SHARED_BACKEND}\/include\n+    ${PTX_INCLUDE_DIR}\n+)\n+link_directories(\n+    ${CMAKE_BINARY_DIR}\n+)\n+\n+add_library(ptx_backend SHARED\n+    ${SHARED_BACKEND}\/cpp\/shared.cpp\n+    ${PTX_BACKEND}\/cpp\/ptx_backend.cpp\n+)\n+\n+\n+add_executable(ptx_info\n+    ${PTX_BACKEND}\/cpp\/info.cpp\n+)\n+\n+target_link_libraries(ptx_info\n+    ptx_backend\n+)\n+add_custom_target(ptx_natives DEPENDS ptx_info ptx_backend)\n+\n","filename":"hat\/backends\/ptx\/CMakeLists.txt","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(opencl_backend)\n+\n+set(CMAKE_CXX_STANDARD 14)\n+\n+find_package(OpenCL)\n+if (\"${SPIRV_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SPIRV_BACKEND \"${CMAKE_SOURCE_DIR}\")\n+    message(\"SPIRV_BACKEND=${SPIRV_BACKEND}\")\n+endif()\n+if (\"${SHARED_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+    set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/..\/shared\")\n+    message(\"SHARED_BACKEND=${SHARED_BACKEND}\")\n+endif()\n+\n+message(\"SPIRV\")\n+\n+include_directories(\n+    ${SPIRV_BACKEND}\/include\n+    ${SHARED_BACKEND}\/include\n+    ${SPIRV_INCLUDE_DIR}\n+)\n+link_directories(\n+    ${CMAKE_BINARY_DIR}\n+)\n+\n+add_library(spirv_backend SHARED\n+    ${SHARED_BACKEND}\/cpp\/shared.cpp\n+    ${SPIRV_BACKEND}\/cpp\/spirv_backend.cpp\n+)\n+\n+\n+add_executable(spirv_info\n+    ${SPIRV_BACKEND}\/cpp\/info.cpp\n+)\n+\n+target_link_libraries(spirv_info\n+    spirv_backend\n+)\n+\n+add_custom_target(spirv_natives DEPENDS spirv_info spirv_backend)\n+\n+\n","filename":"hat\/backends\/spirv\/CMakeLists.txt","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -36,2 +36,2 @@\n-            SpirvKernel(Backend::Program *program)\n-                    : Backend::Program::Kernel(program) {\n+            SpirvKernel(Backend::Program *program, char *name)\n+                    : Backend::Program::Kernel(program, name) {\n@@ -43,2 +43,2 @@\n-            long ndrange(int range, void *argArray) {\n-                std::cout << \"spirv ndrange(\" << range << \") \" << std::endl;\n+            long ndrange(void *argArray) {\n+                std::cout << \"spirv ndrange() \" << std::endl;\n@@ -58,1 +58,1 @@\n-            return (long) new SpirvKernel(this);\n+            return (long) new SpirvKernel(this, name);\n","filename":"hat\/backends\/spirv\/cpp\/spirv_backend.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -120,0 +120,31 @@\n+\n+                  <execution>\n+                     <id>cmake1<\/id>\n+                     <phase>test<\/phase>\n+                     <goals>\n+                        <goal>exec<\/goal>\n+                     <\/goals>\n+                     <configuration>\n+                        <executable>cmake<\/executable>\n+                        <arguments>\n+                            <argument>-B<\/argument> <argument>build<\/argument>\n+                        <\/arguments>\n+                     <\/configuration>\n+                  <\/execution>\n+\n+                  <execution>\n+                     <id>cmake2<\/id>\n+                     <phase>test<\/phase>\n+                     <goals>\n+                        <goal>exec<\/goal>\n+                     <\/goals>\n+                     <configuration>\n+                        <executable>cmake<\/executable>\n+                        <arguments>\n+                            <argument>--build<\/argument> <argument>build<\/argument>\n+                            <argument>--target<\/argument> <argument>opencl_backend<\/argument>\n+                        <\/arguments>\n+                     <\/configuration>\n+                  <\/execution>\n+\n+\n@@ -132,1 +163,1 @@\n-                            <argument>-Djava.library.path=build<\/argument>\n+                            <argument>-Djava.library.path=build\/backends\/opencl<\/argument>\n@@ -152,1 +183,1 @@\n-                            <argument>-Djava.library.path=build<\/argument>\n+                            <argument>-Djava.library.path=build\/backends\/opencl<\/argument>\n@@ -172,1 +203,1 @@\n-                            <argument>-Djava.library.path=build<\/argument>\n+                            <argument>-Djava.library.path=build\/backends\/opencl<\/argument>\n","filename":"hat\/pom.xml","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"}]}