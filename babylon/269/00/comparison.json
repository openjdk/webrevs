{"files":[{"patch":"@@ -136,6 +136,8 @@\n-        void popExceptionRegion(CoreOp.ExceptionRegionEnter ers) {\n-            if (erStack.peek().ers != ers) {\n-                \/\/ @@@ Use internal exception type\n-                throw interpreterException(new IllegalStateException(\"Mismatched exception regions\"));\n-            }\n-            erStack.pop();\n+        void popExceptionRegion(CoreOp.ExceptionRegionExit ere) {\n+            ere.catchBlocks().forEach(catchBlock -> {\n+                if (erStack.peek().catchBlock != catchBlock.targetBlock()) {\n+                    \/\/ @@@ Use internal exception type\n+                    throw interpreterException(new IllegalStateException(\"Mismatched exception regions\"));\n+                }\n+                erStack.pop();\n+            });\n@@ -159,0 +161,3 @@\n+            while (erStack.size() > er.erStackDepth()) {\n+                erStack.pop();\n+            }\n@@ -174,0 +179,2 @@\n+\n+        static final Object UINITIALIZED = new Object();\n@@ -192,2 +199,1 @@\n-    record ExceptionRegionRecord(BlockContext mark, CoreOp.ExceptionRegionEnter ers)\n-            implements CoreOp.ExceptionRegion {\n+    record ExceptionRegionRecord(BlockContext mark, int erStackDepth, Block catchBlock) {\n@@ -195,13 +201,10 @@\n-            for (Block.Reference catchBlock : ers.catchBlocks()) {\n-                Block target = catchBlock.targetBlock();\n-                List<Block.Parameter> args = target.parameters();\n-                if (args.size() != 1) {\n-                    throw interpreterException(new IllegalStateException(\"Catch block must have one argument\"));\n-                }\n-                TypeElement et = args.get(0).type();\n-                if (et instanceof VarType vt) {\n-                    et = vt.valueType();\n-                }\n-                if (resolveToClass(l, et).isInstance(e)) {\n-                    return target;\n-                }\n+            List<Block.Parameter> args = catchBlock.parameters();\n+            if (args.size() != 1) {\n+                throw interpreterException(new IllegalStateException(\"Catch block must have one argument\"));\n+            }\n+            TypeElement et = args.get(0).type();\n+            if (et instanceof VarType vt) {\n+                et = vt.valueType();\n+            }\n+            if (resolveToClass(l, et).isInstance(e)) {\n+                return catchBlock;\n@@ -332,4 +335,5 @@\n-                var er = new ExceptionRegionRecord(oc.stack.peek(), ers);\n-                oc.setValue(ers.result(), er);\n-\n-                oc.pushExceptionRegion(er);\n+                int erStackDepth = oc.erStack.size();\n+                ers.catchBlocks().forEach(catchBlock -> {\n+                    var er = new ExceptionRegionRecord(oc.stack.peek(), erStackDepth, catchBlock.targetBlock());\n+                    oc.pushExceptionRegion(er);\n+                });\n@@ -339,1 +343,1 @@\n-                oc.popExceptionRegion(ere.regionStart());\n+                oc.popExceptionRegion(ere);\n@@ -416,6 +420,0 @@\n-            MethodHandle mh;\n-            if (co.hasReceiver()) {\n-                mh = methodHandle(l, co.invokeDescriptor());\n-            } else {\n-                mh = methodStaticHandle(l, co.invokeDescriptor());\n-            }\n@@ -423,0 +421,6 @@\n+            MethodHandles.Lookup il = switch (co.invokeKind()) {\n+                case STATIC, INSTANCE -> l;\n+                case SUPER -> l.in(target.parameterType(0));\n+            };\n+            MethodHandle mh = resolveToMethodHandle(il, co.invokeDescriptor(), co.invokeKind());\n+\n@@ -480,1 +484,4 @@\n-            return new VarBox(oc.getValue(o.operands().get(0)));\n+            Object v = vo.isUninitialized()\n+                    ? VarBox.UINITIALIZED\n+                    : oc.getValue(o.operands().get(0));\n+            return new VarBox(v);\n@@ -485,1 +492,5 @@\n-            return vb.value();\n+            Object value = vb.value();\n+            if (value == VarBox.UINITIALIZED) {\n+                throw interpreterException(new IllegalStateException(\"Loading from uninitialized variable\"));\n+            }\n+            return value;\n@@ -616,8 +627,0 @@\n-    static MethodHandle methodStaticHandle(MethodHandles.Lookup l, MethodRef d) {\n-        return resolveToMethodHandle(l, d);\n-    }\n-\n-    static MethodHandle methodHandle(MethodHandles.Lookup l, MethodRef d) {\n-        return resolveToMethodHandle(l, d);\n-    }\n-\n@@ -659,1 +662,1 @@\n-    static MethodHandle resolveToMethodHandle(MethodHandles.Lookup l, MethodRef d) {\n+    static MethodHandle resolveToMethodHandle(MethodHandles.Lookup l, MethodRef d, CoreOp.InvokeOp.InvokeKind kind) {\n@@ -661,1 +664,1 @@\n-            return d.resolveToHandle(l);\n+            return d.resolveToHandle(l, kind);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":47,"deletions":44,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -1402,0 +1402,19 @@\n+\n+        \/**\n+         * The kind of invocation.\n+         *\/\n+        public enum InvokeKind {\n+            \/**\n+             * An invocation on a class (static) method.\n+             *\/\n+            STATIC,\n+            \/**\n+             * An invocation on an instance method.\n+             *\/\n+            INSTANCE,\n+            \/**\n+             * A super invocation on an instance method.\n+             *\/\n+            SUPER\n+        }\n+\n@@ -1404,0 +1423,2 @@\n+        public static final String ATTRIBUTE_INVOKE_KIND = NAME + \".kind\";\n+        public static final String ATTRIBUTE_INVOKE_VARARGS = NAME + \".varargs\";\n@@ -1405,0 +1426,2 @@\n+        final InvokeKind invokeKind;\n+        final boolean isVarArgs;\n@@ -1409,0 +1432,1 @@\n+            \/\/ Required attribute\n@@ -1413,1 +1437,10 @@\n-                        case null, default -> throw new UnsupportedOperationException(\"Unsupported invoke descriptor value:\" + v);\n+                        case null, default ->\n+                                throw new UnsupportedOperationException(\"Unsupported invoke descriptor value:\" + v);\n+                    });\n+\n+            \/\/ If not present defaults to false\n+            boolean isVarArgs = def.extractAttributeValue(ATTRIBUTE_INVOKE_VARARGS,\n+                    false, v -> switch (v) {\n+                        case String s -> Boolean.valueOf(s);\n+                        case Boolean b -> b;\n+                        case null, default -> false;\n@@ -1416,1 +1449,21 @@\n-            return new InvokeOp(def, invokeDescriptor);\n+            \/\/ If not present and is not varargs defaults to class or instance invocation\n+            \/\/ based on number of operands and parameters\n+            InvokeKind ik = def.extractAttributeValue(ATTRIBUTE_INVOKE_KIND,\n+                    false, v -> switch (v) {\n+                        case String s -> InvokeKind.valueOf(s);\n+                        case InvokeKind k -> k;\n+                        case null, default -> {\n+                            if (isVarArgs) {\n+                                \/\/ If varargs then we cannot infer invoke kind\n+                                throw new UnsupportedOperationException(\"Unsupported invoke kind value:\" + v);\n+                            }\n+                            int paramCount = invokeDescriptor.type().parameterTypes().size();\n+                            int argCount = def.operands().size();\n+                            yield (argCount == paramCount + 1)\n+                                    ? InvokeKind.INSTANCE\n+                                    : InvokeKind.STATIC;\n+                        }\n+                    });\n+\n+\n+            return new InvokeOp(def, ik, isVarArgs, invokeDescriptor);\n@@ -1419,1 +1472,1 @@\n-        InvokeOp(ExternalizedOp def, MethodRef invokeDescriptor) {\n+        InvokeOp(ExternalizedOp def, InvokeKind invokeKind, boolean isVarArgs, MethodRef invokeDescriptor) {\n@@ -1422,0 +1475,4 @@\n+            validateArgCount(invokeKind, isVarArgs, invokeDescriptor, def.operands());\n+\n+            this.invokeKind = invokeKind;\n+            this.isVarArgs = isVarArgs;\n@@ -1429,0 +1486,2 @@\n+            this.invokeKind = that.invokeKind;\n+            this.isVarArgs = that.isVarArgs;\n@@ -1438,5 +1497,1 @@\n-        InvokeOp(MethodRef invokeDescriptor, List<Value> args) {\n-            this(invokeDescriptor.type().returnType(), invokeDescriptor, args);\n-        }\n-\n-        InvokeOp(TypeElement resultType, MethodRef invokeDescriptor, List<Value> args) {\n+        InvokeOp(InvokeKind invokeKind, boolean isVarArgs, TypeElement resultType, MethodRef invokeDescriptor, List<Value> args) {\n@@ -1445,0 +1500,4 @@\n+            validateArgCount(invokeKind, isVarArgs, invokeDescriptor, args);\n+\n+            this.invokeKind = invokeKind;\n+            this.isVarArgs = isVarArgs;\n@@ -1449,0 +1508,9 @@\n+        static void validateArgCount(InvokeKind invokeKind, boolean isVarArgs, MethodRef invokeDescriptor, List<Value> operands) {\n+            int paramCount = invokeDescriptor.type().parameterTypes().size();\n+            int argCount = operands.size() - (invokeKind == InvokeKind.STATIC ? 0 : 1);\n+            if ((!isVarArgs && argCount != paramCount)\n+                    || argCount < paramCount - 1) {\n+                throw new IllegalArgumentException(invokeKind + \" \" + isVarArgs + \" \" + invokeDescriptor);\n+            }\n+        }\n+\n@@ -1453,0 +1521,10 @@\n+            if (isVarArgs) {\n+                \/\/ If varargs then we need to declare the invoke.kind attribute\n+                \/\/ Given a method `A::m(A... more)` and an invocation with one\n+                \/\/ operand, we don't know if that operand corresponds to the\n+                \/\/ receiver or a method argument\n+                m.put(ATTRIBUTE_INVOKE_KIND, invokeKind);\n+                m.put(ATTRIBUTE_INVOKE_VARARGS, isVarArgs);\n+            } else if (invokeKind == InvokeKind.SUPER) {\n+                m.put(ATTRIBUTE_INVOKE_KIND, invokeKind);\n+            }\n@@ -1456,0 +1534,8 @@\n+        public InvokeKind invokeKind() {\n+            return invokeKind;\n+        }\n+\n+        public boolean isVarArgs() {\n+            return isVarArgs;\n+        }\n+\n@@ -1460,0 +1546,1 @@\n+        \/\/ @@@ remove?\n@@ -1461,1 +1548,13 @@\n-            return operands().size() != invokeDescriptor().type().parameterTypes().size();\n+            return invokeKind != InvokeKind.STATIC;\n+        }\n+\n+        public List<Value> varArgOperands() {\n+            if (!isVarArgs) {\n+                return null;\n+            }\n+\n+            int operandCount = operands().size();\n+            int argCount = operandCount - (invokeKind == InvokeKind.STATIC ? 0 : 1);\n+            int paramCount = invokeDescriptor.type().parameterTypes().size();\n+            int varArgCount = argCount - (paramCount - 1);\n+            return operands().subList(operandCount - varArgCount, operandCount);\n@@ -2037,1 +2136,0 @@\n-\n@@ -2077,2 +2175,2 @@\n-            if (def.operands().size() != 1) {\n-                throw new IllegalStateException(\"Operation must have one operand\");\n+            if (def.operands().size() > 1) {\n+                throw new IllegalStateException(\"Operation must have zero or one operand\");\n@@ -2084,1 +2182,1 @@\n-                        case null -> null;\n+                        case null -> \"\";\n@@ -2106,1 +2204,1 @@\n-            return resultType().valueType().equals(initOperand().type());\n+            return !isUninitialized() && resultType().valueType().equals(initOperand().type());\n@@ -2121,1 +2219,10 @@\n-            this.varName = varName;\n+            this.varName =  varName == null ? \"\" : varName;\n+            this.resultType = VarType.varType(type);\n+        }\n+\n+        \/\/ @@@ This and the above constructor can be merged when\n+        \/\/ statements before super can be used in the jdk.compiler module\n+        VarOp(String varName, TypeElement type) {\n+            super(NAME, List.of());\n+\n+            this.varName =  varName == null ? \"\" : varName;\n@@ -2127,1 +2234,1 @@\n-            if (varName == null) {\n+            if (isUnnamedVariable()) {\n@@ -2137,0 +2244,3 @@\n+            if (operands().isEmpty()) {\n+                throw new IllegalStateException(\"Uninitialized variable\");\n+            }\n@@ -2152,0 +2262,8 @@\n+\n+        public boolean isUnnamedVariable() {\n+            return varName.isEmpty();\n+        }\n+\n+        public boolean isUninitialized() {\n+            return operands().isEmpty();\n+        }\n@@ -2465,13 +2583,0 @@\n-    \/\/ @@@ Sealed\n-    \/\/ Synthetic\/hidden type that is the result type of an ExceptionRegionStart operation\n-    \/\/ and is an operand of an ExceptionRegionEnd operation\n-\n-    \/**\n-     * A synthetic exception region type, that is the operation result-type of an exception region\n-     * start operation.\n-     *\/\n-    \/\/ @@@: Create as new type element\n-    public interface ExceptionRegion {\n-        TypeElement EXCEPTION_REGION_TYPE = JavaType.type(ExceptionRegion.class);\n-    }\n-\n@@ -2538,1 +2643,1 @@\n-            return ExceptionRegion.EXCEPTION_REGION_TYPE;\n+            return JavaType.VOID;\n@@ -2550,1 +2655,3 @@\n-        final Block.Reference end;\n+        \/\/ First successor is the non-exceptional successor whose target indicates\n+        \/\/ the first block following the exception region.\n+        final List<Block.Reference> s;\n@@ -2555,6 +2662,2 @@\n-            if (def.operands().size() != 1) {\n-                throw new IllegalArgumentException(\"Operation must have one operand\" + def.name());\n-            }\n-\n-            if (def.successors().size() != 1) {\n-                throw new IllegalArgumentException(\"Operation must have one successor\" + def.name());\n+            if (def.successors().size() < 2) {\n+                throw new IllegalArgumentException(\"Operation must have two or more successors\" + def.name());\n@@ -2563,1 +2666,1 @@\n-            this.end = def.successors().get(0);\n+            this.s = List.copyOf(def.successors());\n@@ -2569,1 +2672,1 @@\n-            this.end = cc.getSuccessorOrCreate(that.end);\n+            this.s = that.s.stream().map(cc::getSuccessorOrCreate).toList();\n@@ -2577,5 +2680,2 @@\n-        ExceptionRegionExit(Value exceptionRegion, Block.Reference end) {\n-            super(NAME, checkValue(exceptionRegion));\n-\n-            this.end = end;\n-        }\n+        ExceptionRegionExit(List<Block.Reference> s) {\n+            super(NAME, List.of());\n@@ -2583,4 +2683,2 @@\n-        static List<Value> checkValue(Value er) {\n-            if (!(er instanceof Result or && or.op() instanceof ExceptionRegionEnter)) {\n-                throw new IllegalArgumentException(\n-                        \"Operand not the result of an exception.region.start operation: \" + er);\n+            if (s.size() < 2) {\n+                throw new IllegalArgumentException(\"Operation must have two or more successors\" + opName());\n@@ -2589,1 +2687,1 @@\n-            return List.of(er);\n+            this.s = List.copyOf(s);\n@@ -2594,1 +2692,1 @@\n-            return List.of(end);\n+            return s;\n@@ -2598,1 +2696,1 @@\n-            return end;\n+            return s.get(0);\n@@ -2601,6 +2699,2 @@\n-        public ExceptionRegionEnter regionStart() {\n-            if (operands().get(0) instanceof Result or &&\n-                    or.op() instanceof ExceptionRegionEnter ers) {\n-                return ers;\n-            }\n-            throw new InternalError(\"Should not reach here\");\n+        public List<Block.Reference> catchBlocks() {\n+            return s.subList(1, s.size());\n@@ -3500,1 +3594,0 @@\n-     * @param exceptionRegion the exception region to be exited\n@@ -3502,0 +3595,1 @@\n+     * @param catchers the blocks handling exceptions thrown by the region block\n@@ -3504,2 +3598,16 @@\n-    public static ExceptionRegionExit exceptionRegionExit(Value exceptionRegion, Block.Reference end) {\n-        return new ExceptionRegionExit(exceptionRegion, end);\n+    public static ExceptionRegionExit exceptionRegionExit(Block.Reference end, Block.Reference... catchers) {\n+        return exceptionRegionExit(end, List.of(catchers));\n+    }\n+\n+    \/**\n+     * Creates an exception region exit operation\n+     *\n+     * @param end             the block to which control is transferred after the exception region is exited\n+     * @param catchers the blocks handling exceptions thrown by the region block\n+     * @return the exception region exit operation\n+     *\/\n+    public static ExceptionRegionExit exceptionRegionExit(Block.Reference end, List<Block.Reference> catchers) {\n+        List<Block.Reference> s = new ArrayList<>();\n+        s.add(end);\n+        s.addAll(catchers);\n+        return new ExceptionRegionExit(s);\n@@ -3618,1 +3726,11 @@\n-     * Creates an invoke operation.\n+     * Creates an invoke operation modeling an invocation to an\n+     * instance or static (class) method with no variable arguments.\n+     * <p>\n+     * The invoke kind of the invoke operation is determined by\n+     * comparing the argument count with the invoke descriptor's\n+     * parameter count. If they are equal then the invoke kind is\n+     * {@link InvokeOp.InvokeKind#STATIC static}. If the parameter count\n+     * plus one is equal to the argument count then the invoke kind\n+     * is {@link InvokeOp.InvokeKind#STATIC instance}.\n+     * <p>\n+     * The invoke return type is the invoke descriptors return type.\n@@ -3620,1 +3738,1 @@\n-     * @param invokeDescriptor the invocation descriptor\n+     * @param invokeDescriptor the invoke descriptor\n@@ -3625,1 +3743,1 @@\n-        return new InvokeOp(invokeDescriptor, List.of(args));\n+        return invoke(invokeDescriptor, List.of(args));\n@@ -3629,1 +3747,11 @@\n-     * Creates an invoke operation.\n+     * Creates an invoke operation modeling an invocation to an\n+     * instance or static (class) method with no variable arguments.\n+     * <p>\n+     * The invoke kind of the invoke operation is determined by\n+     * comparing the argument count with the invoke descriptor's\n+     * parameter count. If they are equal then the invoke kind is\n+     * {@link InvokeOp.InvokeKind#STATIC static}. If the parameter count\n+     * plus one is equal to the argument count then the invoke kind\n+     * is {@link InvokeOp.InvokeKind#STATIC instance}.\n+     * <p>\n+     * The invoke return type is the invoke descriptors return type.\n@@ -3631,2 +3759,2 @@\n-     * @param invokeDescriptor the invocation descriptor\n-     * @param args             the invoke parameters\n+     * @param invokeDescriptor the invoke descriptor\n+     * @param args             the invoke arguments\n@@ -3636,1 +3764,1 @@\n-        return new InvokeOp(invokeDescriptor, args);\n+        return invoke(invokeDescriptor.type().returnType(), invokeDescriptor, args);\n@@ -3640,1 +3768,9 @@\n-     * Creates an invoke operation.\n+     * Creates an invoke operation modeling an invocation to an\n+     * instance or static (class) method with no variable arguments.\n+     * <p>\n+     * The invoke kind of the invoke operation is determined by\n+     * comparing the argument count with the invoke descriptor's\n+     * parameter count. If they are equal then the invoke kind is\n+     * {@link InvokeOp.InvokeKind#STATIC static}. If the parameter count\n+     * plus one is equal to the argument count then the invoke kind\n+     * is {@link InvokeOp.InvokeKind#STATIC instance}.\n@@ -3642,3 +3778,3 @@\n-     * @param returnType       the invocation return type\n-     * @param invokeDescriptor the invocation descriptor\n-     * @param args             the invoke parameters\n+     * @param returnType       the invoke return type\n+     * @param invokeDescriptor the invoke descriptor\n+     * @param args             the invoke arguments\n@@ -3648,1 +3784,1 @@\n-        return new InvokeOp(returnType, invokeDescriptor, List.of(args));\n+        return invoke(returnType, invokeDescriptor, List.of(args));\n@@ -3652,1 +3788,9 @@\n-     * Creates an invoke operation.\n+     * Creates an invoke operation modeling an invocation to an\n+     * instance or static (class) method with no variable arguments.\n+     * <p>\n+     * The invoke kind of the invoke operation is determined by\n+     * comparing the argument count with the invoke descriptor's\n+     * parameter count. If they are equal then the invoke kind is\n+     * {@link InvokeOp.InvokeKind#STATIC static}. If the parameter count\n+     * plus one is equal to the argument count then the invoke kind\n+     * is {@link InvokeOp.InvokeKind#STATIC instance}.\n@@ -3654,4 +3798,4 @@\n-     * @param returnType       the invocation return type\n-     * @param invokeDescriptor the invocation descriptor\n-     * @param args             the invoke parameters\n-     * @return the invoke operation\n+     * @param returnType       the invoke return type\n+     * @param invokeDescriptor the invoke descriptor\n+     * @param args             the invoke arguments\n+     * @return the invoke super operation\n@@ -3660,1 +3804,23 @@\n-        return new InvokeOp(returnType, invokeDescriptor, args);\n+        int paramCount = invokeDescriptor.type().parameterTypes().size();\n+        int argCount = args.size();\n+        InvokeOp.InvokeKind ik = (argCount == paramCount + 1)\n+                ? InvokeOp.InvokeKind.INSTANCE\n+                : InvokeOp.InvokeKind.STATIC;\n+        return new InvokeOp(ik, false, returnType, invokeDescriptor, args);\n+    }\n+\n+    \/**\n+     * Creates an invoke operation modelling an invocation to a method.\n+     *\n+     * @param invokeKind       the invoke kind\n+     * @param isVarArgs        true if an invocation to a variable argument method\n+     * @param returnType       the return type\n+     * @param invokeDescriptor the invoke descriptor\n+     * @param args             the invoke arguments\n+     * @return the invoke operation\n+     * @throws IllegalArgumentException if there is a mismatch between the argument count\n+     *                                  and the invoke descriptors parameter count.\n+     *\/\n+    public static InvokeOp invoke(InvokeOp.InvokeKind invokeKind, boolean isVarArgs,\n+                                  TypeElement returnType, MethodRef invokeDescriptor, List<Value> args) {\n+        return new InvokeOp(invokeKind, isVarArgs, returnType, invokeDescriptor, args);\n@@ -3870,1 +4036,23 @@\n-     * Creates a var operation.\n+     * Creates a var operation modeling an unnamed and uninitialized variable,\n+     * either an unnamed local variable or an unnamed parameter.\n+     *\n+     * @param type the type of the var's value\n+     * @return the var operation\n+     *\/\n+    public static VarOp var(TypeElement type) {\n+        return var(null, type, null);\n+    }\n+\n+    \/**\n+     * Creates a var operation modeling an uninitialized variable, either a local variable or a parameter.\n+     *\n+     * @param name the name of the var\n+     * @param type the type of the var's value\n+     * @return the var operation\n+     *\/\n+    public static VarOp var(String name, TypeElement type) {\n+        return new VarOp(name, type);\n+    }\n+\n+    \/**\n+     * Creates a var operation modeling an unnamed variable, either an unnamed local variable or an unnamed parameter.\n@@ -3880,1 +4068,3 @@\n-     * Creates a var operation.\n+     * Creates a var operation modeling a variable, either a local variable or a parameter.\n+     * <p>\n+     * If the given name is {@code null} or an empty string then the variable is an unnamed variable.\n@@ -3891,1 +4081,3 @@\n-     * Creates a var operation.\n+     * Creates a var operation modeling a variable, either a local variable or a parameter.\n+     * <p>\n+     * If the given name is {@code null} or an empty string then the variable is an unnamed variable.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":273,"deletions":81,"binary":false,"changes":354,"status":"modified"}]}