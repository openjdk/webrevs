{"files":[{"patch":"@@ -101,1 +101,1 @@\n-        : Backend(mode), cudaConfig(mode), cudaQueue(this), device(),context()  {\n+        : Backend(mode), initStatus(cuInit(0)), cudaConfig(mode), cudaQueue(this), device(),context()  {\n@@ -105,3 +105,3 @@\n-    CUresult status = cuInit(0);\n-    if (status == CUDA_SUCCESS) {\n-        status  = cuDeviceGetCount(&deviceCount);\n+\n+    if (initStatus == CUDA_SUCCESS) {\n+        CUresult status =  cuDeviceGetCount(&deviceCount);\n@@ -138,0 +138,1 @@\n+        cudaQueue.init();\n@@ -139,2 +140,2 @@\n-        std::cerr << \"cuInit() failed we seem to have the runtime library but no device, no context, nada CUDA error = \" << status\n-                  <<\" \" << cudaGetErrorString(static_cast<cudaError_t>(status))\n+        std::cerr << \"cuInit() failed we seem to have the runtime library but no device, no context, nada CUDA error = \" << initStatus\n+                  <<\" \" << cudaGetErrorString(static_cast<cudaError_t>(initStatus))\n@@ -231,2 +232,2 @@\n-    std::cout << \"inside compile\" << std::endl;\n-    std::cout << \"cuda \" << cudaSource->text << std::endl;\n+  \/\/  std::cout << \"inside compile\" << std::endl;\n+   \/\/ std::cout << \"cuda \" << cudaSource->text << std::endl;\n@@ -266,1 +267,1 @@\n-long CudaBackend::compile(int len, char *source) {\n+Backend::CompilationUnit * CudaBackend::compile(int len, char *source) {\n@@ -296,2 +297,3 @@\n-        return reinterpret_cast<long>(new CudaModule(this,  ptx->text,jitLogBuffer,true, module));\n-\n+        return dynamic_cast<Backend::CompilationUnit*>(new CudaModule(this,  ptx->text,jitLogBuffer,true, module));\n+  \/\/      return reinterpret_cast<long>(new CudaModule(this,  ptx->text,jitLogBuffer,true, module));\n+\/\/\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,1 +39,4 @@\n-    std::cout << \"cuMemAlloc()\" << std::endl;\n+    auto cudaBackend = dynamic_cast<CudaBackend*>(backend);\n+    if (cudaBackend->cudaConfig.traceCalls) {\n+        std::cout << \"cuMemAlloc()\" << std::endl;\n+    }\n@@ -42,1 +45,1 @@\n-        std::cerr << \"cuMemFree() CUDA error = \" << status\n+        std::cerr << \"cuMemAlloc() CUDA error = \" << status\n@@ -47,1 +50,1 @@\n-    std::cout << \"devptr \" << std::hex<<  (long)devicePtr <<std::dec <<std::endl;\n+   \/\/ std::cout << \"devptr \" << std::hex<<  (long)devicePtr <<std::dec <<std::endl;\n@@ -52,4 +55,6 @@\n-\n-    std::cout << \"cuMemFree()\"\n-            << \"devptr \" << std::hex<<  (long)devicePtr <<std::dec\n-            << std::endl;\n+    auto cudaBackend = dynamic_cast<CudaBackend*>(backend);\n+    if (cudaBackend->cudaConfig.traceCalls) {\n+        std::cout << \"cuMemFree()\"\n+                  << \"devptr \" << std::hex << (long) devicePtr << std::dec\n+                  << std::endl;\n+    }\n@@ -76,1 +81,2 @@\n-    CUresult status = cuMemcpyHtoDAsync(devicePtr, arg->value.buffer.memorySegment, arg->value.buffer.sizeInBytes,cudaBackend->cudaQueue.cudaStream);\n+    CUresult status = cuMemcpyHtoDAsync(devicePtr, arg->value.buffer.memorySegment,\n+                                        arg->value.buffer.sizeInBytes,cudaBackend->cudaQueue.cuStream);\n@@ -83,1 +89,1 @@\n-    status = static_cast<CUresult >(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n+    status = static_cast<CUresult >(cudaStreamSynchronize(cudaBackend->cudaQueue.cuStream));\n@@ -99,1 +105,2 @@\n-    CUresult status =cuMemcpyDtoHAsync(arg->value.buffer.memorySegment, devicePtr, arg->value.buffer.sizeInBytes,cudaBackend->cudaQueue.cudaStream);\n+    CUresult status =cuMemcpyDtoHAsync(arg->value.buffer.memorySegment, devicePtr, arg->value.buffer.sizeInBytes,\n+                                       cudaBackend->cudaQueue.cuStream);\n@@ -106,1 +113,1 @@\n-    cudaError_t t1 = cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream);\n+    cudaError_t t1 = cudaStreamSynchronize(cudaBackend->cudaQueue.cuStream);\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_buffer.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -85,5 +85,5 @@\n-    std::cout << \"Running the kernel...\" << std::endl;\n-    std::cout << \"   Requested range   = \" << range << std::endl;\n-    std::cout << \"   Range mod 1024    = \" << rangemod1024 << std::endl;\n-    std::cout << \"   Actual range 1024 = \" << (rangediv1024 * 1024) << std::endl;\n-    auto status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n+   \/\/ std::cout << \"Running the kernel...\" << std::endl;\n+   \/\/ std::cout << \"   Requested range   = \" << range << std::endl;\n+   \/\/ std::cout << \"   Range mod 1024    = \" << rangemod1024 << std::endl;\n+   \/\/ std::cout << \"   Actual range 1024 = \" << (rangediv1024 * 1024) << std::endl;\n+    auto status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cuStream));\n@@ -104,1 +104,1 @@\n-    std::cout <<\" function\/kernel id= \" << function << \" stream = \" << cudaBackend->cudaQueue.cudaStream<<std::endl;\n+   \/\/ std::cout <<\" function\/kernel id= \" << function << \" stream = \" << cudaBackend->cudaQueue.cuStream<<std::endl;\n@@ -108,1 +108,1 @@\n-                                   0, nullptr \/*cudaBackend->cudaQueue.cudaStream *\/,\n+                                   0, cudaBackend->cudaQueue.cuStream ,\n@@ -117,1 +117,1 @@\n-    status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n+    status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cuStream));\n@@ -125,1 +125,1 @@\n-    std::cout << \"Kernel complete...\"<<cudaGetErrorString(static_cast<cudaError_t>(status))<<std::endl;\n+   \/\/ std::cout << \"Kernel complete...\"<<cudaGetErrorString(static_cast<cudaError_t>(status))<<std::endl;\n@@ -135,1 +135,1 @@\n-    status=   static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n+    status=   static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cuStream));\n@@ -146,3 +146,3 @@\n-            \/\/auto bufferState = BufferState_s::of(arg)->vendorPtr;\n-            \/\/auto cudaBuffer = static_cast<CudaBuffer *>(bufferState);\n-            \/\/delete cudaBuffer;\n+            auto bufferState = BufferState_s::of(arg)->vendorPtr;\n+            auto cudaBuffer = static_cast<CudaBuffer *>(bufferState);\n+            delete cudaBuffer;\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_kernel.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-long CudaBackend::CudaModule::getKernel(int len, char *name) {\n+Backend::CompilationUnit::Kernel * CudaBackend::CudaModule::getKernel(int len, char *name) {\n@@ -41,2 +41,2 @@\n-    long kernelHandle =  reinterpret_cast<long>(cudaKernel);\n-    return kernelHandle;\n+    return dynamic_cast<Backend::CompilationUnit::Kernel *>(cudaKernel);\n+\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_module.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,5 @@\n-        : Backend::Queue(backend),cudaStream(){\n-    auto status =  cudaStreamCreate(&cudaStream);\n-    if (::cudaSuccess != status) {\n+        : Backend::Queue(backend),cuStream() {\n+}\n+void CudaBackend::CudaQueue::init(){\n+    auto status =  cuStreamCreate(&cuStream,CU_STREAM_DEFAULT);\n+    if (CUDA_SUCCESS != status) {\n@@ -165,3 +167,3 @@\n-   auto status = cudaStreamDestroy(cudaStream);\n-    if (::cudaSuccess != status) {\n-        std::cerr << \"cudaStreamDestroy() CUDA error = \" << status\n+   auto status = cuStreamDestroy(cuStream);\n+    if (CUDA_SUCCESS != status) {\n+        std::cerr << \"cuStreamDestroy() CUDA error = \" << status\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_queue.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,6 @@\n+class KernelContext{\n+public:\n+int x;\n+int maxX;\n+BufferState_s bufferState;\n+};\n@@ -33,0 +39,1 @@\n+\n@@ -36,0 +43,1 @@\n+    BufferState_s bufferState;\n@@ -135,1 +143,1 @@\n-\n+int maxX = 1024;\n@@ -139,1 +147,1 @@\n-    ndrange->maxX=1024;\n+    ndrange->maxX=maxX;\n@@ -141,1 +149,1 @@\n-    s32Array1024->length=1024;\n+    s32Array1024->length=maxX;\n@@ -154,1 +162,2 @@\n-        std::cout << i << \" array[\"<<i<<\"]=\"<<s32Array1024->array[i] <<std::endl;\n+        int sq = s32Array1024->array[i];\n+        std::cout << i << \" sq=\"<<sq <<std::endl;\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/squares.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        cudaStream_t cudaStream;\n+        CUstream cuStream;\n@@ -96,0 +96,1 @@\n+        void init();\n@@ -151,1 +152,1 @@\n-        long getKernel(int nameLen, char *name);\n+        Kernel *getKernel(int nameLen, char *name);\n@@ -160,0 +161,1 @@\n+    CUresult initStatus;\n@@ -170,4 +172,4 @@\n-    long compile(int len, char *source);\n-    void computeStart();\n-    void computeEnd();\n-    bool getBufferFromDeviceIfDirty(void *memorySegment, long memorySegmentLength);\n+    Backend::CompilationUnit * compile(int len, char *source) override;\n+    void computeStart() override;\n+    void computeEnd() override;\n+    bool getBufferFromDeviceIfDirty(void *memorySegment, long memorySegmentLength) override;\n","filename":"hat\/backends\/ffi\/cuda\/include\/cuda_backend.h","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n+   \/\/ std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n@@ -245,1 +245,1 @@\n-    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n+   \/\/ std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n@@ -249,1 +249,1 @@\n-    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n+  \/\/  std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n","filename":"hat\/backends\/ffi\/shared\/cpp\/shared.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}