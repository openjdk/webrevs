{"files":[{"patch":"@@ -2946,3 +2946,3 @@\n-        @OpFactory.OpDeclaration(BindingPatternOp.NAME)\n-        public static final class BindingPatternOp extends PatternOp {\n-            public static final String NAME = \"pattern.binding\";\n+        @OpFactory.OpDeclaration(TypePatternOp.NAME)\n+        public static final class TypePatternOp extends PatternOp {\n+            public static final String NAME = \"pattern.type\";\n@@ -2955,1 +2955,1 @@\n-            public static BindingPatternOp create(ExternalizedOp def) {\n+            public static TypePatternOp create(ExternalizedOp def) {\n@@ -2959,2 +2959,2 @@\n-                            case null, default ->\n-                                    throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n+                            case null -> null;\n+                            default -> throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n@@ -2962,1 +2962,1 @@\n-                return new BindingPatternOp(def, name);\n+                return new TypePatternOp(def, name);\n@@ -2965,1 +2965,1 @@\n-            BindingPatternOp(ExternalizedOp def, String bindingName) {\n+            TypePatternOp(ExternalizedOp def, String bindingName) {\n@@ -2972,1 +2972,1 @@\n-            BindingPatternOp(BindingPatternOp that, CopyContext cc) {\n+            TypePatternOp(TypePatternOp that, CopyContext cc) {\n@@ -2980,2 +2980,2 @@\n-            public BindingPatternOp transform(CopyContext cc, OpTransformer ot) {\n-                return new BindingPatternOp(this, cc);\n+            public TypePatternOp transform(CopyContext cc, OpTransformer ot) {\n+                return new TypePatternOp(this, cc);\n@@ -2984,1 +2984,1 @@\n-            BindingPatternOp(TypeElement targetType, String bindingName) {\n+            TypePatternOp(TypeElement targetType, String bindingName) {\n@@ -2994,1 +2994,3 @@\n-                attrs.put(\"\", bindingName);\n+                if (bindingName != null) {\n+                    attrs.put(\"\", bindingName);\n+                }\n@@ -3184,1 +3186,1 @@\n-                } else if (pattern instanceof ExtendedOp.PatternOps.BindingPatternOp bp) {\n+                } else if (pattern instanceof TypePatternOp bp) {\n@@ -3221,1 +3223,1 @@\n-                                                     ExtendedOp.PatternOps.BindingPatternOp bpOp, Value target) {\n+                                                     TypePatternOp bpOp, Value target) {\n@@ -3687,2 +3689,2 @@\n-    public static PatternOps.BindingPatternOp bindingPattern(TypeElement type, String bindingName) {\n-        return new PatternOps.BindingPatternOp(type, bindingName);\n+    public static PatternOps.TypePatternOp typePattern(TypeElement type, String bindingName) {\n+        return new PatternOps.TypePatternOp(type, bindingName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1224,3 +1224,6 @@\n-                    variables.add(var);\n-\n-                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    boolean unnamedPatternVariable = var.name.isEmpty();\n+                    if (!unnamedPatternVariable) {\n+                        variables.add(var);\n+                    }\n+                    String bindingName = unnamedPatternVariable ? null : var.name.toString();\n+                    result = append(ExtendedOp.typePattern(typeToTypeElement(var.type), bindingName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -73,1 +73,1 @@\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -112,1 +112,1 @@\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -170,2 +170,2 @@\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ConcretePoint> = pattern.binding @\"p\";\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$Color> = pattern.binding @\"c\";\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ConcretePoint> = pattern.type @\"p\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$Color> = pattern.type @\"c\";\n@@ -173,1 +173,1 @@\n-                                %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ColoredPoint> = pattern.binding @\"lr\";\n+                                %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ColoredPoint> = pattern.type @\"lr\";\n@@ -231,1 +231,1 @@\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -269,1 +269,1 @@\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -316,1 +316,1 @@\n-                                        %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                        %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n@@ -350,0 +350,20 @@\n+\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                %3 : java.lang.Object = var.load %2;\n+                %4 : boolean = pattern.match %3\n+                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    };\n+                return %4;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test8(Object o) {\n+        return o instanceof String _;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n@@ -364,1 +364,1 @@\n-                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -417,1 +417,1 @@\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n@@ -436,1 +436,1 @@\n-                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -463,1 +463,1 @@\n-                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -828,1 +828,1 @@\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.binding @\"o\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.type @\"o\";\n@@ -867,1 +867,1 @@\n-                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchExpressionTest2$B> = pattern.binding @\"b\";\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchExpressionTest2$B> = pattern.type @\"b\";\n@@ -883,1 +883,1 @@\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = pattern.binding @\"c\";\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = pattern.type @\"c\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1107,1 +1107,1 @@\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> = pattern.binding @\"k\";\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> = pattern.type @\"k\";\n@@ -1126,1 +1126,1 @@\n-                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> = pattern.binding @\"j\";\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> = pattern.type @\"j\";\n@@ -1188,1 +1188,1 @@\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.binding @\"o\";\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.type @\"o\";\n@@ -1232,1 +1232,1 @@\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.type @\"i\";\n@@ -1251,1 +1251,1 @@\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -1307,1 +1307,1 @@\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.type @\"i\";\n@@ -1326,1 +1326,1 @@\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -1388,1 +1388,1 @@\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.type @\"i\";\n@@ -1407,1 +1407,1 @@\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -1468,1 +1468,1 @@\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n@@ -1484,1 +1484,1 @@\n-                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -1568,1 +1568,1 @@\n-                                          %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                          %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.type @\"i\";\n@@ -1598,1 +1598,1 @@\n-                                          %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                          %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.type @\"i\";\n@@ -1657,12 +1657,2 @@\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"\";\n-                %7 : java.util.RandomAccess = constant @null;\n-                %8 : Var<java.util.RandomAccess> = var %7 @\"\";\n-                %9 : int[] = constant @null;\n-                %10 : Var<int[]> = var %9 @\"\";\n-                %11 : java.util.Stack[][] = constant @null;\n-                %12 : Var<java.util.Stack[][]> = var %11 @\"\";\n-                %13 : java.util.Collection[][][] = constant @null;\n-                %14 : Var<java.util.Collection[][][]> = var %13 @\"\";\n-                %15 : java.lang.Number = constant @null;\n-                %16 : Var<java.lang.Number> = var %15 @\"n\";\n+                %5 : java.lang.Number = constant @null;\n+                %6 : Var<java.lang.Number> = var %5 @\"n\";\n@@ -1670,2 +1660,2 @@\n-                    (%17 : java.lang.Object)boolean -> {\n-                        %18 : boolean = pattern.match %17\n+                    (%7 : java.lang.Object)boolean -> {\n+                        %8 : boolean = pattern.match %7\n@@ -1673,2 +1663,2 @@\n-                                %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"\";\n-                                yield %19;\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n+                                yield %9;\n@@ -1676,2 +1666,1 @@\n-                            (%20 : java.lang.String)void -> {\n-                                var.store %6 %20;\n+                            ()void -> {\n@@ -1680,1 +1669,1 @@\n-                        yield %18;\n+                        yield %8;\n@@ -1683,4 +1672,4 @@\n-                        %21 : java.lang.String = var.load %3;\n-                        %22 : java.lang.String = constant @\"String\";\n-                        %23 : java.lang.String = concat %21 %22;\n-                        var.store %3 %23;\n+                        %10 : java.lang.String = var.load %3;\n+                        %11 : java.lang.String = constant @\"String\";\n+                        %12 : java.lang.String = concat %10 %11;\n+                        var.store %3 %12;\n@@ -1689,2 +1678,2 @@\n-                    (%24 : java.lang.Object)boolean -> {\n-                        %25 : boolean = pattern.match %24\n+                    (%13 : java.lang.Object)boolean -> {\n+                        %14 : boolean = pattern.match %13\n@@ -1692,2 +1681,2 @@\n-                                %26 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"\";\n-                                yield %26;\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.type;\n+                                yield %15;\n@@ -1695,2 +1684,1 @@\n-                            (%27 : java.util.RandomAccess)void -> {\n-                                var.store %8 %27;\n+                            ()void -> {\n@@ -1699,1 +1687,1 @@\n-                        yield %25;\n+                        yield %14;\n@@ -1702,4 +1690,4 @@\n-                        %28 : java.lang.String = var.load %3;\n-                        %29 : java.lang.String = constant @\"RandomAccess\";\n-                        %30 : java.lang.String = concat %28 %29;\n-                        var.store %3 %30;\n+                        %16 : java.lang.String = var.load %3;\n+                        %17 : java.lang.String = constant @\"RandomAccess\";\n+                        %18 : java.lang.String = concat %16 %17;\n+                        var.store %3 %18;\n@@ -1708,2 +1696,2 @@\n-                    (%31 : java.lang.Object)boolean -> {\n-                        %32 : boolean = pattern.match %31\n+                    (%19 : java.lang.Object)boolean -> {\n+                        %20 : boolean = pattern.match %19\n@@ -1711,2 +1699,2 @@\n-                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"\";\n-                                yield %33;\n+                                %21 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.type;\n+                                yield %21;\n@@ -1714,2 +1702,1 @@\n-                            (%34 : int[])void -> {\n-                                var.store %10 %34;\n+                            ()void -> {\n@@ -1718,1 +1705,1 @@\n-                        yield %32;\n+                        yield %20;\n@@ -1721,4 +1708,4 @@\n-                        %35 : java.lang.String = var.load %3;\n-                        %36 : java.lang.String = constant @\"int[]\";\n-                        %37 : java.lang.String = concat %35 %36;\n-                        var.store %3 %37;\n+                        %22 : java.lang.String = var.load %3;\n+                        %23 : java.lang.String = constant @\"int[]\";\n+                        %24 : java.lang.String = concat %22 %23;\n+                        var.store %3 %24;\n@@ -1727,2 +1714,2 @@\n-                    (%38 : java.lang.Object)boolean -> {\n-                        %39 : boolean = pattern.match %38\n+                    (%25 : java.lang.Object)boolean -> {\n+                        %26 : boolean = pattern.match %25\n@@ -1730,2 +1717,2 @@\n-                                %40 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"\";\n-                                yield %40;\n+                                %27 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.type;\n+                                yield %27;\n@@ -1733,2 +1720,1 @@\n-                            (%41 : java.util.Stack[][])void -> {\n-                                var.store %12 %41;\n+                            ()void -> {\n@@ -1737,1 +1723,1 @@\n-                        yield %39;\n+                        yield %26;\n@@ -1740,4 +1726,4 @@\n-                        %42 : java.lang.String = var.load %3;\n-                        %43 : java.lang.String = constant @\"Stack[][]\";\n-                        %44 : java.lang.String = concat %42 %43;\n-                        var.store %3 %44;\n+                        %28 : java.lang.String = var.load %3;\n+                        %29 : java.lang.String = constant @\"Stack[][]\";\n+                        %30 : java.lang.String = concat %28 %29;\n+                        var.store %3 %30;\n@@ -1746,2 +1732,2 @@\n-                    (%45 : java.lang.Object)boolean -> {\n-                        %46 : boolean = pattern.match %45\n+                    (%31 : java.lang.Object)boolean -> {\n+                        %32 : boolean = pattern.match %31\n@@ -1749,2 +1735,2 @@\n-                                %47 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"\";\n-                                yield %47;\n+                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.type;\n+                                yield %33;\n@@ -1752,2 +1738,1 @@\n-                            (%48 : java.util.Collection[][][])void -> {\n-                                var.store %14 %48;\n+                            ()void -> {\n@@ -1756,1 +1741,1 @@\n-                        yield %46;\n+                        yield %32;\n@@ -1759,4 +1744,4 @@\n-                        %49 : java.lang.String = var.load %3;\n-                        %50 : java.lang.String = constant @\"Collection[][][]\";\n-                        %51 : java.lang.String = concat %49 %50;\n-                        var.store %3 %51;\n+                        %34 : java.lang.String = var.load %3;\n+                        %35 : java.lang.String = constant @\"Collection[][][]\";\n+                        %36 : java.lang.String = concat %34 %35;\n+                        var.store %3 %36;\n@@ -1765,2 +1750,2 @@\n-                    (%52 : java.lang.Object)boolean -> {\n-                        %53 : boolean = pattern.match %52\n+                    (%37 : java.lang.Object)boolean -> {\n+                        %38 : boolean = pattern.match %37\n@@ -1768,2 +1753,2 @@\n-                                %54 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n-                                yield %54;\n+                                %39 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n+                                yield %39;\n@@ -1771,2 +1756,2 @@\n-                            (%55 : java.lang.Number)void -> {\n-                                var.store %16 %55;\n+                            (%40 : java.lang.Number)void -> {\n+                                var.store %6 %40;\n@@ -1775,1 +1760,1 @@\n-                        yield %53;\n+                        yield %38;\n@@ -1778,4 +1763,4 @@\n-                        %56 : java.lang.String = var.load %3;\n-                        %57 : java.lang.String = constant @\"Number\";\n-                        %58 : java.lang.String = concat %56 %57;\n-                        var.store %3 %58;\n+                        %41 : java.lang.String = var.load %3;\n+                        %42 : java.lang.String = constant @\"Number\";\n+                        %43 : java.lang.String = concat %41 %42;\n+                        var.store %3 %43;\n@@ -1785,2 +1770,2 @@\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                        %44 : boolean = constant @\"true\";\n+                        yield %44;\n@@ -1789,4 +1774,4 @@\n-                        %59 : java.lang.String = var.load %3;\n-                        %60 : java.lang.String = constant @\"something else\";\n-                        %61 : java.lang.String = concat %59 %60;\n-                        var.store %3 %61;\n+                        %45 : java.lang.String = var.load %3;\n+                        %46 : java.lang.String = constant @\"something else\";\n+                        %47 : java.lang.String = concat %45 %46;\n+                        var.store %3 %47;\n@@ -1795,2 +1780,2 @@\n-                %62 : java.lang.String = var.load %3;\n-                return %62;\n+                %48 : java.lang.String = var.load %3;\n+                return %48;\n@@ -1827,1 +1812,1 @@\n-                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n@@ -1885,1 +1870,1 @@\n-                                        %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                        %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type @\"s\";\n@@ -1919,1 +1904,1 @@\n-                                        %28 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                        %28 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":87,"deletions":102,"binary":false,"changes":189,"status":"modified"}]}