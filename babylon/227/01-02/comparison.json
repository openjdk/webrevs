{"files":[{"patch":"@@ -2959,2 +2959,2 @@\n-                            case null, default ->\n-                                    throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n+                            case null -> null;\n+                            default -> throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n@@ -2994,1 +2994,3 @@\n-                attrs.put(\"\", bindingName);\n+                if (bindingName != null) {\n+                    attrs.put(\"\", bindingName);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1224,1 +1224,2 @@\n-                    if (!var.name.isEmpty()) {\n+                    boolean unnamedPatternVariable = var.name.isEmpty();\n+                    if (!unnamedPatternVariable) {\n@@ -1227,3 +1228,4 @@\n-\n-                    String varName = var.name.isEmpty() ? \"_\" : var.name.toString();\n-                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), varName));\n+                    \/\/ pass null to signal no binding\n+                    \/\/ align with JLS terminology\n+                    \/\/ bindingPattern -> typePattern\n+                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), unnamedPatternVariable ? null : var.name.toString()));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"_\";\n+                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding;\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1663,1 +1663,1 @@\n-                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"_\";\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding;\n@@ -1681,1 +1681,1 @@\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"_\";\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding;\n@@ -1699,1 +1699,1 @@\n-                                %21 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"_\";\n+                                %21 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding;\n@@ -1717,1 +1717,1 @@\n-                                %27 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"_\";\n+                                %27 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding;\n@@ -1735,1 +1735,1 @@\n-                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"_\";\n+                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}