{"files":[{"patch":"@@ -1224,1 +1224,3 @@\n-                    variables.add(var);\n+                    if (!var.name.isEmpty()) {\n+                        variables.add(var);\n+                    }\n@@ -1226,1 +1228,2 @@\n-                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    String varName = var.name.isEmpty() ? \"_\" : var.name.toString();\n+                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), varName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -350,0 +350,20 @@\n+\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                %3 : java.lang.Object = var.load %2;\n+                %4 : boolean = pattern.match %3\n+                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"_\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    };\n+                return %4;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test8(Object o) {\n+        return o instanceof String _;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}