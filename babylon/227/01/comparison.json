{"files":[{"patch":"@@ -1224,1 +1224,3 @@\n-                    variables.add(var);\n+                    if (!var.name.isEmpty()) {\n+                        variables.add(var);\n+                    }\n@@ -1226,1 +1228,2 @@\n-                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    String varName = var.name.isEmpty() ? \"_\" : var.name.toString();\n+                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), varName));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -350,0 +350,20 @@\n+\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                %3 : java.lang.Object = var.load %2;\n+                %4 : boolean = pattern.match %3\n+                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"_\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    };\n+                return %4;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test8(Object o) {\n+        return o instanceof String _;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1657,12 +1657,2 @@\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"\";\n-                %7 : java.util.RandomAccess = constant @null;\n-                %8 : Var<java.util.RandomAccess> = var %7 @\"\";\n-                %9 : int[] = constant @null;\n-                %10 : Var<int[]> = var %9 @\"\";\n-                %11 : java.util.Stack[][] = constant @null;\n-                %12 : Var<java.util.Stack[][]> = var %11 @\"\";\n-                %13 : java.util.Collection[][][] = constant @null;\n-                %14 : Var<java.util.Collection[][][]> = var %13 @\"\";\n-                %15 : java.lang.Number = constant @null;\n-                %16 : Var<java.lang.Number> = var %15 @\"n\";\n+                %5 : java.lang.Number = constant @null;\n+                %6 : Var<java.lang.Number> = var %5 @\"n\";\n@@ -1670,2 +1660,2 @@\n-                    (%17 : java.lang.Object)boolean -> {\n-                        %18 : boolean = pattern.match %17\n+                    (%7 : java.lang.Object)boolean -> {\n+                        %8 : boolean = pattern.match %7\n@@ -1673,2 +1663,2 @@\n-                                %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"\";\n-                                yield %19;\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"_\";\n+                                yield %9;\n@@ -1676,2 +1666,1 @@\n-                            (%20 : java.lang.String)void -> {\n-                                var.store %6 %20;\n+                            ()void -> {\n@@ -1680,1 +1669,1 @@\n-                        yield %18;\n+                        yield %8;\n@@ -1683,4 +1672,4 @@\n-                        %21 : java.lang.String = var.load %3;\n-                        %22 : java.lang.String = constant @\"String\";\n-                        %23 : java.lang.String = concat %21 %22;\n-                        var.store %3 %23;\n+                        %10 : java.lang.String = var.load %3;\n+                        %11 : java.lang.String = constant @\"String\";\n+                        %12 : java.lang.String = concat %10 %11;\n+                        var.store %3 %12;\n@@ -1689,2 +1678,2 @@\n-                    (%24 : java.lang.Object)boolean -> {\n-                        %25 : boolean = pattern.match %24\n+                    (%13 : java.lang.Object)boolean -> {\n+                        %14 : boolean = pattern.match %13\n@@ -1692,2 +1681,2 @@\n-                                %26 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"\";\n-                                yield %26;\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"_\";\n+                                yield %15;\n@@ -1695,2 +1684,1 @@\n-                            (%27 : java.util.RandomAccess)void -> {\n-                                var.store %8 %27;\n+                            ()void -> {\n@@ -1699,1 +1687,1 @@\n-                        yield %25;\n+                        yield %14;\n@@ -1702,4 +1690,4 @@\n-                        %28 : java.lang.String = var.load %3;\n-                        %29 : java.lang.String = constant @\"RandomAccess\";\n-                        %30 : java.lang.String = concat %28 %29;\n-                        var.store %3 %30;\n+                        %16 : java.lang.String = var.load %3;\n+                        %17 : java.lang.String = constant @\"RandomAccess\";\n+                        %18 : java.lang.String = concat %16 %17;\n+                        var.store %3 %18;\n@@ -1708,2 +1696,2 @@\n-                    (%31 : java.lang.Object)boolean -> {\n-                        %32 : boolean = pattern.match %31\n+                    (%19 : java.lang.Object)boolean -> {\n+                        %20 : boolean = pattern.match %19\n@@ -1711,2 +1699,2 @@\n-                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"\";\n-                                yield %33;\n+                                %21 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"_\";\n+                                yield %21;\n@@ -1714,2 +1702,1 @@\n-                            (%34 : int[])void -> {\n-                                var.store %10 %34;\n+                            ()void -> {\n@@ -1718,1 +1705,1 @@\n-                        yield %32;\n+                        yield %20;\n@@ -1721,4 +1708,4 @@\n-                        %35 : java.lang.String = var.load %3;\n-                        %36 : java.lang.String = constant @\"int[]\";\n-                        %37 : java.lang.String = concat %35 %36;\n-                        var.store %3 %37;\n+                        %22 : java.lang.String = var.load %3;\n+                        %23 : java.lang.String = constant @\"int[]\";\n+                        %24 : java.lang.String = concat %22 %23;\n+                        var.store %3 %24;\n@@ -1727,2 +1714,2 @@\n-                    (%38 : java.lang.Object)boolean -> {\n-                        %39 : boolean = pattern.match %38\n+                    (%25 : java.lang.Object)boolean -> {\n+                        %26 : boolean = pattern.match %25\n@@ -1730,2 +1717,2 @@\n-                                %40 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"\";\n-                                yield %40;\n+                                %27 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"_\";\n+                                yield %27;\n@@ -1733,2 +1720,1 @@\n-                            (%41 : java.util.Stack[][])void -> {\n-                                var.store %12 %41;\n+                            ()void -> {\n@@ -1737,1 +1723,1 @@\n-                        yield %39;\n+                        yield %26;\n@@ -1740,4 +1726,4 @@\n-                        %42 : java.lang.String = var.load %3;\n-                        %43 : java.lang.String = constant @\"Stack[][]\";\n-                        %44 : java.lang.String = concat %42 %43;\n-                        var.store %3 %44;\n+                        %28 : java.lang.String = var.load %3;\n+                        %29 : java.lang.String = constant @\"Stack[][]\";\n+                        %30 : java.lang.String = concat %28 %29;\n+                        var.store %3 %30;\n@@ -1746,2 +1732,2 @@\n-                    (%45 : java.lang.Object)boolean -> {\n-                        %46 : boolean = pattern.match %45\n+                    (%31 : java.lang.Object)boolean -> {\n+                        %32 : boolean = pattern.match %31\n@@ -1749,2 +1735,2 @@\n-                                %47 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"\";\n-                                yield %47;\n+                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"_\";\n+                                yield %33;\n@@ -1752,2 +1738,1 @@\n-                            (%48 : java.util.Collection[][][])void -> {\n-                                var.store %14 %48;\n+                            ()void -> {\n@@ -1756,1 +1741,1 @@\n-                        yield %46;\n+                        yield %32;\n@@ -1759,4 +1744,4 @@\n-                        %49 : java.lang.String = var.load %3;\n-                        %50 : java.lang.String = constant @\"Collection[][][]\";\n-                        %51 : java.lang.String = concat %49 %50;\n-                        var.store %3 %51;\n+                        %34 : java.lang.String = var.load %3;\n+                        %35 : java.lang.String = constant @\"Collection[][][]\";\n+                        %36 : java.lang.String = concat %34 %35;\n+                        var.store %3 %36;\n@@ -1765,2 +1750,2 @@\n-                    (%52 : java.lang.Object)boolean -> {\n-                        %53 : boolean = pattern.match %52\n+                    (%37 : java.lang.Object)boolean -> {\n+                        %38 : boolean = pattern.match %37\n@@ -1768,2 +1753,2 @@\n-                                %54 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n-                                yield %54;\n+                                %39 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                yield %39;\n@@ -1771,2 +1756,2 @@\n-                            (%55 : java.lang.Number)void -> {\n-                                var.store %16 %55;\n+                            (%40 : java.lang.Number)void -> {\n+                                var.store %6 %40;\n@@ -1775,1 +1760,1 @@\n-                        yield %53;\n+                        yield %38;\n@@ -1778,4 +1763,4 @@\n-                        %56 : java.lang.String = var.load %3;\n-                        %57 : java.lang.String = constant @\"Number\";\n-                        %58 : java.lang.String = concat %56 %57;\n-                        var.store %3 %58;\n+                        %41 : java.lang.String = var.load %3;\n+                        %42 : java.lang.String = constant @\"Number\";\n+                        %43 : java.lang.String = concat %41 %42;\n+                        var.store %3 %43;\n@@ -1785,2 +1770,2 @@\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n+                        %44 : boolean = constant @\"true\";\n+                        yield %44;\n@@ -1789,4 +1774,4 @@\n-                        %59 : java.lang.String = var.load %3;\n-                        %60 : java.lang.String = constant @\"something else\";\n-                        %61 : java.lang.String = concat %59 %60;\n-                        var.store %3 %61;\n+                        %45 : java.lang.String = var.load %3;\n+                        %46 : java.lang.String = constant @\"something else\";\n+                        %47 : java.lang.String = concat %45 %46;\n+                        var.store %3 %47;\n@@ -1795,2 +1780,2 @@\n-                %62 : java.lang.String = var.load %3;\n-                return %62;\n+                %48 : java.lang.String = var.load %3;\n+                return %48;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":71,"deletions":86,"binary":false,"changes":157,"status":"modified"}]}