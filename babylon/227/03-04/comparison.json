{"files":[{"patch":"@@ -2171,1 +2171,1 @@\n-            this.varName = varName;\n+            this.varName = varName == null || varName.isEmpty() ? null : varName;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1224,0 +1224,1 @@\n+                    variables.add(var);\n@@ -1225,3 +1226,0 @@\n-                    if (!unnamedPatternVariable) {\n-                        variables.add(var);\n-                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -353,11 +353,14 @@\n-                %2 : Var<java.lang.Object> = var %1 @\"o\";\n-                %3 : java.lang.Object = var.load %2;\n-                %4 : boolean = pattern.match %3\n-                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n-                        yield %5;\n-                    }\n-                    ()void -> {\n-                        yield;\n-                    };\n-                return %4;\n+                   %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                   %3 : java.lang.Object = var.load %2;\n+                   %4 : java.lang.String = constant @null;\n+                   %5 : Var<java.lang.String> = var %4;\n+                   %6 : boolean = pattern.match %3\n+                       ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                           %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n+                           yield %7;\n+                       }\n+                       (%8 : java.lang.String)void -> {\n+                           var.store %5 %8;\n+                           yield;\n+                       };\n+                   return %6;\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1653,129 +1653,144 @@\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.Number = constant @null;\n-                %6 : Var<java.lang.Number> = var %5 @\"n\";\n-                java.switch.statement %4\n-                    (%7 : java.lang.Object)boolean -> {\n-                        %8 : boolean = pattern.match %7\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n-                                yield %9;\n-                            }\n-                            ()void -> {\n-                                yield;\n-                            };\n-                        yield %8;\n-                    }\n-                    ()void -> {\n-                        %10 : java.lang.String = var.load %3;\n-                        %11 : java.lang.String = constant @\"String\";\n-                        %12 : java.lang.String = concat %10 %11;\n-                        var.store %3 %12;\n-                        yield;\n-                    }\n-                    (%13 : java.lang.Object)boolean -> {\n-                        %14 : boolean = pattern.match %13\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> -> {\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.type;\n-                                yield %15;\n-                            }\n-                            ()void -> {\n-                                yield;\n-                            };\n-                        yield %14;\n-                    }\n-                    ()void -> {\n-                        %16 : java.lang.String = var.load %3;\n-                        %17 : java.lang.String = constant @\"RandomAccess\";\n-                        %18 : java.lang.String = concat %16 %17;\n-                        var.store %3 %18;\n-                        yield;\n-                    }\n-                    (%19 : java.lang.Object)boolean -> {\n-                        %20 : boolean = pattern.match %19\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> -> {\n-                                %21 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.type;\n-                                yield %21;\n-                            }\n-                            ()void -> {\n-                                yield;\n-                            };\n-                        yield %20;\n-                    }\n-                    ()void -> {\n-                        %22 : java.lang.String = var.load %3;\n-                        %23 : java.lang.String = constant @\"int[]\";\n-                        %24 : java.lang.String = concat %22 %23;\n-                        var.store %3 %24;\n-                        yield;\n-                    }\n-                    (%25 : java.lang.Object)boolean -> {\n-                        %26 : boolean = pattern.match %25\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> -> {\n-                                %27 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.type;\n-                                yield %27;\n-                            }\n-                            ()void -> {\n-                                yield;\n-                            };\n-                        yield %26;\n-                    }\n-                    ()void -> {\n-                        %28 : java.lang.String = var.load %3;\n-                        %29 : java.lang.String = constant @\"Stack[][]\";\n-                        %30 : java.lang.String = concat %28 %29;\n-                        var.store %3 %30;\n-                        yield;\n-                    }\n-                    (%31 : java.lang.Object)boolean -> {\n-                        %32 : boolean = pattern.match %31\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> -> {\n-                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.type;\n-                                yield %33;\n-                            }\n-                            ()void -> {\n-                                yield;\n-                            };\n-                        yield %32;\n-                    }\n-                    ()void -> {\n-                        %34 : java.lang.String = var.load %3;\n-                        %35 : java.lang.String = constant @\"Collection[][][]\";\n-                        %36 : java.lang.String = concat %34 %35;\n-                        var.store %3 %36;\n-                        yield;\n-                    }\n-                    (%37 : java.lang.Object)boolean -> {\n-                        %38 : boolean = pattern.match %37\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n-                                %39 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n-                                yield %39;\n-                            }\n-                            (%40 : java.lang.Number)void -> {\n-                                var.store %6 %40;\n-                                yield;\n-                            };\n-                        yield %38;\n-                    }\n-                    ()void -> {\n-                        %41 : java.lang.String = var.load %3;\n-                        %42 : java.lang.String = constant @\"Number\";\n-                        %43 : java.lang.String = concat %41 %42;\n-                        var.store %3 %43;\n-                        yield;\n-                    }\n-                    ()boolean -> {\n-                        %44 : boolean = constant @\"true\";\n-                        yield %44;\n-                    }\n-                    ()void -> {\n-                        %45 : java.lang.String = var.load %3;\n-                        %46 : java.lang.String = constant @\"something else\";\n-                        %47 : java.lang.String = concat %45 %46;\n-                        var.store %3 %47;\n-                        yield;\n-                    };\n-                %48 : java.lang.String = var.load %3;\n-                return %48;\n+                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Object = var.load %1;\n+                  %5 : java.lang.String = constant @null;\n+                  %6 : Var<java.lang.String> = var %5;\n+                  %7 : java.util.RandomAccess = constant @null;\n+                  %8 : Var<java.util.RandomAccess> = var %7;\n+                  %9 : int[] = constant @null;\n+                  %10 : Var<int[]> = var %9;\n+                  %11 : java.util.Stack[][] = constant @null;\n+                  %12 : Var<java.util.Stack[][]> = var %11;\n+                  %13 : java.util.Collection[][][] = constant @null;\n+                  %14 : Var<java.util.Collection[][][]> = var %13;\n+                  %15 : java.lang.Number = constant @null;\n+                  %16 : Var<java.lang.Number> = var %15 @\"n\";\n+                  java.switch.statement %4\n+                      (%17 : java.lang.Object)boolean -> {\n+                          %18 : boolean = pattern.match %17\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n+                                  %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.type;\n+                                  yield %19;\n+                              }\n+                              (%20 : java.lang.String)void -> {\n+                                  var.store %6 %20;\n+                                  yield;\n+                              };\n+                          yield %18;\n+                      }\n+                      ()void -> {\n+                          %21 : java.lang.String = var.load %3;\n+                          %22 : java.lang.String = constant @\"String\";\n+                          %23 : java.lang.String = concat %21 %22;\n+                          var.store %3 %23;\n+                          yield;\n+                      }\n+                      (%24 : java.lang.Object)boolean -> {\n+                          %25 : boolean = pattern.match %24\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> -> {\n+                                  %26 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.type;\n+                                  yield %26;\n+                              }\n+                              (%27 : java.util.RandomAccess)void -> {\n+                                  var.store %8 %27;\n+                                  yield;\n+                              };\n+                          yield %25;\n+                      }\n+                      ()void -> {\n+                          %28 : java.lang.String = var.load %3;\n+                          %29 : java.lang.String = constant @\"RandomAccess\";\n+                          %30 : java.lang.String = concat %28 %29;\n+                          var.store %3 %30;\n+                          yield;\n+                      }\n+                      (%31 : java.lang.Object)boolean -> {\n+                          %32 : boolean = pattern.match %31\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> -> {\n+                                  %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.type;\n+                                  yield %33;\n+                              }\n+                              (%34 : int[])void -> {\n+                                  var.store %10 %34;\n+                                  yield;\n+                              };\n+                          yield %32;\n+                      }\n+                      ()void -> {\n+                          %35 : java.lang.String = var.load %3;\n+                          %36 : java.lang.String = constant @\"int[]\";\n+                          %37 : java.lang.String = concat %35 %36;\n+                          var.store %3 %37;\n+                          yield;\n+                      }\n+                      (%38 : java.lang.Object)boolean -> {\n+                          %39 : boolean = pattern.match %38\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> -> {\n+                                  %40 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.type;\n+                                  yield %40;\n+                              }\n+                              (%41 : java.util.Stack[][])void -> {\n+                                  var.store %12 %41;\n+                                  yield;\n+                              };\n+                          yield %39;\n+                      }\n+                      ()void -> {\n+                          %42 : java.lang.String = var.load %3;\n+                          %43 : java.lang.String = constant @\"Stack[][]\";\n+                          %44 : java.lang.String = concat %42 %43;\n+                          var.store %3 %44;\n+                          yield;\n+                      }\n+                      (%45 : java.lang.Object)boolean -> {\n+                          %46 : boolean = pattern.match %45\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> -> {\n+                                  %47 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.type;\n+                                  yield %47;\n+                              }\n+                              (%48 : java.util.Collection[][][])void -> {\n+                                  var.store %14 %48;\n+                                  yield;\n+                              };\n+                          yield %46;\n+                      }\n+                      ()void -> {\n+                          %49 : java.lang.String = var.load %3;\n+                          %50 : java.lang.String = constant @\"Collection[][][]\";\n+                          %51 : java.lang.String = concat %49 %50;\n+                          var.store %3 %51;\n+                          yield;\n+                      }\n+                      (%52 : java.lang.Object)boolean -> {\n+                          %53 : boolean = pattern.match %52\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n+                                  %54 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.type @\"n\";\n+                                  yield %54;\n+                              }\n+                              (%55 : java.lang.Number)void -> {\n+                                  var.store %16 %55;\n+                                  yield;\n+                              };\n+                          yield %53;\n+                      }\n+                      ()void -> {\n+                          %56 : java.lang.String = var.load %3;\n+                          %57 : java.lang.String = constant @\"Number\";\n+                          %58 : java.lang.String = concat %56 %57;\n+                          var.store %3 %58;\n+                          yield;\n+                      }\n+                      ()boolean -> {\n+                          %59 : boolean = constant @\"true\";\n+                          yield %59;\n+                      }\n+                      ()void -> {\n+                          %60 : java.lang.String = var.load %3;\n+                          %61 : java.lang.String = constant @\"something else\";\n+                          %62 : java.lang.String = concat %60 %61;\n+                          var.store %3 %62;\n+                          yield;\n+                      };\n+                  %63 : java.lang.String = var.load %3;\n+                  return %63;\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":144,"deletions":129,"binary":false,"changes":273,"status":"modified"}]}