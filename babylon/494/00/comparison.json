{"files":[{"patch":"@@ -87,1 +87,1 @@\n-            b.transformBody(lambda.body(), List.of(), OpTransformer.COPYING_TRANSFORMER);\n+            b.body(lambda.body(), List.of(), OpTransformer.COPYING_TRANSFORMER);\n@@ -179,1 +179,1 @@\n-                    .body(bob -> bob.transformBody(f.body(), bob.parameters(), (bb, op) -> {\n+                    .body(bob -> bob.body(f.body(), bob.parameters(), (bb, op) -> {\n@@ -317,1 +317,1 @@\n-            b.transformBody(func.body(), b.parameters(), toOnnxOpTransformer(tc, pe));\n+            b.body(func.body(), b.parameters(), toOnnxOpTransformer(tc, pe));\n@@ -320,1 +320,1 @@\n-        return CoreOp.func(func2.funcName(), tc.convertType(func2)).body(b -> b.transformBody(func2.body(), b.parameters(), OpTransformer.COPYING_TRANSFORMER));\n+        return CoreOp.func(func2.funcName(), tc.convertType(func2)).body(b -> b.body(func2.body(), b.parameters(), OpTransformer.COPYING_TRANSFORMER));\n@@ -358,1 +358,1 @@\n-            bob.transformBody(func.body(), List.of(), (b, op) -> {\n+            bob.body(func.body(), List.of(), (b, op) -> {\n@@ -549,1 +549,1 @@\n-        bb.entryBlock().transformBody(iop.body(), bb.entryBlock().parameters(), ot);\n+        bb.entryBlock().body(iop.body(), bb.entryBlock().parameters(), ot);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -575,1 +575,1 @@\n-                    fblock.transformBody(kernel.body(), args, (kblock, op) -> {\n+                    fblock.body(kernel.body(), args, (kblock, op) -> {\n@@ -746,1 +746,1 @@\n-                    builder.transformBody(body, List.of(), (block, op) -> {\n+                    builder.body(body, List.of(), (block, op) -> {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-            funcBlock.transformBody(ssaForm.body(), funcBlock.parameters(), (builder, op) -> {\n+            funcBlock.body(ssaForm.body(), funcBlock.parameters(), (builder, op) -> {\n","filename":"hat\/core\/src\/main\/java\/hat\/OpsAndTypes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-            funcBlock.transformBody(f.body(), funcBlock.parameters(), (b, op) -> {\n+            funcBlock.body(f.body(), funcBlock.parameters(), (b, op) -> {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/LayoutExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-            funcBlock.transformBody(f.body(), funcBlock.parameters(), (b, op) -> {\n+            funcBlock.body(f.body(), funcBlock.parameters(), (b, op) -> {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/RawLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -609,1 +609,11 @@\n-         * Transforms a body into this block, with this block builder's context.\n+         * Transforms a body starting from this block builder, using an operation transformer.\n+         * <p>\n+         * This method first rebinds this builder with a child context created from\n+         * this builder's context and the given operation transformer, and then\n+         * transforms the body using the operation transformer by\n+         * {@link OpTransformer#acceptBody(Builder, Body, List) accepting}\n+         * the rebound builder, the body, and the values.\n+         *\n+         * @apiNote\n+         * Creation of a child context ensures block and value mappings produced by\n+         * the transformation do not affect this builder's context.\n@@ -611,4 +621,4 @@\n-         * @param bodyToTransform the body to transform\n-         * @param args        the list of output values to map to the input parameters of the body's entry block\n-         * @param ot          the operation transformer\n-         * @see #transformBody(Body, List, CopyContext, OpTransformer)\n+         * @param body the body to transform\n+         * @param values the output values to map to the input parameters of the body's entry block\n+         * @param ot the operation transformer\n+         * @see OpTransformer#acceptBody(Builder, Body, List)\n@@ -616,3 +626,5 @@\n-        public void transformBody(Body bodyToTransform, List<? extends Value> args,\n-                                  OpTransformer ot) {\n-            transformBody(bodyToTransform, args, cc, ot);\n+        public void body(Body body, List<? extends Value> values,\n+                         OpTransformer ot) {\n+            check();\n+\n+            ot.acceptBody(rebind(CopyContext.create(cc), ot), body, values);\n@@ -622,7 +634,1 @@\n-         * Transforms a body into this block.\n-         * <p>\n-         * First, a new context is created from the given context and that new context is used to map values and\n-         * blocks.\n-         * <p>\n-         * Second, the entry block is mapped to this block builder rebound with the given operation transformer and\n-         * copy context, the input block parameters of the body's entry block are mapped to the given arguments.\n+         * Transforms a body starting from this block builder, using a given operation transformer.\n@@ -630,9 +636,9 @@\n-         * Third, for each input block in the body (except the entry block) an output block builder is created with\n-         * equivalent parameters as the input block and with the given operation transformer and copy context.\n-         * The input block parameters are mapped to the output block parameters, and the input block is mapped to the\n-         * output block builder.\n-         * <p>\n-         * Fourth, for each input block in the body (in order) the input block's operations are transformed\n-         * by applying the output block builder and input block to the given operation transformer.\n-         * <p>\n-         * When the parent body is built any empty non-entry blocks that have no successors will be removed.\n+         * This method first rebinds this builder with the given context\n+         * and the given operation transformer, and then\n+         * transforms the body using the operation transformer by\n+         * {@link OpTransformer#acceptBody(Builder, Body, List) accepting}\n+         * the rebound builder, the body, and the values.\n+         *\n+         * @apiNote\n+         * The passing of a context can ensure block and value mappings produced by\n+         * the transformation do not affect this builder's context.\n@@ -640,4 +646,5 @@\n-         * @param bodyToTransform the body to transform\n-         * @param args            the list of output values to map to the input parameters of the body's entry block\n-         * @param cc              the copy context, for values captured in the body\n-         * @param ot              the operation transformer\n+         * @param body the body to transform\n+         * @param values the output values to map to the input parameters of the body's entry block\n+         * @param cc the copy context\n+         * @param ot the operation transformer\n+         * @see OpTransformer#acceptBody(Builder, Body, List)\n@@ -645,2 +652,2 @@\n-        public void transformBody(Body bodyToTransform, List<? extends Value> args,\n-                                  CopyContext cc, OpTransformer ot) {\n+        public void body(Body body, List<? extends Value> values,\n+                         CopyContext cc, OpTransformer ot) {\n@@ -649,31 +656,1 @@\n-            \/\/ @@@ This might be a new context e.g., when transforming a body\n-            cc = CopyContext.create(cc);\n-\n-            Block entryBlockToTransform  = bodyToTransform.entryBlock();\n-            List<Block> blocksToTransform = bodyToTransform.blocks();\n-\n-            \/\/ Map entry block\n-            \/\/ Rebind this block builder to the created context and transformer\n-            Block.Builder startingBlock = rebind(cc, ot);\n-            cc.mapBlock(entryBlockToTransform, startingBlock);\n-            cc.mapValues(entryBlockToTransform.parameters(), args);\n-\n-            \/\/ Map subsequent blocks up front, for forward referencing successors\n-            for (int i = 1; i < blocksToTransform.size(); i++) {\n-                Block blockToTransform = blocksToTransform.get(i);\n-                if (cc.getBlock(blockToTransform) != null) {\n-                    throw new IllegalStateException(\"Block is already transformed\");\n-                }\n-\n-                \/\/ Create block and map block\n-                Block.Builder transformedBlock = startingBlock.block(List.of());\n-                for (Block.Parameter ba : blockToTransform.parameters()) {\n-                    transformedBlock.parameter(ba.type());\n-                }\n-                cc.mapBlock(blockToTransform, transformedBlock);\n-                cc.mapValues(blockToTransform.parameters(), transformedBlock.parameters());\n-            }\n-\n-            for (Block blockToTransform : blocksToTransform) {\n-                ot.apply(cc.getBlock(blockToTransform), blockToTransform);\n-            }\n+            ot.acceptBody(rebind(cc, ot), body, values);\n@@ -683,1 +660,1 @@\n-         * Appends an operation to this block.\n+         * Appends an operation to this block builder, first transforming the operation if bound.\n@@ -688,2 +665,2 @@\n-         * operation transformer, the unbound transformed operation is appended, and the operation's result is mapped\n-         * to the transformed operation's result (using the builder's context).\n+         * operation transformer, the resulting unbound transformed operation is appended, and the\n+         * operation's result mapped to the transformed operation's result, using the builder's context.\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":41,"deletions":64,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -680,3 +680,3 @@\n-     * Then, this body is {@link Block.Builder#transformBody(Body, java.util.List, CopyContext, OpTransformer) transformed}\n-     * into the body builder's entry block builder with the given copy context, operation transformer, and values\n-     * that are the entry block's parameters.\n+     * Then, this body is {@link Block.Builder#body(Body, java.util.List, CopyContext, OpTransformer) transformed}\n+     * into the body builder's entry block builder with the given copy context, operation transformer, and arguments\n+     * that are the entry block builder's parameters.\n@@ -693,11 +693,9 @@\n-        Builder body = Builder.of(ancestorBodyBuilder,\n-                \/\/ Create function type with just the return type and add parameters afterward\n-                CoreType.functionType(yieldType),\n-                cc, ot);\n-\n-        for (Block.Parameter p : entryBlock().parameters()) {\n-            body.entryBlock.parameter(p.type());\n-        }\n-\n-        body.entryBlock.transformBody(this, body.entryBlock.parameters(), cc, ot);\n-        return body;\n+        Builder bodyBuilder = Builder.of(ancestorBodyBuilder,\n+                bodyType(),\n+                \/\/ Create child context for mapped code items contained in this body\n+                \/\/ thereby not polluting the given context\n+                CopyContext.create(cc), ot);\n+\n+        \/\/ Transform body starting from the entry block builder\n+        ot.acceptBody(bodyBuilder.entryBlock, this, bodyBuilder.entryBlock.parameters());\n+        return bodyBuilder;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Body.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.List;\n@@ -29,1 +30,0 @@\n-import java.util.function.BiFunction;\n@@ -35,1 +35,3 @@\n-public interface OpTransformer extends BiFunction<Block.Builder, Op, Block.Builder> {\n+\/\/ @@@ Change to OpTransform or CodeTransform\n+public interface OpTransformer {\n+\n@@ -72,3 +74,1 @@\n-     * Transforms a given operation to zero or more other operations appended to the\n-     * given block builder. Returns a block builder to be used for appending further operations, such\n-     * as subsequent operations from the same block as the given operation.\n+     * Transforms a body starting from a block builder.\n@@ -76,3 +76,21 @@\n-     * @param block the block builder.\n-     * @param op    the operation to transform.\n-     * @return      the block builder to append to for subsequent operations to transform that have same parent block.\n+     * @implSpec\n+     * The default implementation {@link #acceptBlock(Block.Builder, Block) accepts} a block builder\n+     * and a block for each block of the body, in order, using this operation transformer.\n+     * The following sequence of actions is performed:\n+     * <ol>\n+     * <li>\n+     * the body's entry block is mapped to the block builder, and the (input) block parameters of the\n+     * body's entry block are mapped to the (output) values, using the builder's context.\n+     * <li>for each (input) block in the body (except the entry block) an (output) block builder is created\n+     * from the builder with the same parameter types as the (input) block, in order.\n+     * The (input) block is mapped to the (output) builder, and the (input) block parameters are mapped to the\n+     * (output) block parameters, using the builder's context.\n+     * <li>\n+     * for each (input) block in the body (in order) the (input) block is transformed\n+     * by {@link #acceptBlock(Block.Builder, Block) accepting} the mapped (output) builder and\n+     * (input) block, using this operation transformer.\n+     * <\/ol>\n+     *\n+     * @param builder the block builder\n+     * @param body the body to transform\n+     * @param values the values to map to the body's entry block parameters\n@@ -80,1 +98,20 @@\n-    Block.Builder apply(Block.Builder block, Op op);\n+    default void acceptBody(Block.Builder builder, Body body, List<? extends Value> values) {\n+        CopyContext cc = builder.context();\n+\n+        \/\/ Map blocks up front, for forward referencing successors\n+        for (Block block : body.blocks()) {\n+            if (block.isEntryBlock()) {\n+                cc.mapBlock(block, builder);\n+                cc.mapValues(block.parameters(), values);\n+            } else {\n+                Block.Builder blockBuilder = builder.block(block.parameterTypes());\n+                cc.mapBlock(block, blockBuilder);\n+                cc.mapValues(block.parameters(), blockBuilder.parameters());\n+            }\n+        }\n+\n+        \/\/ Transform blocks\n+        for (Block b : body.blocks()) {\n+            acceptBlock(cc.getBlock(b), b);\n+        }\n+    }\n@@ -83,1 +120,1 @@\n-     * Transforms a given block to zero or more operations appended to the given block builder.\n+     * Transforms a block starting from a block builder.\n@@ -86,3 +123,2 @@\n-     * The default implementation iterates through each operation of the block to transform\n-     * and {@link #apply(Block.Builder, Op) applies} a block builder and the operation to this\n-     * transformer.\n+     * The default implementation {@link #acceptOp(Block.Builder, Op) accepts} a block builder\n+     * and an operation for each operation of the block, in order, using this operation transformer.\n@@ -94,2 +130,2 @@\n-     * @param block the block builder\n-     * @param b     the block to transform\n+     * @param builder the block builder\n+     * @param block   the block to transform\n@@ -98,3 +134,3 @@\n-    default void apply(Block.Builder block, Block b) {\n-        for (Op op : b.ops()) {\n-            block = apply(block, op);\n+    default void acceptBlock(Block.Builder builder, Block block) {\n+        for (Op op : block.ops()) {\n+            builder = acceptOp(builder, op);\n@@ -102,1 +138,1 @@\n-            Objects.requireNonNull(block);\n+            Objects.requireNonNull(builder);\n@@ -106,0 +142,11 @@\n+    \/**\n+     * Transforms an operation to zero or more operations, appending those operations to a\n+     * block builder. Returns a block builder to be used for transforming further operations, such\n+     * as subsequent operations from the same block as the given operation.\n+     *\n+     * @param block the block builder.\n+     * @param op    the operation to transform.\n+     * @return      the block builder to append to for subsequent operations.\n+     *\/\n+    Block.Builder acceptOp(Block.Builder block, Op op);\n+\n@@ -117,1 +164,1 @@\n-                Block.Builder nbb = apply(bb, o);\n+                Block.Builder nbb = acceptOp(bb, o);\n@@ -119,1 +166,1 @@\n-                    return after.apply(nbb, o);\n+                    return after.acceptOp(nbb, o);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/OpTransformer.java","additions":68,"deletions":21,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-     * This method {@link Block.Builder#transformBody(Body, List, CopyContext, OpTransformer) transforms} the\n+     * This method {@link Block.Builder#body(Body, List, CopyContext, OpTransformer) transforms} the\n@@ -76,1 +76,1 @@\n-        _this.transformBody(invokableOp.body(), args, CopyContext.create(), (block, op) -> {\n+        _this.body(invokableOp.body(), args, CopyContext.create(), (block, op) -> {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/Inliner.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    public void apply(Block.Builder block, Block b) {\n+    public void acceptBlock(Block.Builder block, Block b) {\n@@ -67,1 +67,1 @@\n-            OpTransformer.super.apply(block, b);\n+            OpTransformer.super.acceptBlock(block, b);\n@@ -72,1 +72,1 @@\n-    public Block.Builder apply(Block.Builder b, Op op) {\n+    public Block.Builder acceptOp(Block.Builder b, Op op) {\n@@ -167,1 +167,1 @@\n-        apply(b, successor.terminatingOp());\n+        acceptOp(b, successor.terminatingOp());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/NormalizeBlocksTransformer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-    public Block.Builder apply(Block.Builder block, Op op) {\n+    public Block.Builder acceptOp(Block.Builder block, Op op) {\n@@ -259,1 +259,1 @@\n-    public void apply(Block.Builder block, Block b) {\n+    public void acceptBlock(Block.Builder block, Block b) {\n@@ -275,1 +275,1 @@\n-        OpTransformer.super.apply(block, b);\n+        OpTransformer.super.acceptBlock(block, b);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/SSABraun.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    public Block.Builder apply(Block.Builder block, Op op) {\n+    public Block.Builder acceptOp(Block.Builder block, Op op) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/StringConcatTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -273,1 +273,1 @@\n-            public void apply(Block.Builder block, Block b) {\n+            public void acceptBlock(Block.Builder block, Block b) {\n@@ -292,1 +292,1 @@\n-                OpTransformer.super.apply(block, b);\n+                OpTransformer.super.acceptBlock(block, b);\n@@ -296,1 +296,1 @@\n-            public Block.Builder apply(Block.Builder block, Op op) {\n+            public Block.Builder acceptOp(Block.Builder block, Op op) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/UnresolvedTypesTransformer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2271,1 +2271,1 @@\n-            b.transformBody(body, List.of(), opT.andThen((block, op) -> {\n+            b.body(body, List.of(), opT.andThen((block, op) -> {\n@@ -2387,1 +2387,1 @@\n-            syncRegionEnter.transformBody(blockBody, List.of(), syncExitTransformer.andThen((block, op) -> {\n+            syncRegionEnter.body(blockBody, List.of(), syncExitTransformer.andThen((block, op) -> {\n@@ -2424,1 +2424,1 @@\n-            b.transformBody(expr, List.of(), opT.andThen((block, op) -> {\n+            b.body(expr, List.of(), opT.andThen((block, op) -> {\n@@ -2513,1 +2513,1 @@\n-            b.transformBody(body, List.of(), opT.andThen((block, op) -> {\n+            b.body(body, List.of(), opT.andThen((block, op) -> {\n@@ -2726,1 +2726,1 @@\n-                    pred.transformBody(predBody, List.of(), opT.andThen((block, op) -> {\n+                    pred.body(predBody, List.of(), opT.andThen((block, op) -> {\n@@ -2740,1 +2740,1 @@\n-                action.transformBody(actionBody, List.of(), opT.andThen((block, op) -> {\n+                action.body(actionBody, List.of(), opT.andThen((block, op) -> {\n@@ -2846,1 +2846,1 @@\n-                    curr.transformBody(bodies().get(i), List.of(selectorExpression), opT.andThen((block, op) -> {\n+                    curr.body(bodies().get(i), List.of(selectorExpression), opT.andThen((block, op) -> {\n@@ -2862,1 +2862,1 @@\n-                    curr.transformBody(bodies().get(i), blocks.get(i).parameters(), opT.andThen((block, op) -> {\n+                    curr.body(bodies().get(i), blocks.get(i).parameters(), opT.andThen((block, op) -> {\n@@ -3204,1 +3204,1 @@\n-            b.transformBody(init, List.of(), opT.andThen((block, op) -> {\n+            b.body(init, List.of(), opT.andThen((block, op) -> {\n@@ -3234,1 +3234,1 @@\n-            header.transformBody(cond, initValues, opT.andThen((block, op) -> {\n+            header.body(cond, initValues, opT.andThen((block, op) -> {\n@@ -3249,1 +3249,1 @@\n-            body.transformBody(this.body, initValues, opT.andThen((block, op) -> {\n+            body.body(this.body, initValues, opT.andThen((block, op) -> {\n@@ -3259,1 +3259,1 @@\n-            update.transformBody(this.update, initValues, opT.andThen((block, op) -> {\n+            update.body(this.update, initValues, opT.andThen((block, op) -> {\n@@ -3444,1 +3444,1 @@\n-            b.transformBody(expression, List.of(), opT.andThen((block, op) -> {\n+            b.body(expression, List.of(), opT.andThen((block, op) -> {\n@@ -3468,1 +3468,1 @@\n-                init.transformBody(this.init, List.of(e), (block, op) -> {\n+                init.body(this.init, List.of(e), (block, op) -> {\n@@ -3482,1 +3482,1 @@\n-                body.transformBody(this.body, initValues, opT.andThen((block, op) -> {\n+                body.body(this.body, initValues, opT.andThen((block, op) -> {\n@@ -3504,1 +3504,1 @@\n-                init.transformBody(this.init, List.of(e), opT.andThen((block, op) -> {\n+                init.body(this.init, List.of(e), opT.andThen((block, op) -> {\n@@ -3517,1 +3517,1 @@\n-                body.transformBody(this.body, initValues, opT.andThen((block, op) -> {\n+                body.body(this.body, initValues, opT.andThen((block, op) -> {\n@@ -3645,1 +3645,1 @@\n-            header.transformBody(predicateBody(), List.of(), opT.andThen((block, op) -> {\n+            header.body(predicateBody(), List.of(), opT.andThen((block, op) -> {\n@@ -3660,1 +3660,1 @@\n-            body.transformBody(loopBody(), List.of(), opT.andThen((block, op) -> {\n+            body.body(loopBody(), List.of(), opT.andThen((block, op) -> {\n@@ -3789,1 +3789,1 @@\n-            body.transformBody(loopBody(), List.of(), opT.andThen((block, op) -> {\n+            body.body(loopBody(), List.of(), opT.andThen((block, op) -> {\n@@ -3799,1 +3799,1 @@\n-            header.transformBody(predicateBody(), List.of(), opT.andThen((block, op) -> {\n+            header.body(predicateBody(), List.of(), opT.andThen((block, op) -> {\n@@ -3906,1 +3906,1 @@\n-                    startBlock.transformBody(fromPred, List.of(), opt);\n+                    startBlock.body(fromPred, List.of(), opt);\n@@ -3909,1 +3909,1 @@\n-                    pred.transformBody(fromPred, pred.parameters(), opT.andThen(opt));\n+                    pred.body(fromPred, pred.parameters(), opT.andThen(opt));\n@@ -4097,1 +4097,1 @@\n-            b.transformBody(bodies.get(0), List.of(), opT.andThen((block, op) -> {\n+            b.body(bodies.get(0), List.of(), opT.andThen((block, op) -> {\n@@ -4111,1 +4111,1 @@\n-                builders.get(i).transformBody(bodies.get(i + 1), List.of(), opT.andThen((block, op) -> {\n+                builders.get(i).body(bodies.get(i + 1), List.of(), opT.andThen((block, op) -> {\n@@ -4344,1 +4344,1 @@\n-                b.transformBody(body, List.of(), (block, op) -> {\n+                b.body(body, List.of(), (block, op) -> {\n@@ -4406,1 +4406,1 @@\n-            tryRegionEnter.transformBody(body, List.of(), tryExitTransformer.andThen((block, op) -> {\n+            tryRegionEnter.body(body, List.of(), tryExitTransformer.andThen((block, op) -> {\n@@ -4459,1 +4459,1 @@\n-                    catchRegionEnter.transformBody(catcherBody, List.of(t), catchExitTransformer.andThen((block, op) -> {\n+                    catchRegionEnter.body(catcherBody, List.of(t), catchExitTransformer.andThen((block, op) -> {\n@@ -4481,1 +4481,1 @@\n-                    catcher.transformBody(catcherBody, List.of(t), opT.andThen((block, op) -> {\n+                    catcher.body(catcherBody, List.of(t), opT.andThen((block, op) -> {\n@@ -4499,1 +4499,1 @@\n-                finallyEnter.transformBody(finalizer, List.of(), opT.andThen((block, op) -> {\n+                finallyEnter.body(finalizer, List.of(), opT.andThen((block, op) -> {\n@@ -4519,1 +4519,1 @@\n-                catcherFinally.transformBody(finalizer, List.of(), opT.andThen((block, op) -> {\n+                catcherFinally.body(finalizer, List.of(), opT.andThen((block, op) -> {\n@@ -4548,1 +4548,1 @@\n-            finallyEnter.transformBody(finalizer, List.of(), opT.andThen((block2, op2) -> {\n+            finallyEnter.body(finalizer, List.of(), opT.andThen((block2, op2) -> {\n@@ -4886,1 +4886,1 @@\n-                endMatchBlock.transformBody(match, patternValues, opT.andThen((block, op) -> {\n+                endMatchBlock.body(match, patternValues, opT.andThen((block, op) -> {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-                    .body(builder -> builder.transformBody(original.body(), builder.parameters(), OpTransformer.COPYING_TRANSFORMER)\n+                    .body(builder -> builder.body(original.body(), builder.parameters(), OpTransformer.COPYING_TRANSFORMER)\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/CoreBinaryOpsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                    fb.transformBody(f.body(), fb.parameters(), OpTransformer.COPYING_TRANSFORMER);\n+                    fb.body(f.body(), fb.parameters(), OpTransformer.COPYING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestVarOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}