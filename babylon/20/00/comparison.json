{"files":[{"patch":"@@ -30,1 +30,1 @@\n-    protected abstract Queryable<?> createQuery(JavaType elementDesc, CoreOps.FuncOp queryExpression);\n+    protected abstract Queryable<?> createQuery(JavaType elementType, CoreOps.FuncOp queryExpression);\n@@ -32,1 +32,1 @@\n-    protected abstract QueryResult<?> createQueryResult(JavaType resultDesc, CoreOps.FuncOp expression);\n+    protected abstract QueryResult<?> createQueryResult(JavaType resultType, CoreOps.FuncOp expression);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/QueryProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-    JavaType DESC = JavaType.type(QueryResult.class);\n+    JavaType TYPE = JavaType.type(QueryResult.class);\n@@ -31,1 +31,1 @@\n-    JavaType resultDesc();\n+    JavaType resultType();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/QueryResult.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    JavaType DESC = type(Queryable.class);\n+    JavaType TYPE = type(Queryable.class);\n@@ -40,1 +40,1 @@\n-    JavaType elementDesc();\n+    JavaType elementType();\n@@ -48,1 +48,1 @@\n-        return (Queryable<T>) insertQuery(elementDesc(), \"where\", l);\n+        return (Queryable<T>) insertQuery(elementType(), \"where\", l);\n@@ -57,1 +57,1 @@\n-    private Queryable<?> insertQuery(JavaType elementDesc, String methodName, LambdaOp lambdaOp) {\n+    private Queryable<?> insertQuery(JavaType elementType, String methodName, LambdaOp lambdaOp) {\n@@ -60,1 +60,1 @@\n-        JavaType queryableDesc = type(Queryable.DESC, elementDesc);\n+        JavaType queryableType = type(Queryable.TYPE, elementType);\n@@ -62,1 +62,1 @@\n-                methodType(queryableDesc, queryExpression.funcDescriptor().parameters()))\n+                methodType(queryableType, queryExpression.funcDescriptor().parameters()))\n@@ -66,3 +66,3 @@\n-                    MethodDesc md = method(Queryable.DESC, methodName,\n-                            methodType(Queryable.DESC, ((JavaType) lambdaOp.functionalInterface()).rawType()));\n-                    Op.Result queryable = block.op(invoke(queryableDesc, md, query, fi));\n+                    MethodDesc md = method(Queryable.TYPE, methodName,\n+                            methodType(Queryable.TYPE, ((JavaType) lambdaOp.functionalInterface()).rawType()));\n+                    Op.Result queryable = block.op(invoke(queryableType, md, query, fi));\n@@ -73,1 +73,1 @@\n-        return provider().createQuery(elementDesc, nextQueryExpression);\n+        return provider().createQuery(elementType, nextQueryExpression);\n@@ -78,2 +78,2 @@\n-        JavaType resultDesc = type(type(Stream.class), elementDesc());\n-        return (QueryResult<Stream<T>>) insertQueryResult(resultDesc, \"elements\");\n+        JavaType resultType = type(type(Stream.class), elementType());\n+        return (QueryResult<Stream<T>>) insertQueryResult(resultType, \"elements\");\n@@ -84,2 +84,2 @@\n-        JavaType resultDesc = JavaType.LONG;\n-        return (QueryResult<Long>) insertQueryResult(resultDesc, \"count\");\n+        JavaType resultType = JavaType.LONG;\n+        return (QueryResult<Long>) insertQueryResult(resultType, \"count\");\n@@ -88,1 +88,1 @@\n-    private QueryResult<?> insertQueryResult(JavaType resultDesc, String methodName) {\n+    private QueryResult<?> insertQueryResult(JavaType resultType, String methodName) {\n@@ -91,1 +91,1 @@\n-        JavaType queryResultDesc = JavaType.type(QueryResult.DESC, resultDesc);\n+        JavaType queryResultType = JavaType.type(QueryResult.TYPE, resultType);\n@@ -93,1 +93,1 @@\n-                methodType(queryResultDesc, queryExpression.funcDescriptor().parameters()))\n+                methodType(queryResultType, queryExpression.funcDescriptor().parameters()))\n@@ -95,3 +95,3 @@\n-                    MethodDesc md = method(Queryable.DESC, methodName,\n-                            methodType(QueryResult.DESC));\n-                    Op.Result queryResult = block.op(invoke(queryResultDesc, md, query));\n+                    MethodDesc md = method(Queryable.TYPE, methodName,\n+                            methodType(QueryResult.TYPE));\n+                    Op.Result queryResult = block.op(invoke(queryResultType, md, query));\n@@ -102,1 +102,1 @@\n-        return provider().createQueryResult(resultDesc, queryResultExpression);\n+        return provider().createQueryResult(resultType, queryResultExpression);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/Queryable.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-    protected Queryable<?> createQuery(JavaType elementDesc, CoreOps.FuncOp expression) {\n-        return new TestQueryable<>(elementDesc, this, expression);\n+    protected Queryable<?> createQuery(JavaType elementType, CoreOps.FuncOp expression) {\n+        return new TestQueryable<>(elementType, this, expression);\n@@ -47,2 +47,2 @@\n-    protected QueryResult<?> createQueryResult(JavaType resultDesc, CoreOps.FuncOp expression) {\n-        return new TestQueryResult<>(resultDesc, expression);\n+    protected QueryResult<?> createQueryResult(JavaType resultType, CoreOps.FuncOp expression) {\n+        return new TestQueryResult<>(resultType, expression);\n@@ -52,1 +52,1 @@\n-        final JavaType elementDesc;\n+        final JavaType elementType;\n@@ -57,1 +57,1 @@\n-            this.elementDesc = type(tableClass);\n+            this.elementType = type(tableClass);\n@@ -60,1 +60,1 @@\n-            JavaType queryableType = type(Queryable.DESC, elementDesc);\n+            JavaType queryableType = type(Queryable.TYPE, elementType);\n@@ -67,2 +67,2 @@\n-        TestQueryable(JavaType elementDesc, TestQueryProvider provider, CoreOps.FuncOp expression) {\n-            this.elementDesc = elementDesc;\n+        TestQueryable(JavaType elementType, TestQueryProvider provider, CoreOps.FuncOp expression) {\n+            this.elementType = elementType;\n@@ -79,2 +79,2 @@\n-        public JavaType elementDesc() {\n-            return elementDesc;\n+        public JavaType elementType() {\n+            return elementType;\n@@ -89,1 +89,1 @@\n-    record TestQueryResult<T>(JavaType resultDesc, CoreOps.FuncOp expression) implements QueryResult<T> {\n+    record TestQueryResult<T>(JavaType resultType, CoreOps.FuncOp expression) implements QueryResult<T> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/TestQueryProvider.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}