{"files":[{"patch":"@@ -159,1 +159,10 @@\n-     * Returns this block's index within the parent bodies list of blocks.\n+     * Returns this block's index within the parent body's blocks.\n+     * <p>\n+     * The following identity holds true:\n+     * {@snippet lang = \"java\"\n+     *     this.parentBody().blocks().indexOf(this) == this.index();\n+     * }\n+     *\n+     * @apiNote\n+     * The block's index may be used to efficiently track blocks using\n+     * bits sets or boolean arrays.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Block.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -426,0 +426,2 @@\n+                \/\/ @@@ Remove non-empty blocks with no predecessors?\n+                \/\/     Retaining such blocks may be useful for debugging, or perhaps it's intentional?\n@@ -537,0 +539,3 @@\n+    \/\/ Sort blocks in reverse post order\n+    \/\/ After sorting the following holds for a block\n+    \/\/   block.parentBody().blocks().indexOf(block) == block.index()\n@@ -546,1 +551,1 @@\n-        \/\/ Ensure unreferenced blocks occur last\n+        \/\/ Also ensuring blocks with no predecessors occur last\n@@ -579,0 +584,7 @@\n+        if (blocks.get(0).index > 0) {\n+            \/\/ There are blocks with no predecessors\n+            \/\/ Reassign indexes to their natural indexes, sort order is preserved\n+            for (int i = 0; i < blocks.size(); i++) {\n+                blocks.get(i).index = i;\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Body.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.Block;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.op.CoreOps;\n+import java.lang.runtime.CodeReflection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+\n+\/*\n+ * @test\n+ * @run testng TestBlockIndexes\n+ *\/\n+\n+public class TestBlockIndexes {\n+\n+    @CodeReflection\n+    static int f(int[] a) {\n+        int sum = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            sum += a[i];\n+        }\n+        return sum;\n+    }\n+\n+    @Test\n+    public void testBlockIndexes() {\n+        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        f = f.transform((block, op) -> {\n+            if (op instanceof Op.Lowerable lop) {\n+                return lop.lower(block);\n+            } else {\n+                block.op(op);\n+                return block;\n+            }\n+        });\n+        assertBlockIndexes(f);\n+\n+        AtomicBoolean first = new AtomicBoolean(true);\n+        f = f.transform((block, op) -> {\n+            if (first.getAndSet(false)) {\n+                \/\/ Create some blocks without predecessors\n+                for (int i = 0; i < 5; i++) {\n+                    Block.Builder redundant = block.block();\n+                    redundant.op(CoreOps._return());\n+                }\n+            }\n+            block.op(op);\n+            return block;\n+        });\n+        assertBlockIndexes(f);\n+    }\n+\n+    static void assertBlockIndexes(CoreOps.FuncOp f) {\n+        for (Block b : f.body().blocks()) {\n+            Assert.assertEquals(b.index(), b.parentBody().blocks().indexOf(b));\n+        }\n+    }\n+\n+    static CoreOps.FuncOp getFuncOp(String name) {\n+        Optional<Method> om = Stream.of(TestBlockIndexes.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockIndexes.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}