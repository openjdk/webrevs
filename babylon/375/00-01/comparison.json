{"files":[{"patch":"@@ -7,0 +7,2 @@\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.ParameterizedType;\n@@ -12,0 +14,2 @@\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n@@ -16,0 +20,2 @@\n+import jdk.incubator.code.type.ClassType;\n+import jdk.incubator.code.type.JavaType;\n@@ -83,0 +89,1 @@\n+            System.out.println(func.toText());\n@@ -84,1 +91,1 @@\n-\n+            OnnxProtoPrinter.printModel(protobufModel);\n@@ -103,1 +110,1 @@\n-    public static <T> Tensor<T> execute(OnnxFunction<Tensor<T>> codeLambda) {\n+    public static <T> T execute(OnnxFunction<T> codeLambda) {\n@@ -107,1 +114,1 @@\n-    public static <T> Tensor<T> execute(MethodHandles.Lookup l, OnnxFunction<Tensor<T>> codeLambda) {\n+    public static <T> T execute(MethodHandles.Lookup l, OnnxFunction<T> codeLambda) {\n@@ -112,1 +119,1 @@\n-    public static <T> Tensor<T> execute(Arena arena, MethodHandles.Lookup l, OnnxFunction<Tensor<T>> codeLambda) {\n+    public static <T> T execute(Arena arena, MethodHandles.Lookup l, OnnxFunction<T> codeLambda) {\n@@ -125,1 +132,16 @@\n-        return model.run(arena, arguments).getFirst();\n+        List<Tensor> ret = model.run(arena, arguments);\n+\n+        ClassType retType = ((ClassType)((CoreOp.LambdaOp)q.op()).invokableType().returnType()).rawType();\n+        if (retType.equals(TENSOR_RAW_TYPE)) {\n+            return (T)ret.getFirst();\n+        } else if(retType.equals(LIST_RAW_TYPE)) {\n+            return (T)ret;\n+        } else if(getRecordConstructor(l, retType) instanceof Constructor recordConstructor) {\n+            try {\n+                return (T)recordConstructor.newInstance(ret.toArray());\n+            } catch (ReflectiveOperationException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            throw new UnsupportedOperationException(\"Unsupported return type: \" + q.op().resultType());\n+        }\n@@ -128,0 +150,13 @@\n+    static Constructor getRecordConstructor(MethodHandles.Lookup l, ClassType ct) {\n+        try {\n+            var t = ct.resolve(l);\n+            while (t instanceof ParameterizedType pt) t = pt.getRawType();\n+            if (t instanceof Class c && c.isRecord()) return c.getConstructors()[0];\n+        } catch (ReflectiveOperationException _) {\n+        }\n+        return null;\n+    }\n+\n+    static final JavaType TENSOR_RAW_TYPE = JavaType.type(Tensor.class);\n+    static final JavaType LIST_RAW_TYPE = JavaType.type(List.class);\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":40,"deletions":5,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-        Loop(TypeElement resultType, Value m, Value cond, Value v_initial, Body.Builder body) {\n+        Loop(TypeElement resultType, Value m, Value cond, Object v_initial, Body.Builder body) {\n@@ -316,1 +316,1 @@\n-    public static Loop Loop(TypeElement resultType, Value m, Value cond, Value v_initial, Body.Builder body) {\n+    public static Loop Loop(TypeElement resultType, Value m, Value cond, Object v_initial, Body.Builder body) {\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/ExplicitOnnxOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -156,1 +156,13 @@\n-    @Test\n+    @CodeReflection\n+    public List<Tensor<Float>> ifConstList(Tensor<Boolean> cond) {\n+        return If(cond, () -> List.of(Constant(1f)), () -> List.of(Constant(-1f)));\n+    }\n+\n+    public record SingleValueTuple<T>(T val) {}\n+\n+    @CodeReflection\n+    public SingleValueTuple<Tensor<Float>> ifConstRecord(Tensor<Boolean> cond) {\n+        return If(cond, () -> new SingleValueTuple(Constant(1f)), () -> new SingleValueTuple(Constant(-1f)));\n+    }\n+\n+\/\/    @Test\n@@ -168,0 +180,6 @@\n+\n+        assertEquals(expFalse, execute(() -> ifConstList(condFalse)).get(0));\n+        assertEquals(expTrue, execute(() -> ifConstList(condTrue)).get(0));\n+\n+        assertEquals(expFalse, execute(() -> ifConstRecord(condFalse)).val());\n+        assertEquals(expTrue, execute(() -> ifConstRecord(condTrue)).val());\n@@ -242,0 +260,5 @@\n+    @CodeReflection\n+    public SingleValueTuple<Tensor<Float>> forLoopAddRecord(Tensor<Long> max, Tensor<Float> initialValue) {\n+        return Loop(max, TRUE, new SingleValueTuple<>(initialValue), (i, cond, v) -> new LoopReturn<>(cond, new SingleValueTuple<>(Add(v.val(), v.val()))));\n+    }\n+\n@@ -249,0 +272,1 @@\n+\/\/        assertEquals(expected, execute(() -> forLoopAddRecord(max, value)).val());\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}