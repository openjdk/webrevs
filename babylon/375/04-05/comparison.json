{"files":[{"patch":"@@ -7,1 +7,0 @@\n-import java.util.Optional;\n@@ -122,20 +121,0 @@\n-    @CodeReflection\n-    public Tensor<Long> lastPos(Tensor<Long> pathLog) {\n-        return Slice(pathLog, mThree, mOne, empty(), empty());\n-    }\n-\n-    @CodeReflection\n-    public Tensor<Long> lastDirection(Tensor<Long> pathLog) {\n-        return Slice(pathLog, mOne, max, empty(), empty());\n-    }\n-\n-    @CodeReflection\n-    public Tensor<Long> addToLog(Tensor<Long> pathLog, Tensor<Long> pos, Tensor<Long> direction) {\n-        return Concat(List.of(pathLog, pos, direction), 0);\n-    }\n-\n-    @CodeReflection\n-    public Tensor<Byte> extractDirections(Tensor<Long> pathLog) {\n-        return Cast(Slice(pathLog, two, max, Optional.of(zero), Optional.of(three)), empty(), 3);\n-    }\n-\n@@ -152,5 +131,5 @@\n-    public Tensor<Long> walkAroundTheMaze() {\n-        var start = Concat(List.of(homePos, directionEast), 0);\n-        var pathLog = Loop(limit, _true, start, (_, _, log) -> {\n-            var pos = lastPos(log);\n-            var direction = lastDirection(log);\n+    public Tensor<Byte> appendToPath(Tensor<Byte> path, Tensor<Long> direction) {\n+        return Concat(List.of(path, Cast(direction, empty(), 2)), 0);\n+    }\n+\n+    public record LoopData(Tensor<Long> pos, Tensor<Long> direction, Tensor<Byte> path) {}\n@@ -158,0 +137,4 @@\n+    @CodeReflection\n+    public Tensor<Byte> walkAroundTheMaze() {\n+        var initData = new LoopData(homePos, directionEast, Cast(directionEast, empty(), 2));\n+        var outData = Loop(limit, _true, initData, (_, _, loopData) -> {\n@@ -159,2 +142,2 @@\n-            pos = posInFrontOfMe(pos, direction);\n-            direction = turnRight(direction);\n+            var pos = posInFrontOfMe(loopData.pos(), loopData.direction());\n+            var direction = turnRight(loopData.direction());\n@@ -163,1 +146,1 @@\n-            return new LoopReturn<>(Not(atHome(pos)), addToLog(log, pos, direction));\n+            return new LoopReturn<>(Not(atHome(pos)), new LoopData(pos, direction, appendToPath(loopData.path(), direction)));\n@@ -165,1 +148,1 @@\n-        return pathLog;\n+        return outData.path();\n@@ -171,1 +154,1 @@\n-            var directions = execute(arena, MethodHandles.lookup(), () -> extractDirections(walkAroundTheMaze()));\n+            var directions = execute(arena, MethodHandles.lookup(), () -> walkAroundTheMaze());\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/WalkTheMazeTest.java","additions":14,"deletions":31,"binary":false,"changes":45,"status":"modified"}]}