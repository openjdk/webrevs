{"files":[{"patch":"@@ -39,1 +39,1 @@\n-public class TextModel implements Root {\n+public  class TextModel implements Root {\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/TextModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,169 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.tools.textmodel.ui;\n-\n-import hat.tools.textmodel.BabylonTextModel;\n-import hat.tools.textmodel.JavaTextModel;\n-import hat.tools.textmodel.TextModel;\n-import hat.tools.textmodel.tokens.Arrow;\n-import hat.tools.textmodel.tokens.At;\n-import hat.tools.textmodel.tokens.Ch;\n-import hat.tools.textmodel.tokens.Comment;\n-import hat.tools.textmodel.tokens.DottedName;\n-import hat.tools.textmodel.tokens.FloatConst;\n-import hat.tools.textmodel.tokens.IntConst;\n-import hat.tools.textmodel.tokens.Nl;\n-import hat.tools.textmodel.tokens.ReservedWord;\n-import hat.tools.textmodel.tokens.Seq;\n-import hat.tools.textmodel.tokens.StringLiteral;\n-import hat.tools.textmodel.tokens.Ws;\n-\n-import javax.swing.JTextPane;\n-import javax.swing.text.DefaultHighlighter;\n-import javax.swing.text.Element;\n-import javax.swing.text.Style;\n-import javax.swing.text.StyleConstants;\n-import java.awt.Color;\n-import java.awt.Font;\n-import java.awt.geom.Rectangle2D;\n-import java.util.List;\n-\n-public class AbstractTextModelViewer extends TextViewer {\n-    static Style style(JTextPane jTextPane, String name, Color color, boolean bold, boolean italic, boolean underline) {\n-        var s = jTextPane.addStyle(name, null);\n-        StyleConstants.setForeground(s, color);\n-        StyleConstants.setBold(s, bold);\n-        StyleConstants.setItalic(s, italic);\n-        StyleConstants.setUnderline(s, underline);\n-        return s;\n-    }\n-\n-    final protected TextModel textModel;\n-    final protected Style comment;\n-    final protected Style stringLiteral;\n-    final protected Style number;\n-    final protected Style operator;\n-    final protected Style babylonSSARef;\n-    final protected Style babylonSSADef;\n-    final protected Style arrow;\n-    final protected Style modifier;\n-    final protected Style javaAnnotation;\n-    final protected Style babylonOp;\n-    final protected Style dottedName;\n-    final protected Style type;\n-    final protected Style babylonBlockOrBody;\n-    final protected Style babylonAnonymousAttribute;\n-    final protected Style babylonNamedAttribute;\n-    final protected Style babylonLocationAttribute;\n-    final protected Style babylonFileLocationAttribute;\n-    final protected Style reservedWord;\n-\n-    AbstractTextModelViewer(TextModel textModel, JTextPane jtextPane, Font font, boolean dark) {\n-        super(jtextPane);\n-        this.textModel = textModel;\n-        jtextPane.setFont(font);\n-        if (dark) {\n-            jtextPane.setBackground(Color.BLACK);\n-            this.highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(new Color(80, 80, 80));\n-            this.defaultStyle = style(this.jtextPane, \"Default\", new Color(255, 255, 255), false, false, false);\n-            this.comment = style(this.jtextPane, \"Comment\", new Color(0, 255, 150), false, true, false);\n-            this.stringLiteral = style(this.jtextPane, \"StringLiteral\", new Color(255, 42, 42), false, false, false);\n-            this.number = style(this.jtextPane, \"Number\", new Color(255, 42, 42), false, false, false);\n-            this.operator = style(this.jtextPane, \"Operator\", new Color(120, 120, 120), false, false, false);\n-            this.babylonSSADef = style(this.jtextPane, \"SSADef\", new Color(8, 160, 255), true, true, true);\n-            this.babylonSSARef = style(this.jtextPane, \"SSARef\", new Color(8, 160, 255), false, false, false);\n-            this.arrow = style(this.jtextPane, \"Arrow\", new Color(255, 120, 120), true, false, false);\n-            this.modifier = style(this.jtextPane, \"Modifier\", new Color(200, 125, 0), true, true, false);\n-            this.javaAnnotation = style(this.jtextPane, \"Annotation\", new Color(255, 255, 180), false, true, false);\n-            this.babylonOp = style(this.jtextPane, \"Op\", new Color(2, 210, 10), false, true, false);\n-            this.dottedName = style(this.jtextPane, \"DottedName\", new Color(120, 120, 10), false, true, false);\n-            this.type = style(this.jtextPane, \"Type\", new Color(12, 255, 170), false, true, false);\n-            this.babylonBlockOrBody = style(this.jtextPane, \"Body\", new Color(180, 133, 130), false, true, false);\n-            this.babylonAnonymousAttribute = style(this.jtextPane, \"AnonymousAttribute\", new Color(255, 255, 18), false, true, false);\n-            this.babylonNamedAttribute = style(this.jtextPane, \"NamedAttribute\", new Color(255, 25, 180), false, true, false);\n-            this.babylonLocationAttribute = style(this.jtextPane, \"LocationAttribute\", new Color(200, 200, 200), false, true, false);\n-            this.babylonFileLocationAttribute = style(this.jtextPane, \"FileLocationAttribute\", new Color(255, 255, 255), false, true, false);\n-            this.reservedWord = style(this.jtextPane, \"ReservedWord\", new Color(255, 200, 100), false, true, false);\n-           } else {\n-            this.highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(new Color(200, 200, 0));\n-            this.defaultStyle = style(this.jtextPane, \"Default\", new Color(0, 0, 0), false, false, false);\n-            this.comment = style(this.jtextPane, \"Comment\", new Color(0, 100, 0), false, true, false);\n-            this.stringLiteral = style(this.jtextPane, \"StringLiteral\", new Color(100, 10, 100), false, false, false);\n-            this.number = style(this.jtextPane, \"Number\", new Color(255, 42, 42), false, false, false);\n-            this.babylonOp = style(this.jtextPane, \"Operator\", new Color(120, 120, 120), false, false, false);\n-            this.babylonSSADef = style(this.jtextPane, \"SSADef\", new Color(150, 60, 55), true, true, true);\n-            this.babylonSSARef = style(this.jtextPane, \"SSARef\", new Color(150, 60, 255), false, false, false);\n-            this.arrow = style(this.jtextPane, \"Arrow\", new Color(0, 0, 0), true, false, false);\n-            this.modifier = style(this.jtextPane, \"Modifier\", new Color(100, 65, 0), true, true, false);\n-            this.javaAnnotation = style(this.jtextPane, \"Annotation\", new Color(25, 25, 180), false, true, false);\n-            this.operator = style(this.jtextPane, \"Op\", new Color(0, 100, 0), false, true, false);\n-            this.dottedName = style(this.jtextPane, \"DottedName\", new Color(120, 120, 10), false, true, false);\n-            this.type = style(this.jtextPane, \"Type\", new Color(120, 55, 70), true, true, false);\n-            this.babylonBlockOrBody = style(this.jtextPane, \"Body\", new Color(180, 33, 30), false, true, false);\n-            this.babylonAnonymousAttribute = style(this.jtextPane, \"AnonymousAttribute\", new Color(100, 2, 2), false, true, false);\n-            this.babylonNamedAttribute = style(this.jtextPane, \"NamedAttribute\", new Color(100, 100, 2), false, true, false);\n-            this.babylonLocationAttribute = style(this.jtextPane, \"LocationAttribute\", new Color(100, 100, 2), false, true, true);\n-            this.babylonFileLocationAttribute = style(this.jtextPane, \"FileLocationAttribute\", new Color(25, 25, 25), false, true, false);\n-            this.reservedWord = style(this.jtextPane, \"ReservedWord\", new Color(1, 1, 1), false, true, false);\n-            }\n-        setTextFromDocModel();\n-    }\n-\n-    @Override\n-    public void applyStyles() {\n-        textModel.visit(t -> {\n-                    Style currentStyle = switch (t) {\n-                        case Ch _, At _ -> operator;\n-                        case StringLiteral _ -> stringLiteral;\n-                        case JavaTextModel.JavaAnnotation _ -> javaAnnotation;\n-                        case ReservedWord _ -> reservedWord;\n-                        case JavaTextModel.JavaModifier _ -> modifier;\n-                        case Comment _ -> comment;\n-                        case Arrow _ -> arrow;\n-                        case BabylonTextModel.BabylonAnonymousAttribute _ -> babylonAnonymousAttribute;\n-                        case BabylonTextModel.BabylonFileLocationAttribute _ -> babylonFileLocationAttribute;\n-                        case BabylonTextModel.BabylonLocationAttribute _ -> babylonLocationAttribute;\n-                        case BabylonTextModel.BabylonNamedAttribute _ -> babylonNamedAttribute;\n-                        case JavaTextModel.JavaType _, BabylonTextModel.BabylonTypeAttribute _ -> type;\n-                        case BabylonTextModel.BabylonSSADef _ -> babylonSSADef;\n-                        case BabylonTextModel.BabylonSSARef _ -> babylonSSARef;\n-                        case BabylonTextModel.BabylonOp _ -> babylonOp;\n-                        case DottedName _ -> dottedName;\n-                        case BabylonTextModel.BabylonBlockOrBody _ -> babylonBlockOrBody;\n-                        case Ws _, Nl _, Seq _ -> defaultStyle;\n-                        case FloatConst _, IntConst _ -> number;\n-                        default -> defaultStyle;\n-                    };\n-                    jtextPane.getStyledDocument().setCharacterAttributes(t.pos().textOffset(), t.len(), currentStyle, true);\n-                }\n-        );\n-    }\n-\n-    @Override\n-    public String plainText() {\n-        return     textModel.plainText();\n-    }\n-\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/AbstractTextModelViewer.java","additions":0,"deletions":169,"binary":false,"changes":169,"status":"deleted"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.JavaTextModel;\n+import hat.tools.textmodel.TextModel;\n+import hat.tools.textmodel.tokens.Arrow;\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Ch;\n+import hat.tools.textmodel.tokens.Comment;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.FloatConst;\n+import hat.tools.textmodel.tokens.IntConst;\n+import hat.tools.textmodel.tokens.Nl;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.StringLiteral;\n+import hat.tools.textmodel.tokens.Ws;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.DefaultHighlighter;\n+import javax.swing.text.Style;\n+import javax.swing.text.StyleConstants;\n+import java.awt.Color;\n+\n+public  class BabylonStyleMapper extends StyleMapper {\n+    final protected Style comment;\n+    final protected Style stringLiteral;\n+    final protected Style number;\n+    final protected Style operator;\n+    final protected Style babylonSSARef;\n+    final protected Style babylonSSADef;\n+    final protected Style arrow;\n+    final protected Style modifier;\n+    final protected Style javaAnnotation;\n+    final protected Style babylonOp;\n+    final protected Style dottedName;\n+    final protected Style type;\n+    final protected Style babylonBlockOrBody;\n+    final protected Style babylonAnonymousAttribute;\n+    final protected Style babylonNamedAttribute;\n+    final protected Style babylonLocationAttribute;\n+    final protected Style babylonFileLocationAttribute;\n+    final protected Style reservedWord;\n+\n+    BabylonStyleMapper(JTextPane jTextPane, boolean dark) {\n+        super(jTextPane, dark?new Color(80, 80, 80):new Color(200, 200, 0),\n+                dark?new Color(255, 255, 255):new Color(0, 0, 0),\n+                dark?Color.BLACK:Color.WHITE\n+        );\n+        if (dark) {\n+            this.comment = style( \"Comment\", new Color(0, 255, 150), false, true, false);\n+            this.stringLiteral = style( \"StringLiteral\", new Color(255, 42, 42), false, false, false);\n+            this.number = style( \"Number\", new Color(255, 42, 42), false, false, false);\n+            this.operator = style( \"Operator\", new Color(120, 120, 120), false, false, false);\n+            this.babylonSSADef = style( \"SSADef\", new Color(8, 160, 255), true, true, true);\n+            this.babylonSSARef = style( \"SSARef\", new Color(8, 160, 255), false, false, false);\n+            this.arrow = style( \"Arrow\", new Color(255, 120, 120), true, false, false);\n+            this.modifier = style( \"Modifier\", new Color(200, 125, 0), true, true, false);\n+            this.javaAnnotation = style( \"Annotation\", new Color(255, 255, 180), false, true, false);\n+            this.babylonOp = style( \"Op\", new Color(2, 210, 10), false, true, false);\n+            this.dottedName = style( \"DottedName\", new Color(120, 120, 10), false, true, false);\n+            this.type = style( \"Type\", new Color(12, 255, 170), false, true, false);\n+            this.babylonBlockOrBody = style( \"Body\", new Color(180, 133, 130), false, true, false);\n+            this.babylonAnonymousAttribute = style( \"AnonymousAttribute\", new Color(255, 255, 18), false, true, false);\n+            this.babylonNamedAttribute = style( \"NamedAttribute\", new Color(255, 25, 180), false, true, false);\n+            this.babylonLocationAttribute = style( \"LocationAttribute\", new Color(200, 200, 200), false, true, false);\n+            this.babylonFileLocationAttribute = style( \"FileLocationAttribute\", new Color(255, 255, 255), false, true, false);\n+            this.reservedWord = style( \"ReservedWord\", new Color(255, 200, 100), false, true, false);\n+           } else {\n+            this.comment = style( \"Comment\", new Color(0, 100, 0), false, true, false);\n+            this.stringLiteral = style( \"StringLiteral\", new Color(100, 10, 100), false, false, false);\n+            this.number = style( \"Number\", new Color(255, 42, 42), false, false, false);\n+            this.babylonOp = style( \"Operator\", new Color(120, 120, 120), false, false, false);\n+            this.babylonSSADef = style( \"SSADef\", new Color(150, 60, 55), true, true, true);\n+            this.babylonSSARef = style( \"SSARef\", new Color(150, 60, 255), false, false, false);\n+            this.arrow = style( \"Arrow\", new Color(0, 0, 0), true, false, false);\n+            this.modifier = style( \"Modifier\", new Color(100, 65, 0), true, true, false);\n+            this.javaAnnotation = style( \"Annotation\", new Color(25, 25, 180), false, true, false);\n+            this.operator = style( \"Op\", new Color(0, 100, 0), false, true, false);\n+            this.dottedName = style( \"DottedName\", new Color(120, 120, 10), false, true, false);\n+            this.type = style( \"Type\", new Color(120, 55, 70), true, true, false);\n+            this.babylonBlockOrBody = style( \"Body\", new Color(180, 33, 30), false, true, false);\n+            this.babylonAnonymousAttribute = style( \"AnonymousAttribute\", new Color(100, 2, 2), false, true, false);\n+            this.babylonNamedAttribute = style( \"NamedAttribute\", new Color(100, 100, 2), false, true, false);\n+            this.babylonLocationAttribute = style( \"LocationAttribute\", new Color(100, 100, 2), false, true, true);\n+            this.babylonFileLocationAttribute = style( \"FileLocationAttribute\", new Color(25, 25, 25), false, true, false);\n+            this.reservedWord = style( \"ReservedWord\", new Color(1, 1, 1), false, true, false);\n+            }\n+    }\n+\n+    @Override\n+    public void applyStyles(TextModel textModel) {\n+        textModel.visit(t -> {\n+                    Style currentStyle = switch (t) {\n+                        case Ch _, At _ -> operator;\n+                        case StringLiteral _ -> stringLiteral;\n+                        case JavaTextModel.JavaAnnotation _ -> javaAnnotation;\n+                        case ReservedWord _ -> reservedWord;\n+                        case JavaTextModel.JavaModifier _ -> modifier;\n+                        case Comment _ -> comment;\n+                        case Arrow _ -> arrow;\n+                        case BabylonTextModel.BabylonAnonymousAttribute _ -> babylonAnonymousAttribute;\n+                        case BabylonTextModel.BabylonFileLocationAttribute _ -> babylonFileLocationAttribute;\n+                        case BabylonTextModel.BabylonLocationAttribute _ -> babylonLocationAttribute;\n+                        case BabylonTextModel.BabylonNamedAttribute _ -> babylonNamedAttribute;\n+                        case JavaTextModel.JavaType _, BabylonTextModel.BabylonTypeAttribute _ -> type;\n+                        case BabylonTextModel.BabylonSSADef _ -> babylonSSADef;\n+                        case BabylonTextModel.BabylonSSARef _ -> babylonSSARef;\n+                        case BabylonTextModel.BabylonOp _ -> babylonOp;\n+                        case DottedName _ -> dottedName;\n+                        case BabylonTextModel.BabylonBlockOrBody _ -> babylonBlockOrBody;\n+                        case Ws _, Nl _, Seq _ -> defaultStyle;\n+                        case FloatConst _, IntConst _ -> number;\n+                        default -> defaultStyle;\n+                    };\n+                    jTextPane.getStyledDocument().setCharacterAttributes(t.pos().textOffset(), t.len(), currentStyle, true);\n+                }\n+        );\n+    }\n+\n+  \/\/  @Override\n+   \/\/ public String plainText() {\n+      \/\/  return     textModel.plainText();\n+   \/\/ }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/BabylonStyleMapper.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n-     TextViewer textViewer();\n+     TextModelViewer textModelViewer();\n@@ -43,1 +43,1 @@\n-    record Impl(Token token, TextViewer textViewer, Element element) implements ElementSpan {\n+    record Impl(Token token, TextModelViewer textModelViewer, Element element) implements ElementSpan {\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/ElementSpan.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import javax.swing.JTextPane;\n@@ -48,1 +47,1 @@\n-public class FuncOpTextModelViewer extends AbstractTextModelViewer {\n+public class FuncOpTextModelViewer extends TextModelViewer {\n@@ -54,2 +53,1 @@\n-    static class FuncOpTextPane extends JTextPane {\n-        private FuncOpTextModelViewer viewer;\n+    static class FuncOpTextPane extends TextViewerPane<FuncOpTextModelViewer> {\n@@ -84,1 +82,0 @@\n-\n@@ -92,1 +89,2 @@\n-            ((BabylonTextModel) viewer.textModel).ssaEdgeList.stream().forEach(edge -> {\n+            var tm = viewer.textModel;\n+            ((BabylonTextModel) tm).ssaEdgeList.stream().forEach(edge -> {\n@@ -103,7 +101,2 @@\n-        FuncOpTextPane(Font font) {\n-            super.setFont(font);\n-            this.viewer = null;\n-        }\n-\n-        void setViewer(FuncOpTextModelViewer viewer) {\n-            this.viewer = viewer;\n+        FuncOpTextPane(Font font, boolean editable) {\n+            super(font,editable);\n@@ -112,3 +105,7 @@\n-\n-    FuncOpTextModelViewer(TextModel textModel, Font font, boolean dark) {\n-        super(textModel, new FuncOpTextPane(font), font, dark);\n+    @Override\n+    public  TextModel createTextModel(String text) {\n+        return BabylonTextModel.of(styleMapper.jTextPane.getText());\n+    }\n+    FuncOpTextModelViewer(TextModel textModel,StyleMapper styleMapper) {\n+        super(textModel,styleMapper);\n+        javaTextModelViewer = null;\n@@ -116,1 +113,1 @@\n-        ((FuncOpTextPane) this.jtextPane).setViewer(this);\n+        ((FuncOpTextModelViewer.FuncOpTextPane)styleMapper.jTextPane).setViewer(this);\n@@ -118,1 +115,1 @@\n-        jtextPane.addMouseListener(new MouseAdapter() {\n+        styleMapper.jTextPane.addMouseListener(new MouseAdapter() {\n@@ -138,0 +135,1 @@\n+                styleMapper.jTextPane.repaint();\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpTextModelViewer.java","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+        var funcOpStyleMapper = new BabylonStyleMapper(new FuncOpTextModelViewer.FuncOpTextPane(font, false), false);\n+        var funcOpTextModelViewer = new FuncOpTextModelViewer(cr, funcOpStyleMapper);\n@@ -49,2 +51,2 @@\n-        var funcOpTextModelViewer = new FuncOpTextModelViewer(cr, font, false);\n-        var javaTextModelViewer = new JavaTextModelViewer(cr.javaTextModel, font, false);\n+        var javaStyleMapper = new BabylonStyleMapper(new JavaTextModelViewer.JavaTextPane(font, false), false);\n+        var javaTextModelViewer =new JavaTextModelViewer(cr.javaTextModel, javaStyleMapper);\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpViewer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.tools.textmodel.JavaTextModel;\n@@ -30,1 +31,0 @@\n-import javax.swing.JTextPane;\n@@ -33,1 +33,0 @@\n-import java.awt.Graphics2D;\n@@ -40,1 +39,1 @@\n-public class JavaTextModelViewer extends AbstractTextModelViewer {\n+public class JavaTextModelViewer extends TextModelViewer {\n@@ -44,2 +43,1 @@\n-    static class JavaTextPane extends JTextPane {\n-        private JavaTextModelViewer viewer;\n+    static class JavaTextPane extends TextModelViewer.TextViewerPane<JavaTextModelViewer> {\n@@ -48,1 +46,0 @@\n-            Graphics2D g2d = (Graphics2D) g;\n@@ -50,6 +47,2 @@\n-\n-        JavaTextPane(Font font) {\n-            super.setFont(font);\n-        }\n-        void setViewer(JavaTextModelViewer viewer) {\n-            this.viewer = viewer;\n+        JavaTextPane(Font font, boolean editable) {\n+            super(font, editable);\n@@ -59,2 +52,8 @@\n-    JavaTextModelViewer(TextModel textModel, Font font, boolean dark) {\n-        super(textModel, new JavaTextPane(font), font, dark);\n+    @Override\n+    public  TextModel createTextModel(String text) {\n+        return JavaTextModel.of(styleMapper.jTextPane.getText());\n+    }\n+\n+\n+    JavaTextModelViewer(TextModel textModel,StyleMapper styleMapper) {\n+        super(textModel, styleMapper);\n@@ -62,2 +61,2 @@\n-        ((JavaTextPane) this.jtextPane).setViewer(this);\n-        jtextPane.addMouseListener(new MouseAdapter() {\n+        ((JavaTextPane) this.styleMapper.jTextPane).setViewer(this);\n+        styleMapper.jTextPane.addMouseListener(new MouseAdapter() {\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/JavaTextModelViewer.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-\n-        var funcOpTextModelViewer = new FuncOpTextModelViewer(cr, font, false);\n+        var styleMapper = new BabylonStyleMapper(  new FuncOpTextModelViewer.FuncOpTextPane(font,false), false);\n+        var funcOpTextModelViewer = new FuncOpTextModelViewer(cr,  styleMapper);\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/SSAIDViewer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import com.sun.source.doctree.TextTree;\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.JavaTextModel;\n+import hat.tools.textmodel.TextModel;\n+import hat.tools.textmodel.tokens.Arrow;\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Ch;\n+import hat.tools.textmodel.tokens.Comment;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.FloatConst;\n+import hat.tools.textmodel.tokens.IntConst;\n+import hat.tools.textmodel.tokens.Nl;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.StringLiteral;\n+import hat.tools.textmodel.tokens.Ws;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.DefaultHighlighter;\n+import javax.swing.text.Highlighter;\n+import javax.swing.text.Style;\n+import javax.swing.text.StyleConstants;\n+import java.awt.Color;\n+\n+public abstract class StyleMapper {\n+    JTextPane jTextPane;\n+    protected final Style defaultStyle;\n+    protected final Highlighter.HighlightPainter highlightPainter;\n+    public Style style(String name, Color color, boolean bold, boolean italic, boolean underline) {\n+        var s = jTextPane.addStyle(name, null);\n+        StyleConstants.setForeground(s, color);\n+        StyleConstants.setBold(s, bold);\n+        StyleConstants.setItalic(s, italic);\n+        StyleConstants.setUnderline(s, underline);\n+        return s;\n+    }\n+    StyleMapper( JTextPane jtextPane, Color highlightPainterColor, Color defaultStyleColor, Color backGroundColor) {\n+        this.jTextPane = jtextPane;\n+        this.highlightPainter =   new DefaultHighlighter.DefaultHighlightPainter(highlightPainterColor);\n+        this.defaultStyle = style(\"Default\", defaultStyleColor, false, false, false);\n+        this.jTextPane.setBackground(backGroundColor);\n+    }\n+\n+    public abstract void applyStyles(TextModel textModel);\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/StyleMapper.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import javax.swing.JViewport;\n@@ -45,2 +44,2 @@\n-    private final AbstractTextModelViewer lhs;\n-    private final AbstractTextModelViewer rhs;\n+    private final TextModelViewer lhs;\n+    private final TextModelViewer rhs;\n@@ -62,1 +61,1 @@\n-    public TextGutter(AbstractTextModelViewer lhs, AbstractTextModelViewer rhs) {\n+    public TextGutter(TextModelViewer lhs, TextModelViewer rhs) {\n@@ -65,1 +64,1 @@\n-        setFont(this.lhs.jtextPane.getFont());\n+        setFont(this.lhs.styleMapper.jTextPane.getFont());\n@@ -72,1 +71,1 @@\n-        this.lhs.jtextPane.addCaretListener(_ -> repaint());\n+        this.lhs.styleMapper.jTextPane.addCaretListener(_ -> repaint());\n@@ -78,1 +77,1 @@\n-    void paintNumbers(Graphics g, AbstractTextModelViewer tv, int col) {\n+    void paintNumbers(Graphics g, TextModelViewer tv, int col) {\n@@ -81,3 +80,3 @@\n-        int rowStartOffset = tv.jtextPane.viewToModel(new Point(0, viewportPosition.y));\n-        int endOffset = tv.jtextPane.viewToModel(new Point(0, viewportPosition.y + viewPort.getHeight()));\n-        Element root = tv.jtextPane.getDocument().getDefaultRootElement();\n+        int rowStartOffset = tv.styleMapper.jTextPane.viewToModel(new Point(0, viewportPosition.y));\n+        int endOffset = tv.styleMapper.jTextPane.viewToModel(new Point(0, viewportPosition.y + viewPort.getHeight()));\n+        Element root = tv.styleMapper.jTextPane.getDocument().getDefaultRootElement();\n@@ -86,1 +85,1 @@\n-                int caretPosition = tv.jtextPane.getCaretPosition();\n+                int caretPosition = tv.styleMapper.jTextPane.getCaretPosition();\n@@ -93,1 +92,1 @@\n-                Rectangle r = tv.jtextPane.modelToView(rowStartOffset);\n+                Rectangle r = tv.styleMapper.jTextPane.modelToView(rowStartOffset);\n@@ -97,1 +96,1 @@\n-                rowStartOffset = Utilities.getRowEnd(tv.jtextPane, rowStartOffset) + 1;\n+                rowStartOffset = Utilities.getRowEnd(tv.styleMapper.jTextPane, rowStartOffset) + 1;\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextGutter.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,243 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+import hat.tools.textmodel.TextModel;\n+import hat.tools.textmodel.tokens.LineCol;\n+import hat.tools.textmodel.tokens.Span;\n+\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Element;\n+import java.awt.Font;\n+import java.awt.Point;\n+import java.awt.event.MouseEvent;\n+import java.awt.geom.Rectangle2D;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.TreeMap;\n+\n+public abstract class TextModelViewer {\n+    static class TextViewerPane<T extends TextModelViewer> extends JTextPane {\n+        protected T viewer;\n+        TextViewerPane(Font font, boolean editable) {\n+            setFont(font);\n+            setEditable(editable);\n+        }\n+        void setViewer(T viewer) {\n+            this.viewer = viewer;\n+        }\n+    }\n+    public TextModel textModel;\n+    protected final StyleMapper styleMapper;\n+    final public JScrollPane scrollPane;\n+    private String text;\n+\n+    public record Line(int line, int startOffset, int endOffset) implements Span {\n+    }\n+\n+    protected List<Line> lines;\n+    protected TreeMap<Integer, Line> offsetToLineTreeMap;\n+\n+    public abstract TextModel createTextModel(String text);\n+    void reparse(String msg) {\n+       \/\/ System.out.println(msg);\n+        var newTextModel = textModel;\n+        try{\n+            newTextModel =createTextModel(styleMapper.jTextPane.getText());\n+            textModel = newTextModel;\n+            styleMapper.jTextPane.getStyledDocument().removeDocumentListener(documentListener);\n+            setText(textModel.plainText());\n+            styleMapper.jTextPane.getStyledDocument().setCharacterAttributes(0, text.length(),styleMapper.defaultStyle, true);\n+            styleMapper.applyStyles(textModel);\n+            styleMapper.jTextPane.getStyledDocument().addDocumentListener(documentListener);\n+        }catch (IllegalStateException e){\n+            System.out.println(\"Parse failed\");\n+        }\n+    }\n+\n+    final DocumentListener documentListener;\n+    final DocumentListener editableDocumentListener=new DocumentListener() {\n+        @Override\n+        public void insertUpdate(DocumentEvent e) {\n+            SwingUtilities.invokeLater(() ->reparse(\"insert\"));\n+        }\n+\n+        @Override\n+        public void removeUpdate(DocumentEvent e) {\n+            SwingUtilities.invokeLater(() ->reparse(\"remove\"));\n+        }\n+\n+        @Override\n+        public void changedUpdate(DocumentEvent e) {\n+            SwingUtilities.invokeLater(() ->reparse(\"changed\"));\n+        }\n+    };\n+    final DocumentListener nonEditableDocumentListener=new DocumentListener(){\n+        @Override\n+        public void insertUpdate(DocumentEvent e) {\n+            SwingUtilities.invokeLater(() -> applyHighlighting());\n+        }\n+\n+        @Override\n+        public void removeUpdate(DocumentEvent e) {\n+            \/\/          SwingUtilities.invokeLater(() -> applyHighlighting());\n+        }\n+\n+        @Override\n+        public void changedUpdate(DocumentEvent e) {\n+            \/\/ Plain text attributes changed, not relevant for this highlighter\n+        }\n+    };\n+\n+    public TextModelViewer(TextModel textModel, StyleMapper styleMapper) {\n+        this.textModel = textModel;\n+        this.styleMapper = styleMapper;\n+        this.scrollPane = new JScrollPane(this.styleMapper.jTextPane);\n+        this.documentListener = styleMapper.jTextPane.isEditable() ?editableDocumentListener:nonEditableDocumentListener;\n+\n+        this.styleMapper.jTextPane.getStyledDocument().addDocumentListener(documentListener);\n+        this.styleMapper.applyStyles(textModel);\n+        this.setTextFromDocModel();;\n+    }\n+\n+    public Element getElement(int offset) {\n+        return this.styleMapper.jTextPane.getStyledDocument().getCharacterElement(offset);\n+   }\n+\n+    public Element getElementFromMouseEvent(MouseEvent e) {\n+        return getElement(getOffset(e));\n+    }\n+    public void scrollTo(Element funcOpElement) {\n+        try {\n+            var rectangle2D = this.styleMapper.jTextPane.modelToView2D(funcOpElement.getStartOffset());\n+            this.styleMapper.jTextPane.scrollRectToVisible(rectangle2D.getBounds());\n+        } catch (BadLocationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void highLightLines(LineCol first, LineCol last) {\n+        var highlighter = this.styleMapper.jTextPane.getHighlighter();\n+        try {\n+            var range = getLineRange(first, last);\n+            highlighter.addHighlight(range.startOffset(), range.endOffset(), styleMapper.highlightPainter);\n+        } catch (BadLocationException e) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    public int getOffset(Point p) {\n+        return this.styleMapper.jTextPane.viewToModel2D(p);\n+    }\n+\n+    public int getOffset(MouseEvent e) {\n+        return getOffset(e.getPoint());\n+    }\n+\n+    public void highLight(Element element) {\n+        var highlighter = this.styleMapper.jTextPane.getHighlighter();\n+        try {\n+            highlighter.addHighlight(element.getStartOffset(), element.getEndOffset(), styleMapper.highlightPainter);\n+        } catch (BadLocationException e) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    public int getLine(Element element) {\n+       var lineSpan = offsetToLineTreeMap.ceilingEntry(element.getStartOffset());\n+        return lineSpan.getValue().line + 1;\n+    }\n+\n+    String setText(String text) {\n+        this.text = text;\n+        String[] linesOfText = text.split(\"\\n\");\n+        lines = new ArrayList<>();\n+        offsetToLineTreeMap = new TreeMap<>();\n+        int accumOffset = 0;\n+        for (int currentLine = 0; currentLine < linesOfText.length; currentLine++) {\n+            Line line = new Line(lines.size(), accumOffset, accumOffset + linesOfText[currentLine].length() + 1);\/\/ +1 for newline\n+            lines.add(line);\n+            accumOffset = line.endOffset();\n+            offsetToLineTreeMap.put(accumOffset, line);\n+        }\n+        return text;\n+    }\n+\n+    public void removeHighlights() {\n+        this.styleMapper.jTextPane.getHighlighter().removeAllHighlights();\n+    }\n+    void applyHighlighting() {\n+        SwingUtilities.invokeLater(() -> {\n+            this.styleMapper.jTextPane.getStyledDocument().setCharacterAttributes(0, text.length(), styleMapper.defaultStyle, true);\n+            this.styleMapper.applyStyles(textModel);\n+        });\n+    }\n+\n+    protected void setTextFromDocModel() {\n+        try {\n+            if (this.text != null && !text.equals(\"\")) {\n+                this.styleMapper.jTextPane.getStyledDocument().remove(0, text.length());\n+            }\n+            setText(textModel.plainText());\n+            this.styleMapper.jTextPane.getStyledDocument().insertString(0, text, styleMapper.defaultStyle);\n+        } catch (BadLocationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public Span getLineRange(LineCol start, LineCol end) {\n+        Span startLine = lines.get(start.line());\n+        Span endLine = lines.get(end.line());\n+        return new Span.Impl(startLine.startOffset(), endLine.endOffset());\n+    }\n+\n+    public int getOffset(LineCol lineCol) {\n+        return lines.get(lineCol.line() - 1).startOffset() + lineCol.col();\n+    }\n+\n+    public Rectangle2D.Double getRect(Element from) {\n+        try {\n+            var fromPoint1 = this.styleMapper.jTextPane.modelToView2D(from.getStartOffset());\n+            var fromPoint2 = this.styleMapper.jTextPane.modelToView2D(from.getEndOffset());\n+            return new Rectangle2D.Double(fromPoint1.getBounds().getMinX(), fromPoint1.getMinY(), fromPoint2.getBounds().getWidth(), fromPoint2.getBounds().getHeight());\n+        } catch (Exception e) {\n+            return null;\n+        }\n+    }\n+\n+    public void highlight(ElementSpan fromElementSpan, List<ElementSpan> toElementSpans) {\n+        highLight(fromElementSpan.element());\n+        toElementSpans.forEach(targetElementSpan -> {\n+            var targetTextViewer = targetElementSpan.textModelViewer();\n+            var targetElement = targetElementSpan.element();\n+            targetTextViewer.highLight(targetElement);\n+            targetTextViewer.scrollTo(targetElement);\n+        });\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextModelViewer.java","additions":243,"deletions":0,"binary":false,"changes":243,"status":"added"},{"patch":"@@ -1,199 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.tools.textmodel.ui;\n-\n-import hat.tools.textmodel.tokens.LineCol;\n-import hat.tools.textmodel.tokens.Span;\n-\n-import javax.swing.JScrollPane;\n-import javax.swing.JTextPane;\n-import javax.swing.SwingUtilities;\n-import javax.swing.event.DocumentEvent;\n-import javax.swing.event.DocumentListener;\n-import javax.swing.text.BadLocationException;\n-import javax.swing.text.Element;\n-import javax.swing.text.Highlighter;\n-import javax.swing.text.Style;\n-import java.awt.Point;\n-import java.awt.event.MouseEvent;\n-import java.awt.geom.Rectangle2D;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.TreeMap;\n-\n-public abstract class TextViewer {\n-    public final JTextPane jtextPane;\n-    final public JScrollPane scrollPane;\n-    protected Highlighter.HighlightPainter highlightPainter;\n-    private String text;\n-    public record Line(int line, int startOffset, int endOffset) implements Span {}\n-    protected List<Line> lines;\n-    protected TreeMap<Integer,Line> offsetToLineTreeMap;\n-    protected Style defaultStyle;\n-\n-    public TextViewer(JTextPane jtextPane) {\n-        this.jtextPane = jtextPane;\n-        this.scrollPane = new JScrollPane(  this.jtextPane);\n-\n-        this.jtextPane.getStyledDocument().addDocumentListener(new DocumentListener() {\n-            @Override\n-            public void insertUpdate(DocumentEvent e) {\n-                SwingUtilities.invokeLater(() -> applyHighlighting());\n-            }\n-\n-            @Override\n-            public void removeUpdate(DocumentEvent e) {\n-      \/\/          SwingUtilities.invokeLater(() -> applyHighlighting());\n-            }\n-\n-            @Override\n-            public void changedUpdate(DocumentEvent e) {\n-                \/\/ Plain text attributes changed, not relevant for this highlighter\n-            }\n-        });\n-    }\n-\n-    public Element getElement(int offset) {\n-       return jtextPane.getStyledDocument().getCharacterElement(offset);\n-   }\n-\n-    public Element getElementFromMouseEvent(MouseEvent e) {\n-        return getElement(getOffset(e));\n-    }\n-    public void scrollTo(Element funcOpElement) {\n-        try {\n-            var rectangle2D = jtextPane.modelToView2D(funcOpElement.getStartOffset());\n-            jtextPane.scrollRectToVisible(rectangle2D.getBounds());\n-        } catch (BadLocationException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public void highLightLines(LineCol first, LineCol last) {\n-        var highlighter = jtextPane.getHighlighter();\n-        try {\n-            var range = getLineRange( first, last);\n-            highlighter.addHighlight(range.startOffset(), range.endOffset(), highlightPainter);\n-        } catch (BadLocationException e) {\n-            throw new IllegalStateException();\n-        }\n-    }\n-    public int getOffset(Point p) {\n-        return jtextPane.viewToModel2D(p);\n-    }\n-    public int getOffset(MouseEvent e) {\n-        return getOffset(e.getPoint());\n-    }\n-\n-    public void highLight(Element element) {\n-        var highlighter =  jtextPane.getHighlighter();\n-        try {\n-            highlighter.addHighlight(element.getStartOffset(),element.getEndOffset(),  highlightPainter);\n-        } catch (BadLocationException e) {\n-            throw new IllegalStateException();\n-        }\n-    }\n-\n-    public int getLine(Element element) {\n-       var lineSpan = offsetToLineTreeMap.ceilingEntry(element.getStartOffset());\n-       return lineSpan.getValue().line+1;\n-    }\n-\n-    String setText(String text) {\n-        this.text = text;\n-        String[] linesOfText = text.split(\"\\n\");\n-        lines = new ArrayList<>();\n-        offsetToLineTreeMap = new TreeMap<>();\n-        int accumOffset = 0;\n-        for (int currentLine = 0; currentLine < linesOfText.length; currentLine++) {\n-            Line line = new Line(lines.size(), accumOffset, accumOffset + linesOfText[currentLine].length() + 1);\/\/ +1 for newline\n-            lines.add(line);\n-            accumOffset = line.endOffset();\n-            offsetToLineTreeMap.put(accumOffset, line);\n-        }\n-        return text;\n-    }\n-\n-\n-    public void removeHighlights() {\n-        jtextPane.getHighlighter().removeAllHighlights();\n-    }\n-\n-\n-    protected abstract void applyStyles();\n-\n-    protected abstract String plainText();\n-\n-\n-    void applyHighlighting() {\n-        SwingUtilities.invokeLater(() -> {\n-            this.jtextPane.getStyledDocument().setCharacterAttributes(0, text.length(),  defaultStyle, true);\n-            applyStyles();\n-        });\n-    }\n-\n-    protected void setTextFromDocModel() {\n-        try {\n-            if (this.text != null && !text.equals(\"\")) {\n-                this.jtextPane.getStyledDocument().remove(0, text.length());\n-            }\n-            setText(plainText());\n-            this.jtextPane.getStyledDocument().insertString(0, text, defaultStyle);\n-        } catch (BadLocationException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public Span getLineRange(LineCol start, LineCol end) {\n-            Span startLine = lines.get(start.line());\n-            Span endLine = lines.get(end.line());\n-            return new Span.Impl(startLine.startOffset(),endLine.endOffset());\n-    }\n-\n-    public int getOffset(LineCol lineCol) {\n-        return lines.get(lineCol.line()-1).startOffset()+ lineCol.col();\n-    }\n-\n-    public Rectangle2D.Double getRect(Element from) {\n-        try {\n-            var fromPoint1 = jtextPane.modelToView2D(from.getStartOffset());\n-            var fromPoint2 = jtextPane.modelToView2D(from.getEndOffset());\n-            return new Rectangle2D.Double(fromPoint1.getBounds().getMinX(), fromPoint1.getMinY()\n-                    , fromPoint2.getBounds().getWidth(), fromPoint2.getBounds().getHeight());\n-        }catch (Exception e){\n-            return null;\n-        }\n-    }\n-\n-    public void highlight(ElementSpan fromElementSpan, List<ElementSpan> toElementSpans) {\n-        highLight(fromElementSpan.element());\n-        toElementSpans.forEach(targetElementSpan -> {\n-            var targetTextViewer = targetElementSpan.textViewer();\n-            var targetElement = targetElementSpan.element();\n-            targetTextViewer.highLight(targetElement);\n-            targetTextViewer.scrollTo(targetElement);\n-        });\n-    }\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextViewer.java","additions":0,"deletions":199,"binary":false,"changes":199,"status":"deleted"}]}