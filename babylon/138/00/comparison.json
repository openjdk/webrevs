{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -48,2 +49,2 @@\n-        static MockConfig create(Arena arena, MethodHandles.Lookup lookup, boolean gpu) {\n-            MockConfig config = SegmentMapper.of(lookup, MockConfig.class,\n+        static MockConfig create(BufferAllocator bufferAllocator, MethodHandles.Lookup lookup, boolean gpu) {\n+            MockConfig config = bufferAllocator.allocate(SegmentMapper.of(lookup, MockConfig.class,\n@@ -52,1 +53,1 @@\n-            ).allocate(arena);\n+            ));\n@@ -68,1 +69,1 @@\n-        getBackend(MockConfig.create(arena(), MethodHandles.lookup(), true));\n+        getBackend(MockConfig.create(this, MethodHandles.lookup(), true));\n","filename":"hat\/backends\/mock\/src\/main\/java\/hat\/backend\/MockBackend.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -48,2 +49,2 @@\n-        static OpenCLConfig create(Arena arena, MethodHandles.Lookup lookup, boolean gpu) {\n-            OpenCLConfig config = SegmentMapper.of(lookup, OpenCLConfig.class,\n+        static OpenCLConfig create(BufferAllocator bufferAllocator, MethodHandles.Lookup lookup, boolean gpu) {\n+            OpenCLConfig config = bufferAllocator.allocate(SegmentMapper.of(lookup, OpenCLConfig.class,\n@@ -52,1 +53,1 @@\n-            ).allocate(arena);\n+            ));\n@@ -68,1 +69,1 @@\n-        getBackend(OpenCLConfig.create(arena(), MethodHandles.lookup(), true));\n+        getBackend(OpenCLConfig.create(this, MethodHandles.lookup(), true));\n","filename":"hat\/backends\/opencl\/src\/main\/java\/hat\/backend\/OpenCLBackend.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -34,0 +35,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -60,2 +62,3 @@\n-    static S32RGBTable create(Accelerator accelerator, int length) {\n-        S32RGBTable table = SegmentMapper.ofIncomplete(accelerator.lookup, S32RGBTable.class,layout,length).allocate(accelerator.backend.arena());\n+    static S32RGBTable create(BufferAllocator bufferAllocator, int length) {\n+        S32RGBTable table = bufferAllocator.allocate(\n+                SegmentMapper.ofIncomplete(MethodHandles.lookup(), S32RGBTable.class,layout,length));\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/S32RGBTable.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -34,0 +35,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -57,2 +59,2 @@\n-    static S32XYTable create(Accelerator accelerator, int length) {\n-        S32XYTable table = SegmentMapper.ofIncomplete(accelerator.lookup, S32XYTable.class,layout, length).allocate(accelerator.backend.arena());\n+    static S32XYTable create(BufferAllocator bufferAllocator, int length) {\n+        S32XYTable table = bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(), S32XYTable.class,layout, length));\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/S32XYTable.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -34,0 +35,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -178,1 +180,1 @@\n-    static Cascade create(Accelerator accelerator, XMLHaarCascadeModel haarCascade) {\n+    static Cascade create(BufferAllocator bufferAllocator, XMLHaarCascadeModel haarCascade) {\n@@ -180,1 +182,1 @@\n-        Cascade cascade = SegmentMapper.of(accelerator.lookup, Cascade.class,\n+        Cascade cascade = bufferAllocator.allocate(SegmentMapper.of(MethodHandles.lookup(), Cascade.class,\n@@ -189,1 +191,1 @@\n-        ).allocate(accelerator.backend.arena());\n+        ));\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/Cascade.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -34,0 +35,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -72,1 +74,1 @@\n-    static ResultTable create(Accelerator accelerator, int length) {\n+    static ResultTable create(BufferAllocator bufferAllocator, int length) {\n@@ -74,2 +76,1 @@\n-                SegmentMapper.ofIncomplete(accelerator.lookup,ResultTable.class,layout,length)\n-                        .allocate(accelerator.backend.arena()),length);\n+                bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(),ResultTable.class,layout,length)),length);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/ResultTable.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.buffer.BufferAllocator;\n@@ -37,0 +38,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -122,1 +124,1 @@\n-    private static ScaleTable create(Accelerator accelerator, int length) {\n+    private static ScaleTable create(BufferAllocator bufferAllocator, int length) {\n@@ -124,2 +126,1 @@\n-                SegmentMapper.ofIncomplete(accelerator.lookup,ScaleTable.class,layout,length)\n-                        .allocate(accelerator.backend.arena()),length);\n+                bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(),ScaleTable.class,layout,length)),length);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/ScaleTable.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import hat.buffer.Buffer;\n+import hat.buffer.BufferAllocator;\n+import hat.ifacemapper.SegmentMapper;\n@@ -67,1 +70,1 @@\n-public class Accelerator {\n+public class Accelerator implements BufferAllocator {\n@@ -72,0 +75,2 @@\n+\n+\n@@ -99,0 +104,7 @@\n+\n+\n+    @Override\n+    public <T extends Buffer> T allocate(SegmentMapper<T> segmentMapper) {\n+        return backend.allocate(segmentMapper);\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/Accelerator.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import hat.buffer.Buffer;\n+import hat.buffer.BufferAllocator;\n@@ -33,0 +35,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -36,2 +39,3 @@\n-public interface Backend {\n-    Arena arena();\n+public interface Backend extends BufferAllocator {\n+\n+   \/\/ Arena arena();\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/Backend.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import hat.buffer.Buffer;\n+import hat.ifacemapper.SegmentMapper;\n@@ -39,2 +41,2 @@\n-    public Arena arena() {\n-        return arena;\n+    public <T extends Buffer> T allocate(SegmentMapper<T> segmentMapper){\n+        return segmentMapper.allocate(arena);\n@@ -42,1 +44,0 @@\n-\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/JavaBackend.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.buffer.Buffer;\n@@ -30,0 +31,1 @@\n+import hat.ifacemapper.SegmentMapper;\n@@ -43,0 +45,1 @@\n+\n@@ -44,2 +47,2 @@\n-    public Arena arena() {\n-        return arena;\n+    public <T extends Buffer> T allocate(SegmentMapper<T> segmentMapper){\n+        return segmentMapper.allocate(arena);\n@@ -47,1 +50,0 @@\n-\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/NativeBackend.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -262,1 +263,1 @@\n-    static ArgArray create(Accelerator accelerator, MemoryLayout... layouts) {\n+    static ArgArray create(BufferAllocator bufferAllocator, MemoryLayout... layouts) {\n@@ -265,1 +266,1 @@\n-        ArgArray argArray = SegmentMapper.of(accelerator.lookup, ArgArray.class,\n+        ArgArray argArray = bufferAllocator.allocate(SegmentMapper.of(MethodHandles.lookup(), ArgArray.class,\n@@ -270,1 +271,1 @@\n-        ).allocate(accelerator.backend.arena());\n+        ));\n@@ -343,1 +344,1 @@\n-    static ArgArray create(Accelerator accelerator, Object... args) {\n+    static ArgArray create(BufferAllocator bufferAllocator, Object... args) {\n@@ -369,1 +370,1 @@\n-        ArgArray argArray = SegmentMapper.of(accelerator.lookup, ArgArray.class,\n+        ArgArray argArray = bufferAllocator.allocate(SegmentMapper.of(MethodHandles.lookup(), ArgArray.class,\n@@ -376,1 +377,1 @@\n-        ).allocate(accelerator.backend.arena());\n+        ));\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/ArgArray.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -44,1 +45,1 @@\n-    static <T extends Array1D> T create(Accelerator accelerator, Class<T> clazz, StructLayout structLayout, int length) {\n+    static <T extends Array1D> T create(BufferAllocator bufferAllocator, Class<T> clazz, StructLayout structLayout, int length) {\n@@ -46,1 +47,1 @@\n-        T buffer = SegmentMapper.ofIncomplete(accelerator.lookup, clazz, structLayout,length).allocate(accelerator.backend.arena());\n+        T buffer = bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(), clazz, structLayout,length));\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Array1D.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -45,1 +46,1 @@\n-    static <T extends Array2D> T create(Accelerator accelerator, Class<T> clazz, StructLayout structLayout,int width, int height) {\n+    static <T extends Array2D> T create(BufferAllocator bufferAllocator, Class<T> clazz, StructLayout structLayout,int width, int height) {\n@@ -47,2 +48,1 @@\n-        T buffer = SegmentMapper.ofIncomplete(accelerator.lookup, clazz, structLayout, (long) width * height)\n-                .allocate(accelerator.backend.arena());\n+        T buffer = bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(), clazz, structLayout, (long) width * height));\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Array2D.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,9 @@\n+package hat.buffer;\n+\n+import hat.ifacemapper.SegmentMapper;\n+\n+import java.lang.foreign.MemorySegment;\n+\n+public interface BufferAllocator {\n+    <T extends Buffer> T allocate(SegmentMapper<T> segmentMapper);\n+}\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/BufferAllocator.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -61,2 +62,2 @@\n-    static <T extends ImageBuffer> T create(Accelerator accelerator, Class<T> iface,StructLayout structLayout, int width, int height, int bufferedImageType, int elementsPerPixel) {\n-        T rgba = SegmentMapper.ofIncomplete(accelerator.lookup, iface, structLayout, width * height * elementsPerPixel).allocate(accelerator.backend.arena());\n+    static <T extends ImageBuffer> T create(BufferAllocator bufferAllocator, Class<T> iface,StructLayout structLayout, int width, int height, int bufferedImageType, int elementsPerPixel) {\n+        T rgba = bufferAllocator.allocate(SegmentMapper.ofIncomplete(MethodHandles.lookup(), iface, structLayout, width * height * elementsPerPixel));\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/ImageBuffer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}