{"files":[{"patch":"@@ -617,1 +617,1 @@\n-                    String message = (String) invokeBody(l, messageBlock, oc, List.of());\n+                    String message = String.valueOf(invokeBody(l, messageBlock, oc, List.of()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1842,1 +1842,1 @@\n-                         FunctionType.functionType(JavaType.J_L_STRING));\n+                         FunctionType.functionType(typeToTypeElement(tree.detail.type)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,16 @@\n+    public static final String FAILURESTRING = \"failure\";\n+    public static final char FAILURECHAR = 'o';\n+\n+    public static final float FAILUREFLOAT = -1.0f;\n+    public static final double FAILUREDOUBLE = -1.0d;\n+    public static final byte FAILUREBYTE = -1;\n+    public static final short FAILURESHORT = -1;\n+    public static final int FAILUREINT = -1;\n+\n+    public static final long FAILURELONG = -1;\n+\n+    public static final String FAILUREOBJECTMSG = \"FAILURE OBJECT\";\n+\n+    public static final Object FAILUREOBJECT = new FailureObject();\n+\n+\n@@ -43,0 +59,76 @@\n+        testThrows(\"assertThrow\");\n+    }\n+\n+    @Test\n+    public void testAssertString(){\n+        AssertionError ae = testThrows(\"assertThrowWithMessage\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(FAILURESTRING)) {\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertChar() {\n+        AssertionError ae = testThrows(\"assertChar\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILURECHAR))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertFloat() {\n+        AssertionError ae = testThrows(\"assertFloat\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREFLOAT))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertDouble() {\n+        AssertionError ae = testThrows(\"assertDouble\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREDOUBLE))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertByte() {\n+        AssertionError ae = testThrows(\"assertByte\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREBYTE))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertShort() {\n+        AssertionError ae = testThrows(\"assertShort\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILURESHORT))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertInt() {\n+        AssertionError ae = testThrows(\"assertInt\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREINT))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertLong() {\n+        AssertionError ae = testThrows(\"assertLong\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILURELONG))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testAssertObject() {\n+        AssertionError ae = testThrows(\"assertObject\");\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREOBJECT))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n+    private static AssertionError testThrows(String methodName) {\n@@ -45,1 +137,1 @@\n-            Method method = clazz.getDeclaredMethod(\"assertThrow\");\n+            Method method = clazz.getDeclaredMethod(methodName);\n@@ -47,2 +139,3 @@\n-            \/\/Interpreter.invoke(MethodHandles.lookup(), f);\n-            Assert.assertThrows(AssertionError.class, () -> Interpreter.invoke(MethodHandles.lookup(), method.getCodeModel().orElseThrow()));\n+            AssertionError ae = (AssertionError) retCatch(() -> Interpreter.invoke(MethodHandles.lookup(), method.getCodeModel().orElseThrow()));\n+            Assert.assertNotNull(ae);\n+            return ae;\n@@ -52,1 +145,0 @@\n-        return;\n@@ -55,0 +147,11 @@\n+    private static Throwable retCatch(Runnable r) {\n+        try {\n+            r.run();\n+        } catch (Throwable t) {\n+            return t;\n+        }\n+        return null;\n+    }\n+\n+\n+\n@@ -59,0 +162,60 @@\n+\n+    @CodeReflection\n+    public static void assertThrowWithMessage() {\n+        assert false : FAILURESTRING;\n+    }\n+\n+    @CodeReflection\n+    public static void assertChar() {\n+        char c = FAILURECHAR;\n+        assert false : c;\n+    }\n+\n+    @CodeReflection\n+    public static void assertFloat() {\n+        float f = FAILUREFLOAT;\n+        assert false : f;\n+    }\n+\n+    @CodeReflection\n+    public static void assertDouble() {\n+        double d = FAILUREDOUBLE;\n+        assert false : d;\n+    }\n+\n+    @CodeReflection\n+    public static void assertByte() {\n+        byte b = FAILUREBYTE;\n+        assert false : b;\n+    }\n+\n+    @CodeReflection\n+    public static void assertShort() {\n+        short s = FAILURESHORT;\n+        assert false : s;\n+    }\n+\n+    @CodeReflection\n+    public static void assertInt() {\n+        int i = FAILUREINT;\n+        assert false : i;\n+    }\n+\n+    @CodeReflection\n+    public static void assertLong() {\n+        long l = FAILURELONG;\n+        assert false : l;\n+    }\n+\n+    @CodeReflection\n+    public static void assertObject() {\n+        Object o = FAILUREOBJECT;\n+        assert false : o;\n+    }\n+\n+    static class FailureObject {\n+        @Override\n+        public String toString(){\n+           return FAILUREOBJECTMSG;\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestAssert.java","additions":167,"deletions":4,"binary":false,"changes":171,"status":"modified"}]}