{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.code.op.ExtendedOps;\n@@ -249,1 +250,1 @@\n-        return invoke(l, r, capturedValues, Optional.empty(), args);\n+        return invoke(l, r, capturedValues, new OpContext(), args);\n@@ -252,0 +253,5 @@\n+    static Object invoke(MethodHandles.Lookup l, Body r,\n+                                 Map<Value, Object> capturedValues, OpContext oc,\n+                                 List<Object> args) {\n+        return invoke(l,r.entryBlock(), capturedValues, oc, args);\n+    }\n@@ -253,2 +259,2 @@\n-    private static Object invoke(MethodHandles.Lookup l, Body r,\n-                  Map<Value, Object> capturedValues, Optional<OpContext> ooc,\n+    private static Object invoke(MethodHandles.Lookup l, Block first,\n+                  Map<Value, Object> capturedValues, OpContext oc,\n@@ -256,3 +262,0 @@\n-        OpContext oc = ooc.orElse(new OpContext());\n-\n-        Block first = r.entryBlock();\n@@ -343,1 +346,1 @@\n-        return invoke(l, r, new HashMap<>(), Optional.of(oc), List.of());\n+        return invoke(l, r, Map.of(), oc, List.of());\n@@ -539,0 +542,2 @@\n+            \/\/Note: The nature of asserts and munged bodies may require a re-visiting.\n+            \/\/This code seems to work without poisoning contexts. See TestAssert.java in tests for relevant test coverage.\n@@ -540,1 +545,1 @@\n-            boolean testResult = (boolean) interpretBody(l,testBody,oc);\n+            boolean testResult = (boolean) interpretBody(l, testBody, oc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -23,0 +23,2 @@\n+import java.lang.reflect.code.Op;\n+import java.util.List;\n@@ -142,0 +144,8 @@\n+    @Test\n+    public void testAssertExpr2() {\n+        AssertionError ae = testThrows(\"assertExpr2\", List.of(int.class), 52);\n+        if (ae.getMessage() == null || !ae.getMessage().equals(String.valueOf(FAILUREINT))){\n+            Assert.fail(\"Assertion failure messages do not match.\");\n+        }\n+    }\n+\n@@ -143,0 +153,4 @@\n+        return testThrows(methodName, List.of());\n+    }\n+\n+    private static AssertionError testThrows(String methodName, List<Class<?>> params, Object...args) {\n@@ -145,1 +159,1 @@\n-            Method method = clazz.getDeclaredMethod(methodName);\n+            Method method = clazz.getDeclaredMethod(methodName,params.toArray(new Class[params.size()]));\n@@ -147,1 +161,13 @@\n-            AssertionError ae = (AssertionError) retCatch(() -> Interpreter.invoke(MethodHandles.lookup(), method.getCodeModel().orElseThrow()));\n+\n+            \/\/Ensure we're fully lowered before testing.\n+            final var fz = f.transform((b, o) -> {\n+                if (o instanceof Op.Lowerable l) {\n+                    b = l.lower(b);\n+                } else {\n+                    b.op(o);\n+                }\n+                return b;\n+            });\n+\n+\n+            AssertionError ae = (AssertionError) retCatch(() -> Interpreter.invoke(MethodHandles.lookup(), fz ,args));\n@@ -229,0 +255,9 @@\n+        String y = \"test\";\n+    }\n+\n+    @CodeReflection\n+    public static void assertExpr2(int iz) {\n+        int i = FAILUREINT;\n+        long l = FAILURELONG;\n+        assert false : (i > iz) ? i + l : i;\n+        String s = \"\";\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestAssert.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"}]}