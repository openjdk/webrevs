{"files":[{"patch":"@@ -220,1 +220,1 @@\n-                            Op ere = CoreOp.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor());\n+                            Op ere = CoreOp.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor(List.copyOf(stack)));\n@@ -232,1 +232,1 @@\n-                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor()));\n+                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor(List.copyOf(stack))));\n@@ -269,10 +269,6 @@\n-    \/\/                case LookupSwitchInstruction si -> {\n-    \/\/                    \/\/ Default label is first successor\n-    \/\/                    b.addSuccessor(blockMap.get(si.defaultTarget()));\n-    \/\/                    addSuccessors(si.cases(), blockMap, b);\n-    \/\/                }\n-    \/\/                case TableSwitchInstruction si -> {\n-    \/\/                    \/\/ Default label is first successor\n-    \/\/                    b.addSuccessor(blockMap.get(si.defaultTarget()));\n-    \/\/                    addSuccessors(si.cases(), blockMap, b);\n-    \/\/                }\n+                case LookupSwitchInstruction si -> {\n+                    liftSwitch(si.defaultTarget(), si.cases());\n+                }\n+                case TableSwitchInstruction si -> {\n+                    liftSwitch(si.defaultTarget(), si.cases());\n+                }\n@@ -618,0 +614,14 @@\n+    private void liftSwitch(Label defaultTarget, List<SwitchCase> cases) {\n+        Value v = toInt(stack.pop());\n+        SwitchCase last = cases.getLast();\n+        for (SwitchCase sc : cases) {\n+            Block.Builder next = sc == last ? blockMap.get(defaultTarget) : newBlock();\n+            op(CoreOp.conditionalBranch(\n+                    op(CoreOp.eq(v, op(CoreOp.constant(JavaType.INT, sc.caseValue())))),\n+                    blockMap.get(sc.target()).successor(List.copyOf(stack)),\n+                    next.successor(List.copyOf(stack))));\n+            moveTo(next);\n+        }\n+        endOfFlow();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.testng.SkipException;\n@@ -428,0 +429,20 @@\n+    @CodeReflection\n+    static int lookupSwitch(int i) {\n+        return switch (1000 * i) {\n+            case 1000 -> 1;\n+            case 2000 -> 2;\n+            case 3000 -> 3;\n+            default -> 0;\n+        };\n+    }\n+\n+    @CodeReflection\n+    static int tableSwitch(int i) {\n+        return switch (i) {\n+            case 1 -> 1;\n+            case 2 -> 2;\n+            case 3 -> 3;\n+            default -> 0;\n+        };\n+    }\n+\n@@ -552,1 +573,6 @@\n-        CoreOp.FuncOp lfunc = func.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n+        CoreOp.FuncOp lfunc;\n+        try {\n+            lfunc = func.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n+        } catch (UnsupportedOperationException uoe) {\n+            throw new SkipException(\"lowering caused:\", uoe);\n+        }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"}]}