{"files":[{"patch":"@@ -78,0 +78,3 @@\n+    private static final MethodRef LCMP = MethodRef.method(JavaType.J_L_LONG, \"compare\", JavaType.INT, JavaType.LONG, JavaType.LONG);\n+    private static final MethodRef FCMP = MethodRef.method(JavaType.J_L_FLOAT, \"compare\", JavaType.INT, JavaType.FLOAT, JavaType.FLOAT);\n+    private static final MethodRef DCMP = MethodRef.method(JavaType.J_L_DOUBLE, \"compare\", JavaType.INT, JavaType.DOUBLE, JavaType.DOUBLE);\n@@ -359,0 +362,6 @@\n+                        case LCMP ->\n+                                CoreOp.invoke(LCMP, stack.pop(), operand);\n+                        case FCMPL, FCMPG ->\n+                                CoreOp.invoke(FCMP, stack.pop(), operand);\n+                        case DCMPL, DCMPG ->\n+                                CoreOp.invoke(DCMP, stack.pop(), operand);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -413,0 +413,15 @@\n+    @CodeReflection\n+    static boolean compareLong(long i, long j) {\n+        return i > j;\n+    }\n+\n+    @CodeReflection\n+    static boolean compareFloat(float i, float j) {\n+        return i > j;\n+    }\n+\n+    @CodeReflection\n+    static boolean compareDouble(double i, double j) {\n+        return i > j;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}