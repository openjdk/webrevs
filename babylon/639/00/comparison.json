{"files":[{"patch":"@@ -58,1 +58,1 @@\n-CudaSource::CudaSource(size_t len, char *text, bool isCopy)\n+CudaSource::CudaSource(size_t len, char *text, bool isCopy, bool lineinfo)\n@@ -60,0 +60,1 @@\n+    _lineInfo = lineinfo;\n@@ -66,0 +67,4 @@\n+bool CudaSource::lineInfo() const {\n+    return _lineInfo;\n+}\n+\n@@ -83,1 +88,3 @@\n-        std::cout << \"CudaBackend device count = \" << deviceCount << std::endl;\n+        if (config->info) {\n+            std::cout << \"CudaBackend device count = \" << deviceCount << std::endl;\n+        }\n@@ -92,1 +99,3 @@\n-        std::cout << \"CudaBackend context created ok (id=\" << context << \")\" << std::endl;\n+        if (config->info) {\n+            std::cout << \"CudaBackend context created ok (id=\" << context << \")\" << std::endl;\n+        }\n@@ -143,10 +152,18 @@\n-        const char *argv[] {\n-            \"\/usr\/local\/cuda\/bin\/nvcc\",\n-            \"-ptx\",\n-            \"-Wno-deprecated-gpu-targets\",\n-            cudaPath.c_str(),\n-            \"-o\",\n-            ptxPath.c_str(),\n-            nullptr\n-        };\n-        const int stat = execvp(path, (char *const *) argv);\n+        std::vector<std::string> command;\n+        command.push_back(path);\n+        command.push_back(\"-ptx\");\n+        command.push_back(\"-Wno-deprecated-gpu-targets\");\n+        command.push_back(cudaPath);\n+        if (cudaSource->lineInfo()) {\n+            command.push_back(\"-lineinfo\");\n+        }\n+        command.push_back(\"-o\");\n+        command.push_back(ptxPath);\n+\n+        \/\/ conver to char*[]\n+        const char* args[command.size() + 1];\n+        for (int i = 0; i < command.size(); i++) {\n+            args[i] = command[i].c_str();\n+        }\n+        args[command.size()] = nullptr;\n+        const int stat = execvp(path, (char *const *) args);\n@@ -235,1 +252,1 @@\n-        CudaSource cudaSource(len , source, false);\n+        CudaSource cudaSource(len , source, false, config->profileCudaKernel);\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/native\/cpp\/cuda_backend.cpp","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -95,1 +95,2 @@\n-    CudaSource(size_t len, char *text, bool isCopy);\n+    CudaSource(size_t len, char *text, bool isCopy, bool lineinfo);\n+    bool lineInfo() const;\n@@ -100,0 +101,2 @@\n+private:\n+    bool _lineInfo = false;\n@@ -189,2 +192,0 @@\n-\n-\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/native\/include\/cuda_backend.h","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    static constexpr int PROFILE_CUDA_KERNEL_BIT          = 1<<0x1b;\n@@ -79,0 +80,1 @@\n+    bool profileCudaKernel;\n@@ -100,0 +102,1 @@\n+        profileCudaKernel((configBits & PROFILE_CUDA_KERNEL_BIT)==PROFILE_CUDA_KERNEL_BIT),\n@@ -123,0 +126,1 @@\n+                std::cout << \"native profilerCUDAKernel \" << profileCudaKernel << std::endl;\n@@ -151,0 +155,1 @@\n+    \"PROFILE_CUDA_KERNEL_BIT\",\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/config.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+    private static final Bit PROFILE_CUDA_KERNEL = Bit.nextBit(SHOW_COMPILATION_PHASES, \"PROFILE_CUDA_KERNEL\", \"Add -lineinfo to CUDA kernel compilation for profiling and debugging\");\n@@ -114,0 +115,3 @@\n+    public boolean isProfileCUDAKernelEnabled() {\n+        return PROFILE_CUDA_KERNEL.isSet(this);\n+    }\n@@ -135,1 +139,2 @@\n-            SHOW_COMPILATION_PHASES\n+            SHOW_COMPILATION_PHASES,\n+            PROFILE_CUDA_KERNEL\n","filename":"hat\/core\/src\/main\/java\/hat\/Config.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}