{"files":[{"patch":"@@ -1430,1 +1430,0 @@\n-                \/\/ @@@ cond.type can be boolean or Boolean\n@@ -1437,0 +1436,1 @@\n+                last = convert(last, typeElementToType(JavaType.BOOLEAN));\n@@ -1641,1 +1641,0 @@\n-            \/\/ @@@ cond.type can be boolean or Boolean\n@@ -1648,0 +1647,1 @@\n+            last = convert(last, typeElementToType(JavaType.BOOLEAN));\n@@ -1670,1 +1670,0 @@\n-            \/\/ @@@ cond.type can be boolean or Boolean\n@@ -1685,0 +1684,1 @@\n+            last = convert(last, typeElementToType(JavaType.BOOLEAN));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -324,0 +324,34 @@\n+\n+    @IR(\"\"\"\n+            func @\"test9\" (%0 : java.lang.Boolean)void -> {\n+                %1 : Var<java.lang.Boolean> = var %0 @\"b\";\n+                %2 : int = constant @\"0\";\n+                %3 : Var<int> = var %2 @\"i\";\n+                java.if\n+                    ()boolean -> {\n+                        %4 : java.lang.Boolean = var.load %1;\n+                        %5 : boolean = invoke %4 @\"java.lang.Boolean::booleanValue()boolean\";\n+                        yield %5;\n+                    }\n+                    ()void -> {\n+                        %6 : int = constant @\"1\";\n+                        var.store %3 %6;\n+                        yield;\n+                    }\n+                    ()void -> {\n+                        %7 : int = constant @\"2\";\n+                        var.store %3 %7;\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static void test9(Boolean b) {\n+        int i;\n+        if (b) {\n+            i = 1;\n+        } else {\n+            i = 2;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -128,0 +128,69 @@\n+\n+\n+    @IR(\"\"\"\n+            func @\"tes4\" ()void -> {\n+                  %0 : boolean = constant @\"true\";\n+                  %1 : java.lang.Boolean = invoke %0 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n+                  %2 : Var<java.lang.Boolean> = var %1 @\"b\";\n+                  %3 : int = constant @\"0\";\n+                  %4 : Var<int> = var %3 @\"i\";\n+                  java.while\n+                      ()boolean -> {\n+                          %5 : java.lang.Boolean = var.load %2;\n+                          %6 : boolean = invoke %5 @\"java.lang.Boolean::booleanValue()boolean\";\n+                          yield %6;\n+                      }\n+                      ()void -> {\n+                          %7 : int = var.load %4;\n+                          %8 : int = constant @\"1\";\n+                          %9 : int = add %7 %8;\n+                          var.store %4 %9;\n+                          %10 : int = var.load %4;\n+                          %11 : int = constant @\"10\";\n+                          %12 : boolean = lt %10 %11;\n+                          %13 : java.lang.Boolean = invoke %12 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n+                          var.store %2 %13;\n+                          java.continue;\n+                      };\n+                  return;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static void tes4() {\n+        Boolean b = true;\n+        int i = 0;\n+        while (b) {\n+            i++;\n+            b = i < 10;\n+        }\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test5\" (%0 : int)void -> {\n+                %1 : Var<int> = var %0 @\"i\";\n+                %2 : java.lang.Boolean = constant @null;\n+                %3 : Var<java.lang.Boolean> = var %2 @\"b\";\n+                java.do.while\n+                    ()void -> {\n+                        %4 : int = var.load %1;\n+                        %5 : int = constant @\"10\";\n+                        %6 : boolean = lt %4 %5;\n+                        %7 : java.lang.Boolean = invoke %6 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n+                        var.store %3 %7;\n+                        java.continue;\n+                    }\n+                    ()boolean -> {\n+                        %8 : java.lang.Boolean = var.load %3;\n+                        %9 : boolean = invoke %8 @\"java.lang.Boolean::booleanValue()boolean\";\n+                        yield %9;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static void test5(int i) {\n+        Boolean b;\n+        do {\n+            b = i < 10;\n+        } while (b);\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/WhileLoopTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"}]}