{"files":[{"patch":"@@ -57,24 +57,1 @@\n-        JFrame f = new JFrame(\"Healing Brush\");\n-        var menuBar = new JMenuBar();\n-        f.setJMenuBar(menuBar);\n-        ((JButton) menuBar.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n-        menuBar.add(Box.createHorizontalStrut(40));\n-        menuBar.add(new JLabel(\"Search ms\"));\n-        var searchTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n-        searchTB.setEditable(false);\n-        menuBar.add(new JLabel(\"Mask ms\"));\n-        var maskTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n-        searchTB.setEditable(false);\n-        searchTB.setColumns(5);\n-        menuBar.add(new JLabel(\"Heal ms\"));\n-        var healTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n-        healTB.setColumns(5);\n-        searchTB.setEditable(false);\n-\n-        Viewer viewer = new Viewer(accelerator,image, searchTB, maskTB, healTB);\n-\n-        f.setBounds(new Rectangle(image.getWidth(),image.getHeight()));\n-        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        f.setContentPane(viewer);\n-        f.validate();\n-        f.setVisible(true);\n+        new Viewer(accelerator, image);\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/Main.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -50,0 +50,5 @@\n+import javax.swing.Box;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenuBar;\n@@ -54,0 +59,1 @@\n+import javax.swing.WindowConstants;\n@@ -60,0 +66,1 @@\n+import java.awt.Rectangle;\n@@ -71,40 +78,43 @@\n-public  class Viewer extends JPanel {\n-    protected BufferedImage image;\n-    protected  int[] rasterData;\n-    protected S32Array2D s32Array2D;\n-    protected AffineTransform transform = new AffineTransform();\n-    protected float zoom = .95f; \/\/ set the zoom factor 1.0 = fit to screen\n-\n-    protected float xOffset = 0; \/\/ 0 is centered -1 is to the left;\n-    protected float yOffset = 0; \/\/ 0 is centered -1 is to the top;\n-\n-    Point mousePressedPosition;\n-    Point2D imageRelativeMouseDownPosition = new Point2D.Float();\n-    Point2D imageRelativeMovePosition = new Point2D.Float();\n-    volatile Selection selection = null;\n-    volatile  Point bestMatchOffset = null;\n-\n-\n-    public Viewer(Accelerator accelerator,BufferedImage image, JTextField searchTB, JTextField maskTB, JTextField healTB) {\n-        this.image = image;\n-        this.rasterData = ((DataBufferInt) (image.getRaster().getDataBuffer())).getData();\n-        this.s32Array2D =  S32Array2D.create(accelerator,image.getWidth(),image.getHeight());\n-        s32Array2D.copyFrom(rasterData);\n-        addMouseListener(new MouseAdapter() {\n-\n-            @Override\n-            public void mouseReleased(MouseEvent e) {\n-                if (SwingUtilities.isLeftMouseButton(e)) {\n-                    bestMatchOffset = Compute.getBestMatchOffset(accelerator, s32Array2D, selection.close(), searchTB);\n-                    Compute.heal(accelerator,s32Array2D, selection, bestMatchOffset, maskTB, healTB);\n-                    Timer t = new Timer(1000, new ActionListener() {\n-                        @Override\n-                        public void actionPerformed(ActionEvent e) {\n-                            selection = null;\n-                            bestMatchOffset = null;\n-                            repaint();\n-                        }\n-                    });\n-                    t.setRepeats(false);\n-                    t.start();\n-                    repaint();\n+public  class Viewer extends JFrame {\n+    public final MainPanel mainPanel;\n+    public static class MainPanel extends JPanel {\n+        protected BufferedImage image;\n+        protected int[] rasterData;\n+        protected S32Array2D s32Array2D;\n+        protected AffineTransform transform = new AffineTransform();\n+        protected float zoom = .95f; \/\/ set the zoom factor 1.0 = fit to screen\n+\n+        protected float xOffset = 0; \/\/ 0 is centered -1 is to the left;\n+        protected float yOffset = 0; \/\/ 0 is centered -1 is to the top;\n+\n+        Point mousePressedPosition;\n+        Point2D imageRelativeMouseDownPosition = new Point2D.Float();\n+        Point2D imageRelativeMovePosition = new Point2D.Float();\n+        volatile Selection selection = null;\n+        volatile Point bestMatchOffset = null;\n+\n+\n+        public MainPanel(Accelerator accelerator, BufferedImage image, Controls controls) {\n+            this.image = image;\n+            this.rasterData = ((DataBufferInt) (image.getRaster().getDataBuffer())).getData();\n+            this.s32Array2D = S32Array2D.create(accelerator, image.getWidth(), image.getHeight());\n+            s32Array2D.copyFrom(rasterData);\n+            addMouseListener(new MouseAdapter() {\n+\n+                @Override\n+                public void mouseReleased(MouseEvent e) {\n+                    if (SwingUtilities.isLeftMouseButton(e)) {\n+                        bestMatchOffset = Compute.getBestMatchOffset(accelerator, s32Array2D, selection.close(), controls.search);\n+                        Compute.heal(accelerator, s32Array2D, selection, bestMatchOffset, controls.mask, controls.heal);\n+                        Timer t = new Timer(1000, new ActionListener() {\n+                            @Override\n+                            public void actionPerformed(ActionEvent e) {\n+                                selection = null;\n+                                bestMatchOffset = null;\n+                                repaint();\n+                            }\n+                        });\n+                        t.setRepeats(false);\n+                        t.start();\n+                        repaint();\n+                    }\n@@ -112,1 +122,0 @@\n-            }\n@@ -114,8 +123,16 @@\n-            @Override\n-            public void mousePressed(MouseEvent e) {\n-                if (SwingUtilities.isLeftMouseButton(e)) {\n-                    try {\n-                        var ptDst =  transform.inverseTransform(e.getPoint(), null);\n-                        selection = new Selection(ptDst);\n-                    } catch (NoninvertibleTransformException e1) {\n-                        e1.printStackTrace();\n+                @Override\n+                public void mousePressed(MouseEvent e) {\n+                    if (SwingUtilities.isLeftMouseButton(e)) {\n+                        try {\n+                            var ptDst = transform.inverseTransform(e.getPoint(), null);\n+                            selection = new Selection(ptDst);\n+                        } catch (NoninvertibleTransformException e1) {\n+                            e1.printStackTrace();\n+                        }\n+                    } else if (SwingUtilities.isRightMouseButton(e)) {\n+                        mousePressedPosition = e.getPoint();\n+                        try {\n+                            imageRelativeMouseDownPosition = transform.inverseTransform(e.getPoint(), null);\n+                        } catch (NoninvertibleTransformException e1) {\n+                            e1.printStackTrace();\n+                        }\n@@ -123,6 +140,37 @@\n-                }else if (SwingUtilities.isRightMouseButton(e)) {\n-                    mousePressedPosition = e.getPoint();\n-                    try {\n-                        imageRelativeMouseDownPosition= transform.inverseTransform(e.getPoint(), null);\n-                    } catch (NoninvertibleTransformException e1) {\n-                        e1.printStackTrace();\n+                }\n+\n+            });\n+            addMouseWheelListener(e -> {\n+                zoom = zoom * (1 + e.getWheelRotation() \/ 10f);\n+                repaint();\n+            });\n+            addMouseMotionListener(new MouseMotionAdapter() {\n+                @Override\n+                public void mouseDragged(MouseEvent e) {\n+                    if (SwingUtilities.isRightMouseButton(e)) {\n+                        Point rightButonPoint = e.getPoint();\n+                        Dimension offsetFromInitialMousePress = new Dimension(rightButonPoint.x - mousePressedPosition.x, rightButonPoint.y - mousePressedPosition.y);\n+                        try {\n+                            imageRelativeMovePosition = transform.inverseTransform(e.getPoint(), null);\n+                            Dimension displaySize = getSize();\n+                            Dimension imageSize = new Dimension(s32Array2D.width(), s32Array2D.height());\n+                            float scale = zoom *\n+                                    Math.min(displaySize.width \/ (float) imageSize.width,\n+                                            displaySize.height \/ (float) imageSize.height);\n+                            xOffset = 2 * (offsetFromInitialMousePress.width \/ (displaySize.width - scale * imageSize.width));\n+                            yOffset = 2 * (offsetFromInitialMousePress.height \/ (displaySize.height - scale * imageSize.height));\n+                            xOffset = Math.max(Math.min(xOffset, 1), -1);\n+                            yOffset = Math.max(Math.min(yOffset, 1), -1);\n+                            repaint();\n+                        } catch (NoninvertibleTransformException e1) {\n+                            e1.printStackTrace();\n+                        }\n+                    } else if (SwingUtilities.isLeftMouseButton(e)) {\n+                        try {\n+                            var ptDst = transform.inverseTransform(e.getPoint(), null);\n+                            selection.add(ptDst);\n+                            repaint();\n+                        } catch (NoninvertibleTransformException e1) {\n+                            \/\/ TODO Auto-generated catch block\n+                            e1.printStackTrace();\n+                        }\n@@ -131,0 +179,24 @@\n+            });\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            Graphics2D g2d = (Graphics2D) g;\n+            g2d.setBackground(Color.BLACK);\n+            g2d.fillRect(0, 0, getWidth(), getHeight());\n+            if (s32Array2D != null) {\n+                Dimension displaySize = getSize();\n+                Dimension imageSize = new Dimension(s32Array2D.width(), s32Array2D.height());\n+                AffineTransform safeTransform = g2d.getTransform();\n+                transform.setToIdentity();\n+                double scale = zoom *\n+                        Math.min(displaySize.width \/ (double) imageSize.width,\n+                                displaySize.height \/ (double) imageSize.height);\n+                transform.translate((1 + xOffset) * (displaySize.width - imageSize.width * scale) \/ 2,\n+                        (1 + yOffset) * (displaySize.height - imageSize.height * scale) \/ 2);\n+                transform.scale(scale, scale);\n+                g2d.transform(transform);\n+                s32Array2D.copyTo(rasterData);\n+                g.drawImage(image, 0, 0, imageSize.width, imageSize.height, null);\n+                paintInScale(g2d);\n+                g2d.setTransform(safeTransform);\n@@ -132,0 +204,1 @@\n+        }\n@@ -133,34 +206,8 @@\n-        });\n-        addMouseWheelListener(e -> {\n-            zoom = zoom * (1 + e.getWheelRotation() \/ 10f);\n-            repaint();\n-        });\n-        addMouseMotionListener(new MouseMotionAdapter() {\n-            @Override\n-            public void mouseDragged(MouseEvent e) {\n-                if (SwingUtilities.isRightMouseButton(e)) {\n-                    Point rightButonPoint = e.getPoint();\n-                    Dimension deltaFromInitialMousePress = new Dimension(rightButonPoint.x - mousePressedPosition.x, rightButonPoint.y - mousePressedPosition.y);\n-                    try {\n-                        imageRelativeMovePosition = transform.inverseTransform(e.getPoint(), null);\n-                        Dimension displaySize = getSize();\n-                        Dimension imageSize = new Dimension( s32Array2D.width(),s32Array2D.height());\n-                        float scale = zoom *\n-                                Math.min(displaySize.width \/ (float) imageSize.width,\n-                                        displaySize.height \/ (float) imageSize.height);\n-                        xOffset =  2 * (deltaFromInitialMousePress.width \/ (displaySize.width - scale * imageSize.width));\n-                        yOffset =  2 * (deltaFromInitialMousePress.height \/ (displaySize.height - scale * imageSize.height));\n-                        xOffset = Math.max(Math.min(xOffset, 1), -1);\n-                        yOffset = Math.max(Math.min(yOffset, 1), -1);\n-                        repaint();\n-                    } catch (NoninvertibleTransformException e1) {\n-                        e1.printStackTrace();\n-                    }\n-                } else if (SwingUtilities.isLeftMouseButton(e)) {\n-                    try {\n-                        var ptDst = transform.inverseTransform(e.getPoint(), null);\n-                        selection.add(ptDst);\n-                        repaint();\n-                    } catch (NoninvertibleTransformException e1) {\n-                        \/\/ TODO Auto-generated catch block\n-                        e1.printStackTrace();\n+        protected void paintInScale(Graphics2D g) {\n+            if (selection != null) {\n+                Polygon selectionPolygon = new Polygon();\n+                Polygon solutionPolygon = new Polygon();\n+                selection.pointList.forEach(point -> {\n+                    selectionPolygon.addPoint(point.x, point.y);\n+                    if (bestMatchOffset != null) {\n+                        solutionPolygon.addPoint(point.x + bestMatchOffset.x, point.y + bestMatchOffset.y);\n@@ -168,0 +215,6 @@\n+                });\n+                g.setColor(Color.RED);\n+                g.drawPolygon(selectionPolygon);\n+                if (bestMatchOffset != null) {\n+                    g.setColor(Color.BLUE);\n+                    g.drawPolygon(solutionPolygon);\n@@ -170,24 +223,0 @@\n-        });\n-    }\n-\n-    @Override\n-    public void paint(Graphics g) {\n-        Graphics2D g2d = (Graphics2D) g;\n-        g2d.setBackground(Color.BLACK);\n-        g2d.fillRect(0, 0, getWidth(), getHeight());\n-        if (s32Array2D != null) {\n-            Dimension displaySize = getSize();\n-            Dimension imageSize = new Dimension( s32Array2D.width(),s32Array2D.height());\n-            AffineTransform safeTransform = g2d.getTransform();\n-            transform.setToIdentity();\n-            double scale = zoom *\n-                    Math.min(displaySize.width \/ (double) imageSize.width,\n-                            displaySize.height \/ (double) imageSize.height);\n-            transform.translate((1 + xOffset) * (displaySize.width - imageSize.width * scale) \/ 2,\n-                    (1 + yOffset) * (displaySize.height - imageSize.height * scale) \/ 2);\n-            transform.scale(scale, scale);\n-            g2d.transform(transform);\n-            s32Array2D.copyTo(rasterData);\n-            g.drawImage(image, 0, 0, imageSize.width, imageSize.height, null);\n-            paintInScale(g2d);\n-            g2d.setTransform(safeTransform);\n@@ -196,16 +225,12 @@\n-    protected void paintInScale(Graphics2D g) {\n-        if (selection != null) {\n-            Polygon selectionPolygon = new Polygon();\n-            Polygon solutionPolygon = new Polygon();\n-            selection.pointList.forEach(point -> {\n-                selectionPolygon.addPoint(point.x, point.y);\n-                if (bestMatchOffset != null){\n-                    solutionPolygon.addPoint(point.x+bestMatchOffset.x, point.y+bestMatchOffset.y);\n-                }\n-            });\n-            g.setColor(Color.RED);\n-            g.drawPolygon(selectionPolygon);\n-            if (bestMatchOffset!=null){\n-                g.setColor(Color.BLUE);\n-                g.drawPolygon(solutionPolygon);\n-            }\n+    public static class Controls{\n+        JTextField search;\n+        JTextField mask;\n+        JTextField heal;\n+        JMenuBar menuBar;\n+        Controls(){\n+            menuBar = new JMenuBar();\n+            ((JButton) menuBar.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n+            menuBar.add(Box.createHorizontalStrut(40));\n+            search = create (\"Search ms\");\n+            mask = create (\"Mask ms\");\n+            heal = create (\"Heal ms\");\n@@ -213,0 +238,6 @@\n+         JTextField create (String name){\n+             menuBar.add(new JLabel(name));\n+             JTextField textField = (JTextField) menuBar.add(new JTextField(\"\",5));\n+             textField.setEditable(false);\n+             return textField;\n+         }\n@@ -215,0 +246,12 @@\n+    Viewer(Accelerator accelerator, BufferedImage image) {\n+        super(\"Healing Brush \");\n+        Controls controls = new Controls();\n+        setJMenuBar(controls.menuBar);\n+        this.mainPanel = new MainPanel(accelerator,image, controls);\n+        setBounds(new Rectangle(image.getWidth(),image.getHeight()));\n+        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        setContentPane(mainPanel);\n+        validate();\n+        setVisible(true);\n+\n+    }\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/Viewer.java","additions":172,"deletions":129,"binary":false,"changes":301,"status":"modified"},{"patch":"@@ -52,1 +52,7 @@\n-    final public class MainPanel extends JComponent {\n+\n+    private final Object doorBell = new Object();\n+    final Controls controls;\n+    final MainPanel mainPanel;\n+    volatile private boolean started=false;\n+\n+    static final public class MainPanel extends JComponent {\n@@ -152,0 +158,21 @@\n+    public static class Controls{\n+        JTextField generation;\n+        JTextField generationsPerSecond;\n+\n+        JButton start;\n+        JMenuBar menuBar;\n+        Controls(){\n+            menuBar = new JMenuBar();\n+            ((JButton) menuBar.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n+            this.start = (JButton) menuBar.add(new JButton(\"Start\"));\n+            menuBar.add(Box.createHorizontalStrut(40));\n+            generation = create (\"Gen\");\n+            generationsPerSecond = create (\"Gen\/Sec\");\n+        }\n+        JTextField create (String name){\n+            menuBar.add(new JLabel(name));\n+            JTextField textField = (JTextField) menuBar.add(new JTextField(\"\",5));\n+            textField.setEditable(false);\n+            return textField;\n+        }\n+    }\n@@ -153,10 +180,1 @@\n-\n-    private final Object doorBell = new Object();\n-    final MainPanel mainPanel;\n-    private final JTextField generation;\n-    private final JTextField generationsPerSecond;\n-    volatile private boolean started=false;\n-\n-\n-\n-    Viewer(String title, Main.Control control, Main.CellGrid cellGrid) {\n+    Viewer(String title, Main.Control control,Main.CellGrid cellGrid) {\n@@ -165,11 +183,3 @@\n-        var menuBar = new JMenuBar();\n-        this.setJMenuBar(menuBar);\n-        ((JButton) menuBar.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n-        ((JButton) menuBar.add(new JButton(\"Start\"))).addActionListener(_ -> {started=true;synchronized (doorBell) {doorBell.notify();}});\n-        menuBar.add(Box.createHorizontalStrut(400));\n-        menuBar.add(new JLabel(\"Gen\"));\n-        (this.generation = (JTextField) menuBar.add(new JTextField(\"\",8))).setEditable(false);\n-        menuBar.add(new JLabel(\"Gen\/Sec\"));\n-        (this.generationsPerSecond = (JTextField) menuBar.add(new JTextField(\"\",6))).setEditable(false);\n-\n-\n+        this.controls = new Controls();\n+        setJMenuBar(controls.menuBar);\n+        controls.start.addActionListener(_ -> {started=true;synchronized (doorBell) {doorBell.notify();}});\n@@ -177,1 +187,0 @@\n-\n@@ -204,2 +213,2 @@\n-            this.generation.setText(String.format(\"%8d\", ++generationCounter));\n-            this.generationsPerSecond.setText(\n+            this.controls.generation.setText(String.format(\"%8d\", ++generationCounter));\n+            this.controls.generationsPerSecond.setText(\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Viewer.java","additions":34,"deletions":25,"binary":false,"changes":59,"status":"modified"}]}