{"files":[{"patch":"@@ -436,23 +436,31 @@\n-        \/\/ Only few AST nodes supported for now\n-        private static final Set<JCTree.Tag> SUPPORTED_TAGS =\n-                Set.of(Tag.VARDEF,\n-                        Tag.RETURN, Tag.THROW, Tag.BREAK, Tag.CONTINUE,\n-                        Tag.PLUS, Tag.MINUS, Tag.MUL, Tag.DIV, Tag.MOD,\n-                        Tag.NEG, Tag.NOT,\n-                        Tag.BITOR, Tag.BITAND, Tag.BITXOR,\n-                        Tag.SL, Tag.SR, Tag.USR,\n-                        Tag.PLUS_ASG, Tag.MINUS_ASG, Tag.MUL_ASG, Tag.DIV_ASG, Tag.MOD_ASG,\n-                        Tag.POSTINC, Tag.PREINC, Tag.POSTDEC, Tag.PREDEC,\n-                        Tag.EQ, Tag.NE, Tag.LT, Tag.LE, Tag.GT, Tag.GE,\n-                        Tag.AND, Tag.OR,\n-                        Tag.LITERAL, Tag.IDENT, Tag.TYPEIDENT, Tag.ASSIGN, Tag.EXEC, Tag.PARENS,\n-                        Tag.SELECT, Tag.INDEXED, Tag.APPLY,\n-                        Tag.TYPECAST, Tag.TYPETEST,\n-                        Tag.NEWCLASS, Tag.NEWARRAY, Tag.LAMBDA, Tag.REFERENCE,\n-                        Tag.BLOCK, Tag.IF, Tag.WHILELOOP, Tag.DOLOOP, Tag.FOREACHLOOP, Tag.FORLOOP, Tag.TRY,\n-                        Tag.SWITCH_EXPRESSION, Tag.YIELD,\n-                        Tag.CONDEXPR,\n-                        Tag.ASSERT,\n-                        Tag.LABELLED,\n-                        Tag.SKIP,\n-                        Tag.TYPEARRAY);\n+        \/\/ unsupported tree nodes\n+        private static final EnumSet<JCTree.Tag> UNSUPPORTED_TAGS = EnumSet.of(\n+                \/\/ statements\n+                Tag.SWITCH, Tag.SYNCHRONIZED,\n+                \/\/ operators\n+                Tag.BITOR_ASG, Tag.BITXOR_ASG, Tag.BITAND_ASG, Tag.SL_ASG,\n+                Tag.SR_ASG, Tag.USR_ASG, Tag.COMPL, Tag.POS,\n+\n+                \/\/ the nodes below are not as relevant, either because they have already\n+                \/\/ been handled by an earlier compiler pass, or because they are typically\n+                \/\/ not handled directly, but in the context of some enclosing statement.\n+\n+                \/\/ modifiers (these are already turned into symbols by Attr and should not be dealt with directly)\n+                Tag.ANNOTATION, Tag.TYPE_ANNOTATION, Tag.MODIFIERS,\n+                \/\/ toplevel (likely outside the scope for code models)\n+                Tag.TOPLEVEL, Tag.PACKAGEDEF, Tag.IMPORT, Tag.CLASSDEF, Tag.METHODDEF,\n+                \/\/ modules (likely outside the scope for code models)\n+                Tag.MODULEDEF, Tag.EXPORTS, Tag.OPENS, Tag.PROVIDES, Tag.REQUIRES, Tag.USES,\n+                \/\/ switch labels (these are handled by the encloising construct, SWITCH or SWITCH_EXPRESSION)\n+                Tag.CASE, Tag.DEFAULTCASELABEL, Tag.CONSTANTCASELABEL, Tag.PATTERNCASELABEL,\n+                \/\/ patterns (these are handled by the enclosing construct, like IF, SWITCH_EXPRESSION, TYPETEST)\n+                Tag.ANYPATTERN, Tag.BINDINGPATTERN, Tag.RECORDPATTERN,\n+                \/\/ catch (already handled as part of TRY)\n+                Tag.CATCH,\n+                \/\/ types (these are used to parse types and should not be dealt with directly)\n+                Tag.TYPEAPPLY, Tag.TYPEUNION, Tag.TYPEINTERSECTION, Tag.TYPEPARAMETER, Tag.WILDCARD,\n+                Tag.TYPEBOUNDKIND, Tag.ANNOTATED_TYPE,\n+                \/\/ internal (these are synthetic nodes generated by javac)\n+                Tag.NO_TAG, Tag.ERRONEOUS, Tag.NULLCHK, Tag.LETEXPR);\n+\n+        private static final Set<JCTree.Tag> SUPPORTED_TAGS = EnumSet.complementOf(UNSUPPORTED_TAGS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"}]}