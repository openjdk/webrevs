{"files":[{"patch":"@@ -1421,0 +1421,2 @@\n+            final TypeElement resultType;\n+\n@@ -1437,0 +1439,2 @@\n+\n+                resultType = opdef.resultType();\n@@ -1441,0 +1445,2 @@\n+\n+                resultType = that.resultType();\n@@ -1449,3 +1455,4 @@\n-            FieldLoadOp(FieldDesc descriptor, Value receiver) {\n-                super(NAME,\n-                        List.of(receiver), descriptor);\n+            FieldLoadOp(TypeElement resultType, FieldDesc descriptor, Value receiver) {\n+                super(NAME, List.of(receiver), descriptor);\n+\n+                this.resultType = resultType;\n@@ -1455,3 +1462,4 @@\n-            FieldLoadOp(FieldDesc descriptor) {\n-                super(NAME,\n-                        List.of(), descriptor);\n+            FieldLoadOp(TypeElement resultType, FieldDesc descriptor) {\n+                super(NAME, List.of(), descriptor);\n+\n+                this.resultType = resultType;\n@@ -1462,1 +1470,1 @@\n-                return fieldDescriptor().type();\n+                return resultType;\n@@ -3222,1 +3230,13 @@\n-        return new FieldAccessOp.FieldLoadOp(descriptor, receiver);\n+        return new FieldAccessOp.FieldLoadOp(descriptor.type(), descriptor, receiver);\n+    }\n+\n+    \/**\n+     * Creates a field load operation to a non-static field.\n+     *\n+     * @param resultType the result type of the operation\n+     * @param descriptor the field descriptor\n+     * @param receiver the receiver value\n+     * @return the field load operation\n+     *\/\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeElement resultType, FieldDesc descriptor, Value receiver) {\n+        return new FieldAccessOp.FieldLoadOp(resultType, descriptor, receiver);\n@@ -3228,0 +3248,1 @@\n+     * @param descriptor the field descriptor\n@@ -3231,1 +3252,12 @@\n-        return new FieldAccessOp.FieldLoadOp(descriptor);\n+        return new FieldAccessOp.FieldLoadOp(descriptor.type(), descriptor);\n+    }\n+\n+    \/**\n+     * Creates a field load operation to a static field.\n+     *\n+     * @param resultType the result type of the operation\n+     * @param descriptor the field descriptor\n+     * @return the field load operation\n+     *\/\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeElement resultType, FieldDesc descriptor) {\n+        return new FieldAccessOp.FieldLoadOp(resultType, descriptor);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":41,"deletions":9,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -800,0 +800,1 @@\n+                            TypeElement resultType = typeToTypeElement(sym.type);\n@@ -801,1 +802,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(fd));\n+                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fd));\n@@ -803,1 +804,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(fd, thisValue()));\n+                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fd, thisValue()));\n@@ -829,0 +830,1 @@\n+                    TypeElement resultType = typeToTypeElement(sym.type);\n@@ -830,1 +832,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(fd));\n+                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fd));\n@@ -832,1 +834,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(fd, receiver));\n+                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fd, receiver));\n@@ -880,0 +882,1 @@\n+                        TypeElement resultType = typeToTypeElement(sym.type);\n@@ -881,1 +884,1 @@\n-                            result = append(CoreOps.fieldLoad(fd));\n+                            result = append(CoreOps.fieldLoad(resultType, fd));\n@@ -883,1 +886,1 @@\n-                            result = append(CoreOps.fieldLoad(fd, thisValue()));\n+                            result = append(CoreOps.fieldLoad(resultType, fd, thisValue()));\n@@ -930,0 +933,1 @@\n+                        TypeElement resultType = typeToTypeElement(types.memberType(tree.selected.type, sym));\n@@ -931,1 +935,1 @@\n-                            result = append(CoreOps.fieldLoad(fd));\n+                            result = append(CoreOps.fieldLoad(resultType, fd));\n@@ -933,1 +937,1 @@\n-                            result = append(CoreOps.fieldLoad(fd, receiver));\n+                            result = append(CoreOps.fieldLoad(resultType, fd, receiver));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -638,0 +638,28 @@\n+\n+    static class Box<T> {\n+        public T v;\n+\n+        public Box(T v) {\n+            this.v = v;\n+        }\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test25\" ()void -> {\n+                  %0 : java.lang.String = constant @\"abc\";\n+                  %1 : FieldAccessTest$Box<java.lang.String> = new %0 @\"(java.lang.Object)FieldAccessTest$Box\";\n+                  %2 : Var<FieldAccessTest$Box<java.lang.String>> = var %1 @\"b\";\n+                  %3 : FieldAccessTest$Box<java.lang.String> = var.load %2;\n+                  %4 : java.lang.String = field.load %3 @\"FieldAccessTest$Box::v()java.lang.Object\";\n+                  %5 : Var<java.lang.String> = var %4 @\"s\";\n+                  return;\n+              };\n+            \"\"\")\n+    static void test25() {\n+        Box<String> b = new Box<>(\"abc\");\n+        String s = b.v;\n+    }\n+\n+    \/\/@@@ unqualified access to field of generic type needs to be tested\n+    \/\/ waiting for a new way of modeling types, so that type variables are captured in the IR\n","filename":"test\/langtools\/tools\/javac\/reflect\/FieldAccessTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}