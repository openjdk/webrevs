{"files":[{"patch":"@@ -1430,0 +1430,2 @@\n+            final TypeDesc resultType;\n+\n@@ -1446,0 +1448,2 @@\n+\n+                resultType = opdef.resultType();\n@@ -1450,0 +1454,2 @@\n+\n+                resultType = that.resultType();\n@@ -1459,2 +1465,8 @@\n-                super(NAME,\n-                        List.of(receiver), descriptor);\n+                super(NAME, List.of(receiver), descriptor);\n+                resultType = descriptor.type();\n+            }\n+\n+            FieldLoadOp(TypeDesc resultType, FieldDesc descriptor, Value receiver) {\n+                super(NAME, List.of(receiver), descriptor);\n+\n+                this.resultType = resultType;\n@@ -1465,2 +1477,9 @@\n-                super(NAME,\n-                        List.of(), descriptor);\n+                super(NAME, List.of(), descriptor);\n+\n+                resultType = descriptor.type();\n+            }\n+\n+            FieldLoadOp(TypeDesc resultType, FieldDesc descriptor) {\n+                super(NAME, List.of(), descriptor);\n+\n+                this.resultType = resultType;\n@@ -1471,1 +1490,1 @@\n-                return fieldDescriptor().type();\n+                return resultType;\n@@ -3349,0 +3368,12 @@\n+    \/**\n+     * Creates a field load operation to a non-static field.\n+     *\n+     * @param resultType the result type of the operation\n+     * @param descriptor the field descriptor\n+     * @param receiver the receiver value\n+     * @return the field load operation\n+     *\/\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeDesc resultType, FieldDesc descriptor, Value receiver) {\n+        return new FieldAccessOp.FieldLoadOp(resultType, descriptor, receiver);\n+    }\n+\n@@ -3352,0 +3383,1 @@\n+     * @param descriptor the field descriptor\n@@ -3358,0 +3390,11 @@\n+    \/**\n+     * Creates a field load operation to a static field.\n+     *\n+     * @param resultType the result type of the operation\n+     * @param descriptor the field descriptor\n+     * @return the field load operation\n+     *\/\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeDesc resultType, FieldDesc descriptor) {\n+        return new FieldAccessOp.FieldLoadOp(resultType, descriptor);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":48,"deletions":5,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -803,0 +803,1 @@\n+                            TypeDesc resultType = typeToDesc(sym.type);\n@@ -804,1 +805,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(fd));\n+                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fd));\n@@ -806,1 +807,1 @@\n-                                lhsOpValue = append(CoreOps.fieldLoad(fd, thisValue()));\n+                                lhsOpValue = append(CoreOps.fieldLoad(resultType, fd, thisValue()));\n@@ -832,0 +833,1 @@\n+                    TypeDesc resultType = typeToDesc(sym.type); \/\/ why not sym.type\n@@ -833,1 +835,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(fd));\n+                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fd));\n@@ -835,1 +837,1 @@\n-                        lhsOpValue = append(CoreOps.fieldLoad(fd, receiver));\n+                        lhsOpValue = append(CoreOps.fieldLoad(resultType, fd, receiver));\n@@ -883,0 +885,2 @@\n+                        \/\/ @@@ for now, for field of generic type, result type is the upper bound\n+                        TypeDesc resultType = typeToDesc(sym.type);\n@@ -884,1 +888,1 @@\n-                            result = append(CoreOps.fieldLoad(fd));\n+                            result = append(CoreOps.fieldLoad(resultType, fd));\n@@ -886,1 +890,1 @@\n-                            result = append(CoreOps.fieldLoad(fd, thisValue()));\n+                            result = append(CoreOps.fieldLoad(resultType, fd, thisValue()));\n@@ -933,0 +937,1 @@\n+                        TypeDesc resultType = typeToDesc(types.memberType(tree.selected.type, sym));\n@@ -934,1 +939,1 @@\n-                            result = append(CoreOps.fieldLoad(fd));\n+                            result = append(CoreOps.fieldLoad(resultType, fd));\n@@ -936,1 +941,1 @@\n-                            result = append(CoreOps.fieldLoad(fd, receiver));\n+                            result = append(CoreOps.fieldLoad(resultType, fd, receiver));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -638,0 +638,28 @@\n+\n+    static class Box<T> {\n+        public T v;\n+\n+        public Box(T v) {\n+            this.v = v;\n+        }\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test25\" ()void -> {\n+                  %0 : java.lang.String = constant @\"abc\";\n+                  %1 : FieldAccessTest$Box<java.lang.String> = new %0 @\"(java.lang.Object)FieldAccessTest$Box\";\n+                  %2 : Var<FieldAccessTest$Box<java.lang.String>> = var %1 @\"b\";\n+                  %3 : FieldAccessTest$Box<java.lang.String> = var.load %2;\n+                  %4 : java.lang.String = field.load %3 @\"FieldAccessTest$Box::v()java.lang.Object\";\n+                  %5 : Var<java.lang.String> = var %4 @\"s\";\n+                  return;\n+              };\n+            \"\"\")\n+    static void test25() {\n+        Box<String> b = new Box<>(\"abc\");\n+        String s = b.v;\n+    }\n+\n+    \/\/@@@ unqualified access to field of generic type needs to be tested\n+    \/\/ waiting for a new way of modeling types, so that type variables are captured in the IR\n","filename":"test\/langtools\/tools\/javac\/reflect\/FieldAccessTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}