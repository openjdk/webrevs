{"files":[{"patch":"@@ -80,2 +80,0 @@\n-        \/\/ System.out.println(\"\\nCode Builder Output: \\n\\n\" + code);\n-        \/\/ System.out.println(\"Add your code to \"+PTXBackend.class.getName()+\".dispatchKernel() to actually run! :)\");\n@@ -91,3 +89,2 @@\n-        String out = \"\";\n-        Optional<CoreOp.FuncOp> o = Optional.ofNullable(kernelCallGraph.entrypoint.funcOpWrapper().op());\n-        FuncOpWrapper f = new FuncOpWrapper(o.orElseThrow());\n+        StringBuilder out = new StringBuilder();\n+        FuncOpWrapper f = new FuncOpWrapper(kernelCallGraph.entrypoint.funcOpWrapper().op());\n@@ -105,1 +102,1 @@\n-        out += builder.getTextAndReset();\n+        out.append(builder.getTextAndReset());\n@@ -108,2 +105,1 @@\n-            Optional<CoreOp.FuncOp> optional = Optional.ofNullable(k.funcOpWrapper().op());\n-            FuncOpWrapper calledFunc = new FuncOpWrapper(optional.orElseThrow());\n+            FuncOpWrapper calledFunc = new FuncOpWrapper(k.funcOpWrapper().op());\n@@ -111,2 +107,0 @@\n-\/\/            System.out.println(\"------------func------------\");\n-\/\/            System.out.println(loweredFunc.ssa().toText());\n@@ -114,1 +108,1 @@\n-            out += createFunction(new PTXCodeBuilder(addressSize).nl().nl(), loweredFunc, loweredFunc.ssa(), out, false);\n+            out.append(createFunction(new PTXCodeBuilder(addressSize).nl().nl(), loweredFunc, false));\n@@ -118,4 +112,0 @@\n-        FuncOpWrapper ssa = lowered.ssa();\n-\/\/        System.out.println(lowered.toText());\n-\/\/        System.out.println(ssa.toText());\n-        out += createFunction(builder.nl().nl(), lowered, ssa, out, true);\n@@ -123,1 +113,3 @@\n-        return out;\n+        out.append(createFunction(builder.nl().nl(), lowered, true));\n+\n+        return out.toString();\n@@ -151,2 +143,3 @@\n-    public String createFunction(PTXCodeBuilder builder, FuncOpWrapper lowered, FuncOpWrapper ssa, String out, boolean entry) {\n-        String body = \"\";\n+    public String createFunction(PTXCodeBuilder builder, FuncOpWrapper lowered, boolean entry) {\n+        FuncOpWrapper ssa = lowered.ssa();\n+        String out, body;\n","filename":"hat\/backends\/ptx\/src\/main\/java\/hat\/backend\/PTXBackend.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.reflect.code.op.ExtendedOp;\n@@ -90,3 +89,0 @@\n-        append(\".version \").append(String.valueOf(major)).dot().append(String.valueOf(minor)).nl();\n-        append(\".target \").append(target).nl();\n-        append(\".address_size \").append(String.valueOf(addressSize));\n@@ -94,0 +90,3 @@\n+        version().space().major(major).dot().minor(minor).nl();\n+        target().space().target(target).nl();\n+        addressSize().space().size(addressSize);\n@@ -98,1 +97,1 @@\n-            append(\".visible .entry \");\n+            visible().space().entry().space();\n@@ -100,1 +99,1 @@\n-            append(\".func \");\n+            func().space();\n@@ -103,1 +102,1 @@\n-            returnReg = new PTXRegister(getOrdinal(resultType(yieldType)), resultType(yieldType));\n+            returnReg = new PTXRegister(getOrdinal(getResultType(yieldType)), getResultType(yieldType));\n@@ -105,2 +104,2 @@\n-            oparen().param().space().printParamType(yieldType);\n-            space().append(returnReg.name()).cparen().space();\n+            oparen().dot().param().space().paramType(yieldType);\n+            space().regName(returnReg).cparen().space();\n@@ -108,1 +107,1 @@\n-        append(funcName);\n+        funcName(funcName);\n@@ -113,2 +112,2 @@\n-            ptxIndent().param().space().printParamType(info.javaType);\n-            space().append(info.varOp.varName());\n+            ptxIndent().dot().param().space().paramType(info.javaType);\n+            space().regName(info.varOp.varName());\n@@ -123,3 +122,3 @@\n-                ptxIndent().ld().param();\n-                printResultType(p.type(), false).ptxIndent().space();\n-                printAndAddVar(p, resultType(p.type())).commaSpace().osbrace().append(params.get(p.index())).csbrace().semicolon().nl();\n+                ptxIndent().ld().dot().param();\n+                resultType(p.type(), false).ptxIndent().space();\n+                reg(p, getResultType(p.type())).commaSpace().osbrace().regName(params.get(p.index())).csbrace().semicolon().nl();\n@@ -130,1 +129,1 @@\n-        printBlock(block);\n+        block(block);\n@@ -144,1 +143,1 @@\n-            ptxIndent().append(\".reg\").space();\n+            ptxIndent().reg().space();\n@@ -150,1 +149,1 @@\n-                dot().append(t.toString());\n+                dot().regType(t);\n@@ -152,1 +151,1 @@\n-            ptxIndent().append(t.getRegPrefix()).lt().append(String.valueOf(ordinalMap.get(t))).gt().semicolon().nl();\n+            ptxIndent().regTypePrefix(t).oabrace().intVal(ordinalMap.get(t)).cabrace().semicolon().nl();\n@@ -158,1 +157,1 @@\n-        append(\"{\").nl();\n+        obrace().nl();\n@@ -162,1 +161,1 @@\n-        append(\"}\");\n+        cbrace();\n@@ -167,2 +166,0 @@\n-            case VarLoadOpWrapper op -> varLoad(op);\n-            case VarStoreOpWrapper op -> varStore(op);\n@@ -176,1 +173,0 @@\n-            case FuncCallOpWrapper op -> funcCall(op);\n@@ -186,0 +182,1 @@\n+                    case CoreOp.NegOp op -> neg(op);\n@@ -218,4 +215,2 @@\n-            \/\/ append(\"mul.wide\").s32().space().printAndAddVar(op.result(), PTXRegister.Type.U64).commaSpace()\n-            \/\/         .printVar(op.operands().getFirst()).commaSpace().append(\"4\").ptxNl();\n-            source = new PTXRegister(incrOrdinal(addrType()), addrType());\n-            append(\"add\").s64().space().append(source.name()).commaSpace().printVar(op.operands().get(0)).commaSpace().printVar(op.operands().get(1)).ptxNl();\n+            source = new PTXRegister(incrOrdinal(addressType()), addressType());\n+            add().s64().space().regName(source).commaSpace().reg(op.operands().get(0)).commaSpace().reg(op.operands().get(1)).ptxNl();\n@@ -223,1 +218,1 @@\n-            source = getVar(op.operands().getFirst());\n+            source = getReg(op.operands().getFirst());\n@@ -227,1 +222,1 @@\n-            st().global().u32().space().address(source.name(), offset).commaSpace().printVar(op.operands().get(2));\n+            st().global().u32().space().address(source.name(), offset).commaSpace().reg(op.operands().get(2));\n@@ -229,1 +224,1 @@\n-            ld().global().u32().space().printAndAddVar(op.result(), PTXRegister.Type.U32).commaSpace().address(source.name(), offset);\n+            ld().global().u32().space().reg(op.result(), PTXRegister.Type.U32).commaSpace().address(source.name(), offset);\n@@ -233,8 +228,0 @@\n-    public void varLoad(VarLoadOpWrapper op) {\n-        ld().printResultType(op.resultType(), false).space().printResult(op, addrType()).commaSpace().printVar(op.operandNAsValue(0));\n-    }\n-\n-    public void varStore(VarStoreOpWrapper op) {\n-        st().printResultType(op.resultType(), false).space().printResult(op, addrType()).commaSpace().printVar(op.operandNAsValue(0));\n-    }\n-\n@@ -246,1 +233,1 @@\n-                mov().u32().space().printResult(op, PTXRegister.Type.U32).commaSpace().printField(Field.KC_X);\n+                mov().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().fieldReg(Field.KC_X);\n@@ -252,1 +239,1 @@\n-            ld().global().u32().space().printFieldAndVal(Field.KC_MAXX, op.result()).commaSpace()\n+            ld().global().u32().space().fieldReg(Field.KC_MAXX, op.result()).commaSpace()\n@@ -255,2 +242,1 @@\n-            ld().global().u32().space().printResult(op, PTXRegister.Type.U64).commaSpace().printVar(op.operandNAsValue(0));\n-\/\/            ld().global().u32().space().printResult(op, PTXRegister.Type.U64).commaSpace().printFieldAndVal(op.fieldName(), op.result());\n+            ld().global().u32().space().resultReg(op, PTXRegister.Type.U64).commaSpace().reg(op.operandNAsValue(0));\n@@ -261,8 +247,8 @@\n-        append(\"cvta.to\").global().addrSize().space().printField(Field.KC_ADDR).commaSpace()\n-                .printAndAddVar(paramMap.get(\"kc\"), addrType()).ptxNl();\n-        mov().u32().space().printField(Field.NTID_X).commaSpace().append(\"%ntid.x\").ptxNl();\n-        mov().u32().space().printField(Field.CTAID_X).commaSpace().append(\"%ctaid.x\").ptxNl();\n-        mov().u32().space().printField(Field.TID_X).commaSpace().append(\"%tid.x\").ptxNl();\n-        append(\"mad.lo\").s32().space().printFieldAndVal(Field.KC_X, value).commaSpace().printField(Field.CTAID_X)\n-                .commaSpace().printField(Field.NTID_X).commaSpace().printField(Field.TID_X).ptxNl();\n-        st().global().u32().space().address(fieldToRegMap.get(Field.KC_ADDR).name()).commaSpace().printField(Field.KC_X);\n+        cvta().to().global().size().space().fieldReg(Field.KC_ADDR).commaSpace()\n+                .reg(paramMap.get(\"kc\"), addressType()).ptxNl();\n+        mov().u32().space().fieldReg(Field.NTID_X).commaSpace().percent().regName(Field.NTID_X.toString()).ptxNl();\n+        mov().u32().space().fieldReg(Field.CTAID_X).commaSpace().percent().regName(Field.CTAID_X.toString()).ptxNl();\n+        mov().u32().space().fieldReg(Field.TID_X).commaSpace().percent().regName(Field.TID_X.toString()).ptxNl();\n+        mad().lo().s32().space().fieldReg(Field.KC_X, value).commaSpace().fieldReg(Field.CTAID_X)\n+                .commaSpace().fieldReg(Field.NTID_X).commaSpace().fieldReg(Field.TID_X).ptxNl();\n+        st().global().u32().space().address(fieldToRegMap.get(Field.KC_ADDR).name()).commaSpace().fieldReg(Field.KC_X);\n@@ -273,1 +259,1 @@\n-        st().global().u64().space().printResult(op, PTXRegister.Type.U64).commaSpace().printVar(op.operandNAsValue(0));\n+        st().global().u64().space().resultReg(op, PTXRegister.Type.U64).commaSpace().reg(op.operandNAsValue(0));\n@@ -278,14 +264,16 @@\n-            case CoreOp.ModOp _ -> append(\"rem\");\n-            case CoreOp.MulOp _ -> append(\"mul\");\n-            case CoreOp.DivOp _ -> append(\"div\");\n-            case CoreOp.AddOp _ -> append(\"add\");\n-            case CoreOp.SubOp _ -> append(\"sub\");\n-            case CoreOp.LtOp _ -> append(\"lt\");\n-            case CoreOp.GtOp _ -> append(\"gt\");\n-            case CoreOp.LeOp _ -> append(\"le\");\n-            case CoreOp.GeOp _ -> append(\"ge\");\n-            case CoreOp.NeqOp _ -> append(\"ne\");\n-            case CoreOp.EqOp _ -> append(\"eq\");\n-            case CoreOp.XorOp _ -> append(\"xor\");\n-            case ExtendedOp.JavaConditionalAndOp _ -> append(\"&&\");\n-            case ExtendedOp.JavaConditionalOrOp _ -> append(\"||\");\n+            case CoreOp.ModOp _ -> rem();\n+            case CoreOp.MulOp _ -> mul();\n+            case CoreOp.DivOp _ -> div();\n+            case CoreOp.AddOp _ -> add();\n+            case CoreOp.SubOp _ -> sub();\n+            case CoreOp.LtOp _ -> lt();\n+            case CoreOp.GtOp _ -> gt();\n+            case CoreOp.LeOp _ -> le();\n+            case CoreOp.GeOp _ -> ge();\n+            case CoreOp.NeqOp _ -> ne();\n+            case CoreOp.EqOp _ -> eq();\n+            case CoreOp.OrOp _ -> or();\n+            case CoreOp.AndOp _ -> and();\n+            case CoreOp.XorOp _ -> xor();\n+            case CoreOp.LshlOp _ -> shl();\n+            case CoreOp.AshrOp _, CoreOp.LshrOp _ -> shr();\n@@ -298,4 +286,4 @@\n-        if (op.resultType().toString().equals(\"float\") && op.op() instanceof CoreOp.DivOp) dot().append(\"rn\");\n-        if (!op.resultType().toString().equals(\"float\") && op.op() instanceof CoreOp.MulOp) dot().append(\"lo\");\n-        printResultType(op.resultType(), true).space();\n-        printResult(op, resultType(op.resultType()));\n+        if (op.resultType().toString().equals(\"float\") && op.op() instanceof CoreOp.DivOp) rn();\n+        if (!op.resultType().toString().equals(\"float\") && op.op() instanceof CoreOp.MulOp) lo();\n+        resultType(op.resultType(), true).space();\n+        resultReg(op, getResultType(op.resultType()));\n@@ -303,1 +291,1 @@\n-        printVar(op.operandNAsValue(0));\n+        reg(op.operandNAsValue(0));\n@@ -305,1 +293,1 @@\n-        printVar(op.operandNAsValue(1));\n+        reg(op.operandNAsValue(1));\n@@ -309,3 +297,3 @@\n-        append(\"setp\").dot();\n-        symbol(op.op()).printResultType(op.operandNAsValue(0).type(), true).space();\n-        printResult(op, PTXRegister.Type.PREDICATE);\n+        setp().dot();\n+        symbol(op.op()).resultType(op.operandNAsValue(0).type(), true).space();\n+        resultReg(op, PTXRegister.Type.PREDICATE);\n@@ -313,1 +301,1 @@\n-        printVar(op.operandNAsValue(0));\n+        reg(op.operandNAsValue(0));\n@@ -315,1 +303,1 @@\n-        printVar(op.operandNAsValue(1));\n+        reg(op.operandNAsValue(1));\n@@ -318,1 +306,0 @@\n-    \/\/TODO: fix?? (i think this is multiplying the idx by 4)\n@@ -321,7 +308,7 @@\n-            \/\/ PTXRegister temp = new PTXRegister(incrOrdinal(addrType()), addrType());\n-            \/\/ append(\"cvt.rn\").u64().dot().append(getVar(op.operandNAsValue(0)).type().toString()).space()\n-            \/\/         .printResult(op, PTXRegister.Type.U64).commaSpace().printVar(op.operandNAsValue(0)).ptxNl();\n-            \/\/ append(\"mul.wide\").s32().space().printResult(op, PTXRegister.Type.U64).commaSpace()\n-            \/\/         .printVar(op.operandNAsValue(0)).commaSpace().append(\"4\");\n-            append(\"mul.wide\").s32().space().printResult(op, PTXRegister.Type.U64).commaSpace()\n-                    .printVar(op.operandNAsValue(0)).commaSpace().append(\"4\");\n+            if (isIndex(op)) {\n+                mul().wide().s32().space().resultReg(op, PTXRegister.Type.U64).commaSpace()\n+                        .reg(op.operandNAsValue(0)).commaSpace().intVal(4);\n+            } else {\n+                cvt().rn().u64().dot().regType(op.operandNAsValue(0)).space()\n+                        .resultReg(op, PTXRegister.Type.U64).commaSpace().reg(op.operandNAsValue(0)).ptxNl();\n+            }\n@@ -329,2 +316,2 @@\n-            append(\"cvt.rn\").f32().dot().append(getVar(op.operandNAsValue(0)).type().toString()).space()\n-                    .printResult(op, PTXRegister.Type.F32).commaSpace().printVar(op.operandNAsValue(0));\n+            cvt().rn().f32().dot().regType(op.operandNAsValue(0)).space()\n+                    .resultReg(op, PTXRegister.Type.F32).commaSpace().reg(op.operandNAsValue(0));\n@@ -332,2 +319,2 @@\n-            append(\"cvt.rn\").f64().dot().append(getVar(op.operandNAsValue(0)).type().toString()).space()\n-                    .printResult(op, PTXRegister.Type.F64).commaSpace().printVar(op.operandNAsValue(0));\n+            cvt().rn().f64().dot().regType(op.operandNAsValue(0)).space()\n+                    .resultReg(op, PTXRegister.Type.F64).commaSpace().reg(op.operandNAsValue(0));\n@@ -335,2 +322,2 @@\n-            append(\"cvt.rn\").s32().dot().append(getVar(op.operandNAsValue(0)).type().toString()).space()\n-                    .printResult(op, PTXRegister.Type.S32).commaSpace().printVar(op.operandNAsValue(0));\n+            cvt().rn().s32().dot().regType(op.operandNAsValue(0)).space()\n+                    .resultReg(op, PTXRegister.Type.S32).commaSpace().reg(op.operandNAsValue(0));\n@@ -338,2 +325,8 @@\n-            append(\"cvt.rn\").s32().dot().append(getVar(op.operandNAsValue(0)).type().toString()).space()\n-                    .printResult(op, PTXRegister.Type.S32).commaSpace().printVar(op.operandNAsValue(0));\n+            cvt().rn().s32().dot().regType(op.operandNAsValue(0)).space()\n+                    .resultReg(op, PTXRegister.Type.S32).commaSpace().reg(op.operandNAsValue(0));\n+        }\n+    }\n+\n+    private boolean isIndex(ConvOpWrapper op) {\n+        for (Op.Result r : op.result().uses()) {\n+            if (r.op() instanceof PTXPtrOp) return true;\n@@ -341,0 +334,1 @@\n+        return false;\n@@ -344,1 +338,1 @@\n-        mov().printResultType(op.resultType(), false).space().printResult(op, resultType(op.resultType())).commaSpace();\n+        mov().resultType(op.resultType(), false).space().resultReg(op, getResultType(op.resultType())).commaSpace();\n@@ -355,6 +349,1 @@\n-        append(\"exit\");\n-    }\n-\n-    public void funcCall(FuncCallOpWrapper op) {\n-        \/\/ TODO: fix????\n-        append(op.toString());\n+        exit();\n@@ -364,22 +353,113 @@\n-        if (op.methodRef().toString().equals(\"hat.buffer.S32Array::array(long)int\")) {\n-            PTXRegister temp = new PTXRegister(incrOrdinal(addrType()), addrType());\n-            append(\"add\").s64().space().append(temp.name()).commaSpace().printVar(op.operandNAsValue(0)).commaSpace().printVar(op.operandNAsValue(1)).ptxNl();\n-            ld().global().u32().space().printResult(op, PTXRegister.Type.U32).commaSpace().address(temp.name(), 4);\n-        } else if (op.methodRef().toString().equals(\"hat.buffer.S32Array::array(long, int)void\")) {\n-            PTXRegister temp = new PTXRegister(incrOrdinal(addrType()), addrType());\n-            append(\"add\").s64().space().append(temp.name()).commaSpace().printVar(op.operandNAsValue(0)).commaSpace().printVar(op.operandNAsValue(1)).ptxNl();\n-            st().global().u32().space().address(temp.name(), 4).commaSpace().printVar(op.operandNAsValue(2));\n-        } else if (op.methodRef().toString().equals(\"hat.buffer.S32Array::length()int\")) {\n-            ld().global().u32().space().printResult(op, PTXRegister.Type.U32).commaSpace().address(getVar(op.operandNAsValue(0)).name());\n-        } else if (op.methodRef().toString().equals(\"hat.buffer.S32Array2D::array(long, int)void\")) {\n-            PTXRegister temp = new PTXRegister(incrOrdinal(addrType()), addrType());\n-            append(\"add\").s64().space().append(temp.name()).commaSpace().printVar(op.operandNAsValue(0)).commaSpace().printVar(op.operandNAsValue(1)).ptxNl();\n-            st().global().u32().space().address(temp.name(), 8).commaSpace().printVar(op.operandNAsValue(2));\n-        } else if (op.methodRef().toString().equals(\"hat.buffer.S32Array2D::width()int\")) {\n-            ld().global().u32().space().printResult(op, PTXRegister.Type.U32).commaSpace().address(getVar(op.operandNAsValue(0)).name());\n-        } else if (op.methodRef().toString().equals(\"hat.buffer.S32Array2D::height()int\")) {\n-            ld().global().u32().space().printResult(op, PTXRegister.Type.U32).commaSpace().address(getVar(op.operandNAsValue(0)).name(), 4);\n-        } else {\n-            for (int i = 0; i < op.operands().size(); i++) {\n-                param().space().printParamType(op.operandNAsValue(i).type()).space().append(\"param\").append(String.valueOf(i)).ptxNl();\n-                st().param().printParamType(op.operandNAsValue(i).type()).space().osbrace().append(\"param\").append(String.valueOf(i)).csbrace().commaSpace().printVar(op.operandNAsValue(i)).ptxNl();\n+        switch (op.methodRef().toString()) {\n+            \/\/ S32Array functions\n+            case \"hat.buffer.S32Array::array(long)int\" -> {\n+                PTXRegister temp = new PTXRegister(incrOrdinal(addressType()), addressType());\n+                add().s64().space().regName(temp).commaSpace().reg(op.operandNAsValue(0)).commaSpace().reg(op.operandNAsValue(1)).ptxNl();\n+                ld().global().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().address(temp.name(), 4);\n+            }\n+            case \"hat.buffer.S32Array::array(long, int)void\" -> {\n+                PTXRegister temp = new PTXRegister(incrOrdinal(addressType()), addressType());\n+                add().s64().space().regName(temp).commaSpace().reg(op.operandNAsValue(0)).commaSpace().reg(op.operandNAsValue(1)).ptxNl();\n+                st().global().u32().space().address(temp.name(), 4).commaSpace().reg(op.operandNAsValue(2));\n+            }\n+            case \"hat.buffer.S32Array::length()int\" -> {\n+                ld().global().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().address(getReg(op.operandNAsValue(0)).name());\n+            }\n+            \/\/ S32Array2D functions\n+            case \"hat.buffer.S32Array2D::array(long, int)void\" -> {\n+                PTXRegister temp = new PTXRegister(incrOrdinal(addressType()), addressType());\n+                add().s64().space().regName(temp).commaSpace().reg(op.operandNAsValue(0)).commaSpace().reg(op.operandNAsValue(1)).ptxNl();\n+                st().global().u32().space().address(temp.name(), 8).commaSpace().reg(op.operandNAsValue(2));\n+            }\n+            case \"hat.buffer.S32Array2D::width()int\" -> {\n+                ld().global().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().address(getReg(op.operandNAsValue(0)).name());\n+            }\n+            case \"hat.buffer.S32Array2D::height()int\" -> {\n+                ld().global().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().address(getReg(op.operandNAsValue(0)).name(), 4);\n+            }\n+            \/\/ Java Math functions\n+            case \"java.lang.Math::sqrt(double)double\" -> {\n+                sqrt().rn().f32().space().resultReg(op, PTXRegister.Type.F32).commaSpace().getReg(op.operandNAsValue(0)).name();\n+            }\n+            \/\/ TODO: add these\n+            case \"java.lang.Math::exp(double)double\" -> {\n+                \/*\n+                mov.f32         %f2, 0f3F000000;\n+                mov.f32         %f3, 0f3BBB989D;\n+                fma.rn.f32      %f4, %f1, %f3, %f2;\n+                mov.f32         %f5, 0f3FB8AA3B;\n+                mov.f32         %f6, 0f437C0000;\n+                cvt.sat.f32.f32         %f7, %f4;\n+                mov.f32         %f8, 0f4B400001;\n+                fma.rm.f32      %f9, %f7, %f6, %f8;\n+                add.f32         %f10, %f9, 0fCB40007F;\n+                neg.f32         %f11, %f10;\n+                fma.rn.f32      %f12, %f1, %f5, %f11;\n+                mov.f32         %f13, 0f32A57060;\n+                fma.rn.f32      %f14, %f1, %f13, %f12;\n+                mov.b32         %r6, %f9;\n+                shl.b32         %r7, %r6, 23;\n+                mov.b32         %f15, %r7;\n+                ex2.approx.ftz.f32      %f16, %f14;\n+                mul.f32         %f17, %f16, %f15;\n+                 *\/\n+            }\n+            case \"java.lang.Math::log(double)double\" -> {\n+                \/*\n+                mul.f32         %f6, %f5, 0f4B000000;\n+                setp.lt.f32     %p2, %f5, 0f00800000;\n+                selp.f32        %f1, %f6, %f5, %p2;\n+                selp.f32        %f7, 0fC1B80000, 0f00000000, %p2;\n+                mov.b32         %r6, %f1;\n+                add.s32         %r7, %r6, -1059760811;\n+                and.b32         %r8, %r7, -8388608;\n+                sub.s32         %r9, %r6, %r8;\n+                mov.b32         %f8, %r9;\n+                cvt.rn.f32.s32  %f9, %r8;\n+                mov.f32         %f10, 0f34000000;\n+                fma.rn.f32      %f11, %f9, %f10, %f7;\n+                add.f32         %f12, %f8, 0fBF800000;\n+                mov.f32         %f13, 0f3E1039F6;\n+                mov.f32         %f14, 0fBE055027;\n+                fma.rn.f32      %f15, %f14, %f12, %f13;\n+                mov.f32         %f16, 0fBDF8CDCC;\n+                fma.rn.f32      %f17, %f15, %f12, %f16;\n+                mov.f32         %f18, 0f3E0F2955;\n+                fma.rn.f32      %f19, %f17, %f12, %f18;\n+                mov.f32         %f20, 0fBE2AD8B9;\n+                fma.rn.f32      %f21, %f19, %f12, %f20;\n+                mov.f32         %f22, 0f3E4CED0B;\n+                fma.rn.f32      %f23, %f21, %f12, %f22;\n+                mov.f32         %f24, 0fBE7FFF22;\n+                fma.rn.f32      %f25, %f23, %f12, %f24;\n+                mov.f32         %f26, 0f3EAAAA78;\n+                fma.rn.f32      %f27, %f25, %f12, %f26;\n+                mov.f32         %f28, 0fBF000000;\n+                fma.rn.f32      %f29, %f27, %f12, %f28;\n+                mul.f32         %f30, %f12, %f29;\n+                fma.rn.f32      %f31, %f30, %f12, %f12;\n+                mov.f32         %f32, 0f3F317218;\n+                fma.rn.f32      %f35, %f11, %f32, %f31;\n+                setp.lt.u32     %p3, %r6, 2139095040;\n+                @%p3 bra        $L__BB0_3;\n+\n+                mov.f32         %f33, 0f7F800000;\n+                fma.rn.f32      %f35, %f1, %f33, %f33;\n+\n+        $L__BB0_3:\n+                cvta.to.global.u64      %rd4, %rd1;\n+                setp.eq.f32     %p4, %f1, 0f00000000;\n+                selp.f32        %f34, 0fFF800000, %f35, %p4;\n+                 *\/\n+                ld().global().u32().space().resultReg(op, PTXRegister.Type.U32).commaSpace().address(getReg(op.operandNAsValue(0)).name(), 4);\n+            }\n+            default -> {\n+                for (int i = 0; i < op.operands().size(); i++) {\n+                    dot().param().space().paramType(op.operandNAsValue(i).type()).space().param().intVal(i).ptxNl();\n+                    st().dot().param().paramType(op.operandNAsValue(i).type()).space().osbrace().param().intVal(i).csbrace().commaSpace().reg(op.operandNAsValue(i)).ptxNl();\n+                }\n+                dot().param().space().paramType(op.resultType()).space().retVal().ptxNl();\n+                call().uni().space().oparen().retVal().cparen().commaSpace().append(op.method().getName()).commaSpace();\n+                final int[] counter = {0};\n+                paren(_ -> commaSeparated(op.operands(), _ -> param().intVal(counter[0]++))).ptxNl();\n+                ld().dot().param().paramType(op.resultType()).space().resultReg(op, getResultType(op.resultType())).commaSpace().osbrace().retVal().csbrace();\n@@ -387,5 +467,0 @@\n-            param().space().printParamType(op.resultType()).space().append(\"retval\").ptxNl();\n-            append(\"call.uni\").space().oparen().append(\"retval\").cparen().commaSpace().append(op.method().getName()).commaSpace();\n-            final int[] counter = {0};\n-            paren(_ -> commaSeparated(op.operands(), _ -> append(\"param\").append(String.valueOf(counter[0]++)))).ptxNl();\n-            ld().param().printParamType(op.resultType()).space().printResult(op, resultType(op.resultType())).commaSpace().osbrace().append(\"retval\").csbrace();\n@@ -396,1 +471,1 @@\n-        ld().param().printResultType(op.resultType(), false).space().printResult(op, addrType()).commaSpace().printVar(op.operandNAsValue(0));\n+        ld().dot().param().resultType(op.resultType(), false).space().resultReg(op, addressType()).commaSpace().reg(op.operandNAsValue(0));\n@@ -400,1 +475,1 @@\n-        ld().param().printResultType(op.resultType(), false).space().printResult(op, addrType()).commaSpace().printVar(op.operandNAsValue(0));\n+        ld().dot().param().resultType(op.resultType(), false).space().resultReg(op, addressType()).commaSpace().reg(op.operandNAsValue(0));\n@@ -405,1 +480,1 @@\n-            st().param();\n+            st().dot().param();\n@@ -411,1 +486,1 @@\n-                dot().append(returnReg.type().toString());\n+                dot().regType(returnReg.type());\n@@ -413,1 +488,1 @@\n-            space().osbrace().append(returnReg.name()).csbrace().commaSpace().printVar(op.operandNAsValue(0)).ptxNl();\n+            space().osbrace().regName(returnReg).csbrace().commaSpace().reg(op.operandNAsValue(0)).ptxNl();\n@@ -415,1 +490,1 @@\n-        append(\"ret\");\n+        ret();\n@@ -419,1 +494,1 @@\n-        append(\"brkpt\");\n+        brkpt();\n@@ -424,1 +499,1 @@\n-        append(\"bra\").space().printBlock(op.successors().getFirst().targetBlock());\n+        bra().space().block(op.successors().getFirst().targetBlock());\n@@ -430,3 +505,7 @@\n-        append(\"@\").printVar(op.operands().getFirst()).space()\n-                .append(\"bra\").space().printBlock(op.successors().getFirst().targetBlock()).ptxNl();\n-        append(\"bra\").space().printBlock(op.successors().getLast().targetBlock());\n+        at().reg(op.operands().getFirst()).space()\n+                .bra().space().block(op.successors().getFirst().targetBlock()).ptxNl();\n+        bra().space().block(op.successors().getLast().targetBlock());\n+    }\n+\n+    public void neg(CoreOp.NegOp op) {\n+        neg().resultType(op.resultType(), true).space().reg(op.result(), getResultType(op.resultType())).commaSpace().reg(op.operands().getFirst());\n@@ -442,2 +521,2 @@\n-            mov().printResultType(p.type(), false).space().printAndAddVar(p, resultType(p.type()))\n-                    .commaSpace().printVar(block.arguments().get(i)).ptxNl();\n+            mov().resultType(p.type(), false).space().reg(p, getResultType(p.type()))\n+                    .commaSpace().reg(block.arguments().get(i)).ptxNl();\n@@ -447,2 +526,2 @@\n-    public PTXCodeBuilder printBlock(Block block) {\n-        return append(\"block_\").append(String.valueOf(block.index()));\n+    public PTXCodeBuilder block(Block block) {\n+        return append(\"block_\").intVal(block.index());\n@@ -451,5 +530,1 @@\n-    public PTXCodeBuilder printField(String ref) {\n-        return printField(getFieldObj(ref));\n-    }\n-\n-    public PTXCodeBuilder printField(Field ref) {\n+    public PTXCodeBuilder fieldReg(Field ref) {\n@@ -457,1 +532,1 @@\n-            return append(fieldToRegMap.get(ref).name());\n+            return regName(fieldToRegMap.get(ref));\n@@ -460,1 +535,1 @@\n-            fieldToRegMap.putIfAbsent(ref, new PTXRegister(incrOrdinal(addrType()), addrType()));\n+            fieldToRegMap.putIfAbsent(ref, new PTXRegister(incrOrdinal(addressType()), addressType()));\n@@ -464,1 +539,1 @@\n-        return append(fieldToRegMap.get(ref).name());\n+        return regName(fieldToRegMap.get(ref));\n@@ -467,1 +542,1 @@\n-    public PTXCodeBuilder printFieldAndVal(Field ref, Value value) {\n+    public PTXCodeBuilder fieldReg(Field ref, Value value) {\n@@ -469,1 +544,1 @@\n-            return append(fieldToRegMap.get(ref).name());\n+            return regName(fieldToRegMap.get(ref));\n@@ -472,2 +547,2 @@\n-            fieldToRegMap.putIfAbsent(ref, new PTXRegister(getOrdinal(addrType()), addrType()));\n-            return printAndAddVar(value, addrType());\n+            fieldToRegMap.putIfAbsent(ref, new PTXRegister(getOrdinal(addressType()), addressType()));\n+            return reg(value, addressType());\n@@ -476,1 +551,1 @@\n-            return printAndAddVar(value, PTXRegister.Type.U32);\n+            return reg(value, PTXRegister.Type.U32);\n@@ -487,2 +562,2 @@\n-    public PTXCodeBuilder printResult(OpWrapper<?> opWrapper, PTXRegister.Type type) {\n-        return append(addVar(opWrapper.result(), type));\n+    public PTXCodeBuilder resultReg(OpWrapper<?> opWrapper, PTXRegister.Type type) {\n+        return append(addReg(opWrapper.result(), type));\n@@ -491,1 +566,1 @@\n-    public PTXCodeBuilder printAndAddVar(Value val, PTXRegister.Type type) {\n+    public PTXCodeBuilder reg(Value val, PTXRegister.Type type) {\n@@ -493,1 +568,1 @@\n-            return append(getVar(val).name());\n+            return regName(getReg(val));\n@@ -495,1 +570,1 @@\n-            return append(addVar(val, type));\n+            return append(addReg(val, type));\n@@ -499,2 +574,2 @@\n-    public PTXCodeBuilder printVar(Value val) {\n-        return append(getVar(val).name());\n+    public PTXCodeBuilder reg(Value val) {\n+        return regName(getReg(val));\n@@ -503,1 +578,1 @@\n-    public PTXRegister getVar(Value val) {\n+    public PTXRegister getReg(Value val) {\n@@ -514,1 +589,1 @@\n-    public String addVar(Value val, PTXRegister.Type type) {\n+    public String addReg(Value val, PTXRegister.Type type) {\n@@ -534,1 +609,1 @@\n-    public PTXCodeBuilder addrSize() {\n+    public PTXCodeBuilder size() {\n@@ -538,1 +613,1 @@\n-    public PTXRegister.Type addrType() {\n+    public PTXRegister.Type addressType() {\n@@ -542,2 +617,2 @@\n-    public PTXCodeBuilder printResultType(TypeElement type, boolean signedResult) {\n-        PTXRegister.Type res = resultType(type);\n+    public PTXCodeBuilder resultType(TypeElement type, boolean signedResult) {\n+        PTXRegister.Type res = getResultType(type);\n@@ -545,1 +620,1 @@\n-        return dot().append(resultType(type).toString());\n+        return dot().append(getResultType(type).getName());\n@@ -548,2 +623,2 @@\n-    public PTXCodeBuilder printParamType(TypeElement type) {\n-        PTXRegister.Type res = resultType(type);\n+    public PTXCodeBuilder paramType(TypeElement type) {\n+        PTXRegister.Type res = getResultType(type);\n@@ -552,1 +627,1 @@\n-        return dot().append(resultType(type).toString());\n+        return dot().append(getResultType(type).getName());\n@@ -555,1 +630,1 @@\n-    public PTXRegister.Type resultType(TypeElement type) {\n+    public PTXRegister.Type getResultType(TypeElement type) {\n@@ -599,1 +674,1 @@\n-        return append(String.valueOf(offset)).csbrace();\n+        return intVal(offset).csbrace();\n@@ -611,1 +686,1 @@\n-        return dot().append(\"param\");\n+        return append(\"param\");\n@@ -618,0 +693,20 @@\n+    public PTXCodeBuilder rn() {\n+        return dot().append(\"rn\");\n+    }\n+\n+    public PTXCodeBuilder to() {\n+        return dot().append(\"to\");\n+    }\n+\n+    public PTXCodeBuilder lo() {\n+        return dot().append(\"lo\");\n+    }\n+\n+    public PTXCodeBuilder wide() {\n+        return dot().append(\"wide\");\n+    }\n+\n+    public PTXCodeBuilder uni() {\n+        return dot().append(\"uni\");\n+    }\n+\n@@ -622,0 +717,4 @@\n+    public PTXCodeBuilder setp() {\n+        return append(\"setp\");\n+    }\n+\n@@ -630,0 +729,104 @@\n+    public PTXCodeBuilder cvt() {\n+        return append(\"cvt\");\n+    }\n+\n+    public PTXCodeBuilder bra() {\n+        return append(\"bra\");\n+    }\n+\n+    public PTXCodeBuilder ret() {\n+        return append(\"ret\");\n+    }\n+\n+    public PTXCodeBuilder rem() {\n+        return append(\"rem\");\n+    }\n+\n+    public PTXCodeBuilder mul() {\n+        return append(\"mul\");\n+    }\n+\n+    public PTXCodeBuilder div() {\n+        return append(\"div\");\n+    }\n+\n+    public PTXCodeBuilder add() {\n+        return append(\"add\");\n+    }\n+\n+    public PTXCodeBuilder sub() {\n+        return append(\"sub\");\n+    }\n+\n+    public PTXCodeBuilder lt() {\n+        return append(\"lt\");\n+    }\n+\n+    public PTXCodeBuilder gt() {\n+        return append(\"gt\");\n+    }\n+\n+    public PTXCodeBuilder le() {\n+        return append(\"le\");\n+    }\n+\n+    public PTXCodeBuilder ge() {\n+        return append(\"ge\");\n+    }\n+\n+    public PTXCodeBuilder ne() {\n+        return append(\"ne\");\n+    }\n+\n+    public PTXCodeBuilder eq() {\n+        return append(\"eq\");\n+    }\n+\n+    public PTXCodeBuilder xor() {\n+        return append(\"xor\");\n+    }\n+\n+    public PTXCodeBuilder or() {\n+        return append(\"or\");\n+    }\n+\n+    public PTXCodeBuilder and() {\n+        return append(\"and\");\n+    }\n+\n+    public PTXCodeBuilder cvta() {\n+        return append(\"cvta\");\n+    }\n+\n+    public PTXCodeBuilder mad() {\n+        return append(\"mad\");\n+    }\n+\n+    public PTXCodeBuilder sqrt() {\n+        return append(\"sqrt\");\n+    }\n+\n+    public PTXCodeBuilder shl() {\n+        return append(\"shl\");\n+    }\n+\n+    public PTXCodeBuilder shr() {\n+        return append(\"shr\");\n+    }\n+\n+    public PTXCodeBuilder neg() {\n+        return append(\"neg\");\n+    }\n+\n+    public PTXCodeBuilder call() {\n+        return append(\"call\");\n+    }\n+\n+    public PTXCodeBuilder exit() {\n+        return append(\"exit\");\n+    }\n+\n+    public PTXCodeBuilder brkpt() {\n+        return append(\"brkpt\");\n+    }\n+\n@@ -635,1 +838,1 @@\n-        return dot().append(PTXRegister.Type.U32.toString());\n+        return dot().append(PTXRegister.Type.U32.getName());\n@@ -639,1 +842,1 @@\n-        return dot().append(PTXRegister.Type.S32.toString());\n+        return dot().append(PTXRegister.Type.S32.getName());\n@@ -643,1 +846,1 @@\n-        return dot().append(PTXRegister.Type.F32.toString());\n+        return dot().append(PTXRegister.Type.F32.getName());\n@@ -647,1 +850,1 @@\n-        return dot().append(PTXRegister.Type.B32.toString());\n+        return dot().append(PTXRegister.Type.B32.getName());\n@@ -651,1 +854,1 @@\n-        return dot().append(PTXRegister.Type.U64.toString());\n+        return dot().append(PTXRegister.Type.U64.getName());\n@@ -655,1 +858,1 @@\n-        return dot().append(PTXRegister.Type.S64.toString());\n+        return dot().append(PTXRegister.Type.S64.getName());\n@@ -659,1 +862,1 @@\n-        return dot().append(PTXRegister.Type.F64.toString());\n+        return dot().append(PTXRegister.Type.F64.getName());\n@@ -663,1 +866,85 @@\n-        return dot().append(PTXRegister.Type.B64.toString());\n+        return dot().append(PTXRegister.Type.B64.getName());\n+    }\n+\n+    public PTXCodeBuilder version() {\n+        return dot().append(\"version\");\n+    }\n+\n+    public PTXCodeBuilder target() {\n+        return dot().append(\"target\");\n+    }\n+\n+    public PTXCodeBuilder addressSize() {\n+        return dot().append(\"address_size\");\n+    }\n+\n+    public PTXCodeBuilder major(int major) {\n+        return intVal(major);\n+    }\n+\n+    public PTXCodeBuilder minor(int minor) {\n+        return intVal(minor);\n+    }\n+\n+    public PTXCodeBuilder target(String target) {\n+        return append(target);\n+    }\n+\n+    public PTXCodeBuilder size(int addressSize) {\n+        return intVal(addressSize);\n+    }\n+\n+    public PTXCodeBuilder funcName(String funcName) {\n+        return append(funcName);\n+    }\n+\n+    public PTXCodeBuilder visible() {\n+        return dot().append(\"visible\");\n+    }\n+\n+    public PTXCodeBuilder entry() {\n+        return dot().append(\"entry\");\n+    }\n+\n+    public PTXCodeBuilder func() {\n+        return dot().append(\"func\");\n+    }\n+\n+    public PTXCodeBuilder oabrace() {\n+        return append(\"<\");\n+    }\n+\n+    public PTXCodeBuilder cabrace() {\n+        return append(\">\");\n+    }\n+\n+    public PTXCodeBuilder regName(PTXRegister reg) {\n+        return append(reg.name());\n+    }\n+\n+    public PTXCodeBuilder regName(String regName) {\n+        return append(regName);\n+    }\n+\n+    public PTXCodeBuilder regType(Value val) {\n+        return append(getReg(val).type().getName());\n+    }\n+\n+    public PTXCodeBuilder regType(PTXRegister.Type t) {\n+        return append(t.getName());\n+    }\n+\n+    public PTXCodeBuilder regTypePrefix(PTXRegister.Type t) {\n+        return append(t.getRegPrefix());\n+    }\n+\n+    public PTXCodeBuilder reg() {\n+        return dot().append(\"reg\");\n+    }\n+\n+    public PTXCodeBuilder retVal() {\n+        return append(\"retval\");\n+    }\n+\n+    public PTXCodeBuilder intVal(int i) {\n+        return append(String.valueOf(i));\n","filename":"hat\/backends\/ptx\/src\/main\/java\/hat\/backend\/PTXCodeBuilder.java","additions":470,"deletions":183,"binary":false,"changes":653,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        public String toString() {\n+        public String getName() {\n","filename":"hat\/backends\/ptx\/src\/main\/java\/hat\/backend\/PTXRegister.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        float part1 = (1f \/ (float)Math.sqrt(2f * Math.PI)) * (float)Math.exp((-x * x) * 0.5f);\n+        float part1 = (1f \/ (float)Math.sqrt(2f * 3.1415926535f)) * (float)Math.exp((-x * x) * 0.5f);\n@@ -120,1 +120,1 @@\n-            System.out.println(\"S=\" + S.array(i) + \", X=\" + X.array(i) + \", T=\" + T.array(i) + \", call option price = \" + arr.array(i));\n+            System.out.println(\"S=\" + S.array(i) + \"\\t X=\" + X.array(i) + \"\\t T=\" + T.array(i) + \"\\t call option price = \" + arr.array(i));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/BlackScholes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}