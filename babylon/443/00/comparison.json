{"files":[{"patch":"@@ -193,0 +193,1 @@\n+            case Class<?> c when outer(c) instanceof JavaType outer -> qualified(outer, c.getSimpleName());\n@@ -217,0 +218,16 @@\n+    private static JavaType outer(Class<?> c) {\n+        if (c.isLocalClass() || c.isAnonymousClass()) {\n+            if (c.getEnclosingMethod() instanceof Method enclMethod &&\n+                    (enclMethod.getModifiers() & Modifier.STATIC) == 0) {\n+                \/\/ local or anon class defined in an instance method\n+                return type(enclMethod.getDeclaringClass());\n+            } else if (c.getEnclosingConstructor() instanceof Constructor<?> enclConstr) {\n+                \/\/ local or anon class defined in a method\n+                return type(enclConstr.getDeclaringClass());\n+            }\n+        } else if (c.isMemberClass() && (c.getModifiers() & Modifier.STATIC) == 0) {\n+            return type(c.getDeclaringClass());\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaType.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -402,0 +402,38 @@\n+\n+    static class InnerTypes {\n+\n+        class Member { }\n+\n+        static class Nested { }\n+\n+        void m() {\n+            class Local_I_M { }\n+        }\n+\n+        static void s_m() {\n+            class Local_S_M { }\n+        }\n+\n+        InnerTypes() {\n+            class Local_C { }\n+        }\n+    }\n+\n+    @Test\n+    public void testInnerTypes() throws ReflectiveOperationException {\n+        var innertypes = JavaType.type(InnerTypes.class);\n+        var member = (ClassType)JavaType.type(InnerTypes.Member.class);\n+        Assert.assertEquals(member.enclosingType().get(), innertypes);\n+\n+        var nested = (ClassType)JavaType.type(InnerTypes.Nested.class);\n+        Assert.assertTrue(nested.enclosingType().isEmpty());\n+\n+        var local_s_m = (ClassType)JavaType.type(Class.forName(\"TestJavaType$InnerTypes$1Local_S_M\"));\n+        Assert.assertTrue(local_s_m.enclosingType().isEmpty());\n+\n+        var local_i_m = (ClassType)JavaType.type(Class.forName(\"TestJavaType$InnerTypes$1Local_I_M\"));\n+        Assert.assertEquals(local_i_m.enclosingType().get(), innertypes);\n+\n+        var local_c = (ClassType)JavaType.type(Class.forName(\"TestJavaType$InnerTypes$1Local_C\"));\n+        Assert.assertEquals(local_c.enclosingType().get(), innertypes);\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}