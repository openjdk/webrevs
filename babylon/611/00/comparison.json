{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import hat.callgraph.CallGraph;\n+import hat.buffer.KernelBufferContext;\n@@ -37,1 +37,0 @@\n-import hat.buffer.KernelContext;\n@@ -71,1 +70,1 @@\n-        public final KernelContext kernelContext;\n+        public final KernelBufferContext kernelBufferContext;\n@@ -77,2 +76,2 @@\n-            this.kernelContext = KernelContext.createDefault(kernelCallGraph.computeContext.accelerator);\n-            ndRangeAndArgs[0] = this.kernelContext;\n+            this.kernelBufferContext = KernelBufferContext.createDefault(kernelCallGraph.computeContext.accelerator);\n+            ndRangeAndArgs[0] = this.kernelBufferContext;\n@@ -83,4 +82,4 @@\n-            kernelContext.maxX(kc.maxX);\n-            kernelContext.maxY(kc.maxY);\n-            kernelContext.maxZ(kc.maxZ);\n-            kernelContext.dimensions(kc.getDimensions());\n+            kernelBufferContext.maxX(kc.maxX);\n+            kernelBufferContext.maxY(kc.maxY);\n+            kernelBufferContext.maxZ(kc.maxZ);\n+            kernelBufferContext.dimensions(kc.getDimensions());\n@@ -90,4 +89,4 @@\n-            kernelContext.maxX(threadMesh.getX());\n-            kernelContext.maxY(threadMesh.getY());\n-            kernelContext.maxZ(threadMesh.getZ());\n-            kernelContext.dimensions(threadMesh.getDims());\n+            kernelBufferContext.maxX(threadMesh.getX());\n+            kernelBufferContext.maxY(threadMesh.getY());\n+            kernelBufferContext.maxZ(threadMesh.getZ());\n+            kernelBufferContext.dimensions(threadMesh.getDims());\n@@ -97,3 +96,3 @@\n-            kernelContext.lsx(threadMesh.getX());\n-            kernelContext.lsy(threadMesh.getY());\n-            kernelContext.lsz(threadMesh.getZ());\n+            kernelBufferContext.lsx(threadMesh.getX());\n+            kernelBufferContext.lsy(threadMesh.getY());\n+            kernelBufferContext.lsz(threadMesh.getZ());\n@@ -103,3 +102,3 @@\n-            kernelContext.lsx(0);\n-            kernelContext.lsy(0);\n-            kernelContext.lsz(0);\n+            kernelBufferContext.lsx(0);\n+            kernelBufferContext.lsy(0);\n+            kernelBufferContext.lsz(0);\n@@ -136,1 +135,1 @@\n-            args[0] = this.kernelContext;\n+            args[0] = this.kernelBufferContext;\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.buffer;\n+\n+import hat.Accelerator;\n+import hat.ifacemapper.Schema;\n+\n+public interface KernelBufferContext extends Buffer {\n+\n+    \/\/ ----------------------------------------------------------------------|\n+    \/\/| OpenCL            | CUDA                                  | HAT      |\n+    \/\/| ----------------- | ------------------------------------- |--------- |\n+    \/\/| get_global_id(0)  | blockIdx.x *blockDim.x + threadIdx.x  | gix      |\n+    \/\/| get_global_size(0)| gridDim.x * blockDim.x                | gsx      |\n+    \/\/| get_local_id(0)   | threadIdx.x                           | lix      |\n+    \/\/| get_local_size(0) | blockDim.x                            | lsx      |\n+    \/\/| get_group_id(0)   | blockIdx.x                            | bix      |\n+    \/\/| get_num_groups(0) | gridDim.x                             | bsx      |\n+    \/\/ ----------------------------------------------------------------------|\n+\n+    int x();\n+    void x(int x);\n+\n+    int y();\n+    void y(int y);\n+\n+    int z();\n+    void z(int z);\n+\n+    int maxX();\n+    void maxX(int maxX);\n+\n+    int maxY();\n+    void maxY(int maxY);\n+\n+    int maxZ();\n+    void maxZ(int maxZ);\n+\n+    int dimensions();\n+    void dimensions(int numDimensions);\n+\n+    \/\/ Global: new names\n+    int gix();\n+    void gix(int gix);\n+    int giy();\n+    void giy(int giy);\n+    int giz();\n+    void giz(int giz);\n+\n+    int gsx();\n+    void gsx(int gsx);\n+    int gsy();\n+    void gsy(int gsy);\n+    int gsz();\n+    void gsz(int gsz);\n+\n+    \/\/ Local accesses\n+    int lix();\n+    void lix(int lix);\n+    int liy();\n+    void liy(int liy);\n+    int liz();\n+    void liz(int liz);\n+\n+    \/\/ Local group size \/ block size\n+    int lsx();\n+    void lsx(int lsx);\n+    int lsy();\n+    void lsy(int lsy);\n+    int lsz();\n+    void lsz(int lsz);\n+\n+    \/\/ Block ID\n+    int bix();\n+    void bix(int bix);\n+    int biy();\n+    void biy(int biy);\n+    int biz();\n+    void biz(int biz);\n+\n+    Schema<KernelBufferContext> schema = Schema.of(KernelBufferContext.class,\n+            kernelContext -> kernelContext\n+                    .fields(\n+                            \"x\", \"maxX\", \"y\", \"maxY\", \"z\", \"maxZ\", \"dimensions\",  \/\/ Initial version: to be deprecated\n+                            \"gix\", \"giy\", \"giz\",  \/\/ global accesses\n+                            \"gsx\", \"gsy\", \"gsz\",  \/\/ global sizes\n+                            \"lix\", \"liy\", \"liz\",  \/\/ local (thread-ids)\n+                            \"lsx\", \"lsy\", \"lsz\",  \/\/ block size\n+                            \"bix\", \"biy\", \"biz\"   \/\/ block id\n+                    ));\n+\n+    static KernelBufferContext createDefault(Accelerator accelerator) {\n+        KernelBufferContext kernelBufferContext =  schema.allocate(accelerator);\n+        kernelBufferContext.x(0);\n+        kernelBufferContext.maxX(0);\n+        kernelBufferContext.y(0);\n+        kernelBufferContext.maxY(0);\n+        kernelBufferContext.z(0);\n+        kernelBufferContext.maxZ(0);\n+        kernelBufferContext.dimensions(3);\n+\n+        kernelBufferContext.gix(0);\n+        kernelBufferContext.giy(0);\n+        kernelBufferContext.giz(0);\n+\n+        kernelBufferContext.gsy(0);\n+        kernelBufferContext.giy(0);\n+        kernelBufferContext.giz(0);\n+\n+        kernelBufferContext.lix(0);\n+        kernelBufferContext.liy(0);\n+        kernelBufferContext.liz(0);\n+\n+        kernelBufferContext.lsx(0);\n+        kernelBufferContext.lsy(0);\n+        kernelBufferContext.lsz(0);\n+\n+        kernelBufferContext.bix(0);\n+        kernelBufferContext.biy(0);\n+        kernelBufferContext.biz(0);\n+\n+        return kernelBufferContext;\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/KernelBufferContext.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.buffer;\n-\n-import hat.Accelerator;\n-import hat.ifacemapper.Schema;\n-\n-public interface KernelContext extends Buffer {\n-\n-    \/\/ ----------------------------------------------------------------------|\n-    \/\/| OpenCL            | CUDA                                  | HAT      |\n-    \/\/| ----------------- | ------------------------------------- |--------- |\n-    \/\/| get_global_id(0)  | blockIdx.x *blockDim.x + threadIdx.x  | gix      |\n-    \/\/| get_global_size(0)| gridDim.x * blockDim.x                | gsx      |\n-    \/\/| get_local_id(0)   | threadIdx.x                           | lix      |\n-    \/\/| get_local_size(0) | blockDim.x                            | lsx      |\n-    \/\/| get_group_id(0)   | blockIdx.x                            | bix      |\n-    \/\/| get_num_groups(0) | gridDim.x                             | bsx      |\n-    \/\/ ----------------------------------------------------------------------|\n-\n-    int x();\n-    void x(int x);\n-\n-    int y();\n-    void y(int y);\n-\n-    int z();\n-    void z(int z);\n-\n-    int maxX();\n-    void maxX(int maxX);\n-\n-    int maxY();\n-    void maxY(int maxY);\n-\n-    int maxZ();\n-    void maxZ(int maxZ);\n-\n-    int dimensions();\n-    void dimensions(int numDimensions);\n-\n-    \/\/ Global: new names\n-    int gix();\n-    void gix(int gix);\n-    int giy();\n-    void giy(int giy);\n-    int giz();\n-    void giz(int giz);\n-\n-    int gsx();\n-    void gsx(int gsx);\n-    int gsy();\n-    void gsy(int gsy);\n-    int gsz();\n-    void gsz(int gsz);\n-\n-    \/\/ Local accesses\n-    int lix();\n-    void lix(int lix);\n-    int liy();\n-    void liy(int liy);\n-    int liz();\n-    void liz(int liz);\n-\n-    \/\/ Local group size \/ block size\n-    int lsx();\n-    void lsx(int lsx);\n-    int lsy();\n-    void lsy(int lsy);\n-    int lsz();\n-    void lsz(int lsz);\n-\n-    \/\/ Block ID\n-    int bix();\n-    void bix(int bix);\n-    int biy();\n-    void biy(int biy);\n-    int biz();\n-    void biz(int biz);\n-\n-    Schema<KernelContext> schema = Schema.of(KernelContext.class,\n-            kernelContext -> kernelContext\n-                    .fields(\n-                            \"x\", \"maxX\", \"y\", \"maxY\", \"z\", \"maxZ\", \"dimensions\",  \/\/ Initial version\n-                            \"gix\", \"giy\", \"giz\",  \/\/ global accesses\n-                            \"gsx\", \"gsy\", \"gsz\",  \/\/ global sizes\n-                            \"lix\", \"liy\", \"liz\",  \/\/ local (thread-ids)\n-                            \"lsx\", \"lsy\", \"lsz\",  \/\/ block size\n-                            \"bix\", \"biy\", \"biz\"   \/\/ block id\n-                    ));\n-\n-    static KernelContext  createDefault(Accelerator accelerator) {\n-        KernelContext kernelContext =  schema.allocate(accelerator);\n-        kernelContext.x(0);\n-        kernelContext.maxX(0);\n-        kernelContext.y(0);\n-        kernelContext.maxY(0);\n-        kernelContext.z(0);\n-        kernelContext.maxZ(0);\n-        kernelContext.dimensions(3);\n-\n-        kernelContext.gix(0);\n-        kernelContext.giy(0);\n-        kernelContext.giz(0);\n-\n-        kernelContext.gsy(0);\n-        kernelContext.giy(0);\n-        kernelContext.giz(0);\n-\n-        kernelContext.lix(0);\n-        kernelContext.liy(0);\n-        kernelContext.liz(0);\n-\n-        kernelContext.lsx(0);\n-        kernelContext.lsy(0);\n-        kernelContext.lsz(0);\n-\n-        kernelContext.bix(0);\n-        kernelContext.biy(0);\n-        kernelContext.biz(0);\n-\n-        return kernelContext;\n-    }\n-}\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/KernelContext.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-import hat.buffer.KernelContext;\n+import hat.buffer.KernelBufferContext;\n@@ -340,1 +340,1 @@\n-                && (isAssignable(lookup, javaType, hat.KernelContext.class) || isAssignable(lookup, javaType, KernelContext.class))\n+                && (isAssignable(lookup, javaType, hat.KernelContext.class) || isAssignable(lookup, javaType, KernelBufferContext.class))\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpTk.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}