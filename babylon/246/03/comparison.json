{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.runtime.ExactConversionsSupport;\n@@ -3115,1 +3116,1 @@\n-                    case TypePatternOp tp -> lowerBindingPattern(endNoMatchBlock, currentBlock, bindings, tp, target);\n+                    case TypePatternOp tp -> lowerTypePattern(endNoMatchBlock, currentBlock, bindings, tp, target);\n@@ -3149,3 +3150,3 @@\n-            static Block.Builder lowerBindingPattern(Block.Builder endNoMatchBlock, Block.Builder currentBlock,\n-                                                     List<Value> bindings,\n-                                                     TypePatternOp tpOp, Value target) {\n+            static Block.Builder lowerTypePattern(Block.Builder endNoMatchBlock, Block.Builder currentBlock,\n+                                                  List<Value> bindings,\n+                                                  TypePatternOp tpOp, Value target) {\n@@ -3157,2 +3158,14 @@\n-                currentBlock.op(conditionalBranch(currentBlock.op(CoreOp.instanceOf(targetType, target)),\n-                        nextBlock.successor(), endNoMatchBlock.successor()));\n+                Result p;\n+                boolean patternWithPrimitive = false;\n+                if (targetType instanceof PrimitiveType tt && target.type() instanceof PrimitiveType st) {\n+                    patternWithPrimitive = true;\n+                    String s = capitalize(st.toString());\n+                    String t = capitalize(tt.toString());\n+                    String mn = \"is%sTo%sExact\".formatted(s, t);\n+                    MethodRef mref = MethodRef.method(JavaType.type(ExactConversionsSupport.class), mn, BOOLEAN, st);\n+                    p = currentBlock.op(invoke(mref, target));\n+                } else {\n+                    p = currentBlock.op(CoreOp.instanceOf(targetType, target));\n+                }\n+\n+                currentBlock.op(conditionalBranch(p, nextBlock.successor(), endNoMatchBlock.successor()));\n@@ -3162,1 +3175,5 @@\n-                target = currentBlock.op(CoreOp.cast(targetType, target));\n+                if (patternWithPrimitive) {\n+                    target = currentBlock.op(CoreOp.conv(targetType, target));\n+                } else {\n+                    target = currentBlock.op(CoreOp.cast(targetType, target));\n+                }\n@@ -3168,0 +3185,4 @@\n+            private static String capitalize(String s) {\n+                return s.substring(0, 1).toUpperCase() + s.substring(1);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.code.*;\n+import java.lang.reflect.code.bytecode.BytecodeGenerator;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.reflect.code.op.ExtendedOp;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.reflect.code.type.PrimitiveType;\n+import java.util.List;\n+\n+import static java.lang.reflect.code.op.CoreOp.*;\n+import static java.lang.reflect.code.op.ExtendedOp.*;\n+import static java.lang.reflect.code.type.FunctionType.*;\n+\n+\/*\n+ * @test\n+ * @run testng TestPrimitiveTypePatterns\n+ * @enablePreview\n+ *\/\n+\n+public class TestPrimitiveTypePatterns {\n+\n+    @DataProvider\n+    public static Object[][] patternsOfInt() {\n+        return new Object[][]{\n+                {JavaType.BYTE, new int[] {Byte.MIN_VALUE, Byte.MAX_VALUE, Byte.MIN_VALUE -1, Byte.MAX_VALUE + 1}},\n+                {JavaType.SHORT, new int[] {Short.MIN_VALUE, Short.MAX_VALUE, Short.MIN_VALUE -1, Short.MAX_VALUE + 1}},\n+                {JavaType.CHAR, new int[] {Character.MIN_VALUE, Character.MAX_VALUE, Character.MIN_VALUE -1, Character.MAX_VALUE + 1}},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"patternsOfInt\")\n+    void testPatternsOfInt(JavaType targetType, int[] values) throws Throwable {\n+\n+        var model = buildTypePatternModel(JavaType.INT, targetType);\n+        var lmodel = model.transform(OpTransformer.LOWERING_TRANSFORMER);\n+\n+        var mh = BytecodeGenerator.generate(MethodHandles.lookup(), lmodel);\n+\n+        for (int v : values) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, v), mh.invoke(v));\n+        }\n+    }\n+\n+    static FuncOp buildTypePatternModel(JavaType sourceType, JavaType targetType) {\n+        \/\/ builds the model of:\n+        \/\/ static boolean f(sourceType a) { return a instanceof targetType _; }\n+        return func(\"f\", functionType(JavaType.BOOLEAN, sourceType)).body(fblock -> {\n+\n+            var param = fblock.op(var(fblock.parameters().get(0)));\n+            var paramVal = fblock.op(varLoad(param));\n+\n+            var patternVar = fblock.op(var(fblock.op(constant(targetType, defaultValue(targetType)))));\n+\n+            var pattern = Body.Builder.of(fblock.parentBody(), functionType(ExtendedOp.Pattern.bindingType(targetType)));\n+            pattern.entryBlock().op(_yield(\n+                    pattern.entryBlock().op(typePattern(targetType, null))\n+            ));\n+\n+            var match = Body.Builder.of(fblock.parentBody(), functionType(JavaType.VOID, targetType));\n+            var binding = match.entryBlock().parameters().get(0);\n+            match.entryBlock().op(varStore(patternVar, binding));\n+            match.entryBlock().op(_yield());\n+\n+            var result = fblock.op(match(paramVal, pattern, match));\n+\n+            fblock.op(_return(result));\n+        });\n+    }\n+\n+    static Object defaultValue(JavaType t) {\n+        if (List.of(PrimitiveType.BYTE, PrimitiveType.SHORT, PrimitiveType.CHAR, PrimitiveType.INT).contains(t)) {\n+            return 0;\n+        } else if (PrimitiveType.LONG.equals(t)) {\n+            return 0L;\n+        } else if (PrimitiveType.FLOAT.equals(t)) {\n+            return 0f;\n+        } else if (PrimitiveType.DOUBLE.equals(t)) {\n+            return 0d;\n+        } else if (PrimitiveType.BOOLEAN.equals(t)) {\n+            return false;\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}