{"files":[{"patch":"@@ -3161,0 +3161,3 @@\n+                    if (List.of(CHAR, SHORT).contains(st)) {\n+                        st = INT;\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    public static Object[][] fromInt() {\n+    public static Object[][] dp() {\n@@ -45,3 +45,6 @@\n-                {JavaType.BYTE, new int[] {Byte.MIN_VALUE, Byte.MAX_VALUE, Byte.MIN_VALUE - 1, Byte.MAX_VALUE + 1}, intToByte},\n-                {JavaType.SHORT, new int[] {Short.MIN_VALUE, Short.MAX_VALUE, Short.MIN_VALUE - 1, Short.MAX_VALUE + 1}, intToShort},\n-                {JavaType.CHAR, new int[] {Character.MIN_VALUE, Character.MAX_VALUE, Character.MIN_VALUE - 1, Character.MAX_VALUE + 1}, intToChar},\n+                {JavaType.INT, JavaType.BYTE, new Object[] {Byte.MIN_VALUE - 1, Byte.MIN_VALUE, Byte.MAX_VALUE,\n+                        Byte.MAX_VALUE + 1}, intToByte},\n+                {JavaType.INT, JavaType.SHORT, new Object[] {Short.MIN_VALUE - 1, Short.MIN_VALUE, Short.MAX_VALUE,\n+                        Short.MAX_VALUE + 1}, intToShort},\n+                {JavaType.INT, JavaType.CHAR, new Object[] {Character.MIN_VALUE - 1, Character.MIN_VALUE, Character.MAX_VALUE,\n+                        Character.MAX_VALUE + 1}, intToChar},\n@@ -50,1 +53,9 @@\n-                {JavaType.FLOAT, new int[] {1<<24, (1<<24) + 1, (1<<31) - (1<<7), -((1<<24) + 1)}, intToFloat}\n+                {JavaType.INT, JavaType.FLOAT, new Object[] {1<<24, (1<<24) + 1, (1<<31) - (1<<7), (1<<31) - (1<<7) + 1,\n+                        Integer.MAX_VALUE, Integer.MIN_VALUE}, intToFloat},\n+\n+                {JavaType.SHORT, JavaType.BYTE, new Object[]{(short) (Byte.MIN_VALUE - 1), Byte.MIN_VALUE, Byte.MAX_VALUE,\n+                        (short) (Byte.MAX_VALUE + 1)}, intToByte},\n+                {JavaType.SHORT, JavaType.CHAR, new Object[]{Short.MIN_VALUE, (short) -1, (short) 0, Short.MAX_VALUE}, intToChar},\n+\n+                {JavaType.CHAR, JavaType.BYTE, new Object[]{(char) 0, (char) Byte.MAX_VALUE, (char) (Byte.MAX_VALUE + 1)}, intToByte},\n+                {JavaType.CHAR, JavaType.SHORT, new Object[]{(char) 0, (char) Short.MAX_VALUE, (char) (Short.MAX_VALUE + 1)}, intToShort},\n@@ -54,2 +65,2 @@\n-    @Test(dataProvider = \"fromInt\")\n-    void fromInt(JavaType targetType, int[] values, MethodRef expectedConversionMethod) throws Throwable {\n+    @Test(dataProvider = \"dp\")\n+    void test(JavaType sourceType, JavaType targetType, Object[] values, MethodRef expectedConversionMethod) throws Throwable {\n@@ -57,1 +68,1 @@\n-        var model = buildTypePatternModel(JavaType.INT, targetType);\n+        var model = buildTypePatternModel(sourceType, targetType);\n@@ -66,1 +77,0 @@\n-\n@@ -69,1 +79,1 @@\n-        for (int v : values) {\n+        for (Object v : values) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"}]}