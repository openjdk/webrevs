{"files":[{"patch":"@@ -33,8 +33,21 @@\n-    static final MethodRef intToByte = MethodRef.method(ExactConversionsSupport.class, \"isIntToByteExact\",\n-            boolean.class, int.class);\n-    static final MethodRef intToShort = MethodRef.method(ExactConversionsSupport.class, \"isIntToShortExact\",\n-            boolean.class, int.class);\n-    static final MethodRef intToChar = MethodRef.method(ExactConversionsSupport.class, \"isIntToCharExact\",\n-            boolean.class, int.class);\n-    static final MethodRef intToFloat = MethodRef.method(ExactConversionsSupport.class, \"isIntToFloatExact\",\n-            boolean.class, int.class);\n+    static final MethodRef intToByte = conversionMethodRef(JavaType.INT, JavaType.BYTE);\n+    static final MethodRef intToShort = conversionMethodRef(JavaType.INT, JavaType.SHORT);\n+    static final MethodRef intToChar = conversionMethodRef(JavaType.INT, JavaType.CHAR);\n+    static final MethodRef intToFloat = conversionMethodRef(JavaType.INT, JavaType.FLOAT);\n+    static final MethodRef longToByte = conversionMethodRef(JavaType.LONG, JavaType.BYTE);\n+    static final MethodRef longToShort = conversionMethodRef(JavaType.LONG, JavaType.SHORT);\n+    static final MethodRef longToChar = conversionMethodRef(JavaType.LONG, JavaType.CHAR);\n+    static final MethodRef longToInt = conversionMethodRef(JavaType.LONG, JavaType.INT);\n+    static final MethodRef longToFloat = conversionMethodRef(JavaType.LONG, JavaType.FLOAT);\n+    static final MethodRef longToDouble = conversionMethodRef(JavaType.LONG, JavaType.DOUBLE);\n+\n+\n+    static MethodRef conversionMethodRef(JavaType sourceType, JavaType targetType) {\n+        String n = \"is%sTo%sExact\".formatted(capitalize(sourceType.toString()), capitalize(targetType.toString()));\n+        JavaType c = JavaType.type(ExactConversionsSupport.class);\n+        return MethodRef.method(c, n, PrimitiveType.BOOLEAN, sourceType);\n+    }\n+\n+    static String capitalize(String s) {\n+        return s.substring(0, 1).toUpperCase() + s.substring(1);\n+    }\n@@ -62,0 +75,14 @@\n+\n+                {JavaType.LONG, JavaType.BYTE, new Object[] {Byte.MIN_VALUE - 1, Byte.MIN_VALUE, Byte.MAX_VALUE,\n+                        Byte.MAX_VALUE + 1}, longToByte},\n+                {JavaType.LONG, JavaType.SHORT, new Object[] {Short.MIN_VALUE - 1, Short.MIN_VALUE, Short.MAX_VALUE,\n+                        Short.MAX_VALUE + 1}, longToShort},\n+                {JavaType.LONG, JavaType.CHAR, new Object[] {Character.MIN_VALUE - 1, Character.MIN_VALUE, Character.MAX_VALUE,\n+                        Character.MAX_VALUE + 1}, longToChar},\n+                {JavaType.LONG, JavaType.INT, new Object[] {(long)Integer.MIN_VALUE - 1, Integer.MIN_VALUE, Integer.MAX_VALUE,\n+                        (long)Integer.MAX_VALUE + 1}, longToInt},\n+                \/\/ long -> float .. double\n+\n+                \/\/ float -> byte .. long\n+\n+                \/\/ double -> byte .. float\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":35,"deletions":8,"binary":false,"changes":43,"status":"modified"}]}