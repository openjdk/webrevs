{"files":[{"patch":"@@ -2802,0 +2802,16 @@\n+            \/*\n+            create block for every expression body\n+            when yield branch to the next block\n+            also create a block for after expressions\n+            *\n+            * *\/\n+            List<Block.Builder> builders = new ArrayList<>();\n+            for (Body expression : expressions()) {\n+                builders.add(b.block());\n+            }\n+            if (expressions().isEmpty()) {\n+                builders.add(b);\n+            } else {\n+                builders.add(b.block());\n+            }\n+            \/\/ if no expression, we should work with b\n@@ -2803,2 +2819,1 @@\n-            Block.Builder[] builders = new Block.Builder[1];\n-            builders[0] = b;\n+            \/\/ for the first expression body, branch to its block\n@@ -2807,1 +2822,6 @@\n-                builders[0].transformBody(expression, List.of(), opT.andThen((block, op) -> {\n+                int exprIndex = expressions().indexOf(expression);\n+                Block.Builder bb = builders.get(exprIndex);\n+                if (exprIndex == 0) {\n+                    b.op(branch(bb.successor()));\n+                }\n+                bb.transformBody(expression, List.of(), opT.andThen((block, op) -> {\n@@ -2810,1 +2830,1 @@\n-                        builders[0] = block;\n+                        block.op(branch(builders.get(exprIndex + 1).successor()));\n@@ -2820,1 +2840,1 @@\n-            Block.Builder builder = builders[0];\n+            Block.Builder builder = builders.getLast();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}