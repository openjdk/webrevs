{"files":[{"patch":"@@ -37,2 +37,2 @@\n-            \/\/ @@@ assuming tensor inputs and single tensor output\n-            return new Tensor(OnnxRuntime.getInstance().runOp(\n+            \/\/ @@@ assuming tensor inputs and outputs\n+            var outTensors = OnnxRuntime.getInstance().runOp(\n@@ -40,1 +40,6 @@\n-                    inputs.stream().map(o -> ((Tensor)o).rtTensor).toList()).getFirst());\n+                    inputs.stream().map(o -> ((Tensor)o).rtTensor).toList());\n+            if (outTensors.size() == 1) {\n+                return new Tensor<>(outTensors.getFirst());\n+            } else {\n+                return outTensors.stream().map(Tensor::new).toArray();\n+            }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxInterpreter.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -172,2 +172,3 @@\n-        \/\/ @@@ hardcoded float tensor element type\n-        try (var session = createSession(OnnxProtoBuilder.opModel(schema, Tensor.ElementType.FLOAT))) {\n+        \/\/ @@@ geting tensor element type from the first input\n+        var tensorElementType = inputValues.getFirst().getTensorTypeAndShape().getTensorElementType();\n+        try (var session = createSession(OnnxProtoBuilder.opModel(schema, tensorElementType))) {\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}