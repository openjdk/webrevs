{"files":[{"patch":"@@ -267,1 +267,0 @@\n-        var fallback = inputElementTypes.getFirst();\n@@ -279,1 +278,1 @@\n-                                        .tensor_type(new Tensor().elem_type(resolveElementType(i.type(), inputElementTypes.get(i.ordinal())))))))\n+                                        .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).id)))))\n@@ -281,3 +280,1 @@\n-                                .name(o.name())\n-                                .type(new TypeProto()\n-                                        .tensor_type(new Tensor().elem_type(resolveElementType(o.type(), fallback)))))))\n+                                .name(o.name()))))\n@@ -288,52 +285,0 @@\n-\n-    private static int resolveElementType(OnnxType schemeType, ElementType fallback) {\n-        if (schemeType == OnnxType.TENSOR_FLOAT32) {\n-            return 1;\n-        } else if(schemeType == OnnxType.TENSOR_UINT8) {\n-            return 2;\n-        } else if(schemeType == OnnxType.TENSOR_INT8) {\n-            return 3;\n-        } else if(schemeType == OnnxType.TENSOR_UINT16) {\n-            return 4;\n-        } else if(schemeType == OnnxType.TENSOR_INT16) {\n-            return 5;\n-        } else if(schemeType == OnnxType.TENSOR_INT32) {\n-            return 6;\n-        } else if(schemeType == OnnxType.TENSOR_INT64) {\n-            return 7;\n-        } else if(schemeType == OnnxType.TENSOR_STRING) {\n-            return 8;\n-        } else if(schemeType == OnnxType.TENSOR_BOOL) {\n-            return 9;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT16) {\n-            return 10;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT64) {\n-            return 11;\n-        } else if(schemeType == OnnxType.TENSOR_UINT32) {\n-            return 12;\n-        } else if(schemeType == OnnxType.TENSOR_UINT64) {\n-            return 13;\n-        } else if(schemeType == OnnxType.TENSOR_COMPLEX64) {\n-            return 14;\n-        } else if(schemeType == OnnxType.TENSOR_COMPLEX128) {\n-            return 15;\n-        } else if(schemeType == OnnxType.TENSOR_BFLOAT16) {\n-            return 16;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT8E4M3FN) {\n-            return 17;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT8E4M3FNUZ) {\n-            return 18;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT8E5M2) {\n-            return 19;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT8E5M2FNUZ) {\n-            return 20;\n-        } else if(schemeType == OnnxType.TENSOR_UINT4) {\n-            return 21;\n-        } else if(schemeType == OnnxType.TENSOR_INT4) {\n-            return 22;\n-        } else if(schemeType == OnnxType.TENSOR_FLOAT4E2M1) {\n-            return 23;\n-        } else {\n-            return fallback.id;\n-        }\n-    }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":2,"deletions":57,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -170,0 +170,4 @@\n+    private static List<Tensor.ElementType> toElementTypes(List<OrtTensor> values) {\n+        return values.stream().map(OrtTensor::getTensorTypeAndShape).map(OrtTensorTypeAndShapeInfo::getTensorElementType).toList();\n+    }\n+\n@@ -171,1 +175,1 @@\n-        var protoModel = OnnxProtoBuilder.buildOpModel(schema, inputValues.stream().map(OrtTensor::getTensorTypeAndShape).map(OrtTensorTypeAndShapeInfo::getTensorElementType).toList());\n+        var protoModel = OnnxProtoBuilder.buildOpModel(schema, toElementTypes(inputValues));\n@@ -173,1 +177,1 @@\n-            return session.run(schema.inputs(), schema.outputs(), inputValues);\n+            return session.run(inputValues);\n@@ -276,1 +280,1 @@\n-        public List<OrtTensor> run(List<OnnxOp.OnnxParameter> inputParams, List<OnnxOp.OnnxParameter> outputParams, List<OrtTensor> inputValues) {\n+        public List<OrtTensor> run(List<OrtTensor> inputValues) {\n@@ -278,2 +282,2 @@\n-            int inputLen = inputValues.size();\n-            int outputLen = outputParams.size();\n+            int inputLen = getNumberOfInputs();\n+            int outputLen = getNumberOfOutputs();\n@@ -284,1 +288,1 @@\n-                inputNames.setAtIndex(ADDRESS, index, arena.allocateFrom(inputParams.get(i).name()));\n+                inputNames.setAtIndex(ADDRESS, index, arena.allocateFrom(getInputName(i)));\n@@ -290,1 +294,1 @@\n-                outputNames.setAtIndex(ADDRESS, i, arena.allocateFrom(outputParams.get(i).name()));\n+                outputNames.setAtIndex(ADDRESS, i, arena.allocateFrom(getOutputName(i)));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25411,1 +25411,1 @@\n-            shape(OnnxType.tensor(OnnxType.int64()), Quantifier.REQUIRED),\n+            shape(TypeConstraint.T1.typeVariable(), Quantifier.REQUIRED),\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OnnxOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-            var absResult = absOp.run(OnnxOps.Abs.SCHEMA.inputs(), OnnxOps.Abs.SCHEMA.outputs(), List.of(inputTensor));\n+            var absResult = absOp.run(List.of(inputTensor));\n@@ -39,1 +39,1 @@\n-            var addResult = addOp.run(OnnxOps.Add.SCHEMA.inputs(), OnnxOps.Add.SCHEMA.outputs(), List.of(inputTensor, absOutputTensor));\n+            var addResult = addOp.run(List.of(inputTensor, absOutputTensor));\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}