{"files":[{"patch":"@@ -12,0 +12,1 @@\n+import oracle.code.onnx.ir.OnnxType;\n@@ -266,2 +267,1 @@\n-        \/\/ @@@ output element types inferred from the first input\n-        int outputElementType = inputElementTypes.getFirst().id;\n+        var fallback = inputElementTypes.getFirst();\n@@ -279,1 +279,1 @@\n-                                        .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).id)))))\n+                                        .tensor_type(new Tensor().elem_type(resolveElementType(i.type(), inputElementTypes.get(i.ordinal())))))))\n@@ -283,1 +283,1 @@\n-                                        .tensor_type(new Tensor().elem_type(outputElementType))))))\n+                                        .tensor_type(new Tensor().elem_type(resolveElementType(o.type(), fallback)))))))\n@@ -288,0 +288,52 @@\n+\n+    private static int resolveElementType(OnnxType schemeType, ElementType fallback) {\n+        if (schemeType == OnnxType.TENSOR_FLOAT32) {\n+            return 1;\n+        } else if(schemeType == OnnxType.TENSOR_UINT8) {\n+            return 2;\n+        } else if(schemeType == OnnxType.TENSOR_INT8) {\n+            return 3;\n+        } else if(schemeType == OnnxType.TENSOR_UINT16) {\n+            return 4;\n+        } else if(schemeType == OnnxType.TENSOR_INT16) {\n+            return 5;\n+        } else if(schemeType == OnnxType.TENSOR_INT32) {\n+            return 6;\n+        } else if(schemeType == OnnxType.TENSOR_INT64) {\n+            return 7;\n+        } else if(schemeType == OnnxType.TENSOR_STRING) {\n+            return 8;\n+        } else if(schemeType == OnnxType.TENSOR_BOOL) {\n+            return 9;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT16) {\n+            return 10;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT64) {\n+            return 11;\n+        } else if(schemeType == OnnxType.TENSOR_UINT32) {\n+            return 12;\n+        } else if(schemeType == OnnxType.TENSOR_UINT64) {\n+            return 13;\n+        } else if(schemeType == OnnxType.TENSOR_COMPLEX64) {\n+            return 14;\n+        } else if(schemeType == OnnxType.TENSOR_COMPLEX128) {\n+            return 15;\n+        } else if(schemeType == OnnxType.TENSOR_BFLOAT16) {\n+            return 16;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT8E4M3FN) {\n+            return 17;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT8E4M3FNUZ) {\n+            return 18;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT8E5M2) {\n+            return 19;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT8E5M2FNUZ) {\n+            return 20;\n+        } else if(schemeType == OnnxType.TENSOR_UINT4) {\n+            return 21;\n+        } else if(schemeType == OnnxType.TENSOR_INT4) {\n+            return 22;\n+        } else if(schemeType == OnnxType.TENSOR_FLOAT4E2M1) {\n+            return 23;\n+        } else {\n+            return fallback.id;\n+        }\n+    }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":56,"deletions":4,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -25411,1 +25411,1 @@\n-            shape(TypeConstraint.T1.typeVariable(), Quantifier.REQUIRED),\n+            shape(OnnxType.tensor(OnnxType.int64()), Quantifier.REQUIRED),\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OnnxOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+import java.nio.LongBuffer;\n@@ -5,1 +6,0 @@\n-import java.util.Map;\n@@ -8,0 +8,1 @@\n+\n@@ -74,0 +75,7 @@\n+\n+    static void assertEqualData(LongBuffer expectedData, LongBuffer actualData) {\n+        assertEquals(expectedData.capacity(), actualData.capacity());\n+        for (int i = 0; i < expectedData.capacity(); i++) {\n+            assertEquals(expectedData.get(i), actualData.get(i));\n+        }\n+    }\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+import java.nio.LongBuffer;\n@@ -19,1 +20,1 @@\n-        assertEquals(add(new Tensor(1f, 2, 3), new Tensor(6f, 5, 4)), 7, 7, 7);\n+        assertEquals(add(new Tensor(1f, 2, 3), new Tensor(6f, 5, 4)), 7f, 7, 7);\n@@ -23,2 +24,7 @@\n-    public Tensor<Float> reshape(Tensor<Float> a, Tensor<Long> b) {\n-        return OnnxOperators.Reshape(a, b, Optional.empty());\n+    public Tensor<Float> reshape(Tensor<Float> data, Tensor<Long> shape) {\n+        return OnnxOperators.Reshape(data, shape, Optional.empty());\n+    }\n+\n+    @CodeReflection\n+    public Tensor<Long> shape(Tensor<Float> data) {\n+        return OnnxOperators.Shape(data, Optional.empty(), Optional.empty());\n@@ -28,2 +34,2 @@\n-    public void testReshape() {\n-        var reshaped = reshape(new Tensor(1f, 2, 3, 4, 5, 6, 7, 8), new Tensor(2, 2, 2));\n+    public void testReshapeAndShape() {\n+        var reshaped = reshape(new Tensor(1f, 2, 3, 4, 5, 6, 7, 8), new Tensor(2l, 2, 2));\n@@ -31,1 +37,2 @@\n-\n+        var shape = shape(reshaped);\n+        assertEquals(shape, 2l, 2, 2);\n@@ -37,0 +44,4 @@\n+\n+    static void assertEquals(Tensor actual, long... expected) {\n+        RuntimeTest.assertEqualData(LongBuffer.wrap(expected), actual.rtTensor.asByteBuffer().asLongBuffer());\n+    }\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}