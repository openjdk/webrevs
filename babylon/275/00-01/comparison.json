{"files":[{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.javac.comp;\n+\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.TreeMaker;\n+import com.sun.tools.javac.util.Context;\n+\n+\/**\n+ * This is a proxy interface for the code reflection tree translator.\n+ * This compiler step is optionally enabled depending on whether\n+ * the incubating module jdk.incubator.code is part of the module graph.\n+ *\/\n+public interface CodeReflectionTransformer {\n+    \/**\n+     * Analyze the code in the provided class, generating code models for the following program elements:\n+     * <li>methods annotated with {@code CodeReflection};\n+     * <li>lambdas or method references whose target type is {@code Quoted}; and\n+     * <li>lambdas or method references whose target is an intersection type that contains {@code Quotable}.\n+     * @param context the compiler context\n+     * @param tree the tree to analyze\n+     * @param make the tree maker\n+     * @return the translated class tree\n+     *\/\n+    JCTree translateTopLevelClass(Context context, JCTree tree, TreeMaker make);\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/CodeReflectionTransformer.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.comp;\n-\n-import com.sun.tools.javac.tree.JCTree;\n-import com.sun.tools.javac.tree.TreeMaker;\n-import com.sun.tools.javac.util.Context;\n-\n-\/**\n- * This is a proxy interface for the code reflection tree translator.\n- * This compiler step is optionally enabled depending on whether\n- * the incubating module jdk.incubator.code is part of the module graph.\n- *\/\n-public interface ReflectMethodsProxy {\n-    \/**\n-     * Analyze the {@code CodeReflection} annotations in the method of the provided class.\n-     * @param context the compiler context\n-     * @param tree the tree to analyze\n-     * @param make the tree maker\n-     * @return the translated class tree\n-     *\/\n-    JCTree translateTopLevelClass(Context context, JCTree tree, TreeMaker make);\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethodsProxy.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -91,2 +91,0 @@\n-import com.sun.tools.javac.code.Lint;\n-import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -1624,1 +1622,1 @@\n-                Optional<ReflectMethodsProxy> reflectMethods = reflectMethods();\n+                Optional<CodeReflectionTransformer> reflectMethods = reflectMethods();\n@@ -1686,1 +1684,1 @@\n-    Optional<ReflectMethodsProxy> reflectMethods() {\n+    Optional<CodeReflectionTransformer> reflectMethods() {\n@@ -1688,1 +1686,1 @@\n-            return ServiceLoader.load(CodeReflectionSupport.CODE_LAYER, ReflectMethodsProxy.class)\n+            return ServiceLoader.load(CodeReflectionSupport.CODE_LAYER, CodeReflectionTransformer.class)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import javax.tools.JavaCompiler;\n-import javax.tools.StandardLocation;\n+import com.sun.tools.javac.comp.CodeReflectionTransformer;\n@@ -287,1 +286,1 @@\n-    uses com.sun.tools.javac.comp.ReflectMethodsProxy;\n+    uses CodeReflectionTransformer;\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import com.sun.tools.javac.comp.ReflectMethodsProxy;\n+import com.sun.tools.javac.comp.CodeReflectionTransformer;\n@@ -2976,1 +2976,1 @@\n-    public static class Provider implements ReflectMethodsProxy {\n+    public static class Provider implements CodeReflectionTransformer {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    provides com.sun.tools.javac.comp.ReflectMethodsProxy with\n+    provides com.sun.tools.javac.comp.CodeReflectionTransformer with\n","filename":"src\/jdk.incubator.code\/share\/classes\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}