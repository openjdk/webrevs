{"files":[{"patch":"@@ -4,0 +4,3 @@\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.StringWriter;\n@@ -9,0 +12,1 @@\n+import java.lang.reflect.code.writer.OpWriter;\n@@ -43,1 +47,1 @@\n-            case 0xF | 1 -> \"9\";\n+            case 8 | 1 -> \"9\";\n@@ -214,1 +218,1 @@\n-        f.writeTo(System.out);\n+        writeModel(f, System.out, OpWriter.LocationOption.DROP_LOCATION);\n@@ -217,2 +221,1 @@\n-\n-        lf.writeTo(System.out);\n+        writeModel(lf, System.out, OpWriter.LocationOption.DROP_LOCATION);\n@@ -223,0 +226,10 @@\n+    private static void writeModel(CoreOp.FuncOp f, OutputStream os, OpWriter.Option... options) {\n+        StringWriter sw = new StringWriter();\n+        new OpWriter(sw, options).writeOp(f);\n+        try {\n+            os.write(sw.toString().getBytes());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,633 @@\n+import java.lang.runtime.CodeReflection;\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ * @build SwitchExpressionTest2\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester SwitchExpressionTest2\n+ *\/\n+public class SwitchExpressionTest2 {\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantRuleExpression\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"r\";\n+                %2 : java.lang.String = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : java.lang.String)boolean -> {\n+                        %5 : java.lang.String = constant @\"FOO\";\n+                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        yield %7;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()java.lang.String -> {\n+                        %11 : java.lang.String = constant @\"BAZ\";\n+                        yield %11;\n+                    }\n+                    (%12 : java.lang.String)boolean -> {\n+                        %13 : java.lang.String = constant @\"BAZ\";\n+                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %14;\n+                    }\n+                    ()java.lang.String -> {\n+                        %15 : java.lang.String = constant @\"FOO\";\n+                        yield %15;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %16 : java.lang.String = constant @\"\";\n+                        yield %16;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    public static String caseConstantRuleExpression(String r) {\n+        return switch (r) {\n+            case \"FOO\" -> \"BAR\";\n+            case \"BAR\" -> \"BAZ\";\n+            case \"BAZ\" -> \"FOO\";\n+            default -> \"\";\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantRuleBlock\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"r\";\n+                %2 : java.lang.String = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : java.lang.String)boolean -> {\n+                        %5 : java.lang.String = constant @\"FOO\";\n+                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        java.yield %7;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()java.lang.String -> {\n+                        %11 : java.lang.String = constant @\"BAZ\";\n+                        java.yield %11;\n+                    }\n+                    (%12 : java.lang.String)boolean -> {\n+                        %13 : java.lang.String = constant @\"BAZ\";\n+                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %14;\n+                    }\n+                    ()java.lang.String -> {\n+                        %15 : java.lang.String = constant @\"FOO\";\n+                        java.yield %15;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %16 : java.lang.String = constant @\"\";\n+                        java.yield %16;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    public static String caseConstantRuleBlock(String r) {\n+        return switch (r) {\n+            case \"FOO\" -> {\n+                yield \"BAR\";\n+            }\n+            case \"BAR\" -> {\n+                yield \"BAZ\";\n+            }\n+            case \"BAZ\" -> {\n+                yield \"FOO\";\n+            }\n+            default -> {\n+                yield \"\";\n+            }\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantStatement\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : java.lang.String)boolean -> {\n+                        %5 : java.lang.String = constant @\"FOO\";\n+                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        %7 : java.lang.String = constant @\"BAR\";\n+                        java.yield %7;\n+                    }\n+                    (%8 : java.lang.String)boolean -> {\n+                        %9 : java.lang.String = constant @\"BAR\";\n+                        %10 : boolean = invoke %8 %9 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %10;\n+                    }\n+                    ()java.lang.String -> {\n+                        %11 : java.lang.String = constant @\"BAZ\";\n+                        java.yield %11;\n+                    }\n+                    (%12 : java.lang.String)boolean -> {\n+                        %13 : java.lang.String = constant @\"BAZ\";\n+                        %14 : boolean = invoke %12 %13 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %14;\n+                    }\n+                    ()java.lang.String -> {\n+                        %15 : java.lang.String = constant @\"FOO\";\n+                        java.yield %15;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %16 : java.lang.String = constant @\"\";\n+                        java.yield %16;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantStatement(String s) {\n+        return switch (s) {\n+            case \"FOO\": yield \"BAR\";\n+            case \"BAR\": yield \"BAZ\";\n+            case \"BAZ\": yield \"FOO\";\n+            default: yield \"\";\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantMultiLabels\" (%0 : char)java.lang.String -> {\n+                %1 : Var<char> = var %0 @\"c\";\n+                %2 : char = var.load %1;\n+                %3 : char = invoke %2 @\"java.lang.Character::toLowerCase(char)char\";\n+                %4 : java.lang.String = java.switch.expression %3\n+                    (%5 : char)boolean -> {\n+                        %6 : boolean = java.cor\n+                            ()boolean -> {\n+                                %7 : char = constant @\"a\";\n+                                %8 : boolean = eq %5 %7;\n+                                yield %8;\n+                            }\n+                            ()boolean -> {\n+                                %9 : char = constant @\"e\";\n+                                %10 : boolean = eq %5 %9;\n+                                yield %10;\n+                            }\n+                            ()boolean -> {\n+                                %11 : char = constant @\"i\";\n+                                %12 : boolean = eq %5 %11;\n+                                yield %12;\n+                            }\n+                            ()boolean -> {\n+                                %13 : char = constant @\"o\";\n+                                %14 : boolean = eq %5 %13;\n+                                yield %14;\n+                            }\n+                            ()boolean -> {\n+                                %15 : char = constant @\"u\";\n+                                %16 : boolean = eq %5 %15;\n+                                yield %16;\n+                            };\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        %17 : java.lang.String = constant @\"vowel\";\n+                        java.yield %17;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %18 : java.lang.String = constant @\"consonant\";\n+                        java.yield %18;\n+                    };\n+                return %4;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantMultiLabels(char c) {\n+        return switch (Character.toLowerCase(c)) {\n+            case 'a', 'e', 'i', 'o', 'u': yield \"vowel\";\n+            default: yield \"consonant\";\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantThrow\" (%0 : java.lang.Integer)java.lang.String -> {\n+                %1 : Var<java.lang.Integer> = var %0 @\"i\";\n+                %2 : java.lang.Integer = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : java.lang.Integer)boolean -> {\n+                        %5 : int = constant @\"8\";\n+                        %6 : java.lang.Integer = invoke %5 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.lang.String -> {\n+                        %8 : java.lang.IllegalArgumentException = new @\"func<java.lang.IllegalArgumentException>\";\n+                        throw %8;\n+                    }\n+                    (%9 : java.lang.Integer)boolean -> {\n+                        %10 : int = constant @\"9\";\n+                        %11 : java.lang.Integer = invoke %10 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                        %12 : boolean = invoke %9 %11 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %12;\n+                    }\n+                    ()java.lang.String -> {\n+                        %13 : java.lang.String = constant @\"NINE\";\n+                        yield %13;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %14 : java.lang.String = constant @\"An integer\";\n+                        yield %14;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantThrow(Integer i) {\n+        return switch (i) {\n+            case 8 -> throw new IllegalArgumentException();\n+            case 9 -> \"NINE\";\n+            default -> \"An integer\";\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantNullLabel\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : java.lang.String)boolean -> {\n+                        %5 : java.lang.Object = constant @null;\n+                        %6 : boolean = invoke %4 %5 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        %7 : java.lang.String = constant @\"null\";\n+                        yield %7;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %8 : java.lang.String = constant @\"non null\";\n+                        yield %8;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantNullLabel(String s) {\n+        return switch (s) {\n+            case null -> \"null\";\n+            default -> \"non null\";\n+        };\n+    }\n+\n+    \/\/ @CodeReflection\n+    \/\/ compiler code doesn't support case null, default\n+    \/\/ @@@ support such as case and test the switch expression lowering for this case\n+    private static String caseConstantNullAndDefault(String s) {\n+        return switch (s) {\n+            case \"abc\" -> \"alphabet\";\n+            case null, default -> \"null or default\";\n+        };\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"caseConstantFallThrough\" (%0 : char)java.lang.String -> {\n+                %1 : Var<char> = var %0 @\"c\";\n+                %2 : char = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    (%4 : char)boolean -> {\n+                        %5 : char = constant @\"A\";\n+                        %6 : boolean = eq %4 %5;\n+                        yield %6;\n+                    }\n+                    ()java.lang.String -> {\n+                        java.switch.fallthrough;\n+                    }\n+                    (%7 : char)boolean -> {\n+                        %8 : char = constant @\"B\";\n+                        %9 : boolean = eq %7 %8;\n+                        yield %9;\n+                    }\n+                    ()java.lang.String -> {\n+                        %10 : java.lang.String = constant @\"A or B\";\n+                        java.yield %10;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %11 : java.lang.String = constant @\"Neither A nor B\";\n+                        java.yield %11;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantFallThrough(char c) {\n+        return switch (c) {\n+            case 'A':\n+            case 'B':\n+                yield \"A or B\";\n+            default:\n+                yield \"Neither A nor B\";\n+        };\n+    }\n+\n+    enum Day {\n+        MON, TUE, WED, THU, FRI, SAT, SUN\n+    }\n+    @IR(\"\"\"\n+            func @\"caseConstantEnum\" (%0 : SwitchExpressionTest2$Day)int -> {\n+                %1 : Var<SwitchExpressionTest2$Day> = var %0 @\"d\";\n+                %2 : SwitchExpressionTest2$Day = var.load %1;\n+                %3 : int = java.switch.expression %2\n+                    (%4 : SwitchExpressionTest2$Day)boolean -> {\n+                        %5 : boolean = java.cor\n+                            ()boolean -> {\n+                                %6 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::MON()SwitchExpressionTest2$Day\";\n+                                %7 : boolean = invoke %4 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %7;\n+                            }\n+                            ()boolean -> {\n+                                %8 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::FRI()SwitchExpressionTest2$Day\";\n+                                %9 : boolean = invoke %4 %8 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %9;\n+                            }\n+                            ()boolean -> {\n+                                %10 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::SUN()SwitchExpressionTest2$Day\";\n+                                %11 : boolean = invoke %4 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %11;\n+                            };\n+                        yield %5;\n+                    }\n+                    ()int -> {\n+                        %12 : int = constant @\"6\";\n+                        yield %12;\n+                    }\n+                    (%13 : SwitchExpressionTest2$Day)boolean -> {\n+                        %14 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::TUE()SwitchExpressionTest2$Day\";\n+                        %15 : boolean = invoke %13 %14 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %15;\n+                    }\n+                    ()int -> {\n+                        %16 : int = constant @\"7\";\n+                        yield %16;\n+                    }\n+                    (%17 : SwitchExpressionTest2$Day)boolean -> {\n+                        %18 : boolean = java.cor\n+                            ()boolean -> {\n+                                %19 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::THU()SwitchExpressionTest2$Day\";\n+                                %20 : boolean = invoke %17 %19 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %20;\n+                            }\n+                            ()boolean -> {\n+                                %21 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::SAT()SwitchExpressionTest2$Day\";\n+                                %22 : boolean = invoke %17 %21 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                                yield %22;\n+                            };\n+                        yield %18;\n+                    }\n+                    ()int -> {\n+                        %23 : int = constant @\"8\";\n+                        yield %23;\n+                    }\n+                    (%24 : SwitchExpressionTest2$Day)boolean -> {\n+                        %25 : SwitchExpressionTest2$Day = field.load @\"SwitchExpressionTest2$Day::WED()SwitchExpressionTest2$Day\";\n+                        %26 : boolean = invoke %24 %25 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %26;\n+                    }\n+                    ()int -> {\n+                        %27 : int = constant @\"9\";\n+                        yield %27;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static int caseConstantEnum(Day d) {\n+        return switch (d) {\n+            case MON, FRI, SUN -> 6;\n+            case TUE -> 7;\n+            case THU, SAT -> 8;\n+            case WED -> 9;\n+        };\n+    }\n+\n+    static class Constants {\n+        static final int c1 = 12;\n+    }\n+    @IR(\"\"\"\n+            func @\"caseConstantOtherKindsOfExpr\" (%0 : int)java.lang.String -> {\n+                %1 : Var<int> = var %0 @\"i\";\n+                %2 : int = constant @\"11\";\n+                %3 : Var<int> = var %2 @\"eleven\";\n+                %4 : int = var.load %1;\n+                %5 : java.lang.String = java.switch.expression %4\n+                    (%6 : int)boolean -> {\n+                        %7 : int = constant @\"1\";\n+                        %8 : int = constant @\"15\";\n+                        %9 : int = and %7 %8;\n+                        %10 : boolean = eq %6 %9;\n+                        yield %10;\n+                    }\n+                    ()java.lang.String -> {\n+                        %11 : java.lang.String = constant @\"1\";\n+                        yield %11;\n+                    }\n+                    (%12 : int)boolean -> {\n+                        %13 : int = constant @\"4\";\n+                        %14 : int = constant @\"1\";\n+                        %15 : int = ashr %13 %14;\n+                        %16 : boolean = eq %12 %15;\n+                        yield %16;\n+                    }\n+                    ()java.lang.String -> {\n+                        %17 : java.lang.String = constant @\"2\";\n+                        yield %17;\n+                    }\n+                    (%18 : int)boolean -> {\n+                        %19 : long = constant @\"3\";\n+                        %20 : int = conv %19;\n+                        %21 : boolean = eq %18 %20;\n+                        yield %21;\n+                    }\n+                    ()java.lang.String -> {\n+                        %22 : java.lang.String = constant @\"3\";\n+                        yield %22;\n+                    }\n+                    (%23 : int)boolean -> {\n+                        %24 : int = constant @\"2\";\n+                        %25 : int = constant @\"1\";\n+                        %26 : int = lshl %24 %25;\n+                        %27 : boolean = eq %23 %26;\n+                        yield %27;\n+                    }\n+                    ()java.lang.String -> {\n+                        %28 : java.lang.String = constant @\"4\";\n+                        yield %28;\n+                    }\n+                    (%29 : int)boolean -> {\n+                        %30 : int = constant @\"10\";\n+                        %31 : int = constant @\"2\";\n+                        %32 : int = div %30 %31;\n+                        %33 : boolean = eq %29 %32;\n+                        yield %33;\n+                    }\n+                    ()java.lang.String -> {\n+                        %34 : java.lang.String = constant @\"5\";\n+                        yield %34;\n+                    }\n+                    (%35 : int)boolean -> {\n+                        %36 : int = constant @\"12\";\n+                        %37 : int = constant @\"6\";\n+                        %38 : int = sub %36 %37;\n+                        %39 : boolean = eq %35 %38;\n+                        yield %39;\n+                    }\n+                    ()java.lang.String -> {\n+                        %40 : java.lang.String = constant @\"6\";\n+                        yield %40;\n+                    }\n+                    (%41 : int)boolean -> {\n+                        %42 : int = constant @\"3\";\n+                        %43 : int = constant @\"4\";\n+                        %44 : int = add %42 %43;\n+                        %45 : boolean = eq %41 %44;\n+                        yield %45;\n+                    }\n+                    ()java.lang.String -> {\n+                        %46 : java.lang.String = constant @\"7\";\n+                        yield %46;\n+                    }\n+                    (%47 : int)boolean -> {\n+                        %48 : int = constant @\"2\";\n+                        %49 : int = constant @\"2\";\n+                        %50 : int = mul %48 %49;\n+                        %51 : int = constant @\"2\";\n+                        %52 : int = mul %50 %51;\n+                        %53 : boolean = eq %47 %52;\n+                        yield %53;\n+                    }\n+                    ()java.lang.String -> {\n+                        %54 : java.lang.String = constant @\"8\";\n+                        yield %54;\n+                    }\n+                    (%55 : int)boolean -> {\n+                        %56 : int = constant @\"8\";\n+                        %57 : int = constant @\"1\";\n+                        %58 : int = or %56 %57;\n+                        %59 : boolean = eq %55 %58;\n+                        yield %59;\n+                    }\n+                    ()java.lang.String -> {\n+                        %60 : java.lang.String = constant @\"9\";\n+                        yield %60;\n+                    }\n+                    (%61 : int)boolean -> {\n+                        %62 : int = constant @\"10\";\n+                        %63 : boolean = eq %61 %62;\n+                        yield %63;\n+                    }\n+                    ()java.lang.String -> {\n+                        %64 : java.lang.String = constant @\"10\";\n+                        yield %64;\n+                    }\n+                    (%65 : int)boolean -> {\n+                        %66 : int = var.load %3;\n+                        %67 : boolean = eq %65 %66;\n+                        yield %67;\n+                    }\n+                    ()java.lang.String -> {\n+                        %68 : java.lang.String = constant @\"11\";\n+                        yield %68;\n+                    }\n+                    (%69 : int)boolean -> {\n+                        %70 : int = field.load @\"SwitchExpressionTest2$Constants::c1()int\";\n+                        %71 : boolean = eq %69 %70;\n+                        yield %71;\n+                    }\n+                    ()java.lang.String -> {\n+                        %72 : int = field.load @\"SwitchExpressionTest2$Constants::c1()int\";\n+                        %73 : java.lang.String = invoke %72 @\"java.lang.String::valueOf(int)java.lang.String\";\n+                        yield %73;\n+                    }\n+                    (%74 : int)boolean -> {\n+                        %75 : int = java.cexpression\n+                            ()boolean -> {\n+                                %76 : int = constant @\"1\";\n+                                %77 : int = constant @\"0\";\n+                                %78 : boolean = gt %76 %77;\n+                                yield %78;\n+                            }\n+                            ()int -> {\n+                                %79 : int = constant @\"13\";\n+                                yield %79;\n+                            }\n+                            ()int -> {\n+                                %80 : int = constant @\"133\";\n+                                yield %80;\n+                            };\n+                        %81 : boolean = eq %74 %75;\n+                        yield %81;\n+                    }\n+                    ()java.lang.String -> {\n+                        %82 : java.lang.String = constant @\"13\";\n+                        yield %82;\n+                    }\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %83 : java.lang.String = constant @\"an int\";\n+                        yield %83;\n+                    };\n+                return %5;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    private static String caseConstantOtherKindsOfExpr(int i) {\n+        final int eleven = 11;\n+        return switch (i) {\n+            case 1 & 0xF -> \"1\";\n+            case 4>>1 -> \"2\";\n+            case (int) 3L -> \"3\";\n+            case 2<<1 -> \"4\";\n+            case 10 \/ 2 -> \"5\";\n+            case 12 - 6 -> \"6\";\n+            case 3 + 4 -> \"7\";\n+            case 2 * 2 * 2 -> \"8\";\n+            case 8 | 1 -> \"9\";\n+            case (10) -> \"10\";\n+            case eleven -> \"11\";\n+            case Constants.c1 -> String.valueOf(Constants.c1);\n+            case 1 > 0 ? 13 : 133 -> \"13\";\n+            default -> \"an int\";\n+        };\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":633,"deletions":0,"binary":false,"changes":633,"status":"added"}]}