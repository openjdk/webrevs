{"files":[{"patch":"@@ -2251,1 +2251,1 @@\n-            return ifAncestorOp(target, this);\n+            return target == this || ifAncestorOp(target, this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.analysis.SSA;\n@@ -108,0 +109,76 @@\n+            test.accept(i -> {});\n+            for (int ea = 0; ea < 6; ea++) {\n+                int fea = ea;\n+                test.accept(i -> {\n+                    if (i == fea) throw new IllegalStateException();\n+                });\n+                test.accept(i -> {\n+                    if (i == fea) throw new RuntimeException();\n+                });\n+            }\n+        }\n+    }\n+\n+\n+    @CodeReflection\n+    public static void tryCatchFinallyBreak(IntConsumer c, int i) {\n+        a: try {\n+            try {\n+                if (i == 0) {\n+                    break a;\n+                }\n+                c.accept(0);\n+            } catch (IllegalStateException e) {\n+                if (i == 1) {\n+                    break a;\n+                }\n+                c.accept(1);\n+            } finally {\n+                if (i == 2) {\n+                    break a;\n+                }\n+                c.accept(2);\n+            }\n+            if (i == 3) {\n+                break a;\n+            }\n+            c.accept(3);\n+        } catch (IllegalStateException e) {\n+            if (i == 4) {\n+                break a;\n+            }\n+            c.accept(4);\n+        } finally {\n+            if (i == 5) {\n+                break a;\n+            }\n+            c.accept(5);\n+        }\n+        c.accept(6);\n+    }\n+\n+    @Test\n+    public void testCatchFinallyBreak() {\n+        CoreOps.FuncOp f = getFuncOp(\"tryCatchFinallyBreak\");\n+\n+        f.writeTo(System.out);\n+\n+        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+            if (op instanceof Op.Lowerable lop) {\n+                return lop.lower(block);\n+            } else {\n+                block.op(op);\n+                return block;\n+            }\n+        });\n+\n+        lf.writeTo(System.out);\n+\n+        for (int ra = -1; ra < 6; ra++) {\n+            int fra = ra;\n+\n+            Consumer<IntConsumer> test = testConsumer(\n+                    c -> Interpreter.invoke(MethodHandles.lookup(), lf, c, fra),\n+                    c -> tryCatchFinallyBreak(c, fra)\n+            );\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinallyNested.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"}]}