{"files":[{"patch":"@@ -58,0 +58,1 @@\n+            System.out.println(funcOpWrapper.toText());\n@@ -64,0 +65,1 @@\n+               \/\/ builder.op(invokeOpWrapper.op());\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Ptr.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import hat.backend.JavaMultiThreadedBackend;\n@@ -53,1 +54,1 @@\n-        var accelerator = new Accelerator(lookup, Backend.FIRST);\n+        var accelerator = new Accelerator(lookup, new JavaMultiThreadedBackend());\n","filename":"hat\/examples\/squares\/src\/main\/java\/squares\/Squares.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+package hat;\n+\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.runtime.CodeReflection;\n+import java.util.List;\n+\n+\n+\/*\n+ * @test\n+ * @run testng hat.CustomOpTest\n+ *\/\n+\n+public class CustomOpTest {\n+\n+\n+    static int myFunc(int i) {\n+        return 0;\n+    }\n+\n+    @CodeReflection\n+    public static void addMul(int add, int mul) {\n+        int len = myFunc(add);\n+    }\n+\n+    public static class DNAOp extends Op { \/\/ externalized\n+        private final TypeElement type;\n+\n+        DNAOp(String opName, TypeElement type, List<Value> operands) {\n+            super(opName, operands);\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+            throw new IllegalStateException(\"in transform\");\n+\n+        }\n+\n+\n+        @Override\n+        public TypeElement resultType() {\n+            System.out.println(\"in result type\");\n+            return type;\n+        }\n+    }\n+\n+    @Test\n+    public void testDNAOp() throws NoSuchMethodException {\n+        Method method = CustomOpTest.class.getDeclaredMethod(\"addMul\", int.class, int.class);\n+        var funcOp = method.getCodeModel().get();\n+        var transformed = funcOp.transform((builder, op) -> {\n+            CopyContext cc = builder.context();\n+            if (op instanceof CoreOp.InvokeOp invokeOp) {\n+                List<Value> inputOperands = invokeOp.operands();\n+                List<Value> outputOperands = cc.getValues(inputOperands);\n+                Op.Result inputResult = invokeOp.result();\n+                Op.Result outputResult = builder.op(new DNAOp(\"dna\", JavaType.INT, outputOperands));\n+                cc.mapValue(inputResult, outputResult);\n+            } else {\n+                builder.op(op);\n+            }\n+            return builder;\n+        });\n+\n+        System.out.println(transformed.toText());\n+    }\n+\n+\n+}\n\\ No newline at end of file\n","filename":"hat\/hat\/src\/main\/test\/hat\/CustomOpTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+package hat;\n+\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import hat.backend.Backend;\n+import hat.backend.JavaMultiThreadedBackend;\n+import hat.buffer.S32Array;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.runtime.CodeReflection;\n+import java.util.List;\n+\n+\n+\/*\n+ * @test\n+ * @run testng hat.CustomOpTest\n+ *\/\n+\n+public class SquaresTest {\n+    @CodeReflection\n+    public static void squareKernel(KernelContext kc, S32Array s32Array) {\n+        if (kc.x<kc.maxX){\n+            int value = s32Array.array(kc.x);     \/\/ arr[cc.x]\n+            s32Array.array(kc.x, value * value);  \/\/ arr[cc.x]=value*value\n+        }\n+    }\n+\n+    @CodeReflection\n+    public static void square(ComputeContext cc, S32Array s32Array) {\n+        cc.dispatchKernel(s32Array.length(),\n+                kc -> squareKernel(kc, s32Array)\n+        );\n+    }\n+\n+  @Test\n+       void    testSquares(){\n+        var lookup = java.lang.invoke.MethodHandles.lookup();\n+        var accelerator = new Accelerator(lookup, new JavaMultiThreadedBackend());\n+        var arr = S32Array.create(accelerator, 32);\n+        for (int i = 0; i < arr.length(); i++) {\n+            arr.array(i, i);\n+        }\n+        accelerator.compute(\n+                cc -> SquaresTest.square(cc, arr)  \/\/QuotableComputeContextConsumer\n+        );                                     \/\/   extends Quotable, Consumer<ComputeContext>\n+        for (int i = 0; i < arr.length(); i++) {\n+            Assert.assertEquals(i*i, arr.array(i));\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"hat\/hat\/src\/main\/test\/hat\/SquaresTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -7,0 +7,1 @@\n+      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/hat\/src\/main\/test\"  \/>\n@@ -11,0 +12,15 @@\n+    <orderEntry type=\"module-library\">\n+      <library name=\"testng\">\n+        <CLASSES>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/org\/testng\/testng\/7.1.0\/testng-7.1.0.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/com\/beust\/jcommander\/1.72\/jcommander-1.72.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/com\/google\/inject\/guice\/4.1.0\/guice-4.1.0-no_aop.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/javax\/inject\/javax.inject\/1\/javax.inject-1.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/aopalliance\/aopalliance\/1.0\/aopalliance-1.0.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/com\/google\/guava\/guava\/19.0\/guava-19.0.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MAVEN_REPOSITORY$\/org\/yaml\/snakeyaml\/1.21\/snakeyaml-1.21.jar!\/\" \/>\n+        <\/CLASSES>\n+        <JAVADOC \/>\n+        <SOURCES \/>\n+      <\/library>\n+    <\/orderEntry>\n@@ -12,1 +28,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/hat.iml","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}