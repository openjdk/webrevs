{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.BufferedImage;\n@@ -55,0 +58,2 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JFrame;\n@@ -171,1 +176,1 @@\n-    CoreOp.FuncOp cnnModel() {\n+    static CoreOp.FuncOp cnnModel() {\n@@ -429,0 +434,59 @@\n+    static int detectNumber(ByteBuffer image) throws IOException {\n+        List<Tensor> weights = loadWeights();\n+        Tensor inputImage = new Tensor(MemorySegment.ofBuffer(image), Tensor.ElementType.UINT8);\n+\n+        return nextBestMatch(new Tensor(OnnxRuntime.getInstance().runFunc(\n+                cnnModel(),\n+                Stream.concat(weights.stream(), Stream.of(inputImage))\n+                        .map(t -> Optional.of(t.tensorAddr)).toList()).getFirst())\n+                .asByteBuffer().asFloatBuffer());\n+    }\n+\n+    public static void main(String[] args) {\n+        var frame = new JFrame(\"Drawing Canvas\");\n+        var clean = new AtomicBoolean(true);\n+        frame.addMouseMotionListener(new MouseAdapter() {\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n+                    if (clean.getAndSet(false)) {\n+                        frame.getGraphics().clearRect(0, 0, frame.getWidth(), frame.getHeight());\n+                    }\n+                    frame.getGraphics().fillOval(e.getX(), e.getY(), 20, 20);\n+                }\n+            }\n+        });\n+        frame.addKeyListener(new KeyAdapter(){\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_ENTER) try {\n+                    var image = new BufferedImage(28, 28, BufferedImage.TYPE_INT_RGB);\n+                    var g = image.createGraphics();\n+                    g.drawImage(new Robot().createScreenCapture(new Rectangle(frame.getContentPane().getLocationOnScreen(), frame.getContentPane().getSize()))\n+                                           .getScaledInstance(28, 28, Image.SCALE_SMOOTH), 0, 0, null);\n+                    g.dispose();\n+\n+                    var bb = ByteBuffer.allocateDirect(28*28);\n+                    for (int y = 0; y < 28; y++) {\n+                        for (int x = 0; x < 28; x++) {\n+                            bb.put((byte)(255 - (0xff & image.getRGB(x, y))));\n+                        }\n+                    }\n+                    clean.set(true);\n+\n+                    printImage(0, bb);\n+                    System.out.println(\"detected number: \" + detectNumber(bb.rewind()));\n+                } catch (Exception ex) {\n+                    ex.printStackTrace();\n+                }\n+            }\n+        });\n+        frame.setBackground(Color.WHITE);\n+        frame.getContentPane().setPreferredSize(new Dimension(560, 560));\n+        frame.pack();\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        System.out.println(\"Hold SHIFT to draw, click ENTER to detect.\");\n+    }\n+\n@@ -478,7 +542,7 @@\n-    public static void main(String[] args) throws IOException {\n-        Path inputPath = Path.of(args[0]);\n-\n-        Path outputPath = Path.of(args[1]);\n-\n-        extractWeights(inputPath, outputPath);\n-    }\n+\/\/    public static void main(String[] args) throws IOException {\n+\/\/        Path inputPath = Path.of(args[0]);\n+\/\/\n+\/\/        Path outputPath = Path.of(args[1]);\n+\/\/\n+\/\/        extractWeights(inputPath, outputPath);\n+\/\/    }\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":72,"deletions":8,"binary":false,"changes":80,"status":"modified"}]}