{"files":[{"patch":"@@ -263,1 +263,1 @@\n-    static final int OPSET_VERSION = 14;\n+    static final int OPSET_VERSION = 21;\n@@ -347,1 +347,1 @@\n-                attr.type(2).f(f);\n+                attr.type(1).f(f);\n@@ -350,1 +350,1 @@\n-                attr.type(3).i(l);\n+                attr.type(2).i(l);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -327,1 +327,18 @@\n-        return createFlatTensor(f.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, f.length(), arena), elementType);\n+        return createTensor(f.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, f.length(), arena), elementType, new TensorShape(f.length() \/ elementType.size()));\n+    }\n+\n+    OrtTensor createScalar(long element) {\n+        return createScalar(arena.allocateFrom(JAVA_LONG, element), Tensor.ElementType.INT64);\n+    }\n+\n+    OrtTensor createScalar(float element) {\n+        return createScalar(arena.allocateFrom(JAVA_FLOAT, element), Tensor.ElementType.FLOAT);\n+    }\n+\n+    private OrtTensor createScalar(MemorySegment flatData, Tensor.ElementType elementType) {\n+        try {\n+            var allocatorInfo = retAddr(allocatorGetInfo.invokeExact(defaultAllocatorAddress, ret));\n+            return new OrtTensor(retAddr(createTensorWithDataAsOrtValue.invokeExact(allocatorInfo, flatData, flatData.byteSize(), MemorySegment.NULL, 0l, elementType.id, ret)));\n+        } catch (Throwable t) {\n+            throw wrap(t);\n+        }\n@@ -331,1 +348,1 @@\n-        return createFlatTensor(arena.allocateFrom(JAVA_LONG, elements), Tensor.ElementType.INT64);\n+        return createTensor(arena.allocateFrom(JAVA_LONG, elements), Tensor.ElementType.INT64, new TensorShape(elements.length));\n@@ -335,1 +352,1 @@\n-        return createFlatTensor(arena.allocateFrom(JAVA_FLOAT, elements), Tensor.ElementType.FLOAT);\n+        return createTensor(arena.allocateFrom(JAVA_FLOAT, elements), Tensor.ElementType.FLOAT, new TensorShape(elements.length));\n@@ -338,2 +355,1 @@\n-    private OrtTensor createFlatTensor(MemorySegment flatData, Tensor.ElementType elementType) {\n-        var flatShape = new TensorShape(flatData.byteSize() \/ elementType.size());\n+    private OrtTensor createTensor(MemorySegment flatData, Tensor.ElementType elementType, TensorShape shape) {\n@@ -342,1 +358,1 @@\n-            return new OrtTensor(retAddr(createTensorWithDataAsOrtValue.invokeExact(allocatorInfo, flatData, flatData.byteSize(), flatShape.dataAddress, 1l, elementType.id, ret)));\n+            return new OrtTensor(retAddr(createTensorWithDataAsOrtValue.invokeExact(allocatorInfo, flatData, flatData.byteSize(), shape.dataAddress, shape.getDimensionsCount(), elementType.id, ret)));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -68,0 +68,8 @@\n+    public Tensor(long data) {\n+        this(OnnxRuntime.getInstance().createScalar(data));\n+    }\n+\n+    public Tensor(float data) {\n+        this(OnnxRuntime.getInstance().createScalar(data));\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        return OnnxOperators.Constant(new float[]{-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE});\n+        return OnnxOperators.Constant(-1f);\n@@ -42,1 +42,2 @@\n-        var expected = new Tensor(-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE);\n+        var expected = new Tensor(-1f);\n+        System.out.println(expected.rtTensor.getTensorTypeAndShape().getDimensionsCount());\n@@ -47,0 +48,13 @@\n+    @CodeReflection\n+    public static Tensor<Float> fconstants() {\n+        return OnnxOperators.Constant(new float[]{-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE});\n+    }\n+\n+    @Test\n+    public void testFconstants() throws Exception {\n+        \/\/ tests the numbers are encoded correctly\n+        var expected = new Tensor(-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE);\n+        assertEquals(expected, fconstants());\n+        assertEquals(expected, runModel(\"fconstants\"));\n+    }\n+\n@@ -49,1 +63,1 @@\n-        return OnnxOperators.Constant(new long[]{-1, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE});\n+        return OnnxOperators.Constant(-1l);\n@@ -55,1 +69,2 @@\n-        var expected = new Tensor(-1l, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE);\n+        var expected = new Tensor(-1l);\n+        System.out.println(expected.rtTensor.getTensorTypeAndShape().getDimensionsCount());\n@@ -60,0 +75,13 @@\n+    @CodeReflection\n+    public static Tensor<Long> lconstants() {\n+        return OnnxOperators.Constant(new long[]{-1, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE});\n+    }\n+\n+    @Test\n+    public void testLconstants() throws Exception {\n+        \/\/ tests the numbers are encoded correctly\n+        var expected = new Tensor(-1l, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE);\n+        assertEquals(expected, lconstants());\n+        assertEquals(expected, runModel(\"lconstants\"));\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"}]}