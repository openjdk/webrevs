{"files":[{"patch":"@@ -48,1 +48,1 @@\n-                return new Tensor<>(outTensors.getFirst());\n+                return new Tensor(outTensors.getFirst());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxInterpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-import java.io.RandomAccessFile;\n@@ -12,1 +11,0 @@\n-import java.nio.channels.FileChannel;\n@@ -277,29 +275,0 @@\n-    public MemorySegment createScalar(long element) {\n-        return createScalar(arena.allocateFrom(JAVA_LONG, element), Tensor.ElementType.INT64);\n-    }\n-\n-    public MemorySegment createScalar(float element) {\n-        return createScalar(arena.allocateFrom(JAVA_FLOAT, element), Tensor.ElementType.FLOAT);\n-    }\n-\n-    private MemorySegment createScalar(MemorySegment flatData, Tensor.ElementType elementType) {\n-        try {\n-            var allocatorInfo = retAddr(allocatorGetInfo.invokeExact(defaultAllocatorAddress, ret));\n-            return retAddr(createTensorWithDataAsOrtValue.invokeExact(allocatorInfo, flatData, flatData.byteSize(), MemorySegment.NULL, 0l, elementType.id, ret));\n-        } catch (Throwable t) {\n-            throw wrap(t);\n-        }\n-    }\n-\n-    public MemorySegment createFlatTensor(byte... elements) {\n-        return createTensor(arena.allocateFrom(JAVA_BYTE, elements), Tensor.ElementType.UINT8, new long[]{elements.length});\n-    }\n-\n-    public MemorySegment createFlatTensor(long... elements) {\n-        return createTensor(arena.allocateFrom(JAVA_LONG, elements), Tensor.ElementType.INT64, new long[]{elements.length});\n-    }\n-\n-    public MemorySegment createFlatTensor(float... elements) {\n-        return createTensor(arena.allocateFrom(JAVA_FLOAT, elements), Tensor.ElementType.FLOAT, new long[]{elements.length});\n-    }\n-\n@@ -309,1 +278,1 @@\n-            var shapeAddr = arena.allocateFrom(JAVA_LONG, shape);\n+            var shapeAddr = shape.length == 0 ? MemorySegment.NULL : arena.allocateFrom(JAVA_LONG, shape);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -29,0 +30,1 @@\n+import java.lang.foreign.ValueLayout;\n@@ -64,4 +66,0 @@\n-    \/\/ element type\n-    \/\/ dim\n-    \/\/ runtime representation\n-    \/\/ defer to ONNX runtime?\n@@ -69,1 +67,1 @@\n-    final MemorySegment tensorAddr;\n+    public static final long[] SCALAR_SHAPE = new long[0];\n@@ -71,2 +69,3 @@\n-    public Tensor(long data) {\n-        this(OnnxRuntime.getInstance().createScalar(data));\n+    public static Tensor<Long> ofScalar(long l) {\n+        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_LONG, l);\n+        return new Tensor<>(data, ElementType.INT64, SCALAR_SHAPE);\n@@ -75,2 +74,3 @@\n-    public Tensor(float data) {\n-        this(OnnxRuntime.getInstance().createScalar(data));\n+    public static Tensor<Float> ofScalar(float f) {\n+        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_FLOAT, f);\n+        return new Tensor(data, ElementType.FLOAT, SCALAR_SHAPE);\n@@ -79,2 +79,3 @@\n-    public Tensor(byte... data) {\n-        this(OnnxRuntime.getInstance().createFlatTensor(data));\n+    public static Tensor<Byte> ofFlat(byte... values) {\n+        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_BYTE, values);\n+        return new Tensor(data, ElementType.UINT8, new long[]{values.length});\n@@ -83,2 +84,3 @@\n-    public Tensor(long... data) {\n-        this(OnnxRuntime.getInstance().createFlatTensor(data));\n+    public static Tensor<Long> ofFlat(long... values) {\n+        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_LONG, values);\n+        return new Tensor(data, ElementType.INT64, new long[]{values.length});\n@@ -87,2 +89,3 @@\n-    public Tensor(float... data) {\n-        this(OnnxRuntime.getInstance().createFlatTensor(data));\n+    public static Tensor<Float> ofFlat(float... values) {\n+        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_FLOAT, values);\n+        return new Tensor(data, ElementType.FLOAT, new long[]{values.length});\n@@ -91,2 +94,6 @@\n-    public Tensor(MemorySegment dataAddr, ElementType elementType) {\n-        this(OnnxRuntime.getInstance().createTensor(dataAddr, elementType, new long[]{dataAddr.byteSize() \/ elementType.size()}));\n+    \/\/ Mandatory reference to dataAddr to avoid its garbage colletion\n+    private final MemorySegment dataAddr;\n+    final MemorySegment tensorAddr;\n+\n+    Tensor(MemorySegment dataAddr, ElementType type, long... shape) {\n+        this(dataAddr, OnnxRuntime.getInstance().createTensor(dataAddr, type, shape));\n@@ -96,0 +103,5 @@\n+        this(null, tensorAddr);\n+    }\n+\n+    Tensor(MemorySegment dataAddr, MemorySegment tensorAddr) {\n+        this.dataAddr = dataAddr;\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.BufferedImage;\n@@ -58,2 +55,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import javax.swing.JFrame;\n@@ -407,1 +402,1 @@\n-            Tensor inputImage = new Tensor(MemorySegment.ofBuffer(imagesIn), Tensor.ElementType.UINT8);\n+            Tensor inputImage = new Tensor(MemorySegment.ofBuffer(imagesIn), Tensor.ElementType.UINT8, new long[]{imagesF.length()});\n@@ -434,59 +429,0 @@\n-    static int detectNumber(ByteBuffer image) throws IOException {\n-        List<Tensor> weights = loadWeights();\n-        Tensor inputImage = new Tensor(MemorySegment.ofBuffer(image), Tensor.ElementType.UINT8);\n-\n-        return nextBestMatch(new Tensor(OnnxRuntime.getInstance().runFunc(\n-                cnnModel(),\n-                Stream.concat(weights.stream(), Stream.of(inputImage))\n-                        .map(t -> Optional.of(t.tensorAddr)).toList()).getFirst())\n-                .asByteBuffer().asFloatBuffer());\n-    }\n-\n-    public static void main(String[] args) {\n-        var frame = new JFrame(\"Drawing Canvas\");\n-        var clean = new AtomicBoolean(true);\n-        frame.addMouseMotionListener(new MouseAdapter() {\n-            @Override\n-            public void mouseMoved(MouseEvent e) {\n-                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n-                    if (clean.getAndSet(false)) {\n-                        frame.getGraphics().clearRect(0, 0, frame.getWidth(), frame.getHeight());\n-                    }\n-                    frame.getGraphics().fillOval(e.getX(), e.getY(), 20, 20);\n-                }\n-            }\n-        });\n-        frame.addKeyListener(new KeyAdapter(){\n-            @Override\n-            public void keyPressed(KeyEvent e) {\n-                if (e.getKeyCode() == KeyEvent.VK_ENTER) try {\n-                    var image = new BufferedImage(28, 28, BufferedImage.TYPE_INT_RGB);\n-                    var g = image.createGraphics();\n-                    g.drawImage(new Robot().createScreenCapture(new Rectangle(frame.getContentPane().getLocationOnScreen(), frame.getContentPane().getSize()))\n-                                           .getScaledInstance(28, 28, Image.SCALE_SMOOTH), 0, 0, null);\n-                    g.dispose();\n-\n-                    var bb = ByteBuffer.allocateDirect(28*28);\n-                    for (int y = 0; y < 28; y++) {\n-                        for (int x = 0; x < 28; x++) {\n-                            bb.put((byte)(255 - (0xff & image.getRGB(x, y))));\n-                        }\n-                    }\n-                    clean.set(true);\n-\n-                    printImage(0, bb);\n-                    System.out.println(\"detected number: \" + detectNumber(bb.rewind()));\n-                } catch (Exception ex) {\n-                    ex.printStackTrace();\n-                }\n-            }\n-        });\n-        frame.setBackground(Color.WHITE);\n-        frame.getContentPane().setPreferredSize(new Dimension(560, 560));\n-        frame.pack();\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-        System.out.println(\"Hold SHIFT to draw, click ENTER to detect.\");\n-    }\n-\n@@ -542,7 +478,7 @@\n-\/\/    public static void main(String[] args) throws IOException {\n-\/\/        Path inputPath = Path.of(args[0]);\n-\/\/\n-\/\/        Path outputPath = Path.of(args[1]);\n-\/\/\n-\/\/        extractWeights(inputPath, outputPath);\n-\/\/    }\n+    public static void main(String[] args) throws IOException {\n+        Path inputPath = Path.of(args[0]);\n+\n+        Path outputPath = Path.of(args[1]);\n+\n+        extractWeights(inputPath, outputPath);\n+    }\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":8,"deletions":72,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import jdk.incubator.code.CodeReflection;\n+import java.util.Optional;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.FloatBuffer;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import jdk.incubator.code.Op;\n+import oracle.code.onnx.compiler.OnnxTransformer;\n+\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static oracle.code.onnx.OnnxOperators.*;\n+import static oracle.code.onnx.Tensor.ElementType.*;\n+\n+public class DigitRecognizer {\n+\n+    private static final int PIXEL_DEPTH = 255;\n+\n+    private static float[] loadConstant(String resource) throws IOException {\n+        var bb = ByteBuffer.wrap(DigitRecognizer.class.getResourceAsStream(resource).readAllBytes());\n+        return FloatBuffer.allocate(bb.capacity() \/ 4).put(bb.asFloatBuffer()).array();\n+    }\n+\n+    @CodeReflection\n+    public static Tensor<Float> cnn(Tensor<Float> inputImage) throws IOException {\n+\n+        \/\/ Scaling and inverting the grayscale to 0-1\n+        var scalingFactor = Constant((float) PIXEL_DEPTH);\n+        var scaledInput = Div(Sub(scalingFactor, inputImage), scalingFactor);\n+\n+        \/\/ First conv layer\n+        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float\")), Constant(new long[]{6, 1, 5, 5}), empty());\n+        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float\")), Constant(new long[]{6}), empty());\n+        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu1 = Relu(conv1);\n+\n+        \/\/ First pooling layer\n+        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Second conv layer\n+        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float\")), Constant(new long[]{16, 6, 5, 5}), empty());\n+        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float\")), Constant(new long[]{16}), empty());\n+        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu2 = Relu(conv2);\n+\n+        \/\/ Second pooling layer\n+        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Flatten inputs\n+        var flatten = Flatten(pool2.Y(), of(1L));\n+\n+        \/\/ First fully connected layer\n+        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float\")), Constant(new long[]{120, 256}), empty());\n+        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float\")), Constant(new long[]{120}), empty());\n+        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n+        var relu3 = Relu(fc1);\n+\n+        \/\/ Second fully connected layer\n+        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float\")), Constant(new long[]{84, 120}), empty());\n+        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float\")), Constant(new long[]{84}), empty());\n+        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n+        var relu4 = Relu(fc2);\n+\n+        \/\/ Softmax layer\n+        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float\")), Constant(new long[]{10, 84}), empty());\n+        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float\")), Constant(new long[]{10}), empty());\n+        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n+        var prediction = Softmax(fc3, of(1L));\n+\n+        return prediction;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        var frame = new JFrame(\"Digit Recognizer\");\n+        var pane = new JPanel();\n+        var status = new JLabel(\"   Hold SHIFT key to draw with trackpad, click ENTER to run digit recognition.\");\n+        var robot = new Robot();\n+        var clean = new AtomicBoolean(true);\n+        var session = OnnxRuntime.getInstance().createSession(\n+                OnnxProtoBuilder.buildFuncModel(OnnxTransformer.transform(MethodHandles.lookup(),\n+                        Op.ofMethod(DigitRecognizer.class.getDeclaredMethod(\"cnn\", Tensor.class)).get())));\n+        var image = new BufferedImage(28, 28, BufferedImage.TYPE_BYTE_GRAY);\n+        var graphics = image.createGraphics();\n+        var imageBuffer = ByteBuffer.allocateDirect(28 * 28 * 4).order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer();\n+        var sampleArray = new float[28 * 28];\n+        var inputTensors = List.of(Optional.of(new Tensor(MemorySegment.ofBuffer(imageBuffer), FLOAT, 1, 1, 28, 28).tensorAddr));\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(pane, BorderLayout.CENTER);\n+        frame.add(status, BorderLayout.SOUTH);\n+        frame.setBackground(Color.WHITE);\n+        frame.addMouseMotionListener(new MouseAdapter() {\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n+                    if (clean.getAndSet(false)) {\n+                        pane.getGraphics().clearRect(0, 0, pane.getWidth(), pane.getHeight());\n+                    }\n+                    pane.getGraphics().fillOval(e.getX(), e.getY(), 20, 20);\n+                }\n+            }\n+        });\n+        frame.addKeyListener(new KeyAdapter(){\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n+                    graphics.drawImage(robot.createScreenCapture(new Rectangle(pane.getLocationOnScreen(), pane.getSize()))\n+                                     .getScaledInstance(28, 28, Image.SCALE_SMOOTH), 0, 0, null);\n+                    imageBuffer.put(0, image.getData().getSamples(0, 0, 28, 28, 0, sampleArray));\n+                    FloatBuffer result = OnnxRuntime.getInstance().tensorBuffer(session.run(inputTensors).getFirst()).asFloatBuffer();\n+                    int max = 0;\n+                    for (int i = 1; i < 10; i++) {\n+                        if (result.get(i) > result.get(max)) max = i;\n+                    }\n+                    var msg = new StringBuilder(\"<html>&nbsp;\");\n+                    for (int i = 0; i < 10; i++) {\n+                        if (max == i) {\n+                            msg.append(\"&nbsp;&nbsp;<b>%d:&nbsp;%.1f%%<\/b>\".formatted(i, 100 * result.get(i)));\n+                        } else {\n+                            msg.append(\"&nbsp;&nbsp;%d:&nbsp;%.1f%%\".formatted(i, result.get(i)));\n+\n+                        }\n+                    }\n+                    status.setText(msg.toString());\n+                    clean.set(true);\n+                }\n+            }\n+        });\n+        frame.setSize(600, 600);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/DigitRecognizer.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-            var inputTensor = ort.createFlatTensor(-1f, 2, -3, 4, -5, 6);\n+            var inputTensor = Tensor.ofFlat(-1f, 2, -3, 4, -5, 6);\n@@ -31,1 +31,1 @@\n-            var absExpectedTensor = ort.createFlatTensor(1f, 2, 3, 4, 5, 6);\n+            var absExpectedTensor = Tensor.ofFlat(1f, 2, 3, 4, 5, 6);\n@@ -33,1 +33,1 @@\n-            var absResult = absOp.run(List.of(Optional.of(inputTensor)));\n+            var absResult = absOp.run(List.of(Optional.of(inputTensor.tensorAddr)));\n@@ -37,1 +37,1 @@\n-            var absOutputTensor = absResult.getFirst();\n+            var absOutputTensor = new Tensor(absResult.getFirst());\n@@ -41,1 +41,1 @@\n-            var addResult = addOp.run(List.of(Optional.of(inputTensor), Optional.of(absOutputTensor)));\n+            var addResult = addOp.run(List.of(Optional.of(inputTensor.tensorAddr), Optional.of(absOutputTensor.tensorAddr)));\n@@ -45,1 +45,1 @@\n-            var addOutputTensor = addResult.getFirst();\n+            var addOutputTensor = new Tensor(addResult.getFirst());\n@@ -47,1 +47,1 @@\n-            var addExpectedTensor = ort.createFlatTensor(0f, 4, 0, 8, 0, 12);\n+            var addExpectedTensor = Tensor.ofFlat(0f, 4, 0, 8, 0, 12);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-        var a = new Tensor(1f, 2, 3);\n-        var b = new Tensor(6f, 5, 4);\n+        var a = Tensor.ofFlat(1f, 2, 3);\n+        var b = Tensor.ofFlat(6f, 5, 4);\n@@ -41,1 +41,1 @@\n-        var expected = new Tensor(-1f);\n+        var expected = Tensor.ofScalar(-1f);\n@@ -54,1 +54,1 @@\n-        var expected = new Tensor(-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE);\n+        var expected = Tensor.ofFlat(-1f, 0, 1, Float.MIN_VALUE, Float.MAX_VALUE);\n@@ -67,1 +67,1 @@\n-        var expected = new Tensor(-1l);\n+        var expected = Tensor.ofScalar(-1l);\n@@ -80,1 +80,1 @@\n-        var expected = new Tensor(-1l, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE);\n+        var expected = Tensor.ofFlat(-1l, 0, 1, Long.MIN_VALUE, Long.MAX_VALUE);\n@@ -92,2 +92,2 @@\n-        var data = new Tensor(1f, 2, 3, 4, 5, 6, 7, 8);\n-        var shape = new Tensor(2l, 2, 2);\n+        var data = Tensor.ofFlat(1f, 2, 3, 4, 5, 6, 7, 8);\n+        var shape = Tensor.ofFlat(2l, 2, 2);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+�����S��)��=���=�U��g#K\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv1-bias-float","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv1-weight-float","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+�q=2Ar<J���F���,�����=��S�L)#=���<������H���9�����Q����=[��\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv2-bias-float","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/conv2-weight-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc1-bias-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc1-weight-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc2-bias-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc2-weight-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc3-bias-float","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fc3-weight-float","binary":true,"status":"added"}]}