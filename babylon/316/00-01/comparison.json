{"files":[{"patch":"@@ -11,0 +11,1 @@\n+import jdk.incubator.code.op.CoreOp;\n@@ -265,1 +266,0 @@\n-    \/\/ order of building defines order inside protobufs\n@@ -270,0 +270,5 @@\n+                        .forEach(schema.inputs(), (g, i) -> g.input(new ValueInfoProto()\n+                                .name(i.name())\n+                                .type(new TypeProto()\n+                                        \/\/ inputValues match schema inputs by OnnxParameter::ordinal\n+                                        .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).id)))))\n@@ -285,5 +290,0 @@\n-                        .forEach(schema.inputs(), (g, i) -> g.input(new ValueInfoProto()\n-                                .name(i.name())\n-                                .type(new TypeProto()\n-                                        \/\/ inputValues match schema inputs by OnnxParameter::ordinal\n-                                        .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).id)))))\n@@ -301,1 +301,0 @@\n-    \/\/ order of building defines order inside protobufs\n@@ -305,1 +304,4 @@\n-                return computeIfAbsent(v, _ -> \"#\" + size());\n+                return computeIfAbsent(v, _ -> {\n+                    System.out.println(model.funcName() + \" \" + v + \" #\" + size());\n+                    return \"#\" + size();\n+                });\n@@ -312,9 +314,0 @@\n-                        .forEach(entryBlock.ops(), (g, op) -> {\n-                            if (op instanceof OnnxOp onnxOp) {\n-                                g.node(new NodeProto()\n-                                        .forEach(op.operands(), (n, p) -> n.input(indexer.getName(p)))\n-                                        .output(indexer.getName(op.result()))\n-                                        .op_type(op.opName())\n-                                        .forEach(onnxOp.onnxAttributes().entrySet(), (n, ae) -> n.attribute(buildAttribute(ae.getKey(), ae.getValue()))));\n-                            }\n-                        })\n@@ -325,0 +318,15 @@\n+                        .forEach(entryBlock.ops(), (g, op) -> {\n+                            switch (op) {\n+                                case OnnxOp onnxOp ->\n+                                    g.node(new NodeProto()\n+                                            .forEach(op.operands(), (n, p) -> n.input(indexer.getName(p)))\n+                                            .output(indexer.getName(op.result()))\n+                                            .op_type(op.opName())\n+                                            .forEach(onnxOp.onnxAttributes().entrySet(), (n, ae) -> n.attribute(buildAttribute(ae.getKey(), ae.getValue()))));\n+                                case CoreOp.ReturnOp _ -> {\n+                                     \/\/ skip\n+                                }\n+                                default ->\n+                                    throw new UnsupportedOperationException(op.toText());\n+                            }\n+                        })\n@@ -337,3 +345,5 @@\n-            case long[] longs -> {\n-                attr.type(7);\n-                for (long l : longs) attr.ints(l);\n+            case Float f -> {\n+                attr.type(2).f(f);\n+            }\n+            case Long l -> {\n+                attr.type(3).i(l);\n@@ -345,0 +355,4 @@\n+            case long[] longs -> {\n+                attr.type(7);\n+                for (long l : longs) attr.ints(l);\n+            }\n@@ -346,1 +360,1 @@\n-                throw new UnsupportedOperationException(); \/\/ @@@ ToDo\n+                throw new UnsupportedOperationException(value.getClass().toString()); \/\/ @@@ ToDo\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":35,"deletions":21,"binary":false,"changes":56,"status":"modified"}]}