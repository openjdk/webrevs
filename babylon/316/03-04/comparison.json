{"files":[{"patch":"@@ -41,1 +41,5 @@\n-                    inputs.stream().map(o -> ((Tensor)o).rtTensor).toList(),\n+                    inputs.stream().map(o -> Optional.ofNullable(switch (o) {\n+                        case Tensor t -> t.rtTensor;\n+                        case Optional ot when ot.isPresent() && ot.get() instanceof Tensor t -> t.rtTensor;\n+                        default -> null;\n+                    })).toList(),\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxInterpreter.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-    static ByteBuffer buildOpModel(OnnxOp.OnnxSchema schema, List<ElementType> inputElementTypes, List<Object> attributes) {\n+    static ByteBuffer buildOpModel(OnnxOp.OnnxSchema schema, List<java.util.Optional<ElementType>> inputElementTypes, List<Object> attributes) {\n@@ -270,5 +270,9 @@\n-                        .forEach(schema.inputs(), (g, i) -> g.input(new ValueInfoProto()\n-                                .name(i.name())\n-                                .type(new TypeProto()\n-                                        \/\/ inputValues match schema inputs by OnnxParameter::ordinal\n-                                        .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).id)))))\n+                        .forEach(schema.inputs(), (g, i) -> {\n+                            if (inputElementTypes.get(i.ordinal()).isPresent()) {\n+                                g.input(new ValueInfoProto()\n+                                    .name(i.name())\n+                                    .type(new TypeProto()\n+                                            \/\/ inputValues match schema inputs by OnnxParameter::ordinal\n+                                            .tensor_type(new Tensor().elem_type(inputElementTypes.get(i.ordinal()).get().id))));\n+                            }\n+                        })\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -169,2 +169,2 @@\n-    private static List<Tensor.ElementType> toElementTypes(List<OrtTensor> values) {\n-        return values.stream().map(OrtTensor::getTensorTypeAndShape).map(OrtTensorTypeAndShapeInfo::getTensorElementType).toList();\n+    private static List<Optional<Tensor.ElementType>> toElementTypes(List<Optional<OrtTensor>> values) {\n+        return values.stream().map(ot -> ot.map(OrtTensor::getTensorTypeAndShape).map(OrtTensorTypeAndShapeInfo::getTensorElementType)).toList();\n@@ -173,1 +173,1 @@\n-    public List<OrtTensor> runOp(OnnxOp.OnnxSchema schema, List<OrtTensor> inputValues, List<Object> attributes) {\n+    public List<OrtTensor> runOp(OnnxOp.OnnxSchema schema, List<Optional<OrtTensor>> inputValues, List<Object> attributes) {\n@@ -180,1 +180,1 @@\n-    public List<OrtTensor> runFunc(CoreOp.FuncOp model, List<OrtTensor> inputValues) {\n+    public List<OrtTensor> runFunc(CoreOp.FuncOp model, List<Optional<OrtTensor>> inputValues) {\n@@ -286,1 +286,1 @@\n-        public List<OrtTensor> run(List<OrtTensor> inputValues) {\n+        public List<OrtTensor> run(List<Optional<OrtTensor>> inputValues) {\n@@ -294,2 +294,4 @@\n-                inputNames.setAtIndex(ADDRESS, index, arena.allocateFrom(getInputName(i)));\n-                inputs.setAtIndex(ADDRESS, index++, inputValues.get(i).valueAddress());\n+                if (inputValues.get(i).isPresent()) {\n+                    inputNames.setAtIndex(ADDRESS, index, arena.allocateFrom(getInputName(i)));\n+                    inputs.setAtIndex(ADDRESS, index++, inputValues.get(i).get().valueAddress());\n+                }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4,0 +4,2 @@\n+import java.util.Optional;\n+import oracle.code.onnx.Tensor.ElementType;\n@@ -13,0 +15,2 @@\n+    static final Optional<ElementType> OF_FLOAT = Optional.of(FLOAT);\n+\n@@ -16,2 +20,2 @@\n-        try (var absOp = ort.createSession(OnnxProtoBuilder.buildOpModel(OnnxOps.Abs.SCHEMA, List.of(FLOAT, FLOAT), List.of()));\n-             var addOp = ort.createSession(OnnxProtoBuilder.buildOpModel(OnnxOps.Add.SCHEMA, List.of(FLOAT, FLOAT), List.of()))) {\n+        try (var absOp = ort.createSession(OnnxProtoBuilder.buildOpModel(OnnxOps.Abs.SCHEMA, List.of(OF_FLOAT, OF_FLOAT), List.of()));\n+             var addOp = ort.createSession(OnnxProtoBuilder.buildOpModel(OnnxOps.Add.SCHEMA, List.of(OF_FLOAT, OF_FLOAT), List.of()))) {\n@@ -29,1 +33,1 @@\n-            var absResult = absOp.run(List.of(inputTensor));\n+            var absResult = absOp.run(List.of(Optional.of(inputTensor)));\n@@ -37,1 +41,1 @@\n-            var addResult = addOp.run(List.of(inputTensor, absOutputTensor));\n+            var addResult = addOp.run(List.of(Optional.of(inputTensor), Optional.of(absOutputTensor)));\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-        System.out.println(expected.rtTensor.getTensorTypeAndShape().getDimensionsCount());\n@@ -70,1 +69,0 @@\n-        System.out.println(expected.rtTensor.getTensorTypeAndShape().getDimensionsCount());\n@@ -105,1 +103,1 @@\n-                Stream.of(params).map(t -> t.rtTensor).toList()).getFirst());\n+                Stream.of(params).map(t -> Optional.ofNullable(t.rtTensor)).toList()).getFirst());\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}