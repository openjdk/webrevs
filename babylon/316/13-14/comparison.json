{"files":[{"patch":"@@ -0,0 +1,6 @@\n+Example using code reflection with a Java-based ONNX programming model.\n+\n+Running the demo:\n+```\n+JAVA_HOME=<path to the Babylon JDK home>;mvn process-test-classes exec:java -Dexec.classpathScope=test -Dexec.mainClass=oracle.code.onnx.MNISTDemo\n+```\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/README.md","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -1,175 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package oracle.code.onnx;\n-\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.awt.image.BufferedImage;\n-import java.io.*;\n-import jdk.incubator.code.CodeReflection;\n-import java.util.Optional;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.invoke.MethodHandles;\n-import java.nio.ByteBuffer;\n-import java.nio.ByteOrder;\n-import java.nio.FloatBuffer;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n-import jdk.incubator.code.Op;\n-import oracle.code.onnx.compiler.OnnxTransformer;\n-\n-import static java.util.Optional.empty;\n-import static java.util.Optional.of;\n-import static oracle.code.onnx.OnnxOperators.*;\n-import static oracle.code.onnx.Tensor.ElementType.*;\n-\n-public class DigitRecognizer {\n-\n-    private static final int PIXEL_DEPTH = 255;\n-\n-    private static float[] loadConstant(String resource) throws IOException {\n-        var bb = ByteBuffer.wrap(DigitRecognizer.class.getResourceAsStream(resource).readAllBytes());\n-        return FloatBuffer.allocate(bb.capacity() \/ 4).put(bb.asFloatBuffer()).array();\n-    }\n-\n-    @CodeReflection\n-    public static Tensor<Float> cnn(Tensor<Float> inputImage) throws IOException {\n-\n-        \/\/ Scaling and inverting the grayscale to 0-1\n-        var scalingFactor = Constant((float) PIXEL_DEPTH);\n-        var scaledInput = Div(Sub(scalingFactor, inputImage), scalingFactor);\n-\n-        \/\/ First conv layer\n-        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float\")), Constant(new long[]{6, 1, 5, 5}), empty());\n-        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float\")), Constant(new long[]{6}), empty());\n-        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu1 = Relu(conv1);\n-\n-        \/\/ First pooling layer\n-        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Second conv layer\n-        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float\")), Constant(new long[]{16, 6, 5, 5}), empty());\n-        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float\")), Constant(new long[]{16}), empty());\n-        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n-                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n-                of(1L), of(new long[]{5,5}));\n-        var relu2 = Relu(conv2);\n-\n-        \/\/ Second pooling layer\n-        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n-                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n-\n-        \/\/ Flatten inputs\n-        var flatten = Flatten(pool2.Y(), of(1L));\n-\n-        \/\/ First fully connected layer\n-        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float\")), Constant(new long[]{120, 256}), empty());\n-        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float\")), Constant(new long[]{120}), empty());\n-        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n-        var relu3 = Relu(fc1);\n-\n-        \/\/ Second fully connected layer\n-        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float\")), Constant(new long[]{84, 120}), empty());\n-        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float\")), Constant(new long[]{84}), empty());\n-        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n-        var relu4 = Relu(fc2);\n-\n-        \/\/ Softmax layer\n-        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float\")), Constant(new long[]{10, 84}), empty());\n-        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float\")), Constant(new long[]{10}), empty());\n-        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n-        var prediction = Softmax(fc3, of(1L));\n-\n-        return prediction;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        var frame = new JFrame(\"Digit Recognizer\");\n-        var pane = new JPanel();\n-        var status = new JLabel(\"   Hold SHIFT key to draw with trackpad, click ENTER to run digit recognition.\");\n-        var robot = new Robot();\n-        var clean = new AtomicBoolean(true);\n-        var session = OnnxRuntime.getInstance().createSession(\n-                OnnxProtoBuilder.buildFuncModel(OnnxTransformer.transform(MethodHandles.lookup(),\n-                        Op.ofMethod(DigitRecognizer.class.getDeclaredMethod(\"cnn\", Tensor.class)).get())));\n-        var image = new BufferedImage(28, 28, BufferedImage.TYPE_BYTE_GRAY);\n-        var graphics = image.createGraphics();\n-        var imageBuffer = ByteBuffer.allocateDirect(28 * 28 * 4).order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer();\n-        var sampleArray = new float[28 * 28];\n-        var inputTensors = List.of(Optional.of(new Tensor(MemorySegment.ofBuffer(imageBuffer), FLOAT, 1, 1, 28, 28).tensorAddr));\n-\n-        frame.setLayout(new BorderLayout());\n-        frame.add(pane, BorderLayout.CENTER);\n-        frame.add(status, BorderLayout.SOUTH);\n-        frame.setBackground(Color.WHITE);\n-        frame.addMouseMotionListener(new MouseAdapter() {\n-            @Override\n-            public void mouseMoved(MouseEvent e) {\n-                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n-                    if (clean.getAndSet(false)) {\n-                        pane.getGraphics().clearRect(0, 0, pane.getWidth(), pane.getHeight());\n-                    }\n-                    pane.getGraphics().fillOval(e.getX(), e.getY(), 20, 20);\n-                }\n-            }\n-        });\n-        frame.addKeyListener(new KeyAdapter(){\n-            @Override\n-            public void keyPressed(KeyEvent e) {\n-                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n-                    graphics.drawImage(robot.createScreenCapture(new Rectangle(pane.getLocationOnScreen(), pane.getSize()))\n-                                     .getScaledInstance(28, 28, Image.SCALE_SMOOTH), 0, 0, null);\n-                    imageBuffer.put(0, image.getData().getSamples(0, 0, 28, 28, 0, sampleArray));\n-                    FloatBuffer result = OnnxRuntime.getInstance().tensorBuffer(session.run(inputTensors).getFirst()).asFloatBuffer();\n-                    int max = 0;\n-                    for (int i = 1; i < 10; i++) {\n-                        if (result.get(i) > result.get(max)) max = i;\n-                    }\n-                    var msg = new StringBuilder(\"<html>&nbsp;\");\n-                    for (int i = 0; i < 10; i++) {\n-                        if (max == i) {\n-                            msg.append(\"&nbsp;&nbsp;<b>%d:&nbsp;%.1f%%<\/b>\".formatted(i, 100 * result.get(i)));\n-                        } else {\n-                            msg.append(\"&nbsp;&nbsp;%d:&nbsp;%.1f%%\".formatted(i, result.get(i)));\n-\n-                        }\n-                    }\n-                    status.setText(msg.toString());\n-                    clean.set(true);\n-                }\n-            }\n-        });\n-        frame.setSize(600, 600);\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-    }\n-}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/DigitRecognizer.java","additions":0,"deletions":175,"binary":false,"changes":175,"status":"deleted"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx;\n+\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import jdk.incubator.code.CodeReflection;\n+import java.util.Optional;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.FloatBuffer;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import jdk.incubator.code.Op;\n+import oracle.code.onnx.compiler.OnnxTransformer;\n+\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static oracle.code.onnx.OnnxOperators.*;\n+import static oracle.code.onnx.Tensor.ElementType.*;\n+\n+public class MNISTDemo {\n+\n+    private static float[] loadConstant(String resource) throws IOException {\n+        var bb = ByteBuffer.wrap(MNISTDemo.class.getResourceAsStream(resource).readAllBytes());\n+        return FloatBuffer.allocate(bb.capacity() \/ 4).put(bb.asFloatBuffer()).array();\n+    }\n+\n+    @CodeReflection\n+    public static Tensor<Float> cnn(Tensor<Float> inputImage) throws IOException {\n+\n+        \/\/ Scaling to 0-1\n+        var scaledInput = Div(inputImage, Constant(255f));\n+\n+        \/\/ First conv layer\n+        var conv1Weights = Reshape(Constant(loadConstant(\"conv1-weight-float\")), Constant(new long[]{6, 1, 5, 5}), empty());\n+        var conv1Biases = Reshape(Constant(loadConstant(\"conv1-bias-float\")), Constant(new long[]{6}), empty());\n+        var conv1 = Conv(scaledInput, conv1Weights, of(conv1Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu1 = Relu(conv1);\n+\n+        \/\/ First pooling layer\n+        var pool1 = MaxPool(relu1, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Second conv layer\n+        var conv2Weights = Reshape(Constant(loadConstant(\"conv2-weight-float\")), Constant(new long[]{16, 6, 5, 5}), empty());\n+        var conv2Biases = Reshape(Constant(loadConstant(\"conv2-bias-float\")), Constant(new long[]{16}), empty());\n+        var conv2 = Conv(pool1.Y(), conv2Weights, of(conv2Biases), of(new long[4]),\n+                of(new long[]{1,1}), empty(), of(new long[]{1, 1, 1, 1}),\n+                of(1L), of(new long[]{5,5}));\n+        var relu2 = Relu(conv2);\n+\n+        \/\/ Second pooling layer\n+        var pool2 = MaxPool(relu2, of(new long[4]), of(new long[]{1,1}), empty(),\n+                of(0L), empty(), of(new long[]{2, 2}), new long[]{2, 2});\n+\n+        \/\/ Flatten inputs\n+        var flatten = Flatten(pool2.Y(), of(1L));\n+\n+        \/\/ First fully connected layer\n+        var fc1Weights = Reshape(Constant(loadConstant(\"fc1-weight-float\")), Constant(new long[]{120, 256}), empty());\n+        var fc1Biases = Reshape(Constant(loadConstant(\"fc1-bias-float\")), Constant(new long[]{120}), empty());\n+        var fc1 = Gemm(flatten, fc1Weights, of(fc1Biases), of(1f), of(1L), of(1f), empty());\n+        var relu3 = Relu(fc1);\n+\n+        \/\/ Second fully connected layer\n+        var fc2Weights = Reshape(Constant(loadConstant(\"fc2-weight-float\")), Constant(new long[]{84, 120}), empty());\n+        var fc2Biases = Reshape(Constant(loadConstant(\"fc2-bias-float\")), Constant(new long[]{84}), empty());\n+        var fc2 = Gemm(relu3, fc2Weights, of(fc2Biases), of(1f), of(1L), of(1f), empty());\n+        var relu4 = Relu(fc2);\n+\n+        \/\/ Softmax layer\n+        var fc3Weights = Reshape(Constant(loadConstant(\"fc3-weight-float\")), Constant(new long[]{10, 84}), empty());\n+        var fc3Biases = Reshape(Constant(loadConstant(\"fc3-bias-float\")), Constant(new long[]{10}), empty());\n+        var fc3 = Gemm(relu4, fc3Weights, of(fc3Biases), of(1f), of(1L), of(1f), empty());\n+        var prediction = Softmax(fc3, of(1L));\n+\n+        return prediction;\n+    }\n+\n+    static final int IMAGE_SIZE = 28;\n+    static final int DRAW_AREA_SIZE = 560;\n+    static final int PEN_SIZE = 20;\n+\n+    public static void main(String[] args) throws Exception {\n+        var frame = new JFrame(\"CNN MNIST Demo - Handwritten Digit Classification\");\n+        var drawPane = new JPanel(false);\n+        var statusBar = new JLabel(\"   Hold SHIFT key to draw with trackpad or mouse, click ENTER to run digit classification.\");\n+        var cleanFlag = new AtomicBoolean(true);\n+        var runtimeSession = OnnxRuntime.getInstance().createSession(\n+                OnnxProtoBuilder.buildFuncModel(\n+                        OnnxTransformer.transform(MethodHandles.lookup(),\n+                                Op.ofMethod(MNISTDemo.class.getDeclaredMethod(\"cnn\", Tensor.class)).get())));\n+        var drawAreaImage = new BufferedImage(DRAW_AREA_SIZE, DRAW_AREA_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+        var drawGraphics = drawAreaImage.createGraphics();\n+        var scaledImage = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+        var scaledGraphics = scaledImage.createGraphics();\n+        var scaledImageDataBuffer = ByteBuffer.allocateDirect(IMAGE_SIZE * IMAGE_SIZE * 4).order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer();\n+        var inputArguments = List.of(Optional.of(new Tensor(MemorySegment.ofBuffer(scaledImageDataBuffer), FLOAT, 1, 1, IMAGE_SIZE, IMAGE_SIZE).tensorAddr));\n+        var sampleArray = new float[IMAGE_SIZE * IMAGE_SIZE];\n+\n+        drawPane.setPreferredSize(new Dimension(DRAW_AREA_SIZE, DRAW_AREA_SIZE));\n+        drawPane.addMouseMotionListener(new MouseAdapter() {\n+            @Override\n+            public void mouseMoved(MouseEvent e) {\n+                if ((e.getModifiersEx() & InputEvent.SHIFT_DOWN_MASK) != 0) {\n+                    if (cleanFlag.getAndSet(false)) {\n+                        drawGraphics.clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                        drawPane.getGraphics().clearRect(0, 0, DRAW_AREA_SIZE, DRAW_AREA_SIZE);\n+                    }\n+                    drawGraphics.fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                    drawPane.getGraphics().fillOval(e.getX(), e.getY(), PEN_SIZE, PEN_SIZE);\n+                }\n+            }\n+        });\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(drawPane, BorderLayout.CENTER);\n+        frame.add(statusBar, BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setResizable(false);\n+        frame.addKeyListener(new KeyAdapter(){\n+            @Override\n+            public void keyPressed(KeyEvent e) {\n+                if (e.getKeyCode() == KeyEvent.VK_ENTER) {\n+                    scaledGraphics.drawImage(drawAreaImage.getScaledInstance(IMAGE_SIZE, IMAGE_SIZE, Image.SCALE_SMOOTH), 0, 0, null);\n+                    scaledImageDataBuffer.put(0, scaledImage.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, sampleArray));\n+                    FloatBuffer result = OnnxRuntime.getInstance().tensorBuffer(runtimeSession.run(inputArguments).getFirst()).asFloatBuffer();\n+                    int max = 0;\n+                    for (int i = 1; i < 10; i++) {\n+                        if (result.get(i) > result.get(max)) max = i;\n+                    }\n+                    var msg = new StringBuilder(\"<html>&nbsp;\");\n+                    for (int i = 0; i < 10; i++) {\n+                        if (max == i) {\n+                            msg.append(\"&nbsp;&nbsp;<b>%d:&nbsp;%.1f%%<\/b>\".formatted(i, 100 * result.get(i)));\n+                        } else {\n+                            msg.append(\"&nbsp;&nbsp;%d:&nbsp;%.1f%%\".formatted(i, result.get(i)));\n+\n+                        }\n+                    }\n+                    statusBar.setText(msg.toString());\n+                    cleanFlag.set(true);\n+                }\n+            }\n+        });\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemo.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"}]}