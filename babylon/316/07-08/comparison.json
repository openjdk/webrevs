{"files":[{"patch":"@@ -277,5 +277,0 @@\n-    public MemorySegment loadFlatTensorFromMemoryMappedDataFile(String file, Tensor.ElementType elementType) throws IOException {\n-        var f = new RandomAccessFile(file, \"r\");\n-        return createTensor(f.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, f.length(), arena), elementType, new long[]{f.length() \/ elementType.size()});\n-    }\n-\n@@ -299,0 +294,4 @@\n+    public MemorySegment createFlatTensor(byte... elements) {\n+        return createTensor(arena.allocateFrom(JAVA_BYTE, elements), Tensor.ElementType.UINT8, new long[]{elements.length});\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.ByteBuffer;\n@@ -78,0 +79,4 @@\n+    public Tensor(byte... data) {\n+        this(OnnxRuntime.getInstance().createFlatTensor(data));\n+    }\n+\n@@ -86,0 +91,4 @@\n+    public Tensor(MemorySegment dataAddr, ElementType elementType) {\n+        this(OnnxRuntime.getInstance().createTensor(dataAddr, elementType, new long[]{dataAddr.byteSize() \/ elementType.size()}));\n+    }\n+\n@@ -90,0 +99,4 @@\n+    public ByteBuffer asByteBuffer() {\n+        return OnnxRuntime.getInstance().tensorBuffer(tensorAddr);\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -224,0 +224,2 @@\n+            } else if (elementType.equals(JavaType.J_L_BYTE)) {\n+                return OnnxType.TENSOR_UINT8;\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.io.*;\n@@ -39,1 +40,0 @@\n-import java.io.StringWriter;\n@@ -45,3 +45,0 @@\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.ObjectOutputStream;\n@@ -51,0 +48,2 @@\n+import java.nio.FloatBuffer;\n+import java.nio.channels.FileChannel;\n@@ -60,0 +59,1 @@\n+import static oracle.code.onnx.OnnxOperators.Cast;\n@@ -104,1 +104,4 @@\n-            Tensor<Float> inputImage) {\n+            Tensor<Byte> ubyteImage) {\n+\n+        Tensor<Float> inputImage = Cast(ubyteImage, empty(), Tensor.ElementType.FLOAT.id);\n+\n@@ -183,1 +186,1 @@\n-                OnnxType.TENSOR_FLOAT32 \/\/ input\n+                OnnxType.TENSOR_UINT8 \/\/ input\n@@ -198,1 +201,6 @@\n-            Block.Parameter inputImage = b.parameters().get(10);\n+            Block.Parameter ubyteImage = b.parameters().get(10);\n+\n+            var inputImage = b.op(OnnxOps.Cast(OnnxType.TENSOR_FLOAT32,\n+                    ubyteImage,\n+                    empty(),\n+                    OnnxType.TENSOR_FLOAT32.eType().id()));\n@@ -326,17 +334,0 @@\n-    @Test\n-    public void test() throws Exception {\n-        CoreOp.FuncOp f = getFuncOp(\"cnn\");\n-        CoreOp.FuncOp onnxModel = OnnxTransformer.transform(MethodHandles.lookup(), f);\n-\/\/        System.out.println(onnxModel.toText());\n-        CoreOp.FuncOp expectedOnnxModel = cnnModel();\n-\/\/        System.out.println(expectedOnnxModel.toText());\n-        Assertions.assertEquals(serialize(expectedOnnxModel), serialize(onnxModel));\n-\n-        \/\/ @@@ need some image to test :)\n-        Tensor inputImage = new Tensor(new float[28*28]);\n-        List<Tensor> w = loadWeights();\n-        SimpleTest.assertEquals(\n-            cnn(w.get(0), w.get(1), w.get(2), w.get(3), w.get(4), w.get(5), w.get(6), w.get(7), w.get(8), w.get(9), inputImage).tensorAddr,\n-            OnnxRuntime.getInstance().runFunc(onnxModel, Stream.concat(w.stream(), Stream.of(inputImage)).map(t -> Optional.of(t.tensorAddr)).toList()).getFirst());\n-    }\n-\n@@ -358,0 +349,80 @@\n+    static int nextBestMatch(FloatBuffer fb) {\n+        float maxW = fb.get();\n+        int maxI = 0;\n+        for (int i = 1; i < 10; i++) {\n+            float w = fb.get();\n+            if (w > maxW) {\n+                maxW = w;\n+                maxI = i;\n+            }\n+        }\n+        return maxI;\n+    }\n+\n+    private static final String GREY_SCALE = \" .'`^\\\",:;Il!i><~+_-?][}{1)(|\\\\\/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\";\n+\n+    static void printImage(int imageIndex, ByteBuffer bb) {\n+        System.out.println(\"Image #\" + imageIndex + \" :\");\n+        int offset = imageIndex * 28 * 28;\n+        for (int y = 0; y < 28; y++) {\n+            for (int x = 0; x < 28; x++) {\n+                System.out.print(GREY_SCALE.charAt(GREY_SCALE.length() * (0xff & bb.get(offset + y * 28 + x)) \/ 256));\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+\/\/    static final String IMAGES_PATH = \"t10k-images-idx3-ubyte\";\n+\/\/    static final String LABELS_PATH = \"t10k-labels-idx1-ubyte\";\n+\/\/    static final int IMAGES_HEADER_SIZE = 16;\n+\/\/    static final int LABELS_HEADER_SIZE = 8;\n+\n+    static final String IMAGES_PATH = CNNTest.class.getResource(\"images-ubyte\").getPath();\n+    static final String LABELS_PATH = CNNTest.class.getResource(\"labels-ubyte\").getPath();\n+    static final int IMAGES_HEADER_SIZE = 0;\n+    static final int LABELS_HEADER_SIZE = 0;\n+\n+    @Test\n+    public void test() throws Exception {\n+        CoreOp.FuncOp f = getFuncOp(\"cnn\");\n+        CoreOp.FuncOp onnxModel = OnnxTransformer.transform(MethodHandles.lookup(), f);\n+        System.out.println(onnxModel.toText());\n+        CoreOp.FuncOp expectedOnnxModel = cnnModel();\n+        System.out.println(expectedOnnxModel.toText());\n+\n+        Assertions.assertEquals(serialize(expectedOnnxModel), serialize(onnxModel));\n+\n+        try (RandomAccessFile imagesF = new RandomAccessFile(IMAGES_PATH, \"r\");\n+             RandomAccessFile labelsF = new RandomAccessFile(LABELS_PATH, \"r\")) {\n+\n+            ByteBuffer imagesIn = imagesF.getChannel().map(FileChannel.MapMode.READ_ONLY, IMAGES_HEADER_SIZE, imagesF.length() - IMAGES_HEADER_SIZE);\n+            ByteBuffer labelsIn = labelsF.getChannel().map(FileChannel.MapMode.READ_ONLY, LABELS_HEADER_SIZE, labelsF.length() - LABELS_HEADER_SIZE);\n+\n+            List<Tensor> weights = loadWeights();\n+            Tensor inputImage = new Tensor(MemorySegment.ofBuffer(imagesIn), Tensor.ElementType.UINT8);\n+\n+            FloatBuffer result = new Tensor(OnnxRuntime.getInstance().runFunc(\n+                    onnxModel,\n+                    Stream.concat(weights.stream(), Stream.of(inputImage))\n+                            .map(t -> Optional.of(t.tensorAddr)).toList()).getFirst())\n+                    .asByteBuffer().asFloatBuffer();\n+\n+            int matched = 0, mismatched = 0;\n+            while (result.remaining() > 0) {\n+                int expected = labelsIn.get();\n+                int actual = nextBestMatch(result);\n+                if (expected == actual) {\n+                    matched++;\n+                } else {\n+                    int imageIndex = labelsIn.position() - 1;\n+                    printImage(imageIndex, imagesIn);\n+                    System.out.println(\"expected: \" + expected + \" actual: \" + actual);\n+                    System.out.println(\"-\".repeat(28));\n+                    mismatched++;\n+                }\n+            }\n+            System.out.println(\"matched: \" + matched + \" mismatched: \" + mismatched);\n+            Assertions.assertTrue(mismatched \/ matched < 0.05);\n+        }\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":95,"deletions":24,"binary":false,"changes":119,"status":"modified"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/images-ubyte","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/labels-ubyte","binary":true,"status":"added"}]}