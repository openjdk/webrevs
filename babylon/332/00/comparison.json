{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -60,1 +61,1 @@\n-                    attributeMap);\n+                    attributeMap, Arena.ofAuto());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxInterpreter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -135,0 +135,4 @@\n+        return execute(l, codeLambda, Arena.ofAuto());\n+    }\n+\n+    public static <T> Tensor<T> execute(MethodHandles.Lookup l, OnnxFunction<Tensor<T>> codeLambda, Arena sessionArena) {\n@@ -146,1 +150,2 @@\n-        try (var session = getInstance().createSession(model.protoModel())) {\n+        try {\n+            var session = getInstance().createSession(model.protoModel(), sessionArena);\n@@ -271,1 +276,1 @@\n-    public List<Tensor> runOp(String opName, List<Tensor> inputValues, int numOutputs, Map<String, Object> attributes) {\n+    public List<Tensor> runOp(String opName, List<Tensor> inputValues, int numOutputs, Map<String, Object> attributes, Arena sessionArena) {\n@@ -281,3 +286,2 @@\n-        try (var session = createSession(protoModel)) {\n-            return session.run(inputValues);\n-        }\n+        return createSession(protoModel, sessionArena)\n+                .run(inputValues);\n@@ -286,1 +290,1 @@\n-    public List<Tensor> run(Block block, List<Tensor> inputValues) {\n+    public List<Tensor> run(Block block, List<Tensor> inputValues, Arena sessionArena) {\n@@ -288,3 +292,2 @@\n-        try (var session = createSession(protoModel)) {\n-            return session.run(inputValues);\n-        }\n+        return createSession(protoModel, sessionArena)\n+                .run(inputValues);\n@@ -293,2 +296,2 @@\n-    public Session createSession(String modelPath) {\n-        return createSession(modelPath, createSessionOptions());\n+    public Session createSession(String modelPath, Arena sessionArena) {\n+        return createSession(modelPath, createSessionOptions(sessionArena), sessionArena);\n@@ -297,2 +300,2 @@\n-    public Session createSession(String modelPath, SessionOptions options) {\n-        return new Session(retAddr(OrtApi.CreateSession(runtimeAddress, envAddress, arena.allocateFrom(modelPath), options.sessionOptionsAddress, ret)));\n+    public Session createSession(String modelPath, SessionOptions options, Arena sessionArena) {\n+        return new Session(retAddr(OrtApi.CreateSession(runtimeAddress, envAddress, sessionArena.allocateFrom(modelPath), options.sessionOptionsAddress, ret)), sessionArena);\n@@ -301,2 +304,2 @@\n-    public Session createSession(byte[] model) {\n-        return createSession(model, createSessionOptions());\n+    public Session createSession(byte[] model, Arena sessionArena) {\n+        return createSession(model, createSessionOptions(sessionArena), sessionArena);\n@@ -305,2 +308,2 @@\n-    private Session createSession(byte[] model, SessionOptions options) {\n-        return new Session(retAddr(OrtApi.CreateSessionFromArray(runtimeAddress, envAddress, arena.allocateFrom(ValueLayout.JAVA_BYTE, model), model.length, options.sessionOptionsAddress, ret)));\n+    private Session createSession(byte[] model, SessionOptions options, Arena sessionArena) {\n+        return new Session(retAddr(OrtApi.CreateSessionFromArray(runtimeAddress, envAddress, sessionArena.allocateFrom(ValueLayout.JAVA_BYTE, model), model.length, options.sessionOptionsAddress, ret)), sessionArena);\n@@ -309,1 +312,1 @@\n-    public final class Session implements AutoCloseable {\n+    public final class Session {\n@@ -312,0 +315,1 @@\n+        private final Arena sessionArena;\n@@ -313,2 +317,4 @@\n-        private Session(MemorySegment sessionAddress) {\n-            this.sessionAddress = sessionAddress;\n+        private Session(MemorySegment sessionAddress, Arena sessionArena) {\n+            this.sessionArena = sessionArena;\n+            this.sessionAddress = sessionAddress.reinterpret(sessionArena,\n+                    session -> OrtApi.ReleaseSession(runtimeAddress, session));\n@@ -338,2 +344,2 @@\n-            var inputNames = arena.allocate(C_POINTER, inputLen);\n-            var inputs = arena.allocate(C_POINTER, inputLen);\n+            var inputNames = sessionArena.allocate(C_POINTER, inputLen);\n+            var inputs = sessionArena.allocate(C_POINTER, inputLen);\n@@ -342,1 +348,1 @@\n-                inputNames.setAtIndex(C_POINTER, index, arena.allocateFrom(getInputName(i)));\n+                inputNames.setAtIndex(C_POINTER, index, sessionArena.allocateFrom(getInputName(i)));\n@@ -345,2 +351,2 @@\n-            var outputNames = arena.allocate(C_POINTER, outputLen);\n-            var outputs = arena.allocate(C_POINTER, outputLen);\n+            var outputNames = sessionArena.allocate(C_POINTER, outputLen);\n+            var outputs = sessionArena.allocate(C_POINTER, outputLen);\n@@ -348,1 +354,1 @@\n-                outputNames.setAtIndex(C_POINTER, i, arena.allocateFrom(getOutputName(i)));\n+                outputNames.setAtIndex(C_POINTER, i, sessionArena.allocateFrom(getOutputName(i)));\n@@ -355,1 +361,1 @@\n-                        .reinterpret(arena, null));\n+                        .reinterpret(sessionArena, value -> OrtApi.ReleaseValue(runtimeAddress, value)));\n@@ -359,5 +365,0 @@\n-\n-        @Override\n-        public void close() {\n-            OrtApi.ReleaseSession(runtimeAddress, sessionAddress);\n-        }\n@@ -393,2 +394,3 @@\n-    public SessionOptions createSessionOptions() {\n-        return new SessionOptions(retAddr(OrtApi.CreateSessionOptions(runtimeAddress, ret)));\n+    public SessionOptions createSessionOptions(Arena sessionArena) {\n+        return new SessionOptions(retAddr(OrtApi.CreateSessionOptions(runtimeAddress, ret))\n+                .reinterpret(sessionArena, opts -> OrtApi.ReleaseSessionOptions(runtimeAddress, opts)));\n@@ -433,4 +435,6 @@\n-        if (!status.equals(MemorySegment.NULL)) {\n-            status = status.reinterpret(Long.MAX_VALUE);\n-            if (status.get(C_INT, 0) != 0) {\n-                throw new RuntimeException(status.getString(C_INT.byteSize()));\n+        try {\n+            if (!status.equals(MemorySegment.NULL)) {\n+                status = status.reinterpret(Long.MAX_VALUE);\n+                if (status.get(C_INT, 0) != 0) {\n+                    throw new RuntimeException(status.getString(C_INT.byteSize()));\n+                }\n@@ -438,0 +442,2 @@\n+        } finally {\n+            OrtApi.ReleaseStatus(runtimeAddress, status);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":44,"deletions":38,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.foreign.Arena;\n@@ -150,9 +151,13 @@\n-                    var prediction = OnnxRuntime.execute(MethodHandles.lookup(),\n-                            () -> cnn(imageTensor));\n-\n-                    var result = prediction.data().toArray(ValueLayout.JAVA_FLOAT);\n-                    var report = new StringBuilder(\"<html>\");\n-                    for (int i = 0; i < result.length; i++) {\n-                        var w = result[i];\n-                        report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n-                                .formatted((int)(20 * w) + 3, COLORS[(int)(5.99 * w)], i, 100 * w));\n+                    try (Arena onnxSession = Arena.ofConfined()) {\n+                        var prediction = OnnxRuntime.execute(MethodHandles.lookup(),\n+                                () -> cnn(imageTensor), onnxSession);\n+\n+                        var result = prediction.data().toArray(ValueLayout.JAVA_FLOAT);\n+                        var report = new StringBuilder(\"<html>\");\n+                        for (int i = 0; i < result.length; i++) {\n+                            var w = result[i];\n+                            report.append(\"&nbsp;<font size=\\\"%d\\\" color=\\\"#%s\\\">%d<\/font>&nbsp;(%.1f%%)&nbsp;<br><br><br>\"\n+                                    .formatted((int) (20 * w) + 3, COLORS[(int) (5.99 * w)], i, 100 * w));\n+                        }\n+                        results.setText(report.toString());\n+                        cleanFlag.set(true);\n@@ -160,2 +165,0 @@\n-                    results.setText(report.toString());\n-                    cleanFlag.set(true);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/MNISTDemo.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import java.lang.foreign.Arena;\n@@ -17,4 +18,6 @@\n-        try (var absOp = ort.createSession(build(\n-                List.of(tensorInfo(\"x\", FLOAT.id)),\n-                List.of(node(\"Abs\", List.of(\"x\"), List.of(\"y\"), Map.of())),\n-                List.of(\"y\")));\n+        try (Arena sessionArena = Arena.ofConfined()) {\n+            var absOp = ort.createSession(build(\n+                    List.of(tensorInfo(\"x\", FLOAT.id)),\n+                    List.of(node(\"Abs\", List.of(\"x\"), List.of(\"y\"), Map.of())),\n+                    List.of(\"y\")), sessionArena);\n+\n@@ -24,1 +27,1 @@\n-                List.of(\"y\")))) {\n+                List.of(\"y\")), sessionArena);\n@@ -59,1 +62,2 @@\n-        try (var ifOp = ort.createSession(build(\n+        try (Arena sessionArena = Arena.ofConfined()) {\n+        var ifOp = ort.createSession(build(\n@@ -70,1 +74,1 @@\n-                List.of(\"y\")))) {\n+                List.of(\"y\")), sessionArena);\n@@ -82,9 +86,10 @@\n-        try (var forOp = ort.createSession(build(\n-                List.of(tensorInfo(\"max\", INT64.id), tensorInfo(\"cond\", BOOL.id), tensorInfo(\"a\", INT64.id)),\n-                List.of(node(\"Loop\", List.of(\"max\", \"cond\", \"a\"), List.of(\"a_out\"), Map.of(\n-                        \"body\", graph(\n-                                List.of(scalarInfo(\"i\", INT64.id), scalarInfo(\"cond_in\", BOOL.id), tensorInfo(\"a_in\", INT64.id)),\n-                                List.of(node(\"Identity\", List.of(\"cond_in\"), List.of(\"cond_out\"), Map.of()),\n-                                        node(\"Add\", List.of(\"a_in\", \"a_in\"), List.of(\"a_out\"), Map.of())),\n-                                List.of(\"cond_out\", \"a_out\"))))),\n-                List.of(\"a_out\")))) {\n+        try (Arena sessionArena = Arena.ofConfined()) {\n+            var forOp = ort.createSession(build(\n+                    List.of(tensorInfo(\"max\", INT64.id), tensorInfo(\"cond\", BOOL.id), tensorInfo(\"a\", INT64.id)),\n+                    List.of(node(\"Loop\", List.of(\"max\", \"cond\", \"a\"), List.of(\"a_out\"), Map.of(\n+                            \"body\", graph(\n+                                    List.of(scalarInfo(\"i\", INT64.id), scalarInfo(\"cond_in\", BOOL.id), tensorInfo(\"a_in\", INT64.id)),\n+                                    List.of(node(\"Identity\", List.of(\"cond_in\"), List.of(\"cond_out\"), Map.of()),\n+                                            node(\"Add\", List.of(\"a_in\", \"a_in\"), List.of(\"a_out\"), Map.of())),\n+                                    List.of(\"cond_out\", \"a_out\"))))),\n+                    List.of(\"a_out\")), sessionArena);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/RuntimeTest.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"}]}