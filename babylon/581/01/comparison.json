{"files":[{"patch":"@@ -282,1 +282,5 @@\n-     * Constructs an operation by copying given operation.\n+     * Constructs an operation from a given operation.\n+     * <p>\n+     * The constructor defers to the {@link Op#Op(List) operands} constructor passing a list of values computed, in\n+     * order, by mapping the given operation's operands using the copy context. The constructor also assigns the new\n+     * operation's location to the given operation's location, if any.\n@@ -284,1 +288,1 @@\n-     * @param that the operation to copy.\n+     * @param that the given operation.\n@@ -286,2 +290,0 @@\n-     * @implSpec The default implementation calls the constructor with the operation's name, result type, and a list\n-     * values computed, in order, by mapping the operation's operands using the copy context.\n@@ -294,25 +296,0 @@\n-    \/**\n-     * Copies this operation and its bodies, if any.\n-     * <p>\n-     * The returned operation is structurally identical to this operation and is otherwise independent\n-     * of the values declared and used.\n-     *\n-     * @return the copied operation.\n-     *\/\n-    public Op copy() {\n-        return transform(CopyContext.create(), OpTransformer.COPYING_TRANSFORMER);\n-    }\n-\n-    \/**\n-     * Copies this operation and its bodies, if any.\n-     * <p>\n-     * The returned operation is structurally identical to this operation and is otherwise independent\n-     * of the values declared and used.\n-     *\n-     * @param cc the copy context.\n-     * @return the copied operation.\n-     *\/\n-    public Op copy(CopyContext cc) {\n-        return transform(cc, OpTransformer.COPYING_TRANSFORMER);\n-    }\n-\n@@ -324,0 +301,2 @@\n+     * @apiNote\n+     * To copy an operation use the {@link OpTransformer#COPYING_TRANSFORMER copying transformer}.\n@@ -332,1 +311,1 @@\n-     * Constructs an operation with a name and list of operands.\n+     * Constructs an operation with a list of operands.\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":9,"deletions":30,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-            block.context().mapValue(op.result(), block.op(op.copy(cc)));\n+            block.context().mapValue(op.result(), block.op(op.transform(cc, OpTransformer.COPYING_TRANSFORMER)));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/UnresolvedTypesTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -55,1 +56,1 @@\n-        Op copy = f.copy();\n+        Op copy = f.transform(CopyContext.create(), OpTransformer.COPYING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}