{"files":[{"patch":"@@ -233,1 +233,1 @@\n-        Optional<?> localRef = codeModel;\n+        Optional<?> localRef = root.codeModel;\n@@ -236,1 +236,1 @@\n-                localRef = codeModel;\n+                localRef = root.codeModel;\n@@ -239,1 +239,1 @@\n-                    codeModel = localRef = op;\n+                    root.codeModel = localRef = op;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -20,0 +20,3 @@\n+    @CodeReflection\n+    static void g() {\n+    }\n@@ -22,1 +25,1 @@\n-    void test() throws NoSuchMethodException {\n+    void testInstancesReflectSameMethodHaveSameModel() throws NoSuchMethodException {\n@@ -25,3 +28,3 @@\n-        CoreOp.FuncOp funcOp = Op.ofMethod(f).orElseThrow();\n-        CoreOp.FuncOp funcOp2 = Op.ofMethod(f2).orElseThrow();\n-        Assert.assertSame(funcOp, funcOp2);\n+        CoreOp.FuncOp fm = Op.ofMethod(f).orElseThrow();\n+        CoreOp.FuncOp fm2 = Op.ofMethod(f2).orElseThrow();\n+        Assert.assertSame(fm, fm2);\n@@ -30,2 +33,10 @@\n-    \/\/ different Method objects that rep the same java method, have different code models\n-    \/\/ code model not unique accross multiple Method objects that rep the same thing\n+    @Test\n+    void testInstancesReflectDiffMethodsHaveDiffModels() throws NoSuchMethodException {\n+        Method f = this.getClass().getDeclaredMethod(\"f\");\n+        CoreOp.FuncOp fm = Op.ofMethod(f).orElseThrow();\n+\n+        Method g = this.getClass().getDeclaredMethod(\"g\");\n+        CoreOp.FuncOp gm = Op.ofMethod(g).orElseThrow();\n+\n+        Assert.assertNotSame(gm, fm);\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/MethodModelTest.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"}]}