{"files":[{"patch":"@@ -134,0 +134,1 @@\n+               auto openclBuffer = new OpenCLBuffer(this, arg);\n@@ -136,1 +137,8 @@\n-\n+                }else{\n+                     if (INFO){\n+                        if (arg->value.buffer.state == 1) { \/\/Java described this as dirty\n+                            std::cout << \"JAVA_DIRTY !\"<<std::endl;\n+                         }else{\n+                            std::cout << \"NOT JAVA_DIRTY\"<<std::endl;\n+                          }\n+                     }\n@@ -138,1 +146,0 @@\n-                auto openclBuffer = new OpenCLBuffer(this, arg);\n","filename":"hat\/backends\/opencl\/cpp\/opencl_backend.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -64,0 +66,2 @@\n+\n+\n@@ -135,0 +139,9 @@\n+    public void clearRuntimeInfo() {\n+        runtimeInfo = new RuntimeInfo();\n+    }\n+\n+    public static class RuntimeInfo{\n+        public Set<Buffer> javaDirty = new HashSet<>();\n+        Set<Buffer> gpuDirty = new HashSet<>();\n+    }\n+    public  RuntimeInfo runtimeInfo = null;\n@@ -137,1 +150,4 @@\n-        \/\/System.out.println(\"preMutate \" + b);\n+       \/\/ System.out.println(\"preMutate \" + b);\n+        if (runtimeInfo.gpuDirty.contains(b)){\n+            throw new IllegalStateException(\"We want to mutate a buffer on the java side but it is marked as gpu dirty.\");\n+        }\n@@ -142,0 +158,1 @@\n+        runtimeInfo.javaDirty.add(b);\n@@ -145,1 +162,4 @@\n-        \/*System.out.println(\"preAccess \" + b);*\/\n+        \/\/System.out.println(\"preAccess \" + b);\n+        if (runtimeInfo.gpuDirty.contains(b)){\n+            throw new IllegalStateException(\"We want to access a buffer on the java side but it is marked as gpu dirty.\");\n+        }\n@@ -149,1 +169,1 @@\n-        \/*System.out.println(\"postAccess \" + b);*\/\n+       \/\/ System.out.println(\"postAccess \" + b);\n@@ -153,1 +173,5 @@\n-        \/*System.out.println(\"preEscape \" + b);*\/\n+        \/\/System.out.println(\"preEscape \" + b);\n+\n+        if (runtimeInfo.gpuDirty.contains(b)){\n+            throw new IllegalStateException(\"We called a method which escapes a buffer on the java side but it is marked as gpu dirty.\");\n+        }\n@@ -156,1 +180,2 @@\n-        \/*System.out.println(\"postEscape \" + b);*\/\n+        \/\/System.out.println(\"postEscape \" + b);\n+        runtimeInfo.javaDirty.add(b);\n","filename":"hat\/hat\/src\/main\/java\/hat\/ComputeContext.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.ComputeContext;\n@@ -63,1 +64,1 @@\n-            this.argArray = ArgArray.create(kernelCallGraph.computeContext.accelerator, ndRangeAndArgs);\n+            this.argArray = ArgArray.create(kernelCallGraph.computeContext.accelerator, kernelCallGraph.computeContext.runtimeInfo, ndRangeAndArgs);\n@@ -69,1 +70,1 @@\n-            ArgArray.update(argArray, args);\n+            ArgArray.update(argArray, kernelCallGraph.computeContext.runtimeInfo, args);\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/C99NativeBackend.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+        computeContext.clearRuntimeInfo();\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/NativeBackend.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.ComputeContext;\n@@ -264,1 +265,1 @@\n-    static ArgArray create(Accelerator accelerator, Object... args) {\n+    static ArgArray create(Accelerator accelerator,ComputeContext.RuntimeInfo runtimeInfo, Object... args) {\n@@ -294,1 +295,1 @@\n-        update(argArray, args);\n+        update(argArray, runtimeInfo,args);\n@@ -298,1 +299,3 @@\n-    static void update(ArgArray argArray, Object... args) {\n+    static void update(ArgArray argArray, ComputeContext.RuntimeInfo runtimeInfo, Object... args) {\n+        final byte javaDirty = 1;\n+        final byte javaClean = 0;\n@@ -319,0 +322,1 @@\n+                    buf.state(runtimeInfo.javaDirty.contains(buffer)?javaDirty:javaClean);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/ArgArray.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}