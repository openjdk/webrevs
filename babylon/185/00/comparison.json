{"files":[{"patch":"@@ -1198,3 +1198,4 @@\n-                \/\/ Map the lambda's parent block to the quoted block\n-                \/\/ We are copying lop in the context of the quoted block\n-                qb.context().mapBlock(lop.parentBlock(), qb);\n+                \/\/ Map the entry block of the lambda's ancestor body to the quoted block\n+                \/\/ We are copying lop in the context of the quoted block, the block mapping\n+                \/\/ ensures the use of captured values are reachable when building\n+                qb.context().mapBlock(lop.ancestorBody().entryBlock(), qb);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng TestNestedCapturingLambda\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.Quotable;\n+import java.lang.reflect.code.bytecode.BytecodeGenerator;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.runtime.CodeReflection;\n+import java.util.Optional;\n+import java.util.function.IntSupplier;\n+import java.util.stream.Stream;\n+\n+public class TestNestedCapturingLambda {\n+\n+    @FunctionalInterface\n+    interface QIntSupplier extends IntSupplier, Quotable {\n+    }\n+\n+    @CodeReflection\n+    static public int f(int a) {\n+        if (a > 0) {\n+            QIntSupplier s = () -> a;\n+            test(s, a);\n+            return s.getAsInt();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    static void test(QIntSupplier s, int a) {\n+        @SuppressWarnings(\"unchecked\")\n+        CoreOp.Var<Integer> capture = (CoreOp.Var<Integer>) s.quoted().capturedValues().values().iterator().next();\n+        Assert.assertEquals(capture.value().intValue(), a);\n+    }\n+\n+    @Test\n+    public void testf() throws Throwable {\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n+\n+        MethodHandle mh = generate(f);\n+\n+        Assert.assertEquals((int) mh.invoke(42), f(42));\n+        Assert.assertEquals((int) mh.invoke(-1), f(-1));\n+    }\n+\n+    static MethodHandle generate(CoreOp.FuncOp f) {\n+        f.writeTo(System.out);\n+\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n+        lf.writeTo(System.out);\n+\n+        return BytecodeGenerator.generate(MethodHandles.lookup(), lf);\n+    }\n+\n+    static CoreOp.FuncOp getFuncOp(String name) {\n+        Optional<Method> om = Stream.of(TestNestedCapturingLambda.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestNestedCapturingLambda.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}