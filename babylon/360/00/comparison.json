{"files":[{"patch":"@@ -57,1 +57,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true);\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true,true);\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true);\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true, true);\n","filename":"hat\/backends\/ffi\/mock\/src\/main\/java\/hat\/backend\/ffi\/MockBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-        \/\/System.out.println(\"OpenCL backend received computeContext\");\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, config.isSHOW_COMPUTE_MODEL());\n+       \/\/ System.out.println(\"OpenCL backend received computeContext minimizing = \"+ config.isMINIMIZE_COPIES());\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, config.isSHOW_COMPUTE_MODEL(), config.isMINIMIZE_COPIES());\n@@ -99,2 +99,6 @@\n-        if (config.isMINIMIZE_COPIES()) {\n-            if (b.isDeviceDirty()) {\n+\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is premutate being called if we are not minimizing buffer copies\");\n+            \/\/System.exit(1);\n+        }\n+        if (b.isDeviceDirty()) {\n@@ -107,1 +111,1 @@\n-        }\n+\n@@ -112,2 +116,2 @@\n-        if (config.isMINIMIZE_COPIES()) {\n-            b.setHostDirty();\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is postmutate being called if we are not minimizing buffer copies\");\n@@ -115,0 +119,3 @@\n+\n+            b.setHostDirty();\n+\n@@ -119,1 +126,4 @@\n-        if (config.isMINIMIZE_COPIES()) {\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is pre access being called if we are not minimizing buffer copies\");\n+        }\n+\n@@ -126,1 +136,0 @@\n-        }\n@@ -129,0 +138,1 @@\n+\n@@ -131,0 +141,3 @@\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is postaccess being called if we are not minimizing buffer copies\");\n+        }\n@@ -136,1 +149,4 @@\n-        if (config.isMINIMIZE_COPIES()) {\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is preEscape being called if we are not minimizing buffer copies\");\n+        }\n+\n@@ -144,1 +160,1 @@\n-        }\/\/  we have to assume the escapee is about to be accessed\n+\n@@ -149,2 +165,2 @@\n-        if (config.isMINIMIZE_COPIES()) {\n-            b.setHostDirty(); \/\/ We have no choice but to assume escapee was modified by the call\n+        if (!config.isMINIMIZE_COPIES()) {\n+            throw new IllegalStateException(\"why is postEscape being called if we are not minimizing buffer copies\");\n@@ -152,0 +168,3 @@\n+\n+            b.setHostDirty(); \/\/ We have no choice but to assume escapee was modified by the call\n+\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":32,"deletions":13,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-    private static final int MINIMIZE_COPIES_BIT = 1 << 16;\n+    private static final int MINIMIZE_COPIES_BIT = 1 << START_BIT_IDX;\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true);\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true,true);\n","filename":"hat\/backends\/ffi\/ptx\/src\/main\/java\/hat\/backend\/ffi\/PTXBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true);\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, true,true);\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,7 @@\n-     +--hat                        * Note maven style layout\n+     +--hat\n+     |    + Script.java\n+     |    + run.java + @run\n+     |    + bld.java + @bld\n+     |    + clean.java + @bld\n+     |\n+     +--hat-core                      * Note maven style layout\n","filename":"hat\/docs\/hat-01-01-project-layout.md","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-mvn clean  compile jar:jar install\n+mvn clean  compile package install\n@@ -115,1 +115,1 @@\n-The provided `hatrun` java launch script simplifies this somewhat, we just need to pass the backend name `ffi-opencl` and the package name `mandel`\n+The provided `hat\/run` java launch script simplifies this somewhat, we just need to pass the backend name `ffi-opencl` and the package name `mandel`\n@@ -119,1 +119,1 @@\n-java @bldr\/hatrun ffi-opencl mandel\n+java @hat\/run ffi-opencl mandel\n","filename":"hat\/docs\/hat-01-03-building-hat-with-maven.md","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-# Building HAT with Bldr\n+# Building HAT with Script\n@@ -25,1 +25,1 @@\n-but it is possible that maven support will be removed if the `Bldr` approach takes off.\n+but it is possible that maven support will be removed if the `Script` approach takes off.\n@@ -86,1 +86,1 @@\n-java @bldr\/bld\n+java @hat\/bld\n@@ -94,1 +94,1 @@\n-java @bld\/args bld\n+java @hat\/bld\n@@ -132,1 +132,1 @@\n-The `hatrun` script can also be used which simply needs the backend\n+The `hat\/run.java` script can also be used which simply needs the backend\n@@ -136,1 +136,1 @@\n-java @bldr\/hatrun ffi-opencl mandel\n+java @hat\/run.java ffi-opencl mandel\n@@ -142,1 +142,1 @@\n-java @bldr\/args hatrun headless opencl mandel\n+java @hat\/run headless opencl mandel\n@@ -149,1 +149,1 @@\n-`bldr\/Bldr.java` is an evolving set of static methods and types required (so far.. ;) )\n+`hat\/Script.java` is an evolving set of static methods and types required (so far.. ;) )\n@@ -157,1 +157,1 @@\n-The `bld` script (really java source) can be run like this\n+The `hat\/bld.java` script (really java source) can be run like this\n@@ -163,1 +163,1 @@\n-In our case the  magic is under the `hat\/bldr`subdir\n+In our case the  magic is under the `hat`subdir\n@@ -165,1 +165,1 @@\n-We also have a handy `bldr\/XXXX` which allows us to avoid specifying commmon args `--enable-preview --source 24` eash time we launch a script\n+We also have a handy `hat\/XXXX` which allows us to avoid specifying common args `--enable-preview --source 24` eash time we launch a script\n@@ -169,8 +169,9 @@\n-├── bldr\n-|   ├── Bldr.java\n-|   ├── sanity      (text)       \"--enable-preview --source 24 sanity\"\n-|   ├── hatrun      (text)       \"--enable-preview --source 24 hatrun\"\n-|   ├── bld         (text)       \"--enable-preview --source 24 bld\"\n-└── bld\n-└── hatrun\n-└── sanity\n+├── hat\n+|   ├── Script.java\n+|   ├── sanity      (the args for sanity.java)  \"--enable-preview --source 24 sanity\"\n+|   |-- sanity.java (the script)\n+|   ├── run         (the args for sanity.java)  \"--enable-preview --source 24 hatrun\"\n+|   |-- run.java    (the script)\n+|   ├── bld         (the args for bld.java)      \"--enable-preview --source 24 bld\"\n+|   ├── bld.java    (the script)\n+\n@@ -181,1 +182,1 @@\n-java @bldr\/bld\n+java @hat\/bld\n@@ -186,1 +187,1 @@\n-java --enable-preview --source 24 bld\n+java --enable-preview --source 24 hat\/bld.java\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-                ,new OpenCLBackend(of(PROFILE(), GPU(), TRACE())));\n+                ,new OpenCLBackend(of(PROFILE(),  TRACE())));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Mesh.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-                        GPU(),\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/MinBufferTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.backend.Backend;\n@@ -213,0 +214,8 @@\n+        static void  updateUI(long now, CellGrid cellGrid, Viewer viewer, int from) {\n+            viewer.controls.updateCounters(now);\n+            cellGrid.copySliceTo(viewer.mainPanel.rasterData, from);\n+            viewer.state.lastUIUpdateCompleted =false;\n+            viewer.mainPanel.repaint();\n+            viewer.state.timeOfLastUIUpdate = now;\n+        }\n+\n@@ -235,1 +244,1 @@\n-                    \/\/    System.out.println(\"skipped \" + skipped);\n+                        System.out.println(\"skipped \" + skipped);\n@@ -238,5 +247,2 @@\n-                    viewer.controls.updateCounters(now);\n-                    cellGrid.copySliceTo(viewer.mainPanel.rasterData, control.from());\n-                    viewer.state.lastUIUpdateCompleted =false;\n-                    viewer.mainPanel.repaint();\n-                    viewer.state.timeOfLastUIUpdate = now;\n+                    updateUI(now,cellGrid,viewer,control.from());\n+\n@@ -245,2 +251,0 @@\n-\n-\n@@ -286,5 +290,6 @@\n-                    viewer.controls.updateCounters(now);\n-                    cellGrid.copySliceTo(viewer.mainPanel.rasterData, control.from());\n-                    viewer.state.lastUIUpdateCompleted=false;\n-                    viewer.mainPanel.repaint();\n-                    viewer.state.timeOfLastUIUpdate = now;\n+                    updateUI(now, cellGrid,viewer,control.from());\n+                   \/\/ viewer.controls.updateCounters(now);\n+                  \/\/  cellGrid.copySliceTo(viewer.mainPanel.rasterData, control.from());\n+                  \/\/  viewer.state.lastUIUpdateCompleted=false;\n+                   \/\/ viewer.mainPanel.repaint();\n+                   \/\/ viewer.state.timeOfLastUIUpdate = now;\n@@ -300,3 +305,3 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),FIRST\n-              \/\/  new OpenCLBackend(\"GPU,TRACE_COPIES,MINIMIZE_COPIES\")\n-             \/\/  new OpenCLBackend(\"GPU,TRACE_COPIES\")\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),\/\/ FIRST\n+                new OpenCLBackend(\"INFO,MINIMIZE_COPIES\")\n+            \/\/ new OpenCLBackend(\"INFO,SHOW_COMPUTE_MODEL\")\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Main.java","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    protected static FuncOpWrapper injectBufferTracking(CallGraph.ResolvedMethodCall computeMethod, boolean show) {\n+    protected static FuncOpWrapper injectBufferTracking(CallGraph.ResolvedMethodCall computeMethod, boolean show, boolean inject) {\n@@ -98,2 +98,1 @@\n-        boolean transform = true;\n-        if (transform) {\n+        if (inject) {\n@@ -139,0 +138,5 @@\n+        }else{\n+            if (show) {\n+                System.out.println(\"COMPUTE entrypoint (we will not be injecting buffer tracking...)...\");\n+                returnFOW.op().writeTo(System.out);\n+            }\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/ffi\/FFIBackend.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package bldr;\n+\n@@ -93,1 +93,1 @@\n-public class Bldr {\n+public class Script {\n@@ -879,1 +879,1 @@\n-            if (Bldr.os instanceof OS.Mac mac) {\n+            if (Script.os instanceof OS.Mac mac) {\n@@ -886,1 +886,1 @@\n-            if (Bldr.os instanceof OS.Linux linux) {\n+            if (Script.os instanceof OS.Linux linux) {\n@@ -893,1 +893,1 @@\n-            switch (Bldr.os) {\n+            switch (Script.os) {\n@@ -896,1 +896,1 @@\n-                default -> throw new IllegalStateException(\"Unexpected value: \" + Bldr.os);\n+                default -> throw new IllegalStateException(\"Unexpected value: \" + Script.os);\n@@ -1103,1 +1103,1 @@\n-            return source(Bldr.java.specVersion);\n+            return source(Script.java.specVersion);\n@@ -1700,1 +1700,1 @@\n-            this.javacResult = Bldr.javac(javacBuilder);\n+            this.javacResult = Script.javac(javacBuilder);\n@@ -2493,1 +2493,1 @@\n-        public interface CMakeProbeable extends Consumer<Bldr.CMakeProbe> {\n+        public interface CMakeProbeable extends Consumer<Script.CMakeProbe> {\n@@ -2598,1 +2598,1 @@\n-            public Bldr.CMakeProbe cmakeProbe;\n+            public Script.CMakeProbe cmakeProbe;\n@@ -2601,1 +2601,1 @@\n-            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+            public void accept(Script.CMakeProbe cmakeProbe) {\n@@ -2675,1 +2675,1 @@\n-            public Bldr.CMakeProbe cmakeProbe;\n+            public Script.CMakeProbe cmakeProbe;\n@@ -2678,1 +2678,1 @@\n-            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+            public void accept(Script.CMakeProbe cmakeProbe) {\n@@ -2734,1 +2734,1 @@\n-            public Bldr.CMakeProbe cmakeProbe;\n+            public Script.CMakeProbe cmakeProbe;\n@@ -2737,1 +2737,1 @@\n-            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+            public void accept(Script.CMakeProbe cmakeProbe) {\n@@ -2781,1 +2781,1 @@\n-            public Bldr.CMakeProbe cmakeProbe;\n+            public Script.CMakeProbe cmakeProbe;\n@@ -2784,1 +2784,1 @@\n-            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+            public void accept(Script.CMakeProbe cmakeProbe) {\n@@ -2835,1 +2835,1 @@\n-            public Bldr.CMakeProbe cmakeProbe;\n+            public Script.CMakeProbe cmakeProbe;\n@@ -2857,1 +2857,1 @@\n-                this.cmakeProbe = new Bldr.CMakeProbe(buildDir, capabilities);\n+                this.cmakeProbe = new Script.CMakeProbe(buildDir, capabilities);\n","filename":"hat\/hat\/Script.java","additions":19,"deletions":19,"binary":false,"changes":38,"previous_filename":"hat\/bldr\/Bldr.java","status":"copied"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/bld.java\n\\ No newline at end of file\n","filename":"hat\/hat\/bld","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,329 @@\n+\/*\n+ *\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import static java.lang.System.*;\n+\n+void main(String[] args) {\n+\n+    \/*\n+     *  .\/\n+     *    +--build\/                     All jars, native libs and executables\n+     *    |    +--cmake-build-debug\/    All intermediate cmake artifacts\n+     *    |\n+     *    +--stage\/\n+     *    |    +--repo\/                 All downloaded maven assets (if any)\n+     *    |    |\n+     *    |    +--jextract\/             All jextracted files\n+     *    |    |    +--opencl\n+     *    |    |    +--opengl\n+     *    |    |    +--cuda\n+     *    |\n+     *    +--wrap\/\n+     *    |    +--wrap\/                 All downloaded maven assets\n+     *    |    |    +--wrap\/                (*)\n+     *    |    |    +--clwrap\/              (*)\n+     *    |    |    +--glwrap\/              (*)\n+     *    |    |    +--cuwrap\/              (*)\n+     *    |    |\n+     *    |\n+     *    +--extractions\/\n+     *    |    +--opencl\/\n+     *    |    +--opengl\/\n+     *    |    +--cuda\/\n+     *    |\n+     *    +--hat-core                        * Note maven style layout\n+     *    |    +--src\/main\/java\n+     *    |    |    +--hat\/\n+     *    |    |\n+     *    |    +--src\/main\/test\n+     *    |         +--hat\/\n+     *    |\n+     *    +--backends\n+     *    |    +--java\n+     *    |    |    +--mt                    (*)\n+     *    |    |    +--seq                   (*)\n+     *    |    +--jextracted\n+     *    |    |    +--opencl                (*)\n+     *    |    +--ffi\n+     *    |         +--opencl                (*)\n+     *    |         +--ptx                   (*)\n+     *    |         +--mock                  (*)\n+     *    |         +--spirv                 (*)\n+     *    |         +--cuda                  (*)\n+     *    |         +--hip                   (*)\n+     *    |\n+     *    +--examples\n+     *    |    +--mandel                     (*)\n+     *    |    +--squares                    (*)\n+     *    |    +--heal                       (*)\n+     *    |    +--life                       (*)\n+     *    |    +--nbody                      (*)\n+     *    |    +--experiments                (*)\n+     *    |    +--violajones                 (*)\n+     *\n+     *\/\n+\n+    var dir = Script.DirEntry.current();\n+    var hatCoreDir = dir.existingDir(\"hat-core\");\n+    var backends = dir.existingDir(\"backends\");\n+    var examples = dir.existingDir(\"examples\");\n+    var wrapsDir = dir.existingDir(\"wrap\");\n+    var stageDir = dir.buildDir(\"stage\").create();\n+    var buildDir = Script.BuildDir.of(dir.path(\"build\")).create();\n+    var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+\n+    var openclCapability = Script.Capabilities.OpenCL.of();\n+    var openglCapability = Script.Capabilities.OpenGL.of();\n+    var cudaCapability = Script.Capabilities.CUDA.of();\n+    var hipCapability = Script.Capabilities.HIP.of();\n+    var jextractCapability = Script.Capabilities.JExtract.of();\/\/ or Capability.JExtract.of(Path.of(\"\/my\/jextract-22\/bin\/jextract\"));\n+    var cmakeCapability = Script.Capabilities.CMake.of();\n+\n+    Script.Capabilities capabilities = Script.Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);\n+\n+    if (cmakeCapability.available()) {\n+        cmakeCapability.probe(buildDir, capabilities);\n+    }\n+\n+    capabilities.capabilities().forEach(fw -> out.print( \"[\"+fw.name + (fw.available() ? \"\\u2714\" : \"\\u2715\") +\"]\"));\n+    out.println();\n+\n+    var verbose = false;\n+    var wrapJar= buildDir.jarFile(\"hat-wrap-1.0.jar\");\n+    var clWrapJar= buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n+    var glWrapJar= buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n+    var cuWrapJar= buildDir.jarFile(\"hat-cuwrap-1.0.jar\");\n+    var hatJar = buildDir.jarFile(\"hat-core-1.0.jar\");\n+\n+ var hatJavacOpts = Script.javacBuilder($ -> $\n+            .enable_preview()\n+            .add_modules(\"jdk.incubator.code\")\n+          \/\/  .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\", \"jdk.internal.vm.annotation\")\n+            .current_source()\n+    );\n+\n+    var hatJarOptions = Script.jarBuilder($ -> $\n+            .verbose(verbose)\n+    );\n+    Script.jar(hatJarOptions, jar -> jar\n+            .jarFile(hatJar)\n+            .maven_style_root(hatCoreDir)\n+            .javac(hatJavacOpts, javac -> {\n+            })\n+    );\n+\n+    Script.jar(jar -> jar\n+         .jarFile(wrapJar)\n+         .maven_style_root(wrapsDir.dir(\"wrap\"))\n+         .javac(javac -> javac.current_source())\n+    );\n+\n+    if (jextractCapability.available()) {\n+        if (openclCapability.available()) {\n+            if (!openclCapability.jarFile(buildDir).exists()) {\n+                if (!openclCapability.stage(stageDir).exists()) {\n+                    Script.jextract(jextractCapability.executable, $ -> $ .verbose(verbose) .capability(openclCapability,stageDir));\n+                }else{\n+                    out.println(\"Using previously extracted  \"+openclCapability.stage(buildDir).fileName());\n+                }\n+                Script.jar(jar -> jar\n+                    .jarFile(openclCapability.jarFile(buildDir))\n+                    .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openclCapability.stage(stageDir).path())))\n+\n+                );\n+            }else{\n+                out.println(\"Using existing extracted \"+openclCapability.jarFile(buildDir).fileName());\n+            }\n+            Script.jar(jar -> jar\n+               .jarFile(clWrapJar)\n+               .maven_style_root(wrapsDir.dir(\"clwrap\"))\n+               .javac(javac -> javac.current_source().class_path(wrapJar,hatJar, openclCapability.jarFile(buildDir)))\n+            );\n+        } else {\n+            out.println(\"This platform does not have OpenCL\");\n+        }\n+\n+        if (openglCapability.available()) {\n+            if (!openglCapability.jarFile(buildDir).exists()) {\n+                if (!openglCapability.stage(stageDir).exists()) {\n+                    Script.jextract(jextractCapability, $ -> $ .verbose(verbose) .capability(openglCapability, stageDir));\n+                }else{\n+                    out.println(\"Using previously extracted  \"+openglCapability.stage(buildDir).fileName());\n+                }\n+                Script.jar(jar -> jar\n+                        .jarFile(openglCapability.jarFile(buildDir))\n+                        .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openglCapability.stage(stageDir).path())))\n+                );\n+            }else{\n+                out.println(\"Using existing extracted \"+openglCapability.jarFile(buildDir).fileName());\n+            }\n+            Script.jar(jar -> jar\n+               .jarFile(glWrapJar)\n+               .maven_style_root(wrapsDir.dir(\"glwrap\"))\n+               .javac(javac -> javac\n+                  .current_source()\n+                  .exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"))\n+                  \/\/.exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"))\n+                  .class_path(wrapJar, openglCapability.jarFile(buildDir))\n+               )\n+            );\n+        } else {\n+            out.println(\"This platform does not have OpenGL\");\n+        }\n+\n+\n+        if (cudaCapability.available()) {\n+\n+        } else {\n+            out.println(\"This platform does not have CUDA\");\n+        }\n+    }\n+\n+    var backendJars = new ArrayList<Script.JarFile>();\n+\n+\n+    \/\/ Here we create all ffi-backend jars.\n+    var ffiBackends = backends.existingDir(\"ffi\");\n+    ffiBackends.subDirs()\n+            .filter(backend -> backend.failsToMatch(\"^.*(spirv|hip|shared|target|.idea)$\"))\n+            .forEach(backend -> {\n+                var ffiBackendJarFile = buildDir.jarFile(\"hat-backend-ffi-\" + backend.fileName() + \"-1.0.jar\");\n+                backendJars.add(ffiBackendJarFile);\n+                out.println(ffiBackendJarFile.fileName());\n+                Script.jar(hatJarOptions, jar -> jar\n+                        .jarFile(ffiBackendJarFile)\n+                        .maven_style_root(backend)\n+                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))\n+                );\n+            });\n+\n+    \/\/ Here we create jextracted-backend jars.\n+    var jextractedBackends = backends.existingDir(\"jextracted\");\n+    var jextractedBackendSharedDir = jextractedBackends.dir(\"shared\");\n+    out.println(\"Shared jextracted \"+jextractedBackendSharedDir.path());\n+    var jextractedSharedBackendJar=buildDir.jarFile(\"hat-backend-jextracted-shared-1.0.jar\");\n+    backendJars.add(jextractedSharedBackendJar);\n+    var jextractedBackendSharedResult = Script.jar(hatJarOptions, jar -> jar\n+          .jarFile(jextractedSharedBackendJar)\n+          .maven_style_root(jextractedBackendSharedDir)\n+          .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n+              .class_path(hatJar)\n+          )\n+    );\n+\n+    if (openclCapability.available()){\n+       var jextractedBackendOpenCLDir = jextractedBackends.dir(\"opencl\");\n+       out.println(\"OpenCL jextracted \"+jextractedBackendOpenCLDir.path());\n+       var jextractedOpenCLBackendJar = buildDir.jarFile(\"hat-backend-jextracted-opencl-1.0.jar\");\n+       backendJars.add(jextractedOpenCLBackendJar);\n+       Script.jar(hatJarOptions, jar -> jar\n+          .jarFile(jextractedOpenCLBackendJar)\n+          .maven_style_root(jextractedBackendOpenCLDir)\n+          .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n+              .class_path(hatJar, openclCapability.jarFile(buildDir), jextractedBackendSharedResult )\n+          )\n+       );\n+   }\n+\n+\n+    \/\/ Here we create all java backend jars.\n+    backends.existingDir(\"java\")\n+            .subDirs()\n+            .filter(backend -> backend.failsToMatch(\"^.*(target|.idea)$\"))\n+            .forEach(backend -> {\n+                var backendJavaJar = buildDir.jarFile(\"hat-backend-java-\" + backend.fileName() + \"-1.0.jar\");\n+                out.println(backendJavaJar.fileName());\n+                backendJars.add(backendJavaJar);\n+                Script.jar(hatJarOptions, jar -> jar\n+                        .jarFile(backendJavaJar)\n+                        .dir_list(backend.dir(\"src\/main\/resources\"))\n+                );\n+            });\n+\n+    backendJars.forEach(j->out.println(\" backend \"+j.path()));\n+\n+\n+    \/\/ here we create the example jars\n+    examples.subDirs()\n+            .filter(example -> example.failsToMatch(\"^.*(experiments|nbody|life|target|.idea)$\"))\n+            .forEach(example -> {\n+                var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n+                out.println(exampleJarFile.fileName());\n+                Script.jar(hatJarOptions, jar -> jar\n+                        .jarFile(exampleJarFile)\n+                        .maven_style_root(example)\n+                        .javac(hatJavacOpts, javac -> javac.class_path(hatJar))\n+                        .manifest(manifest -> manifest .main_class(example.fileName() + \".Main\"))\n+                );\n+            });\n+\n+\n+    if (jextractCapability.available() && openclCapability.available()) {\n+        var example = examples.dir(\"life\");\n+        var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n+        out.println(exampleJarFile.fileName());\n+        Script.jar(hatJarOptions, jar -> jar\n+                .jarFile(exampleJarFile)\n+                .maven_style_root(example)\n+                .javac(hatJavacOpts, javac -> javac\n+                   .class_path(hatJar, wrapJar, clWrapJar, openclCapability.jarFile(buildDir), buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"))\n+                )\n+        );\n+    }\n+\n+\n+    if (jextractCapability.available() && openclCapability.available() && openglCapability.available()) {\n+        var example = examples.dir(\"nbody\");\n+        var exampleJarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n+        out.println(exampleJarFile.fileName());\n+        Script.jar(hatJarOptions, jar -> jar\n+                .jarFile(exampleJarFile)\n+                .maven_style_root(example)\n+                .javac(hatJavacOpts, javac -> javac\n+                    .class_path( hatJar, wrapJar, clWrapJar, glWrapJar, openclCapability.jarFile(buildDir), openglCapability.jarFile(buildDir),buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"))\n+                )\n+        );\n+    }\n+\n+    if (cmakeCapability.available()) {\n+        if (!cmakeBuildDir.exists()) {\n+            Script.cmake($ -> $\n+                    .verbose(verbose)\n+                    .source_dir(ffiBackends)\n+                    .build_dir(cmakeBuildDir)\n+                    .copy_to(buildDir)\n+            );\n+        }\n+        Script.cmake($ -> $\n+                .build(cmakeBuildDir)\n+        );\n+    } else {\n+        out.println(\"No cmake available so we did not build ffi backend shared libs\");\n+    }\n+\n+}\n+\n","filename":"hat\/hat\/bld.java","additions":329,"deletions":0,"binary":false,"changes":329,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/clean.java\n","filename":"hat\/hat\/clean","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-\/* vim: set ft=java: \n+\/*\n@@ -27,1 +27,1 @@\n-import static bldr.Bldr.*;\n+\n@@ -30,1 +30,1 @@\n- var hatDir = DirEntry.current();\n+ var hatDir = Script.DirEntry.current();\n","filename":"hat\/hat\/clean.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"hat\/clean","status":"copied"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/mkpoms.java\n","filename":"hat\/hat\/mkpoms","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"","filename":"hat\/hat\/mkpoms.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/mkpoms","status":"copied"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/run.java\n","filename":"hat\/hat\/run","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/run.java ffi-opencl life\n","filename":"hat\/hat\/run-ffi-opencl-life","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -26,2 +26,1 @@\n-import static bldr.Bldr.*;  \n- \n+\n@@ -37,1 +36,1 @@\n-      class name is assumed to be package.Main  (i.e. mandel.main) \n+      class name is assumed to be package.Main  (i.e. mandel.main)\n@@ -47,1 +46,1 @@\n-  var hatDir =  DirEntry.current();\n+  var hatDir =  Script.DirEntry.current();\n@@ -59,1 +58,1 @@\n-  java(java -> java\n+  Script.java(java -> java\n@@ -72,1 +71,1 @@\n-        if (backends.dir(backendName.replace('-','\/')) instanceof DirEntry backend && backend.exists()) {\n+        if (backends.dir(backendName.replace('-','\/')) instanceof Script.DirEntry backend && backend.exists()) {\n@@ -81,1 +80,1 @@\n-           if (examples.dir(exampleName) instanceof DirEntry example && example.exists()) { haveBackend\n+           if (examples.dir(exampleName) instanceof Script.DirEntry example && example.exists()) { haveBackend\n","filename":"hat\/hat\/run.java","additions":6,"deletions":7,"binary":false,"changes":13,"previous_filename":"hat\/hatrun","status":"copied"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/sanity.java\n","filename":"hat\/hat\/sanity","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-\/* vim: set ft=java: \n+\/*\n@@ -27,2 +27,0 @@\n-import static bldr.Bldr.*;           \/\/ all the helpers are here \n-\n@@ -30,1 +28,1 @@\n-  DirEntry.current()\n+  Script.DirEntry.current()\n@@ -37,1 +35,1 @@\n-          .map(path->new SearchableTextFile(path))\n+          .map(path->new Script.SearchableTextFile(path))\n","filename":"hat\/hat\/sanity.java","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"hat\/sanity","status":"copied"},{"patch":"","filename":"hat\/hat\/scriptformat.xml","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/bldr\/scriptformat.xml","status":"copied"},{"patch":"","filename":"hat\/hat\/tst","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/bldr\/tst","status":"copied"},{"patch":"@@ -13,0 +13,1 @@\n+      <module name=\"hat\" options=\"--add-modules=jdk.incubator.code,java.compiler,java.xml --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED --add-exports=java.base\/jdk.internal=ALL-UNNAMED\" \/>\n@@ -21,1 +22,1 @@\n-<\/project>\n+<\/project>\n\\ No newline at end of file\n","filename":"hat\/intellij\/.idea\/compiler.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -10,0 +10,1 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/hat.iml\" filepath=\"$PROJECT_DIR$\/hat.iml\" \/>\n","filename":"hat\/intellij\/.idea\/modules.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -9,2 +9,0 @@\n-    <content url=\"file:\/\/$MODULE_DIR$\" \/>\n-    <content url=\"file:\/\/$MODULE_DIR$\/..\/docs\" \/>\n","filename":"hat\/intellij\/hat-core.iml","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}