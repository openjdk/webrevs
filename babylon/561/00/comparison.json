{"files":[{"patch":"@@ -1413,1 +1413,1 @@\n-        }else {\n+        } else {\n","filename":"hat\/hat\/Script.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -92,0 +94,23 @@\n+class Stats {\n+    int passed = 0;\n+    int failed = 0;\n+    public void incrementPassed(int val) {\n+        passed += val;\n+    }\n+    public void incrementFailed(int fail) {\n+        failed += fail;\n+    }\n+\n+    public int getPassed() {\n+        return passed;\n+    }\n+    public int getFailed() {\n+        return failed;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"Global passed: %d, failed: %d, pass-rate: %.2f%%\", passed, failed, ((float)(passed * 100 \/ (passed + failed))));\n+    }\n+}\n+\n@@ -131,0 +156,8 @@\n+    \/\/ Remove the previous report file:\n+    Path file = Paths.get(\"test_report.txt\");\n+    try {\n+        Files.deleteIfExists(file);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n@@ -157,0 +190,27 @@\n+\n+        \/\/ Final report\n+        String regex = \"passed: (\\\\d+), failed: (\\\\d+)\";\n+        Pattern pattern = Pattern.compile(regex);\n+        Stats stats = new Stats();\n+\n+        System.out.println(\"\\n\\n************************************************\");\n+        System.out.println(\"                 HAT Test Report \");\n+        System.out.println(\"************************************************\");\n+        try {\n+            List<String> lines = Files.readAllLines(file);\n+            for (String line : lines) {\n+                System.out.println(line);\n+\n+                Matcher matcher = pattern.matcher(line);\n+                if (matcher.find()) {\n+                    int passed = Integer.parseInt(matcher.group(1));\n+                    int fail = Integer.parseInt(matcher.group(2));\n+                    stats.incrementPassed(passed);\n+                    stats.incrementFailed(fail);\n+                }\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        System.out.println(stats);\n+\n","filename":"hat\/hat\/test.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -233,1 +233,0 @@\n-        System.out.println(accelerator);\n@@ -268,1 +267,0 @@\n-        System.out.println(accelerator);\n@@ -304,1 +302,0 @@\n-        System.out.println(accelerator);\n@@ -339,1 +336,0 @@\n-        System.out.println(accelerator);\n@@ -374,1 +370,0 @@\n-        System.out.println(accelerator);\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestMatMul.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n@@ -39,0 +42,2 @@\n+    public static final String TEST_REPORT_FILE_NAME = \"test_report.txt\";\n+\n@@ -105,0 +110,11 @@\n+    public static void dumpStats(StringBuilder builder, Stats stats) {\n+        try (BufferedWriter writer = new BufferedWriter(new FileWriter(TEST_REPORT_FILE_NAME, true))){\n+            writer.write(builder.toString());\n+            writer.write(stats.toString());\n+            writer.newLine();\n+            writer.newLine();\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -142,0 +158,1 @@\n+            dumpStats(builder, stats);\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/engine\/HatTestEngine.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-package oracle.code.hat;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-\n-import hat.Accelerator;\n-import hat.ComputeContext;\n-import hat.KernelContext;\n-import hat.backend.Backend;\n-import hat.buffer.S32Array;\n-import hat.ifacemapper.MappableIface;\n-import jdk.incubator.code.CodeReflection;\n-import org.junit.jupiter.api.Test;\n-\n-import java.lang.invoke.MethodHandles;\n-\n-public class AppTest {\n-\n-    @CodeReflection\n-    public static int squareit(int v) {\n-        return  v * v;\n-\n-    }\n-\n-    @CodeReflection\n-    public static void squareKernel(@MappableIface.RO KernelContext kc, @MappableIface.RW S32Array s32Array) {\n-        if (kc.x < kc.gsx){\n-            int value = s32Array.array(kc.x);       \/\/ arr[cc.x]\n-            s32Array.array(kc.x, squareit(value));  \/\/ arr[cc.x]=value*value\n-        }\n-    }\n-\n-    @CodeReflection\n-    public static void square(@MappableIface.RO ComputeContext cc, @MappableIface.RW S32Array s32Array) {\n-        cc.dispatchKernel(s32Array.length(),\n-                kc -> squareKernel(kc, s32Array)\n-        );\n-    }\n-\n-    @Test\n-    public void testHelloHat() {\n-\n-        final int size = 64;\n-        var accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n-        assertNotNull(accelerator);\n-\n-        var array = S32Array.create(accelerator, size);\n-        assertNotNull(array);\n-\n-        \/\/ Initialize array\n-        for (int i = 0; i < array.length(); i++) {\n-            array.array(i, i);\n-        }\n-\n-        \/\/ Blocking call\n-        accelerator.compute(cc -> AppTest.square(cc, array));\n-\n-        S32Array test = S32Array.create(accelerator, size);\n-        assertNotNull(test);\n-\n-        for (int i = 0; i < test.length(); i++) {\n-            test.array(i, squareit(i));\n-        }\n-\n-        for (int i = 0; i < test.length(); i++) {\n-            assertEquals(test.array(i), array.array(i));\n-        }\n-\n-    }\n-}\n","filename":"hat\/tests\/src\/test\/java\/oracle\/code\/hat\/AppTest.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}