{"files":[{"patch":"@@ -52,0 +52,1 @@\n+        <module>view<\/module>\n","filename":"hat\/examples\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"","filename":"hat\/examples\/view\/.gitignore","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/extractions\/opencl\/.gitignore","status":"copied"},{"patch":"@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+or visit www.oracle.com if you need additional information or have any\n+questions.\n+--><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n+    <!--Auto generated by mkpoms-->\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <packaging>jar<\/packaging>\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-view<\/artifactId>\n+    <version>1.0<\/version>\n+    <parent>\n+        <groupId>oracle.code<\/groupId>\n+        <artifactId>hat-examples<\/artifactId>\n+        <version>1.0<\/version>\n+    <\/parent>\n+    <dependencies>\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-core<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-example-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+    <\/dependencies>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-antrun-plugin<\/artifactId>\n+                <version>1.8<\/version>\n+                <executions>\n+                    <execution>\n+                        <id>1<\/id>\n+                        <phase>install<\/phase>\n+                        <goals>\n+                            <goal>run<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <target>\n+                                <copy file=\"target\/${project.artifactId}-${project.version}.jar\" toDir=\"${hat.build}\"\/>\n+                            <\/target>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+<\/project>\n","filename":"hat\/examples\/view\/pom.xml","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *  Based on mesh descriptions found here\n+ *      https:\/\/6502disassembly.com\/a2-elite\/\n+ *      https:\/\/6502disassembly.com\/a2-elite\/meshes.html\n+ *\n+ *\/\n+package view;\n+\n+import view.f32.F32Mesh3D;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+class EliteMeshReader {\n+    static Pattern remPattern = Pattern.compile(\"^ *REM(.*)$\");\n+    static Pattern colonPattern = Pattern.compile(\"^ *(:) *$\");\n+    static Pattern verticesPattern = Pattern.compile(\"^ *(vertices) *$\");\n+    static Pattern facesPattern = Pattern.compile(\"^ *(faces) *$\");\n+    static Pattern hueLigSatPattern = Pattern.compile(\"^ *(hue-lig-sat) *$\");\n+    static String hexRegex = \"((?:-?&[0-9a-fA-F][0-9a-fA-F])|0)\";\n+    static String commaRegex = \" *, *\";\n+    static String hexOrColorCommaRegex = \"(\" + hexRegex + \"|(?:(?:[a-zA-Z][a-zA-Z0-9]*)))\" + commaRegex;\n+\n+    static String hexCommaRegex = hexRegex + commaRegex;\n+    static String decRegex = \"([0-9]+)\";\n+    static String decCommaRegex = decRegex + commaRegex;\n+    static Pattern face6Pattern = Pattern.compile(\"^ *\"\n+            + hexOrColorCommaRegex + hexCommaRegex + hexCommaRegex + hexCommaRegex\n+            + \"6\" + commaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decRegex + \" *$\");\n+    static Pattern face5Pattern = Pattern.compile(\"^ *\"\n+            + hexOrColorCommaRegex + hexCommaRegex + hexCommaRegex + hexCommaRegex\n+            + \"5\" + commaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decRegex + \" *$\");\n+    static Pattern face4Pattern = Pattern.compile(\"^ *\"\n+            + hexOrColorCommaRegex + hexCommaRegex + hexCommaRegex + hexCommaRegex\n+            + \"4\" + commaRegex + decCommaRegex + decCommaRegex + decCommaRegex + decRegex + \" *$\");\n+    static Pattern face3Pattern = Pattern.compile(\"^ *\"\n+            + hexOrColorCommaRegex + hexCommaRegex + hexCommaRegex + hexCommaRegex\n+            + \"3\" + commaRegex + decCommaRegex + decCommaRegex + decRegex + \" *$\");\n+    static Pattern frontLaserVertexPattern = Pattern.compile(\"^ *\" + hexRegex + \" *$\");\n+    static Pattern vertexPattern = Pattern.compile(\"^ *\" + hexCommaRegex + hexCommaRegex + hexRegex + \" *$\");\n+\n+    static Pattern vertexCountPattern = Pattern.compile(\"^ *\" + hexCommaRegex + hexRegex + \" *$\");\n+    static Pattern namePattern = Pattern.compile(\"^ *([A-Za-z][0-9A-Za-z]+) *$\");\n+    static Pattern emptyPattern = Pattern.compile(\"^ *$\");\n+\n+    static String getGroups(Matcher m) {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i <= m.groupCount(); i++) {\n+            sb.append(\"#\" + i + \"{\" + m.group(i) + \"}\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    static void showGroups(String label, Matcher m) {\n+        System.out.println(label + \":  \" + getGroups(m));\n+    }\n+\n+    static float hex2Float(String s) {\n+        return (s.startsWith(\"-\"))? (-Integer.parseInt(s.substring(2), 16) \/ 64f): (Integer.parseInt(s.substring(1), 16) \/ 64f);\n+    }\n+\n+    enum State {AWAITING_NAME, AWAITING_LAZER, AWAITING_COUNTS, AWAITING_VERTICES, AWAITING_HUE_LIG_SAT, AWAITING_FACES}\n+\n+    static void load(String name) {\n+        try {\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(EliteMeshReader.class.getResourceAsStream(\"\/meshes\/Elite.txt\")));\n+\n+            State state = State.AWAITING_NAME;\n+            F32Mesh3D mesh= null;\n+            for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n+                line = line.trim();\n+                Matcher lm;\n+                if ((lm = remPattern.matcher(line)).matches()\n+                        || (lm = emptyPattern.matcher(line)).matches()\n+                        ||(lm = colonPattern.matcher(line)).matches()) {\n+                } else {\n+                    switch (state) {\n+                        case AWAITING_NAME: {\n+                            if ((lm = namePattern.matcher(line)).matches() && lm.group(1).equals(name)) {\n+                                state = State.AWAITING_LAZER;\n+                                mesh = F32Mesh3D.of(name);\n+\n+                            }\n+                            break;\n+                        }\n+                        case AWAITING_LAZER: {\n+                            if ((lm = frontLaserVertexPattern.matcher(line)).matches()) {\n+                                state = State.AWAITING_COUNTS;\n+                            }\n+                            break;\n+                        }\n+                        case AWAITING_COUNTS: {\n+                            if ((lm = vertexCountPattern.matcher(line)).matches()) {\n+                                state = State.AWAITING_VERTICES;\n+                            }\n+                            break;\n+                        }\n+                        case AWAITING_VERTICES: {\n+                            if ((lm = verticesPattern.matcher(line)).matches()) {\n+                                state = State.AWAITING_FACES;\n+                            }\n+                            break;\n+                        }\n+                        case AWAITING_FACES: {\n+                            if ((lm = vertexPattern.matcher(line)).matches()) {\n+                                mesh.vec3(hex2Float(lm.group(1)),  hex2Float(lm.group(2)), hex2Float(lm.group(3)));\n+                            } else if ((lm = facesPattern.matcher(line)).matches()) {\n+                                state = State.AWAITING_HUE_LIG_SAT;\n+                            }\n+                            break;\n+                        }\n+                        case AWAITING_HUE_LIG_SAT: {\n+                            if ((lm = face6Pattern.matcher(line)).matches()\n+                                 || (lm = face5Pattern.matcher(line)).matches()\n+                                    || (lm = face4Pattern.matcher(line)).matches()\n+                                    || (lm = face3Pattern.matcher(line)).matches()\n+                            ) {\n+                               \/\/ showGroups(\"FACE \", lm);\n+                            \/\/    int vN = F32Vec3.createVec3( hex2Float(lm.group(3)),hex2Float(lm.group(4)),hex2Float(lm.group(5)));\n+                                int v0 = mesh.vecEntries[Integer.parseInt(lm.group(6))];\n+                                int v1 = mesh.vecEntries[Integer.parseInt(lm.group(7))];\n+                                int v2 = mesh.vecEntries[Integer.parseInt(lm.group(8))];\n+\n+                                if (lm.groupCount()==8){\n+                                    mesh.tri(v0, v1, v2,  0x00ff00 );\n+                                }else {\n+                                    int v3 = mesh.vecEntries[Integer.parseInt(lm.group(9))];\n+                                    if (lm.groupCount() == 9) {\n+                                        mesh.quad(v0, v1,v2, v3,  0xff0000);\n+                                    } else {\n+                                        int v4 = mesh.vecEntries[Integer.parseInt(lm.group(10))];\n+                                        if (lm.groupCount() == 10) {\n+                                            mesh.pent(v0, v1, v2, v3, v4, 0x0000ff);\n+                                        } else {\n+                                            int v5 =  mesh.vecEntries[Integer.parseInt(lm.group(11))];\n+                                          \/\/  System.out.println(\"normals {\"+nx+\",\"+ny+\",\"+nz+\"} abinormal=\"+abinormal);\n+                                            mesh.hex(v0, v1, v2, v3, v4, v5, 0xfff000);\n+                                        }\n+                                    }\n+                                }\n+                            } else if ((lm = hueLigSatPattern.matcher(line)).matches()) {\n+                                mesh.fin();\n+                                return;\n+                            } else {\n+                                System.out.println(\"In \" + state + \" skipping \" + line);\n+                            }\n+                            break;\n+                        }\n+                        default: {\n+                           \/\/ System.out.println(\"WHAt \" + line);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/EliteMeshReader.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+Elite mesh info from\n+\n+   Based on mesh descriptions found here\n+       https:\/\/6502disassembly.com\/a2-elite\/\n+       https:\/\/6502disassembly.com\/a2-elite\/meshes.html\n+\n+ Based on this excellent youtube 3D graphics  series  https:\/\/www.youtube.com\/watch?v=ih20l3pJoeU\n+*\/\n+\n+package view;\n+\n+import view.f32.F32Mesh3D;\n+\n+public class Main {\n+\n+    public static void main(String[] args) {\n+        var vf = (args.length > 0 )\n+                ? ViewFrame.of(\"view\", Rasterizer.of(View.of(1024, 1024), Rasterizer.DisplayMode.WIRE), () -> EliteMeshReader.load(args[0]))\n+                : ViewFrame.of(\"view\", Rasterizer.of(View.of(1024, 1024), Rasterizer.DisplayMode.FILL), () -> {\n+            for (int x = -2; x < 4; x += 2) {\n+                for (int y = -2; y < 4; y += 2) {\n+                    for (int z = -2; z < 4; z += 2) {\n+                        F32Mesh3D.of(\"cubeoctahedron\").cubeoctahedron(x, y, z, 2).fin();\n+                    }\n+                }\n+            }\n+        });\n+\n+        while (true) {\n+            vf.update();\n+        }\n+    }\n+\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/Main.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *  Based on mesh descriptions found here\n+ *      https:\/\/6502disassembly.com\/a2-elite\/\n+ *      https:\/\/6502disassembly.com\/a2-elite\/meshes.html\n+ *\n+ *\/\n+package view;\n+\n+import view.i32.I32Triangle2D;\n+import view.i32.I32Vec2;\n+\n+import java.util.stream.IntStream;\n+\n+public class Rasterizer {\n+\n+\n+    public static final float deltaSquare = 10000f;\n+    public static final float thetaDelta = 0.0002f;\n+\n+\n+    public enum DisplayMode {\n+        FILL(false,true,false),\n+        WIRE(true,false,false),\n+        WIRE_SHOW_HIDDEN(true,false,true),\n+        WIRE_AND_FILL(true, true, false);\n+        final public boolean wire;\n+        final public boolean filled;\n+        final public boolean showHidden;\n+        DisplayMode(boolean wire, boolean filled, boolean showHidden){\n+            this.wire=wire;\n+            this.filled=filled;\n+            this.showHidden =showHidden;\n+        }\n+    }\n+\n+    public  final DisplayMode displayMode ;\n+    final View view;\n+    private int[] rgb;\n+    private final int width;\n+    private final int height;\n+\n+    final int range;\n+    int triangle2DEntries[];\n+    int triangle2DEntriesCount;\n+    int vec2Entries[];\n+    int vec2EntriesCount;\n+    int colors[];\n+\n+\n+    private  Rasterizer(View view, DisplayMode displayMode) {\n+        this.view = view;\n+        this.width = view.image.getWidth();\n+        this.height = view.image.getHeight();\n+        this.range = width * height;\n+        this.rgb = view.offscreenRgb;\n+        this.displayMode = displayMode;\n+    }\n+\n+    static public Rasterizer of (View view, DisplayMode displayMode){\n+        return new Rasterizer(view, displayMode);\n+    }\n+\n+    public void accept(int gid) {\n+        \/\/ final int gid = getGlobalId();\n+        int x = gid % width;\n+        int y = gid \/ width;\n+        int col = 0x00000;\n+        for (int t = 0; t < triangle2DEntriesCount; t++) {\n+            int v0 = triangle2DEntries[I32Triangle2D.SIZE * t + I32Triangle2D.V0];\n+            int v1 = triangle2DEntries[I32Triangle2D.SIZE * t + I32Triangle2D.V1];\n+            int v2 = triangle2DEntries[I32Triangle2D.SIZE * t + I32Triangle2D.V2];\n+            int x0 = vec2Entries[v0 * I32Vec2.SIZE + I32Vec2.X];\n+            int y0 = vec2Entries[v0 * I32Vec2.SIZE + I32Vec2.Y];\n+            int x1 = vec2Entries[v1 * I32Vec2.SIZE + I32Vec2.X];\n+            int y1 = vec2Entries[v1 * I32Vec2.SIZE + I32Vec2.Y];\n+            int x2 = vec2Entries[v2 * I32Vec2.SIZE + I32Vec2.X];\n+            int y2 = vec2Entries[v2 * I32Vec2.SIZE + I32Vec2.Y];\n+            if (displayMode.filled && I32Triangle2D.intriangle(x, y, x0, y0, x1, y1, x2, y2)) {\n+                col = colors[t];\n+            } else if (displayMode.wire && I32Triangle2D.onedge(x, y, x0, y0, x1, y1, x2, y2, deltaSquare)) {\n+                col = 0xffffff;\/\/colors[t];\n+            }\n+        }\n+\n+        rgb[gid] = col;\n+    }\n+\n+\n+    public void execute(int range) {\n+        IntStream.range(0, range).parallel().forEach(this::accept);\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/Rasterizer.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package view;\n+\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.DataBufferInt;\n+\n+public class View {\n+    final BufferedImage image;\n+    int[] offscreenRgb;\n+\n+    private View(int width, int height) {\n+        image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n+        offscreenRgb = new int[((DataBufferInt) image.getRaster().getDataBuffer()).getData().length];\n+    }\n+\n+    static View of(int width, int height){\n+        return new View(width,height);\n+    }\n+\n+    void paint(Graphics2D g) {\n+        g.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);\n+    }\n+\n+    void update() {\n+        System.arraycopy(offscreenRgb, 0, ((DataBufferInt) image.getRaster().getDataBuffer()).getData(), 0, offscreenRgb.length);\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/View.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,250 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package view;\n+\n+import view.f32.F32Mat4;\n+import view.f32.F32Mesh3D;\n+import view.f32.F32Triangle3D;\n+import view.f32.F32Vec3;\n+import view.f32.mat4;\n+import view.f32.projectionMat4;\n+import view.f32.rotationMat4;\n+import view.f32.scaleMat4;\n+import view.f32.translateMat4;\n+import view.f32.tri;\n+import view.f32.vec3;\n+import view.i32.I32Triangle2D;\n+import view.i32.I32Vec2;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class ViewFrame extends JFrame {\n+    private final Rasterizer rasterizer;\n+    private volatile Point point = null;\n+    private final Object doorBell;\n+    private final JComponent viewer;\n+    final long startMillis;\n+    long frames;\n+    vec3 cameraVec3;\n+    vec3 lookDirVec3;\n+    mat4 projectionMat4;\n+    vec3 centerVec3;\n+    vec3 moveAwayVec3;\n+\n+    static class Mark {\n+        int markedTriangles3D;\n+        int markedTriangles2D;\n+        int markedVec2;\n+        int markedVec3;\n+        int markedMat4;\n+\n+        Mark() {\n+            markedTriangles3D = F32Triangle3D.pool.count;\n+            markedVec3 = F32Vec3.pool.count;\n+            markedMat4 = F32Mat4.pool.count;\n+            markedTriangles2D = I32Triangle2D.count;\n+            markedVec2 = I32Vec2.count;\n+        }\n+\n+        void resetAll() {\n+            reset3D();\n+            I32Triangle2D.count = markedTriangles2D;\n+            I32Vec2.count = markedVec2;\n+        }\n+\n+        void reset3D() {\n+            F32Triangle3D.pool.count = markedTriangles3D;\n+            F32Vec3.pool.count = markedVec3;\n+            F32Mat4.pool.count = markedMat4;\n+        }\n+\n+    }\n+\n+    Mark mark;\n+\n+    private ViewFrame(String name, Rasterizer rasterizer, Runnable sceneBuilder) {\n+        super(name);\n+        startMillis = System.currentTimeMillis();\n+        this.rasterizer = rasterizer;\n+        this.doorBell = new Object();\n+\n+        this.viewer = new JComponent() {\n+            @Override\n+            public void paintComponent(Graphics g) {\n+                rasterizer.view.paint((Graphics2D) g);\n+            }\n+        };\n+        viewer.setPreferredSize(new Dimension(rasterizer.view.image.getWidth(), rasterizer.view.image.getHeight()));\n+        viewer.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                ringDoorBell(e.getPoint());\n+\n+            }\n+        });\n+        getContentPane().add(viewer);\n+        pack();\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent _windowEvent) {\n+                System.exit(0);\n+            }\n+        });\n+\n+\n+        sceneBuilder.run();\n+\n+\n+        cameraVec3 = vec3.of(0f, 0f, .0f);\n+        lookDirVec3 = vec3.of(0f, 0f, 0f);\/\/F32Vec3.createVec3(0, 0, 0);\n+        projectionMat4 = new projectionMat4(rasterizer.view.image.getWidth(), rasterizer.view.image.getHeight(), 0.1f, 1000f, 60f);\n+        projectionMat4 = projectionMat4.mul(new scaleMat4((float) rasterizer.view.image.getHeight() \/ 4));\n+        projectionMat4 = projectionMat4.mul(new translateMat4((float) rasterizer.view.image.getHeight() \/ 2));\n+\n+        centerVec3 = vec3.of((float) rasterizer.view.image.getWidth() \/ 2, (float) rasterizer.view.image.getHeight() \/ 2, 0);\n+        moveAwayVec3 = vec3.of(0f, 0f, 30f);\n+        mark = new Mark(); \/\/ mark all buffers.  transforms create new points so this allows us to garbage colect\n+    }\n+\n+    public static ViewFrame of(String name, Rasterizer rasterizer, Runnable sceneBuilder){\n+        return new ViewFrame(name,rasterizer,sceneBuilder);\n+    }\n+\n+    Point waitForPoint(long timeout) {\n+        while (point == null) {\n+            synchronized (doorBell) {\n+                try {\n+                    if (timeout > 0) {\n+                        doorBell.wait(timeout);\n+                    }\n+                    update();\n+                } catch (final InterruptedException ie) {\n+                    ie.getStackTrace();\n+                }\n+            }\n+        }\n+        Point returnPoint = point;\n+        point = null;\n+        return returnPoint;\n+    }\n+\n+    void ringDoorBell(Point point) {\n+        this.point = point;\n+        synchronized (doorBell) {\n+            doorBell.notify();\n+        }\n+    }\n+\n+    void update() {\n+        final long elapsedMillis = System.currentTimeMillis() - startMillis;\n+        float theta = elapsedMillis * Rasterizer.thetaDelta;\n+\n+        if ((frames++ % 50) == 0) {\n+            System.out.println(\"Frames \" + frames + \" Theta = \" + theta + \" FPS = \" + ((frames * 1000) \/ elapsedMillis) + \" Vertices \" + rasterizer.vec2EntriesCount);\n+        }\n+\n+        mark.resetAll();\n+\n+        mat4 xyzRot4x4 = new rotationMat4(theta * 2, theta \/ 2, theta);\n+\n+        Mark resetMark = new Mark();\n+\n+        List<ZPos> zpos = new ArrayList<>();\n+        \/\/ Loop through the triangles\n+        boolean showHidden = rasterizer.displayMode == Rasterizer.DisplayMode.WIRE_SHOW_HIDDEN;\n+\n+        for (tri t : tri.all()) {\n+            \/\/ here we rotate and then move into the Z plane.\n+            t = t.mul(xyzRot4x4).add(moveAwayVec3);\n+            float howVisible = 1f;\n+            boolean isVisible = showHidden;\n+\n+            if (!showHidden) {\n+                \/\/ here we determine whether the camera can see the plane that the translated triangle is on.\n+                \/\/ so we need the normal to the triangle in the coordinate system\n+\n+                \/\/ Now we work out where the camera is relative to a line projected from the plane to the camera\n+                \/\/ if camera is at 0,0,0 clearly this is a no-op\n+\n+                \/\/ We need a point on the triangle it looks like assume we can use any, I choose the center of the triangle\n+                \/\/ intuition suggests the one with the minimal Z is best no?\n+\n+                \/\/ We subtract the camera from our point on the triangle so we can compare\n+\n+                vec3 cameraDeltaVec3 = t.center().sub(cameraVec3); \/\/ clearly our default camera is 0,0,0\n+\n+                \/\/  howVisible = cameraDeltaVec3.mul( t.normalSumOfSquares()).sumOf();\n+                howVisible = cameraDeltaVec3.dotProd(t.normal());\n+                \/\/ howVisible is a 'scalar'\n+                \/\/ it's magnitude indicating how much it is 'facing away from' the camera.\n+                \/\/ it's sign indicates if the camera can indeed see the location.\n+                isVisible = howVisible < 0.0;\n+            }\n+\n+            if (isVisible) {\n+                \/\/ Projected triangle is still in unit 1 space!!\n+                \/\/ now project the 3d triangle to 2d plane.\n+                \/\/ Scale up to quarter screen height then add half height of screen\n+\n+                t = t.mul(projectionMat4);\/\/  projection matrix also scales to screen and translate half a screen\n+\n+                zpos.add(new ZPos(t, howVisible));\n+            }\n+\n+            resetMark.reset3D(); \/\/ do not move this up.\n+        }\n+\n+\n+        Collections.sort(zpos);\n+\n+        for (ZPos z : zpos) {\n+            z.create();\n+        }\n+\n+        rasterizer.triangle2DEntries = I32Triangle2D.entries;\n+        rasterizer.triangle2DEntriesCount = I32Triangle2D.count;\n+        rasterizer.vec2Entries = I32Vec2.entries;\n+        rasterizer.vec2EntriesCount = I32Vec2.count;\n+        rasterizer.colors = I32Triangle2D.colors;\n+        rasterizer.execute(rasterizer.range);\n+        rasterizer.view.update();\n+        viewer.repaint();\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/ViewFrame.java","additions":250,"deletions":0,"binary":false,"changes":250,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package view;\n+\n+import view.f32.tri;\n+import view.f32.vec3;\n+import view.i32.I32Triangle2D;\n+\n+class ZPos implements Comparable<ZPos> {\n+    public enum ColourMode {NORMALIZED_COLOUR, NORMALIZED_INV_COLOUR, COLOUR, NORMALIZED_WHITE, NORMALIZED_INV_WHITE, WHITE}\n+    public static final ColourMode colourMode = ColourMode.COLOUR;\n+\n+    int x0, y0, x1, y1, x2, y2;\n+    float z0, z1, z2;\n+    float z;\n+    float howVisible;\n+    int rgb;\n+\n+    @Override\n+    public int compareTo(ZPos zPos) {\n+        return Float.compare(z, zPos.z);\n+    }\n+\n+    ZPos(tri t, float howVisible) {\n+        vec3 v0 = t.v0();\n+        vec3 v1 = t.v1();\n+        vec3 v2 = t.v2();\n+        x0 = (int) v0.x();\n+        y0 = (int) v0.y();\n+        z0 = v0.z();\n+        x1 = (int) v1.x();\n+        y1 = (int) v1.y();\n+        z1 = v1.z();\n+        x2 = (int) v2.x();\n+        y2 = (int) v2.y();\n+        z2 = v2.z();\n+        this.rgb = t.rgb();\n+        this.howVisible = howVisible;\n+        z = Math.min(z0, Math.min(z1, z2));\n+    }\n+\n+\n+    int create() {\n+        int r = ((rgb & 0xff0000) >> 16);\n+        int g = ((rgb & 0x00ff00) >> 8);\n+        int b = ((rgb & 0x0000ff) >> 0);\n+\n+        if (colourMode == ColourMode.NORMALIZED_COLOUR) {\n+            r = r - (int) (20 * howVisible);\n+            g = g - (int) (20 * howVisible);\n+            b = b - (int) (20 * howVisible);\n+        } else if (colourMode == ColourMode.NORMALIZED_INV_COLOUR) {\n+            r = r + (int) (20 * howVisible);\n+            g = g + (int) (20 * howVisible);\n+            b = b + (int) (20 * howVisible);\n+        } else if (colourMode == ColourMode.NORMALIZED_WHITE) {\n+            r = g = b = (int) (0x7f - (20 * howVisible));\n+        } else if (colourMode == ColourMode.NORMALIZED_INV_WHITE) {\n+            r = g = b = (int) (0x7f + (20 * howVisible));\n+        } else if (colourMode == ColourMode.WHITE) {\n+            r = g = b = 0xff;\n+        }\n+\n+        return I32Triangle2D.createTriangle(x0, y0, x1, y1, x2, y2, (r & 0xff) << 16 | (g & 0xff) << 8 | (b & 0xff));\n+\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/ZPos.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class F32Line3D {\n+    static final int SIZE = 1;\n+    static final int V0 = 0;\n+    static final int V1 = 1;\n+    static final int RGB = 2;\n+\n+    public static class Pool {\n+        public final int max;\n+        public int count = 0;\n+        public final int entries[];\n+        Pool(int max) {\n+            this.max = max;\n+            this.entries = new int[max * SIZE];\n+        }\n+    }\n+    public static Pool pool = new Pool(2000);\n+\n+\n+    static int fillLine3D(int i, int v0, int v1, int rgb) {\n+        i *= SIZE;\n+        pool.entries[i + V0] = v0;\n+        pool.entries[i + V1] = v1;\n+        pool.entries[i + RGB] = rgb;\n+        return i;\n+    }\n+\n+    public static int createLine3D(int v0, int v1, int rgb) {\n+        fillLine3D(pool.count, v0, v1,rgb);\n+        return pool.count++;\n+    }\n+\n+    static String asString(int i) {\n+        i *= SIZE;\n+        return F32Vec3.asString(pool.entries[i + V0]) + \" -> \" + F32Vec3.asString(pool.entries[i + V1]) + \" =\" + String.format(\"0x%8x\", pool.entries[i + RGB]);\n+    }\n+\n+\n+\n+    public static int addVec3(int i, int v3) {\n+        i *= SIZE;\n+        return createLine3D(F32Vec3.addVec3(pool.entries[i + V0], v3), F32Vec3.addVec3(pool.entries[i + V1], v3), pool.entries[i + RGB]);\n+    }\n+\n+    public static int mulScaler(int i, float s) {\n+        i *= SIZE;\n+        return createLine3D(F32Vec3.mulScaler(pool.entries[i + V0], s), F32Vec3.mulScaler(pool.entries[i + V1], s), pool.entries[i + RGB]);\n+    }\n+\n+    public static int addScaler(int i, float s) {\n+        i *= SIZE;\n+        return createLine3D(F32Vec3.addScaler(pool.entries[i + V0], s), F32Vec3.addScaler(pool.entries[i + V1], s), pool.entries[i + RGB]);\n+    }\n+\n+    public static int getCentre(int i){\n+        \/\/ the average of all the vertices\n+        return F32Vec3.divScaler(getVectorSum(i), 3);\n+    }\n+\n+    public static int getVectorSum(int i){\n+        \/\/ the sum of all the vertices\n+        return F32Vec3.addVec3(getV0(i), getV1(i));\n+    }\n+\n+\n+    public static int getV0(int i) {\n+        i *= SIZE;\n+        return F32Line3D.pool.entries[i + F32Line3D.V0];\n+    }\n+\n+    public static int getV1(int i) {\n+        i *= SIZE;\n+        return F32Line3D.pool.entries[i + F32Line3D.V1];\n+    }\n+\n+\n+    public static int getRGB(int i) {\n+        i *= SIZE;\n+        return F32Line3D.pool.entries[i + F32Line3D.RGB];\n+    }\n+\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Line3D.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class F32Mat4 {\n+    static final int SIZE = 16;\n+    static final int X0Y0 = 0;\n+    static final int X1Y0 = 1;\n+    static final int X2Y0 = 2;\n+    static final int X3Y0 = 3;\n+    static final int X0Y1 = 4;\n+    static final int X1Y1 = 5;\n+    static final int X2Y1 = 6;\n+    static final int X3Y1 = 7;\n+    static final int X0Y2 = 8;\n+    static final int X1Y2 = 9;\n+    static final int X2Y2 = 10;\n+    static final int X3Y2 = 11;\n+    static final int X0Y3 = 12;\n+    static final int X1Y3 = 13;\n+    static final int X2Y3 = 14;\n+    static final int X3Y3 = 15;\n+\n+    public static class Pool {\n+        public final int max;\n+        public int count = 0;\n+        public final float entries[];\n+        Pool(int max) {\n+            this.max = max;\n+            this.entries = new float[max * SIZE];\n+        }\n+    }\n+\n+    public static Pool pool = new Pool(100);\n+\n+    public static int createMat4(float x0y0, float x1y0, float x2y0, float x3y0,\n+                          float x0y1, float x1y1, float x2y1, float x3y1,\n+                          float x0y2, float x1y2, float x2y2, float x3y2,\n+                          float x0y3, float x1y3, float x2y3, float x3y3) {\n+        pool.entries[pool.count * SIZE + X0Y0] = x0y0;\n+        pool.entries[pool.count * SIZE + X1Y0] = x1y0;\n+        pool.entries[pool.count * SIZE + X2Y0] = x2y0;\n+        pool.entries[pool.count * SIZE + X3Y0] = x3y0;\n+        pool.entries[pool.count * SIZE + X0Y1] = x0y1;\n+        pool.entries[pool.count * SIZE + X1Y1] = x1y1;\n+        pool.entries[pool.count * SIZE + X2Y1] = x2y1;\n+        pool.entries[pool.count * SIZE + X3Y1] = x3y1;\n+        pool.entries[pool.count * SIZE + X0Y2] = x0y2;\n+        pool.entries[pool.count * SIZE + X1Y2] = x1y2;\n+        pool.entries[pool.count * SIZE + X2Y2] = x2y2;\n+        pool.entries[pool.count * SIZE + X3Y2] = x3y2;\n+        pool.entries[pool.count * SIZE + X0Y3] = x0y3;\n+        pool.entries[pool.count * SIZE + X1Y3] = x1y3;\n+        pool.entries[pool.count * SIZE + X2Y3] = x2y3;\n+        pool.entries[pool.count * SIZE + X3Y3] = x3y3;\n+        return pool.count++;\n+    }\n+  \/\/  https:\/\/stackoverflow.com\/questions\/28075743\/how-do-i-compose-a-rotation-matrix-with-human-readable-angles-from-scratch\/28084380#28084380\n+    public static int mulMat4(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createMat4(\n+                pool.entries[lhs + X0Y0] * pool.entries[rhs + X0Y0] + pool.entries[lhs + X1Y0] * pool.entries[rhs + X0Y1] + pool.entries[lhs + X2Y0] * pool.entries[rhs + X0Y2] + pool.entries[lhs + X3Y0] * pool.entries[rhs + X0Y3],\n+                pool.entries[lhs + X0Y0] * pool.entries[rhs + X1Y0] + pool.entries[lhs + X1Y0] * pool.entries[rhs + X1Y1] + pool.entries[lhs + X2Y0] * pool.entries[rhs + X1Y2] + pool.entries[lhs + X3Y0] * pool.entries[rhs + X1Y3],\n+                pool.entries[lhs + X0Y0] * pool.entries[rhs + X2Y0] + pool.entries[lhs + X1Y0] * pool.entries[rhs + X2Y1] + pool.entries[lhs + X2Y0] * pool.entries[rhs + X2Y2] + pool.entries[lhs + X3Y0] * pool.entries[rhs + X2Y3],\n+                pool.entries[lhs + X0Y0] * pool.entries[rhs + X3Y0] + pool.entries[lhs + X1Y0] * pool.entries[rhs + X3Y1] + pool.entries[lhs + X2Y0] * pool.entries[rhs + X3Y2] + pool.entries[lhs + X3Y0] * pool.entries[rhs + X3Y3],\n+\n+                pool.entries[lhs + X0Y1] * pool.entries[rhs + X0Y0] + pool.entries[lhs + X1Y1] * pool.entries[rhs + X0Y1] + pool.entries[lhs + X2Y1] * pool.entries[rhs + X0Y2] + pool.entries[lhs + X3Y1] * pool.entries[rhs + X0Y3],\n+                pool.entries[lhs + X0Y1] * pool.entries[rhs + X1Y0] + pool.entries[lhs + X1Y1] * pool.entries[rhs + X1Y1] + pool.entries[lhs + X2Y1] * pool.entries[rhs + X1Y2] + pool.entries[lhs + X3Y1] * pool.entries[rhs + X1Y3],\n+                pool.entries[lhs + X0Y1] * pool.entries[rhs + X2Y0] + pool.entries[lhs + X1Y1] * pool.entries[rhs + X2Y1] + pool.entries[lhs + X2Y1] * pool.entries[rhs + X2Y2] + pool.entries[lhs + X3Y1] * pool.entries[rhs + X2Y3],\n+                pool.entries[lhs + X0Y1] * pool.entries[rhs + X3Y0] + pool.entries[lhs + X1Y1] * pool.entries[rhs + X3Y1] + pool.entries[lhs + X2Y1] * pool.entries[rhs + X3Y2] + pool.entries[lhs + X3Y1] * pool.entries[rhs + X3Y3],\n+\n+                pool.entries[lhs + X0Y2] * pool.entries[rhs + X0Y0] + pool.entries[lhs + X1Y2] * pool.entries[rhs + X0Y1] + pool.entries[lhs + X2Y2] * pool.entries[rhs + X0Y2] + pool.entries[lhs + X3Y2] * pool.entries[rhs + X0Y3],\n+                pool.entries[lhs + X0Y2] * pool.entries[rhs + X1Y0] + pool.entries[lhs + X1Y2] * pool.entries[rhs + X1Y1] + pool.entries[lhs + X2Y2] * pool.entries[rhs + X1Y2] + pool.entries[lhs + X3Y2] * pool.entries[rhs + X1Y3],\n+                pool.entries[lhs + X0Y2] * pool.entries[rhs + X2Y0] + pool.entries[lhs + X1Y2] * pool.entries[rhs + X2Y1] + pool.entries[lhs + X2Y2] * pool.entries[rhs + X2Y2] + pool.entries[lhs + X3Y2] * pool.entries[rhs + X2Y3],\n+                pool.entries[lhs + X0Y2] * pool.entries[rhs + X3Y0] + pool.entries[lhs + X1Y2] * pool.entries[rhs + X3Y1] + pool.entries[lhs + X2Y2] * pool.entries[rhs + X3Y2] + pool.entries[lhs + X3Y2] * pool.entries[rhs + X3Y3],\n+\n+                pool.entries[lhs + X0Y3] * pool.entries[rhs + X0Y0] + pool.entries[lhs + X1Y3] * pool.entries[rhs + X0Y1] + pool.entries[lhs + X2Y3] * pool.entries[rhs + X0Y2] + pool.entries[lhs + X3Y3] * pool.entries[rhs + X0Y3],\n+                pool.entries[lhs + X0Y3] * pool.entries[rhs + X1Y0] + pool.entries[lhs + X1Y3] * pool.entries[rhs + X1Y1] + pool.entries[lhs + X2Y3] * pool.entries[rhs + X1Y2] + pool.entries[lhs + X3Y3] * pool.entries[rhs + X1Y3],\n+                pool.entries[lhs + X0Y3] * pool.entries[rhs + X2Y0] + pool.entries[lhs + X1Y3] * pool.entries[rhs + X2Y1] + pool.entries[lhs + X2Y3] * pool.entries[rhs + X2Y2] + pool.entries[lhs + X3Y3] * pool.entries[rhs + X2Y3],\n+                pool.entries[lhs + X0Y3] * pool.entries[rhs + X3Y0] + pool.entries[lhs + X1Y3] * pool.entries[rhs + X3Y1] + pool.entries[lhs + X2Y3] * pool.entries[rhs + X3Y2] + pool.entries[lhs + X3Y3] * pool.entries[rhs + X3Y3]\n+\n+        );\n+    }\n+\n+    static String asString(int i) {\n+        i *= SIZE;\n+        return String.format(\"|%5.2f, %5.2f, %5.2f, %5.2f|\\n\" +\n+                        \"|%5.2f, %5.2f, %5.2f, %5.2f|\\n\" +\n+                        \"|%5.2f, %5.2f, %5.2f, %5.2f|\\n\" +\n+                        \"|%5.2f, %5.2f, %5.2f, %5.2f|\\n\",\n+                pool.entries[i + X0Y0], pool.entries[i + X1Y0], pool.entries[i + X2Y0], pool.entries[i + X3Y0],\n+                pool.entries[i + X0Y1], pool.entries[i + X1Y1], pool.entries[i + X2Y1], pool.entries[i + X3Y1],\n+                pool.entries[i + X0Y2], pool.entries[i + X1Y2], pool.entries[i + X2Y2], pool.entries[i + X3Y2],\n+                pool.entries[i + X0Y3], pool.entries[i + X1Y3], pool.entries[i + X2Y3], pool.entries[i + X3Y3]);\n+    }\n+\n+    public static int createProjectionMatrix(float width, float height, float near, float far, float fieldOfViewDeg) {\n+\n+        \/\/ Projection Matrix\n+\n+        float aspectRatio = height \/ width;\n+        float fieldOfViewRadians = (float) (1.0f \/ Math.tan((fieldOfViewDeg * 0.5f) \/ 180.0 * Math.PI));\n+\n+            \/*\n+              https:\/\/youtu.be\/ih20l3pJoeU?t=973\n+              https:\/\/stackoverflow.com\/questions\/28075743\/how-do-i-compose-a-rotation-matrix-with-human-readable-angles-from-scratch\/28084380#28084380^\n+             --------------------            far\n+              \\                \/              ^    ^\n+               \\              \/               |    |   far-near\n+                \\            \/                |    |\n+                 \\__________\/         near    |    v\n+                                       ^      |\n+                                       v      v\n+                     \\^\/\n+                   [x,y,z]\n+\n+            *\/\n+\n+        return createMat4(\n+                aspectRatio * fieldOfViewRadians, 0f, 0f, 0f,\n+                0f, fieldOfViewRadians, 0f, 0f,\n+                0f, 0f, far \/ (far - near), (-far * near) \/ (far - near),\n+                0f, 0f, (-far * near) \/ (far - near), 0f);\n+\n+    }\n+\n+    public static int createRotXMat4(float thetaRadians) {\n+        float sinTheta = (float) Math.sin(thetaRadians);\n+        float cosTheta = (float) Math.cos(thetaRadians);\n+        return createMat4(\n+                1, 0, 0, 0,\n+                0, cosTheta, -sinTheta, 0,\n+                0, sinTheta, cosTheta, 0,\n+                0, 0, 0, 1\n+\n+        );\n+    }\n+\n+    public static int createRotZMat4(float thetaRadians) {\n+        float sinTheta = (float) Math.sin(thetaRadians);\n+        float cosTheta = (float) Math.cos(thetaRadians);\n+        return createMat4(\n+                cosTheta, sinTheta, 0, 0,\n+                -sinTheta, cosTheta, 0, 0,\n+                0, 0, 1, 0,\n+                0, 0, 0, 1\n+        );\n+    }\n+\n+    public static int createRotYMat4(float thetaRadians) {\n+        float sinTheta = (float) Math.sin(thetaRadians);\n+        float cosTheta = (float) Math.cos(thetaRadians);\n+        return createMat4(\n+                cosTheta, 0, sinTheta, 0,\n+                0, 1, 0, 0,\n+                -sinTheta, 0, cosTheta, 0,\n+                0, 0, 0, 1\n+        );\n+    }\n+\n+\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Mat4.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,253 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class F32Mesh3D {\n+    String name;\n+\n+    int triSum;\n+\n+    private F32Mesh3D(String name){\n+        this.name = name;\n+    }\n+    public static F32Mesh3D of(String name){\n+        return new F32Mesh3D(name);\n+    }\n+    final int SIZE = 1; \/\/ triangle, triCenter, normal\n+\n+    final int MAX = 400;\n+\n+    public int triCount = 0;\n+    public int triEntries[] = new int[MAX * SIZE];\n+    public int triCenterVec3s[] = new int[MAX *SIZE];\n+    public int normalEntries[] = new int[MAX *SIZE];\n+    public int v0Vec3s[] = new int[MAX *SIZE];\n+    public int vecCount = 0;\n+    public int vecEntries[] = new int[MAX * SIZE];\n+\n+\n+    public F32Mesh3D tri(int v0, int v1, int v2, int rgb) {\n+        int tri = F32Triangle3D.createTriangle3D(v0, v1, v2, rgb);\n+\n+        triEntries[triCount]= tri;\n+        normalEntries[triCount] = F32Triangle3D.normal(tri);\n+        int triCentreVec3 = F32Triangle3D.getCentre(tri);\n+        triCenterVec3s[triCount]=triCentreVec3;\n+        v0Vec3s[triCount]=F32Triangle3D.getV0(tri);\n+        if (triCount == 0) {\n+            triSum = triCentreVec3;\n+        } else {\n+            triSum = F32Vec3.addVec3(triSum, triCentreVec3);\n+        }\n+        triCount++;\n+        return this;\n+    }\n+\n+\n+    public void fin(){\n+        int meshCenterVec3 = F32Vec3.divScaler(triSum, triCount);\n+        for (int t = 0; t < triCount; t++ ) {\n+            int tri = triEntries[t];\n+            int v0Norm = normalEntries[t]; \/\/ from v0\n+            int v0 = v0Vec3s[t];\n+            int v0CenterDiff = F32Vec3.subVec3(meshCenterVec3, v0);\n+            float normDotProd = F32Vec3.dotProd(v0CenterDiff, v0Norm);\n+            if (normDotProd >0f) { \/\/ the normal from the center from the triangle was pointing out, so re wind it\n+                F32Triangle3D.rewind(tri);\n+            }\n+        }\n+\n+        cube(F32Vec3.getX(meshCenterVec3),F32Vec3.getY(meshCenterVec3), F32Vec3.getZ(meshCenterVec3), .1f );\n+    }\n+\n+    public F32Mesh3D quad(int v0, int v1, int v2, int v3, int rgb) {\n+  \/*\n+       v0-----v1\n+        |\\    |\n+        | \\   |\n+        |  \\  |\n+        |   \\ |\n+        |    \\|\n+       v3-----v2\n+   *\/\n+\n+        tri(v0, v1, v2, rgb);\n+        tri(v0, v2, v3, rgb);\n+        return this;\n+    }\n+\n+    public F32Mesh3D pent(int v0, int v1, int v2, int v3, int v4, int rgb) {\n+  \/*\n+       v0-----v1\n+       |\\    | \\\n+       | \\   |  \\\n+       |  \\  |   v2\n+       |   \\ |  \/\n+       |    \\| \/\n+       v4-----v3\n+   *\/\n+\n+        tri(v0, v1, v3, rgb);\n+        tri(v1, v2, v3, rgb);\n+        tri(v0, v3, v4, rgb);\n+        return this;\n+    }\n+    public F32Mesh3D hex(int v0, int v1, int v2, int v3, int v4, int v5, int rgb) {\n+  \/*\n+       v0-----v1\n+      \/ |\\    | \\\n+     \/  | \\   |  \\\n+    v5  |  \\  |   v2\n+     \\  |   \\ |  \/\n+      \\ |    \\| \/\n+       v4-----v3\n+   *\/\n+\n+        tri(v0, v1, v3, rgb);\n+        tri(v1, v2, v3, rgb);\n+        tri(v0, v3, v4, rgb);\n+        tri(v0, v4, v5, rgb);\n+        return this;\n+    }\n+\n+\n+    \/*\n+               a-----------d\n+              \/|          \/|\n+             \/ |         \/ |\n+           h------------g  |\n+           |   |        |  |\n+           |   b--------|--c\n+           |  \/         | \/\n+           | \/          |\/\n+           e------------f\n+\n+     *\/\n+\n+\n+    public F32Mesh3D cube(\n+            float x,\n+            float y,\n+            float z,\n+            float s) {\n+        int a = vec3(x - (s * .5f), y - (s * .5f), z - (s * .5f));  \/\/000  000 111 111\n+        int b = vec3(x - (s * .5f), y + (s * .5f), z - (s * .5f));  \/\/010  010 101 101\n+        int c = vec3(x + (s * .5f), y + (s * .5f), z - (s * .5f));  \/\/110  011 001 100\n+        int d = vec3(x + (s * .5f), y - (s * .5f), z - (s * .5f));  \/\/100  001 011 110\n+        int e = vec3(x - (s * .5f), y + (s * .5f), z + (s * .5f));  \/\/011  110 100 001\n+        int f = vec3(x + (s * .5f), y + (s * .5f), z + (s * .5f));  \/\/111  111 000 000\n+        int g = vec3(x + (s * .5f), y - (s * .5f), z + (s * .5f));  \/\/101  101 010 010\n+        int h = vec3(x - (s * .5f), y - (s * .5f), z + (s * .5f));  \/\/001  100 110 011\n+        quad(a, b, c, d, 0xff0000); \/\/front\n+        quad(b, e, f, c, 0x0000ff); \/\/top\n+        quad(d, c, f, g, 0xffff00); \/\/right\n+        quad(h, e, b, a, 0xffffff); \/\/left\n+        quad(g, f, e, h, 0x00ff00);\/\/back\n+        quad(g, h, a, d, 0xffa500);\/\/bottom\n+        return this;\n+    }\n+\n+\n+\n+\n+\n+    \/*\n+\n+\n+http:\/\/paulbourke.net\/dataformats\/obj\/\n+\n+     *\/\n+\n+\n+    public F32Mesh3D cubeoctahedron(\n+            float x,\n+            float y,\n+            float z,\n+            float s) {\n+\n+        int v1 = vec3(x + (s * .30631559f), y + (s * .20791225f), z + (s * .12760004f));\n+        int v2 = vec3(x + (s * .12671047f), y + (s * .20791227f), z + (s * .30720518f));\n+        int v3 = vec3(x + (s * .12671045f), y + (s * .38751736f), z + (s * .12760002f));\n+        int v4 = vec3(x + (s * .30631556f), y + (s * .20791227f), z + (s * .48681026f));\n+        int v5 = vec3(x + (s * .48592068f), y + (s * .20791225f), z + (s * .30720514f));\n+        int v6 = vec3(x + (s * .30631556f), y + (s * .56712254f), z + (s * .48681026f));\n+        int v7 = vec3(x + (s * .12671047f), y + (s * .56712254f), z + (s * .30720512f));\n+        int v8 = vec3(x + (s * .12671042f), y + (s * .3875174f), z + (s * .48681026f));\n+        int v9 = vec3(x + (s * .48592068f), y + (s * .38751736f), z + (s * .1276f));\n+        int v10 = vec3(x + (s * .30631556f), y + (s * .56712254f), z + (s * .1276f));\n+        int v11 = vec3(x + (s * .48592068f), y + (s * .56712254f), z + (s * .30720512f));\n+        int v12 = vec3(x + (s * .48592068f), y + (s * .38751743f), z + (s * .4868103f));\n+\n+\n+\n+\n+        tri(v1, v2, v3, 0xff0000);\n+        tri(v4, v2, v5, 0x7f8000);\n+        tri(v5, v2, v1, 0x3fc000);\n+        tri(v6, v7, v8, 0x1fe000);\n+        tri(v9, v10, v11, 0x0ff000);\n+        tri(v8, v2, v4, 0x07f800);\n+        tri(v5, v1, v9, 0x03fc00);\n+        tri(v3, v7, v10, 0x01fe00);\n+        tri(v8, v7, v2, 0x00ff00);\n+        tri(v2, v7, v3, 0x007f80);\n+        tri(v8, v4, v6, 0x003fc0);\n+        tri(v6, v4, v12, 0x001fe0);\n+        tri(v11, v12, v9, 0x000ff0);\n+        tri(v9, v12, v5, 0x0007f8);\n+        tri(v7, v6, v10, 0x0003fc);\n+        tri(v6, v11, v10, 0x0001fe);\n+        tri(v1, v3, v9, 0x0000ff);\n+        tri(v9, v3, v10, 0x00007f);\n+        tri(v12, v4, v5, 0x00003f);\n+        tri(v6, v12, v11, 0x00001f);\n+        return this;\n+    }\n+\n+\n+     public F32Mesh3D rubric(float s) {\n+        for (int x = -1; x < 2; x++) {\n+            for (int y = -1; y < 2; y++) {\n+                for (int z = -1; z < 2; z++) {\n+                    cube(x * .5f, y * .5f, z * .5f, s);\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public int vec3(float x, float y, float z) {\n+        int newVec = F32Vec3.createVec3(x,y, z);\n+        vecEntries[vecCount++]=newVec;\n+    \/\/    if (vecCount == 1 ){\n+         \/\/   vecSum =newVec;\n+       \/\/ }else{\n+      \/\/      vecSum = F32Vec3.addVec3(vecSum, newVec);\n+      \/\/  }\n+        return newVec;\n+    }\n+\n+\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Mesh3D.java","additions":253,"deletions":0,"binary":false,"changes":253,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class F32Triangle3D {\n+    static final int SIZE = 4;\n+    static final int MAX = 1600;\n+    static final int V0 = 0;\n+    static final int V1 = 1;\n+    static final int V2 = 2;\n+    static final int RGB = 3;\n+\n+     \/*\n+       v0----v1         v0----v2\n+        \\    |           \\    |\n+         \\   |            \\   |\n+          \\  |    --->     \\  |\n+           \\ |              \\ |\n+            \\|               \\|\n+             v2               v1\n+   *\/\n+\n+    public static int rewind(int i) {\n+        i *= SIZE;\n+        int temp =         pool.entries[i + V1];\n+        pool.entries[i + V1] =  pool.entries[i + V2];\n+        pool.entries[i + V2] = temp;\n+        return i;\n+    }\n+\n+    public static class Pool {\n+        public final int max;\n+        public int count = 0;\n+        public final int entries[];\n+        Pool(int max) {\n+            this.max = max;\n+            this.entries = new int[max * SIZE];\n+        }\n+    }\n+    public static Pool pool = new Pool(1600);\n+\n+\n+    static int fillTriangle3D(int i, int v0, int v1, int v2, int rgb) {\n+        i *= SIZE;\n+        pool.entries[i + V0] = v0;\n+        pool.entries[i + V1] = v1;\n+        pool.entries[i + V2] = v2;\n+        pool.entries[i + RGB] = rgb;\n+        return i;\n+    }\n+\n+    public static int createTriangle3D(int v0, int v1, int v2, int rgb) {\n+        fillTriangle3D(pool.count, v0, v1, v2, rgb);\n+        return pool.count++;\n+    }\n+\n+    static String asString(int i) {\n+        i *= SIZE;\n+        return F32Vec3.asString(pool.entries[i + V0]) + \" -> \" + F32Vec3.asString(pool.entries[i + V1]) + \" -> \" + F32Vec3.asString(pool.entries[i + V2]) + \" =\" + String.format(\"0x%8x\", pool.entries[i + RGB]);\n+    }\n+\n+    public static int mulMat4(int i, int m4) {\n+        i *= SIZE;\n+        return createTriangle3D(F32Vec3.mulMat4(pool.entries[i + V0], m4), F32Vec3.mulMat4(pool.entries[i + V1], m4), F32Vec3.mulMat4(pool.entries[i + V2], m4), pool.entries[i + RGB]);\n+    }\n+\n+    public static int addVec3(int i, int v3) {\n+        i *= SIZE;\n+        return createTriangle3D(F32Vec3.addVec3(pool.entries[i + V0], v3), F32Vec3.addVec3(pool.entries[i + V1], v3), F32Vec3.addVec3(pool.entries[i + V2], v3), pool.entries[i + RGB]);\n+    }\n+\n+    public static int mulScaler(int i, float s) {\n+        i *= SIZE;\n+        return createTriangle3D(F32Vec3.mulScaler(pool.entries[i + V0], s), F32Vec3.mulScaler(pool.entries[i + V1], s), F32Vec3.mulScaler(pool.entries[i + V2], s), pool.entries[i + RGB]);\n+    }\n+\n+    public static int addScaler(int i, float s) {\n+        i *= SIZE;\n+        return createTriangle3D(F32Vec3.addScaler(pool.entries[i + V0], s), F32Vec3.addScaler(pool.entries[i + V1], s), F32Vec3.addScaler(pool.entries[i + V2], s), pool.entries[i + RGB]);\n+    }\n+\n+    public static int getCentre(int i){\n+        \/\/ the average of all the vertices\n+        return F32Vec3.divScaler(getVectorSum(i), 3);\n+    }\n+\n+    public static int getVectorSum(int i){\n+        \/\/ the sum of all the vertices\n+        return F32Vec3.addVec3(F32Vec3.addVec3(getV0(i), getV1(i)), getV2(i));\n+    }\n+\n+\n+    public static int getV0(int i) {\n+        i *= SIZE;\n+        return F32Triangle3D.pool.entries[i + F32Triangle3D.V0];\n+    }\n+\n+    public static int getV1(int i) {\n+        i *= SIZE;\n+        return F32Triangle3D.pool.entries[i + F32Triangle3D.V1];\n+    }\n+\n+    public static int getV2(int i) {\n+        i *= SIZE;\n+        return F32Triangle3D.pool.entries[i + F32Triangle3D.V2];\n+    }\n+\n+    public static int getRGB(int i) {\n+        i *= SIZE;\n+        return F32Triangle3D.pool.entries[i + F32Triangle3D.RGB];\n+    }\n+\n+\n+    public static int normal(int i) {\n+\n+        int v0 = F32Triangle3D.getV0(i);\n+        int v1 = F32Triangle3D.getV1(i);\n+        int v2 = F32Triangle3D.getV2(i);\n+\n+        int line1Vec3 = F32Vec3.subVec3(v1, v0);\n+        int line2Vec3 = F32Vec3.subVec3(v2, v0);\n+\n+        return F32Vec3.crossProd(line1Vec3, line2Vec3);\n+    }\n+\n+    public static int normalSumOfSquares(int i) {\n+        int normalVec3 = normal(i);\n+        return F32Vec3.divScaler(normalVec3,  F32Vec3.sumOfSquares(normalVec3));\n+    }\n+\n+\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Triangle3D.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class F32Vec3 {\n+    static final int SIZE = 3;\n+\n+    static final int X = 0;\n+    static final int Y = 1;\n+    static final int Z = 2;\n+    public static class Pool {\n+        public final int max;\n+        public int count = 0;\n+        public final float entries[];\n+        Pool(int max) {\n+            this.max = max;\n+            this.entries = new float[max * SIZE];\n+        }\n+    }\n+    public static Pool pool = new Pool(10000);\n+\n+    public static int createVec3(float x, float y, float z) {\n+        pool.entries[pool.count * SIZE + X] = x;\n+        pool.entries[pool.count * SIZE + Y] = y;\n+        pool.entries[pool.count * SIZE + Z] = z;\n+        return pool.count++;\n+    }\n+\n+\n+    \/\/ return another vec3 after multiplying by m4\n+    \/\/ we pad this vec3 to vec 4 with '1' as w\n+    \/\/ we normalize the result\n+    static int mulMat4(int i, int m4) {\n+        i *= SIZE;\n+        m4 *= F32Mat4.SIZE;\n+        int o = createVec3(\n+                pool.entries[i + X] * F32Mat4.pool.entries[m4 + F32Mat4.X0Y0] + pool.entries[i + Y] * F32Mat4.pool.entries[m4 + F32Mat4.X0Y1] + pool.entries[i + Z] * F32Mat4.pool.entries[m4 + F32Mat4.X0Y2] + 1f * F32Mat4.pool.entries[m4 + F32Mat4.X0Y3],\n+                pool.entries[i + X] * F32Mat4.pool.entries[m4 + F32Mat4.X1Y0] + pool.entries[i + Y] * F32Mat4.pool.entries[m4 + F32Mat4.X1Y1] + pool.entries[i + Z] * F32Mat4.pool.entries[m4 + F32Mat4.X1Y2] + 1f * F32Mat4.pool.entries[m4 + F32Mat4.X1Y3],\n+                pool.entries[i + X] * F32Mat4.pool.entries[m4 + F32Mat4.X2Y0] + pool.entries[i + Y] * F32Mat4.pool.entries[m4 + F32Mat4.X2Y1] + pool.entries[i + Z] * F32Mat4.pool.entries[m4 + F32Mat4.X2Y2] + 1f * F32Mat4.pool.entries[m4 + F32Mat4.X2Y3]\n+        );\n+\n+        float w = pool.entries[i + X] * F32Mat4.pool.entries[m4 + F32Mat4.X3Y0] + pool.entries[i + Y] * F32Mat4.pool.entries[m4 + F32Mat4.X3Y1] + pool.entries[i + Z] * F32Mat4.pool.entries[m4 + F32Mat4.X3Y2] + 1 * F32Mat4.pool.entries[m4 + F32Mat4.X3Y3];\n+        if (w != 0.0) {\n+            o = F32Vec3.divScaler(o, w);\n+        }\n+        return o;\n+    }\n+\n+    static int mulScaler(int i, float s) {\n+        i *= SIZE;\n+        return createVec3(pool.entries[i + X] * s, pool.entries[i + Y] * s, pool.entries[i + Z] * s);\n+    }\n+\n+    static int addScaler(int i, float s) {\n+        i *= SIZE;\n+        return createVec3(pool.entries[i + X] + s, pool.entries[i + Y] + s, pool.entries[i + Z] + s);\n+    }\n+\n+    static int divScaler(int i, float s) {\n+        i *= SIZE;\n+        return createVec3(pool.entries[i + X] \/ s, pool.entries[i + Y] \/ s, pool.entries[i + Z] \/ s);\n+    }\n+\n+    public static int addVec3(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec3(pool.entries[lhs + X] + pool.entries[rhs + X], pool.entries[lhs + Y] + pool.entries[rhs + Y], pool.entries[lhs + Z] + pool.entries[rhs + Z]);\n+    }\n+\n+    public static int subVec3(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec3(pool.entries[lhs + X] - pool.entries[rhs + X], pool.entries[lhs + Y] - pool.entries[rhs + Y], pool.entries[lhs + Z] - pool.entries[rhs + Z]);\n+    }\n+    public static int mulVec3(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec3(pool.entries[lhs + X] * pool.entries[rhs + X], pool.entries[lhs + Y] * pool.entries[rhs + Y], pool.entries[lhs + Z] * pool.entries[rhs + Z]);\n+    }\n+    static int divVec3(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec3(pool.entries[lhs + X] \/ pool.entries[rhs + X], pool.entries[lhs + Y] \/ pool.entries[rhs + Y], pool.entries[lhs + Z] \/ pool.entries[rhs + Z]);\n+    }\n+\n+\n+    static float sumOfSquares(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + X] * pool.entries[i + X] + pool.entries[i + Y] * pool.entries[i + Y] + pool.entries[i + Z] * pool.entries[i + Z];\n+    }\n+    public static float sumOf(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + X]  + pool.entries[i + Y] + pool.entries[i + Z] ;\n+    }\n+\n+    static float hypot(int i) {\n+        return (float) Math.sqrt(sumOfSquares(i));\n+    }\n+\n+    \/*\n+        lhs= | 1|   rhs= | 2|\n+             | 3|        | 7|\n+             | 4|        |-5|\n+\n+        lhs xprod rhs = | x  y  z| =  | 3  4|x - | 1  4|y  | 1  3|\n+                        | 1  3  4|    | 7 -5|    | 2 -5|   | 2  7|\n+                        | 2  7 -5|\n+\n+                      = (-15-28)x - (-5 -8)y + (7 - 6)z\n+\n+                      = -43x - (-13)y +1z\n+                      = -43x + 14y +z\n+\n+     *\/\n+\n+    static int crossProd(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec3(\n+                pool.entries[lhs + Y] * pool.entries[rhs + Z] - pool.entries[lhs + Z] * pool.entries[rhs + X],\n+                pool.entries[lhs + Z] * pool.entries[rhs + X] - pool.entries[lhs + X] * pool.entries[rhs + Z],\n+                pool.entries[lhs + X] * pool.entries[rhs + Y] - pool.entries[lhs + Y] * pool.entries[rhs + X]);\n+\n+    }\n+\n+    \/*\n+        lhs= | 1|   rhs= | 2|\n+             | 3|        | 7|\n+             | 4|        |-5|\n+\n+        lhs0*rhs0 + lhs1*rhs1 + lhs2*rhs2\n+         1  * 2   +  3  * 7   +  4  *-5\n+\n+            3     +    21     +   -20\n+\n+                       4\n+\n+     *\/\n+\n+\n+\n+    static float dotProd(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+\n+       return pool.entries[lhs + X] * pool.entries[rhs + X] + pool.entries[lhs + Y] * pool.entries[rhs + Y] +\n+               pool.entries[lhs + Z] * pool.entries[rhs + Z];\n+\n+    }\n+\n+    static String asString(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + X] + \",\" + pool.entries[i + Y] + \",\" + pool.entries[i + Z];\n+    }\n+\n+    public static float getX(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + X];\n+    }\n+\n+    public static float getY(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + Y];\n+    }\n+\n+    public static float getZ(int i) {\n+        i *= SIZE;\n+        return pool.entries[i + Z];\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Vec3.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class mat4 {\n+    public int id;\n+\n+    protected mat4(int id) {\n+        this.id = id;\n+    }\n+\n+    public mat4(float x0y0, float x1y0, float x2y0, float x3y0,\n+                float x0y1, float x1y1, float x2y1, float x3y1,\n+                float x0y2, float x1y2, float x2y2, float x3y2,\n+                float x0y3, float x1y3, float x2y3, float x3y3) {\n+        this(F32Mat4.createMat4(x0y0, x1y0, x2y0, x3y0,\n+                x0y1, x1y1, x2y1, x3y1,\n+                x0y2, x1y2, x2y2, x3y2,\n+                x0y3, x1y3, x2y3, x3y3));\n+    }\n+\n+    public mat4 mul(mat4 m) {\n+        return new mat4(F32Mat4.mulMat4(id, m.id));\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/mat4.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+\/\/https:\/\/medium.com\/swlh\/understanding-3d-matrix-transforms-with-pixijs-c76da3f8bd8\n+public class projectionMat4 extends mat4 {\n+\n+    public projectionMat4(float width, float height, float nearZ, float farZ, float fieldOfViewDeg){\n+        super(F32Mat4.createProjectionMatrix(width, height,  nearZ, farZ,  fieldOfViewDeg));\n+\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/projectionMat4.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class rotationMat4 extends mat4 {\n+    public rotationMat4(float thetaX, float thetaY, float thetaZ){\n+        super( F32Mat4.mulMat4(F32Mat4.mulMat4(F32Mat4.createRotXMat4(thetaX), F32Mat4.createRotYMat4(thetaY)),F32Mat4.createRotZMat4(thetaZ)));\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/rotationMat4.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\/\/ https:\/\/medium.com\/swlh\/understanding-3d-matrix-transforms-with-pixijs-c76da3f8bd8\n+public class scaleMat4 extends mat4 {\n+    public scaleMat4(float x, float y, float z) {\n+        super(\n+                        x, 0f, 0f, 0f,\n+                        0f, y, 0f, 0f,\n+                        0f, 0f, z, 0f,\n+                        0f, 0f, 0f, 1f\n+\n+        );\n+    }\n+\n+    public scaleMat4(float v) {\n+        this(v,v,v);\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/scaleMat4.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+\/\/https:\/\/medium.com\/swlh\/understanding-3d-matrix-transforms-with-pixijs-c76da3f8bd8\n+public class translateMat4 extends mat4 {\n+    public translateMat4(float x, float y, float z) {\n+        super(\n+                1f, 0f, 0f, 0f,\n+                0f, 1f, 0f, 0f,\n+                0f, 0f, 1f, 0f,\n+                x, y, z, 1f\n+\n+        );\n+    }\n+\n+    public translateMat4(float v) {\n+        this(v,v,v);\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/translateMat4.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class tri {\n+    private int id;\n+\n+    public tri( int id) {\n+        this.id = id;\n+    }\n+\n+    public static List<tri> all() {\n+        List<tri> all = new ArrayList<>();\n+        for (int t = 0; t < F32Triangle3D.pool.count; t++) {\n+            all.add(new tri(t));\n+        }\n+        return all;\n+    }\n+\n+    public tri mul(mat4 m) {\n+        return new tri(F32Triangle3D.mulMat4(id, m.id));\n+    }\n+\n+    public tri add(vec3 v) {\n+        return new tri(F32Triangle3D.addVec3(id, v.id));\n+\n+    }\n+\n+    public vec3 normalSumOfSquares() {\n+        return new vec3(F32Triangle3D.normalSumOfSquares(id));\n+    }\n+\n+    public vec3 normal() {\n+        return new vec3(F32Triangle3D.normal(id));\n+    }\n+\n+    public vec3 v0() {\n+        return new vec3(F32Triangle3D.getV0(id));\n+    }\n+\n+    public vec3 v1() {\n+        return new vec3(F32Triangle3D.getV1(id));\n+    }\n+\n+    public vec3 v2() {\n+        return new vec3(F32Triangle3D.getV2(id));\n+    }\n+\n+    public tri mul(float s) {\n+        return new tri(F32Triangle3D.mulScaler(id, s));\n+    }\n+\n+    public tri add(float s) {\n+        return new tri(F32Triangle3D.addScaler(id, s));\n+    }\n+\n+    public int rgb() {\n+        return F32Triangle3D.getRGB(id);\n+    }\n+\n+    public vec3 center() {\n+        return new vec3(F32Triangle3D.getCentre(id));\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/tri.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.f32;\n+\n+public class vec3 {\n+    int id;\n+    vec3(int id){\n+        this.id = id;\n+    }\n+\n+    private vec3(float x, float y, float z) {\n+        this(F32Vec3.createVec3(x,y,z));\n+    }\n+    public static vec3 of(float x, float y, float z){\n+        return new vec3(x,y,z);\n+    }\n+\n+    public vec3 sub(vec3 v) {\n+        return new vec3(F32Vec3.subVec3(id, v.id));\n+    }\n+    public vec3 add(vec3 v) {\n+        return new vec3(F32Vec3.addVec3(id, v.id));\n+    }\n+    public vec3 mul(vec3 v) {\n+        return new vec3(F32Vec3.mulVec3(id, v.id));\n+    }\n+\n+    public float dotProd(vec3 v){\n+        return F32Vec3.dotProd(id, v.id);\n+    }\n+    public float sumOf(){\n+        return F32Vec3.sumOf(id);\n+    }\n+\n+    public float x() {\n+        return F32Vec3.getX(id);\n+    }\n+    public float y() {\n+        return F32Vec3.getY(id);\n+    }\n+    public float z() {\n+        return F32Vec3.getZ(id);\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/vec3.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.i32;\n+\n+public class I32Line2D {\n+    public static final int SIZE = 3;\n+    public static final int V0 = 0;\n+    public static final int V1 = 1;\n+    public static int MAX = 1000;\n+    public static int count = 0;\n+\n+    public static int[] entries = new int[MAX * SIZE];\n+    public static int[] colors = new int[MAX];\n+\n+\n+    public static boolean online(float x, float y, float x0, float y0, float x1, float y1, float deltaSquare) {\n+        float dxl = x1 - x0;\n+        float dyl = y1 - y0;\n+        float cross = (x - x0) * dyl - (y - y0) * dxl;\n+        if ((cross * cross) < deltaSquare) {\n+            if (dxl * dxl >= dyl * dyl)\n+                return dxl > 0 ? x0 <= x && x <= x1 : x1 <= x && x <= x0;\n+            else\n+                return dyl > 0 ? y0 <= y && y <= y1 : y1 <= y && y <= y0;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+\n+public static int createLine(int x0, int y0, int x1, int y1, int col) {\n+        entries[count * SIZE + V0] = I32Vec2.createVec2(x0,y0);\n+        entries[count * SIZE + V1] = I32Vec2.createVec2(x1,y1);\n+\n+        colors[count] = col;\n+        return count++;\n+    }\n+\n+    static int createLine(int v0, int v1, int col) {\n+        entries[count * SIZE + V0] = v0;\n+            entries[count * SIZE + V1] = v1;\n+\n+        colors[count] = col;\n+        return count++;\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/i32\/I32Line2D.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.i32;\n+\n+public class I32Triangle2D {\n+    public static final int SIZE = 3;\n+    public static final int V0 = 0;\n+    public static final int V1 = 1;\n+    public static final int V2 = 2;\n+    public static int MAX = 1000;\n+    public static int count = 0;\n+\n+    public static int[] entries = new int[MAX * SIZE];\n+    public static int[] colors = new int[MAX];\n+    public static float side(int x, int y, int x0, int y0, int x1, int y1) {\n+        return (y1 - y0) * (x - x0) + (-x1 + x0) * (y - y0);\n+    }\n+\n+    public static float side(int v, int v0, int v1) {\n+        v*= I32Vec2.SIZE;\n+        v0*= I32Vec2.SIZE;\n+        v1*= I32Vec2.SIZE;\n+        return (I32Vec2.entries[v1+ I32Vec2.Y] - I32Vec2.entries[v0+ I32Vec2.Y] * (I32Vec2.entries[v+ I32Vec2.X] - I32Vec2.entries[v0+ I32Vec2.X]) + (-I32Vec2.entries[v1+ I32Vec2.X] + I32Vec2.entries[v0+ I32Vec2.X]) * (I32Vec2.entries[v+ I32Vec2.Y] - I32Vec2.entries[v0+ I32Vec2.Y]));\n+    }\n+\n+    public static boolean intriangle(int x, int y, int x0, int y0, int x1, int y1, int x2, int y2) {\n+        return side(x, y, x0, y0, x1, y1) >= 0 && side(x, y, x1, y1, x2, y2) >= 0 && side(x, y, x2, y2, x0, y0) >= 0;\n+    }\n+    public static boolean intriangle(int v, int v0, int v1, int v2){\n+        return side(v, v0, v1) >= 0 && side(v, v1, v2) >= 0 && side(v, v2, v0) >= 0;\n+    }\n+\n+    public static boolean online(float x, float y, float x0, float y0, float x1, float y1, float deltaSquare) {\n+        float dxl = x1 - x0;\n+        float dyl = y1 - y0;\n+        float cross = (x - x0) * dyl - (y - y0) * dxl;\n+        if ((cross * cross) < deltaSquare) {\n+            if (dxl * dxl >= dyl * dyl)\n+                return dxl > 0 ? x0 <= x && x <= x1 : x1 <= x && x <= x0;\n+            else\n+                return dyl > 0 ? y0 <= y && y <= y1 : y1 <= y && y <= y0;\n+        } else {\n+            return false;\n+        }\n+    }\n+    public static boolean onedge(float x, float y, float x0, float y0, float x1, float y1, float x2, float y2, float deltaSquare) {\n+        return online(x, y, x0, y0, x1, y1, deltaSquare) || I32Triangle2D.online(x, y, x1, y1, x2, y2, deltaSquare) || I32Triangle2D.online(x, y, x2, y2, x0, y0, deltaSquare);\n+    }\n+\n+\n+public static int createTriangle(int x0, int y0, int x1, int y1, int x2, int y2, int col) {\n+        entries[count * SIZE + V0] = I32Vec2.createVec2(x0,y0);\n+        \/\/ We need the triangle to be clock wound\n+        if (side(x0, y0, x1, y1, x2, y2) > 0) {\n+            entries[count * SIZE + V1] = I32Vec2.createVec2(x1,y1);\n+            entries[count * SIZE + V2] = I32Vec2.createVec2(x2,y2);\n+        } else {\n+            entries[count * SIZE + V1] = I32Vec2.createVec2(x2,y2);\n+            entries[count * SIZE + V2] = I32Vec2.createVec2(x1,y1);\n+        }\n+        colors[count] = col;\n+        return count++;\n+    }\n+\n+    static int createTriangle(int v0, int v1, int v2, int col) {\n+        entries[count * SIZE + V0] = v0;\n+        \/\/ We need the triangle to be clock wound\n+        if (side(v0, v1, v2) > 0) {\n+            entries[count * SIZE + V1] = v1;\n+            entries[count * SIZE + V2] = v2;\n+        } else {\n+            entries[count * SIZE + V1] = v2;\n+            entries[count * SIZE + V2] = v1;\n+        }\n+        colors[count] = col;\n+        return count++;\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/i32\/I32Triangle2D.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package view.i32;\n+\n+public class I32Vec2 {\n+    public static final int SIZE = 2;\n+    public  static final int MAX = 3200;\n+    public  static final int X = 0;\n+    public static final int Y = 1;\n+\n+    public static int count = 0;\n+    public static int entries[] = new int[MAX * SIZE];\n+\n+    static int createVec2(int x, int y) {\n+        entries[count * SIZE + X] = x;\n+        entries[count * SIZE + Y] = y;\n+        return count++;\n+    }\n+\n+\n+    static int mulScaler(int i, int s) {\n+        i *= SIZE;\n+        return createVec2(entries[i + X] * s, entries[i + Y] * s);\n+    }\n+\n+    static int addScaler(int i, int s) {\n+        i *= SIZE;\n+        return createVec2(entries[i + X] + s, entries[i + Y] + s);\n+    }\n+\n+    static int divScaler(int i, int s) {\n+        i *= SIZE;\n+        return createVec2(entries[i + X] \/ s, entries[i + Y] \/ s);\n+    }\n+\n+    static int addVec2(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec2(entries[lhs + X] + entries[rhs + X], entries[lhs + Y] + entries[rhs + Y]);\n+    }\n+\n+    static int subVec2(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return createVec2(entries[lhs + X] - entries[rhs + X], entries[lhs + Y] - entries[rhs + Y]);\n+    }\n+\n+\n+    static float dotProd(int lhs, int rhs) {\n+        lhs *= SIZE;\n+        rhs *= SIZE;\n+        return entries[lhs + X] * entries[rhs + X] + entries[lhs + Y] * entries[rhs + Y];\n+    }\n+\n+    static String asString(int i) {\n+        i *= SIZE;\n+        return entries[i + X] + \",\" + entries[i + Y];\n+    }\n+}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/i32\/I32Vec2.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,1820 @@\n+REM From https:\/\/6502disassembly.com\/a2-elite\/meshes.html\n+REM =============================\n+REM == Elite Shape Definitions ==\n+REM =============================\n+REM Shape Data clawed out from original 6502 elite data files by Ian Bell\n+REM Colouring information from unpublished SNES conversion\n+REM\n+REM Original ship design credits:\n+REM\n+REM  Adder, Anaconda, Asp, Boa\n+REM  Boulder, Cobra Mk I, Constrictor      - Ian Bell\n+REM  Dodec, Fer-de-Lance, Gecko, Krait,\n+REM  Moray, Shuttle, Transporter\n+REM  Tharglet, Worm\n+REM\n+REM  Asteroid, Cobra Mk III, Coriolis\n+REM  Escape Capsule,Cargo Cannister\n+REM  Mamba, Python, Sidewinder, Thargoid  - David Braben\n+REM  Viper,\n+REM\n+\n+REM Format\n+REM : (a colon)\n+REM  shape1_name\n+REM  front_laser_vertex_number\n+REM  qty_vertices, qty_faces\n+REM \"vertices\"\n+REM  vertex1_x, vertex1_y, vertex1_z\n+REM  vertex2_x, vettex2_y, vertex2_z\n+REM     ......et al ....\n+REM  \"faces\"\n+REM  face1_colour,face1_normalx,face1_normaly,face1_normalz,\n+REM  face1_vertexqty,face1_1st_vertex_number,face1_2nd_vertex_number ...\n+\n+REM  face2_colour,face2_normalx,face2_normaly,face2_normalz,\n+REM  face2_vertexqty,face2_1st_vertex_number,face2_2nd_vertex_number ...\n+\n+REM     ......et al ....\n+\n+REM  \"hue-lig-sat\"\n+REM  15 colour definitions\n+\n+REM  shape2_name .....\n+REM  ...\n+REM  Note: &xx denotes a hex number\n+\n+:\n+ ADDER\n+ &00\n+ &12,&0E\n+ vertices\n+ -&12,&00,&28\n+ &12,&00,&28\n+ &1E,&00,-&18\n+ &1E,&00,-&28\n+ &12,-&07,-&28\n+ -&12,-&07,-&28\n+ -&1E,&00,-&28\n+ -&1E,&00,-&18\n+ -&12,&07,-&28\n+ &12,&07,-&28\n+ -&12,&07,&0D\n+ &12,&07,&0D\n+ -&12,-&07,&0D\n+ &12,-&07,&0D\n+ -&0B,&03,&1D\n+ &0B,&03,&1D\n+ &0B,&04,&18\n+ -&0B,&04,&18\n+ faces\n+ &00,&00,&27,&0A,4,11,10,0,1\n+ &00,&00,-&27,&0A,4,13,12,0,1\n+ &03,&45,&32,&0D,3,2,11,1\n+ &02,&45,-&32,&0D,3,2,13,1\n+ &04,&1E,&34,&00,4,9,11,2,3\n+ &05,&1E,-&34,&00,4,4,13,2,3\n+ &06,&00,&00,-&A0,6,3,4,5,6,8,9\n+ &04,-&1E,&34,&00,4,10,8,6,7\n+ &05,-&1E,-&34,&00,4,12,5,6,7\n+ &03,-&45,&32,&0D,3,10,7,0\n+ &02,-&45,-&32,&0D,3,12,7,0\n+ &0B,&00,&1C,&00,4,10,11,9,8\n+ &0B,&00,-&1C,&00,4,12,13,4,5\n+ &0D,&00,&27,&0A,4,17,14,15,16\n+ hue-lig-sat\n+ &2D,&02,&07\n+ &00,&00,&07\n+ &20,&02,&0F\n+ &1D,&05,&09\n+ &25,&04,&0A\n+ &0F,&02,&0F\n+ &00,&07,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &3C,&03,&07\n+ &00,&00,&00\n+ &0F,&07,&0F\n+ &00,&00,&07\n+:\n+ ANACONDA\n+ &0C\n+ &0F,&0C\n+ vertices\n+ &00,&07,-&3A\n+ -&2B,-&0D,-&25\n+ -&1A,-&2F,-&03\n+ &1A,-&2F,-&03\n+ &2B,-&0D,-&25\n+ &00,&30,-&31\n+ -&45,&0F,-&0F\n+ -&2B,-&27,&28\n+ &2B,-&27,&28\n+ &45,&0F,-&0F\n+ -&2B,&35,-&17\n+ -&45,-&01,&20\n+ &00,&00,&FE\n+ &45,-&01,&20\n+ &2B,&35,-&17\n+ faces\n+ &01,&00,-&33,-&31,5,4,0,1,2,3\n+ &02,-&33,&12,-&57,5,6,10,5,0,1\n+ &03,-&4D,-&39,-&13,5,7,11,6,1,2\n+ &04,&00,-&5A,&10,5,8,12,7,2,3\n+ &02,&4D,-&39,-&13,5,9,13,8,3,4\n+ &03,&33,&12,-&57,5,14,5,0,4,9\n+ &01,&00,&6F,-&14,3,10,14,5\n+ &04,-&61,&48,&18,4,12,11,6,10\n+ &05,-&6C,-&44,&22,3,11,12,7\n+ &05,&6C,-&44,&22,3,12,13,8\n+ &04,&61,&48,&18,4,12,14,9,13\n+ &05,&00,&5E,&12,3,14,12,10\n+ hue-lig-sat\n+ &00,&00,&07\n+ &07,&00,&0C\n+ &0B,&00,&0F\n+ &0F,&00,&0C\n+ &05,&00,&09\n+ &00,&00,&09\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ ASP\n+ &08\n+ 19-2,15-2\n+ vertices\n+ &00,-&12,&00\n+ &00,-&09,-&2D\n+ &2B,&00,-&2D\n+ &45,-&03,&00\n+ &2B,-&0E,&1C\n+ -&2B,&00,-&2D\n+ -&45,-&03,&00\n+ -&2B,-&0E,&1C\n+ &1A,-&07,&49\n+ -&1A,-&07,&49\n+ &2B,&0E,&1C\n+ -&2B,&0E,&1C\n+ &00,&09,-&2D\n+ -&11,&00,-&2D\n+ &11,&00,-&2D\n+ &00,-&04,-&2D\n+ &00,&04,-&2D\n+REM aerial fails - removed:  &00,-&07,&49\n+REM aerial fails - removed:  &00,-&07,&53\n+ faces\n+ &01,&00,-&23,&05,5,8,9,7,0,4\n+ &02,&08,-&26,-&07,5,3,4,0,1,2\n+ &03,-&08,-&26,-&07,5,5,6,7,0,1\n+ &04,&00,&18,-&01,3,11,10,12\n+ &05,&00,&2B,&13,4,11,10,8,9\n+ &06,-&06,&1C,-&02,4,6,11,12,5\n+ &06,&06,&1C,-&02,4,3,10,12,2\n+ &07,&3B,-&40,&1F,3,8,4,3\n+ &07,-&3B,-&40,&1F,3,9,7,6\n+ &08,&50,&2E,&32,3,8,10,3\n+ &08,-&50,&2E,&32,3,9,11,6\n+ &09,&00,&00,-&5A,4,12,5,1,2\n+ &0A,&00,&00,-&5A,4,16,13,15,14\n+REM aerial fails - removed:  &0B,&00,&2B,&13,2,18,17\n+REM aerial fails - removed:  apB,&00,-&23,&05,2,18,17\n+ hue-lig-sat\n+ &00,&00,&07\n+ &08,&00,&07\n+ &53,&00,&07\n+ &00,&00,&07\n+ &46,&00,&07\n+ &4C,&00,&07\n+ &0C,&00,&07\n+ &40,&00,&07\n+ &00,&00,&07\n+ &30,&00,&07\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ ASTEROID\n+ &00\n+ &09,&0E\n+ vertices\n+ &00,&50,&00\n+ -&50,-&0A,&00\n+ &00,-&50,&00\n+ &46,-&28,&00\n+ &3C,&32,&00\n+ &32,&00,&3C\n+ -&28,&00,&46\n+ &00,&1E,-&4B\n+ &00,-&32,-&3C\n+ faces\n+ &01,&09,&42,&51,3,6,0,5\n+ &02,&09,-&42,&51,3,6,5,2\n+ &03,-&48,&40,&1F,3,6,0,1\n+ &04,-&40,-&49,&2F,3,2,6,1\n+ &05,&2D,-&4F,&41,3,3,5,2\n+ &06,&87,&0F,&23,3,4,5,3\n+ &05,&26,&4C,&46,3,4,5,0\n+ &08,-&42,&3B,-&27,3,7,0,1\n+ &01,-&43,-&0F,-&50,3,8,7,1\n+ &08,&42,-&0E,-&4B,3,7,8,3\n+ &03,-&46,-&50,-&28,3,2,8,1\n+ &01,&3A,-&66,-&33,3,8,2,3\n+ &03,&51,&09,-&43,3,7,3,4\n+ &04,&2F,&5E,-&3F,3,4,7,0\n+ hue-lig-sat\n+ &00,&00,&07\n+ &0B,&05,&09\n+ &07,&05,&09\n+ &09,&05,&09\n+ &06,&05,&09\n+ &0D,&05,&09\n+ &07,&05,&09\n+ &19,&00,&07\n+ &15,&04,&09\n+ &24,&00,&06\n+ &2C,&00,&06\n+ &31,&00,&06\n+ &34,&00,&04\n+ &2C,&00,&03\n+ &00,&00,&07\n+:\n+ BARREL\n+ &00\n+ &0A,&07\n+ vertices\n+ &18,&10,&00\n+ &18,&05,&0F\n+ &18,-&0D,&09\n+ &18,-&0D,-&09\n+ &18,&05,-&0F\n+ -&18,&10,&00\n+ -&18,&05,&0F\n+ -&18,-&0D,&09\n+ -&18,-&0D,-&09\n+ -&18,&05,-&0F\n+ faces\n+ &04,&60,&00,&00,5,4,0,1,2,3\n+ &02,&00,&29,&1E,4,6,5,0,1\n+ &03,&00,-&12,&30,4,7,6,1,2\n+ &02,&00,-&33,&00,4,8,7,2,3\n+ &03,&00,-&12,-&30,4,9,8,3,4\n+ &01,&00,&29,-&1E,4,9,5,0,4\n+ &01,-&60,&00,&00,5,9,5,6,7,8\n+ hue-lig-sat\n+ &00,&00,&07\n+ &08,&00,&05\n+ &03,&00,&05\n+ &00,&00,&07\n+ &08,&04,&08\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ BOA\n+ &00\n+ &0D,&0D\n+ vertices\n+ &00,&00,&5D\n+ &00,&28,-&57\n+ &26,-&19,-&63\n+ -&26,-&19,-&63\n+ -&26,&28,-&3B\n+ &26,&28,-&3B\n+ &3E,&00,-&43\n+ &18,-&41,-&4F\n+ -&18,-&41,-&4F\n+ -&3E,&00,-&43\n+ &00,&07,-&6B\n+ &0D,-&09,-&6B\n+ -&0D,-&09,-&6B\n+ faces\n+ &01,&2B,&25,-&3C,6,11,10,1,5,6,2\n+ &02,&00,-&2D,-&59,6,12,11,2,7,8,3\n+ &03,-&2B,&25,-&3C,6,12,10,1,4,9,3\n+ &02,&00,&28,&00,3,5,1,4\n+ &03,&3E,-&20,-&14,3,7,2,6\n+ &01,-&3E,-&20,-&14,3,3,8,9\n+ &04,&00,&17,&06,3,5,4,0\n+ &04,-&17,-&0F,&09,3,9,8,0\n+ &04,&17,-&0F,&09,3,7,6,0\n+ &06,-&1A,&0D,&0A,3,9,4,0\n+ &06,&00,-&1F,&0C,3,7,8,0\n+ &06,&1A,&0D,&0A,3,5,6,0\n+ &07,&00,&00,-&6B,3,12,10,11\n+ hue-lig-sat\n+ &00,&00,&07\n+ &0A,&00,&07\n+ &36,&00,&07\n+ &24,&00,&07\n+ &1B,&00,&05\n+ &0B,&00,&0D\n+ &28,&00,&07\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ BOULDER\n+ &00\n+ &07,&0A\n+ vertices\n+ -&12,&25,-&0B\n+ &1E,&07,&0C\n+ &1C,-&07,-&0C\n+ &02,&00,-&27\n+ -&1C,&22,-&1E\n+ &05,-&0A,&0D\n+ &14,&11,-&1E\n+ faces\n+ &01,-&0F,-&03,&08,3,5,4,0\n+ &02,-&07,&0C,&1E,3,1,5,0\n+ &03,&20,-&2F,&18,3,2,5,1\n+ &04,-&03,-&27,-&07,3,3,5,2\n+ &05,-&05,-&04,-&01,3,4,5,3\n+ &06,&31,&54,&08,3,1,6,0\n+ &07,&70,&15,-&15,3,2,6,1\n+ &08,&4C,-&23,-&52,3,3,6,2\n+ &09,&16,&38,-&89,3,4,6,3\n+ &0A,&28,&6E,-&26,3,6,4,0\n+ hue-lig-sat\n+ &00,&00,&07\n+ &4F,&00,&07\n+ &45,&00,&07\n+ &3C,&00,&07\n+ &34,&00,&07\n+ &29,&00,&07\n+ &17,&00,&07\n+ &0D,&00,&07\n+ &04,&00,&07\n+ &59,&00,&07\n+ &58,&00,&0B\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ CAPSULE\n+ &00\n+ &04,&04\n+ vertices\n+ -&07,&00,&24\n+ -&07,-&0E,-&0C\n+ -&07,&0E,-&0C\n+ &15,&00,&00\n+ faces\n+ &01,&34,&00,-&7A,3,3,1,2\n+ &02,&27,&67,&1E,3,0,2,3\n+ &03,&27,-&67,&1E,3,1,3,0\n+ &04,-&70,&00,&00,3,2,0,1\n+ hue-lig-sat\n+ &00,&00,&07\n+ &0F,&00,&07\n+ &1E,&00,&07\n+ &00,&00,&07\n+ &3C,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ COBRA\n+ &15\n+ &1C,&13-2\n+ vertices\n+ &20,&00,&4C\n+ -&20,&00,&4C\n+ &00,&1A,&18\n+ -&78,-&03,-&08\n+ &78,-&03,-&08\n+ -&58,&10,-&28\n+ &58,&10,-&28\n+ &80,-&08,-&28\n+ -&80,-&08,-&28\n+ &00,&1A,-&28\n+ -&20,-&18,-&28\n+ &20,-&18,-&28\n+ -&24,&08,-&28\n+ -&08,&0C,-&28\n+ &08,&0C,-&28\n+ &24,&08,-&28\n+ &24,-&0C,-&28\n+ &08,-&10,-&28\n+ -&08,-&10,-&28\n+ -&24,-&0C,-&28\n+ &00,&00,&4C\n+ &00,&00,&5A\n+ -&50,-&06,-&28\n+ -&50,&06,-&28\n+ -&58,&00,-&28\n+ &50,&06,-&28\n+ &58,&00,-&28\n+ &50,-&06,-&28\n+ faces\n+ &0C,&00,&3E,&1F,3,2,0,1\n+ &03,-&12,&37,&10,3,5,1,2\n+ &03,&12,&37,&10,3,6,0,2\n+ &05,-&10,&34,&0E,3,5,1,3\n+ &05,&10,&34,&0E,3,6,0,4\n+ &04,-&0E,&2F,&00,3,9,2,5\n+ &04,&0E,&2F,&00,3,9,2,6\n+ &06,-&3D,&66,&00,3,5,3,8\n+ &06,&3D,&66,&00,3,6,4,7\n+ &01,&00,&00,-&50,7,7,11,10,8,5,9,6\n+ &07,-&07,-&2A,&09,4,10,1,3,8\n+ &08,&00,-&1E,&06,4,10,11,0,1\n+ &07,&07,-&2A,&09,4,11,0,4,7\n+REM fails  co1,&00,&3E,&1F,2,20,21\n+REM fails  co1,&00,-&1E,&06,2,20,21\n+ &09,&00,&00,-&50,4,17,14,15,16\n+ &09,&00,&00,-&50,4,19,12,13,18\n+ &0A,&00,&00,-&50,3,23,22,24\n+ &0A,&00,&00,-&50,3,27,25,26\n+ hue-lig-sat\n+ &00,&00,&07\n+ &35,&03,&07\n+ &00,&00,&00\n+ &3C,&09,&08\n+ &37,&0A,&0E\n+ &3C,&06,&07\n+ &3D,&04,&0B\n+ &4B,&02,&0F\n+ &3C,&05,&05\n+ &00,&00,&0F\n+ &0E,&00,&0E\n+ &00,&00,&07\n+ &39,&06,&08\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ COBRAMK1\n+ &0A\n+ &0B,&0C\n+ vertices\n+ -&12,-&01,&32\n+ &12,-&01,&32\n+ -&42,&00,&07\n+ &42,&00,&07\n+ -&20,&0C,-&26\n+ &20,&0C,-&26\n+ -&36,-&0C,-&26\n+ &36,-&0C,-&26\n+ &00,&0C,-&06\n+ &00,-&01,&32\n+ &00,-&01,&3C\n+ faces\n+  &01,&00,&29,&0A,3,8,1,0\n+ &02,&00,-&1B,&03,4,6,7,1,0\n+ &03,-&08,&2E,&08,4,4,8,0,2\n+  &04,-&0C,-&39,&0C,3,6,0,2\n+ &03,&08,&2E,&08,4,8,5,3,1\n+ &04,&0C,-&39,&0C,3,1,7,3\n+  &01,&00,&31,&00,3,5,8,4\n+ &06,&00,&00,-&9A,4,5,4,6,7\n+ &07,-&79,&6F,-&3E,3,6,4,2\n+ &07,&79,&6F,-&3E,3,5,7,3\n+REM  &08,&00,&29,&0A,3,10,9,11\n+REM  &08,&00,-&1B,&03,3,11,9,10\n+REM aerial fault  &08,&00,&29,&0A,2,10,9\n+REM aerial fault  &08,&00,-&1B,&03,2,10,9\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &40,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ CONSTRICTOR\n+ &00\n+ &11,&0C\n+ vertices\n+ &14,-&07,&50\n+ -&14,-&07,&50\n+ -&36,-&07,&28\n+ -&36,-&07,-&28\n+ -&14,&0D,-&28\n+ &14,&0D,-&28\n+ &36,-&07,-&28\n+ &36,-&07,&28\n+ &14,&0D,&05\n+ -&14,&0D,&05\n+ &14,-&07,&3E\n+ -&14,-&07,&3E\n+ &19,-&07,-&19\n+ -&19,-&07,-&19\n+ &0F,-&07,-&0F\n+ -&0F,-&07,-&0F\n+ &00,-&07,&00\n+ faces\n+  &01,&00,&37,&0F,4,9,8,0,1\n+ REM FIX FOR LAST &01,&00,&37,&0F,4,8,9,1,0\n+ &02,-&18,&4B,&14,3,2,9,1\n+ REM FIX FOR LAST &02,-&18,&4B,&14,3,2,1,9\n+ REM OFF &02,&18,&4B,&14,3,8,7,0\n+ &02,&18,&4B,&14,3,8,0,7\n+ &03,&2C,&4B,&00,3,8,6,7\n+ REM FIX FOR LAST  &03,&2C,&4B,&00,3,8,7,6\n+  &03,-&2C,&4B,&00,3,9,3,2\n+  &04,-&2C,&4B,&00,3,3,4,9\n+ REM FIX FOR LAST &04,-&2C,&4B,&00,3,3,9,4\n+ &05,&00,&35,&00,4,9,4,5,8\n+ REM FIX FOR LAST &05,&00,&35,&00,4,4,9,8,5\n+ &04,&2C,&4B,&00,3,5,6,8\n+ REM FIX FOR LAST &04,&2C,&4B,&00,3,6,5,8\n+\n+ &06,&00,&00,-&A0,4,6,3,4,5\n+\n+ &07,&00,-&1B,&00,6,3,6,7,0,1,2\n+\n+ REM SEE NEXT LINE &08,&00,-&1B,&00,3,14,10,12\n+  &08,&00,-&1B,&00,3,14,12,10\n+ REM SEE NEXT LINE &08,&00,-&1B,&00,3,13,11,15\n+  &08,&00,-&1B,&00,3,13,15,11\n+ hue-lig-sat\n+ &00,&00,&07\n+ &0F,&05,&08\n+ &10,&03,&0A\n+ &07,&06,&07\n+ &0F,&03,&0A\n+ &05,&08,&08\n+ &00,&00,&0F\n+ &1E,&02,&07\n+ &0F,&09,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ CORIOLIS\n+ &00\n+ &10,&0F\n+ vertices\n+ &A0,&00,&A0\n+ &00,&A0,&A0\n+ -&A0,&00,&A0\n+ &00,-&A0,&A0\n+ &A0,-&A0,&00\n+ &A0,&A0,&00\n+ -&A0,&A0,&00\n+ -&A0,-&A0,&00\n+ &A0,&00,-&A0\n+ &00,&A0,-&A0\n+ -&A0,&00,-&A0\n+ &00,-&A0,-&A0\n+ &0A,-&1E,&A0\n+ &0A,&1E,&A0\n+ -&0A,&1E,&A0\n+ -&0A,-&1E,&A0\n+ faces\n+ ss2,&00,&00,&A0,4,3,2,1,0\n+ ss1,&6B,-&6B,&6B,3,4,0,3\n+ ss1,&6B,&6B,&6B,3,1,5,0\n+ ss1,-&6B,&6B,&6B,3,2,6,1\n+ ss1,-&6B,-&6B,&6B,3,3,7,2\n+ ss5,&00,-&A0,&00,4,11,7,3,4\n+ ss5,&A0,&00,&00,4,8,5,0,4\n+ ss5,-&A0,&00,&00,4,10,7,2,6\n+ ss5,&00,&A0,&00,4,6,9,5,1\n+ ss1,-&6B,-&6B,-&6B,3,11,7,10\n+ ss1,&6B,-&6B,-&6B,3,4,8,11\n+ ss1,&6B,&6B,-&6B,3,9,5,8\n+ ss1,-&6B,&6B,-&6B,3,10,6,9\n+ ss4,&00,&00,-&A0,4,11,10,9,8\n+ ss3,&00,&00,&A0,4,15,12,13,14\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ COUGAR\n+ &00\n+ &14,&0E\n+ vertices\n+ &00,&05,&43\n+ -&14,&00,&28\n+ -&28,&00,-&28\n+ &00,&0E,-&28\n+ &00,-&0E,-&28\n+ &14,&00,&28\n+ &28,&00,-&28\n+ -&24,&00,&38\n+ -&3C,&00,-&14\n+ &24,&00,&38\n+ &3C,&00,-&14\n+ &00,&07,&23\n+ &00,&08,&19\n+ -&0C,&02,&2D\n+ &0C,&02,&2D\n+ -&0A,&06,-&28\n+ -&0A,-&06,-&28\n+ &0A,-&06,-&28\n+ &0A,&06,-&28\n+ &00,&00,-&28\n+ faces\n+ &01,-&10,&2E,&04,4,3,0,1,2\n+ &01,-&10,-&2E,&04,3,4,1,2\n+ &03,&00,-&1B,&05,4,4,5,0,1\n+ &02,&10,-&2E,&04,3,6,5,4\n+ &02,&10,&2E,&04,4,0,3,6,5\n+ &05,&00,&00,-&A0,4,6,4,2,3\n+ &06,-&10,-&2E,&04,4,1,2,8,7\n+ &06,-&10,&2E,&04,4,1,2,8,7\n+ &06,&10,&2E,&04,4,5,6,10,9\n+ &06,&10,-&2E,&04,4,5,6,10,9\n+ &08,&00,&00,-&A0,3,15,16,19\n+ &08,&00,&00,-&A0,3,19,18,17\n+ &09,-&10,&2E,&04,3,11,13,12\n+ &09,&10,&2E,&04,3,11,14,12\n+ hue-lig-sat\n+ &00,&00,&07\n+ &21,&03,&0C\n+ &32,&04,&08\n+ &4B,&06,&00\n+ &00,&00,&07\n+ &0F,&02,&09\n+ &45,&05,&01\n+ &00,&00,&07\n+ &00,&07,&0F\n+ &0F,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ DODO\n+ &00\n+ &18,&0D\n+ vertices\n+ &00,&96,&C4\n+ &8F,&2E,&C4\n+ &58,-&79,&C4\n+ -&58,-&79,&C4\n+ -&8F,&2E,&C4\n+ &00,&F3,&2E\n+ &E7,&4B,&2E\n+ &8F,-&C4,&2E\n+ -&8F,-&C4,&2E\n+ -&E7,&4B,&2E\n+ &8F,&C4,-&2E\n+ &E7,-&4B,-&2E\n+ &00,-&F3,-&2E\n+ -&E7,-&4B,-&2E\n+ -&8F,&C4,-&2E\n+ &58,&79,-&C4\n+ &8F,-&2E,-&C4\n+ &00,-&96,-&C4\n+ -&8F,-&2E,-&C4\n+ -&58,&79,-&C4\n+ -&10,&20,&C4\n+ -&10,-&20,&C4\n+ &10,&20,&C4\n+ &10,-&20,&C4\n+ faces\n+ do1,&00,&00,&C4,5,4,0,1,2,3\n+ do2,&67,&8E,&58,5,6,10,5,0,1\n+ do3,&A9,-&37,&59,5,7,11,6,1,2\n+ do4,&00,-&B0,&58,5,8,12,7,2,3\n+ do5,-&A9,-&37,&59,5,9,13,8,3,4\n+ do6,-&67,&8E,&58,5,5,14,9,4,0\n+ do7,&00,&B0,-&58,5,15,19,14,5,10\n+ do8,&A9,&37,-&59,5,16,15,10,6,11\n+ do9,&67,-&8E,-&58,5,17,16,11,7,12\n+ doA,-&67,-&8E,-&58,5,18,17,12,8,13\n+ doB,-&A9,&37,-&59,5,19,18,13,9,14\n+ doC,&00,&00,-&C4,5,19,15,16,17,18\n+ doD,&00,&00,&C4,4,22,20,21,23\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ FERDELANCE\n+ &00\n+ &13,&0D\n+ vertices\n+ &00,-&0E,&6C\n+ -&28,-&0E,-&04\n+ -&0C,-&0E,-&34\n+ &0C,-&0E,-&34\n+ &28,-&0E,-&04\n+ -&28,&0E,-&04\n+ -&0C,&02,-&34\n+ &0C,&02,-&34\n+ &28,&0E,-&04\n+ &00,&12,-&14\n+ -&03,-&0B,&61\n+ -&1A,&08,&12\n+ -&10,&0E,-&04\n+ &03,-&0B,&61\n+ &1A,&08,&12\n+ &10,&0E,-&04\n+ &00,-&0E,-&14\n+ -&0E,-&0E,&2C\n+ &0E,-&0E,&2C\n+ faces\n+ fr1,&00,&18,&06,4,9,8,0,5\n+ fr2,-&44,&00,&18,3,1,5,0\n+ fr3,-&3F,&00,-&25,4,6,5,1,2\n+ fr4,&00,&00,-&68,4,7,6,2,3\n+ fr3,&3F,&00,-&25,4,8,7,3,4\n+ fr2,&44,&00,&18,3,4,8,0\n+ fr5,-&0C,&2E,-&13,3,6,9,5\n+ fr9,&00,&2D,-&16,3,7,9,6\n+ fr5,&0C,&2E,-&13,3,8,9,7\n+ fr6,&00,-&1C,&00,5,4,0,1,2,3\n+ fr8,&00,-&1C,&00,3,17,18,16\n+ fr7,&00,&18,&06,3,12,10,11\n+ fr7,&00,&18,&06,3,15,13,14\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ GECKO\n+ &00\n+ &0C,11-2\n+ vertices\n+ -&0A,-&04,&2F\n+ &0A,-&04,&2F\n+ -&10,&08,-&17\n+ &10,&08,-&17\n+ -&42,&00,-&03\n+ &42,&00,-&03\n+ -&14,-&0E,-&17\n+ &14,-&0E,-&17\n+ -&08,-&06,&21\n+ &08,-&06,&21\n+ -&08,-&0D,-&10\n+ &08,-&0D,-&10\n+ faces\n+ &01,&00,&1F,&05,4,3,2,0,1\n+ &02,&04,&2D,&08,3,3,1,5\n+ &03,&19,-&6C,&13,3,7,1,5\n+ &04,&00,-&54,&0C,4,7,6,0,1\n+ &03,-&19,-&6C,&13,3,0,6,4\n+ &02,-&04,&2D,&08,3,0,2,4\n+ &05,-&58,&10,-&D6,3,6,2,4\n+ &06,&00,&00,-&BB,4,6,7,3,2\n+ &05,&58,&10,-&D6,3,3,7,5\n+REM stripes fault  &07,&00,-&54,&0C,2,10,8\n+REM stripes fault  &07,&00,-&54,&0C,2,9,11\n+ hue-lig-sat\n+ &00,&00,&07\n+ &0F,&00,&0E\n+ &1E,&00,&07\n+ &0F,&07,&0D\n+ &1E,&07,&0B\n+ &0F,&03,&07\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ KRAIT\n+ &00\n+ &11,&0E-4\n+ vertices\n+ &00,&00,&60\n+ &00,&12,-&30\n+ &00,-&12,-&30\n+ &5A,&00,-&03\n+ -&5A,&00,-&03\n+ &5A,&00,&57\n+ -&5A,&00,&57\n+ &00,&05,&35\n+ &00,&07,&26\n+ -&12,&07,&13\n+ &12,&07,&13\n+ &12,&0B,-&27\n+ &12,-&0B,-&27\n+ &24,&00,-&1E\n+ -&12,&0B,-&27\n+ -&12,-&0B,-&27\n+ -&24,&00,-&1E\n+ faces\n+ kr3,&03,&18,&03,3,1,3,0\n+ kr4,&03,-&18,&03,3,2,3,0\n+ kr5,-&03,-&18,&03,3,2,4,0\n+ kr6,-&03,&18,&03,3,1,4,0\n+ kr7,&26,&00,-&4D,3,1,2,3\n+ kr8,-&26,&00,-&4D,3,2,1,4\n+REM  kr1,&03,-&18,&03,2,3,5\n+REM  kr1,&03,&18,&03,2,3,5\n+REM  kr1,-&03,&18,&03,2,4,6\n+REM  kr1,-&03,-&18,&03,2,4,6\n+ kr9,&26,&00,-&4D,3,12,11,13\n+ kr9,-&26,&00,-&4D,3,16,14,15\n+ kr2,&03,&18,&03,3,8,10,7\n+ kr2,-&03,&18,&03,3,7,9,8\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ MAMBA\n+ &00\n+ &19,&0B\n+ vertices\n+ &00,&00,&40\n+ -&40,-&08,-&20\n+ -&20,&08,-&20\n+ &20,&08,-&20\n+ &40,-&08,-&20\n+ -&04,&04,&10\n+ &04,&04,&10\n+ &08,&03,&1C\n+ -&08,&03,&1C\n+ -&14,-&04,&10\n+ &14,-&04,&10\n+ -&18,-&07,-&14\n+ -&10,-&07,-&14\n+ &10,-&07,-&14\n+ &18,-&07,-&14\n+ -&08,&04,-&20\n+ &08,&04,-&20\n+ &08,-&04,-&20\n+ -&08,-&04,-&20\n+ -&20,&04,-&20\n+ &20,&04,-&20\n+ &24,-&04,-&20\n+ -&24,-&04,-&20\n+ -&26,&00,-&20\n+ &26,&00,-&20\n+ faces\n+ &00,&00,-&18,&02,3,1,4,0\n+ &02,&00,&18,&02,3,3,0,2\n+ &03,-&20,&40,&10,3,2,0,1\n+ &03,&20,&40,&10,3,3,0,4\n+ &04,&00,&00,-&7F,4,4,3,2,1\n+ &05,&00,-&18,&02,3,11,12,9\n+ &06,&00,&00,-&7F,4,17,18,15,16\n+ &07,&00,&18,&02,4,8,5,6,7\n+ &05,&00,-&18,&02,3,13,14,10\n+ &05,&00,&00,-&7F,3,21,24,20\n+ &05,&00,&00,-&7F,3,22,23,19\n+ hue-lig-sat\n+ &00,&03,&07\n+ &3C,&00,&07\n+ &3C,&00,&07\n+ &2E,&00,&07\n+ &2D,&02,&07\n+ &0F,&00,&0F\n+ &00,&00,&0F\n+ &0F,&00,&0F\n+ &1E,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ MISSILE\n+REM Fins normals are not correctly fudged to solve concave plot problems\n+ &00\n+ &11,&11\n+ vertices\n+ &00,&00,&44\n+ &08,&08,&24\n+ -&08,&08,&24\n+ -&08,-&08,&24\n+ &08,-&08,&24\n+ &08,&08,-&2C\n+ -&08,&08,-&2C\n+ -&08,-&08,-&2C\n+ &08,-&08,-&2C\n+ &0C,&0C,-&2C\n+ -&0C,&0C,-&2C\n+ -&0C,-&0C,-&2C\n+ &0C,-&0C,-&2C\n+ &08,&08,-&0C\n+ -&08,&08,-&0C\n+ -&08,-&08,-&0C\n+ &08,-&08,-&0C\n+ faces\n+ ms1,&40,&00,&10,3,0,1,4\n+ ms2,&00,&40,&10,3,0,1,2\n+ ms1,-&40,&00,&10,3,0,2,3\n+ ms2,&00,-&40,&10,3,0,3,4\n+ ms3,&20,&00,&00,4,1,5,8,4\n+ ms4,&00,&20,&00,4,1,2,6,5\n+ ms3,-&20,&00,&00,4,2,6,7,3\n+ ms4,&00,-&20,&00,4,3,7,8,4\n+ ms5,&00,&00,-&B0,4,5,6,7,8\n+REM Each fin appears twice!\n+ ms6,&20,&00,&00,3,5,9,13\n+ ms6,&00,&20,&00,3,5,9,13\n+ ms6,-&20,&00,&00,3,6,10,14\n+ ms6,&00,&20,&00,3,6,10,14\n+ ms6,-&20,&00,&00,3,7,11,15\n+ ms6,&00,-&20,&00,3,7,11,15\n+ ms6,&20,&00,&00,3,8,12,16\n+ ms6,&00,-&20,&00,3,8,12,16\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ MORAY\n+REM Two \"torpedo tube\" lines removed\n+ &00\n+ &0E,&0C-2\n+ vertices\n+ &0F,&00,&41\n+ -&0F,&00,&41\n+ &00,&12,-&28\n+ -&3C,&00,&00\n+ &3C,&00,&00\n+ &1E,-&1B,-&0A\n+ -&1E,-&1B,-&0A\n+ -&09,-&04,-&19\n+ &09,-&04,-&19\n+ &00,-&12,-&10\n+ &0D,&03,&31\n+ &06,&00,&41\n+ -&0D,&03,&31\n+ -&06,&00,&41\n+ faces\n+ mr1,&00,&2B,&07,3,1,2,0\n+ mr2,-&0A,&31,&07,3,3,2,1\n+ mr2,&0A,&31,&07,3,4,2,0\n+ mr3,-&3B,-&1C,-&65,3,6,2,3\n+ mr4,&00,-&34,-&4E,3,6,2,5\n+ mr3,&3B,-&1C,-&65,3,5,2,4\n+ mr5,-&48,-&63,&32,3,6,1,3\n+ mr6,&00,-&53,&1E,4,6,5,0,1\n+ mr5,&48,-&63,&32,3,5,0,4\n+ mr7,&00,-&34,-&4E,3,8,9,7\n+REM mr8,&00,&2B,&07,2,11,10\n+REM mr8,&00,&2B,&07,2,12,13\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ PLATELET\n+ &00\n+ &04,&01\n+ vertices\n+ -&0F,-&16,-&09\n+ -&0F,&26,-&09\n+ &13,&20,&0B\n+ &0A,-&2E,&06\n+ faces\n+ pl1,&00,&00,&00,4,0,1,2,3\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ PYTHON\n+ &00\n+ &0B,&0D\n+ vertices\n+ &00,&00,&E0\n+ &00,&30,&30\n+ &60,&00,-&10\n+ -&60,&00,-&10\n+ &00,&30,-&20\n+ &00,&18,-&70\n+ -&30,&00,-&70\n+ &30,&00,-&70\n+ &00,-&30,&30\n+ &00,-&30,-&20\n+ &00,-&18,-&70\n+ faces\n+ &01,-&1B,&28,&0B,3,3,1,0\n+ &02,&1B,&28,&0B,3,2,1,0\n+ &02,-&1B,-&28,&0B,3,8,3,0\n+ &01,&1B,-&28,&0B,3,8,2,0\n+ &03,-&13,&26,&00,3,4,1,3\n+ &04,&13,&26,&00,3,4,1,2\n+ &04,-&13,-&26,&00,3,8,9,3\n+ &03,&13,-&26,&00,3,8,9,2\n+ &02,-&19,&25,-&0B,4,3,6,5,4\n+ &01,&19,&25,-&0B,4,2,7,5,4\n+ &02,&19,-&25,-&0B,4,2,7,10,9\n+ &01,-&19,-&25,-&0B,4,3,6,10,9\n+ &05,&00,&00,-&70,4,6,10,7,5\n+ hue-lig-sat\n+ &00,&00,&07\n+ &2D,&05,&07\n+ &2D,&04,&07\n+ &2D,&06,&0A\n+ &2D,&07,&09\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ SIDEWINDER\n+ &00\n+ &0A,&08\n+ vertices\n+ -&20,&00,&24\n+ &20,&00,&24\n+ &40,&00,-&1C\n+ -&40,&00,-&1C\n+ &00,&10,-&1C\n+ &00,-&10,-&1C\n+ -&0C,&06,-&1C\n+ &0C,&06,-&1C\n+ &0C,-&06,-&1C\n+ -&0C,-&06,-&1C\n+ faces\n+ &01,&00,&20,&08,3,4,0,1\n+ &02,-&0C,&2F,&06,3,4,3,0\n+ &02,&0C,&2F,&06,3,2,4,1\n+ &03,&00,&00,-&70,4,2,5,3,4\n+ &01,-&0C,-&2F,&06,3,5,0,3\n+ &02,&00,-&20,&08,3,5,0,1\n+ &01,&0C,-&2F,&06,3,5,1,2\n+ &04,&00,&00,-&70,4,8,9,6,7\n+ hue-lig-sat\n+ &00,&00,&07\n+ &14,&00,&0A\n+ &1E,&08,&06\n+ &00,&03,&09\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ SHUTTLE\n+ &00\n+ &13,&10\n+ vertices\n+ &00,-&11,&17\n+ -&11,&00,&17\n+ &00,&12,&17\n+ &12,&00,&17\n+ -&14,-&14,-&1B\n+ -&14,&14,-&1B\n+ &14,&14,-&1B\n+ &14,-&14,-&1B\n+ &05,&00,-&1B\n+ &00,-&02,-&1B\n+ -&05,&00,-&1B\n+ &00,&03,-&1B\n+ &00,-&09,&23\n+ &03,-&01,&1F\n+ &04,&0B,&19\n+ &0B,&04,&19\n+ -&03,-&01,&1F\n+ -&03,&0B,&19\n+ -&0A,&04,&19\n+ faces\n+ sh1,-&37,-&37,&28,3,1,12,0\n+ sh7,&00,-&4A,&04,3,7,4,0\n+ sh8,-&33,-&33,&17,3,1,4,0\n+ sh7,-&4A,&00,&04,3,4,5,1\n+ sh8,-&33,&33,&17,3,2,5,1\n+ sh7,&00,&4A,&04,3,5,6,2\n+ sh8,&33,&33,&17,3,3,6,2\n+ sh7,&4A,&00,&04,3,6,7,3\n+ sh8,&33,-&33,&17,3,3,7,0\n+ sh9,&00,&00,-&6B,4,7,4,5,6\n+ sh4,-&29,&29,&5A,3,2,12,1\n+ sh3,&29,&29,&5A,3,3,12,2\n+ sh2,&37,-&37,&28,3,3,12,0\n+ sh6,&00,&00,-&6B,4,11,8,9,10\n+ sh5,&29,&29,&5A,3,15,13,14\n+ sh5,-&29,&29,&5A,3,18,16,17\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ SPLINTER\n+ &00\n+ &04,&04\n+ vertices\n+ -&18,-&19,&10\n+ &00,&0C,-&0A\n+ &0B,-&06,&02\n+ &0C,&2A,&07\n+ faces\n+ sp1,\"FNnx(3,2,1)\",\"FNny(3,2,1)\",\"FNnz(3,2,1)\",3,3,2,1\n+ sp2,\"FNnx(0,2,3)\",\"FNny(0,2,3)\",\"FNnz(0,2,3)\",3,0,2,3\n+ sp3,\"FNnx(1,0,3)\",\"FNny(1,0,3)\",\"FNnz(1,0,3)\",3,1,0,3\n+ sp4,\"FNnx(2,0,1)\",\"FNny(2,0,1)\",\"FNnz(2,0,1)\",3,2,0,1\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ THARGLET\n+ &00\n+ &0A,&07\n+ vertices\n+ -&09,&00,&28\n+ -&09,-&26,&0C\n+ -&09,-&18,-&20\n+ -&09,&18,-&20\n+ -&09,&26,&0C\n+ &09,&00,-&08\n+ &09,-&0A,-&0F\n+ &09,-&06,-&1A\n+ &09,&06,-&1A\n+ &09,&0A,-&0F\n+ faces\n+ tg1,-&24,&00,&00,5,4,0,1,2,3\n+ tg2,&14,-&05,&07,4,6,5,0,1\n+ tg3,&2E,-&2A,-&0E,4,7,6,1,2\n+ tg4,&24,&00,-&68,4,8,7,2,3\n+ tg5,&2E,&2A,-&0E,4,9,8,3,4\n+ tg6,&14,&05,&07,4,9,5,0,4\n+ tg7,&24,&00,&00,5,9,5,6,7,8\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ THARGOID\n+REM Two lines on base removed\n+ &0F\n+ &14,&0C-2\n+ vertices\n+ &20,-&30,&30\n+ &20,-&44,&00\n+ &20,-&30,-&30\n+ &20,&00,-&44\n+ &20,&30,-&30\n+ &20,&44,&00\n+ &20,&30,&30\n+ &20,&00,&44\n+ -&18,-&74,&74\n+ -&18,-&A4,&00\n+ -&18,-&74,-&74\n+ -&18,&00,-&A4\n+ -&18,&74,-&74\n+ -&18,&A4,&00\n+ -&18,&74,&74\n+ -&18,&00,&A4\n+ -&18,&40,&50\n+ -&18,&40,-&50\n+ -&18,-&40,-&50\n+ -&18,-&40,&50\n+ faces\n+ th2,&67,-&3C,&19,4,9,8,0,1\n+ th3,&67,-&3C,-&19,4,10,9,1,2\n+ th4,&67,-&19,-&3C,4,11,10,2,3\n+ th5,&67,&19,-&3C,4,12,11,3,4\n+ th1,&40,&00,&00,8,7,6,5,4,3,2,1,0\n+ th6,&67,&3C,-&19,4,13,12,4,5\n+ th7,&67,&3C,&19,4,14,13,5,6\n+ th8,&67,&19,&3C,4,15,14,6,7\n+ th9,&67,-&19,&3C,4,15,8,0,7\n+ thA,-&30,&00,&00,8,15,14,13,12,11,10,9,8\n+REM thB,-&30,&00,&00,2,17,16\n+REM thB,-&30,&00,&00,2,18,19\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ TRANSPORTER\n+REM Two lines on base & detail of IB DB initials removed :-(\n+ &0C\n+ &25,&1D-14\n+ vertices\n+ &00,&0A,-&1A\n+ -&19,&04,-&1A\n+ -&1C,-&03,-&1A\n+ -&19,-&08,-&1A\n+ &1A,-&08,-&1A\n+ &1D,-&03,-&1A\n+ &1A,&04,-&1A\n+ &00,&06,&0C\n+ -&1E,-&01,&0C\n+ -&21,-&08,&0C\n+ &21,-&08,&0C\n+ &1E,-&01,&0C\n+ -&0B,-&02,&1E\n+ -&0D,-&08,&1E\n+ &0E,-&08,&1E\n+ &0B,-&02,&1E\n+ -&05,&06,&02\n+ -&12,&03,&02\n+ -&05,&07,-&07\n+ -&12,&04,-&07\n+ -&0B,&06,-&0E\n+ -&0B,&05,-&07\n+ &05,&07,-&0E\n+ &12,&04,-&0E\n+ &0B,&05,-&07\n+ &05,&06,-&03\n+ &12,&03,-&03\n+ &0B,&04,&08\n+ &0B,&05,-&03\n+ -&10,-&08,-&0D\n+ -&10,-&08,&10\n+ &11,-&08,-&0D\n+ &11,-&08,&10\n+ -&0D,-&03,-&1A\n+ &0D,-&03,-&1A\n+ &09,&03,-&1A\n+ -&08,&03,-&1A\n+ faces\n+ tr1,&00,&00,-&67,7,6,0,1,2,3,4,5\n+ tr2,-&6F,&30,-&07,4,9,8,1,2\n+ tr3,-&69,-&3F,-&15,3,3,9,2\n+ tr4,&00,-&22,&00,6,14,13,9,3,4,10\n+ tr3,&69,-&3F,-&15,3,5,10,4\n+ tr2,&6F,&30,-&07,4,11,10,5,6\n+ trB,&08,&20,&03,4,11,7,0,6\n+ trC,-&08,&20,&03,4,8,7,0,1\n+ tr9,-&08,&22,&0B,3,8,12,7\n+ tr5,-&4B,&20,&4F,4,13,12,8,9\n+ tr5,&4B,&20,&4F,4,15,14,10,11\n+ tr9,&08,&22,&0B,3,11,15,7\n+ tr6,&00,&26,&11,3,15,12,7\n+ tr8,&00,&00,&79,4,15,12,13,14\n+REM tr7,&00,-&22,&00,2,30,29\n+REM tr7,&00,-&22,&00,2,32,31\n+ trA,&00,&00,-&67,4,36,33,34,35\n+REM trD,-&08,&20,&03,2,17,16\n+REM trD,-&08,&20,&03,2,18,19\n+REM trD,-&08,&20,&03,2,18,20\n+REM trD,-&08,&20,&03,2,20,21\n+REM trD,-&08,&20,&03,2,19,20\n+REM trD,&08,&20,&03,2,22,23\n+REM trD,&08,&20,&03,2,25,26\n+REM trD,&08,&20,&03,2,22,24\n+REM trD,&08,&20,&03,2,23,24\n+REM trD,&08,&20,&03,2,27,28\n+REM trD,&08,&20,&03,2,25,27\n+REM trD,&08,&20,&03,2,26,27\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ VIPER\n+ &00\n+ &0F,&09\n+ vertices\n+ &00,&00,&48\n+ &00,&10,&18\n+ &00,-&10,&18\n+ &30,&00,-&18\n+ -&30,&00,-&18\n+ &18,-&10,-&18\n+ -&18,-&10,-&18\n+ &18,&10,-&18\n+ -&18,&10,-&18\n+ -&20,&00,-&18\n+ &20,&00,-&18\n+ &08,&08,-&18\n+ -&08,&08,-&18\n+ -&08,-&08,-&18\n+ &08,-&08,-&18\n+ faces\n+ &01,&00,&20,&00,3,7,8,1\n+ &02,-&16,&21,&0B,4,8,4,0,1\n+ &02,&16,&21,&0B,4,3,7,1,0\n+ &04,-&16,-&21,&0B,4,6,4,0,2\n+ &04,&16,-&21,&0B,4,3,5,2,0\n+ &06,&00,-&20,&00,3,5,6,2\n+ &07,&00,&00,-&30,6,6,5,3,7,8,4\n+ &08,&00,&00,-&30,3,12,13,9\n+ &08,&00,&00,-&30,3,11,14,10\n+ hue-lig-sat\n+ &00,&00,&07\n+ &1E,&09,&06\n+ &1E,&05,&06\n+ &00,&00,&07\n+ &2D,&02,&0F\n+ &00,&00,&07\n+ &3C,&04,&08\n+ &00,&04,&07\n+ &00,&00,&0F\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ WORM\n+ &00\n+ &0A,&08\n+ vertices\n+ &0A,-&0A,&23\n+ -&0A,-&0A,&23\n+ &05,&06,&0F\n+ -&05,&06,&0F\n+ &0F,-&0A,&19\n+ -&0F,-&0A,&19\n+ &1A,-&0A,-&19\n+ -&1A,-&0A,-&19\n+ &08,&0E,-&19\n+ -&08,&0E,-&19\n+ faces\n+ wr1,&00,&58,&46,4,3,2,0,1\n+ wr2,&00,&45,&0E,4,9,3,2,8\n+ wr3,&46,&42,&23,3,2,4,0\n+ wr3,-&46,&42,&23,3,5,3,1\n+ wr4,&40,&31,&0E,4,8,6,4,2\n+ wr4,-&40,&31,&0E,4,7,9,3,5\n+ wr5,&00,&00,-&C8,4,8,9,7,6\n+ wr6,&00,-&50,&00,6,4,0,1,5,7,6\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+\n+REM simple shapes for program testing\n+:\n+ square\n+ &00\n+ &04,&02\n+ vertices\n+ 0,0,0\n+ 0,&50,0\n+ &50,&50,0\n+ &50,0,0\n+ faces\n+ as1,0,0,0,3,0,1,2\n+ as2,0,0,0,3,0,3,2\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+:\n+ tetra\n+ &00\n+ &05,&04\n+ vertices\n+ 0,0,&80\n+ &50,&50,0\n+ -&50,&50,0\n+ -&50,-&50,0\n+ &50,-&50,0\n+ faces\n+ as1,0,0,0,3,0,1,2\n+ as2,0,0,0,3,0,2,3\n+ as3,0,0,0,3,0,3,4\n+ as4,0,0,0,3,0,4,1\n+ hue-lig-sat\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+ &00,&00,&07\n+\n+\n+REM Colour Names\n+REM ============\n+ col01  =1\n+ col02  =2\n+ col03  =3\n+ col04  =4\n+ col05  =5\n+ col06  =6\n+ col07  =7\n+col08  =8\n+ col09  =9\n+ col0A  =10\n+ col0B  =11\n+ col0C  =12\n+ col0D  =13\n+ col0E  =13\n+ col0F  =13\n+ms1=col01:ms2=col02 :REM Missile nose\n+ms3=col06:ms4=col07 :REM Missile body\n+ms5=col03           :REM Missile back\n+ms6=col04           :REM Missile fins\n+ss1=col01           :REM Spc Stn triangles\n+ss2=col02           :REM Spc Stn front\n+ss3=col03           :REM Spc Stn slot\n+ss4=col04           :REM Spc Stn back\n+ss5=col05           :REM Spc Stn sides\n+es1=col01           :REM Esc cap\n+es2=col02           :REM Esc cap\n+es3=col03           :REM Esc cap\n+es4=col04           :REM Esc cap\n+pl1=col01           :REM Plate\n+ba1=col01           :REM Barrel end\n+ba2=col02           :REM Barrel side\n+ba3=col03           :REM Barrel side\n+ba4=col04           :REM Barrel side\n+ba5=col05           :REM Barrel side\n+ba6=col06           :REM Barrel side\n+bo1=col01           :REM boulder\n+bo2=col02           :REM boulder\n+bo3=col03           :REM boulder\n+bo4=col04           :REM boulder\n+bo5=col05           :REM boulder\n+bo6=col06           :REM boulder\n+bo7=col07           :REM boulder\n+bo8=col08           :REM boulder\n+bo9=col09           :REM boulder\n+boA=col0A           :REM boulder\n+as1=col01:as2=col02 :REM asteroid\n+as3=col03:as4=col04 :REM asteroid\n+as5=col05:as6=col06 :REM asteroid\n+as7=col07:as8=col08 :REM asteroid\n+as9=col09:asA=col0A :REM asteroid\n+asB=col0B:asC=col0C :REM asteroid\n+asD=col0D:asE=col0E :REM asteroid\n+sp1=col01:sp2=col02 :REM splinter\n+sp3=col03:sp4=col04 :REM splinter\n+sh1=col01:sh2=col02 :REM shuttle front\n+sh3=col01:sh4=col02 :REM shuttle front\n+sh5=col05           :REM shuttle windows\n+sh6=col06           :REM shuttle engine\n+sh7=col07:sh8=col08 :REM shuttle body\n+sh9=col09           :REM shuttle back\n+tr1=col01           :REM transp back\n+tr2=col02           :REM transp sides upper\n+tr3=col03           :REM transp sides lower\n+tr4=col04           :REM transp base\n+tr5=col05           :REM transp front side\n+tr6=col06           :REM transp front slant\n+tr7=col07           :REM transp skids\n+tr8=col08           :REM transp front\n+tr9=col09           :REM transp front slope\n+trA=col0A           :REM transp engine\n+trB=tr6:trC=tr6     :REM transp top\n+trD=col0D           :REM transp letters\n+co1=col01           :REM cobra gun\n+co2=col02           :REM cobra back\n+co3=col03           :REM cobra top side front\n+co4=col04           :REM cobra top side back\n+co5=col05           :REM cobra side\n+co6=col06           :REM cobra side back\n+co7=col07           :REM cobra bottom sides\n+co8=col08           :REM cobra bottom centre\n+co9=col09           :REM cobra engines\n+coA=col0A           :REM cobra right light\n+coB=col0B           :REM cobra left light\n+coC=col0C           :REM cobra front\n+py1=col01:py2=col02:py3=py2:py4=py1   :REM  python front\n+py5=col03:py6=col04:py7=py6:py8=py5   :REM  python side\n+py9=py2  :pyA=py1  :pyB=py9:pyC=pyA   :REM  python rear\n+pyD=col05                             :REM  python engine\n+ba1=col01:ba2=col02:ba3=col03         :REM  boa rear\n+ba4=ba2:ba5=ba3:ba6=ba1               :REM  boa side rear\n+ba7=col04:ba8=col05:ba9=col06\n+baA=ba9:baB=ba7:baC=ba8               :REM  boa front\n+baD=col06                             :REM  boa engine\n+an1=col01:an2=col02:an6=col03         :REM  anaconda back\n+an3=an6:  an5=an2:  an7=an1           :REM  anaconda side\n+an4=col04:an9=col05\n+an8=an4:anB=an4:anA=an9:anC=an9:      :REM  anaconda front\n+anD=col06                             :REM  anaconda engine\n+vp1=col01                             :REM Viper top\n+vp2=col02                             :REM Viper top left\n+vp3=col03                             :REM Viper top right\n+vp4=col04                             :REM Viper bottom left\n+vp5=col05                             :REM Viper bottom right\n+vp6=col06                             :REM Viper bottom\n+vp7=col07                             :REM Viper back\n+vp8=col08                             :REM Viper engines\n+sd1=col01:sd6=col02                   :REM Sidewinder top & bottom\n+sd5=sd1:sd7=sd1                       :REM Sidewinder top side\n+sd2=sd6:sd3=sd6                       :REM Sidewinder bottom side\n+sd4=col03                             :REM Sidewinder back\n+sd8=col04                             :REM Sidewinder engine\n+ma1=col01\n+ma2=col02                             :REM Mamba top\n+ma3=col03:ma4=ma3                     :REM Mamba sides\n+ma5=col04                             :REM Mamba back\n+ma6=col05                             :REM Mamba scoops\n+ma7=col06                             :REM Mamba engine\n+ma8=col07                             :REM Mamba window\n+maB=col08                             :REM Mamba right light\n+maC=col09                             :REM Mamba left light\n+kr1=col01  :REM krait guns\n+kr2=col02  :REM krait window\n+kr3=col03:kr6=col06:REM krait top\n+kr4=col04:kr5=col05:REM krait bottom\n+kr7=col07:kr8=kr7  :REM krait back\n+kr9=col09  :REM krait engine\n+ad1=col01  :REM adder front top\n+ad2=col02  :REM adder front bottom\n+ad3=col03  :REM adder front top side\n+ad4=col04  :REM adder front bottom side\n+ad5=col05  :REM adder top side\n+ad6=col06  :REM adder bottom side\n+ad7=col07  :REM adder back\n+ad8=col08  :REM adder top\n+ad9=ad8    :REM adder bottom\n+adA=col09  :REM adder window\n+gk1=col01  :REM gecko top\n+gk2=col02  :REM gecko top sides\n+gk3=col03  :REM gecko bottom sides\n+gk4=col04  :REM gecko bottom\n+gk5=col05  :REM gecko rear sides\n+gk6=col06  :REM gecko rear\n+gk7=col07  :REM gecko scoops\n+c11=col01  :REM cob mk 1 front\n+c12=col02  :REM cob mk 1 base\n+c13=col03  :REM cob mk 1 top sides\n+c14=col04  :REM cob mk 1 base sides\n+c15=c11    :REM cob mk 1 top rear\n+c16=col06  :REM cob mk 1 back\n+c17=col07  :REM cob mk 1 sides\n+c18=col08  :REM cob mk 1 gun\n+wr1=col01: REM worm front\n+wr2=col02: REM worm top\n+wr3=col03: REM worm front sides\n+wr4=col04: REM worm sides\n+wr5=col05: REM worm back\n+wr6=col06: REM worm base\n+ap1=col01:ap2=col02:ap3=col03 :REM asp top\n+ap4=col04                     :REM asp base\n+ap5=col05                     :REM asp bttm front\n+ap6=col06                     :REM asp bttm sides\n+ap7=col07                     :REM asp top front sides\n+ap8=col08                     :REM asp bottom front sides\n+ap9=col09                     :REM asp rear\n+apA=col0A                     :REM asp engine\n+apB=col0B                     :REM asp gun\n+fr1=col01 :REM fer de lance front\n+fr2=col02 :REM front sides\n+fr3=col03 :REM back sides\n+fr4=col04 :REM back\n+fr5=col05 :REM top back sides\n+fr6=col06 :REM base\n+fr7=col07 :REM windows\n+fr8=col08 :REM scoop\n+fr9=col09 :REM back slope\n+mr1=col01 :REM moray top\n+mr2=col02 :REM top sides\n+mr3=col03 :REM rear sides\n+mr4=col04 :REM rear\n+mr5=col05 :REM base sides\n+mr6=col06 :REM base\n+mr7=col07 :REM engine\n+mr8=col08 :REM nacelles\n+th1=col01                               :REM Thargoid top\n+th2=col02:th3=col03:th4=col04:th5=col05\n+th6=col06:th7=col07:th8=col08:th9=col09 :REM Thargoid sides\n+thA=col0A                               :REM Thargoid base\n+thB=col0B                               :REM Thargoid skids\n+tg1=col01                               :REM Tharglet top\n+tg2=col02:tg3=col03:tg4=col04:tg5=col05\n+tg6=col06                               :REM Tharglet sides\n+tg7=col07                               :REM Tharglet base\n+co1=col01 :REM constrictor front\n+co2=col02 :REM front sides\n+co3=col03 :REM sides\n+co4=col04 :REM rear sides\n+co5=col05 :REM top\n+co6=col06 :REM back\n+co7=col07 :REM base\n+co8=col08 :REM skids\n+cg1=col01 :REM cougar top left\n+cg2=col02 :REM top right\n+cg3=col03 :REM bottom sides\n+cg4=col04 :REM bottom\n+cg5=col05 :REM back\n+cg6=col06 :REM left wing\n+cg7=col07 :REM right wing\n+cg8=col08 :REM engines\n+cg9=col09 :REM windows\n+do1=col01                                          :REM dodec front\n+do2=col02:do3=col03:do4=col04:do5=col05:do6=col06  :REM dodec front sides\n+do7=do3:  do8=do4:  do9=do5:  doA=do6:  doB=do2    :REM dodec rear sides\n+doC=col07                                          :REM dodec rear\n+doD=col08                                          :REM dodec slot\n+\n+REM File Ends\n\\ No newline at end of file\n","filename":"hat\/examples\/view\/src\/main\/resources\/meshes\/Elite.txt","additions":1820,"deletions":0,"binary":false,"changes":1820,"status":"added"},{"patch":"@@ -123,0 +123,1 @@\n+        var example_view = Jar.of(project.id(\"example{s}-view\"), core);\n","filename":"hat\/hat.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_view.iml\" filepath=\"$PROJECT_DIR$\/example_view.iml\" \/>\n","filename":"hat\/intellij\/.idea\/modules.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}