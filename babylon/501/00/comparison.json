{"files":[{"patch":"@@ -0,0 +1,53 @@\n+\n+### FuncOpViewer and CodeModelFormatter\n+----\n+\n+* [Contents](hat-00.md)\n+* House Keeping\n+    * [Project Layout](hat-01-01-project-layout.md)\n+    * [Building Babylon](hat-01-02-building-babylon.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n+* Programming Model\n+    * [Programming Model](hat-03-programming-model.md)\n+* Interface Mapping\n+    * [Interface Mapping Overview](hat-04-01-interface-mapping.md)\n+    * [Cascade Interface Mapping](hat-04-02-cascade-interface-mapping.md)\n+* Implementation Detail\n+    * [Walkthrough Of Accelerator.compute()](hat-accelerator-compute.md)\n+    * [How we minimize buffer transfers](hat-minimizing-buffer-transfers.md)\n+\n+----\n+\n+\n+We have a few 'tools' in [hat\/tools\/src\/main\/java\/hat\/tools](https:\/\/github.com\/openjdk\/babylon\/blob\/code-reflection\/hat\/tools)\n+which might be useful to others\n+\n+Two in particular\n+\n+#### FuncOpViewer\n+This is a swing app which takes a text file containing text form of a CodeModel (as dumped by the OopWriter)\n+\n+\n+We can generate text for kernels using\n+```\n+HAT=SHOW_KERNEL_MODEL java @hat\/run ffi-opencl mandel\n+```\n+\n+From the standard out copy the text satrting with `func @loc....1` to the closing `}` and paste it into a file (say mandel.cr)\n+\n+Then\n+\n+```\n+java -cp build\/hat-tools-1.0.jar hat.tools.textmodel.ui.FuncOpViewer mandle.cr\n+```\n+\n+### CodeModelFormatter\n+\n+Is a terminal based tool (useful if you are accessing a machine via ssh - and can't launch ui)\n+\n+With it you can dump to the terminal a colorized version of the code model, slightly prettied up with java source for each line inserted as a comment.\n+\n+```\n+java -cp build\/hat-tools-1.0.jar hat.tools.textmodel.terminal.CodeModelFormatter code.cr\n+```\n+\n","filename":"hat\/docs\/hat-tools.md","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.tools.textmodel.ui;\n-\n-import javax.swing.text.DefaultHighlighter;\n-import javax.swing.text.JTextComponent;\n-import javax.swing.text.View;\n-import java.awt.Color;\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n-import java.awt.Shape;\n-import java.awt.geom.Rectangle2D;\n-\n-\/\/ A private subclass of the default highlight painter\n-public class DocModelHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {\n-\n-    public DocModelHighlightPainter(Color color) {\n-        super(color);\n-    }\n-\n-    public Shape paintLayer(Graphics g, int offs0, int offs1, Shape bounds, JTextComponent c, View view) {\n-        g.setColor(c.getSelectionColor());\n-        if (bounds instanceof Rectangle r) {\n-            r = bounds.getBounds();\n-            Graphics2D g2d = (Graphics2D) g;\n-            \/\/g2d.setColor(Color.YELLOW.darker());\n-            g2d.fill(bounds);\n-            g2d.setColor(Color.red);\n-            \/\/  float[] dash = new float[]{2.0F, 2.0F};\n-\n-            \/\/Stroke dashedStroke = new BasicStroke(0.5F, 2, 0, 3.0F, dash, 0.0F);\n-            var r2d = new Rectangle2D.Float((float) r.x, (float) r.y + r.height - 3, (float) (r.width - 1), (float) (3));\n-            g2d.fill(r2d\/*dashedStroke.createStrokedShape(r2d)*\/);\n-\n-            return r;\n-        }\n-        return bounds;\n-\n-\n-    }\n-\n-\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/DocModelHighlightPainter.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.TextModel;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.JViewport;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Element;\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Shape;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.geom.Line2D;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FuncOpTextModelViewer extends AbstractTextModelViewer {\n+    JavaTextModelViewer javaTextModelViewer;\n+    Map<ElementSpan, List<ElementSpan>> ssaIdFromToMap = new HashMap<>();\n+    Map<ElementSpan, List<ElementSpan>> ssaIdToFromMap = new HashMap<>();\n+    Map<Integer, ElementSpan> ssaIdToElement = new HashMap<>();\n+    Map<ElementSpan, List<ElementSpan>> opToJava = new HashMap<>();\n+\n+    static class FuncOpTextPane extends JTextPane {\n+       private  FuncOpTextModelViewer viewer;\n+        List<Shape> shapes = new ArrayList<>();\n+        public void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+                Graphics2D g2d = (Graphics2D) g;\n+                g2d.setColor(Color.BLACK);\n+                shapes.forEach(g2d::fill);\n+        }\n+\n+        FuncOpTextPane(Font font) {\n+            super.setFont(font);\n+            this.viewer = null;\n+        }\n+\n+        void setViewer(FuncOpTextModelViewer viewer) {\n+            this.viewer = viewer;\n+            viewer.ssaIdFromToMap.forEach((from, toList) -> {\n+                var fromElement = from.element();\n+                try {\n+                    var fromPoint = from.textViewer().jtextPane.modelToView2D(fromElement.getStartOffset());\n+\n+                    if (fromPoint != null) {\n+                        Line2D line = new Line2D.Float(\n+                                fromPoint.getBounds().x, fromPoint.getBounds().y + 100, 0, 0);\n+\n+                        shapes.add(line);\n+                        toList.forEach(to -> {\n+                            var toElement = to.element();\n+                            try {\n+                                var toPoint = to.textViewer().jtextPane.modelToView2D(toElement.getStartOffset());\n+                                Line2D line2D = new Line2D.Float(\n+                                        fromPoint.getBounds().x, fromPoint.getBounds().y + 100, toPoint.getBounds().x, toPoint.getBounds().y);\n+                                shapes.add(line2D);\n+                            } catch (BadLocationException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        });\n+                    }\n+                    } catch(BadLocationException e){\n+                        throw new RuntimeException(e);\n+                    }\n+\n+\n+            });\n+\n+        }\n+    }\n+    FuncOpTextModelViewer(TextModel textModel, Font font, boolean dark) {\n+        super(textModel, new FuncOpTextPane(font), font, dark);\n+\n+\n+        jtextPane.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                var clicked = getElementFromMouseEvent(e);\n+                removeHighlights();\n+                javaTextModelViewer.removeHighlights();\n+                if (clicked != null) {\n+                    if (opToJava.keySet().stream()\n+                            .anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n+                        opToJava.keySet().stream().\n+                                filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n+                                .forEach(fromElementSpan -> {\n+                                    fromElementSpan.textViewer().highLight(fromElementSpan.element());\n+                                    opToJava.get(fromElementSpan).forEach(targetElementSpan -> {\n+                                        Element targetElement = targetElementSpan.element();\n+                                        targetElementSpan.textViewer().highLight(targetElement);\n+                                        targetElementSpan.textViewer().scrollTo(targetElement);\n+                                    });\n+                                });\n+                    } else {\n+                        System.out.println(\"not a locationmapping  from op\");\n+                    }\n+                } else {\n+                    System.out.println(\"nothing from op\");\n+                }\n+            }\n+        });\n+        textModel.find(true, t -> t instanceof BabylonTextModel.BabylonSSARef, t -> {\n+            var ssaRef = (BabylonTextModel.BabylonSSARef) t;\n+            ElementSpan babylonSSARefElement = new ElementSpan.Impl(ssaRef, this, this.getElement(ssaRef.startOffset()));\n+            this.ssaIdToElement.put(ssaRef.id, babylonSSARefElement);\n+            this.ssaIdToFromMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n+            this.ssaIdFromToMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n+        });\n+\n+        ((BabylonTextModel) textModel).ssaEdgeList.stream().forEach(edge -> {\n+            var ssaRef = edge.ssaRef();\n+            var ssaDef = edge.ssaDef();\n+            var ssaDefElement = this.getElement(ssaDef.startOffset());\n+            var ssaRefElement = this.getElement(ssaRef.endOffset());\n+\n+        });\n+        ((FuncOpTextPane) this.jtextPane).setViewer(this);\n+\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpTextModelViewer.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import hat.tools.textmodel.TextModel;\n@@ -34,1 +33,0 @@\n-import javax.swing.JTextPane;\n@@ -36,1 +34,0 @@\n-import javax.swing.text.Element;\n@@ -39,4 +36,0 @@\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.event.MouseAdapter;\n-import java.awt.event.MouseEvent;\n@@ -47,3 +40,0 @@\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n@@ -54,95 +44,0 @@\n-    public static class FuncOpTextModelViewer extends AbstractTextModelViewer {\n-        JavaTextModelViewer javaTextModelViewer;\n-        Map<ElementSpan, List<ElementSpan>> ssaIdFromToMap = new HashMap<>();\n-        Map<ElementSpan, List<ElementSpan>> ssaIdToFromMap = new HashMap<>();\n-        Map<Integer, ElementSpan> ssaIdToElement = new HashMap<>();\n-        Map<ElementSpan, List<ElementSpan>> opToJava = new HashMap<>();\n-        static class FuncOpTextPane extends JTextPane {\n-            public void paintComponent(Graphics g) {\n-                super.paintComponent(g);\n-                Graphics2D g2d = (Graphics2D) g;\n-                \/\/ So we can overlay with arrows for\n-                \/\/ Draw Text\n-                \/\/  g2d.drawString(\"This is my custom Panel!\",10,20);\n-            }\n-            FuncOpTextPane(Font font) {\n-                super.setFont(font);\n-            }\n-        };\n-        FuncOpTextModelViewer(TextModel textModel, Font font, boolean dark) {\n-            super(textModel, new FuncOpTextPane(font), font, dark);\n-            jtextPane.addMouseListener(new MouseAdapter() {\n-                @Override\n-                public void mouseClicked(MouseEvent e) {\n-                    var clicked = getElementFromMouseEvent(e);\n-                    removeHighlights();\n-                    javaTextModelViewer.removeHighlights();\n-                    if (clicked != null) {\n-                        if (opToJava.keySet().stream().anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n-                            opToJava.keySet().stream().\n-                                    filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n-                                    .forEach(fromElementSpan -> {\n-                                        fromElementSpan.textViewer().highLight(fromElementSpan.element());\n-                                        opToJava.get(fromElementSpan).forEach(targetElementSpan -> {\n-                                            Element targetElement = targetElementSpan.element();\n-                                            targetElementSpan.textViewer().highLight(targetElement);\n-                                            targetElementSpan.textViewer().scrollTo(targetElement);\n-                                        });\n-                                    });\n-                        } else {\n-                            System.out.println(\"not a locationmapping  from op\");\n-                        }\n-                    } else {\n-                        System.out.println(\"nothing from op\");\n-                    }\n-                }\n-            });\n-\n-\n-        }\n-    }\n-\n-    public static class JavaTextModelViewer extends AbstractTextModelViewer {\n-        FuncOpTextModelViewer funcOpTextModelViewer;\n-        Map<ElementSpan, List<ElementSpan>> javaToOp = new HashMap<>();\n-        static class JavaTextPane extends JTextPane {\n-            public void paintComponent(Graphics g) {\n-                super.paintComponent(g);\n-                Graphics2D g2d = (Graphics2D) g;\n-            }\n-            JavaTextPane(Font font) {\n-                super.setFont(font);\n-            }\n-        };\n-        JavaTextModelViewer(TextModel textModel, Font font, boolean dark) {\n-            super(textModel, new JavaTextPane(font), font, dark);\n-            jtextPane.addMouseListener(new MouseAdapter() {\n-                @Override\n-                public void mouseClicked(MouseEvent e) {\n-                    var clicked = getElementFromMouseEvent(e);\n-                    funcOpTextModelViewer.removeHighlights();\n-                    removeHighlights();\n-                    if (clicked != null) {\n-                        if (javaToOp.keySet().stream().anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n-                            javaToOp.keySet().stream().\n-                                    filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n-                                    .forEach(fromElementSpan -> {\n-                                        fromElementSpan.textViewer().highLight(fromElementSpan.element());\n-                                        javaToOp.get(fromElementSpan).forEach(targetElementSpan -> {\n-                                            Element targetElement = targetElementSpan.element();\n-                                            targetElementSpan.textViewer().highLight(targetElement);\n-                                            targetElementSpan.textViewer().scrollTo(targetElement);\n-                                        });\n-                                    });\n-                        } else {\n-                            System.out.println(\"not a mappable java line  from op\");\n-                        }\n-                    } else {\n-                        System.out.println(\"nothing from java\");\n-                    }\n-                }\n-            });\n-        }\n-\n-    }\n-\n@@ -160,0 +55,1 @@\n+\n@@ -163,14 +59,0 @@\n-        cr.find(true, t -> t instanceof BabylonTextModel.BabylonSSARef, t -> {\n-            var ssaRef = (BabylonTextModel.BabylonSSARef) t;\n-            ElementSpan babylonSSARefElement = new ElementSpan.Impl(ssaRef, funcOpTextModelViewer, funcOpTextModelViewer.getElement(t.startOffset()));\n-            funcOpTextModelViewer.ssaIdToElement.put(ssaRef.id, babylonSSARefElement);\n-            funcOpTextModelViewer.ssaIdToFromMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n-            funcOpTextModelViewer.ssaIdFromToMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n-        });\n-        cr.ssaEdgeList.stream().forEach(edge -> {\n-            var ssaRef = edge.ssaRef();\n-            var ssaDef = edge.ssaDef();\n-            var ssaDefElement = funcOpTextModelViewer.getElement(ssaDef.startOffset());\n-            var ssaRefElement = funcOpTextModelViewer.getElement(ssaRef.endOffset());\n-\n-        });\n@@ -178,0 +60,1 @@\n+        \/\/ here we build the links between funcop viewer and java viewer\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpViewer.java","additions":2,"deletions":119,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.TextModel;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.Element;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class JavaTextModelViewer extends AbstractTextModelViewer {\n+    FuncOpTextModelViewer funcOpTextModelViewer;\n+    Map<ElementSpan, List<ElementSpan>> javaToOp = new HashMap<>();\n+\n+    static class JavaTextPane extends JTextPane {\n+        public void paintComponent(Graphics g) {\n+            super.paintComponent(g);\n+            Graphics2D g2d = (Graphics2D) g;\n+        }\n+\n+        JavaTextPane(Font font) {\n+            super.setFont(font);\n+        }\n+    }\n+\n+    ;\n+\n+    JavaTextModelViewer(TextModel textModel, Font font, boolean dark) {\n+        super(textModel, new JavaTextPane(font), font, dark);\n+        jtextPane.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                var clicked = getElementFromMouseEvent(e);\n+                funcOpTextModelViewer.removeHighlights();\n+                removeHighlights();\n+                if (clicked != null) {\n+                    if (javaToOp.keySet().stream().anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n+                        javaToOp.keySet().stream().\n+                                filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n+                                .forEach(fromElementSpan -> {\n+                                    fromElementSpan.textViewer().highLight(fromElementSpan.element());\n+                                    javaToOp.get(fromElementSpan).forEach(targetElementSpan -> {\n+                                        Element targetElement = targetElementSpan.element();\n+                                        targetElementSpan.textViewer().highLight(targetElement);\n+                                        targetElementSpan.textViewer().scrollTo(targetElement);\n+                                    });\n+                                });\n+                    } else {\n+                        System.out.println(\"not a mappable java line  from op\");\n+                    }\n+                } else {\n+                    System.out.println(\"nothing from java\");\n+                }\n+            }\n+        });\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/JavaTextModelViewer.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.tools.textmodel.ui;\n-\n-import javax.swing.JTextPane;\n-import javax.swing.text.BadLocationException;\n-import javax.swing.text.Caret;\n-import javax.swing.text.DefaultCaret;\n-import javax.swing.text.JTextComponent;\n-import java.awt.Color;\n-import java.awt.Cursor;\n-import java.awt.FontMetrics;\n-import java.awt.Graphics;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n-import java.awt.geom.Rectangle2D;\n-\n-public class PaintableTextPane extends JTextPane {\n-    public class MyCaret extends DefaultCaret {\n-\n-        private String mark = \"<\";\n-\n-        public MyCaret() {\n-            setBlinkRate(500);\n-        }\n-\n-        @Override\n-        protected synchronized void damage(Rectangle r) {\n-            if (r == null) {\n-                return;\n-            }\n-\n-            JTextComponent comp = getComponent();\n-            FontMetrics fm = comp.getFontMetrics(comp.getFont());\n-            int textWidth = fm.stringWidth(\">\");\n-            int textHeight = fm.getHeight();\n-            x = r.x;\n-            y = r.y;\n-            width = textWidth;\n-            height = textHeight;\n-            repaint(); \/\/ calls getComponent().repaint(x, y, width, height)\n-        }\n-\n-        @Override\n-        public void paint(Graphics g) {\n-            JTextComponent comp = getComponent();\n-            if (comp == null) {\n-                return;\n-            }\n-\n-            int dot = getCaretPosition();\n-            System.out.println(\"dot = \"+dot);\n-            Rectangle2D r = null;\n-            try {\n-                r = comp.modelToView2D(dot);\n-            } catch (BadLocationException e) {\n-                return;\n-            }\n-            if (r == null) {\n-                return;\n-            }\n-\n-            if ((x != (int)r.getX()) || (y != (int)r.getY())) {\n-                repaint(); \/\/ erase previous location of caret\n-                damage((Rectangle) r);\n-            }\n-\n-            if (isVisible()) {\n-                FontMetrics fm = comp.getFontMetrics(comp.getFont());\n-                int textWidth = fm.stringWidth(\">\");\n-                int textHeight = fm.getHeight();\n-\n-                g.setColor(Color.ORANGE);\/\/comp.getCaretColor());\n-                g.drawString(mark, x, y + fm.getAscent());\n-            }\n-        }\n-\n-    }\n-\n-\n-    public void paintComponent(Graphics g) {\n-       \/\/ this.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n-      \/\/  this.setCaret(new MyCaret());\n-        super.paintComponent(g);\n-        Graphics2D g2d = (Graphics2D) g;\n-\n-        \/\/ Draw Text\n-        \/\/  g2d.drawString(\"This is my custom Panel!\",10,20);\n-    }\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/PaintableTextPane.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -73,1 +73,1 @@\n-        this.rhs.jtextPane.addCaretListener(_ -> repaint());\n+      \/\/  this.rhs.jtextPane.addCaretListener(_ -> repaint());\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextGutter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    \/\/final protected TextLineNumber textLineNumber;\n@@ -55,2 +54,0 @@\n-      \/\/  this.textLineNumber = new TextLineNumber(  this.jtextPane);\n-        \/\/this.scrollPane.setRowHeaderView(textLineNumber);\n@@ -66,1 +63,1 @@\n-                SwingUtilities.invokeLater(() -> applyHighlighting());\n+      \/\/          SwingUtilities.invokeLater(() -> applyHighlighting());\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextViewer.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}