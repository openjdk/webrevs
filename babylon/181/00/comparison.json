{"files":[{"patch":"@@ -1429,1 +1429,0 @@\n-            boolean first = true;\n@@ -1458,2 +1457,3 @@\n-                }\n-                else if (elsepart.getTag() == Tag.BLOCK) {\n+                } else if (elsepart.getTag() == Tag.IF) {\n+                    tree = (JCTree.JCIf) elsepart;\n+                } else {\n@@ -1471,2 +1471,0 @@\n-                } else if (elsepart.getTag() == Tag.IF) {\n-                    tree = (JCTree.JCIf) elsepart;\n@@ -1474,1 +1472,0 @@\n-                first = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-        Field field = method.getDeclaringClass().getDeclaredField(method.getName() + \"$op\");\n-        String found = canonicalizeModel(method, (String) field.get(null));\n+        String found = canonicalizeModel(method, method.getCodeModel().orElseThrow());\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -222,0 +222,102 @@\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test6\" (%0 : IfTest, %1 : int)void -> {\n+                %2 : Var<int> = var %1 @\"i\";\n+                java.if\n+                    ()boolean -> {\n+                        %3 : int = var.load %2;\n+                        %4 : int = constant @\"1\";\n+                        %5 : boolean = lt %3 %4;\n+                        yield %5;\n+                    }\n+                    ^then()void -> {\n+                        %6 : int = constant @\"1\";\n+                        var.store %2 %6;\n+                        yield;\n+                    }\n+                    ^else()void -> {\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    void test6(int i) {\n+        if (i < 1)\n+            i = 1;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test7\" (%0 : IfTest, %1 : int)void -> {\n+                %2 : Var<int> = var %1 @\"i\";\n+                java.if\n+                    ()boolean -> {\n+                        %3 : int = var.load %2;\n+                        %4 : int = constant @\"1\";\n+                        %5 : boolean = lt %3 %4;\n+                        yield %5;\n+                    }\n+                    ^then()void -> {\n+                        %6 : int = constant @\"1\";\n+                        var.store %2 %6;\n+                        yield;\n+                    }\n+                    ^else()void -> {\n+                        %7 : int = constant @\"2\";\n+                        var.store %2 %7;\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    void test7(int i) {\n+        if (i < 1)\n+            i = 1;\n+        else\n+            i = 2;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : IfTest, %1 : int)void -> {\n+                %2 : Var<int> = var %1 @\"i\";\n+                java.if\n+                    ()boolean -> {\n+                        %3 : int = var.load %2;\n+                        %4 : int = constant @\"1\";\n+                        %5 : boolean = lt %3 %4;\n+                        yield %5;\n+                    }\n+                    ^then()void -> {\n+                        %6 : int = constant @\"1\";\n+                        var.store %2 %6;\n+                        yield;\n+                    }\n+                    ^else_if()boolean -> {\n+                        %7 : int = var.load %2;\n+                        %8 : int = constant @\"2\";\n+                        %9 : boolean = lt %7 %8;\n+                        yield %9;\n+                    }\n+                    ^then()void -> {\n+                        %10 : int = constant @\"2\";\n+                        var.store %2 %10;\n+                        yield;\n+                    }\n+                    ^else()void -> {\n+                        %11 : int = constant @\"3\";\n+                        var.store %2 %11;\n+                        yield;\n+                    };\n+                return;\n+            };\n+            \"\"\")\n+    void test8(int i) {\n+        if (i < 1)\n+            i = 1;\n+        else if (i < 2)\n+            i = 2;\n+        else\n+            i = 3;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"}]}