{"files":[{"patch":"@@ -343,1 +343,0 @@\n-     ${CMAKE_SOURCE_DIR}\/backends\/cuda\/cpp\/cuda_shared.cpp\n@@ -353,1 +352,0 @@\n-     ${CMAKE_SOURCE_DIR}\/backends\/cuda\/cpp\/cuda_shared.cpp\n","filename":"hat\/CMakeLists.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-cmake_minimum_required(VERSION 3.28)\n+cmake_minimum_required(VERSION 3.22.1)\n@@ -7,0 +7,2 @@\n+find_package(CUDAToolkit)\n+\n@@ -43,0 +45,37 @@\n+\n+if(CUDAToolkit_FOUND)\n+    message(\"CUDA\")\n+\n+    include_directories(\n+            ${CUDAToolkit_INCLUDE_DIR}\n+            ${CMAKE_SOURCE_DIR}\/shared\/include\n+            ${CMAKE_SOURCE_DIR}\/cuda\/include\n+    )\n+\n+    link_directories(\n+            ${CMAKE_BINARY_DIR}\n+            ${CUDAToolkit_LIBRARY_DIR}\n+    )\n+\n+    add_library(cuda_backend SHARED\n+            ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n+            ${CMAKE_SOURCE_DIR}\/cuda\/cpp\/cuda_backend.cpp\n+    )\n+\n+    target_link_libraries(cuda_backend\n+            -lcudart\n+            -lcuda\n+    )\n+\n+    add_executable(cuda_info\n+            ${CMAKE_SOURCE_DIR}\/cuda\/cpp\/info.cpp\n+    )\n+\n+    target_link_libraries(cuda_info\n+            cuda_backend\n+            -lcudart\n+            -lcuda\n+    )\n+    add_custom_target(backends DEPENDS cuda_info cuda_backend)\n+\n+endif()\n","filename":"hat\/backends\/CMakeLists.txt","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -170,0 +170,1 @@\n+CudaBackend::CudaBackend(): CudaBackend(nullptr, 0, nullptr){\n@@ -171,0 +172,1 @@\n+}\n@@ -257,0 +259,6 @@\n+void __checkCudaErrors(CUresult err, const char *file, const int line) {\n+    if (CUDA_SUCCESS != err) {\n+        std::cerr << \"CUDA Driver API error = \" << err << \" from file \" << file << \" line \" << line << std::endl;\n+        exit(-1);\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/backends\/cuda\/cpp\/cuda_backend.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include \"cuda_shared.h\"\n-\n-void __checkCudaErrors(CUresult err, const char *file, const int line) {\n-    if (CUDA_SUCCESS != err) {\n-        std::cerr << \"CUDA Driver API error = \" << err << \" from file \" << file << \" line \" << line << std::endl;\n-        exit(-1);\n-    }\n-}\n-\n","filename":"hat\/backends\/cuda\/cpp\/cuda_shared.cpp","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"cuda_shared.h\"\n+#include \"cuda_backend.h\"\n@@ -28,21 +28,0 @@\n-class ContextDevice {\n-public:\n-    CUdevice device;\n-    CUcontext context;\n-\n-    ContextDevice() {\n-        CUresult err = cuInit(0);\n-        int deviceCount = 0;\n-        if (err == CUDA_SUCCESS) {\n-            checkCudaErrors(cuDeviceGetCount(&deviceCount));\n-        }\n-        checkCudaErrors(cuDeviceGet(&device, 0));\n-        checkCudaErrors(cuCtxCreate(&context, 0, device));\n-        std::cout << \"created context\" << std::endl;\n-    }\n-\n-    ~ContextDevice() {\n-        std::cout << \"freeing context\" << std::endl;\n-        checkCudaErrors(cuCtxDestroy(context));\n-    }\n-};\n@@ -51,30 +30,2 @@\n-    std::cout << \"CUDA info\" << std::endl;\n-    ContextDevice contextDevice;\n-    char name[100];\n-    cuDeviceGetName(name, 100, contextDevice.device);\n-    std::cout << \"> Using device 0: \" << name << std::endl;\n-\n-    \/\/ get compute capabilities and the devicename\n-    int major = 0, minor = 0;\n-    checkCudaErrors(cuDeviceGetAttribute(&major, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, contextDevice.device));\n-    checkCudaErrors(cuDeviceGetAttribute(&minor, CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, contextDevice.device));\n-    std::cout << \"> GPU Device has major=\" << major << \" minor=\" << minor << \" compute capability\" << std::endl;\n-\n-    int warpSize;\n-    checkCudaErrors(cuDeviceGetAttribute(&warpSize, CU_DEVICE_ATTRIBUTE_WARP_SIZE, contextDevice.device));\n-    std::cout << \"> GPU Device has warpSize \" << warpSize << std::endl;\n-\n-    int threadsPerBlock;\n-    checkCudaErrors(cuDeviceGetAttribute(&threadsPerBlock, CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK, contextDevice.device));\n-    std::cout << \"> GPU Device has threadsPerBlock \" << threadsPerBlock << std::endl;\n-\n-    int cores;\n-    checkCudaErrors(cuDeviceGetAttribute(&cores, CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, contextDevice.device));\n-    std::cout << \"> GPU Cores \" << cores << std::endl;\n-\n-    size_t totalGlobalMem;\n-    checkCudaErrors(cuDeviceTotalMem(&totalGlobalMem, contextDevice.device));\n-    std::cout << \"  Total amount of global memory:   \" << (unsigned long long) totalGlobalMem << std::endl;\n-    std::cout << \"  64-bit Memory Address:           \" <<\n-              ((totalGlobalMem > (unsigned long long) 4 * 1024 * 1024 * 1024L) ? \"YES\" : \"NO\") << std::endl;\n-\n+    CudaBackend cudaBackend;\n+    cudaBackend.info();\n","filename":"hat\/backends\/cuda\/cpp\/info.cpp","additions":3,"deletions":52,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+#define CUDA_TYPES\n+#ifdef __APPLE__\n@@ -27,1 +29,37 @@\n-#include \"cuda_shared.h\"\n+#define LongUnsignedNewline \"%llu\\n\"\n+#define Size_tNewline \"%lu\\n\"\n+#define LongHexNewline \"(0x%llx)\\n\"\n+#define alignedMalloc(size, alignment) memalign(alignment, size)\n+#define SNPRINTF snprintf\n+#else\n+\n+#include <malloc.h>\n+\n+#define LongHexNewline \"(0x%lx)\\n\"\n+#define LongUnsignedNewline \"%lu\\n\"\n+#define Size_tNewline \"%lu\\n\"\n+#if defined (_WIN32)\n+#include \"windows.h\"\n+#define alignedMalloc(size, alignment) _aligned_malloc(size, alignment)\n+#define SNPRINTF _snprintf\n+#else\n+#define alignedMalloc(size, alignment) memalign(alignment, size)\n+#define SNPRINTF  snprintf\n+#endif\n+#endif\n+\n+#include <iostream>\n+#include <cuda.h>\n+#include <builtin_types.h>\n+\n+#define CUDA_TYPES\n+\n+#include \"shared.h\"\n+\n+#include <fstream>\n+\n+#include<vector>\n+\n+extern void __checkCudaErrors(CUresult err, const char *file, const int line);\n+\n+#define checkCudaErrors(err)  __checkCudaErrors (err, __FILE__, __LINE__)\n@@ -137,1 +175,1 @@\n-\n+    CudaBackend();\n@@ -145,0 +183,1 @@\n+\n","filename":"hat\/backends\/cuda\/include\/cuda_backend.h","additions":41,"deletions":2,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#pragma once\n-\n-\n-#define CUDA_TYPES\n-#ifdef __APPLE__\n-\n-#define LongUnsignedNewline \"%llu\\n\"\n-#define Size_tNewline \"%lu\\n\"\n-#define LongHexNewline \"(0x%llx)\\n\"\n-#define alignedMalloc(size, alignment) memalign(alignment, size)\n-#define SNPRINTF snprintf\n-#else\n-\n-#include <malloc.h>\n-\n-#define LongHexNewline \"(0x%lx)\\n\"\n-#define LongUnsignedNewline \"%lu\\n\"\n-#define Size_tNewline \"%lu\\n\"\n-#if defined (_WIN32)\n-#include \"windows.h\"\n-#define alignedMalloc(size, alignment) _aligned_malloc(size, alignment)\n-#define SNPRINTF _snprintf\n-#else\n-#define alignedMalloc(size, alignment) memalign(alignment, size)\n-#define SNPRINTF  snprintf\n-#endif\n-#endif\n-\n-#include <iostream>\n-#include <cuda.h>\n-#include <builtin_types.h>\n-\n-#define CUDA_TYPES\n-\n-#include \"shared.h\"\n-\n-#include <fstream>\n-\n-#include<vector>\n-\n-extern void __checkCudaErrors(CUresult err, const char *file, const int line);\n-\n-#define checkCudaErrors(err)  __checkCudaErrors (err, __FILE__, __LINE__)\n","filename":"hat\/backends\/cuda\/include\/cuda_shared.h","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -5,1 +5,0 @@\n-    <mapping directory=\"$PROJECT_DIR$\/..\/..\/..\/..\/beehive-spirv-toolkit\" vcs=\"Git\" \/>\n","filename":"hat\/intellij\/.idea\/vcs.xml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}