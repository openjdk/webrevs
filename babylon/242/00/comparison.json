{"files":[{"patch":"@@ -78,0 +78,3 @@\n+        } else if (op instanceof CoreOp.ExceptionRegionEnter ere) {\n+            \/\/ Cannot remove block parameters from exception handlers\n+            removeUnusedBlockParameters(b, ere.start());\n@@ -79,1 +82,0 @@\n-            \/\/ Remove any unused block parameters and successor arguments\n@@ -81,6 +83,1 @@\n-                Block target = successor.targetBlock();\n-                BitSet unusedParameterIndexes = adjustedBlocks.computeIfAbsent(target,\n-                        k -> adjustBlock(b, k));\n-                if (!unusedParameterIndexes.isEmpty()) {\n-                    adjustSuccessor(unusedParameterIndexes, b, successor);\n-                }\n+                removeUnusedBlockParameters(b, successor);\n@@ -93,0 +90,11 @@\n+    \/\/ Remove any unused block parameters and successor arguments\n+    private void removeUnusedBlockParameters(Block.Builder b, Block.Reference successor) {\n+        Block target = successor.targetBlock();\n+        BitSet unusedParameterIndexes = adjustedBlocks.computeIfAbsent(target,\n+                k -> adjustBlock(b, k));\n+        if (!unusedParameterIndexes.isEmpty()) {\n+            adjustSuccessor(unusedParameterIndexes, b, successor);\n+        }\n+\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/NormalizeBlocksTransformer.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+import java.lang.reflect.code.analysis.NormalizeBlocksTransformer;\n@@ -278,6 +279,6 @@\n-        return CoreOp.func(\n-                methodModel.methodName().stringValue(),\n-                MethodRef.ofNominalDescriptor(mDesc)).body(entryBlock ->\n-                        new BytecodeLift(entryBlock,\n-                                         classModel,\n-                                         methodModel.code().orElseThrow()).liftBody());\n+        return NormalizeBlocksTransformer.transform(\n+                CoreOp.func(methodModel.methodName().stringValue(),\n+                            MethodRef.ofNominalDescriptor(mDesc)).body(entryBlock ->\n+                                    new BytecodeLift(entryBlock,\n+                                                     classModel,\n+                                                     methodModel.code().orElseThrow()).liftBody()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.CodeElement;\n@@ -30,0 +32,1 @@\n+import java.lang.classfile.CodeTransform;\n@@ -35,0 +38,1 @@\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -104,0 +108,35 @@\n+    static class ExceptionTableCompactor implements CodeTransform {\n+        ExceptionCatch last = null;\n+\n+        @Override\n+        public void accept(CodeBuilder cob, CodeElement coe) {\n+            if (coe instanceof ExceptionCatch ec) {\n+                if (ec.tryStart() != ec.tryEnd()) {\n+                    if (last != null) {\n+                        if (last.handler() == ec.handler() && last.catchType().equals(ec.catchType())) {\n+                            if (last.tryStart() == ec.tryEnd()) {\n+                                last = ExceptionCatch.of(last.handler(), ec.tryStart(), last.tryEnd(), last.catchType());\n+                                return;\n+                            } else if (last.tryEnd() == ec.tryStart()) {\n+                                last = ExceptionCatch.of(last.handler(), last.tryStart(), ec.tryEnd(), last.catchType());\n+                                return;\n+                            }\n+                        }\n+                        cob.with(last);\n+                    }\n+                    last = ec;\n+                }\n+            } else {\n+                cob.with(coe);\n+            }\n+        }\n+\n+        @Override\n+        public void atEnd(CodeBuilder cob) {\n+            if (last != null) {\n+                cob.with(last);\n+                last = null;\n+            }\n+        }\n+    }\n+\n@@ -109,1 +148,2 @@\n-                    mb.transformCode(com, (cob, coe) -> {\n+                    \/\/ @@@ ExceptionTableCompactor can be chained on ClassTransform level when the recent Class-File API is merged into code-reflection\n+                    mb.transformCode(com, new ExceptionTableCompactor().andThen((cob, coe) -> {\n@@ -120,1 +160,1 @@\n-                    });\n+                    }));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsCompactor.java","additions":42,"deletions":2,"binary":false,"changes":44,"status":"modified"}]}