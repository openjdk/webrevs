{"files":[{"patch":"@@ -81,0 +81,3 @@\n+        } else if (op instanceof CoreOp.ExceptionRegionExit ere) {\n+            \/\/ Cannot remove block parameters from exception handlers\n+            removeUnusedBlockParameters(b, ere.end());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/NormalizeBlocksTransformer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -535,1 +535,1 @@\n-                    for (Block.Reference catchBlock : er.catchBlocks().reversed()) {\n+                    for (Block.Reference catchBlock : er.catchBlocks()) {\n@@ -564,1 +564,1 @@\n-                    for (Block.Reference cbr : erNode.ere.catchBlocks()) {\n+                    for (Block.Reference cbr : erNode.ere.catchBlocks().reversed()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    private record ExceptionRegionEntry(Op.Result enter, Block.Builder startBlock, ExceptionRegion region) {}\n+    private record ExceptionRegionEntry(CoreOp.ExceptionRegionEnter enter, Block.Builder startBlock, ExceptionRegion region) {}\n@@ -320,1 +320,1 @@\n-                next.op(CoreOp.exceptionRegionExit(ee.enter(), targetBlock.successor(next.parameters())));\n+                next.op(CoreOp.exceptionRegionExit(targetBlock.successor(next.parameters()), ee.enter().catchBlocks().reversed()));\n@@ -356,1 +356,1 @@\n-                            op(CoreOp.exceptionRegionExit(er.enter(), next.successor()));\n+                            op(CoreOp.exceptionRegionExit(next.successor(), er.enter().catchBlocks().reversed()));\n@@ -377,1 +377,1 @@\n-                            Op ere = CoreOp.exceptionRegionEnter(next.successor(), findTargetBlock(reg.handlerLabel()).successor());\n+                            var ere = CoreOp.exceptionRegionEnter(next.successor(), findTargetBlock(reg.handlerLabel()).successor());\n@@ -380,1 +380,1 @@\n-                            exceptionRegionStack.push(new ExceptionRegionEntry(ere.result(), next, reg));\n+                            exceptionRegionStack.push(new ExceptionRegionEntry(ere, next, reg));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -136,6 +136,8 @@\n-        void popExceptionRegion(CoreOp.ExceptionRegionEnter ers) {\n-            if (erStack.peek().ers != ers) {\n-                \/\/ @@@ Use internal exception type\n-                throw interpreterException(new IllegalStateException(\"Mismatched exception regions\"));\n-            }\n-            erStack.pop();\n+        void popExceptionRegion(CoreOp.ExceptionRegionExit ere) {\n+            ere.catchBlocks().forEach(catchBlock -> {\n+                if (erStack.peek().catchBlock != catchBlock.targetBlock()) {\n+                    \/\/ @@@ Use internal exception type\n+                    throw interpreterException(new IllegalStateException(\"Mismatched exception regions\"));\n+                }\n+                erStack.pop();\n+            });\n@@ -159,0 +161,3 @@\n+            while (erStack.size() > er.erStackDepth()) {\n+                erStack.pop();\n+            }\n@@ -192,2 +197,1 @@\n-    record ExceptionRegionRecord(BlockContext mark, CoreOp.ExceptionRegionEnter ers)\n-            implements CoreOp.ExceptionRegion {\n+    record ExceptionRegionRecord(BlockContext mark, int erStackDepth, Block catchBlock) {\n@@ -195,13 +199,10 @@\n-            for (Block.Reference catchBlock : ers.catchBlocks()) {\n-                Block target = catchBlock.targetBlock();\n-                List<Block.Parameter> args = target.parameters();\n-                if (args.size() != 1) {\n-                    throw interpreterException(new IllegalStateException(\"Catch block must have one argument\"));\n-                }\n-                TypeElement et = args.get(0).type();\n-                if (et instanceof VarType vt) {\n-                    et = vt.valueType();\n-                }\n-                if (resolveToClass(l, et).isInstance(e)) {\n-                    return target;\n-                }\n+            List<Block.Parameter> args = catchBlock.parameters();\n+            if (args.size() != 1) {\n+                throw interpreterException(new IllegalStateException(\"Catch block must have one argument\"));\n+            }\n+            TypeElement et = args.get(0).type();\n+            if (et instanceof VarType vt) {\n+                et = vt.valueType();\n+            }\n+            if (resolveToClass(l, et).isInstance(e)) {\n+                return catchBlock;\n@@ -332,4 +333,5 @@\n-                var er = new ExceptionRegionRecord(oc.stack.peek(), ers);\n-                oc.setValue(ers.result(), er);\n-\n-                oc.pushExceptionRegion(er);\n+                int erStackDepth = oc.erStack.size();\n+                ers.catchBlocks().forEach(catchBlock -> {\n+                    var er = new ExceptionRegionRecord(oc.stack.peek(), erStackDepth, catchBlock.targetBlock());\n+                    oc.pushExceptionRegion(er);\n+                });\n@@ -339,1 +341,1 @@\n-                oc.popExceptionRegion(ere.regionStart());\n+                oc.popExceptionRegion(ere);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":28,"deletions":26,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2568,13 +2568,0 @@\n-    \/\/ @@@ Sealed\n-    \/\/ Synthetic\/hidden type that is the result type of an ExceptionRegionStart operation\n-    \/\/ and is an operand of an ExceptionRegionEnd operation\n-\n-    \/**\n-     * A synthetic exception region type, that is the operation result-type of an exception region\n-     * start operation.\n-     *\/\n-    \/\/ @@@: Create as new type element\n-    public interface ExceptionRegion {\n-        TypeElement EXCEPTION_REGION_TYPE = JavaType.type(ExceptionRegion.class);\n-    }\n-\n@@ -2641,1 +2628,1 @@\n-            return ExceptionRegion.EXCEPTION_REGION_TYPE;\n+            return JavaType.VOID;\n@@ -2653,1 +2640,3 @@\n-        final Block.Reference end;\n+        \/\/ First successor is the non-exceptional successor whose target indicates\n+        \/\/ the first block following the exception region.\n+        final List<Block.Reference> s;\n@@ -2658,6 +2647,2 @@\n-            if (def.operands().size() != 1) {\n-                throw new IllegalArgumentException(\"Operation must have one operand\" + def.name());\n-            }\n-\n-            if (def.successors().size() != 1) {\n-                throw new IllegalArgumentException(\"Operation must have one successor\" + def.name());\n+            if (def.successors().size() < 2) {\n+                throw new IllegalArgumentException(\"Operation must have two or more successors\" + def.name());\n@@ -2666,1 +2651,1 @@\n-            this.end = def.successors().get(0);\n+            this.s = List.copyOf(def.successors());\n@@ -2672,1 +2657,1 @@\n-            this.end = cc.getSuccessorOrCreate(that.end);\n+            this.s = that.s.stream().map(cc::getSuccessorOrCreate).toList();\n@@ -2680,5 +2665,2 @@\n-        ExceptionRegionExit(Value exceptionRegion, Block.Reference end) {\n-            super(NAME, checkValue(exceptionRegion));\n-\n-            this.end = end;\n-        }\n+        ExceptionRegionExit(List<Block.Reference> s) {\n+            super(NAME, List.of());\n@@ -2686,4 +2668,2 @@\n-        static List<Value> checkValue(Value er) {\n-            if (!(er instanceof Result or && or.op() instanceof ExceptionRegionEnter)) {\n-                throw new IllegalArgumentException(\n-                        \"Operand not the result of an exception.region.start operation: \" + er);\n+            if (s.size() < 2) {\n+                throw new IllegalArgumentException(\"Operation must have two or more successors\" + opName());\n@@ -2692,1 +2672,1 @@\n-            return List.of(er);\n+            this.s = List.copyOf(s);\n@@ -2697,1 +2677,1 @@\n-            return List.of(end);\n+            return s;\n@@ -2701,1 +2681,1 @@\n-            return end;\n+            return s.get(0);\n@@ -2704,6 +2684,2 @@\n-        public ExceptionRegionEnter regionStart() {\n-            if (operands().get(0) instanceof Result or &&\n-                    or.op() instanceof ExceptionRegionEnter ers) {\n-                return ers;\n-            }\n-            throw new InternalError(\"Should not reach here\");\n+        public List<Block.Reference> catchBlocks() {\n+            return s.subList(1, s.size());\n@@ -3603,1 +3579,0 @@\n-     * @param exceptionRegion the exception region to be exited\n@@ -3605,0 +3580,1 @@\n+     * @param catchers the blocks handling exceptions thrown by the region block\n@@ -3607,2 +3583,16 @@\n-    public static ExceptionRegionExit exceptionRegionExit(Value exceptionRegion, Block.Reference end) {\n-        return new ExceptionRegionExit(exceptionRegion, end);\n+    public static ExceptionRegionExit exceptionRegionExit(Block.Reference end, Block.Reference... catchers) {\n+        return exceptionRegionExit(end, List.of(catchers));\n+    }\n+\n+    \/**\n+     * Creates an exception region exit operation\n+     *\n+     * @param end             the block to which control is transferred after the exception region is exited\n+     * @param catchers the blocks handling exceptions thrown by the region block\n+     * @return the exception region exit operation\n+     *\/\n+    public static ExceptionRegionExit exceptionRegionExit(Block.Reference end, List<Block.Reference> catchers) {\n+        List<Block.Reference> s = new ArrayList<>();\n+        s.add(end);\n+        s.addAll(catchers);\n+        return new ExceptionRegionExit(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":34,"deletions":44,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -488,2 +488,2 @@\n-            Result syncExceptionRegion = b.op(exceptionRegionEnter(\n-                    syncRegionEnter.successor(), List.of(catcherFinally.successor())));\n+            b.op(exceptionRegionEnter(\n+                    syncRegionEnter.successor(), catcherFinally.successor()));\n@@ -498,1 +498,1 @@\n-                    block.op(exceptionRegionExit(syncExceptionRegion, exitRegion.successor()));\n+                    block.op(exceptionRegionExit(exitRegion.successor(), catcherFinally.successor()));\n@@ -510,1 +510,1 @@\n-                    block.op(exceptionRegionExit(syncExceptionRegion, exit.successor()));\n+                    block.op(exceptionRegionExit(exit.successor(), catcherFinally.successor()));\n@@ -524,2 +524,2 @@\n-            Result catcherExceptionRegion = catcherFinally.op(exceptionRegionEnter(\n-                    catcherFinallyRegionEnter.successor(), List.of(catcherFinally.successor())));\n+            catcherFinally.op(exceptionRegionEnter(\n+                    catcherFinallyRegionEnter.successor(), catcherFinally.successor()));\n@@ -532,1 +532,1 @@\n-                    catcherExceptionRegion, catcherFinallyRegionExit.successor()));\n+                    catcherFinallyRegionExit.successor(), catcherFinally.successor()));\n@@ -2539,2 +2539,4 @@\n-            Block.Builder catcherFinally = null;\n-            if (finalizer != null) {\n+            Block.Builder catcherFinally;\n+            if (finalizer == null) {\n+                catcherFinally = null;\n+            } else {\n@@ -2547,1 +2549,1 @@\n-            Result tryExceptionRegion = b.op(exceptionRegionEnter(tryRegionEnter.successor(), catchers.stream()\n+            List<Block.Reference> exitHandlers = catchers.stream()\n@@ -2549,1 +2551,2 @@\n-                    .toList()));\n+                    .toList();\n+            b.op(exceptionRegionEnter(tryRegionEnter.successor(), exitHandlers.reversed()));\n@@ -2556,1 +2559,1 @@\n-                        return inlineFinalizer(block, tryExceptionRegion, opT);\n+                        return inlineFinalizer(block, exitHandlers, opT);\n@@ -2566,1 +2569,1 @@\n-                        block.op(exceptionRegionExit(tryExceptionRegion, tryRegionReturnExit.successor()));\n+                        block.op(exceptionRegionExit(tryRegionReturnExit.successor(), exitHandlers));\n@@ -2595,1 +2598,1 @@\n-                    tryRegionExit.op(exceptionRegionExit(tryExceptionRegion, finallyEnter.successor()));\n+                    tryRegionExit.op(exceptionRegionExit(finallyEnter.successor(), exitHandlers));\n@@ -2599,1 +2602,1 @@\n-                tryRegionExit.op(exceptionRegionExit(tryExceptionRegion, exit.successor()));\n+                tryRegionExit.op(exceptionRegionExit(exit.successor(), exitHandlers));\n@@ -2619,1 +2622,1 @@\n-                            return inlineFinalizer(block, catchExceptionRegion, opT);\n+                            return inlineFinalizer(block, List.of(catcherFinally.successor()), opT);\n@@ -2621,1 +2624,1 @@\n-                            return inlineFinalizer(block, catchExceptionRegion, opT);\n+                            return inlineFinalizer(block, List.of(catcherFinally.successor()), opT);\n@@ -2646,1 +2649,1 @@\n-                        catchRegionExit.op(exceptionRegionExit(catchExceptionRegion, finallyEnter.successor()));\n+                        catchRegionExit.op(exceptionRegionExit(finallyEnter.successor(), catcherFinally.successor()));\n@@ -2720,1 +2723,1 @@\n-        Block.Builder inlineFinalizer(Block.Builder block1, Value exceptionRegion, OpTransformer opT) {\n+        Block.Builder inlineFinalizer(Block.Builder block1, List<Block.Reference> tryHandlers, OpTransformer opT) {\n@@ -2724,1 +2727,1 @@\n-            block1.op(exceptionRegionExit(exceptionRegion, finallyEnter.successor()));\n+            block1.op(exceptionRegionExit(finallyEnter.successor(), tryHandlers));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-                    var er1 = fblock.op(exceptionRegionEnter(\n+                    fblock.op(exceptionRegionEnter(\n@@ -84,1 +84,1 @@\n-                            catchER1ISE.successor(), catchER1IAE.successor()));\n+                            catchER1IAE.successor(), catchER1ISE.successor()));\n@@ -91,1 +91,2 @@\n-                        b.op(exceptionRegionExit(er1, end.successor()));\n+                        b.op(exceptionRegionExit(end.successor(),\n+                            catchER1ISE.successor(), catchER1IAE.successor()));\n@@ -173,1 +174,1 @@\n-                    var er1 = fblock.op(exceptionRegionEnter(\n+                    fblock.op(exceptionRegionEnter(\n@@ -175,1 +176,1 @@\n-                            catchER1ISE.successor(), catchER1T.successor()));\n+                            catchER1T.successor(), catchER1ISE.successor()));\n@@ -182,1 +183,3 @@\n-                        b.op(exceptionRegionExit(er1, end.successor()));\n+                        b.op(exceptionRegionExit(end.successor(),\n+                            catchER1ISE.successor(), catchER1T.successor()));\n+\n@@ -269,1 +272,1 @@\n-                    var er1 = fblock.op(exceptionRegionEnter(\n+                    fblock.op(exceptionRegionEnter(\n@@ -278,1 +281,1 @@\n-                    var er2 = enterER1.op(exceptionRegionEnter(\n+                    enterER1.op(exceptionRegionEnter(\n@@ -287,1 +290,2 @@\n-                        b.op(exceptionRegionExit(er2, b3.successor()));\n+                        b.op(exceptionRegionExit(b3.successor(),\n+                            catchER2.successor()));\n@@ -301,1 +305,2 @@\n-                        b.op(exceptionRegionExit(er1, end.successor()));\n+                        b.op(exceptionRegionExit(end.successor(),\n+                            catchER1.successor()));\n@@ -391,1 +396,1 @@\n-                    var er1 = fblock.op(exceptionRegionEnter(\n+                    fblock.op(exceptionRegionEnter(\n@@ -393,1 +398,1 @@\n-                            catchRE.successor(), catchAll.successor()));\n+                            catchAll.successor(), catchRE.successor()));\n@@ -400,1 +405,2 @@\n-                        b.op(exceptionRegionExit(er1, exitER1.successor()));\n+                        b.op(exceptionRegionExit(exitER1.successor(),\n+                            catchRE.successor(), catchAll.successor()));\n@@ -410,1 +416,1 @@\n-                    var er2 = catchRE.op(exceptionRegionEnter(\n+                    catchRE.op(exceptionRegionEnter(\n@@ -418,1 +424,2 @@\n-                        b.op(exceptionRegionExit(er2, exitER2.successor()));\n+                        b.op(exceptionRegionExit(exitER2.successor(),\n+                            catchAll.successor()));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExceptionRegionOps.java","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-                %2 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_1 ^block_3 ^block_8;\n+                exception.region.enter ^block_1 ^block_8 ^block_3;\n@@ -81,1 +81,1 @@\n-                exception.region.exit %2 ^block_6;\n+                exception.region.exit ^block_6 ^block_3 ^block_8;\n@@ -84,1 +84,1 @@\n-                %5 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_4 ^block_8;\n+                exception.region.enter ^block_4 ^block_8;\n@@ -91,1 +91,1 @@\n-                exception.region.exit %5 ^block_6;\n+                exception.region.exit ^block_6 ^block_8;\n@@ -108,1 +108,1 @@\n-                %2 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_1 ^block_2 ^block_5;\n+                exception.region.enter ^block_1 ^block_5 ^block_2;\n@@ -112,1 +112,1 @@\n-                exception.region.exit %2 ^block_4;\n+                exception.region.exit ^block_4 ^block_2 ^block_5;\n@@ -115,1 +115,1 @@\n-                %5 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_3 ^block_5;\n+                exception.region.enter ^block_3 ^block_5;\n@@ -119,1 +119,1 @@\n-                exception.region.exit %5 ^block_4;\n+                exception.region.exit ^block_4 ^block_5;\n@@ -216,1 +216,1 @@\n-                %0 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_1 ^block_4;\n+                exception.region.enter ^block_1 ^block_4;\n@@ -223,1 +223,1 @@\n-                exception.region.exit %0 ^block_3;\n+                exception.region.exit ^block_3 ^block_4;\n@@ -237,1 +237,1 @@\n-                %0 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_1 ^block_3;\n+                exception.region.enter ^block_1 ^block_3;\n@@ -241,1 +241,1 @@\n-                exception.region.exit %0 ^block_2;\n+                exception.region.exit ^block_2 ^block_3;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestNormalizeBlocksTransformer.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                %6 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_2 ^block_4;\n+                exception.region.enter ^block_2 ^block_4;\n@@ -54,1 +54,1 @@\n-                exception.region.exit %6 ^block_3;\n+                exception.region.exit ^block_3 ^block_4;\n@@ -61,1 +61,1 @@\n-                %12 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_5 ^block_4;\n+                exception.region.enter ^block_5 ^block_4;\n@@ -65,1 +65,1 @@\n-                exception.region.exit %12 ^block_6;\n+                exception.region.exit ^block_6 ^block_4;\n@@ -89,1 +89,1 @@\n-                %6 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_2 ^block_8;\n+                exception.region.enter ^block_2 ^block_8;\n@@ -100,1 +100,1 @@\n-                exception.region.exit %6 ^block_4;\n+                exception.region.exit ^block_4 ^block_8;\n@@ -114,1 +114,1 @@\n-                exception.region.exit %6 ^block_7;\n+                exception.region.exit ^block_7 ^block_8;\n@@ -121,1 +121,1 @@\n-                %16 : java.lang.reflect.code.op.CoreOp$ExceptionRegion = exception.region.enter ^block_9 ^block_8;\n+                exception.region.enter ^block_9 ^block_8;\n@@ -125,1 +125,1 @@\n-                exception.region.exit %16 ^block_10;\n+                exception.region.exit ^block_10 ^block_8;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/TestSynchronized.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}