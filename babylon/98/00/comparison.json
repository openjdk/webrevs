{"files":[{"patch":"@@ -30,0 +30,3 @@\n+  \/\/  char *schema = (char*)\"args:[1:?:4+S32Array:{length:s32,array:[*:?:s32]}]\";\n+   \/\/ std::cout << \"schema = '\"<<schema<<\"'\"<<std::endl;\n+   \/\/ backend.dumpSchema(std::cout, 0, schema, nullptr);\n","filename":"hat\/backends\/opencl\/cpp\/info.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -108,0 +108,180 @@\n+enum state_e {\n+    awaitingName,\n+    inName,\n+    awaitingArrayLen,\n+    haveName,\n+    inArrayLen,\n+    inAnonName,\n+    lastEnum\n+};\n+const char *stateNames[]={\n+        \"awaitingName\",\n+        \"inName\",\n+        \"awaitingArrayLen\",\n+        \"haveName\",\n+        \"inArrayLen\",\n+        \"inAnonName\",\n+        \"lastEnum\"\n+};\n+char *strduprange(char *start, char *end ){\n+    char *s = new char[end-start+1];\n+    std::memcpy(s, start, end-start);\n+    s[end-start]='\\0';\n+    return s;\n+}\n+\n+char * OpenCLBackend::dumpSchema(std::ostream &out, int depth, char *ptr, void *data){\n+\n+    state_e state = awaitingName;\n+    char *nameStart = nullptr;\n+    char *numStart = nullptr;\n+    char *indent = new char[depth*4+1];\n+    for (int i=0; i<depth*4; i++){\n+        indent[i]=' ';\n+    }\n+    indent[depth*4]='\\0';\n+    out << indent;\n+    while (ptr != nullptr && *ptr != '\\0' ){\n+       \/\/ out <<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+        switch (state){\n+            case awaitingName:{\n+                if (*ptr=='?') {\n+                    nameStart = ptr;\n+                    state = inAnonName;\n+                    ptr++;\n+                }else if (std::isalpha(*ptr)) {\n+                    nameStart = ptr;\n+                    state = inName;\n+                    ptr++;\n+                }else{\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+                break;\n+            }\n+            case inName:\n+            case inAnonName:{\n+                if (state == inName && std::isalnum(*ptr) || *ptr=='_') {\n+                    ptr++;\n+                }else if (*ptr == ':') {\n+                    char *name = strduprange(nameStart, ptr);\n+                    out << \"name '\" << name << \"'\" << std::endl << indent;\n+                    delete[] name;\n+                    ptr++;\n+                    state = haveName;\n+                }else{\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+                break;\n+            }\n+            case haveName:{\n+                \/\/ we expect a type\n+                if (*ptr == '[') {\n+                    ptr++;\n+                    state = awaitingArrayLen;\n+                    \/\/ we expect a type\n+                }else if (*ptr == '{' ) {\n+                        ptr++;\n+                        state=awaitingName;\n+                }else if (*ptr == '<') {\n+                    ptr++;\n+                    state=awaitingName;\n+                } else{\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+                break;\n+            }\n+            case awaitingArrayLen:{\n+                if (std::isdigit(*ptr)) {\n+                    numStart = ptr;\n+                    ptr++;\n+                    state=inArrayLen;\n+                } else{\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+                break;\n+            }\n+\n+            case inArrayLen:{\n+                if (std::isdigit(*ptr)) {\n+                    ptr++;\n+                }   else if (*ptr == ':') {\n+                    char *num = strduprange(numStart, ptr);\n+                    out<<\"num '\"<<num<<\"'\"<<std::endl<<indent;\n+                    delete [] num;\n+                    ptr++;\n+                    state=awaitingName;\n+                    ptr = dumpSchema(out, depth+1, ptr, nullptr);\n+                } else{\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+                break;\n+            }\n+            case lastEnum:\n+                {\n+                    std::cerr<<\"err \"<<\"<\"<<stateNames[state] <<\"> with '\" <<((char)*ptr)<<\"'\";\n+                    exit(1);\n+                }\n+        }\n+    }\n+    delete[] indent;\n+    return ptr;\n+}\n+\n+void OpenCLBackend::dumpSled(std::ostream &out,void *argArray){\n+    ArgSled argSled(static_cast<ArgArray_t *>(argArray));\n+    for (int i = 0; i < argSled.argc(); i++) {\n+        Arg_t *arg = argSled.arg(i);\n+        switch (arg->variant) {\n+            case '&': {\n+                out << \"Buf: of \" << arg->value.buffer.sizeInBytes << \" bytes \"<<std::endl;\n+                break;\n+            }\n+            case 'B':{\n+                out << \"S8:\" << arg->value.s8 << std::endl;\n+                break;\n+            }\n+            case 'Z':{\n+                out << \"Z:\" << arg->value.z1 << std::endl;\n+                break;\n+            }\n+            case 'C':{\n+                out << \"U16:\" << arg->value.u16 << std::endl;\n+                break;\n+            }\n+            case 'S':{\n+                out << \"S16:\" << arg->value.s16 << std::endl;\n+                break;\n+            }\n+            case 'I':{\n+                out << \"S32:\" << arg->value.s32 << std::endl;\n+                break;\n+            }\n+            case 'F':{\n+                out << \"F32:\" << arg->value.s32 << std::endl;\n+                break;\n+            }\n+            case 'J':{\n+                out << \"S64:\" << arg->value.s64 << std::endl;\n+                break;\n+            }\n+            case 'D':{\n+                out << \"F64:\" << arg->value.f64 << std::endl;\n+                break;\n+            }\n+            default: {\n+                std::cerr <<\"unexpected variant '\"<< (char) arg->variant << \"'\"<< std::endl;\n+                exit(1);\n+            }\n+        }\n+    }\n+    out << \"schema len = \" << argSled.schemaLen() <<std::endl;\n+\n+    out << \"schem = \" << argSled.schema() <<std::endl;\n+\n+   \/\/ dumpSchema(out, 0, argSled.schema(), nullptr);\n+}\n@@ -112,1 +292,1 @@\n-\n+    dynamic_cast<OpenCLBackend *>(program->backend)->dumpSled(std::cout, argArray);\n@@ -620,1 +800,1 @@\n-    SNPRINTF(unknown, sizeof(unknown), \"unknown error %d\", status);\n+    SNPRINTF(unknown, sizeof(unknown), \"awaitingName error %d\", status);\n","filename":"hat\/backends\/opencl\/cpp\/opencl_backend.cpp","additions":182,"deletions":2,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -126,1 +126,2 @@\n-\n+    void dumpSled(std::ostream &out,void *argArray);\n+    char *dumpSchema(std::ostream &out,int depth, char *ptr, void *data);\n","filename":"hat\/backends\/opencl\/include\/opencl_backend.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}