{"files":[{"patch":"@@ -40,6 +40,1 @@\n-        return hashDefine(\"__global\");  \/\/ nor this\n-    }\n-\n-    @Override\n-    public CudaHATKernelBuilder pragmas() {\n-        return self();\n+        return self();  \/\/ nor this\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaHATKernelBuilder.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import hat.NDRange;\n@@ -30,1 +29,0 @@\n-\n@@ -40,9 +38,25 @@\n-        hashIfndef(\"NULL\", _ -> hashDefine(\"NULL\", \"0\"));\n-        return self();\n-    }\n-\n-    @Override\n-    public OpenCLHATKernelBuilder pragmas() {\n-        return self().\n-                pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_global_int32_base_atomics\", \":\", \"enable\").\n-                pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_local_int32_base_atomics\", \":\", \"enable\");\n+        return self()\n+              \/\/  .hashDefine(\"HAT_OPENCL\")\n+              \/\/  .hashIfdef(\"HAT_OPENCL\", _ ->\n+                \/\/        indent(_ -> self()\n+                                .hashIfndef(\"NULL\", _ -> hashDefine(\"NULL\", \"0\"))\n+                                .pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_global_int32_base_atomics\", \":\", \"enable\")\n+                                .pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_local_int32_base_atomics\", \":\", \"enable\")\n+                                .hashDefine(\"_gix()\", _ -> paren(_ -> identifier(\"get_global_id\").paren(_ -> intConstZero())))\n+                                .hashDefine(\"_giy()\", _ -> paren(_ -> identifier(\"get_global_id\").paren(_ -> intConstOne())))\n+                                .hashDefine(\"_giz()\", _ -> paren(_ -> identifier(\"get_global_id\").paren(_ -> intConstTwo())))\n+                                .hashDefine(\"_lix()\", _ -> paren(_ -> identifier(\"get_local_id\").paren(_ -> intConstZero())))\n+                                .hashDefine(\"_liy()\", _ -> paren(_ -> identifier(\"get_local_id\").paren(_ -> intConstOne())))\n+                                .hashDefine(\"_liz()\", _ -> paren(_ -> identifier(\"get_local_id\").paren(_ -> intConstTwo())))\n+                                .hashDefine(\"_gsx()\", _ -> paren(_ -> identifier(\"get_global_size\").paren(_ -> intConstZero())))\n+                                .hashDefine(\"_gsy()\", _ -> paren(_ -> identifier(\"get_global_size\").paren(_ -> intConstOne())))\n+                                .hashDefine(\"_gsz()\", _ -> paren(_ -> identifier(\"get_global_size\").paren(_ -> intConstTwo())))\n+                                .hashDefine(\"_lsx()\", _ -> paren(_ -> identifier(\"get_local_size\").paren(_ -> intConstZero())))\n+                                .hashDefine(\"_lsy()\", _ -> paren(_ -> identifier(\"get_local_size\").paren(_ -> intConstOne())))\n+                                .hashDefine(\"_lsz()\", _ -> paren(_ -> identifier(\"get_local_size\").paren(_ -> intConstTwo())))\n+                                .hashDefine(\"_bix()\", _ -> paren(_ -> identifier(\"get_group_id\").paren(_ -> intConstZero())))\n+                                .hashDefine(\"_biy()\", _ -> paren(_ -> identifier(\"get_group_id\").paren(_ -> intConstOne())))\n+                                .hashDefine(\"_biz()\", _ -> paren(_ -> identifier(\"get_group_id\").paren(_ -> intConstTwo())))\n+                                .hashDefine(\"_barrier()\", _->identifier(\"barrier\").oparen().identifier(\"CLK_LOCAL_MEM_FENCE\").cparen());\n+               \/\/         )\n+               \/\/ );\n@@ -53,1 +67,7 @@\n-        return identifier(\"get_global_id\").oparen().literal(id).cparen();\n+        switch (id) {\n+            case 0 -> identifier(\"_gix()\");\n+            case 1 -> identifier(\"_giy()\");\n+            case 2 -> identifier(\"_giz()\");\n+            default -> throw new RuntimeException(\"globalId id = \" + id);\n+        }\n+        return self();\n@@ -58,1 +78,7 @@\n-        return identifier(\"get_local_id\").oparen().literal(id).cparen();\n+        switch (id) {\n+            case 0 -> identifier(\"_lix()\");\n+            case 1 -> identifier(\"_liy()\");\n+            case 2 -> identifier(\"_liz()\");\n+            default -> throw new RuntimeException(\"localId id = \" + id);\n+        }\n+        return self();\n@@ -63,1 +89,7 @@\n-        return identifier(\"get_global_size\").oparen().literal(id).cparen();\n+        switch (id) {\n+            case 0 -> identifier(\"_gsx()\");\n+            case 1 -> identifier(\"_gsy()\");\n+            case 2 -> identifier(\"_gsz()\");\n+            default -> throw new RuntimeException(\"globalSize id = \" + id);\n+        }\n+        return self();\n@@ -68,1 +100,7 @@\n-        return identifier(\"get_local_size\").oparen().literal(id).cparen();\n+        switch (id) {\n+            case 0 -> identifier(\"_lsx()\");\n+            case 1 -> identifier(\"_lsy()\");\n+            case 2 -> identifier(\"_lsz()\");\n+            default -> throw new RuntimeException(\"localSize id = \" + id);\n+        }\n+        return self();\n@@ -73,1 +111,7 @@\n-        return identifier(\"get_group_id\").oparen().literal(id).cparen();\n+        switch (id) {\n+            case 0 -> identifier(\"_bix()\");\n+            case 1 -> identifier(\"_biy()\");\n+            case 2 -> identifier(\"_biz()\");\n+            default -> throw new RuntimeException(\"blockId id = \" + id);\n+        }\n+        return self();\n@@ -78,1 +122,5 @@\n-        return identifier(\"barrier\").oparen().identifier(\"CLK_LOCAL_MEM_FENCE\").cparen().semicolon();\n+        return identifier(\"_barrier\").ocparen();\n+    }\n+\n+    public OpenCLHATKernelBuilder kernelPrefix() {\n+        return keyword(\"__kernel\").space();\n@@ -81,0 +129,1 @@\n+\n@@ -83,1 +132,5 @@\n-        return keyword(\"__kernel\").space().voidType().space().identifier(funcOp.funcName());\n+        return kernelPrefix().voidType().space().identifier(funcOp.funcName());\n+    }\n+\n+    public OpenCLHATKernelBuilder functionPrefix() {\n+        return keyword(\"inline\").space();\n@@ -88,1 +141,1 @@\n-        return keyword(\"inline\").space().type(codeBuilderContext,type).space().identifier(funcOp.funcName());\n+        return functionPrefix().type(codeBuilderContext, type).space().identifier(funcOp.funcName());\n@@ -102,4 +155,4 @@\n-    public OpenCLHATKernelBuilder atomicInc(ScopedCodeBuilderContext buildContext, Op.Result instanceResult, String name){\n-          return identifier(\"atomic_inc\").paren(_ ->\n-              ampersand().recurse(buildContext, instanceResult.op()).rarrow().identifier(name)\n-          );\n+    public OpenCLHATKernelBuilder atomicInc(ScopedCodeBuilderContext buildContext, Op.Result instanceResult, String name) {\n+        return identifier(\"atomic_inc\").paren(_ ->\n+                ampersand().recurse(buildContext, instanceResult.op()).rarrow().identifier(name)\n+        );\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLHATKernelBuilder.java","additions":76,"deletions":23,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-        builder.defines().pragmas().types();\n+        builder.defines().types();\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,9 +37,4 @@\n-    public OpenCLHatKernelBuilder defines() {\n-        return pragmas().hashIfndef(\"NULL\", _ -> hashDefine(\"NULL\", \"0\"));\n-    }\n-\n-    @Override\n-    public OpenCLHatKernelBuilder pragmas() {\n-        return self().\n-                pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_global_int32_base_atomics\", \":\", \"enable\").\n-                pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_local_int32_base_atomics\", \":\", \"enable\");\n+    public OpenCLHatKernelBuilder defines(){\n+        return hashIfndef(\"NULL\", _ -> hashDefine(\"NULL\", \"0\"))\n+                .pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_global_int32_base_atomics\", \":\", \"enable\")\n+                .pragma(\"OPENCL\", \"EXTENSION\", \"cl_khr_local_int32_base_atomics\", \":\", \"enable\");\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLHatKernelBuilder.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        builder.defines().pragmas().types();\n+        builder.defines().types();\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/C99JExtractedBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,2 +171,0 @@\n-    public abstract T pragmas();\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -473,1 +473,6 @@\n-\n+    public final T intConstOne() {\n+        return constant(\"1\");\n+    }\n+    public final T intConstTwo() {\n+        return constant(\"2\");\n+    }\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/CodeBuilder.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -191,0 +191,7 @@\n+    public T hashDefine(String name, Consumer<T> consumer) {\n+        hashDefineKeyword().space().identifier(name);\n+        space();\n+        consumer.accept(self());\n+        return nl();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilder.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import hat.ComputeRange;\n-import hat.GlobalMesh1D;\n@@ -32,1 +30,0 @@\n-import hat.LocalMesh1D;\n@@ -46,2 +43,2 @@\n- *     HAT=SHOW_CODE java -cp job.jar hat.java exp ffi-opencl PrefixSum\n- *     HAT=SHOW_CODE java -cp job.jar hat.java exp ffi-cuda PrefixSum\n+ * java @hat\/exp ffi-opencl -DHAT=SHOW_CODE PrefixSum\n+ * java @hat\/exp ffi-cuda -DHAT=SHOW_CODE PrefixSum\n@@ -51,1 +48,1 @@\n-    private interface SharedS32x32Array extends Buffer {\n+    private interface SharedS32x256Array extends Buffer {\n@@ -53,0 +50,1 @@\n+\n@@ -55,4 +53,1 @@\n-        Schema<SharedS32x32Array> schema = Schema.of(SharedS32x32Array.class,\n-                $ -> $\n-                        \/\/ It is a bound schema, so we fix the size here\n-                        .array(\"array\", 256));\n+        Schema<SharedS32x256Array> schema = Schema.of(SharedS32x256Array.class, $ -> $.array(\"array\", 256));\n@@ -60,1 +55,1 @@\n-        static SharedS32x32Array create(Accelerator accelerator) {\n+        static SharedS32x256Array create(Accelerator accelerator) {\n@@ -64,5 +59,1 @@\n-       \/\/ static SharedS32x32Array createLocal(Accelerator accelerator) {\n-         \/\/   return schema.allocate(accelerator);\n-       \/\/ }\n-\n-        static SharedS32x32Array createLocal() {\n+        static SharedS32x256Array createLocal() {\n@@ -74,2 +65,0 @@\n-\n-\n@@ -167,2 +156,3 @@\n-     static void groupScan(@RO KernelContext kc,@RW S32Array dataBuf){\n-        var scratchBuf = SharedS32x32Array.createLocal();\n+    static void groupScan(@RO KernelContext kc, @RW S32Array dataBuf) {\n+        var scratchBuf = SharedS32x256Array.createLocal();\n+        \/\/ int[] scratch=scratchBuf.arrayView();\n@@ -170,3 +160,2 @@\n-        \/\/ int[] scratch=scratchBuf.arrayView(); one day\n-        \/\/  scratch[kc.lix]=data[kc.gix];\n-        scratchBuf.array(kc.lix,data[kc.gix]); \/\/ copy into local scratch for the reduction\n+\n+        scratchBuf.array(kc.lix, data[kc.gix]); \/\/ scratch[kc.lix]=data[kc.gix];\n@@ -175,4 +164,3 @@\n-        for (int step=2; step <= kc.lsx; step<<=1){\n-            if (((kc.lix+1)%step) == 0){\n-                \/\/  one day scratch[kc.lix]+=scratch[kc.lix-(step>>1)];\n-                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix)+scratchBuf.array(kc.lix-(step>>1)));\n+        for (int step = 2; step <= kc.lsx; step <<= 1) {\n+            if (((kc.lix + 1) % step) == 0) {\n+                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix) + scratchBuf.array(kc.lix - (step >> 1))); \/\/ scratch[kc.lix]+=scratch[kc.lix-(step>>1)];\n@@ -182,6 +170,4 @@\n-        int sum=0;\n-        if ((kc.lix+1) == kc.lsx){\n-           \/\/ one day  sum = scratch[kc.lix];\n-            sum = scratchBuf.array(kc.lix);\n-           \/\/ one day  scratch[kc.lix]=0;\n-            scratchBuf.array(kc.lix,0);\n+        int sum = 0;\n+        if ((kc.lix + 1) == kc.lsx) {\n+            sum = scratchBuf.array(kc.lix);    \/\/ sum = scratch[kc.lix];\n+            scratchBuf.array(kc.lix, 0); \/\/ scratch[kc.lix]=0;\n@@ -190,8 +176,5 @@\n-        for (int step=kc.lsx; step >1 ; step>>=1){\n-            if (((kc.lix+1)%step) == 0){\n-               \/\/ int prev = scratch[kc.lix-(step>>1)];\n-                int prev = scratchBuf.array(kc.lix-(step>>1));\n-               \/\/ scratch[kc.lix-(step>>1)]=scratch[kc.lix];\n-                scratchBuf.array(kc.lix-(step>>1),scratchBuf.array(kc.lix));\n-                \/\/  scratch[kc.lix]+= prev;\n-                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix)+prev);\n+        for (int step = kc.lsx; step > 1; step >>= 1) {\n+            if (((kc.lix + 1) % step) == 0) {\n+                int prev = scratchBuf.array(kc.lix - (step >> 1));                \/\/ int prev = scratch[kc.lix-(step>>1)];\n+                scratchBuf.array(kc.lix - (step >> 1), scratchBuf.array(kc.lix)); \/\/ scratch[kc.lix-(step>>1)]=scratch[kc.lix];\n+                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix) + prev);        \/\/  scratch[kc.lix]+= prev;\n@@ -202,5 +185,4 @@\n-        if ((kc.lix+1) == kc.lsx){\n-            data[ kc.gix] = sum;\n-        }else{\n-           \/\/ data[ kc.gix] = scratch[kc.lix+1];\n-            data[ kc.gix] = scratchBuf.array(kc.lix+1);\n+        if ((kc.lix + 1) == kc.lsx) {\n+            data[kc.gix] = sum;\n+        } else {\n+            data[kc.gix] = scratchBuf.array(kc.lix + 1);  \/\/ data[ kc.gix] = scratch[kc.lix+1];\n@@ -220,13 +202,12 @@\n-    @CodeReflection static void crossGroupScan(@RO KernelContext kc, @RW S32Array  dataBuf){\n-       var scratchBuf = SharedS32x32Array.createLocal();\n-        int[] data = dataBuf.arrayView();\n-       \/\/ int[] scratch=scratchBuf.arrayView();\n-\n-        int gid = (kc.gix*(kc.gsx))-1; \/\/ 0-> -1?  hence the >0 checks below.\n-        \/\/scratch[kc.lix]= (gid>0)?data[gid]:0;\n-        scratchBuf.array(kc.lix, (gid>0)?data[gid]:0); \/\/ copy into local scratch for the reduction\n-      kc.barrier(); \/\/ make sure all of scratch is populated\n-        for (int step=2; step <= kc.gsx; step<<=1){\n-            if (((kc.lix+1)%step) == 0){\n-               \/\/ scratch[kc.lix]+=scratch[kc.lix-(step>>1)];\n-                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix)+scratchBuf.array(kc.lix-(step>>1)));\n+    @CodeReflection\n+    static void crossGroupScan(@RO KernelContext kc, @RW S32Array dataBuf) {\n+        var scratchBuf = SharedS32x256Array.createLocal();\n+        int[] data = dataBuf.arrayView();  \/\/ int[] scratch=scratchBuf.arrayView();\n+\n+        int gid = (kc.gix * (kc.gsx)) - 1; \/\/ 0-> -1?  hence the >0 checks below.\n+\n+        scratchBuf.array(kc.lix, (gid > 0) ? data[gid] : 0);   \/\/ scratch[kc.lix]= (gid>0)?data[gid]:0;\n+        kc.barrier();\n+        for (int step = 2; step <= kc.gsx; step <<= 1) {\n+            if (((kc.lix + 1) % step) == 0) {\n+                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix) + scratchBuf.array(kc.lix - (step >> 1))); \/\/ scratch[kc.lix]+=scratch[kc.lix-(step>>1)];\n@@ -234,1 +215,1 @@\n-          kc.barrier();\n+            kc.barrier();\n@@ -236,7 +217,4 @@\n-        int sum=0;\n-        if ((kc.lix+1) == kc.gsx){\n-           \/\/ sum = scratch[kc.lix];\n-            sum = scratchBuf.array(kc.lix);\n-\n-            \/\/scratch[kc.lix]=0;\n-            scratchBuf.array(kc.lix, 0);\n+        int sum = 0;\n+        if ((kc.lix + 1) == kc.gsx) {\n+            sum = scratchBuf.array(kc.lix);     \/\/ sum = scratch[kc.lix];\n+            scratchBuf.array(kc.lix, 0);  \/\/ scratch[kc.lix]=0;\n@@ -244,9 +222,6 @@\n-      kc.barrier();\n-        for (int step=kc.gsx; step >1 ; step>>=1){\n-            if (((kc.lix+1)%step) == 0){\n-              \/\/  int prev = scratch[kc.lix-(step>>1)];\n-                int prev = scratchBuf.array(kc.lix-(step>>1));\n-              \/\/  scratch[kc.lix-(step>>1)]=scratch[kc.lix];\n-                scratchBuf.array(kc.lix-(step>>1), scratchBuf.array(kc.lix));\n-               \/\/ scratch[kc.lix]+= prev;\n-                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix)+prev);\n+        kc.barrier();\n+        for (int step = kc.gsx; step > 1; step >>= 1) {\n+            if (((kc.lix + 1) % step) == 0) {\n+                int swap = scratchBuf.array(kc.lix - (step >> 1));                \/\/ int swap = scratch[kc.lix-(step>>1)];\n+                scratchBuf.array(kc.lix - (step >> 1), scratchBuf.array(kc.lix)); \/\/ scratch[kc.lix-(step>>1)]=scratch[kc.lix];\n+                scratchBuf.array(kc.lix, scratchBuf.array(kc.lix) + swap);        \/\/ scratch[kc.lix]+= swap;\n@@ -254,1 +229,1 @@\n-          kc.barrier();\n+            kc.barrier();\n@@ -257,5 +232,4 @@\n-        if ((kc.lix+1) == kc.gsx){\n-            data[ gid] = sum;\n-        }else if (gid>0){\n-          \/\/  data[ gid] = scratch[kc.lix+1];\n-            data[ gid] = scratchBuf.array(kc.lix+1);\n+        if ((kc.lix + 1) == kc.gsx) {\n+            data[gid] = sum;\n+        } else if (gid > 0) {\n+            data[gid] = scratchBuf.array(kc.lix + 1); \/\/  data[ gid] = scratch[kc.lix+1];\n@@ -263,1 +237,1 @@\n-      kc.barrier();\n+        kc.barrier();\n@@ -267,10 +241,10 @@\n-\/\/ add s[?] to each element in group[?+1]\n-\/\/ if local_size(0) were 8 and global_size(0) was 40\n-\/\/      group 0      |    group 1      |    group 2      |    group 3      |     group 4      |\n-\/\/ | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 |  0,1,2,3,4,5,6,7 |\n-\/\/                 ^                 ^                 ^                 ^                  ^\n-\/\/                 s0                s1                s2                s3                 s4\n-\/\/                     0+s0, 1+s0, ....| 0+s1, 1+s1, ....| 0+s2, 1+s2, ....| 0+s3, 1+s4, ....\n-@CodeReflection\n-   static  void sumKernel(@RO KernelContext kc, @RW S32Array  dataBuf){\n-       var scratchBuf = SharedS32x32Array.createLocal();\n+    \/\/ add s[?] to each element in group[?+1]\n+    \/\/ if local_size(0) were 8 and global_size(0) was 40\n+    \/\/      group 0      |    group 1      |    group 2      |    group 3      |     group 4      |\n+    \/\/ | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 | 0,1,2,3,4,5,6,7 |  0,1,2,3,4,5,6,7 |\n+    \/\/                 ^                 ^                 ^                 ^                  ^\n+    \/\/                 s0                s1                s2                s3                 s4\n+    \/\/                     0+s0, 1+s0, ....| 0+s1, 1+s1, ....| 0+s2, 1+s2, ....| 0+s3, 1+s4, ....\n+    @CodeReflection\n+    static void sumKernel(@RO KernelContext kc, @RW S32Array dataBuf) {\n+        var scratchBuf = SharedS32x256Array.createLocal();\n@@ -278,7 +252,6 @@\n-      \/\/  int[] scratch=scratchBuf.arrayView(); one day\n-       \/\/ scratch[kc.lix] = data[kc.gix];\n-        scratchBuf.array(kc.lix, data[kc.gix]); \/\/ copy into local scratch\n-      kc.barrier();\n-        if ((kc.lix+1)!=kc.gsx && kc.gix>0){\/\/ don't do this for last in group\n-           \/\/ scratch[kc.lix]+= data[(kc.gix*kc.gsx)-1];\n-            scratchBuf.array(kc.lix, scratchBuf.array(kc.lix)+ data[(kc.gix*kc.gsx)-1]);\n+        \/\/  int[] scratch=scratchBuf.arrayView();\n+\n+        scratchBuf.array(kc.lix, data[kc.gix]); \/\/ scratch[kc.lix] = data[kc.gix];\n+        kc.barrier();\n+        if ((kc.lix + 1) != kc.gsx && kc.gix > 0) {\/\/ don't do this for last in group\n+            scratchBuf.array(kc.lix, scratchBuf.array(kc.lix) + data[(kc.gix * kc.gsx) - 1]); \/\/ scratch[kc.lix]+= data[(kc.gix*kc.gsx)-1];\n@@ -286,3 +259,2 @@\n-      kc.barrier();\n-       \/\/data[kc.gix]=scratch[kc.lix];\n-        data[kc.gix]=scratchBuf.array(kc.lix);\n+        kc.barrier();\n+        data[kc.gix] = scratchBuf.array(kc.lix); \/\/ data[kc.gix]=scratch[kc.lix];\n@@ -292,1 +264,1 @@\n-    private static final int GROUP_SIZE = 32;\n+    private static final int GROUP_SIZE = 256;\n@@ -295,2 +267,2 @@\n-    private static void compute(ComputeContext cc,  @RW S32Array data) {\n-        cc.dispatchKernel(data.length(),kc-> groupScan(kc,  data));\n+    private static void compute(ComputeContext cc, @RW S32Array data) {\n+        cc.dispatchKernel(data.length(), kc -> groupScan(kc, data));\n@@ -298,4 +270,4 @@\n-        int groupCount = data.length() \/ GROUP_SIZE; \/\/ we assume 32 bit groups\n-        int log2=1;\n-        while (log2<groupCount){\n-            log2<<=1;\n+        int groupCount = data.length() \/ GROUP_SIZE;\n+        int log2 = 1;\n+        while (log2 < groupCount) {\n+            log2 <<= 1;\n@@ -303,2 +275,2 @@\n-        cc.dispatchKernel(data.length(),kc-> crossGroupScan(kc, data));\n-        cc.dispatchKernel(data.length(),kc-> sumKernel(kc,  data));\n+        cc.dispatchKernel(data.length(), kc -> crossGroupScan(kc, data));\n+        cc.dispatchKernel(data.length(), kc -> sumKernel(kc, data));\n@@ -311,1 +283,1 @@\n-        S32Array input = S32Array.create(accelerator, GROUP_SIZE *GROUP_SIZE);\n+        S32Array input = S32Array.create(accelerator, GROUP_SIZE * GROUP_SIZE);\n@@ -315,3 +287,3 @@\n-            var randInt = (int)Math.round( Math.random() );\n-            result+=randInt;\n-            input.array(i,randInt);\n+            var randInt = (int) Math.round(Math.random());\n+            result += randInt;\n+            input.array(i, randInt);\n@@ -322,1 +294,1 @@\n-        accelerator.compute( cc -> PrefixSum.compute(cc, input));\n+        accelerator.compute(cc -> PrefixSum.compute(cc, input));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/PrefixSum.java","additions":89,"deletions":117,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -241,0 +241,21 @@\n+                \/* Aspirational Java code\n+                     void nbody(KernelContext kc, F32Arr xyzPosFloats ,F32Arr xyzVelFloats, float mass, float delT, float espSqr ){\n+                                float4 acc = float4.of(0.0,0.0,0.0,0.0);\n+                                float4[] xyzPos = xyzPosFloats.float4ArrayView();\n+                                float4[] xyzVel = xyzVelFloats.float4ArrayView();\n+                                float4 myPos = xyzPos[kc.gix];\n+                                float4 myVel = xyzVel[kc.gix];\n+                                for (int i = 0; i < kc.gsx; i++) {\n+                                       float4 delta =  xyzPos[i].sub(myPos); \/\/ xyzPos[i] - myPos\n+                                       float invDist =  (float) 1.0\/sqrt((float)((delta.x * delta.x) + (delta.y * delta.y) + (delta.z * delta.z) + espSqr));\n+                                       float s = mass * invDist * invDist * invDist;\n+                                       acc  = acc.plus(delta.mul(s)); \/\/  acc= acc + (s * delta);\n+                                }\n+                                acc = acc.mul(delT); \/\/acc = acc*delT;\n+                                myPos = myPos.plus(myVel.mul(delT)).plus(acc.mul(delT\/2); \/\/  myPos = myPos + (myVel * delT) + (acc * delT)\/2;\n+                                myVel = myVel.plus(acc)\/\/   myVel = myVel + acc;\n+                                xyzPos[kc.gix] = myPos;\n+                                xyzVel[kc.gix] = myVel;\n+\n+                            }\n+                 *\/\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/opencl\/OpenCLNBodyGLWindow.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}