{"files":[{"patch":"@@ -30,4 +30,4 @@\n-       var hatDir = Path.of(System.getProperty(\"user.dir\"));\n-        var licensePattern = Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\");\n-        var eolws = Pattern.compile(\"^.* $\");\n-        var tab = Pattern.compile(\"^.*\\\\t.*\");\n+   var hatDir = Path.of(System.getProperty(\"user.dir\"));\n+   var licensePattern = Pattern.compile(\"^.*Copyright.*202[4-9].*(Intel|Oracle).*$\");\n+   var eolws = Pattern.compile(\"^.* $\");\n+   var tab = Pattern.compile(\"^.*\\\\t.*\");\n@@ -35,17 +35,17 @@\n-        paths(hatDir, \"hat\", \"examples\", \"backends\").forEach(dir -> {\n-            paths(dir, path -> !Pattern.matches(\"^.*(-debug|rleparser).*$\", path.toString())\n-                       && Pattern.matches(\"^.*\\\\.(java|cpp|h|hpp)$\", path.toString())\n-            ).stream().map(path -> new TextFile(path)).forEach(textFile -> {\n-                if (!textFile.grep(licensePattern)){\n-                    System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n-                }\n-                textFile.lines().forEach(line -> {\n-                    if (line.grep(tab)) {\n-                        System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                    if (line.grep(eolws)) {\n-                        System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                    }\n-                });\n-            });\n-        });\n+   paths(hatDir, \"hat\", \"examples\", \"backends\").forEach(dir -> {\n+         paths(dir, path -> !Pattern.matches(\"^.*(-debug|rleparser).*$\", path.toString())\n+               && Pattern.matches(\"^.*\\\\.(java|cpp|h|hpp)$\", path.toString())\n+              ).stream().map(path -> new TextFile(path)).forEach(textFile -> {\n+                 if (!textFile.grep(licensePattern)){\n+                 System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n+                 }\n+                 textFile.lines().forEach(line -> {\n+                       if (line.grep(tab)) {\n+                          System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                       }\n+                       if (line.grep(eolws)) {\n+                          System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                       }\n+                 });\n+              });\n+   });\n@@ -53,7 +53,7 @@\n-        var target = mkdir(rmdir(path(hatDir, \"build\")));\n-        var hatJavacOpts = List.of(\n-                \"--source\", \"24\",\n-                \"--enable-preview\",\n-                \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-                \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n-        );\n+   var target = mkdir(rmdir(path(hatDir, \"build\")));\n+   var hatJavacOpts = List.of(\n+         \"--source\", \"24\",\n+         \"--enable-preview\",\n+         \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+         \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+         );\n@@ -61,13 +61,13 @@\n-        var hatJarResult = javacjar($ -> $\n-                .opts(hatJavacOpts)\n-                .jar(path(target, \"hat-1.0.jar\"))\n-                .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n-        );\n-        println(hatJarResult.jar);\n-        for (var exampleDir : paths(path(hatDir, \"examples\"), \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n-            javacjar($ -> $\n-                    .opts(hatJavacOpts)\n-                    .jar(path(target, \"hat-example-\" + exampleDir.getFileName() + \"-1.0.jar\"))\n-                    .source_path(path(exampleDir, \"src\/main\/java\"))\n-                    .class_path(hatJarResult.jar)\n-                    .resource_path(path(exampleDir, \"src\/main\/resources\"))\n+   var hatJarResult = javacjar($ -> $\n+         .opts(hatJavacOpts)\n+         .jar(path(target, \"hat-1.0.jar\"))\n+         .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n+         );\n+   println(hatJarResult.jar);\n+   for (var exampleDir : paths(path(hatDir, \"examples\"), \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n+      javacjar($ -> $\n+            .opts(hatJavacOpts)\n+            .jar(path(target, \"hat-example-\" + exampleDir.getFileName() + \"-1.0.jar\"))\n+            .source_path(path(exampleDir, \"src\/main\/java\"))\n+            .class_path(hatJarResult.jar)\n+            .resource_path(path(exampleDir, \"src\/main\/resources\"))\n@@ -75,9 +75,9 @@\n-        }\n-        var backendsDir = path(hatDir, \"backends\");\n-        for (var backendDir : paths(backendsDir, \"opencl\", \"ptx\")) {\n-            javacjar($ -> $\n-                    .opts(hatJavacOpts)\n-                    .jar(path(target, \"hat-backend-\" + backendDir.getFileName() + \"-1.0.jar\"))\n-                    .source_path(path(backendDir, \"src\/main\/java\"))\n-                    .class_path(hatJarResult.jar)\n-                    .resource_path(path(backendDir, \"src\/main\/resources\"))\n+   }\n+   var backendsDir = path(hatDir, \"backends\");\n+   for (var backendDir : paths(backendsDir, \"opencl\", \"ptx\")) {\n+      javacjar($ -> $\n+            .opts(hatJavacOpts)\n+            .jar(path(target, \"hat-backend-\" + backendDir.getFileName() + \"-1.0.jar\"))\n+            .source_path(path(backendDir, \"src\/main\/java\"))\n+            .class_path(hatJarResult.jar)\n+            .resource_path(path(backendDir, \"src\/main\/resources\"))\n@@ -85,1 +85,13 @@\n-        }\n+   }\n+   var hattricksDir = path(hatDir, \"hattricks\");\n+   if (Files.exists(hattricksDir)){\n+      for (var hattrickDir : paths(hattricksDir, \"chess\", \"view\")) {\n+         javacjar($ -> $\n+               .opts(hatJavacOpts)\n+               .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n+               .source_path(path(hattrickDir, \"src\/main\/java\"))\n+               .class_path(hatJarResult.jar)\n+               .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n+               );\n+      }\n+      for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n@@ -87,7 +99,39 @@\n-        var cmakeBldDebugDir = backendsDir.resolve(\"bld-debug\");\n-        if (!existingDir(cmakeBldDebugDir)) {\n-            mkdir(cmakeBldDebugDir);\n-            cmake($ -> $.cwd(backendsDir)._B(cmakeBldDebugDir).opts(\"-DHAT_TARGET=\" + target));\n-        }\n-        cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));\n-  } \n+         var appFrameworks = \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\";\n+         var MAC_APP_FRAMEWORKS = Path.of(appFrameworks);\n+         var MAC_LIB_FRAMEWORKS = Path.of(\"\/System\/Library\/Frameworks\");\n+         jextract($ -> $\n+              .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n+              .cwd(hattrickDir)\n+              .target_package(\"opencl\")\n+              .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n+              .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n+              .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n+              .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n+         );\n+\n+         jextract($ -> $\n+              .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n+              .cwd(hattrickDir)\n+              .target_package(\"opengl\")\n+              .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n+              .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n+              .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n+              .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n+         );\n+         javacjar($ -> $\n+               .opts(hatJavacOpts)\n+               .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n+               .source_path(path(hattrickDir, \"src\/main\/java\"), path(hattrickDir,\"src\/main\/extracted-java\"))\n+               .class_path(hatJarResult.jar)\n+               .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n+               );\n+      }\n+   }\n+\n+   var cmakeBldDebugDir = backendsDir.resolve(\"bld-debug\");\n+   if (!existingDir(cmakeBldDebugDir)) {\n+      mkdir(cmakeBldDebugDir);\n+      cmake($ -> $.cwd(backendsDir)._B(cmakeBldDebugDir).opts(\"-DHAT_TARGET=\" + target));\n+   }\n+   cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));\n+}\n","filename":"hat\/bld","additions":102,"deletions":58,"binary":false,"changes":160,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+        public List<String> libraries = new ArrayList<>();\n@@ -402,0 +403,2 @@\n+        private String targetPackage;\n+        private Path output;\n@@ -424,0 +427,1 @@\n+\n@@ -432,1 +436,1 @@\n-            var cmakeInit = new ProcessBuilder()\n+            var cmakeProcessBuilder = new ProcessBuilder()\n@@ -437,1 +441,1 @@\n-            cmakeInit.waitFor();\n+            cmakeProcessBuilder.waitFor();\n@@ -445,0 +449,95 @@\n+    public static class JExtractConfig {\n+        public List<String> opts = new ArrayList<>(List.of(\"extract\"));\n+        public List<String> compileFlags = new ArrayList<>();\n+        public List<Path> libraries = new ArrayList<>();\n+        public List<Path> headers = new ArrayList<>();\n+        public Path cwd;\n+\n+        public Path home;\n+        private String targetPackage;\n+        private Path output;\n+\n+        public JExtractConfig cwd(Path cwd) {\n+            this.cwd = cwd;\n+            return this;\n+        }\n+\n+        public JExtractConfig home(Path home) {\n+            this.home = home;\n+            opts.remove(0);\n+            opts.add(0, path(home, \"bin\/jextract\").toString());\n+            return this;\n+        }\n+\n+        public JExtractConfig opts(String... opts) {\n+            this.opts.addAll(Arrays.asList(opts));\n+            return this;\n+        }\n+\n+        public JExtractConfig target_package(String targetPackage) {\n+            this.targetPackage = targetPackage;\n+            this.opts.addAll(List.of(\n+                    \"--target-package\",\n+                    targetPackage\n+            ));\n+            return this;\n+        }\n+\n+        public JExtractConfig output(Path output) {\n+            this.output = output;\n+            this.opts.addAll(List.of(\n+                    \"--output\",\n+                    output.toString()\n+            ));\n+            return this;\n+        }\n+\n+        public JExtractConfig library(Path... libraries) {\n+            this.libraries.addAll(Arrays.asList(libraries));\n+            for (Path library : libraries) {\n+                this.opts.addAll(List.of(\"--library\", \":\" + library));\n+            }\n+            return this;\n+        }\n+\n+        public JExtractConfig l(Path... libraries) {\n+            return library(libraries);\n+        }\n+\n+        public JExtractConfig compile_flag(String... compileFlags) {\n+            this.compileFlags.addAll(Arrays.asList(compileFlags));\n+            return this;\n+        }\n+\n+        public JExtractConfig header(Path header) {\n+            this.headers.add(header);\n+            this.opts.add(header.toString());\n+            return this;\n+        }\n+    }\n+\n+    public static void jextract(Consumer<JExtractConfig> jextractConfigConsumer) {\n+        JExtractConfig extractConfig = new JExtractConfig();\n+        jextractConfigConsumer.accept(extractConfig);\n+        System.out.println(extractConfig.opts);\n+        var compilerFlags = path(extractConfig.cwd, \"compiler_flags.txt\");\n+        try {\n+            PrintWriter compilerFlagsWriter = new PrintWriter(Files.newOutputStream(compilerFlags));\n+            compilerFlagsWriter.println(extractConfig.compileFlags);\n+            compilerFlagsWriter.close();\n+\n+            Files.createDirectories(extractConfig.output);\n+            var jextractProcessBuilder = new ProcessBuilder()\n+                    .directory(extractConfig.cwd.toFile())\n+                    .inheritIO()\n+                    .command(extractConfig.opts)\n+                    .start();\n+            jextractProcessBuilder.waitFor();\n+            Files.deleteIfExists(compilerFlags);\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        } catch (InterruptedException ie) {\n+            System.out.println(ie);\n+        }\n+    }\n+\n@@ -588,1 +687,0 @@\n-\n@@ -591,4 +689,4 @@\n-        GroupArtifactVersion g= new GroupArtifactVersion(\"org.testng\", \"testng\", \"7.1.0\");\n-        GroupArtifactVersion aparapi = new GroupArtifactVersion(\"com.aparapi\",\"aparapi\",\"3.0.2\");\n-        GroupArtifactVersion aparapi_jni = new GroupArtifactVersion(\"com.aparapi\",\"aparapi-jni\",\"1.4.3\");\n-        GroupArtifactVersion aparapi_examples = new GroupArtifactVersion(\"com.aparapi\",\"aparapi-examples\",\"3.0.0\");\n+        GroupArtifactVersion g = new GroupArtifactVersion(\"org.testng\", \"testng\", \"7.1.0\");\n+        GroupArtifactVersion aparapi = new GroupArtifactVersion(\"com.aparapi\", \"aparapi\", \"3.0.2\");\n+        GroupArtifactVersion aparapi_jni = new GroupArtifactVersion(\"com.aparapi\", \"aparapi-jni\", \"1.4.3\");\n+        GroupArtifactVersion aparapi_examples = new GroupArtifactVersion(\"com.aparapi\", \"aparapi-examples\", \"3.0.0\");\n@@ -605,32 +703,0 @@\n-        \/*\n-        <project>\n-          <groupId>org.testng<\/groupId>\n-          <artifactId>testng<\/artifactId>\n-          <version>7.1.0<\/version>\n-          <name>testng<\/name>\n-          <description>Testing framework for Java<\/description>\n-          <url>https:\/\/testng.org<\/url>\n-\n-          <dependencies>\n-             <dependency>\n-                <groupId>com.beust<\/groupId>\n-                <artifactId>jcommander<\/artifactId>\n-                <version>1.72<\/version>\n-                <scope>compile<\/scope>\n-             <\/dependency>\n-<dependency>\n-<groupId>com.google.inject<\/groupId>\n-<artifactId>guice<\/artifactId>\n-<version>4.1.0<\/version>\n-<classifier>no_aop<\/classifier>\n-<scope>compile<\/scope>\n-<\/dependency>\n-<dependency>\n-<groupId>org.yaml<\/groupId>\n-<artifactId>snakeyaml<\/artifactId>\n-<version>1.21<\/version>\n-<scope>compile<\/scope>\n-<\/dependency>\n-<\/dependencies>\n-<\/project>\n-         *\/\n@@ -668,0 +734,1 @@\n+\n@@ -693,0 +760,60 @@\n+        var hattricksDir = path(hatDir, \"hattricks\");\n+        if (Files.exists(hattricksDir)) {\n+            for (var hattrickDir : paths(hattricksDir, \"chess\", \"view\")) {\n+                javacjar($ -> $\n+                        .opts(hatJavacOpts)\n+                        .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n+                        .source_path(path(hattrickDir, \"src\/main\/java\"))\n+                        .class_path(hatJarResult.jar)\n+                        .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n+                );\n+            }\n+            for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n+                var appFrameworks = \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\";\n+                var MAC_APP_FRAMEWORKS = Path.of(appFrameworks);\n+                var MAC_LIB_FRAMEWORKS = Path.of(\"\/System\/Library\/Frameworks\");\n+                jextract($ -> $\n+                        .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n+                        .cwd(hattrickDir)\n+                        .target_package(\"opencl\")\n+                        .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n+                        .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n+                        .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n+                        .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n+                );\n+\n+                jextract($ -> $\n+                        .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n+                        .cwd(hattrickDir)\n+                        .target_package(\"opengl\")\n+                        .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n+                        .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n+                        .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n+                        .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n+                );\n+\n+                \/*\n+                cat compile_flags.txt\n+                     -F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\n+\n+                ~\/jextract-22\/bin\/jextract  \\\n+                     -t opengl \\\n+                     -l :${MAC_LIB_FRAMEWORKS}\/GLUT.framework\/GLUT \\\n+                     -l :${MAC_LIB_FRAMEWORKS}\/OpenGL.framework\/OpenGL \\\n+                      ${MAC_APP_FRAMEWORKS}\/GLUT.framework\/Headers\/glut.h\n+\n+\n+                ~\/jextract-22\/bin\/jextract \\\n+                    -t opencl \\\n+                    -l :${MAC_LIB_FRAMEWORKS}\/OpenCL.framework\/OpenCL \\\n+                    ${MAC_APP_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n+                 *\/\n+                javacjar($ -> $\n+                        .opts(hatJavacOpts)\n+                        .jar(path(target, \"hat-example-\" + hattrickDir.getFileName() + \"-1.0.jar\"))\n+                        .source_path(path(hattrickDir, \"src\/main\/java\"), path(hattrickDir, \"src\/main\/extracted-java\"))\n+                        .class_path(hatJarResult.jar)\n+                        .resource_path(path(hattrickDir, \"src\/main\/resources\"))\n+                );\n+            }\n+        }\n@@ -699,1 +826,2 @@\n-        cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir).opts(\"--target\", \"copy_libs\"));\n+        cmake($ -> $.cwd(backendsDir).__build(cmakeBldDebugDir));\n+\n","filename":"hat\/bldr\/src\/main\/java\/bldr\/Bldr.java","additions":168,"deletions":40,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -52,0 +52,9 @@\n+      case ${example} in\n+        nbody)\n+           extraVmOpts=-XstartOnFirstThread;;\n+      esac\n+      case ${backend} in\n+        spirv)\n+           extraJars=:${build_dir}\/levelzero.jar:${build_dir}\/beehive-spirv-lib-0.0.4.jar;;\n+      esac\n+\n@@ -54,0 +63,8 @@\n+         echo ${JAVA_HOME}\/bin\/java \\\n+            --enable-preview --enable-native-access=ALL-UNNAMED \\\n+            ${extraVmOpts} \\\n+            --class-path ${build_dir}\/hat-1.0.jar:${example_jar}:${backend_jar}${extraJars} \\\n+            --add-exports=java.base\/jdk.internal=ALL-UNNAMED \\\n+            -Djava.library.path=${build_dir}:\/usr\/local\/lib \\\n+            -Dheadless=${headless} \\\n+            ${example}.Main $*\n@@ -56,1 +73,2 @@\n-            --class-path ${build_dir}\/hat-1.0.jar:${example_jar}:${backend_jar}:${build_dir}\/levelzero.jar:${build_dir}\/beehive-spirv-lib-0.0.4.jar \\\n+            ${extraVmOpts} \\\n+            --class-path ${build_dir}\/hat-1.0.jar:${example_jar}:${backend_jar}${extraJars} \\\n@@ -60,1 +78,1 @@\n-            ${example}.Main\n+            ${example}.Main $*\n","filename":"hat\/hatrun.bash","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import com.sun.source.util.JavacTask;\n+import javax.tools.ToolProvider;\n@@ -30,2 +32,1 @@\n-     var pwdDir = Path.of(System.getProperty(\"user.dir\"));\n-     var toolsDir = pwdDir.resolve(\"bldr\");\n+     var toolsDir = Path.of(System.getProperty(\"user.dir\")).resolve(\"bldr\");\n@@ -33,1 +34,0 @@\n-     var sourcePath = toolsDir.resolve(\"src\/main\/java\");\n@@ -35,0 +35,1 @@\n+     \/\/ Here we remove all classes from bldr\/classes i.e rm -rf bldr\/classes\n@@ -38,0 +39,1 @@\n+     \/\/ Now make sure the bldr\/classes dir exists i.e mkdir -p bldr\/classes\n@@ -40,2 +42,1 @@\n-     var src = new ArrayList<Path>();\n-     Files.walk(sourcePath).forEach(s->{if (s.toString().endsWith(\".java\")){src.add(s);}});\n+     JavaCompiler javac = ToolProvider.getSystemJavaCompiler();\n@@ -43,24 +44,8 @@\n-     DiagnosticListener<JavaFileObject> dl = (diagnostic)-> System.out.println(diagnostic.getKind() + \" \" + diagnostic.getMessage(null));\n-  \n-     var opts = List.of(\n-           \"--source\",\"24\",\n-           \"--enable-preview\",\n-           \"-d\", classesDir.toString(),\n-           \"--source-path\", sourcePath.toString()\n-     );\n-       \n-     JavaCompiler javac = javax.tools.ToolProvider.getSystemJavaCompiler();\n-     var javacTask = javac.getTask(\n-          new PrintWriter(System.err),\n-          javac.getStandardFileManager(dl, null, null),\n-          dl,\n-          opts,\n-          null,\n-          src.stream().map(path->\n-               new SimpleJavaFileObject(path.toUri(),JavaFileObject.Kind.SOURCE){\n-                  public CharSequence getCharContent(boolean ignoreEncodingErrors) {\n-                     try {\n-                       return Files.readString(Path.of(toUri()));\n-                     } catch (IOException e) {\n-                        throw new RuntimeException(e);\n-                    }\n+     JavacTask javacTask = (JavacTask)javac.getTask(\n+         null, null, null, \n+         List.of( \"--source\",\"24\", \"--enable-preview\", \"-d\", classesDir.toString()),\n+         null,\n+         List.of(\n+            new SimpleJavaFileObject(toolsDir.resolve(\"src\/main\/java\/bldr\/Bldr.java\").toUri(),JavaFileObject.Kind.SOURCE){\n+               public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n+                 return Files.readString(Path.of(toUri()));\n@@ -68,1 +53,2 @@\n-           }).toList()\n+            }\n+         )\n@@ -70,2 +56,1 @@\n-     ((com.sun.source.util.JavacTask)javacTask).generate();\n-\n+     javacTask.generate();\n","filename":"hat\/mkbldr","additions":17,"deletions":32,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+   -o -name \"mkbld\" \\\n+   -o -name \"bld\" \\\n@@ -52,0 +54,2 @@\n+   -o -name \"mkbld\" \\\n+   -o -name \"bld\" \\\n","filename":"hat\/whitespacecheck.bash","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}