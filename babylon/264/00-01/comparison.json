{"files":[{"patch":"@@ -177,2 +177,7 @@\n-        type(varDeclarationOpWrapper.javaType()).space().identifier(varDeclarationOpWrapper.varName()).space().equals().space();\n-        parencedence(buildContext, varDeclarationOpWrapper, varDeclarationOpWrapper.operandNAsResult(0).op());\n+        if (varDeclarationOpWrapper.op().isUninitialized()) {\n+            \/\/ Variable is uninitialized\n+            type(varDeclarationOpWrapper.javaType()).space().identifier(varDeclarationOpWrapper.varName());\n+        } else {\n+            type(varDeclarationOpWrapper.javaType()).space().identifier(varDeclarationOpWrapper.varName()).space().equals().space();\n+            parencedence(buildContext, varDeclarationOpWrapper, varDeclarationOpWrapper.operandNAsResult(0).op());\n+        }\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilder.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        if (op instanceof CoreOp.VarOp varOp) {\n+        if (op instanceof CoreOp.VarOp varOp && !varOp.isUninitialized()) {\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}