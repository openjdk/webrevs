{"files":[{"patch":"@@ -1,1 +0,0 @@\n-\/\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/bldr.jar \"$0\" \"$@\"; exit $?\n@@ -126,1 +125,1 @@\n-                java($ -> $\n+                \/*java($ -> $\n@@ -135,1 +134,1 @@\n-                );\n+                ); *\/\n","filename":"hat\/bld","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-classes\n-bldr.jar\n","filename":"hat\/bldr\/.gitignore","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24\n","filename":"hat\/bldr\/args","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -598,1 +598,1 @@\n-        T self() {\n+        @SuppressWarnings(\"unchecked\") T self() {\n@@ -1871,1 +1871,1 @@\n-    public static void main(String[] args) throws Throwable {\n+    public static void lomain(String[] args) throws Throwable {\n","filename":"hat\/bldr\/src\/main\/java\/bldr\/Bldr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-We also need to prebuild the `bldr\/bldr.jar`\n-\n@@ -50,2 +48,0 @@\n-ls bldr\/bldr.jar\n-bldr\/bldr.jar\n@@ -55,2 +51,2 @@\n-`Bldr` is an evolving set of static methods and types needed (so far.. ;) )\n-to build HAT as well as the HAT examples and backends.\n+`Bldr` is an evolving set of static methods and types required (so far.. ;) )\n+to be able to build HAT, hat backends and examples.\n@@ -58,9 +54,1 @@\n-`Bldr` itself is a java class in\n-```\n-bldr\n-  └── src\n-      └── main\n-          └── java\n-              └── bldr\n-                  └── Bldr.java\n-```\n+We rely on the ability to launch java source directly (without needing to javac first)\n@@ -68,1 +56,2 @@\n-The first run of  `env.bash` will compile and create build `bldr\/bldr.jar`\n+* [JEP 458: Launch Multi-File Source-Code Program](https:\/\/openjdk.org\/jeps\/458)\n+* [JEP 330: Launch Single-File Source-Code Programs](https:\/\/openjdk.org\/jeps\/330)\n@@ -70,1 +59,1 @@\n-Assuming we have our babylon JDK build in our path (via `. env.bash`) we should do this every time we 'pull' HAT.\n+The `bld` script (really java source) can be run like this\n@@ -72,4 +61,2 @@\n-```shell\n-mkdir bldr\/classes\n-javac --enable-preview -source 24 -d bldr\/classes bldr\/src\/main\/java\/bldr\/Bldr.java\n-jar -cf bldr\/bldr.jar -C bldr\/classes bldr\n+```bash\n+java --enable-preview --source 24 bld\n@@ -77,2 +64,0 @@\n-In HAT's root dir is a `#!` (Hash Bang) java launcher style script called `bld` (and one called `sanity`)\n-which uses tools exposed by the precompiled `Bldr` to compile, create jars, run jextract, download dependencies, tar\/untar etc.\n@@ -80,1 +65,1 @@\n-As git does not allow us to check in scripts with execute permission, we need to `chmod +x` this `bld` file.\n+In our case the  magic is under the `hat\/bldr`subdir\n@@ -82,2 +67,9 @@\n-```bash\n-chmod +x bld sanity\n+```\n+bldr\n+├── Bldr.java (symlink) -> src\/main\/java\/bldr\/Bldr.java\n+├── args      (text)       \"--enable-preview --source 24\"\n+└── src\n+    └── main\n+        └── java\n+            └── bldr\n+                └── Bldr.java\n@@ -86,2 +78,1 @@\n-Note that the first line has the `#!` magic to allow this java code to be executed as if it\n-were a script.  Whilst `bld` is indeed real java code,  we do not need to compile it. Instead we just execute using\n+We also have a handy `bldr\/args` which allows us to avoid specifying commmon args `--enable-preview --source 24` which are always needed\n@@ -90,1 +81,1 @@\n-.\/bld\n+java @bldr\/args bld\n@@ -93,9 +84,1 @@\n-`bld` will build hat-1.0.jar, along with all the backend jars hat-backend-?-1.0.jar,\n-all the example jars hat-example-?-1.0.jar and will try to build all native artifacts (.so\/.dylib) it can.\n-\n-So if cmake finds OpenCL libs\/headers, you will see libopencl_backend (.so or .dylib)\n-\n-On a CUDA machine you will see libcuda_backend(.so or .dylib)\n-\n-`sanity` will sanity check all  .md\/.java\/.cpp\/.h files to make sure we don't have any tabs, lines that with whitespace\n-or files without appropriate licence headers\n+This `bld` script builds HAT, all the backends and examples and places buildable artifacts in `build` dir\n@@ -106,1 +89,1 @@\n-.\/bld\n+java @bld\/args bld\n@@ -117,0 +100,12 @@\n+`bld` relies on cmake to build native code for backends, so if cmake finds OpenCL libs\/headers, you will see libopencl_backend (.so or .dylib) in the build dir, if cmake finds CUDA you will see libcuda_backend(.so or .dylib)\n+\n+We have another script called `sanity` which will check all  .md\/.java\/.cpp\/.h for tabs, lines that end with whitespace\n+or files without appropriate licence headers\n+\n+This is run using\n+\n+```\n+java @bldr\/args sanity\n+```\n+\n+\n@@ -130,3 +125,2 @@\n-The provided `hatrun.bash` script simplifies this somewhat, we just need to pass the backend\n-name `opencl` and the package name `mandel`\n-(all examples are assumed to be in `packagename\/Main.java`\n+The `hatrun` script can also be used which simply needs the backend\n+name `opencl|java|cuda|ptx|mock` and the package name `mandel`\n@@ -135,2 +129,1 @@\n-bash hatrun.bash opencl mandel\n-bash hatrun.bash opencl heal\n+java @bldr\/args hatrun opencl mandel\n@@ -138,0 +131,9 @@\n+\n+If you pass `headless` as the first arg\n+\n+```bash\n+java @bldr\/args hatrun headless opencl mandel\n+```\n+\n+This sets `-Dheadless=true` and passes '--headless' to the example.  Some examples can use this to avoid launching UI.\n+\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":46,"deletions":44,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -94,1 +94,5 @@\n-         rm -rf bldr\/bldr.classes bldr\/bldr.jar build maven-build thirdparty repoDir\n+         rm -rf build maven-build thirdparty repoDir\n+      fi \n+      if [[ ! -e bldr\/Bldr.java ]]; then \n+         ln -s src\/main\/java\/bldr\/Bldr.java bldr\/Bldr.java\n+         echo \"Created a symlink bldr\/Bldr.java \"\n@@ -96,16 +100,0 @@\n-\n-      # Our java source launcher based build system needs bldr\/bldr.jar so we create it here if needed. \n-      if [[ ${1} != \"clean\" && -f bldr\/bldr.jar ]]; then \n-         echo \"Found prebuilt bldr.jar\"\n-      else\n-         mkdir -p bldr\/classes\n-         echo \"Bootrapping a build of bldr.jar\"\n-         javac \\\n-           --enable-preview \\\n-           --source 24 \\\n-           -d bldr\/classes \\\n-           --source-path bldr\/src\/main\/java \\\n-           bldr\/src\/main\/java\/bldr\/Bldr.java\n-  \n-         jar -cf bldr\/bldr.jar -C bldr\/classes bldr \n-      fi\n","filename":"hat\/env.bash","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\/\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/bldr.jar \"$0\" \"$@\"; exit $?\n","filename":"hat\/hatrun","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-\/\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/bldr.jar \"$0\" \"$@\"; exit $?\n-\n","filename":"hat\/sanity","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}