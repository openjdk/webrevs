{"files":[{"patch":"@@ -174,1 +174,1 @@\n-                                .loadConstant(quote(lop).toText())\n+                                .loadConstant(CoreOp.quoteOp(lop).toText())\n@@ -1288,40 +1288,0 @@\n-\n-    static FuncOp quote(LambdaOp lop) {\n-        List<Value> captures = lop.capturedValues();\n-\n-        \/\/ Build the function type\n-        List<TypeElement> params = captures.stream()\n-                .map(v -> v.type() instanceof VarType vt ? vt.valueType() : v.type())\n-                .toList();\n-        FunctionType ft = FunctionType.functionType(QuotedOp.QUOTED_TYPE, params);\n-\n-        \/\/ Build the function that quotes the lambda\n-        return CoreOp.func(\"q\", ft).body(b -> {\n-            \/\/ Create variables as needed and obtain the captured values\n-            \/\/ for the copied lambda\n-            List<Value> outputCaptures = new ArrayList<>();\n-            for (int i = 0; i < captures.size(); i++) {\n-                Value c = captures.get(i);\n-                Block.Parameter p = b.parameters().get(i);\n-                if (c.type() instanceof VarType _) {\n-                    Value var = b.op(CoreOp.var(String.valueOf(i), p));\n-                    outputCaptures.add(var);\n-                } else {\n-                    outputCaptures.add(p);\n-                }\n-            }\n-\n-            \/\/ Quoted the lambda expression\n-            Value q = b.op(CoreOp.quoted(b.parentBody(), qb -> {\n-                \/\/ Map the entry block of the lambda's ancestor body to the quoted block\n-                \/\/ We are copying lop in the context of the quoted block, the block mapping\n-                \/\/ ensures the use of captured values are reachable when building\n-                qb.context().mapBlock(lop.ancestorBody().entryBlock(), qb);\n-                \/\/ Map the lambda's captured values\n-                qb.context().mapValues(captures, outputCaptures);\n-                \/\/ Return the lambda to be copied in the quoted operation\n-                return lop;\n-            }));\n-            b.op(CoreOp._return(q));\n-        });\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"}]}