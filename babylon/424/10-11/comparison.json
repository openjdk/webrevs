{"files":[{"patch":"@@ -42,2 +42,0 @@\n-    private SequencedMap<Value, Object> operands;\n-\n@@ -74,7 +72,0 @@\n-    public Quoted(Op op, SequencedMap<Value, Object> capturedValues, SequencedMap<Value, Object> operands) {\n-        this(op, capturedValues);\n-\n-        assert op.operands().equals(new ArrayList<>(operands.keySet()));\n-        this.operands = Collections.unmodifiableSequencedMap(new LinkedHashMap<>(operands));\n-    }\n-\n@@ -104,4 +95,0 @@\n-\n-    public SequencedMap<Value, Object> operands() {\n-        return operands;\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.incubator.code.interpreter.Interpreter;\n@@ -33,2 +32,0 @@\n-import java.util.Arrays;\n-import java.util.Iterator;\n@@ -36,0 +33,2 @@\n+import java.util.List;\n+import java.util.SequencedMap;\n@@ -39,15 +38,21 @@\n-    public static Quoted makeQuoted(FuncOp op, Object[] args) {\n-\n-        CoreOp.QuotedOp qop = (CoreOp.QuotedOp) op.body().entryBlock().ops().stream()\n-                .filter(o -> o instanceof CoreOp.QuotedOp).findFirst().orElseThrow();\n-\n-        Iterator<Object> argsIterator = Arrays.stream(args).iterator();\n-        LinkedHashMap<Value, Object> m = new LinkedHashMap<>();\n-        for (Value capturedValue : qop.capturedValues()) {\n-            if (capturedValue instanceof Block.Parameter) {\n-                m.put(capturedValue, argsIterator.next());\n-            } else if (capturedValue instanceof Op.Result opr && opr.op() instanceof CoreOp.VarOp varOp) {\n-                if (varOp.initOperand() instanceof Block.Parameter) {\n-                    m.put(capturedValue, new Interpreter.VarBox(argsIterator.next()));\n-                } else if (varOp.initOperand() instanceof Op.Result opr2 && opr2.op() instanceof CoreOp.ConstantOp cop) {\n-                    m.put(capturedValue, new Interpreter.VarBox(cop.value()));\n+    public static Quoted makeQuoted(FuncOp funcOp, Object[] args) {\n+\n+        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(funcOp);\n+\n+        \/\/ map captured values to their corresponding runtime values\n+        \/\/ captured value can be:\n+        \/\/ 1- block param\n+        \/\/ 2- result of VarOp whose initial value is constant\n+        \/\/ 3- result of VarOp whose initial value is block param\n+        List<Block.Parameter> params = funcOp.parameters();\n+        SequencedMap<Value, Object> m = new LinkedHashMap<>();\n+        for (Value v : opAndValues.operandsAndCaptures()) {\n+            if (v instanceof Block.Parameter p) {\n+                Object rv = args[params.indexOf(p)];\n+                m.put(v, rv);\n+            } else if (v instanceof Op.Result opr && opr.op() instanceof CoreOp.VarOp varOp) {\n+                if (varOp.initOperand() instanceof Op.Result r && r.op() instanceof CoreOp.ConstantOp cop) {\n+                    m.put(v, CoreOp.Var.of(cop.value()));\n+                } else if (varOp.initOperand() instanceof Block.Parameter p) {\n+                    Object rv = args[params.indexOf(p)];\n+                    m.put(v, CoreOp.Var.of(rv));\n@@ -58,1 +63,1 @@\n-        return new Quoted(qop.quotedOp(), m);\n+        return new Quoted(opAndValues.op(), m);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"}]}