{"files":[{"patch":"@@ -4438,0 +4438,34 @@\n+\n+    public static FuncOp quoteOp(Op op) {\n+\n+        return func(\"q\", FunctionType.VOID).body(block -> {\n+            List<Value> usedValues = new ArrayList<>();\n+            usedValues.addAll(op.capturedValues());\n+            usedValues.addAll(op.operands());\n+            for (Value v : usedValues) {\n+                Value nv;\n+                if (v instanceof Op.Result opr && opr.op() instanceof VarOp varOp) {\n+                    Block.Parameter p = block.parameter(varOp.varValueType());\n+                    nv = block.op(var(p));\n+                } else {\n+                    nv = block.parameter(v.type());\n+                }\n+                block.context().mapValue(v, nv);\n+            }\n+\n+            Body.Builder qbody = Body.Builder.of(block.parentBody(), FunctionType.VOID, CopyContext.create(block.context()));\n+            Block.Builder qblock = qbody.entryBlock();\n+\n+            if (op.ancestorBody() != null) {\n+                \/\/ needed for reachability check (of captured values) to succeed\n+                qblock.context().mapBlock(op.ancestorBody().entryBlock(), qblock);\n+            }\n+            Op.Result opr = qblock.op(op);\n+\n+            qblock.op(_yield(opr));\n+\n+            block.op(quoted(qbody));\n+\n+            block.op(_return());\n+        });\n+    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.op.CoreOp;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run testng TestQuoteOp\n+ *\/\n+public class TestQuoteOp {\n+\n+    @CodeReflection\n+    public void f(int i) {\n+        String s = \"abc\";\n+        Runnable r = () -> {\n+            System.out.println(i + s + hashCode());\n+        };\n+    }\n+\n+    @Test\n+    void test() throws NoSuchMethodException {\n+        Method f = getClass().getDeclaredMethod(\"f\", int.class);\n+        CoreOp.FuncOp fm = Op.ofMethod(f).orElseThrow();\n+        Op lop = fm.body().entryBlock().ops().stream().filter(op -> op instanceof CoreOp.LambdaOp).findFirst().orElseThrow();\n+\n+        fm.writeTo(System.out);\n+        CoreOp.FuncOp funcOp = CoreOp.quoteOp(lop);\n+        funcOp.writeTo(System.out);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}