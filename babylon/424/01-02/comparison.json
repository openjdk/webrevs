{"files":[{"patch":"@@ -4446,1 +4446,1 @@\n-                Value nv;\n+                TypeElement t;\n@@ -4448,2 +4448,1 @@\n-                    Block.Parameter p = block.parameter(varOp.varValueType());\n-                    nv = block.op(var(p));\n+                    t = varOp.varValueType();\n@@ -4451,1 +4450,1 @@\n-                    nv = block.parameter(v.type());\n+                    t = v.type();\n@@ -4453,0 +4452,2 @@\n+                Block.Parameter p = block.parameter(t);\n+                Op.Result nv = block.op(var(p));\n@@ -4463,1 +4464,20 @@\n-            Op.Result opr = qblock.op(op);\n+            Op.Result opr = qblock.op(op, (b, o) -> {\n+                \/\/ a modified copy transformer, that insert var.load before use of captured values (if needed)\n+                Map<Value, Value> m = new HashMap<>();\n+                for (Value operand : o.operands()) {\n+                    if (usedValues.contains(operand) && !(operand instanceof Op.Result r && r.op() instanceof VarOp)) {\n+                        Value capVar = b.context().getValue(operand);\n+                        Op.Result capVal = b.op(varLoad(capVar));\n+                        m.put(operand, capVar);\n+                        b.context().mapValue(operand, capVal);\n+                    }\n+                }\n+\n+                b.op(o);\n+\n+                for (Value k : m.keySet()) {\n+                    b.context().mapValue(k, m.get(k));\n+                }\n+\n+                return b;\n+            });\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}