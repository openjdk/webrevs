[{"commit":{"message":"Check that binding of symbolic values to runtime values is correct"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"afea057d4108461d683b6b9c7af2050a76f143a5"},{"commit":{"message":"Add test case when args and params differ in size"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"bc4ce2841fabbdd1c7b7dabc3035a5f5ed63963d"},{"commit":{"message":"Apply suggestion"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java"}],"sha":"89e3b48c41813b186bbe4f58c367cec458587db6"},{"commit":{"message":"Merge branch 'code-reflection' into quoted-instance-creation\n\n# Conflicts:\n#\tsrc\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java\n#\tsrc\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java\n#\tsrc\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java\n#\tsrc\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"207032fdb404033fee792117e854dda2e572ad73"},{"commit":{"message":"Remove TODOs"},"files":[],"sha":"e6908a6117a50a7aa765a59224feab2b84856ab8"},{"commit":{"message":"Pass runtime values when unquoting an op"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"9c53f0a9f6b1a93c4901fb40655f659133ccc336"},{"commit":{"message":"Add test case for when model has less than two operations"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"842bd5a3df3fb67ba3a82522a5e0ba195fd17d11"},{"commit":{"message":"Check that model has at least two operations"},"files":[],"sha":"4e8dda33a197ffafe8d8567bf3bc2e4142ae305d"},{"commit":{"message":"Combine validation of param with its user"},"files":[],"sha":"098948fc1e583ce5187b65692c9315f64432225b"},{"commit":{"message":"Remove model print statement to reduce noise"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"528ccd84f8850b9c0d3368479d730079004b9e73"},{"commit":{"message":"Add tests"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"8041e14ffc6a59f26e5b112796e2f6498730212b"},{"commit":{"message":"Strengthen the checks"},"files":[],"sha":"c52f150fe1c21db412355e653e6e60ef49951286"},{"commit":{"message":"Validate params upfront"},"files":[],"sha":"01ebf36ca788d9d78c866614c9d63cc9eed46fcd"},{"commit":{"message":"Refactor"},"files":[],"sha":"3a17f4727531a131012d55376b696e24c37aef9c"},{"commit":{"message":"Loosen the check to accept result of VarOp initialized with a constant, as operand"},"files":[],"sha":"fd4fa977599da1a6f47ebc431b74efc0216e280c"},{"commit":{"message":"Apply suggestion"},"files":[],"sha":"574584835bc38caf6112fb294b23cac58167f8f8"},{"commit":{"message":"Apply suggestion"},"files":[],"sha":"f4be711320de9bf84db594707d05d78d360457fa"},{"commit":{"message":"Move declaration of CoreOp.OpAndValues above its use"},"files":[],"sha":"c21fa03dec37b639e4c8398560b216fe81164a55"},{"commit":{"message":"Update comments"},"files":[],"sha":"614295d43d80eb63870e8fce4f1ca9c170afb303"},{"commit":{"message":"Throw if the op to be quoted isn't bound"},"files":[],"sha":"f2f7c7ea9dcd3c1c10a1d9ca2ee575af2c1e8726"},{"commit":{"message":"Add error messages"},"files":[],"sha":"93c1f3a8c8975ad90d3d836b56254cf66331ee3c"},{"commit":{"message":"Remove unused methods"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java"}],"sha":"04ab281d91575368b668aa4a78518888e1f0f14a"},{"commit":{"message":"Update QuotedHelper.makeQuoted to use CoreOp.quotedOp (that contains checks)"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java"}],"sha":"6fe7a6d2a9453b4961e1fbc9afac60ea98ea5a1c"},{"commit":{"message":"Get rid of assert statements"},"files":[],"sha":"01961184ff20825b12f093db1eeaf87c78f4caaa"},{"commit":{"message":"Add checks"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"bfdf84f79cb72d27cb5c8cb0c092ac885146af80"},{"commit":{"message":"loosen the checks"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"2c3d805a6e166fbf1ce39f1a607bb82a2a777c03"},{"commit":{"message":"Update CoreOp.quotedOp to reuse implementation of ByteCodeGenerator.quote."},"files":[],"sha":"02f272c1ceb802e7d5258bebeaa5806f7c4d0efb"},{"commit":{"message":"Update BytecodeGenerator to use CoreOp.quoteOp"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java"}],"sha":"9f3db0513e845cee9cb5e469323ebea433fcab1a"},{"commit":{"message":"Support quoting of an op that has operands"},"files":[{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"20a7fb46380036a18b7c6ab66febf8ad808d93e5"},{"commit":{"message":"Add comments"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"8d3a227bda303bdada3ee02e09dda6ff9710a04e"},{"commit":{"message":"Add a check"},"files":[],"sha":"38e277af9290282b41109ab9b7df83d1d97f5195"},{"commit":{"message":"Change the return type of quoted func op"},"files":[],"sha":"3db15235e54c2554330a3773064d1230181e7af3"},{"commit":{"message":"Focus on captured values for the moment"},"files":[],"sha":"1bca31376c9bf64aa979a4b04c12c056b6a36b81"},{"commit":{"message":"Implement quotedOp method"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"4cf60ccd745472af3ccde0cb3a65ab4a4dae3825"},{"commit":{"message":"Uniformly deal with captured values and operands"},"files":[],"sha":"fbef70f11b2b44802beeba184ef548ef08a87169"},{"commit":{"message":"Implement quoteOp method"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java"}],"sha":"634799b8b1090cade9b5d547bbdcd654b262e344"},{"commit":{"message":"Replace the use of Interpreter to create Quoted instance with specialized code"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java"},{"filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java"}],"sha":"96197901c8fa7dcaab46dc933f9c7e7195111c62"}]