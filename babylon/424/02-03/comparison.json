{"files":[{"patch":"@@ -4492,0 +4492,27 @@\n+\n+    public static Quoted quotedOp(FuncOp funcOp, Object[] args) {\n+\n+        assert funcOp.body().blocks().size() == 1;\n+        Block fopBlock = funcOp.body().entryBlock();\n+        assert fopBlock.ops().size() == 2 + funcOp.parameters().size();\n+        assert fopBlock.ops().subList(0, funcOp.parameters().size()).stream().allMatch(o -> o instanceof VarOp);\n+        assert fopBlock.ops().get(funcOp.parameters().size()) instanceof QuotedOp;\n+        assert fopBlock.ops().getLast() instanceof ReturnOp;\n+\n+        QuotedOp qop = (QuotedOp) fopBlock.ops().get(funcOp.parameters().size());\n+\n+        Op op = qop.quotedOp();\n+\n+        List<Op> fopBlockVarOps = fopBlock.ops().subList(0, funcOp.parameters().size());\n+        assert op.capturedValues().equals(fopBlockVarOps.stream().map(Op::result).toList());\n+        assert fopBlockVarOps.stream().map(o -> ((VarOp) o).initOperand()).toList().equals(funcOp.parameters());\n+\n+        assert funcOp.parameters().size() == args.length;\n+        LinkedHashMap<Value, Object> m = new LinkedHashMap<>();\n+        Iterator<Object> argsIterator = Arrays.stream(args).iterator();\n+        for (Value v : op.capturedValues()) {\n+            m.put(v, argsIterator.next());\n+        }\n+\n+        return new Quoted(op, m);\n+    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+\n@@ -33,0 +34,8 @@\n+\n+        Object[] args = {1, \"s\", this};\n+        Quoted q = CoreOp.quotedOp(funcOp, args);\n+\n+        Iterator<Object> argsIterator = Arrays.stream(args).iterator();\n+        for (Map.Entry<Value, Object> e : q.capturedValues().entrySet()) {\n+            Assert.assertSame(e.getValue(), argsIterator.next());\n+        }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}