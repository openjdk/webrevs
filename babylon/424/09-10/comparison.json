{"files":[{"patch":"@@ -4480,1 +4480,3 @@\n-        assert funcOp.body().blocks().size() == 1;\n+        if (funcOp.body().blocks().size() != 1) {\n+            throw new IllegalArgumentException();\n+        }\n@@ -4483,2 +4485,3 @@\n-        assert fblock.ops().get(fblock.ops().size() - 2) instanceof QuotedOp;\n-        QuotedOp qop = (QuotedOp) fblock.ops().get(fblock.ops().size() - 2);\n+        if (!(fblock.ops().get(fblock.ops().size() - 2) instanceof QuotedOp qop)) {\n+            throw new IllegalArgumentException();\n+        }\n@@ -4486,1 +4489,6 @@\n-        assert fblock.ops().getLast() instanceof ReturnOp returnOp && returnOp.returnValue().equals(qop.result());\n+        if (!(fblock.ops().getLast() instanceof ReturnOp returnOp)) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (!returnOp.returnValue().equals(qop.result())) {\n+            throw new IllegalArgumentException();\n+        }\n@@ -4490,0 +4498,31 @@\n+        List<Op> ops = fblock.ops().subList(0, fblock.ops().size() - 2);\n+        List<Block.Parameter> unvisitedParams = new ArrayList<>(fblock.parameters());\n+        for (Op o : ops) {\n+            if (o instanceof VarOp varOp) {\n+                if (varOp.initOperand() instanceof Block.Parameter p) {\n+                    if (!op.operands().contains(varOp.result()) && !op.capturedValues().contains(varOp.result())) {\n+                        throw new IllegalArgumentException();\n+                    }\n+                    unvisitedParams.remove(p);\n+                } else if (varOp.initOperand() instanceof Op.Result opr) {\n+                    if (!(opr.op() instanceof ConstantOp)) {\n+                        throw new IllegalArgumentException();\n+                    }\n+                    if (!op.capturedValues().contains(varOp.result())) {\n+                        throw new IllegalArgumentException();\n+                    }\n+                }\n+            } else if (o instanceof ConstantOp cop) {\n+                if (cop.result().uses().size() != 1 || !(cop.result().uses().iterator().next().op() instanceof VarOp)) {\n+                    throw new IllegalArgumentException();\n+                }\n+            } else {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+        for (Block.Parameter p : unvisitedParams) {\n+            if (!op.operands().contains(p) && !op.capturedValues().contains(p)) {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":43,"deletions":4,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import jdk.incubator.code.Quotable;\n@@ -12,0 +13,1 @@\n+import java.util.function.IntUnaryOperator;\n@@ -29,1 +31,1 @@\n-    void test() throws NoSuchMethodException {\n+    void testQuoteOpThatHasCaptures() throws NoSuchMethodException {\n@@ -78,0 +80,20 @@\n+\n+    @Test\n+    void testWithJavacModel() {\n+        final int y = 88;\n+        int z = 99;\n+        Quotable q = (IntUnaryOperator & Quotable) x -> x + y + z + hashCode();\n+\n+        Quoted quoted = Op.ofQuotable(q).orElseThrow();\n+        Op op = quoted.op();\n+        CoreOp.QuotedOp qop = ((CoreOp.QuotedOp) op.ancestorBody().parentOp());\n+        CoreOp.FuncOp fop = ((CoreOp.FuncOp) qop.ancestorBody().parentOp());\n+        fop.writeTo(System.out);\n+\n+        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(fop);\n+\n+        SequencedSet<Value> e = new LinkedHashSet<>();\n+        e.addAll(op.operands());\n+        e.addAll(op.capturedValues());\n+        Assert.assertEquals(opAndValues.operandsAndCaptures(), e);\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"}]}