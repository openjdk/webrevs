{"files":[{"patch":"@@ -4498,0 +4498,3 @@\n+        if (returnOp.returnValue() == null) {\n+            throw new IllegalArgumentException();\n+        }\n@@ -4514,1 +4517,1 @@\n-            } else if (v.uses().size() > 1 && !operandsAndCaptures.contains(v)) {\n+            } else if (v.uses().size() > 1 && v.uses().stream().anyMatch(u -> u.op().parentBlock() == fblock)) {\n@@ -4527,0 +4530,3 @@\n+                    if (varOp.isUninitialized()) {\n+                        throw new IllegalArgumentException();\n+                    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+import jdk.incubator.code.parser.OpParser;\n@@ -8,0 +9,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -36,1 +38,1 @@\n-        fm.writeTo(System.out);\n+\/\/        fm.writeTo(System.out);\n@@ -39,1 +41,1 @@\n-        funcOp.writeTo(System.out);\n+\/\/        funcOp.writeTo(System.out);\n@@ -65,1 +67,1 @@\n-        gm.writeTo(System.out);\n+\/\/        gm.writeTo(System.out);\n@@ -68,1 +70,1 @@\n-        funcOp.writeTo(System.out);\n+\/\/        funcOp.writeTo(System.out);\n@@ -91,1 +93,1 @@\n-        fop.writeTo(System.out);\n+\/\/        fop.writeTo(System.out);\n@@ -100,0 +102,278 @@\n+\n+    @DataProvider\n+    Object[] invalidCases() {\n+      return new Object[] {\n+              \/\/ TODO describe error in a comment\n+              \/\/ func op must have one block\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    branch ^block_1;\n+\n+  ^block_1:\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+        %6 : java.lang.Runnable = lambda ()void -> {\n+            return;\n+        };\n+        yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ before last op must be QuotedOp\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    %0 : boolean = constant @\"false\";\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ last op must be ReturnOp\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    yield %5;\n+};\n+\"\"\",\n+              \/\/ the result of QuotedOp must be returned\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return;\n+};\n+\"\"\",\n+              \/\/ the result of QuotedOp must be returned\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return %0;\n+};\n+\"\"\",\n+              \/\/ param must be used\n+              \"\"\"\n+func @\"q\" (%0 : Object)jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ param used more than once, all uses must be as operand or capture of quoted op\n+              \"\"\"\n+func @\"q\" (%0 : int)jdk.incubator.code.Quoted -> {\n+    %2 : Var<int> = var %0 @\"y\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+        %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            return %0;\n+        };\n+        yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ operations before quoted op must be ConstantOp or VarOp\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : java.lang.String = new @\"java.lang.String::<new>()\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+           %7 : int = invoke %0 @\"java.lang.String::length()int\";\n+           return %7;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ constant op must be used\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ constant used more than once, all its uses must be as operand or capture of quoted op\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %1 : Var<int> = var %0 @\"y\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = var.load %1;\n+            %8 : int = add %0 %7;\n+            return %8;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ var op must be initialized with param or result of constant op\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %1 : Var<int> = var @\"y\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = var.load %1;\n+            return %7;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+              \/\/ var op must be used as operand or capture of quoted op\n+              \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %1 : Var<int> = var %0 @\"y\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\"\n+      };\n+}\n+\n+\n+    @Test(dataProvider = \"invalidCases\")\n+    void testInvalidCases(String model) {\n+        CoreOp.FuncOp fop = ((CoreOp.FuncOp) OpParser.fromStringOfFuncOp(model));\n+        Assert.assertThrows(IllegalArgumentException.class, () -> CoreOp.quotedOp(fop));\n+    }\n+\n+    @DataProvider\n+    Object[] validCases() {\n+        return new Object[] {\n+                \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.lang.Runnable = lambda ()void -> {\n+          return;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" (%0 : int)jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            return %0;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" (%0 : int)jdk.incubator.code.Quoted -> {\n+    %1 : Var<int> = var %0;\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = var.load %1;\n+            return %7;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" (%0 : int)jdk.incubator.code.Quoted -> {\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = add %0 %0;\n+            %8 : int = mul %0 %0;\n+            %9 : int = sub %8 %7;\n+            return %9;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            return %0;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = add %0 %0;\n+            %8 : int = mul %0 %0;\n+            %9 : int = sub %8 %7;\n+            return %9;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+                \"\"\"\n+func @\"q\" ()jdk.incubator.code.Quoted -> {\n+    %0 : int = constant @\"1\";\n+    %1 : Var<int> = var %0;\n+    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n+      %6 : java.util.function.IntSupplier = lambda ()int -> {\n+            %7 : int = var.load %1;\n+            %8 : int = mul %7 %7;\n+            return %8;\n+      };\n+      yield %6;\n+    };\n+    return %5;\n+};\n+\"\"\",\n+        };\n+    }\n+\n+    @Test(dataProvider = \"validCases\")\n+    void testValidCases(String model) {\n+        CoreOp.FuncOp fop = ((CoreOp.FuncOp) OpParser.fromStringOfFuncOp(model));\n+        CoreOp.quotedOp(fop);\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":285,"deletions":5,"binary":false,"changes":290,"status":"modified"}]}