{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    private SequencedMap<Value, Object> operands;\n@@ -73,0 +74,7 @@\n+    public Quoted(Op op, SequencedMap<Value, Object> capturedValues, SequencedMap<Value, Object> operands) {\n+        this(op, capturedValues);\n+\n+        assert op.operands().equals(new ArrayList<>(operands.keySet()));\n+        this.operands = Collections.unmodifiableSequencedMap(new LinkedHashMap<>(operands));\n+    }\n+\n@@ -96,0 +104,4 @@\n+\n+    public SequencedMap<Value, Object> operands() {\n+        return operands;\n+    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -4444,1 +4445,2 @@\n-            for (Value v : capturedValues) {\n+\n+            for (Value v : Stream.concat(capturedValues.stream(), op.operands().stream()).toList()) {\n@@ -4463,0 +4465,14 @@\n+\n+            \/\/ if op has operands, they will be represented by VarOp results initialized with block params\n+            \/\/ we may need to do var.load for some of the operands\n+            Map<Value, Value> m2 = new HashMap<>();\n+            for (Value operand : op.operands()) {\n+                if (!(operand instanceof Op.Result r && r.op() instanceof VarOp)) {\n+                    Value capVar = qblock.context().getValue(operand);\n+                    Op.Result capVal = qblock.op(varLoad(capVar));\n+                    m2.put(operand, capVar);\n+                    qblock.context().mapValue(operand, capVal);\n+                }\n+            }\n+\n+            \/\/@@@ op transformer only runs on operations inside bodies of op\n@@ -4484,0 +4500,5 @@\n+            \/\/ restore the mapping for op's operands\n+            for (Map.Entry<Value, Value> e : m2.entrySet()) {\n+                qblock.context().mapValue(e.getKey(), e.getValue());\n+            }\n+\n@@ -4509,1 +4530,6 @@\n-        assert op.capturedValues().equals(fopBlockVarOps.stream().map(Op::result).toList());\n+\n+        assert fopBlockVarOps.size() == op.capturedValues().size() + op.operands().size();\n+\n+        assert op.capturedValues().equals(fopBlockVarOps.subList(0, op.capturedValues().size())\n+                .stream().map(Op::result).toList());\n+\n@@ -4519,0 +4545,4 @@\n+        LinkedHashMap<Value, Object> m2 = new LinkedHashMap<>();\n+        for (Value operand : op.operands()) {\n+            m2.put(operand, argsIterator.next());\n+        }\n@@ -4520,1 +4550,1 @@\n-        return new Quoted(op, m);\n+        return new Quoted(op, m, m2);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-import jdk.incubator.code.Value;\n@@ -10,3 +9,0 @@\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Map;\n@@ -43,0 +39,2 @@\n+        Assert.assertTrue(lop.getClass().isInstance(q.op()));\n+\n@@ -46,4 +44,29 @@\n-        Iterator<Object> argsIterator = Arrays.stream(args).iterator();\n-        for (Map.Entry<Value, Object> e : q.capturedValues().entrySet()) {\n-            Assert.assertSame(e.getValue(), argsIterator.next());\n-        }\n+        Assert.assertEquals(args, q.capturedValues().values().toArray());\n+\n+        Assert.assertTrue(q.operands().isEmpty());\n+    }\n+\n+    @CodeReflection\n+    static void g(String s) {\n+        boolean b = s.startsWith(\"a\");\n+    }\n+\n+    @Test\n+    void testQuoteOpThatHasOperands() throws NoSuchMethodException { \/\/ op with operands\n+        Method g = getClass().getDeclaredMethod(\"g\", String.class);\n+        CoreOp.FuncOp gm = Op.ofMethod(g).orElseThrow();\n+        Op op = gm.body().entryBlock().ops().stream().filter(o -> o instanceof CoreOp.InvokeOp).findFirst().orElseThrow();\n+\n+        gm.writeTo(System.out);\n+\n+        CoreOp.FuncOp funcOp = CoreOp.quoteOp(op);\n+        funcOp.writeTo(System.out);\n+\n+        Object[] args = {\"str\", \"s\"};\n+        Quoted q = CoreOp.quotedOp(funcOp, args);\n+\n+        Assert.assertTrue(op.getClass().isInstance(q.op()));\n+\n+        Assert.assertTrue(q.capturedValues().isEmpty());\n+\n+        Assert.assertEquals(args, q.operands().values().toArray());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":31,"deletions":8,"binary":false,"changes":39,"status":"modified"}]}