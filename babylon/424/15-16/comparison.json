{"files":[{"patch":"@@ -4504,0 +4504,19 @@\n+        SequencedSet<Value> operandsAndCaptures = new LinkedHashSet<>();\n+        operandsAndCaptures.addAll(op.operands());\n+        operandsAndCaptures.addAll(op.capturedValues());\n+\n+        \/\/ validation rule of block params and constant op result\n+        Consumer<Value> validate = v -> {\n+            if (v.uses().isEmpty()) {\n+                throw new IllegalArgumentException();\n+            } else if (v.uses().size() == 1 && !(v.uses().iterator().next().op() instanceof VarOp) && !operandsAndCaptures.contains(v)) {\n+                throw new IllegalArgumentException();\n+            } else if (v.uses().size() > 1 && !operandsAndCaptures.contains(v)) {\n+                throw new IllegalArgumentException();\n+            }\n+        };\n+\n+        for (Block.Parameter p : fblock.parameters()) {\n+            validate.accept(p);\n+        }\n+\n@@ -4505,1 +4524,0 @@\n-        List<Block.Parameter> unvisitedParams = new ArrayList<>(fblock.parameters());\n@@ -4509,3 +4527,1 @@\n-                    if (varOp.initOperand() instanceof Block.Parameter p) {\n-                        unvisitedParams.remove(p);\n-                    } else if (varOp.initOperand() instanceof Op.Result opr && !(opr.op() instanceof ConstantOp)) {\n+                    if (varOp.initOperand() instanceof Op.Result opr && !(opr.op() instanceof ConstantOp)) {\n@@ -4514,1 +4530,1 @@\n-                    if (!op.operands().contains(varOp.result()) && !op.capturedValues().contains(varOp.result())) {\n+                    if (!operandsAndCaptures.contains(varOp.result())) {\n@@ -4519,14 +4535,2 @@\n-                case ConstantOp cop -> {\n-                    if (cop.result().uses().size() != 1) {\n-                        throw new IllegalArgumentException(\"Constant expected to have one use\");\n-                    } else if (!(cop.result().uses().iterator().next().op() instanceof VarOp)) {\n-                        throw new IllegalArgumentException(\"Result of a ConstantOp expected to be used by a VarOp\");\n-                    }\n-                }\n-                case null, default ->\n-                        throw new IllegalArgumentException(\"Operation not a VarOp nor a ConstantOp, \" + o);\n-            }\n-        }\n-        for (Block.Parameter p : unvisitedParams) {\n-            if (!op.operands().contains(p) && !op.capturedValues().contains(p)) {\n-                throw new IllegalArgumentException(\"Block parameter not an operand nor a captured value\");\n+                case ConstantOp cop -> validate.accept(cop.result());\n+                default -> throw new IllegalArgumentException(\"Operation not a VarOp nor a ConstantOp, \" + o);\n@@ -4536,3 +4540,0 @@\n-        SequencedSet<Value> operandsAndCaptures = new LinkedHashSet<>();\n-        operandsAndCaptures.addAll(op.operands());\n-        operandsAndCaptures.addAll(op.capturedValues());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"}]}