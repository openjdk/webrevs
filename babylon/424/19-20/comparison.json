{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.util.stream.Stream;\n@@ -67,1 +68,2 @@\n-        assert op.capturedValues().equals(new ArrayList<>(capturedValues.keySet()));\n+        assert Stream.concat(op.operands().stream(), op.capturedValues().stream()).toList()\n+                .equals(new ArrayList<>(capturedValues.keySet()));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,25 +39,1 @@\n-\n-        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(funcOp);\n-\n-        \/\/ map captured values to their corresponding runtime values\n-        \/\/ captured value can be:\n-        \/\/ 1- block param\n-        \/\/ 2- result of VarOp whose initial value is constant\n-        \/\/ 3- result of VarOp whose initial value is block param\n-        List<Block.Parameter> params = funcOp.parameters();\n-        SequencedMap<Value, Object> m = new LinkedHashMap<>();\n-        for (Value v : opAndValues.operandsAndCaptures()) {\n-            if (v instanceof Block.Parameter p) {\n-                Object rv = args[params.indexOf(p)];\n-                m.put(v, rv);\n-            } else if (v instanceof Op.Result opr && opr.op() instanceof CoreOp.VarOp varOp) {\n-                if (varOp.initOperand() instanceof Op.Result r && r.op() instanceof CoreOp.ConstantOp cop) {\n-                    m.put(v, CoreOp.Var.of(cop.value()));\n-                } else if (varOp.initOperand() instanceof Block.Parameter p) {\n-                    Object rv = args[params.indexOf(p)];\n-                    m.put(v, CoreOp.Var.of(rv));\n-                }\n-            }\n-        }\n-\n-        return new Quoted(opAndValues.op(), m);\n+        return CoreOp.quotedOp(funcOp, args);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/QuotedHelper.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -4482,3 +4482,1 @@\n-    public record OpAndValues(Op op, SequencedSet<Value> operandsAndCaptures) { }\n-\n-    public static OpAndValues quotedOp(FuncOp funcOp) {\n+    public static Quoted quotedOp(FuncOp funcOp, Object[] args) {\n@@ -4549,1 +4547,33 @@\n-        return new OpAndValues(op, operandsAndCaptures);\n+        \/\/ map captured values to their corresponding runtime values\n+        \/\/ captured value can be:\n+        \/\/ 1- block param\n+        \/\/ 2- result of VarOp whose initial value is constant\n+        \/\/ 3- result of VarOp whose initial value is block param\n+        \/\/ 4- result of ConstantOp\n+        List<Block.Parameter> params = funcOp.parameters();\n+        if (params.size() != args.length) {\n+            throw new IllegalArgumentException();\n+        }\n+        SequencedMap<Value, Object> m = new LinkedHashMap<>();\n+        for (Value v : operandsAndCaptures) {\n+            switch (v) {\n+                case Block.Parameter p -> {\n+                    Object rv = args[params.indexOf(p)];\n+                    m.put(v, rv);\n+                }\n+                case Result opr when opr.op() instanceof VarOp varOp -> {\n+                    if (varOp.initOperand() instanceof Result r && r.op() instanceof ConstantOp cop) {\n+                        m.put(v, Var.of(cop.value()));\n+                    } else if (varOp.initOperand() instanceof Block.Parameter p) {\n+                        Object rv = args[params.indexOf(p)];\n+                        m.put(v, Var.of(rv));\n+                    }\n+                }\n+                case Result opr when opr.op() instanceof ConstantOp cop -> {\n+                    m.put(v, cop.value());\n+                }\n+                default -> throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        return new Quoted(op, m);\n@@ -4551,0 +4581,3 @@\n+    \/\/ TODO embed constant operand and capture in the body of FuncOp we produce (maybe later)\n+    \/\/ TODO err message\n+    \/\/ TODO move them to Quoted and accept args (list)\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/op\/CoreOp.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -13,2 +13,1 @@\n-import java.util.LinkedHashSet;\n-import java.util.SequencedSet;\n+import java.util.Iterator;\n@@ -38,2 +37,0 @@\n-\/\/        fm.writeTo(System.out);\n-\n@@ -41,1 +38,0 @@\n-\/\/        funcOp.writeTo(System.out);\n@@ -43,1 +39,2 @@\n-        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(funcOp);\n+        Object[] args = new Object[]{1, \"a\", this};\n+        Quoted quoted = CoreOp.quotedOp(funcOp, args);\n@@ -46,1 +43,0 @@\n-        Op op = opAndValues.op();\n@@ -48,1 +44,3 @@\n-        Assert.assertTrue(lop.getClass().isInstance(op));\n+        Assert.assertTrue(lop.getClass().isInstance(quoted.op()));\n+\n+        Iterator<Object> iterator = quoted.capturedValues().values().iterator();\n@@ -50,4 +48,3 @@\n-        SequencedSet<Value> e = new LinkedHashSet<>();\n-        e.addAll(op.operands());\n-        e.addAll(op.capturedValues());\n-        Assert.assertEquals(opAndValues.operandsAndCaptures(), e);\n+        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[0]);\n+        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[1]);\n+        Assert.assertEquals(iterator.next(), args[2]);\n@@ -67,2 +64,0 @@\n-\/\/        gm.writeTo(System.out);\n-\n@@ -70,1 +65,0 @@\n-\/\/        funcOp.writeTo(System.out);\n@@ -72,2 +66,4 @@\n-        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(funcOp);\n-        Op op = opAndValues.op();\n+        Object[] args = {\"abc\", \"b\"};\n+        Quoted quoted = CoreOp.quotedOp(funcOp, args);\n+\n+        Assert.assertTrue(invOp.getClass().isInstance(quoted.op()));\n@@ -75,1 +71,1 @@\n-        Assert.assertTrue(invOp.getClass().isInstance(op));\n+        Iterator<Object> iterator = quoted.capturedValues().values().iterator();\n@@ -77,4 +73,2 @@\n-        SequencedSet<Value> e = new LinkedHashSet<>();\n-        e.addAll(op.operands());\n-        e.addAll(op.capturedValues());\n-        Assert.assertEquals(opAndValues.operandsAndCaptures(), e);\n+        Assert.assertEquals(iterator.next(), args[0]);\n+        Assert.assertEquals(iterator.next(), args[1]);\n@@ -89,0 +83,1 @@\n+        \/\/ access FuncOp created by javac\n@@ -93,1 +88,0 @@\n-\/\/        fop.writeTo(System.out);\n@@ -95,1 +89,2 @@\n-        CoreOp.OpAndValues opAndValues = CoreOp.quotedOp(fop);\n+        Object[] args = {this, 111};\n+        Quoted quoted2 = CoreOp.quotedOp(fop, args);\n@@ -97,4 +92,5 @@\n-        SequencedSet<Value> e = new LinkedHashSet<>();\n-        e.addAll(op.operands());\n-        e.addAll(op.capturedValues());\n-        Assert.assertEquals(opAndValues.operandsAndCaptures(), e);\n+        Iterator<Object> iterator = quoted2.capturedValues().values().iterator();\n+\n+        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), y);\n+        Assert.assertEquals(((CoreOp.Var) iterator.next()).value(), args[1]);\n+        Assert.assertEquals(iterator.next(), args[0]);\n@@ -104,2 +100,2 @@\n-    Object[] invalidCases() {\n-      return new Object[] {\n+    Object[][] invalidCases() {\n+        return new Object[][]{\n@@ -107,2 +103,3 @@\n-              \/\/ func op must have one block\n-              \"\"\"\n+                {\n+                        \/\/ func op must have one block\n+                        \"\"\"\n@@ -121,1 +118,3 @@\n-\"\"\",\n+\"\"\", new Object[]{}\n+                },\n+                {\n@@ -134,3 +133,5 @@\n-\"\"\",\n-              \/\/ last op must be ReturnOp\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ last op must be ReturnOp\n+                        \"\"\"\n@@ -146,3 +147,5 @@\n-\"\"\",\n-              \/\/ the result of QuotedOp must be returned\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ the result of QuotedOp must be returned\n+                        \"\"\"\n@@ -158,3 +161,5 @@\n-\"\"\",\n-              \/\/ the result of QuotedOp must be returned\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ the result of QuotedOp must be returned\n+                        \"\"\"\n@@ -171,3 +176,5 @@\n-\"\"\",\n-              \/\/ param must be used\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ param must be used\n+                        \"\"\"\n@@ -183,3 +190,5 @@\n-\"\"\",\n-              \/\/ param used more than once, all uses must be as operand or capture of quoted op\n-              \"\"\"\n+\"\"\", new Object[]{\"s\"}\n+                },\n+                {\n+                        \/\/ param used more than once, all uses must be as operand or capture of quoted op\n+                        \"\"\"\n@@ -196,3 +205,5 @@\n-\"\"\",\n-              \/\/ operations before quoted op must be ConstantOp or VarOp\n-              \"\"\"\n+\"\"\", new Object[]{1}\n+                },\n+                {\n+                        \/\/ operations before quoted op must be ConstantOp or VarOp\n+                        \"\"\"\n@@ -210,3 +221,5 @@\n-\"\"\",\n-              \/\/ constant op must be used\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ constant op must be used\n+                        \"\"\"\n@@ -223,3 +236,5 @@\n-\"\"\",\n-              \/\/ constant used more than once, all its uses must be as operand or capture of quoted op\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ constant used more than once, all its uses must be as operand or capture of quoted op\n+                        \"\"\"\n@@ -239,3 +254,5 @@\n-\"\"\",\n-              \/\/ var op must be initialized with param or result of constant op\n-              \"\"\"\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ var op must be initialized with param or result of constant op\n+                        \"\"\"\n@@ -253,12 +270,6 @@\n-\"\"\",\n-              \/\/ var op must be used as operand or capture of quoted op\n-              \"\"\"\n-func @\"q\" ()jdk.incubator.code.Quoted -> {\n-    %0 : int = constant @\"1\";\n-    %1 : Var<int> = var %0 @\"y\";\n-    %5 : jdk.incubator.code.Quoted = quoted ()void -> {\n-      %6 : java.lang.Runnable = lambda ()void -> {\n-          return;\n-      };\n-      yield %6;\n-    };\n+\"\"\", new Object[]{}\n+                },\n+                {\n+                        \/\/ model must contains at least two operations\n+                        \"\"\"\n+func @\"q\" (%5 : jdk.incubator.code.Quoted)jdk.incubator.code.Quoted -> {\n@@ -267,1 +278,2 @@\n-\"\"\"\n+\"\"\", new Object[]{null}\n+                }\n@@ -273,1 +285,1 @@\n-    void testInvalidCases(String model) {\n+    void testInvalidCases(String model, Object[] args) {\n@@ -275,1 +287,1 @@\n-        Assert.assertThrows(IllegalArgumentException.class, () -> CoreOp.quotedOp(fop));\n+        Assert.assertThrows(IllegalArgumentException.class, () -> CoreOp.quotedOp(fop, args));\n@@ -279,3 +291,4 @@\n-    Object[] validCases() {\n-        return new Object[] {\n-                \"\"\"\n+    Object[][] validCases() {\n+        return new Object[][] {\n+                {\n+                        \"\"\"\n@@ -291,2 +304,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {}\n+                },\n+                {\n+                        \"\"\"\n@@ -302,2 +317,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {1}\n+                },\n+                {\n+                        \"\"\"\n@@ -315,2 +332,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {2}\n+                },\n+                {\n+                        \"\"\"\n@@ -329,2 +348,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {3}\n+                },\n+                {\n+                        \"\"\"\n@@ -341,2 +362,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {}\n+                },\n+                {\n+                        \"\"\"\n@@ -356,2 +379,4 @@\n-\"\"\",\n-                \"\"\"\n+\"\"\", new Object[] {}\n+                },\n+                {\n+                        \"\"\"\n@@ -371,1 +396,2 @@\n-\"\"\",\n+\"\"\", new Object[] {}\n+                },\n@@ -376,1 +402,1 @@\n-    void testValidCases(String model) {\n+    void testValidCases(String model, Object[] args) {\n@@ -378,1 +404,1 @@\n-        CoreOp.quotedOp(fop);\n+        CoreOp.quotedOp(fop, args);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":119,"deletions":93,"binary":false,"changes":212,"status":"modified"}]}