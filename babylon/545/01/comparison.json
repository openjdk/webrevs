{"files":[{"patch":"@@ -887,1 +887,1 @@\n-                            if (Quotable.class.isAssignableFrom(intfClass)) {\n+                            if (op.isQuotable()) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -474,0 +474,2 @@\n+                        \/\/ how to know if lambda is Quotable ?\n+                        \/\/ if the last bsm arg is a MH to a an opMethod ?\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeLift.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+            final boolean isQuotable;\n@@ -166,0 +167,9 @@\n+                this.isQuotable = false;\n+            }\n+\n+            Builder(Body.Builder ancestorBody, FunctionType funcType, TypeElement functionalInterface,\n+                    boolean isQuotable) {\n+                this.ancestorBody = ancestorBody;\n+                this.funcType = funcType;\n+                this.functionalInterface = functionalInterface;\n+                this.isQuotable = isQuotable;\n@@ -171,1 +181,5 @@\n-                return new LambdaOp(functionalInterface, body);\n+                return new LambdaOp(functionalInterface, body, isQuotable);\n+            }\n+\n+            public Builder quotable() {\n+                return new Builder(ancestorBody, funcType, functionalInterface, true);\n@@ -176,0 +190,1 @@\n+        static final String ATTRIBUTE_LAMBDA_IS_QUOTABLE = NAME + \".isQuotable\";\n@@ -179,0 +194,1 @@\n+        final boolean isQuotable;\n@@ -180,2 +196,7 @@\n-        LambdaOp(ExternalizedOp def) {\n-            this(def.resultType(), def.bodyDefinitions().get(0));\n+        static LambdaOp create(ExternalizedOp def) {\n+            boolean isQuotable = def.extractAttributeValue(ATTRIBUTE_LAMBDA_IS_QUOTABLE,\n+                    false, v -> switch (v) {\n+                        case Boolean b -> b;\n+                        case null, default -> false;\n+                    });\n+            return new LambdaOp(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n@@ -189,0 +210,1 @@\n+            this.isQuotable = that.isQuotable;\n@@ -196,1 +218,1 @@\n-        LambdaOp(TypeElement functionalInterface, Body.Builder bodyC) {\n+        LambdaOp(TypeElement functionalInterface, Body.Builder bodyC, boolean isQuotable) {\n@@ -202,0 +224,1 @@\n+            this.isQuotable = isQuotable;\n@@ -240,0 +263,9 @@\n+        public boolean isQuotable() {\n+            return isQuotable;\n+        }\n+\n+        @Override\n+        public Map<String, Object> externalize() {\n+            return Map.of(ATTRIBUTE_LAMBDA_IS_QUOTABLE, isQuotable);\n+        }\n+\n@@ -4978,1 +5010,1 @@\n-            case \"lambda\" -> new LambdaOp(def);\n+            case \"lambda\" -> LambdaOp.create(def);\n@@ -5042,1 +5074,13 @@\n-        return new LambdaOp(functionalInterface, body);\n+        return new LambdaOp(functionalInterface, body, false);\n+    }\n+\n+    \/**\n+     * Creates a lambda operation.\n+     *\n+     * @param functionalInterface the lambda operation's functional interface type\n+     * @param body                the body of the lambda operation\n+     * @param isQuotable          true if the lambda is quotable\n+     * @return the lambda operation\n+     *\/\n+    public static LambdaOp lambda(TypeElement functionalInterface, Body.Builder body, boolean isQuotable) {\n+        return new LambdaOp(functionalInterface, body, isQuotable);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1529,1 +1529,1 @@\n-                    yield JavaOp.lambda(fiType, stack.body);\n+                    yield JavaOp.lambda(fiType, stack.body, kind == FunctionalExpressionKind.QUOTABLE);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-            if (Quotable.class.isAssignableFrom(fi)) {\n+            if (lo.isQuotable()) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}