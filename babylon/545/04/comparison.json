{"files":[{"patch":"@@ -887,1 +887,1 @@\n-                            if (Quotable.class.isAssignableFrom(intfClass)) {\n+                            if (op.isQuotable()) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+import java.lang.invoke.LambdaMetafactory;\n@@ -477,0 +478,5 @@\n+                        \/\/ if FLAG_QUOTABLE is set, the lambda is quotable\n+                        if (inst.bootstrapArgs().size() > 3 && inst.bootstrapArgs().get(3) instanceof Integer a\n+                                && (a & LambdaMetafactory.FLAG_QUOTABLE) != 0) {\n+                            lambda = lambda.quotable();\n+                        }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeLift.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -161,0 +161,1 @@\n+            final boolean isQuotable;\n@@ -166,0 +167,9 @@\n+                this.isQuotable = false;\n+            }\n+\n+            Builder(Body.Builder ancestorBody, FunctionType funcType, TypeElement functionalInterface,\n+                    boolean isQuotable) {\n+                this.ancestorBody = ancestorBody;\n+                this.funcType = funcType;\n+                this.functionalInterface = functionalInterface;\n+                this.isQuotable = isQuotable;\n@@ -171,1 +181,5 @@\n-                return new LambdaOp(functionalInterface, body);\n+                return new LambdaOp(functionalInterface, body, isQuotable);\n+            }\n+\n+            public Builder quotable() {\n+                return new Builder(ancestorBody, funcType, functionalInterface, true);\n@@ -176,0 +190,1 @@\n+        static final String ATTRIBUTE_LAMBDA_IS_QUOTABLE = NAME + \".isQuotable\";\n@@ -179,0 +194,1 @@\n+        final boolean isQuotable;\n@@ -180,2 +196,7 @@\n-        LambdaOp(ExternalizedOp def) {\n-            this(def.resultType(), def.bodyDefinitions().get(0));\n+        static LambdaOp create(ExternalizedOp def) {\n+            boolean isQuotable = def.extractAttributeValue(ATTRIBUTE_LAMBDA_IS_QUOTABLE,\n+                    false, v -> switch (v) {\n+                        case Boolean b -> b;\n+                        case null, default -> false;\n+                    });\n+            return new LambdaOp(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n@@ -189,0 +210,1 @@\n+            this.isQuotable = that.isQuotable;\n@@ -196,1 +218,1 @@\n-        LambdaOp(TypeElement functionalInterface, Body.Builder bodyC) {\n+        LambdaOp(TypeElement functionalInterface, Body.Builder bodyC, boolean isQuotable) {\n@@ -202,0 +224,1 @@\n+            this.isQuotable = isQuotable;\n@@ -240,0 +263,9 @@\n+        public boolean isQuotable() {\n+            return isQuotable;\n+        }\n+\n+        @Override\n+        public Map<String, Object> externalize() {\n+            return Map.of(ATTRIBUTE_LAMBDA_IS_QUOTABLE, isQuotable);\n+        }\n+\n@@ -4978,1 +5010,1 @@\n-            case \"lambda\" -> new LambdaOp(def);\n+            case \"lambda\" -> LambdaOp.create(def);\n@@ -5042,1 +5074,13 @@\n-        return new LambdaOp(functionalInterface, body);\n+        return new LambdaOp(functionalInterface, body, false);\n+    }\n+\n+    \/**\n+     * Creates a lambda operation.\n+     *\n+     * @param functionalInterface the lambda operation's functional interface type\n+     * @param body                the body of the lambda operation\n+     * @param isQuotable          true if the lambda is quotable\n+     * @return the lambda operation\n+     *\/\n+    public static LambdaOp lambda(TypeElement functionalInterface, Body.Builder body, boolean isQuotable) {\n+        return new LambdaOp(functionalInterface, body, isQuotable);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1529,1 +1529,1 @@\n-                    yield JavaOp.lambda(fiType, stack.body);\n+                    yield JavaOp.lambda(fiType, stack.body, kind == FunctionalExpressionKind.QUOTABLE);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-            if (Quotable.class.isAssignableFrom(fi)) {\n+            if (lo.isQuotable()) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -54,1 +54,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"int\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true ()java.type:\"int\" -> {\n@@ -65,1 +65,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int\" -> {\n@@ -77,1 +77,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -92,1 +92,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -105,1 +105,1 @@\n-                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -131,1 +131,1 @@\n-                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -149,1 +149,1 @@\n-                %2 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%3 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : java.type:\"java.util.function.IntUnaryOperator\" = lambda @lambda.isQuotable=true (%3 : java.type:\"int\")java.type:\"int\" -> {\n@@ -169,1 +169,1 @@\n-                %1 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"java.util.function.IntUnaryOperator\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -191,1 +191,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -206,1 +206,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int\" -> {\n@@ -219,1 +219,1 @@\n-                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n+                %0 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n@@ -242,1 +242,1 @@\n-                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quotable\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableIntersectionTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -58,1 +58,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableIntSupplier\" = lambda ()java.type:\"int\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntSupplier\" = lambda @lambda.isQuotable=true ()java.type:\"int\" -> {\n@@ -71,1 +71,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int\" -> {\n@@ -85,1 +85,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableIntBinaryOperator\" = lambda (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntBinaryOperator\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\", %2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -99,1 +99,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -110,1 +110,1 @@\n-                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -136,1 +136,1 @@\n-                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -154,1 +154,1 @@\n-                %2 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%3 : java.type:\"int\")java.type:\"int\" -> {\n+                %2 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%3 : java.type:\"int\")java.type:\"int\" -> {\n@@ -174,1 +174,1 @@\n-                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -195,1 +195,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -208,1 +208,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int\" -> {\n@@ -223,1 +223,1 @@\n-                %0 : java.type:\"QuotableSubtypeTest$QuotableIntFunction<int[]>\" = lambda (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n+                %0 : java.type:\"QuotableSubtypeTest$QuotableIntFunction<int[]>\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int[]\" -> {\n@@ -244,1 +244,1 @@\n-                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda (%2 : java.type:\"int\")java.type:\"int\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableIntUnaryOperator\" = lambda @lambda.isQuotable=true (%2 : java.type:\"int\")java.type:\"int\" -> {\n@@ -258,1 +258,1 @@\n-                %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -272,1 +272,1 @@\n-                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -290,1 +290,1 @@\n-                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n@@ -302,2 +302,2 @@\n-                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n-                      %2 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n+                      %2 : java.type:\"java.lang.Runnable\" = lambda @lambda.isQuotable=false ()java.type:\"void\" -> {\n@@ -318,2 +318,2 @@\n-                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n-                      %2 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n+                      %2 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda @lambda.isQuotable=true ()java.type:\"void\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableSubtypeTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda @lambda.isQuotable=false (%1 : java.type:\"int\")java.type:\"int\" -> {\n@@ -179,1 +179,1 @@\n-                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda (%1 : java.type:\"int\")java.type:\"int\" -> {\n+                %0 : java.type:\"java.util.function.IntUnaryOperator\" = lambda @lambda.isQuotable=true (%1 : java.type:\"int\")java.type:\"int\" -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnreachableTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}