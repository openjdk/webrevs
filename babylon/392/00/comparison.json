{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include <thread>\n@@ -46,1 +47,1 @@\n-        std::cout << \"devptr \" << std::hex<<  (long)devicePtr <<std::dec <<std::endl;\n+        std::cout << \"devptr=\" << std::hex<<  (long)devicePtr << \"stream=\" <<dynamic_cast<CudaQueue *>(backend->queue)->cuStream <<std::dec <<std::endl;\n@@ -48,0 +49,6 @@\n+    \/\/ Attempt to solve healing brush crash (where thread for creation of stream differs from the one where we are copying).\n+  \/\/  WHERE{.f=__FILE__, .l=__LINE__,\n+    \/\/        .e=cuStreamAttachMemAsync(dynamic_cast<CudaQueue *>(backend->queue)->cuStream, devicePtr, 0,  CU_MEM_ATTACH_GLOBAL),\n+    \/\/        .t=\"cuStreamAttachMemAsync\"\n+   \/\/ }.report();\n+\n@@ -54,1 +61,5 @@\n-        std::cout << \"~CudaBuffer()\"<< \"devptr \" << std::hex << (long) devicePtr << std::dec<< std::endl;\n+        std::thread::id thread_id = std::this_thread::get_id();\n+\n+        std::cout << \"~CudaBuffer()\"<< \"devptr =\" << std::hex << (long) devicePtr << std::dec\n+                << \" thread=\" <<thread_id\n+        <<std::endl;\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_buffer.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <thread>\n@@ -31,1 +32,1 @@\n-        : Backend::Queue(backend),cuStream() {\n+        : Backend::Queue(backend),cuStream(),streamCreationThread() {\n@@ -34,2 +35,17 @@\n-    auto status =  cuStreamCreate(&cuStream,CU_STREAM_DEFAULT);\n-    WHERE{.f=__FILE__ , .l=__LINE__, .e=status, .t= \"cuStreamCreate\"}.report();\n+    streamCreationThread = std::this_thread::get_id();\n+    if (backend->config->traceCalls){\n+        std::cout << \"init() 0x\"\n+                  << \" thread=\" <<streamCreationThread\n+                  << std::endl;\n+    }\n+\n+    WHERE{.f=__FILE__ , .l=__LINE__,\n+          .e=cuStreamCreate(&cuStream,CU_STREAM_DEFAULT),\n+          .t= \"cuStreamCreate\"\n+    }.report();\n+\n+    if (backend->config->traceCalls){\n+        std::cout << \"exiting init() 0x\"\n+                  << \" custream=\" <<std::hex<<streamCreationThread <<std::dec\n+                  << std::endl;\n+    }\n@@ -80,0 +96,4 @@\n+    std::thread::id thread_id = std::this_thread::get_id();\n+    if (thread_id != streamCreationThread){\n+        std::cout << \"copyToDevice()  thread=\" <<thread_id<< \" != \"<< streamCreationThread<< std::endl;\n+    }\n@@ -81,0 +101,1 @@\n+\n@@ -84,1 +105,2 @@\n-                << \"devptr \" << std::hex<<  (long)cudaBuffer->devicePtr <<std::dec\n+                << \"devptr=\" << std::hex<<  (long)cudaBuffer->devicePtr <<std::dec\n+                << \" thread=\" <<thread_id\n@@ -101,0 +123,4 @@\n+    std::thread::id thread_id = std::this_thread::get_id();\n+    if (thread_id != streamCreationThread){\n+        std::cout << \"copyFromDevice()  thread=\" <<thread_id<< \" != \"<< streamCreationThread<< std::endl;\n+    }\n@@ -102,0 +128,1 @@\n+\n@@ -105,1 +132,2 @@\n-                  << \"devptr \" << std::hex<<  (long)cudaBuffer->devicePtr <<std::dec\n+                  << \"devptr=\" << std::hex<<  (long)cudaBuffer->devicePtr <<std::dec\n+                << \" thread=\" <<thread_id\n@@ -108,0 +136,2 @@\n+\n+\n@@ -135,0 +165,5 @@\n+    std::thread::id thread_id = std::this_thread::get_id();\n+    if (thread_id != streamCreationThread){\n+        std::cout << \"dispatch()  thread=\" <<thread_id<< \" != \"<< streamCreationThread<< std::endl;\n+    }\n+\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend_queue.cpp","additions":40,"deletions":5,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+#include <thread>\n@@ -101,0 +102,1 @@\n+         std::thread::id streamCreationThread;\n","filename":"hat\/backends\/ffi\/cuda\/include\/cuda_backend.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public class OpenCLBackend extends C99FFIBackend implements BufferTracker {\n+public class OpenCLBackend extends C99FFIBackend {\n@@ -81,77 +81,0 @@\n-    @Override\n-    public void preMutate(Buffer b) {\n-        switch (b.getState()) {\n-            case BufferState.NO_STATE:\n-            case BufferState.NEW_STATE:\n-            case BufferState.HOST_OWNED:\n-            case BufferState.DEVICE_VALID_HOST_HAS_COPY: {\n-                if (config.isSHOW_STATE()) {\n-                    System.out.println(\"in preMutate state = \" + b.getStateString() + \" no action to take\");\n-                }\n-                break;\n-            }\n-            case BufferState.DEVICE_OWNED: {\n-                backendBridge.getBufferFromDeviceIfDirty(b);\/\/ calls through FFI and might block when fetching from device\n-                if (config.isSHOW_STATE()) {\n-                    System.out.print(\"in preMutate state = \" + b.getStateString() + \" we pulled from device \");\n-                }\n-                b.setState(BufferState.DEVICE_VALID_HOST_HAS_COPY);\n-                if (config.isSHOW_STATE()) {\n-                    System.out.println(\"and switched to \" + b.getStateString());\n-                }\n-                break;\n-            }\n-            default:\n-                throw new IllegalStateException(\"Not expecting this state \");\n-        }\n-    }\n-\n-    @Override\n-    public void postMutate(Buffer b) {\n-        if (config.isSHOW_STATE()) {\n-            System.out.print(\"in postMutate state = \" + b.getStateString() + \" no action to take \");\n-        }\n-        if (b.getState() != BufferState.NEW_STATE) {\n-            b.setState(BufferState.HOST_OWNED);\n-        }\n-        if (config.isSHOW_STATE()) {\n-            System.out.println(\"and switched to (or stayed on) \" + b.getStateString());\n-        }\n-    }\n-\n-    @Override\n-    public void preAccess(Buffer b) {\n-        switch (b.getState()) {\n-            case BufferState.NO_STATE:\n-            case BufferState.NEW_STATE:\n-            case BufferState.HOST_OWNED:\n-            case BufferState.DEVICE_VALID_HOST_HAS_COPY: {\n-                if (config.isSHOW_STATE()) {\n-                    System.out.println(\"in preAccess state = \" + b.getStateString() + \" no action to take\");\n-                }\n-                break;\n-            }\n-            case BufferState.DEVICE_OWNED: {\n-                backendBridge.getBufferFromDeviceIfDirty(b);\/\/ calls through FFI and might block when fetching from device\n-\n-                if (config.isSHOW_STATE()) {\n-                    System.out.print(\"in preAccess state = \" + b.getStateString() + \" we pulled from device \");\n-                }\n-                b.setState(BufferState.DEVICE_VALID_HOST_HAS_COPY);\n-                if (config.isSHOW_STATE()) {\n-                    System.out.println(\"and switched to \" + b.getStateString());\n-                }\n-                break;\n-            }\n-            default:\n-                throw new IllegalStateException(\"Not expecting this state \");\n-        }\n-    }\n-\n-\n-    @Override\n-    public void postAccess(Buffer b) {\n-        if (config.isSHOW_STATE()) {\n-            System.out.println(\"in postAccess state = \" + b.getStateString());\n-        }\n-    }\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":1,"deletions":78,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import hat.buffer.BufferTracker;\n@@ -35,0 +36,1 @@\n+import hat.ifacemapper.BufferState;\n@@ -43,1 +45,1 @@\n-public abstract class C99FFIBackend extends FFIBackend {\n+public abstract class C99FFIBackend extends FFIBackend  implements BufferTracker {\n@@ -110,0 +112,79 @@\n+\n+\n+    @Override\n+    public void preMutate(Buffer b) {\n+        switch (b.getState()) {\n+            case BufferState.NO_STATE:\n+            case BufferState.NEW_STATE:\n+            case BufferState.HOST_OWNED:\n+            case BufferState.DEVICE_VALID_HOST_HAS_COPY: {\n+                if (config.isSHOW_STATE()) {\n+                    System.out.println(\"in preMutate state = \" + b.getStateString() + \" no action to take\");\n+                }\n+                break;\n+            }\n+            case BufferState.DEVICE_OWNED: {\n+                backendBridge.getBufferFromDeviceIfDirty(b);\/\/ calls through FFI and might block when fetching from device\n+                if (config.isSHOW_STATE()) {\n+                    System.out.print(\"in preMutate state = \" + b.getStateString() + \" we pulled from device \");\n+                }\n+                b.setState(BufferState.DEVICE_VALID_HOST_HAS_COPY);\n+                if (config.isSHOW_STATE()) {\n+                    System.out.println(\"and switched to \" + b.getStateString());\n+                }\n+                break;\n+            }\n+            default:\n+                throw new IllegalStateException(\"Not expecting this state \");\n+        }\n+    }\n+\n+    @Override\n+    public void postMutate(Buffer b) {\n+        if (config.isSHOW_STATE()) {\n+            System.out.print(\"in postMutate state = \" + b.getStateString() + \" no action to take \");\n+        }\n+        if (b.getState() != BufferState.NEW_STATE) {\n+            b.setState(BufferState.HOST_OWNED);\n+        }\n+        if (config.isSHOW_STATE()) {\n+            System.out.println(\"and switched to (or stayed on) \" + b.getStateString());\n+        }\n+    }\n+\n+    @Override\n+    public void preAccess(Buffer b) {\n+        switch (b.getState()) {\n+            case BufferState.NO_STATE:\n+            case BufferState.NEW_STATE:\n+            case BufferState.HOST_OWNED:\n+            case BufferState.DEVICE_VALID_HOST_HAS_COPY: {\n+                if (config.isSHOW_STATE()) {\n+                    System.out.println(\"in preAccess state = \" + b.getStateString() + \" no action to take\");\n+                }\n+                break;\n+            }\n+            case BufferState.DEVICE_OWNED: {\n+                backendBridge.getBufferFromDeviceIfDirty(b);\/\/ calls through FFI and might block when fetching from device\n+\n+                if (config.isSHOW_STATE()) {\n+                    System.out.print(\"in preAccess state = \" + b.getStateString() + \" we pulled from device \");\n+                }\n+                b.setState(BufferState.DEVICE_VALID_HOST_HAS_COPY);\n+                if (config.isSHOW_STATE()) {\n+                    System.out.println(\"and switched to \" + b.getStateString());\n+                }\n+                break;\n+            }\n+            default:\n+                throw new IllegalStateException(\"Not expecting this state \");\n+        }\n+    }\n+\n+\n+    @Override\n+    public void postAccess(Buffer b) {\n+        if (config.isSHOW_STATE()) {\n+            System.out.println(\"in postAccess state = \" + b.getStateString());\n+        }\n+    }\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":82,"deletions":1,"binary":false,"changes":83,"status":"modified"}]}