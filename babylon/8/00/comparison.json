{"files":[{"patch":"@@ -128,0 +128,4 @@\n+            return getOrAssignSlot(v, false);\n+        }\n+\n+        int getOrAssignSlot(Value v, boolean forceUnused) {\n@@ -141,1 +145,1 @@\n-            if (users.isEmpty()) {\n+            if (!forceUnused && users.isEmpty()) {\n@@ -406,0 +410,3 @@\n+        \/\/ ensure all parameters of the entry block have their original slot\n+        LiveSlotSet entrySlots = c.liveSlotSet(r.entryBlock());\n+        r.entryBlock().parameters().forEach(p -> entrySlots.getOrAssignSlot(p, true));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLower.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -102,0 +102,60 @@\n+    @CodeReflection\n+    static int f4(\/* Unused *\/ int a, int b) {\n+        return b;\n+    }\n+\n+    @Test\n+    public void testF4() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f4\");\n+\n+        MethodHandle mh;\n+        try {\n+            mh = generate(f);\n+        } catch (VerifyError e) {\n+            Assert.fail(\"invalid class file generated\", e);\n+            return;\n+        }\n+\n+        Assert.assertEquals(f4(1, 2), (int) mh.invoke(1, 2));\n+    }\n+\n+    @CodeReflection\n+    static int f5(\/* Unused *\/ Object a, int b) {\n+        return b;\n+    }\n+\n+    @Test\n+    public void testF5() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f5\");\n+\n+        MethodHandle mh;\n+        try {\n+            mh = generate(f);\n+        } catch (VerifyError e) {\n+            Assert.fail(\"invalid class file generated\", e);\n+            return;\n+        }\n+\n+        Assert.assertEquals(f5(null, 2), (int) mh.invoke(null, 2));\n+    }\n+\n+    @CodeReflection\n+    int f6(\/* Unused receiver parameter *\/ TestSlots this, int b) {\n+        return b;\n+    }\n+\n+    @Test\n+    public void testF6() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f6\");\n+\n+        MethodHandle mh;\n+        try {\n+            mh = generate(f);\n+        } catch (VerifyError e) {\n+            Assert.fail(\"invalid class file generated\", e);\n+            return;\n+        }\n+\n+        Assert.assertEquals(f6(2), (int) mh.invoke(\/* receiver parameter *\/ this, 2));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}