{"files":[{"patch":"@@ -36,0 +36,4 @@\n+import java.lang.reflect.code.bytecode.BytecodeLower.ConditionalBranchConsumer;\n+import java.lang.reflect.code.bytecode.BytecodeLower.ExceptionRegionNode;\n+import java.lang.reflect.code.bytecode.BytecodeLower.LiveSlotSet;\n+import java.lang.reflect.code.bytecode.BytecodeLower.LoweringContext;\n@@ -131,1 +135,1 @@\n-        int getOrAssignSlot(Value v, boolean forceUnused) {\n+        int getOrAssignSlot(Value v, boolean assignIfUnused) {\n@@ -145,1 +149,1 @@\n-            if (!forceUnused && users.isEmpty()) {\n+            if (!assignIfUnused && users.isEmpty()) {\n@@ -263,0 +267,4 @@\n+        int getOrAssignSlot(Value v, boolean assignIfUnused) {\n+            return liveSlotSet().getOrAssignSlot(v, assignIfUnused);\n+        }\n+\n@@ -264,1 +272,1 @@\n-            return liveSlotSet().getOrAssignSlot(v);\n+            return getOrAssignSlot(v, false);\n@@ -410,3 +418,0 @@\n-        \/\/ ensure all parameters of the entry block have their original slot\n-        LiveSlotSet entrySlots = c.liveSlotSet(r.entryBlock());\n-        r.entryBlock().parameters().forEach(p -> entrySlots.getOrAssignSlot(p, true));\n@@ -489,2 +494,3 @@\n-            \/\/ Assign slots to block arguments\n-            b.parameters().forEach(c::getOrAssignSlot);\n+            \/\/ If b is the entry block then all its parameters conservatively require slots\n+            \/\/ Some unused parameters might be declared before others that are used\n+            b.parameters().forEach(p -> c.getOrAssignSlot(p, pb == null));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLower.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    static int f5(\/* Unused *\/ Object a, int b) {\n+    static double f5(\/* Unused *\/ double a, double b) {\n@@ -139,21 +139,1 @@\n-        Assert.assertEquals(f5(null, 2), (int) mh.invoke(null, 2));\n-    }\n-\n-    @CodeReflection\n-    int f6(\/* Unused receiver parameter *\/ TestSlots this, int b) {\n-        return b;\n-    }\n-\n-    @Test\n-    public void testF6() throws Throwable {\n-        CoreOps.FuncOp f = getFuncOp(\"f6\");\n-\n-        MethodHandle mh;\n-        try {\n-            mh = generate(f);\n-        } catch (VerifyError e) {\n-            Assert.fail(\"invalid class file generated\", e);\n-            return;\n-        }\n-\n-        Assert.assertEquals(f6(2), (int) mh.invoke(\/* receiver parameter *\/ this, 2));\n+        Assert.assertEquals(f5(1.0, 2.0), (double) mh.invoke(1.0, 2.0));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"}]}