{"files":[{"patch":"@@ -36,0 +36,4 @@\n+import java.lang.reflect.code.bytecode.BytecodeLower.ConditionalBranchConsumer;\n+import java.lang.reflect.code.bytecode.BytecodeLower.ExceptionRegionNode;\n+import java.lang.reflect.code.bytecode.BytecodeLower.LiveSlotSet;\n+import java.lang.reflect.code.bytecode.BytecodeLower.LoweringContext;\n@@ -128,0 +132,4 @@\n+            return getOrAssignSlot(v, false);\n+        }\n+\n+        int getOrAssignSlot(Value v, boolean assignIfUnused) {\n@@ -141,1 +149,1 @@\n-            if (users.isEmpty()) {\n+            if (!assignIfUnused && users.isEmpty()) {\n@@ -259,0 +267,4 @@\n+        int getOrAssignSlot(Value v, boolean assignIfUnused) {\n+            return liveSlotSet().getOrAssignSlot(v, assignIfUnused);\n+        }\n+\n@@ -260,1 +272,1 @@\n-            return liveSlotSet().getOrAssignSlot(v);\n+            return getOrAssignSlot(v, false);\n@@ -482,2 +494,3 @@\n-            \/\/ Assign slots to block arguments\n-            b.parameters().forEach(c::getOrAssignSlot);\n+            \/\/ If b is the entry block then all its parameters conservatively require slots\n+            \/\/ Some unused parameters might be declared before others that are used\n+            b.parameters().forEach(p -> c.getOrAssignSlot(p, pb == null));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLower.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -102,0 +102,40 @@\n+    @CodeReflection\n+    static int f4(\/* Unused *\/ int a, int b) {\n+        return b;\n+    }\n+\n+    @Test\n+    public void testF4() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f4\");\n+\n+        MethodHandle mh;\n+        try {\n+            mh = generate(f);\n+        } catch (VerifyError e) {\n+            Assert.fail(\"invalid class file generated\", e);\n+            return;\n+        }\n+\n+        Assert.assertEquals(f4(1, 2), (int) mh.invoke(1, 2));\n+    }\n+\n+    @CodeReflection\n+    static double f5(\/* Unused *\/ double a, double b) {\n+        return b;\n+    }\n+\n+    @Test\n+    public void testF5() throws Throwable {\n+        CoreOps.FuncOp f = getFuncOp(\"f5\");\n+\n+        MethodHandle mh;\n+        try {\n+            mh = generate(f);\n+        } catch (VerifyError e) {\n+            Assert.fail(\"invalid class file generated\", e);\n+            return;\n+        }\n+\n+        Assert.assertEquals(f5(1.0, 2.0), (double) mh.invoke(1.0, 2.0));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}