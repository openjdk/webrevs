{"files":[{"patch":"@@ -99,2 +99,1 @@\n-        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_BYTE, values);\n-        return new Tensor(data, ElementType.UINT8, shape);\n+        return ofShape(Arena.ofAuto(), shape, values);\n@@ -104,2 +103,1 @@\n-        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_LONG, values);\n-        return new Tensor(data, ElementType.INT64, shape);\n+        return ofShape(Arena.ofAuto(), shape, values);\n@@ -109,1 +107,15 @@\n-        var data = Arena.ofAuto().allocateFrom(ValueLayout.JAVA_FLOAT, values);\n+        return ofShape(Arena.ofAuto(), shape, values);\n+    }\n+\n+    public static Tensor<Byte> ofShape(Arena arena, long[] shape, byte... values) {\n+        var data = arena.allocateFrom(ValueLayout.JAVA_BYTE, values);\n+        return new Tensor(data, ElementType.UINT8, shape);\n+    }\n+\n+    public static Tensor<Long> ofShape(Arena arena, long[] shape, long... values) {\n+        var data = arena.allocateFrom(ValueLayout.JAVA_LONG, values);\n+        return new Tensor(data, ElementType.INT64, shape);\n+    }\n+\n+    public static Tensor<Float> ofShape(Arena arena, long[] shape, float... values) {\n+        var data = arena.allocateFrom(ValueLayout.JAVA_FLOAT, values);\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    static final long[] IMAGE_SHAPE = { 1, 1, IMAGE_SIZE, IMAGE_SIZE };\n@@ -111,1 +112,1 @@\n-            var imageTensor = Tensor.ofShape(new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+            var imageTensor = Tensor.ofShape(arena, IMAGE_SHAPE, imageData);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/mnist\/MNISTDemo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}