{"files":[{"patch":"@@ -176,1 +176,1 @@\n-                    assert variableStack.get(v) != null;\n+                    assert variableStack.containsKey(v);\n@@ -189,1 +189,2 @@\n-                    variableStack.computeIfAbsent(varOp, _k -> new ArrayDeque<>())\n+                    assert !variableStack.containsKey(varOp);\n+                    variableStack.computeIfAbsent(varOp, _ -> new ArrayDeque<>())\n@@ -194,3 +195,3 @@\n-                    variableStack.computeIfAbsent(storeOp.varOp(), _k -> new ArrayDeque<>())\n-                            .push(current);\n-                } else if (op instanceof CoreOp.VarAccessOp.VarLoadOp loadOp) {\n+                    variableStack.get(storeOp.varOp()).push(current);\n+                } else if (op instanceof CoreOp.VarAccessOp.VarLoadOp loadOp &&\n+                           loadOp.varOp().ancestorBody() == op.ancestorBody()) {\n@@ -202,2 +203,2 @@\n-                    op.traverse(null, (o, codeElement) -> {\n-                        if (o instanceof CoreOp.VarAccessOp.VarLoadOp loadOp &&\n+                    op.traverse(null, (_, ce) -> {\n+                        if (ce instanceof CoreOp.VarAccessOp.VarLoadOp loadOp &&\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/SSA.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.function.IntSupplier;\n@@ -125,1 +126,1 @@\n-    public void testNestedLoop() throws Throwable {\n+    public void testNestedLoop() {\n@@ -133,0 +134,19 @@\n+    @CodeReflection\n+    static int nestedLambdaCapture(int i) {\n+        IntSupplier s = () -> {\n+            int j = i + 1;\n+            IntSupplier s2 = () -> i + j;\n+            return s2.getAsInt() + i;\n+        };\n+        return s.getAsInt();\n+    }\n+\n+    @Test\n+    public void testNestedLambdaCapture() {\n+        CoreOp.FuncOp f = getFuncOp(\"nestedLambdaCapture\");\n+\n+        CoreOp.FuncOp lf = generate(f);\n+\n+        Assert.assertEquals((int) Interpreter.invoke(lf, 10), nestedLambdaCapture(10));\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSSA.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}