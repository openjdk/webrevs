{"files":[{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect.code.analysis;\n+\n+import java.lang.reflect.code.*;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.type.JavaType;\n+import java.lang.reflect.code.type.FunctionType;\n+import java.lang.reflect.code.type.MethodRef;\n+\n+public class LinearStringContextTransformer implements OpTransformer {\n+\n+    private static final JavaType SBC_TYPE = JavaType.type(StringBuilder.class);\n+    private static final MethodRef SB_TO_STRING = MethodRef.method(SBC_TYPE, \"toString\", JavaType.J_L_STRING);\n+\n+    record StringAndBuilder(Value string, Value stringBuilder) { }\n+\n+    public LinearStringContextTransformer() {}\n+\n+    @Override\n+    public Block.Builder apply(Block.Builder builder, Op op) {\n+        if (op instanceof CoreOp.ConcatOp cz) {\n+\n+            Value left = builder.context().getValue(cz.operands().get(0));\n+            Value right = builder.context().getValue(cz.operands().get(1));\n+\n+            Value result = cz.result();\n+\n+            StringAndBuilder newRes = stringBuild(builder, left, right);\n+            builder.context().mapValue(result, newRes.string);\n+        } else {\n+            builder.op(op);\n+        }\n+        return builder;\n+    }\n+\n+    \/\/Uses StringBuilder and Immediate String Value\n+    private static StringAndBuilder stringBuild(Block.Builder builder, Value left, Value right) {\n+        var newB = stringBuilder(builder, left, right);\n+        var toStringInvoke = CoreOp.invoke(SB_TO_STRING, newB);\n+        Value newString = builder.apply(toStringInvoke);\n+        return new StringAndBuilder(newString, newB);\n+    }\n+\n+    private static Value stringBuilder(Block.Builder builder, Value left, Value right) {\n+        CoreOp.NewOp newBuilder = CoreOp._new(FunctionType.functionType(SBC_TYPE));\n+        Value sb = builder.apply(newBuilder);\n+        builder.op(append(sb, left));\n+        builder.op(append(sb, right));\n+        return sb;\n+    }\n+\n+    private static Op append(Value stringBuilder, Value arg) {\n+        MethodRef leftMethodDesc = MethodRef.method(SBC_TYPE, \"append\", SBC_TYPE, arg.type());\n+        return CoreOp.invoke(leftMethodDesc, stringBuilder, arg);\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/LinearStringContextTransformer.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.transformations;\n-\n-import java.lang.reflect.code.*;\n-import java.lang.reflect.code.op.CoreOp;\n-import java.lang.reflect.code.type.JavaType;\n-import java.lang.reflect.code.type.FunctionType;\n-import java.lang.reflect.code.type.MethodRef;\n-\n-public class LinearConcatTransform {\n-\n-    private static final JavaType SBC_TYPE = JavaType.type(StringBuilder.class);\n-\n-    record StringAndBuilder(Value string, Value stringBuilder) { }\n-\n-    public LinearConcatTransform() {}\n-\n-    public static final class ConcatTransform implements OpTransformer {\n-\n-        public ConcatTransform () {\n-\n-        }\n-\n-        @Override\n-        public Block.Builder apply(Block.Builder builder, Op op) {\n-            if (op instanceof CoreOp.ConcatOp cz) {\n-\n-                Value left = builder.context().getValue(cz.operands().get(0));\n-                Value right = builder.context().getValue(cz.operands().get(1));\n-\n-                Value result = cz.result();\n-\n-                StringAndBuilder newRes = stringBuild(builder, left, right);\n-                builder.context().mapValue(result, newRes.string);\n-            } else {\n-                builder.op(op);\n-            }\n-            return builder;\n-        }\n-\n-        \/\/Uses StringBuilder and Immediate String Value\n-        private static StringAndBuilder stringBuild(Block.Builder builder, Value left, Value right) {\n-            var newB = stringBuilder(builder, left, right);\n-            var toStringMR = MethodRef.method(SBC_TYPE, \"toString\", JavaType.J_L_STRING);\n-            var toStringInvoke = CoreOp.invoke(toStringMR, newB);\n-            Value newString = builder.apply(toStringInvoke);\n-            return new StringAndBuilder(newString, newB);\n-        }\n-\n-        private static Value stringBuilder(Block.Builder builder, Value left, Value right) {\n-            CoreOp.NewOp newBuilder = CoreOp._new(FunctionType.functionType(SBC_TYPE));\n-            Value sb;\n-\n-            sb = builder.apply(newBuilder);\n-            var leftMethodDesc = MethodRef.method(SBC_TYPE, \"append\", SBC_TYPE, left.type());\n-            var leftInvoke = CoreOp.invoke(leftMethodDesc, sb, left);\n-            var rightMethodDesc = MethodRef.method(SBC_TYPE, \"append\", SBC_TYPE, right.type());\n-            var rightInvoke = CoreOp.invoke(rightMethodDesc, sb, right);\n-            builder.op(leftInvoke);\n-            builder.op(rightInvoke);\n-            return sb;\n-\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/transformations\/LinearConcatTransform.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -101,1 +101,0 @@\n-    exports java.lang.reflect.code.transformations;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.reflect.code.transformations.LinearConcatTransform;\n@@ -35,2 +34,3 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.analysis.LinearStringContextTransformer;\n+\n@@ -38,1 +38,0 @@\n-import java.lang.reflect.code.Op;\n@@ -40,1 +39,0 @@\n-import java.lang.reflect.code.bytecode.BytecodeGenerator;\n@@ -98,1 +96,1 @@\n-        CoreOp.FuncOp f_transformed = model.transform(new LinearConcatTransform.ConcatTransform());\n+        CoreOp.FuncOp f_transformed = model.transform(new LinearStringContextTransformer());\n@@ -101,1 +99,0 @@\n-        System.out.println(\"Final Transformed\");\n@@ -114,2 +111,1 @@\n-        System.out.println(\"Basic model\");\n-        model.writeTo(System.out);\n+        CoreOp.FuncOp transformed_model = model.transform(new LinearStringContextTransformer());\n@@ -117,3 +113,1 @@\n-        System.out.println(\"Final Transformed\");\n-        CoreOp.FuncOp f_transformed = ssa_model.transform(new LinearConcatTransform.ConcatTransform());\n-        f_transformed.writeTo(System.out);\n+        CoreOp.FuncOp ssa_transformed_model = ssa_model.transform(new LinearStringContextTransformer());\n@@ -122,2 +116,2 @@\n-        var interpreted = Interpreter.invoke(model, args);\n-        var transformed_interpreted = Interpreter.invoke(f_transformed, args);\n+        var model_interpreted = Interpreter.invoke(model, args);\n+        var transformed_model_interpreted = Interpreter.invoke(transformed_model, args);\n@@ -125,0 +119,1 @@\n+        var ssa_transformed_interpreted = Interpreter.invoke(ssa_transformed_model, args);\n@@ -127,31 +122,4 @@\n-            Assert.assertEquals(transformed_interpreted, jvm_interpreted);\n-            \/\/Assert.assertEquals(interpreted, transformed_interpreted);\n-        } catch (Throwable e) {\n-            throw new RuntimeException(e);\n-        }\n-\n-\n-    }\n-\n-\n-    \/\/@Test(dataProvider = \"getClassMethods\")\n-    public void testEqualResults(@NoInjection Method method) {\n-        CoreOp.FuncOp f = method.getCodeModel().orElseThrow();\n-        CoreOp.FuncOp f_transformed = f.transform(new LinearConcatTransform.ConcatTransform());\n-        CoreOp.FuncOp f_ssa = generateSSA(f).transform(new LinearConcatTransform.ConcatTransform());\n-        MethodHandle m_bytecode = generateBytecode(f_transformed);\n-\n-\n-        Object[] args = prepArgs(method);\n-\n-        var interpreted = Interpreter.invoke(f, args);\n-        var transformed_interpreted = Interpreter.invoke(f_transformed, args);\n-        var transformed_ssa_interpreted = Interpreter.invoke(f_ssa, args);\n-        try {\n-            var jvm_executed = method.invoke(null, args);\n-            var code_model_bytecode_executed = m_bytecode.invokeWithArguments(args);\n-\n-            \/\/Assert.assertEquals(interpreted, transformed_interpreted);\n-            \/\/Assert.assertEquals(transformed_interpreted, jvm_executed);\n-            \/\/Assert.assertEquals(jvm_executed, transformed_ssa_interpreted);\n-            \/\/Assert.assertEquals(transformed_ssa_interpreted, code_model_bytecode_executed);\n+            Assert.assertEquals(model_interpreted, transformed_model_interpreted);\n+            Assert.assertEquals(transformed_model_interpreted, ssa_interpreted);\n+            Assert.assertEquals(ssa_interpreted, ssa_transformed_interpreted);\n+            Assert.assertEquals(ssa_transformed_interpreted, jvm_interpreted);\n@@ -161,1 +129,0 @@\n-\n@@ -187,1 +154,0 @@\n-\n@@ -192,9 +158,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n-\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -202,2 +160,0 @@\n-\n-        System.out.println(\"Post SSA\");\n@@ -205,29 +161,0 @@\n-\n-        return lf;\n-    }\n-\n-\n-    static MethodHandle generateBytecode(CoreOp.FuncOp f) {\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n-\n-        lf = SSA.transform(lf);\n-        return BytecodeGenerator.generate(MethodHandles.lookup(), lf);\n-    }\n-\n-    static CoreOp.FuncOp lower(CoreOp.FuncOp f) {\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n-\n@@ -235,1 +162,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestStringConcatTransform.java","additions":14,"deletions":88,"binary":false,"changes":102,"status":"modified"}]}