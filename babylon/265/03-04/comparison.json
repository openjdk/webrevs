{"files":[{"patch":"@@ -3162,12 +3162,12 @@\n-                if (isNarrowingPrimitiveConv(s, t)) {\n-                    MethodRef mref = convMethodRef(s, t);\n-                    p = currentBlock.op(invoke(mref, target));\n-                    c = CoreOp.conv(targetType, target);\n-                } else if (isWideningPrimitiveConv(s, t)) {\n-                    boolean needsCheck;\n-                    needsCheck = INT.equals(s) && FLOAT.equals(t);\n-                    needsCheck = needsCheck || (LONG.equals(s) && FLOAT.equals(t));\n-                    needsCheck = needsCheck || (LONG.equals(s) && DOUBLE.equals(t));\n-                    if (needsCheck) {\n-                        MethodRef mref = convMethodRef(s, t);\n-                        p = currentBlock.op(invoke(mref, target));\n+                if (t instanceof PrimitiveType pt) {\n+                    if (s instanceof ClassType cs) {\n+                        \/\/ unboxing conversions\n+                        ClassType box;\n+                        if (cs.unbox().isEmpty()) { \/\/ s not a boxed type\n+                            box = pt.box().orElseThrow();\n+                            p = currentBlock.op(CoreOp.instanceOf(box, target));\n+                        } else {\n+                            box = cs;\n+                            p = currentBlock.op(constant(BOOLEAN, true));\n+                        }\n+                        c = invoke(MethodRef.method(box, t + \"Value\", t), target);\n@@ -3175,1 +3175,9 @@\n-                        p = currentBlock.op(constant(BOOLEAN, true));\n+                        \/\/ primitive to primitive conversion\n+                        if (isNarrowingPrimitiveConv(s, t) || isWideningPrimitiveConvThatNeedCheck(s, t)\n+                                || (BYTE.equals(s) && CHAR.equals(t))) {\n+                            MethodRef mref = convMethodRef(s, t);\n+                            p = currentBlock.op(invoke(mref, target));\n+                        } else {\n+                            p = currentBlock.op(constant(BOOLEAN, true));\n+                        }\n+                        c = CoreOp.conv(targetType, target);\n@@ -3177,18 +3185,0 @@\n-                    c = CoreOp.conv(targetType, target);\n-                } else if (isIdentityPrimitiveConv(s, t)) {\n-                    p = currentBlock.op(constant(BOOLEAN, true));\n-                    c = CoreOp.conv(targetType, target);\n-                } else if (BYTE.equals(s) && CHAR.equals(t)) {\n-                    MethodRef mref = convMethodRef(s, t);\n-                    p = currentBlock.op(invoke(mref, target));\n-                    c = CoreOp.conv(targetType, target);\n-                } else if (isNarrowingRefConvFollowedByUnboxing(s, t)) {\n-                    ClassType box = ((PrimitiveType) t).box().orElseThrow();\n-                    p = currentBlock.op(CoreOp.instanceOf(box, target));\n-                    c = invoke(MethodRef.method(box, t + \"Value\", t), target);\n-                } else if (isUnboxing(s, t)) {\n-                    p = currentBlock.op(CoreOp.constant(BOOLEAN, true));\n-                    c = invoke(MethodRef.method(s, t + \"Value\", t), target);\n-                } else if (isUnboxingFollowedByPrimitiveWidening(s, t)) {\n-                    p = currentBlock.op(CoreOp.constant(BOOLEAN, true));\n-                    c = invoke(MethodRef.method(s, t + \"Value\", t), target);\n@@ -3211,15 +3201,4 @@\n-            private static boolean isUnboxingFollowedByPrimitiveWidening(TypeElement s, TypeElement t) {\n-                return s instanceof ClassType ct && ct.unbox().isPresent() && t instanceof PrimitiveType pt &&\n-                        !pt.box().orElseThrow().equals(s);\n-            }\n-\n-            private static boolean isNarrowingRefConvFollowedByUnboxing(TypeElement s, TypeElement t) {\n-                return s instanceof ClassType ct && ct.unbox().isEmpty() && t instanceof PrimitiveType;\n-            }\n-\n-            private static boolean isUnboxing(TypeElement s, TypeElement t) {\n-                return s instanceof ClassType && t instanceof PrimitiveType pt && pt.box().orElseThrow().equals(s);\n-            }\n-\n-            private static boolean isIdentityPrimitiveConv(TypeElement s, TypeElement t) {\n-                return s instanceof PrimitiveType && t instanceof PrimitiveType && Objects.equals(s, t);\n+            private static boolean isWideningPrimitiveConvThatNeedCheck(TypeElement s, TypeElement t) {\n+                return (INT.equals(s) && FLOAT.equals(t))\n+                        || (LONG.equals(s) && FLOAT.equals(t))\n+                        || (LONG.equals(s) && DOUBLE.equals(t));\n@@ -3228,8 +3207,2 @@\n-            private static boolean isWideningPrimitiveConv(TypeElement s, TypeElement t) {\n-                if (!(s instanceof PrimitiveType) || !(t instanceof PrimitiveType)) {\n-                    return false;\n-                }\n-                if (BYTE.equals(s) && CHAR.equals(t)) {\n-                    return false;\n-                }\n-                if (SHORT.equals(s) && CHAR.equals(t)) {\n+            private static boolean isNarrowingPrimitiveConv(TypeElement s, TypeElement t) { \/\/ s -> t\n+                if (!(s instanceof PrimitiveType sp) || !(t instanceof PrimitiveType tp)) {\n@@ -3241,1 +3214,1 @@\n-                return si < ti;\n+                return ti < si || (SHORT.equals(s) && CHAR.equals(t));\n@@ -3255,10 +3228,0 @@\n-            private static boolean isNarrowingPrimitiveConv(TypeElement s, TypeElement t) { \/\/ s -> t\n-                if (!(s instanceof PrimitiveType sp) || !(t instanceof PrimitiveType tp)) {\n-                    return false;\n-                }\n-                List<PrimitiveType> l = List.of(BYTE, SHORT, CHAR, INT, LONG, FLOAT, DOUBLE);\n-                int si = l.indexOf(s);\n-                int ti = l.indexOf(t);\n-                return ti < si || (SHORT.equals(s) && CHAR.equals(t));\n-            }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":28,"deletions":65,"binary":false,"changes":93,"status":"modified"}]}