{"files":[{"patch":"@@ -3166,3 +3166,11 @@\n-                } else if (isWideningPrimitiveConvAndNeedsCheck(s, t)) {\n-                    MethodRef mref = convMethodRef(s, t);\n-                    p = currentBlock.op(invoke(mref, target));\n+                } else if (isWideningPrimitiveConv(s, t)) {\n+                    boolean needsCheck;\n+                    needsCheck = INT.equals(s) && FLOAT.equals(t);\n+                    needsCheck = needsCheck || (LONG.equals(s) && FLOAT.equals(t));\n+                    needsCheck = needsCheck || (LONG.equals(s) && DOUBLE.equals(t));\n+                    if (needsCheck) {\n+                        MethodRef mref = convMethodRef(s, t);\n+                        p = currentBlock.op(invoke(mref, target));\n+                    } else {\n+                        p = currentBlock.op(constant(BOOLEAN, true));\n+                    }\n@@ -3220,4 +3228,14 @@\n-            private static boolean isWideningPrimitiveConvAndNeedsCheck(TypeElement s, TypeElement t) {\n-                return (INT.equals(s) && FLOAT.equals(t)) ||\n-                        (LONG.equals(s) && FLOAT.equals(t)) ||\n-                        (LONG.equals(s) && DOUBLE.equals(t));\n+            private static boolean isWideningPrimitiveConv(TypeElement s, TypeElement t) {\n+                if (!(s instanceof PrimitiveType) || !(t instanceof PrimitiveType)) {\n+                    return false;\n+                }\n+                if (BYTE.equals(s) && CHAR.equals(t)) {\n+                    return false;\n+                }\n+                if (SHORT.equals(s) && CHAR.equals(t)) {\n+                    return false;\n+                }\n+                List<PrimitiveType> l = List.of(BYTE, SHORT, CHAR, INT, LONG, FLOAT, DOUBLE);\n+                int si = l.indexOf(s);\n+                int ti = l.indexOf(t);\n+                return si < ti;\n@@ -3225,0 +3243,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -341,0 +341,17 @@\n+    @CodeReflection\n+    static boolean wp(int i) {\n+        return i instanceof long _;\n+    }\n+\n+    @Test\n+    void test_wp() {\n+        FuncOp f = getFuncOp(\"wp\");\n+        f.writeTo(System.out);\n+\n+        FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n+        lf.writeTo(System.out);\n+\n+        Assert.assertEquals(Interpreter.invoke(lf, Integer.MAX_VALUE), true);\n+        Assert.assertEquals(Interpreter.invoke(lf, Integer.MIN_VALUE), true);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}