{"files":[{"patch":"@@ -3155,2 +3155,0 @@\n-                Block.Builder nextBlock = currentBlock.block();\n-\n@@ -3158,1 +3156,1 @@\n-                Result p; \/\/ result of the type check\n+                Op p = null; \/\/ op that perform type check\n@@ -3168,1 +3166,1 @@\n-                            p = currentBlock.op(CoreOp.instanceOf(box, target));\n+                            p = CoreOp.instanceOf(box, target);\n@@ -3171,1 +3169,0 @@\n-                            p = currentBlock.op(constant(BOOLEAN, true));\n@@ -3178,0 +3175,2 @@\n+                        PrimitiveType ps = ((PrimitiveType) s);\n+                        if (isNarrowingPrimitiveConv(ps, pt) || isWideningPrimitiveConvThatNeedCheck(s, t)\n@@ -3179,3 +3178,1 @@\n-                            p = currentBlock.op(invoke(mref, target));\n-                        } else {\n-                            p = currentBlock.op(constant(BOOLEAN, true));\n+                            p = invoke(mref, target);\n@@ -3186,1 +3183,1 @@\n-                    p = currentBlock.op(CoreOp.instanceOf(targetType, target));\n+                    p = CoreOp.instanceOf(targetType, target);\n@@ -3190,3 +3187,5 @@\n-                currentBlock.op(conditionalBranch(p, nextBlock.successor(), endNoMatchBlock.successor()));\n-\n-                currentBlock = nextBlock;\n+                if (p != null) {\n+                    Block.Builder nextBlock = currentBlock.block();\n+                    currentBlock.op(conditionalBranch(currentBlock.op(p), nextBlock.successor(), endNoMatchBlock.successor()));\n+                    currentBlock = nextBlock;\n+                }\n@@ -3207,8 +3206,12 @@\n-            private static boolean isNarrowingPrimitiveConv(TypeElement s, TypeElement t) { \/\/ s -> t\n-                if (!(s instanceof PrimitiveType sp) || !(t instanceof PrimitiveType tp)) {\n-                    return false;\n-                }\n-                List<PrimitiveType> l = List.of(BYTE, SHORT, CHAR, INT, LONG, FLOAT, DOUBLE);\n-                int si = l.indexOf(s);\n-                int ti = l.indexOf(t);\n-                return ti < si || (SHORT.equals(s) && CHAR.equals(t));\n+            \/\/ s -> t is narrowing if order(t) <= order(s)\n+            private final static Map<PrimitiveType, Integer> narrowingOrder = Map.of(\n+                    BYTE, 1,\n+                    SHORT, 2,\n+                    CHAR, 2,\n+                    INT, 3,\n+                    LONG, 4,\n+                    FLOAT, 5,\n+                    DOUBLE, 6\n+            );\n+            private static boolean isNarrowingPrimitiveConv(PrimitiveType s, PrimitiveType t) {\n+                return narrowingOrder.get(t) <= narrowingOrder.get(s);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"}]}