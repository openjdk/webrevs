{"files":[{"patch":"@@ -47,2 +47,0 @@\n-    static final String PACKAGE_NAME = CodeReflection.class.getPackageName();\n-\n@@ -350,4 +348,1 @@\n-        \/\/ Type name must be the same in the java.base and jdk.compiler module\n-        static final String Quoted_CLASS_NAME = PACKAGE_NAME +\n-                \".\" + Quoted.class.getSimpleName();\n-        public static final JavaType QUOTED_TYPE = JavaType.type(ClassDesc.of(Quoted_CLASS_NAME));\n+        public static final JavaType QUOTED_TYPE = JavaType.type(Quoted.class);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,4 +64,0 @@\n-    static final String PACKAGE_NAME = JavaOp.class.getPackageName();\n-\n-    static final String JavaOp_CLASS_NAME = PACKAGE_NAME + \".\" + JavaOp.class.getSimpleName();\n-\n@@ -4773,2 +4769,0 @@\n-    static final String Pattern_CLASS_NAME = JavaOp_CLASS_NAME + \"$\" + Pattern.class.getSimpleName();\n-\n@@ -4810,4 +4804,3 @@\n-        JavaType PATTERN_BINDING_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n-                \"$\" + Type.class.getSimpleName()));\n-        JavaType PATTERN_RECORD_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n-                \"$\" + Pattern.Record.class.getSimpleName()));\n+        JavaType PATTERN_BINDING_TYPE = JavaType.type(Type.class);\n+\n+        JavaType PATTERN_RECORD_TYPE = JavaType.type(Record.class);\n@@ -4815,2 +4808,1 @@\n-        JavaType PATTERN_MATCH_ALL_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n-                \"$\" + Pattern.MatchAll.class.getSimpleName()));\n+        JavaType PATTERN_MATCH_ALL_TYPE = JavaType.type(MatchAll.class);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-\/*__return MethodHandles.lookup().unreflect(method);__*\/                return MethodHandles.publicLookup().unreflect(method);\n+                return MethodHandles.publicLookup().unreflect(method);\n@@ -197,1 +197,1 @@\n-\/*__return MethodHandles.lookup().unreflectConstructor(constructor);__*\/            return MethodHandles.publicLookup().unreflectConstructor(constructor);\n+            return MethodHandles.publicLookup().unreflectConstructor(constructor);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-\/\/ @@@ We cannot link to OpParser since this code is copied into the jdk.compiler module\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpWriter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}