{"files":[{"patch":"@@ -13,0 +13,2 @@\n+Download the `.data` file from [emotion-ferplus-8.onnx.data](https:\/\/github.com\/ammbra\/fer-model-weights\/raw\/refs\/heads\/main\/emotion-ferplus-8.onnx.data) and place it under `cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fer` folder.\n+\n@@ -32,1 +34,1 @@\n-Inside `cr-examples\/onnx` project you will find the `setup.sh` script that takes as argument the path to your cloned `onnxruntime` and uses `jextract` to regenerate the binaries.\n+Inside `cr-examples\/onnx\/opgen` project you will find the `setup.sh` script that takes as argument the path to your cloned `onnxruntime` and uses `jextract` to regenerate the binaries.\n","filename":"cr-examples\/onnx\/README.md","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+#!\/bin\/bash\n+\n+# Check if the search path is provided\n+if [ -z \"$1\" ]; then\n+    echo \"Please provide the path to search for libonnxruntime.*.dylib\"\n+    exit 1\n+fi\n+\n+# Search for libonnxruntime.dylib in the given path\n+LIB_PATH=\"$(find \"$1\" -name libonnxruntime.*.dylib -print -quit)\"\n+\n+if [ -z \"$LIB_PATH\" ]; then\n+    echo \"libonnxruntime.*.dylib not found in $1\"\n+    exit 1\n+fi\n+\n+# Infer other paths based on the location of libonnxruntime.*.dylib\n+ONNXRT_DIR=$(dirname $(dirname $(dirname $(dirname $LIB_PATH))))\n+INCLUDE_DIR=$ONNXRT_DIR\/include\/onnxruntime\n+OUTPUT_DIR=..\/src\/main\/java\n+\n+# Run jextract\n+jextract --target-package oracle.code.onnx.foreign \\\n+  -l :$LIB_PATH \\\n+  --use-system-load-library \\\n+  -I $INCLUDE_DIR\/core\/session \\\n+  @symbols \\\n+  --output $OUTPUT_DIR \\\n+  $INCLUDE_DIR\/core\/providers\/coreml\/coreml_provider_factory.h\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/opgen\/setup.sh","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"","filename":"cr-examples\/onnx\/opgen\/symbols","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"cr-examples\/onnx\/symbols","status":"renamed"},{"patch":"@@ -1,29 +0,0 @@\n-#!\/bin\/bash\n-\n-# Check if the search path is provided\n-if [ -z \"$1\" ]; then\n-    echo \"Please provide the path to search for libonnxruntime.*.dylib\"\n-    exit 1\n-fi\n-\n-# Search for libonnxruntime.dylib in the given path\n-LIB_PATH=\"$(find \"$1\" -name libonnxruntime.*.dylib -print -quit)\"\n-\n-if [ -z \"$LIB_PATH\" ]; then\n-    echo \"libonnxruntime.*.dylib not found in $1\"\n-    exit 1\n-fi\n-\n-# Infer other paths based on the location of libonnxruntime.*.dylib\n-ONNXRT_DIR=$(dirname $(dirname $(dirname $(dirname $LIB_PATH))))\n-INCLUDE_DIR=$ONNXRT_DIR\/include\/onnxruntime\n-OUTPUT_DIR=src\/main\/java\n-\n-# Run jextract\n-jextract --target-package oracle.code.onnx.coreml.foreign \\\n-  -l :$LIB_PATH \\\n-  --use-system-load-library \\\n-  -I $INCLUDE_DIR\/core\/session \\\n-  @symbols \\\n-  --output $OUTPUT_DIR \\\n-  $INCLUDE_DIR\/core\/providers\/coreml\/coreml_provider_factory.h\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/setup.sh","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -122,12 +122,0 @@\n-        SessionWithReturnType computeIfAbsent(Class<?> lambdaClass, MethodHandles.Lookup l,  Quoted q) {\n-            try {\n-                this.l = l;\n-                this.q = q;\n-                \/\/ not very nice way to pass additional arguments to computeValue method\n-                return get(lambdaClass);\n-            } finally {\n-                this.l = null;\n-                this.q = null;\n-            }\n-        }\n-\n@@ -135,1 +123,1 @@\n-        protected SessionWithReturnType computeWithOptionsIfAbsent(\n+        protected SessionWithReturnType computeIfAbsent(\n@@ -214,28 +202,1 @@\n-        var q = Op.ofQuotable(codeLambda).orElseThrow();\n-\n-        var model = SESSION_CACHE.computeIfAbsent(codeLambda.getClass(), l, q);\n-\n-        List<Tensor> arguments = q.capturedValues().sequencedValues().stream()\n-                .mapMulti(OnnxRuntime::expandArg)\n-                .toList();\n-        List<Tensor> ret = model.session().run(arena, arguments);\n-\n-        var lambdaOp = ((JavaOp.LambdaOp)q.op());\n-        TypeElement type = lambdaOp.invokableType().returnType();\n-        if (type instanceof ArrayType) {\n-            return (T)ret.toArray(Tensor[]::new);\n-        }\n-        ClassType retType = ((ClassType)type).rawType();\n-        if (retType.equals(TENSOR_RAW_TYPE)) {\n-            return (T)ret.getFirst();\n-        } else if(retType.equals(LIST_RAW_TYPE)) {\n-            return (T)ret;\n-        } else if(getRecordClass(l, retType) instanceof Class cls) {\n-            try {\n-                return (T)cls.getConstructors()[0].newInstance(unflat(ret, (TupleType)model.returnType()));\n-            } catch (ReflectiveOperationException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            throw new UnsupportedOperationException(\"Unsupported return type: \" + q.op().resultType());\n-        }\n+        return execute(arena, l, codeLambda, null);\n@@ -244,1 +205,1 @@\n-    public static <T> T executeWithOptions(Arena arena, MethodHandles.Lookup l, OnnxFunction<T> codeLambda, SessionOptions options) {\n+    public static <T> T execute(Arena arena, MethodHandles.Lookup l, OnnxFunction<T> codeLambda, SessionOptions options) {\n@@ -247,1 +208,1 @@\n-        SessionWithReturnType cached = SESSION_CACHE.computeWithOptionsIfAbsent(codeLambda.getClass(), l, q, options);\n+        var model = SESSION_CACHE.computeIfAbsent(codeLambda.getClass(), l, q, options);\n@@ -252,1 +213,1 @@\n-        List<Tensor> ret = cached.session().run(arena, arguments);\n+        List<Tensor> ret = model.session().run(arena, arguments);\n@@ -266,1 +227,1 @@\n-                return (T) cls.getConstructors()[0].newInstance(unflat(ret, (TupleType) cached.returnType()));\n+                return (T) cls.getConstructors()[0].newInstance(unflat(ret, (TupleType) model.returnType()));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":6,"deletions":45,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -36,0 +36,6 @@\n+    private int flag;\n+\n+    public CoreMLProvider(int flag) {\n+        this.flag = flag;\n+    }\n+\n@@ -41,2 +47,1 @@\n-            int coremlFlag = COREML_FLAG_USE_CPU_AND_GPU();\n-            var status = OrtSessionOptionsAppendExecutionProvider_CoreML(sessionOptionsAddress, coremlFlag);\n+            var status = OrtSessionOptionsAppendExecutionProvider_CoreML(sessionOptionsAddress, flag);\n@@ -48,0 +53,1 @@\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/provider\/CoreMLProvider.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+import static oracle.code.onnx.foreign.coreml_provider_factory_h.*;\n+\n@@ -199,1 +201,2 @@\n-                float[] probs = inference.analyzeImage(arena, new CoreMLProvider(), url, useCondensedModel);\n+                CoreMLProvider provider = new CoreMLProvider(COREML_FLAG_USE_CPU_AND_GPU());\n+                float[] probs = inference.analyzeImage(arena, provider, url, useCondensedModel);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERCoreMLDemo.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        float[] rawScores = ferModel.classify(arena, imageData, sessionOptions, useCondensedModel);\n+        float[] rawScores = ferModel.classify(imageData, sessionOptions, useCondensedModel);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERInference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,3 @@\n-    \/\/ Weights and biases (constant inputs)\n+\tprivate final Arena arena;\n+\n+\t\/\/ Weights and biases (constant inputs)\n@@ -77,1 +79,2 @@\n-    public FERModel(Arena arena) throws IOException {\n+\tpublic FERModel(Arena arena) throws IOException {\n+\t\tthis.arena = arena;\n@@ -265,2 +268,2 @@\n-    public float[] classify(Arena inferenceArena, float[] imageData, OnnxRuntime.SessionOptions options, boolean isCondensed) {\n-        var imageTensor = Tensor.ofShape(inferenceArena, new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+    public float[] classify(float[] imageData, OnnxRuntime.SessionOptions options, boolean isCondensed) {\n+        var imageTensor = Tensor.ofShape(arena, new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n@@ -269,1 +272,1 @@\n-            predictionTensor = OnnxRuntime.executeWithOptions(inferenceArena, MethodHandles.lookup(),\n+            predictionTensor = OnnxRuntime.execute(arena, MethodHandles.lookup(),\n@@ -272,1 +275,1 @@\n-            predictionTensor = OnnxRuntime.executeWithOptions(inferenceArena, MethodHandles.lookup(),\n+            predictionTensor = OnnxRuntime.execute(arena, MethodHandles.lookup(),\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERModel.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fer\/emotion-ferplus-8.onnx.data","binary":true,"status":"deleted"}]}