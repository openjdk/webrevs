{"files":[{"patch":"@@ -11,0 +11,35 @@\n+### ONNX Runtime with CoreML running facial emotion recognition from Java source.\n+\n+Download the `.data` file from [emotion-ferplus-8.onnx.data](https:\/\/github.com\/ammbra\/fer-model-weights\/raw\/refs\/heads\/main\/emotion-ferplus-8.onnx.data) and place it under `cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fer` folder.\n+\n+Running the FER demo:\n+```\n+JAVA_HOME=<path to the Babylon JDK home>\n+mvn process-test-classes exec:java -Dexec.mainClass=oracle.code.onnx.fer.FERCoreMLDemo\n+```\n+\n+#### How to (Re)Generate the CoreML Java Bindings\n+\n+The following instructions are for Mac users only as the CoreML Execution Provider (EP) requires iOS devices with iOS 13 or higher, or Mac computers with macOS 10.15 or higher.\n+Build and install custom ONNX Runtime with CoreML enabled:\n+\n+```\n+git clone --recursive https:\/\/github.com\/microsoft\/onnxruntime.git\n+cd onnxruntime\n+.\/build.sh --config Release --build_shared_lib --use_coreml --parallel\n+# get the path to where current built library is available\n+pwd\n+```\n+\n+Inside `cr-examples\/onnx\/opgen` project you will find the `setup.sh` script that takes as argument the path to your cloned `onnxruntime` and uses `jextract` to regenerate the binaries.\n+Prior to running it make sure that `jextract` is in your system `$PATH` :\n+\n+```shell\n+jextract --version\n+```\n+Provide the path to your cloned `onnxruntime` and the script will regenerate the CoreML Java bindings inside the `oracle.code.onnx.foreign`:\n+\n+```\n+sh setup.sh path\/to\/cloned\/onnxruntime\n+```\n+\n@@ -14,2 +49,2 @@\n- - Download [onnxruntime-genai](https:\/\/github.com\/microsoft\/onnxruntime-genai\/releases) native library coresponding to your system\/architecture, unzip and put it into `cr-examples\/onnx\/lib` folder.\n- - Download `model.onnx.data`, `tokenizer.json` and `tokenizer_config.json` data files from [Llama-3.2-1B-Instruct-ONNX](https:\/\/huggingface.co\/onnx-community\/Llama-3.2-1B-Instruct-ONNX\/tree\/main\/cpu_and_mobile\/cpu-int4-rtn-block-32-acc-level-4) and put them into `cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/llm` folder.\n+- Download [onnxruntime-genai](https:\/\/github.com\/microsoft\/onnxruntime-genai\/releases) native library coresponding to your system\/architecture, unzip and put it into `cr-examples\/onnx\/lib` folder.\n+- Download `model.onnx.data`, `tokenizer.json` and `tokenizer_config.json` data files from [Llama-3.2-1B-Instruct-ONNX](https:\/\/huggingface.co\/onnx-community\/Llama-3.2-1B-Instruct-ONNX\/tree\/main\/cpu_and_mobile\/cpu-int4-rtn-block-32-acc-level-4) and put them into `cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/llm` folder.\n@@ -21,2 +56,1 @@\n-```\n-\n+```\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/README.md","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+#!\/bin\/bash\n+\n+# Check if the search path is provided\n+if [ -z \"$1\" ]; then\n+    echo \"Please provide the path to search for libonnxruntime.*.dylib\"\n+    exit 1\n+fi\n+\n+# Search for libonnxruntime.dylib in the given path\n+LIB_PATH=\"$(find \"$1\" -name libonnxruntime.*.dylib -print -quit)\"\n+\n+if [ -z \"$LIB_PATH\" ]; then\n+    echo \"libonnxruntime.*.dylib not found in $1\"\n+    exit 1\n+fi\n+\n+# Infer other paths based on the location of libonnxruntime.*.dylib\n+ONNXRT_DIR=$(dirname $(dirname $(dirname $(dirname $LIB_PATH))))\n+INCLUDE_DIR=$ONNXRT_DIR\/include\/onnxruntime\n+OUTPUT_DIR=..\/src\/main\/java\n+\n+# Run jextract\n+jextract --target-package oracle.code.onnx.foreign \\\n+  -l :$LIB_PATH \\\n+  --use-system-load-library \\\n+  -I $INCLUDE_DIR\/core\/session \\\n+  @symbols \\\n+  --output $OUTPUT_DIR \\\n+  $INCLUDE_DIR\/core\/providers\/coreml\/coreml_provider_factory.h\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/opgen\/setup.sh","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+#### Extracted from: \/onnxruntime\/include\/onnxruntime\/core\/providers\/coreml\/coreml_provider_factory.h\n+\n+--include-constant COREML_FLAG_CREATE_MLPROGRAM\n+--include-constant COREML_FLAG_ENABLE_ON_SUBGRAPH\n+--include-constant COREML_FLAG_LAST\n+--include-constant COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES\n+--include-constant COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE\n+--include-constant COREML_FLAG_USE_CPU_AND_GPU\n+--include-constant COREML_FLAG_USE_CPU_ONLY\n+--include-constant COREML_FLAG_USE_NONE\n+--include-function OrtSessionOptionsAppendExecutionProvider_CoreML\n+\n+#### Extracted from: \/jextract-22\/runtime\/conf\/jextract\/stdbool.h\n+\n+--include-constant __bool_true_false_are_defined\n+--include-constant false\n+--include-constant true\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/opgen\/symbols","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Optional;\n@@ -422,0 +421,4 @@\n+            case String s -> {\n+                attr.type(AttributeType.STRING);\n+                attr.s(s.getBytes());\n+            }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            Files.copy(libStream, libFilePath, StandardCopyOption.REPLACE_EXISTING);\n+            Files.copy(Objects.requireNonNull(libStream), libFilePath, StandardCopyOption.REPLACE_EXISTING);\n@@ -120,0 +120,1 @@\n+        private SessionOptions options;\n@@ -121,1 +122,3 @@\n-        SessionWithReturnType computeIfAbsent(Class<?> lambdaClass, MethodHandles.Lookup l,  Quoted q) {\n+        \/\/ Static helper for cache with options\n+        protected SessionWithReturnType computeIfAbsent(\n+                Class<?> lambdaClass, MethodHandles.Lookup l, Quoted q, SessionOptions options) {\n@@ -125,0 +128,1 @@\n+                this.options = options;\n@@ -130,0 +134,1 @@\n+                this.options = null;\n@@ -150,0 +155,5 @@\n+            \/\/ cached session must be created under its own auto arena\n+            Session session = (options != null) ?\n+                    getInstance().createSession(Arena.ofAuto(), protobufModel, options) :\n+                    getInstance().createSession(Arena.ofAuto(), protobufModel);\n+\n@@ -151,3 +161,1 @@\n-                    getInstance().createSession(\n-                            Arena.ofAuto(), \/\/ cached session must be created under its own auto arena\n-                            protobufModel),\n+                    session,\n@@ -156,0 +164,1 @@\n+\n@@ -193,0 +202,4 @@\n+        return execute(arena, l, codeLambda, null);\n+    }\n+\n+    public static <T> T execute(Arena arena, MethodHandles.Lookup l, OnnxFunction<T> codeLambda, SessionOptions options) {\n@@ -195,1 +208,1 @@\n-        var model = SESSION_CACHE.computeIfAbsent(codeLambda.getClass(), l, q);\n+        var model = SESSION_CACHE.computeIfAbsent(codeLambda.getClass(), l, q, options);\n@@ -205,1 +218,1 @@\n-            return (T)ret.toArray(Tensor[]::new);\n+            return (T) ret.toArray(Tensor[]::new);\n@@ -207,1 +220,1 @@\n-        ClassType retType = ((ClassType)type).rawType();\n+        ClassType retType = ((ClassType) type).rawType();\n@@ -209,4 +222,4 @@\n-            return (T)ret.getFirst();\n-        } else if(retType.equals(LIST_RAW_TYPE)) {\n-            return (T)ret;\n-        } else if(getRecordClass(l, retType) instanceof Class cls) {\n+            return (T) ret.getFirst();\n+        } else if (retType.equals(LIST_RAW_TYPE)) {\n+            return (T) ret;\n+        } else if (getRecordClass(l, retType) instanceof Class cls) {\n@@ -214,1 +227,1 @@\n-                return (T)cls.getConstructors()[0].newInstance(unflat(ret, (TupleType)model.returnType()));\n+                return (T) cls.getConstructors()[0].newInstance(unflat(ret, (TupleType) model.returnType()));\n@@ -441,0 +454,4 @@\n+\n+        public MemorySegment getSessionOptionsAddress() {\n+            return sessionOptionsAddress;\n+        }\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":30,"deletions":13,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -0,0 +1,226 @@\n+\/\/ Generated by jextract\n+\n+package oracle.code.onnx.foreign;\n+\n+import java.lang.invoke.*;\n+import java.lang.foreign.*;\n+import java.util.*;\n+import java.util.stream.*;\n+\n+import static java.lang.foreign.ValueLayout.*;\n+\n+public class coreml_provider_factory_h {\n+\n+    coreml_provider_factory_h() {\n+        \/\/ Should not be called directly\n+    }\n+\n+    static final Arena LIBRARY_ARENA = Arena.ofAuto();\n+    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean(\"jextract.trace.downcalls\");\n+\n+    static void traceDowncall(String name, Object... args) {\n+         String traceArgs = Arrays.stream(args)\n+                       .map(Object::toString)\n+                       .collect(Collectors.joining(\", \"));\n+         System.out.printf(\"%s(%s)\\n\", name, traceArgs);\n+    }\n+\n+    static MemorySegment findOrThrow(String symbol) {\n+        return SYMBOL_LOOKUP.find(symbol)\n+            .orElseThrow(() -> new UnsatisfiedLinkError(\"unresolved symbol: \" + symbol));\n+    }\n+\n+    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n+        try {\n+            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());\n+        } catch (ReflectiveOperationException ex) {\n+            throw new AssertionError(ex);\n+        }\n+    }\n+\n+    static MemoryLayout align(MemoryLayout layout, long align) {\n+        return switch (layout) {\n+            case PaddingLayout p -> p;\n+            case ValueLayout v -> v.withByteAlignment(align);\n+            case GroupLayout g -> {\n+                MemoryLayout[] alignedMembers = g.memberLayouts().stream()\n+                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);\n+                yield g instanceof StructLayout ?\n+                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);\n+            }\n+            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));\n+        };\n+    }\n+\n+    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup();\n+\n+    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;\n+    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;\n+    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;\n+    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;\n+    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;\n+    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS\n+            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));\n+    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;\n+    private static final int true_ = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * #define true 1\n+     * }\n+     *\/\n+    public static int true_() {\n+        return true_;\n+    }\n+    private static final int false_ = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * #define false 0\n+     * }\n+     *\/\n+    public static int false_() {\n+        return false_;\n+    }\n+    private static final int __bool_true_false_are_defined = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * #define __bool_true_false_are_defined 1\n+     * }\n+     *\/\n+    public static int __bool_true_false_are_defined() {\n+        return __bool_true_false_are_defined;\n+    }\n+    private static final int COREML_FLAG_USE_NONE = (int)0L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_USE_NONE = 0\n+     * }\n+     *\/\n+    public static int COREML_FLAG_USE_NONE() {\n+        return COREML_FLAG_USE_NONE;\n+    }\n+    private static final int COREML_FLAG_USE_CPU_ONLY = (int)1L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_USE_CPU_ONLY = 1\n+     * }\n+     *\/\n+    public static int COREML_FLAG_USE_CPU_ONLY() {\n+        return COREML_FLAG_USE_CPU_ONLY;\n+    }\n+    private static final int COREML_FLAG_ENABLE_ON_SUBGRAPH = (int)2L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_ENABLE_ON_SUBGRAPH = 2\n+     * }\n+     *\/\n+    public static int COREML_FLAG_ENABLE_ON_SUBGRAPH() {\n+        return COREML_FLAG_ENABLE_ON_SUBGRAPH;\n+    }\n+    private static final int COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = (int)4L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 4\n+     * }\n+     *\/\n+    public static int COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE() {\n+        return COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE;\n+    }\n+    private static final int COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = (int)8L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 8\n+     * }\n+     *\/\n+    public static int COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES() {\n+        return COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES;\n+    }\n+    private static final int COREML_FLAG_CREATE_MLPROGRAM = (int)16L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_CREATE_MLPROGRAM = 16\n+     * }\n+     *\/\n+    public static int COREML_FLAG_CREATE_MLPROGRAM() {\n+        return COREML_FLAG_CREATE_MLPROGRAM;\n+    }\n+    private static final int COREML_FLAG_USE_CPU_AND_GPU = (int)32L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_USE_CPU_AND_GPU = 32\n+     * }\n+     *\/\n+    public static int COREML_FLAG_USE_CPU_AND_GPU() {\n+        return COREML_FLAG_USE_CPU_AND_GPU;\n+    }\n+    private static final int COREML_FLAG_LAST = (int)32L;\n+    \/**\n+     * {@snippet lang=c :\n+     * enum COREMLFlags.COREML_FLAG_LAST = 32\n+     * }\n+     *\/\n+    public static int COREML_FLAG_LAST() {\n+        return COREML_FLAG_LAST;\n+    }\n+\n+    private static class OrtSessionOptionsAppendExecutionProvider_CoreML {\n+        public static final FunctionDescriptor DESC = FunctionDescriptor.of(\n+            coreml_provider_factory_h.C_POINTER,\n+            coreml_provider_factory_h.C_POINTER,\n+            coreml_provider_factory_h.C_INT\n+        );\n+\n+        public static final MemorySegment ADDR = coreml_provider_factory_h.findOrThrow(\"OrtSessionOptionsAppendExecutionProvider_CoreML\");\n+\n+        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);\n+    }\n+\n+    \/**\n+     * Function descriptor for:\n+     * {@snippet lang=c :\n+     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)\n+     * }\n+     *\/\n+    public static FunctionDescriptor OrtSessionOptionsAppendExecutionProvider_CoreML$descriptor() {\n+        return OrtSessionOptionsAppendExecutionProvider_CoreML.DESC;\n+    }\n+\n+    \/**\n+     * Downcall method handle for:\n+     * {@snippet lang=c :\n+     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)\n+     * }\n+     *\/\n+    public static MethodHandle OrtSessionOptionsAppendExecutionProvider_CoreML$handle() {\n+        return OrtSessionOptionsAppendExecutionProvider_CoreML.HANDLE;\n+    }\n+\n+    \/**\n+     * Address for:\n+     * {@snippet lang=c :\n+     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)\n+     * }\n+     *\/\n+    public static MemorySegment OrtSessionOptionsAppendExecutionProvider_CoreML$address() {\n+        return OrtSessionOptionsAppendExecutionProvider_CoreML.ADDR;\n+    }\n+\n+    \/**\n+     * {@snippet lang=c :\n+     * OrtStatusPtr OrtSessionOptionsAppendExecutionProvider_CoreML(OrtSessionOptions *options, uint32_t coreml_flags)\n+     * }\n+     *\/\n+    public static MemorySegment OrtSessionOptionsAppendExecutionProvider_CoreML(MemorySegment options, int coreml_flags) {\n+        var mh$ = OrtSessionOptionsAppendExecutionProvider_CoreML.HANDLE;\n+        try {\n+            if (TRACE_DOWNCALLS) {\n+                traceDowncall(\"OrtSessionOptionsAppendExecutionProvider_CoreML\", options, coreml_flags);\n+            }\n+            return (MemorySegment)mh$.invokeExact(options, coreml_flags);\n+        } catch (Throwable ex$) {\n+           throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n+}\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/foreign\/coreml_provider_factory_h.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.provider;\n+\n+import oracle.code.onnx.OnnxRuntime;\n+\n+import java.util.logging.Logger;\n+import java.util.logging.Level;\n+\n+import static oracle.code.onnx.foreign.coreml_provider_factory_h.*;\n+\n+public final class CoreMLProvider implements OnnxProvider {\n+    private static final Logger logger = Logger.getLogger(CoreMLProvider.class.getName());\n+\n+    private int flags;\n+\n+    public CoreMLProvider(int flags) {\n+        this.flags = flags;\n+    }\n+\n+    @Override\n+    public void configure(OnnxRuntime.SessionOptions sessionOptions) {\n+        var sessionOptionsAddress = sessionOptions.getSessionOptionsAddress();\n+\n+        try {\n+            var status = OrtSessionOptionsAppendExecutionProvider_CoreML(sessionOptionsAddress, flags);\n+\n+            if (status == null || status.address() == 0) {\n+                logger.info(\"CoreML execution provider enabled successfully!\");\n+            } else {\n+                logger.warning(\"CoreML EP returned status: \" + status.address());\n+\n+                status = OrtSessionOptionsAppendExecutionProvider_CoreML(\n+                        sessionOptionsAddress,\n+                        COREML_FLAG_USE_CPU_ONLY());\n+                if (status == null || status.address() == 0) {\n+                    logger.info(\"CoreML execution provider enabled with CPU_ONLY fallback!\");\n+                } else {\n+                    logger.severe(\"CoreML EP failed with all flags - \" + status.address());\n+                }\n+            }\n+        } catch (UnsatisfiedLinkError e) {\n+            logger.severe(\"CoreML execution provider is not available in the native ONNX Runtime library\");\n+            throw new RuntimeException(\"CoreML execution provider is not available in the native ONNX Runtime library (symbol missing).\", e);\n+        } catch (Throwable t) {\n+            logger.log(Level.SEVERE, \"Unexpected error while enabling CoreML EP: \" + t.getMessage(), t);\n+            throw new RuntimeException(\"Unexpected error while enabling CoreML EP: \" + t.getMessage(), t);\n+        }\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/provider\/CoreMLProvider.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.provider;\n+\n+import oracle.code.onnx.OnnxRuntime;\n+\n+public sealed interface OnnxProvider permits CoreMLProvider {\n+    void configure(OnnxRuntime.SessionOptions sessionOptions);\n+}\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/provider\/OnnxProvider.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,258 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.fer;\n+\n+import oracle.code.onnx.provider.CoreMLProvider;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.lang.foreign.Arena;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.*;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.IntStream;\n+\n+import static oracle.code.onnx.foreign.coreml_provider_factory_h.*;\n+\n+public class FERCoreMLDemo {\n+\n+    static final int IMAGE_SIZE = 64;\n+    static final String[] EMOTIONS = {\n+            \"neutral\", \"happiness\", \"surprise\", \"sadness\",\n+            \"anger\", \"disgust\", \"fear\", \"contempt\"\n+    };\n+\n+    private static final Logger logger = Logger.getLogger(FERCoreMLDemo.class.getName());\n+\n+    private static final int MAX_SELECTIONS = 6;\n+    private static final int MAX_THUMBNAILS = 12;\n+    private static final String BASE_PATH = \"\/oracle\/code\/onnx\/fer\/\";\n+    private final List<URL> selectedUrls = new ArrayList<>();\n+    private final boolean useCondensedModel;\n+    private JFrame frame;\n+    private JLabel[] imageLabels;\n+    private JLabel[] resultLabels;\n+    private final FERInference inference;\n+\n+    private FERCoreMLDemo(boolean useCondensedModel) throws IOException {\n+        this.inference = new FERInference();\n+        this.useCondensedModel = useCondensedModel;\n+    }\n+\n+    public static void main(String[] args) throws IOException, URISyntaxException {\n+        boolean useArgModel = args.length > 0 && Boolean.parseBoolean(args[0]);\n+        new FERCoreMLDemo(useArgModel).buildGUI();\n+    }\n+\n+    private void buildGUI() throws IOException, URISyntaxException {\n+        frame = new JFrame(\"Facial Expression Recognition - CoreML Demo\");\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setLayout(new BorderLayout(10, 10));\n+\n+        JPanel bigPanel = new JPanel(new GridLayout(2, 3, 10, 10));\n+        imageLabels = new JLabel[MAX_SELECTIONS];\n+        resultLabels = new JLabel[MAX_SELECTIONS];\n+        for (int i = 0; i < MAX_SELECTIONS; i++) {\n+            JPanel slot = new JPanel(new BorderLayout());\n+            imageLabels[i] = new JLabel(\"Empty\", SwingConstants.CENTER);\n+            imageLabels[i].setPreferredSize(new Dimension(300, 300));\n+            imageLabels[i].setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));\n+            resultLabels[i] = new JLabel(\"\", SwingConstants.CENTER);\n+            slot.add(imageLabels[i], BorderLayout.CENTER);\n+            slot.add(resultLabels[i], BorderLayout.SOUTH);\n+            bigPanel.add(slot);\n+        }\n+\n+        JPanel thumbPanel = new JPanel(new FlowLayout());\n+        thumbPanel.setBorder(BorderFactory.createTitledBorder(\"Select memes (max 6)\"));\n+\n+        List<URL> pngUrls = loadResourcePNGs();\n+        for (int i = 0; i < Math.min(MAX_THUMBNAILS, pngUrls.size()); i++) {\n+            URL url = pngUrls.get(i);\n+            BufferedImage img = ImageIO.read(url);\n+            Image scaled = img.getScaledInstance(80, 80, Image.SCALE_SMOOTH);\n+            JLabel thumb = retrieveLabel(scaled, url, img);\n+            thumbPanel.add(thumb);\n+        }\n+\n+        JButton analyzeBtn = new JButton(\"Analyze\");\n+        JProgressBar progressBar = new JProgressBar(0, MAX_SELECTIONS);\n+        progressBar.setStringPainted(true);\n+        progressBar.setVisible(false);\n+\n+        analyzeBtn.addActionListener(_ -> {\n+            if (analyzeBtn.getText().equals(\"Analyze\")) {\n+                if (selectedUrls.isEmpty()) {\n+                    JOptionPane.showMessageDialog(frame, \"Please select at least one meme!\");\n+                    return;\n+                }\n+                analyzeSelection(progressBar, analyzeBtn);\n+            } else if (analyzeBtn.getText().equals(\"Restart\")) {\n+                restartAnalysis(analyzeBtn);\n+            }\n+        });\n+\n+        JPanel southPanel = new JPanel(new BorderLayout());\n+        southPanel.add(analyzeBtn, BorderLayout.CENTER);\n+        southPanel.add(progressBar, BorderLayout.SOUTH);\n+\n+        frame.add(thumbPanel, BorderLayout.NORTH);\n+        frame.add(bigPanel, BorderLayout.CENTER);\n+        frame.add(southPanel, BorderLayout.SOUTH);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+        frame.getRootPane().setDefaultButton(analyzeBtn);\n+    }\n+\n+    private JLabel retrieveLabel(Image scaled, URL url, BufferedImage img) {\n+        JLabel thumb = new JLabel(new ImageIcon(scaled));\n+        thumb.setBorder(BorderFactory.createLineBorder(Color.GRAY));\n+        thumb.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                if (selectedUrls.size() < MAX_SELECTIONS) {\n+                    selectedUrls.add(url);\n+                    int idx = selectedUrls.size() - 1;\n+                    imageLabels[idx].setIcon(new ImageIcon(\n+                            img.getScaledInstance(300, 300, Image.SCALE_SMOOTH)));\n+                    imageLabels[idx].setText(\"\");\n+                    resultLabels[idx].setText(\"\");\n+                    logger.info(\"Thumbnail selected: %s\".formatted(url));\n+                }\n+            }\n+        });\n+        return thumb;\n+    }\n+\n+    private List<URL> loadResourcePNGs() throws IOException, URISyntaxException {\n+        List<URL> urls = new ArrayList<>();\n+        URL dirUrl = FERCoreMLDemo.class.getResource(BASE_PATH);\n+        if (dirUrl == null) return urls;\n+\n+        if (dirUrl.getProtocol().equals(\"file\")) {\n+            Path dirPath = Paths.get(dirUrl.toURI());\n+            try (DirectoryStream<Path> stream = Files.newDirectoryStream(dirPath, \"*.png\")) {\n+                for (Path p : stream) {\n+                    urls.add(p.toUri().toURL());\n+                }\n+            }\n+        } else if (dirUrl.getProtocol().equals(\"jar\")) {\n+            String jarPath = dirUrl.getPath().substring(5, dirUrl.getPath().indexOf(\"!\"));\n+            try (FileSystem fs = FileSystems.newFileSystem(Paths.get(jarPath), (ClassLoader) null)) {\n+                Path dirPath = fs.getPath(BASE_PATH);\n+                try (DirectoryStream<Path> stream = Files.newDirectoryStream(dirPath, \"*.png\")) {\n+                    for (Path p : stream) {\n+                        urls.add(p.toUri().toURL());\n+                    }\n+                }\n+            }\n+        }\n+        urls.sort(Comparator.comparing(URL::toString));\n+        logger.info(\"Loaded %s PNG thumbnails from resources.\".formatted(urls.size()));\n+        return urls;\n+    }\n+\n+    private void analyzeSelection(JProgressBar progressBar, JButton analyzeBtn) {\n+        progressBar.setValue(0);\n+        progressBar.setMaximum(selectedUrls.size());\n+        progressBar.setVisible(true);\n+        analyzeBtn.setEnabled(false);\n+\n+        long startTime = System.nanoTime();\n+\n+        for (int i = 0; i < selectedUrls.size(); i++) {\n+            URL url = selectedUrls.get(i);\n+\n+            try (var arena = Arena.ofConfined()) {\n+                CoreMLProvider provider = new CoreMLProvider(COREML_FLAG_USE_CPU_AND_GPU());\n+                float[] probs = inference.analyzeImage(arena, provider, url, useCondensedModel);\n+                String top3 = formatTopK(probs);\n+\n+                resultLabels[i].setText(\"<html>\" + top3 + \"<\/html>\");\n+                progressBar.setValue(i + 1);\n+                progressBar.setString(\"Processed \" + (i + 1) + \"\/\" + selectedUrls.size());\n+\n+                frame.repaint();\n+            } catch (Exception ex) {\n+                logger.log(Level.SEVERE, \"Error occurred when evaluating images\", ex);\n+                resultLabels[i].setText(\"<html><span style='color:red'>Error!<\/span><\/html>\");\n+            }\n+        }\n+        long endTime = System.nanoTime();\n+        logger.info(\"Total time spent in evaluation %s ms\".formatted((endTime - startTime)\/1000000));\n+        analyzeBtn.setEnabled(true);\n+        analyzeBtn.setText(\"Restart\");\n+        progressBar.setString(\"Analysis complete!\");\n+        logger.info(\"=== FER analysis complete ===\");\n+    }\n+\n+    private void restartAnalysis(JButton analyzeBtn) {\n+        selectedUrls.clear();\n+\n+        for (int i = 0; i < MAX_SELECTIONS; i++) {\n+            imageLabels[i].setIcon(null);\n+            imageLabels[i].setText(\"Empty\");\n+            resultLabels[i].setText(\"\");\n+        }\n+\n+        analyzeBtn.setText(\"Analyze\");\n+\n+        JProgressBar progressBar = (JProgressBar) analyzeBtn.getParent().getComponent(1);\n+        progressBar.setVisible(false);\n+\n+        frame.repaint();\n+    }\n+\n+    private String formatTopK(float[] probs) {\n+        int[] idxs = topK(probs, 3);\n+        StringBuilder sb = new StringBuilder();\n+        for (int idx : idxs) {\n+            sb.append(String.format(\"%s : %.1f%%<br>\", FERCoreMLDemo.EMOTIONS[idx], probs[idx] * 100));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private int[] topK(float[] arr, int k) {\n+        return IntStream.range(0, arr.length)\n+                .boxed()\n+                .sorted((i, j) -> Float.compare(arr[j], arr[i]))\n+                .limit(k)\n+                .mapToInt(i -> i)\n+                .toArray();\n+    }\n+\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERCoreMLDemo.java","additions":258,"deletions":0,"binary":false,"changes":258,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.fer;\n+\n+import oracle.code.onnx.OnnxRuntime;\n+import oracle.code.onnx.provider.OnnxProvider;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.lang.foreign.Arena;\n+import java.net.URL;\n+import java.util.Objects;\n+\n+import static oracle.code.onnx.fer.FERCoreMLDemo.IMAGE_SIZE;\n+\n+public class FERInference {\n+\n+\n+    private final OnnxRuntime runtime;\n+\n+    public FERInference() {\n+        runtime = OnnxRuntime.getInstance();\n+    }\n+\n+    public float[] analyzeImage(Arena arena, OnnxProvider provider, URL url, boolean useCondensedModel) throws Exception {\n+        float[] imageData = transformToFloatArray(url);\n+        var sessionOptions = runtime.createSessionOptions(arena);\n+        if (Objects.nonNull(provider))\n+            provider.configure(sessionOptions);\n+        FERModel ferModel = new FERModel(arena);\n+        float[] rawScores = ferModel.classify(imageData, sessionOptions, useCondensedModel);\n+        return rawScores;\n+    }\n+\n+    private float[] transformToFloatArray(URL imgUrl) throws IOException {\n+        BufferedImage src = ImageIO.read(imgUrl);\n+        if (src == null) {\n+            throw new IOException(\"Unsupported or corrupt image: \" + imgUrl);\n+        }\n+\n+        BufferedImage graySrc = new BufferedImage(src.getWidth(), src.getHeight(), BufferedImage.TYPE_BYTE_GRAY);\n+        Graphics2D g0 = graySrc.createGraphics();\n+        g0.drawImage(src, 0, 0, null);\n+        g0.dispose();\n+\n+        BufferedImage gray = new BufferedImage(IMAGE_SIZE, IMAGE_SIZE, BufferedImage.TYPE_BYTE_GRAY);\n+        Graphics2D g = gray.createGraphics();\n+        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n+        g.drawImage(graySrc, 0, 0, IMAGE_SIZE, IMAGE_SIZE, null);\n+        g.dispose();\n+\n+        float[] data = new float[IMAGE_SIZE * IMAGE_SIZE];\n+        gray.getData().getSamples(0, 0, IMAGE_SIZE, IMAGE_SIZE, 0, data);\n+\n+        return data;\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERInference.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,281 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package oracle.code.onnx.fer;\n+\n+import jdk.incubator.code.CodeReflection;\n+import oracle.code.onnx.OnnxRuntime;\n+import oracle.code.onnx.Tensor;\n+import oracle.code.onnx.genai.TensorDataStream;\n+\n+import java.io.IOException;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandles;\n+import java.net.URL;\n+import java.util.Objects;\n+\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static oracle.code.onnx.OnnxOperators.*;\n+import static oracle.code.onnx.fer.FERCoreMLDemo.IMAGE_SIZE;\n+\n+public class FERModel {\n+\n+    private final Arena arena;\n+\n+    \/\/ Weights and biases (constant inputs)\n+    final Tensor<Float> parameter1693;\n+    final Tensor<Float> parameter1403;\n+    final Tensor<Float> parameter1367;\n+    final Tensor<Float> parameter695;\n+    final Tensor<Float> parameter675;\n+    final Tensor<Float> parameter655;\n+    final Tensor<Float> parameter615;\n+    final Tensor<Float> parameter595;\n+    final Tensor<Float> parameter575;\n+    final Tensor<Float> parameter83;\n+    final Tensor<Float> parameter63;\n+    final Tensor<Float> parameter23;\n+    final Tensor<Float> parameter3;\n+    final Tensor<Float> constant339;\n+    final Tensor<Float> constant343;\n+    final Tensor<Float> parameter4;\n+    final Tensor<Float> parameter24;\n+    final Tensor<Float> parameter64;\n+    final Tensor<Float> parameter84;\n+    final Tensor<Float> parameter576;\n+    final Tensor<Float> parameter596;\n+    final Tensor<Float> parameter616;\n+    final Tensor<Float> parameter656;\n+    final Tensor<Float> parameter676;\n+    final Tensor<Float> parameter696;\n+    final Tensor<Long> dropout612_reshape0_shape;\n+    final Tensor<Long> parameter1367_reshape1_shape;\n+    final Tensor<Float> parameter1368;\n+    final Tensor<Float> parameter1404;\n+    final Tensor<Float> parameter1694;\n+\n+    public FERModel(Arena arena) throws IOException {\n+        this.arena = arena;\n+        URL resource = Objects.requireNonNull(FERModel.class.getResource(\"emotion-ferplus-8.onnx.data\"));\n+        var modelData = new TensorDataStream(arena, resource.getPath());\n+        parameter1693 = modelData.nextTensor(Tensor.ElementType.FLOAT, 1024, 8);\n+        parameter1403 = modelData.nextTensor(Tensor.ElementType.FLOAT, 1024, 1024);\n+        parameter1367 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 4, 4, 1024);\n+        parameter695 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 256, 3, 3);\n+        parameter675 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 256, 3, 3);\n+        parameter655 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 256, 3, 3);\n+        parameter615 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 256, 3, 3);\n+        parameter595 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 256, 3, 3);\n+        parameter575 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 128, 3, 3);\n+        parameter83 = modelData.nextTensor(Tensor.ElementType.FLOAT, 128, 128, 3, 3);\n+        parameter63 = modelData.nextTensor(Tensor.ElementType.FLOAT, 128, 64, 3, 3);\n+        parameter23 = modelData.nextTensor(Tensor.ElementType.FLOAT, 64, 64, 3, 3);\n+        parameter3 = modelData.nextTensor(Tensor.ElementType.FLOAT, 64, 1, 3, 3);\n+        constant339 = Tensor.ofScalar(127.5f);\n+        constant343 = Tensor.ofScalar(255.0f);\n+        parameter4 = modelData.nextTensor(Tensor.ElementType.FLOAT, 64, 1, 1);\n+        parameter24 = modelData.nextTensor(Tensor.ElementType.FLOAT, 64, 1, 1);\n+        parameter64 = modelData.nextTensor(Tensor.ElementType.FLOAT, 128, 1, 1);\n+        parameter84 = modelData.nextTensor(Tensor.ElementType.FLOAT, 128, 1, 1);\n+        parameter576 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        parameter596 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        parameter616 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        parameter656 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        parameter676 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        parameter696 = modelData.nextTensor(Tensor.ElementType.FLOAT, 256, 1, 1);\n+        dropout612_reshape0_shape = Tensor.ofShape(new long[]{2}, 1, 4096);\n+        parameter1367_reshape1_shape = Tensor.ofShape(new long[]{2}, 4096, 1024);\n+        parameter1368 = modelData.nextTensor(Tensor.ElementType.FLOAT, 1024);\n+        parameter1404 = modelData.nextTensor(Tensor.ElementType.FLOAT, 1024);\n+        parameter1694 = modelData.nextTensor(Tensor.ElementType.FLOAT, 8);\n+    }\n+\n+    @CodeReflection\n+    public Tensor<Float> cntkGraph(Tensor<Float> input3) {\n+        \/\/ Reshape parameter\n+        Tensor<Float> parameter1367_reshape1 = Reshape(parameter1367, parameter1367_reshape1_shape, empty());\n+\n+        \/\/ Preprocessing subtraction and division\n+        Tensor<Float> minus340 = Sub(input3, constant339);\n+        Tensor<Float> block352 = Div(minus340, constant343);\n+\n+        \/\/ Convolution\/ReLU blocks\n+        Tensor<Float> convolution362 = Conv(block352, parameter3, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus364 = Add(convolution362, parameter4);\n+        Tensor<Float> reLU366 = Relu(plus364);\n+\n+        Tensor<Float> convolution380 = Conv(reLU366, parameter23, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus382 = Add(convolution380, parameter24);\n+        Tensor<Float> reLU384 = Relu(plus382);\n+\n+        var pooling398 = MaxPool(reLU384, of(new long[]{0L, 0L, 0L, 0L}), empty(), of(\"NOTSET\"), empty(), empty(), of(new long[]{2L, 2L}), new long[]{2L, 2L});\n+        var dropout408 = Dropout(pooling398.Y(), empty(), empty(), empty());\n+\n+        Tensor<Float> convolution418 = Conv(dropout408.output(), parameter63, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus420 = Add(convolution418, parameter64);\n+        Tensor<Float> reLU422 = Relu(plus420);\n+\n+        Tensor<Float> convolution436 = Conv(reLU422, parameter83, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus438 = Add(convolution436, parameter84);\n+        Tensor<Float> reLU440 = Relu(plus438);\n+\n+        var pooling454 = MaxPool(reLU440, of(new long[]{0L, 0L, 0L, 0L}), empty(), of(\"NOTSET\"), empty(), empty(), of(new long[]{2L, 2L}), new long[]{2L, 2L});\n+        var dropout464 = Dropout(pooling454.Y(), empty(), empty(), empty());\n+\n+        Tensor<Float> convolution474 = Conv(dropout464.output(), parameter575, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus476 = Add(convolution474, parameter576);\n+        Tensor<Float> reLU478 = Relu(plus476);\n+\n+        Tensor<Float> convolution492 = Conv(reLU478, parameter595, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus494 = Add(convolution492, parameter596);\n+        Tensor<Float> reLU496 = Relu(plus494);\n+\n+        Tensor<Float> convolution510 = Conv(reLU496, parameter615, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus512 = Add(convolution510, parameter616);\n+        Tensor<Float> reLU514 = Relu(plus512);\n+\n+        var pooling528 = MaxPool(reLU514, of(new long[]{0L, 0L, 0L, 0L}), empty(), of(\"NOTSET\"), empty(), empty(), of(new long[]{2L, 2L}), new long[]{2L, 2L});\n+        var dropout538 = Dropout(pooling528.Y(), empty(), empty(), empty());\n+\n+        Tensor<Float> convolution548 = Conv(dropout538.output(), parameter655, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus550 = Add(convolution548, parameter656);\n+        Tensor<Float> reLU552 = Relu(plus550);\n+\n+        Tensor<Float> convolution566 = Conv(reLU552, parameter675, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus568 = Add(convolution566, parameter676);\n+        Tensor<Float> reLU570 = Relu(plus568);\n+\n+        Tensor<Float> convolution584 = Conv(reLU570, parameter695, empty(), empty(), of(new long[]{1L, 1L}), of(\"SAME_UPPER\"), of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> plus586 = Add(convolution584, parameter696);\n+        Tensor<Float> reLU588 = Relu(plus586);\n+\n+        var pooling602 = MaxPool(reLU588, of(new long[]{0L, 0L, 0L, 0L}), empty(), of(\"NOTSET\"), empty(), empty(), of(new long[]{2L, 2L}), new long[]{2L, 2L});\n+        var dropout612 = Dropout(pooling602.Y(), empty(), empty(), empty());\n+\n+        Tensor<Float> dropout612_reshape0 = Reshape(dropout612.output(), dropout612_reshape0_shape, empty());\n+        Tensor<Float> times622 = MatMul(dropout612_reshape0, parameter1367_reshape1);\n+        Tensor<Float> plus624 = Add(times622, parameter1368);\n+        Tensor<Float> reLU636 = Relu(plus624);\n+        var dropout646 = Dropout(reLU636, empty(), empty(), empty());\n+\n+        Tensor<Float> times656 = MatMul(dropout646.output(), parameter1403);\n+        Tensor<Float> plus658 = Add(times656, parameter1404);\n+        Tensor<Float> reLU670 = Relu(plus658);\n+        var dropout680 = Dropout(reLU670, empty(), empty(), empty());\n+\n+        Tensor<Float> times690 = MatMul(dropout680.output(), parameter1693);\n+        Tensor<Float> plus692 = Add(times690, parameter1694);\n+\n+        return Softmax(plus692, of(1L));\n+    }\n+\n+    @CodeReflection\n+    public Tensor<Float> condenseCNTKGraph(Tensor<Float> input3) {\n+\n+        \/\/ Reshape parameter\n+        Tensor<Float> parameter1367_reshape1 = Reshape(\n+                parameter1367, parameter1367_reshape1_shape, empty());\n+\n+        \/\/ Preprocessing subtraction and division\n+        Tensor<Float> minus340 = Sub(input3, constant339);\n+        Tensor<Float> block352 = Div(minus340, constant343);\n+\n+        \/\/ Convolution\/ReLU blocks\n+        Tensor<Float> reLU366 = convAddRelu(block352, parameter3, parameter4);\n+        Tensor<Float> reLU384 = convAddRelu(reLU366, parameter23, parameter24);\n+        Tensor<Float> pooled_dropout1 = maxPoolDropout(reLU384); \/\/ After 2nd ConvBlock\n+\n+        Tensor<Float> reLU422 = convAddRelu(pooled_dropout1, parameter63, parameter64);\n+        Tensor<Float> reLU440 = convAddRelu(reLU422, parameter83, parameter84);\n+        Tensor<Float> pooled_dropout2 = maxPoolDropout(reLU440); \/\/ After 4th ConvBlock\n+\n+        Tensor<Float> reLU478 = convAddRelu(pooled_dropout2, parameter575, parameter576);\n+        Tensor<Float> reLU496 = convAddRelu(reLU478, parameter595, parameter596);\n+        Tensor<Float> reLU514 = convAddRelu(reLU496, parameter615, parameter616);\n+        Tensor<Float> pooled_dropout3 = maxPoolDropout(reLU514); \/\/ After 6th ConvBlock\n+\n+        Tensor<Float> reLU552 = convAddRelu(pooled_dropout3, parameter655, parameter656);\n+        Tensor<Float> reLU570 = convAddRelu(reLU552, parameter675, parameter676);\n+        Tensor<Float> reLU588 = convAddRelu(reLU570, parameter695, parameter696);\n+        Tensor<Float> pooled_dropout4 = maxPoolDropout(reLU588); \/\/ After 9th ConvBlock\n+\n+        \/\/ Flatten\n+        Tensor<Float> dropout612_reshape0 = Reshape(\n+                pooled_dropout4, dropout612_reshape0_shape, empty());\n+\n+        \/\/ Dense\/Dropout layer patterns\n+        Tensor<Float> dense1 = MatMul(dropout612_reshape0, parameter1367_reshape1);\n+        Tensor<Float> plus624 = Add(dense1, parameter1368);\n+        Tensor<Float> reLU636 = Relu(plus624);\n+        var dropout646 = Dropout(reLU636, empty(), empty(), empty());\n+\n+        Tensor<Float> dense2 = MatMul(dropout646.output(), parameter1403);\n+        Tensor<Float> plus658 = Add(dense2, parameter1404);\n+        Tensor<Float> reLU670 = Relu(plus658);\n+        var dropout680 = Dropout(reLU670, empty(), empty(), empty());\n+\n+        Tensor<Float> dense3 = MatMul(dropout680.output(), parameter1693);\n+        Tensor<Float> plus692 = Add(dense3, parameter1694);\n+\n+        return Softmax(plus692, of(1L));\n+    }\n+\n+    \/\/ Helper method: Convolution block (Conv -> Add -> Relu)\n+    @CodeReflection\n+    private Tensor<Float> convAddRelu(Tensor<Float> input,\n+            Tensor<Float> weight, Tensor<Float> bias) {\n+        \/\/ Applies convolution, bias addition, and ReLU activation\n+        Tensor<Float> conv = Conv(input, weight, empty(), empty(),\n+                of(new long[]{1L, 1L}), of(\"SAME_UPPER\"),\n+                of(new long[]{1L, 1L}), of(1L), of(new long[]{3L, 3L}));\n+        Tensor<Float> added = Add(conv, bias);\n+        return Relu(added);\n+    }\n+\n+    \/\/ Helper method: MaxPool followed by Dropout (MaxPool -> Dropout)\n+    @CodeReflection\n+    private Tensor<Float> maxPoolDropout(Tensor<Float> input) {\n+        \/\/ Applies max pooling, then dropout to the input\n+        var pooling = MaxPool(input, of(new long[]{0L, 0L, 0L, 0L}), empty(),\n+                of(\"NOTSET\"), empty(), empty(), of(new long[]{2L, 2L}),\n+                new long[]{2L, 2L});\n+        var dropout = Dropout(pooling.Y(), empty(), empty(), empty());\n+        return Identity(dropout.output());\n+    }\n+\n+    public float[] classify(float[] imageData, OnnxRuntime.SessionOptions options, boolean isCondensed) {\n+        var imageTensor = Tensor.ofShape(arena, new long[]{1, 1, IMAGE_SIZE, IMAGE_SIZE}, imageData);\n+        Tensor<Float> predictionTensor;\n+        if (isCondensed) {\n+            predictionTensor = OnnxRuntime.execute(arena, MethodHandles.lookup(),\n+                    () -> condenseCNTKGraph(imageTensor), options);\n+        } else {\n+            predictionTensor = OnnxRuntime.execute(arena, MethodHandles.lookup(),\n+                    () -> cntkGraph(imageTensor), options);\n+        }\n+        return predictionTensor.data().toArray(ValueLayout.JAVA_FLOAT);\n+    }\n+\n+}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/fer\/FERModel.java","additions":281,"deletions":0,"binary":false,"changes":281,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fer\/happy.png","binary":true,"status":"added"},{"filename":"cr-examples\/onnx\/src\/test\/resources\/oracle\/code\/onnx\/fer\/sad.png","binary":true,"status":"added"}]}