{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.classfile.ClassBuilder;\n@@ -29,0 +30,1 @@\n+import java.lang.classfile.ClassModel;\n@@ -31,6 +33,0 @@\n-import java.lang.constant.*;\n-import java.lang.reflect.code.op.CoreOp;\n-import java.lang.reflect.code.op.CoreOp.*;\n-\n-import java.lang.classfile.ClassBuilder;\n-import java.lang.classfile.ClassModel;\n@@ -40,0 +36,7 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.Constable;\n+import java.lang.constant.ConstantDescs;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicCallSiteDesc;\n+import java.lang.constant.MethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -41,2 +44,0 @@\n-import java.lang.reflect.code.Block;\n-import java.lang.reflect.code.Op;\n@@ -46,0 +47,7 @@\n+import java.lang.invoke.StringConcatFactory;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.code.Block;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.Quotable;\n+import java.lang.reflect.code.TypeElement;\n@@ -48,0 +56,2 @@\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.op.CoreOp.*;\n@@ -50,1 +60,0 @@\n-import java.lang.reflect.code.type.MethodRef;\n@@ -53,1 +62,2 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.type.MethodRef;\n+import java.lang.reflect.code.type.PrimitiveType;\n@@ -55,0 +65,1 @@\n+import java.util.ArrayDeque;\n@@ -57,0 +68,1 @@\n+import java.util.Deque;\n@@ -58,0 +70,1 @@\n+import java.util.HashSet;\n@@ -61,10 +74,0 @@\n-\n-import static java.lang.constant.ConstantDescs.*;\n-import java.lang.invoke.StringConcatFactory;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.code.Quotable;\n-import java.lang.reflect.code.type.PrimitiveType;\n-import java.util.ArrayDeque;\n-import java.util.Deque;\n-import java.util.HashSet;\n@@ -74,0 +77,2 @@\n+import static java.lang.constant.ConstantDescs.*;\n+\n@@ -326,1 +331,1 @@\n-        processOperand(op.operands().getFirst());;\n+        processOperand(op.operands().getFirst());\n@@ -821,2 +826,1 @@\n-                            processOperands(op);\n-                            cob.ifThenElse(prepareReverseCondition(op), CodeBuilder::iconst_0, CodeBuilder::iconst_1);\n+                            cob.ifThenElse(prepareConditionalBranch(op), CodeBuilder::iconst_0, CodeBuilder::iconst_1);\n@@ -1038,2 +1042,1 @@\n-                        processOperands(btop);\n-                        conditionalBranch(btop, op.trueBranch(), op.falseBranch());\n+                        conditionalBranch(prepareConditionalBranch(btop), op.trueBranch(), op.falseBranch());\n@@ -1041,2 +1044,2 @@\n-                        processOperands(op);\n-                        conditionalBranch(Opcode.IFEQ, op, op.trueBranch(), op.falseBranch());\n+                        processFirstOperand(op);\n+                        conditionalBranch(Opcode.IFEQ, op.trueBranch(), op.falseBranch());\n@@ -1148,5 +1151,1 @@\n-    private void conditionalBranch(BinaryTestOp op, Block.Reference trueBlock, Block.Reference falseBlock) {\n-        conditionalBranch(prepareReverseCondition(op), op, trueBlock, falseBlock);\n-    }\n-\n-    private void conditionalBranch(Opcode reverseOpcode, Op op, Block.Reference trueBlock, Block.Reference falseBlock) {\n+    private void conditionalBranch(Opcode reverseOpcode, Block.Reference trueBlock, Block.Reference falseBlock) {\n@@ -1166,2 +1165,31 @@\n-    private Opcode prepareReverseCondition(BinaryTestOp op) {\n-        return switch (toTypeKind(op.operands().get(0).type())) {\n+    private Opcode prepareConditionalBranch(BinaryTestOp op) {\n+        Value firstOperand = op.operands().get(0);\n+        TypeKind typeKind = toTypeKind(firstOperand.type());\n+        Value secondOperand = op.operands().get(1);\n+        processOperand(firstOperand);\n+        if (isZeroIntOrNullConstant(secondOperand)) {\n+            return switch (typeKind) {\n+                case IntType, BooleanType, ByteType, ShortType, CharType ->\n+                    switch (op) {\n+                        case EqOp _ -> Opcode.IFNE;\n+                        case NeqOp _ -> Opcode.IFEQ;\n+                        case GtOp _ -> Opcode.IFLE;\n+                        case GeOp _ -> Opcode.IFLT;\n+                        case LtOp _ -> Opcode.IFGE;\n+                        case LeOp _ -> Opcode.IFGT;\n+                        default ->\n+                            throw new UnsupportedOperationException(op.opName() + \" on int\");\n+                    };\n+                case ReferenceType ->\n+                    switch (op) {\n+                        case EqOp _ -> Opcode.IFNONNULL;\n+                        case NeqOp _ -> Opcode.IFNULL;\n+                        default ->\n+                            throw new UnsupportedOperationException(op.opName() + \" on Object\");\n+                    };\n+                default ->\n+                    throw new UnsupportedOperationException(op.opName() + \" on \" + op.operands().get(0).type());\n+            };\n+        }\n+        processOperand(secondOperand);\n+        return switch (typeKind) {\n@@ -1203,0 +1231,14 @@\n+    private boolean isZeroIntOrNullConstant(Value v) {\n+        return v instanceof Op.Result or\n+                && or.op() instanceof ConstantOp cop\n+                && switch (cop.value()) {\n+                    case null -> true;\n+                    case Integer i -> i == 0;\n+                    case Boolean b -> !b;\n+                    case Byte b -> b == 0;\n+                    case Short s -> s == 0;\n+                    case Character ch -> ch == 0;\n+                    default -> false;\n+                };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":76,"deletions":34,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -65,0 +65,1 @@\n+import java.util.BitSet;\n@@ -76,1 +77,0 @@\n-import java.util.BitSet;\n@@ -1004,2 +1004,1 @@\n-       var vt = valueType(otherOperand);\n-        return vt.equals(PrimitiveType.BOOLEAN) ? liftConstant(false) : liftConstant(0);\n+        return liftDefaultValue(BytecodeGenerator.toClassDesc(otherOperand.type()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}