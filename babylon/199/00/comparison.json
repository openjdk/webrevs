{"files":[{"patch":"@@ -1,704 +0,0 @@\n-cmake_minimum_required(VERSION 3.21)  #limited by jetson project(HAT)\n-\n-project(hat)\n-\n-message(WARNING \"HAT builds with maven now !!\")\n-message(\"You should be able to build using\")\n-message(\"->8-    \")\n-message(\"    . .\/env.bash\")\n-message(\"    mvn clean compile jar:jar install\")\n-message(\"-8<-    \")\n-message(\"All jars, libs and executables should end up in the maven-build dir\")\n-message(\"    \")\n-message(\"If the build fails check the pom.xml properties are correct using \")\n-message(\"->8-    \")\n-message(\"    grep \\\"<properties>\\\" -A 10 pom.xml\")\n-message(\"-8<-    \")\n-message(\"    \")\n-message(\"See https:\/\/github.com\/openjdk\/babylon\/tree\/code-reflection\/hat#readme  \")\n-message(\"    \")\n-message(FATAL_ERROR \" Crashing out for your own safety ;)\")\n-\n-\n-set(BABYLON_JDK ${CMAKE_SOURCE_DIR}\/..)\n-if (EXISTS ${BABYLON_JDK})\n-   message(\"BABYLON_JDK ${BABYLON_JDK} OK\")\n-else()\n-   message(FATAL_ERROR \"BABYLON_JDK ${BABYLON_JDK} does not point to anywhere useful \")\n-endif()\n-\n-if (DEFINED ENV{BEEHIVE})\n-   set(BEEHIVE $ENV{BEEHIVE})\n-else()\n-   set(BEEHIVE $ENV{HOME}\/github\/beehive-spirv-toolkit)\n-endif()\n-if (EXISTS ${BEEHIVE})\n-   message(\"BEEHIVE ${BEEHIVE}\")\n-else()\n-   message(WARNING \"BEEHIVE ${BEEHIVE} does not point to anywhere useful.  We can build most of the project but can't build SPIRV backend without BEEHIVE\")\n-endif()\n-\n-set(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n-set(CMAKE_EXPORT_LINKER_COMMANDS ON)\n-\n-if(is$ENV{ECHO_ONLY} STREQUAL isON )\n-   set(DOIT echo)\n-   set_property(GLOBAL PROPERTY TARGET_MESSAGES OFF)\n-   message(\"ECHO_ONLY=ON! I hope you know the implications \")\n-endif()\n-\n-set(CMAKE_CXX_STANDARD 14)\n-set(CXXFLAGS \"-g -Wno-deprecate-declarations\")\n-set(CFLAGS \"-g -Wno-deprecate-declarations\")\n-\n-find_package(OpenCL)         # Note we don't ask for 'required'\n-find_package(CUDAToolkit)    # Note we don't ask for 'required'\n-\n-#The following stanza just locates the specific image for babylon\n-if(${CMAKE_SYSTEM_NAME} STREQUAL Darwin )\n-    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL arm64 )\n-       set(JAVA_SYS_TYPE \"macosx-aarch64\")\n-    else()\n-       set(JAVA_SYS_TYPE \"macosx-x86_64\")\n-    endif()\n-elseif(${CMAKE_SYSTEM_NAME} STREQUAL Linux )\n-    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL aarch64 )\n-       set(JAVA_SYS_TYPE \"linux-aarch64\")\n-    else()\n-       set(JAVA_SYS_TYPE \"linux-x86_64\")\n-    endif()\n-else()\n-   message(FATAL_ERROR \"What machine is this?\")\n-endif()\n-\n-set(JAVA_HOME ${BABYLON_JDK}\/build\/${JAVA_SYS_TYPE}-server-release\/jdk)\n-\n-if (EXISTS ${JAVA_HOME})\n-   message(\"JAVA_HOME ${JAVA_HOME}\")\n-else()\n-   message(FATAL_ERROR \"JAVA_HOME ${JAVA_HOME} does not point to anywhere useful \")\n-endif()\n-\n-## We have JAVA_HOME so now setup clean targets\n-\n-#set_property(DIRECTORY PROPERTY ADDITIONAL_MAKE_CLEAN_FILES\n-#   ${CMAKE_BINARY_DIR}\/hat ${CMAKE_BINARY_DIR}\/mandel ${CMAKE_BINARY_DIR}\/violajones ${CMAKE_BINARY_DIR}\/experiments ${CMAKE_BINARY_DIR}\/heal ${CMAKE_BINARY_DIR}\/view \n-#   ${CMAKE_BINARY_DIR}\/backends\n-#)\n-\n-add_custom_target(backend_jars)\n-add_custom_target(backend_libs)\n-add_custom_target(example_jars)\n-add_custom_target(info_executables)\n-\n-##WORK STARTS HERE\n-\n-### Compilation dependencies list is\n-###\n-###    examples -> hat\n-###\n-###    opencl_info(exe)\n-###                   \\\n-###                     -> libopencl_backend(.so|.dylib)\n-###                                                      \\\n-###                                                       \\\n-###    spirv_info(exe)  -> libspirv_backend(.so|.dylib) ->     backend(.so|.dylib)\n-###                                                       \/\n-###                                                     \/\n-###                     -> libcuda_backend(.so|.dylib)\n-###                   \/\n-###    cuda_info(exe)\n-###\n-###\n-### Runtime dependencies depending on the backend ;)\n-###\n-###  mandel (opencl) -> examples        > hat\n-###                                      \/\n-###                     opencl_backend\n-###                                      \\\n-###                                       libopencl_backend(.so|.dylib)\n-###\n-\n-\n-### build\/hat\/classes\n-### build\/hat\/hat.jar\n-###\n-###  (!hat!)) -> tools\n-\n-set(HAT_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/hat\/src\/main\/java)\n-set(HAT_CLASS_DIR ${CMAKE_BINARY_DIR}\/hat\/classes)\n-set(HAT_JAR ${CMAKE_BINARY_DIR}\/hat\/hat.jar)\n-file(GLOB_RECURSE HAT_JAVA_SOURCE_FILES ${HAT_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(hat.javac\n-   COMMAND ${DOIT}\n-     mkdir -p ${HAT_CLASS_DIR}\n-   COMMAND ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-        --enable-preview --source=23 -g\n-        -d ${HAT_CLASS_DIR}\n-        --source-path ${HAT_SOURCE_ROOT}\n-        --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-        --add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\n-        ${HAT_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(hat.jar DEPENDS hat.javac\n-   COMMAND  ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-        --create\n-        --no-manifest\n-        --file ${HAT_JAR}\n-        -C ${HAT_CLASS_DIR} .\n-)\n-\n-\n-\n-### Examples start here\n-\n-### Squares\n-\n-set(SQUARES_CLASS_DIR ${CMAKE_BINARY_DIR}\/squares\/classes)\n-set(SQUARES_JAR ${CMAKE_BINARY_DIR}\/squares\/squares.jar)\n-set(SQUARES_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/examples\/squares\/src\/main\/java)\n-file(GLOB_RECURSE SQUARES_JAVA_SOURCE_FILES ${SQUARES_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(squares.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${SQUARES_CLASS_DIR}\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${SQUARES_CLASS_DIR} --class-path ${HAT_JAR}\n-       --source-path ${SQUARES_SOURCE_ROOT}\n-       ${SQUARES_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(squares.jar DEPENDS squares.javac\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar --create --no-manifest\n-       --file  ${SQUARES_JAR}\n-       -C ${SQUARES_CLASS_DIR} .\n-)\n-add_dependencies(example_jars squares.jar)\n-\n-### Heal\n-\n-set(HEAL_CLASS_DIR ${CMAKE_BINARY_DIR}\/heal\/classes)\n-set(HEAL_JAR ${CMAKE_BINARY_DIR}\/heal\/heal.jar)\n-set(HEAL_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/examples\/heal\/src\/java)\n-file(GLOB_RECURSE HEAL_JAVA_SOURCE_FILES ${HEAL_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(heal.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${HEAL_CLASS_DIR}\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${HEAL_CLASS_DIR} --class-path ${HAT_JAR}\n-       --source-path ${HEAL_SOURCE_ROOT}\n-       ${HEAL_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(heal.jar DEPENDS heal.javac\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar --create --no-manifest\n-       --file  ${HEAL_JAR}\n-       -C ${HEAL_CLASS_DIR} .\n-       -C ${CMAKE_SOURCE_DIR}\/examples\/heal\/src\/resources .\n-\n-)\n-add_dependencies(example_jars heal.jar)\n-\n-### View\n-\n-set(VIEW_CLASS_DIR ${CMAKE_BINARY_DIR}\/view\/classes)\n-set(VIEW_JAR ${CMAKE_BINARY_DIR}\/view\/view.jar)\n-set(VIEW_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/examples\/view\/src\/java)\n-file(GLOB_RECURSE VIEW_JAVA_SOURCE_FILES ${VIEW_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(view.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${VIEW_CLASS_DIR}\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${VIEW_CLASS_DIR} --class-path ${HAT_JAR}\n-       --source-path ${VIEW_SOURCE_ROOT}\n-       ${VIEW_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(view.jar DEPENDS view.javac\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar --create --no-manifest\n-       --file  ${VIEW_JAR}\n-       -C ${VIEW_CLASS_DIR} .\n-       -C ${CMAKE_SOURCE_DIR}\/examples\/view\/src\/resources .\n-\n-)\n-add_dependencies(example_jars view.jar)\n-\n-\n-\n-### Mandel\n-\n-set(MANDEL_CLASS_DIR ${CMAKE_BINARY_DIR}\/mandel\/classes)\n-set(MANDEL_JAR ${CMAKE_BINARY_DIR}\/mandel\/mandel.jar)\n-set(MANDEL_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/examples\/mandel\/src\/main\/java)\n-file(GLOB_RECURSE MANDEL_JAVA_SOURCE_FILES ${MANDEL_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(mandel.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${MANDEL_CLASS_DIR}\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${MANDEL_CLASS_DIR} --class-path ${HAT_JAR}\n-       --source-path ${MANDEL_SOURCE_ROOT}\n-       ${MANDEL_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(mandel.jar DEPENDS mandel.javac\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar --create --no-manifest\n-       --file  ${MANDEL_JAR}\n-       -C ${MANDEL_CLASS_DIR} .\n-)\n-add_dependencies(example_jars mandel.jar)\n-\n-#ViolaJones\n-\n-\n-set(VIOLAJONES_CLASS_DIR ${CMAKE_BINARY_DIR}\/violajones\/classes)\n-set(VIOLAJONES_JAR ${CMAKE_BINARY_DIR}\/violajones\/violajones.jar)\n-set(VIOLAJONES_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/examples\/violajones\/src\/main\/java)\n-file(GLOB_RECURSE VIOLAJONES_JAVA_SOURCE_FILES ${VIOLAJONES_SOURCE_ROOT}\/*.java)\n-\n-add_custom_target(violajones.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${VIOLAJONES_CLASS_DIR}\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${VIOLAJONES_CLASS_DIR} --class-path ${HAT_JAR}\n-       --source-path ${VIOLAJONES_SOURCE_ROOT}\n-       ${VIOLAJONES_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(violajones.jar DEPENDS violajones.javac\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar --create --no-manifest\n-       --file  ${VIOLAJONES_JAR}\n-       -C ${VIOLAJONES_CLASS_DIR} .\n-       -C ${CMAKE_SOURCE_DIR}\/examples\/violajones\/src\/main\/resources .\n-)\n-add_dependencies(example_jars violajones.jar)\n-\n-#### We delegate to the cmake config for backends which is clion compatible. \n-\n-set (SHARED_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/shared\")\n-set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/ptx\")\n-set (OPENCL_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/opencl\")\n-set (CUDA_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/cuda\")\n-set (SPIRV_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/spirv\")\n-set (MOCK_BACKEND \"${CMAKE_SOURCE_DIR}\/backends\/mock\")\n-add_subdirectory(\"backends\")\n-\n-#### We can always build the Java artifacts for all of our backends\n-#### we do need to guard the building of native artifacts\n-#### with if (CUDAToolkit_FOUND) or if (OpenCL_FOUND) etc because our build\n-#### machine may not have the appropriate headers or libs to link to\n-#### Clearly at runtime the java artifacts will need to load the relevant .so\/.dylib\n-\n-##OpenCL Backend\n-###opencl_backend.jar\n-\n-set(OPENCL_BACKEND_JAVA_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/backends\/opencl\/src\/main\/java)\n-file(GLOB_RECURSE OPENCL_BACKEND_JAVA_SOURCE_FILES ${OPENCL_BACKEND_JAVA_SOURCE_ROOT}\/*.java)\n-set(OPENCL_BACKEND_CLASS_DIR ${CMAKE_BINARY_DIR}\/opencl_backend\/classes)\n-set(OPENCL_BACKEND_RESOURCES_DIR ${CMAKE_SOURCE_DIR}\/backends\/opencl\/src\/main\/resources)\n-set(OPENCL_BACKEND_JAR ${CMAKE_BINARY_DIR}\/opencl_backend\/opencl_backend.jar)\n-\n-add_custom_target(opencl_backend.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-     mkdir -p ${OPENCL_BACKEND_CLASS_DIR}\n-   COMMAND ${DOIT}\n-     ${JAVA_HOME}\/bin\/javac\n-       --enable-preview --source=23 -g -Xlint:unchecked\n-       -d ${OPENCL_BACKEND_CLASS_DIR} -classpath ${HAT_JAR}\n-       --source-path ${OPENCL_BACKEND_JAVA_SOURCE_ROOT}\n-       ${OPENCL_BACKEND_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(opencl_backend.jar DEPENDS opencl_backend.javac\n-   COMMAND ${DOIT}\n-     ${JAVA_HOME}\/bin\/jar\n-       --create --no-manifest\n-       --file  ${OPENCL_BACKEND_JAR}\n-       -C ${OPENCL_BACKEND_RESOURCES_DIR} .\n-       -C ${OPENCL_BACKEND_CLASS_DIR} .\n-)\n-add_dependencies(backend_jars opencl_backend.jar)\n-find_package(OpenCL)\n-if(OPENCL_FOUND)  \n-    add_dependencies(info_executables opencl_info)\n-    add_dependencies(backend_libs opencl_backend)\n-endif()\n-\n-\n-##CUDA Backend\n-set(CUDA_BACKEND_JAVA_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/backends\/cuda\/src\/main\/java)\n-file(GLOB_RECURSE CUDA_BACKEND_JAVA_SOURCE_FILES ${CUDA_BACKEND_JAVA_SOURCE_ROOT}\/*.java)\n-set(CUDA_BACKEND_CLASS_DIR ${CMAKE_BINARY_DIR}\/cuda_backend\/classes)\n-set(CUDA_BACKEND_RESOURCES_DIR ${CMAKE_SOURCE_DIR}\/backends\/cuda\/src\/main\/resources)\n-set(CUDA_BACKEND_JAR ${CMAKE_BINARY_DIR}\/cuda_backend\/cuda_backend.jar)\n-\n-add_custom_target(cuda_backend.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-      mkdir -p ${CUDA_BACKEND_CLASS_DIR}\n-   COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/javac\n-        --enable-preview --source=23 -g -Xlint:unchecked\n-        -d ${CUDA_BACKEND_CLASS_DIR} -classpath ${HAT_JAR}\n-        --source-path ${CUDA_BACKEND_JAVA_SOURCE_ROOT}\n-        ${CUDA_BACKEND_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(cuda_backend.jar DEPENDS cuda_backend.javac\n-    COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-        --create --no-manifest\n-        --file  ${CUDA_BACKEND_JAR}\n-        -C ${CUDA_BACKEND_RESOURCES_DIR} .\n-        -C ${CUDA_BACKEND_CLASS_DIR} .\n-)\n-add_dependencies(backend_jars cuda_backend.jar)\n-find_package(CUDAToolkit)\n-\n-if(CUDAToolkit_FOUND)\n-    add_dependencies(info_executables cuda_info)\n-    add_dependencies(backend_libs cuda_backend)\n-endif()\n-##End of CUDA Backend\n-\n-if (EXISTS ${BEEHIVE})\n-##SPRIV Backend\n-##spirv_backend.jar\n-\n-set(SPIRV_BACKEND_JAVA_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/backends\/spirv\/src\/main\/java)\n-set(SPIRV_INTEL_BACKEND_JAVA_SOURCE_ROOT ${BABYLON_JDK}\/cr-examples\/spirv\/src\/main\/java)\n-set(SPIRV_BEEHIVE_BACKEND_JAVA_SOURCE_ROOT ${BEEHIVE}\/lib\/src\/main\/java)\n-file(GLOB_RECURSE SPIRV_BACKEND_JAVA_SOURCE_FILES ${SPIRV_BACKEND_JAVA_SOURCE_ROOT}\/hat\/*.java  )\n-file(GLOB_RECURSE SPIRV_INTEL_BACKEND_JAVA_SOURCE_FILES ${SPIRV_INTEL_BACKEND_JAVA_SOURCE_ROOT}\/intel\/*.java)\n-file(GLOB_RECURSE SPIRV_BEEHIVE_BACKEND_JAVA_SOURCE_FILES ${SPIRV_BEEHIVE_BACKEND_JAVA_SOURCE_ROOT}\/uk\/*.java)\n-set(SPIRV_BACKEND_CLASS_DIR ${CMAKE_BINARY_DIR}\/spirv_backend\/classes)\n-set(SPIRV_BACKEND_RESOURCES_DIR ${CMAKE_SOURCE_DIR}\/backends\/spirv\/src\/main\/resources)\n-set(SPIRV_BACKEND_JAR ${CMAKE_BINARY_DIR}\/spirv_backend\/spirv_backend.jar)\n-\n-add_custom_target(spirv_backend.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-      mkdir -p ${SPIRV_BACKEND_CLASS_DIR}\n-   COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/javac\n-        --enable-preview --source=23 -g -Xlint:unchecked\n-        -d ${SPIRV_BACKEND_CLASS_DIR} -classpath ${HAT_JAR}\n-        --source-path ${SPIRV_BACKEND_JAVA_SOURCE_ROOT}:${SPIRV_INTEL_BACKEND_JAVA_SOURCE_ROOT}:${SPIRV_BEEHIVE_BACKEND_JAVA_SOURCE_ROOT}\n-        ${SPIRV_BACKEND_JAVA_SOURCE_FILES}\n-        ${SPIRV_INTEL_BACKEND_JAVA_SOURCE_FILES}\n-        ${SPIRV_BEEHIVE_BACKEND_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(spirv_backend.jar DEPENDS spirv_backend.javac\n-    COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-        --create --no-manifest\n-        --file  ${SPIRV_BACKEND_JAR}\n-        -C ${SPIRV_BACKEND_RESOURCES_DIR} .\n-        -C ${SPIRV_BACKEND_CLASS_DIR} .\n-)\n-add_dependencies(backend_jars spirv_backend.jar)\n-\n-\n-\n-add_custom_target(spirv_info_exec DEPENDS spirv_backend.jar spirv_backend\n-   COMMAND  ${DOIT}\n-      ${JAVA_HOME}\/bin\/java\n-        --enable-preview --enable-native-access=ALL-UNNAMED\n-        --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-        -classpath ${SPIRV_BACKEND_JAR}:${HAT_JAR}\n-        -Djava.library.path=${CMAKE_BINARY_DIR}\n-        hat.backend.SpirvDeviceInfo\n-  )\n-add_dependencies(info_executables spirv_info)\n-add_dependencies(backend_libs spirv_backend)\n-## end of SPIRV\n-else()\n-   message(\"BEEHIVE! not found\")\n-endif()\n-\n-##PTX Backend\n-##ptx_backend.jar\n-\n-set(PTX_BACKEND_JAVA_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/backends\/ptx\/src\/main\/java)\n-file(GLOB_RECURSE PTX_BACKEND_JAVA_SOURCE_FILES ${PTX_BACKEND_JAVA_SOURCE_ROOT}\/*.java)\n-set(PTX_BACKEND_CLASS_DIR ${CMAKE_BINARY_DIR}\/ptx_backend\/classes)\n-set(PTX_BACKEND_RESOURCES_DIR ${CMAKE_SOURCE_DIR}\/backends\/ptx\/src\/main\/resources)\n-set(PTX_BACKEND_JAR ${CMAKE_BINARY_DIR}\/ptx_backend\/ptx_backend.jar)\n-\n-add_custom_target(ptx_backend.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-      mkdir -p ${PTX_BACKEND_CLASS_DIR}\n-   COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/javac\n-        --enable-preview --source=23 -g -Xlint:unchecked\n-        -d ${PTX_BACKEND_CLASS_DIR} -classpath ${HAT_JAR}\n-        --source-path ${PTX_BACKEND_JAVA_SOURCE_ROOT}\n-        ${PTX_BACKEND_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(ptx_backend.jar DEPENDS ptx_backend.javac\n-    COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-        --create --no-manifest\n-        --file  ${PTX_BACKEND_JAR}\n-        -C ${PTX_BACKEND_RESOURCES_DIR} .\n-        -C ${PTX_BACKEND_CLASS_DIR} .\n-)\n-add_dependencies(backend_jars ptx_backend.jar)\n-  add_custom_target(ptx_info_exec DEPENDS ptx_backend.jar ptx_backend\n-      COMMAND  ${DOIT}\n-        ${JAVA_HOME}\/bin\/java\n-          --enable-preview --enable-native-access=ALL-UNNAMED\n-          --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-          -classpath ${PTX_BACKEND_JAR}:${HAT_JAR}\n-          -Djava.library.path=${CMAKE_BINARY_DIR}\n-          hat.backend.SpirvDeviceInfo\n-  )\n-add_dependencies(info_executables ptx_info)   \n-add_dependencies(backend_libs ptx_backend)    \n-#endif()\n-\n-## end of PTX\n-\n-##MOCK Backend\n-##mock_backend.jar\n-\n-set(MOCK_BACKEND_JAVA_SOURCE_ROOT ${CMAKE_SOURCE_DIR}\/backends\/mock\/src\/main\/java)\n-file(GLOB_RECURSE MOCK_BACKEND_JAVA_SOURCE_FILES ${MOCK_BACKEND_JAVA_SOURCE_ROOT}\/*.java)\n-set(MOCK_BACKEND_CLASS_DIR ${CMAKE_BINARY_DIR}\/mock_backend\/classes)\n-set(MOCK_BACKEND_RESOURCES_DIR ${CMAKE_SOURCE_DIR}\/backends\/mock\/src\/main\/resources)\n-set(MOCK_BACKEND_JAR ${CMAKE_BINARY_DIR}\/mock_backend\/mock_backend.jar)\n-\n-add_custom_target(mock_backend.javac DEPENDS hat.jar\n-   COMMAND ${DOIT}\n-      mkdir -p ${MOCK_BACKEND_CLASS_DIR}\n-   COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/javac\n-        --enable-preview --source=23 -g -Xlint:unchecked\n-        -d ${MOCK_BACKEND_CLASS_DIR} -classpath ${HAT_JAR}\n-        --source-path ${MOCK_BACKEND_JAVA_SOURCE_ROOT}\n-        ${MOCK_BACKEND_JAVA_SOURCE_FILES}\n-)\n-\n-add_custom_target(mock_backend.jar DEPENDS mock_backend.javac\n-    COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-        --create --no-manifest\n-        --file  ${MOCK_BACKEND_JAR}\n-        -C ${MOCK_BACKEND_RESOURCES_DIR} .\n-        -C ${MOCK_BACKEND_CLASS_DIR} .\n-)\n-add_dependencies(backend_jars mock_backend.jar)\n-\n-\n-  add_custom_target(mock_info_exec DEPENDS mock_backend.jar mock_backend\n-      COMMAND  ${DOIT}\n-        ${JAVA_HOME}\/bin\/java\n-          --enable-preview --enable-native-access=ALL-UNNAMED\n-          --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-          -classpath ${MOCK_BACKEND_JAR}:${HAT_JAR}\n-          -Djava.library.path=${CMAKE_BINARY_DIR}\n-          hat.backend.MockDeviceInfo\n-  )\n-\n-add_dependencies(info_executables mock_info) \n-add_dependencies(backend_libs mock_backend)  \n-#endif()\n-\n-## end of MOCK\n-\n-message(\"AVAILABLE_BACKEND_JAR = ${AVAILABLE_BACKEND_JAR}\")\n-\n-#  squares executable\n-add_custom_target(squares_java DEPENDS squares.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${SQUARES_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n-       squares.Squares\n-)\n-\n-add_custom_target(squares_opencl DEPENDS squares.jar opencl_backend.jar opencl_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${SQUARES_JAR}:${OPENCL_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n-       squares.Squares\n-)\n-\n-add_custom_target(squares_cuda DEPENDS squares.jar cuda_backend.jar cuda_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${SQUARES_JAR}:${CUDA_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n-       squares.Squares\n-)\n-add_custom_target(squares_ptx DEPENDS squares.jar ptx_backend.jar ptx_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${SQUARES_JAR}:${PTX_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/ptx\n-       squares.Squares\n-)\n-\n-#  heal executable\n-add_custom_target(heal_java DEPENDS heal.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${HEAL_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n-       heal.HealingBrushDisplay\n-)\n-#  view executable\n-add_custom_target(view_java DEPENDS view.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIEW_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n-       view.Main\n-)\n-\n-#  mandel executable\n-add_custom_target(mandel_java DEPENDS mandel.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${MANDEL_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n-       mandel.MandelCompute\n-)\n-\n-add_custom_target(mandel_opencl DEPENDS mandel.jar opencl_backend.jar opencl_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${MANDEL_JAR}:${OPENCL_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n-       mandel.MandelCompute\n-)\n-\n-add_custom_target(mandel_cuda DEPENDS mandel.jar cuda_backend.jar cuda_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${MANDEL_JAR}:${CUDA_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n-       mandel.MandelCompute\n-)\n-\n-#  violajones executable\n-add_custom_target(violajones_java DEPENDS violajones.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\n-       violajones.ViolaJonesCompute\n-)\n-\n-add_custom_target(violajones_opencl DEPENDS violajones.jar opencl_backend.jar opencl_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${OPENCL_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n-       violajones.ViolaJonesCompute\n-)\n-\n-add_custom_target(violajones_cuda DEPENDS violajones.jar cuda_backend.jar cuda_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${CUDA_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n-       violajones.ViolaJonesCompute\n-)\n-\n-add_custom_target(violajones_headless_java DEPENDS violajones.jar\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${CMAKE_SOURCE_DIR}\/backends\/shared\/services\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Dheadless=true\n-       violajones.ViolaJonesCompute\n-)\n-\n-add_custom_target(violajones_headless_opencl DEPENDS violajones.jar opencl_backend.jar opencl_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${OPENCL_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/opencl\n-       -Dheadless=true\n-       violajones.ViolaJonesCompute\n-)\n-\n-add_custom_target(violajones_headless_cuda DEPENDS violajones.jar cuda_backend.jar cuda_backend\n-   COMMAND  ${DOIT}\n-     ${JAVA_HOME}\/bin\/java\n-       --enable-preview --enable-native-access=ALL-UNNAMED\n-       --class-path ${HAT_JAR}:${VIOLAJONES_JAR}:${CUDA_BACKEND_JAR}\n-       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n-       -Djava.library.path=${CMAKE_BINARY_DIR}\/backends\/cuda\n-       -Dheadless=true\n-       violajones.ViolaJonesCompute\n-)\n-\n-\n-add_custom_target(mkjar\n-   COMMAND ${DOIT}\n-      ${JAVA_HOME}\/bin\/jar\n-      --create\n-      --no-manifest\n-      --file  ${CMAKE_BINARY_DIR}\/hat.jar\n-      -C ${CMAKE_SOURCE_DIR} CMakeLists.txt\n-      -C ${CMAKE_SOURCE_DIR} docs\n-      -C ${CMAKE_SOURCE_DIR} backends\n-      -C ${CMAKE_SOURCE_DIR} examples\n-      -C ${CMAKE_SOURCE_DIR} hat\n-)\n-\n-add_custom_target(hat DEPENDS hat.jar backend_jars backend_libs  example_jars info_executables)\n-\n-\n-\n","filename":"hat\/CMakeLists.txt","additions":0,"deletions":704,"binary":false,"changes":704,"status":"deleted"},{"patch":"@@ -1,29 +0,0 @@\n-cat >\/dev\/null<<LICENSE\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-LICENSE\n-\n-cmake -B build\n-cmake --build build --target $1\n","filename":"hat\/cmake.bash","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-cat >\/dev\/null<<LICENSE\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-LICENSE\n-\n-bash .\/hatrun.bash java violajones ViolaJonesCompute\n-bash .\/hatrun.bash opencl violajones ViolaJonesCompute\n-bash .\/hatrun.bash java squares Squares\n-bash .\/hatrun.bash opencl squares Squares\n-bash .\/hatrun.bash java mandel MandelCompute\n-bash .\/hatrun.bash opencl mandel MandelCompute\n-\n","filename":"hat\/run.bash","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"}]}