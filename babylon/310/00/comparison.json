{"files":[{"patch":"@@ -35,0 +35,3 @@\n+\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n@@ -73,3 +76,31 @@\n-            return value == ExternalizableOp.NULL_ATTRIBUTE_VALUE\n-                    ? \"null\"\n-                    : \"\\\"\" + quote(value.toString()) + \"\\\"\";\n+            if (value == ExternalizableOp.NULL_ATTRIBUTE_VALUE) {\n+                return \"null\";\n+            }\n+\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"\\\"\");\n+            toString(value, sb);\n+            sb.append(\"\\\"\");\n+            return sb.toString();\n+        }\n+\n+        static void toString(Object o, StringBuilder sb) {\n+            if (o.getClass().isArray()) {\n+                arrayToString(o, sb);\n+            } else {\n+                quote(o.toString(), sb);\n+            }\n+        }\n+\n+        static void arrayToString(Object a, StringBuilder sb) {\n+            boolean first = true;\n+            sb.append(\"[\");\n+            for (int i = 0; i < Array.getLength(a); i++) {\n+                if (!first) {\n+                    sb.append(\", \");\n+                }\n+\n+                toString(Array.get(a, i), sb);\n+                first = false;\n+            }\n+            sb.append(\"]\");\n@@ -79,3 +110,1 @@\n-    \/\/ Copied from com.sun.tools.javac.util.Convert\n-    static String quote(String s) {\n-        StringBuilder buf = new StringBuilder();\n+    static void quote(String s, StringBuilder sb) {\n@@ -83,1 +112,1 @@\n-            buf.append(quote(s.charAt(i)));\n+            sb.append(quote(s.charAt(i)));\n@@ -85,1 +114,0 @@\n-        return buf.toString();\n@@ -92,0 +120,1 @@\n+    \/\/ Copied from com.sun.tools.javac.util.Convert\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/writer\/OpWriter.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run testng TestAttributeSerialization\n+ *\/\n+\n+import jdk.incubator.code.*;\n+import jdk.incubator.code.op.ExternalizableOp;\n+import jdk.incubator.code.type.JavaType;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TestAttributeSerialization {\n+\n+    static class TestOp extends ExternalizableOp {\n+        final Object attributeValue;\n+\n+        TestOp(ExternalizedOp opdef) {\n+            super(opdef);\n+            this.attributeValue = null;\n+        }\n+\n+        TestOp(TestOp that, CopyContext cc) {\n+            super(that, cc);\n+            this.attributeValue = that.attributeValue;\n+        }\n+\n+        @Override\n+        public TestOp transform(CopyContext cc, OpTransformer ot) {\n+            return new TestOp(this, cc);\n+        }\n+\n+        TestOp(Object attributeValue) {\n+            super(\"test-op\", List.of());\n+            this.attributeValue = attributeValue;\n+        }\n+\n+        @Override\n+        public TypeElement resultType() {\n+            return JavaType.VOID;\n+        }\n+\n+        @Override\n+        public Map<String, Object> attributes() {\n+            return Map.of(\"a\", attributeValue);\n+        }\n+    }\n+\n+\n+    @DataProvider\n+    static Object[][] attributes() {\n+        return new Object[][] {\n+                { new int[] {1, 2, 3}, \"[1, 2, 3]\"},\n+                { new int[][] { {1}, {2}, {3}}, \"[[1], [2], [3]]\"},\n+                { new Object[] {1, new int[] {1, 2, 3}, 3}, \"[1, [1, 2, 3], 3]\"},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"attributes\")\n+    public void testAttributes(Object a, String s) {\n+        TestOp op = new TestOp(a);\n+        String serOp = op.toText();\n+        Assert.assertTrue(serOp.contains(s), serOp);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestAttributeSerialization.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}