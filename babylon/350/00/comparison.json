{"files":[{"patch":"@@ -28,1 +28,1 @@\n-    OpenCLBackend backend(OpenCLBackend::OpenCLConfig::GPU_BIT,0,0);\n+    OpenCLBackend backend(OpenCLBackend::OpenCLConfig::GPU_BIT);\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/info.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-OpenCLBackend::OpenCLConfig::OpenCLConfig(int mode):\n-       mode(mode),\n-       gpu((mode&GPU_BIT)==GPU_BIT),\n-       cpu((mode&CPU_BIT)==CPU_BIT),\n-       minimizeCopies((mode&MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT),\n+OpenCLBackend::OpenCLConfig::OpenCLConfig(int configBits):\n+       configBits(configBits),\n+       gpu((configBits&GPU_BIT)==GPU_BIT),\n+       cpu((configBits&CPU_BIT)==CPU_BIT),\n+       minimizeCopies((configBits&MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT),\n@@ -34,8 +34,12 @@\n-       trace((mode&TRACE_BIT)==TRACE_BIT),\n-       traceCopies((mode&TRACE_COPIES_BIT)==TRACE_COPIES_BIT),\n-       traceEnqueues((mode&TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n-       traceCalls((mode&TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n-       traceSkippedCopies((mode&TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT),\n-       info((mode&INFO_BIT)==INFO_BIT),\n-       showCode((mode&SHOW_CODE_BIT)==SHOW_CODE_BIT),\n-       profile((mode&PROFILE_BIT)==PROFILE_BIT){\n+       trace((configBits&TRACE_BIT)==TRACE_BIT),\n+       traceCopies((configBits&TRACE_COPIES_BIT)==TRACE_COPIES_BIT),\n+       traceEnqueues((configBits&TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n+       traceCalls((configBits&TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n+       traceSkippedCopies((configBits&TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT),\n+       info((configBits&INFO_BIT)==INFO_BIT),\n+       showCode((configBits&SHOW_CODE_BIT)==SHOW_CODE_BIT),\n+       profile((configBits&PROFILE_BIT)==PROFILE_BIT),\n+       platform((configBits&0xf)),\n+       device((configBits&0xf0)>>4)\n+\n+       {\n@@ -55,0 +59,2 @@\n+          std::cout << \"native platform \" << platform<<std::endl;\n+          std::cout << \"native device \" << device<<std::endl;\n@@ -215,2 +221,2 @@\n-OpenCLBackend::OpenCLBackend(int mode, int platform, int device )\n-        : Backend(mode), openclConfig(mode), openclQueue(this) {\n+OpenCLBackend::OpenCLBackend(int configBits )\n+        : Backend(configBits), openclConfig(mode), openclQueue(this) {\n@@ -615,1 +621,1 @@\n-long getOpenCLBackend(int mode, int platform, int device, int unused) {\n+long getOpenCLBackend(int configBits) {\n@@ -618,1 +624,1 @@\n-    return reinterpret_cast<long>(new OpenCLBackend(mode, platform, device));\n+    return reinterpret_cast<long>(new OpenCLBackend(configBits));\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend.cpp","additions":23,"deletions":17,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        int mode;\n+        int configBits;\n@@ -81,0 +81,2 @@\n+        int platform; \/\/0..15\n+        int device; \/\/0..15\n@@ -165,1 +167,1 @@\n-    OpenCLBackend(int mode, int platform, int device);\n+    OpenCLBackend(int configBits);\n@@ -183,1 +185,1 @@\n-extern \"C\" long getOpenCLBackend(int mode, int platform, int device, int unused);\n+extern \"C\" long getOpenCLBackend(int configBits);\n","filename":"hat\/backends\/ffi\/opencl\/include\/opencl_backend.h","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -8,1 +8,4 @@\n-    record Bit(int index, String name){};\n+    record Bit(int index, String name) {\n+    }\n+\n+    ;\n@@ -29,13 +32,13 @@\n-      \"GPU\",\n-      \"CPU\",\n-      \"MINIMIZE_COPIES\",\n-      \"TRACE\",\n-      \"PROFILE\",\n-      \"SHOW_CODE\",\n-      \"SHOW_KERNEL_MODEL\",\n-      \"SHOW_COMPUTE_MODEL\",\n-      \"INFO\",\n-      \"TRACE_COPIES\",\n-      \"TRACE_SKIPPED_COPIES\",\n-      \"TRACE_ENQUEUES\",\n-      \"TRACE_CALLS\"\n+            \"GPU\",\n+            \"CPU\",\n+            \"MINIMIZE_COPIES\",\n+            \"TRACE\",\n+            \"PROFILE\",\n+            \"SHOW_CODE\",\n+            \"SHOW_KERNEL_MODEL\",\n+            \"SHOW_COMPUTE_MODEL\",\n+            \"INFO\",\n+            \"TRACE_COPIES\",\n+            \"TRACE_SKIPPED_COPIES\",\n+            \"TRACE_ENQUEUES\",\n+            \"TRACE_CALLS\"\n@@ -43,0 +46,1 @@\n+\n@@ -78,1 +82,1 @@\n-                return new Config(1<<(i+START_BIT_IDX));\n+                return new Config(1 << (i + START_BIT_IDX));\n@@ -82,7 +86,18 @@\n-                if (name.contains(\",\")) {\n-                    List<Config> configs = new ArrayList<>();\n-                    Arrays.stream(name.split(\",\")).forEach(opt ->\n-                            configs.add(of(opt))\n-                    );\n-                    return of(configs);\n-                } else {\n+\n+\n+        if (name.contains(\",\")) {\n+            List<Config> configs = new ArrayList<>();\n+            Arrays.stream(name.split(\",\")).forEach(opt ->\n+                    configs.add(of(opt))\n+            );\n+            return of(configs);\n+        }else if (name.contains(\":\")){\n+            var tokens=name.split(\":\");\n+            if (tokens.length == 2) {\n+                if (tokens[0].equals(\"PLATFORM\")) {\n+                    int value = Integer.parseInt(tokens[1]);\n+                    return new Config(value);\n+                }else  if (tokens[0].equals(\"DEVICE\")) {\n+                    int value = Integer.parseInt(tokens[1]);\n+                    return new Config(value<<4);\n+                }else{\n@@ -92,0 +107,8 @@\n+            }else{\n+                System.out.println(\"Unexpected opt '\" + name + \"'\");\n+                return Config.of(0);\n+            }\n+        } else {\n+            System.out.println(\"Unexpected opt '\" + name + \"'\");\n+            return Config.of(0);\n+        }\n@@ -97,0 +120,1 @@\n+\n@@ -100,0 +124,1 @@\n+\n@@ -103,0 +128,1 @@\n+\n@@ -106,0 +132,1 @@\n+\n@@ -109,0 +136,1 @@\n+\n@@ -117,0 +145,1 @@\n+\n@@ -124,0 +153,1 @@\n+\n@@ -131,0 +161,1 @@\n+\n@@ -138,0 +169,1 @@\n+\n@@ -145,0 +177,1 @@\n+\n@@ -152,0 +185,1 @@\n+\n@@ -159,0 +193,1 @@\n+\n@@ -167,0 +202,1 @@\n+\n@@ -174,0 +210,1 @@\n+\n@@ -181,0 +218,1 @@\n+\n@@ -189,1 +227,1 @@\n-            if ((bits&(1<<bitIdx))==(1<<bitIdx)) {\n+            if ((bits & (1 << bitIdx)) == (1 << bitIdx)) {\n@@ -193,1 +231,1 @@\n-                builder.append(bitNames[bitIdx-START_BIT_IDX]);\n+                builder.append(bitNames[bitIdx - START_BIT_IDX]);\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/Config.java","additions":62,"deletions":24,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    public long getBackend(int mode, int platform, int device, int unused) {\n+    public long getBackend(int configBits) {\n@@ -45,1 +45,1 @@\n-            backendHandle = (long) getBackend_MH.invoke(mode, platform, device, unused);\n+            backendHandle = (long) getBackend_MH.invoke(configBits);\n@@ -57,2 +57,2 @@\n-        getBackend_MH  =  nativeLibrary.longFunc(\"getOpenCLBackend\",JAVA_INT,JAVA_INT, JAVA_INT, JAVA_INT);\n-        getBackend(config.bits(),0, 0, 0 );\n+        getBackend_MH  =  nativeLibrary.longFunc(\"getOpenCLBackend\",JAVA_INT);\n+        getBackend(config.bits());\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-     *    |    +--repo\/                 All downloaded maven assets\n+     *    |    +--repo\/                 All downloaded maven assets (if any)\n@@ -45,0 +45,13 @@\n+     *    +--wrap\/\n+     *    |    +--wrap\/                 All downloaded maven assets\n+     *    |    |    +--wrap\/                (*)\n+     *    |    |    +--clwrap\/              (*)\n+     *    |    |    +--glwrap\/              (*)\n+     *    |    |    +--cuwrap\/              (*)\n+     *    |    |\n+     *    |\n+     *    +--extractions\/\n+     *    |    +--opencl\/ \n+     *    |    +--opengl\/\n+     *    |    +--cuda\/\n+     *    |\n@@ -59,6 +72,6 @@\n-     *    |    |    +--opencl                (*)\n-     *    |    |    +--ptx                   (*)\n-     *    |    |    +--mock                  (*)\n-     *    |    |    +--spirv                 (*)\n-     *    |    |    +--cuda                  (*)\n-     *    |    |    +--hip                   (*)\n+     *    |         +--opencl                (*)\n+     *    |         +--ptx                   (*)\n+     *    |         +--mock                  (*)\n+     *    |         +--spirv                 (*)\n+     *    |         +--cuda                  (*)\n+     *    |         +--hip                   (*)\n@@ -67,5 +80,7 @@\n-     *    |    +--mandel                (*)\n-     *    |    +--squares               (*)\n-     *    |    +--heal                  (*)\n-     *    |    +--life                  (*)\n-     *    |    +--violajones            (*)\n+     *    |    +--mandel                     (*)\n+     *    |    +--squares                    (*)\n+     *    |    +--heal                       (*)\n+     *    |    +--life                       (*)\n+     *    |    +--nbody                      (*)\n+     *    |    +--experiments                (*)\n+     *    |    +--violajones                 (*)\n@@ -110,1 +125,1 @@\n-            .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\", \"jdk.internal.vm.annotation\")\n+          \/\/  .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\", \"jdk.internal.vm.annotation\")\n","filename":"hat\/bld","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,5 @@\n+--add-modules jdk.incubator.code\n+--enable-preview\n+-cp build\/hat-core-1.0.jar:build\/hat-backend-ffi-opencl-1.0.jar\n+--enable-native-access=ALL-UNNAMED\n+-Djava.library.path=build\n","filename":"hat\/bldr\/tst","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.vm.annotation.Stable;\n+\/\/import jdk.internal.vm.annotation.Stable;\n@@ -39,1 +39,1 @@\n-    @Stable\n+   \/\/ @Stable\n@@ -41,1 +41,1 @@\n-    @Stable\n+  \/\/  @Stable\n@@ -43,1 +43,1 @@\n-    @Stable\n+  \/\/  @Stable\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/AbstractSegmentMapper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import jdk.internal.ValueBased;\n+\/\/import jdk.internal.ValueBased;\n+\/\/import jdk.internal.ValueBased;\n@@ -77,1 +78,1 @@\n-@ValueBased\n+\/\/@ValueBased\n@@ -105,2 +106,2 @@\n-        Annotation valueBased = Annotation.of(desc(ValueBased.class));\n-        cb.with(RuntimeVisibleAnnotationsAttribute.of(valueBased));\n+       \/\/ Annotation valueBased = Annotation.of(desc(ValueBased.class));\n+        \/\/cb.with(RuntimeVisibleAnnotationsAttribute.of(valueBased));\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/ByteCodeGenerator.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.ValueBased;\n+\/\/import jdk.internal.ValueBased;\n@@ -43,1 +43,1 @@\n-@ValueBased\n+\/\/@ValueBased\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/MapperCache.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.internal.vm.annotation.Stable;\n+\/\/import jdk.internal.vm.annotation.Stable;\n@@ -66,1 +66,1 @@\n-    @Stable\n+   \/\/ @Stable\n@@ -68,1 +68,1 @@\n-    @Stable\n+   \/\/ @Stable\n@@ -70,1 +70,1 @@\n-    @Stable\n+   \/\/ @Stable\n@@ -72,1 +72,1 @@\n-    @Stable\n+   \/\/ @Stable\n@@ -75,1 +75,1 @@\n-    @Stable\n+   \/\/ @Stable\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/SegmentInterfaceMapper.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.ValueBased;\n+\/\/import jdk.internal.ValueBased;\n@@ -56,1 +56,1 @@\n-@ValueBased\n+\/\/@ValueBased\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/accessor\/Accessors.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+  var verbose = false;\n@@ -60,2 +61,2 @@\n-     .verbose()\n-     .add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n+     .verbose(verbose)\n+     \/\/.add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n","filename":"hat\/hatrun","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-                        <arg>--add-exports=java.base\/jdk.internal=ALL-UNNAMED<\/arg>\n-                        <arg>--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED<\/arg>\n+                        <!-- <arg>- -add-exports=java.base\/jdk.internal=ALL-UNNAMED<\/arg> -->\n+                        <!-- <arg>- -add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED<\/arg> -->\n","filename":"hat\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+package tst;\n+import hat.Accelerator;\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.backend.ffi.OpenCLBackend;\n+import hat.buffer.S32Array;\n+import static hat.ifacemapper.MappableIface.*;\n+import jdk.incubator.code.CodeReflection;\n+\n+import java.lang.invoke.MethodHandles;\n+\n+import static hat.backend.ffi.Config.*;\n+\n+public class MinBufferTest {\n+    public static class Compute {\n+        @CodeReflection\n+        public static void inc(@RO KernelContext kc, @RW S32Array s32Array, int len) {\n+            if (kc.x < kc.maxX) {\n+                s32Array.array(kc.x, s32Array.array(kc.x) + 1);\n+            }\n+        }\n+\n+        @CodeReflection\n+        public static void add(ComputeContext cc, @RW S32Array s32Array, int len, int n) {\n+            for (int i = 0; i < n; i++) {\n+                cc.dispatchKernel(len, kc -> inc(kc, s32Array, len));\n+                System.out.println(i);\/\/s32Array.array(0));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),\n+                new OpenCLBackend(of(\n+                      \/\/  TRACE(),\n+                        TRACE_COPIES(),\n+                        GPU(),\n+                        MINIMIZE_COPIES()\n+                ))\n+\n+        );\n+        int len = 10000000;\n+        int valueToAdd = 10;\n+        S32Array s32Array = S32Array.create(accelerator, len,i->i);\n+        accelerator.compute(\n+                cc -> Compute.add(cc, s32Array, len, valueToAdd)\n+        );\n+        \/\/ Quite an expensive way of adding 20 to each array alement\n+        for (int i = 0; i < 20; i++) {\n+            System.out.println(i + \"=\" + s32Array.array(i));\n+        }\n+    }\n+}\n","filename":"hat\/tst\/MinBufferTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}