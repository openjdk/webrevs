{"files":[{"patch":"@@ -7,0 +7,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -71,1 +72,1 @@\n-    private final MethodHandle  allocatorGetInfo,\n+    private static final MethodHandle  allocatorGetInfo,\n@@ -93,16 +94,1 @@\n-    private OnnxRuntime() {\n-        arena = Arena.ofAuto();\n-        library = SymbolLookup.libraryLookup(LIB_PATH, arena);\n-        ret = arena.allocate(ADDR_WITH_ADDR);\n-        try {\n-            \/\/  const OrtApi* ortPtr = OrtGetApiBase()->GetApi((uint32_t)apiVersion);\n-            var apiBase = (MemorySegment)LINKER.downcallHandle(\n-                    library.findOrThrow(\"OrtGetApiBase\"),\n-                    FunctionDescriptor.of(ADDR_WITH_ADDR)).invokeExact();\n-            runtimeAddress = MemorySegment.ofAddress((long)LINKER.downcallHandle(\n-                            (MemorySegment)VH_ADDRESS.get(apiBase, 0),\n-                            FunctionDescriptor.of(JAVA_LONG, JAVA_INT)).invokeExact(ORT_VERSION))\n-                    .reinterpret(285 * ADDRESS.byteSize());\n-        } catch (Throwable t) {\n-            throw wrap(t);\n-        }\n+    static {\n@@ -130,0 +116,18 @@\n+    }\n+\n+    private OnnxRuntime() {\n+        arena = Arena.ofAuto();\n+        library = SymbolLookup.libraryLookup(LIB_PATH, arena);\n+        ret = arena.allocate(ADDR_WITH_ADDR);\n+        try {\n+            \/\/  const OrtApi* ortPtr = OrtGetApiBase()->GetApi((uint32_t)apiVersion);\n+            var apiBase = (MemorySegment)LINKER.downcallHandle(\n+                    library.findOrThrow(\"OrtGetApiBase\"),\n+                    FunctionDescriptor.of(ADDR_WITH_ADDR)).invokeExact();\n+            runtimeAddress = MemorySegment.ofAddress((long)LINKER.downcallHandle(\n+                            (MemorySegment)VH_ADDRESS.get(apiBase, 0),\n+                            FunctionDescriptor.of(JAVA_LONG, JAVA_INT)).invokeExact(ORT_VERSION))\n+                    .reinterpret(285 * ADDRESS.byteSize());\n+        } catch (Throwable t) {\n+            throw wrap(t);\n+        }\n@@ -131,2 +135,2 @@\n-            envAddress = retAddr(createEnv.invokeExact(LOG_LEVEL, arena.allocateFrom(LOG_ID), ret));\n-            defaultAllocatorAddress = retAddr(getAllocatorWithDefaultOptions.invokeExact(ret));\n+            envAddress = retAddr(createEnv.invokeExact(runtimeAddress, LOG_LEVEL, arena.allocateFrom(LOG_ID), ret));\n+            defaultAllocatorAddress = retAddr(getAllocatorWithDefaultOptions.invokeExact(runtimeAddress, ret));\n@@ -138,1 +142,1 @@\n-                checkStatus(releaseEnv.invokeExact(envAddress, ret));\n+                checkStatus(releaseEnv.invokeExact(runtimeAddress, envAddress, ret));\n@@ -145,3 +149,12 @@\n-    private MethodHandle handle(int methodIndex, MemoryLayout... args) {\n-        var mh = LINKER.downcallHandle((MemorySegment)VH_ADDRESS.get(runtimeAddress, methodIndex * ADDRESS.byteSize()),\n-                                     FunctionDescriptor.of(ADDRESS, args));\n+    private static MethodHandle handle(int methodIndex, MemoryLayout... args) {\n+        \/\/ create a \"virtual\" downcall handle with given function descriptor (MS, ...)->R\n+        var mh = LINKER.downcallHandle(FunctionDescriptor.of(ADDRESS, args));\n+        \/\/ obtain an indexed address method handle getter - (MS, long, long)->MS\n+        var addressGetter = ADDRESS.arrayElementVarHandle()\n+                .toMethodHandle(VarHandle.AccessMode.GET);\n+        \/\/ inject provided method index into the address method handle getter - (MS)->MS\n+        addressGetter = MethodHandles.insertArguments(addressGetter, 1, 0L, methodIndex);\n+        \/\/ filter address argument of virtual downcall handle using the address method handle getter - (MS, ...)->R\n+        \/\/ The resulting method handle expects 'runtimeAddress' as first parameter, and will access it accordingly\n+        \/\/ to find the target address for the downcall\n+        mh = MethodHandles.filterArguments(mh, 0, addressGetter);\n@@ -175,1 +188,1 @@\n-            return new Session(retAddr(createSession.invokeExact(envAddress, arena.allocateFrom(modelPath), options.sessionOptionsAddress, ret)));\n+            return new Session(retAddr(createSession.invokeExact(runtimeAddress, envAddress, arena.allocateFrom(modelPath), options.sessionOptionsAddress, ret)));\n@@ -187,1 +200,1 @@\n-            return new Session(retAddr(createSessionFromArray.invokeExact(envAddress, MemorySegment.ofBuffer(model.rewind()), (long)model.limit(), options.sessionOptionsAddress, ret)));\n+            return new Session(retAddr(createSessionFromArray.invokeExact(runtimeAddress, envAddress, MemorySegment.ofBuffer(model.rewind()), (long)model.limit(), options.sessionOptionsAddress, ret)));\n@@ -203,1 +216,1 @@\n-                return retInt(sessionGetInputCount.invokeExact(sessionAddress, ret));\n+                return retInt(sessionGetInputCount.invokeExact(runtimeAddress, sessionAddress, ret));\n@@ -211,1 +224,1 @@\n-                return retString(sessionGetInputName.invokeExact(sessionAddress, inputIndex, defaultAllocatorAddress, ret));\n+                return retString(sessionGetInputName.invokeExact(runtimeAddress, sessionAddress, inputIndex, defaultAllocatorAddress, ret));\n@@ -219,1 +232,1 @@\n-                return retInt(sessionGetOutputCount.invokeExact(sessionAddress, ret));\n+                return retInt(sessionGetOutputCount.invokeExact(runtimeAddress, sessionAddress, ret));\n@@ -227,1 +240,1 @@\n-                return retString(sessionGetOutputName.invokeExact(sessionAddress, inputIndex, defaultAllocatorAddress, ret));\n+                return retString(sessionGetOutputName.invokeExact(runtimeAddress, sessionAddress, inputIndex, defaultAllocatorAddress, ret));\n@@ -254,1 +267,1 @@\n-                checkStatus(run.invokeExact(sessionAddress, runOptions, inputNames, inputs, (long)inputLen, outputNames, (long)outputLen, outputs));\n+                checkStatus(run.invokeExact(runtimeAddress, sessionAddress, runOptions, inputNames, inputs, (long)inputLen, outputNames, (long)outputLen, outputs));\n@@ -268,1 +281,1 @@\n-                checkStatus(releaseSession.invokeExact(sessionAddress));\n+                checkStatus(releaseSession.invokeExact(runtimeAddress, sessionAddress));\n@@ -277,1 +290,1 @@\n-            var allocatorInfo = retAddr(allocatorGetInfo.invokeExact(defaultAllocatorAddress, ret));\n+            var allocatorInfo = retAddr(allocatorGetInfo.invokeExact(runtimeAddress, defaultAllocatorAddress, ret));\n@@ -279,1 +292,1 @@\n-            return retAddr(createTensorWithDataAsOrtValue.invokeExact(allocatorInfo, flatData, flatData.byteSize(), shapeAddr, (long)shape.length, elementType.id, ret));\n+            return retAddr(createTensorWithDataAsOrtValue.invokeExact(runtimeAddress, allocatorInfo, flatData, flatData.byteSize(), shapeAddr, (long)shape.length, elementType.id, ret));\n@@ -287,2 +300,2 @@\n-            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(tensorAddr, ret));\n-            return Tensor.ElementType.fromOnnxId(retInt(getTensorElementType.invokeExact(infoAddr, ret)));\n+            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(runtimeAddress, tensorAddr, ret));\n+            return Tensor.ElementType.fromOnnxId(retInt(getTensorElementType.invokeExact(runtimeAddress, infoAddr, ret)));\n@@ -296,2 +309,2 @@\n-            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(tensorAddr, ret));\n-            long dims = retLong(getDimensionsCount.invokeExact(infoAddr, ret));\n+            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(runtimeAddress, tensorAddr, ret));\n+            long dims = retLong(getDimensionsCount.invokeExact(runtimeAddress, infoAddr, ret));\n@@ -299,1 +312,1 @@\n-            checkStatus(getDimensions.invokeExact(infoAddr, shape, dims));\n+            checkStatus(getDimensions.invokeExact(runtimeAddress, infoAddr, shape, dims));\n@@ -308,4 +321,4 @@\n-            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(tensorAddr, ret));\n-            long size = retLong(getTensorShapeElementCount.invokeExact(infoAddr, ret))\n-                    * Tensor.ElementType.fromOnnxId(retInt(getTensorElementType.invokeExact(infoAddr, ret))).size();\n-            return retAddr(getTensorMutableData.invokeExact(tensorAddr, ret))\n+            var infoAddr = retAddr(getTensorTypeAndShape.invokeExact(runtimeAddress, tensorAddr, ret));\n+            long size = retLong(getTensorShapeElementCount.invokeExact(runtimeAddress, infoAddr, ret))\n+                    * Tensor.ElementType.fromOnnxId(retInt(getTensorElementType.invokeExact(runtimeAddress, infoAddr, ret))).size();\n+            return retAddr(getTensorMutableData.invokeExact(runtimeAddress, tensorAddr, ret))\n@@ -321,1 +334,1 @@\n-            return new SessionOptions(retAddr(createSessionOptions.invokeExact(ret)));\n+            return new SessionOptions(retAddr(createSessionOptions.invokeExact(runtimeAddress, ret)));\n@@ -338,1 +351,1 @@\n-                checkStatus(setInterOpNumThreads.invokeExact(sessionOptionsAddress, numThreads));\n+                checkStatus(setInterOpNumThreads.invokeExact(runtimeAddress, sessionOptionsAddress, numThreads));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":57,"deletions":44,"binary":false,"changes":101,"status":"modified"}]}