{"files":[{"patch":"@@ -89,1 +89,1 @@\n-        identifier(\"vstore\" + hatVectorStoreView.storeN())\n+        identifier(\"vstore\" + hatVectorStoreView.vectorN())\n@@ -137,1 +137,1 @@\n-        identifier(\"vload\" + hatVectorLoadOp.loadN())\n+        identifier(\"vload\" + hatVectorLoadOp.vectorN())\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLHATKernelBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-        identifier(\"vstore\" + hatVectorStoreView.storeN())\n+        identifier(\"vstore\" + hatVectorStoreView.vectorN())\n@@ -137,1 +137,1 @@\n-        identifier(\"vload\" + hatVectorLoadOp.loadN())\n+        identifier(\"vload\" + hatVectorLoadOp.vectorN())\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLHatKernelBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    private final int vectorN;\n@@ -56,1 +55,3 @@\n-        super(varName, operands);\n+        int l = typeElement.toString().length();\n+        int vectorN = Integer.parseInt(typeElement.toString().substring(l - 1, l));\n+        super(varName, typeElement, vectorN, operands);\n@@ -59,2 +60,1 @@\n-        int l = typeElement.toString().length();\n-        vectorN = Integer.parseInt(typeElement.toString().substring(l - 1, l));\n+\n@@ -67,1 +67,0 @@\n-        this.vectorN = op.vectorN;\n@@ -75,5 +74,0 @@\n-  \/\/  @Override\n-    \/\/public Map<String, Object> externalize() {\n-     \/\/   return Map.of(\"hat.dialect.floatNOp.\" + varName(), elementType);\n-   \/\/ }\n-\n@@ -84,10 +78,0 @@\n-    public int vectorN() {\n-        return vectorN;\n-    }\n-\n-    public String buildType() {\n-        if (elementType.toString().startsWith(\"hat.buffer.Float\")) {\n-            return \"float\" + vectorN;\n-        }\n-        throw new RuntimeException(\"Unexpected vector type \" + elementType);\n-    }\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorBinaryOp.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, loadN, operands);\n@@ -74,16 +74,0 @@\n-    public TypeElement vectorType() {\n-        return vectorType;\n-    }\n-\n-    public int loadN() {\n-        return loadN;\n-    }\n-\n-    public String buildType() {\n-        \/\/ floatN\n-        if (vectorType.toString().startsWith(\"hat.buffer.Float\")) {\n-            return \"float\" + loadN;\n-        }\n-        throw new RuntimeException(\"Unexpected vector type \" + vectorType);\n-    }\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorLoadOp.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, loadN, operands);\n@@ -68,8 +68,0 @@\n-    public String buildType() {\n-        \/\/ floatN\n-        if (typeElement.toString().startsWith(\"hat.buffer.Float\")) {\n-            return \"float\" + loadN;\n-        }\n-        throw new RuntimeException(\"Unexpected vector type \" + typeElement);\n-    }\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorMakeOfOp.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(\"\", operands);\n+        super(\"\", typeElement, loadN, operands);\n@@ -68,7 +68,0 @@\n-    public String buildType() {\n-        \/\/ floatN\n-        if (typeElement.toString().startsWith(\"hat.buffer.Float\")) {\n-            return \"float\" + loadN;\n-        }\n-        throw new RuntimeException(\"Unexpected vector type \" + typeElement);\n-    }\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorOfOp.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.code.TypeElement;\n@@ -35,0 +36,2 @@\n+    private final TypeElement typeElement;\n+    private final int vectorN;\n@@ -36,1 +39,1 @@\n-    public HATVectorOp(String varName, List<Value> operands) {\n+    public HATVectorOp(String varName, TypeElement typeElement, int vectorN, List<Value> operands) {\n@@ -39,0 +42,2 @@\n+        this.typeElement = typeElement;\n+        this.vectorN = vectorN;\n@@ -44,0 +49,2 @@\n+        this.typeElement = that.typeElement;\n+        this.vectorN = that.vectorN;\n@@ -77,0 +84,12 @@\n+\n+    public String buildType() {\n+        \/\/ floatN\n+        if (typeElement.toString().startsWith(\"hat.buffer.Float\")) {\n+            return \"float\" + vectorN;\n+        }\n+        throw new RuntimeException(\"Unexpected vector type \" + typeElement);\n+    }\n+\n+    public int vectorN() {\n+        return vectorN;\n+    }\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorOp.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, -1, operands);\n@@ -69,7 +69,1 @@\n-        return switch (lane) {\n-            case 0 -> \"x\";\n-            case 1 -> \"y\";\n-            case 2 -> \"z\";\n-            case 3 -> \"w\";\n-            default -> throw new InternalError(\"Invalid lane: \" + lane);\n-        };\n+        return super.mapLane(lane);\n@@ -77,0 +71,1 @@\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorSelectLoadOp.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, -1, operands);\n@@ -73,7 +73,1 @@\n-        return switch (lane) {\n-            case 0 -> \"x\";\n-            case 1 -> \"y\";\n-            case 2 -> \"z\";\n-            case 3 -> \"w\";\n-            default -> throw new InternalError(\"Invalid lane: \" + lane);\n-        };\n+        return super.mapLane(lane);\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorSelectStoreOp.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        super(varName, operands);\n+        super(varName, elementType, storeN, operands);\n@@ -74,4 +74,0 @@\n-    public int storeN() {\n-        return storeN;\n-    }\n-\n@@ -82,3 +78,0 @@\n-    public String buildType() {\n-        return vectorType.type();\n-    }\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorStoreView.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, 0, operands);\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorVarLoadOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        super(varName, operands);\n+        super(varName, typeElement, loadN, operands);\n@@ -69,0 +69,1 @@\n+    @Override\n@@ -76,1 +77,0 @@\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HATVectorVarOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}