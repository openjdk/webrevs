{"files":[{"patch":"@@ -258,18 +258,2 @@\n-    public CudaHATKernelBuilder hatVectorOfOps(ScopedCodeBuilderContext buildContext, HATVectorOfOp hatVectorOp) {\n-        identifier(\"make_\" + hatVectorOp.buildType()).oparen();\n-\n-        List<Value> inputOperands = hatVectorOp.operands();\n-        int i;\n-        for (i = 0; i < (inputOperands.size() - 1); i++) {\n-            var operand = inputOperands.get(i);\n-            if ((operand instanceof Op.Result r)) {\n-                recurse(buildContext, r.op());\n-            }\n-            comma().space();\n-        }\n-        \/\/ Last parameter\n-        var operand = inputOperands.get(i);\n-        if ((operand instanceof Op.Result r)) {\n-            recurse(buildContext, r.op());\n-        }\n-        cparen();\n+    public CudaHATKernelBuilder genVectorIdentifier(ScopedCodeBuilderContext builderContext, HATVectorOfOp hatVectorOfOp) {\n+        identifier(\"make_\" + hatVectorOfOp.buildType()).oparen();\n@@ -278,1 +262,0 @@\n-\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaHATKernelBuilder.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -211,18 +211,2 @@\n-    public OpenCLHATKernelBuilder hatVectorOfOps(ScopedCodeBuilderContext buildContext, HATVectorOfOp hatVectorOp) {\n-        oparen().identifier(hatVectorOp.buildType()).cparen().oparen();\n-\n-        List<Value> inputOperands = hatVectorOp.operands();\n-        int i;\n-        for (i = 0; i < (inputOperands.size() - 1); i++) {\n-            var operand = inputOperands.get(i);\n-            if ((operand instanceof Op.Result r)) {\n-                recurse(buildContext, r.op());\n-            }\n-            comma().space();\n-        }\n-        \/\/ Last parameter\n-        var operand = inputOperands.get(i);\n-        if ((operand instanceof Op.Result r)) {\n-            recurse(buildContext, r.op());\n-        }\n-        cparen();\n+    public OpenCLHATKernelBuilder genVectorIdentifier(ScopedCodeBuilderContext builderContext, HATVectorOfOp hatVectorOfOp) {\n+        oparen().identifier(hatVectorOfOp.buildType()).cparen().oparen();\n@@ -232,1 +216,0 @@\n-\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLHATKernelBuilder.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -211,18 +211,2 @@\n-    public OpenCLHatKernelBuilder hatVectorOfOps(ScopedCodeBuilderContext buildContext, HATVectorOfOp hatVectorOp) {\n-        oparen().identifier(hatVectorOp.buildType()).cparen().oparen();\n-\n-        List<Value> inputOperands = hatVectorOp.operands();\n-        int i;\n-        for (i = 0; i < (inputOperands.size() - 1); i++) {\n-            var operand = inputOperands.get(i);\n-            if ((operand instanceof Op.Result r)) {\n-                recurse(buildContext, r.op());\n-            }\n-            comma().space();\n-        }\n-        \/\/ Last parameter\n-        var operand = inputOperands.get(i);\n-        if ((operand instanceof Op.Result r)) {\n-            recurse(buildContext, r.op());\n-        }\n-        cparen();\n+    public OpenCLHatKernelBuilder genVectorIdentifier(ScopedCodeBuilderContext builderContext, HATVectorOfOp hatVectorOfOp) {\n+        oparen().identifier(hatVectorOfOp.buildType()).cparen().oparen();\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLHatKernelBuilder.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -285,0 +285,24 @@\n+    public abstract T genVectorIdentifier(ScopedCodeBuilderContext builderContext, HATVectorOfOp hatVectorOfOp);\n+\n+    @Override\n+    public T hatVectorOfOps(ScopedCodeBuilderContext buildContext, HATVectorOfOp hatVectorOp) {\n+        genVectorIdentifier(buildContext, hatVectorOp);\n+\n+        List<Value> inputOperands = hatVectorOp.operands();\n+        int i;\n+        for (i = 0; i < (inputOperands.size() - 1); i++) {\n+            var operand = inputOperands.get(i);\n+            if ((operand instanceof Op.Result r)) {\n+                recurse(buildContext, r.op());\n+            }\n+            comma().space();\n+        }\n+        \/\/ Last parameter\n+        var operand = inputOperands.get(i);\n+        if ((operand instanceof Op.Result r)) {\n+            recurse(buildContext, r.op());\n+        }\n+        cparen();\n+        return self();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}