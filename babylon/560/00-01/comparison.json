{"files":[{"patch":"@@ -192,0 +192,1 @@\n+            t.printStackTrace();\n@@ -205,0 +206,1 @@\n+            t.printStackTrace();\n","filename":"hat\/core\/src\/main\/java\/hat\/ComputeContext.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.dialect.HatGlobalThreadIdOp;\n@@ -33,0 +34,1 @@\n+import hat.dialect.HatThreadOP;\n@@ -189,0 +191,5 @@\n+    private boolean isMethodFromHatKernelContext(CoreOp.VarAccessOp.VarLoadOp varLoadOp) {\n+        String kernelContextCanonicalName = hat.KernelContext.class.getName();\n+        return varLoadOp.resultType().toString().equals(kernelContextCanonicalName);\n+    }\n+\n@@ -193,0 +200,4 @@\n+    private boolean isFieldLoadThreadId(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"x\") || fieldLoadOp.fieldDescriptor().name().equals(\"y\") ||  fieldLoadOp.fieldDescriptor().name().equals(\"z\");\n+    }\n+\n@@ -233,2 +244,2 @@\n-                        List<Value> inputOperandsAdd = varOp.operands();\n-                        for (Value inputOperand : inputOperandsAdd) {\n+                        List<Value> inputOperandsVarOp = varOp.operands();\n+                        for (Value inputOperand : inputOperandsVarOp) {\n@@ -265,2 +276,2 @@\n-                        List<Value> inputOperandsAdd = invokeOp.operands();\n-                        List<Value> outputOperandsAdd = context.getValues(inputOperandsAdd);\n+                        List<Value> inputOperandsVarOp = invokeOp.operands();\n+                        List<Value> outputOperandsVarOp = context.getValues(inputOperandsVarOp);\n@@ -269,1 +280,1 @@\n-                            memoryOp = new HatLocalVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsAdd);\n+                            memoryOp = new HatLocalVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n@@ -271,1 +282,1 @@\n-                            memoryOp = new HatPrivateVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsAdd);\n+                            memoryOp = new HatPrivateVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n@@ -292,0 +303,58 @@\n+    public void dialectifyToHatThreadIds() {\n+\n+        CoreOp.FuncOp funcOp = entrypoint.funcOp();\n+        Stream<CodeElement<?, ?>> elements = entrypoint.funcOp().elements()\n+                .mapMulti((codeElement, consumer) -> {\n+                    if (codeElement instanceof JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+                        List<Value> operands = fieldLoadOp.operands();\n+                        for (Value inputOperand : operands) {\n+                            if (inputOperand instanceof Op.Result result) {\n+                                if (result.op() instanceof CoreOp.VarAccessOp.VarLoadOp varLoadOp) {\n+                                    if (isMethodFromHatKernelContext(varLoadOp) && isFieldLoadThreadId(fieldLoadOp)) {\n+                                        consumer.accept(fieldLoadOp);\n+                                        consumer.accept(varLoadOp);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                });\n+\n+        Set<CodeElement<?, ?>> nodesInvolved = elements.collect(Collectors.toSet());\n+        if (nodesInvolved.isEmpty()) {\n+            \/\/ No memory nodes involved\n+            return;\n+        }\n+\n+        funcOp = funcOp.transform((blockBuilder, op) -> {\n+            CopyContext context = blockBuilder.context();\n+            if (!nodesInvolved.contains(op)) {\n+                blockBuilder.op(op);\n+            } else if (op instanceof CoreOp.VarAccessOp.VarLoadOp varLoadOp) {\n+                \/\/ pass value\n+                context.mapValue(varLoadOp.result(), context.getValue(varLoadOp.operands().getFirst()));\n+            } else if (op instanceof JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+                List<Value> operands = fieldLoadOp.operands();\n+                for (Value operand : operands) {\n+                    if (operand instanceof Op.Result r && r.op() instanceof CoreOp.VarAccessOp.VarLoadOp varLoadOp) {\n+                        List<Value> varLoadOperands = varLoadOp.operands();\n+                        List<Value> outputOperands = context.getValues(varLoadOperands);\n+\n+                        int dim = 0;\n+                        if (fieldLoadOp.fieldDescriptor().name().equals(\"y\")) {\n+                            dim = 1;\n+                        } else if (fieldLoadOp.fieldDescriptor().name().equals(\"z\")) {\n+                            dim = 2;\n+                        }\n+                        HatThreadOP threadOP = new HatGlobalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                        Op.Result threadResult = blockBuilder.op(threadOP);\n+                        context.mapValue(fieldLoadOp.result(), threadResult);\n+                    }\n+                }\n+            }\n+            return blockBuilder;\n+        });\n+        \/\/IO.println(\"[INFO] Code model: \" + funcOp.toText());\n+        entrypoint.funcOp(funcOp);\n+    }\n+\n@@ -297,0 +366,1 @@\n+        dialectifyToHatThreadIds();\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/KernelCallGraph.java","additions":76,"deletions":6,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.dialect.HatGlobalThreadIdOp;\n@@ -96,0 +97,2 @@\n+    T hatGlobalThreadOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp hatGlobalThreadIdOp);\n+\n@@ -126,0 +129,1 @@\n+            case HatGlobalThreadIdOp $ -> hatGlobalThreadOp(buildContext, $);\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/BabylonOpBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import hat.NDRange;\n@@ -29,0 +28,1 @@\n+import hat.dialect.HatGlobalThreadIdOp;\n@@ -78,0 +78,1 @@\n+\n@@ -152,0 +153,6 @@\n+    @Override\n+    public T hatGlobalThreadOp (ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n+        globalId(globalThreadIdOp.getDimension());\n+        return self();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.Stack;\n@@ -136,1 +133,0 @@\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/HATCodeBuilderWithContext.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+\n+public class HatGlobalThreadIdOp extends HatThreadOP {\n+\n+    public static final String INTRINSIC_NAME = \"gix\";\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"GlobalThreadId\";\n+\n+    public HatGlobalThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatGlobalThreadIdOp(HatGlobalThreadIdOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatGlobalThreadIdOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalThreadIdOp.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+\n+public abstract class HatThreadOP extends HatOP {\n+\n+    private final int dimension;\n+\n+    public HatThreadOP(String name, int dimension, List<Value> operands) {\n+        super(name, operands);\n+        this.dimension = dimension;\n+    }\n+\n+    protected HatThreadOP(HatThreadOP that, CopyContext cc) {\n+        super(that, cc);\n+        this.dimension = that.dimension;\n+    }\n+\n+    public int getDimension() {\n+        return dimension;\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatThreadOP.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import hat.dialect.HatThreadOP;\n@@ -65,1 +66,0 @@\n-\n@@ -319,0 +319,1 @@\n+            case HatThreadOP o -> 0;\n@@ -348,1 +349,1 @@\n-            default -> throw new IllegalStateException(\"precedence \");\n+            default -> throw new IllegalStateException(\"[Illegal] Precedence Op not registered: \" + op.getClass().getSimpleName());\n@@ -414,0 +415,1 @@\n+\n@@ -417,0 +419,1 @@\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpTk.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.dialect.HatGlobalThreadIdOp;\n@@ -93,0 +94,5 @@\n+    @Override\n+    public T hatGlobalThreadOp (ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n+        blockInlineComment(\"Thread ID access\");\n+        return self();\n+    }\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/text\/JavaHATCodeBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}