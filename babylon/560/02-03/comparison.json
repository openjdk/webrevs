{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import hat.dialect.HatBlockThreadIdOp;\n@@ -31,1 +32,3 @@\n-import hat.dialect.HatGlobalThreadSizeOp;\n+import hat.dialect.HatGlobalSizeOp;\n+import hat.dialect.HatLocalSizeOp;\n+import hat.dialect.HatLocalThreadIdOp;\n@@ -48,0 +51,1 @@\n+import java.util.Arrays;\n@@ -204,1 +208,4 @@\n-                ||  fieldLoadOp.fieldDescriptor().name().equals(\"z\");\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"z\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"gix\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"giy\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"giz\");\n@@ -210,1 +217,22 @@\n-                ||  fieldLoadOp.fieldDescriptor().name().equals(\"gsz\");\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"gsz\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"maxX\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"maxY\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"maxZ\");\n+    }\n+\n+    private boolean isFieldLoadThreadId(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"lix\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"liy\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"liz\");\n+    }\n+\n+    private boolean isFieldLoadThreadSize(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"lsx\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"lsy\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"lsz\");\n+    }\n+\n+    private boolean isFieldLoadBlockId(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"bix\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"biy\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"biz\");\n@@ -313,0 +341,1 @@\n+        String fieldName = fieldLoadOp.fieldDescriptor().name();\n@@ -315,1 +344,1 @@\n-                if (fieldLoadOp.fieldDescriptor().name().equals(\"y\")) {\n+                if (fieldName.equals(\"y\")) {\n@@ -317,1 +346,1 @@\n-                } else if (fieldLoadOp.fieldDescriptor().name().equals(\"z\")) {\n+                } else if (fieldName.equals(\"z\")) {\n@@ -323,1 +352,9 @@\n-                if (fieldLoadOp.fieldDescriptor().name().equals(\"gsy\")) {\n+                if (fieldName.equals(\"gsy\")) {\n+                    return 1;\n+                } else if (fieldName.equals(\"gsz\")) {\n+                    return 2;\n+                }\n+                return 0;\n+            }\n+            case LOCAL_ID -> {\n+                if (fieldName.equals(\"liy\")) {\n@@ -325,1 +362,17 @@\n-                } else if (fieldLoadOp.fieldDescriptor().name().equals(\"gsz\")) {\n+                } else if (fieldName.equals(\"lyz\")) {\n+                    return 2;\n+                }\n+                return 0;\n+            }\n+            case LOCAL_SIZE -> {\n+                if (fieldName.equals(\"lsy\")) {\n+                    return 1;\n+                } else if (fieldName.equals(\"lsz\")) {\n+                    return 2;\n+                }\n+                return 0;\n+            }\n+            case BLOCK_ID ->  {\n+                if (fieldName.equals(\"biy\")) {\n+                    return 1;\n+                } else if (fieldName.equals(\"biz\")) {\n@@ -331,1 +384,1 @@\n-        return 0;\n+        return -1;\n@@ -346,0 +399,3 @@\n+                                        case LOCAL_ID -> isFieldLoadThreadId(fieldLoadOp);\n+                                        case LOCAL_SIZE -> isFieldLoadThreadSize(fieldLoadOp);\n+                                        case BLOCK_ID ->  isFieldLoadBlockId(fieldLoadOp);\n@@ -377,0 +433,3 @@\n+                        if (dim < 0) {\n+                            throw new IllegalStateException(\"Thread Access can't be below 0!\");\n+                        }\n@@ -379,1 +438,4 @@\n-                            case GLOBAL_SIZE -> new HatGlobalThreadSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case GLOBAL_SIZE -> new HatGlobalSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case LOCAL_ID -> new HatLocalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case LOCAL_SIZE -> new HatLocalSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case BLOCK_ID -> new HatBlockThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n@@ -394,1 +456,4 @@\n-        GLOBAL_SIZE;\n+        GLOBAL_SIZE,\n+        LOCAL_ID,\n+        LOCAL_SIZE,\n+        BLOCK_ID,\n@@ -400,4 +465,2 @@\n-        dialectifyToHatMemorySpace(Space.SHARED);\n-        dialectifyToHatMemorySpace(Space.PRIVATE);\n-        dialectifyToHatThreadIds(ThreadAccess.GLOBAL_ID);\n-        dialectifyToHatThreadIds(ThreadAccess.GLOBAL_SIZE);\n+        Arrays.stream(Space.values()).forEach(this::dialectifyToHatMemorySpace);\n+        Arrays.stream(ThreadAccess.values()).forEach(this::dialectifyToHatThreadIds);\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/KernelCallGraph.java","additions":77,"deletions":14,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.dialect.HatBlockThreadIdOp;\n@@ -29,1 +30,3 @@\n-import hat.dialect.HatGlobalThreadSizeOp;\n+import hat.dialect.HatGlobalSizeOp;\n+import hat.dialect.HatLocalSizeOp;\n+import hat.dialect.HatLocalThreadIdOp;\n@@ -100,1 +103,7 @@\n-    T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp hatGlobalThreadIdOp);\n+    T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalSizeOp hatGlobalSizeOp);\n+\n+    T hatLocalThreadIdOp(ScopedCodeBuilderContext buildContext, HatLocalThreadIdOp hatLocalThreadIdOp);\n+\n+    T hatLocalSizeOp(ScopedCodeBuilderContext buildContext, HatLocalSizeOp hatLocalSizeOp);\n+\n+    T hatBlockThreadIdOp(ScopedCodeBuilderContext buildContext, HatBlockThreadIdOp hatBlockThreadIdOp);\n@@ -133,1 +142,4 @@\n-            case HatGlobalThreadSizeOp $ -> hatGlobalSizeOp(buildContext, $);\n+            case HatGlobalSizeOp $ -> hatGlobalSizeOp(buildContext, $);\n+            case HatLocalThreadIdOp $ -> hatLocalThreadIdOp(buildContext, $);\n+            case HatLocalSizeOp $ -> hatLocalSizeOp(buildContext, $);\n+            case HatBlockThreadIdOp $ -> hatBlockThreadIdOp(buildContext, $);\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/BabylonOpBuilder.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.dialect.HatBlockThreadIdOp;\n@@ -29,1 +30,3 @@\n-import hat.dialect.HatGlobalThreadSizeOp;\n+import hat.dialect.HatGlobalSizeOp;\n+import hat.dialect.HatLocalSizeOp;\n+import hat.dialect.HatLocalThreadIdOp;\n@@ -161,1 +164,1 @@\n-    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp globalSizeOp) {\n+    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalSizeOp globalSizeOp) {\n@@ -166,0 +169,18 @@\n+    @Override\n+    public T hatLocalThreadIdOp(ScopedCodeBuilderContext buildContext, HatLocalThreadIdOp localThreadIdOp) {\n+        localId(localThreadIdOp.getDimension());\n+        return self();\n+    }\n+\n+    @Override\n+    public T hatLocalSizeOp(ScopedCodeBuilderContext buildContext, HatLocalSizeOp hatLocalSizeOp) {\n+        localSize(hatLocalSizeOp.getDimension());\n+        return self();\n+    }\n+\n+    @Override\n+    public T hatBlockThreadIdOp(ScopedCodeBuilderContext buildContext, HatBlockThreadIdOp hatBlockThreadIdOp) {\n+        blockId(hatBlockThreadIdOp.getDimension());\n+        return self();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HatBlockThreadIdOp extends HatThreadOP {\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"BlockThreadId\";\n+\n+    public HatBlockThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatBlockThreadIdOp(HatBlockThreadIdOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatBlockThreadIdOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatBlockThreadIdOp.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HatGlobalSizeOp extends HatThreadOP {\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"GlobalThreadSize\";\n+\n+    public HatGlobalSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatGlobalSizeOp(HatGlobalSizeOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatGlobalSizeOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalSizeOp.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.dialect;\n-\n-import jdk.incubator.code.CopyContext;\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.OpTransformer;\n-import jdk.incubator.code.TypeElement;\n-import jdk.incubator.code.Value;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-public class HatGlobalThreadSizeOp extends HatThreadOP {\n-\n-    private final TypeElement resultType;\n-    private static final String NAME = \"GlobalThreadSize\";\n-\n-    public HatGlobalThreadSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n-        super(NAME, dimension, operands);\n-        this.resultType = resultType;\n-    }\n-\n-    public HatGlobalThreadSizeOp(HatGlobalThreadSizeOp op, CopyContext copyContext) {\n-        super(op, copyContext);\n-        this.resultType = op.resultType;\n-    }\n-\n-    @Override\n-    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n-        return new HatGlobalThreadSizeOp(this, copyContext);\n-    }\n-\n-    @Override\n-    public TypeElement resultType() {\n-        return resultType;\n-    }\n-\n-    @Override\n-    public Map<String, Object> externalize() {\n-        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n-    }\n-}\n\\ No newline at end of file\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalThreadSizeOp.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HatLocalSizeOp extends HatThreadOP {\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"GlobalThreadSize\";\n+\n+    public HatLocalSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatLocalSizeOp(HatLocalSizeOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatLocalSizeOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatLocalSizeOp.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HatLocalThreadIdOp extends HatThreadOP {\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"LocalThreadId\";\n+\n+    public HatLocalThreadIdOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatLocalThreadIdOp(HatLocalThreadIdOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatLocalThreadIdOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatLocalThreadIdOp.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.dialect.HatBlockThreadIdOp;\n@@ -30,1 +31,3 @@\n-import hat.dialect.HatGlobalThreadSizeOp;\n+import hat.dialect.HatGlobalSizeOp;\n+import hat.dialect.HatLocalSizeOp;\n+import hat.dialect.HatLocalThreadIdOp;\n@@ -102,1 +105,1 @@\n-    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp hatGlobalThreadIdOp) {\n+    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalSizeOp hatGlobalThreadIdOp) {\n@@ -107,0 +110,18 @@\n+    @Override\n+    public T hatLocalThreadIdOp(ScopedCodeBuilderContext buildContext, HatLocalThreadIdOp hatLocalThreadIdOp) {\n+        blockInlineComment(\"Local Thread ID\");\n+        return self();\n+    }\n+\n+    @Override\n+    public T hatLocalSizeOp(ScopedCodeBuilderContext buildContext, HatLocalSizeOp hatLocalSizeOp) {\n+        blockInlineComment(\"Local Size\");\n+        return self();\n+    }\n+\n+    @Override\n+    public T hatBlockThreadIdOp(ScopedCodeBuilderContext buildContext, HatBlockThreadIdOp hatBlockThreadIdOp) {\n+        blockInlineComment(\"Block ID \");\n+        return self();\n+    }\n+\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/text\/JavaHATCodeBuilder.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"}]}