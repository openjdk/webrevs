{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import hat.dialect.HatGlobalThreadSizeOp;\n@@ -200,2 +201,10 @@\n-    private boolean isFieldLoadThreadId(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n-        return fieldLoadOp.fieldDescriptor().name().equals(\"x\") || fieldLoadOp.fieldDescriptor().name().equals(\"y\") ||  fieldLoadOp.fieldDescriptor().name().equals(\"z\");\n+    private boolean isFieldLoadGlobalThreadId(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"x\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"y\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"z\");\n+    }\n+\n+    private boolean isFieldLoadGlobalSize(JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        return fieldLoadOp.fieldDescriptor().name().equals(\"gsx\")\n+                || fieldLoadOp.fieldDescriptor().name().equals(\"gsy\")\n+                ||  fieldLoadOp.fieldDescriptor().name().equals(\"gsz\");\n@@ -278,6 +287,6 @@\n-                        HatMemoryOp memoryOp;\n-                        if (memorySpace == Space.SHARED) {\n-                            memoryOp = new HatLocalVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n-                        } else {\n-                            memoryOp = new HatPrivateVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n-                        }\n+                        HatMemoryOp memoryOp = switch (memorySpace) {\n+                            case SHARED ->\n+                                    new HatLocalVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n+                            default ->\n+                                    new HatPrivateVarOp(varOp.varName(), (ClassType) varOp.varValueType(), varOp.resultType(), invokeOp.resultType(), outputOperandsVarOp);\n+                        };\n@@ -303,1 +312,21 @@\n-    public void dialectifyToHatThreadIds() {\n+    private int getDimension(ThreadAccess threadAccess, JavaOp.FieldAccessOp.FieldLoadOp fieldLoadOp) {\n+        switch (threadAccess) {\n+            case GLOBAL_ID -> {\n+                if (fieldLoadOp.fieldDescriptor().name().equals(\"y\")) {\n+                    return 1;\n+                } else if (fieldLoadOp.fieldDescriptor().name().equals(\"z\")) {\n+                    return 2;\n+                }\n+                return 0;\n+            }\n+            case GLOBAL_SIZE -> {\n+                if (fieldLoadOp.fieldDescriptor().name().equals(\"gsy\")) {\n+                    return 1;\n+                } else if (fieldLoadOp.fieldDescriptor().name().equals(\"gsz\")) {\n+                    return 2;\n+                }\n+                return 0;\n+            }\n+        }\n+        return 0;\n+    }\n@@ -305,0 +334,1 @@\n+    public void dialectifyToHatThreadIds(ThreadAccess threadAccess) {\n@@ -313,1 +343,5 @@\n-                                    if (isMethodFromHatKernelContext(varLoadOp) && isFieldLoadThreadId(fieldLoadOp)) {\n+                                    boolean isThreadIntrinsic = switch (threadAccess) {\n+                                        case GLOBAL_ID -> isFieldLoadGlobalThreadId(fieldLoadOp);\n+                                        case GLOBAL_SIZE -> isFieldLoadGlobalSize(fieldLoadOp);\n+                                    };\n+                                    if (isMethodFromHatKernelContext(varLoadOp) && isThreadIntrinsic) {\n@@ -342,8 +376,5 @@\n-\n-                        int dim = 0;\n-                        if (fieldLoadOp.fieldDescriptor().name().equals(\"y\")) {\n-                            dim = 1;\n-                        } else if (fieldLoadOp.fieldDescriptor().name().equals(\"z\")) {\n-                            dim = 2;\n-                        }\n-                        HatThreadOP threadOP = new HatGlobalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                        int dim = getDimension(threadAccess, fieldLoadOp);\n+                        HatThreadOP threadOP = switch (threadAccess) {\n+                            case GLOBAL_ID -> new HatGlobalThreadIdOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                            case GLOBAL_SIZE -> new HatGlobalThreadSizeOp(dim, fieldLoadOp.resultType(), outputOperands);\n+                        };\n@@ -357,1 +388,1 @@\n-        \/\/IO.println(\"[INFO] Code model: \" + funcOp.toText());\n+        IO.println(\"[INFO] Code model: \" + funcOp.toText());\n@@ -361,0 +392,5 @@\n+    private enum ThreadAccess {\n+        GLOBAL_ID,\n+        GLOBAL_SIZE;\n+    }\n+\n@@ -366,1 +402,2 @@\n-        dialectifyToHatThreadIds();\n+        dialectifyToHatThreadIds(ThreadAccess.GLOBAL_ID);\n+        dialectifyToHatThreadIds(ThreadAccess.GLOBAL_SIZE);\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/KernelCallGraph.java","additions":57,"deletions":20,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.dialect.HatGlobalThreadSizeOp;\n@@ -99,0 +100,2 @@\n+    T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp hatGlobalThreadIdOp);\n+\n@@ -130,0 +133,1 @@\n+            case HatGlobalThreadSizeOp $ -> hatGlobalSizeOp(buildContext, $);\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/BabylonOpBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.dialect.HatGlobalThreadSizeOp;\n@@ -154,1 +155,1 @@\n-    public T hatGlobalThreadOp (ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n+    public T hatGlobalThreadOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n@@ -159,0 +160,6 @@\n+    @Override\n+    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp globalSizeOp) {\n+        globalSize(globalSizeOp.getDimension());\n+        return self();\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private static final String NAME = \"hat.sync.barrier\";\n+    private static final String NAME = \"hat.dialect.sync.barrier\";\n@@ -61,2 +61,1 @@\n-    public Map<String, Object> externalize() {\n-        return Map.of(\"invoke.\" + NAME, JavaOp.InvokeOp.InvokeKind.INSTANCE);\n+    public Map<String, Object> externalize() {return Map.of(NAME, JavaOp.InvokeOp.InvokeKind.INSTANCE);\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatBarrierOp.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Map;\n@@ -37,2 +38,0 @@\n-    public static final String INTRINSIC_NAME = \"gix\";\n-\n@@ -61,0 +60,5 @@\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalThreadIdOp.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.dialect;\n+\n+import jdk.incubator.code.CopyContext;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.OpTransformer;\n+import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.Value;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class HatGlobalThreadSizeOp extends HatThreadOP {\n+\n+    private final TypeElement resultType;\n+    private static final String NAME = \"GlobalThreadSize\";\n+\n+    public HatGlobalThreadSizeOp(int dimension, TypeElement resultType, List<Value> operands) {\n+        super(NAME, dimension, operands);\n+        this.resultType = resultType;\n+    }\n+\n+    public HatGlobalThreadSizeOp(HatGlobalThreadSizeOp op, CopyContext copyContext) {\n+        super(op, copyContext);\n+        this.resultType = op.resultType;\n+    }\n+\n+    @Override\n+    public Op transform(CopyContext copyContext, OpTransformer opTransformer) {\n+        return new HatGlobalThreadSizeOp(this, copyContext);\n+    }\n+\n+    @Override\n+    public TypeElement resultType() {\n+        return resultType;\n+    }\n+\n+    @Override\n+    public Map<String, Object> externalize() {\n+        return Map.of(\"hat.dialect.\" + NAME, this.getDimension());\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatGlobalThreadSizeOp.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -71,1 +71,1 @@\n-        return Map.of(\"hatSharedVarOp.\" + opName(), typeElement);\n+        return Map.of(\"hat.dialect.hatSharedVarOp.\" + opName(), typeElement);\n@@ -74,1 +74,0 @@\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatLocalVarOp.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-        return Map.of(\"hatPrivateVarOp.\" + opName(), typeElement);\n+        return Map.of(\"hat.dialect.hatPrivateVarOp.\" + opName(), typeElement);\n","filename":"hat\/core\/src\/main\/java\/hat\/dialect\/HatPrivateVarOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.dialect.HatGlobalThreadSizeOp;\n@@ -95,1 +96,1 @@\n-    public T hatGlobalThreadOp (ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n+    public T hatGlobalThreadOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadIdOp globalThreadIdOp) {\n@@ -100,0 +101,6 @@\n+    @Override\n+    public T hatGlobalSizeOp(ScopedCodeBuilderContext buildContext, HatGlobalThreadSizeOp hatGlobalThreadIdOp) {\n+        blockInlineComment(\"GlobalSize\");\n+        return self();\n+    }\n+\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/text\/JavaHATCodeBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}