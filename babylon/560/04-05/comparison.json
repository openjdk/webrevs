{"files":[{"patch":"@@ -52,0 +52,1 @@\n+import java.util.ArrayList;\n@@ -460,1 +461,1 @@\n-        IO.println(\"[INFO] Code model: \" + funcOp.toText());\n+        \/\/IO.println(\"[INFO] Code model: \" + funcOp.toText());\n@@ -494,12 +495,15 @@\n-\/\/        if (moduleOp != null) {\n-\/\/            moduleOp.functionTable().forEach((entryPoint, kernelOp) -> {\n-\/\/                CoreOp.FuncOp f = dialectifyToHat(kernelOp);\n-\/\/                moduleOp.functionTable().put(entryPoint, f);\n-\/\/            });\n-\/\/        }\n-\/\/        } else {\n-\/\/            kernelReachableResolvedStream().forEach((kernel) -> {\n-\/\/                CoreOp.FuncOp f = dialectifyToHat(kernel.funcOp());\n-\/\/                kernel.funcOp(f);\n-\/\/            });\n-\/\/        }\n+        if (moduleOp != null) {\n+            List<CoreOp.FuncOp> funcs = new ArrayList<>();\n+            moduleOp.functionTable().forEach((_, kernelOp) -> {\n+                \/\/ ModuleOp is an Immutable Collection, thus, we need to create a new one from a\n+                \/\/ new list of methods\n+                CoreOp.FuncOp f = dialectifyToHat(kernelOp);\n+                funcs.add(f);\n+            });\n+            moduleOp = CoreOp.module(funcs);\n+        } else {\n+            kernelReachableResolvedStream().forEach((kernel) -> {\n+                CoreOp.FuncOp f = dialectifyToHat(kernel.funcOp());\n+                kernel.funcOp(f);\n+            });\n+        }\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/KernelCallGraph.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -54,20 +54,21 @@\n-        if (OpTk.isKernelContextAccess(fieldLoadOp)) {\n-            switch (fieldLoadOp.fieldDescriptor().name()){\n-                case \"x\",\"gix\"->globalId(0);\n-                case \"y\",\"giy\"->globalId(1);\n-                case \"z\",\"giz\"->globalId(3);\n-                case \"maxX\",\"gsx\"->globalSize(0);\n-                case \"maxY\",\"gsy\"->globalSize(1);\n-                case \"maxZ\",\"gsz\"->globalSize(2);\n-                case \"lix\"->localId(0);\n-                case \"liy\"->localId(1);\n-                case \"liz\"->localId(2);\n-                case \"lsx\"->localSize(0);\n-                case \"lsy\"->localSize(1);\n-                case \"lsz\"->localSize(2);\n-                case \"bix\"->blockId(0);\n-                case \"biy\"->blockId(1);\n-                case \"biz\"->blockId(2);\n-                default ->  throw new IllegalStateException(\"handle ? kc.\"+fieldLoadOp.fieldDescriptor().name());\n-            }\n-        } else if (fieldLoadOp.operands().isEmpty() && fieldLoadOp.result().type() instanceof PrimitiveType) {\n+\/\/        if (OpTk.isKernelContextAccess(fieldLoadOp)) {\n+\/\/            switch (fieldLoadOp.fieldDescriptor().name()){\n+\/\/                case \"x\",\"gix\"->globalId(0);\n+\/\/                case \"y\",\"giy\"->globalId(1);\n+\/\/                case \"z\",\"giz\"->globalId(3);\n+\/\/                case \"maxX\",\"gsx\"->globalSize(0);\n+\/\/                case \"maxY\",\"gsy\"->globalSize(1);\n+\/\/                case \"maxZ\",\"gsz\"->globalSize(2);\n+\/\/                case \"lix\"->localId(0);\n+\/\/                case \"liy\"->localId(1);\n+\/\/                case \"liz\"->localId(2);\n+\/\/                case \"lsx\"->localSize(0);\n+\/\/                case \"lsy\"->localSize(1);\n+\/\/                case \"lsz\"->localSize(2);\n+\/\/                case \"bix\"->blockId(0);\n+\/\/                case \"biy\"->blockId(1);\n+\/\/                case \"biz\"->blockId(2);\n+\/\/                default ->  throw new IllegalStateException(\"handle ? kc.\"+fieldLoadOp.fieldDescriptor().name());\n+\/\/            }\n+\/\/        } else\n+        if (fieldLoadOp.operands().isEmpty() && fieldLoadOp.result().type() instanceof PrimitiveType) {\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATKernelBuilder.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -119,1 +119,0 @@\n-            System.out.println(\"Processing Function? : \" + rf.r);\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpTk.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}