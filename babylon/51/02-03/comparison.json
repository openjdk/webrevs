{"files":[{"patch":"@@ -91,1 +91,1 @@\n-        boolean isTypeVar = false;\n+        StringBuilder identifier = new StringBuilder();\n@@ -93,0 +93,1 @@\n+            \/\/ Quoted identifier\n@@ -94,29 +95,14 @@\n-            isTypeVar = true;\n-        }\n-        \/\/ Type\n-        Tokens.Token t = l.accept(TokenKind.IDENTIFIER,\n-                TokenKind.PLUS, TokenKind.SUB);\n-        StringBuilder identifier = new StringBuilder();\n-        identifier.append(t.kind == TokenKind.IDENTIFIER ? t.name() : t.kind.name);\n-        while (l.acceptIf(Tokens.TokenKind.DOT)) {\n-            identifier.append(Tokens.TokenKind.DOT.name);\n-            t = l.accept(Tokens.TokenKind.IDENTIFIER);\n-            identifier.append(t.name());\n-        }\n-\n-        if (l.token().kind == TokenKind.COLCOL && isTypeVar) {\n-            \/\/ type-variable\n-            l.accept(TokenKind.COLCOL);\n-            identifier.append(TokenKind.COLCOL.name);\n-            t = l.accept(TokenKind.IDENTIFIER); \/\/ type-var or method name\n-            identifier.append(t.name());\n-            if (l.token().kind == TokenKind.LPAREN) {\n-                FunctionType functionType = parseMethodType(l);\n-                \/\/ we need to serialize the function type back as part of the tvar identifier\n-                identifier.append(functionType.parameterTypes().stream()\n-                                .map(TypeElement::toString)\n-                                .collect(Collectors.joining(\",\", \"(\", \")\")));\n-                identifier.append(functionType.returnType().toString());\n-                l.accept(TokenKind.COLCOL);\n-                identifier.append(TokenKind.COLCOL.name);\n-                t = l.accept(TokenKind.IDENTIFIER); \/\/ type-var name\n+            Token t = l.token();\n+            while (t.kind != TokenKind.LT) {\n+                identifier.append(t.kind == TokenKind.IDENTIFIER ? t.name() : t.kind.name);\n+                l.nextToken();\n+                t = l.token();\n+            }\n+        } else {\n+            \/\/ Qualified identifier\n+            Tokens.Token t = l.accept(TokenKind.IDENTIFIER,\n+                    TokenKind.PLUS, TokenKind.SUB);\n+            identifier.append(t.kind == TokenKind.IDENTIFIER ? t.name() : t.kind.name);\n+            while (l.acceptIf(Tokens.TokenKind.DOT)) {\n+                identifier.append(Tokens.TokenKind.DOT.name);\n+                t = l.accept(Tokens.TokenKind.IDENTIFIER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/impl\/DescParser.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"}]}