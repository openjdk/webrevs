{"files":[{"patch":"@@ -1,1 +1,1 @@\n-Example using code reflection with a Java-based ONNX programming model.\n+MavenStyleProject using code reflection with a Java-based ONNX programming model.\n","filename":"cr-examples\/onnx\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Example code showing use of code reflection in translation from Java to\n+MavenStyleProject code showing use of code reflection in translation from Java to\n","filename":"cr-examples\/spirv\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Example using code reflection with a Java-based Triton programming model\n+MavenStyleProject using code reflection with a Java-based Triton programming model\n","filename":"cr-examples\/triton\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,3 @@\n+\n+\n+\n","filename":"hat\/backends\/ffi\/mock\/CMakeLists.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -84,0 +84,13 @@\n+    add_custom_command(OUTPUT ${CMAKE_BINARY_DIR}\/extractFile\n+            COMMAND echo jextract stuff\n+            #COMMAND BANNER jextract stuff\n+            COMMAND touch ${CMAKE_BINARY_DIR}\/extractFile\n+            #COMMAND ${CMAKE_COMMAND} -E touch ${LIBFOO_TAR_HEADERS}\n+            WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+            #DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}\/libfoo\/foo.tar\"\n+            COMMENT \"Extracting opencl\"\n+            VERBATIM\n+    )\n+\n+    add_custom_target(extract DEPENDS ${CMAKE_BINARY_DIR}\/extractFile)\n+\n","filename":"hat\/backends\/ffi\/opencl\/CMakeLists.txt","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,2 +0,0 @@\n-hat.backend.java.JavaMultiThreadedBackend\n-hat.backend.java.JavaSequentialBackend\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/resources\/META-INF\/services\/hat.backend.Backend","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"","filename":"hat\/backends\/java\/mt\/src\/main\/java\/hat\/backend\/java\/JavaMultiThreadedBackend.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/java\/JavaMultiThreadedBackend.java","status":"renamed"},{"patch":"","filename":"hat\/backends\/java\/seq\/src\/main\/java\/hat\/backend\/java\/JavaSequentialBackend.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/java\/JavaSequentialBackend.java","status":"renamed"},{"patch":"@@ -2,1 +2,0 @@\n-hat.backend.java.JavaMultiThreadedBackend\n","filename":"hat\/backends\/java\/seq\/src\/main\/resources\/META-INF\/services\/hat.backend.Backend","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# More Complex Interface Mapping Example - The Cascade\n+# More Complex Interface Mapping MavenStyleProject - The Cascade\n@@ -22,1 +22,1 @@\n-# More Complex Interface Mapping Example - The Cascade\n+# More Complex Interface Mapping MavenStyleProject - The Cascade\n","filename":"hat\/docs\/hat-04-02-cascade-interface-mapping.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -405,1 +405,1 @@\n-### Example babylon transform to track buffer mutations.\n+### MavenStyleProject babylon transform to track buffer mutations.\n","filename":"hat\/docs\/hat-06-kernel-analysis.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+        for (var arg : args) {\n+            System.out.println(\"arg = \"+arg);\n+        }\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/Main.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -117,0 +117,3 @@\n+        if (mode == Mode.HAT) {\n+            System.out.println(\"mode = \"+mode);\n+        }\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/opencl\/OpenCLNBodyGLWindow.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import hat.backend.java.JavaMultiThreadedBackend;\n@@ -51,1 +50,1 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(), (backend -> backend instanceof JavaMultiThreadedBackend));\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup());\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/attic\/ViolaJones.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,6 @@\n-target\/\n+build\/\n+cmake-build-debug\/\n+opencl\/src\n+opengl\/src\n+cuda\/src\n+\n","filename":"hat\/extractions\/.gitignore","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(extractions)\n+\n+set(OSX_SDK ${CMAKE_OSX_SYSROOT})\n+set(OSX_SDK_LIBRARY_FRAMEWORKS ${OSX_SDK}\/System\/Library\/Frameworks)\n+set(OSX_SYS_LIBRARY_FRAMEWORKS \/System\/Library\/Frameworks)\n+\n+set(EXTRACTIONS \"\")\n+\n+find_package(OpenGL)\n+if(OPENGL_FOUND)\n+   add_subdirectory(opengl)\n+   set(EXTRACTIONS ${EXTRACTIONS} extract_opengl)\n+else()\n+   message(\"NO OPENGL\")\n+endif()\n+\n+find_package(OpenCL)\n+if(OPENCL_FOUND)\n+   add_subdirectory(opencl)\n+   set(EXTRACTIONS ${EXTRACTIONS} extract_opencl)\n+else()\n+   message(\"NO OPENCL\")\n+endif()\n+\n+find_package(CUDA)\n+if(CUDA_FOUND)\n+   add_subdirectory(cuda)\n+   set(EXTRACTIONS ${EXTRACTIONS} extract_cuda)\n+else()\n+   message(\"NO CUDA\")\n+endif()\n+\n+add_custom_target(extract DEPENDS ${EXTRACTIONS})\n+\n+\n","filename":"hat\/extractions\/CMakeLists.txt","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+This does not compile the java files extracted, we leave that to hat\/bld or maven\n+\n+Ensure cmake and jextract are in your path then :)\n+\n+$ cmake -B build\n+$ cmake --build build --target extract\n+\n+To remove previously extracted sources (careful with this axe eugene !)\n+\n+$ rm -rf *\/src\n+$ rm -rf build\n+\n+Then\n+\n+$ tree\n+\n+Should yield\n+\n+├── CMakeLists.txt\n+├── cuda\n+│   └── CMakeLists.txt\n+├── opencl\n+│   └── CMakeLists.txt\n+├── opengl\n+│   └── CMakeLists.txt\n+└── README.txt\n","filename":"hat\/extractions\/README.txt","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(extract_cuda)\n+\n+#We can assume that 'parent' has guarded us with find_package(XxxxXX) + if(XXXXXX_FOUND)\n+\n+set(JEXTRACT_PACKAGE cuda)\n+set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/${JEXTRACT_PACKAGE}\/src\/main\/java)\n+set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n+\n+add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+   #COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n+   COMMAND jextract \n+       --target-package ${JEXTRACT_PACKAGE} \n+       --output ${JEXTRACT_SOURCE} \n+       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/OpenCL \n+       --header-class-name ${JEXTRACT_PACKAGE}_h\n+       ${OSX_SDK_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n+       WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+       VERBATIM\n+   )\n+\n+add_custom_target(extract_opencl DEPENDS  ${JEXTRACT_HEADER})\n","filename":"hat\/extractions\/cuda\/CMakeLists.txt","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(extract_opencl)\n+\n+#We can assume that 'parent' has guarded us with find_package(XxxxXX) + if(XXXXXX_FOUND)\n+\n+set(JEXTRACT_PACKAGE opencl)\n+set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/${JEXTRACT_PACKAGE}\/src\/main\/java)\n+set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n+\n+add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+   COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n+   COMMAND jextract \n+       --target-package ${JEXTRACT_PACKAGE} \n+       --output ${JEXTRACT_SOURCE} \n+       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/OpenCL \n+       --header-class-name ${JEXTRACT_PACKAGE}_h\n+       ${OSX_SDK_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n+       WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+       VERBATIM\n+   )\n+\n+add_custom_target(extract_opencl DEPENDS  ${JEXTRACT_HEADER})\n","filename":"hat\/extractions\/opencl\/CMakeLists.txt","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -1,101 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n---><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n-    <!--Auto generated by mkpoms-->\n-    <modelVersion>4.0.0<\/modelVersion>\n-    <!--<packaging>pom<\/packaging>-->\n-    <!-- we want to create a jar -->\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-jextracted-opencl<\/artifactId>\n-    <version>1.0<\/version>\n-    <parent>\n-        <groupId>oracle.code<\/groupId>\n-        <artifactId>hat-extractions<\/artifactId>\n-        <version>1.0<\/version>\n-    <\/parent>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-antrun-plugin<\/artifactId>\n-                <version>1.8<\/version>\n-                <executions>\n-                    <execution>\n-                        <id>createDirAndMacCompileFlags<\/id>\n-                        <phase>initialize<\/phase>\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals> \n-                        <configuration>\n-                            <target>\n-                                <mkdir dir=\"${hat.stage.jextract}\"\/>\n-                                <echo file=\"${hat.stage.jextract}\/compile_flags.txt\" message=\"-F${mac.app.frameworks}\"\/>\n-                            <\/target>\n-                        <\/configuration>\n-                    <\/execution>\n-                    <execution>\n-                        <id>copyJarToBuild<\/id>\n-                        <phase>install<\/phase>\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <target>\n-                                <jar basedir=\"${hat.stage.jextract}\" destfile=\"${hat.build}\/${project.artifactId}-${project.version}.jar\" includes=\"opencl\/**\"\/>\n-                            <\/target>\n-                        <\/configuration>\n-                    <\/execution>\n-                <\/executions>\n-            <\/plugin>\n-\n-            <plugin>\n-                <groupId>org.codehaus.mojo<\/groupId>\n-                <artifactId>exec-maven-plugin<\/artifactId>\n-                <version>3.1.0<\/version>\n-                <executions>\n-                    <execution>\n-                        <id>runJextractOnOpenCL<\/id>\n-                        <phase>generate-sources<\/phase>\n-                        <goals>\n-                            <goal>exec<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <executable>jextract<\/executable>\n-                            <workingDirectory>${hat.stage.jextract}<\/workingDirectory>\n-                            <arguments>\n-                                <argument>--output<\/argument>\n-                                <argument>${hat.stage.jextract}<\/argument>\n-                                <argument>-t<\/argument>\n-                                <argument>opencl<\/argument>\n-                                <argument>-l<\/argument>\n-                                <argument>${mac.lib.frameworks}\/OpenCL.framework\/OpenCL<\/argument>\n-                                <argument>${mac.app.frameworks}\/OpenCL.framework\/Headers\/opencl.h<\/argument>\n-                            <\/arguments>\n-                        <\/configuration>\n-                    <\/execution>\n-                <\/executions>\n-            <\/plugin>\n-        <\/plugins>\n-    <\/build>\n-<\/project>\n","filename":"hat\/extractions\/opencl\/pom.xml","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -0,0 +1,24 @@\n+cmake_minimum_required(VERSION 3.22.1)\n+project(extract_opengl)\n+\n+#We can assume that 'parent' has guarded us with find_package(XxxxXX) + if(XXXXXX_FOUND)\n+\n+set(JEXTRACT_PACKAGE opengl)\n+set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/${JEXTRACT_PACKAGE}\/src\/main\/java)\n+set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n+    \n+add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+   COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n+   COMMAND jextract \n+       --target-package ${JEXTRACT_PACKAGE} \n+       --output ${JEXTRACT_SOURCE} \n+       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenGL.framework\/OpenGL \n+       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/GLUT.framework\/GLUT \n+       --header-class-name ${JEXTRACT_PACKAGE}_h\n+       ${OSX_SDK_LIBRARY_FRAMEWORKS}\/GLUT.framework\/Headers\/glut.h\n+   WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+   VERBATIM\n+)\n+\n+add_custom_target(extract_opengl DEPENDS  ${JEXTRACT_HEADER})\n","filename":"hat\/extractions\/opengl\/CMakeLists.txt","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -1,102 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n---><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n-    <!--Auto generated by mkpoms-->\n-    <modelVersion>4.0.0<\/modelVersion>\n-    <!--<packaging>pom<\/packaging>-->\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-jextracted-opengl<\/artifactId>\n-    <version>1.0<\/version>\n-    <parent>\n-        <groupId>oracle.code<\/groupId>\n-        <artifactId>hat-extractions<\/artifactId>\n-        <version>1.0<\/version>\n-    <\/parent>\n-    <build>\n-        <plugins>\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-antrun-plugin<\/artifactId>\n-                <version>1.8<\/version>\n-                <executions>\n-                    <execution>\n-                        <id>createDirAndMacCompileFlags<\/id>\n-                        <phase>generate-sources<\/phase>\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals> \n-                        <configuration>\n-                            <target>\n-                                <mkdir dir=\"${hat.stage.jextract}\"\/>\n-                                <echo file=\"${hat.stage.jextract}\/compile_flags.txt\" message=\"-F${mac.app.frameworks}\"\/>\n-                            <\/target>\n-                        <\/configuration>\n-                    <\/execution>\n-                    <execution>\n-                        <id>copyJarToBuild<\/id>\n-                        <phase>install<\/phase>\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <target>\n-                                <jar basedir=\"${hat.stage.jextract}\" destfile=\"${hat.build}\/${project.artifactId}-${project.version}.jar\" includes=\"opengl\/**\"\/>\n-                            <\/target>\n-                        <\/configuration>\n-                    <\/execution>\n-\n-                <\/executions>\n-            <\/plugin>\n-            <plugin>\n-                <groupId>org.codehaus.mojo<\/groupId>\n-                <artifactId>exec-maven-plugin<\/artifactId>\n-                <version>3.1.0<\/version>\n-                <executions>\n-                    <execution>\n-                        <id>2<\/id>\n-                        <phase>generate-sources<\/phase>\n-                        <goals>\n-                            <goal>exec<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <executable>jextract<\/executable>\n-                            <workingDirectory>${hat.stage.jextract}<\/workingDirectory>\n-                            <arguments>\n-                                <argument>--output<\/argument>\n-                                <argument>${hat.stage.jextract}<\/argument>\n-                                <argument>-t<\/argument>\n-                                <argument>opengl<\/argument>\n-                                <argument>-l<\/argument>\n-                                <argument>${mac.lib.frameworks}\/GLUT.framework\/GLUT<\/argument>\n-                                <argument>-l<\/argument>\n-                                <argument>${mac.lib.frameworks}\/OpenGL.framework\/OpenGL<\/argument>\n-                                <argument>${mac.app.frameworks}\/GLUT.framework\/Headers\/glut.h<\/argument>\n-                            <\/arguments>\n-                        <\/configuration>\n-                    <\/execution>\n-                <\/executions>\n-            <\/plugin>\n-        <\/plugins>\n-    <\/build>\n-<\/project>\n","filename":"hat\/extractions\/opengl\/pom.xml","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.  Oracle designates this\n-particular file as subject to the \"Classpath\" exception as provided\n-by Oracle in the LICENSE file that accompanied this code.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n---><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n-    <!--Auto generated by mkpoms-->\n-    <modelVersion>4.0.0<\/modelVersion>\n-    <packaging>pom<\/packaging>\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-extractions<\/artifactId>\n-    <version>1.0<\/version>\n-    <parent>\n-        <groupId>oracle.code<\/groupId>\n-        <artifactId>hat-root<\/artifactId>\n-        <version>1.0<\/version>\n-    <\/parent>\n-    <modules>\n-        <module>opencl<\/module>\n-        <module>opengl<\/module>\n-    <\/modules>\n-<\/project>\n","filename":"hat\/extractions\/pom.xml","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -30,2 +30,2 @@\n-import hat.backend.java.JavaMultiThreadedBackend;\n-import hat.backend.java.JavaSequentialBackend;\n+\/\/import hat.backend.java.JavaMultiThreadedBackend;\n+\/\/import hat.backend.java.JavaSequentialBackend;\n@@ -55,2 +55,2 @@\n-     Predicate<Backend> JAVA_MULTITHREADED = backend -> backend instanceof JavaMultiThreadedBackend;\n-    Predicate<Backend> JAVA_SEQUENTIAL = backend -> backend instanceof JavaSequentialBackend;\n+   \/\/  Predicate<Backend> JAVA_MULTITHREADED = backend -> backend instanceof JavaMultiThreadedBackend;\n+   \/\/ Predicate<Backend> JAVA_SEQUENTIAL = backend -> backend instanceof JavaSequentialBackend;\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/Backend.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/ifacemapper\/BufferState.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import hat.backend.java.JavaMultiThreadedBackend;\n+\n@@ -60,1 +60,1 @@\n-        var accelerator = new Accelerator(MethodHandles.lookup(), new JavaMultiThreadedBackend());\n+        var accelerator = new Accelerator(MethodHandles.lookup());\n","filename":"hat\/hat-core\/src\/main\/test\/hat\/SquaresTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -485,0 +485,6 @@\n+\n+\n+            public CMakeBuildDir cMakeBuildDir(String name) {\n+                return CMakeBuildDir.of(path().resolve(name));\n+            }\n+\n@@ -498,0 +504,6 @@\n+        public static SourceDir of(DirEntry dirEntry) {\n+            return new SourceDir(dirEntry.path());\n+        }\n+        public static SourceDir of(BuildDir buildDir) {\n+            return new SourceDir(buildDir.path());\n+        }\n@@ -957,0 +969,1 @@\n+        protected boolean justShowCommandline;\n@@ -1034,0 +1047,7 @@\n+        public T justShowCommandline(boolean justShowCommandline) {\n+            this.justShowCommandline=justShowCommandline;\n+            return self();\n+        }\n+        public T justShowCommandline() {\n+            return justShowCommandline(true);\n+        }\n@@ -1040,0 +1060,1 @@\n+\n@@ -1317,0 +1338,1 @@\n+        public Strings vmargs = new Strings();\n@@ -1321,0 +1343,1 @@\n+\n@@ -1329,0 +1352,9 @@\n+        public JavaBuilder vmargs(List<String> args) {\n+            this.vmargs.add(args);\n+            return self();\n+        }\n+\n+        public JavaBuilder vmargs(String... args) {\n+            vmargs(Arrays.asList(args));\n+            return self();\n+        }\n@@ -1335,0 +1367,1 @@\n+\n@@ -1411,0 +1444,1 @@\n+        result.opts.add(javaBuilder.vmargs.strings);\n@@ -1414,5 +1448,20 @@\n-        try {\n-            var processBuilder = new ProcessBuilder().inheritIO().command(result.opts.strings);\n-            var process = processBuilder.start();\n-            if (javaBuilder.verbose) {\n-                println(result.opts.spaceSeparated());\n+        if (javaBuilder.justShowCommandline) {\n+            println(result.opts.spaceSeparated());\n+            result.ok = false;\n+        }else {\n+            try {\n+                var processBuilder = new ProcessBuilder().inheritIO().command(result.opts.strings);\n+                var process = processBuilder.start();\n+                if (javaBuilder.verbose) {\n+                    println(result.opts.spaceSeparated());\n+                }\n+                process.waitFor();\n+                result.ok = (process.exitValue() == 0);\n+                if (!result.ok) {\n+                    \/\/ println(\"java ok \");\n+                    \/\/}else{\n+                    println(\"java returned error \" + process.exitValue());\n+                }\n+\n+            } catch (InterruptedException | IOException ie) {\n+                System.out.println(ie);\n@@ -1420,3 +1469,0 @@\n-            process.waitFor();\n-        } catch (InterruptedException | IOException ie) {\n-            System.out.println(ie);\n@@ -1895,0 +1941,4 @@\n+        public CMakeBuilder target(String target) {\n+            opts(\"--target\", target);\n+            return this;\n+        }\n@@ -2006,1 +2056,1 @@\n-             output(jextractable.stage(stageDir))\n+             output(stageDir)\n@@ -2479,0 +2529,6 @@\n+        public String tickOrCheck() {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            capabilities().forEach(capability -> stringBuilder.append(capability.tickOrCheck()));\n+            return stringBuilder.toString();\n+        }\n+\n@@ -2500,0 +2556,4 @@\n+\n+            public String tickOrCheck() {\n+                return \"[\" +  name + (available() ? \"\\u2714\" : \"\\u2715\") + \"]\";\n+            }\n@@ -2514,3 +2574,0 @@\n-            default BuildDir stage(BuildDir stage) {\n-                return stage.buildDir(packageName() + \"_jextracted\");\n-            }\n@@ -2528,3 +2585,1 @@\n-            default JarFile jarFile(BuildDir buildDir) {\n-                return buildDir.jarFile(\"hat-jextracted-\"+packageName() + \"-1.0.jar\");\n-            }\n+\n@@ -2840,0 +2895,7 @@\n+            public static JExtract required() {\n+                JExtract jExtract = of();\n+                if (!jExtract.available()) {\n+                    throw new RuntimeException(\"jextract is reuired\");\n+                }\n+                return jExtract;\n+            }\n@@ -2875,0 +2937,8 @@\n+            public static CMake required() {\n+                CMake cmake = of();\n+                if (!cmake.available()) {\n+                    throw new RuntimeException(\"cmake is required\");\n+                }\n+                return cmake;\n+            }\n+\n","filename":"hat\/hat\/Script.java","additions":85,"deletions":15,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static java.io.IO.println;\n@@ -30,20 +31,0 @@\n-static class Targets {\n-    final Script.BuildDir buildDir;\n-    final public Script.JarFile wrapJar;\n-    final Script.JarFile clWrapJar;\n-    final public Script.JarFile glWrapJar;\n-    final public Script.JarFile cuWrapJar;\n-    final public Script.JarFile hatJar;\n-    final public Script.CMakeBuildDir cmakeBuildDir;\n-\n-    Targets(Script.BuildDir buildDir) {\n-        this.buildDir = buildDir;\n-        this.wrapJar = buildDir.jarFile(\"hat-wrap-1.0.jar\");\n-        this.clWrapJar = buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n-        this.glWrapJar = buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n-        this.cuWrapJar = buildDir.jarFile(\"hat-cuwrap-1.0.jar\");\n-        this.hatJar = buildDir.jarFile(\"hat-core-1.0.jar\");\n-\n-        cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n-    }\n-}\n@@ -51,1 +32,4 @@\n-static class Example {\n+static class MavenStyleProject implements Script.ClassPathEntryProvider {\n+    final Script.JarFile jarFile;\n+    final Script.DirEntry dir;\n+    final String name;\n@@ -53,3 +37,1 @@\n-    Script.JarFile jarFile;\n-    Script.DirEntry dir;\n-    String name;\n+    final boolean hasJavaSources;\n@@ -57,1 +39,3 @@\n-    Example(Script.JarFile jarFile, Script.DirEntry dir, String name) {\n+    final List<Script.ClassPathEntryProvider> classPath = new ArrayList<>();\n+    final List<Script.ClassPathEntryProvider> failedDependencies = new ArrayList<>();\n+    MavenStyleProject(Script.JarFile jarFile, Script.DirEntry dir, String name,  Script.ClassPathEntryProvider ...classPathEntryProviders) {\n@@ -61,76 +45,0 @@\n-    }\n-\n-    static Example of(Script.BuildDir buildDir, Script.DirEntry dir) {\n-        return new Example(buildDir.jarFile(\"hat-example-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName());\n-    }\n-}\n-\n-void main(String[] args) {\n-\n-    \/*\n-     *  .\/\n-     *    +--build\/                     All jars, native libs and executables\n-     *    |    +--cmake-build-debug\/    All intermediate cmake artifacts\n-     *    |\n-     *    +--stage\/\n-     *    |    +--repo\/                 All downloaded maven assets (if any)\n-     *    |    |\n-     *    |    +--jextract\/             All jextracted files\n-     *    |    |    +--opencl\n-     *    |    |    +--opengl\n-     *    |    |    +--cuda\n-     *    |\n-     *    +--wrap\/\n-     *    |    +--wrap\/                 All downloaded maven assets\n-     *    |    |    +--wrap\/                (*)\n-     *    |    |    +--clwrap\/              (*)\n-     *    |    |    +--glwrap\/              (*)\n-     *    |    |    +--cuwrap\/              (*)\n-     *    |    |\n-     *    |\n-     *    +--extractions\/\n-     *    |    +--opencl\/\n-     *    |    +--opengl\/\n-     *    |    +--cuda\/\n-     *    |\n-     *    +--hat-core                        * Note maven style layout\n-     *    |    +--src\/main\/java\n-     *    |    |    +--hat\/\n-     *    |    |\n-     *    |    +--src\/main\/test\n-     *    |         +--hat\/\n-     *    |\n-     *    +--backends\n-     *    |    +--java\n-     *    |    |    +--mt                    (*)\n-     *    |    |    +--seq                   (*)\n-     *    |    +--jextracted\n-     *    |    |    +--opencl                (*)\n-     *    |    +--ffi\n-     *    |         +--opencl                (*)\n-     *    |         +--ptx                   (*)\n-     *    |         +--mock                  (*)\n-     *    |         +--spirv                 (*)\n-     *    |         +--cuda                  (*)\n-     *    |         +--hip                   (*)\n-     *    |\n-     *    +--examples\n-     *    |    +--mandel                     (*)\n-     *    |    +--squares                    (*)\n-     *    |    +--heal                       (*)\n-     *    |    +--life                       (*)\n-     *    |    +--nbody                      (*)\n-     *    |    +--experiments                (*)\n-     *    |    +--violajones                 (*)\n-     *\n-     *\/\n-\n-    var dir = Script.DirEntry.current();\n-    var hatCoreDir = dir.existingDir(\"hat-core\");\n-    var backends = dir.existingDir(\"backends\");\n-    var examplesDir = dir.existingDir(\"examples\");\n-    var wrapsDir = dir.existingDir(\"wrap\");\n-    var stageDir = dir.buildDir(\"stage\").create();\n-\n-    var buildDir = Script.BuildDir.of(dir.path(\"build\")).create();\n-    var targets = new Targets(buildDir);\n@@ -138,0 +46,1 @@\n+        this.classPath.addAll(List.of(classPathEntryProviders ));\n@@ -139,11 +48,9 @@\n-    var openclCapability = Script.Capabilities.OpenCL.of();\n-    var openglCapability = Script.Capabilities.OpenGL.of();\n-    var cudaCapability = Script.Capabilities.CUDA.of();\n-    var hipCapability = Script.Capabilities.HIP.of();\n-    var jextractCapability = Script.Capabilities.JExtract.of();\/\/ or Capability.JExtract.of(Path.of(\"\/my\/jextract-22\/bin\/jextract\"));\n-    var cmakeCapability = Script.Capabilities.CMake.of();\n-\n-    Script.Capabilities capabilities = Script.Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);\n-\n-    if (cmakeCapability.available()) {\n-        cmakeCapability.probe(buildDir, capabilities);\n+        for (Script.ClassPathEntryProvider classPathEntryProvider : classPathEntryProviders) {\n+            classPathEntryProvider.classPathEntries().forEach(classPathEntry -> {\n+                if (!classPathEntry.exists()){\n+                    failedDependencies.add(classPathEntry);\n+                }\n+            });\n+        }\n+        this.hasJavaSources = dir.sourceDir(\"src\/main\/java\").javaFiles().findAny().isPresent();\n+      \/\/  println(name+\" failedDependencies.isEmpty()=\"+failedDependencies.isEmpty()+ \" hasJavaSources=\"+hasJavaSources);\n@@ -152,27 +59,12 @@\n-    capabilities.capabilities().forEach(fw -> out.print(\"[\" + fw.name + (fw.available() ? \"\\u2714\" : \"\\u2715\") + \"]\"));\n-    out.println();\n-\n-    var verbose = false;\n-\n-\n-    var hatJavacOpts = Script.javacBuilder($ -> $\n-            .enable_preview()\n-            .add_modules(\"jdk.incubator.code\")\n-            .current_source()\n-    );\n-\n-    var hatJarOptions = Script.jarBuilder($ -> $\n-            .verbose(verbose)\n-    );\n-    Script.jar(hatJarOptions, jar -> jar\n-            .jarFile(targets.hatJar)\n-            .maven_style_root(hatCoreDir)\n-            .javac(hatJavacOpts, javac -> {\n-            })\n-    );\n-\n-    Script.jar(jar -> jar\n-            .jarFile(targets.wrapJar)\n-            .maven_style_root(wrapsDir.dir(\"wrap\"))\n-            .javac(javac -> javac.current_source())\n-    );\n+    static MavenStyleProject example(Script.BuildDir buildDir, Script.DirEntry dir,  Script.ClassPathEntryProvider ...classPathEntryProviders) {\n+        return new MavenStyleProject(buildDir.jarFile(\"hat-example-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName(), classPathEntryProviders);\n+    }\n+    static MavenStyleProject javaBackend(Script.BuildDir buildDir, Script.DirEntry dir,  Script.ClassPathEntryProvider ...classPathEntryProviders) {\n+        return new MavenStyleProject(buildDir.jarFile(\"hat-backend-java-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName(),classPathEntryProviders);\n+    }\n+    static MavenStyleProject ffiBackend(Script.BuildDir buildDir, Script.DirEntry dir,  Script.ClassPathEntryProvider ...classPathEntryProviders) {\n+        return new MavenStyleProject(buildDir.jarFile(\"hat-backend-ffi-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName(),classPathEntryProviders);\n+    }\n+    static MavenStyleProject jextractedBackend(Script.BuildDir buildDir, Script.DirEntry dir,  Script.ClassPathEntryProvider ...classPathEntryProviders) {\n+        return new MavenStyleProject(buildDir.jarFile(\"hat-backend-jextracted-\" + dir.fileName() + \"-1.0.jar\"), dir, dir.fileName(),classPathEntryProviders);\n+    }\n@@ -180,11 +72,3 @@\n-    if (jextractCapability.available()) {\n-        if (openclCapability.available()) {\n-            if (!openclCapability.jarFile(buildDir).exists()) {\n-                if (!openclCapability.stage(stageDir).exists()) {\n-                    Script.jextract(jextractCapability.executable, $ -> $.verbose(verbose).capability(openclCapability, stageDir));\n-                } else {\n-                    out.println(\"Using previously extracted  \" + openclCapability.stage(buildDir).fileName());\n-                }\n-                Script.jar(jar -> jar\n-                        .jarFile(openclCapability.jarFile(buildDir))\n-                        .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openclCapability.stage(stageDir).path())))\n+    static MavenStyleProject of(  Script.DirEntry dir, Script.JarFile jarFile, Script.ClassPathEntryProvider ...classPathEntryProviders) {\n+        return new MavenStyleProject(jarFile, dir, dir.fileName(),classPathEntryProviders);\n+    }\n@@ -192,0 +76,10 @@\n+    boolean canBeBuilt(){\n+        if (hasJavaSources && failedDependencies.isEmpty()) {\n+           return true;\n+        }else if (!hasJavaSources) {\n+            println(\"Skipping \" + jarFile.fileName() + \" no java sources\");\n+        }else  if (!failedDependencies.isEmpty()){\n+            print(\"Skipping \"+jarFile.fileName()+\" failed dependencies \");\n+            for (Script.ClassPathEntryProvider classPathEntryProvider : failedDependencies) {\n+                classPathEntryProvider.classPathEntries().forEach(classPathEntry ->\n+                   print(classPathEntry.fileName())\n@@ -193,2 +87,0 @@\n-            } else {\n-                out.println(\"Using existing extracted \" + openclCapability.jarFile(buildDir).fileName());\n@@ -196,7 +88,3 @@\n-            Script.jar(jar -> jar\n-                    .jarFile(targets.clWrapJar)\n-                    .maven_style_root(wrapsDir.dir(\"clwrap\"))\n-                    .javac(javac -> javac.current_source().class_path(targets.wrapJar, targets.hatJar, openclCapability.jarFile(buildDir)))\n-            );\n-        } else {\n-            out.println(\"This platform does not have OpenCL\");\n+            println(\"\");\n+        }else{\n+            println(\"Skipping \"+jarFile.fileName()+\"why!\");\n@@ -204,0 +92,2 @@\n+        return false;\n+    }\n@@ -205,14 +95,2 @@\n-        if (openglCapability.available()) {\n-            if (!openglCapability.jarFile(buildDir).exists()) {\n-                if (!openglCapability.stage(stageDir).exists()) {\n-                    Script.jextract(jextractCapability, $ -> $.verbose(verbose).capability(openglCapability, stageDir));\n-                } else {\n-                    out.println(\"Using previously extracted  \" + openglCapability.stage(buildDir).fileName());\n-                }\n-                Script.jar(jar -> jar\n-                        .jarFile(openglCapability.jarFile(buildDir))\n-                        .javac(javac -> javac.current_source().source_path(Script.SourceDir.of(openglCapability.stage(stageDir).path())))\n-                );\n-            } else {\n-                out.println(\"Using existing extracted \" + openglCapability.jarFile(buildDir).fileName());\n-            }\n+    public MavenStyleProject build() {\n+        if (canBeBuilt()) {\n@@ -220,2 +98,3 @@\n-                    .jarFile(targets.glWrapJar)\n-                    .maven_style_root(wrapsDir.dir(\"glwrap\"))\n+                    .verbose(false)\n+                    .jarFile(jarFile)\n+                    .maven_style_root(dir)\n@@ -223,0 +102,2 @@\n+                            .enable_preview()\n+                            .add_modules(\"jdk.incubator.code\")\n@@ -224,3 +105,1 @@\n-                            .exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"))\n-                            \/\/.exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"))\n-                            .class_path(targets.wrapJar, openglCapability.jarFile(buildDir))\n+                            .class_path(classPath)\n@@ -229,2 +108,1 @@\n-        } else {\n-            out.println(\"This platform does not have OpenGL\");\n+            println(jarFile.fileName() + \" OK\");\n@@ -232,0 +110,2 @@\n+        return this;\n+    }\n@@ -234,1 +114,0 @@\n-        if (cudaCapability.available()) {\n@@ -236,3 +115,3 @@\n-        } else {\n-            out.println(\"This platform does not have CUDA\");\n-        }\n+    @Override\n+    public List<Script.ClassPathEntry> classPathEntries() {\n+        return List.of(jarFile);\n@@ -240,0 +119,1 @@\n+}\n@@ -241,1 +121,67 @@\n-    var backendJars = new ArrayList<Script.JarFile>();\n+void main(String[] args) {\n+    var layout = \"\"\"\n+       └──.\/\n+           ├──hat                                      \/\/  All build scripts in each case 'foo' has java options for (and points to) 'foo.java'\n+           │    ├──bld                                 \/\/  --enable-preview --source 24 hat\/bld.java\n+           │    ├──bld.java\n+           │    ├──run                                 \/\/  --enable-preview --source 24 hat\/run.java\n+           │    ├──run.java\n+           │    └──Script                              \/\/  Contains all the tools for building\n+           │\n+           ├──build\/                                   \/\/ All jars, native libs and executables\n+           │    └──cmake-build-debug\/                  \/\/ All intermediate cmake artifacts\n+           │        ├── hat-*wrap-1.0.jar              \/\/ Wrapper jars around extracted * (clwrap, glwrap, cuwrap)\n+           │        ├── hat-core-1.0.jar               \/\/ Base hat jar\n+           │        ├── hat-example-*-1.0.jar          \/\/ Example jars (hat-example-nbody-1.0.jar, hat-example-life-1.0.jar)\n+           │        ├── hat-jextracted-opencl-1.0.jar  \/\/ Raw jextracted jars (hat-jextracted-opencl-1.0.jar ....)\n+           │        ├── lib*_backend.[dylib|so]        \/\/ ffi library backends\n+           │        └── *(no suffix)                   \/\/ various generated executables (opencl_info, cuda_info, cuda_squares)\n+           ├──stage\/\n+           │   ├── repo\/\n+           │   │   └── *                               \/\/ Maven artifacts (poms and jars)\n+           │   ├── opencl_jextracted\/                  \/\/ All jextracted files (created using java @hat\/extract\n+           │   │   ├── compile_flags.txt\n+           │   │   └── opencl\n+           │   ├── cuda_jextracted\/\n+           │   │   ├── compile_flags.txt\n+           │   │   └── cuda\n+           │   └── opengl_jextracted\/\n+           │       ├── compile_flags.txt\n+           │       └── opengl\n+           ├──wrap\/\n+           │    └──wrap\/\n+           │         ├──wrap\/                          \/\/ Maven style layout\n+           │         ├──clwrap\/                        \/\/ Maven style layout\n+           │         ├──glwrap\/                        \/\/ Maven style layout\n+           │         └──cuwrap\/                        \/\/ Maven style layout\n+           │\n+           ├──hat-core                                 \/\/ Maven style layout\n+           │    ├──src\/main\/java\n+           │    │    └──hat\/\n+           │    │\n+           │    └──src\/main\/test\n+           │         └──hat\/\n+           │\n+           ├──backends\n+           │    ├──java\n+           │    │    ├──mt                             \/\/ Maven style layout\n+           │    │    └──seq                            \/\/ Maven style layout\n+           │    ├──jextracted\n+           │    │    └──opencl                         \/\/ Maven style layout\n+           │    └──ffi\n+           │         ├──opencl                         \/\/ Maven style layout with cmake\n+           │         ├──ptx                            \/\/ Maven style layout with cmake\n+           │         ├──mock                           \/\/ Maven style layout with cmake\n+           │         ├──spirv                          \/\/ Maven style layout with cmake\n+           │         ├──cuda                           \/\/ Maven style layout with cmake\n+           │         └──hip                            \/\/ Maven style layout with cmake\n+           │\n+           └──examples\n+                ├──mandel                              \/\/ Maven style layout\n+                ├──squares                             \/\/ Maven style layout\n+                ├──heal                                \/\/ Maven style layout\n+                ├──life                                \/\/ Maven style layout\n+                ├──nbody                               \/\/ Maven style layout\n+                ├──experiments                         \/\/ Maven style layout\n+                └──violajones                          \/\/ Maven style layout\n+       \"\"\";\n@@ -243,0 +189,6 @@\n+    var dir = Script.DirEntry.current();\n+    var buildDir = Script.BuildDir.of(dir.path(\"build\")).create();\n+    var cmakeCapability = Script.Capabilities.CMake.required();\n+    Script.Capabilities capabilities = Script.Capabilities.of( cmakeCapability);\n+    cmakeCapability.probe(buildDir, capabilities);\n+    out.println(capabilities.tickOrCheck());\n@@ -244,13 +196,0 @@\n-    \/\/ Here we create all ffi-backend jars.\n-    var ffiBackends = backends.existingDir(\"ffi\");\n-    var ffiBackendSharedDir = ffiBackends.dir(\"shared\");\n-    out.println(\"Shared ffi \" + ffiBackendSharedDir.path());\n-    var ffiSharedBackendJar = buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\");\n-    backendJars.add(ffiSharedBackendJar);\n-    var ffiBackendSharedResult = Script.jar(hatJarOptions, jar -> jar\n-            .jarFile(ffiSharedBackendJar)\n-            .maven_style_root(ffiBackendSharedDir)\n-            .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n-                    .class_path(targets.hatJar)\n-            )\n-    );\n@@ -258,12 +197,4 @@\n-    ffiBackends.subDirs()\n-            .filter(backend -> backend.failsToMatch(\"^.*(spirv|hip|ptx|shared|target|cmake-build-debug|.idea)$\"))\n-            .forEach(backend -> {\n-                var ffiBackendJarFile = buildDir.jarFile(\"hat-backend-ffi-\" + backend.fileName() + \"-1.0.jar\");\n-                backendJars.add(ffiBackendJarFile);\n-                out.println(ffiBackendJarFile.fileName());\n-                Script.jar(hatJarOptions, jar -> jar\n-                        .jarFile(ffiBackendJarFile)\n-                        .maven_style_root(backend)\n-                        .javac(hatJavacOpts, javac -> javac.class_path(targets.hatJar, ffiSharedBackendJar))\n-                );\n-            });\n+    var hatCore = MavenStyleProject.of(\n+            dir.existingDir(\"hat-core\"),\n+            buildDir.jarFile(\"hat-core-1.0.jar\")\n+    ).build();\n@@ -271,12 +202,18 @@\n-    \/\/ Here we create jextracted-backend jars.\n-    var jextractedBackends = backends.existingDir(\"jextracted\");\n-    var jextractedBackendSharedDir = jextractedBackends.dir(\"shared\");\n-    out.println(\"Shared jextracted \" + jextractedBackendSharedDir.path());\n-    var jextractedSharedBackendJar = buildDir.jarFile(\"hat-backend-jextracted-shared-1.0.jar\");\n-    backendJars.add(jextractedSharedBackendJar);\n-    var jextractedBackendSharedResult = Script.jar(hatJarOptions, jar -> jar\n-            .jarFile(jextractedSharedBackendJar)\n-            .maven_style_root(jextractedBackendSharedDir)\n-            .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n-                    .class_path(targets.hatJar)\n-            )\n+    var wrapsDir = dir.existingDir(\"wrap\");\n+\n+    var wrap = MavenStyleProject.of(wrapsDir.existingDir(\"wrap\"), buildDir.jarFile(\"hat-wrap-1.0.jar\")\n+    ).build();\n+\n+    var extractionsDir = dir.existingDir(\"extractions\");\n+\n+    var extractionsCmakeBuildDir = extractionsDir.cMakeBuildDir(\"cmake-build-debug\");\n+    if (!extractionsCmakeBuildDir.exists()) {\n+        Script.cmake($ -> $\n+                .verbose(false)\n+                .source_dir(extractionsDir)\n+                .build_dir(extractionsCmakeBuildDir)\n+        );\n+    }\n+    Script.cmake($ -> $\n+            .build(extractionsCmakeBuildDir)\n+            .target(\"extract\")\n@@ -284,0 +221,6 @@\n+    var jextractedOpenCLDir = extractionsDir.dir(\"opencl\");\n+    var extractedOpenCLJar = buildDir.jarFile(\"hat-jextracted-opencl-1.0.jar\");\n+    if (jextractedOpenCLDir.exists()) {\n+        MavenStyleProject.of(jextractedOpenCLDir,extractedOpenCLJar).build();\n+    }\n+    var extractedOpenGLJar = buildDir.jarFile(\"hat-jextracted-opengl-1.0.jar\");\n@@ -285,10 +228,21 @@\n-    if (openclCapability.available()) {\n-        var jextractedBackendOpenCLDir = jextractedBackends.dir(\"opencl\");\n-        out.println(\"OpenCL jextracted \" + jextractedBackendOpenCLDir.path());\n-        var jextractedOpenCLBackendJar = buildDir.jarFile(\"hat-backend-jextracted-opencl-1.0.jar\");\n-        backendJars.add(jextractedOpenCLBackendJar);\n-        Script.jar(hatJarOptions, jar -> jar\n-                .jarFile(jextractedOpenCLBackendJar)\n-                .maven_style_root(jextractedBackendOpenCLDir)\n-                .javac(hatJavacOpts, javac -> javac.verbose(verbose)\n-                        .class_path(targets.hatJar, openclCapability.jarFile(buildDir), jextractedBackendSharedResult)\n+    var jextractedOpenGLDir = extractionsDir.dir(\"opengl\");\n+    if (jextractedOpenGLDir.exists()) {\n+        MavenStyleProject.of(jextractedOpenGLDir,extractedOpenGLJar).build();\n+    }\n+    var clWrap = MavenStyleProject.of(wrapsDir.dir(\"clwrap\"), buildDir.jarFile(\"hat-clwrap-1.0.jar\"),\n+            wrap, hatCore, extractedOpenCLJar\n+    ).build();\n+\n+\n+    var glWrap = MavenStyleProject.of(wrapsDir.dir(\"glwrap\"), buildDir.jarFile(\"hat-glwrap-1.0.jar\"),\n+            wrap, hatCore, extractedOpenGLJar\n+    ); \/\/ we can't use build, we need a custom build because of the file exclusions\n+    if (glWrap.canBeBuilt()) {\n+        Script.jar(jar -> jar\n+                .jarFile(glWrap.jarFile)\n+                .maven_style_root(glWrap.dir)\n+                .javac(javac -> javac\n+                        .current_source()\n+                        .exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"))\n+                        \/\/.exclude(javaSrc -> javaSrc.matches(\"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"))\n+                        .class_path(wrap, extractedOpenGLJar)\n@@ -297,0 +251,1 @@\n+        println(glWrap.jarFile.fileName()+\" OK\");\n@@ -299,0 +254,14 @@\n+    var extractedCudaJar = buildDir.jarFile(\"hat-jextracted-cuda-1.0.jar\");\n+    var cuWrap = MavenStyleProject.of(wrapsDir.dir(\"cuwrap\"), buildDir.jarFile(\"hat-cuwrap-1.0.jar\"),\n+            extractedCudaJar\n+    ).build();\n+\n+\n+    var backendsDir = dir.existingDir(\"backends\");\n+\n+    var ffiBackendsDir = backendsDir.existingDir(\"ffi\");\n+\n+    var ffiBackendShared = MavenStyleProject.of(ffiBackendsDir.existingDir(\"shared\"),\n+            buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\"),\n+            hatCore\n+    ).build();\n@@ -300,2 +269,19 @@\n-    \/\/ Here we create all java backend jars.\n-    backends.existingDir(\"java\")\n+    ffiBackendsDir.subDirs()\n+            .filter(ffiBackend -> ffiBackend.matches(\"^.*(mock|opencl)$\"))\n+            .map(ffiBackend->MavenStyleProject.ffiBackend(buildDir,ffiBackend,hatCore,ffiBackendShared))\n+            .forEach(MavenStyleProject::build);\n+\n+    var jextractedBackends = backendsDir.existingDir(\"jextracted\");\n+    var jextractedBackendShared = MavenStyleProject.jextractedBackend(buildDir,\n+            jextractedBackends.existingDir(\"shared\"),\n+            hatCore\n+    ).build();\n+\n+    var jextractedBackendOpenCL = MavenStyleProject.jextractedBackend(buildDir,\n+            jextractedBackends.dir(\"opencl\"),\n+            buildDir.jarFile(\"hat-backend-jextracted-opencl-1.0.jar\"),\n+            hatCore, extractedOpenCLJar, jextractedBackendShared\n+            ).build();\n+\n+    var javaBackendsDir = backendsDir.existingDir(\"java\");\n+    javaBackendsDir\n@@ -303,10 +289,3 @@\n-            .filter(backend -> backend.failsToMatch(\"^.*(target|.idea)$\"))\n-            .forEach(backend -> {\n-                var backendJavaJar = buildDir.jarFile(\"hat-backend-java-\" + backend.fileName() + \"-1.0.jar\");\n-                out.println(backendJavaJar.fileName());\n-                backendJars.add(backendJavaJar);\n-                Script.jar(hatJarOptions, jar -> jar\n-                        .jarFile(backendJavaJar)\n-                        .dir_list(backend.dir(\"src\/main\/resources\"))\n-                );\n-            });\n+            .filter(backend -> backend.matches(\"^.*(mt|seq)$\"))\n+            .map(javaBackend->MavenStyleProject.javaBackend(buildDir,javaBackend,hatCore))\n+            .forEach(MavenStyleProject::build);\n@@ -314,27 +293,20 @@\n-    backendJars.forEach(j -> out.println(\" backend \" + j.path()));\n-\n-    examplesDir.subDirs()\n-            .filter(exampleDir -> exampleDir.failsToMatch(\"^.*(experiments|target|.idea)$\"))\n-            .map(exampleDir -> Example.of(targets.buildDir, exampleDir))\n-            .forEach(example -> {\n-                out.println(example.jarFile.fileName());\n-                Script.jar(hatJarOptions, jar -> jar\n-                        .jarFile(example.jarFile)\n-                        .maven_style_root(example.dir)\n-                        .javac(hatJavacOpts, javac ->\n-                                javac.class_path(targets.hatJar)\n-                                        .when(example.dir.matches(\"^.*(nbody)$\")\n-                                           && jextractCapability.available()\n-                                           && openclCapability.available()\n-                                            && openglCapability.available(), _ ->\n-                                                javac.class_path(targets.wrapJar,\n-                                                        targets.clWrapJar, openclCapability.jarFile(buildDir),\n-                                                        buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"),\n-                                                        targets.glWrapJar, openglCapability.jarFile(buildDir)\n-\n-                                                )\n-                                        )\n-                        )\n-                        .manifest(manifest -> manifest.main_class(example.name + \".Main\"))\n-                );\n-            });\n+    var examplesDir = dir.existingDir(\"examples\");\n+    examplesDir\n+            .subDirs()\n+            .filter(exampleDir -> exampleDir.failsToMatch(\"^.*(experiments|nbody|target|.idea)$\"))\n+            .map(exampleDir ->  MavenStyleProject.example(buildDir, exampleDir, hatCore))\n+            .forEach(MavenStyleProject::build);\n+\n+    var ffiOpenCLBackendJar = buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\");\n+    examplesDir\n+            .subDirs()\n+            .filter(exampleDir -> exampleDir.matches(\"^.*(nbody)$\"))\n+            .map(exampleDir ->  MavenStyleProject.example(buildDir,exampleDir,\n+                            hatCore,\n+                            wrap,\n+                            clWrap, extractedOpenCLJar,\n+                            ffiOpenCLBackendJar,\n+                            glWrap, extractedOpenGLJar\n+                            )\n+            )\n+            .forEach(MavenStyleProject::build);\n@@ -343,2 +315,2 @@\n-    if (cmakeCapability.available()) {\n-        if (!targets.cmakeBuildDir.exists()) {\n+        var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+        if (!cmakeBuildDir.exists()) {\n@@ -346,3 +318,3 @@\n-                    .verbose(verbose)\n-                    .source_dir(ffiBackends)\n-                    .build_dir(targets.cmakeBuildDir)\n+                    .verbose(false)\n+                    .source_dir(ffiBackendsDir)\n+                    .build_dir(cmakeBuildDir)\n@@ -353,1 +325,1 @@\n-                .build(targets.cmakeBuildDir)\n+                .build(cmakeBuildDir)\n@@ -355,3 +327,1 @@\n-    } else {\n-        out.println(\"No cmake available so we did not build ffi backend shared libs\");\n-    }\n+\n","filename":"hat\/hat\/bld.java","additions":250,"deletions":280,"binary":false,"changes":530,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 hat\/extract.java\n\\ No newline at end of file\n","filename":"hat\/hat\/extract","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ *\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import static java.lang.System.out;\n+\n+void main(String[] args) {\n+    var layout = \"\"\"\n+            └──.\/\n+                ├──hat                         All build scripts in each case 'foo' has java options for (and points to) 'foo.java'\n+                │    ├──bld                    --enable-preview --source 24 hat\/bld.java\n+                │    ├──bld.java\n+                │    ├──run                    --enable-preview --source 24 hat\/run.java\n+                │    ├──run.java\n+                │    └──Script                 Contains all the tools for building\n+                │\n+                ├──build\/                            All jars, native libs and executables\n+                │    └──cmake-build-debug\/           All intermediate cmake artifacts\n+                │        ├── hat-*wrap-1.0.jar              Wrapper jars around extracted * (clwrap, glwrap, cuwrap)\n+                │        ├── hat-core-1.0.jar               Base hat jar\n+                │        ├── hat-example-*-1.0.jar          Example jars (hat-example-nbody-1.0.jar, hat-example-life-1.0.jar)\n+                │        ├── hat-jextracted-opencl-1.0.jar  Raw jextracted jars (hat-jextracted-opencl-1.0.jar ....)\n+                │        ├── lib*_backend.[dylib|so]        ffi library backends\n+                │        └── *(no suffix)                   various generated executables (opencl_info, cuda_info, cuda_squares)\n+                ├──stage\/\n+                │   ├── repo\/\n+                │   │   └── *                      Maven artifacts (poms and jars)\n+                │   ├── opencl_jextracted\/         All jextracted files (created using java @hat\/extract\n+                │   │   ├── compile_flags.txt\n+                │   │   └── opencl\n+                │   ├── cuda_jextracted\/\n+                │   │   ├── compile_flags.txt\n+                │   │   └── cuda\n+                │   └── opengl_jextracted\/\n+                │       ├── compile_flags.txt\n+                │       └── opengl\n+                ├──wrap\/\n+                │    └──wrap\/                 All downloaded maven assets\n+                │         ├──wrap\/                (*)\n+                │         ├──clwrap\/              (*)\n+                │         ├──glwrap\/              (*)\n+                │         └──cuwrap\/              (*)\n+                │\n+                ├──hat-core                       Maven style layout\n+                │    ├──src\/main\/java\n+                │    │    └──hat\/\n+                │    │\n+                │    └──src\/main\/test\n+                │         └──hat\/\n+                │\n+                ├──backends\n+                │    ├──java\n+                │    │    ├──mt                    Maven style layout\n+                │    │    └──seq                   Maven style layout\n+                │    ├──jextracted\n+                │    │    └──opencl                Maven style layout\n+                │    └──ffi\n+                │         ├──opencl                Maven style layout with cmake\n+                │         ├──ptx                   Maven style layout with cmake\n+                │         ├──mock                  Maven style layout with cmake\n+                │         ├──spirv                 Maven style layout with cmake\n+                │         ├──cuda                  Maven style layout with cmake\n+                │         └──hip                   Maven style layout with cmake\n+                │\n+                └──examples\n+                     ├──mandel                     Maven style layout\n+                     ├──squares                    Maven style layout\n+                     ├──heal                       Maven style layout\n+                     ├──life                       Maven style layout\n+                     ├──nbody                      Maven style layout\n+                     ├──experiments                Maven style layout\n+                     └──violajones                 Maven style layout\n+            \"\"\";\n+\n+    var dir = Script.DirEntry.current();\n+    var buildDir = Script.BuildDir.of(dir.path(\"build\")).create();\n+\n+    var jextractCapability = Script.Capabilities.JExtract.required();\n+    var cmakeCapability = Script.Capabilities.CMake.required();\n+\n+\n+    var openclCapability = Script.Capabilities.OpenCL.of();\n+    var openglCapability = Script.Capabilities.OpenGL.of();\n+    var cudaCapability = Script.Capabilities.CUDA.of();\n+    var hipCapability = Script.Capabilities.HIP.of();\n+\n+    Script.Capabilities capabilities = Script.Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);\n+\n+    cmakeCapability.probe(buildDir, capabilities);\n+\n+    var stageDir = dir.buildDir(\"stage\").create();\n+\n+    println(capabilities.tickOrCheck());\n+\n+    Stream.of(openglCapability, openclCapability, cudaCapability,hipCapability)\n+            .filter(capability -> {\n+                          out.println(capability.tickOrCheck());\n+                if (!capability.available()) {\n+                    out.println(\"This platform does not have \" + capability.name);\n+                }\n+                return capability.available();\n+            })\n+            .forEach(capability -> {\n+                var extractedDir = stageDir.buildDir(capability.packageName() + \"_jextracted\");\n+                if (!extractedDir.exists()) {\n+                    Script.jextract(jextractCapability.executable, $ -> $.verbose(true).capability(capability, extractedDir));\n+                } else {\n+                    out.println(\"Using previously extracted  \" + extractedDir.fileName());\n+                }\n+                var extractedJar = buildDir.jarFile(\"hat-jextracted-\" + capability.packageName() + \"-1.0.jar\");\n+                Script.jar(jar -> jar\n+                        .jarFile(extractedJar)\n+                        .javac(javac -> javac\n+                                .current_source()\n+                                .source_path(Script.SourceDir.of(extractedDir))\n+                        )\n+                );\n+            });\n+\n+}\n+\n","filename":"hat\/hat\/extract.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -25,0 +25,15 @@\n+class Config{\n+     boolean headless=false;\n+     boolean verbose = false;\n+     boolean startOnFirstThread = false;\n+     boolean justShowCommandline = false;\n+     String backendName = null;\n+     Script.JarFile backendJar= null;\n+     String exampleName = null;\n+     String examplePackageName = null;\n+     String exampleClassName =  null;\n+     Script.JarFile exampleJar= null;\n+     List<Script.ClassPathEntryProvider> classpath = new ArrayList<>();\n+     List<String> vmargs = new ArrayList<>();\n+     List<String> appargs = new ArrayList<>();\n+     Config(Script.BuildDir buildDir,  String[] args){\n@@ -26,0 +41,70 @@\n+        classpath.add(buildDir.jarFile(\"hat-core-1.0.jar\"));\n+        for (int arg=0;arg<args.length;arg++){\n+            if (args[arg].startsWith(\"ffi-\")) {\n+                backendName = args[arg];\n+                backendJar = buildDir.jarFile(\"hat-backend-\" + backendName + \"-1.0.jar\");\n+                classpath.add(buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\"));\n+                classpath.add(backendJar);\n+                if (verbose){\n+                    println(\"backend \"+backendName);\n+                }\n+            }else if (args[arg].startsWith(\"ext--\")){\n+                backendName = args[arg];\n+                backendJar = buildDir.jarFile(\"hat-backend-\" + backendName + \"-1.0.jar\");\n+                classpath.add(buildDir.jarFile(\"hat-backend-jextracted-shared-1.0.jar\"));\n+                classpath.add(backendJar);\n+                if (verbose){\n+                    println(\"backend \"+backendName);\n+                }\n+            }else if (args[arg].startsWith(\"java-\")){\n+                backendName = args[arg];\n+                backendJar = buildDir.jarFile(\"hat-backend-\"+backendName+\"-1.0.jar\");\n+                classpath.add(backendJar);\n+                if (verbose){\n+                    println(\"backend \"+backendName);\n+                }\n+            }else{\n+                switch (args[arg]) {\n+                   case \"headless\" -> headless = true;\n+                   case \"verbose\" -> verbose = true;\n+                   case \"justShowCommandLine\" -> justShowCommandline = true;\n+                   case \"startOnFirstThread\" -> startOnFirstThread = true;\n+                   default ->{\n+                       var proposedExampleName = args[arg];\n+                       int lastDot = proposedExampleName.lastIndexOf('.');\n+                       var proposedExampleClass=\"Main\";\n+                       var proposedPackageName=args[arg];\n+                       if (lastDot != -1){\n+                           proposedExampleClass = proposedExampleName.substring(lastDot + 1);\n+                           proposedPackageName = proposedExampleName.substring(0,lastDot);\n+                       }\n+                       var proposedJar = buildDir.jarFile(\"hat-example-\"+proposedPackageName+\"-1.0.jar\");\n+                       if (proposedJar.exists()) {\n+                           exampleClassName = proposedExampleClass;\n+                           examplePackageName =exampleName = proposedPackageName;\n+                           exampleJar = proposedJar;\n+                           if (exampleJar.exists()){\n+                               classpath.add(exampleJar);\n+                               if (verbose){\n+                                   println(\"example \"+examplePackageName+\".\"+exampleClassName);\n+                               }\n+                           }else{\n+                               if (exampleClassName == null) {\n+                                   this.vmargs.add(args[arg]);\n+                               }else{\n+                                   this.appargs.add(args[arg]);\n+                               }\n+                           }\n+                       }else{\n+                           if (exampleClassName == null) {\n+                               this.vmargs.add(args[arg]);\n+                           }else{\n+                               this.appargs.add(args[arg]);\n+                           }\n+                       }\n+                   }\n+                }\n+            }\n+        }\n+    }\n+}\n@@ -46,11 +131,45 @@\n-  var hatDir =  Script.DirEntry.current();\n-  var backends = hatDir.existingDir(\"backends\");\n-  var examples = hatDir.dir(\"examples\");\n-  var buildDir = hatDir.existingBuildDir(\"build\");\n-  var ffiBackendSharedJar = buildDir.jarFile(\"hat-backend-ffi-shared-1.0.jar\");\n-  var jextractedOpenCLJar = buildDir.jarFile(\"hat-jextracted-opencl-1.0.jar\");\n-  var jextractedOpenGLJar = buildDir.jarFile(\"hat-jextracted-opengl-1.0.jar\");\n-  var wrapJar = buildDir.jarFile(\"hat-wrap-1.0.jar\");\n-  var clwrapJar = buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n-  var glwrapJar = buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n-  var verbose = false;\n+      var hatDir = Script.DirEntry.current();\n+      var buildDir = hatDir.existingBuildDir(\"build\");\n+\n+      Config config = new Config(buildDir,argv);\n+      if (config.classpath.isEmpty() ) {\n+          println(\"Classpath is empty!\");\n+      }else if (config.backendJar == null || !config.backendJar.exists()) {\n+          println(\"No backend !\");\n+      }else if (!config.exampleJar.exists()){\n+          println(\"No example !\");\n+      }else{\n+          var jextractedOpenCLJar = buildDir.jarFile(\"hat-jextracted-opencl-1.0.jar\");\n+          var jextractedOpenGLJar = buildDir.jarFile(\"hat-jextracted-opengl-1.0.jar\");\n+          var wrapJar = buildDir.jarFile(\"hat-wrap-1.0.jar\");\n+          var clwrapJar = buildDir.jarFile(\"hat-clwrap-1.0.jar\");\n+          var glwrapJar = buildDir.jarFile(\"hat-glwrap-1.0.jar\");\n+          switch (config.backendName){\n+             default -> {}\n+          }\n+          switch (config.exampleName){\n+              case \"nbody\" -> {\n+                  config.startOnFirstThread = true;\n+                  config.classpath.addAll(List.of(\n+                          wrapJar,\n+                          clwrapJar, jextractedOpenCLJar,\n+                          glwrapJar, jextractedOpenGLJar,\n+                          clwrapJar, jextractedOpenCLJar)\n+                  );\n+              }\n+              default -> {}\n+          }\n+      }\n+      Script.java(java -> java\n+              .enable_preview()\n+              .verbose(config.verbose)\n+              .enable_native_access(\"ALL-UNNAMED\")\n+              .library_path(buildDir)\n+              .when(config.headless, Script.JavaBuilder::headless)\n+              .when(config.startOnFirstThread, Script.JavaBuilder::start_on_first_thread)\n+              .class_path(config.classpath)\n+              .vmargs(config.vmargs)\n+              .main_class(config.examplePackageName + \".\"+config.exampleClassName)\n+              .args(config.appargs)\n+              .justShowCommandline(config.justShowCommandline)\n+      );\n@@ -58,42 +177,0 @@\n-  var args = new ArrayList<>(List.of(argv));\n-  Script.java(java -> java\n-     .enable_preview()\n-     .verbose(verbose)\n-     \/\/.add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n-     .enable_native_access(\"ALL-UNNAMED\")\n-     .library_path(buildDir)\n-     .class_path(buildDir.jarFile(\"hat-core-1.0.jar\"))\n-     .when((!args.isEmpty() && args.getFirst().equals(\"headless\")), ifHeadless -> {\n-        ifHeadless.headless();\n-        args.removeFirst();\n-     })\n-     .either(!args.isEmpty(), haveBackend -> {\n-        var backendName = args.removeFirst();\n-        if (backends.dir(backendName.replace('-','\/')) instanceof Script.DirEntry backend && backend.exists()) {\n-           haveBackend.class_path(buildDir.jarFile(\"hat-backend-\" + backendName + \"-1.0.jar\"));\n-           if (backendName.equals(\"ffi-opencl\")){\n-               haveBackend.class_path(wrapJar, clwrapJar, jextractedOpenCLJar, ffiBackendSharedJar );\n-           }\n-           if (backendName.equals(\"ffi-cuda\")){\n-               haveBackend.class_path(ffiBackendSharedJar );\n-           }\n-        } else {\n-           throw new RuntimeException(\"No such backend \" + backendName);\n-        }\n-        if (!args.isEmpty() && args.removeFirst() instanceof String exampleName) {\n-           if (examples.dir(exampleName) instanceof Script.DirEntry example && example.exists()) { haveBackend\n-              .class_path(buildDir.jarFile(\"hat-example-\" + exampleName + \"-1.0.jar\"))\n-              .when(jextractedOpenCLJar.exists() && jextractedOpenGLJar.exists() && exampleName.equals(\"nbody\"), _->{ haveBackend\n-                  .class_path(jextractedOpenCLJar,jextractedOpenGLJar, wrapJar, clwrapJar, glwrapJar )\n-                  .start_on_first_thread();\n-              })\n-              .main_class(exampleName + \".Main\")\n-              .args(args);\n-           } else {\n-              throw new RuntimeException(\"no such example \" + exampleName);\n-           }\n-        }\n-     }, _ -> {\n-        throw new RuntimeException(\"No backend provided...\\n\" + usage);\n-     })\n-  );\n","filename":"hat\/hat\/run.java","additions":130,"deletions":53,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    .filter(dir -> dir.matches(\"^.*(hat|wrap|examples|backends|docs|bldr)$\"))\n+    .filter(dir -> dir.matches(\"^.*(hat|wrap|examples|backends|docs|bldr|hat-core|extractions)$\"))\n@@ -33,2 +33,3 @@\n-          .filter((path)->Pattern.matches(\"^.*\\\\.(java|cpp|h|hpp|md)$\", path.toString()))\n-          .filter((path)->!Pattern.matches(\"^.*examples\/life\/src\/main\/java\/io.*$\", path.toString()))\n+          .filter((path)->Pattern.matches(\"^.*\/.*\\\\.(java|cpp|h|hpp|md)$\", path.toString()))\n+          .filter((path)->!Pattern.matches(\"^.*examples\/life\/src\/main\/java\/io.*$\", path.toString())) \/\/ Life example has some open source files\n+          .filter((path)->!Pattern.matches(\"^.*CMakeFiles.*$\", path.toString()))\n","filename":"hat\/hat\/sanity.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}