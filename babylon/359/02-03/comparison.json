{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.util.List;\n@@ -80,1 +81,1 @@\n-    public static <T> Tensor<T> If(Tensor<Boolean> cond, Supplier<Tensor<T>> elseBody, Supplier<Tensor<T>> thenBody) {\n+    public static <T> List<Tensor<T>> If(Tensor<Boolean> cond, Supplier<List<Tensor<T>>> elseBody, Supplier<List<Tensor<T>>> thenBody) {\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ExplicitOnnxOperators.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -381,6 +381,11 @@\n-                        case CoreOp.InvokeOp io when io.invokeDescriptor().refType().equals(JavaType.type(List.class))\n-                                                  && io.invokeDescriptor().name().equals(\"get\")\n-                                                  && io.operands().getLast() instanceof Op.Result or\n-                                                  && or.op() instanceof CoreOp.ConstantOp co\n-                                                  && co.value() instanceof Integer i ->\n-                            indexer.put(io.result(), indexer.getName(io.operands().getFirst(), i));\n+                        case CoreOp.InvokeOp io when io.invokeDescriptor().refType().equals(JavaType.type(List.class)) -> {\n+                            if (io.invokeDescriptor().name().equals(\"get\") && io.operands().getLast() instanceof Op.Result or && or.op() instanceof CoreOp.ConstantOp co && co.value() instanceof Integer i) {\n+                                indexer.put(io.result(), indexer.getName(io.operands().getFirst(), i));\n+                            } else if (io.invokeDescriptor().name().equals(\"of\")) {\n+                                for (int i = 0; i < io.operands().size(); i++) {\n+                                    indexer.put(io.result(),  indexer.getName(io.operands().get(i), i));\n+                                }\n+                            } else {\n+                                throw new UnsupportedOperationException(op.toText());\n+                            }\n+                        }\n@@ -388,1 +393,0 @@\n-                            System.out.println(op.parent().parent().parent().toText());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-        return OnnxOperators.If(cond, () -> OnnxOperators.Constant(-1f), () -> OnnxOperators.Constant(1f));\n+        return OnnxOperators.If(cond, () -> List.of(OnnxOperators.Constant(-1f)), () -> List.of(OnnxOperators.Constant(1f))).get(0);\n@@ -169,1 +169,1 @@\n-        return OnnxOperators.If(cond, () -> OnnxOperators.Identity(falseValue), () -> OnnxOperators.Identity(trueValue));\n+        return OnnxOperators.If(cond, () -> List.of(OnnxOperators.Identity(falseValue)), () -> List.of(OnnxOperators.Identity(trueValue))).get(0);\n@@ -208,2 +208,2 @@\n-                        () -> OnnxOperators.Identity(initialized4),\n-                        () -> OnnxOperators.Identity(initialized3)),\n+                        () -> List.of(OnnxOperators.Identity(initialized4)),\n+                        () -> List.of(OnnxOperators.Identity(initialized3))),\n@@ -211,2 +211,2 @@\n-                        () -> OnnxOperators.Identity(initialized2),\n-                        () -> OnnxOperators.Identity(initialized)));\n+                        () -> List.of(OnnxOperators.Identity(initialized2)),\n+                        () -> List.of(OnnxOperators.Identity(initialized)))).get(0);\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/SimpleTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}