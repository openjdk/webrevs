{"files":[{"patch":"@@ -61,1 +61,1 @@\n-    interface St {\n+    interface State {\n@@ -65,7 +65,7 @@\n-        record awaiting_name(Regex r) implements St {}\n-        record awaiting_lazer(Regex r) implements St {}\n-        record awaiting_counts(Regex r) implements St {}\n-        record awaiting_vertices(Regex r) implements St {}\n-        record awaiting_hue_lig_sat(Regex r) implements St {}\n-        record awaiting_faces() implements St { }\n-        record done() implements St{}\n+        record awaiting_name(Regex r) implements State {}\n+        record awaiting_lazer(Regex r) implements State {}\n+        record awaiting_counts(Regex r) implements State {}\n+        record awaiting_vertices(Regex r) implements State {}\n+        record awaiting_hue_lig_sat(Regex r) implements State {}\n+        record awaiting_faces() implements State { }\n+        record done() implements State {}\n@@ -84,1 +84,1 @@\n-        final var st = StreamMutable.of((St) St.awaiting_name);\n+        final var st = StreamMutable.of((State) State.awaiting_name);\n@@ -90,15 +90,4 @@\n-                   \/\/ System.out.println(st.get().name());\n-                    if (st.get() instanceof St.awaiting_name(Regex r) && r.matches(line, whoseMatcher -> whoseMatcher.group(1).equals(name))) {\n-                        st.set(St.awaiting_lazer);\n-                        mesh.set(F32Mesh3D.of(name));\n-                    } else if (st.get() instanceof St.awaiting_lazer(Regex r)) {\n-                        st.setIf(r.matches(line), St.awaiting_counts);\n-                    } else if (st.get() instanceof St.awaiting_counts(Regex r)) {\n-                        st.setIf(r.matches(line), St.awaiting_vertices);\n-                    } else if (st.get() instanceof St.awaiting_vertices(Regex r)) {\n-                        st.setIf(r.matches(line), St.awaiting_faces);\n-                    } else if (st.get() instanceof St.awaiting_faces s) {\n-                        if (vertexRegex.is(line) instanceof Regex.OK ok) {\n-                            mesh.get().vec3(ok.f(1), ok.f(2), ok.f(3));\n-                        } else if (facesRegex.matchesOrThrow(line)) {\n-                            st.set(St.awaiting_hue_lig_sat);\n+                    switch(st.get()){\n+                        case State.awaiting_name s when s.r().matches(line, whoseMatcher -> whoseMatcher.group(1).equals(name))->{\n+                            st.set(State.awaiting_lazer);\n+                            mesh.set(F32Mesh3D.of(name));\n@@ -106,13 +95,8 @@\n-                    } else if (st.get() instanceof St.awaiting_hue_lig_sat(Regex r)) {\n-                        if (Regex.any(line, face6Regex, face5Regex, face4Regex, face3Regex) instanceof Regex.OK ok) {\n-                            int v0 = mesh.get().vecEntries[ok.i(6)];\n-                            int v1 = mesh.get().vecEntries[ok.i(7)];\n-                            int v2 = mesh.get().vecEntries[ok.i(8)];\n-                            if (ok.regex() == face3Regex) {\n-                                mesh.get().tri(v0, v1, v2, 0x00ff00);\n-                            } else if (ok.regex() == face4Regex) {\n-                                mesh.get().quad(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], 0xff0000);\n-                            } else if (ok.regex() == face5Regex) {\n-                                mesh.get().pent(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], mesh.get().vecEntries[ok.i(10)], 0x0000ff);\n-                            } else {\n-                                mesh.get().hex(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], mesh.get().vecEntries[ok.i(10)], mesh.get().vecEntries[ok.i(11)], 0xfff000);\n+                        case State.awaiting_lazer s-> st.setIf(s.r.matches(line), State.awaiting_counts);\n+                        case State.awaiting_counts s-> st.setIf(s.r.matches(line), State.awaiting_vertices);\n+                        case State.awaiting_vertices s-> st.setIf(s.r.matches(line), State.awaiting_faces);\n+                        case State.awaiting_faces _-> {\n+                            if (vertexRegex.is(line) instanceof Regex.OK ok) {\n+                                mesh.get().vec3(ok.f(1), ok.f(2), ok.f(3));\n+                            } else if (facesRegex.matchesOrThrow(line)) {\n+                                st.set(State.awaiting_hue_lig_sat);\n@@ -120,5 +104,0 @@\n-                        } else if (r.matches(line)) {\n-                            mesh.get().fin();\n-                            st.set(St.done);\n-                        }else if (!remRegex.matches(line)){\n-                            System.out.println(\"UNHANDLED \"+line);\n@@ -126,4 +105,24 @@\n-                    }else if (st.get() instanceof St.done){\n-                        \/\/ we don't care\n-                    } else if (st.get() instanceof St &&  Regex.any(line, remRegex, emptyRegex, colonRegex).matched()) {\n-                        \/\/ we dont care ;)\n+                        case State.awaiting_hue_lig_sat s-> {\n+                            if (Regex.any(line, face6Regex, face5Regex, face4Regex, face3Regex) instanceof Regex.OK ok) {\n+                                int v0 = mesh.get().vecEntries[ok.i(6)];\n+                                int v1 = mesh.get().vecEntries[ok.i(7)];\n+                                int v2 = mesh.get().vecEntries[ok.i(8)];\n+                                if (ok.regex() == face3Regex) {\n+                                    mesh.get().tri(v0, v1, v2, 0x00ff00);\n+                                } else if (ok.regex() == face4Regex) {\n+                                    mesh.get().quad(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], 0xff0000);\n+                                } else if (ok.regex() == face5Regex) {\n+                                    mesh.get().pent(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], mesh.get().vecEntries[ok.i(10)], 0x0000ff);\n+                                } else {\n+                                    mesh.get().hex(v0, v1, v2, mesh.get().vecEntries[ok.i(9)], mesh.get().vecEntries[ok.i(10)], mesh.get().vecEntries[ok.i(11)], 0xfff000);\n+                                }\n+                            } else if (s.r().matches(line)) {\n+                                mesh.get().fin();\n+                                st.set(State.done);\n+                            }else if (!remRegex.matches(line)){\n+                                System.out.println(\"UNHANDLED \"+line);\n+                            }\n+                        }\n+                        case State.done _-> {}\n+                        case State _ when Regex.any(line, remRegex, emptyRegex, colonRegex).matched()->{}\n+                        case State _ ->{}\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/EliteMeshReader.java","additions":45,"deletions":46,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        \/\/args.add(\"COBRA\");\n+      \/\/  args.add(\"COBRA\");\n@@ -53,3 +53,3 @@\n-                     for (int x = -2; x < 4; x += 2) {\n-                         for (int y = -2; y < 4; y += 2) {\n-                             for (int z = -2; z < 4; z += 2) {\n+                     for (int x = -2; x < 6; x += 2) {\n+                         for (int y = -2; y < 6; y += 2) {\n+                             for (int z = -2; z < 6; z += 2) {\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/Main.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    public static Pool pool = new Pool(1600);\n+    public static Pool pool = new Pool(12800);\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Triangle3D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    public static Pool pool = new Pool(10000);\n+    public static Pool pool = new Pool(90000);\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/f32\/F32Vec3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    public static int MAX = 1000;\n+    public static int MAX = 9000;\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/i32\/I32Triangle2D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    public  static final int MAX = 3200;\n+    public  static final int MAX = 12800;\n","filename":"hat\/examples\/view\/src\/main\/java\/view\/i32\/I32Vec2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}