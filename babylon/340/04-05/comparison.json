{"files":[{"patch":"@@ -149,0 +149,8 @@\n+    public static <T> Tensor<T> ofShape(long[] shape, byte[] rawData, ElementType elementType) {\n+        return ofShape(Arena.ofAuto(), shape, rawData, elementType);\n+    }\n+\n+    public static <T> Tensor<T> ofShape(Arena arena, long[] shape, byte[] rawData, ElementType elementType) {\n+        return new Tensor(arena, arena.allocateFrom(ValueLayout.JAVA_BYTE, rawData), elementType, shape);\n+    }\n+\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/Tensor.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,3 +26,1 @@\n-import jdk.incubator.code.CodeReflection;\n-\n-import java.io.*;\n+import java.io.IOException;\n@@ -30,1 +28,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -33,0 +30,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -45,1 +43,1 @@\n-    private static Tensor<Float> initialize(String resource, long... shape) {\n+    private static Tensor<Float> initialize(String resource, long... shape) throws IOException {\n@@ -47,3 +45,1 @@\n-            return Tensor.ofShape(shape, MemorySegment.ofArray(in.readAllBytes()).toArray(ValueLayout.JAVA_FLOAT_UNALIGNED));\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n+            return Tensor.ofShape(shape, in.readAllBytes(), Tensor.ElementType.FLOAT);\n@@ -64,1 +60,1 @@\n-    MNISTModel() {\n+    MNISTModel() throws IOException {\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/mnist\/MNISTModel.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}