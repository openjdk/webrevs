{"files":[{"patch":"@@ -68,1 +68,1 @@\n-    void featureCount(int featureCount);\n+    \/\/void featureCount(int featureCount);\n@@ -81,1 +81,1 @@\n-    void stageCount(int stageCount);\n+   \/\/ void stageCount(int stageCount);\n@@ -92,1 +92,1 @@\n-    void treeCount(int treeCount);\n+ \/\/   void treeCount(int treeCount);\n@@ -102,0 +102,1 @@\n+                            .pad(3)\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Cascade.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package experiments;\n+\n+import hat.buffer.Buffer;\n+\n+public interface ResultTable extends Buffer{\n+    interface Result extends Buffer.StructChild {\n+        float x();\n+        void x(float x);\n+        float y();\n+        void y(float y);\n+        float width();\n+        void width(float width);\n+        float height();\n+        void height(float height);\n+    }\n+    void atomicResultTableCount(int atomicResultTableCount);\n+    int atomicResultTableCount();\n+    int length();\n+    Result result(long idx);\n+    Schema<ResultTable> schema = Schema.of(ResultTable.class, resultTable->resultTable\n+            .field(\"atomicResultTableCount\")\n+            .arrayLen(\"length\").array(\"result\", array->array.fields(\"x\",\"y\",\"width\",\"height\"))\n+    );\n+    default int atomicResultTableCountInc() {\n+        int index = atomicResultTableCount();\n+        atomicResultTableCount(index + 1);\n+        return index;\n+    }\n+}\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/ResultTable.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -11,0 +11,1 @@\n+import java.lang.reflect.Method;\n@@ -18,1 +19,0 @@\n-import java.util.stream.IntStream;\n@@ -23,1 +23,1 @@\n-    Field.ParentField field;\n+    AbstractField.ParentField field;\n@@ -27,1 +27,0 @@\n-\n@@ -33,1 +32,1 @@\n-        field.addLayout(memoryLayouts,lengthsToBind);\n+        field.collectLayouts(memoryLayouts,lengthsToBind);\n@@ -37,2 +36,0 @@\n-\n-\n@@ -40,5 +37,43 @@\n-        enum Style {ROOT,\n-            PRIMITIVE_GETTER_AND_SETTER, PRIMITIVE_GETTER, PRIMITIVE_SETTER,\n-            IFACE_GETTER,\n-            PRIMITIVE_ARRAY_SETTER, PRIMITIVE_ARRAY_GETTER,PRIMITIVE_ARRAY_GETTER_AND_SETTER,\n-            IFACE_ARRAY_GETTER;\n+        enum Mode {\n+            ROOT(false,false,false,false,false),\n+            PRIMITIVE_GETTER_AND_SETTER(false,true,false,true,true),\n+            PRIMITIVE_GETTER(false,true,false,false,true),\n+            PRIMITIVE_SETTER(false,true,false,true,false),\n+            IFACE_GETTER(false,false,true,false,true),\n+            PRIMITIVE_ARRAY_SETTER(true,true,false,true,false),\n+            PRIMITIVE_ARRAY_GETTER(true,true,false,false,true),\n+            PRIMITIVE_ARRAY_GETTER_AND_SETTER(true,true,false,true,true),\n+            IFACE_ARRAY_GETTER(true, false,true,false,true);\n+            boolean array;\n+            boolean primitive;\n+            boolean iface;\n+            boolean setter;\n+            boolean getter;\n+            Mode(boolean array, boolean primitive, boolean iface, boolean setter, boolean getter) {\n+                this.array=array;\n+                this.primitive=primitive;\n+                this.iface = iface;\n+                this.getter = getter;\n+                this.setter = setter;\n+            }\n+            static Mode of(Method m) {\n+                    Class<?> returnType = m.getReturnType();\n+                    Class<?>[] paramTypes = m.getParameterTypes();\n+                    if (paramTypes.length == 0 && returnType.isInterface()) {\n+                        return IFACE_GETTER;\n+                    }else if (paramTypes.length == 0 &&returnType.isPrimitive()) {\n+                        return PRIMITIVE_GETTER;\n+                    } else if (paramTypes.length == 1 && paramTypes[0].isPrimitive() && returnType == Void.TYPE) {\n+                        return PRIMITIVE_SETTER;\n+                    } else if (paramTypes.length == 1 && paramTypes[0] == Long.TYPE && returnType.isInterface()) {\n+                        return IFACE_ARRAY_GETTER;\n+                    } else if (paramTypes.length == 1 && paramTypes[0] == Long.TYPE && returnType.isPrimitive()) {\n+                        return PRIMITIVE_ARRAY_GETTER;\n+                    } else if (returnType == Void.TYPE && paramTypes.length == 2 &&\n+                            paramTypes[0] == Long.TYPE && paramTypes[1].isPrimitive()){\n+                        return PRIMITIVE_ARRAY_SETTER;\n+                    } else {\n+                        System.out.println(\"skiping \" + m);\n+                        return  null;\n+                    }\n+            }\n@@ -46,1 +81,1 @@\n-        Style style;\n+        Mode mode;\n@@ -49,2 +84,2 @@\n-        AccessStyle(Style style, Class<?> type, String name) {\n-            this.style = style;\n+        AccessStyle(Mode mode, Class<?> type, String name) {\n+            this.mode = mode;\n@@ -56,1 +91,18 @@\n-            return style.name()+\":\"+type.getSimpleName()+\":\"+name;\n+            return mode.name()+\":\"+type.getSimpleName()+\":\"+name;\n+        }\n+        static Class<?> methodToType(Method m){\n+            Class<?> returnType = m.getReturnType();\n+            Class<?>[] paramTypes = m.getParameterTypes();\n+            if (paramTypes.length == 0 && (returnType.isInterface() || returnType.isPrimitive())) {\n+               return returnType;\n+            } else if (paramTypes.length == 1 && paramTypes[0].isPrimitive() && returnType == Void.TYPE) {\n+               return paramTypes[0];\n+            } else if (paramTypes.length == 1 && paramTypes[0] == Long.TYPE && (returnType.isInterface()|| returnType.isPrimitive())) {\n+               return returnType;\n+            } else if (returnType == Void.TYPE && paramTypes.length == 2 &&\n+                    paramTypes[0] == Long.TYPE && paramTypes[1].isPrimitive()){\n+              return  paramTypes[1];\n+            } else {\n+                System.out.println(\"skipping \" + m);\n+                return null;\n+            }\n@@ -58,0 +110,1 @@\n+\n@@ -59,1 +112,1 @@\n-            AccessStyle[] accessStyle= new AccessStyle[]{null};\n+            AccessStyle accessStyle= new AccessStyle(null,null,name);\n@@ -61,0 +114,23 @@\n+                AccessStyle.Mode mode = AccessStyle.Mode.of(m);\n+                Class<?> type = methodToType(m);\n+                if (accessStyle.type == null){\n+                    accessStyle.type = type;\n+                }else if (!accessStyle.type.equals(type)){\n+                    throw new IllegalStateException(\"type mismatch for \"+name);\n+                }\n+                if (accessStyle.mode == null){\n+                    accessStyle.mode = mode;\n+                }else  if (\n+                        (accessStyle.mode == Mode.PRIMITIVE_ARRAY_GETTER && mode == Mode.PRIMITIVE_ARRAY_SETTER)\n+                       || (accessStyle.mode == Mode.PRIMITIVE_ARRAY_SETTER && mode == Mode.PRIMITIVE_ARRAY_GETTER)\n+                ){\n+                    accessStyle.mode = Mode.PRIMITIVE_ARRAY_GETTER_AND_SETTER;\n+                } else  if (\n+                    (accessStyle.mode == Mode.PRIMITIVE_GETTER && mode == Mode.PRIMITIVE_SETTER)\n+                            || (accessStyle.mode == Mode.PRIMITIVE_SETTER && mode == Mode.PRIMITIVE_GETTER)\n+                ) {\n+                    accessStyle.mode = Mode.PRIMITIVE_GETTER_AND_SETTER;\n+                }else {\n+                    throw new IllegalStateException(\"mode mismatch for \"+name);\n+                }\n+                \/*\n@@ -62,1 +138,1 @@\n-                Class<?>[] parameTypes = m.getParameterTypes();\n+                Class<?>[] paramTypes = m.getParameterTypes();\n@@ -65,1 +141,1 @@\n-                        throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].style);\n+                        throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].mode);\n@@ -67,2 +143,2 @@\n-                    accessStyle[0] = new AccessStyle(Style.IFACE_GETTER, returnType, name);\n-                }else    if (m.getParameterCount() == 0 &&returnType.isPrimitive()) {\n+                    accessStyle[0] = new AccessStyle(Mode.IFACE_GETTER, returnType, name);\n+                }else if (m.getParameterCount() == 0 &&returnType.isPrimitive()) {\n@@ -70,2 +146,2 @@\n-                       if (accessStyle[0].style == Style.PRIMITIVE_SETTER){\n-                           accessStyle[0] = new AccessStyle(Style.PRIMITIVE_GETTER_AND_SETTER, returnType, name);\n+                       if (accessStyle[0].mode == Mode.PRIMITIVE_SETTER){\n+                           accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_GETTER_AND_SETTER, returnType, name);\n@@ -73,1 +149,1 @@\n-                           throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].style);\n+                           throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].mode);\n@@ -76,1 +152,1 @@\n-                        accessStyle[0] = new AccessStyle(Style.PRIMITIVE_GETTER, returnType, name);\n+                        accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_GETTER, returnType, name);\n@@ -78,1 +154,1 @@\n-                } else if (m.getParameterCount() == 1 && parameTypes[0].isPrimitive() && returnType == Void.TYPE) {\n+                } else if (m.getParameterCount() == 1 && paramTypes[0].isPrimitive() && returnType == Void.TYPE) {\n@@ -80,2 +156,2 @@\n-                        if (accessStyle[0].style == Style.PRIMITIVE_GETTER){\n-                            accessStyle[0] = new AccessStyle(Style.PRIMITIVE_GETTER_AND_SETTER, returnType, name);\n+                        if (accessStyle[0].mode == Mode.PRIMITIVE_GETTER){\n+                            accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_GETTER_AND_SETTER, paramTypes[0], name);\n@@ -83,1 +159,1 @@\n-                            throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].style);\n+                            throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].mode);\n@@ -86,1 +162,1 @@\n-                        accessStyle[0] = new AccessStyle(Style.PRIMITIVE_SETTER, returnType, name);\n+                        accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_SETTER, paramTypes[0], name);\n@@ -88,1 +164,1 @@\n-                } else if (m.getParameterCount() == 1 && parameTypes[0] == Long.TYPE && returnType.isInterface()) {\n+                } else if (m.getParameterCount() == 1 && paramTypes[0] == Long.TYPE && returnType.isInterface()) {\n@@ -90,1 +166,1 @@\n-                        throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].style);\n+                        throw new IllegalStateException(name+\" already dermined to to be \"+accessStyle[0].mode);\n@@ -92,2 +168,2 @@\n-                    accessStyle[0] = new AccessStyle(Style.IFACE_ARRAY_GETTER, returnType, name);\n-                } else if (m.getParameterCount() == 1 && parameTypes[0] == Long.TYPE && returnType.isPrimitive()) {\n+                    accessStyle[0] = new AccessStyle(Mode.IFACE_ARRAY_GETTER, returnType, name);\n+                } else if (m.getParameterCount() == 1 && paramTypes[0] == Long.TYPE && returnType.isPrimitive()) {\n@@ -95,2 +171,2 @@\n-                        if (accessStyle[0].style == Style.PRIMITIVE_ARRAY_SETTER) {\n-                            accessStyle[0] = new AccessStyle(Style.PRIMITIVE_ARRAY_GETTER_AND_SETTER, returnType, name);\n+                        if (accessStyle[0].mode == Mode.PRIMITIVE_ARRAY_SETTER) {\n+                            accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_ARRAY_GETTER_AND_SETTER, returnType, name);\n@@ -98,1 +174,1 @@\n-                            throw new IllegalStateException(name + \" already dermined to to be \" + accessStyle[0].style);\n+                            throw new IllegalStateException(name + \" already dermined to to be \" + accessStyle[0].mode);\n@@ -101,1 +177,1 @@\n-                        accessStyle[0] = new AccessStyle(Style.PRIMITIVE_ARRAY_GETTER, returnType, name);\n+                        accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_ARRAY_GETTER, returnType, name);\n@@ -103,2 +179,2 @@\n-                } else if (returnType == Void.TYPE && parameTypes.length == 2 &&\n-                        parameTypes[0] == Long.TYPE && parameTypes[1].isPrimitive()){\n+                } else if (returnType == Void.TYPE && paramTypes.length == 2 &&\n+                        paramTypes[0] == Long.TYPE && paramTypes[1].isPrimitive()){\n@@ -106,2 +182,2 @@\n-                        if (accessStyle[0].style == Style.PRIMITIVE_ARRAY_GETTER) {\n-                            accessStyle[0] = new AccessStyle(Style.PRIMITIVE_ARRAY_GETTER_AND_SETTER, parameTypes[1], name);\n+                        if (accessStyle[0].mode == Mode.PRIMITIVE_ARRAY_GETTER) {\n+                            accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_ARRAY_GETTER_AND_SETTER, paramTypes[1], name);\n@@ -109,1 +185,1 @@\n-                            throw new IllegalStateException(name + \" already dermined to to be \" + accessStyle[0].style);\n+                            throw new IllegalStateException(name + \" already dermined to to be \" + accessStyle[0].mode);\n@@ -112,1 +188,1 @@\n-                        accessStyle[0] = new AccessStyle(Style.PRIMITIVE_ARRAY_SETTER, parameTypes[1], name);\n+                        accessStyle[0] = new AccessStyle(Mode.PRIMITIVE_ARRAY_SETTER, paramTypes[1], name);\n@@ -116,1 +192,1 @@\n-                }\n+                } *\/\n@@ -118,2 +194,4 @@\n-            if (accessStyle[0] == null) {\n-                accessStyle[0] = new AccessStyle(Style.ROOT,iface, \"root\");\n+            if (accessStyle.type == null && accessStyle.mode==null) {\n+                accessStyle.type = iface;\n+                accessStyle.name=\"root\";\n+                accessStyle.mode=Mode.ROOT;\n@@ -121,1 +199,1 @@\n-            return accessStyle[0];\n+            return accessStyle;\n@@ -151,13 +229,1 @@\n-    private static MemoryLayout typeToLayout(Class<?> clazz) {\n-        if (typeToLayout.containsKey(clazz)) {\n-            return typeToLayout.get(clazz);\n-        } else if (!isMappable(clazz)) {\n-            throw new IllegalStateException(\"What to do with mappable \"+clazz);\n-        } else {\n-            throw new IllegalStateException(\"What to do with UNmappable \"+clazz);\n-        }\n-\n-    }\n-\n-    public static abstract class Field {\n-\n+    public static abstract class AbstractField {\n@@ -166,1 +232,1 @@\n-        Field(ParentField parent) {\n+        AbstractField(ParentField parent) {\n@@ -170,1 +236,1 @@\n-        public abstract void toText(int depth, Consumer<String> stringConsumer);\n+        public abstract void toText(String indent, Consumer<String> stringConsumer);\n@@ -172,1 +238,1 @@\n-        public static class Padding extends Field {\n+        public static class Padding extends AbstractField {\n@@ -174,1 +240,1 @@\n-            Padding(ParentField parent, String name, int len) {\n+            Padding(ParentField parent,  int len) {\n@@ -176,0 +242,1 @@\n+                this.len = len;\n@@ -179,3 +246,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"padding \");\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+\"padding \"+len+\" bytes\");\n@@ -184,1 +250,1 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n@@ -186,1 +252,0 @@\n-                return memoryLayouts;\n@@ -189,1 +254,1 @@\n-        public static class ArrayLen extends Field {\n+        public static class ArrayLen extends AbstractField {\n@@ -197,3 +262,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"arrayLen \" +accessStyle);\n+            public void toText(String indent,  Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+\"arrayLen \" +accessStyle);\n@@ -202,3 +266,7 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n-                memoryLayouts.add(typeToLayout(accessStyle.type).withName(accessStyle.name));\n-                return memoryLayouts;\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n+                if (accessStyle.type.isPrimitive()){\n+                    memoryLayouts.add(typeToLayout.get(accessStyle.type).withName(accessStyle.name));\n+                }else {\n+                    \/\/ the type is mapped in the parent.\n+                    throw new IllegalStateException(\"type of arraylen should be int or long\");\n+                }\n@@ -207,1 +275,1 @@\n-        public static class Primitive extends Field {\n+        public static class Field extends AbstractField {\n@@ -209,1 +277,1 @@\n-            Primitive(ParentField parent,   AccessStyle accessStyle) {\n+            Field(ParentField parent, AccessStyle accessStyle) {\n@@ -213,1 +281,0 @@\n-\n@@ -215,3 +282,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"primitive \" +accessStyle);\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+\"field \" +accessStyle);\n@@ -219,1 +285,0 @@\n-\n@@ -221,3 +286,10 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n-                memoryLayouts.add(typeToLayout(accessStyle.type).withName(accessStyle.name));\n-                return memoryLayouts;\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToAdd){\n+                if (accessStyle.type.isPrimitive()) {\n+                    memoryLayouts.add(typeToLayout.get(accessStyle.type).withName(accessStyle.name));\n+                }else{\n+                    ParentField layoutContainer = parent.children.stream().filter(c->c instanceof ParentField).map(c->(ParentField)c)\n+                            .filter(p->p.accessStyle.type.equals(accessStyle.type)).findFirst().get();\n+\n+                    layoutContainer.collectLayouts(memoryLayouts,lengthsToAdd, accessStyle.name);\n+                 \/\/  throw new IllegalStateException(\"handle case where type of field is not primitive\");\n+                }\n@@ -226,3 +298,2 @@\n-\n-        public static abstract class ParentField extends Field  {\n-            List<Field> children = new ArrayList<>();\n+        public static abstract class ParentField extends AbstractField {\n+            List<AbstractField> children = new ArrayList<>();\n@@ -230,1 +301,0 @@\n-\n@@ -235,12 +305,0 @@\n-\n-            @Override\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                stringConsumer.accept(\"{\\n\");\n-                children.forEach(c -> {\n-                    c.toText(depth + 1, stringConsumer);\n-                    stringConsumer.accept(\"\\n\");\n-                });\n-                stringConsumer.accept(\"}\");\n-            }\n-\n-\n@@ -248,1 +306,1 @@\n-                var struct = new Struct(this, name, AccessStyle.of(accessStyle.type, name));\n+                var struct = new Struct(this,  AccessStyle.of(accessStyle.type, name));\n@@ -255,1 +313,1 @@\n-                var union = new Union(this, name, AccessStyle.of(accessStyle.type, name));\n+                var union = new Union(this,  AccessStyle.of(accessStyle.type, name));\n@@ -262,1 +320,5 @@\n-                children.add(new Primitive(this, AccessStyle.of(accessStyle.type,name)));\n+                children.add(new Field(this, AccessStyle.of(accessStyle.type,name)));\n+                return this;\n+            }\n+            public ParentField pad(int len) {\n+                children.add(new Padding(this, len));\n@@ -265,1 +327,0 @@\n-\n@@ -268,3 +329,1 @@\n-                children.add(new Primitive(this, newAccessStyle));\n-\n-\n+                children.add(new Field(this, newAccessStyle));\n@@ -273,1 +332,1 @@\n-                    field = new Field.Struct(this, newAccessStyle.type.getSimpleName(),newAccessStyle);\n+                    field = new AbstractField.Struct(this,newAccessStyle);\n@@ -275,1 +334,1 @@\n-                    field = new Field.Union(this, newAccessStyle.type.getSimpleName(), newAccessStyle);\n+                    field = new AbstractField.Union(this, newAccessStyle);\n@@ -286,2 +345,2 @@\n-                children.add(new Primitive(this, newAccessStyle1));\n-                children.add(new Primitive(this, newAccessStyle2));\n+                children.add(new Field(this, newAccessStyle1));\n+                children.add(new Field(this, newAccessStyle2));\n@@ -291,1 +350,1 @@\n-                    field = new Field.Struct(this, newAccessStyle1.type.getSimpleName(),newAccessStyle1);\n+                    field = new AbstractField.Struct(this, newAccessStyle1);\n@@ -293,1 +352,1 @@\n-                    field = new Field.Union(this, newAccessStyle2.type.getSimpleName(), newAccessStyle2);\n+                    field = new AbstractField.Union(this, newAccessStyle2);\n@@ -312,2 +371,0 @@\n-            public ParentField array(String name, int len, Consumer<ParentField> parentFieldConsumer) {\n-                 AccessStyle newAccessStyle = AccessStyle.of(accessStyle.type,name);\n@@ -315,7 +372,5 @@\n-                ParentField field;\n-                if (isStruct(newAccessStyle.type)){\n-                    field = new Field.Struct(this, newAccessStyle.type.getSimpleName(),newAccessStyle);\n-                }else if (isUnion(newAccessStyle.type)) {\n-                    field = new Field.Union(this, newAccessStyle.type.getSimpleName(), newAccessStyle);\n-                }else{\n-                    throw new IllegalArgumentException(\"Unsupported array type: \" + newAccessStyle.type);\n+            public static ParentField  createStructOrUnion(ParentField parent, AccessStyle accessStyle){\n+                if (isStruct(accessStyle.type)){\n+                    return new AbstractField.Struct(parent, accessStyle);\n+                }else if (isUnion(accessStyle.type)) {\n+                    return  new AbstractField.Union(parent, accessStyle);\n@@ -323,0 +378,6 @@\n+                    throw new IllegalArgumentException(\"Unsupported array type: \" + accessStyle.type);\n+\n+            }\n+            public ParentField array(String name, int len, Consumer<ParentField> parentFieldConsumer) {\n+                AccessStyle newAccessStyle = AccessStyle.of(accessStyle.type,name);\n+                ParentField field = createStructOrUnion(this, newAccessStyle);\n@@ -327,1 +388,0 @@\n-                \/\/ builder.children.add(field);\n@@ -329,2 +389,0 @@\n-\n-\n@@ -344,1 +402,1 @@\n-                ParentField builder;\n+                ParentField parentField;\n@@ -348,1 +406,1 @@\n-                    return builder.fieldControlledArray(name, arrayLenField);\n+                    return parentField.fieldControlledArray(name, arrayLenField);\n@@ -352,11 +410,3 @@\n-                   AccessStyle newAccessStyle = AccessStyle.of(builder.accessStyle.type,name);\n-                    builder.fieldControlledArray(name, arrayLenField);\n-                    ParentField field;\n-                    if (isStruct(newAccessStyle.type)){\n-                        field = new Field.Struct(builder, builder.accessStyle.type.getSimpleName(),newAccessStyle);\n-                    }else if (isUnion(newAccessStyle.type)) {\n-                        field = new Field.Union(builder, builder.accessStyle.type.getSimpleName(), newAccessStyle);\n-                    }else{\n-                        throw new IllegalArgumentException(\"Unsupported array type: \" + builder.accessStyle.type);\n-                    }\n-\n+                   AccessStyle newAccessStyle = AccessStyle.of(parentField.accessStyle.type,name);\n+                    parentField.fieldControlledArray(name, arrayLenField);\n+                    ParentField field = createStructOrUnion(parentField, newAccessStyle);\n@@ -364,2 +414,2 @@\n-                    builder.children.add(field);\n-                    return builder;\n+                    parentField.children.add(field);\n+                    return parentField;\n@@ -368,2 +418,2 @@\n-                ArrayBuildState(ParentField builder, ArrayLen arrayLenField) {\n-                    this.builder = builder;\n+                ArrayBuildState(ParentField parentField, ArrayLen arrayLenField) {\n+                    this.parentField = parentField;\n@@ -384,0 +434,2 @@\n+            @Override\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind) {\n@@ -385,4 +437,1 @@\n-        }\n-        public static class Struct extends ParentField {\n-            Struct(ParentField parent, String name, AccessStyle accessStyle) {\n-                super(parent, accessStyle);\n+                collectLayouts(memoryLayouts,lengthsToBind,null);\n@@ -391,5 +440,21 @@\n-            @Override\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"struct \" + accessStyle);\n-                super.toText(depth + 1, stringConsumer);\n+\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind, String name) {\n+                List<MemoryLayout> layouts = new ArrayList<>();\n+                children.forEach(c->{\n+                    if (!(c instanceof ParentField)) {\n+                        c.collectLayouts(layouts, lengthsToBind);\n+                    }\n+                });\n+                MemoryLayout memoryLayout = null;\n+                if (isUnion(accessStyle.type)) {\n+                    memoryLayout =(name != null && !name.isEmpty())\n+                            ? MemoryLayout.unionLayout(layouts.toArray(new MemoryLayout[0])).withName(name)\n+                            :MemoryLayout.unionLayout(layouts.toArray(new MemoryLayout[0]));\n+                }else if (isStructOrBuffer(accessStyle.type)){\n+                    memoryLayout =(name != null && !name.isEmpty())\n+                            ? MemoryLayout.structLayout(layouts.toArray(new MemoryLayout[0])).withName(name)\n+                            :MemoryLayout.structLayout(layouts.toArray(new MemoryLayout[0]));\n+                }else{\n+                    throw new IllegalStateException(\"Oh my \");\n+                }\n+                memoryLayouts.add(memoryLayout);\n@@ -398,4 +463,14 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n-                List<MemoryLayout> structLayouts = new ArrayList<>();\n-                children.forEach(c->{\n-                    c.addLayout(structLayouts, lengthsToBind);\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent);\n+                if (isUnion(accessStyle.type)) {\n+                    stringConsumer.accept(\"union\");\n+                }else if(isStructOrBuffer(accessStyle.type)){\n+                    stringConsumer.accept(\"struct\");\n+                }else{\n+                    throw new IllegalStateException(\"Oh my \");\n+                }\n+                stringConsumer.accept(\" \" + accessStyle + \"{\");\n+                stringConsumer.accept(\"\\n\");\n+                children.forEach(c -> {\n+                    c.toText(indent+\" \", stringConsumer);\n+                    stringConsumer.accept(\"\\n\");\n@@ -403,2 +478,2 @@\n-                memoryLayouts.add(MemoryLayout.structLayout(structLayouts.toArray(new MemoryLayout[0])));\n-                return memoryLayouts;\n+                 stringConsumer.accept(indent);\n+                stringConsumer.accept(\"}\");\n@@ -407,3 +482,2 @@\n-\n-        public static class Union extends ParentField {\n-            Union(ParentField parent, String name, AccessStyle accessStyle) {\n+        public static class Struct extends ParentField {\n+            Struct(ParentField parent,  AccessStyle accessStyle) {\n@@ -412,0 +486,1 @@\n+        }\n@@ -413,14 +488,3 @@\n-            @Override\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"union name\");\n-                super.toText(depth + 1, stringConsumer);\n-            }\n-            @Override\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n-                List<MemoryLayout> unionLayouts = new ArrayList<>();\n-                children.forEach(c->{\n-                    c.addLayout(unionLayouts, lengthsToBind);\n-                });\n-                memoryLayouts.add(MemoryLayout.unionLayout(unionLayouts.toArray(new MemoryLayout[0])));\n-                return memoryLayouts;\n+        public static class Union extends ParentField {\n+            Union(ParentField parent,  AccessStyle accessStyle) {\n+                super(parent, accessStyle);\n@@ -430,1 +494,1 @@\n-        public abstract static class Array extends Field {\n+        public abstract static class Array extends AbstractField {\n@@ -450,3 +514,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"array [\" + len + \"]\");\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+\"array [\" + len + \"]\");\n@@ -456,3 +519,10 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n-                memoryLayouts.add(MemoryLayout.sequenceLayout(len, typeToLayout(elementAccessStyle.type)).withName(elementAccessStyle.name));\n-                return memoryLayouts;\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n+                if (elementAccessStyle.type.isPrimitive()) {\n+                    memoryLayouts.add(MemoryLayout.sequenceLayout(len, typeToLayout.get(elementAccessStyle.type)).withName(elementAccessStyle.name));\n+                }else{\n+                    ParentField layoutContainer = parent.children.stream().filter(c->c instanceof ParentField).map(c->(ParentField)c)\n+                            .filter(p->p.accessStyle.type.equals(elementAccessStyle.type)).findFirst().get();\n+\n+                    layoutContainer.collectLayouts(memoryLayouts,lengthsToBind, elementAccessStyle.name);\n+                   \/\/ throw new IllegalStateException(\"handle case where fixed array element type is not primitive\");\n+                }\n@@ -463,1 +533,0 @@\n-\n@@ -467,1 +536,0 @@\n-\n@@ -469,3 +537,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(\"array [?] \");\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+\"array [?] \");\n@@ -475,3 +542,6 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n-                memoryLayouts.add(MemoryLayout.sequenceLayout(0, typeToLayout(elementAccessStyle.type)).withName(elementAccessStyle.name));\n-                return memoryLayouts;\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n+                if (elementAccessStyle.type.isPrimitive()) {\n+                    memoryLayouts.add(MemoryLayout.sequenceLayout(0, typeToLayout.get(elementAccessStyle.type)).withName(elementAccessStyle.name));\n+                }else{\n+                    throw new IllegalStateException(\"handle case where flex array element type is not primitive\");\n+                }\n@@ -490,3 +560,2 @@\n-            public void toText(int depth, Consumer<String> stringConsumer) {\n-                IntStream.range(0, depth).forEach(_ -> stringConsumer.accept(\" \"));\n-                stringConsumer.accept(elementAccessStyle.name+\"[\"+elementAccessStyle+\"] where len defined by \" + arrayLen.accessStyle);\n+            public void toText(String indent, Consumer<String> stringConsumer) {\n+                stringConsumer.accept(indent+elementAccessStyle.name+\"[\"+elementAccessStyle+\"] where len defined by \" + arrayLen.accessStyle);\n@@ -495,3 +564,14 @@\n-            List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n-                memoryLayouts.add(MemoryLayout.sequenceLayout(lengthsToBind.removeFirst(), typeToLayout(elementAccessStyle.type)).withName(elementAccessStyle.name));\n-                return memoryLayouts;\n+            void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind){\n+                if (elementAccessStyle.type.isPrimitive()) {\n+                    memoryLayouts.add(MemoryLayout.sequenceLayout(lengthsToBind.removeFirst(), typeToLayout.get(elementAccessStyle.type)).withName(elementAccessStyle.name));\n+                }else{\n+                    \/\/ We should find a Struct or Union matching the type in the parent\n+                    ParentField layoutContainer = parent.children.stream().filter(c->c instanceof ParentField).map(c->(ParentField)c)\n+                            .filter(p->p.accessStyle.type.equals(elementAccessStyle.type)).findFirst().get();\n+\n+                    layoutContainer.collectLayouts(memoryLayouts,lengthsToBind, elementAccessStyle.name);\n+                  \/\/  GroupLayout last =  (GroupLayout) memoryLayouts.getLast();\n+                   \/\/ System.out.println(last);\n+                   \/\/ last.withName(elementAccessStyle.name);\n+                   \/\/ System.out.println(last);\n+                }\n@@ -499,1 +579,0 @@\n-\n@@ -502,2 +581,1 @@\n-\n-        abstract List<MemoryLayout>  addLayout(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind);\n+        abstract void collectLayouts(List<MemoryLayout> memoryLayouts, LinkedList<Integer> lengthsToBind);\n@@ -507,1 +585,1 @@\n-    Schema(Class<T> iface, Field.ParentField field) {\n+    Schema(Class<T> iface, AbstractField.ParentField field) {\n@@ -532,4 +610,2 @@\n-    public static <T extends Buffer>Schema<T> of(Class<T> iface, Consumer<Field.ParentField> fb) {\n-\n-        Field.ParentField field = null;\n-\n+    public static <T extends Buffer>Schema<T> of(Class<T> iface, Consumer<AbstractField.ParentField> fb) {\n+        AbstractField.ParentField field = null;\n@@ -537,1 +613,1 @@\n-            field = new Field.Struct(null, iface.getSimpleName(),AccessStyle.of(iface,iface.getSimpleName()));\n+            field = new AbstractField.Struct(null, AccessStyle.of(iface,iface.getSimpleName()));\n@@ -546,1 +622,1 @@\n-        field.toText(0,stringConsumer);\n+        field.toText(\"\",stringConsumer);\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Schema.java","additions":283,"deletions":207,"binary":false,"changes":490,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-        Cascade.schema.toText(t->System.out.print(t));\n-        S32Array.schema.toText(t->System.out.print(t));\n-\n@@ -46,3 +43,1 @@\n-        System.out.println();\n-        System.out.println(Buffer.getLayout(os32));\n-\n+        System.out.println(\"Layout from hat S32Array \"+ Buffer.getLayout(os32));\n@@ -50,1 +45,0 @@\n-      \/\/  Function<SegmentMapper<S32Array>,S32Array> allocator = s->s.allocate(Arena.global());\n@@ -52,2 +46,3 @@\n-        int i = s32Array.length();\n-       \/\/ var cascade = Cascade.schema.allocate(bufferAllocator,10,10,10).instance;\n+        int s23ArrayLen = s32Array.length();\n+        System.out.println(\"Layout from schema \"+Buffer.getLayout(s32Array));\n+        ResultTable.schema.toText(t->System.out.print(t));\n@@ -55,0 +50,10 @@\n+        var resultTable = ResultTable.schema.allocate(bufferAllocator, 100).instance;\n+        int resultTableLen = resultTable.length();\n+        System.out.println(Buffer.getLayout(resultTable));\n+\n+\n+        Cascade.schema.toText(t->System.out.print(t));\n+        var cascadelayout = Cascade.schema.layout(10,10,10);\n+        System.out.println(cascadelayout);\n+        var cascade = Cascade.schema.allocate(bufferAllocator,10,10,10).instance;\n+        System.out.println(Buffer.getLayout(cascade));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/SchemaLayoutTest.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}