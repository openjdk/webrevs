{"files":[{"patch":"@@ -33,0 +33,1 @@\n+        ${SHARED_BACKEND}\/src\/main\/native\/include\/config.h\n","filename":"hat\/backends\/ffi\/shared\/CMakeLists.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,3 @@\n- package hat.backend.ffi;\n+package hat.backend.ffi;\n+\n+import hat.backend.codebuilders.HATCodeBuilder;\n@@ -31,0 +33,2 @@\n+import java.util.concurrent.Callable;\n+import java.util.function.Consumer;\n@@ -76,2 +80,2 @@\n-        if (System.getenv(\"HAT\") instanceof String opts){\n-            System.out.println(\"From env \"+opts);\n+        if (System.getenv(\"HAT\") instanceof String opts) {\n+            System.out.println(\"From env \" + opts);\n@@ -81,1 +85,1 @@\n-            System.out.println(\"From prop \"+opts);\n+            System.out.println(\"From prop \" + opts);\n@@ -112,1 +116,1 @@\n-        if (name == null || name.equals(\"\")){\n+        if (name == null || name.equals(\"\")) {\n@@ -126,2 +130,2 @@\n-        }else if (name.contains(\":\")){\n-            var tokens=name.split(\":\");\n+        } else if (name.contains(\":\")) {\n+            var tokens = name.split(\":\");\n@@ -132,2 +136,2 @@\n-                    return new Config(value<<(token.equals(\"DEVICE\")?4:0));\n-                }else{\n+                    return new Config(value << (token.equals(\"DEVICE\") ? 4 : 0));\n+                } else {\n@@ -137,1 +141,1 @@\n-            }else{\n+            } else {\n@@ -147,0 +151,1 @@\n+\n@@ -154,0 +159,1 @@\n+\n@@ -161,0 +167,1 @@\n+\n@@ -168,0 +175,1 @@\n+\n@@ -280,0 +288,123 @@\n+\n+    public static class Main {\n+        public static class ConfigBuilder extends HATCodeBuilder<ConfigBuilder> {\n+\n+            ConfigBuilder staticConstInt(String name, int padWidth, int value) {\n+                staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intHexValue(value).semicolon().nl();\n+                return this;\n+            }\n+\n+            ConfigBuilder staticConstIntShiftedOne(String name, int padWidth, int shift) {\n+                staticKeyword().space().constexprKeyword().space().intType().space().identifier(name, padWidth).space().equals().space().intValue(1).leftShift().intHexValue(shift).semicolon().nl();\n+                return this;\n+            }\n+\n+            ConfigBuilder className() {\n+                return identifier(\"BasicConfig\");\n+            }\n+\n+            ConfigBuilder bitNamesVar() {\n+                return identifier(\"bitNames\");\n+            }\n+\n+            ConfigBuilder configBitsVar() {\n+                return identifier(\"configBits\");\n+            }\n+\n+            ConfigBuilder configBitsAnd() {\n+                return configBitsVar().space().ampersand().space();\n+            }\n+\n+            ConfigBuilder configBitsAndBitName(String bitName) {\n+                return configBitsAnd().identifier(bitName + \"_BIT\");\n+            }\n+\n+            static String toCamelExceptFirst(String s) {\n+                String[] parts = s.split(\"_\");\n+                StringBuilder camelCaseString = new StringBuilder(\"\");\n+                for (String part : parts) {\n+                    camelCaseString.append(camelCaseString.isEmpty()\n+                            ? part.toLowerCase()\n+                            : part.substring(0, 1).toUpperCase() + part.substring(1).toLowerCase());\n+                }\n+                return camelCaseString.toString();\n+            }\n+\n+            ConfigBuilder camelExceptFirst(String s) {\n+                return identifier(toCamelExceptFirst(s));\n+            }\n+\n+            ConfigBuilder std(String s) {\n+                return identifier(\"std\").colon().colon().identifier(s);\n+            }\n+\n+            ConfigBuilder stdEndl() {\n+                return std(\"endl\");\n+            }\n+\n+            ConfigBuilder stdCout(String s) {\n+                return std(\"cout\").space().leftShift().space().dquote().emitText(s).dquote();\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            Config c = Config.of(\"INFO,PTX\");\n+            ConfigBuilder cb = new ConfigBuilder();\n+\n+            cb.lineComment(\"Auto generated from  \" + Config.class.getName());\n+            cb.pragma(\"once\").nl();\n+            cb.includeSys(\"iostream\").nl();\n+            final int START_BIT_INDEX = 0x10;\n+\n+            cb.structKeyword().space().className().braceNlIndented((_) -> {\n+                cb.staticConstInt(\"START_BIT_IDX\", 32, START_BIT_INDEX);\n+                int i = START_BIT_INDEX;\n+                for (var bitname : Config.bitNames) {\n+                    cb.staticConstIntShiftedOne(bitname + \"_BIT\", 32, i++);\n+                }\n+                cb.staticConstInt(\"END_BIT_IDX\", 32, i);\n+                cb.constKeyword().space().staticKeyword().space().charType().space().asterisk().bitNamesVar().osbrace().csbrace().semicolon().space().lineComment(\"See below for initialization\");\n+                cb.intType().space().identifier(\"configBits\").semicolon().nl();\n+\n+                for (var bitName : Config.bitNames) {\n+                    cb.identifier(\"bool\").space().camelExceptFirst(bitName).semicolon().nl();\n+                }\n+\n+                cb.intType().space().identifier(\"platform\").semicolon().nl();\n+                cb.intType().space().identifier(\"device\").semicolon().nl();\n+                cb.identifier(\"bool\").space().identifier(\"alwaysCopy\").semicolon().nl();\n+\/\/Constructor\n+                cb.explicitKeyword().space().className().paren((_) -> cb.intType().space().configBitsVar()).colon().nl().indent((_) -> {\n+                    cb.configBitsVar().paren((_) -> cb.configBitsVar()).comma().nl();\n+                    for (var bitName : Config.bitNames) {\n+                        cb.camelExceptFirst(bitName).paren((_) -> cb.paren((_) -> cb.configBitsAndBitName(bitName)).eq().identifier(bitName + \"_BIT\")).comma().nl();\n+\n+                    }\n+                    cb.identifier(\"platform\").paren((_) -> cb.configBitsAnd().intHexValue(0xf)).comma().nl();\n+                    cb.identifier(\"alwaysCopy\").paren(_->cb.pling().camelExceptFirst(\"MINIMIZE_COPIES\")).comma().nl();\n+                    cb.identifier(\"device\").paren(_ ->\n+                            cb.paren(_ -> cb.configBitsAnd().intHexValue(0xf0)).space().rightShift().space().intValue(4)).braceNlIndented(_ ->\n+                            cb.ifKeyword().paren(_ -> cb.identifier(\"info\")).braceNlIndented(_ -> {\n+                                for (var bitName : Config.bitNames) {\n+                                    cb.stdCout(\"native \" + ConfigBuilder.toCamelExceptFirst(bitName) + \" \").space().leftShift().space().camelExceptFirst(bitName).space().leftShift().space().stdEndl().semicolon().nl();\n+                                }\n+                            })\n+                    );\n+                }).nl().nl();\n+\n+                cb.virtualKeyword().space().tilde().className().paren((_) -> {\n+                }).equals().space().defaultKeyword().semicolon();\n+            }).semicolon().nl().nl();\n+\n+\n+            cb.hashIfdef(\"shared_cpp\", (_) -> {\n+                cb.constKeyword().space().charType().space().asterisk().className().colon().colon().bitNamesVar().sbrace(_ -> {}).equals().brace((_) -> {\n+                    cb.nl();\n+                    for (var bitName : Config.bitNames) {\n+                        cb.dquote().identifier(bitName + \"_BIT\").dquote().comma().nl();\n+                    }\n+                }).semicolon().nl();\n+            });\n+            System.out.println(cb);\n+        }\n+    }\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/Config.java","additions":141,"deletions":10,"binary":false,"changes":151,"status":"modified"},{"patch":"@@ -198,36 +198,2 @@\n-Backend::Config::Config(int configBits): configBits(configBits),\n-                                         minimizeCopies((configBits & MINIMIZE_COPIES_BIT) == MINIMIZE_COPIES_BIT),\n-                                         alwaysCopy(!minimizeCopies),\n-                                         trace((configBits & TRACE_BIT) == TRACE_BIT),\n-                                         traceCopies((configBits & TRACE_COPIES_BIT) == TRACE_COPIES_BIT),\n-                                         traceEnqueues((configBits & TRACE_ENQUEUES_BIT) == TRACE_ENQUEUES_BIT),\n-                                         traceCalls((configBits & TRACE_CALLS_BIT) == TRACE_CALLS_BIT),\n-                                         traceSkippedCopies(\n-                                             (configBits & TRACE_SKIPPED_COPIES_BIT) == TRACE_SKIPPED_COPIES_BIT),\n-                                         info((configBits & INFO_BIT) == INFO_BIT),\n-                                         showCode((configBits & SHOW_CODE_BIT) == SHOW_CODE_BIT),\n-                                         profile((configBits & PROFILE_BIT) == PROFILE_BIT),\n-                                         showWhy((configBits & SHOW_WHY_BIT) == SHOW_WHY_BIT),\n-                                         showState((configBits & SHOW_STATE_BIT) == SHOW_STATE_BIT),\n-                                         ptx((configBits & PTX_BIT) == PTX_BIT),\n-                                         interpret((configBits & INTERPRET_BIT) == INTERPRET_BIT),\n-                                         platform((configBits & 0xf)),\n-                                         device((configBits & 0xf0) >> 4) {\n-    if (info) {\n-        std::cout << \"native showCode \" << showCode << std::endl;\n-        std::cout << \"native info \" << info << std::endl;\n-        std::cout << \"native minimizeCopies \" << minimizeCopies << std::endl;\n-        std::cout << \"native alwaysCopy \" << alwaysCopy << std::endl;\n-        std::cout << \"native trace \" << trace << std::endl;\n-        std::cout << \"native traceSkippedCopies \" << traceSkippedCopies << std::endl;\n-        std::cout << \"native traceCalls \" << traceCalls << std::endl;\n-        std::cout << \"native traceCopies \" << traceCopies << std::endl;\n-        std::cout << \"native traceEnqueues \" << traceEnqueues << std::endl;\n-        std::cout << \"native profile \" << profile << std::endl;\n-        std::cout << \"native showWhy \" << showWhy << std::endl;\n-        std::cout << \"native showState \" << showState << std::endl;\n-        std::cout << \"native ptx \" << ptx << std::endl;\n-        std::cout << \"native interpret \" << interpret << std::endl;\n-        std::cout << \"native platform \" << platform << std::endl;\n-        std::cout << \"native device \" << device << std::endl;\n-    }\n+Backend::Config::Config(int configBits):BasicConfig(configBits) {\n+\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/cpp\/shared.cpp","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ Auto generated from  hat.backend.ffi.Config\n+\/\/ Auto generated from  hat.backend.ffi.Config\n+\/\/ Auto generated from  hat.backend.ffi.Config\n+#pragma once\n+\n+#include <iostream>\n+\n+\n+struct BasicConfig{\n+    static constexpr int START_BIT_IDX                    = 0x10;\n+    static constexpr int MINIMIZE_COPIES_BIT              = 1<<0x10;\n+    static constexpr int TRACE_BIT                        = 1<<0x11;\n+    static constexpr int PROFILE_BIT                      = 1<<0x12;\n+    static constexpr int SHOW_CODE_BIT                    = 1<<0x13;\n+    static constexpr int SHOW_KERNEL_MODEL_BIT            = 1<<0x14;\n+    static constexpr int SHOW_COMPUTE_MODEL_BIT           = 1<<0x15;\n+    static constexpr int INFO_BIT                         = 1<<0x16;\n+    static constexpr int TRACE_COPIES_BIT                 = 1<<0x17;\n+    static constexpr int TRACE_SKIPPED_COPIES_BIT         = 1<<0x18;\n+    static constexpr int TRACE_ENQUEUES_BIT               = 1<<0x19;\n+    static constexpr int TRACE_CALLS_BIT                  = 1<<0x1a;\n+    static constexpr int SHOW_WHY_BIT                     = 1<<0x1b;\n+    static constexpr int SHOW_STATE_BIT                   = 1<<0x1c;\n+    static constexpr int PTX_BIT                          = 1<<0x1d;\n+    static constexpr int INTERPRET_BIT                    = 1<<0x1e;\n+    static constexpr int END_BIT_IDX                      = 0x1f;\n+    const static char *bitNames[]; \/\/ See below for initialization\n+    int configBits;\n+    bool minimizeCopies;\n+    bool trace;\n+    bool profile;\n+    bool showCode;\n+    bool showKernelModel;\n+    bool showComputeModel;\n+    bool info;\n+    bool traceCopies;\n+    bool traceSkippedCopies;\n+    bool traceEnqueues;\n+    bool traceCalls;\n+    bool showWhy;\n+    bool showState;\n+    bool ptx;\n+    bool interpret;\n+    int platform;\n+    int device;\n+    bool alwaysCopy;\n+    explicit BasicConfig(int configBits):\n+        configBits(configBits),\n+        minimizeCopies((configBits & MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT),\n+        trace((configBits & TRACE_BIT)==TRACE_BIT),\n+        profile((configBits & PROFILE_BIT)==PROFILE_BIT),\n+        showCode((configBits & SHOW_CODE_BIT)==SHOW_CODE_BIT),\n+        showKernelModel((configBits & SHOW_KERNEL_MODEL_BIT)==SHOW_KERNEL_MODEL_BIT),\n+        showComputeModel((configBits & SHOW_COMPUTE_MODEL_BIT)==SHOW_COMPUTE_MODEL_BIT),\n+        info((configBits & INFO_BIT)==INFO_BIT),\n+        traceCopies((configBits & TRACE_COPIES_BIT)==TRACE_COPIES_BIT),\n+        traceSkippedCopies((configBits & TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT),\n+        traceEnqueues((configBits & TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n+        traceCalls((configBits & TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n+        showWhy((configBits & SHOW_WHY_BIT)==SHOW_WHY_BIT),\n+        showState((configBits & SHOW_STATE_BIT)==SHOW_STATE_BIT),\n+        ptx((configBits & PTX_BIT)==PTX_BIT),\n+        interpret((configBits & INTERPRET_BIT)==INTERPRET_BIT),\n+        platform(configBits & 0xf),\n+        alwaysCopy(!minimizeCopies),\n+        device((configBits & 0xf0) >> 4){\n+            if(info){\n+                std::cout << \"native minimizeCopies \" << minimizeCopies << std::endl;\n+                std::cout << \"native trace \" << trace << std::endl;\n+                std::cout << \"native profile \" << profile << std::endl;\n+                std::cout << \"native showCode \" << showCode << std::endl;\n+                std::cout << \"native showKernelModel \" << showKernelModel << std::endl;\n+                std::cout << \"native showComputeModel \" << showComputeModel << std::endl;\n+                std::cout << \"native info \" << info << std::endl;\n+                std::cout << \"native traceCopies \" << traceCopies << std::endl;\n+                std::cout << \"native traceSkippedCopies \" << traceSkippedCopies << std::endl;\n+                std::cout << \"native traceEnqueues \" << traceEnqueues << std::endl;\n+                std::cout << \"native traceCalls \" << traceCalls << std::endl;\n+                std::cout << \"native showWhy \" << showWhy << std::endl;\n+                std::cout << \"native showState \" << showState << std::endl;\n+                std::cout << \"native ptx \" << ptx << std::endl;\n+                std::cout << \"native interpret \" << interpret << std::endl;\n+\n+            }\n+        }\n+\n+    virtual ~BasicConfig()= default;\n+};\n+\n+#ifdef shared_cpp\n+const char *BasicConfig::bitNames[]={\n+    \"MINIMIZE_COPIES_BIT\",\n+    \"TRACE_BIT\",\n+    \"PROFILE_BIT\",\n+    \"SHOW_CODE_BIT\",\n+    \"SHOW_KERNEL_MODEL_BIT\",\n+    \"SHOW_COMPUTE_MODEL_BIT\",\n+    \"INFO_BIT\",\n+    \"TRACE_COPIES_BIT\",\n+    \"TRACE_SKIPPED_COPIES_BIT\",\n+    \"TRACE_ENQUEUES_BIT\",\n+    \"TRACE_CALLS_BIT\",\n+    \"SHOW_WHY_BIT\",\n+    \"SHOW_STATE_BIT\",\n+    \"PTX_BIT\",\n+    \"INTERPRET_BIT\",\n+};\n+#endif\n\\ No newline at end of file\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/config.h","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+#include <iostream>\n+struct BasicConfig {\n+    \/\/ These must sync with hat\/backend\/ffi\/Mode.java\n+    \/\/ Bits 0-3 select platform id 0..5\n+    \/\/ Bits 4-7 select device id 0..15\n+    static constexpr int START_BIT_IDX = 16;\n+    static constexpr int MINIMIZE_COPIES_BIT = 1 << START_BIT_IDX;\n+    static constexpr int TRACE_BIT = 1 << 17;\n+    static constexpr int PROFILE_BIT = 1 << 18;\n+    static constexpr int SHOW_CODE_BIT = 1 << 19;\n+    static constexpr int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n+    static constexpr int SHOW_COMPUTE_MODEL_BIT = 1 << 21;\n+    static constexpr int INFO_BIT = 1 << 22;\n+    static constexpr int TRACE_COPIES_BIT = 1 << 23;\n+    static constexpr int TRACE_SKIPPED_COPIES_BIT = 1 << 24;\n+    static constexpr int TRACE_ENQUEUES_BIT = 1 << 25;\n+    static constexpr int TRACE_CALLS_BIT = 1 << 26;\n+    static constexpr int SHOW_WHY_BIT = 1 << 27;\n+    static constexpr int SHOW_STATE_BIT = 1 << 28;\n+    static constexpr int PTX_BIT = 1 << 29;\n+    static constexpr int INTERPRET_BIT = 1 << 30;\n+    static constexpr int END_BIT_IDX = 31;\n+\n+    const static char *bitNames[]; \/\/ See below for out of line definition\n+    int configBits;\n+    bool minimizeCopies;\n+    bool alwaysCopy;\n+    bool trace;\n+    bool profile;\n+    bool showCode;\n+    bool info;\n+    bool traceCopies;\n+    bool traceSkippedCopies;\n+    bool traceEnqueues;\n+    bool traceCalls;\n+    bool showWhy;\n+    bool showState;\n+    bool ptx;\n+    bool interpret;\n+    int platform; \/\/0..15\n+    int device; \/\/0..15\n+      explicit BasicConfig(int configBits):\n+             configBits(configBits),\n+             minimizeCopies((configBits & MINIMIZE_COPIES_BIT) == MINIMIZE_COPIES_BIT),\n+             alwaysCopy(!minimizeCopies),\n+             trace((configBits & TRACE_BIT) == TRACE_BIT),\n+             traceCopies((configBits & TRACE_COPIES_BIT) == TRACE_COPIES_BIT),\n+             traceEnqueues((configBits & TRACE_ENQUEUES_BIT) == TRACE_ENQUEUES_BIT),\n+             traceCalls((configBits & TRACE_CALLS_BIT) == TRACE_CALLS_BIT),\n+             traceSkippedCopies((configBits & TRACE_SKIPPED_COPIES_BIT) == TRACE_SKIPPED_COPIES_BIT),\n+             info((configBits & INFO_BIT) == INFO_BIT),\n+             showCode((configBits & SHOW_CODE_BIT) == SHOW_CODE_BIT),\n+             profile((configBits & PROFILE_BIT) == PROFILE_BIT),\n+             showWhy((configBits & SHOW_WHY_BIT) == SHOW_WHY_BIT),\n+             showState((configBits & SHOW_STATE_BIT) == SHOW_STATE_BIT),\n+             ptx((configBits & PTX_BIT) == PTX_BIT),\n+             interpret((configBits & INTERPRET_BIT) == INTERPRET_BIT),\n+             platform(configBits & 0xf),\n+             device((configBits & 0xf0) >> 4) {\n+    if (info) {\n+        std::cout << \"native showCode \" << showCode << std::endl;\n+        std::cout << \"native info \" << info << std::endl;\n+        std::cout << \"native minimizeCopies \" << minimizeCopies << std::endl;\n+        std::cout << \"native alwaysCopy \" << alwaysCopy << std::endl;\n+        std::cout << \"native trace \" << trace << std::endl;\n+        std::cout << \"native traceSkippedCopies \" << traceSkippedCopies << std::endl;\n+        std::cout << \"native traceCalls \" << traceCalls << std::endl;\n+        std::cout << \"native traceCopies \" << traceCopies << std::endl;\n+        std::cout << \"native traceEnqueues \" << traceEnqueues << std::endl;\n+        std::cout << \"native profile \" << profile << std::endl;\n+        std::cout << \"native showWhy \" << showWhy << std::endl;\n+        std::cout << \"native showState \" << showState << std::endl;\n+        std::cout << \"native ptx \" << ptx << std::endl;\n+        std::cout << \"native interpret \" << interpret << std::endl;\n+        std::cout << \"native platform \" << platform << std::endl;\n+        std::cout << \"native device \" << device << std::endl;\n+    }\n+}\n+\n+    virtual ~BasicConfig()= default;\n+};\n+\n+#ifdef shared_cpp\n+const char *BasicConfig::bitNames[] = {\n+    \"MINIMIZE_COPIES\",\n+    \"TRACE\",\n+    \"PROFILE\",\n+    \"SHOW_CODE\",\n+    \"SHOW_KERNEL_MODEL\",\n+    \"SHOW_COMPUTE_MODEL\",\n+    \"INFO\",\n+    \"TRACE_COPIES\",\n+    \"TRACE_SKIPPED_COPIES\",\n+    \"TRACE_ENQUEUES\",\n+    \"TRACE_CALLS\",\n+    \"SHOW_WHY_BIT\",\n+    \"USE_STATE_BIT\",\n+    \"SHOW_STATE_BIT\"\n+};\n+#endif\n\\ No newline at end of file\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/config.safe","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"config.h\"\n@@ -368,0 +369,1 @@\n+\n@@ -370,1 +372,1 @@\n-    class Config {\n+    class Config final : public BasicConfig {\n@@ -372,39 +374,0 @@\n-        \/\/ These must sync with hat\/backend\/ffi\/Mode.java\n-        \/\/ Bits 0-3 select platform id 0..5\n-        \/\/ Bits 4-7 select device id 0..15\n-        static constexpr int START_BIT_IDX = 16;\n-        static constexpr int MINIMIZE_COPIES_BIT = 1 << START_BIT_IDX;\n-        static constexpr int TRACE_BIT = 1 << 17;\n-        static constexpr int PROFILE_BIT = 1 << 18;\n-        static constexpr int SHOW_CODE_BIT = 1 << 19;\n-        static constexpr int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n-        static constexpr int SHOW_COMPUTE_MODEL_BIT = 1 << 21;\n-        static constexpr int INFO_BIT = 1 << 22;\n-        static constexpr int TRACE_COPIES_BIT = 1 << 23;\n-        static constexpr int TRACE_SKIPPED_COPIES_BIT = 1 << 24;\n-        static constexpr int TRACE_ENQUEUES_BIT = 1 << 25;\n-        static constexpr int TRACE_CALLS_BIT = 1 << 26;\n-        static constexpr int SHOW_WHY_BIT = 1 << 27;\n-        static constexpr int SHOW_STATE_BIT = 1 << 28;\n-        static constexpr int PTX_BIT = 1 << 29;\n-        static constexpr int INTERPRET_BIT = 1 << 30;\n-        static constexpr int END_BIT_IDX = 31;\n-\n-        const static char *bitNames[]; \/\/ See below for out of line definition\n-        int configBits;\n-        bool minimizeCopies;\n-        bool alwaysCopy;\n-        bool trace;\n-        bool profile;\n-        bool showCode;\n-        bool info;\n-        bool traceCopies;\n-        bool traceSkippedCopies;\n-        bool traceEnqueues;\n-        bool traceCalls;\n-        bool showWhy;\n-        bool showState;\n-        bool ptx;\n-        bool interpret;\n-        int platform; \/\/0..15\n-        int device; \/\/0..15\n@@ -413,1 +376,1 @@\n-        virtual ~Config();\n+        ~Config() override;\n@@ -570,18 +533,1 @@\n-#ifdef shared_cpp\n-const char *Backend::Config::bitNames[] = {\n-    \"MINIMIZE_COPIES\",\n-    \"TRACE\",\n-    \"PROFILE\",\n-    \"SHOW_CODE\",\n-    \"SHOW_KERNEL_MODEL\",\n-    \"SHOW_COMPUTE_MODEL\",\n-    \"INFO\",\n-    \"TRACE_COPIES\",\n-    \"TRACE_SKIPPED_COPIES\",\n-    \"TRACE_ENQUEUES\",\n-    \"TRACE_CALLS\",\n-    \"SHOW_WHY_BIT\",\n-    \"USE_STATE_BIT\",\n-    \"SHOW_STATE_BIT\"\n-};\n-#endif\n+\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/shared.h","additions":5,"deletions":59,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.JavaType;\n@@ -37,0 +35,3 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n+\n@@ -78,1 +79,1 @@\n-            if (op instanceof CoreOp.InvokeOp invokeOp) {\n+            if (op instanceof JavaOp.InvokeOp invokeOp) {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/DNA.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.incubator.code.op.CoreOp;\n+import jdk.incubator.code.dialect.core.CoreOp;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/DependencyTree.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.FunctionType;\n@@ -48,0 +46,2 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.core.FunctionType;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/InvokeToPtr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,6 +39,3 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.op.ExternalizableOp;\n-import jdk.incubator.code.op.OpFactory;\n-import jdk.incubator.code.type.FunctionType;\n-import jdk.incubator.code.type.JavaType;\n-import jdk.incubator.code.type.PrimitiveType;\n+import jdk.incubator.code.dialect.ExternalizableOp;\n+import jdk.incubator.code.dialect.OpFactory;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -46,0 +43,5 @@\n+import jdk.incubator.code.dialect.core.FunctionType;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n+import jdk.incubator.code.dialect.java.PrimitiveType;\n+\n@@ -135,1 +137,1 @@\n-                if (op instanceof CoreOp.InvokeOp invokeOp\n+                if (op instanceof JavaOp.InvokeOp invokeOp\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/LayoutExample.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.FunctionType;\n@@ -46,0 +44,2 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.core.FunctionType;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/PointyHat.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,2 +45,1 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.FunctionType;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -48,0 +47,1 @@\n+import jdk.incubator.code.dialect.core.FunctionType;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/PointyHatArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,3 +37,1 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.JavaType;\n-import jdk.incubator.code.type.MethodRef;\n+import jdk.incubator.code.dialect.core.CoreOp;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/PrePostInc.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import jdk.incubator.code.op.CoreOp;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -38,7 +38,7 @@\n-import static jdk.incubator.code.op.CoreOp._return;\n-import static jdk.incubator.code.op.CoreOp.add;\n-import static jdk.incubator.code.op.CoreOp.closureCall;\n-import static jdk.incubator.code.op.CoreOp.constant;\n-import static jdk.incubator.code.op.CoreOp.func;\n-import static jdk.incubator.code.type.FunctionType.functionType;\n-import static jdk.incubator.code.type.JavaType.INT;\n+import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.closureCall;\n+import static jdk.incubator.code.dialect.core.CoreOp.constant;\n+import static jdk.incubator.code.dialect.core.CoreOp.func;\n+import static jdk.incubator.code.dialect.core.FunctionType.functionType;\n+import static jdk.incubator.code.dialect.java.JavaOp.add;\n+import static jdk.incubator.code.dialect.java.JavaType.INT;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/QuotedTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,6 +38,3 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.op.ExternalizableOp;\n-import jdk.incubator.code.op.OpFactory;\n-import jdk.incubator.code.type.FunctionType;\n-import jdk.incubator.code.type.JavaType;\n-import jdk.incubator.code.type.PrimitiveType;\n+import jdk.incubator.code.dialect.ExternalizableOp;\n+import jdk.incubator.code.dialect.OpFactory;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -45,0 +42,5 @@\n+import jdk.incubator.code.dialect.core.FunctionType;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaType;\n+import jdk.incubator.code.dialect.java.PrimitiveType;\n+\n@@ -156,1 +158,1 @@\n-                if (op instanceof CoreOp.InvokeOp iop && iop.hasReceiver()) {\n+                if (op instanceof JavaOp.InvokeOp iop && iop.hasReceiver()) {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/RawLayout.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,2 +32,4 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.MethodRef;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.MethodRef;\n+\n@@ -135,1 +137,1 @@\n-            CoreOp.LambdaOp op = (CoreOp.LambdaOp) quoted.op();\n+            JavaOp.LambdaOp op = (JavaOp.LambdaOp) quoted.op();\n@@ -139,1 +141,1 @@\n-        static boolean isMethodRef(CoreOp.LambdaOp lambdaOp) {\n+        static boolean isMethodRef(JavaOp.LambdaOp lambdaOp) {\n@@ -152,1 +154,1 @@\n-            CoreOp.InvokeOp methodRefInvokeOp = extractMethodInvoke(valueMapping, lambdaOp.body().entryBlock().ops());\n+            JavaOp.InvokeOp methodRefInvokeOp = extractMethodInvoke(valueMapping, lambdaOp.body().entryBlock().ops());\n@@ -167,2 +169,2 @@\n-        static CoreOp.InvokeOp extractMethodInvoke(Map<Value, Value> valueMapping, List<Op> ops) {\n-            CoreOp.InvokeOp methodRefInvokeOp = null;\n+        static JavaOp.InvokeOp extractMethodInvoke(Map<Value, Value> valueMapping, List<Op> ops) {\n+            JavaOp.InvokeOp methodRefInvokeOp = null;\n@@ -180,1 +182,1 @@\n-                    case CoreOp.InvokeOp iop when isBoxOrUnboxInvocation(iop) -> {\n+                    case JavaOp.InvokeOp iop when isBoxOrUnboxInvocation(iop) -> {\n@@ -184,1 +186,1 @@\n-                    case CoreOp.InvokeOp iop -> {\n+                    case JavaOp.InvokeOp iop -> {\n@@ -228,1 +230,1 @@\n-        private static boolean isBoxOrUnboxInvocation(CoreOp.InvokeOp iop) {\n+        private static boolean isBoxOrUnboxInvocation(JavaOp.InvokeOp iop) {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/TestQuoted.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,3 +35,1 @@\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.type.JavaType;\n-import jdk.incubator.code.type.MethodRef;\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -39,0 +37,3 @@\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.MethodRef;\n+\n@@ -42,0 +43,2 @@\n+import static jdk.incubator.code.dialect.core.FunctionType.VOID;\n+\n@@ -69,1 +72,1 @@\n-                this.type = JavaType.VOID;\n+                this.type = VOID;\n@@ -129,1 +132,1 @@\n-                if (op instanceof CoreOp.InvokeOp invokeOp) {\n+                if (op instanceof JavaOp.InvokeOp invokeOp) {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Transform.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-    T hashIfdef(String value) {\n+    protected T hashIfdef(String value) {\n@@ -148,1 +148,1 @@\n-    T hashIfdef(String value, Consumer<T> consumer) {\n+    public T hashIfdef(String value, Consumer<T> consumer) {\n@@ -161,1 +161,4 @@\n-\n+  public T varName(CoreOp.VarOp varOp) {\n+      identifier(varOp.varName());\n+      return self();\n+  }\n@@ -166,0 +169,4 @@\n+    T includeKeyword() {\n+        return keyword(\"include\");\n+    }\n+\n@@ -181,0 +188,12 @@\n+    public T includeSys(String... values) {\n+        for (String value : values) {\n+            hash().includeKeyword().space().lt().identifier(value).gt().nl();\n+        }\n+        return nl();\n+    }\n+    public T include(String... values) {\n+        for (String value : values) {\n+            hash().includeKeyword().space().dquote().identifier(value).dquote().nl();\n+        }\n+        return nl();\n+    }\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/codebuilders\/HATCodeBuilder.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -156,4 +156,1 @@\n-    public T varName(CoreOp.VarOp varOp) {\n-        identifier(varOp.varName());\n-        return self();\n-    }\n+\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/backend\/codebuilders\/HATCodeBuilderWithContext.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,3 @@\n-\n+    public T tilde() {\n+        return symbol(\"~\");\n+    }\n@@ -89,0 +91,6 @@\n+    public T leftShift() {\n+        return symbol(\"<<\");\n+    }\n+    public T rightShift() {\n+        return symbol(\">>\");\n+    }\n@@ -128,1 +136,3 @@\n-\n+    public T constexprKeyword() {\n+        return keyword(\"constexpr\");\n+    }\n@@ -133,0 +143,7 @@\n+    public T explicitKeyword() {\n+        return keyword(\"explicit\");\n+    }\n+\n+    public T virtualKeyword() {\n+        return keyword(\"virtual\");\n+    }\n@@ -248,0 +265,3 @@\n+    public T eq() {\n+        return equals().equals();\n+    }\n@@ -389,0 +409,1 @@\n+\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/text\/CodeBuilder.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -124,0 +124,9 @@\n+    public T identifier(String text, int  padWidth) {\n+        return emitText(text).emitText(\" \".repeat(padWidth-text.length()));\n+    }\n+    public T intValue(int i) {\n+        return emitText(Integer.toString(i));\n+    }\n+    public T intHexValue(int i) {\n+        return emitText(\"0x\").emitText(Integer.toHexString(i));\n+    }\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/text\/TextBuilder.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -7,0 +7,1 @@\n+      <excludeFolder url=\"file:\/\/$MODULE_DIR$\/..\/..\/cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\" \/>\n@@ -22,1 +23,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/backend_ffi_spirv.iml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+      <excludeFolder url=\"file:\/\/$MODULE_DIR$\/..\/wrap\/glwrap\/src\/main\/java\/wrap\/glwrap\" \/>\n","filename":"hat\/intellij\/glwrap.iml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/hat-core\/src\/main\/test\"  \/>\n+      <excludeFolder url=\"file:\/\/$MODULE_DIR$\/..\/hat-core\/src\/main\/test\" \/>\n@@ -27,1 +27,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/hat-core.iml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+      <excludeFolder url=\"file:\/\/$MODULE_DIR$\/..\/examples\/nbody\/src\/main\/java\/nbody\" \/>\n","filename":"hat\/intellij\/nbody.iml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}