{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import static java.lang.System.*;\n@@ -74,8 +75,1 @@\n-    var hatDir = DirEntry.current();\n-  var hatCoreDir = hatDir.existingDir(\"hat\");\n-  var backends = hatDir.existingDir(\"backends\");\n-  var examples = hatDir.existingDir(\"examples\");\n-  var stageDir = hatDir.buildDir(\"stage\").create();\n-  var jextractDir = stageDir.buildDir(\"jextract\").create();\n-  var buildDir = BuildDir.of(hatDir.path(\"build\")).create();\n-  var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+  var dir = DirEntry.current();\n@@ -83,2 +77,7 @@\n-  var extractedOpenCLJar = buildDir.jarFile(\"jextracted-opencl.jar\");\n-  var extractedOpenGLJar = buildDir.jarFile(\"jextracted-opengl.jar\");\n+    \/\/ var dir = DirEntry.current();\n+    var hatCoreDir = dir.existingDir(\"hat\");\n+    var backends = dir.existingDir(\"backends\");\n+    var examples = dir.existingDir(\"examples\");\n+    var stageDir = dir.buildDir(\"stage\").create();\n+    var buildDir = BuildDir.of(dir.path(\"build\")).create();\n+    var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n@@ -86,6 +85,6 @@\n-  var opencl = Capabilities.OpenCL.of();\n-  var opengl = Capabilities.OpenGL.of();\n-  var cuda = Capabilities.CUDA.of();\n-  var hip = Capabilities.HIP.of();\n-  var jextract = Capabilities.JExtract.of();\n-  var cmake = Capabilities.CMake.of();\n+    var openclCapability = Capabilities.OpenCL.of();\n+    var openglCapability = Capabilities.OpenGL.of();\n+    var cudaCapability = Capabilities.CUDA.of();\n+    var hipCapability = Capabilities.HIP.of();\n+    var jextractCapability = Capabilities.JExtract.of();\/\/ or Capability.JExtract.of(Path.of(\"\/my\/jextract-22\/bin\/jextract\"));\n+    var cmakeCapability = Capabilities.CMake.of();\n@@ -93,1 +92,1 @@\n-  Capabilities capabilities = Capabilities.of(opencl, opengl, cuda, hip, jextract, cmake);\n+    Capabilities capabilities = Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);\n@@ -95,5 +94,8 @@\n-  if (cmake.available()) {\n-    cmake.probe(buildDir, capabilities);\n-  }\n-  capabilities.capabilities().forEach(fw -> println((fw.available() ? \"we have \" : \"no \") + fw.name));\n-  var verbose = false;\n+    if (cmakeCapability.available()) {\n+        cmakeCapability.probe(buildDir, capabilities);\n+    }\n+\n+    capabilities.capabilities().forEach(fw -> out.print( \"[\"+fw.name + (fw.available() ? \"\\u2714\" : \"\\u2715\") +\"]\"));\n+    out.println();\n+\n+    var verbose = false;\n@@ -102,21 +104,28 @@\n-  if (jextract.available()) {\n-    if (opencl.available()) {\n-      if (!extractedOpenCLJar.exists()) {\n-        var openclSource = jextractDir.sourceDir(\"opencl\");\n-        if (!openclSource.exists()) {\n-          jextract(jextract.executable, $ -> {\n-            $\n-              .verbose(verbose)\n-              .output(jextractDir)\n-              .target_package(openclSource.fileName());\n-            switch (os) {\n-              case OS.Mac mac -> {\n-                $\n-                  .compile_flag(\"-F\" + opencl.appLibFrameworks() + \"\/System\/library\/Frameworks\")\n-                  .library(mac.frameworkLibrary(\"OpenCL\"))\n-                  \/\/.library(Path.of(opencl.lib()))\n-                  .header(Path.of(opencl.includeDir()).resolve(\"Headers\/opencl.h\"));\n-              }\n-              case OS.Linux linux -> {\n-              }\n-              default -> throw new RuntimeException(\"Unsupported OS: \" + os);\n+    if (jextractCapability.available()) {\n+        if (openclCapability.available()) {\n+            if (!openclCapability.jarFile(buildDir).exists()) {\n+                if (!openclCapability.stage(stageDir).exists()) {\n+                    jextract(jextractCapability.executable, $ -> $\n+                            .verbose(verbose)\n+                            .capability(openclCapability,stageDir)\n+                            .os(\n+                                    mac -> $\n+                                            .compile_flag(\"-F\" + openclCapability.appLibFrameworks() + \"\/System\/library\/Frameworks\")\n+                                            .library(mac.frameworkLibrary(\"OpenCL\"))\n+                                            .header(Path.of(openclCapability.includeDir()).resolve(\"Headers\/opencl.h\")),\n+                                    linux -> {\n+                                        throw new RuntimeException(\"Unsupported OS: \" + os);\n+                                    }\n+                            )\n+                    );\n+                }else{\n+                    out.println(\"Using previously extracted  \"+openclCapability.stage(buildDir).fileName());\n+                }\n+                jar(jar ->\n+                            jar\n+                                    .jarFile(openclCapability.jarFile(buildDir))\n+                                    .javac(javac -> javac.current_source().source_path(SourceDir.of(openclCapability.stage(stageDir).path())))\n+\n+                );\n+            }else{\n+                out.println(\"Using existing extracted \"+openclCapability.jarFile(buildDir).fileName());\n@@ -124,1 +133,2 @@\n-          });\n+        } else {\n+            out.println(\"This platform does not have OpenCL\");\n@@ -126,10 +136,0 @@\n-        jar(jar -> {\n-              jar\n-                .jar(extractedOpenCLJar)\n-                .javac(javac -> javac.source(24).source_path(openclSource));\n-            }\n-        );\n-      }\n-    } else {\n-      println(\"This platform does not have OpenCL\");\n-    }\n@@ -137,18 +137,25 @@\n-    if (opengl.available()) {\n-      if (!extractedOpenGLJar.exists()) {\n-        var openglSource = jextractDir.sourceDir(\"opengl\");\n-        if (!openglSource.exists()) {\n-          jextract(jextract.executable, $ -> { $\n-              .verbose(verbose)\n-              .output(jextractDir)\n-              .target_package(openglSource.fileName());\n-            switch (os) {\n-              case OS.Mac mac -> { $\n-                  .compile_flag(\"-F\" + opengl.appLibFrameworks() + \"\/System\/library\/Frameworks\")\n-                  \/\/.library(opengl.lib(\"GLUT\"),opengl.lib(\"OpenGL\"))\n-                  .library(mac.frameworkLibrary(\"GLUT\"), mac.frameworkLibrary(\"OpenGL\"))\n-                  .header(mac.frameworkHeader(\"GLUT\", \"glut.h\"));\n-              }\n-              case OS.Linux linux -> {\n-              }\n-              default -> throw new RuntimeException(\"Unsupported OS: \" + os);\n+        if (openglCapability.available()) {\n+            if (!openglCapability.jarFile(buildDir).exists()) {\n+                if (!openglCapability.stage(stageDir).exists()) {\n+                    jextract(jextractCapability, $ -> $\n+                            .verbose(verbose)\n+                            .capability(openglCapability, stageDir)\n+                            .os(\n+                                    mac -> $\n+                                            .compile_flag(\"-F\" + openglCapability.appLibFrameworks() + \"\/System\/library\/Frameworks\")\n+                                            .library(mac.frameworkLibrary(\"GLUT\"), mac.frameworkLibrary(\"OpenGL\"))\n+                                            .header(mac.frameworkHeader(\"GLUT\", \"glut.h\")),\n+                                    linux -> {\n+                                        throw new RuntimeException(\"Unsupported OS: \" + os);\n+                                    }\n+                            )\n+                    );\n+                }else{\n+                    out.println(\"Using previously extracted  \"+openglCapability.stage(buildDir).fileName());\n+                }\n+                jar(jar -> jar\n+                        .jarFile(openglCapability.jarFile(buildDir))\n+                        .javac(javac -> javac.current_source().source_path(SourceDir.of(openglCapability.stage(stageDir).path())))\n+                );\n+            }else{\n+                out.println(\"Using existing extracted \"+openglCapability.jarFile(buildDir).fileName());\n@@ -156,1 +163,2 @@\n-          });\n+        } else {\n+            out.println(\"This platform does not have OpenGL\");\n@@ -158,8 +166,0 @@\n-        jar(jar -> jar\n-          .jar(extractedOpenGLJar)\n-          .javac(javac -> javac.source(24).source_path(openglSource))\n-        );\n-      }\n-    } else {\n-      println(\"This platform does not have OpenGL\");\n-    }\n@@ -168,1 +168,1 @@\n-    if (cuda.available()) {\n+        if (cudaCapability.available()) {\n@@ -170,2 +170,3 @@\n-    } else {\n-      println(\"This platform does not have CUDA\");\n+        } else {\n+            out.println(\"This platform does not have CUDA\");\n+        }\n@@ -173,25 +174,6 @@\n-  }\n-  var hatJavacOpts = javacBuilder(javacBuilder -> {javacBuilder\n-    .enable_preview()\n-    .add_modules(\"jdk.incubator.code\")\n-    .add_exports(\n-       \"java.base\",\n-       List.of(\n-          \"jdk.internal\",\n-          \"jdk.internal.vm.annotation\"\n-       ),\n-       \"ALL-UNNAMED\"\n-    )\n-    .source(24);\n-  });\n-\n-  var hatJarOptions = jarBuilder(jarBuilder -> jarBuilder\n-    .verbose(verbose)\n-  );\n-  var hatJarFile = buildDir.jarFile(\"hat-1.0.jar\");\n-  jar(jar -> jar\n-    .copy(hatJarOptions)\n-    .jar(hatJarFile)\n-    .maven_style_root(hatCoreDir)\n-    .javac(javac -> javac.copy(hatJavacOpts))\n-  );\n+    var hatJavacOpts = javacBuilder($ -> $\n+            .enable_preview()\n+            .add_modules(\"jdk.incubator.code\")\n+            .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\", \"jdk.internal.vm.annotation\")\n+            .current_source()\n+    );\n@@ -199,0 +181,10 @@\n+    var hatJarOptions = jarBuilder($ -> $\n+            .verbose(verbose)\n+    );\n+    var hatJarFile = buildDir.jarFile(\"hat-1.0.jar\");\n+    jar(hatJarOptions, jar -> jar\n+            .jarFile(hatJarFile)\n+            .maven_style_root(hatCoreDir)\n+            .javac(hatJavacOpts, javac -> {\n+            })\n+    );\n@@ -200,13 +192,0 @@\n-  \/\/ Here we create all backend jars.\n-  var ffiBackends = backends.existingDir(\"ffi\");\n-  ffiBackends\n-    .subDirs(backend -> !backend.matches(\"^.*(spirv|hip|shared|target|.idea)$\"))\n-    .forEach(backend -> {\n-      var jarFile = buildDir.jarFile(\"hat-backend-ffi-\" + backend.fileName() + \"-1.0.jar\");\n-      println(jarFile.fileName());\n-      jar(jar -> jar.copy(hatJarOptions)\n-        .jar(jarFile)\n-        .maven_style_root(backend)\n-        .javac(javac -> javac.copy(hatJavacOpts).class_path(hatJarFile))\n-      );\n-    });\n@@ -214,14 +193,14 @@\n-  \/\/ Here we create all java backend jars.\n-  var javaBackends = backends.existingDir(\"java\");\n-  javaBackends\n-    .subDirs(backend -> !backend.matches(\"^.*(target|.idea)$\"))\n-    .forEach(backend -> {\n-      var jarFile = buildDir.jarFile(\"hat-backend-java-\" + backend.fileName() + \"-1.0.jar\");\n-      println(jarFile.fileName());\n-      jar(jar -> jar\n-            .copy(hatJarOptions)\n-            .jar(jarFile)\n-            .dir_list(backend.dir(\"src\/main\/resources\"))\n-          \/\/.maven_style_root(backend)\n-      );\n-    });\n+    \/\/ Here we create all backend jars.\n+    var ffiBackends = backends.existingDir(\"ffi\");\n+    ffiBackends\n+            .subDirs()\n+            .filter(backend -> backend.failsToMatch(\"^.*(spirv|hip|shared|target|.idea)$\"))\n+            .forEach(backend -> {\n+                var jarFile = buildDir.jarFile(\"hat-backend-ffi-\" + backend.fileName() + \"-1.0.jar\");\n+                out.println(jarFile.fileName());\n+                jar(hatJarOptions, jar -> jar\n+                        .jarFile(jarFile)\n+                        .maven_style_root(backend)\n+                        .javac(hatJavacOpts, javac -> javac.class_path(hatJarFile))\n+                );\n+            });\n@@ -229,0 +208,12 @@\n+    \/\/ Here we create all java backend jars.\n+    backends.existingDir(\"java\")\n+            .subDirs()\n+            .filter(backend -> backend.failsToMatch(\"^.*(target|.idea)$\"))\n+            .forEach(backend -> {\n+                var jarFile = buildDir.jarFile(\"hat-backend-java-\" + backend.fileName() + \"-1.0.jar\");\n+                out.println(jarFile.fileName());\n+                jar(hatJarOptions, jar -> jar\n+                        .jarFile(jarFile)\n+                        .dir_list(backend.dir(\"src\/main\/resources\"))\n+                );\n+            });\n@@ -230,15 +221,0 @@\n-  \/\/ here we create the example jars\n-  examples\n-    .subDirs(example -> !example.matches(\"^.*(experiments|nbody|target|.idea)$\"))\n-    .forEach(example -> {\n-      var jarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n-      println(jarFile.fileName());\n-      jar(jar -> jar.copy(hatJarOptions)\n-        .jar(jarFile)\n-        .maven_style_root(example)\n-        .javac(javac -> javac.copy(hatJavacOpts).class_path(hatJarFile))\n-        .manifest(manifest -> manifest\n-          .main_class(example.fileName() + \".Main\")\n-        )\n-      );\n-    });\n@@ -246,10 +222,15 @@\n-  if (jextract.available() && opencl.available() && opengl.available()) {\n-    var example = examples.dir(\"nbody\");\n-    var jarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n-    println(jarFile.fileName());\n-    jar(jar -> jar.copy(hatJarOptions)\n-      .jar(jarFile)\n-      .maven_style_root(example)\n-      .javac(javac -> javac.copy(hatJavacOpts).class_path(hatJarFile, extractedOpenCLJar, extractedOpenGLJar))\n-    );\n-  }\n+    \/\/ here we create the example jars\n+    examples.subDirs()\n+            .filter(example -> example.failsToMatch(\"^.*(experiments|nbody|target|.idea)$\"))\n+            .forEach(example -> {\n+                var jarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n+                out.println(jarFile.fileName());\n+                jar(hatJarOptions, jar -> jar\n+                        .jarFile(jarFile)\n+                        .maven_style_root(example)\n+                        .javac(hatJavacOpts, javac -> javac.class_path(hatJarFile))\n+                        .manifest(manifest -> manifest\n+                                .main_class(example.fileName() + \".Main\")\n+                        )\n+                );\n+            });\n@@ -257,7 +238,9 @@\n-  if (cmake.available()) {\n-    if (!cmakeBuildDir.exists()) {\n-      cmake($ -> $\n-        .source_dir(ffiBackends)\n-        .build_dir(cmakeBuildDir)\n-        .copy_to(buildDir)\n-      );\n+    if (jextractCapability.available() && openclCapability.available() && openglCapability.available()) {\n+        var example = examples.dir(\"nbody\");\n+        var jarFile = buildDir.jarFile(\"hat-example-\" + example.fileName() + \"-1.0.jar\");\n+        out.println(jarFile.fileName());\n+        jar(hatJarOptions, jar -> jar\n+                .jarFile(jarFile)\n+                .maven_style_root(example)\n+                .javac(hatJavacOpts, javac -> javac.class_path(hatJarFile, openclCapability.jarFile(buildDir), openglCapability.jarFile(buildDir)))\n+        );\n@@ -265,6 +248,0 @@\n-    cmake($ -> $\n-      .build(cmakeBuildDir)\n-    );\n-  } else {\n-    println(\"No cmake available so we did not build ffi backend shared libs\");\n-  }\n@@ -272,0 +249,15 @@\n+    if (cmakeCapability.available()) {\n+        if (!cmakeBuildDir.exists()) {\n+            cmake($ -> $\n+                    .verbose(verbose)\n+                    .source_dir(ffiBackends)\n+                    .build_dir(cmakeBuildDir)\n+                    .copy_to(buildDir)\n+            );\n+        }\n+        cmake($ -> $\n+                .build(cmakeBuildDir)\n+        );\n+    } else {\n+        out.println(\"No cmake available so we did not build ffi backend shared libs\");\n+    }\n","filename":"hat\/bld","additions":166,"deletions":174,"binary":false,"changes":340,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import com.sun.source.util.JavacTask;\n+import org.w3c.dom.Attr;\n@@ -39,0 +41,2 @@\n+import javax.tools.ToolProvider;\n+import javax.xml.parsers.DocumentBuilderFactory;\n@@ -90,2 +94,1 @@\n-    public sealed interface PathHolder permits ClassPathEntry, DirPathHolder,  FilePathHolder {\n-        Path path();\n+    public sealed interface PathHolder permits ClassPathEntry, DirPathHolder, FilePathHolder, SourcePathEntry {\n@@ -95,0 +98,1 @@\n+\n@@ -110,7 +114,2 @@\n-\n-        default boolean exists(){\n-            return Files.exists(path());\n-        }\n-\n-        default CppSourceFile cppSourceFile(String s) {\n-            return CppSourceFile.of(path().resolve(s));\n+        default boolean failsToMatch(String pattern) {\n+            return !pathMatcher(Pattern.compile(pattern)).matches();\n@@ -119,3 +118,1 @@\n-        default XMLFile xmlFile(String s) {\n-            return XMLFile.of(path().resolve(s));\n-        }\n+        boolean exists();\n@@ -123,3 +120,1 @@\n-        default TestNGSuiteFile testNGSuiteFile(String s) {\n-            return TestNGSuiteFile.of(path().resolve(s));\n-        }\n+        Path path();\n@@ -129,1 +124,1 @@\n-            permits BuildDirHolder, DirEntry, SourcePathEntry {\n+            permits BuildDirHolder, DirEntry, SourceDir {\n@@ -170,1 +165,1 @@\n-            return PathHolder.super.exists() && Files.isDirectory(path());\n+            return Files.isDirectory(path());\n@@ -177,2 +172,14 @@\n-        default SourcePathEntry sourceDir(String s) {\n-            return SourcePathEntry.of(path().resolve(s));\n+        default SourceDir sourceDir(String s) {\n+            return SourceDir.of(path().resolve(s));\n+        }\n+\n+        default CppSourceFile cppSourceFile(String s) {\n+            return CppSourceFile.of(path().resolve(s));\n+        }\n+\n+        default XMLFile xmlFile(String s) {\n+            return XMLFile.of(path().resolve(s));\n+        }\n+\n+        default TestNGSuiteFile testNGSuiteFile(String s) {\n+            return TestNGSuiteFile.of(path().resolve(s));\n@@ -184,1 +191,1 @@\n-            return PathHolder.super.exists() && Files.isRegularFile(path());\n+            return Files.isRegularFile(path());\n@@ -196,1 +203,1 @@\n-        List<Bldr.ClassPathEntry> classPathEntries();\n+        List<ClassPathEntry> classPathEntries();\n@@ -208,5 +215,5 @@\n-                                if (!sb.isEmpty()) {\n-                                    sb.append(File.pathSeparatorChar);\n-                                }\n-                                sb.append(pathHolder.path());\n-                            });\n+                if (!sb.isEmpty()) {\n+                    sb.append(File.pathSeparatorChar);\n+                }\n+                sb.append(pathHolder.path());\n+            });\n@@ -254,2 +261,2 @@\n-    public record SourcePath(List<SourcePathEntry> entries)\n-            implements PathHolderList<SourcePathEntry> {\n+    public record SourcePath(List<SourceDir> entries)\n+            implements PathHolderList<SourceDir> {\n@@ -264,1 +271,1 @@\n-        public SourcePath add(List<SourcePathEntry> sourcePathEntries) {\n+        public SourcePath add(List<SourceDir> sourcePathEntries) {\n@@ -269,1 +276,1 @@\n-        public SourcePath add(SourcePathEntry... sourcePathEntries) {\n+        public SourcePath add(SourceDir... sourcePathEntries) {\n@@ -343,1 +350,1 @@\n-        default void clean() {\n+        default T clean() {\n@@ -345,1 +352,1 @@\n-            create();\n+            return create();\n@@ -371,0 +378,1 @@\n+\n@@ -449,0 +457,1 @@\n+\n@@ -462,3 +471,3 @@\n-        public Stream<DirEntry> subDirs(Predicate<DirEntry> predicate) {\n-            return subDirs().filter(predicate);\n-        }\n+       \/\/ public Stream<DirEntry> subDirs(Predicate<DirEntry> predicate) {\n+        \/\/    return subDirs().filter(predicate);\n+       \/\/ }\n@@ -478,3 +487,10 @@\n-    public record SourcePathEntry(Path path) implements DirPathHolder<SourcePathEntry> {\n-        public static SourcePathEntry of(Path path) {\n-            return new SourcePathEntry(path);\n+    public interface SourcePathEntryProvider {\n+        List<SourcePathEntry> sourcePathEntries();\n+    }\n+\n+    public sealed interface SourcePathEntry extends PathHolder, SourcePathEntryProvider {\n+    }\n+\n+    public record SourceDir(Path path) implements SourcePathEntry, DirPathHolder<SourceDir> {\n+        public static SourceDir of(Path path) {\n+            return new SourceDir(path);\n@@ -486,0 +502,5 @@\n+\n+        @Override\n+        public List<SourcePathEntry> sourcePathEntries() {\n+            return List.of(this);\n+        }\n@@ -502,1 +523,2 @@\n-        public ClassPathEntryProvider jarFiles(String ...names) {\n+\n+        public ClassPathEntryProvider jarFiles(String... names) {\n@@ -504,4 +526,1 @@\n-            Stream.of(names).forEach(name->\n-                classPath.add(JarFile.of(path().resolve(name))\n-                )\n-            );\n+            Stream.of(names).forEach(name -> classPath.add(JarFile.of(path().resolve(name))));\n@@ -529,0 +548,1 @@\n+\n@@ -566,0 +586,1 @@\n+\n@@ -592,1 +613,1 @@\n-    public record FileEntry(Path path) implements FilePathHolder{\n+    public record FileEntry(Path path) implements FilePathHolder {\n@@ -598,1 +619,1 @@\n-    public record JarFile(Path path) implements ClassPathEntry,FilePathHolder {\n+    public record JarFile(Path path) implements ClassPathEntry, FilePathHolder {\n@@ -623,2 +644,0 @@\n-\n-\n@@ -657,2 +676,2 @@\n-            super(path.toUri(), JavaFileObject.Kind.SOURCE);\n-            this.path=path;\n+            super(path.toUri(), Kind.SOURCE);\n+            this.path = path;\n@@ -768,1 +787,1 @@\n-    public record Java(String version, DirEntry home) {\n+    public record Java(String version, DirEntry home, int specVersion) {\n@@ -772,1 +791,5 @@\n-            new Java(System.getProperty(\"java.version\"), DirEntry.of(System.getProperty(\"java.home\")));\n+            new Java(\n+                    System.getProperty(\"java.version\"),\n+                    DirEntry.of(System.getProperty(\"java.home\")),\n+                    Integer.parseInt(System.getProperty(\"java.specification.version\"))\n+            );\n@@ -785,0 +808,1 @@\n+\n@@ -790,1 +814,1 @@\n-        public T copy(T other){\n+        protected T dontCallThisCopy(T other) {\n@@ -795,0 +819,1 @@\n+\n@@ -804,0 +829,1 @@\n+\n@@ -844,1 +870,1 @@\n-        Builder(Builder<?> parent){\n+        Builder(Builder<?> parent) {\n@@ -847,1 +873,2 @@\n-        Builder(){\n+\n+        Builder() {\n@@ -850,0 +877,24 @@\n+\n+        public T mac(Consumer<OS.Mac> macConsumer) {\n+            if (Bldr.os instanceof OS.Mac mac) {\n+                macConsumer.accept(mac);\n+            }\n+            return self();\n+        }\n+\n+        public T linux(Consumer<OS.Linux> linuxConsumer) {\n+            if (Bldr.os instanceof OS.Linux linux) {\n+                linuxConsumer.accept(linux);\n+            }\n+            return self();\n+        }\n+\n+        public T os(Consumer<OS.Mac> macConsumer, Consumer<OS.Linux> linuxConsumer) {\n+            switch (Bldr.os) {\n+                case OS.Linux linux -> linuxConsumer.accept(linux);\n+                case OS.Mac mac -> macConsumer.accept(mac);\n+                default -> throw new IllegalStateException(\"Unexpected value: \" + Bldr.os);\n+            }\n+            ;\n+            return self();\n+        }\n@@ -855,1 +906,2 @@\n-        Result(T builder){\n+\n+        Result(T builder) {\n@@ -862,1 +914,0 @@\n-        Strings(){\n@@ -864,0 +915,1 @@\n+        Strings() {\n@@ -865,1 +917,2 @@\n-        Strings(Strings strings){\n+\n+        Strings(Strings strings) {\n@@ -868,1 +921,2 @@\n-        Strings(List<String> strings){\n+\n+        Strings(List<String> strings) {\n@@ -872,1 +926,1 @@\n-        Strings(String ... strings){\n+        Strings(String... strings) {\n@@ -891,1 +945,1 @@\n-        public String spaceSeperated() {\n+        public String spaceSeparated() {\n@@ -893,1 +947,1 @@\n-            strings.forEach(opt->stringBuilder.append(stringBuilder.isEmpty()?\"\":\" \").append(opt));\n+            strings.forEach(opt -> stringBuilder.append(stringBuilder.isEmpty() ? \"\" : \" \").append(opt));\n@@ -899,1 +953,1 @@\n-    public static sealed  class JavaOpts<T extends JavaOpts<T>> extends Builder<T> {\n+    public static sealed class JavaOpts<T extends JavaOpts<T>> extends Builder<T> {\n@@ -902,2 +956,5 @@\n-        public Strings modules ;\n-        record FromModulePackageToModule(String fromModule, String pkg, String toModule){}\n+        public Strings modules;\n+\n+        record FromModulePackageToModule(String fromModule, String pkg, String toModule) {\n+        }\n+\n@@ -906,2 +963,2 @@\n-        public T copy(T other){\n-            super.copy(other);\n+        protected T dontCallThisCopy(T other) {\n+            super.dontCallThisCopy(other);\n@@ -912,1 +969,1 @@\n-                this.enablePreview=other.enablePreview;\n+                this.enablePreview = other.enablePreview;\n@@ -915,1 +972,1 @@\n-               this.modules = new Strings(other.modules);\n+                this.modules = new Strings(other.modules);\n@@ -927,0 +984,1 @@\n+\n@@ -941,5 +999,5 @@\n-             if (this.exports == null){\n-                 this.exports = new ArrayList<>();\n-             }\n-             exports.add(new FromModulePackageToModule(fromModule, pkg, toModule));\n-             return self();\n+            if (this.exports == null) {\n+                this.exports = new ArrayList<>();\n+            }\n+            exports.add(new FromModulePackageToModule(fromModule, pkg, toModule));\n+            return self();\n@@ -949,1 +1007,1 @@\n-            if (this.modules == null){\n+            if (this.modules == null) {\n@@ -963,0 +1021,8 @@\n+        public T add_exports(String fromModule, String[] packages, String toModule) {\n+            return add_exports(fromModule, Arrays.asList(packages), toModule);\n+        }\n+\n+        public T add_exports_to_all_unnamed(String fromModule, String... packages) {\n+            return add_exports(fromModule, Arrays.asList(packages), \"ALL-UNNAMED\");\n+        }\n+\n@@ -969,1 +1035,0 @@\n-\n@@ -972,1 +1037,1 @@\n-    public abstract sealed static class JavaToolBuilder<T extends JavaToolBuilder<T>> extends JavaOpts<T> permits JavacBuilder,JavaBuilder{\n+    public abstract sealed static class JavaToolBuilder<T extends JavaToolBuilder<T>> extends JavaOpts<T> permits JavacBuilder, JavaBuilder {\n@@ -974,2 +1039,3 @@\n-        public T copy(T other){\n-            super.copy(other);\n+\n+        protected T dontCallThisCopy(T other) {\n+            super.dontCallThisCopy(other);\n@@ -981,0 +1047,1 @@\n+\n@@ -984,0 +1051,1 @@\n+\n@@ -1005,3 +1073,5 @@\n-        public JavacBuilder copy(JavacBuilder other){\n-            super.copy(other);\n-            if (other.mavenStyleRoot != null){\n+        public List<Predicate<JavaSourceFile>> exclusionFilters;\n+\n+        protected JavacBuilder dontCallThisCopy(JavacBuilder other) {\n+            super.dontCallThisCopy(other);\n+            if (other.mavenStyleRoot != null) {\n@@ -1010,1 +1080,1 @@\n-            if (other.sourcePath != null){\n+            if (other.sourcePath != null) {\n@@ -1013,1 +1083,1 @@\n-            if (other.moduleSourcePath != null){\n+            if (other.moduleSourcePath != null) {\n@@ -1017,1 +1087,1 @@\n-            if (other.source !=null){\n+            if (other.source != null) {\n@@ -1021,1 +1091,1 @@\n-            if (other.classPath != null){\n+            if (other.classPath != null) {\n@@ -1026,0 +1096,1 @@\n+\n@@ -1027,2 +1098,6 @@\n-             this.source = version;\n-             return self();\n+            this.source = version;\n+            return self();\n+        }\n+\n+        public JavacBuilder current_source() {\n+            return source(Bldr.java.specVersion);\n@@ -1046,1 +1121,6 @@\n-        public JavacBuilder source_path(List<SourcePathEntry> sourcePaths) {\n+        public JavacBuilder d(ClassDir classDir) {\n+            this.classDir = classDir;\n+            return this;\n+        }\n+\n+        public JavacBuilder source_path(List<SourceDir> sourcePaths) {\n@@ -1051,1 +1131,1 @@\n-        public JavacBuilder source_path(SourcePathEntry... sourcePathEntries) {\n+        public JavacBuilder source_path(SourceDir... sourcePathEntries) {\n@@ -1059,1 +1139,1 @@\n-        public JavacBuilder module_source_path(List<SourcePathEntry> moduleSourcePathEntries) {\n+        public JavacBuilder module_source_path(List<SourceDir> moduleSourcePathEntries) {\n@@ -1064,1 +1144,1 @@\n-        public JavacBuilder module_source_path(SourcePathEntry... moduleSourcePathEntries) {\n+        public JavacBuilder module_source_path(SourceDir... moduleSourcePathEntries) {\n@@ -1072,1 +1152,1 @@\n-        public JavacBuilder(){\n+        public JavacBuilder() {\n@@ -1075,0 +1155,1 @@\n+\n@@ -1078,0 +1159,6 @@\n+\n+        public JavacBuilder exclude(Predicate<JavaSourceFile> javaSourceFileFilter) {\n+            this.exclusionFilters = (this.exclusionFilters == null ? new ArrayList<>() : this.exclusionFilters);\n+            this.exclusionFilters.add(javaSourceFileFilter);\n+            return self();\n+        }\n@@ -1080,1 +1167,1 @@\n-    public static final class JavacResult extends Result<JavacBuilder>{\n+    public static final class JavacResult extends Result<JavacBuilder> {\n@@ -1084,1 +1171,2 @@\n-        ClassDir classDir;\n+        public ClassDir classDir;\n+\n@@ -1094,1 +1182,1 @@\n-            if (javacBuilder.source != null){\n+            if (javacBuilder.source != null) {\n@@ -1098,1 +1186,1 @@\n-            if (javacBuilder.enablePreview!=null && javacBuilder.enablePreview){\n+            if (javacBuilder.enablePreview != null && javacBuilder.enablePreview) {\n@@ -1101,3 +1189,3 @@\n-            if (javacBuilder.modules!=null){\n-                javacBuilder.modules.strings.forEach(module->\n-                    result.opts.add(\"--add-modules\", module)\n+            if (javacBuilder.modules != null) {\n+                javacBuilder.modules.strings.forEach(module ->\n+                        result.opts.add(\"--add-modules\", module)\n@@ -1107,2 +1195,2 @@\n-            if (javacBuilder.exports!=null){\n-                javacBuilder.exports.forEach(fpt->{\n+            if (javacBuilder.exports != null) {\n+                javacBuilder.exports.forEach(fpt -> {\n@@ -1117,2 +1205,2 @@\n-            }else if (javacBuilder.modulePath != null){\n-            \/\/https:\/\/dev.java\/learn\/modules\/building\/\n+            } else if (javacBuilder.modulePath != null) {\n+                \/\/https:\/\/dev.java\/learn\/modules\/building\/\n@@ -1120,2 +1208,2 @@\n-            }else{\n-               \/\/ println(\"Warning no class path or module path \");\n+            } else {\n+                \/\/ println(\"Warning no class path or module path \");\n@@ -1126,2 +1214,2 @@\n-                        ?fromJarBuilder\n-                        :javacBuilder.mavenStyleRoot;\n+                            ? fromJarBuilder\n+                            : javacBuilder.mavenStyleRoot;\n@@ -1140,2 +1228,2 @@\n-            }else{\n-                var sourcePath = SourcePath.of().add(SourcePathEntry.of(mavenStyleRoot.path.resolve(\"src\/main\/java\")));\n+            } else {\n+                var sourcePath = SourcePath.of().add(SourceDir.of(mavenStyleRoot.path.resolve(\"src\/main\/java\")));\n@@ -1143,0 +1231,3 @@\n+                if (result.sourceFiles.isEmpty()) {\n+                    throw new RuntimeException(\"No sources\");\n+                }\n@@ -1145,2 +1236,2 @@\n-                if (javacBuilder.sourcePath != null && !javacBuilder.sourcePath.entries.isEmpty()){\n-                   throw new RuntimeException(\"You have specified --source-path AND provided maven_style_root \");\n+                if (javacBuilder.sourcePath != null && !javacBuilder.sourcePath.entries.isEmpty()) {\n+                    throw new RuntimeException(\"You have specified --source-path AND provided maven_style_root \");\n@@ -1149,0 +1240,1 @@\n+            boolean[] failed = {false};\n@@ -1152,0 +1244,3 @@\n+                        if (diagnostic.getKind().equals(Diagnostic.Kind.ERROR)) {\n+                            failed[0] = true;\n+                        }\n@@ -1155,8 +1250,8 @@\n-                                            + \" \"\n-                                            +((JavaSourceFile)(diagnostic.getSource())).path().toString()\n-                                            +\"  \"\n-                                            + diagnostic.getLineNumber()\n-                                            + \":\"\n-                                            + diagnostic.getColumnNumber()\n-                                            + \" \"\n-                                            + diagnostic.getMessage(null));\n+                                    + \" \"\n+                                    + ((JavaSourceFile) (diagnostic.getSource())).path().toString()\n+                                    + \"  \"\n+                                    + diagnostic.getLineNumber()\n+                                    + \":\"\n+                                    + diagnostic.getColumnNumber()\n+                                    + \" \"\n+                                    + diagnostic.getMessage(null));\n@@ -1166,3 +1261,13 @@\n-            JavaCompiler javac = javax.tools.ToolProvider.getSystemJavaCompiler();\n-             if (javacBuilder.verbose  || javacBuilder.parent instanceof JarBuilder jarBuilder && jarBuilder.verbose) {\n-                println(\"javac \"+result.opts.spaceSeperated());\n+            JavaCompiler javac = ToolProvider.getSystemJavaCompiler();\n+            if (javacBuilder.exclusionFilters != null) {\n+                javacBuilder.exclusionFilters.forEach(p -> {\n+                    result.sourceFiles = result.sourceFiles.stream().filter(\n+                            javaSourceFile -> {\n+                                var kill = p.test(javaSourceFile);\n+                                if (kill) {\n+                                    println(\"Excluded \" + javaSourceFile);\n+                                }\n+                                return !kill;\n+                            }\n+                    ).toList();\n+                });\n@@ -1170,1 +1275,6 @@\n-             JavaCompiler.CompilationTask compilationTask =\n+            if (javacBuilder.verbose || javacBuilder.parent instanceof JarBuilder jarBuilder && jarBuilder.verbose) {\n+                print(\"javac \" + result.opts.spaceSeparated());\n+                result.sourceFiles.forEach(s -> print(s + \" \"));\n+                println(\"\");\n+            }\n+            JavaCompiler.CompilationTask compilationTask =\n@@ -1179,1 +1289,3 @@\n-            ((com.sun.source.util.JavacTask) compilationTask).generate().forEach(javaFileObject -> {\n+            JavacTask javacTask = (JavacTask) compilationTask;\n+\n+            javacTask.generate().forEach(javaFileObject -> {\n@@ -1182,0 +1294,3 @@\n+            if (failed[0]) {\n+                throw new RuntimeException(\"javac failed\");\n+            }\n@@ -1187,2 +1302,3 @@\n-    public static JavacBuilder javacBuilder(Consumer<JavacBuilder> javacBuilderConsumer){\n-        JavacBuilder javacBuilder= new JavacBuilder();\n+\n+    public static JavacBuilder javacBuilder(Consumer<JavacBuilder> javacBuilderConsumer) {\n+        JavacBuilder javacBuilder = new JavacBuilder();\n@@ -1192,0 +1308,1 @@\n+\n@@ -1206,1 +1323,5 @@\n-             return self();\n+            return self();\n+        }\n+\n+        public JavaBuilder enable_native_access_to_all_unnamed() {\n+            return enable_native_access(\"ALL-UNNAMED\");\n@@ -1239,1 +1360,1 @@\n-            this.startOnFirstThread =   true;\n+            this.startOnFirstThread = true;\n@@ -1248,1 +1369,1 @@\n-    public static final class JavaResult extends Result<JavaBuilder>{\n+    public static final class JavaResult extends Result<JavaBuilder> {\n@@ -1250,0 +1371,1 @@\n+\n@@ -1258,1 +1380,1 @@\n-        if (javaBuilder.enablePreview != null && javaBuilder.enablePreview){\n+        if (javaBuilder.enablePreview != null && javaBuilder.enablePreview) {\n@@ -1261,2 +1383,2 @@\n-        if (javaBuilder.modules!=null){\n-            javaBuilder.modules.strings.forEach(module->\n+        if (javaBuilder.modules != null) {\n+            javaBuilder.modules.strings.forEach(module ->\n@@ -1267,2 +1389,2 @@\n-        if (javaBuilder.exports!=null){\n-            javaBuilder.exports.forEach(fpt->{\n+        if (javaBuilder.exports != null) {\n+            javaBuilder.exports.forEach(fpt -> {\n@@ -1275,1 +1397,1 @@\n-        if (javaBuilder.startOnFirstThread){\n+        if (javaBuilder.startOnFirstThread) {\n@@ -1279,2 +1401,2 @@\n-        javaBuilder.nativeAccessModules.strings.forEach(module->\n-            result.opts.add(\"--enable-native-access=\" + module)\n+        javaBuilder.nativeAccessModules.strings.forEach(module ->\n+                result.opts.add(\"--enable-native-access=\" + module)\n@@ -1296,1 +1418,1 @@\n-                println(result.opts.spaceSeperated());\n+                println(result.opts.spaceSeparated());\n@@ -1317,1 +1439,1 @@\n-        public Bldr.SourcePath sourcePath;\n+        public SourcePath sourcePath;\n@@ -1319,2 +1441,2 @@\n-        public FormatBuilder source_path(List<Bldr.SourcePathEntry> sourcePaths) {\n-            this.sourcePath = Bldr.SourcePath.ofOrUse(this.sourcePath).add(sourcePaths);\n+        public FormatBuilder source_path(List<SourceDir> sourcePaths) {\n+            this.sourcePath = SourcePath.ofOrUse(this.sourcePath).add(sourcePaths);\n@@ -1324,1 +1446,1 @@\n-        public FormatBuilder source_path(Bldr.SourcePathEntry... sourcePaths) {\n+        public FormatBuilder source_path(SourceDir... sourcePaths) {\n@@ -1357,2 +1479,2 @@\n-        public Bldr.SourcePath sourcePath;\n-        public Bldr.ClassPath classPath;\n+        public SourcePath sourcePath;\n+        public ClassPath classPath;\n@@ -1362,2 +1484,2 @@\n-        public TestNGBuilder class_path(List<Bldr.ClassPathEntryProvider> classPathEntryProviders) {\n-            this.classPath = Bldr.ClassPath.ofOrUse(this.classPath).add(classPathEntryProviders);\n+        public TestNGBuilder class_path(List<ClassPathEntryProvider> classPathEntryProviders) {\n+            this.classPath = ClassPath.ofOrUse(this.classPath).add(classPathEntryProviders);\n@@ -1367,1 +1489,1 @@\n-        public TestNGBuilder class_path(Bldr.ClassPathEntryProvider... classPathEntryProviders) {\n+        public TestNGBuilder class_path(ClassPathEntryProvider... classPathEntryProviders) {\n@@ -1372,2 +1494,2 @@\n-        public TestNGBuilder source_path(List<Bldr.SourcePathEntry> sourcePathEntries) {\n-            this.sourcePath = Bldr.SourcePath.ofOrUse(this.sourcePath).add(sourcePathEntries);\n+        public TestNGBuilder source_path(List<SourceDir> sourcePathEntries) {\n+            this.sourcePath = SourcePath.ofOrUse(this.sourcePath).add(sourcePathEntries);\n@@ -1377,1 +1499,1 @@\n-        public TestNGBuilder source_path(Bldr.SourcePathEntry... sourcePathEntries) {\n+        public TestNGBuilder source_path(SourceDir... sourcePathEntries) {\n@@ -1459,1 +1581,3 @@\n-        TestNGSuiteFile testNGSuiteFile = Bldr.TestNGSuiteFile.containing(text);\n+        println(text);\n+\n+        TestNGSuiteFile testNGSuiteFile = TestNGSuiteFile.containing(text);\n@@ -1464,3 +1588,3 @@\n-                jar(jar->jar\n-                        .jar(testNGBuilder.testJar)\n-                        .javac(javac->javac\n+                jar(jar -> jar\n+                        .jarFile(testNGBuilder.testJar)\n+                        .javac(javac -> javac\n@@ -1468,3 +1592,3 @@\n-                                                        .enable_preview()\n-                                                        .class_path(testNGBuilder.classPath, mavenJars)\n-                                                        .source_path(testNGBuilder.sourcePath)\n+                                .enable_preview()\n+                                .class_path(testNGBuilder.classPath, mavenJars)\n+                                .source_path(testNGBuilder.sourcePath)\n@@ -1477,1 +1601,1 @@\n-                                .add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n+                                .add_exports_to_all_unnamed(\"java.base\", \"jdk.internal\")\n@@ -1485,1 +1609,1 @@\n-        public static class Manifest{\n+        public static class Manifest {\n@@ -1487,1 +1611,1 @@\n-            public String classPath;\n+            public String[] classPath;\n@@ -1491,0 +1615,19 @@\n+\n+            public void writeTo(JarOutputStream jarStream) {\n+                PrintWriter printWriter = new PrintWriter(jarStream);\n+                if (version != null) {\n+                    printWriter.println(\"Manifest-Version: \" + version);\n+                }\n+                if (mainClass != null) {\n+                    printWriter.println(\"Main-Class: \" + mainClass);\n+                }\n+                if (classPath != null) {\n+                    printWriter.print(\"Class-Path:\");\n+                    for (String s : classPath) {\n+                        printWriter.print(\" \");\n+                        printWriter.print(s);\n+                    }\n+                    printWriter.println();\n+                }\n+                printWriter.flush();\n+            }\n@@ -1492,1 +1635,2 @@\n-        public static final class ManifestBuilder extends Builder<ManifestBuilder>{\n+\n+        public static final class ManifestBuilder extends Builder<ManifestBuilder> {\n@@ -1496,1 +1640,1 @@\n-            public ManifestBuilder main_class(String mainClass){\n+            public ManifestBuilder main_class(String mainClass) {\n@@ -1500,1 +1644,2 @@\n-            public ManifestBuilder version(String version){\n+\n+            public ManifestBuilder version(String version) {\n@@ -1504,1 +1649,2 @@\n-            public ManifestBuilder created_by(String createdBy){\n+\n+            public ManifestBuilder created_by(String createdBy) {\n@@ -1508,1 +1654,2 @@\n-            public ManifestBuilder build_by(String buildBy){\n+\n+            public ManifestBuilder build_by(String buildBy) {\n@@ -1512,1 +1659,2 @@\n-            public ManifestBuilder class_path(String classPath){\n+\n+            public ManifestBuilder class_path(String... classPath) {\n@@ -1517,1 +1665,6 @@\n-            ManifestBuilder(Manifest manifest){\n+            public ManifestBuilder class_path(ClassPathEntry... classPathEntries) {\n+                this.manifest.classPath = Stream.of(classPathEntries).map(classPathEntry -> classPathEntry.path().getFileName().toString()).toArray(String[]::new);\n+                return self();\n+            }\n+\n+            ManifestBuilder(Manifest manifest) {\n@@ -1521,0 +1674,1 @@\n+\n@@ -1525,1 +1679,1 @@\n-      \/\/  public String mainClass;\n+        \/\/  public String mainClass;\n@@ -1527,1 +1681,2 @@\n-        public JarBuilder jar(JarFile jar) {\n+\n+        public JarBuilder jarFile(JarFile jar) {\n@@ -1537,2 +1692,2 @@\n-        public JarBuilder manifest(Consumer<ManifestBuilder> manifestBuilderConsumer){\n-            this.manifest = this.manifest==null?new Manifest():this.manifest;\n+        public JarBuilder manifest(Consumer<ManifestBuilder> manifestBuilderConsumer) {\n+            this.manifest = this.manifest == null ? new Manifest() : this.manifest;\n@@ -1551,1 +1706,1 @@\n-            if (mavenStyleRoot!=null){\n+            if (mavenStyleRoot != null) {\n@@ -1560,2 +1715,9 @@\n-        public JavacBuilder javacBuilder(Consumer<JavacBuilder> javacBuilderConsumer){\n-            JavacBuilder javacBuilder= new JavacBuilder(this);\n+        public JavacBuilder javacBuilder(Consumer<JavacBuilder> javacBuilderConsumer) {\n+            JavacBuilder javacBuilder = new JavacBuilder(this);\n+            javacBuilderConsumer.accept(javacBuilder);\n+            return javacBuilder;\n+        }\n+\n+        public JavacBuilder javacBuilder(JavacBuilder copyMe, Consumer<JavacBuilder> javacBuilderConsumer) {\n+            JavacBuilder javacBuilder = new JavacBuilder(this);\n+            javacBuilder.dontCallThisCopy(copyMe);\n@@ -1570,2 +1732,17 @@\n-        public <P extends DirPathHolder<P>> JarBuilder dir_list(P holder) {\n-            this.dirList = DirPath.ofOrUse(this.dirList).add(holder);\n+        public JarBuilder javac(JavacBuilder copyMe, Consumer<JavacBuilder> javacBuilderConsumer) {\n+            return javac(javacBuilder(copyMe, javacBuilderConsumer));\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public <P extends DirPathHolder<P>> JarBuilder dir_list(P... holders) {\n+            Arrays.asList(holders).forEach(holder ->\n+                    this.dirList = DirPath.ofOrUse(this.dirList).add(holder)\n+            );\n+            return self();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public <P extends DirPathHolder<P>> JarBuilder add(P... holders) {\n+            Arrays.asList(holders).forEach(holder ->\n+                    this.dirList = DirPath.ofOrUse(this.dirList).add(holder)\n+            );\n@@ -1576,1 +1753,1 @@\n-    public static final class JarResult extends Result<JarBuilder> implements ClassPathEntryProvider{\n+    public static final class JarResult extends Result<JarBuilder> implements ClassPathEntryProvider {\n@@ -1581,1 +1758,2 @@\n-        public String mainClass;\n+\n+\n@@ -1592,1 +1770,2 @@\n-        @Override public String toString(){\n+        @Override\n+        public String toString() {\n@@ -1603,1 +1782,1 @@\n-            if (jarBuilder.dirList ==null){\n+            if (jarBuilder.dirList == null) {\n@@ -1606,0 +1785,10 @@\n+            if (jarBuilder.manifest != null) {\n+                \/\/ We must add manifest\n+                var entry = new JarEntry(\"META-INF\/MANIFEST.MF\");\n+                \/\/ entry.setTime(Files.getLastModifiedTime(rootAndPath.path()).toMillis());\n+\n+                jarStream.putNextEntry(entry);\n+                jarBuilder.manifest.writeTo(jarStream);\n+                jarStream.closeEntry();\n+\n+            }\n@@ -1622,2 +1811,2 @@\n-                                    if (jarBuilder.verbose){\n-                                        println(\"INFO: adding \"+rootAndPath.relativize().toString());\n+                                    if (jarBuilder.verbose) {\n+                                        println(\"INFO: adding \" + rootAndPath.relativize().toString());\n@@ -1631,2 +1820,2 @@\n-            if (jarBuilder.verbose){\n-                println(\"INFO: created \"+jarBuilder.jar.path.toString());\n+            if (jarBuilder.verbose) {\n+                println(\"INFO: created \" + jarBuilder.jar.path.toString());\n@@ -1640,2 +1829,9 @@\n-    public static JarBuilder jarBuilder(Consumer<JarBuilder> jarBuilderConsumer){\n-        JarBuilder jarBuilder= new JarBuilder();\n+    public static JarBuilder jarBuilder(Consumer<JarBuilder> jarBuilderConsumer) {\n+        JarBuilder jarBuilder = new JarBuilder();\n+        jarBuilderConsumer.accept(jarBuilder);\n+        return jarBuilder;\n+    }\n+\n+    public static JarBuilder jarBuilder(JarBuilder copyMe, Consumer<JarBuilder> jarBuilderConsumer) {\n+        JarBuilder jarBuilder = new JarBuilder();\n+        jarBuilder.dontCallThisCopy(copyMe);\n@@ -1650,0 +1846,4 @@\n+    public static JarResult jar(JarBuilder copyMe, Consumer<JarBuilder> jarBuilderConsumer) {\n+        return jar(jarBuilder(copyMe, jarBuilderConsumer));\n+    }\n+\n@@ -1745,0 +1945,1 @@\n+\n@@ -1750,0 +1951,1 @@\n+        private String headerClassName;\n@@ -1752,1 +1954,1 @@\n-        public JExtractBuilder copy(JExtractBuilder other){\n+        protected JExtractBuilder dontCallThisCopy(JExtractBuilder other) {\n@@ -1754,1 +1956,1 @@\n-            if (other.targetPackage != null){\n+            if (other.targetPackage != null) {\n@@ -1757,1 +1959,1 @@\n-            if (other.output != null){\n+            if (other.output != null) {\n@@ -1760,1 +1962,1 @@\n-            if (!other.libraries.isEmpty()){\n+            if (!other.libraries.isEmpty()) {\n@@ -1763,1 +1965,1 @@\n-            if (!other.headers.isEmpty()){\n+            if (!other.headers.isEmpty()) {\n@@ -1768,0 +1970,1 @@\n+\n@@ -1770,1 +1973,6 @@\n-            return  self();\n+            return self();\n+        }\n+\n+        public JExtractBuilder header_class_name(String headerClassName) {\n+            this.headerClassName = headerClassName;\n+            return self();\n@@ -1775,1 +1983,1 @@\n-            return  self();\n+            return self();\n@@ -1780,1 +1988,1 @@\n-            return  self();\n+            return self();\n@@ -1785,1 +1993,1 @@\n-            return  self();\n+            return self();\n@@ -1790,1 +1998,7 @@\n-            return  self();\n+            return self();\n+        }\n+\n+        public JExtractBuilder capability(Capabilities.Jextractable jextractable, BuildDir stageDir) {\n+            return output(jextractable.stage(stageDir))\n+                    .target_package(jextractable.packageName())\n+                    .header_class_name(jextractable.headerClassName());\n@@ -1794,1 +2008,1 @@\n-    public static final class JExtractResult extends Result<JExtractBuilder>{\n+    public static final class JExtractResult extends Result<JExtractBuilder> {\n@@ -1796,0 +2010,1 @@\n+\n@@ -1801,0 +2016,5 @@\n+    public static JExtractResult jextract(Capabilities.JExtract jextract, Consumer<JExtractBuilder> jextractBuilderConsumer) {\n+      return jextract(JExtractExecutable.of(jextract.path()),jextractBuilderConsumer);\n+    }\n+\n+\n@@ -1822,0 +2042,4 @@\n+\n+        if (jExtractBuilder.headers.isEmpty()) {\n+            throw new RuntimeException(\"No headers specified\");\n+        }\n@@ -1823,0 +2047,6 @@\n+            if (jExtractBuilder.headerClassName != null) {\n+                result.opts.add(\"--header-class-name\", jExtractBuilder.headerClassName);\n+                System.out.println(\"header and class name: \" + header.toString() + \" with \" + jExtractBuilder.headerClassName);\n+            } else {\n+                System.out.println(\"header: \" + header.toString() + \" no header className\");\n+            }\n@@ -1826,0 +2056,1 @@\n+\n@@ -1831,1 +2062,1 @@\n-            println(result.opts.spaceSeperated());\n+            println(result.opts.spaceSeparated());\n@@ -1850,0 +2081,1 @@\n+\n@@ -2038,22 +2270,14 @@\n-                this.dir.cmakeLists(cmakeLists-> {\n-                        cmakeLists.append(\n-                             \"\"\"\n-                             cmake_minimum_required(VERSION 3.21)\n-                             project(cmakeprobe)\n-                             set(CMAKE_CXX_STANDARD 14)\n-                             \"\"\"\n-                        );\n-\n-                        capabilities.capabilities()\n-                                    .filter(capability -> capability instanceof Capabilities.CMakeCapability)\n-                                    .map(capability -> (Capabilities.CMakeCapability) capability)\n-                                    .forEach(p ->\n-                                            cmakeLists.append(p.probeStanza()).append(\"\\n\")\n-                                    );\n-                        cmakeLists.append(\n-                             \"\"\"\n-                             get_cmake_property(_variableNames VARIABLES ${VarNames})\n-                             foreach(VarName ${_variableNames})\n-                                 message(\"${VarName}={<{${${VarName}}}>}\")\n-                             endforeach()\n-                             \"\"\"\n+                this.dir.cmakeLists(cmakeLists -> {\n+                    cmakeLists.append(\n+                            \"\"\"\n+                                    cmake_minimum_required(VERSION 3.21)\n+                                    project(cmakeprobe)\n+                                    set(CMAKE_CXX_STANDARD 14)\n+                                    \"\"\"\n+                    );\n+\n+                    capabilities.capabilities()\n+                            .filter(capability -> capability instanceof Capabilities.CMakeProbeable)\n+                            .map(capability -> (Capabilities.CMakeProbeable) capability)\n+                            .forEach(p ->\n+                                    cmakeLists.append(p.cmakeStanza()).append(\"\\n\")\n@@ -2061,1 +2285,9 @@\n-                        });\n+                    cmakeLists.append(\n+                            \"\"\"\n+                                    get_cmake_property(_variableNames VARIABLES ${VarNames})\n+                                    foreach(VarName ${_variableNames})\n+                                        message(\"${VarName}={<{${${VarName}}}>}\")\n+                                    endforeach()\n+                                    \"\"\"\n+                    );\n+                });\n@@ -2074,3 +2306,3 @@\n-                this.dir.textFile(\"rawlines\", sb->{\n-                    stdinlines.forEach(line-> sb.append(line).append(\"\\n\"));\n-                   \/\/ stderrlines.forEach(line-> sb.append(\"ERR\").append(line).append(\"\\n\"));\n+                this.dir.textFile(\"rawlines\", sb -> {\n+                    stdinlines.forEach(line -> sb.append(line).append(\"\\n\"));\n+                    \/\/ stderrlines.forEach(line-> sb.append(\"ERR\").append(line).append(\"\\n\"));\n@@ -2138,1 +2370,1 @@\n-                                  \/\/  println(\"Skipping duplicate variable name different value: \" + v + theVar);\n+                                    \/\/  println(\"Skipping duplicate variable name different value: \" + v + theVar);\n@@ -2149,1 +2381,1 @@\n-                            var v =  new CMakeSimpleVar(matcher);\n+                            var v = new CMakeSimpleVar(matcher);\n@@ -2153,1 +2385,1 @@\n-                                   \/\/ println(\"Skipping duplicate variable name different value: \" + v + theVar);\n+                                    \/\/ println(\"Skipping duplicate variable name different value: \" + v + theVar);\n@@ -2156,1 +2388,1 @@\n-                                      \/\/      \"Duplicate variable name different vars: \" + v + theVar);\n+                                    \/\/      \"Duplicate variable name different vars: \" + v + theVar);\n@@ -2163,1 +2395,1 @@\n-                           \/\/ println(\"Skipping \" + line);\n+                            \/\/ println(\"Skipping \" + line);\n@@ -2173,2 +2405,2 @@\n-            this.dir.textFile(\"vars\", sb-> {\n-                varMap.values().forEach(v->sb.append(v.name()).append(\"<{<\").append(v.value().toString()).append(\">}>\").append(\"\\n\"));\n+            this.dir.textFile(\"vars\", sb -> {\n+                varMap.values().forEach(v -> sb.append(v.name()).append(\"<{<\").append(v.value().toString()).append(\">}>\").append(\"\\n\"));\n@@ -2179,3 +2411,3 @@\n-                    .filter(capability -> capability instanceof Capabilities.CMakeCapability)\n-                    .map(capability->(Capabilities.CMakeCapability)capability)\n-                    .forEach(capability -> capability.setCmakeProbe(this));\n+                    .filter(capability -> capability instanceof Capabilities.CMakeProbeable)\n+                    .map(capability -> (Capabilities.CMakeProbeable) capability)\n+                    .forEach(capability -> capability.accept(this));\n@@ -2220,1 +2452,1 @@\n-            var  v = varMap.get(key);\n+            var v = varMap.get(key);\n@@ -2224,1 +2456,1 @@\n-        public  boolean hasKey(String includeDirKey) {\n+        public boolean hasKey(String includeDirKey) {\n@@ -2230,0 +2462,4 @@\n+    public interface CapabilityHolder {\n+        Capabilities.Capability capability();\n+    }\n+\n@@ -2231,1 +2467,2 @@\n-        interface Probe{\n+\n+        interface Probe {\n@@ -2234,1 +2471,2 @@\n-        public static abstract class Capability {\n+\n+        public static abstract class Capability implements CapabilityHolder {\n@@ -2236,0 +2474,1 @@\n+\n@@ -2237,1 +2476,1 @@\n-                this.name=name;\n+                this.name = name;\n@@ -2239,0 +2478,5 @@\n+\n+            public String name() {\n+                return name;\n+            }\n+\n@@ -2241,0 +2485,7 @@\n+            @Override\n+            public Capability capability() {\n+                return this;\n+            }\n+        }\n+\n+        public interface CMakeProbeable extends Consumer<Bldr.CMakeProbe> {\n@@ -2242,0 +2493,2 @@\n+            \/\/ void setCmakeProbe(Bldr.CMakeProbe cmakeProbe);\n+            String cmakeStanza();\n@@ -2243,4 +2496,9 @@\n-        public static abstract class CMakeCapability extends Capability {\n-            CMakeProbe cmakeProbe;\n-            CMakeCapability(String name) {\n-                super(name);\n+\n+        public interface Jextractable {\n+\n+\n+            String name();\n+\n+\n+            default BuildDir stage(BuildDir stage) {\n+                return stage.buildDir(packageName() + \"_jextracted\");\n@@ -2248,2 +2506,13 @@\n-            public  void setCmakeProbe(CMakeProbe cmakeProbe){\n-                this.cmakeProbe = cmakeProbe;\n+\n+\n+            default String packageName() {\n+                return name().toLowerCase();\n+            }\n+\n+\n+            default String headerClassName() {\n+                return packageName() + \"_h\";\n+            }\n+\n+            default JarFile jarFile(BuildDir buildDir) {\n+                return buildDir.jarFile(packageName() + \".jar\");\n@@ -2251,1 +2520,0 @@\n-            public abstract String probeStanza();\n@@ -2256,2 +2524,2 @@\n-        public static Capabilities of(Capability... capabilities) {\n-            return new Capabilities(capabilities);\n+        public static Capabilities of(CapabilityHolder... capabilityHolders) {\n+            return new Capabilities(capabilityHolders);\n@@ -2263,0 +2531,1 @@\n+\n@@ -2268,1 +2537,1 @@\n-            return capabilities().anyMatch(c-> c.name.equalsIgnoreCase(name));\n+            return capabilities().anyMatch(c -> c.name.equalsIgnoreCase(name));\n@@ -2271,3 +2540,3 @@\n-        private Capabilities(Capability... capabilities){\n-            List.of(capabilities).forEach(capability ->\n-                    capabilityMap.put(capability.name, capability)\n+        private Capabilities(CapabilityHolder... capabilityHolders) {\n+            List.of(capabilityHolders).forEach(capabilityHolder ->\n+                    capabilityMap.put(capabilityHolder.capability().name, capabilityHolder.capability())\n@@ -2278,3 +2547,4 @@\n-        public static class OpenCL extends CMakeCapability {\n-            public static String includeDirKey  = \"CMAKE_OpenCL_INCLUDE_DIR\";\n-            public static String libKey  = \"CMAKE_OpenCL_LIBRARY\";\n+        public static final class OpenCL extends Capability implements CMakeProbeable, Jextractable {\n+            public static String includeDirKey = \"CMAKE_OpenCL_INCLUDE_DIR\";\n+            public static String libKey = \"CMAKE_OpenCL_LIBRARY\";\n+            public static String foundKey = \"CMAKE_OPENCL_FOUND\";\n@@ -2282,0 +2552,1 @@\n+\n@@ -2285,1 +2556,2 @@\n-            public static OpenCL of(){\n+\n+            public static OpenCL of() {\n@@ -2288,0 +2560,1 @@\n+\n@@ -2289,1 +2562,1 @@\n-            public String probeStanza() {\n+            public String cmakeStanza() {\n@@ -2292,11 +2565,10 @@\n-                        find_package(OpenCL)\n-                        if(OPENCL_FOUND)\n-                            if (APPLE)\n-                               set(OPENCL_FRAMEWORK \"-framework OpenGL\")\n-                               set(OPENCL_INCLUDE_DIR \"-framework OpenCL\")\n-                               set(OPENCL_LIBRARY_DIR \"-framework OpenCL\")\n-                            else()\n-                               set(OPENCL_LIB \"OpenCL\")\n-                            endif()\n-                        endif()\n-                        \"\"\";\n+                                find_package(OpenCL)\n+                                if(OPENCL_FOUND)\n+                                    if (APPLE)\n+                                       set(OPENCL_INCLUDE_DIR \"-framework OpenCL\")\n+                                       set(OPENCL_LIBRARY_DIR \"-framework OpenCL\")\n+                                    else()\n+                                       set(OPENCL_LIB \"OpenCL\")\n+                                    endif()\n+                                endif()\n+                                \"\"\";\n@@ -2304,0 +2576,1 @@\n+\n@@ -2310,1 +2583,1 @@\n-                return cmakeProbe.hasKey(includeDirKey);\n+                return cmakeProbe.hasKey(foundKey) && cmakeProbe.value(foundKey).equals(\"TRUE\");\n@@ -2312,1 +2585,2 @@\n-            public String lib(){\n+\n+            public String lib() {\n@@ -2316,1 +2590,1 @@\n-            public String includeDir(){\n+            public String includeDir() {\n@@ -2319,0 +2593,9 @@\n+\n+            public Bldr.CMakeProbe cmakeProbe;\n+\n+            @Override\n+            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+                this.cmakeProbe = cmakeProbe;\n+            }\n+\n+\n@@ -2321,3 +2604,4 @@\n-        public static class OpenGL extends CMakeCapability {\n-            public static String includeDirKey  = \"CMAKE_OPENGL_INCLUDE_DIR\";\n-            public static String libKey  = \"CMAKE_OPENGL_LIBRARY\";\n+        public static final class OpenGL extends Capability implements CMakeProbeable, Jextractable {\n+            public static String glutIncludeDirKey = \"CMAKE_GLUT_INCLUDE_DIR\";\n+            public static String openGLIncludeDirKey = \"CMAKE_OPENGL_INCLUDE_DIR\";\n+            public static String libKey = \"CMAKE_OPENGL_LIBRARY\";\n@@ -2325,0 +2609,1 @@\n+\n@@ -2328,1 +2613,2 @@\n-            public static OpenGL of(){\n+\n+            public static OpenGL of() {\n@@ -2331,0 +2617,1 @@\n+\n@@ -2333,1 +2620,5 @@\n-                return cmakeProbe.hasKey(includeDirKey);\n+                return cmakeProbe.hasKey(openGLIncludeDirKey);\n+            }\n+\n+            public DirEntry openglIncludeDir() {\n+                return DirEntry.of(Path.of(cmakeProbe.value(openGLIncludeDirKey)) + \"\/Headers\");\n@@ -2335,2 +2626,4 @@\n-            DirEntry includeDir(){\n-                return DirEntry.of(Path.of(cmakeProbe.value(includeDirKey)));\n+\n+            public DirEntry glutIncludeDir() {\n+                return DirEntry.of(\"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX14.0.sdk\/System\/Library\/Frameworks\/GLUT.framework\/Headers\");\n+                \/\/ return DirEntry.of(Path.of(cmakeProbe.value(glutIncludeDirKey))+\"\/Headers\");\n@@ -2342,3 +2635,0 @@\n-           \/\/ public Path frameworkLibrary(String frameworkName) {\n-           \/\/     return Path.of(appLibFrameworks()).resolve(frameworkName + \".framework\/\" + frameworkName);\n-          \/\/  }\n@@ -2346,1 +2636,8 @@\n-            public Path lib(String frameworkName ) {\n+            \/\/ public Path frameworkLibrary(String frameworkName) {\n+            \/\/     return Path.of(appLibFrameworks()).resolve(frameworkName + \".framework\/\" + frameworkName);\n+            \/\/  }\n+            public String lib() {\n+                return cmakeProbe.value(libKey);\n+            }\n+\n+            public Path lib(String frameworkName) {\n@@ -2349,0 +2646,1 @@\n+\n@@ -2350,1 +2648,1 @@\n-            public String probeStanza() {\n+            public String cmakeStanza() {\n@@ -2353,11 +2651,11 @@\n-                        find_package(OpenGL)\n-                        if(OPENGL_FOUND)\n-                            if (APPLE)\n-                               set(OPENGL_FRAMEWORK \"-framework OpenGL\")\n-                            else()\n-                               set(OPENCL_LIB \"OpenCL\")\n-                            endif()\n-                        else()\n-                            message(\"NO OPENGL FOUND\")\n-                        endif()\n-                        \"\"\";\n+                                find_package(OpenGL)\n+                                if(OPENGL_FOUND)\n+                                    if (APPLE)\n+                                       set(OPENGL_FRAMEWORK \"-framework OpenGL\")\n+                                    else()\n+                                       set(OPENCL_LIB \"OpenCL\")\n+                                    endif()\n+                                else()\n+                                    message(\"NO OPENGL FOUND\")\n+                                endif()\n+                                \"\"\";\n@@ -2366,0 +2664,17 @@\n+            public Bldr.CMakeProbe cmakeProbe;\n+\n+            @Override\n+            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+\n+                this.cmakeProbe = cmakeProbe;\n+\/*\n+                cmakeProbe.varMap.forEach((k, v) -> {\n+                    if (k.toUpperCase().contains(\"OPENGL\")) {\n+                        println(k);\n+                    }\n+                    if (k.toUpperCase().contains(\"GLUT\")) {\n+                        println(k);\n+                    }\n+                }); *\/\n+\n+            }\n@@ -2368,1 +2683,1 @@\n-        public static class HIP extends CMakeCapability {\n+        public static final class HIP extends Capability implements CMakeProbeable, Jextractable {\n@@ -2372,1 +2687,2 @@\n-            public static HIP of(){\n+\n+            public static HIP of() {\n@@ -2375,0 +2691,1 @@\n+\n@@ -2379,0 +2696,1 @@\n+\n@@ -2380,1 +2698,1 @@\n-            public String probeStanza() {\n+            public String cmakeStanza() {\n@@ -2383,2 +2701,2 @@\n-                        find_package(HIP)\n-                        if(HIP_FOUND)\n+                                find_package(HIP)\n+                                if(HIP_FOUND)\n@@ -2386,4 +2704,12 @@\n-                        else()\n-                            message(\"NO HIP FOUND\")\n-                        endif()\n-                        \"\"\";\n+                                else()\n+                                    message(\"NO HIP FOUND\")\n+                                endif()\n+                                \"\"\";\n+            }\n+\n+            public Bldr.CMakeProbe cmakeProbe;\n+\n+            @Override\n+            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+\n+                this.cmakeProbe = cmakeProbe;\n@@ -2393,3 +2719,5 @@\n-        public static class CUDA extends CMakeCapability {\n-            public static String sdkRootDirKey  = \"CMAKE_CUDA_SDK_ROOT_DIR\";\n-            public static String sdkRootDirNotFoundValue  = \"CUDA_SDK_ROOT_DIR-NOTFOUND\";\n+\n+        public static final class CUDA extends Capability implements CMakeProbeable, Jextractable {\n+            public static String sdkRootDirKey = \"CMAKE_CUDA_SDK_ROOT_DIR\";\n+            public static String sdkRootDirNotFoundValue = \"CUDA_SDK_ROOT_DIR-NOTFOUND\";\n+\n@@ -2399,1 +2727,2 @@\n-            public static CUDA of(){\n+\n+            public static CUDA of() {\n@@ -2402,0 +2731,1 @@\n+\n@@ -2406,0 +2736,1 @@\n+\n@@ -2407,1 +2738,1 @@\n-            public String probeStanza() {\n+            public String cmakeStanza() {\n@@ -2410,10 +2741,17 @@\n-                        find_package(CUDAToolkit)\n-                        if(CUDAToolkit_FOUND)\n-                            set(CUDA_FOUND true)\n-                            set(CUDA_INCLUDE_DIR ${CUDAToolkit_INCLUDE_DIR})\n-                            set(CUDA_LIBRARY_DIR ${CUDAToolkit_LIBRARY_DIR})\n-                            set(CUDA_LIBRARIES \"-lcudart -lcuda\")\n-                        else()\n-                            message(\"NO CUDA FOUND\")\n-                        endif()\n-                        \"\"\";\n+                                find_package(CUDAToolkit)\n+                                if(CUDAToolkit_FOUND)\n+                                    set(CUDA_FOUND true)\n+                                    set(CUDA_INCLUDE_DIR ${CUDAToolkit_INCLUDE_DIR})\n+                                    set(CUDA_LIBRARY_DIR ${CUDAToolkit_LIBRARY_DIR})\n+                                    set(CUDA_LIBRARIES \"-lcudart -lcuda\")\n+                                else()\n+                                    message(\"NO CUDA FOUND\")\n+                                endif()\n+                                \"\"\";\n+            }\n+\n+            public Bldr.CMakeProbe cmakeProbe;\n+\n+            @Override\n+            public void accept(Bldr.CMakeProbe cmakeProbe) {\n+                this.cmakeProbe = cmakeProbe;\n@@ -2424,3 +2762,4 @@\n-        public static class JExtract extends Bldr.Capabilities.Capability{\n-            public Bldr.JExtractExecutable executable;\n-            JExtract(){\n+        public static final class JExtract extends Capability implements Executable {\n+            public JExtractExecutable executable;\n+\n+            JExtract() {\n@@ -2428,5 +2767,5 @@\n-                var  optionalExe = fromPATH(\"jextract\");\n-                if (optionalExe.isEmpty()){\n-                    println(\"jextract not in path\");\n-                }else{\n-                    executable = Bldr.JExtractExecutable.of(optionalExe.get());\n+                var optionalExe = fromPATH(\"jextract\");\n+                if (optionalExe.isEmpty()) {\n+                    \/\/  println(\"jextract not in path\");\n+                } else {\n+                    executable = JExtractExecutable.of(optionalExe.get());\n@@ -2436,0 +2775,6 @@\n+\n+            JExtract(Path executable) {\n+                super(\"JExtract\");\n+                this.executable = JExtractExecutable.of(executable);\n+            }\n+\n@@ -2441,1 +2786,1 @@\n-            public static JExtract of(){\n+            public static JExtract of() {\n@@ -2445,0 +2790,9 @@\n+            public static JExtract of(Path executable) {\n+                return new JExtract(executable);\n+            }\n+\n+\n+            @Override\n+            public Path path() {\n+                return executable.path;\n+            }\n@@ -2447,2 +2801,2 @@\n-        public static class CMake extends Bldr.Capabilities.Capability{\n-            public Bldr.JExtractExecutable executable;\n+        public static final class CMake extends Capability implements Executable {\n+            public JExtractExecutable executable;\n@@ -2450,1 +2804,2 @@\n-            CMake(){\n+\n+            CMake() {\n@@ -2452,2 +2807,2 @@\n-                var  optionalExe = fromPATH(\"cmake\");\n-                if (optionalExe.isEmpty()){\n+                var optionalExe = fromPATH(\"cmake\");\n+                if (optionalExe.isEmpty()) {\n@@ -2455,2 +2810,2 @@\n-                }else{\n-                    executable = Bldr.JExtractExecutable.of(optionalExe.get());\n+                } else {\n+                    executable = JExtractExecutable.of(optionalExe.get());\n@@ -2458,1 +2813,0 @@\n-\n@@ -2460,0 +2814,1 @@\n+\n@@ -2465,1 +2820,1 @@\n-            public static CMake of(){\n+            public static CMake of() {\n@@ -2472,0 +2827,5 @@\n+\n+            @Override\n+            public Path path() {\n+                return executable.path();\n+            }\n@@ -2476,1 +2836,1 @@\n-    static record Regex(Pattern pattern) {\n+    public record Regex(Pattern pattern) {\n@@ -2496,1 +2856,1 @@\n-        org.w3c.dom.Element element;\n+        Element element;\n@@ -2501,1 +2861,2 @@\n-            final public org.w3c.dom.Element element;\n+            final public Element element;\n+\n@@ -2508,2 +2869,0 @@\n-                \/\/ var att = element.getOwnerDocument().createAttribute(name);\n-                \/\/ att.setValue(value);\n@@ -2511,1 +2870,0 @@\n-                \/\/ element.appendChild(att);\n@@ -2516,2 +2874,0 @@\n-                \/\/ var att = element.getOwnerDocument().createAttribute(name);\n-                \/\/ att.setValue(value);\n@@ -2519,1 +2875,0 @@\n-                \/\/ element.appendChild(att);\n@@ -2577,1 +2932,1 @@\n-        public static class PomXmlBuilder extends AbstractXMLBuilder<bldr.Bldr.XMLNode.PomXmlBuilder> {\n+        public static class PomXmlBuilder extends AbstractXMLBuilder<PomXmlBuilder> {\n@@ -2642,0 +2997,1 @@\n+\n@@ -2655,2 +3011,2 @@\n-                        \"3.11.0\",pomXmlBuilderConsumer\n-                      );\n+                        \"3.11.0\", pomXmlBuilderConsumer\n+                );\n@@ -2753,4 +3109,4 @@\n-                                        .id(id)\n-                                        .phase(phase)\n-                                        .goals(gs -> gs.goal(goal))\n-                                        .configuration(configuration -> configuration.target(pomXmlBuilderConsumer)));\n+                        .id(id)\n+                        .phase(phase)\n+                        .goals(gs -> gs.goal(goal))\n+                        .configuration(configuration -> configuration.target(pomXmlBuilderConsumer)));\n@@ -2790,0 +3146,1 @@\n+\n@@ -2810,0 +3167,1 @@\n+\n@@ -2813,0 +3171,1 @@\n+\n@@ -2824,0 +3183,1 @@\n+\n@@ -2849,1 +3209,1 @@\n-                return element(\"jar\", $ -> $.attr(\"basedir\", basedir).attr(\"includes\", include+\"\/**\").attr(\"destfile\", destfile));\n+                return element(\"jar\", $ -> $.attr(\"basedir\", basedir).attr(\"includes\", include + \"\/**\").attr(\"destfile\", destfile));\n@@ -2925,1 +3285,1 @@\n-        public static class ImlBuilder extends AbstractXMLBuilder<bldr.Bldr.XMLNode.ImlBuilder> {\n+        public static class ImlBuilder extends AbstractXMLBuilder<ImlBuilder> {\n@@ -3153,2 +3513,2 @@\n-        public static class XMLBuilder extends AbstractXMLBuilder<bldr.Bldr.XMLNode.XMLBuilder> {\n-           XMLBuilder(Element element) {\n+        public static class XMLBuilder extends AbstractXMLBuilder<XMLBuilder> {\n+            XMLBuilder(Element element) {\n@@ -3171,1 +3531,1 @@\n-                        javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+                        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n@@ -3185,1 +3545,1 @@\n-                        javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+                        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n@@ -3206,1 +3566,1 @@\n-                        javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+                        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n@@ -3227,1 +3587,1 @@\n-                        javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+                        DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n@@ -3248,1 +3608,1 @@\n-                if (element.getAttributes().item(i) instanceof org.w3c.dom.Attr attr) {\n+                if (element.getAttributes().item(i) instanceof Attr attr) {\n@@ -3264,1 +3624,1 @@\n-                return javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);\n+                return DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);\n@@ -3457,1 +3817,1 @@\n-        public sealed interface Id permits DependencyId, bldr.Bldr.MavenStyleRepository.MetaDataId {\n+        public sealed interface Id permits DependencyId, MetaDataId {\n@@ -3519,5 +3879,5 @@\n-                                                bldr.Bldr.MavenStyleRepository.GroupAndArtifactId.of(\n-                                                        bldr.Bldr.MavenStyleRepository.GroupId.of(dependency.xpathQueryString(\"groupId\/text()\")),\n-                                                        bldr.Bldr.MavenStyleRepository.ArtifactId.of(dependency.xpathQueryString(\"artifactId\/text()\"))),\n-                                                bldr.Bldr.MavenStyleRepository.VersionId.of(dependency.xpathQueryString(\"version\/text()\")),\n-                                                bldr.Bldr.MavenStyleRepository.Scope.of(dependency.xpathQueryString(\"scope\/text()\")),\n+                                                GroupAndArtifactId.of(\n+                                                        GroupId.of(dependency.xpathQueryString(\"groupId\/text()\")),\n+                                                        ArtifactId.of(dependency.xpathQueryString(\"artifactId\/text()\"))),\n+                                                VersionId.of(dependency.xpathQueryString(\"version\/text()\")),\n+                                                Scope.of(dependency.xpathQueryString(\"scope\/text()\")),\n@@ -3570,1 +3930,1 @@\n-                default -> throw new IllegalStateException(\"Unexpected value: \" + id);\n+\n@@ -3653,11 +4013,11 @@\n-                                if (repo.pom(id) instanceof Optional<Pom> p && p.isPresent()) {\n-                                    p.get()\n-                                            .requiredDependencies()\n-                                            .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n-                                            .forEach(\n-                                                    dependencyId -> {\n-                                                        unresolved.add(dependencyId);\n-                                                        add(id, dependencyId);\n-                                                    });\n-                                }\n-                            });\n+                        if (repo.pom(id) instanceof Optional<Pom> p && p.isPresent()) {\n+                            p.get()\n+                                    .requiredDependencies()\n+                                    .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n+                                    .forEach(\n+                                            dependencyId -> {\n+                                                unresolved.add(dependencyId);\n+                                                add(id, dependencyId);\n+                                            });\n+                        }\n+                    });\n@@ -3700,24 +4060,24 @@\n-          StringBuilder sb = new StringBuilder();\n-          rootGroupAndArtifactIds.forEach(groupAndArtifactId->sb.append(sb.isEmpty() ?\"\":\"-\").append(groupAndArtifactId.groupId+\"-\"+groupAndArtifactId.artifactId));\n-          System.out.println(sb);\n-          ClassPathEntryProvider classPathEntries=null;\n-          var pathFileName = sb+\"-path.xml\";\n-          var pathFile = dir.xmlFile(pathFileName);\n-          if (pathFile.exists()){\n-              System.out.println(pathFileName + \" exists \" + pathFile.path().toString());\n-              XMLNode path = new XMLNode(pathFile.path());\n-              ClassPath classPath = ClassPath.of();\n-              path.nodes(path.xpath(\"\/path\/jar\/text()\")).forEach(e->\n-                      classPath.add(dir.jarFile(e.getNodeValue()))\n-              );\n-              classPathEntries = classPath;\n-          }else {\n-             var finalClassPathEntries =  new Dag(this, rootGroupAndArtifactIds);\n-                  XMLNode.create(\"path\", xml-> {\n-                      finalClassPathEntries.classPathEntries().forEach(cpe ->\n-                              xml.element(\"jar\",jar->jar.text(dir.path().relativize(cpe.path()).toString()))\n-                      );\n-                  }).write(pathFile);\n-             System.out.println(\"created \"+pathFile.path());\n-             classPathEntries = finalClassPathEntries;\n-          }\n+            StringBuilder sb = new StringBuilder();\n+            rootGroupAndArtifactIds.forEach(groupAndArtifactId -> sb.append(sb.isEmpty() ? \"\" : \"-\").append(groupAndArtifactId.groupId + \"-\" + groupAndArtifactId.artifactId));\n+            System.out.println(sb);\n+            ClassPathEntryProvider classPathEntries = null;\n+            var pathFileName = sb + \"-path.xml\";\n+            var pathFile = dir.xmlFile(pathFileName);\n+            if (pathFile.exists()) {\n+                System.out.println(pathFileName + \" exists \" + pathFile.path().toString());\n+                XMLNode path = new XMLNode(pathFile.path());\n+                ClassPath classPath = ClassPath.of();\n+                path.nodes(path.xpath(\"\/path\/jar\/text()\")).forEach(e ->\n+                        classPath.add(dir.jarFile(e.getNodeValue()))\n+                );\n+                classPathEntries = classPath;\n+            } else {\n+                var finalClassPathEntries = new Dag(this, rootGroupAndArtifactIds);\n+                XMLNode.create(\"path\", xml -> {\n+                    finalClassPathEntries.classPathEntries().forEach(cpe ->\n+                            xml.element(\"jar\", jar -> jar.text(dir.path().relativize(cpe.path()).toString()))\n+                    );\n+                }).write(pathFile);\n+                System.out.println(\"created \" + pathFile.path());\n+                classPathEntries = finalClassPathEntries;\n+            }\n@@ -3903,4 +4263,4 @@\n-                                                bldr.Bldr.MavenStyleRepository.GroupAndArtifactId.of(\n-                                                        bldr.Bldr.MavenStyleRepository.GroupId.of(xmln.xpathQueryString(\"str[@name='g']\/text()\")),\n-                                                        bldr.Bldr.MavenStyleRepository.ArtifactId.of(xmln.xpathQueryString(\"str[@name='a']\/text()\"))),\n-                                                bldr.Bldr.MavenStyleRepository.VersionId.of(xmln.xpathQueryString(\"str[@name='v']\/text()\")),\n+                                                GroupAndArtifactId.of(\n+                                                        GroupId.of(xmln.xpathQueryString(\"str[@name='g']\/text()\")),\n+                                                        ArtifactId.of(xmln.xpathQueryString(\"str[@name='a']\/text()\"))),\n+                                                VersionId.of(xmln.xpathQueryString(\"str[@name='v']\/text()\")),\n@@ -3959,5 +4319,0 @@\n-                    \/\/ var numFound2 = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n-                    \/\/ var start = xmlNode.xpathQueryString(\"\/response\/result\/@start\");\n-                    \/\/ var rows =\n-                    \/\/ xmlNode.xpathQueryString(\"\/response\/lst[@name='responseHeader']\/lst[@name='params']\/str[@name='rows']\/text()\");\n-                    \/\/ println(\"numFound = \"+numFound+\" rows =\"+rows+ \" start =\"+start);\n@@ -4099,1 +4454,0 @@\n-\n","filename":"hat\/bldr\/Bldr.java","additions":768,"deletions":414,"binary":false,"changes":1182,"status":"modified"},{"patch":"@@ -41,3 +41,4 @@\n-            Quoted quoted = cqr.quoted();\n-            Op op = quoted.op();\n-            System.out.println(op.toText());\n+           \/\/ Quoted quoted = cqr.quoted();\n+            \/\/Op op = quoted.op();\n+            \/\/System.out.println(op.toText());\n+            throw new IllegalStateException(\"Fix this\");\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/spirv\/Bad.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,63 +47,63 @@\n-import static opengl.glut_h.C_CHAR;\n-import static opengl.glut_h.C_FLOAT;\n-import static opengl.glut_h.C_INT;\n-import static opengl.glut_h.GLUT_DEPTH;\n-import static opengl.glut_h.GLUT_DOUBLE;\n-import static opengl.glut_h.GLUT_RGB;\n-import static opengl.glut_h.GL_AMBIENT;\n-import static opengl.glut_h.GL_COLOR_BUFFER_BIT;\n-import static opengl.glut_h.GL_COLOR_MATERIAL;\n-import static opengl.glut_h.GL_DEPTH_BUFFER_BIT;\n-import static opengl.glut_h.GL_DEPTH_TEST;\n-import static opengl.glut_h.GL_DIFFUSE;\n-import static opengl.glut_h.GL_FRONT;\n-import static opengl.glut_h.GL_LIGHT0;\n-import static opengl.glut_h.GL_LIGHTING;\n-import static opengl.glut_h.GL_LINEAR;\n-import static opengl.glut_h.GL_NEAREST;\n-import static opengl.glut_h.GL_ONE;\n-import static opengl.glut_h.GL_POSITION;\n-import static opengl.glut_h.GL_QUADS;\n-import static opengl.glut_h.GL_SHININESS;\n-import static opengl.glut_h.GL_SMOOTH;\n-import static opengl.glut_h.GL_SPECULAR;\n-import static opengl.glut_h.GL_SRC_ALPHA;\n-import static opengl.glut_h.GL_TEXTURE_2D;\n-import static opengl.glut_h.GL_TEXTURE_MAG_FILTER;\n-import static opengl.glut_h.GL_TEXTURE_MIN_FILTER;\n-import static opengl.glut_h.GL_UNSIGNED_BYTE;\n-import static opengl.glut_h.glActiveTexture;\n-import static opengl.glut_h.glBegin;\n-import static opengl.glut_h.glBindTexture;\n-import static opengl.glut_h.glBlendFunc;\n-import static opengl.glut_h.glClear;\n-import static opengl.glut_h.glClearColor;\n-import static opengl.glut_h.glColor3f;\n-import static opengl.glut_h.glDisable;\n-import static opengl.glut_h.glEnable;\n-import static opengl.glut_h.glEnd;\n-import static opengl.glut_h.glGenTextures;\n-import static opengl.glut_h.glLightfv;\n-import static opengl.glut_h.glLoadIdentity;\n-import static opengl.glut_h.glMaterialfv;\n-import static opengl.glut_h.glPopMatrix;\n-import static opengl.glut_h.glPushMatrix;\n-import static opengl.glut_h.glRotatef;\n-import static opengl.glut_h.glScalef;\n-import static opengl.glut_h.glShadeModel;\n-import static opengl.glut_h.glTexCoord2f;\n-import static opengl.glut_h.glTexImage2D;\n-import static opengl.glut_h.glTexParameteri;\n-import static opengl.glut_h.glVertex3f;\n-import static opengl.glut_h.glutCreateWindow;\n-import static opengl.glut_h.glutDisplayFunc;\n-import static opengl.glut_h.glutIdleFunc;\n-import static opengl.glut_h.glutInit;\n-import static opengl.glut_h.glutInitDisplayMode;\n-import static opengl.glut_h.glutInitWindowSize;\n-import static opengl.glut_h.glutMainLoop;\n-import static opengl.glut_h.glutPostRedisplay;\n-import static opengl.glut_h.glutSolidTeapot;\n-import static opengl.glut_h.glutSwapBuffers;\n-import static opengl.glut_h_2.GL_BLEND;\n-import static opengl.glut_h_2.GL_RGBA;\n+import static opengl.opengl_h.C_CHAR;\n+import static opengl.opengl_h.C_FLOAT;\n+import static opengl.opengl_h.C_INT;\n+import static opengl.opengl_h.GLUT_DEPTH;\n+import static opengl.opengl_h.GLUT_DOUBLE;\n+import static opengl.opengl_h.GLUT_RGB;\n+import static opengl.opengl_h.GL_AMBIENT;\n+import static opengl.opengl_h.GL_COLOR_BUFFER_BIT;\n+import static opengl.opengl_h.GL_COLOR_MATERIAL;\n+import static opengl.opengl_h.GL_DEPTH_BUFFER_BIT;\n+import static opengl.opengl_h.GL_DEPTH_TEST;\n+import static opengl.opengl_h.GL_DIFFUSE;\n+import static opengl.opengl_h.GL_FRONT;\n+import static opengl.opengl_h.GL_LIGHT0;\n+import static opengl.opengl_h.GL_LIGHTING;\n+import static opengl.opengl_h.GL_LINEAR;\n+import static opengl.opengl_h.GL_NEAREST;\n+import static opengl.opengl_h.GL_ONE;\n+import static opengl.opengl_h.GL_POSITION;\n+import static opengl.opengl_h.GL_QUADS;\n+import static opengl.opengl_h.GL_SHININESS;\n+import static opengl.opengl_h.GL_SMOOTH;\n+import static opengl.opengl_h.GL_SPECULAR;\n+import static opengl.opengl_h.GL_SRC_ALPHA;\n+import static opengl.opengl_h.GL_TEXTURE_2D;\n+import static opengl.opengl_h.GL_TEXTURE_MAG_FILTER;\n+import static opengl.opengl_h.GL_TEXTURE_MIN_FILTER;\n+import static opengl.opengl_h.GL_UNSIGNED_BYTE;\n+import static opengl.opengl_h.glActiveTexture;\n+import static opengl.opengl_h.glBegin;\n+import static opengl.opengl_h.glBindTexture;\n+import static opengl.opengl_h.glBlendFunc;\n+import static opengl.opengl_h.glClear;\n+import static opengl.opengl_h.glClearColor;\n+import static opengl.opengl_h.glColor3f;\n+import static opengl.opengl_h.glDisable;\n+import static opengl.opengl_h.glEnable;\n+import static opengl.opengl_h.glEnd;\n+import static opengl.opengl_h.glGenTextures;\n+import static opengl.opengl_h.glLightfv;\n+import static opengl.opengl_h.glLoadIdentity;\n+import static opengl.opengl_h.glMaterialfv;\n+import static opengl.opengl_h.glPopMatrix;\n+import static opengl.opengl_h.glPushMatrix;\n+import static opengl.opengl_h.glRotatef;\n+import static opengl.opengl_h.glScalef;\n+import static opengl.opengl_h.glShadeModel;\n+import static opengl.opengl_h.glTexCoord2f;\n+import static opengl.opengl_h.glTexImage2D;\n+import static opengl.opengl_h.glTexParameteri;\n+import static opengl.opengl_h.glVertex3f;\n+import static opengl.opengl_h.glutCreateWindow;\n+import static opengl.opengl_h.glutDisplayFunc;\n+import static opengl.opengl_h.glutIdleFunc;\n+import static opengl.opengl_h.glutInit;\n+import static opengl.opengl_h.glutInitDisplayMode;\n+import static opengl.opengl_h.glutInitWindowSize;\n+import static opengl.opengl_h.glutMainLoop;\n+import static opengl.opengl_h.glutPostRedisplay;\n+import static opengl.opengl_h.glutSolidTeapot;\n+import static opengl.opengl_h.glutSwapBuffers;\n+import static opengl.opengl_h_2.GL_BLEND;\n+import static opengl.opengl_h_2.GL_RGBA;\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/GLWrap.java","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -44,18 +44,18 @@\n-import static opengl.glut_h.GL_COLOR_BUFFER_BIT;\n-import static opengl.glut_h.GL_DEPTH_BUFFER_BIT;\n-import static opengl.glut_h.GL_QUADS;\n-import static opengl.glut_h.GL_TEXTURE_2D;\n-import static opengl.glut_h.glBegin;\n-import static opengl.glut_h.glBindTexture;\n-import static opengl.glut_h.glClear;\n-import static opengl.glut_h.glColor3f;\n-import static opengl.glut_h.glEnd;\n-import static opengl.glut_h.glLoadIdentity;\n-import static opengl.glut_h.glPopMatrix;\n-import static opengl.glut_h.glPushMatrix;\n-import static opengl.glut_h.glRotatef;\n-import static opengl.glut_h.glScalef;\n-import static opengl.glut_h.glTexCoord2f;\n-import static opengl.glut_h.glVertex3f;\n-import static opengl.glut_h.glutSwapBuffers;\n-import static opengl.glut_h_3.C_FLOAT;\n+import static opengl.opengl_h.GL_COLOR_BUFFER_BIT;\n+import static opengl.opengl_h.GL_DEPTH_BUFFER_BIT;\n+import static opengl.opengl_h.GL_QUADS;\n+import static opengl.opengl_h.GL_TEXTURE_2D;\n+import static opengl.opengl_h.glBegin;\n+import static opengl.opengl_h.glBindTexture;\n+import static opengl.opengl_h.glClear;\n+import static opengl.opengl_h.glColor3f;\n+import static opengl.opengl_h.glEnd;\n+import static opengl.opengl_h.glLoadIdentity;\n+import static opengl.opengl_h.glPopMatrix;\n+import static opengl.opengl_h.glPushMatrix;\n+import static opengl.opengl_h.glRotatef;\n+import static opengl.opengl_h.glScalef;\n+import static opengl.opengl_h.glTexCoord2f;\n+import static opengl.opengl_h.glVertex3f;\n+import static opengl.opengl_h.glutSwapBuffers;\n+import static opengl.opengl_h_3.C_FLOAT;\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/Main.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-  var jextractedOpenCLJar = buildDir.jarFile(\"jextracted-opencl.jar\");\n-  var jextractedOpenGLJar = buildDir.jarFile(\"jextracted-opengl.jar\");\n+  var jextractedOpenCLJar = buildDir.jarFile(\"opencl.jar\");\n+  var jextractedOpenGLJar = buildDir.jarFile(\"opengl.jar\");\n","filename":"hat\/hatrun","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -16,1 +16,1 @@\n-          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/jextracted-opencl.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/opencl.jar!\/\" \/>\n","filename":"hat\/intellij\/backend_jextracted_opencl.iml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/jextracted-opengl.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/opengl.jar!\/\" \/>\n@@ -21,0 +21,1 @@\n+    <orderEntry type=\"module\" module-name=\"backend_ffi_opencl\" \/>\n@@ -24,1 +25,1 @@\n-          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/jextracted-opencl.jar!\/\" \/>\n+          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/opencl.jar!\/\" \/>\n@@ -30,1 +31,0 @@\n-    <orderEntry type=\"module\" module-name=\"backend_ffi_opencl\" \/>\n","filename":"hat\/intellij\/nbody.iml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-    .subDirs(dir -> dir.matches(\"^.*(hat|examples|backends|docs)$\"))\n+    .subDirs()\n+    .filter(dir -> dir.matches(\"^.*(hat|examples|backends|docs|bldr)$\"))\n","filename":"hat\/sanity","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}