{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import hat.backend.ffi.OpenCLBackend;\n@@ -213,7 +212,1 @@\n-        static void  updateUI(long now, @RO CellGrid cellGrid, Viewer viewer, int from) {\n-            viewer.controls.updateCounters(now);\n-            cellGrid.copySliceTo(viewer.mainPanel.rasterData, from);\n-            viewer.state.lastUIUpdateCompleted =false;\n-            viewer.mainPanel.repaint();\n-            viewer.state.timeOfLastUIUpdate = now;\n-        }\n+\n@@ -224,1 +217,1 @@\n-                                   Viewer viewer, @RO Control control, @RW CellGrid cellGrid) {\n+                                   Viewer viewer, @RO Control ctrl, @RW CellGrid grid) {\n@@ -226,3 +219,3 @@\n-            int range = cellGrid.width() * cellGrid.height();\n-            while (viewer.state.generations < viewer.state.maxGenerations) {\n-                cc.dispatchKernel(range, kc -> Compute.life(kc, control, cellGrid));\n+            int range = grid.width() * grid.height();\n+            while (viewer.stillRunning()) {\n+                cc.dispatchKernel(range, kc -> Compute.life(kc, ctrl, grid));\n@@ -230,1 +223,1 @@\n-                int to = control.from(); control.from(control.to()); control.to(to);\n+                int to = ctrl.from(); ctrl.from(ctrl.to()); ctrl.to(to);\n@@ -232,2 +225,0 @@\n-                viewer.state.generations++;\n-                viewer.state.generationsSinceLastChange++;\n@@ -235,4 +226,2 @@\n-\n-                if (viewer.state.lastUIUpdateCompleted\n-                        && ((now - viewer.state.timeOfLastUIUpdate) >= viewer.state.msPerFrame)) {\n-                    updateUI(now,cellGrid,viewer,control.from());\n+                if (viewer.isReadyForUpdate(now)){\n+                    viewer.update(now,grid,to);\n@@ -244,2 +233,2 @@\n-\/\/int skipped = 0;\n-            while (viewer.state.generations < viewer.state.maxGenerations) {\n+            int range = cellGrid.width() * cellGrid.height();\n+            while (viewer.stillRunning()) {\n@@ -248,2 +237,1 @@\n-                boolean shouldUpdateUI = viewer.state.lastUIUpdateCompleted\n-                        && ((now - viewer.state.timeOfLastUIUpdate) >= viewer.state.msPerFrame);\n+                boolean shouldUpdateUI = viewer.isReadyForUpdate(now);\n@@ -255,1 +243,1 @@\n-                    kernel.run(clWrapComputeContext, cellGrid.wxh(), cellGrid, control);\n+                    kernel.run(clWrapComputeContext, range, cellGrid, control);\n@@ -257,1 +245,1 @@\n-                    IntStream.range(0, cellGrid.wxh()).parallel().forEach(kcx ->\n+                    IntStream.range(0, range).parallel().forEach(kcx ->\n@@ -261,6 +249,1 @@\n-                int tempFrom = control.from();\n-                control.from(control.to());\n-                control.to(tempFrom);\n-\n-                viewer.state.generations++;\n-                viewer.state.generationsSinceLastChange++;\n+                int to = control.from(); control.from(control.to());control.to(to);\n@@ -269,10 +252,1 @@\n-\n-                    if (viewer.state.deviceOrModeModified) {\n-                        viewer.state.generationsSinceLastChange = 0;\n-                        viewer.state.timeOfLastChange = now;\n-                        viewer.state.deviceOrModeModified = false;\n-                    }\n-                    updateUI(now, cellGrid,viewer,control.from());\n-\n-                \/\/}else{\n-                \/\/   skipped++;\n+                    viewer.update(now, cellGrid,control.from());\n@@ -286,6 +260,1 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),FIRST\n-               \/\/ new OpenCLBackend(\"INFO,MINIMIZE_COPIES\")\n-            \/\/ new OpenCLBackend(\"INFO,SHOW_COMPUTE_MODEL\")\n-                \/\/new JavaMultiThreadedBackend()\n-               \/\/ new JavaSequentialBackend()\n-        );\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup());\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Main.java","additions":16,"deletions":47,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import hat.ifacemapper.MappableIface;\n@@ -57,0 +58,28 @@\n+    public boolean isReadyForUpdate(long now) {\n+        incGenerations();\n+        return  (state.lastUIUpdateCompleted    && ((now - state.timeOfLastUIUpdate) >= state.msPerFrame));\n+    }\n+\n+    public boolean stillRunning() {\n+       return  state.generations < state.maxGenerations;\n+    }\n+\n+    public void incGenerations() {\n+        state.generations++;\n+        state.generationsSinceLastChange++;\n+    }\n+\n+     void update(long now, @MappableIface.RO Main.CellGrid cellGrid, int from) {\n+\n+        if (state.deviceOrModeModified) {\n+            state.generationsSinceLastChange = 0;\n+            state.timeOfLastChange = now;\n+            state.deviceOrModeModified = false;\n+        }\n+        controls.updateCounters(now);\n+        cellGrid.copySliceTo(mainPanel.rasterData, from);\n+        state.lastUIUpdateCompleted =false;\n+        mainPanel.repaint();\n+        state.timeOfLastUIUpdate = now;\n+    }\n+\n@@ -210,2 +239,2 @@\n-                    System.out.println(\"Minimizing Copies \" + state.minimizingCopies);\n-                    System.out.println(\"Use GPU \" + state.usingGPU);\n+                   \/\/ System.out.println(\"Minimizing Copies \" + state.minimizingCopies);\n+                  \/\/  System.out.println(\"Use GPU \" + state.usingGPU);\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Viewer.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import static hat.backend.Backend.FIRST;\n@@ -119,3 +120,1 @@\n-        accelerator = new Accelerator(MethodHandles.lookup(),\n-                new OpenCLBackend(OpenCLConfig.of(\"GPU\"))\n-        );\n+        accelerator = new Accelerator(MethodHandles.lookup(),FIRST);\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/opencl\/OpenCLNBodyGLWindow.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+import static hat.backend.Backend.FIRST;\n+\n@@ -86,0 +88,1 @@\n+\n@@ -89,0 +92,3 @@\n+    public Accelerator(MethodHandles.Lookup lookup) {\n+        this(lookup, FIRST);\n+    }\n","filename":"hat\/hat-core\/src\/main\/java\/hat\/Accelerator.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}