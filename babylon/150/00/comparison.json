{"files":[{"patch":"@@ -411,1 +411,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported start value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported start value:\" + v);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ArithMathOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n@@ -258,1 +258,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n@@ -335,1 +335,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n@@ -421,1 +421,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n@@ -475,1 +475,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported start value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported start value:\" + v);\n@@ -481,1 +481,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported end value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported end value:\" + v);\n@@ -537,1 +537,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported axis value:\" + v);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-                    default -> throw new UnsupportedOperationException(\"Unsupported slot value:\" + v);\n+                    case null, default -> throw new UnsupportedOperationException(\"Unsupported slot value:\" + v);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n@@ -255,1 +255,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n@@ -1331,1 +1331,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported invoke descriptor value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported invoke descriptor value:\" + v);\n@@ -1452,1 +1452,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported new descriptor value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported new descriptor value:\" + v);\n@@ -1573,1 +1573,1 @@\n-                            default ->\n+                            case null, default ->\n@@ -1634,1 +1634,1 @@\n-                            default ->\n+                            case null, default ->\n@@ -1840,1 +1840,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported type descriptor value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported type descriptor value:\" + v);\n@@ -1907,1 +1907,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported type descriptor value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported type descriptor value:\" + v);\n@@ -2002,0 +2002,1 @@\n+                        case null -> null;\n@@ -2254,1 +2255,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported tuple index value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported tuple index value:\" + v);\n@@ -2325,1 +2326,1 @@\n-                        default -> throw new UnsupportedOperationException(\"Unsupported tuple index value:\" + v);\n+                        case null, default -> throw new UnsupportedOperationException(\"Unsupported tuple index value:\" + v);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2625,1 +2625,1 @@\n-                            default ->\n+                            case null, default ->\n@@ -2694,1 +2694,1 @@\n-                            default ->\n+                            case null, default ->\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,4 @@\n-         * to the mapping function.\n+         * to the mapping function. A {@code null} value is represented by the value\n+         * {@link #NULL_ATTRIBUTE_VALUE}.\n+         *\n+         * <p>If no attribute is present the {@code null} value is applied to the mapping function.\n@@ -86,1 +89,0 @@\n-         * @throws IllegalArgumentException if there is no attribute present\n@@ -89,6 +91,5 @@\n-            Object value = attributes.remove(isDefault ? \"\" : name);\n-            if (value == null) {\n-                if (!isDefault) {\n-                    throw new IllegalArgumentException(\"Required attribute not present: \"\n-                            + name);\n-                }\n+            Object value = null;\n+            if (isDefault && attributes.containsKey(\"\")) {\n+                value = attributes.remove(\"\");\n+                assert value != null;\n+            }\n@@ -96,0 +97,1 @@\n+            if (value == null && attributes.containsKey(name)) {\n@@ -97,0 +99,1 @@\n+                assert value != null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalizableOp.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.code.Value;\n@@ -36,0 +37,2 @@\n+import java.lang.reflect.code.parser.OpParser;\n+import java.lang.reflect.code.type.CoreTypeFactory;\n@@ -68,0 +71,21 @@\n+    @Test\n+    public void testNoName() {\n+        CoreOp.FuncOp f = getFuncOp(\"f\");\n+        f = f.transform((block, op) -> {\n+            if (op instanceof CoreOp.VarOp vop) {\n+                Value init = block.context().getValue(vop.initOperand());\n+                Op.Result v = block.op(CoreOp.var(init));\n+                block.context().mapValue(vop.result(), v);\n+            } else {\n+                block.op(op);\n+            }\n+            return block;\n+        });\n+\n+        Op op = OpParser.fromString(CoreOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY, f.toText()).get(0);\n+        boolean allNullNames = op.elements()\n+                .flatMap(ce -> ce instanceof CoreOp.VarOp vop ? Stream.of(vop) : null)\n+                .allMatch(vop -> vop.varName() == null);\n+        Assert.assertTrue(allNullNames);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestVarOp.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}