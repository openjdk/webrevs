{"files":[{"patch":"@@ -5,1 +5,11 @@\n-target\/\n+backends\/cuda\/target\/\n+backends\/mock\/target\/\n+backends\/opencl\/target\/\n+backends\/ptx\/target\/\n+examples\/blackscholes\/target\/\n+examples\/experiments\/target\/\n+examples\/heal\/target\/\n+examples\/life\/target\/\n+examples\/mandel\/target\/\n+examples\/squares\/target\/\n+examples\/violajones\/target\/\n","filename":"hat\/.gitignore","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    <artifactId>hat-example-experiments<\/artifactId>\n+    <artifactId>hat-example-matmul<\/artifactId>\n@@ -34,1 +34,1 @@\n-    <!-- this required to inherit parent properties -->\n+\n@@ -37,0 +37,1 @@\n+        <artifactId>hat-examples<\/artifactId>\n@@ -38,1 +39,0 @@\n-        <artifactId>hat.examples<\/artifactId>\n@@ -40,1 +40,0 @@\n-\n@@ -44,1 +43,0 @@\n-            <version>1.0<\/version>\n@@ -46,0 +44,1 @@\n+            <version>1.0<\/version>\n@@ -57,0 +56,1 @@\n+                        <id>1<\/id>\n@@ -58,0 +58,3 @@\n+                        <goals>\n+                            <goal>run<\/goal>\n+                        <\/goals>\n@@ -63,3 +66,0 @@\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals>\n","filename":"hat\/examples\/matmul\/pom.xml","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"hat\/examples\/experiments\/pom.xml","status":"copied"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024-2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package matmul;\n+\n+import hat.Accelerator;\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.backend.Backend;\n+import hat.buffer.F32Array;\n+\n+import jdk.incubator.code.CodeReflection;\n+\n+import java.util.Random;\n+\n+import static hat.ifacemapper.MappableIface.*;\n+\n+public class Main {\n+\n+    @CodeReflection\n+    public static void matrixMultiplyKernel(@RO KernelContext kc, @RO F32Array matrixA, @RO F32Array matrixB, @RW F32Array matrixC, int size) {\n+        if (kc.x < kc.maxX) {\n+            for (int j = 0; j < size; j++) {\n+                float acc = 0;\n+                for (int k = 0; k < size; k++) {\n+                    acc += (matrixA.array(kc.x * size + k) * matrixB.array(k * size + j));\n+                }\n+                matrixC.array(kc.x * size + j, acc);\n+            }\n+        }\n+    }\n+\n+    @CodeReflection\n+    public static void matrixMultiply(@RO ComputeContext cc, @RO F32Array matrixA, @RO F32Array matrixB, @RW  F32Array matrixC, int size) {\n+        cc.dispatchKernel(size,\n+                kc -> matrixMultiplyKernel(kc, matrixA, matrixB, matrixC, size)\n+        );\n+    }\n+\n+    private static void runSequential(F32Array matrixA, F32Array matrixB, F32Array matrixC, final int size) {\n+        for (int i = 0; i < size; i++) {\n+            for (int j = 0; j < size; j++) {\n+                float sum = 0;\n+                for (int k = 0; k < size; k++) {\n+                    float a = matrixA.array((long) i * size + k);\n+                    float b = matrixB.array((long) k * size + j);\n+                    sum += a * b;\n+                }\n+                matrixC.array((long) i * size + j, sum);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"Running Matrix Multiplication!\");\n+\n+        var lookup = java.lang.invoke.MethodHandles.lookup();\n+        var accelerator = new Accelerator(lookup, Backend.FIRST);\n+        System.out.println(accelerator);\n+\n+        final int size = 1024;\n+        var matrixA = F32Array.create(accelerator, size * size);\n+        var matrixB = F32Array.create(accelerator, size * size);\n+\n+        \/\/ Matrix for the results\n+        var matrixC = F32Array.create(accelerator, size * size);\n+        var resultSeq = F32Array.create(accelerator, size * size);\n+\n+        \/\/ Initialize matrices (A and B have the same size)\n+        Random r = new Random(19);\n+\n+        for (int it = 0; it < 10; it++) {\n+\n+            for (int j = 0; j < matrixA.length(); j++) {\n+                matrixA.array(j, r.nextFloat());\n+                matrixB.array(j, r.nextFloat());\n+            }\n+\n+            long start = System.nanoTime();\n+            accelerator.compute(cc ->\n+                    Main.matrixMultiply(cc, matrixA, matrixB, matrixC, size)\n+            );\n+            long end = System.nanoTime();\n+            System.out.println(\"Elapsed Time: \" + (end - start) + \" ns\");\n+\n+            \/\/ Check result\n+            runSequential(matrixA, matrixB, resultSeq, size);\n+            boolean isCorrect = true;\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    if (Math.abs(matrixC.array(i * size + j) - matrixC.array(i * size + j)) > 0.01f) {\n+                        isCorrect = false;\n+                        break;\n+                    }\n+                }\n+                if (!isCorrect) {\n+                    break;\n+                }\n+            }\n+\n+            if (isCorrect) {\n+                System.out.println(\"Result is correct!\");\n+            } else {\n+                System.out.println(\"Result is wrong!\");\n+            }\n+        }\n+    }\n+}\n","filename":"hat\/examples\/matmul\/src\/main\/java\/matmul\/Main.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -49,0 +49,1 @@\n+        <module>matmul<\/module>\n","filename":"hat\/examples\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,65 +30,66 @@\n-       └──.\/\n-           ├──hat                                      \/\/  All build scripts in each case 'foo' has java options for (and points to) 'foo.java'\n-           │    ├──bld                                 \/\/  --enable-preview --source 25 hat\/bld.java\n-           │    ├──bld.java\n-           │    ├──run                                 \/\/  --enable-preview --source 25 hat\/run.java\n-           │    ├──run.java\n-           │    └──Script                              \/\/  Contains all the tools for building\n-           │\n-           ├──build\/                                   \/\/ All jars, native libs and executables\n-           │    └──cmake-build-debug\/                  \/\/ All intermediate cmake artifacts\n-           │        ├── hat-*wrap-1.0.jar              \/\/ Wrapper jars around extracted * (clwrap, glwrap, cuwrap)\n-           │        ├── hat-core-1.0.jar               \/\/ Base hat jar\n-           │        ├── hat-example-*-1.0.jar          \/\/ Example jars (hat-example-nbody-1.0.jar, hat-example-life-1.0.jar)\n-           │        ├── hat-jextracted-opencl-1.0.jar  \/\/ Raw jextracted jars (hat-jextracted-opencl-1.0.jar ....)\n-           │        ├── lib*_backend.[dylib|so]        \/\/ ffi library backends\n-           │        └── *(no suffix)                   \/\/ various generated executables (opencl_info, cuda_info, cuda_squares)\n-           ├──extractions\/\n-           │   ├──CMakeFiles.txt\n-           │   ├── opencl\/                             \/\/ Maven style layout\n-           │   │   ├── CMakeFiles.txt\n-           │   │   └── src\/main\/java\/opencl            \/\/ created by cmake\n-           │   ├── cuda\/                               \/\/ Maven style layout\n-           │   │   ├── CMakeFiles.txt\n-           │   │   └── src\/main\/java\/cuda              \/\/ created by cmake\n-           │   └── opengl\/                             \/\/ Maven style layout\n-           │       ├── CMakeFiles.txt\n-           │       └── src\/main\/java\/opengl            \/\/ created by cmake\n-           ├──wrap\/\n-           │    └──wrap\/\n-           │         ├──wrap\/                          \/\/ Maven style layout\n-           │         ├──clwrap\/                        \/\/ Maven style layout\n-           │         ├──glwrap\/                        \/\/ Maven style layout\n-           │         └──cuwrap\/                        \/\/ Maven style layout\n-           │\n-           ├──hat-core                                 \/\/ Maven style layout\n-           │    ├──src\/main\/java\n-           │    │    └──hat\/\n-           │    │\n-           │    └──src\/main\/test\n-           │         └──hat\/\n-           │\n-           ├──backends\n-           │    ├──java\n-           │    │    ├──mt                             \/\/ Maven style layout\n-           │    │    └──seq                            \/\/ Maven style layout\n-           │    ├──jextracted\n-           │    │    └──opencl                         \/\/ Maven style layout\n-           │    └──ffi\n-           │         ├──opencl                         \/\/ Maven style layout with cmake\n-           │         ├──ptx                            \/\/ Maven style layout with cmake\n-           │         ├──mock                           \/\/ Maven style layout with cmake\n-           │         ├──spirv                          \/\/ Maven style layout with cmake\n-           │         ├──cuda                           \/\/ Maven style layout with cmake\n-           │         └──hip                            \/\/ Maven style layout with cmake\n-           │\n-           └──examples\n-                ├──mandel                              \/\/ Maven style layout\n-                ├──squares                             \/\/ Maven style layout\n-                ├──heal                                \/\/ Maven style layout\n-                ├──life                                \/\/ Maven style layout\n-                ├──nbody                               \/\/ Maven style layout\n-                ├──experiments                         \/\/ Maven style layout\n-                └──violajones                          \/\/ Maven style layout\n-       \"\"\";\n-    class Artifacts{\n+            └──.\/\n+                ├──hat                                      \/\/  All build scripts in each case 'foo' has java options for (and points to) 'foo.java'\n+                │    ├──bld                                 \/\/  --enable-preview --source 25 hat\/bld.java\n+                │    ├──bld.java\n+                │    ├──run                                 \/\/  --enable-preview --source 25 hat\/run.java\n+                │    ├──run.java\n+                │    └──Script                              \/\/  Contains all the tools for building\n+                │\n+                ├──build\/                                   \/\/ All jars, native libs and executables\n+                │    └──cmake-build-debug\/                  \/\/ All intermediate cmake artifacts\n+                │        ├── hat-*wrap-1.0.jar              \/\/ Wrapper jars around extracted * (clwrap, glwrap, cuwrap)\n+                │        ├── hat-core-1.0.jar               \/\/ Base hat jar\n+                │        ├── hat-example-*-1.0.jar          \/\/ Example jars (hat-example-nbody-1.0.jar, hat-example-life-1.0.jar)\n+                │        ├── hat-jextracted-opencl-1.0.jar  \/\/ Raw jextracted jars (hat-jextracted-opencl-1.0.jar ....)\n+                │        ├── lib*_backend.[dylib|so]        \/\/ ffi library backends\n+                │        └── *(no suffix)                   \/\/ various generated executables (opencl_info, cuda_info, cuda_squares)\n+                ├──extractions\/\n+                │   ├──CMakeFiles.txt\n+                │   ├── opencl\/                             \/\/ Maven style layout\n+                │   │   ├── CMakeFiles.txt\n+                │   │   └── src\/main\/java\/opencl            \/\/ created by cmake\n+                │   ├── cuda\/                               \/\/ Maven style layout\n+                │   │   ├── CMakeFiles.txt\n+                │   │   └── src\/main\/java\/cuda              \/\/ created by cmake\n+                │   └── opengl\/                             \/\/ Maven style layout\n+                │       ├── CMakeFiles.txt\n+                │       └── src\/main\/java\/opengl            \/\/ created by cmake\n+                ├──wrap\/\n+                │    └──wrap\/\n+                │         ├──wrap\/                          \/\/ Maven style layout\n+                │         ├──clwrap\/                        \/\/ Maven style layout\n+                │         ├──glwrap\/                        \/\/ Maven style layout\n+                │         └──cuwrap\/                        \/\/ Maven style layout\n+                │\n+                ├──hat-core                                 \/\/ Maven style layout\n+                │    ├──src\/main\/java\n+                │    │    └──hat\/\n+                │    │\n+                │    └──src\/main\/test\n+                │         └──hat\/\n+                │\n+                ├──backends\n+                │    ├──java\n+                │    │    ├──mt                             \/\/ Maven style layout\n+                │    │    └──seq                            \/\/ Maven style layout\n+                │    ├──jextracted\n+                │    │    └──opencl                         \/\/ Maven style layout\n+                │    └──ffi\n+                │         ├──opencl                         \/\/ Maven style layout with cmake\n+                │         ├──ptx                            \/\/ Maven style layout with cmake\n+                │         ├──mock                           \/\/ Maven style layout with cmake\n+                │         ├──spirv                          \/\/ Maven style layout with cmake\n+                │         ├──cuda                           \/\/ Maven style layout with cmake\n+                │         └──hip                            \/\/ Maven style layout with cmake\n+                │\n+                └──examples\n+                     ├──mandel                              \/\/ Maven style layout\n+                     ├──squares                             \/\/ Maven style layout\n+                     ├──heal                                \/\/ Maven style layout\n+                     ├──life                                \/\/ Maven style layout\n+                     ├──nbody                               \/\/ Maven style layout\n+                     ├──experiments                         \/\/ Maven style layout\n+                     ├──violajones                          \/\/ Maven style layout\n+                     └──matmul                              \/\/ Maven style layout\n+            \"\"\";\n+    class Artifacts {\n@@ -144,1 +145,1 @@\n-    }else{\n+    } else {\n@@ -153,1 +154,1 @@\n-    }else{\n+    } else {\n@@ -173,25 +174,5 @@\n-    if (Artifacts.jextractedOpenCL != null){\n-    Artifacts.clWrap = buildDir.mavenStyleBuild(\n-            wrapsDir.dir(\"clwrap\"), \"hat-clwrap-1.0.jar\",\n-            Artifacts.wrap, Artifacts.hatCore, Artifacts.jextractedOpenCL\n-    );\n-}\n-\/\/ on jetson\n-\/\/ ls extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc*\n-\/\/  -> extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc$callback.java\n-\/\/  so we exclude \"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"\n-\/\/ on mac\n-\/\/    ls extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc*\n-\/\/  -> extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc$func.java\n-\/\/  So we exclude  \"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"\n-\/\/\n-\n-if (Artifacts.jextractedOpenGL != null\n-        && Artifacts.jextractedOpenGL.jarFile.exists()) {\n-    String exclude = null;\n-    if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$func.class$\")).isEmpty()) {\n-        exclude = \"Callback\";\n-    }else if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$callback.class$\")).isEmpty()) {\n-        exclude = \"Func\";\n-    }else {\n-        println(\"We can't build glwrap because we need to exclude one of GLFuncEventHandler or GLCallbackEventHandler something\");\n+    if (Artifacts.jextractedOpenCL != null) {\n+        Artifacts.clWrap = buildDir.mavenStyleBuild(\n+                wrapsDir.dir(\"clwrap\"), \"hat-clwrap-1.0.jar\",\n+                Artifacts.wrap, Artifacts.hatCore, Artifacts.jextractedOpenCL\n+        );\n@@ -199,7 +180,28 @@\n-    if (exclude != null) {\n-        final var excludeMeSigh = \"^.*\/wrap\/glwrap\/GL\"+exclude+\"EventHandler\\\\.java$\";\n-        Artifacts.glWrap = Script.mavenStyleProject(buildDir,\n-                wrapsDir.dir(\"glwrap\"),\n-                buildDir.jarFile(\"hat-glwrap-1.0.jar\"),\n-                Artifacts.wrap, Artifacts.hatCore, Artifacts.jextractedOpenGL\n-        ).buildExcluding(javaSrc -> javaSrc.matches(excludeMeSigh));\n+\n+    \/\/ on jetson\n+    \/\/ ls extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc*\n+    \/\/  -> extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc$callback.java\n+    \/\/  so we exclude \"^.*\/wrap\/glwrap\/GLFuncEventHandler\\\\.java$\"\n+    \/\/ on mac\n+    \/\/    ls extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc*\n+    \/\/  -> extractions\/opengl\/src\/main\/java\/opengl\/glutKeyboardFunc$func.java\n+    \/\/  So we exclude  \"^.*\/wrap\/glwrap\/GLCallbackEventHandler\\\\.java$\"\n+    \/\/\n+\n+    if (Artifacts.jextractedOpenGL != null && Artifacts.jextractedOpenGL.jarFile.exists()) {\n+        String exclude = null;\n+        if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$func.class$\")).isEmpty()) {\n+            exclude = \"Callback\";\n+        } else if (!Artifacts.jextractedOpenGL.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$callback.class$\")).isEmpty()) {\n+            exclude = \"Func\";\n+        } else {\n+            println(\"We can't build glwrap because we need to exclude one of GLFuncEventHandler or GLCallbackEventHandler something\");\n+        }\n+        if (exclude != null) {\n+            final var excludeMeSigh = \"^.*\/wrap\/glwrap\/GL\" + exclude + \"EventHandler\\\\.java$\";\n+            Artifacts.glWrap = Script.mavenStyleProject(buildDir,\n+                    wrapsDir.dir(\"glwrap\"),\n+                    buildDir.jarFile(\"hat-glwrap-1.0.jar\"),\n+                    Artifacts.wrap, Artifacts.hatCore, Artifacts.jextractedOpenGL\n+            ).buildExcluding(javaSrc -> javaSrc.matches(excludeMeSigh));\n+        }\n@@ -207,1 +209,0 @@\n-}\n@@ -209,1 +210,1 @@\n-    if (false && Artifacts.jextractedCuda != null ) {\n+    if (false && Artifacts.jextractedCuda != null) {\n@@ -224,1 +225,1 @@\n-    if (ffiBackendsDir.optionalDir(\"opencl\") instanceof Script.DirEntry ffiBackendDir ) {\n+    if (ffiBackendsDir.optionalDir(\"opencl\") instanceof Script.DirEntry ffiBackendDir) {\n@@ -227,1 +228,1 @@\n-                \"hat-backend-ffi-\"+ffiBackendDir.fileName()+ \"-1.0.jar\",\n+                \"hat-backend-ffi-\" + ffiBackendDir.fileName() + \"-1.0.jar\",\n@@ -234,1 +235,1 @@\n-                \"hat-backend-ffi-\"+ffiBackendDir.fileName()+ \"-1.0.jar\",\n+                \"hat-backend-ffi-\" + ffiBackendDir.fileName() + \"-1.0.jar\",\n@@ -242,1 +243,1 @@\n-                \"hat-backend-ffi-\"+ffiBackendDir.fileName()+ \"-1.0.jar\",\n+                \"hat-backend-ffi-\" + ffiBackendDir.fileName() + \"-1.0.jar\",\n@@ -272,1 +273,1 @@\n-    Artifacts.javaMTBackend =  buildDir.mavenStyleBuild(javaBackendsDir.existingDir(\"mt\"),\n+    Artifacts.javaMTBackend = buildDir.mavenStyleBuild(javaBackendsDir.existingDir(\"mt\"),\n@@ -276,1 +277,1 @@\n-    Artifacts.javaSeqBackend =  buildDir.mavenStyleBuild(javaBackendsDir.existingDir(\"mt\"),\n+    Artifacts.javaSeqBackend = buildDir.mavenStyleBuild(javaBackendsDir.existingDir(\"mt\"),\n@@ -282,7 +283,7 @@\n-    Stream.of(\n-            \"blackscholes\",\n-                    \"heal\",\n-                    \"life\",\n-                    \"mandel\",\n-                    \"squares\",\n-                    \"violajones\"\n+    Stream.of(\"blackscholes\",\n+              \"heal\",\n+              \"life\",\n+              \"mandel\",\n+              \"squares\",\n+              \"violajones\",\n+              \"matmul\"\n@@ -292,3 +293,3 @@\n-            .forEach(exampleDir->buildDir.mavenStyleBuild(exampleDir,\n-                    \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\",\n-                    Artifacts.hatCore\n+            .forEach(exampleDir -> buildDir.mavenStyleBuild(exampleDir,\n+                            \"hat-example-\" + exampleDir.fileName() + \"-1.0.jar\",\n+                            Artifacts.hatCore\n@@ -309,4 +310,4 @@\n-    for (var o:nbodyDependencies){\n-       if (o == null){\n-          foundNull = true;\n-       }\n+    for (var o : nbodyDependencies) {\n+        if (o == null) {\n+            foundNull = true;\n+        }\n@@ -314,3 +315,3 @@\n-    if (foundNull){\n-        print(\"incomplete nbody dependencies \");\n-    }else {\n+    if (foundNull) {\n+        print(\"inco1mplete nbody dependencies \");\n+    } else {\n@@ -323,9 +324,2 @@\n-        var cmakeBuildDir = buildDir.buildDir(\"cmake-build-debug\");\n-        if (!cmakeBuildDir.exists()) {\n-            Script.cmake($ -> $\n-                    .verbose(false)\n-                    .source_dir(ffiBackendsDir)\n-                    .build_dir(cmakeBuildDir)\n-                    .copy_to(buildDir)\n-            );\n-        }\n+    var cmakeBuildDir = buildDir.buildDir(\"cmake-build-debug\");\n+    if (!cmakeBuildDir.exists()) {\n@@ -333,1 +327,4 @@\n-                .build(cmakeBuildDir)\n+                .verbose(false)\n+                .source_dir(ffiBackendsDir)\n+                .build_dir(cmakeBuildDir)\n+                .copy_to(buildDir)\n@@ -335,2 +332,4 @@\n-\n-\n+    }\n+    Script.cmake($ -> $\n+            .build(cmakeBuildDir)\n+    );\n@@ -338,1 +337,0 @@\n-\n","filename":"hat\/hat\/bld.java","additions":135,"deletions":137,"binary":false,"changes":272,"status":"modified"}]}