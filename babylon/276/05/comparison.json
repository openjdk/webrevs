{"files":[{"patch":"@@ -6,1 +6,11 @@\n-target\/\n+backends\/cuda\/target\/\n+backends\/mock\/target\/\n+backends\/opencl\/target\/\n+backends\/ptx\/target\/\n+examples\/blackscholes\/target\/\n+examples\/experiments\/target\/\n+examples\/heal\/target\/\n+examples\/life\/target\/\n+examples\/mandel\/target\/\n+examples\/squares\/target\/\n+examples\/violajones\/target\/\n","filename":"hat\/.gitignore","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+or visit www.oracle.com if you need additional information or have any\n+questions.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+         xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-matmul<\/artifactId>\n+    <version>1.0<\/version>\n+    <packaging>jar<\/packaging>\n+\n+    <parent>\n+        <groupId>oracle.code<\/groupId>\n+        <artifactId>hat-examples<\/artifactId>\n+        <version>1.0<\/version>\n+    <\/parent>\n+    <dependencies>\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-core<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+    <\/dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-antrun-plugin<\/artifactId>\n+                <version>1.8<\/version>\n+                <executions>\n+                    <execution>\n+                        <id>1<\/id>\n+                        <phase>install<\/phase>\n+                        <goals>\n+                            <goal>run<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <target>\n+                                <copy file=\"target\/${project.artifactId}-${project.version}.jar\" toDir=\"${hat.build}\"\/>\n+                            <\/target>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+\n+<\/project>\n","filename":"hat\/examples\/matmul\/pom.xml","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024-2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package matmul;\n+\n+import hat.Accelerator;\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.backend.Backend;\n+import hat.buffer.F32Array;\n+\n+import jdk.incubator.code.CodeReflection;\n+\n+import java.util.Random;\n+\n+import static hat.ifacemapper.MappableIface.*;\n+\n+public class Main {\n+\n+    @CodeReflection\n+    public static void matrixMultiplyKernel(@RO KernelContext kc, @RO F32Array matrixA, @RO F32Array matrixB, @RW F32Array matrixC, int size) {\n+        if (kc.x < kc.maxX) {\n+            for (int j = 0; j < size; j++) {\n+                float acc = 0;\n+                for (int k = 0; k < size; k++) {\n+                    acc += (matrixA.array(kc.x * size + k) * matrixB.array(k * size + j));\n+                }\n+                matrixC.array(kc.x * size + j, acc);\n+            }\n+        }\n+    }\n+\n+    @CodeReflection\n+    public static void matrixMultiply(@RO ComputeContext cc, @RO F32Array matrixA, @RO F32Array matrixB, @RW  F32Array matrixC, int size) {\n+        cc.dispatchKernel(size,\n+                kc -> matrixMultiplyKernel(kc, matrixA, matrixB, matrixC, size)\n+        );\n+    }\n+\n+    private static void runSequential(F32Array matrixA, F32Array matrixB, F32Array matrixC, final int size) {\n+        for (int i = 0; i < size; i++) {\n+            for (int j = 0; j < size; j++) {\n+                float sum = 0;\n+                for (int k = 0; k < size; k++) {\n+                    float a = matrixA.array((long) i * size + k);\n+                    float b = matrixB.array((long) k * size + j);\n+                    sum += a * b;\n+                }\n+                matrixC.array((long) i * size + j, sum);\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"Running Matrix Multiplication!\");\n+\n+        var lookup = java.lang.invoke.MethodHandles.lookup();\n+        var accelerator = new Accelerator(lookup, Backend.FIRST);\n+        System.out.println(accelerator);\n+\n+        final int size = 1024;\n+        var matrixA = F32Array.create(accelerator, size * size);\n+        var matrixB = F32Array.create(accelerator, size * size);\n+\n+        \/\/ Matrix for the results\n+        var matrixC = F32Array.create(accelerator, size * size);\n+        var resultSeq = F32Array.create(accelerator, size * size);\n+\n+        \/\/ Initialize matrices (A and B have the same size)\n+        Random r = new Random(19);\n+\n+        for (int it = 0; it < 10; it++) {\n+\n+            for (int j = 0; j < matrixA.length(); j++) {\n+                matrixA.array(j, r.nextFloat());\n+                matrixB.array(j, r.nextFloat());\n+            }\n+\n+            long start = System.nanoTime();\n+            accelerator.compute(cc ->\n+                    Main.matrixMultiply(cc, matrixA, matrixB, matrixC, size)\n+            );\n+            long end = System.nanoTime();\n+            System.out.println(\"Elapsed Time: \" + (end - start) + \" ns\");\n+\n+            \/\/ Check result\n+            runSequential(matrixA, matrixB, resultSeq, size);\n+            boolean isCorrect = true;\n+            for (int i = 0; i < size; i++) {\n+                for (int j = 0; j < size; j++) {\n+                    if (Math.abs(matrixC.array(i * size + j) - matrixC.array(i * size + j)) > 0.01f) {\n+                        isCorrect = false;\n+                        break;\n+                    }\n+                }\n+                if (!isCorrect) {\n+                    break;\n+                }\n+            }\n+\n+            if (isCorrect) {\n+                System.out.println(\"Result is correct!\");\n+            } else {\n+                System.out.println(\"Result is wrong!\");\n+            }\n+        }\n+    }\n+}\n","filename":"hat\/examples\/matmul\/src\/main\/java\/matmul\/Main.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -50,0 +50,1 @@\n+        <module>matmul<\/module>\n","filename":"hat\/examples\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,0 +137,3 @@\n+                │    ├──src\/main\/java\n+                │    └──src\/main\/resources\n+                └──matmul\n@@ -166,1 +169,1 @@\n-          dir.existingDir(\"core\"), \"hat-core-1.0.jar\"\n+            dir.existingDir(\"core\"), \"hat-core-1.0.jar\"\n@@ -170,1 +173,1 @@\n-          dir.existingDir(\"tools\"), \"hat-tools-1.0.jar\", Artifacts.core\n+            dir.existingDir(\"tools\"), \"hat-tools-1.0.jar\", Artifacts.core\n@@ -185,1 +188,1 @@\n-             extraction_opencl_dir, \"hat-extraction-opencl-1.0.jar\"\n+                extraction_opencl_dir, \"hat-extraction-opencl-1.0.jar\"\n@@ -194,1 +197,1 @@\n-            extraction_opengl_dir, \"hat-extraction-opengl-1.0.jar\"\n+                extraction_opengl_dir, \"hat-extraction-opengl-1.0.jar\"\n@@ -203,1 +206,1 @@\n-            extraction_cuda_dir, \"hat-extraction-cuda-1.0.jar\"\n+                extraction_cuda_dir, \"hat-extraction-cuda-1.0.jar\"\n@@ -213,2 +216,2 @@\n-    Artifacts.wrap_opencl = buildDir.mavenStyleBuild( wrapsDir.dir(\"opencl\"), \"hat-wrap-opencl-1.0.jar\", Artifacts.wrap_shared, Artifacts.core, Artifacts.extraction_opencl);\n-}\n+        Artifacts.wrap_opencl = buildDir.mavenStyleBuild( wrapsDir.dir(\"opencl\"), \"hat-wrap-opencl-1.0.jar\", Artifacts.wrap_shared, Artifacts.core, Artifacts.extraction_opencl);\n+    }\n@@ -225,16 +228,17 @@\n-if (Artifacts.extraction_opengl != null\n-        && Artifacts.extraction_opengl.jarFile.exists()) {\n-    String exclude = null;\n-    if (!Artifacts.extraction_opengl.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$func.class$\")).isEmpty()) {\n-        exclude = \"Callback\";\n-    }else if (!Artifacts.extraction_opengl.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$callback.class$\")).isEmpty()) {\n-        exclude = \"Func\";\n-    }else {\n-        println(\"We can't build wrap_opengl unless exclude one of GLFuncEventHandler or GLCallbackEventHandler something\");\n-    }\n-    if (exclude != null) {\n-        final var excludeMeSigh = \"^.*\/GL\"+exclude+\"EventHandler\\\\.java$\";\n-        println(\"exclude =\"+exclude+\" \"+excludeMeSigh);\n-        Artifacts.wrap_opengl = Script.mavenStyleProject(\n-              buildDir, wrapsDir.dir(\"opengl\"), buildDir.jarFile(\"hat-wrap-opengl-1.0.jar\"), Artifacts.wrap_shared, Artifacts.core, Artifacts.extraction_opengl\n-        ).buildExcluding(javaSrc -> javaSrc.matches(excludeMeSigh));\n+    if (Artifacts.extraction_opengl != null\n+            && Artifacts.extraction_opengl.jarFile.exists()) {\n+        String exclude = null;\n+        if (!Artifacts.extraction_opengl.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$func.class$\")).isEmpty()) {\n+            exclude = \"Callback\";\n+        }else if (!Artifacts.extraction_opengl.jarFile.select(Script.Regex.of(\"^.*glutKeyboardFunc\\\\$callback.class$\")).isEmpty()) {\n+            exclude = \"Func\";\n+        }else {\n+            println(\"We can't build wrap_opengl unless exclude one of GLFuncEventHandler or GLCallbackEventHandler something\");\n+        }\n+        if (exclude != null) {\n+            final var excludeMeSigh = \"^.*\/GL\"+exclude+\"EventHandler\\\\.java$\";\n+            println(\"exclude =\"+exclude+\" \"+excludeMeSigh);\n+            Artifacts.wrap_opengl = Script.mavenStyleProject(\n+                    buildDir, wrapsDir.dir(\"opengl\"), buildDir.jarFile(\"hat-wrap-opengl-1.0.jar\"), Artifacts.wrap_shared, Artifacts.core, Artifacts.extraction_opengl\n+            ).buildExcluding(javaSrc -> javaSrc.matches(excludeMeSigh));\n+        }\n@@ -242,1 +246,0 @@\n-}\n@@ -246,1 +249,1 @@\n-           wrapsDir.dir(\"cuda\"), \"hat-wrap-cuda-1.0.jar\", Artifacts.extraction_cuda\n+                wrapsDir.dir(\"cuda\"), \"hat-wrap-cuda-1.0.jar\", Artifacts.extraction_cuda\n@@ -254,1 +257,1 @@\n-        ffiBackendsDir.existingDir(\"shared\"), \"hat-backend-ffi-shared-1.0.jar\", Artifacts.core\n+            ffiBackendsDir.existingDir(\"shared\"), \"hat-backend-ffi-shared-1.0.jar\", Artifacts.core\n@@ -308,1 +311,1 @@\n-    Stream.of( \"blackscholes\", \"squares\")\n+    Stream.of( \"blackscholes\", \"squares\", \"matmul\")\n@@ -312,1 +315,1 @@\n-                exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\", Artifacts.core\n+                    exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\", Artifacts.core\n@@ -319,2 +322,2 @@\n-                exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\",\n-              Artifacts.core, Artifacts.backend_ffi_shared, Artifacts.backend_ffi_opencl\n+                    exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\",\n+                    Artifacts.core, Artifacts.backend_ffi_shared, Artifacts.backend_ffi_opencl\n@@ -327,1 +330,1 @@\n-                 exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\", Artifacts.core, Artifacts.example_shared\n+                    exampleDir, \"hat-example-\"+exampleDir.fileName()+\"-1.0.jar\", Artifacts.core, Artifacts.example_shared\n@@ -343,3 +346,3 @@\n-       if (o == null){\n-          foundNull = true;\n-       }\n+        if (o == null){\n+            foundNull = true;\n+        }\n@@ -351,1 +354,1 @@\n-            examplesDir.existingDir(\"nbody\"), \"hat-example-nbody-1.0.jar\", nbodyDependencies\n+                examplesDir.existingDir(\"nbody\"), \"hat-example-nbody-1.0.jar\", nbodyDependencies\n","filename":"hat\/hat\/bld.java","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"}]}