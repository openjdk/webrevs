{"files":[{"patch":"@@ -38,0 +38,1 @@\n+\n@@ -42,2 +43,1 @@\n-    final Map<String, Value> funMap = new HashMap<>();\n-    final Map<String, AnfDialect.AnfApply> appMap = new HashMap<>();\n+    final Map<Block, Value> funMap = new HashMap<>();\n@@ -99,0 +99,4 @@\n+\n+        var selfRefParam = newBodyBuilder.entryBlock().parameter(blockFType);\n+        funMap.put(b, selfRefParam);\n+\n@@ -122,0 +126,4 @@\n+        \/\/Self param\n+        var selfRefParam = funcBodyBuilder.entryBlock().parameter(blockFType);\n+        funMap.put(b, selfRefParam);\n+\n@@ -140,5 +148,0 @@\n-        for (AnfDialect.AnfFuncOp f : funs) {\n-            var res = blockBuilder.op(f);\n-            this.funMap.put(f.funcName(), res);\n-        }\n-\n@@ -218,1 +221,1 @@\n-                    \/\/trueArgs.add(funMap.get(c.trueBranch().targetBlock().toString()));\n+                    trueArgs.add(funMap.get(c.trueBranch().targetBlock()));\n@@ -222,1 +225,1 @@\n-                    \/\/falseArgs.add(get(c.falseBranch().targetBlock().toString()));\n+                    falseArgs.add(funMap.get(c.falseBranch().targetBlock()));\n@@ -225,3 +228,2 @@\n-\n-                    var trueApp = AnfDialect.applyStub(c.trueBranch().targetBlock().toString(), trueArgs, getBlockReturnType(c.trueBranch().targetBlock()));\n-                    var falseApp = AnfDialect.applyStub(c.falseBranch().targetBlock().toString(), falseArgs, getBlockReturnType(c.falseBranch().targetBlock()));\n+                    var trueApp = AnfDialect.apply(trueArgs);\n+                    var falseApp = AnfDialect.apply(falseArgs);\n@@ -246,1 +248,1 @@\n-                    \/\/funcArgs.add(funMap.get(br.branch().targetBlock().toString()));\n+                    funcArgs.add(funMap.get(br.branch().targetBlock()));\n@@ -249,1 +251,1 @@\n-                    var funcApp = AnfDialect.applyStub(br.branch().targetBlock().toString(), funcArgs, getBlockReturnType(br.branch().targetBlock()));\n+                    var funcApp = AnfDialect.apply(funcArgs);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/AnfTransformer.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -408,1 +408,0 @@\n-        public final TypeElement resultType;\n@@ -410,0 +409,1 @@\n+        public final TypeElement resultType;\n@@ -416,5 +416,0 @@\n-            TypeElement resultType = def.extractAttributeValue(ATTRIBUTE_RESULT_TYPE, true,\n-                    v -> switch (v) {\n-                        case TypeElement s -> s;\n-                        case null, default -> throw new UnsupportedOperationException(\"Unsupported func name value:\" + v);\n-                    });\n@@ -426,1 +421,1 @@\n-            return new AnfApplyStub(def, callsiteName, resultType);\n+            return new AnfApplyStub(def,callsiteName,def.resultType());\n@@ -437,1 +432,0 @@\n-            this.resultType = that.resultType;\n@@ -439,0 +433,1 @@\n+            this.resultType = that.resultType;\n@@ -441,0 +436,6 @@\n+        @Override\n+        public Map<String, Object> attributes() {\n+            HashMap<String, Object> m = new HashMap<>(super.attributes());\n+            m.put(\"\", callSiteName);\n+            return Collections.unmodifiableMap(m);\n+        }\n@@ -456,26 +457,0 @@\n-        @Override\n-        public void writeTo(Writer w) {\n-            try {\n-                w.write(NAME);\n-                w.write(\" \");\n-                w.write(this.callSiteName);\n-                if (!operands().isEmpty()) {\n-                    w.write(\" \");\n-                    for (var op : operands()) {\n-                        w.write(op.toString());\n-                        w.write(\" \");\n-                    }\n-                }\n-\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        @Override\n-        public String toText() {\n-            StringWriter w = new StringWriter();\n-            writeTo(w);\n-            return w.toString();\n-        }\n-\n@@ -530,1 +505,1 @@\n-    public static AnfApplyStub applyStub(String name, List<Value> arguments, TypeElement type) { return new AnfApplyStub(name, arguments, type);}\n+    \/\/public static AnfApplyStub applyStub(String name, List<Value> arguments, TypeElement type) { return new AnfApplyStub(name, arguments, type);}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/AnfDialect.java","additions":10,"deletions":35,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -488,2 +488,1 @@\n-            \/\/writeOp(op);\n-            op.writeTo(this.w);\n+            writeOp(op);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpWriter.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}