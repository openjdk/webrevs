{"files":[{"patch":"@@ -399,0 +399,48 @@\n+\n+    @IR(\"\"\"\n+            func @\"test10\" (%0 : int)boolean -> {\n+                  %1 : Var<int> = var %0 @\"i\";\n+                  %2 : int = var.load %1;\n+                  %3 : int = constant @\"0\";\n+                  %4 : byte = conv %3;\n+                  %5 : Var<byte> = var %4 @\"b\";\n+                  %6 : boolean = pattern.match %2\n+                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte> -> {\n+                          %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<byte> = pattern.type @\"b\";\n+                          yield %7;\n+                      }\n+                      (%8 : byte)void -> {\n+                          var.store %5 %8;\n+                          yield;\n+                      };\n+                  return %6;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static boolean test10(int i) {\n+        return i instanceof byte b;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test11\" (%0 : int)boolean -> {\n+                  %1 : Var<int> = var %0 @\"i\";\n+                  %2 : int = var.load %1;\n+                  %3 : int = constant @\"0\";\n+                  %4 : short = conv %3;\n+                  %5 : Var<short> = var %4 @\"s\";\n+                  %6 : boolean = pattern.match %2\n+                      ()jdk.incubator.code.op.ExtendedOp$Pattern$Type<short> -> {\n+                          %7 : jdk.incubator.code.op.ExtendedOp$Pattern$Type<short> = pattern.type @\"s\";\n+                          yield %7;\n+                      }\n+                      (%8 : short)void -> {\n+                          var.store %5 %8;\n+                          yield;\n+                      };\n+                  return %6;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static boolean test11(int i) {\n+        return i instanceof short s;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -102,0 +102,68 @@\n+\n+    @IR(\"\"\"\n+            func @\"test6\" (%0 : byte)void -> {\n+                  %1 : Var<byte> = var %0 @\"b\";\n+                  %2 : byte = var.load %1;\n+                  %3 : int = constant @\"1\";\n+                  %4 : byte = conv %3;\n+                  %5 : byte = add %2 %4;\n+                  var.store %1 %5;\n+                  %6 : byte = var.load %1;\n+                  %7 : int = constant @\"1\";\n+                  %8 : byte = conv %7;\n+                  %9 : byte = sub %6 %8;\n+                  var.store %1 %9;\n+                  %10 : byte = var.load %1;\n+                  %11 : int = constant @\"1\";\n+                  %12 : byte = conv %11;\n+                  %13 : byte = add %10 %12;\n+                  var.store %1 %13;\n+                  %14 : byte = var.load %1;\n+                  %15 : int = constant @\"1\";\n+                  %16 : byte = conv %15;\n+                  %17 : byte = sub %14 %16;\n+                  var.store %1 %17;\n+                  return;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static void test6(byte b) {\n+        b++;\n+        b--;\n+        ++b;\n+        --b;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test7\" (%0 : short)void -> {\n+                  %1 : Var<short> = var %0 @\"s\";\n+                  %2 : short = var.load %1;\n+                  %3 : int = constant @\"1\";\n+                  %4 : short = conv %3;\n+                  %5 : short = add %2 %4;\n+                  var.store %1 %5;\n+                  %6 : short = var.load %1;\n+                  %7 : int = constant @\"1\";\n+                  %8 : short = conv %7;\n+                  %9 : short = sub %6 %8;\n+                  var.store %1 %9;\n+                  %10 : short = var.load %1;\n+                  %11 : int = constant @\"1\";\n+                  %12 : short = conv %11;\n+                  %13 : short = add %10 %12;\n+                  var.store %1 %13;\n+                  %14 : short = var.load %1;\n+                  %15 : int = constant @\"1\";\n+                  %16 : short = conv %15;\n+                  %17 : short = sub %14 %16;\n+                  var.store %1 %17;\n+                  return;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static void test7(short s) {\n+        s++;\n+        s--;\n+        ++s;\n+        --s;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnaryopTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"}]}