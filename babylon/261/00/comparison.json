{"files":[{"patch":"@@ -17,4 +17,0 @@\n-HAT uses both maven and cmake.\n-\n-Maven controls the build but delegates to cmake for native artifacts (such as various backends).\n-\n","filename":"hat\/README.md","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-#!\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/classes\n+\/\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/bldr.jar \"$0\" \"$@\"; exit $?\n@@ -32,0 +32,1 @@\n+   List.of(args).forEach(arg->println(arg));\n","filename":"hat\/bld","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+bldr.jar\n","filename":"hat\/bldr\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-It will simplify our tasks going forward if we\n+It simplifes our tasks going forward if we\n@@ -36,2 +36,3 @@\n-The top level `env.bash` shell script can be sourced (dot included)\n-into your shell to both set `JAVA_HOME` and update your `PATH`\n+We also need to prebuild the `bldr\/bldr.jar`\n+\n+Thankfully just sourcing the top level `env.bash` script will perform these tasks\n@@ -49,0 +50,2 @@\n+ls bldr\/bldr.jar\n+bldr\/bldr.jar\n@@ -52,3 +55,2 @@\n-`Bldr` is a minimal java build system which has all the capabilities needed so far\n-to build existing HAT as well as it's examples and backends. It is just a set of\n-static methods and helper classes wrapping javac\/jar tooling.\n+`Bldr` is an evolving set of static methods and types needed (so far.. ;) )\n+to build HAT as well as the HAT examples and backends.\n@@ -66,1 +68,1 @@\n-We do need to compile this one class using javac one time, then we can use this in `bld` scripts to actually bld.\n+The first run of  `env.bash` will compile and create build `bldr\/bldr.jar`\n@@ -73,0 +75,1 @@\n+jar -cf bldr\/bldr.jar -C bldr\/classes bldr\n@@ -74,4 +77,1 @@\n-\n-Now the `bldr\/classes` dir contains all we need to create build scripts\n-\n-In HAT's root dir is a `#!` (Hash Bang) java launcher style script called `bld`\n+In HAT's root dir is a `#!` (Hash Bang) java launcher style script called `bld` (and one called `sanity`)\n@@ -83,1 +83,1 @@\n-chmod +x bld\n+chmod +x bld sanity\n@@ -86,20 +86,0 @@\n-A simple example of `bld` script which just compiles core HAT source to `build\/hat-1.0.jar` is shown.\n-\n-```java\n-#!\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/classes\n-import module java.compiler;\n-import static bldr.Bldr.*;\n-void main(String[] args) throws IOException, InterruptedException {\n-    var hatDir = Path.of(System.getProperty(\"user.dir\"));\n-    var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n-\n-    var hatJarResult = javacjar($ -> $\n-            .opts(  \"--source\", \"24\",\n-                    \"--enable-preview\",\n-                    \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-                    \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\")\n-            .jar(path(target, \"hat-1.0.jar\"))\n-            .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n-    );\n-}\n-```\n@@ -113,1 +93,1 @@\n-The real `bld` is more complicated, but not much more. It will will build hat-1.0.jar, along with all the backend jars hat-backend-?-1.0.jar,\n+`bld` will build hat-1.0.jar, along with all the backend jars hat-backend-?-1.0.jar,\n@@ -115,0 +95,1 @@\n+\n@@ -119,1 +100,1 @@\n-`bld` will also sanity check .java\/.cpp\/.h files to make sure we don't have any tabs, lines that with whitespace\n+`sanity` will sanity check all  .md\/.java\/.cpp\/.h files to make sure we don't have any tabs, lines that with whitespace\n@@ -155,0 +136,1 @@\n+bash hatrun.bash opencl heal\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":16,"deletions":34,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-#!\/bin.bash\n-cat >\/dev\/null<<LICENSE\n+cat >\/dev\/null<<END_OF_LICENSE\n@@ -27,1 +26,1 @@\n-LICENSE\n+END_OF_LICENSE\n@@ -29,9 +28,1 @@\n-OS=$(uname -s )\n-if [[ \"$OS\" == Linux ]]; then\n-  export ostype=linux\n-elif  [[ \"$OS\" == Darwin ]]; then\n-  export ostype=macosx\n-else\n-  echo \"could not determine ostype uname -s returned ${OS}\"\n-  exit 1\n-fi\n+# First lets check if this script was sourced into a bash compatible shell\n@@ -39,5 +30,8 @@\n-ARCH=$(uname -m)\n-if [[ \"$ARCH\" == x86_64 ]]; then\n-  export archtype=${ARCH}\n-elif  [[ \"$ARCH\" == arm64 ]]; then\n-  export archtype=aarch64\n+if [ \"${BASH_SOURCE[0]}\" = \"${0}\" ]; then \n+   # We just bail if it was not sourced.. We want to set PATH and JAVA_HOME...\n+   echo \"You must source this file ...\"\n+   echo \"Using either \"\n+   echo \"    . ${0}\"\n+   echo \"or\"\n+   echo \"    source ${0}\"\n+   exit 1;  # this is ok because we were sourced \n@@ -45,3 +39,1 @@\n-  echo \"could not determine aarchtype uname -m returned ${ARCH}\"\n-  exit 1\n-fi\n+  # Don't exit below here or you will trash the users shell ;)\n@@ -49,8 +41,76 @@\n-export JAVA_HOME=${PWD}\/..\/build\/${ostype}-${archtype}-server-release\/jdk\n-echo \"exporting JAVA_HOME=${JAVA_HOME}\"\n-if echo ${PATH} | grep ${JAVA_HOME} >\/dev\/null ;then\n-   echo 'path already contains ${JAVA_HOME}\/bin'\n-else\n-   export SAFE_PATH=${PATH}\n-   echo 'adding ${JAVA_HOME}\/bin prefix to PATH,  SAFE_PATH contains previous value'\n-   export PATH=${JAVA_HOME}\/bin:${PATH}\n+  OS=$(uname -s )\n+  if [[ \"$OS\" == Linux ]]; then\n+    export ostype=linux\n+  elif  [[ \"$OS\" == Darwin ]]; then\n+    export ostype=macosx\n+  else\n+    echo \"Could not determine ostype uname -s returned ${OS}\"\n+  fi\n+\n+  ARCH=$(uname -m)\n+  if [[ \"$ARCH\" == x86_64 ]]; then\n+    export archtype=${ARCH}\n+  elif  [[ \"$ARCH\" == arm64 ]]; then\n+    export archtype=aarch64\n+  else\n+    echo \"Could not determine aarchtype uname -m returned ${ARCH}\"\n+  fi\n+\n+  if [[ -z \"${archtype}\" || -z \"${ostype}\" ]]; then \n+     echo \"Can't determine archtype and\/or ostype\"\n+  else\n+    # We expect the user to provide a value for BABYLON_JDK_HOME or we can locate one using ${PWD}\/..\n+\n+    # below is a verbose version of \n+    # export BABYLON_JDK_HOME=${BABYLON_JDK_HOME:-$(realpath ${PWD}\/..)}\n+\n+    if [[ -z \"${BABYLON_JDK_HOME}\" ]]; then \n+       echo \"No user supplied BABYLON_JDK_HOME var, we will try \\${PWD}\/.. = $(realpath ${PWD}\/..)\"\n+       export BABYLON_JDK_HOME=$(realpath ${PWD}\/..)\n+    else\n+       echo \"Using user supplied BABYLON_JDK_HOME ${BABYLON_JDK_HOME}\"\n+    fi\n+\n+\n+    if [[ -d \"${BABYLON_JDK_HOME}\/build\" ]]; then\n+      echo \"\\${BABYLON_JDK_HOME}\/build seems ok!\"\n+      export JAVA_HOME=${BABYLON_JDK_HOME}\/build\/${ostype}-${archtype}-server-release\/jdk\n+      echo \"exporting JAVA_HOME=${JAVA_HOME}\"\n+      if echo ${PATH} | grep ${JAVA_HOME} >\/dev\/null ;then\n+         echo \"PATH already contains \\${JAVA_HOME}\/bin\"\n+      else\n+         export SAFE_PATH=${PATH}\n+         echo \"Adding \\${JAVA_HOME}\/bin prefix to PATH, SAFE_PATH contains previous value\"\n+         export PATH=${JAVA_HOME}\/bin:${PATH}\n+      fi\n+\n+      # Our java source launcher based build system needs bldr.bldr.jar so we create it here if needed. \n+      if [[ -f bldr\/bldr.jar ]]; then \n+         echo \"Found prebuilt bldr.jar\"\n+      else\n+         mkdir -p bldr\/classes\n+         echo \"Bootrapping bldr.jar\"\n+         javac \\\n+           --enable-preview \\\n+           --source 24 \\\n+           -d bldr\/classes \\\n+           --source-path bldr\/src\/main\/java \\\n+           bldr\/src\/main\/java\/bldr\/Bldr.java\n+  \n+         jar -cf bldr\/bldr.jar -C bldr\/classes bldr \n+      fi\n+      echo \"SUCCESS!\"\n+    else\n+      echo \"We expected either:-\"\n+      echo \"    \\${PWD} to be in a hat subdir of a compiled babylon jdk build\" \n+      echo \"or\" \n+      echo \"    BABYLON_JDK_HOME to be set, to a compiled babylon jdk build\"\n+      echo \"\"\n+      echo \"If you are in a hat subdir make sure babylon jdk is built ;)\"\n+      echo \"\"\n+      echo \"If you are in another dir try  \"\n+      echo \"    BABYLON_JDK_HOME=<<YOUR_PREBULT_BABYLON>> . ${0}\"\n+      echo \"or\"\n+      echo \"    BABYLON_JDK_HOME=<<YOUR_PREBULT_BABYLON>> source ${0}\"\n+    fi\n+  fi\n@@ -58,0 +118,1 @@\n+\n","filename":"hat\/env.bash","additions":89,"deletions":28,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n","filename":"hat\/maven-build.bash","additions":0,"deletions":1,"binary":false,"changes":1,"previous_filename":"hat\/build.bash","status":"renamed"},{"patch":"@@ -1,58 +0,0 @@\n-#!\/usr\/bin\/env java --enable-preview --source 24 \n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import module java.compiler;\n-import com.sun.source.util.JavacTask;\n-import javax.tools.ToolProvider;\n-\n-void main(String[] args) throws IOException, InterruptedException {\n-     var toolsDir = Path.of(System.getProperty(\"user.dir\")).resolve(\"bldr\");\n-     var classesDir = toolsDir.resolve(\"classes\");\n-\n-     \/\/ Here we remove all classes from bldr\/classes i.e rm -rf bldr\/classes\n-     if (Files.exists(classesDir)) {\n-        Files.walk(classesDir).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\n-     }\n-     \/\/ Now make sure the bldr\/classes dir exists i.e mkdir -p bldr\/classes\n-     Files.createDirectories(classesDir);\n-\n-     JavaCompiler javac = ToolProvider.getSystemJavaCompiler();\n-\n-     JavacTask javacTask = (JavacTask)javac.getTask(\n-         null, null, null, \n-         List.of( \"--source\",\"24\", \"--enable-preview\", \"-d\", classesDir.toString()),\n-         null,\n-         List.of(\n-            new SimpleJavaFileObject(toolsDir.resolve(\"src\/main\/java\/bldr\/Bldr.java\").toUri(),JavaFileObject.Kind.SOURCE){\n-               public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n-                 return Files.readString(Path.of(toUri()));\n-               }\n-            }\n-         )\n-     );\n-     javacTask.generate();\n-}\n-\n","filename":"hat\/mkbldr","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,1 +1,2 @@\n-#!\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/classes\n+\/\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/bldr.jar \"$0\" \"$@\"; exit $?\n+\n","filename":"hat\/sanity","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,225 +0,0 @@\n-\/\/usr\/bin\/env jshell  \"$0\" \"$@\"; exit $?\n-\/\/usr\/bin\/env jshell --execution local \"$0\" \"$@\"; exit $?\n-\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-import java.io.*;\n-import java.util.*;\n-import java.util.regex.*;\n-import java.nio.file.*;\n-import java.util.stream.Stream;\n-import java.nio.charset.Charset;\n-import java.nio.charset.StandardCharsets;\n-public class PomChecker {\n-   public static class XMLNode {\n-      org.w3c.dom.Element element;\n-      List<XMLNode> children = new ArrayList<>();\n-      Map<String, String> attrMap =  new HashMap<>();\n-\n-      XMLNode(org.w3c.dom.Element element) {\n-         this.element = element;\n-         this.element.normalize();\n-         for (int i = 0; i < this.element.getChildNodes().getLength(); i++) {\n-            if (this.element.getChildNodes().item(i) instanceof org.w3c.dom.Element e){\n-               this.children.add(new XMLNode(e));\n-            }\n-         }\n-         for (int i = 0; i < element.getAttributes().getLength(); i++) {\n-            if (element.getAttributes().item(i) instanceof org.w3c.dom.Attr attr){\n-               this.attrMap.put(attr.getName(),attr.getValue());\n-            }\n-         }\n-      }\n-      public boolean hasAttr(String name) { return attrMap.containsKey(name); }\n-      public String attr(String name) { return attrMap.get(name); }\n-      XMLNode(File file) throws Throwable {\n-         this(javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(file).getDocumentElement());\n-      }\n-      void write(File file) throws Throwable {\n-         var  transformer = TransformerFactory.newInstance().newTransformer();\n-         transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-         transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-         transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n-         transformer.transform(new DOMSource(element.getOwnerDocument()), new StreamResult(file));\n-      }\n-   }\n-   static Pattern varPattern=Pattern.compile(\"\\\\$\\\\{([^}]*)\\\\}\");\n-   static Pattern trailingWhitespacePattern=Pattern.compile(\".*  *\");\n-   static public String varExpand(Map<String,String> props, String value){ \/\/ recurse\n-      String result = value;\n-      if (varPattern.matcher(value) instanceof Matcher matcher && matcher.find()) {\n-         var v = matcher.group(1);\n-         result = varExpand(props,value.substring(0, matcher.start())\n-               +(v.startsWith(\"env\")\n-                  ?System.getenv(v.substring(4))\n-                  :props.get(v))\n-               +value.substring(matcher.end()));\n-         \/\/out.println(\"incomming ='\"+value+\"'  v= '\"+v+\"' value='\"+value+\"'->'\"+result+\"'\");\n-      }\n-      return result;\n-   }\n-   static boolean isParent(File possibleParent, File maybeChild){\n-      File parent = maybeChild.getParentFile();\n-      while ( parent != null ) {\n-         if ( parent.equals( possibleParent ) )\n-            return true;\n-         parent = parent.getParentFile();\n-      }\n-      return false;\n-   }\n-\n-\n-\n-   public static void main(String[] args) throws Throwable{\n-      var out = System.out;\n-      var err = System.out;\n-\n-      var osArch = System.getProperty(\"os.arch\");\n-      var osName = System.getProperty(\"os.name\");\n-      var osVersion = System.getProperty(\"os.version\");\n-      var javaVersion = System.getProperty(\"java.version\");\n-      var javaHome = System.getProperty(\"java.home\");\n-      var pwd = new File(System.getProperty(\"user.dir\"));\n-\n-      if (javaVersion.startsWith(\"24\")){\n-         \/\/out.println(\"javaVersion \"+javaVersion+\" looks OK\");\n-\n-         var props = new LinkedHashMap<String,String>();\n-         var dir = new File(\".\");\n-         var topPom = new XMLNode(new File(dir,\"pom.xml\"));\n-         var babylonDirKey = \"babylon.dir\";\n-         var spirvDirKey = \"beehive.spirv.toolkit.dir\";\n-         var hatDirKey = \"hat.dir\";\n-         var interestingKeys = Set.of(spirvDirKey, babylonDirKey,hatDirKey);\n-         var requiredDirKeys = Set.of(babylonDirKey, hatDirKey);\n-         var dirKeyToDirMap = new HashMap<String,File>();\n-\n-         topPom.children.stream().filter(e->e.element.getNodeName().equals(\"properties\")).forEach(properties ->\n-               properties.children.stream().forEach(property ->{\n-                  var key = property.element.getNodeName();\n-                  var value = varExpand(props,property.element.getTextContent());\n-                  props.put(key, value);\n-                  if (interestingKeys.contains(key)){\n-                      var file = new File(value);\n-                      if (requiredDirKeys.contains(key) && !file.exists()){\n-                         err.println(\"ERR pom.xml has property '\"+key+\"' with value '\"+value+\"' but that dir does not exists!\");\n-                         System.exit(1);\n-                      }\n-                      dirKeyToDirMap.put(key,file);\n-                  }\n-                  })\n-               );\n-         for (var key:requiredDirKeys){\n-             if (!props.containsKey(key)){\n-                 err.println(\"ERR pom.xml expected to have property '\"+key+\"' \");\n-                 System.exit(1);\n-             }\n-         }\n-\n-         var javaHomeDir = new File(javaHome);\n-         var babylonDir = dirKeyToDirMap.get(babylonDirKey);\n-         if (isParent(babylonDir, javaHomeDir)){\n-            var hatDir = dirKeyToDirMap.get(hatDirKey);\n-            if (hatDir.equals(pwd)){\n-               var backendsPom = new XMLNode(new File(dir,\"backends\/pom.xml\"));\n-               var modules = backendsPom.children.stream().filter(e->e.element.getNodeName().equals(\"modules\")).findFirst().get();\n-               var spirvModule = modules.children.stream().filter(e->e.element.getTextContent().equals(\"spirv\")).findFirst();\n-               if (spirvModule.isPresent()){\n-                  if (dirKeyToDirMap.containsKey(spirvDirKey)) {\n-                     var spirvDir = dirKeyToDirMap.get(spirvDirKey);\n-                     if (!spirvDir.exists()) {\n-                        err.println(\"ERR \"+spirvDirKey + \" -> '\" + spirvDir + \"' dir does not exists but module included in backends \");\n-                        System.exit(1);\n-                     }\n-                  }else{\n-                     err.println(\"ERR \"+spirvDirKey + \" -> variable dir does not exists but module included in backends \");\n-                     System.exit(1);\n-                  }\n-               } else{\n-                  if (dirKeyToDirMap.containsKey(spirvDirKey)) {\n-                     var spirvDir = dirKeyToDirMap.get(spirvDirKey);\n-                     if (spirvDir.exists()){\n-                        out.println(\"WRN \"+spirvDirKey+\" -> '\"+spirvDir+\"' exists but spirv module not included in backends \");\n-                     }else{\n-                        out.println(\"INF \"+spirvDirKey+\" -> '\"+spirvDir+\"' does not exist and not included in backends \");\n-                     }\n-                  }\n-               }\n-            } else{\n-               err.println(\"ERR hat.dir='\"+hatDir+\"' != ${pwd}='\"+pwd+\"'\");\n-               System.exit(1);\n-            }\n-         }else{\n-            err.println(\"ERR babylon.dir '\"+babylonDir+\"' is not a child of javaHome '\"+javaHome+\"'\");\n-            System.exit(1);\n-         }\n-      }else{\n-         err.println(\"ERR Incorrect Java version. Is babylon jdk in your path?\");\n-         System.exit(1);\n-      }\n-\n-      Set.of(\"hat\", \"examples\", \"backends\").forEach(dirName->{\n-         try{\n-            Files.walk(Paths.get(dirName)).filter(p->{\n-              var name = p.toString();\n-              return !name.contains(\"cmake-build-debug\")\n-                && !name.contains(\"rleparser\")\n-                && ( name.endsWith(\".java\") || name.endsWith(\".cpp\") || name.endsWith(\".h\"));\n-              }).forEach(path->{\n-                try{\n-                   boolean license = false;\n-                   for (String line: Files.readAllLines(path,  StandardCharsets.UTF_8)){\n-                      if (line.contains(\"\\t\")){\n-                        err.println(\"ERR TAB \"+path+\":\"+line);\n-                      }\n-                      if (line.endsWith(\" \")) {\n-                        err.println(\"ERR TRAILING WHITESPACE \"+path+\":\"+line);\n-                      }\n-                      if (Pattern.matches(\"^  *(package|import).*$\",line)) { \/\/ I saw this a few times....?\n-                        err.println(\"ERR WEIRD INDENT \"+path+\":\"+line);\n-                      }\n-                      if (Pattern.matches(\"^.*Copyright.*202[4-9].*Oracle.*$\",line)) { \/\/ not foolproof I know\n-                        license = true;\n-                      }\n-                   }\n-                   if (!license){\n-                      err.println(\"ERR MISSING LICENSE \"+path);\n-                   }\n-                } catch(IOException ioe){\n-                  err.println(ioe);\n-                }\n-            });\n-         } catch(IOException ioe){\n-           err.println(ioe);\n-         }\n-      });\n-   }\n-}\n-\n","filename":"hat\/sanity.java","additions":0,"deletions":225,"binary":false,"changes":225,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-#!\/bin\/bash\n-cat >\/dev\/null<<LICENSE\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-LICENSE\n-\n-echo spaces at end of lines\n-find . \\\n-   -name \"*.iml\" \\\n-   -o -name \"*.bash\" \\\n-   -o -name \"*.xml\" \\\n-   -o -name \"*.java\" \\\n-   -o -name \"*.h\" \\\n-   -o -name \"*.md\" \\\n-   -o -name \"*.cpp\" \\\n-   -o -name \"mkbld\" \\\n-   -o -name \"bld\" \\\n-   -o -name CMakeFiles.list \\\n-   | xargs grep \"  *$\" \\\n-   | cut -d: -f1 \\\n-   | sort -u\n-\n-echo tabs\n-find . \\\n-   -name \"*.iml\" \\\n-   -o -name \"*.bash\" \\\n-   -o -name \"*.xml\" \\\n-   -o -name \"*.java\" \\\n-   -o -name \"*.h\" \\\n-   -o -name \"*.md\" \\\n-   -o -name \"*.cpp\" \\\n-   -o -name \"mkbld\" \\\n-   -o -name \"bld\" \\\n-   -o -name CMakeFiles.list \\\n-   | xargs grep \"\\t\" \\\n-   | cut -d: -f1 \\\n-   | sort -u\n","filename":"hat\/whitespacecheck.bash","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"}]}