{"files":[{"patch":"@@ -514,1 +514,1 @@\n-                    bb.op(CoreOp._return(bb.op(CoreOp.tuple(bb.context().getValues(list)))));\n+                    bb.op(CoreOp.return_(bb.op(CoreOp.tuple(bb.context().getValues(list)))));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-            b.op(CoreOp._return(prediction));\n+            b.op(CoreOp.return_(prediction));\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/CNNTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-                fb.op(CoreOp._return(valueMap.get(g.output().getFirst().name())));\n+                fb.op(CoreOp.return_(valueMap.get(g.output().getFirst().name())));\n@@ -310,1 +310,1 @@\n-                fb.op(CoreOp._return(ret));\n+                fb.op(CoreOp.return_(ret));\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/proto\/OnnxModelTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    final JavaOp.JavaForOp fop;\n+    final JavaOp.ForOp fop;\n@@ -45,1 +45,1 @@\n-    SimpleCountedForLoopInfo(JavaOp.JavaForOp fop) {\n+    SimpleCountedForLoopInfo(JavaOp.ForOp fop) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/SimpleCountedForLoopInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-                case JavaOp.JavaForOp fop -> {\n+                case JavaOp.ForOp fop -> {\n@@ -208,1 +208,1 @@\n-                case JavaOp.JavaContinueOp _ -> {\n+                case JavaOp.ContinueOp _ -> {\n@@ -210,1 +210,1 @@\n-                case YieldOp _ -> {\n+                case CoreOp.YieldOp _ -> {\n@@ -661,1 +661,1 @@\n-            case JavaOp.JavaForOp fop -> {\n+            case JavaOp.ForOp fop -> {\n@@ -677,1 +677,1 @@\n-    static void transformToSCFFor(CopyContext cc, Block.Builder kblock, JavaOp.JavaForOp fop,\n+    static void transformToSCFFor(CopyContext cc, Block.Builder kblock, JavaOp.ForOp fop,\n@@ -748,1 +748,1 @@\n-                        if (op instanceof JavaOp.JavaContinueOp) {\n+                        if (op instanceof JavaOp.ContinueOp) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import jdk.incubator.code.extern.OpFactory;\n@@ -300,1 +299,0 @@\n-    @OpFactory.OpDeclaration(HatPtrOp.NAME)\n@@ -394,1 +392,0 @@\n-    @OpFactory.OpDeclaration(HatPtrLoadValue.NAME)\n@@ -415,1 +412,0 @@\n-    @OpFactory.OpDeclaration(HatPtrStoreValue.NAME)\n","filename":"hat\/core\/src\/main\/java\/hat\/OpsAndTypes.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            case JavaOp.JavaWhileOp o -> 0;\n+            case JavaOp.WhileOp o -> 0;\n@@ -122,3 +122,3 @@\n-            case JavaOp.JavaConditionalAndOp o -> 14;\n-            case JavaOp.JavaConditionalOrOp o -> 15;\n-            case JavaOp.JavaConditionalExpressionOp o -> 18;\n+            case JavaOp.ConditionalAndOp o -> 14;\n+            case JavaOp.ConditionalOrOp o -> 15;\n+            case JavaOp.ConditionalExpressionOp o -> 18;\n@@ -232,2 +232,2 @@\n-            case JavaOp.JavaConditionalAndOp o -> condAnd();\n-            case JavaOp.JavaConditionalOrOp o -> condOr();\n+            case JavaOp.ConditionalAndOp o -> condAnd();\n+            case JavaOp.ConditionalOrOp o -> condOr();\n","filename":"hat\/core\/src\/main\/java\/hat\/backend\/codebuilders\/HATCodeBuilderWithContext.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-public class ForOpWrapper extends LoopOpWrapper<JavaOp.JavaForOp> {\n-    ForOpWrapper( MethodHandles.Lookup lookup,JavaOp.JavaForOp op) {\n+public class ForOpWrapper extends LoopOpWrapper<JavaOp.ForOp> {\n+    ForOpWrapper( MethodHandles.Lookup lookup,JavaOp.ForOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/ForOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-public class IfOpWrapper extends StructuralOpWrapper<JavaOp.JavaIfOp> {\n-    public IfOpWrapper(MethodHandles.Lookup lookup,JavaOp.JavaIfOp op) {\n+public class IfOpWrapper extends StructuralOpWrapper<JavaOp.IfOp> {\n+    public IfOpWrapper(MethodHandles.Lookup lookup,JavaOp.IfOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/IfOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-public class JavaBreakOpWrapper extends OpWrapper<JavaOp.JavaBreakOp> {\n-    public JavaBreakOpWrapper(MethodHandles.Lookup lookup, JavaOp.JavaBreakOp op) {\n+public class JavaBreakOpWrapper extends OpWrapper<JavaOp.BreakOp> {\n+    public JavaBreakOpWrapper(MethodHandles.Lookup lookup, JavaOp.BreakOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/JavaBreakOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-public class JavaContinueOpWrapper extends OpWrapper<JavaOp.JavaContinueOp> {\n-    public JavaContinueOpWrapper(MethodHandles.Lookup lookup, JavaOp.JavaContinueOp op) {\n+public class JavaContinueOpWrapper extends OpWrapper<JavaOp.ContinueOp> {\n+    public JavaContinueOpWrapper(MethodHandles.Lookup lookup, JavaOp.ContinueOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/JavaContinueOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-public class JavaLabeledOpWrapper extends StructuralOpWrapper<JavaOp.JavaLabeledOp> {\n-    public JavaLabeledOpWrapper( MethodHandles.Lookup lookup,JavaOp.JavaLabeledOp op) {\n+public class JavaLabeledOpWrapper extends StructuralOpWrapper<JavaOp.LabeledOp> {\n+    public JavaLabeledOpWrapper( MethodHandles.Lookup lookup,JavaOp.LabeledOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/JavaLabeledOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -66,3 +66,3 @@\n-            case JavaOp.JavaForOp $ -> (OW) new ForOpWrapper(lookup, $);\n-            case JavaOp.JavaWhileOp $ -> (OW) new WhileOpWrapper(lookup, $);\n-            case JavaOp.JavaIfOp $ -> (OW) new IfOpWrapper(lookup, $);\n+            case JavaOp.ForOp $ -> (OW) new ForOpWrapper(lookup, $);\n+            case JavaOp.WhileOp $ -> (OW) new WhileOpWrapper(lookup, $);\n+            case JavaOp.IfOp $ -> (OW) new IfOpWrapper(lookup, $);\n@@ -88,4 +88,4 @@\n-            case JavaOp.JavaConditionalExpressionOp $ -> (OW) new TernaryOpWrapper(lookup, $);\n-            case JavaOp.JavaLabeledOp $ -> (OW) new JavaLabeledOpWrapper(lookup, $);\n-            case JavaOp.JavaBreakOp $ -> (OW) new JavaBreakOpWrapper(lookup, $);\n-            case JavaOp.JavaContinueOp $ -> (OW) new JavaContinueOpWrapper(lookup, $);\n+            case JavaOp.ConditionalExpressionOp $ -> (OW) new TernaryOpWrapper(lookup, $);\n+            case JavaOp.LabeledOp $ -> (OW) new JavaLabeledOpWrapper(lookup, $);\n+            case JavaOp.BreakOp $ -> (OW) new JavaBreakOpWrapper(lookup, $);\n+            case JavaOp.ContinueOp $ -> (OW) new JavaContinueOpWrapper(lookup, $);\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-public class TernaryOpWrapper extends OpWrapper<JavaOp.JavaConditionalExpressionOp> {\n-    public TernaryOpWrapper( MethodHandles.Lookup lookup,JavaOp.JavaConditionalExpressionOp op) {\n+public class TernaryOpWrapper extends OpWrapper<JavaOp.ConditionalExpressionOp> {\n+    public TernaryOpWrapper( MethodHandles.Lookup lookup,JavaOp.ConditionalExpressionOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/TernaryOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-public class WhileOpWrapper extends LoopOpWrapper<JavaOp.JavaWhileOp> {\n+public class WhileOpWrapper extends LoopOpWrapper<JavaOp.WhileOp> {\n@@ -34,1 +34,1 @@\n-    WhileOpWrapper( MethodHandles.Lookup lookup,JavaOp.JavaWhileOp op) {\n+    WhileOpWrapper( MethodHandles.Lookup lookup,JavaOp.WhileOp op) {\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/WhileOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,1 +270,0 @@\n-    @OpFactory.OpDeclaration(PtrToMember.NAME)\n@@ -367,1 +366,0 @@\n-    @OpFactory.OpDeclaration(PtrToMember.NAME)\n@@ -405,1 +403,0 @@\n-    @OpFactory.OpDeclaration(PtrToMember.NAME)\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/LayoutExample.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/QuotedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -650,1 +650,1 @@\n-            block.op(value != null ? _return(value) : _return());\n+            block.op(value != null ? return_(value) : CoreOp.return_());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-            b.op(CoreOp._return(q));\n+            b.op(CoreOp.return_(q));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                Op.Result builder = block.apply(JavaOp._new(ConstructorRef.constructor(J_L_STRING_BUILDER)));\n+                Op.Result builder = block.apply(JavaOp.new_(ConstructorRef.constructor(J_L_STRING_BUILDER)));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/StringConcatTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                    op(CoreOp._return());\n+                    op(CoreOp.return_());\n@@ -297,1 +297,1 @@\n-                    op(CoreOp._return(stack.pop()));\n+                    op(CoreOp.return_(stack.pop()));\n@@ -301,1 +301,1 @@\n-                    op(JavaOp._throw(stack.pop()));\n+                    op(JavaOp.throw_(stack.pop()));\n@@ -436,1 +436,1 @@\n-                                yield op(JavaOp._new(\n+                                yield op(JavaOp.new_(\n@@ -493,1 +493,1 @@\n-                                eb.op(ret.type().equals(JavaType.VOID) ? CoreOp._return() : CoreOp._return(ret));\n+                                eb.op(ret.type().equals(JavaType.VOID) ? CoreOp.return_() : CoreOp.return_(ret));\n@@ -589,1 +589,1 @@\n-                    stack.push(op(JavaOp._new(\n+                    stack.push(op(JavaOp.new_(\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeLift.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1372,1 +1372,1 @@\n-        block.op(_yield(\n+        block.op(core_yield(\n@@ -1436,2 +1436,2 @@\n-    public static ReturnOp _return() {\n-        return _return(null);\n+    public static ReturnOp return_() {\n+        return return_(null);\n@@ -1446,1 +1446,1 @@\n-    public static ReturnOp _return(Value returnValue) {\n+    public static ReturnOp return_(Value returnValue) {\n@@ -1464,1 +1464,1 @@\n-    public static YieldOp _yield() {\n+    public static YieldOp core_yield() {\n@@ -1474,1 +1474,1 @@\n-    public static YieldOp _yield(Value yieldValue) {\n+    public static YieldOp core_yield(Value yieldValue) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            JavaConditionalExpressionOp,\n+            ConditionalExpressionOp,\n@@ -97,1 +97,1 @@\n-            JavaSwitchExpressionOp {\n+            SwitchExpressionOp {\n@@ -113,5 +113,5 @@\n-            JavaBlockOp,\n-            JavaDoWhileOp,\n-            JavaEnhancedForOp,\n-            JavaForOp,\n-            JavaIfOp,\n+            BlockOp,\n+            DoWhileOp,\n+            EnhancedForOp,\n+            ForOp,\n+            IfOp,\n@@ -119,6 +119,6 @@\n-            JavaLabeledOp,\n-            JavaSynchronizedOp,\n-            JavaTryOp,\n-            JavaWhileOp,\n-            JavaYieldOp,\n-            JavaSwitchStatementOp {\n+            LabeledOp,\n+            SynchronizedOp,\n+            TryOp,\n+            WhileOp,\n+            YieldOp,\n+            SwitchStatementOp {\n@@ -2011,1 +2011,1 @@\n-            } while (!(op instanceof Op.Loop || op instanceof JavaSwitchStatementOp));\n+            } while (!(op instanceof Op.Loop || op instanceof SwitchStatementOp));\n@@ -2015,1 +2015,1 @@\n-                case JavaSwitchStatementOp swStat -> swStat.bodies().contains(b) ? op : null;\n+                case SwitchStatementOp swStat -> swStat.bodies().contains(b) ? op : null;\n@@ -2032,1 +2032,1 @@\n-            if (value instanceof Result r && r.op().ancestorBody().parentOp() instanceof JavaLabeledOp lop) {\n+            if (value instanceof Result r && r.op().ancestorBody().parentOp() instanceof LabeledOp lop) {\n@@ -2059,2 +2059,2 @@\n-    @OpDeclaration(JavaBreakOp.NAME)\n-    public static final class JavaBreakOp extends JavaLabelOp {\n+    @OpDeclaration(BreakOp.NAME)\n+    public static final class BreakOp extends JavaLabelOp {\n@@ -2063,1 +2063,1 @@\n-        JavaBreakOp(ExternalizedOp def) {\n+        BreakOp(ExternalizedOp def) {\n@@ -2067,1 +2067,1 @@\n-        JavaBreakOp(JavaBreakOp that, CopyContext cc) {\n+        BreakOp(BreakOp that, CopyContext cc) {\n@@ -2072,2 +2072,2 @@\n-        public JavaBreakOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaBreakOp(this, cc);\n+        public BreakOp transform(CopyContext cc, OpTransformer ot) {\n+            return new BreakOp(this, cc);\n@@ -2076,1 +2076,1 @@\n-        JavaBreakOp(Value label) {\n+        BreakOp(Value label) {\n@@ -2089,2 +2089,2 @@\n-    @OpDeclaration(JavaContinueOp.NAME)\n-    public static final class JavaContinueOp extends JavaLabelOp {\n+    @OpDeclaration(ContinueOp.NAME)\n+    public static final class ContinueOp extends JavaLabelOp {\n@@ -2093,1 +2093,1 @@\n-        JavaContinueOp(ExternalizedOp def) {\n+        ContinueOp(ExternalizedOp def) {\n@@ -2097,1 +2097,1 @@\n-        JavaContinueOp(JavaContinueOp that, CopyContext cc) {\n+        ContinueOp(ContinueOp that, CopyContext cc) {\n@@ -2102,2 +2102,2 @@\n-        public JavaContinueOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaContinueOp(this, cc);\n+        public ContinueOp transform(CopyContext cc, OpTransformer ot) {\n+            return new ContinueOp(this, cc);\n@@ -2106,1 +2106,1 @@\n-        JavaContinueOp(Value label) {\n+        ContinueOp(Value label) {\n@@ -2140,2 +2140,2 @@\n-    @OpDeclaration(JavaYieldOp.NAME)\n-    public static final class JavaYieldOp extends JavaOp\n+    @OpDeclaration(YieldOp.NAME)\n+    public static final class YieldOp extends JavaOp\n@@ -2145,1 +2145,1 @@\n-        JavaYieldOp(ExternalizedOp def) {\n+        YieldOp(ExternalizedOp def) {\n@@ -2153,1 +2153,1 @@\n-        JavaYieldOp(JavaYieldOp that, CopyContext cc) {\n+        YieldOp(YieldOp that, CopyContext cc) {\n@@ -2158,2 +2158,2 @@\n-        public JavaYieldOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaYieldOp(this, cc);\n+        public YieldOp transform(CopyContext cc, OpTransformer ot) {\n+            return new YieldOp(this, cc);\n@@ -2162,1 +2162,1 @@\n-        JavaYieldOp(Value operand) {\n+        YieldOp(Value operand) {\n@@ -2210,1 +2210,1 @@\n-            } while (!(op instanceof JavaSwitchExpressionOp));\n+            } while (!(op instanceof SwitchExpressionOp));\n@@ -2218,2 +2218,2 @@\n-    @OpDeclaration(JavaBlockOp.NAME)\n-    public static final class JavaBlockOp extends JavaOp\n+    @OpDeclaration(BlockOp.NAME)\n+    public static final class BlockOp extends JavaOp\n@@ -2225,1 +2225,1 @@\n-        JavaBlockOp(ExternalizedOp def) {\n+        BlockOp(ExternalizedOp def) {\n@@ -2233,1 +2233,1 @@\n-        JavaBlockOp(JavaBlockOp that, CopyContext cc, OpTransformer ot) {\n+        BlockOp(BlockOp that, CopyContext cc, OpTransformer ot) {\n@@ -2241,2 +2241,2 @@\n-        public JavaBlockOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaBlockOp(this, cc, ot);\n+        public BlockOp transform(CopyContext cc, OpTransformer ot) {\n+            return new BlockOp(this, cc, ot);\n@@ -2245,1 +2245,1 @@\n-        JavaBlockOp(Body.Builder bodyC) {\n+        BlockOp(Body.Builder bodyC) {\n@@ -2272,1 +2272,1 @@\n-                if (op instanceof YieldOp) {\n+                if (op instanceof CoreOp.YieldOp) {\n@@ -2297,2 +2297,2 @@\n-    @OpDeclaration(JavaSynchronizedOp.NAME)\n-    public static final class JavaSynchronizedOp extends JavaOp\n+    @OpDeclaration(SynchronizedOp.NAME)\n+    public static final class SynchronizedOp extends JavaOp\n@@ -2305,1 +2305,1 @@\n-        JavaSynchronizedOp(ExternalizedOp def) {\n+        SynchronizedOp(ExternalizedOp def) {\n@@ -2309,1 +2309,1 @@\n-        JavaSynchronizedOp(JavaSynchronizedOp that, CopyContext cc, OpTransformer ot) {\n+        SynchronizedOp(SynchronizedOp that, CopyContext cc, OpTransformer ot) {\n@@ -2318,2 +2318,2 @@\n-        public JavaSynchronizedOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaSynchronizedOp(this, cc, ot);\n+        public SynchronizedOp transform(CopyContext cc, OpTransformer ot) {\n+            return new SynchronizedOp(this, cc, ot);\n@@ -2322,1 +2322,1 @@\n-        JavaSynchronizedOp(Body.Builder exprC, Body.Builder bodyC) {\n+        SynchronizedOp(Body.Builder exprC, Body.Builder bodyC) {\n@@ -2388,1 +2388,1 @@\n-                if (op instanceof YieldOp) {\n+                if (op instanceof CoreOp.YieldOp) {\n@@ -2417,1 +2417,1 @@\n-            catcherFinallyRegionExit.op(_throw(t));\n+            catcherFinallyRegionExit.op(throw_(t));\n@@ -2425,1 +2425,1 @@\n-                if (op instanceof YieldOp yop) {\n+                if (op instanceof CoreOp.YieldOp yop) {\n@@ -2465,2 +2465,2 @@\n-    @OpDeclaration(JavaLabeledOp.NAME)\n-    public static final class JavaLabeledOp extends JavaOp\n+    @OpDeclaration(LabeledOp.NAME)\n+    public static final class LabeledOp extends JavaOp\n@@ -2472,1 +2472,1 @@\n-        JavaLabeledOp(ExternalizedOp def) {\n+        LabeledOp(ExternalizedOp def) {\n@@ -2480,1 +2480,1 @@\n-        JavaLabeledOp(JavaLabeledOp that, CopyContext cc, OpTransformer ot) {\n+        LabeledOp(LabeledOp that, CopyContext cc, OpTransformer ot) {\n@@ -2488,2 +2488,2 @@\n-        public JavaLabeledOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaLabeledOp(this, cc, ot);\n+        public LabeledOp transform(CopyContext cc, OpTransformer ot) {\n+            return new LabeledOp(this, cc, ot);\n@@ -2492,1 +2492,1 @@\n-        JavaLabeledOp(Body.Builder bodyC) {\n+        LabeledOp(Body.Builder bodyC) {\n@@ -2530,1 +2530,1 @@\n-                if (op instanceof YieldOp) {\n+                if (op instanceof CoreOp.YieldOp) {\n@@ -2555,2 +2555,2 @@\n-    @OpDeclaration(JavaIfOp.NAME)\n-    public static final class JavaIfOp extends JavaOp\n+    @OpDeclaration(IfOp.NAME)\n+    public static final class IfOp extends JavaOp\n@@ -2572,1 +2572,1 @@\n-            public ThenBuilder _if(Consumer<Block.Builder> c) {\n+            public ThenBuilder if_(Consumer<Block.Builder> c) {\n@@ -2600,1 +2600,1 @@\n-                body.entryBlock().op(_yield());\n+                body.entryBlock().op(core_yield());\n@@ -2624,1 +2624,1 @@\n-            public JavaIfOp _else(Consumer<Block.Builder> c) {\n+            public IfOp else_(Consumer<Block.Builder> c) {\n@@ -2629,1 +2629,1 @@\n-                return new JavaIfOp(bodies);\n+                return new IfOp(bodies);\n@@ -2632,1 +2632,1 @@\n-            public JavaIfOp _else() {\n+            public IfOp else_() {\n@@ -2634,1 +2634,1 @@\n-                body.entryBlock().op(_yield());\n+                body.entryBlock().op(core_yield());\n@@ -2637,1 +2637,1 @@\n-                return new JavaIfOp(bodies);\n+                return new IfOp(bodies);\n@@ -2645,1 +2645,1 @@\n-        JavaIfOp(ExternalizedOp def) {\n+        IfOp(ExternalizedOp def) {\n@@ -2653,1 +2653,1 @@\n-        JavaIfOp(JavaIfOp that, CopyContext cc, OpTransformer ot) {\n+        IfOp(IfOp that, CopyContext cc, OpTransformer ot) {\n@@ -2662,2 +2662,2 @@\n-        public JavaIfOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaIfOp(this, cc, ot);\n+        public IfOp transform(CopyContext cc, OpTransformer ot) {\n+            return new IfOp(this, cc, ot);\n@@ -2666,1 +2666,1 @@\n-        JavaIfOp(List<Body.Builder> bodyCs) {\n+        IfOp(List<Body.Builder> bodyCs) {\n@@ -2675,1 +2675,1 @@\n-                end.entryBlock().op(_yield());\n+                end.entryBlock().op(core_yield());\n@@ -2737,1 +2737,1 @@\n-                        if (op instanceof YieldOp yo) {\n+                        if (op instanceof CoreOp.YieldOp yo) {\n@@ -2751,1 +2751,1 @@\n-                    if (op instanceof YieldOp) {\n+                    if (op instanceof CoreOp.YieldOp) {\n@@ -2775,1 +2775,1 @@\n-            permits JavaSwitchStatementOp, JavaSwitchExpressionOp {\n+            permits SwitchStatementOp, SwitchExpressionOp {\n@@ -2811,2 +2811,2 @@\n-                throwBlock.op(_throw(\n-                        throwBlock.op(_new(ConstructorRef.constructor(NullPointerException.class)))\n+                throwBlock.op(throw_(\n+                        throwBlock.op(new_(ConstructorRef.constructor(NullPointerException.class)))\n@@ -2838,1 +2838,1 @@\n-                if (this instanceof JavaSwitchExpressionOp) {\n+                if (this instanceof SwitchExpressionOp) {\n@@ -2859,1 +2859,1 @@\n-                            case YieldOp yop when isLastLabel && this instanceof JavaSwitchExpressionOp -> {\n+                            case CoreOp.YieldOp yop when isLastLabel && this instanceof SwitchExpressionOp -> {\n@@ -2862,1 +2862,1 @@\n-                            case YieldOp yop -> block.op(conditionalBranch(\n+                            case CoreOp.YieldOp yop -> block.op(conditionalBranch(\n@@ -2875,2 +2875,2 @@\n-                            case YieldOp yop when this instanceof JavaSwitchStatementOp -> block.op(branch(exit.successor()));\n-                            case YieldOp yop when this instanceof JavaSwitchExpressionOp -> block.op(branch(exit.successor(block.context().getValue(yop.yieldValue()))));\n+                            case CoreOp.YieldOp yop when this instanceof SwitchStatementOp -> block.op(branch(exit.successor()));\n+                            case CoreOp.YieldOp yop when this instanceof SwitchExpressionOp -> block.op(branch(exit.successor(block.context().getValue(yop.yieldValue()))));\n@@ -2904,1 +2904,1 @@\n-                if (terminatingOp instanceof YieldOp yieldOp &&\n+                if (terminatingOp instanceof CoreOp.YieldOp yieldOp &&\n@@ -2919,2 +2919,2 @@\n-    @OpDeclaration(JavaSwitchExpressionOp.NAME)\n-    public static final class JavaSwitchExpressionOp extends JavaSwitchOp\n+    @OpDeclaration(SwitchExpressionOp.NAME)\n+    public static final class SwitchExpressionOp extends JavaSwitchOp\n@@ -2926,1 +2926,1 @@\n-        JavaSwitchExpressionOp(ExternalizedOp def) {\n+        SwitchExpressionOp(ExternalizedOp def) {\n@@ -2930,1 +2930,1 @@\n-        JavaSwitchExpressionOp(JavaSwitchExpressionOp that, CopyContext cc, OpTransformer ot) {\n+        SwitchExpressionOp(SwitchExpressionOp that, CopyContext cc, OpTransformer ot) {\n@@ -2937,2 +2937,2 @@\n-        public JavaSwitchExpressionOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaSwitchExpressionOp(this, cc, ot);\n+        public SwitchExpressionOp transform(CopyContext cc, OpTransformer ot) {\n+            return new SwitchExpressionOp(this, cc, ot);\n@@ -2941,1 +2941,1 @@\n-        JavaSwitchExpressionOp(TypeElement resultType, Value target, List<Body.Builder> bodyCs) {\n+        SwitchExpressionOp(TypeElement resultType, Value target, List<Body.Builder> bodyCs) {\n@@ -2956,2 +2956,2 @@\n-    @OpDeclaration(JavaSwitchStatementOp.NAME)\n-    public static final class JavaSwitchStatementOp extends JavaSwitchOp\n+    @OpDeclaration(SwitchStatementOp.NAME)\n+    public static final class SwitchStatementOp extends JavaSwitchOp\n@@ -2961,1 +2961,1 @@\n-        JavaSwitchStatementOp(ExternalizedOp def) {\n+        SwitchStatementOp(ExternalizedOp def) {\n@@ -2965,1 +2965,1 @@\n-        JavaSwitchStatementOp(JavaSwitchStatementOp that, CopyContext cc, OpTransformer ot) {\n+        SwitchStatementOp(SwitchStatementOp that, CopyContext cc, OpTransformer ot) {\n@@ -2970,2 +2970,2 @@\n-        public JavaSwitchStatementOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaSwitchStatementOp(this, cc, ot);\n+        public SwitchStatementOp transform(CopyContext cc, OpTransformer ot) {\n+            return new SwitchStatementOp(this, cc, ot);\n@@ -2974,1 +2974,1 @@\n-        JavaSwitchStatementOp(Value target, List<Body.Builder> bodyCs) {\n+        SwitchStatementOp(Value target, List<Body.Builder> bodyCs) {\n@@ -2988,2 +2988,2 @@\n-    @OpDeclaration(JavaSwitchFallthroughOp.NAME)\n-    public static final class JavaSwitchFallthroughOp extends JavaOp\n+    @OpDeclaration(SwitchFallthroughOp.NAME)\n+    public static final class SwitchFallthroughOp extends JavaOp\n@@ -2993,1 +2993,1 @@\n-        JavaSwitchFallthroughOp(ExternalizedOp def) {\n+        SwitchFallthroughOp(ExternalizedOp def) {\n@@ -2997,1 +2997,1 @@\n-        JavaSwitchFallthroughOp(JavaSwitchFallthroughOp that, CopyContext cc) {\n+        SwitchFallthroughOp(SwitchFallthroughOp that, CopyContext cc) {\n@@ -3002,2 +3002,2 @@\n-        public JavaSwitchFallthroughOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaSwitchFallthroughOp(this, cc);\n+        public SwitchFallthroughOp transform(CopyContext cc, OpTransformer ot) {\n+            return new SwitchFallthroughOp(this, cc);\n@@ -3006,1 +3006,1 @@\n-        JavaSwitchFallthroughOp() {\n+        SwitchFallthroughOp() {\n@@ -3034,2 +3034,2 @@\n-    @OpDeclaration(JavaForOp.NAME)\n-    public static final class JavaForOp extends JavaOp\n+    @OpDeclaration(ForOp.NAME)\n+    public static final class ForOp extends JavaOp\n@@ -3048,1 +3048,1 @@\n-            public JavaForOp.CondBuilder init(Consumer<Block.Builder> c) {\n+            public ForOp.CondBuilder init(Consumer<Block.Builder> c) {\n@@ -3070,1 +3070,1 @@\n-            public JavaForOp.UpdateBuilder cond(Consumer<Block.Builder> c) {\n+            public ForOp.UpdateBuilder cond(Consumer<Block.Builder> c) {\n@@ -3094,1 +3094,1 @@\n-            public JavaForOp.BodyBuilder cond(Consumer<Block.Builder> c) {\n+            public ForOp.BodyBuilder cond(Consumer<Block.Builder> c) {\n@@ -3121,1 +3121,1 @@\n-            public JavaForOp body(Consumer<Block.Builder> c) {\n+            public ForOp body(Consumer<Block.Builder> c) {\n@@ -3126,1 +3126,1 @@\n-                return new JavaForOp(init, cond, update, body);\n+                return new ForOp(init, cond, update, body);\n@@ -3137,2 +3137,2 @@\n-        static JavaForOp create(ExternalizedOp def) {\n-            return new JavaForOp(def);\n+        static ForOp create(ExternalizedOp def) {\n+            return new ForOp(def);\n@@ -3141,1 +3141,1 @@\n-        JavaForOp(ExternalizedOp def) {\n+        ForOp(ExternalizedOp def) {\n@@ -3148,1 +3148,1 @@\n-        JavaForOp(JavaForOp that, CopyContext cc, OpTransformer ot) {\n+        ForOp(ForOp that, CopyContext cc, OpTransformer ot) {\n@@ -3158,2 +3158,2 @@\n-        public JavaForOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaForOp(this, cc, ot);\n+        public ForOp transform(CopyContext cc, OpTransformer ot) {\n+            return new ForOp(this, cc, ot);\n@@ -3162,4 +3162,4 @@\n-        JavaForOp(Body.Builder initC,\n-                  Body.Builder condC,\n-                  Body.Builder updateC,\n-                  Body.Builder bodyC) {\n+        ForOp(Body.Builder initC,\n+              Body.Builder condC,\n+              Body.Builder updateC,\n+              Body.Builder bodyC) {\n@@ -3219,1 +3219,1 @@\n-                            op.result().uses().stream().allMatch(r -> r.op() instanceof YieldOp);\n+                            op.result().uses().stream().allMatch(r -> r.op() instanceof CoreOp.YieldOp);\n@@ -3223,1 +3223,1 @@\n-                } else if (op instanceof YieldOp yop) {\n+                } else if (op instanceof CoreOp.YieldOp yop) {\n@@ -3246,1 +3246,1 @@\n-                if (op instanceof YieldOp yo) {\n+                if (op instanceof CoreOp.YieldOp yo) {\n@@ -3271,1 +3271,1 @@\n-                if (op instanceof YieldOp) {\n+                if (op instanceof CoreOp.YieldOp) {\n@@ -3292,2 +3292,2 @@\n-    @OpDeclaration(JavaEnhancedForOp.NAME)\n-    public static final class JavaEnhancedForOp extends JavaOp\n+    @OpDeclaration(EnhancedForOp.NAME)\n+    public static final class EnhancedForOp extends JavaOp\n@@ -3356,1 +3356,1 @@\n-            public JavaEnhancedForOp body(Consumer<Block.Builder> c) {\n+            public EnhancedForOp body(Consumer<Block.Builder> c) {\n@@ -3361,1 +3361,1 @@\n-                return new JavaEnhancedForOp(expression, definition, body);\n+                return new EnhancedForOp(expression, definition, body);\n@@ -3371,2 +3371,2 @@\n-        static JavaEnhancedForOp create(ExternalizedOp def) {\n-            return new JavaEnhancedForOp(def);\n+        static EnhancedForOp create(ExternalizedOp def) {\n+            return new EnhancedForOp(def);\n@@ -3375,1 +3375,1 @@\n-        JavaEnhancedForOp(ExternalizedOp def) {\n+        EnhancedForOp(ExternalizedOp def) {\n@@ -3381,1 +3381,1 @@\n-        JavaEnhancedForOp(JavaEnhancedForOp that, CopyContext cc, OpTransformer ot) {\n+        EnhancedForOp(EnhancedForOp that, CopyContext cc, OpTransformer ot) {\n@@ -3390,2 +3390,2 @@\n-        public JavaEnhancedForOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaEnhancedForOp(this, cc, ot);\n+        public EnhancedForOp transform(CopyContext cc, OpTransformer ot) {\n+            return new EnhancedForOp(this, cc, ot);\n@@ -3394,1 +3394,1 @@\n-        JavaEnhancedForOp(Body.Builder expressionC, Body.Builder initC, Body.Builder bodyC) {\n+        EnhancedForOp(Body.Builder expressionC, Body.Builder initC, Body.Builder bodyC) {\n@@ -3456,1 +3456,1 @@\n-                if (op instanceof YieldOp yop) {\n+                if (op instanceof CoreOp.YieldOp yop) {\n@@ -3480,1 +3480,1 @@\n-                    if (op instanceof YieldOp yop) {\n+                    if (op instanceof CoreOp.YieldOp yop) {\n@@ -3516,1 +3516,1 @@\n-                    if (op instanceof YieldOp yop) {\n+                    if (op instanceof CoreOp.YieldOp yop) {\n@@ -3551,2 +3551,2 @@\n-    @OpDeclaration(JavaWhileOp.NAME)\n-    public static final class JavaWhileOp extends JavaOp\n+    @OpDeclaration(WhileOp.NAME)\n+    public static final class WhileOp extends JavaOp\n@@ -3562,1 +3562,1 @@\n-            public JavaWhileOp.BodyBuilder predicate(Consumer<Block.Builder> c) {\n+            public WhileOp.BodyBuilder predicate(Consumer<Block.Builder> c) {\n@@ -3566,1 +3566,1 @@\n-                return new JavaWhileOp.BodyBuilder(ancestorBody, body);\n+                return new WhileOp.BodyBuilder(ancestorBody, body);\n@@ -3579,1 +3579,1 @@\n-            public JavaWhileOp body(Consumer<Block.Builder> c) {\n+            public WhileOp body(Consumer<Block.Builder> c) {\n@@ -3583,1 +3583,1 @@\n-                return new JavaWhileOp(List.of(predicate, body));\n+                return new WhileOp(List.of(predicate, body));\n@@ -3591,1 +3591,1 @@\n-        JavaWhileOp(ExternalizedOp def) {\n+        WhileOp(ExternalizedOp def) {\n@@ -3595,1 +3595,1 @@\n-        JavaWhileOp(List<Body.Builder> bodyCs) {\n+        WhileOp(List<Body.Builder> bodyCs) {\n@@ -3601,1 +3601,1 @@\n-        JavaWhileOp(Body.Builder predicate, Body.Builder body) {\n+        WhileOp(Body.Builder predicate, Body.Builder body) {\n@@ -3622,1 +3622,1 @@\n-        JavaWhileOp(JavaWhileOp that, CopyContext cc, OpTransformer ot) {\n+        WhileOp(WhileOp that, CopyContext cc, OpTransformer ot) {\n@@ -3630,2 +3630,2 @@\n-        public JavaWhileOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaWhileOp(this, cc, ot);\n+        public WhileOp transform(CopyContext cc, OpTransformer ot) {\n+            return new WhileOp(this, cc, ot);\n@@ -3694,2 +3694,2 @@\n-    @OpDeclaration(JavaDoWhileOp.NAME)\n-    public static final class JavaDoWhileOp extends JavaOp\n+    @OpDeclaration(DoWhileOp.NAME)\n+    public static final class DoWhileOp extends JavaOp\n@@ -3707,1 +3707,1 @@\n-            public JavaDoWhileOp predicate(Consumer<Block.Builder> c) {\n+            public DoWhileOp predicate(Consumer<Block.Builder> c) {\n@@ -3711,1 +3711,1 @@\n-                return new JavaDoWhileOp(List.of(body, predicate));\n+                return new DoWhileOp(List.of(body, predicate));\n@@ -3722,1 +3722,1 @@\n-            public JavaDoWhileOp.PredicateBuilder body(Consumer<Block.Builder> c) {\n+            public DoWhileOp.PredicateBuilder body(Consumer<Block.Builder> c) {\n@@ -3726,1 +3726,1 @@\n-                return new JavaDoWhileOp.PredicateBuilder(ancestorBody, body);\n+                return new DoWhileOp.PredicateBuilder(ancestorBody, body);\n@@ -3734,1 +3734,1 @@\n-        JavaDoWhileOp(ExternalizedOp def) {\n+        DoWhileOp(ExternalizedOp def) {\n@@ -3738,1 +3738,1 @@\n-        JavaDoWhileOp(List<Body.Builder> bodyCs) {\n+        DoWhileOp(List<Body.Builder> bodyCs) {\n@@ -3744,1 +3744,1 @@\n-        JavaDoWhileOp(Body.Builder body, Body.Builder predicate) {\n+        DoWhileOp(Body.Builder body, Body.Builder predicate) {\n@@ -3764,1 +3764,1 @@\n-        JavaDoWhileOp(JavaDoWhileOp that, CopyContext cc, OpTransformer ot) {\n+        DoWhileOp(DoWhileOp that, CopyContext cc, OpTransformer ot) {\n@@ -3772,2 +3772,2 @@\n-        public JavaDoWhileOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaDoWhileOp(this, cc, ot);\n+        public DoWhileOp transform(CopyContext cc, OpTransformer ot) {\n+            return new DoWhileOp(this, cc, ot);\n@@ -3899,1 +3899,1 @@\n-                            if (cop instanceof JavaConditionalAndOp) {\n+                            if (cop instanceof ConditionalAndOp) {\n@@ -3936,2 +3936,2 @@\n-    @OpDeclaration(JavaConditionalAndOp.NAME)\n-    public static final class JavaConditionalAndOp extends JavaConditionalOp {\n+    @OpDeclaration(ConditionalAndOp.NAME)\n+    public static final class ConditionalAndOp extends JavaConditionalOp {\n@@ -3958,2 +3958,2 @@\n-            public JavaConditionalAndOp build() {\n-                return new JavaConditionalAndOp(bodies);\n+            public ConditionalAndOp build() {\n+                return new ConditionalAndOp(bodies);\n@@ -3965,1 +3965,1 @@\n-        JavaConditionalAndOp(ExternalizedOp def) {\n+        ConditionalAndOp(ExternalizedOp def) {\n@@ -3969,1 +3969,1 @@\n-        JavaConditionalAndOp(JavaConditionalAndOp that, CopyContext cc, OpTransformer ot) {\n+        ConditionalAndOp(ConditionalAndOp that, CopyContext cc, OpTransformer ot) {\n@@ -3974,2 +3974,2 @@\n-        public JavaConditionalAndOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaConditionalAndOp(this, cc, ot);\n+        public ConditionalAndOp transform(CopyContext cc, OpTransformer ot) {\n+            return new ConditionalAndOp(this, cc, ot);\n@@ -3978,1 +3978,1 @@\n-        JavaConditionalAndOp(List<Body.Builder> bodyCs) {\n+        ConditionalAndOp(List<Body.Builder> bodyCs) {\n@@ -3991,2 +3991,2 @@\n-    @OpDeclaration(JavaConditionalOrOp.NAME)\n-    public static final class JavaConditionalOrOp extends JavaConditionalOp {\n+    @OpDeclaration(ConditionalOrOp.NAME)\n+    public static final class ConditionalOrOp extends JavaConditionalOp {\n@@ -4013,2 +4013,2 @@\n-            public JavaConditionalOrOp build() {\n-                return new JavaConditionalOrOp(bodies);\n+            public ConditionalOrOp build() {\n+                return new ConditionalOrOp(bodies);\n@@ -4020,1 +4020,1 @@\n-        JavaConditionalOrOp(ExternalizedOp def) {\n+        ConditionalOrOp(ExternalizedOp def) {\n@@ -4024,1 +4024,1 @@\n-        JavaConditionalOrOp(JavaConditionalOrOp that, CopyContext cc, OpTransformer ot) {\n+        ConditionalOrOp(ConditionalOrOp that, CopyContext cc, OpTransformer ot) {\n@@ -4029,2 +4029,2 @@\n-        public JavaConditionalOrOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaConditionalOrOp(this, cc, ot);\n+        public ConditionalOrOp transform(CopyContext cc, OpTransformer ot) {\n+            return new ConditionalOrOp(this, cc, ot);\n@@ -4033,1 +4033,1 @@\n-        JavaConditionalOrOp(List<Body.Builder> bodyCs) {\n+        ConditionalOrOp(List<Body.Builder> bodyCs) {\n@@ -4046,2 +4046,2 @@\n-    @OpDeclaration(JavaConditionalExpressionOp.NAME)\n-    public static final class JavaConditionalExpressionOp extends JavaOp\n+    @OpDeclaration(ConditionalExpressionOp.NAME)\n+    public static final class ConditionalExpressionOp extends JavaOp\n@@ -4056,1 +4056,1 @@\n-        JavaConditionalExpressionOp(ExternalizedOp def) {\n+        ConditionalExpressionOp(ExternalizedOp def) {\n@@ -4064,1 +4064,1 @@\n-        JavaConditionalExpressionOp(JavaConditionalExpressionOp that, CopyContext cc, OpTransformer ot) {\n+        ConditionalExpressionOp(ConditionalExpressionOp that, CopyContext cc, OpTransformer ot) {\n@@ -4074,2 +4074,2 @@\n-        public JavaConditionalExpressionOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaConditionalExpressionOp(this, cc, ot);\n+        public ConditionalExpressionOp transform(CopyContext cc, OpTransformer ot) {\n+            return new ConditionalExpressionOp(this, cc, ot);\n@@ -4078,1 +4078,1 @@\n-        JavaConditionalExpressionOp(TypeElement expressionType, List<Body.Builder> bodyCs) {\n+        ConditionalExpressionOp(TypeElement expressionType, List<Body.Builder> bodyCs) {\n@@ -4109,1 +4109,1 @@\n-                if (op instanceof YieldOp yo) {\n+                if (op instanceof CoreOp.YieldOp yo) {\n@@ -4123,1 +4123,1 @@\n-                    if (op instanceof YieldOp yop) {\n+                    if (op instanceof CoreOp.YieldOp yop) {\n@@ -4147,2 +4147,2 @@\n-    @OpDeclaration(JavaTryOp.NAME)\n-    public static final class JavaTryOp extends JavaOp\n+    @OpDeclaration(TryOp.NAME)\n+    public static final class TryOp extends JavaOp\n@@ -4185,1 +4185,1 @@\n-            public CatchBuilder _catch(TypeElement exceptionType, Consumer<Block.Builder> c) {\n+            public CatchBuilder catch_(TypeElement exceptionType, Consumer<Block.Builder> c) {\n@@ -4194,1 +4194,1 @@\n-            public JavaTryOp _finally(Consumer<Block.Builder> c) {\n+            public TryOp finally_(Consumer<Block.Builder> c) {\n@@ -4198,1 +4198,1 @@\n-                return new JavaTryOp(resources, body, catchers, _finally);\n+                return new TryOp(resources, body, catchers, _finally);\n@@ -4201,2 +4201,2 @@\n-            public JavaTryOp noFinalizer() {\n-                return new JavaTryOp(resources, body, catchers, null);\n+            public TryOp noFinalizer() {\n+                return new TryOp(resources, body, catchers, null);\n@@ -4213,2 +4213,2 @@\n-        static JavaTryOp create(ExternalizedOp def) {\n-            return new JavaTryOp(def);\n+        static TryOp create(ExternalizedOp def) {\n+            return new TryOp(def);\n@@ -4217,1 +4217,1 @@\n-        JavaTryOp(ExternalizedOp def) {\n+        TryOp(ExternalizedOp def) {\n@@ -4244,1 +4244,1 @@\n-        JavaTryOp(JavaTryOp that, CopyContext cc, OpTransformer ot) {\n+        TryOp(TryOp that, CopyContext cc, OpTransformer ot) {\n@@ -4264,2 +4264,2 @@\n-        public JavaTryOp transform(CopyContext cc, OpTransformer ot) {\n-            return new JavaTryOp(this, cc, ot);\n+        public TryOp transform(CopyContext cc, OpTransformer ot) {\n+            return new TryOp(this, cc, ot);\n@@ -4268,4 +4268,4 @@\n-        JavaTryOp(Body.Builder resourcesC,\n-                  Body.Builder bodyC,\n-                  List<Body.Builder> catchersC,\n-                  Body.Builder finalizerC) {\n+        TryOp(Body.Builder resourcesC,\n+              Body.Builder bodyC,\n+              List<Body.Builder> catchersC,\n+              Body.Builder finalizerC) {\n@@ -4356,1 +4356,1 @@\n-                    if (op instanceof YieldOp) {\n+                    if (op instanceof CoreOp.YieldOp) {\n@@ -4418,1 +4418,1 @@\n-                if (op instanceof YieldOp) {\n+                if (op instanceof CoreOp.YieldOp) {\n@@ -4471,1 +4471,1 @@\n-                        if (op instanceof YieldOp) {\n+                        if (op instanceof CoreOp.YieldOp) {\n@@ -4493,1 +4493,1 @@\n-                        if (op instanceof YieldOp) {\n+                        if (op instanceof CoreOp.YieldOp) {\n@@ -4511,1 +4511,1 @@\n-                    if (op instanceof YieldOp) {\n+                    if (op instanceof CoreOp.YieldOp) {\n@@ -4531,2 +4531,2 @@\n-                    if (op instanceof YieldOp) {\n-                        block.op(_throw(t));\n+                    if (op instanceof CoreOp.YieldOp) {\n+                        block.op(throw_(t));\n@@ -4570,1 +4570,1 @@\n-                if (op2 instanceof YieldOp) {\n+                if (op2 instanceof CoreOp.YieldOp) {\n@@ -4908,1 +4908,1 @@\n-                    if (op instanceof YieldOp) {\n+                    if (op instanceof CoreOp.YieldOp) {\n@@ -5110,18 +5110,18 @@\n-            case \"java.block\" -> new JavaBlockOp(def);\n-            case \"java.break\" -> new JavaBreakOp(def);\n-            case \"java.cand\" -> new JavaConditionalAndOp(def);\n-            case \"java.cexpression\" -> new JavaConditionalExpressionOp(def);\n-            case \"java.continue\" -> new JavaContinueOp(def);\n-            case \"java.cor\" -> new JavaConditionalOrOp(def);\n-            case \"java.do.while\" -> new JavaDoWhileOp(def);\n-            case \"java.enhancedFor\" -> JavaEnhancedForOp.create(def);\n-            case \"java.for\" -> JavaForOp.create(def);\n-            case \"java.if\" -> new JavaIfOp(def);\n-            case \"java.labeled\" -> new JavaLabeledOp(def);\n-            case \"java.switch.expression\" -> new JavaSwitchExpressionOp(def);\n-            case \"java.switch.fallthrough\" -> new JavaSwitchFallthroughOp(def);\n-            case \"java.switch.statement\" -> new JavaSwitchStatementOp(def);\n-            case \"java.synchronized\" -> new JavaSynchronizedOp(def);\n-            case \"java.try\" -> JavaTryOp.create(def);\n-            case \"java.while\" -> new JavaWhileOp(def);\n-            case \"java.yield\" -> new JavaYieldOp(def);\n+            case \"java.block\" -> new BlockOp(def);\n+            case \"java.break\" -> new BreakOp(def);\n+            case \"java.cand\" -> new ConditionalAndOp(def);\n+            case \"java.cexpression\" -> new ConditionalExpressionOp(def);\n+            case \"java.continue\" -> new ContinueOp(def);\n+            case \"java.cor\" -> new ConditionalOrOp(def);\n+            case \"java.do.while\" -> new DoWhileOp(def);\n+            case \"java.enhancedFor\" -> EnhancedForOp.create(def);\n+            case \"java.for\" -> ForOp.create(def);\n+            case \"java.if\" -> new IfOp(def);\n+            case \"java.labeled\" -> new LabeledOp(def);\n+            case \"java.switch.expression\" -> new SwitchExpressionOp(def);\n+            case \"java.switch.fallthrough\" -> new SwitchFallthroughOp(def);\n+            case \"java.switch.statement\" -> new SwitchStatementOp(def);\n+            case \"java.synchronized\" -> new SynchronizedOp(def);\n+            case \"java.try\" -> TryOp.create(def);\n+            case \"java.while\" -> new WhileOp(def);\n+            case \"java.yield\" -> new YieldOp(def);\n@@ -5251,1 +5251,1 @@\n-    public static ThrowOp _throw(Value exceptionValue) {\n+    public static ThrowOp throw_(Value exceptionValue) {\n@@ -5261,1 +5261,1 @@\n-    public static AssertOp _assert(List<Body.Builder> bodies) {\n+    public static AssertOp assert_(List<Body.Builder> bodies) {\n@@ -5395,2 +5395,2 @@\n-    public static NewOp _new(ConstructorRef constructorDescriptor, Value... args) {\n-        return _new(constructorDescriptor, List.of(args));\n+    public static NewOp new_(ConstructorRef constructorDescriptor, Value... args) {\n+        return new_(constructorDescriptor, List.of(args));\n@@ -5406,1 +5406,1 @@\n-    public static NewOp _new(ConstructorRef constructorDescriptor, List<Value> args) {\n+    public static NewOp new_(ConstructorRef constructorDescriptor, List<Value> args) {\n@@ -5418,1 +5418,1 @@\n-    public static NewOp _new(TypeElement returnType, ConstructorRef constructorDescriptor,\n+    public static NewOp new_(TypeElement returnType, ConstructorRef constructorDescriptor,\n@@ -5420,1 +5420,1 @@\n-        return _new(returnType, constructorDescriptor, List.of(args));\n+        return new_(returnType, constructorDescriptor, List.of(args));\n@@ -5431,1 +5431,1 @@\n-    public static NewOp _new(TypeElement returnType, ConstructorRef constructorDescriptor,\n+    public static NewOp new_(TypeElement returnType, ConstructorRef constructorDescriptor,\n@@ -5444,1 +5444,1 @@\n-    public static NewOp _new(boolean isVarargs, TypeElement returnType, ConstructorRef constructorDescriptor,\n+    public static NewOp new_(boolean isVarargs, TypeElement returnType, ConstructorRef constructorDescriptor,\n@@ -5458,1 +5458,1 @@\n-        return _new(constructorDescriptor, length);\n+        return new_(constructorDescriptor, length);\n@@ -5840,2 +5840,2 @@\n-    public static JavaContinueOp _continue() {\n-        return _continue(null);\n+    public static ContinueOp continue_() {\n+        return continue_(null);\n@@ -5850,2 +5850,2 @@\n-    public static JavaContinueOp _continue(Value label) {\n-        return new JavaContinueOp(label);\n+    public static ContinueOp continue_(Value label) {\n+        return new ContinueOp(label);\n@@ -5859,2 +5859,2 @@\n-    public static JavaBreakOp _break() {\n-        return _break(null);\n+    public static BreakOp break_() {\n+        return break_(null);\n@@ -5869,2 +5869,2 @@\n-    public static JavaBreakOp _break(Value label) {\n-        return new JavaBreakOp(label);\n+    public static BreakOp break_(Value label) {\n+        return new BreakOp(label);\n@@ -5878,1 +5878,1 @@\n-    public static JavaYieldOp java_yield() {\n+    public static YieldOp java_yield() {\n@@ -5888,2 +5888,2 @@\n-    public static JavaYieldOp java_yield(Value operand) {\n-        return new JavaYieldOp(operand);\n+    public static YieldOp java_yield(Value operand) {\n+        return new YieldOp(operand);\n@@ -5898,2 +5898,2 @@\n-    public static JavaBlockOp block(Body.Builder body) {\n-        return new JavaBlockOp(body);\n+    public static BlockOp block(Body.Builder body) {\n+        return new BlockOp(body);\n@@ -5909,2 +5909,2 @@\n-    public static JavaSynchronizedOp synchronized_(Body.Builder expr, Body.Builder blockBody) {\n-        return new JavaSynchronizedOp(expr, blockBody);\n+    public static SynchronizedOp synchronized_(Body.Builder expr, Body.Builder blockBody) {\n+        return new SynchronizedOp(expr, blockBody);\n@@ -5919,2 +5919,2 @@\n-    public static JavaLabeledOp labeled(Body.Builder body) {\n-        return new JavaLabeledOp(body);\n+    public static LabeledOp labeled(Body.Builder body) {\n+        return new LabeledOp(body);\n@@ -5930,2 +5930,2 @@\n-    public static JavaIfOp.IfBuilder _if(Body.Builder ancestorBody) {\n-        return new JavaIfOp.IfBuilder(ancestorBody);\n+    public static IfOp.IfBuilder if_(Body.Builder ancestorBody) {\n+        return new IfOp.IfBuilder(ancestorBody);\n@@ -5944,2 +5944,2 @@\n-    public static JavaIfOp _if(List<Body.Builder> bodies) {\n-        return new JavaIfOp(bodies);\n+    public static IfOp if_(List<Body.Builder> bodies) {\n+        return new IfOp(bodies);\n@@ -5957,2 +5957,2 @@\n-    public static JavaSwitchExpressionOp switchExpression(Value target, List<Body.Builder> bodies) {\n-        return new JavaSwitchExpressionOp(null, target, bodies);\n+    public static SwitchExpressionOp switchExpression(Value target, List<Body.Builder> bodies) {\n+        return new SwitchExpressionOp(null, target, bodies);\n@@ -5969,2 +5969,2 @@\n-    public static JavaSwitchExpressionOp switchExpression(TypeElement resultType, Value target,\n-                                                          List<Body.Builder> bodies) {\n+    public static SwitchExpressionOp switchExpression(TypeElement resultType, Value target,\n+                                                      List<Body.Builder> bodies) {\n@@ -5972,1 +5972,1 @@\n-        return new JavaSwitchExpressionOp(resultType, target, bodies);\n+        return new SwitchExpressionOp(resultType, target, bodies);\n@@ -5981,2 +5981,2 @@\n-    public static JavaSwitchStatementOp switchStatement(Value target, List<Body.Builder> bodies) {\n-        return new JavaSwitchStatementOp(target, bodies);\n+    public static SwitchStatementOp switchStatement(Value target, List<Body.Builder> bodies) {\n+        return new SwitchStatementOp(target, bodies);\n@@ -5990,2 +5990,2 @@\n-    public static JavaSwitchFallthroughOp switchFallthroughOp() {\n-        return new JavaSwitchFallthroughOp();\n+    public static SwitchFallthroughOp switchFallthroughOp() {\n+        return new SwitchFallthroughOp();\n@@ -6002,2 +6002,2 @@\n-    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, TypeElement... initTypes) {\n-        return _for(ancestorBody, List.of(initTypes));\n+    public static ForOp.InitBuilder for_(Body.Builder ancestorBody, TypeElement... initTypes) {\n+        return for_(ancestorBody, List.of(initTypes));\n@@ -6014,2 +6014,2 @@\n-    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, List<? extends TypeElement> initTypes) {\n-        return new JavaForOp.InitBuilder(ancestorBody, initTypes);\n+    public static ForOp.InitBuilder for_(Body.Builder ancestorBody, List<? extends TypeElement> initTypes) {\n+        return new ForOp.InitBuilder(ancestorBody, initTypes);\n@@ -6032,5 +6032,5 @@\n-    public static JavaForOp _for(Body.Builder init,\n-                                 Body.Builder cond,\n-                                 Body.Builder update,\n-                                 Body.Builder body) {\n-        return new JavaForOp(init, cond, update, body);\n+    public static ForOp for_(Body.Builder init,\n+                             Body.Builder cond,\n+                             Body.Builder update,\n+                             Body.Builder body) {\n+        return new ForOp(init, cond, update, body);\n@@ -6048,3 +6048,3 @@\n-    public static JavaEnhancedForOp.ExpressionBuilder enhancedFor(Body.Builder ancestorBody,\n-                                                                  TypeElement iterableType, TypeElement elementType) {\n-        return new JavaEnhancedForOp.ExpressionBuilder(ancestorBody, iterableType, elementType);\n+    public static EnhancedForOp.ExpressionBuilder enhancedFor(Body.Builder ancestorBody,\n+                                                              TypeElement iterableType, TypeElement elementType) {\n+        return new EnhancedForOp.ExpressionBuilder(ancestorBody, iterableType, elementType);\n@@ -6065,4 +6065,4 @@\n-    public static JavaEnhancedForOp enhancedFor(Body.Builder expression,\n-                                                Body.Builder init,\n-                                                Body.Builder body) {\n-        return new JavaEnhancedForOp(expression, init, body);\n+    public static EnhancedForOp enhancedFor(Body.Builder expression,\n+                                            Body.Builder init,\n+                                            Body.Builder body) {\n+        return new EnhancedForOp(expression, init, body);\n@@ -6078,2 +6078,2 @@\n-    public static JavaWhileOp.PredicateBuilder _while(Body.Builder ancestorBody) {\n-        return new JavaWhileOp.PredicateBuilder(ancestorBody);\n+    public static WhileOp.PredicateBuilder while_(Body.Builder ancestorBody) {\n+        return new WhileOp.PredicateBuilder(ancestorBody);\n@@ -6091,2 +6091,2 @@\n-    public static JavaWhileOp _while(Body.Builder predicate, Body.Builder body) {\n-        return new JavaWhileOp(predicate, body);\n+    public static WhileOp while_(Body.Builder predicate, Body.Builder body) {\n+        return new WhileOp(predicate, body);\n@@ -6102,2 +6102,2 @@\n-    public static JavaDoWhileOp.BodyBuilder doWhile(Body.Builder ancestorBody) {\n-        return new JavaDoWhileOp.BodyBuilder(ancestorBody);\n+    public static DoWhileOp.BodyBuilder doWhile(Body.Builder ancestorBody) {\n+        return new DoWhileOp.BodyBuilder(ancestorBody);\n@@ -6113,2 +6113,2 @@\n-    public static JavaDoWhileOp doWhile(Body.Builder body, Body.Builder predicate) {\n-        return new JavaDoWhileOp(body, predicate);\n+    public static DoWhileOp doWhile(Body.Builder body, Body.Builder predicate) {\n+        return new DoWhileOp(body, predicate);\n@@ -6126,3 +6126,3 @@\n-    public static JavaConditionalAndOp.Builder conditionalAnd(Body.Builder ancestorBody,\n-                                                              Consumer<Block.Builder> lhs, Consumer<Block.Builder> rhs) {\n-        return new JavaConditionalAndOp.Builder(ancestorBody, lhs, rhs);\n+    public static ConditionalAndOp.Builder conditionalAnd(Body.Builder ancestorBody,\n+                                                          Consumer<Block.Builder> lhs, Consumer<Block.Builder> rhs) {\n+        return new ConditionalAndOp.Builder(ancestorBody, lhs, rhs);\n@@ -6140,3 +6140,3 @@\n-    public static JavaConditionalOrOp.Builder conditionalOr(Body.Builder ancestorBody,\n-                                                            Consumer<Block.Builder> lhs, Consumer<Block.Builder> rhs) {\n-        return new JavaConditionalOrOp.Builder(ancestorBody, lhs, rhs);\n+    public static ConditionalOrOp.Builder conditionalOr(Body.Builder ancestorBody,\n+                                                        Consumer<Block.Builder> lhs, Consumer<Block.Builder> rhs) {\n+        return new ConditionalOrOp.Builder(ancestorBody, lhs, rhs);\n@@ -6152,2 +6152,2 @@\n-    public static JavaConditionalAndOp conditionalAnd(List<Body.Builder> bodies) {\n-        return new JavaConditionalAndOp(bodies);\n+    public static ConditionalAndOp conditionalAnd(List<Body.Builder> bodies) {\n+        return new ConditionalAndOp(bodies);\n@@ -6163,2 +6163,2 @@\n-    public static JavaConditionalOrOp conditionalOr(List<Body.Builder> bodies) {\n-        return new JavaConditionalOrOp(bodies);\n+    public static ConditionalOrOp conditionalOr(List<Body.Builder> bodies) {\n+        return new ConditionalOrOp(bodies);\n@@ -6174,2 +6174,2 @@\n-    public static JavaConditionalExpressionOp conditionalExpression(TypeElement expressionType,\n-                                                                    List<Body.Builder> bodies) {\n+    public static ConditionalExpressionOp conditionalExpression(TypeElement expressionType,\n+                                                                List<Body.Builder> bodies) {\n@@ -6177,1 +6177,1 @@\n-        return new JavaConditionalExpressionOp(expressionType, bodies);\n+        return new ConditionalExpressionOp(expressionType, bodies);\n@@ -6188,2 +6188,2 @@\n-    public static JavaConditionalExpressionOp conditionalExpression(List<Body.Builder> bodies) {\n-        return new JavaConditionalExpressionOp(null, bodies);\n+    public static ConditionalExpressionOp conditionalExpression(List<Body.Builder> bodies) {\n+        return new ConditionalExpressionOp(null, bodies);\n@@ -6200,1 +6200,1 @@\n-    public static JavaTryOp.CatchBuilder _try(Body.Builder ancestorBody, Consumer<Block.Builder> c) {\n+    public static TryOp.CatchBuilder try_(Body.Builder ancestorBody, Consumer<Block.Builder> c) {\n@@ -6203,1 +6203,1 @@\n-        return new JavaTryOp.CatchBuilder(ancestorBody, null, _try);\n+        return new TryOp.CatchBuilder(ancestorBody, null, _try);\n@@ -6214,3 +6214,3 @@\n-    public static JavaTryOp.BodyBuilder tryWithResources(Body.Builder ancestorBody,\n-                                                         List<? extends TypeElement> resourceTypes,\n-                                                         Consumer<Block.Builder> c) {\n+    public static TryOp.BodyBuilder tryWithResources(Body.Builder ancestorBody,\n+                                                     List<? extends TypeElement> resourceTypes,\n+                                                     Consumer<Block.Builder> c) {\n@@ -6221,1 +6221,1 @@\n-        return new JavaTryOp.BodyBuilder(ancestorBody, resourceTypes, resources);\n+        return new TryOp.BodyBuilder(ancestorBody, resourceTypes, resources);\n@@ -6239,5 +6239,5 @@\n-    public static JavaTryOp _try(Body.Builder resources,\n-                                 Body.Builder body,\n-                                 List<Body.Builder> catchers,\n-                                 Body.Builder finalizer) {\n-        return new JavaTryOp(resources, body, catchers, finalizer);\n+    public static TryOp try_(Body.Builder resources,\n+                             Body.Builder body,\n+                             List<Body.Builder> catchers,\n+                             Body.Builder finalizer) {\n+        return new TryOp(resources, body, catchers, finalizer);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":332,"deletions":332,"binary":false,"changes":664,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-        builder.op(_return(result));\n+        builder.op(return_(result));\n@@ -245,1 +245,1 @@\n-        return builder.op(_new(ConstructorRef.constructor(EXTERNALIZED_OP_F_TYPE), args));\n+        return builder.op(new_(ConstructorRef.constructor(EXTERNALIZED_OP_F_TYPE), args));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/OpBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-                    append(CoreOp._return());\n+                    append(CoreOp.return_());\n@@ -1325,1 +1325,1 @@\n-            append(CoreOp._yield(patternValue));\n+            append(CoreOp.core_yield(patternValue));\n@@ -1361,1 +1361,1 @@\n-            matchBuilder.op(CoreOp._yield());\n+            matchBuilder.op(CoreOp.core_yield());\n@@ -1415,1 +1415,1 @@\n-            result = append(JavaOp._new(tree.varargsElement != null, typeToTypeElement(type), constructorRef, args));\n+            result = append(JavaOp.new_(tree.varargsElement != null, typeToTypeElement(type), constructorRef, args));\n@@ -1445,1 +1445,1 @@\n-                result = append(JavaOp._new(constructorRef, indexes));\n+                result = append(JavaOp.new_(constructorRef, indexes));\n@@ -1480,1 +1480,1 @@\n-                    append(CoreOp._return(exprVal));\n+                    append(CoreOp.return_(exprVal));\n@@ -1482,1 +1482,1 @@\n-                    appendTerminating(CoreOp::_return);\n+                    appendTerminating(CoreOp::return_);\n@@ -1518,1 +1518,1 @@\n-                append(CoreOp._yield(lambdaResult));\n+                append(CoreOp.core_yield(lambdaResult));\n@@ -1543,1 +1543,1 @@\n-                append(CoreOp._yield(last));\n+                append(CoreOp.core_yield(last));\n@@ -1553,1 +1553,1 @@\n-                appendTerminating(CoreOp::_yield);\n+                appendTerminating(CoreOp::core_yield);\n@@ -1569,1 +1569,1 @@\n-                    appendTerminating(CoreOp::_yield);\n+                    appendTerminating(CoreOp::core_yield);\n@@ -1579,1 +1579,1 @@\n-            append(JavaOp._if(bodies));\n+            append(JavaOp.if_(bodies));\n@@ -1634,1 +1634,1 @@\n-                append(CoreOp._yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n+                append(CoreOp.core_yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n@@ -1640,2 +1640,2 @@\n-                append(JavaOp._throw(\n-                        append(JavaOp._new(ConstructorRef.constructor(MatchException.class)))\n+                append(JavaOp.throw_(\n+                        append(JavaOp.new_(ConstructorRef.constructor(MatchException.class)))\n@@ -1669,1 +1669,1 @@\n-                    append(CoreOp._yield(patVal));\n+                    append(CoreOp.core_yield(patVal));\n@@ -1674,1 +1674,1 @@\n-                    append(CoreOp._yield(toValue(c.guard)));\n+                    append(CoreOp.core_yield(toValue(c.guard)));\n@@ -1683,1 +1683,1 @@\n-                append(CoreOp._yield(localResult));\n+                append(CoreOp.core_yield(localResult));\n@@ -1722,1 +1722,1 @@\n-                        append(CoreOp._yield(labelResult));\n+                        append(CoreOp.core_yield(labelResult));\n@@ -1732,1 +1732,1 @@\n-                append(CoreOp._yield(localResult));\n+                append(CoreOp.core_yield(localResult));\n@@ -1741,1 +1741,1 @@\n-                append(CoreOp._yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n+                append(CoreOp.core_yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n@@ -1764,1 +1764,1 @@\n-                        append(CoreOp._yield(bodyVal));\n+                        append(CoreOp.core_yield(bodyVal));\n@@ -1774,1 +1774,1 @@\n-                        appendTerminating(c.completesNormally ? CoreOp::_yield : CoreOp::unreachable);\n+                        appendTerminating(c.completesNormally ? CoreOp::core_yield : CoreOp::unreachable);\n@@ -1789,1 +1789,1 @@\n-                            headCl instanceof JCTree.JCDefaultCaseLabel ? CoreOp::_yield : JavaOp::switchFallthroughOp\n+                            headCl instanceof JCTree.JCDefaultCaseLabel ? CoreOp::core_yield : JavaOp::switchFallthroughOp\n@@ -1821,1 +1821,1 @@\n-            append(CoreOp._yield(last));\n+            append(CoreOp.core_yield(last));\n@@ -1830,1 +1830,1 @@\n-            appendTerminating(JavaOp::_continue);\n+            appendTerminating(JavaOp::continue_);\n@@ -1836,1 +1836,1 @@\n-            append(JavaOp._while(condition, body));\n+            append(JavaOp.while_(condition, body));\n@@ -1848,1 +1848,1 @@\n-            appendTerminating(JavaOp::_continue);\n+            appendTerminating(JavaOp::continue_);\n@@ -1859,1 +1859,1 @@\n-            append(CoreOp._yield(last));\n+            append(CoreOp.core_yield(last));\n@@ -1875,1 +1875,1 @@\n-            append(CoreOp._yield(last));\n+            append(CoreOp.core_yield(last));\n@@ -1890,1 +1890,1 @@\n-            append(CoreOp._yield(varEResult));\n+            append(CoreOp.core_yield(varEResult));\n@@ -1900,1 +1900,1 @@\n-            appendTerminating(JavaOp::_continue);\n+            appendTerminating(JavaOp::continue_);\n@@ -1954,1 +1954,1 @@\n-                append(CoreOp._yield(append(CoreOp.tuple(vds.varValues()))));\n+                append(CoreOp.core_yield(append(CoreOp.tuple(vds.varValues()))));\n@@ -1959,1 +1959,1 @@\n-                append(CoreOp._yield(vds.varValues().get(0)));\n+                append(CoreOp.core_yield(vds.varValues().get(0)));\n@@ -1964,1 +1964,1 @@\n-                append(CoreOp._yield());\n+                append(CoreOp.core_yield());\n@@ -1978,1 +1978,1 @@\n-                append(CoreOp._yield(last));\n+                append(CoreOp.core_yield(last));\n@@ -1980,1 +1980,1 @@\n-                append(CoreOp._yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n+                append(CoreOp.core_yield(append(CoreOp.constant(JavaType.BOOLEAN, true))));\n@@ -1995,1 +1995,1 @@\n-            append(CoreOp._yield());\n+            append(CoreOp.core_yield());\n@@ -2008,1 +2008,1 @@\n-            appendTerminating(JavaOp::_continue);\n+            appendTerminating(JavaOp::continue_);\n@@ -2014,1 +2014,1 @@\n-            append(JavaOp._for(init, cond, update, body));\n+            append(JavaOp.for_(init, cond, update, body));\n@@ -2029,1 +2029,1 @@\n-            append(CoreOp._yield(condVal));\n+            append(CoreOp.core_yield(condVal));\n@@ -2045,1 +2045,1 @@\n-            append(CoreOp._yield(trueVal));\n+            append(CoreOp.core_yield(trueVal));\n@@ -2059,1 +2059,1 @@\n-            append(CoreOp._yield(falseVal));\n+            append(CoreOp.core_yield(falseVal));\n@@ -2095,1 +2095,1 @@\n-            append(CoreOp._yield(condVal));\n+            append(CoreOp.core_yield(condVal));\n@@ -2108,1 +2108,1 @@\n-                append(CoreOp._yield(detailVal));\n+                append(CoreOp.core_yield(detailVal));\n@@ -2115,1 +2115,1 @@\n-            result = append(JavaOp._assert(bodies));\n+            result = append(JavaOp.assert_(bodies));\n@@ -2129,1 +2129,1 @@\n-                appendTerminating(CoreOp::_yield);\n+                appendTerminating(CoreOp::core_yield);\n@@ -2145,1 +2145,1 @@\n-            append(CoreOp._yield(last));\n+            append(CoreOp.core_yield(last));\n@@ -2155,1 +2155,1 @@\n-            appendTerminating(CoreOp::_yield);\n+            appendTerminating(CoreOp::core_yield);\n@@ -2174,1 +2174,1 @@\n-            appendTerminating(CoreOp::_yield);\n+            appendTerminating(CoreOp::core_yield);\n@@ -2212,1 +2212,1 @@\n-                append(CoreOp._yield(append(CoreOp.tuple(rValues))));\n+                append(CoreOp.core_yield(append(CoreOp.tuple(rValues))));\n@@ -2233,1 +2233,1 @@\n-            appendTerminating(CoreOp::_yield);\n+            appendTerminating(CoreOp::core_yield);\n@@ -2248,1 +2248,1 @@\n-                appendTerminating(CoreOp::_yield);\n+                appendTerminating(CoreOp::core_yield);\n@@ -2260,1 +2260,1 @@\n-                appendTerminating(CoreOp::_yield);\n+                appendTerminating(CoreOp::core_yield);\n@@ -2270,1 +2270,1 @@\n-            result = append(JavaOp._try(resources, body, catchers, finalizer));\n+            result = append(JavaOp.try_(resources, body, catchers, finalizer));\n@@ -2336,1 +2336,1 @@\n-                append(CoreOp._yield(lhs));\n+                append(CoreOp.core_yield(lhs));\n@@ -2346,1 +2346,1 @@\n-                append(CoreOp._yield(rhs));\n+                append(CoreOp.core_yield(rhs));\n@@ -2420,1 +2420,1 @@\n-                result = append(CoreOp._return());\n+                result = append(CoreOp.return_());\n@@ -2422,1 +2422,1 @@\n-                result = append(CoreOp._return(retVal));\n+                result = append(CoreOp.return_(retVal));\n@@ -2429,1 +2429,1 @@\n-            result = append(JavaOp._throw(throwVal));\n+            result = append(JavaOp.throw_(throwVal));\n@@ -2437,1 +2437,1 @@\n-            result = append(JavaOp._break(label));\n+            result = append(JavaOp.break_(label));\n@@ -2445,1 +2445,1 @@\n-            result = append(JavaOp._continue(label));\n+            result = append(JavaOp.continue_(label));\n@@ -2483,1 +2483,1 @@\n-            append(CoreOp._return(result));\n+            append(CoreOp.return_(result));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":63,"deletions":63,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                    redundant.op(CoreOp._return());\n+                    redundant.op(CoreOp.return_());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockIndexes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-                                le.op(_return(le.parameters().get(0)));\n+                                le.op(return_(le.parameters().get(0)));\n@@ -56,1 +56,1 @@\n-                    b.op(_return(b.parameters().get(0)));\n+                    b.op(return_(b.parameters().get(0)));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockParameters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-        block.op(_return(result));\n+        block.op(return_(result));\n@@ -174,1 +174,1 @@\n-        anotherBlock.op(_return(result));\n+        anotherBlock.op(return_(result));\n@@ -220,1 +220,1 @@\n-        block.op(_return());\n+        block.op(return_());\n@@ -231,1 +231,1 @@\n-        block.op(_return());\n+        block.op(return_());\n@@ -242,1 +242,1 @@\n-        block.op(_return());\n+        block.op(return_());\n@@ -259,1 +259,1 @@\n-        block2.op(_return());\n+        block2.op(return_());\n@@ -270,1 +270,1 @@\n-        block.op(_return());\n+        block.op(return_());\n@@ -273,1 +273,1 @@\n-        Assert.assertThrows(IllegalStateException.class, () -> block.op(_return()));\n+        Assert.assertThrows(IllegalStateException.class, () -> block.op(return_()));\n@@ -290,1 +290,1 @@\n-        block.op(_return());\n+        block.op(return_());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBuild.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -89,1 +89,1 @@\n-                                    cblock.op(_return(\n+                                    cblock.op(return_(\n@@ -98,1 +98,1 @@\n-                    block.op(_return(or));\n+                    block.op(return_(or));\n@@ -121,1 +121,1 @@\n-                                cblock.op(_return(\n+                                cblock.op(return_(\n@@ -128,1 +128,1 @@\n-                    block.op(_return(or));\n+                    block.op(return_(or));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestClosureOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -69,1 +69,1 @@\n-            end.op(_return());\n+            end.op(CoreOp.return_());\n@@ -99,1 +99,1 @@\n-            end.op(_return());\n+            end.op(CoreOp.return_());\n@@ -128,1 +128,1 @@\n-            b5.op(_return());\n+            b5.op(CoreOp.return_());\n@@ -132,1 +132,1 @@\n-            b1.op(_return());\n+            b1.op(CoreOp.return_());\n@@ -165,1 +165,1 @@\n-            end.op(_return());\n+            end.op(CoreOp.return_());\n@@ -277,1 +277,1 @@\n-            exit.op(_return());\n+            exit.op(CoreOp.return_());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestDominate.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n-import static jdk.incubator.code.dialect.java.JavaOp._throw;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n+import static jdk.incubator.code.dialect.java.JavaOp.throw_;\n@@ -115,1 +115,1 @@\n-                        b.op(_return());\n+                        b.op(CoreOp.return_());\n@@ -208,1 +208,1 @@\n-                        b.op(_return());\n+                        b.op(CoreOp.return_());\n@@ -322,1 +322,1 @@\n-                        b.op(_return());\n+                        b.op(CoreOp.return_());\n@@ -440,1 +440,1 @@\n-                        b.op(_throw(catchAll.parameters().get(0)));\n+                        b.op(throw_(catchAll.parameters().get(0)));\n@@ -447,1 +447,1 @@\n-                        b.op(_return());\n+                        b.op(CoreOp.return_());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExceptionRegionOps.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-                    fblock.op(_return(fblock.op(varLoad(v))));\n+                    fblock.op(return_(fblock.op(varLoad(v))));\n@@ -153,1 +153,1 @@\n-                    cb.op(_return(cb.op(varLoad(v))));\n+                    cb.op(return_(cb.op(varLoad(v))));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-                                    lblock.op(_return(\n+                                    lblock.op(return_(\n@@ -100,1 +100,1 @@\n-                    block.op(_return(or));\n+                    block.op(return_(or));\n@@ -128,1 +128,1 @@\n-                                lblock.op(_return(\n+                                lblock.op(return_(\n@@ -135,1 +135,1 @@\n-                    block.op(_return(or));\n+                    block.op(return_(or));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLambdaOps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-                    block.op(_return(queryable));\n+                    block.op(return_(queryable));\n@@ -124,1 +124,1 @@\n-                        block.op(_return(queryResult));\n+                        block.op(return_(queryResult));\n@@ -166,1 +166,1 @@\n-                    .body(b -> b.op(_return(b.parameters().get(0))));\n+                    .body(b -> b.op(return_(b.parameters().get(0))));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLinqUsingQuoted.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -379,1 +379,1 @@\n-            pattern.entryBlock().op(_yield(\n+            pattern.entryBlock().op(core_yield(\n@@ -386,1 +386,1 @@\n-            match.entryBlock().op(_yield());\n+            match.entryBlock().op(core_yield());\n@@ -390,1 +390,1 @@\n-            fblock.op(_return(result));\n+            fblock.op(return_(result));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPrimitiveTypePatterns.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-                yield block.op(_return(da));\n+                yield block.op(return_(da));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/ForwardDifferentiation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-                    b.op(CoreOp._yield(rval));\n+                    b.op(CoreOp.core_yield(rval));\n@@ -240,1 +240,1 @@\n-                    b.op(CoreOp._yield(rval));\n+                    b.op(CoreOp.core_yield(rval));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/anf\/AnfTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-                exitBlock.op(CoreOp._return(loadValue));\n+                exitBlock.op(CoreOp.return_(loadValue));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlotOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                    block.op(_return(queryable));\n+                    block.op(return_(queryable));\n@@ -102,1 +102,1 @@\n-                    block.op(_return(queryResult));\n+                    block.op(return_(queryResult));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/Queryable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -65,1 +65,1 @@\n-                    .body(b -> b.op(_return(b.parameters().get(0))));\n+                    .body(b -> b.op(return_(b.parameters().get(0))));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/TestQueryProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -73,1 +73,1 @@\n-                                lblock.op(_return(\n+                                lblock.op(return_(\n@@ -80,1 +80,1 @@\n-                    block.op(_return(or));\n+                    block.op(return_(or));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/parser\/TestParse.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import jdk.incubator.code.dialect.java.JavaOp.JavaEnhancedForOp;\n+import jdk.incubator.code.dialect.java.JavaOp;\n+import jdk.incubator.code.dialect.java.JavaOp.EnhancedForOp;\n@@ -38,1 +39,1 @@\n-import static jdk.incubator.code.dialect.java.JavaOp._continue;\n+import static jdk.incubator.code.dialect.java.JavaOp.continue_;\n@@ -104,2 +105,2 @@\n-        static JavaEnhancedForOp.BodyBuilder enhancedForLoop(Body.Builder ancestorBody, JavaType elementType,\n-                                                             Value iterable) {\n+        static EnhancedForOp.BodyBuilder enhancedForLoop(Body.Builder ancestorBody, JavaType elementType,\n+                                                         Value iterable) {\n@@ -108,1 +109,1 @@\n-                        b.op(_yield(iterable));\n+                        b.op(core_yield(iterable));\n@@ -111,1 +112,1 @@\n-                        b.op(_yield(b.parameters().get(0)));\n+                        b.op(core_yield(b.parameters().get(0)));\n@@ -152,1 +153,1 @@\n-                        _else.op(_continue());\n+                        _else.op(JavaOp.continue_());\n@@ -161,1 +162,1 @@\n-                    JavaEnhancedForOp forOp = enhancedFor(block.parentBody(),\n+                    EnhancedForOp forOp = enhancedFor(block.parentBody(),\n@@ -164,1 +165,1 @@\n-                                b.op(_yield(iterable));\n+                                b.op(core_yield(iterable));\n@@ -167,1 +168,1 @@\n-                                b.op(_yield(b.parameters().get(0)));\n+                                b.op(core_yield(b.parameters().get(0)));\n@@ -177,1 +178,1 @@\n-                    block.op(_continue());\n+                    block.op(JavaOp.continue_());\n@@ -197,1 +198,1 @@\n-                                        terminalBlock.op(_continue());\n+                                        terminalBlock.op(JavaOp.continue_());\n@@ -202,1 +203,1 @@\n-                        b.op(_return());\n+                        b.op(return_());\n@@ -227,1 +228,1 @@\n-                                            terminalBlock.op(_continue());\n+                                            terminalBlock.op(JavaOp.continue_());\n@@ -231,1 +232,1 @@\n-                            block.op(_return(collect));\n+                            block.op(return_(collect));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/StreamFuser.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.incubator.code.dialect.java.JavaOp.JavaEnhancedForOp;\n+import jdk.incubator.code.dialect.java.JavaOp.EnhancedForOp;\n@@ -35,1 +35,1 @@\n-import static jdk.incubator.code.dialect.java.JavaOp._continue;\n+import static jdk.incubator.code.dialect.java.JavaOp.continue_;\n@@ -120,2 +120,2 @@\n-        static JavaEnhancedForOp.BodyBuilder enhancedForLoop(Body.Builder ancestorBody, JavaType elementType,\n-                                                             Value iterable) {\n+        static EnhancedForOp.BodyBuilder enhancedForLoop(Body.Builder ancestorBody, JavaType elementType,\n+                                                         Value iterable) {\n@@ -124,1 +124,1 @@\n-                        b.op(_yield(iterable));\n+                        b.op(core_yield(iterable));\n@@ -127,1 +127,1 @@\n-                        b.op(_yield(b.parameters().get(0)));\n+                        b.op(core_yield(b.parameters().get(0)));\n@@ -170,1 +170,1 @@\n-                        _else.op(_continue());\n+                        _else.op(JavaOp.continue_());\n@@ -179,1 +179,1 @@\n-                    JavaEnhancedForOp forOp = enhancedFor(block.parentBody(),\n+                    EnhancedForOp forOp = enhancedFor(block.parentBody(),\n@@ -182,1 +182,1 @@\n-                                b.op(_yield(iterable));\n+                                b.op(core_yield(iterable));\n@@ -185,1 +185,1 @@\n-                                b.op(_yield(b.parameters().get(0)));\n+                                b.op(core_yield(b.parameters().get(0)));\n@@ -195,1 +195,1 @@\n-                    block.op(_continue());\n+                    block.op(JavaOp.continue_());\n@@ -218,1 +218,1 @@\n-                                        terminalBlock.op(_continue());\n+                                        terminalBlock.op(JavaOp.continue_());\n@@ -223,1 +223,1 @@\n-                        b.op(_return());\n+                        b.op(return_());\n@@ -253,1 +253,1 @@\n-                                            terminalBlock.op(_continue());\n+                                            terminalBlock.op(JavaOp.continue_());\n@@ -257,1 +257,1 @@\n-                            block.op(_return(collect));\n+                            block.op(return_(collect));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/StreamFuserUsingQuotable.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -35,1 +36,1 @@\n-import static jdk.incubator.code.dialect.core.CoreOp._return;\n+import static jdk.incubator.code.dialect.core.CoreOp.return_;\n@@ -163,1 +164,1 @@\n-            fblock.op(_return());\n+            fblock.op(CoreOp.return_());\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}