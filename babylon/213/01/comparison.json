{"files":[{"patch":"@@ -454,1 +454,1 @@\n-                Tag.COMPL, Tag.POS,\n+                Tag.COMPL,\n@@ -466,1 +466,1 @@\n-                \/\/ switch labels (these are handled by the encloising construct, SWITCH or SWITCH_EXPRESSION)\n+                \/\/ switch labels (these are handled by the enclosing construct, SWITCH or SWITCH_EXPRESSION)\n@@ -2128,0 +2128,4 @@\n+                case POS -> {\n+                    \/\/ Result is value of the operand\n+                    result = toValue(tree.arg, tree.type);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Smoke test for code reflection with unary operations.\n+ * @build UnaryopTest\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester UnaryopTest\n+ *\/\n+\n+import java.lang.runtime.CodeReflection;\n+\n+public class UnaryopTest {\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test\" (%0 : int)int -> {\n+                %1 : Var<int> = var %0 @\"v\" ;\n+                %2 : int = var.load %1 ;\n+                %3 : int = neg %2 ;\n+                return %3 ;\n+            };\n+            \"\"\")\n+    static int test(int v) {\n+        return -v;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test2\" (%0 : int)int -> {\n+                %1 : Var<int> = var %0 @\"v\";\n+                %2 : int = var.load %1;\n+                return %2;\n+            };\n+            \"\"\")\n+    static int test2(int v) {\n+        return +v;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test3\"  (%0 : int)java.lang.Integer -> {\n+                %1 : Var<int> = var %0 @\"v\" ;\n+                %2 : int = var.load %1 ;\n+                %3 : java.lang.Integer = invoke %2 @\"java.lang.Integer::valueOf(int)java.lang.Integer\" ;\n+                return %3 ;\n+            };\n+            \"\"\")\n+    \/\/ Tests that numeric promotion occurs\n+    static Integer test3(int v) {\n+        return +v;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test4\"  (%0 : java.lang.Integer)java.lang.Integer -> {\n+                %1 : Var<java.lang.Integer> = var %0 @\"v\" ;\n+                %2 : java.lang.Integer = var.load %1 ;\n+                %3 : int = invoke %2 @\"java.lang.Integer::intValue()int\" ;\n+                %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\" ;\n+                return %4 ;\n+            };\n+            \"\"\")\n+    \/\/ Tests that numeric promotion is retained\n+    static Integer test4(Integer v) {\n+        return +v;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/UnaryopTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}