{"files":[{"patch":"@@ -51,1 +51,1 @@\n-     * Applies an SSA transformation to an invokable operation, replacing operations that declare variables and\n+     * Applies an SSA transformation to an operation with bodies, replacing operations that declare variables and\n@@ -60,1 +60,1 @@\n-     * @param iop the invokable operation\n+     * @param nestedOp the operation with bodies\n@@ -62,1 +62,1 @@\n-     * @param <T> the invokable type\n+     * @param <T> the operation type\n@@ -64,1 +64,1 @@\n-    public static <T extends Op & Op.Invokable> T transform(T iop) {\n+    public static <T extends Op & Op.Nested> T transform(T nestedOp) {\n@@ -72,1 +72,1 @@\n-        T liop = (T) iop.transform(CopyContext.create(), (block, op) -> {\n+        T ssaOp = (T) nestedOp.transform(CopyContext.create(), (block, op) -> {\n@@ -130,1 +130,1 @@\n-        return liop;\n+        return ssaOp;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/SSA.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -228,2 +228,1 @@\n-            \/\/ and copy directly without lowering descendant operations\n-            b.op(this, OpTransformer.COPYING_TRANSFORMER);\n+            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n@@ -311,1 +310,1 @@\n-            implements Op.Isolated {\n+            implements Op.Isolated, Op.Lowerable {\n@@ -315,1 +314,1 @@\n-        final Map<String, FuncOp> table;\n+        final SequencedMap<String, FuncOp> table;\n@@ -340,2 +339,2 @@\n-        static Map<String, FuncOp> createTable(Body body) {\n-            Map<String, FuncOp> table = new HashMap<>();\n+        static SequencedMap<String, FuncOp> createTable(Body body) {\n+            SequencedMap<String, FuncOp> table = new LinkedHashMap<>();\n@@ -345,1 +344,1 @@\n-                } else {\n+                } else if (!(op instanceof Op.Terminating)) {\n@@ -349,1 +348,1 @@\n-            return Collections.unmodifiableMap(table);\n+            return Collections.unmodifiableSequencedMap(table);\n@@ -367,1 +366,1 @@\n-            Map<String, FuncOp> table = new HashMap<>();\n+            SequencedMap<String, FuncOp> table = new LinkedHashMap<>();\n@@ -372,1 +371,2 @@\n-            this.table = Collections.unmodifiableMap(table);\n+            entryBlock.op(CoreOp.unreachable());\n+            this.table = Collections.unmodifiableSequencedMap(table);\n@@ -381,1 +381,1 @@\n-        public Map<String, FuncOp> functionTable() {\n+        public SequencedMap<String, FuncOp> functionTable() {\n@@ -389,0 +389,6 @@\n+\n+        @Override\n+        public Block.Builder lower(Block.Builder b, OpTransformer _ignore) {\n+            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n+            return b;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng TestTransitiveInvokeModule\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Executable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.OpTransformer;\n+import java.lang.reflect.code.analysis.SSA;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.reflect.code.op.CoreOp;\n+import java.lang.reflect.code.type.MethodRef;\n+import java.lang.runtime.CodeReflection;\n+import java.util.*;\n+import java.util.stream.Stream;\n+\n+public class TestTransitiveInvokeModule {\n+\n+    @CodeReflection\n+    static void m(int i, List<Integer> l) {\n+        if (i < 0) {\n+            return;\n+        }\n+\n+        n(i - 1, l);\n+    }\n+\n+    @CodeReflection\n+    static void n(int i, List<Integer> l) {\n+        l.add(i);\n+        m(i - 1, l);\n+    }\n+\n+    @Test\n+    public void test() {\n+        Optional<Method> om = Stream.of(TestTransitiveInvokeModule.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(\"m\"))\n+                .findFirst();\n+\n+        CoreOp.ModuleOp module = createTransitiveInvokeModule(MethodHandles.lookup(), om.get());\n+        System.out.println(module.toText());\n+        module = module.transform(OpTransformer.LOWERING_TRANSFORMER);\n+        System.out.println(module.toText());\n+        module = SSA.transform(module);\n+        System.out.println(module.toText());\n+\n+        module.functionTable().forEach((s, funcOp) -> {\n+            System.out.println(s + \" -> \" + funcOp);\n+        });\n+\n+        List<Integer> r = new ArrayList<>();\n+        Interpreter.invoke(module.functionTable().firstEntry().getValue(), 10, r);\n+        Assert.assertEquals(r, List.of(9, 7, 5, 3, 1, -1));\n+    }\n+\n+    static CoreOp.ModuleOp createTransitiveInvokeModule(MethodHandles.Lookup l,\n+                                                        Method m) {\n+        Optional<CoreOp.FuncOp> codeModel = m.getCodeModel();\n+        if (codeModel.isPresent()) {\n+            return createTransitiveInvokeModule(l, MethodRef.method(m), codeModel.get());\n+        } else {\n+            return CoreOp.module(List.of());\n+        }\n+    }\n+\n+    static CoreOp.ModuleOp createTransitiveInvokeModule(MethodHandles.Lookup l,\n+                                                        MethodRef entryRef, CoreOp.FuncOp entry) {\n+        LinkedHashSet<MethodRef> funcsVisited = new LinkedHashSet<>();\n+        List<CoreOp.FuncOp> funcs = new ArrayList<>();\n+\n+        record RefAndFunc(MethodRef r, CoreOp.FuncOp f) {\n+        }\n+        Deque<RefAndFunc> work = new ArrayDeque<>();\n+        work.push(new RefAndFunc(entryRef, entry));\n+        while (!work.isEmpty()) {\n+            RefAndFunc rf = work.pop();\n+            if (!funcsVisited.add(rf.r)) {\n+                continue;\n+            }\n+\n+            CoreOp.FuncOp tf = rf.f.transform(rf.r.toString(), (block, op) -> {\n+                if (op instanceof CoreOp.InvokeOp iop) {\n+                    MethodRef r = iop.invokeDescriptor();\n+                    Executable em = null;\n+                    try {\n+                        em = r.resolveToMember(l);\n+                    } catch (ReflectiveOperationException _) {\n+                    }\n+                    if (em instanceof Method m) {\n+                        Optional<CoreOp.FuncOp> f = m.getCodeModel();\n+                        if (f.isPresent()) {\n+                            RefAndFunc call = new RefAndFunc(r, f.get());\n+                            \/\/ Place model on work queue\n+                            work.push(call);\n+\n+                            \/\/ Replace invocation with function call\n+                            block.op(CoreOp.funcCall(\n+                                    call.r.toString(),\n+                                    call.f.invokableType(),\n+                                    block.context().getValues(iop.operands())));\n+                            return block;\n+                        }\n+                    }\n+                }\n+                block.op(op);\n+                return block;\n+            });\n+            funcs.add(tf);\n+        }\n+\n+        return CoreOp.module(funcs);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTransitiveInvokeModule.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}