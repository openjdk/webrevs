{"files":[{"patch":"@@ -35,1 +35,1 @@\n-public final class ClassType implements JavaType {\n+public final class ClassType implements TypeVarRef.Owner, JavaType {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ClassType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-                            (JavaType)constructType(parseTypeDef(parts[0])),\n+                            (ClassType)constructType(parseTypeDef(parts[0])),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/CoreTypeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    static TypeVarRef typeVarRef(String name, JavaType owner, JavaType bound) {\n+    static TypeVarRef typeVarRef(String name, ClassType owner, JavaType bound) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public sealed interface MethodRef permits MethodRefImpl {\n+public sealed interface MethodRef extends TypeVarRef.Owner permits MethodRefImpl {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/MethodRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    final Object owner;\n+    final Owner owner;\n@@ -40,1 +40,1 @@\n-    TypeVarRef(String name, Object owner, JavaType bound) {\n+    TypeVarRef(String name, Owner owner, JavaType bound) {\n@@ -61,1 +61,1 @@\n-     * {@return the method owner of this type-variable}\n+     * {@return the owner of this type-variable}\n@@ -63,11 +63,2 @@\n-    public Optional<MethodRef> methodOwner() {\n-        return owner instanceof MethodRef methodRef ?\n-                Optional.of(methodRef) : Optional.empty();\n-    }\n-\n-    \/**\n-     * {@return the class owner of this type-variable}\n-     *\/\n-    public Optional<JavaType> classOwner() {\n-        return owner instanceof JavaType typeRef ?\n-                Optional.of(typeRef) : Optional.empty();\n+    public Owner owner() {\n+        return owner;\n@@ -114,0 +105,5 @@\n+\n+    \/**\n+     * The owner of a type-variable - either a class or a method.\n+     *\/\n+    public sealed interface Owner permits ClassType, MethodRef { }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TypeVarRef.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2270,1 +2270,2 @@\n-                        JavaType.typeVarRef(t.tsym.name.toString(), symbolToErasedDesc(t.tsym.owner),\n+                        JavaType.typeVarRef(t.tsym.name.toString(),\n+                                (jdk.internal.java.lang.reflect.code.type.ClassType)symbolToErasedDesc(t.tsym.owner),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.type.ClassType;\n@@ -120,1 +121,1 @@\n-                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", JavaType.J_L_OBJECT, t.type), t.erasure));\n+                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", (ClassType)JavaType.J_L_OBJECT, t.type), t.erasure));\n@@ -123,1 +124,1 @@\n-                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", JavaType.J_L_OBJECT, t.type), t.erasure));\n+                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", (ClassType)JavaType.J_L_OBJECT, t.type), t.erasure));\n@@ -126,1 +127,1 @@\n-                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", JavaType.J_L_OBJECT, t.type), t.erasure));\n+                typeVars.add(new TypeAndErasure(JavaType.typeVarRef(\"X\", (ClassType)JavaType.J_L_OBJECT, t.type), t.erasure));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestErasure.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        while (jt.isArray()) {\n+        while (jt instanceof ArrayType) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestJavaType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}