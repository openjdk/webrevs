{"files":[{"patch":"@@ -6,0 +6,1 @@\n+tools\/target\/\n@@ -17,0 +18,7 @@\n+wraps\/opencl\/target\/\n+wraps\/opengl\/target\/\n+wraps\/shared\/target\/\n+wraps\/cuda\/target\/\n+extractions\/cuda\/target\n+extractions\/opencl\/target\n+extractions\/opengl\/target\n","filename":"hat\/.gitignore","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    .filter(dir -> dir.matches(\"^.*(hat|wrap|examples|backends|docs|bldr|core|extractions)$\"))\n+    .filter(dir -> dir.matches(\"^.*(hat|tools|wraps|examples|backends|docs|core|extractions)$\"))\n","filename":"hat\/hat\/sanity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,3 +5,0 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/hat.iml\" filepath=\"$PROJECT_DIR$\/hat.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/core.iml\" filepath=\"$PROJECT_DIR$\/core.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/tools.iml\" filepath=\"$PROJECT_DIR$\/core.iml\" \/>\n@@ -11,1 +8,0 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_ffi_spirv.iml\" filepath=\"$PROJECT_DIR$\/backend_ffi_spirv.iml\" \/>\n@@ -13,0 +9,1 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_ffi_spirv.iml\" filepath=\"$PROJECT_DIR$\/backend_ffi_spirv.iml\" \/>\n@@ -15,3 +12,3 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_shared.iml\" filepath=\"$PROJECT_DIR$\/example_shared.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_mandel.iml\" filepath=\"$PROJECT_DIR$\/example_mandel.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_heal.iml\" filepath=\"$PROJECT_DIR$\/example_heal.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_jextracted_opencl.iml\" filepath=\"$PROJECT_DIR$\/backend_jextracted_opencl.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_jextracted_shared.iml\" filepath=\"$PROJECT_DIR$\/backend_jextracted_shared.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/core.iml\" filepath=\"$PROJECT_DIR$\/core.iml\" \/>\n@@ -19,0 +16,2 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_experiments.iml\" filepath=\"$PROJECT_DIR$\/example_experiments.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_heal.iml\" filepath=\"$PROJECT_DIR$\/example_heal.iml\" \/>\n@@ -20,0 +19,3 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_mandel.iml\" filepath=\"$PROJECT_DIR$\/example_mandel.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_nbody.iml\" filepath=\"$PROJECT_DIR$\/example_nbody.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_shared.iml\" filepath=\"$PROJECT_DIR$\/example_shared.iml\" \/>\n@@ -21,1 +23,0 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_experiments.iml\" filepath=\"$PROJECT_DIR$\/example_experiments.iml\" \/>\n@@ -23,5 +24,1 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_jextracted_opencl.iml\" filepath=\"$PROJECT_DIR$\/backend_jextracted_opencl.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/backend_jextracted_shared.iml\" filepath=\"$PROJECT_DIR$\/backend_jextracted_shared.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_shared.iml\" filepath=\"$PROJECT_DIR$\/wrap_shared.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_opengl.iml\" filepath=\"$PROJECT_DIR$\/wrap_opengl.iml\" \/>\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_opencl.iml\" filepath=\"$PROJECT_DIR$\/wrap_opencl.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/tools.iml\" filepath=\"$PROJECT_DIR$\/tools.iml\" \/>\n@@ -29,1 +26,3 @@\n-      <module fileurl=\"file:\/\/$PROJECT_DIR$\/example_nbody.iml\" filepath=\"$PROJECT_DIR$\/example_nbody.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_opencl.iml\" filepath=\"$PROJECT_DIR$\/wrap_opencl.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_opengl.iml\" filepath=\"$PROJECT_DIR$\/wrap_opengl.iml\" \/>\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/wrap_shared.iml\" filepath=\"$PROJECT_DIR$\/wrap_shared.iml\" \/>\n@@ -32,1 +31,1 @@\n-<\/project>\n+<\/project>\n\\ No newline at end of file\n","filename":"hat\/intellij\/.idea\/modules.xml","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    <orderEntry type=\"module\" module-name=\"core\" \/>\n+    <orderEntry type=\"module\" module-name=\"core\" exported=\"\" \/>\n@@ -12,1 +12,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/tools.iml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.codebuilders;\n-\n-\n-import jdk.incubator.code.Block;\n-import jdk.incubator.code.Body;\n-import jdk.incubator.code.CodeItem;\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.TypeElement;\n-import jdk.incubator.code.Value;\n-import jdk.incubator.code.dialect.java.JavaType;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.function.Function;\n-\n-public abstract class OpCodeBuilder<T extends OpCodeBuilder<T>> extends CodeBuilder<T> {\n-\n-    static final class GlobalValueBlockNaming implements Function<CodeItem, String> {\n-        final Map<CodeItem, String> gn;\n-        int valueOrdinal = 0;\n-        int blockOrdinal = 0;\n-\n-        GlobalValueBlockNaming() {\n-            this.gn = new HashMap<>();\n-        }\n-\n-        @Override\n-        public String apply(CodeItem codeItem) {\n-            return switch (codeItem) {\n-                case Block block -> gn.computeIfAbsent(block, _b -> \"block_\" + blockOrdinal++);\n-                case Value value -> gn.computeIfAbsent(value, _v -> String.valueOf(valueOrdinal++));\n-                default -> throw new IllegalStateException(\"Unexpected code item: \" + codeItem);\n-            };\n-        }\n-    }\n-\n-    static final class AttributeMapper {\n-        static String toString(Object value) {\n-            throw new IllegalStateException();\n-        }\n-    }\n-\n-    \/\/ Copied from com.sun.tools.javac.util.Convert\n-    static String quote(String s) {\n-        StringBuilder buf = new StringBuilder();\n-        for (int i = 0; i < s.length(); i++) {\n-            buf.append(quote(s.charAt(i)));\n-        }\n-        return buf.toString();\n-    }\n-\n-    \/**\n-     * Escapes a character if it has an escape sequence or is\n-     * non-printable ASCII.  Leaves non-ASCII characters alone.\n-     *\/\n-    static String quote(char ch) {\n-        return switch (ch) {\n-            case '\\b' -> \"\\\\b\";\n-            case '\\f' -> \"\\\\f\";\n-            case '\\n' -> \"\\\\n\";\n-            case '\\r' -> \"\\\\r\";\n-            case '\\t' -> \"\\\\t\";\n-            case '\\'' -> \"\\\\'\";\n-            case '\\\"' -> \"\\\\\\\"\";\n-            case '\\\\' -> \"\\\\\\\\\";\n-            default -> (isPrintableAscii(ch))\n-                    ? String.valueOf(ch)\n-                    : String.format(\"\\\\u%04x\", (int) ch);\n-        };\n-    }\n-\n-    static boolean isPrintableAscii(char ch) {\n-        return ch >= ' ' && ch <= '~';\n-    }\n-\n-    final GlobalValueBlockNaming gn;\n-\n-    public OpCodeBuilder() {\n-        this.gn = new GlobalValueBlockNaming();\n-    }\n-\n-    public T opName(String name) {\n-        return append(name);\n-    }\n-\n-    T blockName(Block b) {\n-        return blockName(gn.apply(b));\n-    }\n-\n-    T blockName(String s) {\n-        return hat().append(s);\n-    }\n-\n-    T valueName(Value v) {\n-        return append(gn.apply(v));\n-    }\n-\n-    T value(Value v) {\n-        return percent().valueName(v);\n-    }\n-\n-    T typeName(TypeElement typeElement) {\n-        return append(typeElement.toString());\n-    }\n-\n-    T valueDeclaration(Value v) {\n-        return value(v).space().colon().space().typeName(v.type());\n-    }\n-\n-    T attributeName(String name) {\n-        return append(name);\n-    }\n-\n-\n-    T attributeValue(Object value) {\n-        \/\/what is a null?\n-        \/\/  if (value == ExternalizedOp.NULL_ATTRIBUTE_VALUE) {\n-        \/\/    return nullKeyword();\n-        \/\/ } else {\n-        return dquote(value.toString());\n-        \/\/ }\n-    }\n-\n-    T attribute(String name, Object value) {\n-        return at().when(!name.isEmpty(), _ -> attributeName(name).equals()).attributeValue(value);\n-    }\n-\n-    T returnType(Body body) {\n-        return typeName(body.bodyType().returnType());\n-    }\n-\n-\n-    T successor(Block.Reference successor) {\n-        blockName(successor.targetBlock());\n-        if (!successor.arguments().isEmpty()) {\n-            paren(_ -> commaSeparated(successor.arguments(), this::value));\n-        }\n-        return self();\n-    }\n-\n-\n-    T block(Block block) {\n-        if (!block.isEntryBlock()) {\n-            blockName(block);\n-            zeroOrOneOrMore(block.parameters(),\n-                    _ -> {\n-                    },\n-                    (one) -> {\n-                    },\n-                    (params) -> paren(_ -> commaSeparated(params, this::valueDeclaration))\n-            );\n-            colon().nl();\n-        }\n-        indent(_ ->\n-                block.ops().forEach(op -> {\n-                    Op.Result opr = op.result();\n-                    if (!opr.type().equals(JavaType.VOID)) {\n-                        valueDeclaration(opr).space().equals().space();\n-                    }\n-                    op(op).nl();\n-                })\n-        );\n-        return self();\n-    }\n-\n-    T body(Body body) {\n-        paren(_ -> commaSeparated(body.entryBlock().parameters(), this::valueDeclaration));\n-        returnType(body).space().rarrow().space();\n-        return brace(_ -> nl().indent(_ -> nlSeparated(body.blocks(), this::block)));\n-    }\n-\n-    public T op(Op op) {\n-        opName(op.opName());\n-\n-        op.operands().forEach((operand) -> space().value(operand));\n-\n-        op.successors().forEach((successor -> space().successor(successor)));\n-\n-\n-        \/\/op.attributes().forEach((key, value) -> space().attribute(key, value));\n-\n-        zeroOrOneOrMore(op.bodies(),\n-                _ -> {\/*zero*\/},\n-                this::body,\n-                (more) -> {\n-                    nl().indent(_ -> {\n-                        indent(_ -> {\n-                            nlSeparated(more, this::body);\n-                        });\n-                    });\n-                });\n-\n-        return semicolon();\n-    }\n-\n-}\n-\n-\n","filename":"hat\/tools\/src\/main\/java\/hat\/codebuilders\/OpCodeBuilder.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.codebuilders;\n-\n-\n-import jdk.incubator.code.TypeElement;\n-import jdk.incubator.code.Value;\n-\n-public abstract class StyledOpCodeBuilder<T extends StyledOpCodeBuilder<T>> extends OpCodeBuilder<T> {\n-\n-\n-    public T defaultStyle(Runnable r) {\n-        r.run();\n-        return self();\n-    }\n-\n-    public T valueStyle(Runnable r) {\n-        return defaultStyle(r);\n-    }\n-\n-    public T opNameStyle(Runnable r) {\n-        return defaultStyle(r);\n-    }\n-\n-    public T dquoteStyle(Runnable r) {\n-        return defaultStyle(r);\n-    }\n-\n-    public T typeNameStyle(Runnable r) {\n-        return defaultStyle(r);\n-    }\n-\n-    public T atStyle(Runnable r) {\n-        return defaultStyle(r);\n-    }\n-\n-    @Override\n-    public T value(Value v) {\n-        return valueStyle(() -> super.value(v));\n-    }\n-\n-    @Override\n-    public T opName(String name) {\n-        return opNameStyle(() -> super.opName(name));\n-    }\n-\n-    @Override\n-    public T dquote(String name) {\n-        return dquoteStyle(() -> super.dquote(name));\n-    }\n-\n-    @Override\n-    public T typeName(TypeElement typeDesc) {\n-        return typeNameStyle(() -> super.typeName(typeDesc));\n-    }\n-\n-    @Override\n-    public T at() {\n-        return atStyle(() -> super.at());\n-    }\n-}\n-\n-\n","filename":"hat\/tools\/src\/main\/java\/hat\/codebuilders\/StyledOpCodeBuilder.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.text;\n-\n-\n-import hat.codebuilders.CodeBuilder;\n-\n-import java.util.function.Consumer;\n-\n-public abstract class JavaCodeBuilder<T extends JavaCodeBuilder<T>> extends CodeBuilder<T> {\n-\n-    T importKeyword() {\n-        return keyword(\"import\");\n-    }\n-\n-    T classKeyword() {\n-        return keyword(\"class\");\n-    }\n-\n-    public T classKeyword(String name) {\n-        return classKeyword().space().append(name);\n-    }\n-\n-    T extendsKeyword() {\n-        return keyword(\"extends\");\n-    }\n-\n-    public T extendsKeyword(String name) {\n-        return extendsKeyword().space().append(name);\n-    }\n-\n-    public T importKeyword(String name) {\n-        return importKeyword().space().append(name).semicolon().nl();\n-    }\n-\n-    T publicKeyword() {\n-        return keyword(\"public\");\n-    }\n-\n-    T interfaceKeyword() {\n-        return keyword(\"interface\");\n-    }\n-\n-    T publicInterface(String name) {\n-        return publicKeyword().space().interfaceKeyword().space().append(name);\n-    }\n-\n-    public T publicInterface(String name, Consumer<T> consumer) {\n-        return publicInterface(name).obrace().indent(consumer).cbrace();\n-    }\n-\n-    public T publicFinal(String name) {\n-        return publicKeyword().space().finalKW().space().append(name);\n-    }\n-\n-    public T finalKW() {\n-        return keyword(\"final\");\n-    }\n-\n-    T publicKeyword(String name) {\n-        return publicKeyword().space().append(name);\n-    }\n-\n-\n-    public T arity(String arityPattern, int start, int n) {\n-        ochevron();\n-        for (int i = start; i < n; i++) {\n-            if (i > start) {\n-                comma().space();\n-            }\n-            append(arityPattern + i);\n-        }\n-        return cchevron();\n-    }\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/text\/JavaCodeBuilder.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package hat.text;\n-\n-\n-public enum TerminalColors {\n-    \/\/ https:\/\/www.lihaoyi.com\/post\/BuildyourownCommandLinewithANSIescapecodes.html#8-colors\n-    NONE(\"0\"),\n-    BLACK(\"38;5;0\"), DARKGREEN(\"38;5;22\"), DARKBLUE(\"38;5;27\"),\n-    GREY(\"38;5;247\"), RED(\"38;5;1\"), GREEN(\"38;5;77\"), YELLOW(\"38;5;185\"),\n-    BLUE(\"38;5;31\"), WHITE(\"38;5;251\"), ORANGE(\"38;5;208\"), PURPLE(\"38;5;133\");\n-    public final String escSequence;\n-\n-    TerminalColors(String seq) {\n-        escSequence = \"\\u001b[\" + seq + \"m\";\n-    }\n-}\n-\n","filename":"hat\/tools\/src\/main\/java\/hat\/text\/TerminalColors.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-package hat.tools;\n-\n-public class Tool{\n-     static int foo = 1;\n-}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/Tool.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.text;\n+\n+import hat.codebuilders.HATCodeBuilderWithContext;\n+import hat.optools.FieldLoadOpWrapper;\n+import hat.optools.FuncOpWrapper;\n+import hat.optools.InvokeOpWrapper;\n+import hat.optools.OpWrapper;\n+import hat.optools.StructuralOpWrapper;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.dialect.java.JavaType;\n+\n+public  class JavaHATCodeBuilder<T extends JavaHATCodeBuilder<T>> extends HATCodeBuilderWithContext<T> {\n+    @Override\n+    public T type(CodeBuilderContext buildContext,JavaType javaType) {\n+            try {\n+                typeName(javaType.resolve(buildContext.lookup()).getTypeName());\n+            } catch (ReflectiveOperationException e) {\n+                throw new RuntimeException(e);\n+            }\n+        return self();\n+    }\n+\n+    @Override\n+    public T fieldLoad(CodeBuilderContext buildContext, FieldLoadOpWrapper fieldLoadOpWrapper) {\n+        if (fieldLoadOpWrapper.isKernelContextAccess()) {\n+            identifier(\"kc\").dot().identifier(fieldLoadOpWrapper.fieldName());\n+        } else if (fieldLoadOpWrapper.isStaticFinalPrimitive()) {\n+            literal(fieldLoadOpWrapper.getStaticFinalPrimitiveValue().toString());\n+        } else {\n+            throw new IllegalStateException(\"An instance field? I guess - we dont get those in HAT \" + fieldLoadOpWrapper.fieldRef());\n+        }\n+        return self();\n+    }\n+    @Override\n+    public T methodCall(CodeBuilderContext buildContext, InvokeOpWrapper invokeOpWrapper) {\n+        if (invokeOpWrapper.operandNAsResult(0) instanceof Op.Result instanceResult) {\n+            recurse(buildContext, OpWrapper.wrap(buildContext.lookup(), instanceResult.op()));\n+        }\n+        dot().identifier(invokeOpWrapper.name());\n+        paren(_ ->\n+            commaSeparated(  invokeOpWrapper.operands().subList(0,invokeOpWrapper.operandCount()-1), o->\n+                    recurse(buildContext, OpWrapper.wrap(buildContext.lookup(), ((Op.Result) o).op()))\n+            )\n+        );\n+        return self();\n+    }\n+\n+    public T compute(FuncOpWrapper funcOpWrapper) {\n+        CodeBuilderContext buildContext = new CodeBuilderContext(funcOpWrapper);\n+        typeName(funcOpWrapper.functionReturnTypeDesc().toString()).space().identifier(funcOpWrapper.functionName());\n+        parenNlIndented(_ ->\n+                commaSeparated(funcOpWrapper.paramTable.list(), (info) -> type(buildContext,(JavaType) info.parameter.type()).space().varName(info.varOp))\n+        );\n+        braceNlIndented(_ ->\n+                funcOpWrapper.wrappedRootOpStream(funcOpWrapper.firstBlockOfFirstBody()).forEach(root ->\n+                        recurse(buildContext, root).semicolonIf(!(root instanceof StructuralOpWrapper<?>)).nl()\n+                ));\n+        return self();\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/text\/JavaHATCodeBuilder.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.text;\n+\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.buffer.S32Array;\n+import hat.buffer.S32Array2D;\n+import hat.ifacemapper.MappableIface;\n+import hat.optools.OpWrapper;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+\n+public class TestJavaHATCodeBuilder {\n+    public static class Compute {\n+        @CodeReflection\n+        public static void mandel(@MappableIface.RO KernelContext kc, @MappableIface.RW S32Array2D s32Array2D, @MappableIface.RO S32Array pallette, float offsetx, float offsety, float scale) {\n+            if (kc.x < kc.maxX) {\n+                float width = s32Array2D.width();\n+                float height = s32Array2D.height();\n+                float x = ((kc.x % s32Array2D.width()) * scale - (scale \/ 2f * width)) \/ width + offsetx;\n+                float y = ((kc.x \/ s32Array2D.width()) * scale - (scale \/ 2f * height)) \/ height + offsety;\n+                float zx = x;\n+                float zy = y;\n+                float new_zx;\n+                int colorIdx = 0;\n+                while ((colorIdx < pallette.length()) && (((zx * zx) + (zy * zy)) < 4f)) {\n+                    new_zx = ((zx * zx) - (zy * zy)) + x;\n+                    zy = (2f * zx * zy) + y;\n+                    zx = new_zx;\n+                    colorIdx++;\n+                }\n+                int color = colorIdx < pallette.length() ? pallette.array(colorIdx) : 0;\n+                s32Array2D.array(kc.x, color);\n+            }\n+        }\n+\n+\n+        @CodeReflection\n+        static public void compute(final ComputeContext computeContext, S32Array pallete, S32Array2D s32Array2D, float x, float y, float scale) {\n+\n+            computeContext.dispatchKernel(\n+                    s32Array2D.width()*s32Array2D.height(), \/\/0..S32Array2D.size()\n+                    kc -> mandel(kc, s32Array2D, pallete, x, y, scale));\n+        }\n+\n+    }\n+   public static void main(String[] args) throws NoSuchMethodException {\n+        var builder= new JavaHATCodeBuilder();\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        String methodName = \"mandel\";\n+        Method method = Compute.class.getDeclaredMethod(methodName,\n+                KernelContext.class, S32Array2D.class, S32Array.class, float.class, float.class,float.class);\n+        CoreOp.FuncOp javaFunc = Op.ofMethod(method).get();\n+        builder.compute(OpWrapper.wrap(lookup,javaFunc));\n+        System.out.println(builder.toString());\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/text\/TestJavaHATCodeBuilder.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,369 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel;\n+\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import hat.tools.textmodel.tokens.Arrow;\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Ch;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.FloatConst;\n+import hat.tools.textmodel.tokens.IntConst;\n+import hat.tools.textmodel.tokens.LeafReplacementToken;\n+import hat.tools.textmodel.tokens.LineCol;\n+import hat.tools.textmodel.tokens.Parenthesis;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.StringLiteral;\n+import hat.tools.textmodel.tokens.Token;\n+import hat.tools.textmodel.tokens.Ws;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Predicate;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class BabylonTextModel extends TextModel {\n+\n+    public static class BabylonTypeAttribute extends LeafReplacementToken {\n+        public BabylonTypeAttribute(Token l, Token m, Token r) {\n+            super(l, m, r);\n+        }\n+    }\n+\n+    public static class BabylonRefAttribute extends LeafReplacementToken {\n+        public BabylonRefAttribute(Token l, Token m, Token r) {\n+            super(l, m, r);\n+        }\n+    }\n+\n+    public static class BabylonNamedAttribute extends LeafReplacementToken {\n+        public final String name;\n+\n+        public BabylonNamedAttribute(Token l, Token lm, Token rm, Token r) {\n+            super(l, lm, rm, r);\n+            this.name = l.asString();\n+        }\n+    }\n+\n+    public static class BabylonLocationAttribute extends BabylonNamedAttribute implements LineCol {\n+        static Pattern locPattern = Pattern.compile(\"\\\"([0-9]+):([0-9]+)[^\\\"]*\\\"\");\n+        public final int line;\n+        public final int col;\n+\n+        public BabylonLocationAttribute(Token l, Token lm, Token rm, Token r) {\n+            super(l, lm, rm, r);\n+            if (locPattern.matcher(r.asString()) instanceof Matcher m && m.matches() && m.groupCount() > 1) {\n+                line = Integer.parseInt(m.group(1));\n+                col = Integer.parseInt(m.group(2));\n+            } else {\n+                throw new IllegalArgumentException(\"invalid location attribute no line\/col\");\n+            }\n+        }\n+\n+        @Override\n+        public int line() {\n+            return line;\n+        }\n+\n+        @Override\n+        public int col() {\n+            return col;\n+        }\n+    }\n+\n+    public static class BabylonFileLocationAttribute extends BabylonLocationAttribute {\n+        static Pattern locFilePattern = Pattern.compile(\"\\\"([0-9]+):([0-9]+):file:([^\\\"]*)\\\"\");\n+        final Path path;\n+\n+        static Path getPathFromFileLocString(String fileLocString) {\n+            return locFilePattern.matcher(fileLocString) instanceof Matcher m\n+                    && m.matches()\n+                    && m.groupCount() > 2\n+                    && m.group(3) instanceof String filename\n+                    && Path.of(filename) instanceof Path javaSource\n+                    ? javaSource : null;\n+        }\n+\n+        public BabylonFileLocationAttribute(Token l, Token lm, Token rm, Token r) {\n+            super(l, lm, rm, r);\n+            this.path = getPathFromFileLocString(r.asString());\n+        }\n+    }\n+\n+    public static class BabylonAnonymousAttribute extends LeafReplacementToken {\n+        public BabylonAnonymousAttribute(Token l, Token r) {\n+            super(l, r);\n+        }\n+    }\n+\n+    public static class BabylonSSARef extends LeafReplacementToken {\n+        public final int id;\n+\n+        public BabylonSSARef(Token t1, Token intConst) {\n+            super(t1, intConst);\n+            this.id = ((IntConst) intConst).i;\n+        }\n+\n+        public static boolean isA(Token t, Predicate<BabylonSSARef> predicate) {\n+            return t instanceof BabylonSSARef ssaRef && predicate.test(ssaRef);\n+        }\n+\n+        public static boolean isA(Token t) {\n+            return isA(t, _ -> true);\n+        }\n+    }\n+\n+    public static class BabylonBlock extends LeafReplacementToken {\n+        static final public Pattern regex = Pattern.compile(\"block_([0-9]+)\");\n+\n+        public final int id;\n+\n+        public BabylonBlock(Token t1, Token t2) {\n+            super(t1, t2);\n+            if (regex.matcher(t2.asString()) instanceof Matcher m && m.matches() && m.groupCount() == 1) {\n+                id = Integer.parseInt(m.group(1));\n+            } else {\n+                throw new IllegalArgumentException(\"invalid block attribute no id\");\n+            }\n+        }\n+\n+        public static boolean isA(Token t, Predicate<Token> predicate) {\n+            return t instanceof BabylonBlock && predicate.test(t);\n+        }\n+\n+        public static boolean isA(Token t) {\n+            return isA(t, _ -> true);\n+        }\n+    }\n+\n+    public static class BabylonBlockDef extends LeafReplacementToken {\n+        public final int id;\n+\n+        public BabylonBlockDef(Token ref) {\n+            super(ref);\n+            this.id = ((BabylonBlock) ref).id;\n+        }\n+    }\n+\n+    public static class BabylonSSADef extends LeafReplacementToken {\n+        public final int id;\n+\n+        public BabylonSSADef(Token ssaRef) {\n+            super(ssaRef);\n+            this.id = ((BabylonSSARef) ssaRef).id;\n+        }\n+    }\n+\n+    public static class BabylonOp extends LeafReplacementToken {\n+        public static final Pattern regex = Pattern.compile(\n+                \"(field|var)\\\\.(store|load)|var|return|yield|continue|invoke|conv|mul|div|add|sub|constant|mod|lt\"\n+        );\n+\n+        public BabylonOp(Token t) {\n+            super(t);\n+        }\n+    }\n+\n+    public static class BabylonBlockOrBody extends LeafReplacementToken {\n+        public static final Pattern regex = Pattern.compile(\"java\\\\.(if|while)\");\n+\n+        public BabylonBlockOrBody(Token t) {\n+            super(t);\n+        }\n+    }\n+\n+    public Path javaSource;\n+    public JavaTextModel javaTextModel;\n+\n+    public record SSAEdge(BabylonSSARef ssaRef, BabylonSSADef ssaDef) {\n+    }\n+\n+    public record BlockEdge(BabylonBlock ref, BabylonBlockDef def) {\n+    }\n+\n+    public List<SSAEdge> ssaEdgeList = new ArrayList<>();\n+    public List<BlockEdge> blockEdgeList = new ArrayList<>();\n+    public Map<Integer, BabylonSSADef> idToSSADefMap = new HashMap<>();\n+    public Map<Integer, BabylonBlockDef> idToBlockDefMap = new HashMap<>();\n+    public List<BabylonLocationAttribute> babylonLocationAttributes = new ArrayList<>();\n+\n+    private BabylonTextModel transform() {\n+        \/\/ \"[0-9][0-9]*\" ->IntConst\n+        replace(true, t -> Seq.isA(t, $ -> $.matches(IntConst.regex)), IntConst::new);\n+\n+        \/\/ IntConst '.' IntConst ->FloatConst   (yeah we are missing '.' IntConst  and the exponent stuff)\n+        replace(true, (t1, t2, t3) -> IntConst.isA(t1) && Ch.isADot(t2) && Seq.isA(t3), FloatConst::new);\n+\n+        \/\/ (Seq|Dname) '.' Seq -> Dname\n+        replace(true, (t1, t2, t3) -> (Seq.isA(t1) || DottedName.isA(t1)) && Ch.isADot(t2) && Seq.isA(t3), DottedName::new);\n+\n+        \/\/ map all seqs to DottedName\n+        replace(true, t -> Seq.isA(t, $ -> $.matches(DottedName.regex)), DottedName::new);\n+\n+        Pattern reservedWords = Pattern.compile(\"(func|Var)\");\n+        \/\/ reserved word -> ReservedWord\n+        replace(true, t -> DottedName.isA(t, $ -> $.matches(reservedWords)), ReservedWord::new);\n+\n+\n+        \/\/ ^block_[0-9]+ -> Block\n+        replace(true, (t1, t2) -> Ch.isAHat(t1) && DottedName.isA(t2, $ -> $.matches(BabylonBlock.regex)), BabylonBlock::new);\n+\n+        \/\/ ^block_[0-9]+: -> BlockDef\n+        replace(true, t -> BabylonBlock.isA(t, $ -> $.next(Ch::isAColon)), BabylonBlockDef::new);\n+\n+        \/\/ ^block_[0-9]+() -> Block\n+        \/\/ This is broken just because we have a '(' does not make it a def we also need to check for the colon\n+        replace(true, t -> BabylonBlock.isA(t, $ -> $.next2((t2,t3)->t2 instanceof Parenthesis && Ch.isAColon(t3))), BabylonBlockDef::new);\n+\n+\n+        \/\/ various opnames -> Op  (I am sure I have missed some)\n+        replace(true, t -> DottedName.isA(t, $ -> $.matches(BabylonOp.regex)), BabylonOp::new);\n+\n+        \/\/ java.while || java.if -> Body\n+        replace(true, t -> DottedName.isA(t, $ -> $.matches(BabylonBlockOrBody.regex)), BabylonBlockOrBody::new);\n+\n+        \/\/ '-' + '>' -> ->\n+        replace(true, (t1, t2) -> Ch.isAHyphen(t1) && Ch.isAGt(t2), Arrow::new);\n+\n+\n+        \/\/ java.type:\"MyTypename\" -> Type\n+        replace(true, (t1, t2, t3) ->\n+                        DottedName.isA(t1, $ -> $.is(\"java.type\")) && Ch.isAColon(t2) && StringLiteral.isA(t3)\n+                , BabylonTypeAttribute::new\n+        );\n+\n+        \/\/ java.ref:\"MyTypename\" -> Type\n+        replace(true, (t1, t2, t3) ->\n+                        DottedName.isA(t1, $ -> $.is(\"java.ref\")) && Ch.isAColon(t2) && StringLiteral.isA(t3)\n+                , BabylonRefAttribute::new\n+        );\n+\n+        \/\/ %[0-9]+ -> BabylonSSARef\n+        replace(true, (t1, t2) -> Ch.isAPercent(t1) && IntConst.isA(t2), BabylonSSARef::new);\n+\n+        \/\/ We separate SSARefs and SSADefs\n+        \/\/ SSARef : -> SSADef\n+        \/\/ otherwise we leave as a SSARef\n+        replace(true, t -> BabylonSSARef.isA(t,\n+                        $ -> $.next2((t2, t3) -> Ws.isA(t2) && Ch.isAColon(t3)) \/\/ this is a lookahead.. t2 and t3 are not replaced\n+                )\n+                , BabylonSSADef::new\n+        );\n+\n+        \/\/ @ (char) -> At\n+        replace(true, Ch::isAnAt, At::new);\n+\n+        \/\/  @\"foo\" -> AnonymousAttribute\n+        replace(true, (t1, t2) -> At.isA(t1) && StringLiteral.isA(t2), BabylonAnonymousAttribute::new);\n+\n+        \/\/  @loc=\"line:col:file.*\" -> FileLocationAttribute\n+        replace(true, (t1, t2, t3, t4) ->\n+                        At.isA(t1)\n+                                && DottedName.isA(t2, $ -> $.is(\"loc\"))\n+                                && Ch.isAnEquals(t3)\n+                                && StringLiteral.isA(t4, $ -> $.matches(BabylonFileLocationAttribute.locFilePattern))\n+                , BabylonFileLocationAttribute::new\n+        );\n+\n+        \/\/  @loc=\"line:col:.*\" -> LocationAttribute\n+        replace(true, (t1, t2, t3, t4) ->\n+                        At.isA(t1)\n+                                && DottedName.isA(t2, $ -> $.is(\"loc\"))\n+                                && Ch.isAnEquals(t3)\n+                                && StringLiteral.isA(t4, $ -> $.matches(BabylonLocationAttribute.locPattern))\n+                , BabylonLocationAttribute::new\n+        );\n+        \/\/  @name=\".*\" -> LocationAttribute\n+        replace(true, (t1, t2, t3, t4) ->\n+                        At.isA(t1) && DottedName.isA(t2) && Ch.isAnEquals(t3) && StringLiteral.isA(t4)\n+                , BabylonNamedAttribute::new\n+        );\n+\n+        visit(t -> {\n+            if (t instanceof BabylonSSADef def) {\n+                idToSSADefMap.put(def.id, def);\n+            } else if (t instanceof BabylonSSARef ref) {\n+                if (!idToSSADefMap.containsKey(ref.id)) {\n+                    throw new IllegalArgumentException(\"Unknown possibly forward BabylonSSARef id \" + ref.id);\n+                }\n+                var def = idToSSADefMap.get(ref.id);\n+                ssaEdgeList.add(new SSAEdge(ref, def));\n+            } else if (t instanceof BabylonLocationAttribute loc) {\n+                babylonLocationAttributes.add(loc);\n+            } else if (t instanceof BabylonBlockDef def) {\n+                idToBlockDefMap.put(def.id, def);\n+            }\n+        });\n+        visit(t -> {\n+                    if (t instanceof BabylonBlock ref) {\n+                        if (!idToBlockDefMap.containsKey(ref.id)) {\n+                            throw new IllegalArgumentException(\"Unknown possibly forward BabylonBlock id \" + ref.id);\n+                        }\n+                        var def = idToBlockDefMap.get(ref.id);\n+                        blockEdgeList.add(new BlockEdge(ref, def));\n+                    }\n+                }\n+        );\n+\n+        babylonLocationAttributes = babylonLocationAttributes.stream().sorted().collect(Collectors.toList());\n+        return this;\n+    }\n+\n+    static public BabylonTextModel of(String text) {\n+        BabylonTextModel doc = new BabylonTextModel();\n+        doc.parse(text);\n+        doc.find(true, (t) -> t instanceof StringLiteral, (t) -> {\n+            if (t instanceof StringLiteral sl\n+                    && sl.matcher(BabylonFileLocationAttribute.locFilePattern) instanceof Matcher m\n+                    && Path.of(m.group(3)) instanceof Path javaSource && Files.exists(javaSource)\n+            ) {\n+                doc.javaSource = javaSource;\n+                try {\n+                    doc.javaTextModel = JavaTextModel.of(Files.readString(javaSource));\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        });\n+        if (doc.javaSource == null) {\n+            throw new IllegalStateException(\"No source!\");\n+        }\n+        doc.transform();\n+        return doc;\n+    }\n+\n+    static public BabylonTextModel of(CoreOp.FuncOp javaFunc) {\n+        var crDoc = of(javaFunc.toText());\n+        return crDoc;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/BabylonTextModel.java","additions":369,"deletions":0,"binary":false,"changes":369,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel;\n+\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class\n+Cursor {\n+    final private char[] chars;\n+    private Loc current;\n+\n+    public Cursor(String text) {\n+        this.chars = text.toCharArray();\n+       \/\/ current = new Loc(this, substring(0), 0, 1, 0);\n+        current = new Loc(this,  0, 1, 0);\n+    }\n+\n+    String substring(int offset) {\n+        return new String(chars, offset, chars.length - offset);\n+    }\n+    public record Loc0(Cursor cursor, String lookingAt, int textOffset, int line, int col) implements Pos {\n+        public Character ch() {\n+            return (textOffset() < cursor().chars.length) ? cursor().chars[textOffset()] : null;\n+        }\n+\n+        public Character peek() {\n+            return ((textOffset() + 1) < cursor().chars.length) ? cursor().chars[textOffset() + 1] : null;\n+        }\n+\n+        public Pos pos(){\n+            return new Pos.Impl(cursor.chars,textOffset,line,col);\n+        }\n+\n+        @Override\n+        public char[] text() {\n+            return cursor.chars;\n+        }\n+    }\n+\n+    public record Loc(Cursor cursor,  int textOffset, int line, int col) implements Pos {\n+        public Character ch() {\n+            return (textOffset() < cursor().chars.length) ? cursor().chars[textOffset()] : null;\n+        }\n+\n+        public Character peek() {\n+            return ((textOffset() + 1) < cursor().chars.length) ? cursor().chars[textOffset() + 1] : null;\n+        }\n+\n+        public Pos pos(){\n+            return new Pos.Impl(cursor.chars,textOffset,line,col);\n+        }\n+\n+        @Override\n+        public char[] text() {\n+            return cursor.chars;\n+        }\n+    }\n+\n+    public Loc next() {\n+        if (current.ch() instanceof Character ch) {\n+            Loc prev = current;\n+           \/\/ String lookingAt = substring(current.textOffset + 1);\n+            current = (ch=='\\n')\n+                   \/\/ ? new Loc(this,lookingAt, current.textOffset + 1, current.line + 1, 0)\n+                   \/\/ : new Loc(this,lookingAt, current.textOffset + 1, current.line, current.col+1);\n+               ? new Loc(this,current.textOffset + 1, current.line + 1, 0)\n+                    : new Loc(this, current.textOffset + 1, current.line, current.col+1);\n+\n+            return prev;\n+        }\n+        return null;\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/Cursor.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel;\n+\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Ch;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.FloatConst;\n+import hat.tools.textmodel.tokens.IntConst;\n+import hat.tools.textmodel.tokens.LeafReplacementToken;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.Token;\n+\n+import java.util.regex.Pattern;\n+\n+public class JavaTextModel extends TextModel {\n+\n+\n+    public static class JavaModifier extends LeafReplacementToken {\n+        public static final Pattern regex = Pattern.compile(\"static|abstract|public|private|protected|final\");\n+        public JavaModifier(Token t) {\n+            super(t);\n+        }\n+    }\n+    public static class JavaType extends LeafReplacementToken  {\n+       public static final Pattern regex = Pattern.compile(\n+                \"var|if|while|case|switch|break|for|new|import|instanceof|default|return|super|package\"\n+       );\n+\n+        public JavaType(Token t) {\n+            super(t);\n+        }\n+    }\n+    public static class JavaAnnotation extends LeafReplacementToken{\n+        public JavaAnnotation(Token at, Token identifier) {\n+            super(at, identifier);\n+        }\n+    }\n+\n+     public void transform(){\n+         \/\/ \"[0-9][0-9]*\" ->IntConst\n+         replace(true, t -> Seq.isA(t, $->$.matches(IntConst.regex)), IntConst::new);\n+\n+         \/\/ IntConst '.' IntConst ->FloatConst   (yeah we are missing '.' IntConst  and the exponent stuff)\n+         replace(true, (t1,t2,t3) -> IntConst.isA(t1) && Ch.isADot(t2) && IntConst.isA(t3), FloatConst::new);\n+\n+         \/\/ @ (char) -> At\n+         replace(true, Ch::isAnAt, At::new);\n+\n+         Pattern javaTypes = Pattern.compile(\"void|int|float|double|boolean|char|short|long|class|record|interface|String\");\n+\n+         replace(true,t -> Seq.isA(t, $->$.matches(javaTypes)), ReservedWord::new);\n+\n+         replace(true,t -> Seq.isA(t,$->$.matches(JavaType.regex)), JavaType::new);\n+\n+         replace(true,t -> Seq.isA(t,$->$.matches(JavaModifier.regex)),JavaModifier::new);\n+\n+         \/\/ (Seq|Dname) '.' Seq -> Dname\n+         replace(true,(t1,t2,t3) -> (Seq.isA(t1) || DottedName.isA(t1)) && Ch.isADot(t2) && Seq.isA(t3),DottedName::new);\n+\n+         \/\/ map all seqs to DottedName\n+         replace(true, t -> Seq.isA(t,$->$.matches(DottedName.regex)), DottedName::new);\n+     }\n+    static public JavaTextModel of(String text) {\n+        JavaTextModel doc = new JavaTextModel();\n+        doc.parse(text);\n+        doc.transform();\n+        return doc;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/JavaTextModel.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel;\n+\n+import hat.tools.textmodel.tokens.Parenthesis;\n+import hat.tools.textmodel.tokens.Root;\n+import hat.tools.textmodel.tokens.Token;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public class TextModel implements Root {\n+    List<Token> children = new ArrayList<>();\n+\n+    @Override\n+    public List<Token> children() {\n+        return children;\n+    }\n+\n+    final List<Parenthesis.OpenClose> openCloses;\n+    final Map<Character, Parenthesis.OpenClose> openCloseMap= new HashMap<>();\n+    final Map<Character, Parenthesis.OpenClose> closeOpenMap= new HashMap<>();\n+    @Override\n+    public Parenthesis.OpenClose opensWith(Character ch) {\n+        return (openCloseMap.containsKey(ch) && openCloseMap.get(ch) instanceof Parenthesis.OpenClose openClose) ? openClose : null;\n+    }\n+\n+    @Override\n+    public Parenthesis.OpenClose closedBy(Character ch) {\n+        return (closeOpenMap.containsKey(ch) && closeOpenMap.get(ch) instanceof Parenthesis.OpenClose openClose) ? openClose : null;\n+    }\n+\n+   protected  TextModel(List<Parenthesis.OpenClose> openCloses) {\n+        this.openCloses = openCloses;\n+        for (Parenthesis.OpenClose openClose : openCloses) {\n+            this.openCloseMap.put(openClose.open(), openClose);\n+            this.closeOpenMap.put(openClose.close(), openClose);\n+        }\n+\n+    }\n+    protected TextModel() {\n+        this(List.of(\n+                Parenthesis.OpenClose.of('(', ')'),\n+                Parenthesis.OpenClose.of('{', '}'),\n+                Parenthesis.OpenClose.of('[', ']')\n+        ));\n+    }\n+\n+    public static TextModel of(String text) {\n+        Cursor cursor = new Cursor(text);\n+        TextModel doc = new TextModel();\n+        doc.parse(cursor);\n+        String plainText = doc.plainText();\n+        if (!plainText.equals(text)) {\n+            try {\n+                var orig =Files.createTempFile(\"orig\", \".txt\");\n+                Files.writeString(orig, text);\n+                var generated =Files.createTempFile(\"generated\", \".txt\");\n+                Files.writeString(generated, text);\n+                throw new RuntimeException(\"Generated Text != original. Check \" + orig.toAbsolutePath() + \" and \" + generated.toAbsolutePath());\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"text != original but unable to generate files\" + e);\n+            }\n+        }\n+        return doc;\n+    }\n+\n+    public String plainText(){\n+            var docModelRenderer = new PlainTextRenderer();\n+            visit(docModelRenderer);\n+            return docModelRenderer.toString();\n+    }\n+\n+    private  static class PlainTextRenderer implements Consumer<Token> {\n+        StringBuilder stringBuilder = new StringBuilder();\n+        @Override\n+        public void accept(Token t) {\n+            stringBuilder.append(t.asString());\n+        }\n+        @Override\n+        public String toString() {\n+            return stringBuilder.toString();\n+        }\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/TextModel.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,362 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.html;\n+\n+\n+import hat.tools.textmodel.tokens.Token;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public interface Spanner<T extends Spanner<T>> extends  Function<String, T> {\n+    T apply(String o);\n+\n+    default T apply(Token t) {\n+        return apply(t.asString());\n+    }\n+\n+    default T self() {\n+        return (T) this;\n+    }\n+    default T esc() {\n+        return apply(\"\\033\");\n+    }\n+\n+    default T color(Style style, Consumer<T> consumer) {\n+        apply(\"<span class=\").apply(style.name).apply(\">\");\n+        consumer.accept(self());\n+        apply(\"<\/span>\");\n+        return self();\n+    }\n+\n+    default T div(Style style, Consumer<T> consumer) {\n+        apply(\"<div class=\").apply(style.name).apply(\">\");\n+        consumer.accept(self());\n+        apply(\"<\/div>\");\n+        return self();\n+    }\n+\n+    default T pre(Style style, Consumer<T> consumer) {\n+        apply(\"<pre class=\").apply(style.name).apply(\">\");\n+        consumer.accept(self());\n+        apply(\"<\/pre>\");\n+        return self();\n+    }\n+\n+    record Style(Style base, String type, String name, List<String> s) {\n+        static Style div(String name) {\n+            return new Style(null, \"pre\", name, List.of());\n+        }\n+\n+        static Style pre(String name) {\n+            return new Style(null, \"div\", name, List.of());\n+        }\n+\n+        static Style span(String name) {\n+            return new Style(null, \"span\", name, List.of());\n+        }\n+\n+        Style with(String name, List<String> s) {\n+            return new Style(this, this.type, name, s);\n+        }\n+\n+        Style with(String name, String... s) {\n+            return with(name, List.of(s));\n+        }\n+\n+        Style bold() {\n+            return with(this.name() + \"_BOLD\", \"font-weight: bold;\");\n+        }\n+\n+        Style italic() {\n+            return with(this.name() + \"_ITALIC\", \"font-style: italic;\");\n+        }\n+\n+        Style bright() {\n+            return with(this.name() + \"_BRIGHT\", \"font-style: lighter;\");\n+        }\n+\n+        Style fg() {\n+            return with(this.name() + \"_FG\", \"color: \" + name().toLowerCase());\n+        }\n+\n+        Style bg(String color) {\n+            return with(this.name(), \"background: \" + color);\n+        }\n+\n+        public Style bg() {\n+            return with(this.name() + \"_BG\", \"background: \" + name().toLowerCase());\n+        }\n+\n+        String styleName() {\n+            return this.type + \".\" + this.name() + \"{\\n      \" + String.join(\";\\n       \", this.s) + \"\\n}\";\n+        }\n+    }\n+\n+    Style BLACK = Style.span(\"black\");\n+    Style RED = Style.span(\"red\");\n+    Style GREEN = Style.span(\"green\");\n+    Style YELLOW = Style.span(\"yellow\");\n+    Style BLUE = Style.span(\"blue\");\n+    Style PURPLE = Style.span(\"purple\");\n+    Style CYAN = Style.span(\"cyan\");\n+    Style MAGENTA = Style.span(\"magenta\");\n+    Style WHITE = Style.span(\"white\");\n+\n+    Style DIV = Style.div(\"code\").bg(\"black\");\n+    Style PRE = Style.pre(\"code\").bg(\"black\");\n+    List<Style> styles = List.of(\n+            BLACK.fg(), RED.fg(), GREEN.fg(), YELLOW.fg(), BLUE.fg(), PURPLE.fg(), CYAN.fg(), MAGENTA.fg(), WHITE.fg()\n+            , DIV, PRE\n+    );\n+\n+    default String styleSheet() {\n+        StringBuilder sb = new StringBuilder(\"<style>\\n\");\n+        for (Style style : styles) {\n+            sb.append(style.styleName());\n+        }\n+        sb.append(\"<\/style>\");\n+        return sb.toString();\n+    }\n+\n+\n+    default T line(int n) {\n+        apply(\"<span style=\\\"color:black; background:grey; text-align: right; width:50px; margin-left:2px; margin-right:20px; \\\">\" + n + \"<\/span>\");\n+        return (T) this;\n+    }\n+\n+    default T black(Consumer<T> cc) {\n+        return color(BLACK.fg(), cc);\n+    }\n+\n+    default T red(Consumer<T> cc) {\n+        return color(RED.fg(), cc);\n+    }\n+\n+    default T green(Consumer<T> cc) {\n+        return color(GREEN.fg(), cc);\n+    }\n+\n+    default T yellow(Consumer<T> cc) {\n+        return color(YELLOW.fg(), cc);\n+    }\n+\n+    default T blue(Consumer<T> cc) {\n+        return color(BLUE.fg(), cc);\n+    }\n+\n+    default T magenta(Consumer<T> cc) {\n+        return color(PURPLE.fg(), cc);\n+    }\n+\n+    default T cyan(Consumer<T> cc) {\n+        return color(CYAN.fg(), cc);\n+    }\n+\n+    default T white(Consumer<T> cc) {\n+        return color(WHITE.fg(), cc);\n+    }\n+\n+    default T blackBold(Consumer<T> cc) {\n+        return color(BLACK.fg().bold(), cc);\n+    }\n+\n+    default T redBold(Consumer<T> cc) {\n+        return color(RED.fg().bold(), cc);\n+    }\n+\n+    default T greenBold(Consumer<T> cc) {\n+        return color(GREEN.fg().bold(), cc);\n+    }\n+\n+    default T yellowBold(Consumer<T> cc) {\n+        return color(YELLOW.fg().bold(), cc);\n+    }\n+\n+    default T blueBold(Consumer<T> cc) {\n+        return color(BLUE.fg().bold(), cc);\n+    }\n+\n+    default T magentaBold(Consumer<T> cc) {\n+        return color(PURPLE.fg().bold(), cc);\n+    }\n+\n+    default T cyanBold(Consumer<T> cc) {\n+        return color(CYAN.fg().bold(), cc);\n+    }\n+\n+    default T whiteBold(Consumer<T> cc) {\n+        return color(WHITE.fg().bold(), cc);\n+    }\n+\n+    default T blackBoldAndBright(Consumer<T> cc) {\n+        return color(BLACK.fg().bold().bright(), cc);\n+    }\n+\n+    default T redBoldAndBright(Consumer<T> cc) {\n+        return color(RED.fg().bold().bright(), cc);\n+    }\n+\n+    default T greenBoldAndBright(Consumer<T> cc) {\n+        return color(GREEN.fg().bold().bright(), cc);\n+    }\n+\n+    default T yellowBoldAndBright(Consumer<T> cc) {\n+        return color(YELLOW.fg().bold().bright(), cc);\n+    }\n+\n+    default T blueBoldAndBright(Consumer<T> cc) {\n+        return color(BLUE.fg().bold().bright(), cc);\n+    }\n+\n+    default T magentaAndBright(Consumer<T> cc) {\n+        return color(PURPLE.fg().bold().bright(), cc);\n+    }\n+\n+    default T cyanBoldAndBright(Consumer<T> cc) {\n+        return color(CYAN.fg().bold().bright(), cc);\n+    }\n+\n+    default T whiteBoldAndBright(Consumer<T> cc) {\n+        return color(WHITE.fg().bold().bright(), cc);\n+    }\n+\n+    default T blackBright(Consumer<T> cc) {\n+        return color(BLACK.fg().bright(), cc);\n+    }\n+\n+    default T redBright(Consumer<T> cc) {\n+        return color(RED.fg().bright(), cc);\n+    }\n+\n+    default T greenBright(Consumer<T> cc) {\n+        return color(GREEN.fg().bright(), cc);\n+    }\n+\n+    default T yellowBright(Consumer<T> cc) {\n+        return color(YELLOW.fg().bright(), cc);\n+    }\n+\n+    default T blueBright(Consumer<T> cc) {\n+        return color(BLUE.fg().bright(), cc);\n+    }\n+\n+    default T magentaBright(Consumer<T> cc) {\n+        return color(PURPLE.fg().bright(), cc);\n+    }\n+\n+    default T cyanBright(Consumer<T> cc) {\n+        return color(CYAN.fg().bright(), cc);\n+    }\n+\n+    default T whiteBright(Consumer<T> cc) {\n+        return color(WHITE.fg().bright(), cc);\n+    }\n+\n+\n+    default T blackBack(Consumer<T> cc) {\n+        return color(BLACK.bg(), cc);\n+    }\n+\n+    default T redBack(Consumer<T> cc) {\n+        return color(RED.bg(), cc);\n+    }\n+\n+    default T greenBack(Consumer<T> cc) {\n+        return color(GREEN.bg(), cc);\n+    }\n+\n+    default T yellowBack(Consumer<T> cc) {\n+        return color(YELLOW.bg(), cc);\n+    }\n+\n+    default T blueBack(Consumer<T> cc) {\n+        return color(BLUE.bg(), cc);\n+    }\n+\n+    default T magentaBack(Consumer<T> cc) {\n+        return color(PURPLE.bg(), cc);\n+    }\n+\n+    default T cyanBack(Consumer<T> cc) {\n+        return color(CYAN.bg(), cc);\n+    }\n+\n+    default T whiteBack(Consumer<T> cc) {\n+        return color(WHITE.bg(), cc);\n+    }\n+\n+    record Adaptor(Consumer<String> consumer) implements Spanner<Adaptor> {\n+        @Override\n+        public Adaptor apply(String s) {\n+            consumer.accept(s);\n+            return self();\n+        }\n+    }\n+\n+    ;\n+\n+    static Spanner<Adaptor> adapt(Consumer<String> consumer) {\n+        return new Adaptor(consumer);\n+    }\n+\n+    default T open() {\n+        return apply(\"\"\"\n+                <html>\n+                   <head>\n+                \"\"\" + styleSheet() + \"\"\"\n+                   <\/head>\n+                   <body>\n+                \"\"\");\n+    }\n+\n+    default T close() {\n+        return apply(\"\"\"\n+                    <\/body>\n+                <\/html>\n+                \"\"\");\n+    }\n+\n+    class IMPL implements Spanner<Spanner.IMPL> {\n+        private final PrintStream printStream;\n+\n+        @Override\n+        public IMPL apply(String s) {\n+            printStream.append(s);\n+            return self();\n+        }\n+\n+        IMPL(PrintStream printStream) {\n+            this.printStream = printStream;\n+        }\n+    }\n+\n+    static IMPL of(PrintStream printStream) {\n+        return new IMPL(printStream);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/html\/Spanner.java","additions":362,"deletions":0,"binary":false,"changes":362,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.html.tokens;\n+\n+import hat.tools.textmodel.tokens.Token;\n+import hat.tools.textmodel.tokens.LeafReplacementToken;\n+\n+public class GT_ENTITY extends LeafReplacementToken {\n+    public GT_ENTITY(Token l) {\n+        super(l);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"&gt;\";\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/html\/tokens\/GT_ENTITY.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.html.tokens;\n+\n+import hat.tools.textmodel.tokens.Token;\n+import hat.tools.textmodel.tokens.LeafReplacementToken;\n+\n+public class LT_ENTITY extends LeafReplacementToken {\n+    public LT_ENTITY(Token l) {\n+        super(l);\n+    }\n+    @Override\n+    public String toString() {\n+        return \"&lt;\";\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/html\/tokens\/LT_ENTITY.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,262 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.terminal;\n+\n+\n+import hat.tools.textmodel.tokens.Token;\n+\n+import java.io.PrintStream;\n+import java.util.Arrays;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+\n+public interface ANSI<T extends ANSI<T>> extends  Function<String, T> {\n+    T apply(String o);\n+\n+    default T apply(Token t) {\n+        return apply(t.asString());\n+    }\n+\n+    default T self() {\n+        return (T) this;\n+    }\n+\n+    default void skip(){\n+    }\n+\n+    int BLACK = 30;\n+    int RED = 31;\n+    int GREEN = 32;\n+    int YELLOW = 33;\n+    int BLUE = 34;\n+    int PURPLE = 35;\n+    int CYAN = 36;\n+    int WHITE = 37;\n+\n+    default T esc() {\n+        return apply(\"\\033\");\n+    }\n+\n+    default T color(int c, Consumer<T> cc) {\n+        csi().ints(c).apply(\"m\");\n+        cc.accept(self());\n+        return reset();\n+    }\n+\n+    default T color(int c1, int c2, Consumer<T> cc) {\n+        csi().ints(c1, c2).apply(\"m\");\n+        cc.accept(self());\n+\n+        return reset();\n+    }\n+    default T fg(int color, Consumer<T> cc) {\n+        return color(0, color, cc);\n+    }\n+\n+\n+    default T bold(int color, Consumer<T> cc) {\n+        return color(1, color, cc);\n+    }\n+\n+\n+    default T boldAndBright(int color, Consumer<T> cc) {\n+        return color(0, color + 60, cc);\n+    }\n+\n+\n+\n+    default T bright(int color, Consumer<T> cc) {\n+        return color(1, color + 60, cc);\n+    }\n+\n+\n+\n+    default T bg(int color,Consumer<T> cc) {\n+        return color(color + 10, cc);\n+    }\n+\n+    default T csi() {\n+        return esc().apply(\"[\");\n+    }\n+\n+    default T home(){\n+        return csi().ints(0,0).apply(\"H\");\n+    }\n+\n+    default T csiQuery() {\n+        return csi().apply(\"?\");\n+    }\n+\n+    default T ints(int... n) {\n+        apply(String.valueOf(n[0]));\n+        for (int i = 1; i < n.length; i++) {\n+            apply(\";\" + n[i]);\n+        }\n+        return self();\n+    }\n+\n+\n+    default T inv() {\n+        return csi().ints(7).apply(\"m\");\n+    }\n+\n+    default T reset() {\n+        return csi().ints(0).apply(\"m\");\n+    }\n+\n+    default T inv(Consumer<T> c) {\n+        inv();\n+        c.accept(self());\n+        return reset();\n+    }\n+\n+\n+\n+    record Adaptor(Consumer<String> consumer) implements ANSI<Adaptor> {\n+        @Override\n+        public Adaptor apply(String s) {\n+            consumer.accept(s);\n+            return self();\n+        }\n+    }\n+\n+    default T repeat(String s, int count) {\n+        return apply(s.repeat(count));\n+    }\n+\n+    default T fill(int cols, String s) {\n+        return apply(s).repeat(\" \", Math.max(0, cols - s.length()));\n+    }\n+\n+    class IMPL implements ANSI<IMPL> {\n+        private final PrintStream printStream;\n+\n+        @Override\n+        public IMPL apply(String s) {\n+            printStream.append(s);\n+            return self();\n+        }\n+\n+        IMPL(PrintStream printStream) {\n+            this.printStream = printStream;\n+        }\n+    }\n+\n+    static IMPL of(PrintStream printStream) {\n+        return new IMPL(printStream);\n+    }\n+\n+\n+     class DotImage {\n+        final private ANSI<?> ansi;\n+        final public int width;\n+        final public int height;\n+        final private byte[] bytes;\n+        int charWidth;\n+        int charHeight;\n+        final private  char[] chars;\n+        public DotImage(ANSI<?> ansi, int width, int height){\n+            this.ansi = ansi;\n+            this.width = width;\n+            this.height = height;\n+            this.bytes = new byte[width*height];\n+            this.charWidth = width\/2;\n+            this.charHeight = height\/4;\n+            this.chars = new char[charWidth*charHeight];\n+        }\n+        public void set(int x, int y){\n+            bytes[(y*width)+x]=1;\/\/0xff;\n+        }\n+        void reset(int x, int y){\n+            bytes[(y*width)+x]=0;\n+        }\n+        int i(int x, int y){\n+            byte b = bytes[(y*width)+x];\n+            return (int)(b<0?b+256:b);\n+        }\n+        \/**\n+         See the unicode mapping table here\n+         https:\/\/images.app.goo.gl\/ntxis4mKzn7GmrGb7\n+         *\/\n+        char dotchar(int bytebits){\n+           \/\/ int mapped = (bytebits&0x07)|(bytebits&0x70)>>1|(bytebits&0x08)<<3|(bytebits&0x80);\n+            \/\/char brail = (char)(0x2800+(bytebits&0x07)|(bytebits&0x70)>>1|(bytebits&0x08)<<3|(bytebits&0x80));\n+            return  (char)(0x2800+(bytebits&0x07)|(bytebits&0x70)>>1|(bytebits&0x08)<<3|(bytebits&0x80));\n+        }\n+        public DotImage home(){\n+\n+            ansi.home();\n+            return this;\n+        }\n+        public DotImage delay(int ms){\n+            try{ Thread.sleep(ms); }catch(Throwable t){ }\n+            return this;\n+        }\n+\n+        public DotImage clean(){\n+            Arrays.fill(bytes,(byte)0);\n+            Arrays.fill(chars,(char)' ');\n+            return this;\n+        }\n+        public DotImage map(){\n+            for (int cx = 0; cx<charWidth; cx++){\n+                for (int cy = 0; cy<charHeight; cy++){\n+                    int bytebits=0;\n+                    for (int dx=0;dx<2;dx++){\n+                        for (int dy=0;dy<4;dy++){\n+                            bytebits|=i(cx*2+dx,cy*4+dy)<<(dx*4+dy);\n+                        }\n+                    }\n+                    chars[cy*charWidth+cx]= dotchar(bytebits);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        public DotImage write(){\n+            ansi.apply(\"+\");\n+            for (int i=0;i<charWidth; i++){\n+                ansi.apply(\"-\");\n+            }\n+            ansi.apply(\"+\\n|\");\n+            for (int i=0;i<chars.length; i++){\n+                if (i>0 && (i%charWidth)==0){\n+                    ansi.apply(\"|\\n|\");\n+                }\n+                ansi.apply(Character.toString(chars[i]));\n+            }\n+            ansi.apply(\"|\\n+\");\n+            for (int i=0;i<charWidth; i++){\n+                ansi.apply(\"-\");\n+            }\n+            ansi.apply(\"+\\n\");\n+            return this;\n+        }\n+    }\n+    default DotImage img(int width, int height){\n+        return new DotImage(this, width,height);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/terminal\/ANSI.java","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+package hat.tools.textmodel.terminal;\n+\n+import hat.KernelContext;\n+import hat.buffer.S32Array;\n+import hat.ifacemapper.MappableIface;\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.JavaTextModel;\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Close;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.Nl;\n+import hat.tools.textmodel.tokens.Parenthesis;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Root;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.StringLiteral;\n+import hat.tools.textmodel.tokens.Ws;\n+import jdk.incubator.code.Op;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static hat.tools.textmodel.terminal.ANSI.*;\n+\n+public class CodeModelFormatter {\n+    static void main(String[] argArr) throws NoSuchMethodException, IOException {\n+        var args = new ArrayList<>(List.of(argArr));\n+        var doc = BabylonTextModel.of(Files.readString(Path.of(args.getFirst())));\n+        \/\/ We expect the babylonDocModel to have have a javaTextModel embedded\n+        \/\/ We use this to map from babylon lines containing java loc info  -> java lines #\n+\n+        Map<Integer, Integer> babylonLineToJavaLine = new HashMap<>();\n+        doc.babylonLocationAttributes.stream().forEach(loc -> {\n+            babylonLineToJavaLine.put(loc.pos().line(), loc.line());\n+        });\n+        var ansi = ANSI.of(System.out);\n+        ansi.apply(String.format(\"%4d :\", 1));\n+        int[] online = new int[]{-1};\n+\n+        doc.visit(t -> {\n+                    switch (t) {\n+                        case Nl nl -> {\n+                            int babLine = nl.pos().line() + 1;\n+                            if (babylonLineToJavaLine.containsKey(babLine)\n+                                    && babylonLineToJavaLine.get(babLine) instanceof Integer javaLine\n+                                    && javaLine != online[0]\n+                            ) {\n+                                ansi.apply(\"\\n\\n     \/\/ #\" + javaLine + \"  >\");\n+                                doc.javaTextModel.visit(j -> {\n+                                    if (j.pos().line() == javaLine) {\n+                                        switch (j) {\n+                                            case JavaTextModel.JavaType _ -> ansi.fg(YELLOW, _ -> ansi.apply(j));\n+                                            case At _ -> ansi.fg(YELLOW, _ -> ansi.apply(j));\n+                                            case DottedName _ -> ansi.fg(GREEN, _ -> ansi.apply(j));\n+                                            case Nl _ -> ansi.skip();\n+                                            case Ws _ -> ansi.apply(j);\n+                                            case ReservedWord _ -> ansi.fg(YELLOW, _ -> ansi.apply(j));\n+                                            default -> ansi.apply(j);\n+                                        }\n+                                    }\n+                                });\n+                                online[0] = javaLine;\n+                            }\n+                            ansi.apply(t).apply(String.format(\"%4d :\", nl.pos().line() + 1));\n+                        }\n+                        case Seq s when s.len() == 1 -> ansi.fg(RED, _ -> ansi.apply(t));\n+                        case Seq _ -> ansi.fg(PURPLE, _ -> ansi.apply(t));\n+                        case StringLiteral _, ReservedWord _, BabylonTextModel.BabylonAnonymousAttribute _ ->\n+                                ansi.fg(YELLOW, _ -> ansi.apply(t));\n+                        case BabylonTextModel.BabylonLocationAttribute _ ->\n+                                ansi.skip();\/\/  ansi.bg(WHITE, _ -> ansi.fg(BLUE, _ -> ansi.apply(t)));\n+                        case BabylonTextModel.BabylonTypeAttribute _ -> ansi.fg(CYAN, _ -> ansi.apply(t));\n+                        case BabylonTextModel.BabylonBlockDef _ -> ansi.fg(RED, _ -> ansi.apply(t));\n+                        case BabylonTextModel.BabylonBlock _ -> ansi.fg(BLUE, _ -> ansi.apply(t));\n+                        case BabylonTextModel.BabylonSSADef _ -> {\n+                            var parent = t.parent();\n+                            if (parent instanceof Parenthesis p && p.openClose().open() == '(') {\n+                                ansi.apply(\"\\n              \");\n+                            }\n+                            ansi.fg(YELLOW, _ -> ansi.apply(t));\n+                        }\n+                        case BabylonTextModel.BabylonSSARef _ -> ansi.fg(GREEN, _ -> ansi.apply(t));\n+                        case BabylonTextModel.BabylonBlockOrBody _ -> ansi.fg(PURPLE, _ -> ansi.apply(t));\n+                        case Op _ -> ansi.fg(CYAN, _ -> ansi.apply(t));\n+                        case Close c -> {\n+                            if (c.parent().parent() instanceof Root && c.ch() == ')') {\n+                                ansi.fg(WHITE, _ -> ansi.apply(\"\\n      \" + c.ch()));\n+                            } else {\n+                                ansi.fg(WHITE, _ -> ansi.apply(\"\" + c.ch()));\n+                            }\n+                        }\n+                        default -> ansi.fg(WHITE, _ -> ansi.apply(t));\n+                    }\n+                }\n+        );\n+    }\n+}\n+\n+\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/terminal\/CodeModelFormatter.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.terminal;\n+public class TestANSI {\n+    static void main(String[] args) {\n+        var colorizer = ANSI.of(System.out);\n+        var image = colorizer.img(200, 200);\n+        for (int frame = 0; frame < 40; frame++) {\n+            image.clean().home();\n+            image.clean().home();\n+\n+            double realMin = -2.0;\n+            double realMax = 1.0;\n+            double imagMin = -1.5;\n+            double imagMax = 1.5;\n+            int maxIterations = frame \/ 2; \/\/ Maximum number of iterations for each point\n+            double escapeRadiusSquared = 4.0; \/\/ If |z|^2 exceeds this, the point escapes\n+\n+            for (int y = 0; y < image.height; y++) {\n+                for (int x = 0; x < image.width; x++) {\n+                    double cReal = realMin + (double) x \/ image.width * (realMax - realMin);\n+                    double cImag = imagMin + (double) y \/ image.height * (imagMax - imagMin);\n+                    double zReal = 0.0;\n+                    double zImag = 0.0;\n+                    int iteration = 0;\n+                    while (zReal * zReal + zImag * zImag < escapeRadiusSquared && iteration < maxIterations) {\n+                        double nextZReal = zReal * zReal - zImag * zImag + cReal;\n+                        double nextZImag = 2 * zReal * zImag + cImag;\n+                        zReal = nextZReal;\n+                        zImag = nextZImag;\n+                        iteration++;\n+                    }\n+                    if (iteration == maxIterations) {\n+                        image.set(x, y);\n+                    }\n+                }\n+            }\n+            image.map().write();\n+            image.delay(100);\n+        }\n+    }\n+}\n+\n+\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/terminal\/TestANSI.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class AbstractParentToken extends AbstractToken implements Parent {\n+    List<Token> children;\n+    protected AbstractParentToken(Parent parent, Pos pos) {\n+        super(parent,pos);\n+        this.children = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public List<Token> children() {\n+            return children;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/AbstractParentToken.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public abstract class AbstractToken implements Token {\n+    Parent parent;\n+    Pos pos;\n+    @Override\n+    public Parent parent() {\n+        return parent;\n+    }\n+\n+    @Override\n+    public Pos pos() {\n+        return pos;\n+    }\n+    protected AbstractToken(Parent parent, Pos pos) {\n+        this.parent = parent;\n+        this.pos = pos;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/AbstractToken.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public abstract class AbstractTokenWithCh extends AbstractToken {\n+    char ch;\n+\n+    protected AbstractTokenWithCh(Parent parent, Pos pos, char ch) {\n+        super(parent, pos);\n+        this.ch = ch;\n+    }\n+\n+    public char ch() {\n+        return ch;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/AbstractTokenWithCh.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public abstract class AbstractTokenWithLength extends AbstractToken {\n+    int len;\n+\n+    protected AbstractTokenWithLength(Parent parent, Pos pos, int len) {\n+        super(parent, pos);\n+        this.len = len;\n+    }\n+\n+    @Override\n+    public int len() {\n+        return len;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/AbstractTokenWithLength.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public class Arrow extends LeafReplacementToken {\n+    public Arrow(Token t1, Token t2) {\n+        super(t1, t2);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Arrow.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public class At extends LeafReplacementToken {\n+    public At(Token l) {\n+        super(l);\n+    }\n+    public static boolean isA(Token t){\n+        return t instanceof At;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/At.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public interface Ch extends SingleCharLeaf {\n+\n+    static boolean isA(Token t, Predicate<Ch> predicate) {\n+        return t instanceof Ch c && predicate.test(c);\n+    }\n+\n+    static boolean isAColon(Token t) {\n+        return isA(t, $ -> $.is(\":\"));\n+    }\n+\n+    static boolean isADot(Token t) {\n+        return isA(t, $ -> $.is(\".\"));\n+    }\n+    static boolean isAHat(Token t) {\n+        return isA(t, $ -> $.is(\"^\"));\n+    }\n+\n+    static boolean isASemicolon(Token t) {\n+        return isA(t, $ -> $.is(\";\"));\n+    }\n+\n+    static boolean isAnAt(Token t) {\n+        return isA(t, $ -> $.is(\"@\"));\n+    }\n+\n+    static boolean isAHyphen(Token t) {\n+        return isA(t, $ -> $.is(\"-\"));\n+    }\n+\n+    static boolean isAGt(Token t) {\n+        return isA(t, $ -> $.is(\">\"));\n+    }\n+\n+    static boolean isALt(Token t) {\n+        return isA(t, $ -> $.is(\"<\"));\n+    }\n+\n+    static boolean isAPercent(Token t) {\n+        return isA(t, $ -> $.is(\"%\"));\n+    }\n+\n+    static boolean isAnEquals(Token t) {\n+        return isA(t, $ -> $.is(\"=\"));\n+    }\n+\n+    static boolean isA(Token t) {\n+        return isA(t, _ -> true);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Ch.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface CharLiteral extends Literal {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/CharLiteral.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Close extends OpenClose {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Close.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+public interface Comment extends Leaf {\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Comment.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+public class DottedName extends LeafReplacementToken {\n+    public DottedName(Token l, Token m, Token r) {\n+        super(l, m, r);\n+    }\n+public static final Pattern regex = Pattern.compile(\"[A-Za-z][A-Za-z0-9_]*\");\n+    public DottedName(Token seq) {\n+        super(seq);\n+    }\n+\n+\n+    public static boolean isA(Token t, Predicate<DottedName> predicate) {\n+        return t instanceof DottedName dottedName && predicate.test(dottedName);\n+    }\n+    public static boolean isA(Token t) {\n+        return isA(t,_->true);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/DottedName.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import hat.tools.textmodel.tokens.defaults.Close;\n+import hat.tools.textmodel.tokens.defaults.LineComment;\n+import hat.tools.textmodel.tokens.defaults.MultiLineComment;\n+import hat.tools.textmodel.tokens.defaults.Open;\n+\n+public interface Factory {\n+    default Open open(Parent parent, Pos pos, char ch) {\n+        return new Open(parent, pos, ch);\n+    }\n+\n+    default Close close(Parent parent, Pos pos, char ch) {\n+        return new Close(parent, pos, ch);\n+    }\n+\n+    default LineComment lineComment(Parent parent, Pos pos, int len) {\n+        return new LineComment(parent, pos, len);\n+    }\n+\n+    default MultiLineComment multiLineComment(Parent parent, Pos pos, int len) {\n+        return new MultiLineComment(parent, pos, len);\n+    }\n+\n+    default Ws ws(Parent parent, Pos pos, int len) {\n+        return new hat.tools.textmodel.tokens.defaults.Ws(parent, pos, len);\n+    }\n+\n+    default CharLiteral charLiteral(Parent parent, Pos pos, int len) {\n+        return new hat.tools.textmodel.tokens.defaults.CharLiteral(parent, pos, len);\n+    }\n+\n+    default StringLiteral stringLiteral(Parent parent, Pos pos, int len) {\n+        return new hat.tools.textmodel.tokens.defaults.StringLiteral(parent, pos, len);\n+    }\n+\n+    default Nl nl(Parent parent, Pos pos) {\n+        return new hat.tools.textmodel.tokens.defaults.Nl(parent, pos);\n+    }\n+\n+    default Parenthesis parenthesis(Parent parent, Pos pos, Parenthesis.OpenClose openClose) {\n+        return new hat.tools.textmodel.tokens.defaults.Parenthesis(parent, pos,  openClose);\n+    }\n+\n+    default Seq seq(Parent parent, Pos pos, int len) {\n+        return new hat.tools.textmodel.tokens.defaults.Seq(parent, pos, len);\n+    }\n+\n+    default Ch ch(Parent parent, Pos pos) {\n+        return new hat.tools.textmodel.tokens.defaults.Ch(parent, pos);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Factory.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public class FloatConst extends LeafReplacementToken {\n+    public final float f;\n+\n+    public FloatConst(Token t1, Token t2, Token t3) {\n+        super(t1, t2, t3);\n+        var s = t1.asString() + t2.asString() + t3.asString();\n+        this.f = Float.parseFloat(s);\n+    }\n+\n+    public static boolean isA(Token t, Predicate<FloatConst> predicate) {\n+        return t instanceof FloatConst floatConst && predicate.test(floatConst);\n+    }\n+    public static boolean isA(Token t) {\n+        return isA(t, _->true);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/FloatConst.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+public class IntConst extends LeafReplacementToken {\n+    public final int i;\n+    public static final Pattern regex = Pattern.compile(\"[0-9][0-9]*\");\n+\n+    public IntConst(Token t) {\n+        super(t);\n+        var s = t.asString();\n+        this.i = Integer.parseInt(s);\n+    }\n+\n+    public static boolean isA(Token t, Predicate<IntConst> predicate) {\n+        return t instanceof IntConst intConst && predicate.test(intConst);\n+    }\n+    public static boolean isA(Token t) {\n+        return isA(t, _->true);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/IntConst.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public interface Leaf extends Token {\n+    @Override\n+    default void visit(Consumer<Token> visitor) {\n+        visitor.accept(this);\n+    }\n+\n+    default boolean isOneOf(Set<String> strings) {\n+        return strings.contains(this.asString());\n+    }\n+\n+    default boolean isOneOf(String... strings) {\n+        return isOneOf(Set.of(strings));\n+    }\n+\n+    default Matcher matcher(Pattern regex) {\n+        Matcher matcher = regex.matcher(asString());\n+        if (matcher.matches()) {\n+            return matcher;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    default boolean matches(Pattern regex) {\n+        return matcher(regex) != null;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Leaf.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public abstract class LeafReplacementToken implements Leaf {\n+    Parent parent;\n+    Pos pos;\n+    int len;\n+\n+    protected LeafReplacementToken(Token token, Token... tokens) {\n+        this.parent = token.parent();\n+        this.pos = token.pos();\n+        this.len = tokens.length == 0 ? token.len() : tokens[tokens.length - 1].endOffset() - token.startOffset();\n+    }\n+\n+    @Override\n+    public Parent parent() {\n+        return parent;\n+    }\n+\n+    @Override\n+    public Pos pos() {\n+        return pos;\n+    }\n+\n+    @Override\n+    public int len() {\n+        return len;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/LeafReplacementToken.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface LineCol extends Comparable<LineCol> {\n+\n+\n+    int line();\n+\n+    int col();\n+\n+    default int compareTo(LineCol o) {\n+        if (line() > o.line()) {\n+            return 1;\n+        } else if (line() == o.line()) {\n+            return col() - o.col();\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/LineCol.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface LineComment extends Comment{\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/LineComment.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Literal extends Leaf {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Literal.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface MultiLineComment extends Comment {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/MultiLineComment.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Nl extends SingleCharLeaf {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Nl.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Open extends OpenClose {\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Open.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface OpenClose extends SingleCharLeaf {\n+\n+    char ch();\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/OpenClose.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,331 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import hat.tools.textmodel.Cursor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+\n+public interface Parent extends Token {\n+    List<Token> children();\n+\n+    default Token child(int i) {\n+        return children().get(i);\n+    }\n+\n+    default Optional<Token> nextSiblingOf(Token token) {\n+        int nextIdx = children().indexOf(token) + 1;\n+        if (nextIdx < children().size()) {\n+            return Optional.of(children().get(nextIdx));\n+        } else {\n+            return Optional.empty();\n+        }\n+\n+    }\n+\n+    default Optional<Token> prevSiblingOf(Token token) {\n+        int prevIdx = children().indexOf(token) - 1;\n+        if (prevIdx >= 0) {\n+            return Optional.of(children().get(prevIdx));\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+\n+    interface TokenConsumer<T extends Token> {\n+    }\n+\n+    interface TokenReplacer<T extends Token> {\n+    }\n+\n+    interface TokenPredicate<T extends Token> {\n+    }\n+\n+    interface TknPredicate1<T extends Token> extends TokenPredicate<T> {\n+        boolean test(T l);\n+    }\n+\n+    interface TknReplacer1<T extends Token> extends TokenReplacer<T> {\n+        T replace(T l);\n+    }\n+\n+    interface TknConsumer1<T extends Token> extends TokenConsumer<T> {\n+        void accept(T l);\n+    }\n+\n+    interface TknPredicate3<T extends Token> extends TokenPredicate<T> {\n+        boolean test(T l, T m, T r);\n+    }\n+\n+    interface TknReplacer3<T extends Token> extends TokenReplacer<T> {\n+        T replace(T l, T m, T r);\n+    }\n+\n+    interface TknConsumer3<T extends Token> extends TokenConsumer<T> {\n+        void accept(T l, T m, T r);\n+    }\n+\n+    interface TknPredicate2<T extends Token> extends TokenPredicate<T> {\n+        boolean test(T l, T r);\n+    }\n+\n+    interface TknReplacer2<T extends Token> extends TokenReplacer<T> {\n+        T replace(T l, T r);\n+    }\n+\n+    interface TknConsumer2<T extends Token> extends TokenConsumer<T> {\n+        void accept(T l, T r);\n+    }\n+\n+\n+    interface TknPredicate4<T extends Token> extends TokenPredicate<T> {\n+        boolean test(T l, T lm, T rm, T r);\n+    }\n+\n+    interface TknReplacer4<T extends Token> extends TokenReplacer<T> {\n+        T replace(T l, T lm, T rm, T r);\n+    }\n+\n+    interface TknConsumer4<T extends Token> extends TokenConsumer<T> {\n+        void accept(T l, T lm, T rm, T r);\n+    }\n+\n+    default Parent find(boolean recurse, TokenPredicate<Token> predicate, TokenConsumer<Token> consumer, int count) {\n+        for (int i = 0; i < (children().size() - count); i++) {\n+            if (switch (predicate) {\n+                case TknPredicate1<Token> p -> p.test(child(i));\n+                case TknPredicate2<Token> p -> p.test(child(i), child(i + 1));\n+                case TknPredicate3<Token> p -> p.test(child(i), child(i + 1), child(i + 2));\n+                case TknPredicate4<Token> p -> p.test(child(i), child(i + 1), child(i + 2), child(i + 3));\n+                default -> throw new IllegalStateException(\"Unexpected value: \" + predicate);\n+            }) {\n+                switch (consumer) {\n+                    case TknConsumer1<Token> p -> p.accept(child(i));\n+                    case TknConsumer2<Token> p -> p.accept(child(i), child(i + 1));\n+                    case TknConsumer3<Token> p -> p.accept(child(i), child(i + 1), child(i + 2));\n+                    case TknConsumer4<Token> p -> p.accept(child(i), child(i + 1), child(i + 2), child(i + 3));\n+                    default -> throw new IllegalStateException(\"Unexpected value: \" + predicate);\n+                }\n+            }\n+        }\n+        if (recurse) {\n+            children().stream().filter(p -> p instanceof Parent).map(Parent.class::cast).forEach(child ->\n+                    child.find(recurse, predicate, consumer, count)\n+            );\n+        }\n+        return this;\n+    }\n+    default Stream<Token> find( TknPredicate1<Token> predicate) {\n+        var collected = new ArrayList<Token>();\n+        visit(c -> {\n+            if (predicate.test(c)){\n+                collected.add(c);\n+            }\n+        });\n+        return collected.stream();\n+    }\n+    default void find(boolean recurse, TknPredicate1<Token> predicate, TknConsumer1<Token> consumer) {\n+        find(recurse, predicate, consumer, 1);\n+    }\n+\n+    default void find(boolean recurse, TknPredicate2<Token> predicate, TknConsumer2<Token> consumer) {\n+        find(recurse, predicate, consumer, 2);\n+    }\n+\n+    default void find(boolean recurse, TknPredicate3<Token> predicate, TknConsumer3<Token> consumer) {\n+        find(recurse, predicate, consumer, 3);\n+    }\n+\n+    default void find(boolean recurse, TknPredicate4<Token> predicate, TknConsumer4<Token> consumer) {\n+        find(recurse, predicate, consumer, 4);\n+    }\n+\n+    default Parent replace(boolean recurse, TokenPredicate<Token> predicate, TokenReplacer<Token> replacement, int count) {\n+        int i = 0;\n+        while (i < (children().size() - count)) {\n+            if (switch (predicate) {\n+                case TknPredicate1<Token> p -> p.test(child(i));\n+                case TknPredicate2<Token> p -> p.test(child(i), child(i + 1));\n+                case TknPredicate3<Token> p -> p.test(child(i), child(i + 1), child(i + 2));\n+                case TknPredicate4<Token> p -> p.test(child(i), child(i + 1), child(i + 2), child(i + 3));\n+                default -> throw new IllegalStateException(\"Unexpected value: \" + predicate);\n+            }) {\n+                children().set(i, switch (replacement) {\n+                    case TknReplacer1<Token> p -> p.replace(child(i));\n+                    case TknReplacer2<Token> p -> p.replace(child(i), child(i + 1));\n+                    case TknReplacer3<Token> p -> p.replace(child(i), child(i + 1), child(i + 2));\n+                    case TknReplacer4<Token> p -> p.replace(child(i), child(i + 1), child(i + 2), child(i + 3));\n+                    default -> throw new IllegalStateException(\"Unexpected value: \" + predicate);\n+                });\n+                for (int n = 0; n < (count - 1); n++) {\n+                    children().remove(i + 1);\n+                }\n+            } else {\n+                i++;\n+            }\n+        }\n+        if (recurse) {\n+            children().stream().filter(p -> p instanceof Parent).map(Parent.class::cast).forEach(child ->\n+                    child.replace(recurse, predicate, replacement, count)\n+            );\n+        }\n+        return this;\n+    }\n+\n+    default void replace(boolean recurse, TknPredicate1<Token> predicate, TknReplacer1<Token> replacement) {\n+        replace(recurse, predicate, replacement, 1);\n+    }\n+\n+    default void replace(boolean recurse, TknPredicate2<Token> predicate, TknReplacer2<Token> replacement) {\n+        replace(recurse, predicate, replacement, 2);\n+    }\n+\n+    default void replace(boolean recurse, TknPredicate3<Token> predicate, TknReplacer3<Token> replacement) {\n+        replace(recurse, predicate, replacement, 3);\n+    }\n+\n+    default void replace(boolean recurse, TknPredicate4<Token> predicate, TknReplacer4<Token> replacement) {\n+        replace(recurse, predicate, replacement, 4);\n+    }\n+\n+\n+    default Token add(Token token) {\n+        children().add(token);\n+        return token;\n+    }\n+\n+\n+    @Override\n+    default void visit(Consumer<Token> visitor) {\n+        children().forEach(c ->\n+                c.visit(visitor)\n+        );\n+    }\n+\n+    @Override\n+    default int len() {\n+        if (children().isEmpty()) {\n+            return 0;\n+        } else {\n+            var last = children().getLast();\n+            return last.startOffset() + last.len() - pos().textOffset();\n+        }\n+    }\n+\n+    default Factory factory() {\n+        if (this instanceof Factory) {\n+            return (Factory) this;\n+        } else {\n+            return parent().factory();\n+        }\n+    }\n+\n+    default Root root() {\n+        if (this instanceof Root) {\n+            return (Root) this;\n+        } else {\n+            return parent().root();\n+        }\n+    }\n+\n+    default void parse(Cursor c) {\n+        while (c.next() instanceof Cursor.Loc loc && loc.ch() instanceof Character) {\n+            if (loc.ch() == '\\n') {\n+                add(factory().nl(this, loc.pos()));\n+            } else if (loc.ch() == ' ') {\n+                Cursor.Loc start = loc;\n+                while (loc.peek() instanceof Character peeked && peeked == ' ') {\n+                    loc = c.next();\n+                }\n+                int len = loc.delta(start) + 1;\n+                add(factory().ws(this, start.pos(), len));\n+            } else if (root().opensWith(loc.ch()) instanceof Parenthesis.OpenClose openClose) {\n+                Parenthesis parenthesis = (Parenthesis) add(factory().parenthesis(this, loc.pos(), openClose));\n+                parenthesis.add(factory().open(parenthesis, loc.pos(), loc.ch()));\n+                parenthesis.parse(c);\n+            } else if (this instanceof Parenthesis && root().closedBy(loc.ch()) instanceof Parenthesis.OpenClose) {\n+                add(factory().close(this, loc.pos(), loc.ch()));\n+                return;\n+            } else if (loc.ch() == '\/' && loc.peek() instanceof Character peeked && peeked == '\/') {\n+                while (c.next() instanceof Cursor.Loc next && next.ch() instanceof Character) {\n+                    if (next.ch() == '\\n') {\n+                        add(factory().lineComment(this, loc.pos(), next.delta(loc) + 1));\n+                        break;\n+                    }\n+                }\n+            } else if (loc.ch() == '\\'') {\n+                boolean escaping = false;\n+                boolean done = false;\n+                while (!done) {\n+                    var slitLoc = c.next();\n+                    if (slitLoc != null) {\n+                        if (slitLoc.ch() == '\\'' && !escaping) {\n+                            add(factory().charLiteral(this, loc.pos(), (slitLoc.textOffset() - loc.textOffset()) + 1));\n+                            done = true;\n+                        } else escaping = slitLoc.ch() == '\\\\' && !escaping;\n+                    } else {\n+                        throw new IllegalStateException(\" eof before end of literal\");\n+                    }\n+                }\n+            } else if (loc.ch() == '\"') {\n+                boolean escaping = false;\n+                boolean done = false;\n+                while (!done) {\n+                    var slitLoc = c.next();\n+                    if (slitLoc != null) {\n+                        if (slitLoc.ch() == '\"' && !escaping) {\n+                            add(factory().stringLiteral(this, loc.pos(), (slitLoc.textOffset() - loc.textOffset()) + 1));\n+                            done = true;\n+                        } else escaping = slitLoc.ch() == '\\\\' && !escaping;\n+                    } else {\n+                        throw new IllegalStateException(\" eof before end of literal\");\n+                    }\n+                }\n+            } else if (loc.ch() == '\/' && loc.peek() instanceof Character peeked && peeked == '*') {\n+                boolean done = false;\n+                while (!done) {\n+                    while (c.next() instanceof Cursor.Loc asteriskFinder && asteriskFinder.ch() != '*') {\n+                    }\n+                    if (c.next() instanceof Cursor.Loc slashFinder && slashFinder.ch() == '\/') {\n+                        done = true;\n+                        add(factory().multiLineComment(this, loc.pos(), (slashFinder.textOffset() - loc.textOffset()) + 1));\n+                    }\n+                }\n+            } else if (Character.isJavaIdentifierPart(loc.ch())) {  \/\/ we don't use isJavaItendifierStart because we can slurp ints here too.\n+                Cursor.Loc start = loc;\n+                while (loc.peek() instanceof Character peeked && Character.isJavaIdentifierPart(peeked)) {\n+                    loc = c.next();\n+                }\n+                add(factory().seq(this, start.pos(), loc.delta(start) + 1));\n+            } else {\n+                add(factory().ch(this, loc.pos()));\n+            }\n+        }\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Parent.java","additions":331,"deletions":0,"binary":false,"changes":331,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public interface Parenthesis extends Parent {\n+\n+\n+\n+    record OpenClose(char open, char close) {\n+        public static OpenClose of(char open, char close) {\n+            return new OpenClose(open, close);\n+        }\n+    }\n+\n+    OpenClose openClose();\n+    static boolean isA(Token token, Predicate<Parenthesis> predicate) {\n+        return token instanceof Parenthesis && predicate.test((Parenthesis) token);\n+    }\n+    static boolean isA(Token token) {\n+        return isA(token, _->true);\n+    }\n+    static boolean isBraces(Token token) {\n+        return isA(token, $->$.openClose().open == '{');\n+    }\n+    static boolean isParen(Token token) {\n+        return isA(token, $->$.openClose().open == '(');\n+    }\n+    static boolean isSBrace(Token token) {\n+        return isA(token, $->$.openClose().open == '[');\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Parenthesis.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Pos extends LineCol {\n+    char[] text();\n+\n+    int textOffset();\n+\n+\n+    default int delta(Pos earlier) {\n+        return textOffset() - earlier.textOffset();\n+    }\n+\n+     class Impl implements Pos {\n+        @Override\n+        public char[] text() {\n+            return text;\n+        }\n+\n+        @Override\n+        public int textOffset() {\n+            return textOffset;\n+        }\n+\n+        @Override\n+        public int line() {\n+            return line;\n+        }\n+\n+        @Override\n+        public int col() {\n+            return col;\n+        }\n+\n+        char[] text;\n+        int textOffset;\n+        int line;\n+        int col;\n+\n+        public Impl(char[] text, int textOffset, int line, int col) {\n+            this.text = text;\n+            this.textOffset = textOffset;\n+            this.line = line;\n+            this.col = col;\n+        }\n+\n+        public Impl(Pos pos) {\n+            this(pos.text(), pos.textOffset(), pos.line(), pos.col());\n+        }\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Pos.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public class ReservedWord extends LeafReplacementToken {\n+    public ReservedWord(Token t) {\n+        super(t);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/ReservedWord.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import hat.tools.textmodel.Cursor;\n+\n+public interface Root extends Parent, Factory {\n+    @Override\n+    default Parent parent() {\n+        return null;\n+    }\n+\n+    @Override\n+    default Pos pos() {\n+        return null;\n+    }\n+\n+    default void parse(String text) {\n+        parse(new Cursor(text));\n+    }\n+\n+    Parenthesis.OpenClose opensWith(Character ch);\n+\n+    Parenthesis.OpenClose closedBy(Character ch);\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Root.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public interface Seq extends Leaf {\n+    static boolean isA(Token t, Predicate<Seq> predicate) {\n+        return t instanceof Seq seq && predicate.test(seq);\n+    }\n+\n+    static boolean isA(Token t) {\n+        return isA(t, _ -> true);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Seq.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface SingleCharLeaf extends Leaf {\n+    default int len() {\n+        return 1;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/SingleCharLeaf.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+public interface Span {\n+    int startOffset();\n+\n+    int endOffset();\n+\n+    default boolean includes(int offset) {\n+        return offset >= startOffset() && offset <= endOffset();\n+    }\n+    default boolean includes(Span span)  {\n+        return includes(span.startOffset()) && includes(span.endOffset());\n+    }\n+    default boolean overlaps(Span span)  {\n+        return includes(span.startOffset()) ||  includes(span.endOffset()) || span.overlaps(this);\n+    }\n+\n+    record Impl(int startOffset, int endOffset) implements Span {\n+\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Span.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public interface StringLiteral extends Literal {\n+\n+    static boolean isA(Token t, Predicate<StringLiteral> predicate) {\n+        return t instanceof StringLiteral sl && predicate.test(sl);\n+    }\n+\n+    static boolean isA(Token t) {\n+        return isA(t, _ -> true);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/StringLiteral.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+public interface Token extends Span {\n+\n+    Parent parent();\n+\n+    Pos pos();\n+\n+    default int depth() {\n+        return (parent() != null) ? parent().depth() + 1 : 0;\n+    }\n+\n+    int len();\n+    @Override\n+    default int startOffset() {\n+        return (pos().textOffset());\n+    }\n+\n+    @Override\n+    default int endOffset() {\n+        return startOffset() + len();\n+    }\n+\n+    default String asString() {\n+        return new String(pos().text(), pos().textOffset(), Math.min(len(), pos().text().length - pos().textOffset()));\n+    }\n+    default boolean next(Parent.TknPredicate1<Token> predicate) {\n+        var opt = next();\n+        if (opt.isPresent()) {\n+            var o= opt.get();\n+            return predicate.test(o);\n+        }\n+        return false;\n+    }\n+    default boolean next2(Parent.TknPredicate2<Token> predicate) {\n+        var opt1 = next();\n+        if (opt1.isPresent()) {\n+            var opt2 = opt1.get().next();\n+            if (opt2.isPresent()) {\n+                return   predicate.test(opt1.get(), opt2.get());\n+            }\n+        }\n+        return false;\n+    }\n+    default boolean prev(Parent.TknPredicate1 predicate) {\n+        var opt = prev();\n+        if (opt.isPresent()) {\n+            return predicate.test(opt.get());\n+        }else  {\n+            return false;\n+        }\n+    }\n+    default Optional<Token> next(){\n+        return parent().nextSiblingOf(this);\n+    }\n+    default Optional<Token> prev(){\n+        return parent().prevSiblingOf(this);\n+    }\n+\n+    default boolean is(String s) {\n+        var s1= asString();\n+        return s1.equals(s);\n+    }\n+\n+    void visit(Consumer<Token> visitor);\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Token.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens;\n+\n+import java.util.function.Predicate;\n+\n+public interface Ws extends Leaf {\n+    static boolean isA(Token t, Predicate<Ws> predicate) {\n+        return t instanceof Ws ws && predicate.test(ws);\n+    }\n+\n+    static boolean isA(Token t) {\n+        return isA(t, _ -> true);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/Ws.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractToken;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Ch extends AbstractToken implements hat.tools.textmodel.tokens.Ch {\n+    public Ch(Parent parent, Pos pos){\n+        super(parent, pos);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Ch.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class CharLiteral extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.CharLiteral {\n+\n+int len;\n+    public CharLiteral(Parent parent, Pos pos, int len) {\n+        super(parent,pos, len);\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/CharLiteral.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithCh;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Close extends AbstractTokenWithCh implements hat.tools.textmodel.tokens.Close {\n+    public Close(Parent parent, Pos pos, char ch) {\n+        super(parent, pos, ch);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Close.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class LineComment extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.LineComment {\n+    public LineComment(Parent parent, Pos pos, int len) {\n+        super(parent, pos, len);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/LineComment.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class MultiLineComment extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.MultiLineComment {\n+    public MultiLineComment(Parent parent, Pos pos, int len) {\n+        super(parent, pos, len);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/MultiLineComment.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractToken;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Nl extends AbstractToken implements hat.tools.textmodel.tokens.Nl {\n+    public Nl(Parent parent, Pos pos) {\n+        super(parent, pos);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Nl.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithCh;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Open extends AbstractTokenWithCh implements hat.tools.textmodel.tokens.Open {\n+    public Open(Parent parent, Pos pos, char ch) {\n+        super(parent, pos, ch);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Open.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractParentToken;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class  Parenthesis extends AbstractParentToken implements hat.tools.textmodel.tokens.Parenthesis {\n+    OpenClose openClose;\n+\n+    public Parenthesis(Parent parent, Pos pos, OpenClose openClose) {\n+        super(parent, pos);\n+        this.openClose = openClose;\n+    }\n+\n+    @Override\n+    public  OpenClose openClose() {\n+        return openClose;\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Parenthesis.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Seq extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.Seq {\n+    public Seq(Parent parent, Pos pos, int len) {\n+        super(parent, pos, len);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Seq.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class StringLiteral extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.StringLiteral {\n+    public StringLiteral(Parent parent, Pos pos, int len) {\n+        super(parent, pos, len);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/StringLiteral.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.tokens.defaults;\n+\n+import hat.tools.textmodel.tokens.AbstractTokenWithLength;\n+import hat.tools.textmodel.tokens.Parent;\n+import hat.tools.textmodel.tokens.Pos;\n+\n+public class Ws extends AbstractTokenWithLength implements hat.tools.textmodel.tokens.Ws {\n+    public Ws(Parent parent, Pos pos, int len) {\n+        super(parent, pos, len);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/tokens\/defaults\/Ws.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.JavaTextModel;\n+import hat.tools.textmodel.TextModel;\n+import hat.tools.textmodel.tokens.Arrow;\n+import hat.tools.textmodel.tokens.At;\n+import hat.tools.textmodel.tokens.Ch;\n+import hat.tools.textmodel.tokens.Comment;\n+import hat.tools.textmodel.tokens.DottedName;\n+import hat.tools.textmodel.tokens.FloatConst;\n+import hat.tools.textmodel.tokens.IntConst;\n+import hat.tools.textmodel.tokens.Nl;\n+import hat.tools.textmodel.tokens.ReservedWord;\n+import hat.tools.textmodel.tokens.Seq;\n+import hat.tools.textmodel.tokens.StringLiteral;\n+import hat.tools.textmodel.tokens.Ws;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.DefaultHighlighter;\n+import javax.swing.text.Style;\n+import javax.swing.text.StyleConstants;\n+import java.awt.Color;\n+import java.awt.Font;\n+\n+public class AbstractTextModelViewer extends TextViewer {\n+    static Style style(JTextPane jTextPane, String name, Color color, boolean bold, boolean italic, boolean underline) {\n+        var s = jTextPane.addStyle(name, null);\n+        StyleConstants.setForeground(s, color);\n+        StyleConstants.setBold(s, bold);\n+        StyleConstants.setItalic(s, italic);\n+        StyleConstants.setUnderline(s, underline);\n+        return s;\n+    }\n+\n+    final protected TextModel textModel;\n+    final protected Style comment;\n+    final protected Style stringLiteral;\n+    final protected Style number;\n+    final protected Style operator;\n+    final protected Style babylonSSARef;\n+    final protected Style babylonSSADef;\n+    final protected Style arrow;\n+    final protected Style modifier;\n+    final protected Style javaAnnotation;\n+    final protected Style babylonOp;\n+    final protected Style dottedName;\n+    final protected Style type;\n+    final protected Style babylonBlockOrBody;\n+    final protected Style babylonAnonymousAttribute;\n+    final protected Style babylonNamedAttribute;\n+    final protected Style babylonLocationAttribute;\n+    final protected Style babylonFileLocationAttribute;\n+    final protected Style reservedWord;\n+\n+    AbstractTextModelViewer(TextModel textModel, JTextPane jtextPane, Font font, boolean dark) {\n+        super(jtextPane);\n+        this.textModel = textModel;\n+        jtextPane.setFont(font);\n+        if (dark) {\n+            jtextPane.setBackground(Color.BLACK);\n+            this.highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(new Color(80, 80, 80));\n+            this.defaultStyle = style(this.jtextPane, \"Default\", new Color(255, 255, 255), false, false, false);\n+            this.comment = style(this.jtextPane, \"Comment\", new Color(0, 255, 150), false, true, false);\n+            this.stringLiteral = style(this.jtextPane, \"StringLiteral\", new Color(255, 42, 42), false, false, false);\n+            this.number = style(this.jtextPane, \"Number\", new Color(255, 42, 42), false, false, false);\n+            this.operator = style(this.jtextPane, \"Operator\", new Color(120, 120, 120), false, false, false);\n+            this.babylonSSADef = style(this.jtextPane, \"SSADef\", new Color(8, 160, 255), true, true, true);\n+            this.babylonSSARef = style(this.jtextPane, \"SSARef\", new Color(8, 160, 255), false, false, false);\n+            this.arrow = style(this.jtextPane, \"Arrow\", new Color(255, 120, 120), true, false, false);\n+            this.modifier = style(this.jtextPane, \"Modifier\", new Color(200, 125, 0), true, true, false);\n+            this.javaAnnotation = style(this.jtextPane, \"Annotation\", new Color(255, 255, 180), false, true, false);\n+            this.babylonOp = style(this.jtextPane, \"Op\", new Color(2, 210, 10), false, true, false);\n+            this.dottedName = style(this.jtextPane, \"DottedName\", new Color(120, 120, 10), false, true, false);\n+            this.type = style(this.jtextPane, \"Type\", new Color(12, 255, 170), false, true, false);\n+            this.babylonBlockOrBody = style(this.jtextPane, \"Body\", new Color(180, 133, 130), false, true, false);\n+            this.babylonAnonymousAttribute = style(this.jtextPane, \"AnonymousAttribute\", new Color(255, 255, 18), false, true, false);\n+            this.babylonNamedAttribute = style(this.jtextPane, \"NamedAttribute\", new Color(255, 25, 180), false, true, false);\n+            this.babylonLocationAttribute = style(this.jtextPane, \"LocationAttribute\", new Color(200, 200, 200), false, true, false);\n+            this.babylonFileLocationAttribute = style(this.jtextPane, \"FileLocationAttribute\", new Color(255, 255, 255), false, true, false);\n+            this.reservedWord = style(this.jtextPane, \"ReservedWord\", new Color(255, 200, 100), false, true, false);\n+           } else {\n+            this.highlightPainter = new DefaultHighlighter.DefaultHighlightPainter(new Color(200, 200, 0));\n+            this.defaultStyle = style(this.jtextPane, \"Default\", new Color(0, 0, 0), false, false, false);\n+            this.comment = style(this.jtextPane, \"Comment\", new Color(0, 100, 0), false, true, false);\n+            this.stringLiteral = style(this.jtextPane, \"StringLiteral\", new Color(100, 10, 100), false, false, false);\n+            this.number = style(this.jtextPane, \"Number\", new Color(255, 42, 42), false, false, false);\n+            this.babylonOp = style(this.jtextPane, \"Operator\", new Color(120, 120, 120), false, false, false);\n+            this.babylonSSADef = style(this.jtextPane, \"SSADef\", new Color(150, 60, 55), true, true, true);\n+            this.babylonSSARef = style(this.jtextPane, \"SSARef\", new Color(150, 60, 255), false, false, false);\n+            this.arrow = style(this.jtextPane, \"Arrow\", new Color(0, 0, 0), true, false, false);\n+            this.modifier = style(this.jtextPane, \"Modifier\", new Color(100, 65, 0), true, true, false);\n+            this.javaAnnotation = style(this.jtextPane, \"Annotation\", new Color(25, 25, 180), false, true, false);\n+            this.operator = style(this.jtextPane, \"Op\", new Color(0, 100, 0), false, true, false);\n+            this.dottedName = style(this.jtextPane, \"DottedName\", new Color(120, 120, 10), false, true, false);\n+            this.type = style(this.jtextPane, \"Type\", new Color(120, 55, 70), true, true, false);\n+            this.babylonBlockOrBody = style(this.jtextPane, \"Body\", new Color(180, 33, 30), false, true, false);\n+            this.babylonAnonymousAttribute = style(this.jtextPane, \"AnonymousAttribute\", new Color(100, 2, 2), false, true, false);\n+            this.babylonNamedAttribute = style(this.jtextPane, \"NamedAttribute\", new Color(100, 100, 2), false, true, false);\n+            this.babylonLocationAttribute = style(this.jtextPane, \"LocationAttribute\", new Color(100, 100, 2), false, true, true);\n+            this.babylonFileLocationAttribute = style(this.jtextPane, \"FileLocationAttribute\", new Color(25, 25, 25), false, true, false);\n+            this.reservedWord = style(this.jtextPane, \"ReservedWord\", new Color(1, 1, 1), false, true, false);\n+            }\n+        setTextFromDocModel();\n+    }\n+\n+    @Override\n+    public void applyStyles() {\n+        textModel.visit(t -> {\n+                    Style currentStyle = switch (t) {\n+                        case Ch _, At _ -> operator;\n+                        case StringLiteral _ -> stringLiteral;\n+                        case JavaTextModel.JavaAnnotation _ -> javaAnnotation;\n+                        case ReservedWord _ -> reservedWord;\n+                        case JavaTextModel.JavaModifier _ -> modifier;\n+                        case Comment _ -> comment;\n+                        case Arrow _ -> arrow;\n+                        case BabylonTextModel.BabylonAnonymousAttribute _ -> babylonAnonymousAttribute;\n+                        case BabylonTextModel.BabylonFileLocationAttribute _ -> babylonFileLocationAttribute;\n+                        case BabylonTextModel.BabylonLocationAttribute _ -> babylonLocationAttribute;\n+                        case BabylonTextModel.BabylonNamedAttribute _ -> babylonNamedAttribute;\n+                        case JavaTextModel.JavaType _, BabylonTextModel.BabylonTypeAttribute _ -> type;\n+                        \/\/      case BabylonTextModel.BabylonRefAttribute _ -> babylonRefAttribute;\n+                        case BabylonTextModel.BabylonSSADef _ -> babylonSSADef;\n+                        case BabylonTextModel.BabylonSSARef _ -> babylonSSARef;\n+                        case BabylonTextModel.BabylonOp _ -> babylonOp;\n+                        case DottedName _ -> dottedName;\n+                        case BabylonTextModel.BabylonBlockOrBody _ -> babylonBlockOrBody;\n+                        case Ws _, Nl _, Seq _ -> defaultStyle;\n+                        case FloatConst _, IntConst _ -> number;\n+                        default -> defaultStyle;\n+                    };\n+                    jtextPane.getStyledDocument().setCharacterAttributes(t.pos().textOffset(), t.len(), currentStyle, true);\n+                }\n+        );\n+    }\n+\n+    @Override\n+    public String plainText() {\n+        return     textModel.plainText();\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/AbstractTextModelViewer.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import javax.swing.text.DefaultHighlighter;\n+import javax.swing.text.JTextComponent;\n+import javax.swing.text.View;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.geom.Rectangle2D;\n+\n+\/\/ A private subclass of the default highlight painter\n+public class DocModelHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {\n+\n+    public DocModelHighlightPainter(Color color) {\n+        super(color);\n+    }\n+\n+    public Shape paintLayer(Graphics g, int offs0, int offs1, Shape bounds, JTextComponent c, View view) {\n+        g.setColor(c.getSelectionColor());\n+        if (bounds instanceof Rectangle r) {\n+            r = bounds.getBounds();\n+            Graphics2D g2d = (Graphics2D) g;\n+            \/\/g2d.setColor(Color.YELLOW.darker());\n+            g2d.fill(bounds);\n+            g2d.setColor(Color.red);\n+            \/\/  float[] dash = new float[]{2.0F, 2.0F};\n+\n+            \/\/Stroke dashedStroke = new BasicStroke(0.5F, 2, 0, 3.0F, dash, 0.0F);\n+            var r2d = new Rectangle2D.Float((float) r.x, (float) r.y + r.height - 3, (float) (r.width - 1), (float) (3));\n+            g2d.fill(r2d\/*dashedStroke.createStrokedShape(r2d)*\/);\n+\n+            return r;\n+        }\n+        return bounds;\n+\n+\n+    }\n+\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/DocModelHighlightPainter.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.tokens.Span;\n+import hat.tools.textmodel.tokens.Token;\n+\n+import javax.swing.text.Element;\n+\n+public interface ElementSpan extends Span {\n+     TextViewer textViewer();\n+     Element element();\n+    default int startOffset() {\n+        return element().getStartOffset();\n+    }\n+\n+    default int endOffset() {\n+        return element().getEndOffset();\n+    }\n+\n+    record Impl(Token token, TextViewer textViewer, Element element) implements ElementSpan {\n+\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/ElementSpan.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.KernelContext;\n+import hat.buffer.S32Array;\n+import hat.buffer.S32Array2D;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import hat.tools.textmodel.BabylonTextModel;\n+import hat.tools.textmodel.TextModel;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSplitPane;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.Element;\n+import java.awt.BorderLayout;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class FuncOpViewer extends JPanel {\n+\n+\n+    public static class FuncOpTextModelViewer extends AbstractTextModelViewer {\n+        JavaTextModelViewer javaTextModelViewer;\n+        Map<ElementSpan, List<ElementSpan>> ssaIdFromToMap = new HashMap<>();\n+        Map<ElementSpan, List<ElementSpan>> ssaIdToFromMap = new HashMap<>();\n+        Map<Integer, ElementSpan> ssaIdToElement = new HashMap<>();\n+        Map<ElementSpan, List<ElementSpan>> opToJava = new HashMap<>();\n+        static class FuncOpTextPane extends JTextPane {\n+            public void paintComponent(Graphics g) {\n+                super.paintComponent(g);\n+                Graphics2D g2d = (Graphics2D) g;\n+\/\/ So we can overlay with arrows for\n+                \/\/ Draw Text\n+                \/\/  g2d.drawString(\"This is my custom Panel!\",10,20);\n+            }\n+            FuncOpTextPane(Font font) {\n+                super.setFont(font);\n+            }\n+        };\n+        FuncOpTextModelViewer(TextModel textModel, Font font, boolean dark) {\n+            super(textModel, new FuncOpTextPane(font), font, dark);\n+            jtextPane.addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseClicked(MouseEvent e) {\n+                    var clicked = getElementFromMouseEvent(e);\n+                    removeHighlights();\n+                    javaTextModelViewer.removeHighlights();\n+                    if (clicked != null) {\n+                        if (opToJava.keySet().stream().anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n+                            opToJava.keySet().stream().\n+                                    filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n+                                    .forEach(fromElementSpan -> {\n+                                        fromElementSpan.textViewer().highLight(fromElementSpan.element());\n+                                        opToJava.get(fromElementSpan).forEach(targetElementSpan -> {\n+                                            Element targetElement = targetElementSpan.element();\n+                                            targetElementSpan.textViewer().highLight(targetElement);\n+                                            targetElementSpan.textViewer().scrollTo(targetElement);\n+                                        });\n+                                    });\n+                        } else {\n+                            System.out.println(\"not a locationmapping  from op\");\n+                        }\n+                    } else {\n+                        System.out.println(\"nothing from op\");\n+                    }\n+                }\n+            });\n+\n+\n+        }\n+    }\n+\n+    public static class JavaTextModelViewer extends AbstractTextModelViewer {\n+        FuncOpTextModelViewer funcOpTextModelViewer;\n+        Map<ElementSpan, List<ElementSpan>> javaToOp = new HashMap<>();\n+        static class JavaTextPane extends JTextPane {\n+            public void paintComponent(Graphics g) {\n+                super.paintComponent(g);\n+                Graphics2D g2d = (Graphics2D) g;\n+            }\n+            JavaTextPane(Font font) {\n+                super.setFont(font);\n+            }\n+        };\n+        JavaTextModelViewer(TextModel textModel, Font font, boolean dark) {\n+            super(textModel, new JavaTextPane(font), font, dark);\n+            jtextPane.addMouseListener(new MouseAdapter() {\n+                @Override\n+                public void mouseClicked(MouseEvent e) {\n+                    var clicked = getElementFromMouseEvent(e);\n+                    funcOpTextModelViewer.removeHighlights();\n+                    removeHighlights();\n+                    if (clicked != null) {\n+                        if (javaToOp.keySet().stream().anyMatch(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))) {\n+                            javaToOp.keySet().stream().\n+                                    filter(fromElementSpan -> fromElementSpan.includes(clicked.getStartOffset()))\n+                                    .forEach(fromElementSpan -> {\n+                                        fromElementSpan.textViewer().highLight(fromElementSpan.element());\n+                                        javaToOp.get(fromElementSpan).forEach(targetElementSpan -> {\n+                                            Element targetElement = targetElementSpan.element();\n+                                            targetElementSpan.textViewer().highLight(targetElement);\n+                                            targetElementSpan.textViewer().scrollTo(targetElement);\n+                                        });\n+                                    });\n+                        } else {\n+                            System.out.println(\"not a mappable java line  from op\");\n+                        }\n+                    } else {\n+                        System.out.println(\"nothing from java\");\n+                    }\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    public FuncOpViewer(BabylonTextModel cr) {\n+        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\n+        splitPane.setOneTouchExpandable(true);\n+        splitPane.setResizeWeight(0.5);\n+        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));\n+        var font = new Font(\"Monospaced\", Font.PLAIN, 16);\n+        var funcOpTextModelViewer = new FuncOpTextModelViewer(cr, font, false);\n+        var javaTextModelViewer = new JavaTextModelViewer(cr.javaTextModel, font, false);\n+        splitPane.add(funcOpTextModelViewer.scrollPane);\n+        splitPane.add(javaTextModelViewer.scrollPane);\n+        \/\/ tell each about the other\n+        funcOpTextModelViewer.javaTextModelViewer = javaTextModelViewer;\n+        javaTextModelViewer.funcOpTextModelViewer = funcOpTextModelViewer;\n+        cr.find(true, t -> t instanceof BabylonTextModel.BabylonSSARef, t -> {\n+            var ssaRef = (BabylonTextModel.BabylonSSARef) t;\n+            ElementSpan babylonSSARefElement = new ElementSpan.Impl(ssaRef, funcOpTextModelViewer, funcOpTextModelViewer.getElement(t.startOffset()));\n+            funcOpTextModelViewer.ssaIdToElement.put(ssaRef.id, babylonSSARefElement);\n+            funcOpTextModelViewer.ssaIdToFromMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n+            funcOpTextModelViewer.ssaIdFromToMap.computeIfAbsent(babylonSSARefElement, _ -> new ArrayList<>());\n+        });\n+        cr.ssaEdgeList.stream().forEach(edge -> {\n+            var ssaRef = edge.ssaRef();\n+            var ssaDef = edge.ssaDef();\n+            var ssaDefElement = funcOpTextModelViewer.getElement(ssaDef.startOffset());\n+            var ssaRefElement = funcOpTextModelViewer.getElement(ssaRef.endOffset());\n+\n+        });\n+\n+        cr.babylonLocationAttributes.forEach(babylonLocationAttribute->{\n+            ElementSpan babylonLocationAttributeElement = new ElementSpan.Impl(\n+                    babylonLocationAttribute, funcOpTextModelViewer, funcOpTextModelViewer.getElement(babylonLocationAttribute.startOffset()));\n+            var javaPaneOffset = javaTextModelViewer.getOffset(babylonLocationAttribute);\n+            var javaPaneElement = javaTextModelViewer.getElement(javaPaneOffset);\n+            var javaSourceElementSpan = new ElementSpan.Impl(babylonLocationAttribute, javaTextModelViewer, javaPaneElement);\n+            funcOpTextModelViewer.opToJava.computeIfAbsent(babylonLocationAttributeElement, _ -> new ArrayList<>()).add(javaSourceElementSpan);\n+            javaTextModelViewer.javaToOp.computeIfAbsent(javaSourceElementSpan, _ -> new ArrayList<>()).add(babylonLocationAttributeElement);\n+        });\n+\n+        javaTextModelViewer.highLightLines(cr.babylonLocationAttributes.getFirst(), cr.babylonLocationAttributes.getLast());\n+        add(splitPane);\n+    }\n+\n+    public static void launch(BabylonTextModel crDoc) {\n+        SwingUtilities.invokeLater(() -> {\n+            var viewer = new FuncOpViewer(crDoc);\n+            var frame = new JFrame();\n+            frame.setLayout(new BorderLayout());\n+            frame.getContentPane().add(viewer);\n+            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+            frame.pack();\n+            frame.setVisible(true);\n+        });\n+\n+    }\n+\n+    public static void launch(CoreOp.FuncOp javaFunc) {\n+        BabylonTextModel crDoc = BabylonTextModel.of(javaFunc);\n+        launch(crDoc);\n+    }\n+    public static void launch(Path path) throws IOException {\n+        BabylonTextModel crDoc = BabylonTextModel.of(Files.readString(path));\n+        launch(crDoc);\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        FuncOpViewer.launch(Path.of(args[0]));\n+    }\n+}\n+\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/FuncOpViewer.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import javax.swing.JTextPane;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Caret;\n+import javax.swing.text.DefaultCaret;\n+import javax.swing.text.JTextComponent;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.geom.Rectangle2D;\n+\n+public class PaintableTextPane extends JTextPane {\n+    public class MyCaret extends DefaultCaret {\n+\n+        private String mark = \"<\";\n+\n+        public MyCaret() {\n+            setBlinkRate(500);\n+        }\n+\n+        @Override\n+        protected synchronized void damage(Rectangle r) {\n+            if (r == null) {\n+                return;\n+            }\n+\n+            JTextComponent comp = getComponent();\n+            FontMetrics fm = comp.getFontMetrics(comp.getFont());\n+            int textWidth = fm.stringWidth(\">\");\n+            int textHeight = fm.getHeight();\n+            x = r.x;\n+            y = r.y;\n+            width = textWidth;\n+            height = textHeight;\n+            repaint(); \/\/ calls getComponent().repaint(x, y, width, height)\n+        }\n+\n+        @Override\n+        public void paint(Graphics g) {\n+            JTextComponent comp = getComponent();\n+            if (comp == null) {\n+                return;\n+            }\n+\n+            int dot = getCaretPosition();\n+            System.out.println(\"dot = \"+dot);\n+            Rectangle2D r = null;\n+            try {\n+                r = comp.modelToView2D(dot);\n+            } catch (BadLocationException e) {\n+                return;\n+            }\n+            if (r == null) {\n+                return;\n+            }\n+\n+            if ((x != (int)r.getX()) || (y != (int)r.getY())) {\n+                repaint(); \/\/ erase previous location of caret\n+                damage((Rectangle) r);\n+            }\n+\n+            if (isVisible()) {\n+                FontMetrics fm = comp.getFontMetrics(comp.getFont());\n+                int textWidth = fm.stringWidth(\">\");\n+                int textHeight = fm.getHeight();\n+\n+                g.setColor(Color.ORANGE);\/\/comp.getCaretColor());\n+                g.drawString(mark, x, y + fm.getAscent());\n+            }\n+        }\n+\n+    }\n+\n+\n+    public void paintComponent(Graphics g) {\n+       \/\/ this.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));\n+      \/\/  this.setCaret(new MyCaret());\n+        super.paintComponent(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        \/\/ Draw Text\n+        \/\/  g2d.drawString(\"This is my custom Panel!\",10,20);\n+    }\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/PaintableTextPane.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.buffer.S32Array;\n+import hat.buffer.S32Array2D;\n+import hat.ifacemapper.MappableIface;\n+import hat.tools.textmodel.ui.FuncOpViewer;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+\n+public class TestFuncOpViewer {\n+    static class Compute {\n+        @CodeReflection\n+        public static void mandel(@MappableIface.RO KernelContext kc, @MappableIface.RW S32Array2D s32Array2D, @MappableIface.RO S32Array pallette, float offsetx, float offsety, float scale) {\n+            if (kc.x < kc.maxX) {\n+                float width = s32Array2D.width();\n+                float height = s32Array2D.height();\n+                float x = ((kc.x % s32Array2D.width()) * scale - (scale \/ 2f * width)) \/ width + offsetx;\n+                float y = ((kc.x \/ s32Array2D.width()) * scale - (scale \/ 2f * height)) \/ height + offsety;\n+                float zx = x;\n+                float zy = y;\n+                float new_zx;\n+                int colorIdx = 0;\n+                while ((colorIdx < pallette.length()) && (((zx * zx) + (zy * zy)) < 4f)) {\n+                    new_zx = ((zx * zx) - (zy * zy)) + x;\n+                    zy = (2f * zx * zy) + y;\n+                    zx = new_zx;\n+                    colorIdx++;\n+                }\n+                int color = colorIdx < pallette.length() ? pallette.array(colorIdx) : 0;\n+                s32Array2D.array(kc.x, color);\n+            }\n+        }\n+\n+\n+        @CodeReflection\n+        static public void compute(final ComputeContext computeContext, S32Array pallete, S32Array2D s32Array2D, float x, float y, float scale) {\n+\n+            computeContext.dispatchKernel(\n+                    s32Array2D.width() * s32Array2D.height(), \/\/0..S32Array2D.size()\n+                    kc -> mandel(kc, s32Array2D, pallete, x, y, scale));\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) throws NoSuchMethodException, IOException {\n+        String methodName = \"mandel\";\n+        Method method = Compute.class.getDeclaredMethod(methodName,\n+                KernelContext.class, S32Array2D.class, S32Array.class, float.class, float.class, float.class);\n+        CoreOp.FuncOp javaFunc = Op.ofMethod(method).get();\n+        FuncOpViewer.launch(javaFunc);\n+    }\n+}\n\\ No newline at end of file\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TestFuncOpViewer.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.tools.textmodel.ui;\n+\n+import hat.tools.textmodel.tokens.LineCol;\n+import hat.tools.textmodel.tokens.Span;\n+\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Element;\n+import javax.swing.text.Highlighter;\n+import javax.swing.text.Style;\n+import java.awt.event.MouseEvent;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public abstract class TextViewer {\n+    public final JTextPane jtextPane;\n+    \/\/final protected TextLineNumber textLineNumber;\n+    final public JScrollPane scrollPane;\n+    protected Highlighter.HighlightPainter highlightPainter;\n+    private String text;\n+    protected List<Span> lines;\n+    protected Style defaultStyle;\n+\n+    public TextViewer(JTextPane jtextPane) {\n+        this.jtextPane = jtextPane;\n+        this.scrollPane = new JScrollPane(  this.jtextPane);\n+      \/\/  this.textLineNumber = new TextLineNumber(  this.jtextPane);\n+        \/\/this.scrollPane.setRowHeaderView(textLineNumber);\n+\n+        this.jtextPane.getStyledDocument().addDocumentListener(new DocumentListener() {\n+            @Override\n+            public void insertUpdate(DocumentEvent e) {\n+                SwingUtilities.invokeLater(() -> applyHighlighting());\n+            }\n+\n+            @Override\n+            public void removeUpdate(DocumentEvent e) {\n+                SwingUtilities.invokeLater(() -> applyHighlighting());\n+            }\n+\n+            @Override\n+            public void changedUpdate(DocumentEvent e) {\n+                \/\/ Plain text attributes changed, not relevant for this highlighter\n+            }\n+        });\n+\n+\n+    }\n+\n+\n+\n+    public Element getElement(int offset) {\n+       return jtextPane.getStyledDocument().getCharacterElement(offset);\n+   }\n+\n+    public Element getElementFromMouseEvent(MouseEvent e) {\n+        return getElement(getOffset(e));\n+    }\n+    public void scrollTo(Element funcOpElement) {\n+        try {\n+            var rectangle2D = jtextPane.modelToView2D(funcOpElement.getStartOffset());\n+            jtextPane.scrollRectToVisible(rectangle2D.getBounds());\n+        } catch (BadLocationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+\n+    public void highLightLines(LineCol first, LineCol last) {\n+        var highlighter = jtextPane.getHighlighter();\n+        try {\n+            var range = getLineRange( first, last);\n+            highlighter.addHighlight(range.startOffset(), range.endOffset(), highlightPainter);\n+        } catch (BadLocationException e) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+    public int getOffset(MouseEvent e) {\n+        return jtextPane.viewToModel2D(e.getPoint());\n+    }\n+    public void highLight(int from, int to) {\n+        var highlighter =  jtextPane.getHighlighter();\n+        try {\n+            highlighter.addHighlight(from,to, highlightPainter);\n+        } catch (BadLocationException e) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+    public void highLight(Element element) {\n+        var highlighter =  jtextPane.getHighlighter();\n+        try {\n+            highlighter.addHighlight(element.getStartOffset(),element.getEndOffset(),  highlightPainter);\n+        } catch (BadLocationException e) {\n+            throw new IllegalStateException();\n+        }\n+    }\n+\n+    String setText(String text) {\n+        this.text = text;\n+        String[] linesOfText = text.split(\"\\n\");\n+        lines = new ArrayList<>();\n+        int accumOffset = 0;\n+        for (int currentLine = 0; currentLine < linesOfText.length; currentLine++) {\n+            Span line = new Span.Impl(accumOffset, accumOffset + linesOfText[currentLine].length() + 1);\/\/ +1 for newline\n+            lines.add(line);\n+            accumOffset = line.endOffset();\n+        }\n+        return text;\n+    }\n+\n+\n+    public void removeHighlights() {\n+        var highlighter = jtextPane.getHighlighter();\n+        highlighter.removeAllHighlights();\n+        \/\/for (var highlight : highlighter.getHighlights()) {\n+          \/\/      highlighter.removeHighlight(highlight);\n+       \/\/ }\n+    }\n+\n+\n+    protected abstract void applyStyles();\n+\n+    protected abstract String plainText();\n+\n+\n+    void applyHighlighting() {\n+        SwingUtilities.invokeLater(() -> {\n+            this.jtextPane.getStyledDocument().setCharacterAttributes(0, text.length(),  defaultStyle, true);\n+            applyStyles();\n+        });\n+    }\n+\n+    protected void setTextFromDocModel() {\n+        try {\n+            if (this.text != null && !text.equals(\"\")) {\n+                this.jtextPane.getStyledDocument().remove(0, text.length());\n+            }\n+            setText(plainText());\n+            this.jtextPane.getStyledDocument().insertString(0, text, defaultStyle);\n+        } catch (BadLocationException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public Span getLineRange(LineCol start, LineCol end) {\n+            Span startLine = lines.get(start.line());\n+            Span endLine = lines.get(end.line());\n+            return new Span.Impl(startLine.startOffset(),endLine.endOffset());\n+    }\n+\n+    public int getOffset(LineCol lineCol) {\n+        return lines.get(lineCol.line()-1).startOffset()+ lineCol.col();\n+    }\n+\n+}\n","filename":"hat\/tools\/src\/main\/java\/hat\/tools\/textmodel\/ui\/TextViewer.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"}]}