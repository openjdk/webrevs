[{"commit":{"message":"Merge master"},"files":[{"filename":".jcheck\/conf"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"},{"filename":"test\/jdk\/TEST.groups"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"},{"filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt"}],"sha":"09052132c6869c2ab7ac2f20b7ffde90a94ce18d"},{"commit":{"message":"Removed hard coded jextract path"},"files":[],"sha":"2d6b5763e4bdcec7bf12760071198b0322479195"},{"commit":{"message":"Add platform capability checks to bld and mkpoms"},"files":[],"sha":"8abfd95442f999a60dc960fb164c69107ae84644"},{"commit":{"message":"Hat add jextract to maven"},"files":[],"sha":"5deaf0fd58d7ad0975c508e2164c9057817c77d8"},{"commit":{"message":"Added hat nbody opengl example"},"files":[],"sha":"d63c0f764e7b5bb5e6b33e4ed9c9f4ed3e0479e8"},{"commit":{"message":"Added hatless nbody example"},"files":[],"sha":"ee2789e1ed0aabf629ddd75e5424bd5346ce3f4a"},{"commit":{"message":"More jextract prep"},"files":[],"sha":"e40d8a3e1144592ee784136f67cf75f18df30b89"},{"commit":{"message":"More bld simplifications.  Prep for adding jextract"},"files":[],"sha":"ae52afec058d23f115a61d414ae45691d0cc49ee"},{"commit":{"message":"mkpoms cleanup + .gitignore target dirs"},"files":[],"sha":"54f1b9279a326e3344e3fc4f5bff22b7a855312b"},{"commit":{"message":"Added mkpoms script - updated bldr\/XMLNode"},"files":[],"sha":"2f2d7d6c68b8b105a34db02938fea0d0707a1b9f"},{"commit":{"message":"Some build fixups after merging hip backend"},"files":[],"sha":"52eba9dd968e0bc0aa374cfebae393ce34f1c066"},{"commit":{"message":"HIP HAT backend"},"files":[],"sha":"95445c8dae988843aee678fbec358cfe3664caf5"},{"commit":{"message":"using auto generated poms also a fix for CustomOpTest"},"files":[],"sha":"0101fa45570850a5991bf18943ad07b295f28dfb"},{"commit":{"message":"Simplify pom.xml and maven build doc"},"files":[],"sha":"9afe3b74500b44a915687a19dbcea4f86f00b31e"},{"commit":{"message":"bld\/hatrun fixes after PR 278"},"files":[],"sha":"b185abaf7a677dd5e42d1ef531e2d74badf7fed1"},{"commit":{"message":"Regression: compiler SPI does not work with exploded build"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"}],"sha":"f266110ce1394c2a98cfe5aa01bb37a2d21a0bef"},{"commit":{"message":"Fixed race condition in C99HatKernelBuilder.java and cleaned build"},"files":[],"sha":"ec24b9bd771db1bda445b2ce2196d62cadcc591a"},{"commit":{"message":"Turn compiler plugin into simple SPI\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"}],"sha":"152f4678c2ec50d5bbff04d76be7b007676b39e7"},{"commit":{"message":"Move code reflection API into incubating module\n\nReviewed-by: psandoz, asotona"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"18627a637362a70a72d16b5cbe52d07ddb55c6f9"},{"commit":{"message":"Aggregated work on Verifier and BytecodeLift deconstruction\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"86dfc369acd6d140a9a8dc6ba05a3664cf8eb8ea"},{"commit":{"message":"Simplify Interpreter invocation\n\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"}],"sha":"a40e0f2aabcc90e34f9a2672adc2a369b4ec4415"},{"commit":{"message":"Support conversions of primitives in testing context\n\nReviewed-by: psandoz"},"files":[],"sha":"1d23cebd9369b0941604c258c5078c00776e8a93"},{"commit":{"message":"Simplified bld script and added stricter file types"},"files":[],"sha":"fa4dd44395e6093c5ca5b5676c9f6381e5d2833d"},{"commit":{"message":"restoring older versions of CoreOp and Interpreter"},"files":[],"sha":"13b180f6b69a19f9452027766542e29a03dd5f2e"},{"commit":{"message":"ANF Experimental Code Model\n\nReviewed-by: psandoz"},"files":[],"sha":"1fb552a7012cc0010bee266b17b3e79c1dfb88ca"},{"commit":{"message":"Experiment: Alternative SSA construction algorithm\n\nReviewed-by: psandoz"},"files":[],"sha":"a9fbdee81066fd5f840afd537005e04e44ceedef"},{"commit":{"message":"Dont use hashbang for launcher scripts"},"files":[],"sha":"f69e732433c903febc2ef647c5459139130b9acc"},{"commit":{"message":"Fixed env.bash issue found on Linux (Mac ok?)"},"files":[],"sha":"cb52322017ca649c25c40b27dd9478419521f8f3"},{"commit":{"message":"bld script and bldr tools cleanup"},"files":[],"sha":"94b5149779bed3715885955a9d9677f9e9d97d21"},{"commit":{"message":"Uninitialized variables\n\nReviewed-by: mcimadamore"},"files":[],"sha":"ef63c12b3672484ede88b817ddd256eb1b075875"},{"commit":{"message":"Unreachable switch expression block\n\nReviewed-by: mcimadamore"},"files":[],"sha":"24149a258ca341f427e9782bf6210581be8a3a6d"},{"commit":{"message":"Bld fixes needed for cuda linux"},"files":[],"sha":"5dc41266fc04fd9ebf084a190d451a5c122f69b4"},{"commit":{"message":"Add env.bash error tracking and update build scripts and docs"},"files":[],"sha":"6d70f2cc564df3a54e6a1b27e4a2780be93b00f6"},{"commit":{"message":"8337162: Support primitives in patterns\n\nReviewed-by: psandoz"},"files":[],"sha":"853cb64b501b64c78e13526182b9b8578f2b077f"},{"commit":{"message":"Simplified maven copy to build dir"},"files":[],"sha":"b5ef3448d0a9847fe47ab84f64e335629ea8a316"},{"commit":{"message":"Exception regions patch\n\nReviewed-by: psandoz"},"files":[],"sha":"f928e7be46d569b2567015002ff1abd2b6fa7f7d"},{"commit":{"message":"Unreachable method or lambda exit\n\nReviewed-by: mcimadamore"},"files":[],"sha":"d04447d4b0aa9cb0eca60a6758f6e38edcaa77a4"},{"commit":{"message":"Added OpWrapper for CoreOp.NegOp (needed for blackscholes)"},"files":[],"sha":"f4a8b2d9e00ea5fe0e598727b142bfd9888430fd"},{"commit":{"message":"Bldr provides access to jextract"},"files":[],"sha":"09bd0bbc38441646d5e74d97669a57e5b4349e3a"},{"commit":{"message":"Ensure exception region exits are generated\n\nReviewed-by: mcimadamore, asotona"},"files":[],"sha":"de2faf947c3bb32ea4417352317e836738055dbc"},{"commit":{"message":"Cleanup cmake handoff from maven and from bldr"},"files":[],"sha":"c750ca89ffc2c96f1202ee9787393890df8be3f2"},{"commit":{"message":"Captured constants in variables\n\nReviewed-by: mcimadamore"},"files":[],"sha":"9343454b24770d13b5a1cbfd7b08fcc2be14c7d5"},{"commit":{"message":"Simplify code generation for quotable lambdas not to require duplicate capture argument lists\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"}],"sha":"8a8e5b2f52810a4b547c334423a441d4227c1855"},{"commit":{"message":"8337161: Support record pattern for generic records\n\nReviewed-by: psandoz, mcimadamore"},"files":[],"sha":"cfffc996fcc25f61f376c3d41a7774e59557bea5"},{"commit":{"message":"Merge"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"},{"filename":"test\/jdk\/TEST.groups"},{"filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt"}],"sha":"d2f88a702f531de6fd950181d2736cf5dba753d0"},{"commit":{"message":"BytecodeLift with NormalizerBlockTransformer + fix + ExceptionTableCompactor\n\nReviewed-by: psandoz"},"files":[],"sha":"9ec0798c43fb8132e815c4fe34069efdce7f8fd9"},{"commit":{"message":"add a pure java (no maven) build option"},"files":[],"sha":"e02b5d423da7596625600dd39d3ab200e26d407d"},{"commit":{"message":"Working on spirv integration, need to exclude from intellij imls temp…"},"files":[],"sha":"2bb9f2adb438c9d159fb3034c31fec408498ae00"},{"commit":{"message":"Fix method resolution on invoke op wrapper"},"files":[],"sha":"fb4592aa8a69d77ef5eadf44ad33083447ccd665"},{"commit":{"message":"Normalize blocks transformer"},"files":[],"sha":"e7b1d158fc2b6279cddf27f88707d556c72bb764"},{"commit":{"message":"Address var name\n\nReviewed-by: psandoz"},"files":[],"sha":"971b90fa70eaa31810d3658f2f689c2b1ea4c4be"},{"commit":{"message":"Fix failing cases in SwitchStatementTest\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"7746e41b9fc35a3765ec2e662e8d87cf68edd5a1"},{"commit":{"message":"Initial prep for swapping callgraphs for Op.Module"},"files":[],"sha":"fd4e17293e37b9624379e2cb2347ddb19722aa2b"},{"commit":{"message":"Invocation to vararg methods"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"bb48552fc3166ff941fdeaa2c4f26a52b2ea81f3"},{"commit":{"message":"Implementation of a HAT Spirv backend\n\nReviewed-by: gfrost"},"files":[],"sha":"85f14e140ef3111f072c8051d9b26734c94c2496"},{"commit":{"message":"Support match all pattern\n\nReviewed-by: psandoz"},"files":[],"sha":"733ebe964db3506caf18d052a5abfaa38dd83304"},{"commit":{"message":"Update the model of pattern matching when pattern variable identifier is underscore\n\nReviewed-by: psandoz"},"files":[],"sha":"a23e320c96052552a201f65dd3e788e00a23db0a"},{"commit":{"message":"Bytecode cleanup, renames and javadoc\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"c6c071adf2053f5b346938d9364cf17caf309bfd"},{"commit":{"message":"Include boolean in primitive type conversions.\n\nReviewed-by: psandoz"},"files":[],"sha":"5b015c89c8995bd349bf0af9c13a165782884dbd"},{"commit":{"message":"Updated babylon and hat build docs"},"files":[],"sha":"cf3e9c9a79ffe4f39bc3ca9d23d912cecad1f803"},{"commit":{"message":"Hat fixes to support chess"},"files":[],"sha":"5265d256c675a6876e3362ea4a316955dba3fa15"},{"commit":{"message":"Bytecode locals compaction\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"15e8b6e48a1c799f420583d69988e822fb047164"},{"commit":{"message":"Avoid boxing when concatenating a string with a primitive\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"5ffaf946c249a74f253b64df77250cad86c66075"},{"commit":{"message":"Unify common code of SwitchStatementOp and SwitchExpressionOp\n\nReviewed-by: psandoz"},"files":[],"sha":"b8657f4c0e408743b749b8e2c2c40e1129f5fc7b"},{"commit":{"message":"Change the model of the default label of switch\n\nReviewed-by: psandoz"},"files":[],"sha":"b836dba369084c7458d8f4fcb37e07982b15c666"},{"commit":{"message":"Super expressions\n\nReviewed-by: mcimadamore"},"files":[],"sha":"4603f6d574edea0999f55bf8d501ff16583721e1"},{"commit":{"message":"Unify code that generates code model of switch statement and expression\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"962d313c85e16d62b1d69a70490e6d7611017a95"},{"commit":{"message":"Bytecode round 12\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"445a57f874c91e342fbc644a36d97861d56a49db"},{"commit":{"message":"BytecodeLift directly calculating local variables + related BytecodeGenerator fixes\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"207ca5e15964aa9dced66cb81c911c59527d6d8b"},{"commit":{"message":"Model synchronized statements\n\nReviewed-by: mcimadamore"},"files":[],"sha":"345cfa0979c382f3e250880e567a5acba285b907"},{"commit":{"message":"8337158: Modeling and lowering of switch statement\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"8042d934b925d3767b746e57944b99b25c92c47e"},{"commit":{"message":"Bytecode round 10\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"15d8b3b3b64d84134c389dae2e1026261688d511"},{"commit":{"message":"Bitwise complement op\n\nReviewed-by: mcimadamore"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"6f5f211932c3b65d988c6213af5dd000ec150833"},{"commit":{"message":"8337156: Generate code model for switch expression that throws when no label applies\n\nReviewed-by: psandoz"},"files":[],"sha":"00d8b6f0c6e2f630887e620061f916a13be1ae73"},{"commit":{"message":"Unary plus\n\nReviewed-by: mcimadamore"},"files":[],"sha":"a566edf2bceb3ffcabbc3232cc9b8a2248c5a4cc"},{"commit":{"message":"Bytecode round 9\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"bf2ee69c0e14d78b207c51cf96aaaf95a7d7aa83"},{"commit":{"message":"Implementing Black Scholes HAT Example"},"files":[],"sha":"3e6e6d455510778d1322bf744e86945a82375e52"},{"commit":{"message":"8337155: Support expressions returning boxed booleans for the condition blocks of if\/do\/while\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"953de8f8c79ba27f445a4895f063480d495f54e3"},{"commit":{"message":"8337157: Second operand to array.load should be an int\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"4321c34217ce479c52facfc47bf67f58af336ba9"},{"commit":{"message":"Heal and Life Viewers were similar, now they are more so."},"files":[],"sha":"d8033778178d01aad38f3b25e61dc4ed7e03a302"},{"commit":{"message":"Changed image to match JVMLS deck"},"files":[],"sha":"b895d8cc263d83fcaac7593b403bc8c51b95f26b"},{"commit":{"message":"Added menu bar to heal.  To report timing"},"files":[],"sha":"df11b23ac6aba76655efb0de62325886294e1fa3"},{"commit":{"message":"Align code with JVMLS slides"},"files":[],"sha":"6f0b81fe8ec42729667062eff16af9734d069541"},{"commit":{"message":"Test Switch Expression lowering when case is pattern"},"files":[],"sha":"69ad1794f391bf84b936c06e430b1510f9929fd1"},{"commit":{"message":"Test Switch Expression lowering when case is constant\n\nReviewed-by: mcimadamore"},"files":[],"sha":"b4e13d5ca5d5936e2add439b0dfbf06d0f44d472"},{"commit":{"message":"Hat cleanup heal example"},"files":[],"sha":"2ebde563390c0bd786da30c693e05a40014ef6ac"},{"commit":{"message":"Pom fixes for life and heal examples"},"files":[],"sha":"0b38abc5e5674d212a0f7c0f767b4bddd35c1765"},{"commit":{"message":"Simplified hatrun.bash. All examples now <package>.Main"},"files":[],"sha":"cd2b955a948ce4e4e167f67bd7817c6cfa4c2a91"},{"commit":{"message":"Simplified injection of Pre\/Post calls Mutate,Access and Escape"},"files":[],"sha":"c5753295c1bd9de3c5c16e6004fc8063655136ef"},{"commit":{"message":"Convey dirty java buffer status to native code"},"files":[],"sha":"82cec67784e004ec326ac45c58cd9102902a8f4f"},{"commit":{"message":"Hat initial attempt minimize copies"},"files":[],"sha":"3365ad3d9ee6e6fb7c5221758ff1cb9a969d6c65"},{"commit":{"message":"Improve sanity checking"},"files":[],"sha":"254e9cbab8a15e53d4e8baf0d243f78c8c5d6de4"},{"commit":{"message":"Now longer allow cmake builds from hat root dir"},"files":[],"sha":"01a60eebf715e844cb7819f4d3fca87ce64b1923"},{"commit":{"message":"Some files had missing license headers"},"files":[],"sha":"f33330e511ebd986b47144d8de105b98a3afa04a"},{"commit":{"message":"Create a new example for BlackScholes. Reintroduce Heal and Life examples"},"files":[],"sha":"982090bfce228b812af1d96839e4ad4699189a87"},{"commit":{"message":"BoundSchema was walking through the tree. Now we just walk the BoundArray fields"},"files":[],"sha":"f49ef18a654ad519fbb50990eb638d7d777f82fa"},{"commit":{"message":"PTX backend implementation for HAT"},"files":[],"sha":"a128f1556017a7d6878e5965a4f856327d8cb504"},{"commit":{"message":"Hat more schema optimizations"},"files":[],"sha":"af2f7e4716edc5e3ac30cf2c4bfdea69ab5a4cb1"},{"commit":{"message":"Only allow allocation via accelerator, and simplify schema binding"},"files":[],"sha":"ea54c78d9f120a80fe9220d4bb63856f1efcded1"},{"commit":{"message":"Bytecode round 8\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"0bc3ed9467e25875ce9d9201ce1e1fd5d499a5bc"},{"commit":{"message":"Immediate dominator map should be unmodifiable"},"files":[],"sha":"1fd7ffa92ea85938ac6720b462030d52a0a72698"},{"commit":{"message":"SSA transform with capturing lambdas"},"files":[],"sha":"e7557a9d2ea5e0d0b8768483e1bf31ed47598c4a"},{"commit":{"message":"Correct bytecode gen for lambda capture"},"files":[],"sha":"fcec59aaa61e4e6c4f860fc01f1a9108b0d884bd"},{"commit":{"message":"Implementing Healing brush demo, highlighted some missing unary(and binary<<,>> operators)"},"files":[],"sha":"c9141a28fb77a31e00f98a8d25caf00f51136ab8"},{"commit":{"message":"We previously disalowed all field accesses. Static final primitives are safe"},"files":[],"sha":"f1d5883363c9c216c5ed14bb565e39ee6a4fb782"},{"commit":{"message":"Hat fix c99 handling of byte"},"files":[],"sha":"88e9692c42a4d9bf32f599da7c5e8cf39fc2fb4b"},{"commit":{"message":"Fix modeling if statements"},"files":[],"sha":"d661d21778297f71401dd4da081f53ad1651c6a1"},{"commit":{"message":"Migrating HatPtr to use schema"},"files":[],"sha":"60c2ead4e416c8eeef61b15a8cd2ca7c370bc607"},{"commit":{"message":"Accidently checked in my local pom.xml"},"files":[],"sha":"484d34558d5dc5139c37290083ebc51b4d552537"},{"commit":{"message":"Hat schema cleanup"},"files":[],"sha":"bf3e16ef9d7cd50d91d9c229121c6b80c41ff610"},{"commit":{"message":"Moved BoundSchema to its own interface"},"files":[],"sha":"b19c90fee07e8ca79e70fd030865df3e2e624693"},{"commit":{"message":"Binding Schame to iface mappinsg an switched C99 codegen to use Schema for Typedefs"},"files":[],"sha":"660272d4e01992fa31e5c15c46ab182f30490853"},{"commit":{"message":"KernelContext now using schema"},"files":[],"sha":"01707825f3b0631595a4caa4373503b17ff7dac1"},{"commit":{"message":"ArgBuffer now using schema"},"files":[],"sha":"3e1dcfcff884c0f7704f2313587787e0e5b20f0b"},{"commit":{"message":"Reuse some iface mapper types in Schema and remove unused methods"},"files":[],"sha":"0fd48c1c2ea58459eacaecfc44c5ff4cd6d15c4e"},{"commit":{"message":"All examples now using schema"},"files":[],"sha":"91d914119ec5ff561b11214ca4ceac5bfa0325d6"},{"commit":{"message":"Hat move schema to ifacemapper and switch ViolaJones  buffers to used schema"},"files":[],"sha":"e662a3979580436131a8847a212168f0e40e6829"},{"commit":{"message":"Rationalised HatPtr and Types.  Moved from experiments to hat"},"files":[],"sha":"34f38e8de15308f0dcd746138b3db63cae1d23a7"},{"commit":{"message":"Bytecode round 7\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"5254500bf4961c23630d42bb2227eb4ab39b6342"},{"commit":{"message":"Another step towards lowering Ptrs through SSA"},"files":[],"sha":"d5720869923658615518856890f5f591fa3dda22"},{"commit":{"message":"Simplifying InvokePtr example"},"files":[],"sha":"9c677be9adb763972854d4aa0a27ce4b5efdaee7"},{"commit":{"message":"Allow mandel example to run without UI"},"files":[],"sha":"031393bb71d56e54c5c69984bb746c12e8bda504"},{"commit":{"message":"Concat Transform Optimizations\n\nReviewed-by: psandoz"},"files":[],"sha":"58da5b1ec2b522895599d10c3059944731e6ab74"},{"commit":{"message":"Conflicting code reflection fields for method overrides\n\nReviewed-by: mcimadamore, psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"}],"sha":"6de1fc6187073be4908e6e61e9ac129e27f17091"},{"commit":{"message":"Conversion of java.lang.invoke to Class-File API\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java"}],"sha":"abc426e9532ef0269cbf83353690730650021daa"},{"commit":{"message":"Simplify creation of BoundSchema from Schema"},"files":[],"sha":"2a2aac757c282f49f533e7a4c1f17d3f981988a8"},{"commit":{"message":"Hat doc markdown cleanup and ptr schema experiments"},"files":[],"sha":"5a333aca45156bf4417b1114cc0e7a55ea467ac4"},{"commit":{"message":"Bump version check in sanity.java to 24"},"files":[],"sha":"ea5c66d2549edfed9641ab81f26c2d90512126ff"},{"commit":{"message":"Allow us to bind arbitary data to iface mapping."},"files":[],"sha":"2a800c81159c9ab1a2ee44cef0efea05fb26073e"},{"commit":{"message":"Fix JavaDoc typos"},"files":[],"sha":"2122b0946a08f5fe96eaf90e278751ecb3504efc"},{"commit":{"message":"Merge"},"files":[{"filename":".jcheck\/conf"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"},{"filename":"test\/jdk\/TEST.groups"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java"},{"filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt"}],"sha":"76cceb2a1e679d9dea132a01c32ce9f29c03ed59"},{"commit":{"message":"Apologies - I checked in broken Result and Scale tables"},"files":[],"sha":"527687f46a9f50f716773adf8936cadc156d4ef0"},{"commit":{"message":"Hat move schema into hat"},"files":[],"sha":"fe30d6905a548423b2a3e587e70f47548b1d4cfa"},{"commit":{"message":"Schema builder seems to recreate simple layouts, close with Cascade"},"files":[],"sha":"428804fcc1fc5c61a40ccc11583d8096602b2afd"},{"commit":{"message":"HAT more experiments replacing layout with schema"},"files":[],"sha":"80ecea6b4147fccefcc1794751e18ba5dd18fe81"},{"commit":{"message":"Report no attribute present when extracting attribute value from externalized op"},"files":[],"sha":"260ce26ce3f09213f185d1637cb6f546ddbbd3e7"},{"commit":{"message":"Experiments - considering replacing Layout with Schema"},"files":[],"sha":"739ecc84067e1e13ab598ad1b908de13685834e3"},{"commit":{"message":"Computes the VarOp's result type from its operand type, if not overridden"},"files":[],"sha":"fbe81534cebee2b10011b305b34bc0b2509ade1b"},{"commit":{"message":"Experimenting using Schema to hide layouts and interface with ptrs"},"files":[],"sha":"cefd28f3e04bdfd1e8b097fd0ca762eb1a2dedb2"},{"commit":{"message":"More HatOp.Ptr experiments"},"files":[],"sha":"5eee96430653456943d1035a8aa134f1900dc905"},{"commit":{"message":"Hat ptr op and type experiments"},"files":[],"sha":"eb6a3210b105b7e815d474bd5c57a3788ba255da"},{"commit":{"message":"Some HAT cleanups"},"files":[],"sha":"151840bf8b8ff34482c4bd8316204bac5f67d676"},{"commit":{"message":"Fixup babylon location property and remove spirv backend from default"},"files":[],"sha":"3a33038ff06f37a7c72b6b2e716d0f3b648e0d9e"},{"commit":{"message":"Switching to maven build"},"files":[],"sha":"a70d3e942f3109278ef8c4ae5abf19d552e9395a"},{"commit":{"message":"Removed heal and view examples - will return when working"},"files":[],"sha":"f21fef0fcefd8f5d78a35ade6c71780bfbf130a1"},{"commit":{"message":"Cloned CUDA backend native code to PTX backend"},"files":[],"sha":"f13945dc5192e617397b3a3b935e8b775494eb26"},{"commit":{"message":"ComputeContext can now implement BufferAllocator"},"files":[],"sha":"8dd9d6389c5b67e23ac5d128df6970a62f11af9e"},{"commit":{"message":"Decouple iface segment mapper allocation from Acclerator"},"files":[],"sha":"9ebc8afcf5ff971b4de215bd64714588a97537d4"},{"commit":{"message":"Allow static access to layouts of iface mapped segments"},"files":[],"sha":"d100b1e674227a7ed262d0ef42eb23c174fd282f"},{"commit":{"message":"Adding intellij test infrastructure and seeding with code from exampl…"},"files":[],"sha":"67f8e13c7448e9e4d836ac35ee6f6c3ba74fc57c"},{"commit":{"message":"Committing a Concatenation transformation to StringBuilder\n\nReviewed-by: psandoz"},"files":[],"sha":"9c68e18a373840faaadbe9360ccf2cf3884b7c03"},{"commit":{"message":"SPIRV backend needs extra dependencies make it optional"},"files":[],"sha":"df0c75660dfdddcb196028792ddfe3f2f4663c40"},{"commit":{"message":"Add relative paths to spirv iml fileso we can build with intellij"},"files":[],"sha":"d8fe2aad2e958ef03ae2e8352e4d48426ddb38d4"},{"commit":{"message":"Documenting SPIRV dependencies"},"files":[],"sha":"060641237cc19d8a6efd7d4bc9d5c7106def9377"},{"commit":{"message":"Remove need for manual initial creation of backends\/cmake-debug-build"},"files":[],"sha":"bcb21cf760cb4e658bec993a25ee40dea82043b1"},{"commit":{"message":"Allow FuncOpWrapper to wrap SSA lowered funcOps"},"files":[],"sha":"e1f4da33be6a37bd1b018a5bc0aa5530f499a085"},{"commit":{"message":"updates README.md to include fix for backend cmake"},"files":[],"sha":"4c82341905c535b7417940a91eb64f61b3396a67"},{"commit":{"message":"Switch to using maven as primary build"},"files":[],"sha":"75a7a0bf188ab215315b95a76c2203c04312fc46"},{"commit":{"message":"Example code for article"},"files":[],"sha":"e052f93df840b4b455d4a99ede3346f888b4a6ab"},{"commit":{"message":"Discovered some properties are inherited in maven"},"files":[],"sha":"8f666411820c2bef1f5c356e7f1e8dd0165b37ad"},{"commit":{"message":"Experiments with HatPtrOp"},"files":[],"sha":"7c1c89496eea90bf84121bbcf812e3bec6c24768"},{"commit":{"message":"Experiments with HatPtrOp"},"files":[],"sha":"4dd67819b05d7304b51d2f6ffab8b2a1f8f51c1c"},{"commit":{"message":"Allow schema decoding from native code"},"files":[],"sha":"7ac4bff218090ac4cc0d7aec965294baa8ecbf7c"},{"commit":{"message":"Introduced cuda error with last push.  This fixes it"},"files":[],"sha":"1dd9f8b663333b9c5de4090aa373daea0e5640c7"},{"commit":{"message":"Fixed up schema parsing from the backend.  Mostly for debug"},"files":[],"sha":"4bb3facec7492be87f0ef751d12ea01229d47a31"},{"commit":{"message":"Mavenized backend building"},"files":[],"sha":"e7ada25d4c01c76461bf5cd73b928138050f11f8"},{"commit":{"message":"Mavenize the repo. Mostly file moves to maven layout form"},"files":[],"sha":"5033e60403b81299346bb6763a22881974fbf8e2"},{"commit":{"message":"Found the violajones off by one error"},"files":[],"sha":"b32d7186e285b5a1c5b28ff6d96af007fef49c69"},{"commit":{"message":"Use more generic location for nvcc"},"files":[],"sha":"4cdff2b081032d05ac34c1b4757078a4b2a3bc4f"},{"commit":{"message":"Fix cuda cmake errors"},"files":[],"sha":"142c336ed07b123df9d095a87914642e7d4e04fa"},{"commit":{"message":"Null check only when selector expression of switch expression is of reference type\n\nReviewed-by: psandoz"},"files":[],"sha":"edadd5261cf5a98318d4a8038c7336554faea5bc"},{"commit":{"message":"cmake tidyup and access with maven build"},"files":[],"sha":"cbf1b934d8d1bddd81735d880ecdf73bfe0d77e7"},{"commit":{"message":"attempt to mavenize hat starting with opencl targets - ongoing"},"files":[],"sha":"f2ca61566b212e2730d4c8e61b0f62a004115197"},{"commit":{"message":"Improve JavaType::toString\n\nReviewed-by: psandoz"},"files":[],"sha":"1ad028fd0f74ec61e54b183902b4dea4af0c36b5"},{"commit":{"message":"Add support for local classes\n\nReviewed-by: psandoz"},"files":[],"sha":"3c76e6c32bff59006830be12e18a73793f371c76"},{"commit":{"message":"Updates to healing brush demo conversion to hat - ongoing"},"files":[],"sha":"d516b37d1460a1f19cdd8a34c21e39b4f9765295"},{"commit":{"message":"Lower SwitchExpressionOp\n\nReviewed-by: psandoz"},"files":[],"sha":"deebe32acf20eaf2679b811b7caafa7b71704d26"},{"commit":{"message":"Bytecode round 6 - lifting lambdas\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"0cafc73c9556e7d6269f85bf43dd3610d99228b5"},{"commit":{"message":"Add support for enclosing class types\n\nReviewed-by: psandoz"},"files":[],"sha":"ba4e9a15de5f598c934d300d6314b999153af888"},{"commit":{"message":"Converting healing brush to use HAT also offered a headless variant f…"},"files":[],"sha":"7c838871c8ceca9dcd1486b5be68cd54856b0bc4"},{"commit":{"message":"fix std::string to char * for kernel names"},"files":[],"sha":"6b6ef00e4bb2bb92df408dfa07f84a3619807308"},{"commit":{"message":"cuda fixes for violajones"},"files":[],"sha":"a3bd91f1c84726df5c024a2976aba3d2a30e3feb"},{"commit":{"message":"Fixed up ptx backend (native) so that PTX work can begin"},"files":[],"sha":"23471fb4b7bc38d161f6f9babf2496ae6bfdf1b7"},{"commit":{"message":"Found CUDA issue.  This is the fix part1"},"files":[],"sha":"a8e16a75e629f2620d05318baa16b9739618575d"},{"commit":{"message":"added 16 byte alignment of buffers and tail markers to help detect ar…"},"files":[],"sha":"75cd5868e7b7b574cc4036991438f18f3de86976"},{"commit":{"message":"Updated code for dumping schema (debugging cuda violajones)"},"files":[],"sha":"e78c408a0765f21fd39c01c7e60f5abfcdbe1cad"},{"commit":{"message":"Clearly mark which AST nodes are unsupported in ReflectMethods\n\nReviewed-by: psandoz"},"files":[],"sha":"331553ef0ee0a218537ed7b96092266586a5f251"},{"commit":{"message":"Test for creating a module of functions from invocations"},"files":[],"sha":"4bdc86cf4a7090fc2cf44bae4cc9e4cc3fb952da"},{"commit":{"message":"At least one element in 'flexible array members' for some OpenCL comp…"},"files":[],"sha":"eea106e1ea9566b14abafa959809f52b6202ad4e"},{"commit":{"message":"create cuda version of new squares demo"},"files":[],"sha":"794db764f0b5f887abeb47511967663060b40b1a"},{"commit":{"message":"initial work dumping schema from native"},"files":[],"sha":"296adf034c4b088c855b64c07355f48ee9bc1886"},{"commit":{"message":"OpWriter block naming align with block indexes\n\nReviewed-by: psandoz"},"files":[],"sha":"0fbbbabff57f667f75db68c1b7a18827e7397b91"},{"commit":{"message":"added some examples to migrate to hat"},"files":[],"sha":"0bee7cb80243a67786fa0d4a1d2c05f1aae39a28"},{"commit":{"message":"Hat sync with cuda changes"},"files":[],"sha":"97bfd7da9dfff0b8deb713b996a3be99be109e74"},{"commit":{"message":"Hat sync with cuda changes"},"files":[],"sha":"9477fa0b630558379ee301a37f24cb94c5dfd359"},{"commit":{"message":"Hat find cuda ill access"},"files":[],"sha":"02aa9965f701e5e51fe897e199ee44c498de154f"},{"commit":{"message":"Hat opencl cuda mergees"},"files":[],"sha":"1491ae304c998114a37788f33b4d64ffd6b314d4"},{"commit":{"message":"Clion CMakeLists.txt updates for ubuntu opencl"},"files":[],"sha":"185bb8cae550a9c3d942f1f47ecca6bd58179e0a"},{"commit":{"message":"Ubuntu opencl cmake fix for opencl shared libs and execs"},"files":[],"sha":"2765d8f0019a9f8ffca054aea0c5d6cfdaecce1c"},{"commit":{"message":"BytecodeLift implementation progress + SlotOp\n\nCo-authored-by: Paul Sandoz <psandoz@openjdk.org>\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"fda73bd58170a75feaccbc0e6ad7a313655e70bb"},{"commit":{"message":"add cmake opencl stanza for non Apple machines"},"files":[],"sha":"9839e4b4f90d79f2134c1a61d245a47296c83d2f"},{"commit":{"message":"fix opencl buffer created by last cuda fix.."},"files":[],"sha":"d49ac72ef3145c95b8be12443fc231dffcada957"},{"commit":{"message":"Fixed Race Condition in PTX nvcc compiler. Also atomicInc->atomicAdd"},"files":[],"sha":"0e2b2deb2dd8b8c5d08c7346d45aabe7f3394d8e"},{"commit":{"message":"Add CUDA Clion artifacts and cleanup cuda backend"},"files":[],"sha":"1cfb2ca06162ca75a206c9877fd65b750303d385"},{"commit":{"message":"Added Clion CMakefile to backends reformated cpp\/h files"},"files":[],"sha":"b55e2964c64b214302cf8f09021ae443ccdd6c0e"},{"commit":{"message":"Hat initial implementation and build infrastructure"},"files":[],"sha":"f9b5a0a0043b6dfe20d682b4ea44400b1cd6aa3c"},{"commit":{"message":"HAT needs public access to TranslateToSpirvModel"},"files":[],"sha":"db004979307b5e1785071496f2144d91168832aa"},{"commit":{"message":"Enhance OpWriter"},"files":[],"sha":"4f01364a50c7bf7a04600e8365bdc7031b2b8172"},{"commit":{"message":"Sealed interfaces marking operations that model a Java language construct\n\nReviewed-by: mcimadamore"},"files":[],"sha":"650e4cfd9c251ed70432b7cd00f91424b8873d5c"},{"commit":{"message":"Implement bitwise\/shift assignment operations\n\nReviewed-by: psandoz"},"files":[],"sha":"dd4adba1afa1cc7845cbf7c85299743b79460d40"},{"commit":{"message":"Fix triton example."},"files":[],"sha":"cf4cf1c2a01bb192f14b64cae7b7f8e56257def9"},{"commit":{"message":"Lowering transformer"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"6174c8fd06e2741c5ba1211ea9ead05d5110f846"},{"commit":{"message":"Fix test"},"files":[],"sha":"2f08574e9d4b72b5a4bc0d3788891ca0acd7c85a"},{"commit":{"message":"CoreOps to CoreOp, ExtendedOps to ExtendedOp\n\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"903d8b6006d4b567b0522e54e9715c047b8d5092"},{"commit":{"message":"Refactor TypeDefinition to ExternalizedTypeElement\n\nReviewed-by: mcimadamore"},"files":[],"sha":"b72a25864e90c90870e90a627f4169cef020e246"},{"commit":{"message":"Cleanup JavaType factories\n\nReviewed-by: psandoz"},"files":[],"sha":"66cf4eaf8d5c41ffb8e5ca9684f0f8968af19bef"},{"commit":{"message":"Externalizable operations\n\nReviewed-by: mcimadamore"},"files":[],"sha":"9a3a7362aad3d8958c4f027983a32d9fafe77498"},{"commit":{"message":"Fix test"},"files":[],"sha":"9a60b26b678735204971c6955c61359e27415dbb"},{"commit":{"message":"Merge"},"files":[{"filename":".jcheck\/conf"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"},{"filename":"test\/jdk\/TEST.groups"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"80efbb6b9cda068d21ef34349e9c42a9dbcd8abb"},{"commit":{"message":"Clean up support for boxing\n\nReviewed-by: psandoz"},"files":[],"sha":"ac9bc55a1fabfed9a7133156371b1133dfc42e4d"},{"commit":{"message":"Make jdk.compiler build depend on code model API in java.base\n\nReviewed-by: psandoz"},"files":[],"sha":"b5030b313b8182284e0b9ce90633019bbc4fb7bf"},{"commit":{"message":"Add common supertype for type-variable owners\n\nReviewed-by: psandoz"},"files":[],"sha":"78b961661ac8c7e97565da78e9f330f45f17595b"},{"commit":{"message":"Enable pattern matching for JavaType hierarchy\n\nReviewed-by: psandoz"},"files":[],"sha":"a130820f1842de6b9d9256f5285128e843a77209"},{"commit":{"message":"Fix test failure after PR\/51\n\nReviewed-by: psandoz"},"files":[],"sha":"799abb7f548d6e21d40bda11878b2a9f072f2c2d"},{"commit":{"message":"Add support for more types\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"}],"sha":"6713aca070d5cab3a97c1cc19035a13d875d8641"},{"commit":{"message":"8324789: Add line number information to code models\n\nReviewed-by: mcimadamore"},"files":[],"sha":"9f35792fc834a9c89d3f7a13547e3f0a75178c01"},{"commit":{"message":"Preserve order of captured value"},"files":[],"sha":"628a9319dad7413118ad92f463f58907c476fb79"},{"commit":{"message":"Determine if lambda operation originates from a method reference\n\nReviewed-by: mcimadamore"},"files":[],"sha":"c1a89648a188071102743968998241f042a6a2a0"},{"commit":{"message":"Temporarily disable TestSmallCorpus tests\n\nReviewed-by: asotona"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"455606199e82ac85ae01a9ba5c61315b52835979"},{"commit":{"message":"Refine support for captured values."},"files":[],"sha":"ebf319d0f67b2a9746786bd9221cb853550e4c8e"},{"commit":{"message":"BytecodeGenerator cleanup and and types handling fixes\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"55416a09557446376fb3a2877aed1112db66f84b"},{"commit":{"message":"Missing conversion for some unary operators\n\nReviewed-by: psandoz"},"files":[],"sha":"8408a32d201434408acf15420ff690575cd27c47"},{"commit":{"message":"InnerClassLambdaMetafactory fix of hidden classes handling\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"}],"sha":"d02e7c6f9f6f80f028f5eeb82e93eea6d2161287"},{"commit":{"message":"Issues with captures in quotable lambdas\n\nReviewed-by: psandoz"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"}],"sha":"0f1e4e1c0c3c44ac7f54814e4ebc81273f946c04"},{"commit":{"message":"Implement shift ops\n\nReviewed-by: psandoz"},"files":[],"sha":"a0e0953b736c2ae0eaa0f859e90801f3954c326b"},{"commit":{"message":"BytecodeGenerator support of lambdas\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"cdf3f9ba0bd3555d2af49e0c7089d63d4348f1b8"},{"commit":{"message":"Erase receiver type before calling Gen::binaryQualifier\n\nReviewed-by: psandoz"},"files":[],"sha":"ff2074f84ab339eee340eeab435a5ae1afc1a7c4"},{"commit":{"message":"Adding String Concatenation to Code Model (#47)\n\n* Initial commit\r\n\r\n* Shortening up tests and minor tweaks\r\n\r\n* Test tweak\r\n\r\n* Test cleanups\r\n\r\n* Updates and cleanup\r\n\r\n* Removing unused var\r\n\r\n* Tweaks"},"files":[],"sha":"a5c4db179e696bbb919a34c7c7b36d97381baec8"},{"commit":{"message":"Refactor JavaType\n\nReviewed-by: psandoz"},"files":[],"sha":"950402e4b55770590c9a5bc3efa9ee7f47d5c509"},{"commit":{"message":"More systematic binary op tests\n\nReviewed-by: psandoz"},"files":[],"sha":"9cc359783867c9567751207efe369cc08655754b"},{"commit":{"message":"BytecodeGenerator, BytecodeLift and TestBytecode improvements\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"8cf98debb1fa405c5f93840db63625accaa3d8ea"},{"commit":{"message":"Uncomment a String Template Test\n\nReviewed-by: psandoz"},"files":[],"sha":"452c99d7b608c40b6c560ce89180415b15bea2c9"},{"commit":{"message":"Test remove final vars\n\nReviewed-by: psandoz"},"files":[],"sha":"6bc5733d0f155c50dfbd12b4a697c1a4eb5fafc3"},{"commit":{"message":"Lower StringTemplateOp\n\nReviewed-by: psandoz"},"files":[],"sha":"3a66a65e443cdcefc75250a514210151ba7e9482"},{"commit":{"message":"Generate bytecode from an invokable op."},"files":[],"sha":"4de0b9f6f662febda804a4e1c96c33ef7b0ddfa1"},{"commit":{"message":"Fix unbox invocation"},"files":[],"sha":"5549b694b691410a354cf0c7a579cdcd9222341b"},{"commit":{"message":"Example use of code reflection in translating Java to SPIR-V\n\nReviewed-by: psandoz"},"files":[],"sha":"459ba14f646faa03363a3a1c9ebfd3c1cdf5d145"},{"commit":{"message":"A transformer of code models to models that build them."},"files":[],"sha":"638ba1f7958896fb3fc2a0e5c638f4a2317bdd3a"},{"commit":{"message":"Assertion Interpreter Implementation\n\nReviewed-by: psandoz"},"files":[],"sha":"90df3aab5fc5c3bdfcea3afa6d63cc2680ce8820"},{"commit":{"message":"Model String Template\n\nReviewed-by: mcimadamore, psandoz"},"files":[],"sha":"dd7330830f3e348389f903285a344913613d9916"},{"commit":{"message":"Obtain parent code element from code element"},"files":[],"sha":"7d6516667fe7aac0d5ef2d12df77d36ee60c4185"},{"commit":{"message":"Code model from method reference\n\nReviewed-by: mcimadamore"},"files":[],"sha":"8fcbeee32fb423d0fb9c006cafb38b0839122504"},{"commit":{"message":"Descriptor to reference\n\nReviewed-by: mcimadamore"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"2c33eecc9fc7430c40e69337b66daca050040e05"},{"commit":{"message":"Assert code modeling\n\nReviewed-by: psandoz"},"files":[],"sha":"27acfb68f4ecc40042cadbbc597ce60a6a1b27d1"},{"commit":{"message":"Remove MethodTypeDesc\n\nReviewed-by: mcimadamore"},"files":[],"sha":"03f40c2a1dd46e6f2fffdc2e5edafbac200d8fbf"},{"commit":{"message":"Separate TypeElement from Type."},"files":[],"sha":"ff61eaec5473bee3fb79b078dc33b541141a1da8"},{"commit":{"message":"Fix compilation issue with CodeElement.elements"},"files":[],"sha":"b5cd25da8d7cbbbc39e0c399c48a403c6ff36b9e"},{"commit":{"message":"Stream code elements"},"files":[],"sha":"b9f92bbbbf9c8d4cc33f2768dae95862d701d83a"},{"commit":{"message":"Invokable block parameters"},"files":[],"sha":"d94e0338a5d4800b30aa2492c4f3652c7f046af4"},{"commit":{"message":"Structured type definition\n\nReviewed-by: mcimadamore"},"files":[],"sha":"da4c4fa3c76a7bcc870ea5bbd5042f05b3e86984"},{"commit":{"message":"Testing BytecodeLift and BytecodeGenerator roundtrip stability\n\nReviewed-by: psandoz"},"files":[],"sha":"8c6b5754fd043348ec193d78b5b505111fe7b3b9"},{"commit":{"message":"Replace use of MethodTypeDesc with FunctionType"},"files":[],"sha":"75cc28c1c059c9836f42f42f645976250fc2516e"},{"commit":{"message":"Add and\/or\/xor operations to code model\n\nReviewed-by: psandoz"},"files":[],"sha":"ec239acc07b5178d0e029c9019664326c7bd0d7d"},{"commit":{"message":"Review FieldLoadOp\n\nReviewed-by: psandoz"},"files":[],"sha":"d3ea092a795be6b2436dc6fe2efe7f8ac9efa078"},{"commit":{"message":"Update linq example."},"files":[],"sha":"21dd5bed47ddda6e74bd177f48cdbf28342d9fc4"},{"commit":{"message":"Extensible types in the code model"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"b3d45e1af34028a7084f6981d34a2490af0a1eb4"},{"commit":{"message":"Remove bytecode dialect"},"files":[],"sha":"38480b4f1e711b6266ce7bc214596ae49d99022e"},{"commit":{"message":"PoC of Triton programming in Java"},"files":[],"sha":"aeb64a4196274b59a7486dccf52e1c5cc179d182"},{"commit":{"message":"Hide implementation computing global names"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"}],"sha":"72191af726a846e1e861137c134856e657b7869d"},{"commit":{"message":"More block checks"},"files":[],"sha":"ef1a5b4407d5c923f7cb09534b988da0bad49555"},{"commit":{"message":"Exception regions fix\n\nReviewed-by: psandoz"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBranchCompactor.java"}],"sha":"a2ea58f77b5aee42288d722002fd5131d8e005ee"},{"commit":{"message":"Correct computation of block indexes\n\nReviewed-by: asotona"},"files":[],"sha":"16406cd82bc8c3f4f679e568fcc07681ea5ecf23"},{"commit":{"message":"8324556: Not copy result-type when copying an op (#6)\n\n* Not copy resultType when copying an op.\r\n\r\n* Apply Paul's suggestions\r\n\r\n* Add test\r\n\r\n* Review\r\n\r\n* Remove validation from resultType method\r\n\r\n* Add documentation"},"files":[],"sha":"b6d807e7e932e61b8cda431e791bc7085bff80f3"},{"commit":{"message":"Test break statements within try statements"},"files":[],"sha":"22719c50cd82ea7cc6a443b4c14d81d2dfccf39a"},{"commit":{"message":"Simple model testing when lowering"},"files":[],"sha":"21864db868023ce0492252e2b0f7d421b787833b"},{"commit":{"message":"Skip bytecode dialect part 1 - removed BytecodeLower\n"},"files":[],"sha":"ee2661ebc4f911cf12c0193bcf506be75e15f743"},{"commit":{"message":"Make sure method parameters keep their slots when lowering\n\nReviewed-by: psandoz"},"files":[],"sha":"9835b5a64faf10699b4a8d17baf20caa1d094d9b"},{"commit":{"message":"Clean up some examples"},"files":[],"sha":"af40e7d754bc527797dc5c582750dba7c4c9e3af"},{"commit":{"message":"Update project of jcheck conf"},"files":[{"filename":".jcheck\/conf"}],"sha":"61ce338085d1509d49005dbf3af7fa12fa8752d7"},{"commit":{"message":"Support array type constants in code model\n\nReviewed-by: psandoz, mcimadamore"},"files":[],"sha":"a154e5e96ca1b21f9bf3a9eb7cc77a6cfb40093b"},{"commit":{"message":"throw instead returning when erasing checked to unchecked exception\n\nReviewed-by: psandoz"},"files":[],"sha":"92cbc7fc39f0a346435d36b73707f7a181c67bbe"},{"commit":{"message":"Update readme"},"files":[],"sha":"e7cfc9ee3b35857ae060389912578c3e21f80086"},{"commit":{"message":"Move j.l.r.code.impl.OpWriter to j.l.r.code.writer (#3)\n"},"files":[{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"test\/jdk\/TEST.groups"}],"sha":"ce9442fdf391f4de300e74c74c9f8889dce50b0e"},{"commit":{"message":"Initial code reflection prototype\n\nCo-authored-by: Mourad Abbay <mabbay@openjdk.org>\nCo-authored-by: Gary Frost <gfrost@openjdk.org>\nCo-authored-by: Ian Graves <igraves@openjdk.org>\nCo-authored-by: Maurizio Cimadamore <mcimadamore@openjdk.org>\nCo-authored-by: Adam Sotona <asotona@openjdk.org>"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/AbstractValidatingLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaMetafactory.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java"},{"filename":"src\/java.base\/share\/classes\/module-info.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties"},{"filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java"},{"filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt"}],"sha":"38abcc97ba1c0e7a49f0965a66acd71913303f82"},{"commit":{"message":"Update conf"},"files":[{"filename":".jcheck\/conf"}],"sha":"411da8ef435ede05641d888e2661cbee5a65e95b"}]