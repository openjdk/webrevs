{"files":[{"patch":"@@ -368,1 +368,1 @@\n-            || canDeferVarCombo(op);\n+            || op.initOperand() instanceof Op.Result or && or.op() instanceof ConstantOp cop && canDefer(cop) && isDefinitelyAssigned(op);\n@@ -372,11 +372,9 @@\n-    \/\/ Detection of var declaration in a dominant block, initialized with a redundant default value\n-    \/\/ Combo of ConstantOp and VarOp can be deferred if all its VarLoadOps are dominated by VarStoreOp\n-    private static boolean canDeferVarCombo(VarOp op) {\n-        if (op.initOperand() instanceof Op.Result or && or.op() instanceof ConstantOp cop && canDefer(cop)) {\n-            Set<Op.Result> allUses = op.result().uses();\n-            Set<Op.Result> stores = allUses.stream().filter(r -> r.op() instanceof VarAccessOp.VarStoreOp).collect(Collectors.toSet());\n-            \/\/ All VarLoadOps must be dominated by a VarStoreOp\n-            for (Op.Result load : allUses) {\n-                if (load.op() instanceof VarAccessOp.VarLoadOp && !isDominatedBy(load, stores)) {\n-                    return false;\n-                }\n+    \/\/ Detection if VarOp is definitelly assigned (all its VarLoadOps are dominated by VarStoreOp)\n+    \/\/ VarOp can be deferred in such case\n+    private static boolean isDefinitelyAssigned(VarOp op) {\n+        Set<Op.Result> allUses = op.result().uses();\n+        Set<Op.Result> stores = allUses.stream().filter(r -> r.op() instanceof VarAccessOp.VarStoreOp).collect(Collectors.toSet());\n+        \/\/ All VarLoadOps must be dominated by a VarStoreOp\n+        for (Op.Result load : allUses) {\n+            if (load.op() instanceof VarAccessOp.VarLoadOp && !isDominatedBy(load, stores)) {\n+                return false;\n@@ -384,1 +382,0 @@\n-            return true;\n@@ -386,1 +383,1 @@\n-        return false;\n+        return true;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"}]}