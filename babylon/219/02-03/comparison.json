{"files":[{"patch":"@@ -34,3 +34,1 @@\n-import java.lang.reflect.code.Block;\n-import java.lang.reflect.code.Body;\n-import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.CodeElement;\n@@ -170,12 +168,6 @@\n-        OpWriter.CodeItemNamerOption naming = null;\n-        for (Body body : func.bodies()) {\n-            for (Block block : body.blocks()) {\n-                for (Op op : block.ops()) {\n-                    for (Value v : op.operands()) {\n-                        \/\/ Verify operands dominance\n-                        if (!op.result().isDominatedBy(v)) {\n-                            if (naming == null) {\n-                                naming = OpWriter.CodeItemNamerOption.of(OpWriter.computeGlobalNames(func));\n-                            }\n-                            error(category, \"block_\" + block.index() + \" \" + OpWriter.toText(op, naming) + \" is not dominated by its operand declaration in block_\" + v.declaringBlock().index());\n-                        }\n+        OpWriter.CodeItemNamerOption naming = func.traverse(null, CodeElement.opVisitor((n, op) -> {\n+            for (Value v : op.operands()) {\n+                \/\/ Verify operands dominance\n+                if (!op.result().isDominatedBy(v)) {\n+                    if (n == null) {\n+                        n = OpWriter.CodeItemNamerOption.of(OpWriter.computeGlobalNames(func));\n@@ -183,0 +175,2 @@\n+                    error(category, \"block_%d %s is not dominated by its operand declaration in block_%d\".formatted(\n+                            op.parentBlock().index(), OpWriter.toText(op, n), v.declaringBlock().index()));\n@@ -185,1 +179,2 @@\n-        }\n+            return n;\n+        }));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"}]}