{"files":[{"patch":"@@ -245,1 +245,1 @@\n-            b.op(this, OpTransformer.COPYING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.COPYING_TRANSFORMER).op(this);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-                    block.apply(op);\n+                    block.op(op);\n@@ -458,1 +458,1 @@\n-                    block.apply(op);\n+                    block.op(op);\n@@ -461,1 +461,1 @@\n-                block.apply(op);\n+                block.op(op);\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaBackend.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -339,1 +339,1 @@\n-     *     .toList();\n+     *     .collect(Collectors.toCollection(LinkedHashSet::new));\n@@ -342,1 +342,1 @@\n-     * @return the list of target blocks, as an unmodifiable set.\n+     * @return the set of target blocks, as an unmodifiable set.\n@@ -345,1 +345,2 @@\n-        return successors().stream().map(Block.Reference::targetBlock).collect(Collectors.toCollection(LinkedHashSet::new));\n+        return successors().stream().map(Block.Reference::targetBlock)\n+                .collect(Collectors.toCollection(LinkedHashSet::new));\n@@ -473,1 +474,1 @@\n-    public final class Builder implements Function<Op, Op.Result> {\n+    public final class Builder {\n@@ -706,1 +707,1 @@\n-                        block.apply(branch(returnBlock.successor(arg)));\n+                        block.op(branch(returnBlock.successor(arg)));\n@@ -712,1 +713,1 @@\n-                block.apply(op);\n+                block.op(op);\n@@ -802,36 +803,0 @@\n-        \/**\n-         * Appends operations into the block builder in the scope of the builder as an argument\n-         * to the given consumer.\n-         *\n-         * @param c the consumer.\n-         *\/\n-        \/\/ @@@ Is this needed?\n-        public void ops(Consumer<Builder> c) {\n-            c.accept(this);\n-        }\n-\n-        \/**\n-         * Appends an operation to this block, with no operation result name, and this builder's transformer.\n-         *\n-         * @param op the operation to append\n-         * @return the operation result of the appended operation\n-         * @throws IllegalStateException if the operation is structurally invalid\n-         * @see #op(Op, OpTransformer)\n-         *\/\n-        @Override\n-        public Op.Result apply(Op op) {\n-            return op(op, ot);\n-        }\n-\n-        \/**\n-         * Appends an operation to this block, with no operation result name, and this builder's transformer.\n-         *\n-         * @param op the operation to append\n-         * @return the operation result of the appended operation\n-         * @throws IllegalStateException if the operation is structurally invalid\n-         * @see #op(Op, OpTransformer)\n-         *\/\n-        public Op.Result op(Op op) {\n-            return op(op, ot);\n-        }\n-\n@@ -843,1 +808,1 @@\n-         * {@link Op#transform(CopyContext, OpTransformer) transformed} with this builder's context and the given\n+         * {@link Op#transform(CopyContext, OpTransformer) transformed} with this builder's context and\n@@ -861,1 +826,0 @@\n-         * @param transformer the transformer to use when appending a bound operation\n@@ -865,1 +829,1 @@\n-        public Op.Result op(Op op, OpTransformer transformer) {\n+        public Op.Result op(Op op) {\n@@ -872,1 +836,1 @@\n-                transformedOp = op.transform(cc, transformer);\n+                transformedOp = op.transform(cc, ot);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":10,"deletions":46,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-                block.apply(op);\n+                block.op(op);\n@@ -123,1 +123,1 @@\n-                block.apply(op);\n+                block.op(op);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/SSACytron.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                Op.Result builder = block.apply(JavaOp.new_(ConstructorRef.constructor(J_L_STRING_BUILDER)));\n+                Op.Result builder = block.op(JavaOp.new_(ConstructorRef.constructor(J_L_STRING_BUILDER)));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/analysis\/StringConcatTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.LOWERING_TRANSFORMER).op(this);\n@@ -307,1 +307,1 @@\n-            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.LOWERING_TRANSFORMER).op(this);\n@@ -376,1 +376,1 @@\n-            b.op(this, OpTransformer.COPYING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.COPYING_TRANSFORMER).op(this);\n@@ -459,1 +459,1 @@\n-            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.LOWERING_TRANSFORMER).op(this);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n+            b.rebind(b.context(), OpTransformer.LOWERING_TRANSFORMER).op(this);\n@@ -3880,1 +3880,1 @@\n-                            block.apply(op);\n+                            block.op(op);\n@@ -3899,1 +3899,1 @@\n-                            block.apply(op);\n+                            block.op(op);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -670,1 +670,1 @@\n-            return stack.block.apply(op);\n+            return stack.block.op(op);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,7 +90,5 @@\n-                    enterER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of exception region\n-                        b.op(exceptionRegionExit(end.successor(),\n-                            catchER1ISE.successor(), catchER1IAE.successor()));\n-                    });\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, 0))));\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, -1))));\n+                    \/\/ End of exception region\n+                    enterER1.op(exceptionRegionExit(end.successor(),\n+                        catchER1ISE.successor(), catchER1IAE.successor()));\n@@ -99,5 +97,3 @@\n-                    catchER1ISE.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    catchER1ISE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1ISE.op(constant(INT, 1))));\n+                    catchER1ISE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1ISE.op(constant(INT, -1))));\n+                    catchER1ISE.op(branch(end.successor()));\n@@ -106,5 +102,3 @@\n-                    catchER1IAE.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    catchER1IAE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1IAE.op(constant(INT, 2))));\n+                    catchER1IAE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1IAE.op(constant(INT, -1))));\n+                    catchER1IAE.op(branch(end.successor()));\n@@ -113,5 +107,3 @@\n-                    end.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(CoreOp.return_());\n-                    });\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, 3))));\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, -1))));\n+                    end.op(CoreOp.return_());\n@@ -182,8 +174,5 @@\n-                    enterER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of exception region\n-                        b.op(exceptionRegionExit(end.successor(),\n-                            catchER1ISE.successor(), catchER1T.successor()));\n-\n-                    });\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, 0))));\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, -1))));\n+                    \/\/ End of exception region\n+                    enterER1.op(exceptionRegionExit(end.successor(),\n+                        catchER1ISE.successor(), catchER1T.successor()));\n@@ -192,5 +181,3 @@\n-                    catchER1ISE.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    catchER1ISE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1ISE.op(constant(INT, 1))));\n+                    catchER1ISE.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1ISE.op(constant(INT, -1))));\n+                    catchER1ISE.op(branch(end.successor()));\n@@ -199,5 +186,3 @@\n-                    catchER1T.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    catchER1T.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1T.op(constant(INT, 2))));\n+                    catchER1T.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1T.op(constant(INT, -1))));\n+                    catchER1T.op(branch(end.successor()));\n@@ -206,5 +191,3 @@\n-                    end.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(CoreOp.return_());\n-                    });\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, 3))));\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, -1))));\n+                    end.op(return_());\n@@ -280,4 +263,2 @@\n-                    enterER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                    });\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, 0))));\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, -1))));\n@@ -289,7 +270,5 @@\n-                    enterER2.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of second exception region\n-                        b.op(exceptionRegionExit(b3.successor(),\n-                            catchER2.successor()));\n-                    });\n+                    enterER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER2.op(constant(INT, 1))));\n+                    enterER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER2.op(constant(INT, -1))));\n+                    \/\/ End of second exception region\n+                    enterER2.op(exceptionRegionExit(b3.successor(),\n+                        catchER2.successor()));\n@@ -298,13 +277,9 @@\n-                    catchER2.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(b3.successor()));\n-                    });\n-\n-                    b3.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of first exception region\n-                        b.op(exceptionRegionExit(end.successor(),\n-                            catchER1.successor()));\n-                    });\n+                    catchER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER2.op(constant(INT, 2))));\n+                    catchER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER2.op(constant(INT, -1))));\n+                    catchER2.op(branch(b3.successor()));\n+\n+                    b3.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b3.op(constant(INT, 3))));\n+                    b3.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b3.op(constant(INT, -1))));\n+                    \/\/ End of first exception region\n+                    b3.op(exceptionRegionExit(end.successor(),\n+                        catchER1.successor()));\n@@ -313,5 +288,3 @@\n-                    catchER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 4))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    catchER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1.op(constant(INT, 4))));\n+                    catchER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchER1.op(constant(INT, -1))));\n+                    catchER1.op(branch(end.successor()));\n@@ -320,5 +293,3 @@\n-                    end.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 5))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(CoreOp.return_());\n-                    });\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, 5))));\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, -1))));\n+                    end.op(CoreOp.return_());\n@@ -404,7 +375,5 @@\n-                    enterER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 0))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of exception region\n-                        b.op(exceptionRegionExit(exitER1.successor(),\n-                            catchRE.successor(), catchAll.successor()));\n-                    });\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, 0))));\n+                    enterER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER1.op(constant(INT, -1))));\n+                    \/\/ End of exception region\n+                    enterER1.op(exceptionRegionExit(exitER1.successor(),\n+                        catchRE.successor(), catchAll.successor()));\n@@ -412,5 +381,3 @@\n-                    exitER1.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    exitER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, exitER1.op(constant(INT, 2))));\n+                    exitER1.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, exitER1.op(constant(INT, -1))));\n+                    exitER1.op(branch(end.successor()));\n@@ -423,7 +390,5 @@\n-                    enterER2.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 1))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        \/\/ End of exception region\n-                        b.op(exceptionRegionExit(exitER2.successor(),\n-                            catchAll.successor()));\n-                    });\n+                    enterER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER2.op(constant(INT, 1))));\n+                    enterER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, enterER2.op(constant(INT, -1))));\n+                    \/\/ End of exception region\n+                    enterER2.op(exceptionRegionExit(exitER2.successor(),\n+                        catchAll.successor()));\n@@ -431,5 +396,3 @@\n-                    exitER2.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(branch(end.successor()));\n-                    });\n+                    exitER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, exitER2.op(constant(INT, 2))));\n+                    exitER2.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, exitER2.op(constant(INT, -1))));\n+                    exitER2.op(branch(end.successor()));\n@@ -438,5 +401,3 @@\n-                    catchAll.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 2))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(throw_(catchAll.parameters().get(0)));\n-                    });\n+                    catchAll.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchAll.op(constant(INT, 2))));\n+                    catchAll.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, catchAll.op(constant(INT, -1))));\n+                    catchAll.op(throw_(catchAll.parameters().get(0)));\n@@ -445,5 +406,3 @@\n-                    end.ops(b -> {\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, 3))));\n-                        b.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, b.op(constant(INT, -1))));\n-                        b.op(CoreOp.return_());\n-                    });\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, 3))));\n+                    end.op(JavaOp.invoke(INT_CONSUMER_ACCEPT_METHOD, c, end.op(constant(INT, -1))));\n+                    end.op(CoreOp.return_());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestExceptionRegionOps.java","additions":72,"deletions":113,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-            block.apply(op);\n+            block.op(op);\n@@ -156,4 +156,4 @@\n-    static void printConstantString(Function<Op, Op.Result> opBuilder, String s) {\n-        Op.Result c = opBuilder.apply(constant(J_L_STRING, s));\n-        Value System_out = opBuilder.apply(fieldLoad(FieldRef.field(System.class, \"out\", PrintStream.class)));\n-        opBuilder.apply(JavaOp.invoke(method(PrintStream.class, \"println\", void.class, String.class), System_out, c));\n+    static void printConstantString(Block.Builder opBuilder, String s) {\n+        Op.Result c = opBuilder.op(constant(J_L_STRING, s));\n+        Value System_out = opBuilder.op(fieldLoad(FieldRef.field(System.class, \"out\", PrintStream.class)));\n+        opBuilder.op(JavaOp.invoke(method(PrintStream.class, \"println\", void.class, String.class), System_out, c));\n@@ -180,1 +180,1 @@\n-                    Op.Result adaptedResult = block.apply(JavaOp.invoke(ADD_WITH_PRINT_METHOD, adaptedOperands));\n+                    Op.Result adaptedResult = block.op(JavaOp.invoke(ADD_WITH_PRINT_METHOD, adaptedOperands));\n@@ -187,1 +187,1 @@\n-                    block.apply(op);\n+                    block.op(op);\n@@ -214,1 +214,1 @@\n-                    block.apply(op);\n+                    block.op(op);\n@@ -228,1 +228,1 @@\n-    static void printCall(CopyContext cc, JavaOp.InvokeOp invokeOp, Function<Op, Op.Result> opBuilder) {\n+    static void printCall(CopyContext cc, JavaOp.InvokeOp invokeOp, Block.Builder opBuilder) {\n@@ -233,1 +233,1 @@\n-        Value arrayLength = opBuilder.apply(\n+        Value arrayLength = opBuilder.op(\n@@ -235,1 +235,1 @@\n-        Value formatArray = opBuilder.apply(\n+        Value formatArray = opBuilder.op(\n@@ -242,1 +242,1 @@\n-            Value index = opBuilder.apply(\n+            Value index = opBuilder.op(\n@@ -249,1 +249,1 @@\n-                operand = opBuilder.apply(\n+                operand = opBuilder.op(\n@@ -253,1 +253,1 @@\n-            opBuilder.apply(\n+            opBuilder.op(\n@@ -257,1 +257,1 @@\n-        Op.Result formatString = opBuilder.apply(\n+        Op.Result formatString = opBuilder.op(\n@@ -260,2 +260,2 @@\n-        Value System_out = opBuilder.apply(fieldLoad(FieldRef.field(System.class, \"out\", PrintStream.class)));\n-        opBuilder.apply(\n+        Value System_out = opBuilder.op(fieldLoad(FieldRef.field(System.class, \"out\", PrintStream.class)));\n+        opBuilder.op(\n@@ -267,1 +267,1 @@\n-        Op.Result adaptedInvokeResult = opBuilder.apply(invokeOp);\n+        Op.Result adaptedInvokeResult = opBuilder.op(invokeOp);\n@@ -274,1 +274,1 @@\n-            adaptedInvokeResult = opBuilder.apply(\n+            adaptedInvokeResult = opBuilder.op(\n@@ -278,1 +278,1 @@\n-        opBuilder.apply(\n+        opBuilder.op(\n@@ -281,1 +281,1 @@\n-        formatString = opBuilder.apply(\n+        formatString = opBuilder.op(\n@@ -284,1 +284,1 @@\n-        opBuilder.apply(\n+        opBuilder.op(\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLocalTransformationsAdaption.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-                        block.apply(op);\n+                        block.op(op);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/ForwardDifferentiation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * @compile\/fail\/ref=TestNoCodeReflectionInInnerClasses.out -XDrawDiagnostics TestNoCodeReflectionInInnerClasses.java\n+ * @compile\/fail\/ref=TestNoCodeReflectionInInnerClasses.out -Xlint:-incubating -XDrawDiagnostics TestNoCodeReflectionInInnerClasses.java\n","filename":"test\/langtools\/tools\/javac\/reflect\/TestNoCodeReflectionInInnerClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-- compiler.warn.incubating.modules: jdk.incubator.code\n@@ -6,2 +5,1 @@\n-4 errors\n-1 warning\n+4 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/reflect\/TestNoCodeReflectionInInnerClasses.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}