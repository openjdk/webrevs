{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    private static final JavaType CHAR_SEQ_TYPE = JavaType.type(CharSequence.class);\n@@ -44,2 +45,0 @@\n-    record StringAndBuilder(Value string, Value stringBuilder) { }\n-\n@@ -48,0 +47,8 @@\n+    private static boolean reusableResult(Op.Result r) {\n+        if (r.uses().size() == 1) {\n+            return r.uses().stream().noneMatch((use) -> use.op() instanceof CoreOp.ReturnOp ||\n+                    use.op() instanceof CoreOp.VarOp);\n+        }\n+        return false;\n+    }\n+\n@@ -54,5 +61,9 @@\n-\n-            Value result = cz.result();\n-\n-            StringAndBuilder newRes = stringBuild(builder, left, right);\n-            builder.context().mapValue(result, newRes.string);\n+            Op.Result result = cz.result();\n+            if (reusableResult(result)) {\n+                Value sb = stringBuilder(builder, left, right);\n+                builder.context().mapValue(result, sb);\n+            } else {\n+                Value sb = stringBuilder(builder, left, right);\n+                Value str = buildString(builder, sb);\n+                builder.context().mapValue(result, str);\n+            }\n@@ -66,5 +77,3 @@\n-    private static StringAndBuilder stringBuild(Block.Builder builder, Value left, Value right) {\n-        var newB = stringBuilder(builder, left, right);\n-        var toStringInvoke = CoreOp.invoke(SB_TO_STRING, newB);\n-        Value newString = builder.apply(toStringInvoke);\n-        return new StringAndBuilder(newString, newB);\n+    private static Value buildString(Block.Builder builder, Value sb){\n+        var toStringInvoke = CoreOp.invoke(SB_TO_STRING, sb);\n+        return builder.apply(toStringInvoke);\n@@ -74,5 +83,8 @@\n-        CoreOp.NewOp newBuilder = CoreOp._new(FunctionType.functionType(SBC_TYPE));\n-        Value sb = builder.apply(newBuilder);\n-        builder.op(append(sb, left));\n-        builder.op(append(sb, right));\n-        return sb;\n+        if (left.type().equals(SBC_TYPE)) {\n+            return builder.op(append(left, right));\n+        } else {\n+            CoreOp.NewOp newBuilder = CoreOp._new(FunctionType.functionType(SBC_TYPE));\n+            Value sb = builder.apply(newBuilder);\n+            var res = builder.op(append(sb, left));\n+            return builder.op(append(res, right));\n+        }\n@@ -82,1 +94,5 @@\n-        MethodRef leftMethodDesc = MethodRef.method(SBC_TYPE, \"append\", SBC_TYPE, arg.type());\n+        var argType = arg.type();\n+        if (argType.equals(SBC_TYPE)) {\n+            argType = CHAR_SEQ_TYPE;\n+        }\n+        MethodRef leftMethodDesc = MethodRef.method(SBC_TYPE, \"append\", SBC_TYPE, argType);\n@@ -85,0 +101,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/StringConcatTransformer.java","additions":35,"deletions":18,"binary":false,"changes":53,"status":"modified"}]}