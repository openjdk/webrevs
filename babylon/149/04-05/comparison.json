{"files":[{"patch":"@@ -43,1 +43,0 @@\n-    private static final JavaType J_L_OBJECT = JavaType.type(Object.class);\n@@ -45,1 +44,0 @@\n-\n@@ -62,1 +60,1 @@\n-            case CoreOp.ConcatOp cz -> {\n+            case CoreOp.ConcatOp _ -> {\n@@ -103,8 +101,7 @@\n-        if (type instanceof PrimitiveType) {\n-            if (List.of(JavaType.BYTE, JavaType.SHORT).contains(type)) {\n-                Value widened = block.op(CoreOp.conv(JavaType.INT, arg));\n-                MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, JavaType.INT);\n-                return CoreOp.invoke(methodDesc, builder, widened);\n-            } else {\n-                MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, type);\n-                return CoreOp.invoke(methodDesc, builder, arg);\n+        TypeElement appendType = type;\n+        Value appendValue = arg;\n+        if (type instanceof PrimitiveType || type.equals(JavaType.J_L_STRING)) {\n+            \/\/Widen if we need to.\n+            if (type.equals(JavaType.BYTE) || type.equals(JavaType.SHORT)) {\n+                appendValue = block.op(CoreOp.conv(JavaType.INT, arg));\n+                appendType = JavaType.INT;\n@@ -112,6 +109,0 @@\n-        } else if (type.equals(JavaType.J_L_STRING)) {\n-            MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, type);\n-            return CoreOp.invoke(methodDesc, builder, arg);\n-        } else {\n-            MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, J_L_OBJECT);\n-            return CoreOp.invoke(methodDesc, builder, arg);\n@@ -119,0 +110,5 @@\n+        else {\n+            appendType = JavaType.J_L_OBJECT;\n+        }\n+        MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, appendType);\n+        return CoreOp.invoke(methodDesc, builder, appendValue);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/StringConcatTransformer.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.List;\n@@ -113,4 +112,0 @@\n-        CoreOp.FuncOp model = method.getCodeModel().orElseThrow();\n-        CoreOp.FuncOp transformed_model = model.transform(new StringConcatTransformer());\n-        CoreOp.FuncOp ssa_model = generateSSA(model);\n-        CoreOp.FuncOp ssa_transformed_model = ssa_model.transform(new StringConcatTransformer());\n@@ -118,19 +113,1 @@\n-\n-        model.writeTo(System.out);\n-        ssa_model.writeTo(System.out);\n-        ssa_transformed_model.writeTo(System.out);\n-\n-        var model_interpreted = Interpreter.invoke(model, args);\n-        var transformed_model_interpreted = Interpreter.invoke(transformed_model, args);\n-        var ssa_interpreted = Interpreter.invoke(ssa_model, args);\n-        var ssa_transformed_interpreted = Interpreter.invoke(ssa_transformed_model, args);\n-        Object jvm_interpreted;\n-        try {\n-            jvm_interpreted = method.invoke(null, args);\n-        } catch (IllegalAccessException | InvocationTargetException e) {\n-            throw new RuntimeException(e);\n-        }\n-        Assert.assertEquals(model_interpreted, transformed_model_interpreted);\n-        Assert.assertEquals(transformed_model_interpreted, ssa_interpreted);\n-        Assert.assertEquals(ssa_interpreted, ssa_transformed_interpreted);\n-        Assert.assertEquals(ssa_transformed_interpreted, jvm_interpreted);\n+        testStringConcat(method, args);\n@@ -149,0 +126,2 @@\n+        Object[] args = {\"Foo\", \"Bar\", new StringBuilder(\"test\")};\n+        testStringConcat(method, args);\n@@ -150,0 +129,4 @@\n+        Assert.assertEquals(\"test\", args[2].toString());\n+    }\n+\n+    private void testStringConcat(Method method, Object[] args) {\n@@ -154,1 +137,0 @@\n-        Object[] args = {\"Foo\", \"Bar\", new StringBuilder(\"test\")};\n@@ -156,4 +138,4 @@\n-        Interpreter.invoke(model, args);\n-        Interpreter.invoke(transformed_model, args);\n-        Interpreter.invoke(ssa_model, args);\n-        Interpreter.invoke(ssa_transformed_model, args);\n+        var model_interpreted = Interpreter.invoke(model, args);\n+        var transformed_model_interpreted = Interpreter.invoke(transformed_model, args);\n+        var ssa_interpreted = Interpreter.invoke(ssa_model, args);\n+        var ssa_transformed_interpreted = Interpreter.invoke(ssa_transformed_model, args);\n@@ -162,1 +144,1 @@\n-            method.invoke(null, args);\n+            jvm_interpreted = method.invoke(null, args);\n@@ -166,0 +148,4 @@\n+        Assert.assertEquals(model_interpreted, transformed_model_interpreted);\n+        Assert.assertEquals(transformed_model_interpreted, ssa_interpreted);\n+        Assert.assertEquals(ssa_interpreted, ssa_transformed_interpreted);\n+        Assert.assertEquals(ssa_transformed_interpreted, jvm_interpreted);\n@@ -167,1 +153,0 @@\n-        Assert.assertEquals(\"test\", args[2].toString());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestStringConcatTransform.java","additions":16,"deletions":31,"binary":false,"changes":47,"status":"modified"}]}