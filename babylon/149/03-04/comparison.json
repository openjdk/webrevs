{"files":[{"patch":"@@ -82,0 +82,1 @@\n+        valMap.put(StringBuilder.class, new StringBuilder(\"test\"));\n@@ -138,0 +139,31 @@\n+    \/\/Testing to make sure StringBuilders aren't caught up in the concat transformation\n+    @Test\n+    public void testStringBuilderUnchanged() {\n+        Method method;\n+\n+        try {\n+            method = TestStringConcatTransform.class.getMethod(\"stringBuilderArgCheck\", String.class, String.class, StringBuilder.class);\n+        } catch (NoSuchMethodException e) {\n+           throw new RuntimeException(e);\n+        }\n+\n+        CoreOp.FuncOp model = method.getCodeModel().orElseThrow();\n+        CoreOp.FuncOp transformed_model = model.transform(new StringConcatTransformer());\n+        CoreOp.FuncOp ssa_model = generateSSA(model);\n+        CoreOp.FuncOp ssa_transformed_model = ssa_model.transform(new StringConcatTransformer());\n+        Object[] args = {\"Foo\", \"Bar\", new StringBuilder(\"test\")};\n+\n+        Interpreter.invoke(model, args);\n+        Interpreter.invoke(transformed_model, args);\n+        Interpreter.invoke(ssa_model, args);\n+        Interpreter.invoke(ssa_transformed_model, args);\n+        Object jvm_interpreted;\n+        try {\n+            method.invoke(null, args);\n+        } catch (IllegalAccessException | InvocationTargetException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        Assert.assertEquals(\"test\", args[2].toString());\n+    }\n+\n@@ -208,1 +240,1 @@\n-    public static String degenerateTree(String a, String b, String c, String d) {\n+    public static String nonLeftAssociativeTree(String a, String b, String c, String d) {\n@@ -213,1 +245,0 @@\n-    \/\/This String Builder is getting tweaked, check for side effects\n@@ -215,1 +246,1 @@\n-    public static String degenerateTree2(String a, String d) {\n+    public static String stringBuilderCheck(String a, String d) {\n@@ -219,1 +250,0 @@\n-        System.out.println(sb);\n@@ -224,1 +254,9 @@\n-    public static String degenerateTree4(String a, String b, String c, String d) {\n+    public static String stringBuilderArgCheck(String a, String d, StringBuilder c) {\n+        StringBuilder sb = c;\n+        String s = sb + a;\n+        String t = s + d;\n+        return t;\n+    }\n+\n+    @CodeReflection\n+    public static String leftAssociativeTree(String a, String b, String c, String d) {\n@@ -230,1 +268,1 @@\n-    public static String degenerateTree5(String a, String b, String c, String d) {\n+    public static String rightAssociativeTree(String a, String b, String c, String d) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestStringConcatTransform.java","additions":44,"deletions":6,"binary":false,"changes":50,"status":"modified"}]}