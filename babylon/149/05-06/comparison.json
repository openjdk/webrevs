{"files":[{"patch":"@@ -95,4 +95,0 @@\n-        return append(block, builder, arg, arg.type());\n-    }\n-\n-    private static Op append(Block.Builder block, Value builder, Value arg, TypeElement type) {\n@@ -101,4 +97,3 @@\n-        TypeElement appendType = type;\n-        Value appendValue = arg;\n-        if (type instanceof PrimitiveType || type.equals(JavaType.J_L_STRING)) {\n-            \/\/Widen if we need to.\n+        TypeElement type = arg.type();\n+        if (type instanceof PrimitiveType) {\n+            \/\/Widen Short and Byte to Int.\n@@ -106,2 +101,2 @@\n-                appendValue = block.op(CoreOp.conv(JavaType.INT, arg));\n-                appendType = JavaType.INT;\n+                arg = block.op(CoreOp.conv(JavaType.INT, arg));\n+                type = JavaType.INT;\n@@ -109,0 +104,2 @@\n+        } else if (!type.equals(JavaType.J_L_STRING)){\n+            type = JavaType.J_L_OBJECT;\n@@ -110,5 +107,3 @@\n-        else {\n-            appendType = JavaType.J_L_OBJECT;\n-        }\n-        MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, appendType);\n-        return CoreOp.invoke(methodDesc, builder, appendValue);\n+\n+        MethodRef methodDesc = MethodRef.method(J_L_STRING_BUILDER, \"append\", J_L_STRING_BUILDER, type);\n+        return CoreOp.invoke(methodDesc, builder, arg);\n@@ -117,0 +112,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/StringConcatTransformer.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"}]}