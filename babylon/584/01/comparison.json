{"files":[{"patch":"@@ -93,1 +93,1 @@\n-        static FuncOp create(ExternalizedOp def) {\n+        FuncOp(ExternalizedOp def) {\n@@ -103,2 +103,0 @@\n-            return new FuncOp(funcName, def.bodyDefinitions().get(0));\n-        }\n@@ -106,2 +104,1 @@\n-        FuncOp(FuncOp that, CopyContext cc, OpTransformer oa) {\n-            this(that, that.funcName, cc, oa);\n+            this(funcName, def.bodyDefinitions().get(0));\n@@ -110,1 +107,1 @@\n-        FuncOp(FuncOp that, String funcName, CopyContext cc, OpTransformer ot) {\n+        FuncOp(FuncOp that, CopyContext cc, OpTransformer ot) {\n@@ -113,1 +110,1 @@\n-            this.funcName = funcName;\n+            this.funcName = that.funcName;\n@@ -126,0 +123,7 @@\n+        FuncOp(FuncOp that, String funcName, CopyContext cc, OpTransformer ot) {\n+            super(that, cc);\n+\n+            this.funcName = funcName;\n+            this.body = that.body.transform(cc, ot).build(this);\n+        }\n+\n@@ -187,1 +191,1 @@\n-        static FuncCallOp create(ExternalizedOp def) {\n+        FuncCallOp(ExternalizedOp def) {\n@@ -194,1 +198,1 @@\n-            return new FuncCallOp(funcName, def.resultType(), def.operands());\n+            this(funcName, def.resultType(), def.operands());\n@@ -244,1 +248,1 @@\n-        static ModuleOp create(ExternalizedOp def) {\n+        ModuleOp(ExternalizedOp def) {\n@@ -249,1 +253,1 @@\n-            return new ModuleOp(def.bodyDefinitions().get(0));\n+            this(def.bodyDefinitions().get(0));\n@@ -762,1 +766,1 @@\n-        static ConstantOp create(ExternalizedOp def) {\n+        ConstantOp(ExternalizedOp def) {\n@@ -769,1 +773,2 @@\n-            return new ConstantOp(def.resultType(), value);\n+\n+            this(def.resultType(), value);\n@@ -874,1 +879,1 @@\n-        static VarOp create(ExternalizedOp def) {\n+        VarOp(ExternalizedOp def) {\n@@ -885,3 +890,0 @@\n-            \/\/ @@@ Cannot use canonical constructor because type is wrapped\n-            return new VarOp(def, name);\n-        }\n@@ -889,1 +891,1 @@\n-        VarOp(ExternalizedOp def, String varName) {\n+            \/\/ @@@ Cannot use canonical constructor because type is wrapped\n@@ -892,1 +894,1 @@\n-            this.varName = varName;\n+            this.varName = name;\n@@ -1118,1 +1120,1 @@\n-        static TupleLoadOp create(ExternalizedOp def) {\n+        TupleLoadOp(ExternalizedOp def) {\n@@ -1128,1 +1130,2 @@\n-            return new TupleLoadOp(def.operands().get(0), index);\n+\n+            this(def.operands().get(0), index);\n@@ -1175,1 +1178,1 @@\n-        static TupleWithOp create(ExternalizedOp def) {\n+        TupleWithOp(ExternalizedOp def) {\n@@ -1185,1 +1188,2 @@\n-            return new TupleWithOp(def.operands().get(0), index, def.operands().get(1));\n+\n+            this(def.operands().get(0), index, def.operands().get(1));\n@@ -1233,4 +1237,4 @@\n-            case \"constant\" -> ConstantOp.create(def);\n-            case \"func\" -> FuncOp.create(def);\n-            case \"func.call\" -> FuncCallOp.create(def);\n-            case \"module\" -> ModuleOp.create(def);\n+            case \"constant\" -> new ConstantOp(def);\n+            case \"func\" -> new FuncOp(def);\n+            case \"func.call\" -> new FuncCallOp(def);\n+            case \"module\" -> new ModuleOp(def);\n@@ -1240,2 +1244,2 @@\n-            case \"tuple.load\" -> TupleLoadOp.create(def);\n-            case \"tuple.with\" -> TupleWithOp.create(def);\n+            case \"tuple.load\" -> new TupleLoadOp(def);\n+            case \"tuple.with\" -> new TupleWithOp(def);\n@@ -1243,1 +1247,1 @@\n-            case \"var\" -> VarOp.create(def);\n+            case \"var\" -> new VarOp(def);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":34,"deletions":30,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-        static LambdaOp create(ExternalizedOp def) {\n+        LambdaOp(ExternalizedOp def) {\n@@ -209,1 +209,2 @@\n-            return new LambdaOp(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n+\n+            this(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n@@ -604,1 +605,1 @@\n-        static InvokeOp create(ExternalizedOp def) {\n+        InvokeOp(ExternalizedOp def) {\n@@ -640,1 +641,1 @@\n-            return new InvokeOp(ik, isVarArgs, def.resultType(), invokeDescriptor, def.operands());\n+            this(ik, isVarArgs, def.resultType(), invokeDescriptor, def.operands());\n@@ -791,1 +792,1 @@\n-        static NewOp create(ExternalizedOp def) {\n+        NewOp(ExternalizedOp def) {\n@@ -807,1 +808,1 @@\n-            return new NewOp(isVarArgs, def.resultType(), constructorDescriptor, def.operands());\n+            this(isVarArgs, def.resultType(), constructorDescriptor, def.operands());\n@@ -912,1 +913,1 @@\n-            static FieldLoadOp create(ExternalizedOp def) {\n+            FieldLoadOp(ExternalizedOp def) {\n@@ -923,5 +924,4 @@\n-                if (def.operands().isEmpty()) {\n-                    return new FieldLoadOp(def.resultType(), fieldDescriptor);\n-                } else {\n-                    return new FieldLoadOp(def.resultType(), fieldDescriptor, def.operands().get(0));\n-                }\n+\n+                super(def.operands(), fieldDescriptor);\n+\n+                this.resultType = def.resultType();\n@@ -970,1 +970,1 @@\n-            static FieldStoreOp create(ExternalizedOp def) {\n+            FieldStoreOp(ExternalizedOp def) {\n@@ -981,5 +981,2 @@\n-                if (def.operands().size() == 1) {\n-                    return new FieldStoreOp(fieldDescriptor, def.operands().get(0));\n-                } else {\n-                    return new FieldStoreOp(fieldDescriptor, def.operands().get(0), def.operands().get(1));\n-                }\n+\n+                super(def.operands(), fieldDescriptor);\n@@ -1159,1 +1156,1 @@\n-        static InstanceOfOp create(ExternalizedOp def) {\n+        InstanceOfOp(ExternalizedOp def) {\n@@ -1169,1 +1166,2 @@\n-            return new InstanceOfOp(typeDescriptor, def.operands().get(0));\n+\n+            this(typeDescriptor, def.operands().get(0));\n@@ -1216,1 +1214,1 @@\n-        static CastOp create(ExternalizedOp def) {\n+        CastOp(ExternalizedOp def) {\n@@ -1226,1 +1224,2 @@\n-            return new CastOp(def.resultType(), type, def.operands().get(0));\n+\n+            this(def.resultType(), type, def.operands().get(0));\n@@ -3132,4 +3131,0 @@\n-        static ForOp create(ExternalizedOp def) {\n-            return new ForOp(def);\n-        }\n-\n@@ -3353,4 +3348,0 @@\n-        static EnhancedForOp create(ExternalizedOp def) {\n-            return new EnhancedForOp(def);\n-        }\n-\n@@ -4139,4 +4130,0 @@\n-        static TryOp create(ExternalizedOp def) {\n-            return new TryOp(def);\n-        }\n-\n@@ -4628,1 +4615,1 @@\n-            static RecordPatternOp create(ExternalizedOp def) {\n+            RecordPatternOp(ExternalizedOp def) {\n@@ -4636,1 +4623,1 @@\n-                return new RecordPatternOp(recordDescriptor, def.operands());\n+                this(recordDescriptor, def.operands());\n@@ -4973,1 +4960,1 @@\n-            case \"cast\" -> CastOp.create(def);\n+            case \"cast\" -> new CastOp(def);\n@@ -4981,2 +4968,2 @@\n-            case \"field.load\" -> FieldAccessOp.FieldLoadOp.create(def);\n-            case \"field.store\" -> FieldAccessOp.FieldStoreOp.create(def);\n+            case \"field.load\" -> new FieldAccessOp.FieldLoadOp(def);\n+            case \"field.store\" -> new FieldAccessOp.FieldStoreOp(def);\n@@ -4985,2 +4972,2 @@\n-            case \"instanceof\" -> InstanceOfOp.create(def);\n-            case \"invoke\" -> InvokeOp.create(def);\n+            case \"instanceof\" -> new InstanceOfOp(def);\n+            case \"invoke\" -> new InvokeOp(def);\n@@ -4994,2 +4981,2 @@\n-            case \"java.enhancedFor\" -> EnhancedForOp.create(def);\n-            case \"java.for\" -> ForOp.create(def);\n+            case \"java.enhancedFor\" -> new EnhancedForOp(def);\n+            case \"java.for\" -> new ForOp(def);\n@@ -5002,1 +4989,1 @@\n-            case \"java.try\" -> TryOp.create(def);\n+            case \"java.try\" -> new TryOp(def);\n@@ -5005,1 +4992,1 @@\n-            case \"lambda\" -> LambdaOp.create(def);\n+            case \"lambda\" -> new LambdaOp(def);\n@@ -5016,1 +5003,1 @@\n-            case \"new\" -> NewOp.create(def);\n+            case \"new\" -> new NewOp(def);\n@@ -5021,1 +5008,1 @@\n-            case \"pattern.record\" -> PatternOps.RecordPatternOp.create(def);\n+            case \"pattern.record\" -> new PatternOps.RecordPatternOp(def);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":34,"deletions":47,"binary":false,"changes":81,"status":"modified"}]}