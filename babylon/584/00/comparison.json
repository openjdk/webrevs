{"files":[{"patch":"@@ -86,1 +86,1 @@\n-        static FuncOp create(ExternalizedOp def) {\n+        FuncOp(ExternalizedOp def) {\n@@ -96,2 +96,0 @@\n-            return new FuncOp(funcName, def.bodyDefinitions().get(0));\n-        }\n@@ -99,2 +97,1 @@\n-        FuncOp(FuncOp that, CopyContext cc, OpTransformer oa) {\n-            this(that, that.funcName, cc, oa);\n+            this(funcName, def.bodyDefinitions().get(0));\n@@ -103,1 +100,1 @@\n-        FuncOp(FuncOp that, String funcName, CopyContext cc, OpTransformer ot) {\n+        FuncOp(FuncOp that, CopyContext cc, OpTransformer ot) {\n@@ -106,1 +103,1 @@\n-            this.funcName = funcName;\n+            this.funcName = that.funcName;\n@@ -119,4 +116,0 @@\n-        public FuncOp transform(String funcName, OpTransformer ot) {\n-            return new FuncOp(this, funcName, CopyContext.create(), ot);\n-        }\n-\n@@ -180,1 +173,1 @@\n-        static FuncCallOp create(ExternalizedOp def) {\n+        FuncCallOp(ExternalizedOp def) {\n@@ -187,1 +180,1 @@\n-            return new FuncCallOp(funcName, def.resultType(), def.operands());\n+            this(funcName, def.resultType(), def.operands());\n@@ -237,1 +230,1 @@\n-        static ModuleOp create(ExternalizedOp def) {\n+        ModuleOp(ExternalizedOp def) {\n@@ -242,1 +235,1 @@\n-            return new ModuleOp(def.bodyDefinitions().get(0));\n+            this(def.bodyDefinitions().get(0));\n@@ -766,1 +759,1 @@\n-        static ConstantOp create(ExternalizedOp def) {\n+        ConstantOp(ExternalizedOp def) {\n@@ -773,1 +766,2 @@\n-            return new ConstantOp(def.resultType(), value);\n+\n+            this(def.resultType(), value);\n@@ -878,1 +872,1 @@\n-        static VarOp create(ExternalizedOp def) {\n+        VarOp(ExternalizedOp def) {\n@@ -889,3 +883,0 @@\n-            \/\/ @@@ Cannot use canonical constructor because type is wrapped\n-            return new VarOp(def, name);\n-        }\n@@ -893,1 +884,1 @@\n-        VarOp(ExternalizedOp def, String varName) {\n+            \/\/ @@@ Cannot use canonical constructor because type is wrapped\n@@ -896,1 +887,1 @@\n-            this.varName = varName;\n+            this.varName = name;\n@@ -1123,1 +1114,1 @@\n-        static TupleLoadOp create(ExternalizedOp def) {\n+        TupleLoadOp(ExternalizedOp def) {\n@@ -1133,2 +1124,0 @@\n-            return new TupleLoadOp(def.operands().get(0), index);\n-        }\n@@ -1136,2 +1125,1 @@\n-        TupleLoadOp(TupleLoadOp that, CopyContext cc) {\n-            this(that, cc.getValues(that.operands()));\n+            this(def.operands().get(0), index);\n@@ -1140,2 +1128,2 @@\n-        TupleLoadOp(TupleLoadOp that, List<Value> values) {\n-            super(NAME, values);\n+        TupleLoadOp(TupleLoadOp that, CopyContext cc) {\n+            super(that, cc);\n@@ -1184,1 +1172,1 @@\n-        static TupleWithOp create(ExternalizedOp def) {\n+        TupleWithOp(ExternalizedOp def) {\n@@ -1194,2 +1182,0 @@\n-            return new TupleWithOp(def.operands().get(0), index, def.operands().get(1));\n-        }\n@@ -1197,2 +1183,1 @@\n-        TupleWithOp(TupleWithOp that, CopyContext cc) {\n-            this(that, cc.getValues(that.operands()));\n+            this(def.operands().get(0), index, def.operands().get(1));\n@@ -1201,2 +1186,2 @@\n-        TupleWithOp(TupleWithOp that, List<Value> values) {\n-            super(NAME, values);\n+        TupleWithOp(TupleWithOp that, CopyContext cc) {\n+            super(that, cc);\n@@ -1246,4 +1231,4 @@\n-            case \"constant\" -> ConstantOp.create(def);\n-            case \"func\" -> FuncOp.create(def);\n-            case \"func.call\" -> FuncCallOp.create(def);\n-            case \"module\" -> ModuleOp.create(def);\n+            case \"constant\" -> new ConstantOp(def);\n+            case \"func\" -> new FuncOp(def);\n+            case \"func.call\" -> new FuncCallOp(def);\n+            case \"module\" -> new ModuleOp(def);\n@@ -1253,2 +1238,2 @@\n-            case \"tuple.load\" -> TupleLoadOp.create(def);\n-            case \"tuple.with\" -> TupleWithOp.create(def);\n+            case \"tuple.load\" -> new TupleLoadOp(def);\n+            case \"tuple.with\" -> new TupleWithOp(def);\n@@ -1256,1 +1241,1 @@\n-            case \"var\" -> VarOp.create(def);\n+            case \"var\" -> new VarOp(def);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":29,"deletions":44,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-        static LambdaOp create(ExternalizedOp def) {\n+        LambdaOp(ExternalizedOp def) {\n@@ -202,1 +202,2 @@\n-            return new LambdaOp(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n+\n+            this(def.resultType(), def.bodyDefinitions().get(0), isQuotable);\n@@ -603,1 +604,1 @@\n-        static InvokeOp create(ExternalizedOp def) {\n+        InvokeOp(ExternalizedOp def) {\n@@ -639,1 +640,1 @@\n-            return new InvokeOp(ik, isVarArgs, def.resultType(), invokeDescriptor, def.operands());\n+            this(ik, isVarArgs, def.resultType(), invokeDescriptor, def.operands());\n@@ -790,1 +791,1 @@\n-        static NewOp create(ExternalizedOp def) {\n+        NewOp(ExternalizedOp def) {\n@@ -806,1 +807,1 @@\n-            return new NewOp(isVarArgs, def.resultType(), constructorDescriptor, def.operands());\n+            this(isVarArgs, def.resultType(), constructorDescriptor, def.operands());\n@@ -911,1 +912,1 @@\n-            static FieldLoadOp create(ExternalizedOp def) {\n+            FieldLoadOp(ExternalizedOp def) {\n@@ -922,5 +923,4 @@\n-                if (def.operands().isEmpty()) {\n-                    return new FieldLoadOp(def.resultType(), fieldDescriptor);\n-                } else {\n-                    return new FieldLoadOp(def.resultType(), fieldDescriptor, def.operands().get(0));\n-                }\n+\n+                super(NAME, def.operands(), fieldDescriptor);\n+\n+                this.resultType = def.resultType();\n@@ -969,1 +969,1 @@\n-            static FieldStoreOp create(ExternalizedOp def) {\n+            FieldStoreOp(ExternalizedOp def) {\n@@ -980,5 +980,2 @@\n-                if (def.operands().size() == 1) {\n-                    return new FieldStoreOp(fieldDescriptor, def.operands().get(0));\n-                } else {\n-                    return new FieldStoreOp(fieldDescriptor, def.operands().get(0), def.operands().get(1));\n-                }\n+\n+                super(NAME, def.operands(), fieldDescriptor);\n@@ -1163,1 +1160,1 @@\n-        static InstanceOfOp create(ExternalizedOp def) {\n+        InstanceOfOp(ExternalizedOp def) {\n@@ -1173,1 +1170,2 @@\n-            return new InstanceOfOp(typeDescriptor, def.operands().get(0));\n+\n+            this(typeDescriptor, def.operands().get(0));\n@@ -1220,1 +1218,1 @@\n-        static CastOp create(ExternalizedOp def) {\n+        CastOp(ExternalizedOp def) {\n@@ -1230,1 +1228,2 @@\n-            return new CastOp(def.resultType(), type, def.operands().get(0));\n+\n+            this(def.resultType(), type, def.operands().get(0));\n@@ -3136,4 +3135,0 @@\n-        static ForOp create(ExternalizedOp def) {\n-            return new ForOp(def);\n-        }\n-\n@@ -3357,4 +3352,0 @@\n-        static EnhancedForOp create(ExternalizedOp def) {\n-            return new EnhancedForOp(def);\n-        }\n-\n@@ -4143,4 +4134,0 @@\n-        static TryOp create(ExternalizedOp def) {\n-            return new TryOp(def);\n-        }\n-\n@@ -4632,1 +4619,1 @@\n-            static RecordPatternOp create(ExternalizedOp def) {\n+            RecordPatternOp(ExternalizedOp def) {\n@@ -4640,1 +4627,1 @@\n-                return new RecordPatternOp(recordDescriptor, def.operands());\n+                this(recordDescriptor, def.operands());\n@@ -4978,1 +4965,1 @@\n-            case \"cast\" -> CastOp.create(def);\n+            case \"cast\" -> new CastOp(def);\n@@ -4986,2 +4973,2 @@\n-            case \"field.load\" -> FieldAccessOp.FieldLoadOp.create(def);\n-            case \"field.store\" -> FieldAccessOp.FieldStoreOp.create(def);\n+            case \"field.load\" -> new FieldAccessOp.FieldLoadOp(def);\n+            case \"field.store\" -> new FieldAccessOp.FieldStoreOp(def);\n@@ -4990,2 +4977,2 @@\n-            case \"instanceof\" -> InstanceOfOp.create(def);\n-            case \"invoke\" -> InvokeOp.create(def);\n+            case \"instanceof\" -> new InstanceOfOp(def);\n+            case \"invoke\" -> new InvokeOp(def);\n@@ -4999,2 +4986,2 @@\n-            case \"java.enhancedFor\" -> EnhancedForOp.create(def);\n-            case \"java.for\" -> ForOp.create(def);\n+            case \"java.enhancedFor\" -> new EnhancedForOp(def);\n+            case \"java.for\" -> new ForOp(def);\n@@ -5007,1 +4994,1 @@\n-            case \"java.try\" -> TryOp.create(def);\n+            case \"java.try\" -> new TryOp(def);\n@@ -5010,1 +4997,1 @@\n-            case \"lambda\" -> LambdaOp.create(def);\n+            case \"lambda\" -> new LambdaOp(def);\n@@ -5021,1 +5008,1 @@\n-            case \"new\" -> NewOp.create(def);\n+            case \"new\" -> new NewOp(def);\n@@ -5026,1 +5013,1 @@\n-            case \"pattern.record\" -> PatternOps.RecordPatternOp.create(def);\n+            case \"pattern.record\" -> new PatternOps.RecordPatternOp(def);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":34,"deletions":47,"binary":false,"changes":81,"status":"modified"}]}