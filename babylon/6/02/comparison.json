{"files":[{"patch":"@@ -142,1 +142,1 @@\n-            super(block, op.descriptor().returnType());\n+            super(block, op.resultType());\n@@ -174,2 +174,0 @@\n-    final TypeDesc resultType;\n-\n@@ -185,1 +183,1 @@\n-        this(that.name, that.resultType, cc.getValues(that.operands));\n+        this(that.name, cc.getValues(that.operands));\n@@ -226,1 +224,1 @@\n-     * Constructs an operation with a name, operation result type, and list of operands.\n+     * Constructs an operation with a name and list of operands.\n@@ -229,1 +227,0 @@\n-     * @param resultType the operation result type.\n@@ -232,1 +229,1 @@\n-    protected Op(String name, TypeDesc resultType, List<? extends Value> operands) {\n+    protected Op(String name, List<? extends Value> operands) {\n@@ -234,1 +231,0 @@\n-        this.resultType = resultType;\n@@ -322,3 +318,1 @@\n-    public TypeDesc resultType() {\n-        return resultType;\n-    }\n+    public abstract TypeDesc resultType();\n@@ -336,1 +330,1 @@\n-        return MethodTypeDesc.methodType(resultType, operandTypes);\n+        return MethodTypeDesc.methodType(resultType(), operandTypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            super(name, TypeDesc.VOID, List.of());\n+            super(name, List.of());\n@@ -142,0 +142,7 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            \/\/ I chose VOID, because bytecode instructions manipulate the stack\n+            \/\/ plus the type of what an operation will push\/pop mayn not be known, e.g. pop instruction\n+            return TypeDesc.VOID;\n+        }\n@@ -2280,0 +2287,2 @@\n+        private final TypeDesc resultType;\n+\n@@ -2282,0 +2291,1 @@\n+            this.resultType = that.resultType;\n@@ -2285,1 +2295,2 @@\n-            super(name, resultType, operands);\n+            super(name, operands);\n+            this.resultType = resultType;\n@@ -2299,0 +2310,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeInstructionOps.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -140,1 +139,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -180,0 +179,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -193,0 +197,1 @@\n+        final TypeDesc resultType;\n@@ -208,0 +213,1 @@\n+            this.resultType = def.resultType();\n@@ -214,0 +220,1 @@\n+            this.resultType = that.resultType;\n@@ -222,1 +229,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -225,0 +232,1 @@\n+            this.resultType = resultType;\n@@ -237,0 +245,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -295,1 +308,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -317,0 +330,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -361,1 +379,1 @@\n-            super(NAME, QUOTED_TYPE,\n+            super(NAME,\n@@ -421,0 +439,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return QUOTED_TYPE;\n+        }\n@@ -472,1 +495,1 @@\n-            super(NAME, functionalInterface,\n+            super(NAME,\n@@ -540,0 +563,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return functionalInterface();\n+        }\n@@ -543,1 +571,1 @@\n-     * A synthetic closure type, that is the operation result-type of an closure operation.\n+     * A synthetic closure type, that is the operation result-type of a closure operation.\n@@ -609,1 +637,1 @@\n-            super(NAME, closureType(bodyC.descriptor()),\n+            super(NAME,\n@@ -679,0 +707,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return closureType(body().descriptor());\n+        }\n@@ -705,1 +738,1 @@\n-            super(NAME, resultType(args), args);\n+            super(NAME, args);\n@@ -724,0 +757,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType(operands());\n+        }\n@@ -753,1 +791,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -757,2 +795,1 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of(operand));\n+            super(NAME, List.of(operand));\n@@ -769,0 +806,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -796,2 +838,1 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of(e));\n+            super(NAME, List.of(e));\n@@ -803,0 +844,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -832,2 +878,6 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of());\n+            super(NAME, List.of());\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n@@ -865,2 +915,1 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of());\n+            super(NAME, List.of());\n@@ -870,1 +919,1 @@\n-            super(NAME, TypeDesc.VOID, operands);\n+            super(NAME, operands);\n@@ -881,0 +930,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -916,2 +970,1 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of());\n+            super(NAME, List.of());\n@@ -930,0 +983,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -970,2 +1028,1 @@\n-            super(NAME, TypeDesc.VOID,\n-                    List.of(p));\n+            super(NAME, List.of(p));\n@@ -993,0 +1050,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -1005,0 +1067,1 @@\n+        final TypeDesc type;\n@@ -1080,0 +1143,1 @@\n+            this.type = def.resultType();\n@@ -1086,0 +1150,1 @@\n+            this.type = that.type;\n@@ -1095,1 +1160,1 @@\n-            super(NAME, type, List.of());\n+            super(NAME, List.of());\n@@ -1097,0 +1162,1 @@\n+            this.type = type;\n@@ -1110,0 +1176,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return type;\n+        }\n@@ -1132,0 +1203,1 @@\n+        final TypeDesc resultType;\n@@ -1148,0 +1220,1 @@\n+            this.resultType = def.resultType();\n@@ -1154,0 +1227,1 @@\n+            this.resultType = that.resultType;\n@@ -1166,1 +1240,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -1169,0 +1243,1 @@\n+            this.resultType = resultType;\n@@ -1185,0 +1260,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1195,0 +1275,2 @@\n+        final TypeDesc resultType;\n+\n@@ -1197,0 +1279,2 @@\n+\n+            this.resultType = def.resultType();\n@@ -1201,0 +1285,2 @@\n+\n+            this.resultType = that.resultType;\n@@ -1209,1 +1295,8 @@\n-            super(NAME, resultType, List.of(arg));\n+            super(NAME, List.of(arg));\n+\n+            this.resultType = resultType;\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n@@ -1222,0 +1315,1 @@\n+        final TypeDesc resultType;\n@@ -1237,0 +1331,1 @@\n+            this.resultType = def.resultType();\n@@ -1243,0 +1338,1 @@\n+            this.resultType = that.resultType;\n@@ -1255,1 +1351,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -1258,0 +1354,1 @@\n+            this.resultType = resultType;\n@@ -1274,0 +1371,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1302,1 +1404,1 @@\n-        FieldAccessOp(String name, TypeDesc resultType, List<Value> operands,\n+        FieldAccessOp(String name, List<Value> operands,\n@@ -1304,1 +1406,1 @@\n-            super(name, resultType, operands);\n+            super(name, operands);\n@@ -1357,1 +1459,1 @@\n-                super(NAME, descriptor.type(),\n+                super(NAME,\n@@ -1363,1 +1465,1 @@\n-                super(NAME, descriptor.type(),\n+                super(NAME,\n@@ -1366,0 +1468,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return fieldDescriptor().type();\n+            }\n@@ -1405,1 +1512,1 @@\n-                super(NAME, TypeDesc.VOID,\n+                super(NAME,\n@@ -1411,1 +1518,1 @@\n-                super(NAME, TypeDesc.VOID,\n+                super(NAME,\n@@ -1414,0 +1521,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return TypeDesc.VOID;\n+            }\n@@ -1439,1 +1551,6 @@\n-            super(NAME, TypeDesc.INT, List.of(array));\n+            super(NAME, List.of(array));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.INT;\n@@ -1460,1 +1577,1 @@\n-            super(that.opName(), resultType(operands.get(0), operands.size() == 2 ? null : operands.get(2)), operands);\n+            super(that.opName(), operands);\n@@ -1465,1 +1582,1 @@\n-            super(name, resultType(array, v), operands(array, index, v));\n+            super(name, operands(array, index, v));\n@@ -1513,0 +1630,6 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                Value array = operands().get(0);\n+                return resultType(array, null);\n+            }\n@@ -1539,0 +1662,8 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                \/\/ resultType is void, but we still call resultType method because it has validations in it\n+                Value array = operands().get(0);\n+                Value value = operands().get(2);\n+                return resultType(array, value);\n+            }\n@@ -1585,1 +1716,1 @@\n-            super(NAME, TypeDesc.BOOLEAN,\n+            super(NAME,\n@@ -1601,0 +1732,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.BOOLEAN;\n+        }\n@@ -1611,0 +1747,1 @@\n+        final TypeDesc resultType;\n@@ -1618,1 +1755,1 @@\n-            TypeDesc typeDescriptor = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n+            TypeDesc type = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n@@ -1624,1 +1761,1 @@\n-            return new CastOp(def, typeDescriptor);\n+            return new CastOp(def, type);\n@@ -1630,0 +1767,1 @@\n+            this.resultType = def.resultType();\n@@ -1636,0 +1774,1 @@\n+            this.resultType = that.resultType;\n@@ -1645,2 +1784,1 @@\n-            super(NAME, resultType,\n-                    List.of(v));\n+            super(NAME, List.of(v));\n@@ -1648,0 +1786,1 @@\n+            this.resultType = resultType;\n@@ -1661,0 +1800,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1744,2 +1888,2 @@\n-        VarOp(String varName, TypeDesc type, Value init) {\n-            super(NAME, Var.type(type), List.of(init));\n+        VarOp(String varName, Value init) {\n+            super(NAME, List.of(init));\n@@ -1768,0 +1912,6 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            TypeDesc valueType = operands().get(0).type();\n+            return Var.type(valueType);\n+        }\n@@ -1779,2 +1929,2 @@\n-        VarAccessOp(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        VarAccessOp(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -1819,1 +1969,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue.get(0))), varValue);\n+                super(NAME, varValue);\n@@ -1829,1 +1979,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue)), List.of(varValue));\n+                super(NAME, List.of(varValue));\n@@ -1847,0 +1997,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return getresultType(operands().get(0));\n+            }\n@@ -1870,1 +2025,1 @@\n-                super(NAME, getresultType(checkIsVarOp(values.get(0))),\n+                super(NAME,\n@@ -1881,1 +2036,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue)),\n+                super(NAME,\n@@ -1900,0 +2055,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return getresultType(operands().get(0));\n+            }\n@@ -1956,1 +2116,6 @@\n-            super(NAME, Tuple.typeFromValues(componentValues), componentValues);\n+            super(NAME, componentValues);\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return Tuple.typeFromValues(operands());\n@@ -1996,1 +2161,1 @@\n-            super(NAME, getresultType(values.get(0), that.index), values);\n+            super(NAME, values);\n@@ -2007,1 +2172,1 @@\n-            super(NAME, getresultType(tupleValue, index), List.of(tupleValue));\n+            super(NAME, List.of(tupleValue));\n@@ -2044,0 +2209,6 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            Value tupleValue = operands().get(0);\n+            return getresultType(tupleValue, index);\n+        }\n@@ -2047,1 +2218,1 @@\n-     * The tuple component load operation, that access the component of a tuple at a given, constant, component index.\n+     * The tuple component set operation, that access the component of a tuple at a given, constant, component index.\n@@ -2082,1 +2253,1 @@\n-            super(NAME, getresultType(values.get(0), that.index, values.get(1)), values);\n+            super(NAME, values);\n@@ -2093,1 +2264,1 @@\n-            super(NAME, getresultType(tupleValue, index, value), List.of(tupleValue, value));\n+            super(NAME, List.of(tupleValue, value));\n@@ -2131,0 +2302,7 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            Value tupleValue = operands().get(0);\n+            Value value = operands().get(2);\n+            return getresultType(tupleValue, index, value);\n+        }\n@@ -2181,1 +2359,1 @@\n-            super(NAME, ExceptionRegion.EXCEPTION_REGION_TYPE, List.of());\n+            super(NAME, List.of());\n@@ -2202,0 +2380,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return ExceptionRegion.EXCEPTION_REGION_TYPE;\n+        }\n@@ -2239,1 +2422,1 @@\n-            super(NAME, TypeDesc.VOID, checkValue(exceptionRegion));\n+            super(NAME, checkValue(exceptionRegion));\n@@ -2270,0 +2453,4 @@\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -2291,2 +2478,2 @@\n-        protected ArithmeticOperation(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        protected ArithmeticOperation(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -2312,2 +2499,2 @@\n-        protected TestOperation(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        protected TestOperation(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -2333,2 +2520,7 @@\n-        protected BinaryOp(String name, TypeDesc resultType, Value lhs, Value rhs) {\n-            super(name, resultType, List.of(lhs, rhs));\n+        protected BinaryOp(String name, Value lhs, Value rhs) {\n+            super(name, List.of(lhs, rhs));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return operands().get(0).type();\n@@ -2354,2 +2546,7 @@\n-        protected UnaryOp(String name, TypeDesc resultType, Value v) {\n-            super(name, resultType, List.of(v));\n+        protected UnaryOp(String name, Value v) {\n+            super(name, List.of(v));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return operands().get(0).type();\n@@ -2376,1 +2573,1 @@\n-            super(name, TypeDesc.BOOLEAN, List.of(v));\n+            super(name, List.of(v));\n@@ -2397,1 +2594,6 @@\n-            super(name, TypeDesc.BOOLEAN, List.of(lhs, rhs));\n+            super(name, List.of(lhs, rhs));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.BOOLEAN;\n@@ -2421,2 +2623,2 @@\n-        AddOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        AddOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2446,2 +2648,2 @@\n-        SubOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        SubOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2471,2 +2673,2 @@\n-        MulOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        MulOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2496,2 +2698,2 @@\n-        DivOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        DivOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2521,2 +2723,2 @@\n-        ModOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        ModOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2547,1 +2749,1 @@\n-            super(NAME, resultType, v);\n+            super(NAME, v);\n@@ -2571,2 +2773,2 @@\n-        NotOp(TypeDesc resultType, Value v) {\n-            super(NAME, resultType, v);\n+        NotOp(Value v) {\n+            super(NAME, v);\n@@ -3227,1 +3429,1 @@\n-     * @param t the type descriptor of the type to cast to\n+     * @param resultType the result type of the operation\n@@ -3231,2 +3433,2 @@\n-    public static CastOp cast(TypeDesc t, Value v) {\n-        return new CastOp(t, t, v);\n+    public static CastOp cast(TypeDesc resultType, Value v) {\n+        return new CastOp(resultType, resultType.rawType(), v);\n@@ -3254,12 +3456,1 @@\n-        return var(null, init.type(), init);\n-    }\n-\n-    \/**\n-     * Creates a var operation.\n-     *\n-     * @param type the type of the var's value\n-     * @param init the initial value of the var\n-     * @return the var operation\n-     *\/\n-    public static VarOp var(TypeDesc type, Value init) {\n-        return var(null, type, init);\n+        return var(null, init);\n@@ -3276,13 +3467,1 @@\n-        return var(name, init.type(), init);\n-    }\n-\n-    \/**\n-     * Creates a var operation.\n-     *\n-     * @param name the name of the var\n-     * @param type the type of the var's value\n-     * @param init the initial value of the var\n-     * @return the var operation\n-     *\/\n-    public static VarOp var(String name, TypeDesc type, Value init) {\n-        return new VarOp(name, type, init);\n+        return new VarOp(name, init);\n@@ -3366,13 +3545,1 @@\n-        return add(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates an add operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the add operation\n-     *\/\n-    public static BinaryOp add(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new AddOp(resultType, lhs, rhs);\n+        return new AddOp(lhs, rhs);\n@@ -3389,13 +3556,1 @@\n-        return sub(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a sub operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the sub operation\n-     *\/\n-    public static BinaryOp sub(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new SubOp(resultType, lhs, rhs);\n+        return new SubOp(lhs, rhs);\n@@ -3412,13 +3567,1 @@\n-        return mul(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a mul operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the mul operation\n-     *\/\n-    public static BinaryOp mul(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new MulOp(resultType, lhs, rhs);\n+        return new MulOp(lhs, rhs);\n@@ -3435,13 +3578,1 @@\n-        return div(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a div operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the div operation\n-     *\/\n-    public static BinaryOp div(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new DivOp(resultType, lhs, rhs);\n+        return new DivOp(lhs, rhs);\n@@ -3458,13 +3589,1 @@\n-        return mod(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a mod operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the mod operation\n-     *\/\n-    public static BinaryOp mod(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new ModOp(resultType, lhs, rhs);\n+        return new ModOp(lhs, rhs);\n@@ -3473,1 +3592,0 @@\n-\n@@ -3502,12 +3620,1 @@\n-        return not(v.type(), v);\n-    }\n-\n-    \/**\n-     * Creates a not operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param v the operand\n-     * @return the not operation\n-     *\/\n-    public static UnaryOp not(TypeDesc resultType, Value v) {\n-        return new NotOp(resultType, v);\n+        return new NotOp(v);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":293,"deletions":186,"binary":false,"changes":479,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-            super(name, TypeDesc.VOID, checkLabel(label));\n+            super(name, checkLabel(label));\n@@ -163,0 +163,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -268,1 +273,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -273,1 +278,1 @@\n-            super(NAME, TypeDesc.VOID, List.of(operand));\n+            super(NAME, List.of(operand));\n@@ -284,0 +289,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -320,1 +330,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -361,0 +371,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -395,1 +410,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -447,0 +462,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -567,1 +587,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -667,0 +687,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -676,0 +701,1 @@\n+        final TypeDesc resultType;\n@@ -688,0 +714,1 @@\n+            this.resultType = def.resultType();\n@@ -696,0 +723,1 @@\n+            this.resultType = that.resultType;\n@@ -703,2 +731,2 @@\n-        JavaSwitchExpressionOp(TypeDesc type, Value target, List<Body.Builder> bodyCs) {\n-            super(NAME, type, List.of(target));\n+        JavaSwitchExpressionOp(TypeDesc resultType, Value target, List<Body.Builder> bodyCs) {\n+            super(NAME, List.of(target));\n@@ -712,2 +740,2 @@\n-\n-            \/\/\n+            \/\/ @@@ when resultType is null, we assume statements\/expressions bodies have the same yieldType\n+            this.resultType = resultType == null ? bodies.get(1).yieldType() : resultType;\n@@ -725,0 +753,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -749,1 +782,6 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n@@ -889,1 +927,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1005,0 +1043,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1114,1 +1157,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1260,0 +1303,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1312,1 +1360,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1318,1 +1366,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1399,0 +1447,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1452,1 +1505,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1458,1 +1511,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1538,0 +1591,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1566,1 +1624,1 @@\n-            super(name, BOOLEAN, List.of());\n+            super(name, List.of());\n@@ -1645,0 +1703,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return BOOLEAN;\n+        }\n@@ -1765,0 +1828,1 @@\n+        final TypeDesc resultType;\n@@ -1778,0 +1842,1 @@\n+            this.resultType = def.resultType();\n@@ -1786,0 +1851,1 @@\n+            this.resultType = that.resultType;\n@@ -1794,1 +1860,1 @@\n-            super(NAME, expressionType, List.of());\n+            super(NAME, List.of());\n@@ -1797,0 +1863,2 @@\n+            \/\/ @@@ when expressionType is null, we assume truepart and falsepart have the same yieldType\n+            this.resultType = expressionType == null ? bodies.get(1).yieldType() : expressionType;\n@@ -1850,0 +1918,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1975,1 +2048,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -2287,0 +2360,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -2358,2 +2436,2 @@\n-            PatternOp(String name, TypeDesc returnType, List<Value> operands) {\n-                super(name, returnType, operands);\n+            PatternOp(String name, List<Value> operands) {\n+                super(name, operands);\n@@ -2372,0 +2450,1 @@\n+            final TypeDesc resultType;\n@@ -2387,0 +2466,1 @@\n+                this.resultType = def.resultType();\n@@ -2393,0 +2473,1 @@\n+                this.resultType = that.resultType;\n@@ -2401,1 +2482,1 @@\n-                super(NAME, Pattern.bindingType(targetType), List.of());\n+                super(NAME, List.of());\n@@ -2404,0 +2485,1 @@\n+                this.resultType = Pattern.bindingType(targetType);\n@@ -2420,0 +2502,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return resultType;\n+            }\n@@ -2464,1 +2551,1 @@\n-                super(NAME, Pattern.recordType(recordDescriptor.recordType()), List.copyOf(nestedPatterns));\n+                super(NAME, List.copyOf(nestedPatterns));\n@@ -2483,0 +2570,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return Pattern.recordType(recordDescriptor.recordType());\n+            }\n@@ -2515,1 +2607,1 @@\n-                super(NAME, BOOLEAN,\n+                super(NAME,\n@@ -2641,0 +2733,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return BOOLEAN;\n+            }\n@@ -2746,1 +2843,13 @@\n-     * @param type the result type of the expression\n+     *\n+     * @param target the switch target value\n+     * @param bodies the body builders of the operation to be built and become its children\n+     * @return the switch expression operation\n+     *\/\n+    public static JavaSwitchExpressionOp switchExpression(Value target, List<Body.Builder> bodies) {\n+        return new JavaSwitchExpressionOp(null, target, bodies);\n+    }\n+\n+    \/**\n+     * Creates a switch expression operation.\n+     *\n+     * @param resultType the result type of the expression\n@@ -2751,2 +2860,2 @@\n-    public static JavaSwitchExpressionOp switchExpression(TypeDesc type, Value target, List<Body.Builder> bodies) {\n-        return new JavaSwitchExpressionOp(type, target, bodies);\n+    public static JavaSwitchExpressionOp switchExpression(TypeDesc resultType, Value target, List<Body.Builder> bodies) {\n+        return new JavaSwitchExpressionOp(resultType, target, bodies);\n@@ -2925,0 +3034,1 @@\n+     * @param expressionType the result type of the expression\n@@ -2932,0 +3042,9 @@\n+    \/**\n+     * Creates a conditional operation\n+     * @param bodies the body builders of operation to be built and become its children\n+     * @return the conditional operation\n+     *\/\n+    public static JavaConditionalExpressionOp conditionalExpression(List<Body.Builder> bodies) {\n+        return new JavaConditionalExpressionOp(null, bodies);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":147,"deletions":28,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -58,3 +58,2 @@\n-     * @param name       the operation name.\n-     * @param resultType the operation result type.\n-     * @param operands   the list of operands, a copy of the list is performed if required.\n+     * @param name     the operation name.\n+     * @param operands the list of operands, a copy of the list is performed if required.\n@@ -62,2 +61,2 @@\n-    protected OpWithDefinition(String name, TypeDesc resultType, List<? extends Value> operands) {\n-        super(name, resultType, operands);\n+    protected OpWithDefinition(String name, List<? extends Value> operands) {\n+        super(name, operands);\n@@ -72,1 +71,1 @@\n-     * @implSpec This implementation invokes the {@link Op#Op(String, TypeDesc, List) constructor}\n+     * @implSpec This implementation invokes the {@link Op#Op(String, List) constructor}\n@@ -81,1 +80,1 @@\n-        super(def.name(), def.resultType(), def.operands());\n+        super(def.name(), def.operands());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpWithDefinition.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-            result = append(CoreOps.var(tree.name.toString(), typeToDesc(tree.type), initOp));\n+            result = append(CoreOps.var(tree.name.toString(), initOp));\n@@ -767,5 +767,5 @@\n-                    case PLUS_ASG -> append(CoreOps.add(resultType, lhs, rhs));\n-                    case MINUS_ASG -> append(CoreOps.sub(resultType, lhs, rhs));\n-                    case MUL_ASG -> append(CoreOps.mul(resultType, lhs, rhs));\n-                    case DIV_ASG -> append(CoreOps.div(resultType, lhs, rhs));\n-                    case MOD_ASG -> append(CoreOps.mod(resultType, lhs, rhs));\n+                    case PLUS_ASG -> append(CoreOps.add(lhs, rhs));\n+                    case MINUS_ASG -> append(CoreOps.sub(lhs, rhs));\n+                    case MUL_ASG -> append(CoreOps.mul(lhs, rhs));\n+                    case DIV_ASG -> append(CoreOps.div(lhs, rhs));\n+                    case MOD_ASG -> append(CoreOps.mod(lhs, rhs));\n@@ -1162,1 +1162,1 @@\n-                Op.Result op = variablesStack.block.op(CoreOps.var(jcVar.name.toString(), typeToDesc(jcVar.type), init));\n+                Op.Result op = variablesStack.block.op(CoreOps.var(jcVar.name.toString(), init));\n@@ -1466,1 +1466,1 @@\n-                        localResult = append(ExtendedOps.conditionalAnd(clBodies));\n+                        localResult = append(ExtendedOps.conditionalOr(clBodies));\n@@ -1770,1 +1770,0 @@\n-            Type trueType = condType(tree, truepart.type);\n@@ -1774,1 +1773,1 @@\n-                    MethodTypeDesc.methodType(typeToDesc(trueType)));\n+                    MethodTypeDesc.methodType(typeToDesc(condType)));\n@@ -1786,2 +1785,0 @@\n-            Type falseType = condType(tree, falsepart.type);\n-\n@@ -1790,1 +1787,1 @@\n-                    MethodTypeDesc.methodType(typeToDesc(falseType)));\n+                    MethodTypeDesc.methodType(typeToDesc(condType)));\n@@ -2027,5 +2024,5 @@\n-                    case PLUS -> append(CoreOps.add(resultType, lhs, rhs));\n-                    case MINUS -> append(CoreOps.sub(resultType, lhs, rhs));\n-                    case MUL -> append(CoreOps.mul(resultType, lhs, rhs));\n-                    case DIV -> append(CoreOps.div(resultType, lhs, rhs));\n-                    case MOD -> append(CoreOps.mod(resultType, lhs, rhs));\n+                    case PLUS -> append(CoreOps.add(lhs, rhs));\n+                    case MINUS -> append(CoreOps.sub(lhs, rhs));\n+                    case MUL -> append(CoreOps.mul(lhs, rhs));\n+                    case DIV -> append(CoreOps.div(lhs, rhs));\n+                    case MOD -> append(CoreOps.mod(lhs, rhs));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                    Op.Result v = fblock.op(var(INT, fblock.op(constant(INT, 0))));\n+                    Op.Result v = fblock.op(var(fblock.op(constant(INT, 0))));\n@@ -161,1 +161,1 @@\n-                    Op.Result v = fblock.op(var(INT, fblock.op(constant(INT, 0))));\n+                    Op.Result v = fblock.op(var(fblock.op(constant(INT, 0))));\n@@ -221,1 +221,1 @@\n-        CoreOps.FuncOp f = func(\"f\", methodType(int[].class, int.class))\n+        CoreOps.FuncOp f = func(\"f\", methodType(void.class, int[].class))\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.code.Op;\n+import java.lang.runtime.CodeReflection;\n+import java.util.Arrays;\n+\n+import static java.lang.reflect.code.descriptor.MethodTypeDesc.methodType;\n+import static java.lang.reflect.code.descriptor.TypeDesc.DOUBLE;\n+import static java.lang.reflect.code.op.CoreOps.*;\n+\n+\/*\n+ * @test\n+ * @run testng TestOpResultTypeNotCopiedBlindly\n+ *\/\n+\n+public class TestOpResultTypeNotCopiedBlindly {\n+\n+    @CodeReflection\n+    static int f(int a, int b) {\n+        return a + b;\n+    }\n+\n+    @Test\n+    void test() {\n+        FuncOp f = getCodeModel(this.getClass(), \"f\");\n+\n+        FuncOp g = func(\"g\", methodType(DOUBLE, DOUBLE, DOUBLE))\n+                .body(b -> b.inline(f, b.parameters(), (block, v) -> {\n+                    block.op(_return(v));\n+                }));\n+\n+        g.writeTo(System.out);\n+\n+        \/\/ check that add has a result-type of double\n+        Assert.assertEquals(\n+                ((Op.Result) g.body().entryBlock().terminatingOp().operands().get(0)).op().result().type(),\n+                DOUBLE\n+        );\n+    }\n+\n+    private static FuncOp getCodeModel(Class<?> c, String methodName) {\n+        return Arrays.stream(c.getDeclaredMethods()).filter(m -> m.getName().equals(methodName))\n+                .findFirst().get().getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestOpResultTypeNotCopiedBlindly.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -192,1 +192,1 @@\n-                    ^truepart()java.lang.Integer -> {\n+                    ^truepart()int -> {\n@@ -223,1 +223,1 @@\n-                    ^falsepart()java.lang.Integer -> {\n+                    ^falsepart()int -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/BoxingConversionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                    ^truepart()int -> {\n+                    ^truepart()double -> {\n@@ -148,1 +148,1 @@\n-                            ^truepart()int -> {\n+                            ^truepart()double -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConditionalExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    ^falsepart()int -> {\n+                    ^falsepart()long -> {\n@@ -125,1 +125,1 @@\n-                   ^truepart()int -> {\n+                   ^truepart()long -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                        %5 : boolean = java.cand\n+                        %5 : boolean = java.cor\n@@ -198,1 +198,1 @@\n-                        %5 : boolean = java.cand\n+                        %5 : boolean = java.cor\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}