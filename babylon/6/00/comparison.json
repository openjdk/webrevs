{"files":[{"patch":"@@ -142,1 +142,1 @@\n-            super(block, op.descriptor().returnType());\n+            super(block, op.resultType()); \/\/ we can call resultType\n@@ -174,2 +174,0 @@\n-    final TypeDesc resultType;\n-\n@@ -185,1 +183,1 @@\n-        this(that.name, that.resultType, cc.getValues(that.operands));\n+        this(that.name, cc.getValues(that.operands));\n@@ -226,1 +224,1 @@\n-     * Constructs an operation with a name, operation result type, and list of operands.\n+     * Constructs an operation with a name and list of operands.\n@@ -229,1 +227,0 @@\n-     * @param resultType the operation result type.\n@@ -232,1 +229,1 @@\n-    protected Op(String name, TypeDesc resultType, List<? extends Value> operands) {\n+    protected Op(String name, List<? extends Value> operands) {\n@@ -234,1 +231,0 @@\n-        this.resultType = resultType;\n@@ -322,3 +318,1 @@\n-    public TypeDesc resultType() {\n-        return resultType;\n-    }\n+    public abstract TypeDesc resultType();\n@@ -336,1 +330,1 @@\n-        return MethodTypeDesc.methodType(resultType, operandTypes);\n+        return MethodTypeDesc.methodType(resultType(), operandTypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            super(name, TypeDesc.VOID, List.of());\n+            super(name, List.of());\n@@ -142,0 +142,7 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            \/\/ I chose VOID, because bytecode instructions manipulate the stack\n+            \/\/ plus the type of what an operation will push\/pop mayn not be known, e.g. pop instruction\n+            return TypeDesc.VOID;\n+        }\n@@ -2280,0 +2287,2 @@\n+        private final TypeDesc resultType;\n+\n@@ -2282,0 +2291,1 @@\n+            this.resultType = that.resultType;\n@@ -2285,1 +2295,2 @@\n-            super(name, resultType, operands);\n+            super(name, operands);\n+            this.resultType = resultType;\n@@ -2299,0 +2310,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeInstructionOps.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -180,0 +180,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return body().descriptor().returnType();\n+        }\n@@ -193,0 +198,1 @@\n+        final TypeDesc resultType;\n@@ -208,0 +214,1 @@\n+            this.resultType = def.resultType();\n@@ -214,0 +221,1 @@\n+            this.resultType = that.resultType;\n@@ -222,1 +230,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -225,0 +233,1 @@\n+            this.resultType = resultType;\n@@ -237,0 +246,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -295,1 +309,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -317,0 +331,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -361,1 +380,1 @@\n-            super(NAME, QUOTED_TYPE,\n+            super(NAME,\n@@ -421,0 +440,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return QUOTED_TYPE;\n+        }\n@@ -472,1 +496,1 @@\n-            super(NAME, functionalInterface,\n+            super(NAME,\n@@ -540,0 +564,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return functionalInterface();\n+        }\n@@ -609,1 +638,1 @@\n-            super(NAME, closureType(bodyC.descriptor()),\n+            super(NAME,\n@@ -679,0 +708,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return closureType(body().descriptor());\n+        }\n@@ -705,1 +739,1 @@\n-            super(NAME, resultType(args), args);\n+            super(NAME, args);\n@@ -724,0 +758,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType(operands());\n+        }\n@@ -753,1 +792,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -757,1 +796,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -769,0 +808,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -796,1 +840,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -803,0 +847,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -832,1 +881,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -835,0 +884,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -865,1 +919,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -870,1 +924,1 @@\n-            super(NAME, TypeDesc.VOID, operands);\n+            super(NAME, operands);\n@@ -881,0 +935,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -916,1 +975,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -930,0 +989,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -970,1 +1034,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -993,0 +1057,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -1005,0 +1074,1 @@\n+        final TypeDesc type;\n@@ -1080,0 +1150,1 @@\n+            this.type = def.resultType();\n@@ -1086,0 +1157,1 @@\n+            this.type = that.type;\n@@ -1095,1 +1167,1 @@\n-            super(NAME, type, List.of());\n+            super(NAME, List.of());\n@@ -1097,0 +1169,1 @@\n+            this.type = type;\n@@ -1110,0 +1183,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return type;\n+        }\n@@ -1132,0 +1210,1 @@\n+        final TypeDesc resultType;\n@@ -1148,0 +1227,1 @@\n+            this.resultType = def.resultType();\n@@ -1154,0 +1234,1 @@\n+            this.resultType = that.resultType;\n@@ -1166,1 +1247,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -1169,0 +1250,1 @@\n+            this.resultType = resultType;\n@@ -1185,0 +1267,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1195,0 +1282,2 @@\n+        final TypeDesc resultType;\n+\n@@ -1197,0 +1286,2 @@\n+\n+            this.resultType = def.resultType();\n@@ -1201,0 +1292,2 @@\n+\n+            this.resultType = that.resultType;\n@@ -1209,1 +1302,8 @@\n-            super(NAME, resultType, List.of(arg));\n+            super(NAME, List.of(arg));\n+\n+            this.resultType = resultType;\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n@@ -1222,0 +1322,1 @@\n+        final TypeDesc resultType;\n@@ -1237,0 +1338,1 @@\n+            this.resultType = def.resultType();\n@@ -1243,0 +1345,1 @@\n+            this.resultType = that.resultType;\n@@ -1255,1 +1358,1 @@\n-            super(NAME, resultType, args);\n+            super(NAME, args);\n@@ -1258,0 +1361,1 @@\n+            this.resultType = resultType;\n@@ -1274,0 +1378,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1302,1 +1411,1 @@\n-        FieldAccessOp(String name, TypeDesc resultType, List<Value> operands,\n+        FieldAccessOp(String name, List<Value> operands,\n@@ -1304,1 +1413,1 @@\n-            super(name, resultType, operands);\n+            super(name, operands);\n@@ -1357,1 +1466,1 @@\n-                super(NAME, descriptor.type(),\n+                super(NAME,\n@@ -1363,1 +1472,1 @@\n-                super(NAME, descriptor.type(),\n+                super(NAME,\n@@ -1366,0 +1475,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return fieldDescriptor().type();\n+            }\n@@ -1405,1 +1519,1 @@\n-                super(NAME, TypeDesc.VOID,\n+                super(NAME,\n@@ -1411,1 +1525,1 @@\n-                super(NAME, TypeDesc.VOID,\n+                super(NAME,\n@@ -1414,0 +1528,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return TypeDesc.VOID;\n+            }\n@@ -1439,1 +1558,6 @@\n-            super(NAME, TypeDesc.INT, List.of(array));\n+            super(NAME, List.of(array));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.INT;\n@@ -1460,1 +1584,1 @@\n-            super(that.opName(), resultType(operands.get(0), operands.size() == 2 ? null : operands.get(2)), operands);\n+            super(that.opName(), operands);\n@@ -1465,1 +1589,1 @@\n-            super(name, resultType(array, v), operands(array, index, v));\n+            super(name, operands(array, index, v));\n@@ -1513,0 +1637,6 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                Value array = operands().get(0);\n+                return resultType(array, null);\n+            }\n@@ -1539,0 +1669,7 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                Value array = operands().get(0);\n+                Value value = operands().get(2);\n+                return resultType(array, value);\n+            }\n@@ -1585,1 +1722,1 @@\n-            super(NAME, TypeDesc.BOOLEAN,\n+            super(NAME,\n@@ -1601,0 +1738,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.BOOLEAN;\n+        }\n@@ -1644,2 +1786,2 @@\n-        CastOp(TypeDesc resultType, TypeDesc t, Value v) {\n-            super(NAME, resultType,\n+        CastOp(TypeDesc t, Value v) {\n+            super(NAME,\n@@ -1661,0 +1803,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return type();\n+        }\n@@ -1745,1 +1892,1 @@\n-            super(NAME, Var.type(type), List.of(init));\n+            super(NAME, List.of(init));\n@@ -1768,0 +1915,6 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            TypeDesc valueType = operands().get(0).type();\n+            return Var.type(valueType);\n+        }\n@@ -1779,2 +1932,2 @@\n-        VarAccessOp(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        VarAccessOp(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -1819,1 +1972,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue.get(0))), varValue);\n+                super(NAME, varValue);\n@@ -1829,1 +1982,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue)), List.of(varValue));\n+                super(NAME, List.of(varValue));\n@@ -1847,0 +2000,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return getresultType(operands().get(0));\n+            }\n@@ -1870,1 +2028,1 @@\n-                super(NAME, getresultType(checkIsVarOp(values.get(0))),\n+                super(NAME,\n@@ -1881,1 +2039,1 @@\n-                super(NAME, getresultType(checkIsVarOp(varValue)),\n+                super(NAME,\n@@ -1900,0 +2058,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return getresultType(operands().get(0));\n+            }\n@@ -1956,1 +2119,6 @@\n-            super(NAME, Tuple.typeFromValues(componentValues), componentValues);\n+            super(NAME, componentValues);\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return Tuple.typeFromValues(operands());\n@@ -1996,1 +2164,1 @@\n-            super(NAME, getresultType(values.get(0), that.index), values);\n+            super(NAME, values);\n@@ -2007,1 +2175,1 @@\n-            super(NAME, getresultType(tupleValue, index), List.of(tupleValue));\n+            super(NAME, List.of(tupleValue));\n@@ -2044,0 +2212,6 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            Value tupleValue = operands().get(0);\n+            return getresultType(tupleValue, index);\n+        }\n@@ -2082,1 +2256,1 @@\n-            super(NAME, getresultType(values.get(0), that.index, values.get(1)), values);\n+            super(NAME, values);\n@@ -2093,1 +2267,1 @@\n-            super(NAME, getresultType(tupleValue, index, value), List.of(tupleValue, value));\n+            super(NAME, List.of(tupleValue, value));\n@@ -2131,0 +2305,7 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            Value tupleValue = operands().get(0);\n+            Value value = operands().get(2);\n+            return getresultType(tupleValue, index, value);\n+        }\n@@ -2181,1 +2362,1 @@\n-            super(NAME, ExceptionRegion.EXCEPTION_REGION_TYPE, List.of());\n+            super(NAME, List.of());\n@@ -2202,0 +2383,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return ExceptionRegion.EXCEPTION_REGION_TYPE;\n+        }\n@@ -2239,1 +2425,1 @@\n-            super(NAME, TypeDesc.VOID, checkValue(exceptionRegion));\n+            super(NAME, checkValue(exceptionRegion));\n@@ -2270,0 +2456,4 @@\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -2291,2 +2481,2 @@\n-        protected ArithmeticOperation(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        protected ArithmeticOperation(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -2312,2 +2502,2 @@\n-        protected TestOperation(String name, TypeDesc resultType, List<Value> operands) {\n-            super(name, resultType, operands);\n+        protected TestOperation(String name, List<Value> operands) {\n+            super(name, operands);\n@@ -2334,1 +2524,6 @@\n-            super(name, resultType, List.of(lhs, rhs));\n+            super(name, List.of(lhs, rhs));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return operands().get(0).type();\n@@ -2354,2 +2549,2 @@\n-        protected UnaryOp(String name, TypeDesc resultType, Value v) {\n-            super(name, resultType, List.of(v));\n+        protected UnaryOp(String name, Value v) {\n+            super(name, List.of(v));\n@@ -2376,1 +2571,1 @@\n-            super(name, TypeDesc.BOOLEAN, List.of(v));\n+            super(name, List.of(v));\n@@ -2397,1 +2592,6 @@\n-            super(name, TypeDesc.BOOLEAN, List.of(lhs, rhs));\n+            super(name, List.of(lhs, rhs));\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.BOOLEAN;\n@@ -2547,1 +2747,6 @@\n-            super(NAME, resultType, v);\n+            super(NAME, v);\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return operands().get(0).type();\n@@ -2571,2 +2776,7 @@\n-        NotOp(TypeDesc resultType, Value v) {\n-            super(NAME, resultType, v);\n+        NotOp(Value v) {\n+            super(NAME, v);\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.BOOLEAN;\n@@ -3232,1 +3442,1 @@\n-        return new CastOp(t, t, v);\n+        return new CastOp(t, v);\n@@ -3244,1 +3454,1 @@\n-        return new CastOp(resultType, t, v);\n+        return new CastOp(t, v);\n@@ -3502,12 +3712,1 @@\n-        return not(v.type(), v);\n-    }\n-\n-    \/**\n-     * Creates a not operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param v the operand\n-     * @return the not operation\n-     *\/\n-    public static UnaryOp not(TypeDesc resultType, Value v) {\n-        return new NotOp(resultType, v);\n+        return new NotOp(v);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":270,"deletions":71,"binary":false,"changes":341,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-            super(name, TypeDesc.VOID, checkLabel(label));\n+            super(name, checkLabel(label));\n@@ -163,0 +163,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return TypeDesc.VOID;\n+        }\n@@ -268,1 +273,1 @@\n-            super(NAME, TypeDesc.VOID,\n+            super(NAME,\n@@ -273,1 +278,1 @@\n-            super(NAME, TypeDesc.VOID, List.of(operand));\n+            super(NAME, List.of(operand));\n@@ -284,0 +289,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -320,1 +330,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -361,0 +371,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -395,1 +410,1 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n@@ -447,0 +462,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -567,1 +587,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -667,0 +687,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -676,0 +701,1 @@\n+        final TypeDesc type;\n@@ -688,0 +714,1 @@\n+            this.type = def.resultType();\n@@ -696,0 +723,1 @@\n+            this.type = that.type;\n@@ -704,1 +732,1 @@\n-            super(NAME, type, List.of(target));\n+            super(NAME, List.of(target));\n@@ -712,2 +740,3 @@\n-\n-            \/\/\n+            \/\/ I kept this for now to not affect code in ReflectMethods,\n+            \/\/ but I think resultType can be computed using: bodies.get(1).yieldType();\n+            this.type = type;\n@@ -725,0 +754,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return type;\n+        }\n@@ -749,1 +783,6 @@\n-            super(NAME, TypeDesc.VOID, List.of());\n+            super(NAME, List.of());\n+        }\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n@@ -889,1 +928,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1005,0 +1044,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1114,1 +1158,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1260,0 +1304,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1312,1 +1361,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1318,1 +1367,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1399,0 +1448,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1452,1 +1506,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1458,1 +1512,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -1538,0 +1592,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -1566,1 +1625,1 @@\n-            super(name, BOOLEAN, List.of());\n+            super(name, List.of());\n@@ -1645,0 +1704,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return BOOLEAN;\n+        }\n@@ -1765,0 +1829,1 @@\n+        final TypeDesc resultType;\n@@ -1778,0 +1843,1 @@\n+            this.resultType = def.resultType();\n@@ -1786,0 +1852,1 @@\n+            this.resultType = that.resultType;\n@@ -1794,1 +1861,1 @@\n-            super(NAME, expressionType, List.of());\n+            super(NAME, List.of());\n@@ -1797,0 +1864,3 @@\n+            \/\/ I kept this, to not affect code in ReflectMethods\n+            \/\/ I think it can be removed and resultType can be computed using: bodies().get(1).yieldType()\n+            this.resultType = expressionType;\n@@ -1850,0 +1920,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return resultType;\n+        }\n@@ -1975,1 +2050,1 @@\n-            super(NAME, VOID, List.of());\n+            super(NAME, List.of());\n@@ -2287,0 +2362,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return VOID;\n+        }\n@@ -2358,2 +2438,2 @@\n-            PatternOp(String name, TypeDesc returnType, List<Value> operands) {\n-                super(name, returnType, operands);\n+            PatternOp(String name, List<Value> operands) {\n+                super(name, operands);\n@@ -2372,0 +2452,1 @@\n+            final TypeDesc resultType;\n@@ -2387,0 +2468,1 @@\n+                this.resultType = def.resultType();\n@@ -2393,0 +2475,1 @@\n+                this.resultType = that.resultType;\n@@ -2401,1 +2484,1 @@\n-                super(NAME, Pattern.bindingType(targetType), List.of());\n+                super(NAME, List.of());\n@@ -2404,0 +2487,1 @@\n+                this.resultType = Pattern.bindingType(targetType);\n@@ -2420,0 +2504,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return resultType;\n+            }\n@@ -2464,1 +2553,1 @@\n-                super(NAME, Pattern.recordType(recordDescriptor.recordType()), List.copyOf(nestedPatterns));\n+                super(NAME, List.copyOf(nestedPatterns));\n@@ -2483,0 +2572,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return Pattern.recordType(recordDescriptor.recordType());\n+            }\n@@ -2515,1 +2609,1 @@\n-                super(NAME, BOOLEAN,\n+                super(NAME,\n@@ -2641,0 +2735,5 @@\n+\n+            @Override\n+            public TypeDesc resultType() {\n+                return BOOLEAN;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":123,"deletions":24,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -58,3 +58,2 @@\n-     * @param name       the operation name.\n-     * @param resultType the operation result type.\n-     * @param operands   the list of operands, a copy of the list is performed if required.\n+     * @param name     the operation name.\n+     * @param operands the list of operands, a copy of the list is performed if required.\n@@ -62,2 +61,2 @@\n-    protected OpWithDefinition(String name, TypeDesc resultType, List<? extends Value> operands) {\n-        super(name, resultType, operands);\n+    protected OpWithDefinition(String name, List<? extends Value> operands) {\n+        super(name, operands);\n@@ -72,1 +71,1 @@\n-     * @implSpec This implementation invokes the {@link Op#Op(String, TypeDesc, List) constructor}\n+     * @implSpec This implementation invokes the {@link Op#Op(String, List) constructor}\n@@ -81,1 +80,1 @@\n-        super(def.name(), def.resultType(), def.operands());\n+        super(def.name(), def.operands());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpWithDefinition.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1466,1 +1466,1 @@\n-                        localResult = append(ExtendedOps.conditionalAnd(clBodies));\n+                        localResult = append(ExtendedOps.conditionalOr(clBodies));\n@@ -1770,1 +1770,0 @@\n-            Type trueType = condType(tree, truepart.type);\n@@ -1774,1 +1773,1 @@\n-                    MethodTypeDesc.methodType(typeToDesc(trueType)));\n+                    MethodTypeDesc.methodType(typeToDesc(condType)));\n@@ -1786,2 +1785,0 @@\n-            Type falseType = condType(tree, falsepart.type);\n-\n@@ -1790,1 +1787,1 @@\n-                    MethodTypeDesc.methodType(typeToDesc(falseType)));\n+                    MethodTypeDesc.methodType(typeToDesc(condType)));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-        CoreOps.FuncOp f = func(\"f\", methodType(int[].class, int.class))\n+        CoreOps.FuncOp f = func(\"f\", methodType(void.class, int[].class))\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-                    ^truepart()java.lang.Integer -> {\n+                    ^truepart()int -> {\n@@ -223,1 +223,1 @@\n-                    ^falsepart()java.lang.Integer -> {\n+                    ^falsepart()int -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/BoxingConversionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                    ^truepart()int -> {\n+                    ^truepart()double -> {\n@@ -148,1 +148,1 @@\n-                            ^truepart()int -> {\n+                            ^truepart()double -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConditionalExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                    ^falsepart()int -> {\n+                    ^falsepart()long -> {\n@@ -125,1 +125,1 @@\n-                   ^truepart()int -> {\n+                   ^truepart()long -> {\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-                        %5 : boolean = java.cand\n+                        %5 : boolean = java.cor\n@@ -198,1 +198,1 @@\n-                        %5 : boolean = java.cand\n+                        %5 : boolean = java.cor\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}