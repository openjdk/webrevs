{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -183,1 +182,1 @@\n-            return body().descriptor().returnType();\n+            return body().yieldType();\n@@ -1753,1 +1752,1 @@\n-        final TypeDesc typeDescriptor;\n+        final TypeDesc type;\n@@ -1760,1 +1759,1 @@\n-            TypeDesc typeDescriptor = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n+            TypeDesc type = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n@@ -1766,1 +1765,1 @@\n-            return new CastOp(def, typeDescriptor);\n+            return new CastOp(def, type);\n@@ -1769,1 +1768,1 @@\n-        CastOp(OpDefinition def, TypeDesc typeDescriptor) {\n+        CastOp(OpDefinition def, TypeDesc type) {\n@@ -1772,1 +1771,1 @@\n-            this.typeDescriptor = typeDescriptor;\n+            this.type = type;\n@@ -1778,1 +1777,1 @@\n-            this.typeDescriptor = that.typeDescriptor;\n+            this.type = that.type;\n@@ -1787,2 +1786,1 @@\n-            super(NAME,\n-                    List.of(v));\n+            super(NAME, List.of(v));\n@@ -1790,1 +1788,1 @@\n-            this.typeDescriptor = t;\n+            this.type = t;\n@@ -1796,1 +1794,1 @@\n-            m.put(\"\", typeDescriptor);\n+            m.put(\"\", type);\n@@ -1801,1 +1799,1 @@\n-            return typeDescriptor;\n+            return type;\n@@ -1891,1 +1889,1 @@\n-        VarOp(String varName, TypeDesc type, Value init) {\n+        VarOp(String varName, Value init) {\n@@ -2523,1 +2521,1 @@\n-        protected BinaryOp(String name, TypeDesc resultType, Value lhs, Value rhs) {\n+        protected BinaryOp(String name, Value lhs, Value rhs) {\n@@ -2552,0 +2550,5 @@\n+\n+        @Override\n+        public TypeDesc resultType() {\n+            return operands().get(0).type();\n+        }\n@@ -2621,2 +2624,2 @@\n-        AddOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        AddOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2646,2 +2649,2 @@\n-        SubOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        SubOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2671,2 +2674,2 @@\n-        MulOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        MulOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2696,2 +2699,2 @@\n-        DivOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        DivOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2721,2 +2724,2 @@\n-        ModOp(TypeDesc resultType, Value lhs, Value rhs) {\n-            super(NAME, resultType, lhs, rhs);\n+        ModOp(Value lhs, Value rhs) {\n+            super(NAME, lhs, rhs);\n@@ -2749,5 +2752,0 @@\n-\n-        @Override\n-        public TypeDesc resultType() {\n-            return operands().get(0).type();\n-        }\n@@ -2779,5 +2777,0 @@\n-\n-        @Override\n-        public TypeDesc resultType() {\n-            return TypeDesc.BOOLEAN;\n-        }\n@@ -3445,12 +3438,0 @@\n-    \/**\n-     * Creates a cast operation.\n-     *\n-     * @param resultType the result type of the operation\n-     * @param t the type descriptor of the type to cast to\n-     * @param v the value to cast\n-     * @return the cast operation\n-     *\/\n-    public static CastOp cast(TypeDesc resultType, TypeDesc t, Value v) {\n-        return new CastOp(t, v);\n-    }\n-\n@@ -3464,12 +3445,1 @@\n-        return var(null, init.type(), init);\n-    }\n-\n-    \/**\n-     * Creates a var operation.\n-     *\n-     * @param type the type of the var's value\n-     * @param init the initial value of the var\n-     * @return the var operation\n-     *\/\n-    public static VarOp var(TypeDesc type, Value init) {\n-        return var(null, type, init);\n+        return var(null, init);\n@@ -3486,13 +3456,1 @@\n-        return var(name, init.type(), init);\n-    }\n-\n-    \/**\n-     * Creates a var operation.\n-     *\n-     * @param name the name of the var\n-     * @param type the type of the var's value\n-     * @param init the initial value of the var\n-     * @return the var operation\n-     *\/\n-    public static VarOp var(String name, TypeDesc type, Value init) {\n-        return new VarOp(name, type, init);\n+        return new VarOp(name, init);\n@@ -3576,13 +3534,1 @@\n-        return add(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates an add operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the add operation\n-     *\/\n-    public static BinaryOp add(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new AddOp(resultType, lhs, rhs);\n+        return new AddOp(lhs, rhs);\n@@ -3599,13 +3545,1 @@\n-        return sub(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a sub operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the sub operation\n-     *\/\n-    public static BinaryOp sub(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new SubOp(resultType, lhs, rhs);\n+        return new SubOp(lhs, rhs);\n@@ -3622,13 +3556,1 @@\n-        return mul(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a mul operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the mul operation\n-     *\/\n-    public static BinaryOp mul(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new MulOp(resultType, lhs, rhs);\n+        return new MulOp(lhs, rhs);\n@@ -3645,13 +3567,1 @@\n-        return div(lhs.type(), lhs, rhs);\n-    }\n-\n-    \/**\n-     * Creates a div operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the div operation\n-     *\/\n-    public static BinaryOp div(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new DivOp(resultType, lhs, rhs);\n+        return new DivOp(lhs, rhs);\n@@ -3668,1 +3578,1 @@\n-        return mod(lhs.type(), lhs, rhs);\n+        return new ModOp(lhs, rhs);\n@@ -3671,13 +3581,0 @@\n-    \/**\n-     * Creates a mod operation.\n-     *\n-     * @param resultType the operation's result type\n-     * @param lhs the first operand\n-     * @param rhs the second operand\n-     * @return the mod operation\n-     *\/\n-    public static BinaryOp mod(TypeDesc resultType, Value lhs, Value rhs) {\n-        return new ModOp(resultType, lhs, rhs);\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":35,"deletions":138,"binary":false,"changes":173,"status":"modified"}]}