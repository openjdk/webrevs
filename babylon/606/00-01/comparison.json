{"files":[{"patch":"@@ -39,2 +39,1 @@\n-    int PADDING_BYTES = 12;\n-    int HEADER_BYTES = 4 + PADDING_BYTES;\n+    int HEADER_BYTES = 4;\n@@ -43,1 +42,1 @@\n-            s32Array.arrayLen(\"length\").pad(12).array(\"array\"));\n+            s32Array.arrayLen(\"length\").array(\"array\"));\n@@ -69,10 +68,0 @@\n-    \/\/ This is an intrinsic for HAT to create views. It does not execute code\n-    \/\/ on the host side, at least for now.\n-    default Float4 float4View(int index) {\n-        return null;\n-    }\n-\n-    default void storeFloat4View(Float4 v, int index) {\n-        MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_FLOAT, 0,  v.toArray(), 4 + index, 4);\n-    }\n-\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/F32Array.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package hat.buffer;\n+\n+import hat.Accelerator;\n+import hat.ifacemapper.Schema;\n+\n+import java.lang.foreign.MemorySegment;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n+\n+public interface F32ArrayPadded extends Buffer {\n+    int length();\n+    float array(long idx);\n+    void array(long idx, float f);\n+\n+    int PADDING_BYTES = 12;\n+    int HEADER_BYTES = 4 + PADDING_BYTES;\n+\n+    Schema<F32ArrayPadded> schema = Schema.of(F32ArrayPadded.class, s32Array ->\n+            s32Array.arrayLen(\"length\").pad(12).array(\"array\"));\n+\n+    static F32ArrayPadded create(Accelerator accelerator, int length){\n+        return schema.allocate(accelerator, length);\n+    }\n+\n+    default F32ArrayPadded copyFrom(float[] floats) {\n+        MemorySegment.copy(floats, 0, Buffer.getMemorySegment(this), JAVA_FLOAT, HEADER_BYTES, length());\n+        return this;\n+    }\n+\n+    static F32ArrayPadded createFrom(Accelerator accelerator, float[] arr){\n+        return create( accelerator, arr.length).copyFrom(arr);\n+    }\n+\n+    default F32ArrayPadded copyTo(float[] floats) {\n+        MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_FLOAT, HEADER_BYTES, floats, 0, length());\n+        return this;\n+    }\n+\n+    default float[] arrayView() {\n+        float[] arr = new float[this.length()];\n+        this.copyTo(arr);\n+        return arr;\n+    }\n+\n+    \/\/ This is an intrinsic for HAT to create views. It does not execute code\n+    \/\/ on the host side, at least for now.\n+    default Float4 float4View(int index) {\n+        return null;\n+    }\n+\n+    \/\/ This is an intrinsic for HAT to store views. It does not execute code\n+    default void storeFloat4View(Float4 v, int index) {}\n+\n+}\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/F32ArrayPadded.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -44,2 +44,1 @@\n-    int PADDING_BYTES = 12;\n-    int HEADER_BYTES = 4 + PADDING_BYTES;\n+    int HEADER_BYTES = 4;\n@@ -48,1 +47,1 @@\n-            .arrayLen(\"length\").pad(12).array(\"array\"));\n+            .arrayLen(\"length\").array(\"array\"));\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/S32Array.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import hat.buffer.F32ArrayPadded;\n@@ -362,1 +363,1 @@\n-    public static void matrixMultiplyKernel2DRegisterTilingVectorized(@RO KernelContext kc, @RO F32Array matrixA, @RO F32Array matrixB, @RW F32Array matrixC, int size) {\n+    public static void matrixMultiplyKernel2DRegisterTilingVectorized(@RO KernelContext kc, @RO F32ArrayPadded matrixA, @RO F32ArrayPadded matrixB, @RW F32ArrayPadded matrixC, int size) {\n@@ -556,1 +557,1 @@\n-    public static void matrixMultiply2DRegisterTilingVectorizedAccesses(@RO ComputeContext cc, @RO F32Array matrixA, @RO F32Array matrixB, @RW  F32Array matrixC, int globalSize) {\n+    public static void matrixMultiply2DRegisterTilingVectorizedAccesses(@RO ComputeContext cc, @RO F32ArrayPadded matrixA, @RO F32ArrayPadded matrixB, @RW  F32ArrayPadded matrixC, int globalSize) {\n@@ -577,0 +578,14 @@\n+    private static void runSequential(F32ArrayPadded matrixA, F32ArrayPadded matrixB, F32Array matrixC, final int size) {\n+        for (int i = 0; i < size; i++) {\n+            for (int j = 0; j < size; j++) {\n+                float sum = 0;\n+                for (int k = 0; k < size; k++) {\n+                    float a = matrixA.array((long) i * size + k);\n+                    float b = matrixB.array((long) k * size + j);\n+                    sum += a * b;\n+                }\n+                matrixC.array((long) i * size + j, sum);\n+            }\n+        }\n+    }\n+\n@@ -618,1 +633,1 @@\n-        var lookup = java.lang.invoke.MethodHandles.lookup();\n+        var lookup = MethodHandles.lookup();\n@@ -623,8 +638,6 @@\n-        var matrixA = F32Array.create(accelerator, size * size);\n-        var matrixB = F32Array.create(accelerator, size * size);\n-\n-        \/\/ Matrix for the results\n-        var matrixC = F32Array.create(accelerator, size * size);\n-        var resultSeq = F32Array.create(accelerator, size * size);\n-\n-        \/\/ Initialize matrices (A and B have the same size)\n+        F32Array matrixA;\n+        F32Array matrixB;\n+        F32Array matrixC;\n+        F32ArrayPadded matrixAPad;\n+        F32ArrayPadded matrixBPad;\n+        F32ArrayPadded matrixCPad;\n@@ -632,4 +645,22 @@\n-\n-        for (int j = 0; j < matrixA.length(); j++) {\n-            matrixA.array(j, r.nextFloat());\n-            matrixB.array(j, r.nextFloat());\n+        if (configuration == Configuration._2DREGISTER_TILING_VECTORIZED) {\n+            matrixC = null;\n+            matrixB = null;\n+            matrixA = null;\n+            matrixAPad = F32ArrayPadded.create(accelerator, size * size);\n+            matrixBPad = F32ArrayPadded.create(accelerator, size * size);\n+            matrixCPad = F32ArrayPadded.create(accelerator, size * size);\n+            for (int j = 0; j < matrixAPad.length(); j++) {\n+                matrixAPad.array(j, r.nextFloat());\n+                matrixBPad.array(j, r.nextFloat());\n+            }\n+        } else {\n+            matrixCPad = null;\n+            matrixBPad = null;\n+            matrixAPad = null;\n+            matrixA = F32Array.create(accelerator, size * size);\n+            matrixB = F32Array.create(accelerator, size * size);\n+            matrixC = F32Array.create(accelerator, size * size);\n+            for (int j = 0; j < matrixA.length(); j++) {\n+                matrixA.array(j, r.nextFloat());\n+                matrixB.array(j, r.nextFloat());\n+            }\n@@ -638,0 +669,3 @@\n+\n+        var resultSeq = F32Array.create(accelerator, size * size);\n+\n@@ -639,1 +673,5 @@\n-        runSequential(matrixA, matrixB, resultSeq, size);\n+        if (configuration == Configuration._2DREGISTER_TILING_VECTORIZED) {\n+            runSequential(matrixAPad, matrixBPad, resultSeq, size);\n+        } else {\n+            runSequential(matrixA, matrixB, resultSeq, size);\n+        }\n@@ -658,1 +696,1 @@\n-                            matrixMultiply2DRegisterTilingVectorizedAccesses(cc, matrixA, matrixB, matrixC, size));\n+                            matrixMultiply2DRegisterTilingVectorizedAccesses(cc, matrixAPad, matrixBPad, matrixCPad, size));\n@@ -671,2 +709,4 @@\n-                        if (Math.abs(resultSeq.array(i * size + j) - matrixC.array(i * size + j)) > 0.01f) {\n-                            IO.println(resultSeq.array(i * size + j) + \" != \" + matrixC.array(i * size + j));\n+                        float expectedValue = resultSeq.array(i * size + j);\n+                        float gotValue = configuration == Configuration._2DREGISTER_TILING_VECTORIZED? matrixCPad.array(i * size + j) : matrixC.array(i * size + j);\n+                        if (Math.abs(expectedValue - gotValue) > 0.01f) {\n+                            IO.println(expectedValue + \" != \" + gotValue);\n","filename":"hat\/examples\/matmul\/src\/main\/java\/matmul\/Main.java","additions":59,"deletions":19,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import hat.buffer.F32ArrayPadded;\n@@ -230,0 +231,15 @@\n+    private static void runSequential(F32ArrayPadded matrixA, F32ArrayPadded matrixB, F32ArrayPadded matrixC, final int size) {\n+        for (int i = 0; i < size; i++) {\n+            for (int j = 0; j < size; j++) {\n+                float sum = 0;\n+                for (int k = 0; k < size; k++) {\n+                    float a = matrixA.array((long) i * size + k);\n+                    float b = matrixB.array((long) k * size + j);\n+                    sum += a * b;\n+                }\n+                matrixC.array((long) i * size + j, sum);\n+            }\n+        }\n+    }\n+\n+\n@@ -548,1 +564,1 @@\n-    public static void matrixMultiplyKernel2DRegisterTilingVectorized(@RO KernelContext kc, @RO F32Array matrixA, @RO F32Array matrixB, @RW F32Array matrixC, int size) {\n+    public static void matrixMultiplyKernel2DRegisterTilingVectorized(@RO KernelContext kc, @RO F32ArrayPadded matrixA, @RO F32ArrayPadded matrixB, @RW F32ArrayPadded matrixC, int size) {\n@@ -656,1 +672,1 @@\n-    public static void matrixMultiply2DRegisterTilingVectorized(@RO ComputeContext cc, @RO F32Array matrixA, @RO F32Array matrixB, @RW  F32Array matrixC, final int size) {\n+    public static void matrixMultiply2DRegisterTilingVectorized(@RO ComputeContext cc, @RO F32ArrayPadded matrixA, @RO F32ArrayPadded matrixB, @RW  F32ArrayPadded matrixC, final int size) {\n@@ -704,2 +720,2 @@\n-        var matrixA = F32Array.create(accelerator, size * size);\n-        var matrixB = F32Array.create(accelerator, size * size);\n+        var matrixA = F32ArrayPadded.create(accelerator, size * size);\n+        var matrixB = F32ArrayPadded.create(accelerator, size * size);\n@@ -708,2 +724,2 @@\n-        var matrixC = F32Array.create(accelerator, size * size);\n-        var resultSeq = F32Array.create(accelerator, size * size);\n+        var matrixC = F32ArrayPadded.create(accelerator, size * size);\n+        var resultSeq = F32ArrayPadded.create(accelerator, size * size);\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestMatMul.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import hat.buffer.F32ArrayPadded;\n@@ -45,1 +46,1 @@\n-    public static void vectorOps01(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps01(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -56,1 +57,1 @@\n-    public static void vectorOps02(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps02(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -67,1 +68,1 @@\n-    public static void vectorOps03(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps03(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -84,1 +85,1 @@\n-    public static void vectorOps04(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps04(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -97,1 +98,1 @@\n-    public static void vectorOps05(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps05(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -108,1 +109,1 @@\n-    public static void vectorOps06(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps06(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -120,1 +121,1 @@\n-    public static void vectorOps07(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps07(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -131,1 +132,1 @@\n-    public static void vectorOps08(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps08(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -142,1 +143,1 @@\n-    public static void vectorOps09(@RO KernelContext kernelContext, @RO F32Array a, @RO F32Array b, @RW F32Array c) {\n+    public static void vectorOps09(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c) {\n@@ -172,1 +173,1 @@\n-    public static void vectorOps10(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps10(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -204,1 +205,1 @@\n-    public static void vectorOps11(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps11(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -217,1 +218,1 @@\n-    public static void vectorOps12(@RO KernelContext kernelContext, @RO F32Array a, @RW F32Array b) {\n+    public static void vectorOps12(@RO KernelContext kernelContext, @RO F32ArrayPadded a, @RW F32ArrayPadded b) {\n@@ -234,1 +235,1 @@\n-    public static void computeGraph01(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c, int size) {\n+    public static void computeGraph01(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c, int size) {\n@@ -241,1 +242,1 @@\n-    public static void computeGraph02(@RO ComputeContext cc, @RW F32Array a, @RW F32Array b, int size) {\n+    public static void computeGraph02(@RO ComputeContext cc, @RW F32ArrayPadded a, @RW F32ArrayPadded b, int size) {\n@@ -248,1 +249,1 @@\n-    public static void computeGraph03(@RO ComputeContext cc, @RO F32Array a, @RW F32Array b, int size) {\n+    public static void computeGraph03(@RO ComputeContext cc, @RO F32ArrayPadded a, @RW F32ArrayPadded b, int size) {\n@@ -255,1 +256,1 @@\n-    public static void computeGraph04(@RO ComputeContext cc, @RO F32Array a, @RW F32Array b, int size) {\n+    public static void computeGraph04(@RO ComputeContext cc, @RO F32ArrayPadded a, @RW F32ArrayPadded b, int size) {\n@@ -262,1 +263,1 @@\n-    public static void computeGraph05(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c,  int size) {\n+    public static void computeGraph05(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c,  int size) {\n@@ -269,1 +270,1 @@\n-    public static void computeGraph06(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c,  int size) {\n+    public static void computeGraph06(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c,  int size) {\n@@ -277,1 +278,1 @@\n-    public static void computeGraph07(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c,  int size) {\n+    public static void computeGraph07(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c,  int size) {\n@@ -284,1 +285,1 @@\n-    public static void computeGraph08(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c,  int size) {\n+    public static void computeGraph08(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c,  int size) {\n@@ -291,1 +292,1 @@\n-    public static void computeGraph09(@RO ComputeContext cc, @RO F32Array a, @RO F32Array b, @RW F32Array c,  int size) {\n+    public static void computeGraph09(@RO ComputeContext cc, @RO F32ArrayPadded a, @RO F32ArrayPadded b, @RW F32ArrayPadded c,  int size) {\n@@ -298,1 +299,1 @@\n-    public static void computeGraph10(@RO ComputeContext cc, @RO F32Array a,  @RW F32Array b, int size) {\n+    public static void computeGraph10(@RO ComputeContext cc, @RO F32ArrayPadded a,  @RW F32ArrayPadded b, int size) {\n@@ -305,1 +306,1 @@\n-    public static void computeGraph11(@RO ComputeContext cc, @RO F32Array a,  @RW F32Array b, int size) {\n+    public static void computeGraph11(@RO ComputeContext cc, @RO F32ArrayPadded a,  @RW F32ArrayPadded b, int size) {\n@@ -312,1 +313,1 @@\n-    public static void computeGraph12(@RO ComputeContext cc, @RO F32Array a,  @RW F32Array b, int size) {\n+    public static void computeGraph12(@RO ComputeContext cc, @RO F32ArrayPadded a,  @RW F32ArrayPadded b, int size) {\n@@ -322,3 +323,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -344,2 +345,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n@@ -366,2 +367,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n@@ -388,2 +389,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n@@ -410,3 +411,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -431,3 +432,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -452,3 +453,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -473,3 +474,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -495,3 +496,3 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n-        var arrayC = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n+        var arrayC = F32ArrayPadded.create(accelerator, size);\n@@ -517,2 +518,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n@@ -537,2 +538,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n@@ -557,2 +558,2 @@\n-        var arrayA = F32Array.create(accelerator, size);\n-        var arrayB = F32Array.create(accelerator, size);\n+        var arrayA = F32ArrayPadded.create(accelerator, size);\n+        var arrayB = F32ArrayPadded.create(accelerator, size);\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestVectorTypes.java","additions":55,"deletions":54,"binary":false,"changes":109,"status":"modified"}]}