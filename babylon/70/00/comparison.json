{"files":[{"patch":"@@ -28,2 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.type.TypeDefinition;\n+import java.lang.reflect.code.CodeType;\n@@ -35,2 +34,2 @@\n-    private final TypeElement referentType;\n-    private final TypeElement storageType;\n+    private final CodeType referentType;\n+    private final CodeType storageType;\n@@ -38,1 +37,1 @@\n-    public PointerType(TypeElement referentType, TypeElement storageType)\n+    public PointerType(CodeType referentType, CodeType storageType)\n@@ -44,1 +43,1 @@\n-    public TypeElement referentType()\n+    public CodeType referentType()\n@@ -49,1 +48,1 @@\n-    public TypeElement storageType()\n+    public CodeType storageType()\n@@ -68,2 +67,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME, List.of(referentType.toTypeDefinition(), storageType.toTypeDefinition()));\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME, List.of(referentType.externalize(), storageType.externalize()));\n@@ -74,1 +73,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/PointerType.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -127,1 +127,1 @@\n-        TypeElement returnType = func.invokableType().returnType();\n+        CodeType returnType = func.invokableType().returnType();\n@@ -130,1 +130,1 @@\n-        List<TypeElement> paramTypes = func.invokableType().parameterTypes();\n+        List<CodeType> paramTypes = func.invokableType().parameterTypes();\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -37,1 +37,1 @@\n-    private final TypeElement type;\n+    private final CodeType type;\n@@ -44,1 +44,1 @@\n-    SpirvOp(String opName, TypeElement type, List<Value> operands) {\n+    SpirvOp(String opName, CodeType type, List<Value> operands) {\n@@ -49,1 +49,1 @@\n-    SpirvOp(String opName, TypeElement type, List<Value> operands, Map<String, Object> attributes) {\n+    SpirvOp(String opName, CodeType type, List<Value> operands, Map<String, Object> attributes) {\n@@ -60,1 +60,1 @@\n-    public TypeElement resultType() {\n+    public CodeType resultType() {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvOp.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -68,1 +68,1 @@\n-        public LoadOp(TypeElement resultType, List<Value> operands) {\n+        public LoadOp(CodeType resultType, List<Value> operands) {\n@@ -86,1 +86,1 @@\n-        public FieldLoadOp(TypeElement resultType, FieldRef fieldRef, List<Value> operands) {\n+        public FieldLoadOp(CodeType resultType, FieldRef fieldRef, List<Value> operands) {\n@@ -153,1 +153,1 @@\n-        public ArrayLengthOp(TypeElement resultType, List<Value> operands) {\n+        public ArrayLengthOp(CodeType resultType, List<Value> operands) {\n@@ -171,1 +171,1 @@\n-        public ConstantOp(TypeElement resultType, Object value) {\n+        public ConstantOp(CodeType resultType, Object value) {\n@@ -194,1 +194,1 @@\n-        public ConvertOp(TypeElement resultType, List<Value> operands) {\n+        public ConvertOp(CodeType resultType, List<Value> operands) {\n@@ -211,1 +211,1 @@\n-        public IAddOp(TypeElement resultType, List<Value> operands) {\n+        public IAddOp(CodeType resultType, List<Value> operands) {\n@@ -228,1 +228,1 @@\n-        public FAddOp(TypeElement resultType, List<Value> operands) {\n+        public FAddOp(CodeType resultType, List<Value> operands) {\n@@ -245,1 +245,1 @@\n-        public ISubOp(TypeElement resultType, List<Value> operands) {\n+        public ISubOp(CodeType resultType, List<Value> operands) {\n@@ -262,1 +262,1 @@\n-        public FSubOp(TypeElement resultType, List<Value> operands) {\n+        public FSubOp(CodeType resultType, List<Value> operands) {\n@@ -279,1 +279,1 @@\n-        public IMulOp(TypeElement resultType, List<Value> operands) {\n+        public IMulOp(CodeType resultType, List<Value> operands) {\n@@ -296,1 +296,1 @@\n-        public FMulOp(TypeElement resultType, List<Value> operands) {\n+        public FMulOp(CodeType resultType, List<Value> operands) {\n@@ -313,1 +313,1 @@\n-        public IDivOp(TypeElement resultType, List<Value> operands) {\n+        public IDivOp(CodeType resultType, List<Value> operands) {\n@@ -330,1 +330,1 @@\n-        public FDivOp(TypeElement resultType, List<Value> operands) {\n+        public FDivOp(CodeType resultType, List<Value> operands) {\n@@ -347,1 +347,1 @@\n-        public ModOp(TypeElement resultType, List<Value> operands) {\n+        public ModOp(CodeType resultType, List<Value> operands) {\n@@ -364,1 +364,1 @@\n-        public IEqualOp(TypeElement resultType, List<Value> operands) {\n+        public IEqualOp(CodeType resultType, List<Value> operands) {\n@@ -381,1 +381,1 @@\n-        public FEqualOp(TypeElement resultType, List<Value> operands) {\n+        public FEqualOp(CodeType resultType, List<Value> operands) {\n@@ -398,1 +398,1 @@\n-        public INotEqualOp(TypeElement resultType, List<Value> operands) {\n+        public INotEqualOp(CodeType resultType, List<Value> operands) {\n@@ -416,1 +416,1 @@\n-        public FNotEqualOp(TypeElement resultType, List<Value> operands) {\n+        public FNotEqualOp(CodeType resultType, List<Value> operands) {\n@@ -433,1 +433,1 @@\n-        public LtOp(TypeElement resultType, List<Value> operands) {\n+        public LtOp(CodeType resultType, List<Value> operands) {\n@@ -515,1 +515,1 @@\n-        private final TypeElement varType;\n+        private final CodeType varType;\n@@ -517,1 +517,1 @@\n-        public VariableOp(String varName, TypeElement type, TypeElement varType) {\n+        public VariableOp(String varName, CodeType type, CodeType varType) {\n@@ -534,1 +534,1 @@\n-        public TypeElement varType() {\n+        public CodeType varType() {\n@@ -546,1 +546,1 @@\n-        public CompositeExtractOp(TypeElement resultType, List<Value> operands) {\n+        public CompositeExtractOp(CodeType resultType, List<Value> operands) {\n@@ -563,1 +563,1 @@\n-        public InBoundAccessChainOp(TypeElement resultType, List<Value> operands) {\n+        public InBoundAccessChainOp(CodeType resultType, List<Value> operands) {\n@@ -580,1 +580,1 @@\n-        public ReturnOp(TypeElement resultType, List<Value> operands) {\n+        public ReturnOp(CodeType resultType, List<Value> operands) {\n@@ -597,1 +597,1 @@\n-        public FunctionParameterOp(TypeElement resultType, List<Value> operands) {\n+        public FunctionParameterOp(CodeType resultType, List<Value> operands) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvOps.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -30,1 +30,1 @@\n-public abstract sealed class SpirvType implements TypeElement permits PointerType, StorageType {\n+public abstract sealed class SpirvType implements CodeType permits PointerType, StorageType {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.code.type.TypeDefinition;\n@@ -91,2 +90,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME, List.of());\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME, List.of());\n@@ -97,1 +96,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/StorageType.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -85,1 +85,1 @@\n-            TypeElement resultType = new PointerType(jvop.varType(), StorageType.CROSSWORKGROUP);\n+            CodeType resultType = new PointerType(jvop.varType(), StorageType.CROSSWORKGROUP);\n@@ -100,1 +100,1 @@\n-                    TypeElement resultType = new PointerType(jvop.varType(), StorageType.CROSSWORKGROUP);\n+                    CodeType resultType = new PointerType(jvop.varType(), StorageType.CROSSWORKGROUP);\n@@ -136,1 +136,1 @@\n-                        TypeElement arrayType = array.type();\n+                        CodeType arrayType = array.type();\n@@ -149,1 +149,1 @@\n-                        TypeElement arrayType = array.type();\n+                        CodeType arrayType = array.type();\n@@ -160,1 +160,1 @@\n-                        TypeElement type = aop.operands().get(0).type();\n+                        CodeType type = aop.operands().get(0).type();\n@@ -170,1 +170,1 @@\n-                        TypeElement  type = sop.operands().get(0).type();\n+                        CodeType  type = sop.operands().get(0).type();\n@@ -180,1 +180,1 @@\n-                        TypeElement type = mop.operands().get(0).type();\n+                        CodeType type = mop.operands().get(0).type();\n@@ -190,1 +190,1 @@\n-                        TypeElement type = dop.operands().get(0).type();\n+                        CodeType type = dop.operands().get(0).type();\n@@ -200,1 +200,1 @@\n-                        TypeElement type = mop.operands().get(0).type();\n+                        CodeType type = mop.operands().get(0).type();\n@@ -207,1 +207,1 @@\n-                        TypeElement type = eqop.operands().get(0).type();\n+                        CodeType type = eqop.operands().get(0).type();\n@@ -217,1 +217,1 @@\n-                        TypeElement type = neqop.operands().get(0).type();\n+                        CodeType type = neqop.operands().get(0).type();\n@@ -227,1 +227,1 @@\n-                        TypeElement type = ltop.operands().get(0).type();\n+                        CodeType type = ltop.operands().get(0).type();\n@@ -300,1 +300,1 @@\n-    private boolean isIntegerType(TypeElement type) {\n+    private boolean isIntegerType(CodeType type) {\n@@ -304,1 +304,1 @@\n-    private boolean isFloatType(TypeElement type) {\n+    private boolean isFloatType(CodeType type) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/TranslateToSpirvModel.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -52,1 +52,1 @@\n-        ArithMathOp(String name, TypeElement resultType, List<? extends Value> operands) {\n+        ArithMathOp(String name, CodeType resultType, List<? extends Value> operands) {\n@@ -59,1 +59,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -81,1 +81,1 @@\n-        static Object processConstantValue(TypeElement t, Object value) {\n+        static Object processConstantValue(CodeType t, Object value) {\n@@ -154,1 +154,1 @@\n-        ConstantOp(TypeElement type, Object value) {\n+        ConstantOp(CodeType type, Object value) {\n@@ -367,1 +367,1 @@\n-        TruncOp(TypeElement t, Value a) {\n+        TruncOp(CodeType t, Value a) {\n@@ -451,1 +451,1 @@\n-    static String maxMinSuffixFromType(TypeElement t) {\n+    static String maxMinSuffixFromType(CodeType t) {\n@@ -465,1 +465,1 @@\n-    static String nameSuffixFromType(TypeElement t, boolean signed) {\n+    static String nameSuffixFromType(CodeType t, boolean signed) {\n@@ -500,1 +500,1 @@\n-    public static ConstantOp constant(TypeElement type, Object value) {\n+    public static ConstantOp constant(CodeType type, Object value) {\n@@ -540,1 +540,1 @@\n-    public static TruncOp trunc(TypeElement type, Value a) {\n+    public static TruncOp trunc(CodeType type, Value a) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ArithMathOps.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.type.TypeDefinition;\n+import java.lang.reflect.code.CodeType;\n@@ -36,1 +35,1 @@\n-    final TypeElement cType;\n+    final CodeType cType;\n@@ -39,1 +38,1 @@\n-    public ConstantType(TypeElement cType, Object value) {\n+    public ConstantType(CodeType cType, Object value) {\n@@ -44,1 +43,1 @@\n-    public TypeElement cType() {\n+    public CodeType cType() {\n@@ -66,4 +65,4 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME,\n-                List.of(cType.toTypeDefinition(),\n-                        new TypeDefinition(\"c\" + value, List.of())));\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME,\n+                List.of(cType.externalize(),\n+                        new ExternalizedCodeType(\"c\" + value, List.of())));\n@@ -74,1 +73,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ConstantType.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -33,1 +33,1 @@\n-    static final TypeElement FLOAT_16_TYPE = JavaType.type(Float16.class);\n+    static final CodeType FLOAT_16_TYPE = JavaType.type(Float16.class);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/Float16.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.type.TypeDefinition;\n+import java.lang.reflect.code.CodeType;\n@@ -35,1 +34,1 @@\n-    final TypeElement rType;\n+    final CodeType rType;\n@@ -37,1 +36,1 @@\n-    public PtrType(TypeElement rType) {\n+    public PtrType(CodeType rType) {\n@@ -41,1 +40,1 @@\n-    public TypeElement rType() {\n+    public CodeType rType() {\n@@ -59,2 +58,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME, List.of(rType.toTypeDefinition()));\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME, List.of(rType.externalize()));\n@@ -65,1 +64,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/PtrType.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -131,1 +131,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -135,1 +135,1 @@\n-        static TypeElement yieldType(List<Value> values) {\n+        static CodeType yieldType(List<Value> values) {\n@@ -147,1 +147,1 @@\n-        TypeElement yieldType = (iterValues.size() == 1)\n+        CodeType yieldType = (iterValues.size() == 1)\n@@ -151,1 +151,1 @@\n-        List<TypeElement> bodyParameterTypes = new ArrayList<>();\n+        List<CodeType> bodyParameterTypes = new ArrayList<>();\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/SCFOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.type.TypeDefinition;\n+import java.lang.reflect.code.CodeType;\n@@ -37,1 +36,1 @@\n-    final TypeElement eType;\n+    final CodeType eType;\n@@ -41,1 +40,1 @@\n-    public TensorType(TypeElement eType, List<Integer> shape) {\n+    public TensorType(CodeType eType, List<Integer> shape) {\n@@ -51,1 +50,1 @@\n-    public TypeElement eType() {\n+    public CodeType eType() {\n@@ -77,2 +76,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        List<TypeDefinition> args = new ArrayList<>();\n+    public ExternalizedCodeType externalize() {\n+        List<ExternalizedCodeType> args = new ArrayList<>();\n@@ -80,1 +79,1 @@\n-            args.add(new TypeDefinition(\"x\" + i, List.of()));\n+            args.add(new ExternalizedCodeType(\"x\" + i, List.of()));\n@@ -82,2 +81,2 @@\n-        args.add(eType.toTypeDefinition());\n-        return new TypeDefinition(NAME, args);\n+        args.add(eType.externalize());\n+        return new ExternalizedCodeType(NAME, args);\n@@ -88,1 +87,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TensorType.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -51,1 +51,1 @@\n-        TritonOp(String name, TypeElement resultType, List<? extends Value> operands) {\n+        TritonOp(String name, CodeType resultType, List<? extends Value> operands) {\n@@ -58,1 +58,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -281,1 +281,1 @@\n-        CallOp(String funcName, TypeElement resultType, List<Value> args) {\n+        CallOp(String funcName, CodeType resultType, List<Value> args) {\n@@ -559,1 +559,1 @@\n-        ExpandOp(int axis, TypeElement tensorType, Value v) {\n+        ExpandOp(int axis, CodeType tensorType, Value v) {\n@@ -594,1 +594,1 @@\n-        SplatOp(TypeElement tensorType, Value v) {\n+        SplatOp(CodeType tensorType, Value v) {\n@@ -616,1 +616,1 @@\n-        BroadcastOp(TypeElement tensorType, Value v) {\n+        BroadcastOp(CodeType tensorType, Value v) {\n@@ -660,1 +660,1 @@\n-        LoadOp(TypeElement tensorType, Value ptr, Value mask) {\n+        LoadOp(CodeType tensorType, Value ptr, Value mask) {\n@@ -730,1 +730,1 @@\n-        DotOp(TypeElement tensorType, Value a, Value b) {\n+        DotOp(CodeType tensorType, Value a, Value b) {\n@@ -783,1 +783,1 @@\n-    public static ExpandOp expand(int axis, TypeElement tensorType, Value v) {\n+    public static ExpandOp expand(int axis, CodeType tensorType, Value v) {\n@@ -788,1 +788,1 @@\n-    public static SplatOp splat(TypeElement tensorType, Value v) {\n+    public static SplatOp splat(CodeType tensorType, Value v) {\n@@ -793,1 +793,1 @@\n-    public static BroadcastOp broadcast(TypeElement tensorType, Value v) {\n+    public static BroadcastOp broadcast(CodeType tensorType, Value v) {\n@@ -801,1 +801,1 @@\n-    public static LoadOp load(TypeElement tensorType, Value ptr, Value mask) {\n+    public static LoadOp load(CodeType tensorType, Value ptr, Value mask) {\n@@ -817,1 +817,1 @@\n-    public static DotOp dot(TypeElement tensorType, Value a, Value b) {\n+    public static DotOp dot(CodeType tensorType, Value a, Value b) {\n@@ -826,1 +826,1 @@\n-    static final TypeElementFactory TRITON_TYPE_FACTORY = new TypeElementFactory() {\n+    static final CodeTypeFactory TRITON_TYPE_FACTORY = new CodeTypeFactory() {\n@@ -828,1 +828,1 @@\n-        public TypeElement constructType(TypeDefinition tree) {\n+        public CodeType constructType(CodeType.ExternalizedCodeType tree) {\n@@ -835,1 +835,1 @@\n-                    TypeElement v = TRITON_JAVA_TYPE_FACTORY.constructType(tree.arguments().getFirst());\n+                    CodeType v = TRITON_JAVA_TYPE_FACTORY.constructType(tree.arguments().getFirst());\n@@ -852,1 +852,1 @@\n-                        TypeDefinition a = tree.arguments().get(i);\n+                        CodeType.ExternalizedCodeType a = tree.arguments().get(i);\n@@ -865,1 +865,1 @@\n-                    TypeElement v = TRITON_JAVA_TYPE_FACTORY.constructType(tree.arguments().getLast());\n+                    CodeType v = TRITON_JAVA_TYPE_FACTORY.constructType(tree.arguments().getLast());\n@@ -881,1 +881,1 @@\n-    static final TypeElementFactory TRITON_JAVA_TYPE_FACTORY =\n+    static final CodeTypeFactory TRITON_JAVA_TYPE_FACTORY =\n@@ -885,1 +885,1 @@\n-    public static final TypeElementFactory TYPE_FACTORY =\n+    public static final CodeTypeFactory TYPE_FACTORY =\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,4 +28,1 @@\n-import java.lang.reflect.code.CopyContext;\n-import java.lang.reflect.code.OpTransformer;\n-import java.lang.reflect.code.TypeElement;\n-import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.*;\n@@ -61,1 +58,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTestOps.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-                                    TypeElement rType,\n-                                    List<? extends TypeElement> argTypes) {\n+                                    CodeType rType,\n+                                    List<? extends CodeType> argTypes) {\n@@ -67,2 +67,2 @@\n-                                    TypeElement rType,\n-                                    List<? extends TypeElement> argTypes,\n+                                    CodeType rType,\n+                                    List<? extends CodeType> argTypes,\n@@ -78,1 +78,1 @@\n-        Map<Value, TypeElement> valueTypeMap = new HashMap<>();\n+        Map<Value, CodeType> valueTypeMap = new HashMap<>();\n@@ -88,1 +88,1 @@\n-    static String signature(String name, TypeElement rType, List<? extends TypeElement> argTypes) {\n+    static String signature(String name, CodeType rType, List<? extends CodeType> argTypes) {\n@@ -91,1 +91,1 @@\n-        for (TypeElement argType : argTypes) {\n+        for (CodeType argType : argTypes) {\n@@ -105,2 +105,2 @@\n-            O kernel, List<? extends TypeElement> argTypes,\n-            Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData) {\n+            O kernel, List<? extends CodeType> argTypes,\n+            Map<Value, CodeType> valueTypeMap, Map<Op, Object> opData) {\n@@ -121,1 +121,1 @@\n-                    TypeElement varType = valueTypeMap.get(var);\n+                    CodeType varType = valueTypeMap.get(var);\n@@ -123,1 +123,1 @@\n-                    TypeElement vType = valueTypeMap.get(v);\n+                    CodeType vType = valueTypeMap.get(v);\n@@ -135,1 +135,1 @@\n-                    TypeElement t = checkWithTypeInterpreter(op, op.opName(), valueTypeMap);\n+                    CodeType t = checkWithTypeInterpreter(op, op.opName(), valueTypeMap);\n@@ -184,1 +184,1 @@\n-                    TypeElement t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n+                    CodeType t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n@@ -188,1 +188,1 @@\n-                    TypeElement t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n+                    CodeType t = checkWithTypeInterpreter(op, iop.invokeDescriptor().name(), valueTypeMap);\n@@ -195,1 +195,1 @@\n-                    TypeElement type = fop.init().yieldType();\n+                    CodeType type = fop.init().yieldType();\n@@ -219,1 +219,1 @@\n-    static TypeElement checkWithTypeInterpreter(Op op, String name, Map<Value, TypeElement> valueTypeMap) {\n+    static CodeType checkWithTypeInterpreter(Op op, String name, Map<Value, CodeType> valueTypeMap) {\n@@ -233,1 +233,1 @@\n-        List<TypeElement> operandTypes = op.operands().stream().map(valueTypeMap::get).toList();\n+        List<CodeType> operandTypes = op.operands().stream().map(valueTypeMap::get).toList();\n@@ -235,1 +235,1 @@\n-            return (TypeElement) mh.invokeWithArguments(operandTypes.toArray(Object[]::new));\n+            return (CodeType) mh.invokeWithArguments(operandTypes.toArray(Object[]::new));\n@@ -304,1 +304,1 @@\n-            return new TensorType((TypeElement) eType.value(), shape);\n+            return new TensorType((CodeType) eType.value(), shape);\n@@ -308,1 +308,1 @@\n-        public static TensorType broadcast(TypeElement o, TensorType type) {\n+        public static TensorType broadcast(CodeType o, TensorType type) {\n@@ -327,1 +327,1 @@\n-        public static TypeElement add(TypeElement a, TypeElement b) {\n+        public static CodeType add(CodeType a, CodeType b) {\n@@ -332,1 +332,1 @@\n-        public static TypeElement sub(TypeElement a, TypeElement b) {\n+        public static CodeType sub(CodeType a, CodeType b) {\n@@ -336,1 +336,1 @@\n-        public static TypeElement mul(TypeElement a, TypeElement b) {\n+        public static CodeType mul(CodeType a, CodeType b) {\n@@ -340,1 +340,1 @@\n-        public static TypeElement div(TypeElement a, TypeElement b) {\n+        public static CodeType div(CodeType a, CodeType b) {\n@@ -344,1 +344,1 @@\n-        public static TypeElement mod(TypeElement a, TypeElement b) {\n+        public static CodeType mod(CodeType a, CodeType b) {\n@@ -348,1 +348,1 @@\n-        public static TypeElement and(TypeElement a, TypeElement b) {\n+        public static CodeType and(CodeType a, CodeType b) {\n@@ -352,1 +352,1 @@\n-        public static TypeElement cdiv(TypeElement a, TypeElement b) {\n+        public static CodeType cdiv(CodeType a, CodeType b) {\n@@ -362,1 +362,1 @@\n-        public static TypeElement conv(ConstantType eType, TypeElement a) {\n+        public static CodeType conv(ConstantType eType, CodeType a) {\n@@ -366,1 +366,1 @@\n-        public static TypeElement convTypes(ConstantType eType, TypeElement a) {\n+        public static CodeType convTypes(ConstantType eType, CodeType a) {\n@@ -368,1 +368,1 @@\n-                TypeElement e = convScalarTypes(eType, tb.eType());\n+                CodeType e = convScalarTypes(eType, tb.eType());\n@@ -375,2 +375,2 @@\n-        public static TypeElement convScalarTypes(ConstantType eType, TypeElement a) {\n-            TypeElement t = (TypeElement) eType.value();\n+        public static CodeType convScalarTypes(ConstantType eType, CodeType a) {\n+            CodeType t = (CodeType) eType.value();\n@@ -388,1 +388,1 @@\n-        public static TypeElement exp(TypeElement a) {\n+        public static CodeType exp(CodeType a) {\n@@ -392,1 +392,1 @@\n-        static TypeElement unary(TypeElement a) {\n+        static CodeType unary(CodeType a) {\n@@ -397,1 +397,1 @@\n-        public static TypeElement compare(TypeElement a, TypeElement b, ConstantType kind) {\n+        public static CodeType compare(CodeType a, CodeType b, ConstantType kind) {\n@@ -424,1 +424,1 @@\n-        public static TypeElement max(TensorType a, ConstantType axis) {\n+        public static CodeType max(TensorType a, ConstantType axis) {\n@@ -429,1 +429,1 @@\n-        public static TypeElement sum(TensorType a, ConstantType axis) {\n+        public static CodeType sum(TensorType a, ConstantType axis) {\n@@ -433,1 +433,1 @@\n-        static TypeElement reduce(TensorType a, ConstantType axis) {\n+        static CodeType reduce(TensorType a, ConstantType axis) {\n@@ -457,1 +457,1 @@\n-        public static void consume(TypeElement a) {\n+        public static void consume(CodeType a) {\n@@ -461,1 +461,1 @@\n-        static TypeElement binary(TypeElement a, TypeElement b) {\n+        static CodeType binary(CodeType a, CodeType b) {\n@@ -475,1 +475,1 @@\n-            TypeElement e = checkScalarTypes(a.eType(), b.eType());\n+            CodeType e = checkScalarTypes(a.eType(), b.eType());\n@@ -511,1 +511,1 @@\n-        static TypeElement checkScalarTypes(TypeElement a, TypeElement b) {\n+        static CodeType checkScalarTypes(CodeType a, CodeType b) {\n@@ -529,1 +529,1 @@\n-        static TypeElement reduceScalarType(TypeElement a) {\n+        static CodeType reduceScalarType(CodeType a) {\n@@ -537,2 +537,2 @@\n-            TypeElement rType,\n-            Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n+            CodeType rType,\n+            Map<Value, CodeType> valueTypeMap, Map<Op, Object> opData,\n@@ -545,1 +545,1 @@\n-                        TypeElement type = valueTypeMap.get(kp);\n+                        CodeType type = valueTypeMap.get(kp);\n@@ -568,1 +568,1 @@\n-                                                    Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n+                                                    Map<Value, CodeType> valueTypeMap, Map<Op, Object> opData,\n@@ -582,1 +582,1 @@\n-                TypeElement t = valueTypeMap.get(cop.result());\n+                CodeType t = valueTypeMap.get(cop.result());\n@@ -660,1 +660,1 @@\n-                                  Map<Value, TypeElement> valueTypeMap, Map<Op, Object> opData,\n+                                  Map<Value, CodeType> valueTypeMap, Map<Op, Object> opData,\n@@ -719,1 +719,1 @@\n-                        TypeElement type = valueTypeMap.get(v);\n+                        CodeType type = valueTypeMap.get(v);\n@@ -839,1 +839,1 @@\n-        Value build(Op op, String name, Map<Value, TypeElement> valueTypeMap) {\n+        Value build(Op op, String name, Map<Value, CodeType> valueTypeMap) {\n@@ -868,1 +868,1 @@\n-        public Value programId(TypeElement rType, Op.Result r,\n+        public Value programId(CodeType rType, Op.Result r,\n@@ -927,1 +927,1 @@\n-                               TypeElement oType, Value o,\n+                               CodeType oType, Value o,\n@@ -951,3 +951,3 @@\n-        public Value add(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value add(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -966,3 +966,3 @@\n-        public Value sub(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value sub(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -976,3 +976,3 @@\n-        public Value mul(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value mul(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -986,3 +986,3 @@\n-        public Value div(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value div(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -996,3 +996,3 @@\n-        public Value mod(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value mod(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -1006,3 +1006,3 @@\n-        public Value and(TypeElement rType, Op.Result r,\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+        public Value and(CodeType rType, Op.Result r,\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -1017,2 +1017,2 @@\n-                         TypeElement aType, Value a,\n-                         TypeElement bType, Value b) {\n+                         CodeType aType, Value a,\n+                         CodeType bType, Value b) {\n@@ -1025,3 +1025,3 @@\n-        public Value cdiv(TypeElement rType, Op.Result r,\n-                          TypeElement aType, Value a,\n-                          TypeElement bType, Value b) {\n+        public Value cdiv(CodeType rType, Op.Result r,\n+                          CodeType aType, Value a,\n+                          CodeType bType, Value b) {\n@@ -1045,1 +1045,1 @@\n-        public Value conv(TypeElement rType, Op.Result r,\n+        public Value conv(CodeType rType, Op.Result r,\n@@ -1047,1 +1047,1 @@\n-                          TypeElement aType, Value a) {\n+                          CodeType aType, Value a) {\n@@ -1050,2 +1050,2 @@\n-            TypeElement rScalarType;\n-            TypeElement aScalarType;\n+            CodeType rScalarType;\n+            CodeType aScalarType;\n@@ -1076,2 +1076,2 @@\n-                             TypeElement aType, Value a,\n-                             TypeElement bType, Value b,\n+                             CodeType aType, Value a,\n+                             CodeType bType, Value b,\n@@ -1094,1 +1094,1 @@\n-        public Value max(TypeElement rType, Op.Result r,\n+        public Value max(CodeType rType, Op.Result r,\n@@ -1102,1 +1102,1 @@\n-        public Value sum(TypeElement rType, Op.Result r,\n+        public Value sum(CodeType rType, Op.Result r,\n@@ -1110,1 +1110,1 @@\n-        Value reduce(TypeElement rType, Op.Result r,\n+        Value reduce(CodeType rType, Op.Result r,\n@@ -1123,1 +1123,1 @@\n-        static TritonOps.FuncOp reduce(TypeElement elementType,\n+        static TritonOps.FuncOp reduce(CodeType elementType,\n@@ -1146,2 +1146,2 @@\n-        public Value consume(TypeElement rType, Op.Result r,\n-                             TypeElement aType, Value a) {\n+        public Value consume(CodeType rType, Op.Result r,\n+                             CodeType aType, Value a) {\n@@ -1151,3 +1151,3 @@\n-        void broadcastConversion(TypeElement rType,\n-                                 TypeElement aType, Value a,\n-                                 TypeElement bType, Value b) {\n+        void broadcastConversion(CodeType rType,\n+                                 CodeType aType, Value a,\n+                                 CodeType bType, Value b) {\n@@ -1185,2 +1185,2 @@\n-        void broadcastConversionRight(TypeElement aType,\n-                                      TypeElement bType, Value b) {\n+        void broadcastConversionRight(CodeType aType,\n+                                      CodeType bType, Value b) {\n@@ -1210,1 +1210,1 @@\n-            O kernel, Map<Value, TypeElement> valueTypeMap) {\n+            O kernel, Map<Value, CodeType> valueTypeMap) {\n@@ -1233,1 +1233,1 @@\n-            TypeElement type = valueTypeMap.get(value);\n+            CodeType type = valueTypeMap.get(value);\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTransformer.java","additions":95,"deletions":95,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -30,1 +30,1 @@\n-public abstract sealed class TritonType implements TypeElement\n+public abstract sealed class TritonType implements CodeType\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonType.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -96,1 +96,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -165,1 +165,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestAddKernel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -77,1 +77,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -121,1 +121,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestBroadcast.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -66,1 +66,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -100,1 +100,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -157,1 +157,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestCdiv.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -79,1 +79,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestCountedLoop.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -303,1 +303,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -550,1 +550,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestMatrix.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -127,1 +127,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n@@ -224,1 +224,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestSoftMax.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -53,1 +53,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestVariables.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -58,1 +58,1 @@\n-        List<TypeElement> argTypes = List.of(\n+        List<CodeType> argTypes = List.of(\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TestZeros.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -77,1 +77,1 @@\n-        public void test(List<? extends TypeElement> argTypes) {\n+        public void test(List<? extends CodeType> argTypes) {\n@@ -103,1 +103,1 @@\n-                  List<? extends TypeElement> argTypes,\n+                  List<? extends CodeType> argTypes,\n","filename":"cr-examples\/triton\/src\/test\/java\/oracle\/code\/triton\/TritonTestExtension.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        Parameter(Block block, TypeElement type) {\n+        Parameter(Block block, CodeType type) {\n@@ -169,1 +169,1 @@\n-    Block(Body parentBody, List<TypeElement> parameterTypes) {\n+    Block(Body parentBody, List<CodeType> parameterTypes) {\n@@ -172,1 +172,1 @@\n-        for (TypeElement param : parameterTypes) {\n+        for (CodeType param : parameterTypes) {\n@@ -245,1 +245,1 @@\n-    public List<TypeElement> parameterTypes() {\n+    public List<CodeType> parameterTypes() {\n@@ -518,1 +518,1 @@\n-        public Block.Builder block(TypeElement... params) {\n+        public Block.Builder block(CodeType... params) {\n@@ -528,1 +528,1 @@\n-        public Block.Builder block(List<TypeElement> params) {\n+        public Block.Builder block(List<CodeType> params) {\n@@ -547,1 +547,1 @@\n-        public Parameter parameter(TypeElement p) {\n+        public Parameter parameter(CodeType p) {\n@@ -643,1 +643,1 @@\n-                            List<TypeElement> param = rop.returnValue() != null\n+                            List<CodeType> param = rop.returnValue() != null\n@@ -875,1 +875,1 @@\n-    private Parameter appendBlockParameter(TypeElement type) {\n+    private Parameter appendBlockParameter(CodeType type) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Block.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    final TypeElement yieldType;\n+    final CodeType yieldType;\n@@ -68,1 +68,1 @@\n-    Body(Body ancestorBody, TypeElement yieldType) {\n+    Body(Body ancestorBody, CodeType yieldType) {\n@@ -110,1 +110,1 @@\n-    public TypeElement yieldType() {\n+    public CodeType yieldType() {\n@@ -503,1 +503,1 @@\n-            TypeElement returnType = Body.this.yieldType();\n+            CodeType returnType = Body.this.yieldType();\n@@ -544,1 +544,1 @@\n-        Block.Builder block(List<TypeElement> params, CopyContext cc, OpTransformer ot) {\n+        Block.Builder block(List<CodeType> params, CopyContext cc, OpTransformer ot) {\n@@ -650,1 +650,1 @@\n-    private Block createBlock(List<TypeElement> params) {\n+    private Block createBlock(List<CodeType> params) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Body.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- * A code item, one of {@link CodeElement}, {@link Value}, or {@link TypeElement}.\n+ * A code item, one of {@link CodeElement}, {@link Value}, or {@link CodeType}.\n@@ -7,1 +7,1 @@\n-        permits CodeElement, Value, TypeElement {\n+        permits CodeElement, Value, CodeType {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/CodeItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+package java.lang.reflect.code;\n+\n+import java.lang.reflect.code.type.CodeTypeFactory;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * A code (model) type, that defines a set of values.\n+ * <p>\n+ * A code type can be assigned to a {@link Value value} in a code model,\n+ * and implies the value is a member of the type's set.\n+ * <p>\n+ * The {@code equals} method should be used to check if two code types\n+ * are equal to each other.\n+ * @apiNote\n+ * Code model types enable reasoning statically about a code model,\n+ * approximating run time behaviour.\n+ *\/\n+public non-sealed interface CodeType extends CodeItem {\n+    \/\/ @@@ Common useful methods generally associated with properties of a type\n+    \/\/ e.g., arguments, is an array etc. (dimensions)\n+\n+    \/**\n+     * A code type's externalized content in structured symbolic form.\n+     * <p>\n+     * A {@link CodeType code type} can be constructed from an externalized code type\n+     * using a {@link CodeTypeFactory}.\n+     *\n+     * @param identifier the externalized type's identifier\n+     * @param arguments  the externalized type's arguments\n+     *\/\n+    record ExternalizedCodeType(String identifier, List<ExternalizedCodeType> arguments) {\n+\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        public ExternalizedCodeType {\n+            arguments = List.copyOf(arguments);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return toString(this);\n+        }\n+\n+        static String toString(ExternalizedCodeType t) {\n+            if (t.arguments.isEmpty()) {\n+                return t.identifier;\n+            }\n+\n+            \/\/ Unpack array-like identifier [+\n+            int dimensions = 0;\n+            if (t.arguments.size() == 1) {\n+                dimensions = dimensions(t.identifier);\n+                if (dimensions > 0) {\n+                    t = t.arguments.getFirst();\n+                }\n+            }\n+\n+            StringBuilder s = new StringBuilder();\n+            s.append(t.identifier);\n+            if (!t.arguments.isEmpty()) {\n+                String args = t.arguments.stream()\n+                        .map(Object::toString)\n+                        .collect(Collectors.joining(\", \", \"<\", \">\"));\n+                s.append(args);\n+            }\n+\n+            \/\/ Write out array-like syntax at end []+\n+            if (dimensions > 0) {\n+                s.append(\"[]\".repeat(dimensions));\n+            }\n+\n+            return s.toString();\n+        }\n+\n+        static int dimensions(String identifier) {\n+            if (!identifier.isEmpty() && identifier.charAt(0) == '[') {\n+                for (int i = 1; i < identifier.length(); i++) {\n+                    if (identifier.charAt(i) != '[') {\n+                        return 0;\n+                    }\n+                }\n+                return identifier.length();\n+            } else {\n+                return 0;\n+            }\n+        }\n+\n+        \/\/ Factories\n+\n+        \/**\n+         * Parses a string as an externalized code type.\n+         * <p>\n+         * For any given code type, {@code ct}, the following\n+         * expression returns {@code true}.\n+         * {@snippet lang=java\n+         * ct.equals(CodeType.ofString(ct.toString()));\n+         * }\n+         * @param s the string\n+         * @return the externalized code type.\n+         *\/\n+        \/\/ Copied code in jdk.compiler module throws UOE\n+        public static ExternalizedCodeType ofString(String s) {\n+\/*__throw new UnsupportedOperationException();__*\/        return java.lang.reflect.code.parser.impl.DescParser.parseExternalizedCodeType(s);\n+        }\n+    }\n+\n+    \/**\n+     * Externalize this code type's content.\n+     *\n+     * @return the code type's content\n+     * @throws UnsupportedOperationException if the type is not externalizable\n+     *\/\n+    ExternalizedCodeType externalize();\n+\n+    @Override\n+    String toString();\n+\n+    @Override\n+    boolean equals(Object o);\n+\n+    @Override\n+    int hashCode();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/CodeType.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -367,1 +367,1 @@\n-    public abstract TypeElement resultType();\n+    public abstract CodeType resultType();\n@@ -378,1 +378,1 @@\n-        List<TypeElement> operandTypes = operands.stream().map(Value::type).toList();\n+        List<CodeType> operandTypes = operands.stream().map(Value::type).toList();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,38 +0,0 @@\n-package java.lang.reflect.code;\n-\n-import java.lang.reflect.code.type.TypeDefinition;\n-import java.util.Optional;\n-\n-\/**\n- * A type, that defines a set of values.\n- * <p>\n- * A type can be assigned to a {@link Value value} in a code model,\n- * and implies the value is a member of the type's set.\n- * <p>\n- * The {@code equals} method should be used to check if two type elements\n- * are equal to each other.\n- * @apiNote\n- * Code model types enable reasoning statically about a code model,\n- * approximating run time behaviour.\n- *\/\n-public non-sealed interface TypeElement extends CodeItem {\n-    \/\/ @@@ Common useful methods generally associated with properties of a type\n-    \/\/ e.g., arguments, is an array etc. (dimensions)\n-\n-    \/**\n-     * Converts this type element to a type definition.\n-     *\n-     * @return the type definition\n-     * @throws UnsupportedOperationException if the type element is not convertible\n-     *\/\n-    TypeDefinition toTypeDefinition();\n-\n-    @Override\n-    String toString();\n-\n-    @Override\n-    boolean equals(Object o);\n-\n-    @Override\n-    int hashCode();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/TypeElement.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -39,1 +39,1 @@\n-    final TypeElement type;\n+    final CodeType type;\n@@ -44,1 +44,1 @@\n-    Value(Block block, TypeElement type) {\n+    Value(Block block, CodeType type) {\n@@ -70,1 +70,1 @@\n-    public TypeElement type() {\n+    public CodeType type() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Value.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -387,1 +387,1 @@\n-    private static ClassDesc toClassDesc(TypeElement t) {\n+    private static ClassDesc toClassDesc(CodeType t) {\n@@ -396,1 +396,1 @@\n-    private static TypeKind toTypeKind(TypeElement t) {\n+    private static TypeKind toTypeKind(CodeType t) {\n@@ -400,1 +400,1 @@\n-                TypeElement bt = jt.toBasicType();\n+                CodeType bt = jt.toBasicType();\n@@ -525,1 +525,1 @@\n-                final TypeElement oprType = o.resultType();\n+                final CodeType oprType = o.resultType();\n@@ -955,1 +955,1 @@\n-        TypeElement right = op.operands().getLast().type();\n+        CodeType right = op.operands().getLast().type();\n@@ -1136,1 +1136,1 @@\n-        List<TypeElement> params = captures.stream()\n+        List<CodeType> params = captures.stream()\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -79,1 +79,1 @@\n-    private static TypeElement toTypeElement(StackMapFrameInfo.VerificationTypeInfo vti) {\n+    private static CodeType toCodeType(StackMapFrameInfo.VerificationTypeInfo vti) {\n@@ -96,1 +96,1 @@\n-    private TypeElement toTypeElement(ClassEntry ce) {\n+    private CodeType toCodeType(ClassEntry ce) {\n@@ -119,1 +119,1 @@\n-                        smfi -> entryBlock.block(smfi.stack().stream().map(BytecodeLift::toTypeElement).toList())))).orElse(Map.of());\n+                        smfi -> entryBlock.block(smfi.stack().stream().map(BytecodeLift::toCodeType).toList())))).orElse(Map.of());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -196,1 +196,1 @@\n-                TypeElement et = args.get(0).type();\n+                CodeType et = args.get(0).type();\n@@ -625,1 +625,1 @@\n-    static Object isInstance(MethodHandles.Lookup l, TypeElement d, Object v) {\n+    static Object isInstance(MethodHandles.Lookup l, CodeType d, Object v) {\n@@ -630,1 +630,1 @@\n-    static Object cast(MethodHandles.Lookup l, TypeElement d, Object v) {\n+    static Object cast(MethodHandles.Lookup l, CodeType d, Object v) {\n@@ -659,1 +659,1 @@\n-    public static Class<?> resolveToClass(MethodHandles.Lookup l, TypeElement d) {\n+    public static Class<?> resolveToClass(MethodHandles.Lookup l, CodeType d) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -187,1 +187,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -218,1 +218,1 @@\n-        FuncCallOp(String funcName, TypeElement resultType, List<Value> args) {\n+        FuncCallOp(String funcName, CodeType resultType, List<Value> args) {\n@@ -237,1 +237,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -322,1 +322,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -408,1 +408,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -422,1 +422,1 @@\n-            final TypeElement functionalInterface;\n+            final CodeType functionalInterface;\n@@ -424,1 +424,1 @@\n-            Builder(Body.Builder ancestorBody, FunctionType funcType, TypeElement functionalInterface) {\n+            Builder(Body.Builder ancestorBody, FunctionType funcType, CodeType functionalInterface) {\n@@ -439,1 +439,1 @@\n-        final TypeElement functionalInterface;\n+        final CodeType functionalInterface;\n@@ -461,1 +461,1 @@\n-        LambdaOp(TypeElement functionalInterface, Body.Builder bodyC) {\n+        LambdaOp(CodeType functionalInterface, Body.Builder bodyC) {\n@@ -479,1 +479,1 @@\n-        public TypeElement functionalInterface() {\n+        public CodeType functionalInterface() {\n@@ -508,1 +508,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -732,1 +732,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -764,1 +764,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -814,1 +814,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -852,1 +852,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -896,1 +896,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -937,1 +937,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -987,1 +987,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1040,1 +1040,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1107,1 +1107,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1122,1 +1122,1 @@\n-        final TypeElement type;\n+        final CodeType type;\n@@ -1134,1 +1134,1 @@\n-        static Object processConstantValue(TypeElement t, Object value) {\n+        static Object processConstantValue(CodeType t, Object value) {\n@@ -1214,1 +1214,1 @@\n-        ConstantOp(TypeElement type, Object value) {\n+        ConstantOp(CodeType type, Object value) {\n@@ -1233,1 +1233,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1256,1 +1256,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -1292,1 +1292,1 @@\n-        InvokeOp(TypeElement resultType, MethodRef invokeDescriptor, List<Value> args) {\n+        InvokeOp(CodeType resultType, MethodRef invokeDescriptor, List<Value> args) {\n@@ -1315,1 +1315,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1328,1 +1328,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -1347,1 +1347,1 @@\n-        ConvOp(TypeElement resultType, Value arg) {\n+        ConvOp(CodeType resultType, Value arg) {\n@@ -1354,1 +1354,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1368,1 +1368,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -1374,2 +1374,2 @@\n-                            TypeElement te = CoreTypeFactory.CORE_TYPE_FACTORY\n-                                    .constructType(TypeDefinition.ofString(s));\n+                            CodeType te = CoreTypeFactory.CORE_TYPE_FACTORY\n+                                    .constructType(CodeType.ExternalizedCodeType.ofString(s));\n@@ -1410,1 +1410,1 @@\n-        NewOp(TypeElement resultType, FunctionType constructorType, List<Value> args) {\n+        NewOp(CodeType resultType, FunctionType constructorType, List<Value> args) {\n@@ -1424,1 +1424,1 @@\n-        public TypeElement type() {\n+        public CodeType type() {\n@@ -1433,1 +1433,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1490,1 +1490,1 @@\n-            final TypeElement resultType;\n+            final CodeType resultType;\n@@ -1525,1 +1525,1 @@\n-            FieldLoadOp(TypeElement resultType, FieldRef descriptor, Value receiver) {\n+            FieldLoadOp(CodeType resultType, FieldRef descriptor, Value receiver) {\n@@ -1532,1 +1532,1 @@\n-            FieldLoadOp(TypeElement resultType, FieldRef descriptor) {\n+            FieldLoadOp(CodeType resultType, FieldRef descriptor) {\n@@ -1539,1 +1539,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -1593,1 +1593,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -1625,1 +1625,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1663,1 +1663,1 @@\n-        static TypeElement resultType(Value array, Value v) {\n+        static CodeType resultType(Value array, Value v) {\n@@ -1669,1 +1669,1 @@\n-            TypeElement componentType = arrayType.componentType();\n+            CodeType componentType = arrayType.componentType();\n@@ -1703,1 +1703,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -1736,1 +1736,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -1751,1 +1751,1 @@\n-        final TypeElement typeDescriptor;\n+        final CodeType typeDescriptor;\n@@ -1758,1 +1758,1 @@\n-            TypeElement typeDescriptor = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n+            CodeType typeDescriptor = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n@@ -1767,1 +1767,1 @@\n-        InstanceOfOp(ExternalizedOp def, TypeElement typeDescriptor) {\n+        InstanceOfOp(ExternalizedOp def, CodeType typeDescriptor) {\n@@ -1784,1 +1784,1 @@\n-        InstanceOfOp(TypeElement t, Value v) {\n+        InstanceOfOp(CodeType t, Value v) {\n@@ -1798,1 +1798,1 @@\n-        public TypeElement type() {\n+        public CodeType type() {\n@@ -1803,1 +1803,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1816,2 +1816,2 @@\n-        final TypeElement resultType;\n-        final TypeElement typeDescriptor;\n+        final CodeType resultType;\n+        final CodeType typeDescriptor;\n@@ -1824,1 +1824,1 @@\n-            TypeElement type = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n+            CodeType type = def.extractAttributeValue(ATTRIBUTE_TYPE_DESCRIPTOR, true,\n@@ -1833,1 +1833,1 @@\n-        CastOp(ExternalizedOp def, TypeElement typeDescriptor) {\n+        CastOp(ExternalizedOp def, CodeType typeDescriptor) {\n@@ -1852,1 +1852,1 @@\n-        CastOp(TypeElement resultType, TypeElement t, Value v) {\n+        CastOp(CodeType resultType, CodeType t, Value v) {\n@@ -1866,1 +1866,1 @@\n-        public TypeElement type() {\n+        public CodeType type() {\n@@ -1871,1 +1871,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1912,1 +1912,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -1950,1 +1950,1 @@\n-        VarOp(String varName, TypeElement type, Value init) {\n+        VarOp(String varName, CodeType type, Value init) {\n@@ -1972,1 +1972,1 @@\n-        public TypeElement varType() {\n+        public CodeType varType() {\n@@ -1977,1 +1977,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2049,1 +2049,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -2092,1 +2092,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -2125,1 +2125,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2194,1 +2194,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2266,1 +2266,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2271,1 +2271,1 @@\n-            List<TypeElement> tupleComponentTypes = new ArrayList<>(tupleType.componentTypes());\n+            List<CodeType> tupleComponentTypes = new ArrayList<>(tupleType.componentTypes());\n@@ -2287,1 +2287,1 @@\n-        TypeElement EXCEPTION_REGION_TYPE = JavaType.ofNominalDescriptor(ClassDesc.of(\"ExceptionRegion\"));\n+        CodeType EXCEPTION_REGION_TYPE = JavaType.ofNominalDescriptor(ClassDesc.of(\"ExceptionRegion\"));\n@@ -2348,1 +2348,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2420,1 +2420,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2454,1 +2454,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2525,1 +2525,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2551,1 +2551,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2598,1 +2598,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -3216,1 +3216,1 @@\n-                                          FunctionType funcType, TypeElement functionalInterface) {\n+                                          FunctionType funcType, CodeType functionalInterface) {\n@@ -3227,1 +3227,1 @@\n-    public static LambdaOp lambda(TypeElement functionalInterface, Body.Builder body) {\n+    public static LambdaOp lambda(CodeType functionalInterface, Body.Builder body) {\n@@ -3408,1 +3408,1 @@\n-    public static ConstantOp constant(TypeElement type, Object value) {\n+    public static ConstantOp constant(CodeType type, Object value) {\n@@ -3442,1 +3442,1 @@\n-    public static InvokeOp invoke(TypeElement returnType, MethodRef invokeDescriptor, Value... args) {\n+    public static InvokeOp invoke(CodeType returnType, MethodRef invokeDescriptor, Value... args) {\n@@ -3454,1 +3454,1 @@\n-    public static InvokeOp invoke(TypeElement returnType, MethodRef invokeDescriptor, List<Value> args) {\n+    public static InvokeOp invoke(CodeType returnType, MethodRef invokeDescriptor, List<Value> args) {\n@@ -3465,1 +3465,1 @@\n-    public static ConvOp conv(TypeElement to, Value from) {\n+    public static ConvOp conv(CodeType to, Value from) {\n@@ -3499,1 +3499,1 @@\n-    public static NewOp _new(TypeElement returnType, FunctionType constructorType,\n+    public static NewOp _new(CodeType returnType, FunctionType constructorType,\n@@ -3512,1 +3512,1 @@\n-    public static NewOp _new(TypeElement returnType, FunctionType constructorType,\n+    public static NewOp _new(CodeType returnType, FunctionType constructorType,\n@@ -3524,1 +3524,1 @@\n-    public static NewOp newArray(TypeElement arrayType, Value length) {\n+    public static NewOp newArray(CodeType arrayType, Value length) {\n@@ -3549,1 +3549,1 @@\n-    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeElement resultType, FieldRef descriptor, Value receiver) {\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(CodeType resultType, FieldRef descriptor, Value receiver) {\n@@ -3570,1 +3570,1 @@\n-    public static FieldAccessOp.FieldLoadOp fieldLoad(TypeElement resultType, FieldRef descriptor) {\n+    public static FieldAccessOp.FieldLoadOp fieldLoad(CodeType resultType, FieldRef descriptor) {\n@@ -3637,1 +3637,1 @@\n-    public static InstanceOfOp instanceOf(TypeElement t, Value v) {\n+    public static InstanceOfOp instanceOf(CodeType t, Value v) {\n@@ -3648,1 +3648,1 @@\n-    public static CastOp cast(TypeElement resultType, Value v) {\n+    public static CastOp cast(CodeType resultType, Value v) {\n@@ -3660,1 +3660,1 @@\n-    public static CastOp cast(TypeElement resultType, JavaType t, Value v) {\n+    public static CastOp cast(CodeType resultType, JavaType t, Value v) {\n@@ -3693,1 +3693,1 @@\n-    public static VarOp var(String name, TypeElement type, Value init) {\n+    public static VarOp var(String name, CodeType type, Value init) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":92,"deletions":92,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -157,1 +157,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -283,1 +283,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -365,1 +365,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -456,1 +456,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -681,1 +681,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -693,1 +693,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -723,1 +723,1 @@\n-        JavaSwitchExpressionOp(TypeElement resultType, Value target, List<Body.Builder> bodyCs) {\n+        JavaSwitchExpressionOp(CodeType resultType, Value target, List<Body.Builder> bodyCs) {\n@@ -747,1 +747,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -778,1 +778,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -791,1 +791,1 @@\n-            final List<? extends TypeElement> initTypes;\n+            final List<? extends CodeType> initTypes;\n@@ -794,1 +794,1 @@\n-                        List<? extends TypeElement> initTypes) {\n+                        List<? extends CodeType> initTypes) {\n@@ -810,1 +810,1 @@\n-            final List<? extends TypeElement> initTypes;\n+            final List<? extends CodeType> initTypes;\n@@ -814,1 +814,1 @@\n-                               List<? extends TypeElement> initTypes,\n+                               List<? extends CodeType> initTypes,\n@@ -832,1 +832,1 @@\n-            final List<? extends TypeElement> initTypes;\n+            final List<? extends CodeType> initTypes;\n@@ -837,1 +837,1 @@\n-                                 List<? extends TypeElement> initTypes,\n+                                 List<? extends CodeType> initTypes,\n@@ -857,1 +857,1 @@\n-            final List<? extends TypeElement> initTypes;\n+            final List<? extends CodeType> initTypes;\n@@ -863,1 +863,1 @@\n-                               List<? extends TypeElement> initTypes,\n+                               List<? extends CodeType> initTypes,\n@@ -1037,1 +1037,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1050,2 +1050,2 @@\n-            final TypeElement iterableType;\n-            final TypeElement elementType;\n+            final CodeType iterableType;\n+            final CodeType elementType;\n@@ -1054,1 +1054,1 @@\n-                              TypeElement iterableType, TypeElement elementType) {\n+                              CodeType iterableType, CodeType elementType) {\n@@ -1071,1 +1071,1 @@\n-            final TypeElement elementType;\n+            final CodeType elementType;\n@@ -1075,1 +1075,1 @@\n-                              TypeElement elementType, Body.Builder expression) {\n+                              CodeType elementType, Body.Builder expression) {\n@@ -1085,1 +1085,1 @@\n-            public BodyBuilder definition(TypeElement bodyElementType, Consumer<Block.Builder> c) {\n+            public BodyBuilder definition(CodeType bodyElementType, Consumer<Block.Builder> c) {\n@@ -1096,1 +1096,1 @@\n-            final TypeElement elementType;\n+            final CodeType elementType;\n@@ -1101,1 +1101,1 @@\n-                        TypeElement elementType, Body.Builder expression, Body.Builder definition) {\n+                        CodeType elementType, Body.Builder expression, Body.Builder definition) {\n@@ -1297,1 +1297,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1441,1 +1441,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1585,1 +1585,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1639,1 +1639,1 @@\n-            TypeElement oprType = cop.result().type();\n+            CodeType oprType = cop.result().type();\n@@ -1697,1 +1697,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1820,1 +1820,1 @@\n-        final TypeElement resultType;\n+        final CodeType resultType;\n@@ -1851,1 +1851,1 @@\n-        JavaConditionalExpressionOp(TypeElement expressionType, List<Body.Builder> bodyCs) {\n+        JavaConditionalExpressionOp(CodeType expressionType, List<Body.Builder> bodyCs) {\n@@ -1912,1 +1912,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -1925,1 +1925,1 @@\n-            final List<? extends TypeElement> resourceTypes;\n+            final List<? extends CodeType> resourceTypes;\n@@ -1928,1 +1928,1 @@\n-            BodyBuilder(Body.Builder ancestorBody, List<? extends TypeElement> resourceTypes, Body.Builder resources) {\n+            BodyBuilder(Body.Builder ancestorBody, List<? extends CodeType> resourceTypes, Body.Builder resources) {\n@@ -1957,1 +1957,1 @@\n-            public CatchBuilder _catch(TypeElement exceptionType, Consumer<Block.Builder> c) {\n+            public CatchBuilder _catch(CodeType exceptionType, Consumer<Block.Builder> c) {\n@@ -2355,1 +2355,1 @@\n-        public TypeElement resultType() {\n+        public CodeType resultType() {\n@@ -2369,1 +2369,1 @@\n-     * \/\/ @@@ Replace with types extending from TypeElement\n+     * \/\/ @@@ Replace with types extending from CodeType\n@@ -2400,1 +2400,1 @@\n-        static JavaType bindingType(TypeElement t) {\n+        static JavaType bindingType(CodeType t) {\n@@ -2404,1 +2404,1 @@\n-        static JavaType recordType(TypeElement t) {\n+        static JavaType recordType(CodeType t) {\n@@ -2408,1 +2408,1 @@\n-        static TypeElement targetType(TypeElement t) {\n+        static CodeType targetType(CodeType t) {\n@@ -2446,1 +2446,1 @@\n-            final TypeElement resultType;\n+            final CodeType resultType;\n@@ -2477,1 +2477,1 @@\n-            BindingPatternOp(TypeElement targetType, String bindingName) {\n+            BindingPatternOp(CodeType targetType, String bindingName) {\n@@ -2495,1 +2495,1 @@\n-            public TypeElement targetType() {\n+            public CodeType targetType() {\n@@ -2500,1 +2500,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -2563,1 +2563,1 @@\n-            public TypeElement targetType() {\n+            public CodeType targetType() {\n@@ -2568,1 +2568,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -2686,1 +2686,1 @@\n-                TypeElement targetType = rpOp.targetType();\n+                CodeType targetType = rpOp.targetType();\n@@ -2714,1 +2714,1 @@\n-                TypeElement targetType = bpOp.targetType();\n+                CodeType targetType = bpOp.targetType();\n@@ -2731,1 +2731,1 @@\n-            public TypeElement resultType() {\n+            public CodeType resultType() {\n@@ -2857,1 +2857,1 @@\n-    public static JavaSwitchExpressionOp switchExpression(TypeElement resultType, Value target,\n+    public static JavaSwitchExpressionOp switchExpression(CodeType resultType, Value target,\n@@ -2878,1 +2878,1 @@\n-    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, TypeElement... initTypes) {\n+    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, CodeType... initTypes) {\n@@ -2889,1 +2889,1 @@\n-    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, List<? extends TypeElement> initTypes) {\n+    public static JavaForOp.InitBuilder _for(Body.Builder ancestorBody, List<? extends CodeType> initTypes) {\n@@ -2922,1 +2922,1 @@\n-                                                                  TypeElement iterableType, TypeElement elementType) {\n+                                                                  CodeType iterableType, CodeType elementType) {\n@@ -3037,1 +3037,1 @@\n-    public static JavaConditionalExpressionOp conditionalExpression(TypeElement expressionType,\n+    public static JavaConditionalExpressionOp conditionalExpression(CodeType expressionType,\n@@ -3075,1 +3075,1 @@\n-                                                         List<? extends TypeElement> resourceTypes,\n+                                                         List<? extends CodeType> resourceTypes,\n@@ -3126,1 +3126,1 @@\n-    public static PatternOps.BindingPatternOp bindingPattern(TypeElement type, String bindingName) {\n+    public static PatternOps.BindingPatternOp bindingPattern(CodeType type, String bindingName) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":59,"deletions":59,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                                 TypeElement resultType,\n+                                 CodeType resultType,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalizableOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-import java.lang.reflect.code.Block;\n-import java.lang.reflect.code.Body;\n+import java.lang.reflect.code.*;\n@@ -33,1 +32,0 @@\n-import java.lang.reflect.code.type.TypeDefinition;\n@@ -35,2 +33,0 @@\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.Value;\n@@ -42,1 +38,2 @@\n-import java.lang.reflect.code.type.TypeElementFactory;\n+import java.lang.reflect.code.type.CodeTypeFactory;\n+import java.lang.reflect.code.type.PrimitiveType;\n@@ -128,0 +125,2 @@\n+    static final CodeType.ExternalizedCodeType VOID = PrimitiveType.VOID.externalize();\n+\n@@ -140,1 +139,1 @@\n-    public static List<Op> fromStream(OpFactory opFactory, TypeElementFactory typeFactory, InputStream in) throws IOException {\n+    public static List<Op> fromStream(OpFactory opFactory, CodeTypeFactory typeFactory, InputStream in) throws IOException {\n@@ -156,1 +155,1 @@\n-    public static List<Op> fromString(OpFactory opFactory, TypeElementFactory typeFactory, String in) {\n+    public static List<Op> fromString(OpFactory opFactory, CodeTypeFactory typeFactory, String in) {\n@@ -174,1 +173,1 @@\n-    static List<Op> parse(OpFactory opFactory, TypeElementFactory typeFactory, String in) {\n+    static List<Op> parse(OpFactory opFactory, CodeTypeFactory typeFactory, String in) {\n@@ -181,1 +180,1 @@\n-        return opNodes.stream().map(n -> nodeToOp(n, TypeDefinition.VOID, c, null)).toList();\n+        return opNodes.stream().map(n -> nodeToOp(n, VOID, c, null)).toList();\n@@ -188,1 +187,1 @@\n-        final TypeElementFactory typeFactory;\n+        final CodeTypeFactory typeFactory;\n@@ -200,1 +199,1 @@\n-        Context(OpFactory opFactory, TypeElementFactory typeFactory) {\n+        Context(OpFactory opFactory, CodeTypeFactory typeFactory) {\n@@ -241,1 +240,1 @@\n-    static Op nodeToOp(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n+    static Op nodeToOp(OpNode opNode, CodeType.ExternalizedCodeType rtype, Context c, Body.Builder ancestorBody) {\n@@ -246,1 +245,1 @@\n-    static ExternalizableOp.ExternalizedOp nodeToOpDef(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n+    static ExternalizableOp.ExternalizedOp nodeToOpDef(OpNode opNode, CodeType.ExternalizedCodeType rtype, Context c, Body.Builder ancestorBody) {\n@@ -300,1 +299,1 @@\n-                    b.op(nodeToOp(on, TypeDefinition.VOID, c, body));\n+                    b.op(nodeToOp(on, VOID, c, body));\n@@ -326,1 +325,1 @@\n-    record BodyNode(TypeDefinition rtype,\n+    record BodyNode(CodeType.ExternalizedCodeType rtype,\n@@ -336,1 +335,1 @@\n-                     TypeDefinition type) {\n+                     CodeType.ExternalizedCodeType type) {\n@@ -518,1 +517,1 @@\n-        TypeDefinition rtype = parseTypeDef();\n+        CodeType.ExternalizedCodeType rtype = parseExternalizedCodeType();\n@@ -556,1 +555,1 @@\n-        TypeDefinition type = parseTypeDef();\n+        CodeType.ExternalizedCodeType type = parseExternalizedCodeType();\n@@ -603,2 +602,2 @@\n-    TypeDefinition parseTypeDef() {\n-        return DescParser.parseTypeDefinition(lexer);\n+    CodeType.ExternalizedCodeType parseExternalizedCodeType() {\n+        return DescParser.parseExternalizedCodeType(lexer);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/OpParser.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -38,1 +38,0 @@\n-import java.util.stream.Collectors;\n@@ -48,1 +47,1 @@\n-    public static TypeDefinition parseTypeDefinition(String desc) {\n+    public static CodeType.ExternalizedCodeType parseExternalizedCodeType(String desc) {\n@@ -51,1 +50,1 @@\n-        return parseTypeDefinition(s);\n+        return parseExternalizedCodeType(s);\n@@ -90,1 +89,1 @@\n-    public static TypeDefinition parseTypeDefinition(Lexer l) {\n+    public static CodeType.ExternalizedCodeType parseExternalizedCodeType(Lexer l) {\n@@ -113,1 +112,1 @@\n-        List<TypeDefinition> args;\n+        List<CodeType.ExternalizedCodeType> args;\n@@ -118,1 +117,1 @@\n-                TypeDefinition arg = parseTypeDefinition(l);\n+                CodeType.ExternalizedCodeType arg = parseExternalizedCodeType(l);\n@@ -135,1 +134,1 @@\n-        TypeDefinition td = new TypeDefinition(identifier.toString(), args);\n+        CodeType.ExternalizedCodeType td = new CodeType.ExternalizedCodeType(identifier.toString(), args);\n@@ -138,1 +137,1 @@\n-            return new TypeDefinition(\"[\".repeat(dims), List.of(td));\n+            return new CodeType.ExternalizedCodeType(\"[\".repeat(dims), List.of(td));\n@@ -144,2 +143,2 @@\n-    static TypeElement parseTypeElement(Lexer l) {\n-        TypeDefinition typeDesc = parseTypeDefinition(l);\n+    static CodeType parseCodeType(Lexer l) {\n+        CodeType.ExternalizedCodeType typeDesc = parseExternalizedCodeType(l);\n@@ -151,1 +150,1 @@\n-        List<TypeElement> ptypes = new ArrayList<>();\n+        List<CodeType> ptypes = new ArrayList<>();\n@@ -154,1 +153,1 @@\n-            ptypes.add(parseTypeElement(l));\n+            ptypes.add(parseCodeType(l));\n@@ -156,1 +155,1 @@\n-                ptypes.add(parseTypeElement(l));\n+                ptypes.add(parseCodeType(l));\n@@ -160,1 +159,1 @@\n-        TypeElement rtype = parseTypeElement(l);\n+        CodeType rtype = parseCodeType(l);\n@@ -165,1 +164,1 @@\n-        TypeElement refType = parseTypeElement(l);\n+        CodeType refType = parseCodeType(l);\n@@ -185,1 +184,1 @@\n-        TypeElement refType = parseTypeElement(l);\n+        CodeType refType = parseCodeType(l);\n@@ -203,1 +202,1 @@\n-                TypeElement componentType = parseTypeElement(l);\n+                CodeType componentType = parseCodeType(l);\n@@ -210,1 +209,1 @@\n-        TypeElement recordType = parseTypeElement(l);\n+        CodeType recordType = parseCodeType(l);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/impl\/DescParser.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -61,1 +61,1 @@\n-    public TypeDefinition toTypeDefinition() {\n+    public ExternalizedCodeType externalize() {\n@@ -63,1 +63,1 @@\n-        TypeElement current = this;\n+        CodeType current = this;\n@@ -68,1 +68,1 @@\n-        return new TypeDefinition(\"[\".repeat(dims), List.of(current.toTypeDefinition()));\n+        return new ExternalizedCodeType(\"[\".repeat(dims), List.of(current.externalize()));\n@@ -73,1 +73,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ArrayType.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -56,3 +56,3 @@\n-    public TypeDefinition toTypeDefinition() {\n-        List<TypeDefinition> args = typeArguments.stream()\n-                .map(TypeElement::toTypeDefinition)\n+    public ExternalizedCodeType externalize() {\n+        List<ExternalizedCodeType> args = typeArguments.stream()\n+                .map(CodeType::externalize)\n@@ -61,1 +61,1 @@\n-        TypeDefinition td = new TypeDefinition(type, args);\n+        ExternalizedCodeType td = new ExternalizedCodeType(type, args);\n@@ -67,1 +67,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ClassType.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+package java.lang.reflect.code.type;\n+\n+import java.lang.reflect.code.CodeType;\n+\n+\/**\n+ * A code type factory for construction a {@link CodeType} from its\n+ * {@link CodeType.ExternalizedCodeType external content}.\n+ *\/\n+@FunctionalInterface\n+public interface CodeTypeFactory {\n+\n+    \/**\n+     * Constructs a {@link CodeType} from its\n+     * {@link CodeType.ExternalizedCodeType external content}.\n+     * <p>\n+     * If there is no mapping from the external content to a code\n+     * type then this method returns {@code null}.\n+     *\n+     * @param tree the externalized code type.\n+     * @return the code type.\n+     *\/\n+    CodeType constructType(CodeType.ExternalizedCodeType tree);\n+\n+    \/**\n+     * Compose this code type factory with another code type factory.\n+     * <p>\n+     * If there is no mapping in this code type factory then the result\n+     * of the other code type factory is returned.\n+     *\n+     * @param after the other code type factory.\n+     * @return the composed code type factory.\n+     *\/\n+    default CodeTypeFactory andThen(CodeTypeFactory after) {\n+        return t -> {\n+            CodeType te = constructType(t);\n+            return te != null ? te : after.constructType(t);\n+        };\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/CodeTypeFactory.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -23,3 +23,3 @@\n-    public static TypeElementFactory codeModelTypeFactory(TypeElementFactory f) {\n-        class CodeModelFactory implements TypeElementFactory {\n-            final TypeElementFactory thisThenF = this.andThen(f);\n+    public static CodeTypeFactory codeModelTypeFactory(CodeTypeFactory f) {\n+        class CodeModelFactory implements CodeTypeFactory {\n+            final CodeTypeFactory thisThenF = this.andThen(f);\n@@ -28,1 +28,1 @@\n-            public TypeElement constructType(TypeDefinition tree) {\n+            public CodeType constructType(CodeType.ExternalizedCodeType tree) {\n@@ -35,1 +35,1 @@\n-                        TypeElement v = thisThenF.constructType(tree.arguments().getFirst());\n+                        CodeType v = thisThenF.constructType(tree.arguments().getFirst());\n@@ -46,3 +46,3 @@\n-                        List<TypeElement> cs = new ArrayList<>(tree.arguments().size());\n-                        for (TypeDefinition child : tree.arguments()) {\n-                            TypeElement c = thisThenF.constructType(child);\n+                        List<CodeType> cs = new ArrayList<>(tree.arguments().size());\n+                        for (CodeType.ExternalizedCodeType child : tree.arguments()) {\n+                            CodeType c = thisThenF.constructType(child);\n@@ -61,1 +61,1 @@\n-                        TypeElement rt = thisThenF.constructType(tree.arguments().getFirst());\n+                        CodeType rt = thisThenF.constructType(tree.arguments().getFirst());\n@@ -65,3 +65,3 @@\n-                        List<TypeElement> pts = new ArrayList<>(tree.arguments().size() - 1);\n-                        for (TypeDefinition child : tree.arguments().subList(1, tree.arguments().size())) {\n-                            TypeElement c = thisThenF.constructType(child);\n+                        List<CodeType> pts = new ArrayList<>(tree.arguments().size() - 1);\n+                        for (CodeType.ExternalizedCodeType child : tree.arguments().subList(1, tree.arguments().size())) {\n+                            CodeType c = thisThenF.constructType(child);\n@@ -91,1 +91,1 @@\n-    public static final TypeElementFactory JAVA_TYPE_FACTORY = new TypeElementFactory() {\n+    public static final CodeTypeFactory JAVA_TYPE_FACTORY = new CodeTypeFactory() {\n@@ -93,1 +93,1 @@\n-        public TypeElement constructType(TypeDefinition tree) {\n+        public CodeType constructType(CodeType.ExternalizedCodeType tree) {\n@@ -111,2 +111,2 @@\n-            for (TypeDefinition child : tree.arguments()) {\n-                TypeElement t = JAVA_TYPE_FACTORY.constructType(child);\n+            for (CodeType.ExternalizedCodeType child : tree.arguments()) {\n+                CodeType t = JAVA_TYPE_FACTORY.constructType(child);\n@@ -132,1 +132,1 @@\n-                            (ClassType)constructType(parseTypeDef(parts[0])),\n+                            (ClassType)constructType(parseExternalizedCodeType(parts[0])),\n@@ -167,1 +167,1 @@\n-    public static final TypeElementFactory CORE_TYPE_FACTORY = codeModelTypeFactory(JAVA_TYPE_FACTORY);\n+    public static final CodeTypeFactory CORE_TYPE_FACTORY = codeModelTypeFactory(JAVA_TYPE_FACTORY);\n@@ -175,2 +175,2 @@\n-    static TypeDefinition parseTypeDef(String desc) {\n-\/*__throw new UnsupportedOperationException();__*\/        return java.lang.reflect.code.parser.impl.DescParser.parseTypeDefinition(desc);\n+    static CodeType.ExternalizedCodeType parseExternalizedCodeType(String desc) {\n+\/*__throw new UnsupportedOperationException();__*\/        return java.lang.reflect.code.parser.impl.DescParser.parseExternalizedCodeType(desc);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/CoreTypeFactory.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -38,1 +38,1 @@\n-    TypeElement refType();\n+    CodeType refType();\n@@ -42,1 +42,1 @@\n-    TypeElement type();\n+    CodeType type();\n@@ -60,1 +60,1 @@\n-    static FieldRef field(TypeElement refType, String name, TypeElement type) {\n+    static FieldRef field(CodeType refType, String name, CodeType type) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/FieldRef.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -6,1 +6,0 @@\n-import java.util.stream.Collectors;\n@@ -12,1 +11,1 @@\n-public final class FunctionType implements TypeElement {\n+public final class FunctionType implements CodeType {\n@@ -22,2 +21,2 @@\n-    final TypeElement returnType;\n-    final List<TypeElement> parameterTypes;\n+    final CodeType returnType;\n+    final List<CodeType> parameterTypes;\n@@ -25,1 +24,1 @@\n-    FunctionType(TypeElement returnType, List<? extends TypeElement> parameterTypes) {\n+    FunctionType(CodeType returnType, List<? extends CodeType> parameterTypes) {\n@@ -33,1 +32,1 @@\n-    public TypeElement returnType() {\n+    public CodeType returnType() {\n@@ -40,1 +39,1 @@\n-    public List<TypeElement> parameterTypes() {\n+    public List<CodeType> parameterTypes() {\n@@ -45,2 +44,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME,\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME,\n@@ -48,1 +47,1 @@\n-                        .map(TypeElement::toTypeDefinition).toList());\n+                        .map(CodeType::externalize).toList());\n@@ -53,1 +52,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n@@ -78,1 +77,1 @@\n-    public static FunctionType functionType(TypeElement returnType, List<? extends TypeElement> parameterTypes) {\n+    public static FunctionType functionType(CodeType returnType, List<? extends CodeType> parameterTypes) {\n@@ -90,1 +89,1 @@\n-    public static FunctionType functionType(TypeElement returnType, TypeElement... parameterTypes) {\n+    public static FunctionType functionType(CodeType returnType, CodeType... parameterTypes) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/FunctionType.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -38,2 +38,2 @@\n-public sealed interface JavaType extends TypeElement permits ClassType, ArrayType,\n-                                                             PrimitiveType, WildcardType, TypeVarRef {\n+public sealed interface JavaType extends CodeType permits ClassType, ArrayType,\n+        PrimitiveType, WildcardType, TypeVarRef {\n@@ -258,1 +258,1 @@\n-\/*__throw new UnsupportedOperationException();__*\/        return (JavaType) CoreTypeFactory.JAVA_TYPE_FACTORY.constructType(java.lang.reflect.code.parser.impl.DescParser.parseTypeDefinition(s));\n+\/*__throw new UnsupportedOperationException();__*\/        return (JavaType) CoreTypeFactory.JAVA_TYPE_FACTORY.constructType(java.lang.reflect.code.parser.impl.DescParser.parseExternalizedCodeType(s));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -56,1 +56,1 @@\n-    TypeElement refType();\n+    CodeType refType();\n@@ -89,1 +89,1 @@\n-    static MethodRef method(TypeElement refType, String name, FunctionType type) {\n+    static MethodRef method(CodeType refType, String name, FunctionType type) {\n@@ -93,1 +93,1 @@\n-    static MethodRef method(TypeElement refType, String name, TypeElement retType, TypeElement... params) {\n+    static MethodRef method(CodeType refType, String name, CodeType retType, CodeType... params) {\n@@ -97,1 +97,1 @@\n-    static MethodRef method(TypeElement refType, String name, TypeElement retType, List<? extends TypeElement> params) {\n+    static MethodRef method(CodeType refType, String name, CodeType retType, List<? extends CodeType> params) {\n@@ -122,1 +122,1 @@\n-    private static ClassDesc toClassDesc(TypeElement e) {\n+    private static ClassDesc toClassDesc(CodeType e) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/MethodRef.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.code.TypeElement;\n@@ -45,2 +44,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(type, List.of());\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(type, List.of());\n@@ -51,1 +50,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/PrimitiveType.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -37,1 +37,1 @@\n-    TypeElement recordType();\n+    CodeType recordType();\n@@ -44,1 +44,1 @@\n-    record ComponentRef(TypeElement type, String name) {}\n+    record ComponentRef(CodeType type, String name) {}\n@@ -59,1 +59,1 @@\n-    static RecordTypeRef recordType(TypeElement recordType, ComponentRef... components) {\n+    static RecordTypeRef recordType(CodeType recordType, ComponentRef... components) {\n@@ -63,1 +63,1 @@\n-    static RecordTypeRef recordType(TypeElement recordType, List<ComponentRef> components) {\n+    static RecordTypeRef recordType(CodeType recordType, List<ComponentRef> components) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/RecordTypeRef.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -12,1 +12,1 @@\n-public final class TupleType implements TypeElement {\n+public final class TupleType implements CodeType {\n@@ -15,1 +15,1 @@\n-    final List<TypeElement> componentTypes;\n+    final List<CodeType> componentTypes;\n@@ -17,1 +17,1 @@\n-    TupleType(List<? extends TypeElement> componentTypes) {\n+    TupleType(List<? extends CodeType> componentTypes) {\n@@ -24,1 +24,1 @@\n-    public List<TypeElement> componentTypes() {\n+    public List<CodeType> componentTypes() {\n@@ -29,2 +29,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME, componentTypes.stream().map(TypeElement::toTypeDefinition).toList());\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME, componentTypes.stream().map(CodeType::externalize).toList());\n@@ -35,1 +35,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n@@ -55,1 +55,1 @@\n-    public static TupleType tupleType(List<? extends TypeElement> componentTypes) {\n+    public static TupleType tupleType(List<? extends CodeType> componentTypes) {\n@@ -66,1 +66,1 @@\n-    public static TupleType tupleType(TypeElement... componentTypes) {\n+    public static TupleType tupleType(CodeType... componentTypes) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TupleType.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,101 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.type;\n-\n-import java.lang.reflect.code.TypeElement;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-\/**\n- * A type in general symbolic structured form.\n- * <p>\n- * A type definition can be converted to an instance of a type, a {@link TypeElement type element}, using\n- * a {@link TypeElementFactory}.\n- *\/\n-public record TypeDefinition(String identifier, List<TypeDefinition> arguments) {\n-\n-    public static final TypeDefinition VOID = new TypeDefinition(\"void\", List.of());\n-\n-    public TypeDefinition {\n-        arguments = List.copyOf(arguments);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return toString(this);\n-    }\n-\n-    static String toString(TypeDefinition t) {\n-        if (t.arguments.isEmpty()) {\n-            return t.identifier;\n-        }\n-\n-        \/\/ Unpack array-like identifier [+\n-        int dimensions = 0;\n-        if (t.arguments.size() == 1) {\n-            dimensions = dimensions(t.identifier);\n-            if (dimensions > 0) {\n-                t = t.arguments.getFirst();\n-            }\n-        }\n-\n-        StringBuilder s = new StringBuilder();\n-        s.append(t.identifier);\n-        if (!t.arguments.isEmpty()) {\n-            String args = t.arguments.stream()\n-                    .map(Object::toString)\n-                    .collect(Collectors.joining(\", \", \"<\", \">\"));\n-            s.append(args);\n-        }\n-\n-        \/\/ Write out array-like syntax at end []+\n-        if (dimensions > 0) {\n-            s.append(\"[]\".repeat(dimensions));\n-        }\n-\n-        return s.toString();\n-    }\n-\n-    static int dimensions(String identifier) {\n-        if (!identifier.isEmpty() && identifier.charAt(0) == '[') {\n-            for (int i = 1; i < identifier.length(); i++) {\n-                if (identifier.charAt(i) != '[') {\n-                    return 0;\n-                }\n-            }\n-            return identifier.length();\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n-    \/\/ Factories\n-\n-    \/\/ Copied code in jdk.compiler module throws UOE\n-    public static TypeDefinition ofString(String s) {\n-\/*__throw new UnsupportedOperationException();__*\/        return java.lang.reflect.code.parser.impl.DescParser.parseTypeDefinition(s);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TypeDefinition.java","additions":0,"deletions":101,"binary":false,"changes":101,"status":"deleted"},{"patch":"@@ -1,20 +0,0 @@\n-package java.lang.reflect.code.type;\n-\n-import java.lang.reflect.code.TypeElement;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-@FunctionalInterface\n-public interface TypeElementFactory {\n-\/\/    record TypeTree(String name, List<TypeTree> children) {}\n-\n-    \/\/ Use TypeDefinition as temporary intermediate type representation\n-    TypeElement constructType(TypeDefinition tree);\n-\n-    default TypeElementFactory andThen(TypeElementFactory after) {\n-        return t -> {\n-            TypeElement te = constructType(t);\n-            return te != null ? te : after.constructType(t);\n-        };\n-    }\n-}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TypeElementFactory.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"deleted"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Optional;\n@@ -73,3 +72,3 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(String.format(\"#%s::%s\", owner, name),\n-                List.of(bound.toTypeDefinition()));\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(String.format(\"#%s::%s\", owner, name),\n+                List.of(bound.externalize()));\n@@ -80,1 +79,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/TypeVarRef.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -10,1 +10,1 @@\n-public final class VarType implements TypeElement {\n+public final class VarType implements CodeType {\n@@ -13,1 +13,1 @@\n-    final TypeElement variableType;\n+    final CodeType variableType;\n@@ -15,1 +15,1 @@\n-    VarType(TypeElement variableType) {\n+    VarType(CodeType variableType) {\n@@ -22,1 +22,1 @@\n-    public TypeElement valueType() {\n+    public CodeType valueType() {\n@@ -27,2 +27,2 @@\n-    public TypeDefinition toTypeDefinition() {\n-        return new TypeDefinition(NAME, List.of(variableType.toTypeDefinition()));\n+    public ExternalizedCodeType externalize() {\n+        return new ExternalizedCodeType(NAME, List.of(variableType.externalize()));\n@@ -33,1 +33,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n@@ -54,1 +54,1 @@\n-    public static VarType varType(TypeElement valueType) {\n+    public static VarType varType(CodeType valueType) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/VarType.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    public TypeDefinition toTypeDefinition() {\n+    public ExternalizedCodeType externalize() {\n@@ -61,1 +61,1 @@\n-        return new TypeDefinition(prefix, List.of(boundType.toTypeDefinition()));\n+        return new ExternalizedCodeType(prefix, List.of(boundType.externalize()));\n@@ -66,1 +66,1 @@\n-        return toTypeDefinition().toString();\n+        return externalize().toString();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/WildcardType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -36,1 +36,1 @@\n-    final TypeElement refType;\n+    final CodeType refType;\n@@ -38,1 +38,1 @@\n-    final TypeElement type;\n+    final CodeType type;\n@@ -40,1 +40,1 @@\n-    public FieldRefImpl(TypeElement refType, String name, TypeElement type) {\n+    public FieldRefImpl(CodeType refType, String name, CodeType type) {\n@@ -47,1 +47,1 @@\n-    public TypeElement refType() {\n+    public CodeType refType() {\n@@ -57,1 +57,1 @@\n-    public TypeElement type() {\n+    public CodeType type() {\n@@ -105,1 +105,1 @@\n-    static Class<?> resolve(MethodHandles.Lookup l, TypeElement t) throws ReflectiveOperationException {\n+    static Class<?> resolve(MethodHandles.Lookup l, CodeType t) throws ReflectiveOperationException {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/impl\/FieldRefImpl.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -43,1 +43,1 @@\n-    final TypeElement refType;\n+    final CodeType refType;\n@@ -47,1 +47,1 @@\n-    public MethodRefImpl(TypeElement refType, String name, FunctionType type) {\n+    public MethodRefImpl(CodeType refType, String name, FunctionType type) {\n@@ -54,1 +54,1 @@\n-    public TypeElement refType() {\n+    public CodeType refType() {\n@@ -108,1 +108,1 @@\n-    static Class<?> resolve(MethodHandles.Lookup l, TypeElement t) throws ReflectiveOperationException {\n+    static Class<?> resolve(MethodHandles.Lookup l, CodeType t) throws ReflectiveOperationException {\n@@ -126,1 +126,1 @@\n-            type.parameterTypes().stream().map(TypeElement::toString)\n+            type.parameterTypes().stream().map(CodeType::toString)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/impl\/MethodRefImpl.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -36,1 +36,1 @@\n-    final TypeElement recordType;\n+    final CodeType recordType;\n@@ -39,1 +39,1 @@\n-    public RecordTypeRefImpl(TypeElement recordType, List<ComponentRef> components) {\n+    public RecordTypeRefImpl(CodeType recordType, List<ComponentRef> components) {\n@@ -45,1 +45,1 @@\n-    public TypeElement recordType() {\n+    public CodeType recordType() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/impl\/RecordTypeRefImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-    static final MethodRef TYPE_ELEMENT_FACTORY_CONSTRUCT = MethodRef.method(TypeElementFactory.class, \"constructType\",\n-            TypeElement.class, TypeDefinition.class);\n+    static final MethodRef CODE_TYPE_FACTORY_CONSTRUCT = MethodRef.method(CodeTypeFactory.class, \"constructType\",\n+            CodeType.class, ExternalizedCodeType.class);\n@@ -54,2 +54,2 @@\n-    static final MethodRef TYPE_DEFINITION_OF_STRING = MethodRef.method(TypeDefinition.class, \"ofString\",\n-            TypeDefinition.class, String.class);\n+    static final MethodRef EX_CODE_TYPE_OF_STRING = MethodRef.method(ExternalizedCodeType.class, \"ofString\",\n+            ExternalizedCodeType.class, String.class);\n@@ -70,1 +70,1 @@\n-            Block.Builder.class, TypeElement[].class);\n+            Block.Builder.class, CodeType[].class);\n@@ -73,1 +73,1 @@\n-            Block.Parameter.class, TypeElement.class);\n+            Block.Parameter.class, CodeType.class);\n@@ -76,1 +76,1 @@\n-            FunctionType.class, TypeElement.class, TypeElement[].class);\n+            FunctionType.class, CodeType.class, CodeType[].class);\n@@ -117,1 +117,1 @@\n-            type(TypeElement.class),\n+            type(CodeType.class),\n@@ -123,1 +123,1 @@\n-            type(TypeElementFactory.class));\n+            type(CodeTypeFactory.class));\n@@ -134,1 +134,1 @@\n-    Value typeElementFactory;\n+    Value codeTypeFactory;\n@@ -156,1 +156,1 @@\n-        typeElementFactory = builder.parameters().get(1);\n+        codeTypeFactory = builder.parameters().get(1);\n@@ -209,1 +209,1 @@\n-                            TypeElement resultType,\n+                            CodeType resultType,\n@@ -257,1 +257,1 @@\n-    Value buildType(TypeElement t) {\n+    Value buildType(CodeType t) {\n@@ -259,2 +259,2 @@\n-        Value typeDef = builder.op(invoke(TYPE_DEFINITION_OF_STRING, typeString));\n-        return builder.op(invoke(TYPE_ELEMENT_FACTORY_CONSTRUCT, typeElementFactory, typeDef));\n+        Value exType = builder.op(invoke(EX_CODE_TYPE_OF_STRING, typeString));\n+        return builder.op(invoke(CODE_TYPE_FACTORY_CONSTRUCT, codeTypeFactory, exType));\n@@ -318,1 +318,1 @@\n-            case TypeElement f -> {\n+            case CodeType f -> {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpBuilder.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -486,2 +486,2 @@\n-    void writeType(TypeElement te) {\n-        write(te.toTypeDefinition().toString());\n+    void writeType(CodeType te) {\n+        write(te.externalize().toString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import com.sun.tools.javac.code.Type.IntersectionClassType;\n@@ -42,1 +41,0 @@\n-import com.sun.tools.javac.code.Type.UnionClassType;\n@@ -472,1 +470,1 @@\n-            List<TypeElement> parameters = new ArrayList<>();\n+            List<CodeType> parameters = new ArrayList<>();\n@@ -479,1 +477,1 @@\n-                parameters.add(typeToTypeElement(tree.sym.owner.type));\n+                parameters.add(typeToCodeType(tree.sym.owner.type));\n@@ -482,1 +480,1 @@\n-            tree.sym.type.getParameterTypes().stream().map(this::typeToTypeElement).forEach(parameters::add);\n+            tree.sym.type.getParameterTypes().stream().map(this::typeToCodeType).forEach(parameters::add);\n@@ -485,1 +483,1 @@\n-                    typeToTypeElement(tree.sym.type.getReturnType()), parameters);\n+                    typeToCodeType(tree.sym.type.getReturnType()), parameters);\n@@ -511,2 +509,2 @@\n-            FunctionType mtDesc = FunctionType.functionType(typeToTypeElement(mtype.restype),\n-                    mtype.getParameterTypes().map(this::typeToTypeElement));\n+            FunctionType mtDesc = FunctionType.functionType(typeToCodeType(mtype.restype),\n+                    mtype.getParameterTypes().map(this::typeToCodeType));\n@@ -558,1 +556,1 @@\n-                var capturedArg = top.block.parameter(typeToTypeElement(sym.type));\n+                var capturedArg = top.block.parameter(typeToCodeType(sym.type));\n@@ -570,1 +568,1 @@\n-                    capturedThis = top.block.parameter(typeToTypeElement(currentClassSym.type));\n+                    capturedThis = top.block.parameter(typeToCodeType(currentClassSym.type));\n@@ -649,1 +647,1 @@\n-                return append(CoreOps.cast(typeToTypeElement(targetType), sourceValue));\n+                return append(CoreOps.cast(typeToCodeType(targetType), sourceValue));\n@@ -656,1 +654,1 @@\n-            Type source = typeElementToType(exprVal.type());\n+            Type source = codeTypeToType(exprVal.type());\n@@ -662,1 +660,1 @@\n-            Type source = typeElementToType(exprVal.type());\n+            Type source = codeTypeToType(exprVal.type());\n@@ -668,1 +666,1 @@\n-            Type source = typeElementToType(exprVal.type());\n+            Type source = codeTypeToType(exprVal.type());\n@@ -678,1 +676,1 @@\n-                    return append(CoreOps.conv(typeToTypeElement(target), exprVal));\n+                    return append(CoreOps.conv(typeToCodeType(target), exprVal));\n@@ -698,2 +696,2 @@\n-            MethodRef boxMethod = MethodRef.method(typeToTypeElement(box), names.valueOf.toString(),\n-                    FunctionType.functionType(typeToTypeElement(box), typeToTypeElement(types.unboxedType(box))));\n+            MethodRef boxMethod = MethodRef.method(typeToCodeType(box), names.valueOf.toString(),\n+                    FunctionType.functionType(typeToCodeType(box), typeToCodeType(types.unboxedType(box))));\n@@ -708,1 +706,1 @@\n-                valueExpr = append(CoreOps.cast(typeToTypeElement(box), valueExpr));\n+                valueExpr = append(CoreOps.cast(typeToCodeType(box), valueExpr));\n@@ -711,1 +709,1 @@\n-            MethodRef unboxMethod = MethodRef.method(typeToTypeElement(box),\n+            MethodRef unboxMethod = MethodRef.method(typeToCodeType(box),\n@@ -713,1 +711,1 @@\n-                    FunctionType.functionType(typeToTypeElement(unboxedType)));\n+                    FunctionType.functionType(typeToCodeType(unboxedType)));\n@@ -731,1 +729,1 @@\n-            result = append(CoreOps.var(tree.name.toString(), typeToTypeElement(tree.type), initOp));\n+            result = append(CoreOps.var(tree.name.toString(), typeToCodeType(tree.type), initOp));\n@@ -807,1 +805,1 @@\n-                JavaType resultType = typeToTypeElement(unboxedType);\n+                JavaType resultType = typeToCodeType(unboxedType);\n@@ -850,1 +848,1 @@\n-                            TypeElement resultType = typeToTypeElement(sym.type);\n+                            CodeType resultType = typeToCodeType(sym.type);\n@@ -880,1 +878,1 @@\n-                    TypeElement resultType = typeToTypeElement(sym.type);\n+                    CodeType resultType = typeToCodeType(sym.type);\n@@ -932,1 +930,1 @@\n-                        TypeElement resultType = typeToTypeElement(sym.type);\n+                        CodeType resultType = typeToCodeType(sym.type);\n@@ -969,1 +967,1 @@\n-                result = append(CoreOps.constant(JavaType.J_L_CLASS, typeToTypeElement(tree.selected.type)));\n+                result = append(CoreOps.constant(JavaType.J_L_CLASS, typeToCodeType(tree.selected.type)));\n@@ -983,1 +981,1 @@\n-                        TypeElement resultType = typeToTypeElement(types.memberType(tree.selected.type, sym));\n+                        CodeType resultType = typeToCodeType(types.memberType(tree.selected.type, sym));\n@@ -1036,1 +1034,1 @@\n-                    Value res = append(CoreOps.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n+                    Value res = append(CoreOps.invoke(typeToCodeType(meth.type.getReturnType()), mr, args));\n@@ -1058,1 +1056,1 @@\n-                    Value res = append(CoreOps.invoke(typeToTypeElement(meth.type.getReturnType()), mr, args));\n+                    Value res = append(CoreOps.invoke(typeToCodeType(meth.type.getReturnType()), mr, args));\n@@ -1115,1 +1113,1 @@\n-                    result = append(CoreOps.conv(typeToTypeElement(type), v));\n+                    result = append(CoreOps.conv(typeToCodeType(type), v));\n@@ -1125,2 +1123,2 @@\n-                JavaType jt = typeToTypeElement(types.erasure(type));\n-                result = append(CoreOps.cast(typeToTypeElement(type), jt, v));\n+                JavaType jt = typeToCodeType(types.erasure(type));\n+                result = append(CoreOps.cast(typeToCodeType(type), jt, v));\n@@ -1137,1 +1135,1 @@\n-                result = append(CoreOps.instanceOf(typeToTypeElement(tree.pattern.type), target));\n+                result = append(CoreOps.instanceOf(typeToCodeType(tree.pattern.type), target));\n@@ -1145,1 +1143,1 @@\n-                patternType = ExtendedOps.Pattern.bindingType(typeToTypeElement(p.type));\n+                patternType = ExtendedOps.Pattern.bindingType(typeToCodeType(p.type));\n@@ -1147,1 +1145,1 @@\n-                patternType = ExtendedOps.Pattern.recordType(typeToTypeElement(p.record.type));\n+                patternType = ExtendedOps.Pattern.recordType(typeToCodeType(p.record.type));\n@@ -1171,1 +1169,1 @@\n-                    result = append(ExtendedOps.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    result = append(ExtendedOps.bindingPattern(typeToCodeType(var.type), var.name.toString()));\n@@ -1213,1 +1211,1 @@\n-                Op.Result op = variablesStack.block.op(CoreOps.var(jcVar.name.toString(), typeToTypeElement(jcVar.type), init));\n+                Op.Result op = variablesStack.block.op(CoreOps.var(jcVar.name.toString(), typeToCodeType(jcVar.type), init));\n@@ -1218,1 +1216,1 @@\n-            List<JavaType> patternDescParams = variables.stream().map(var -> typeToTypeElement(var.type)).toList();\n+            List<JavaType> patternDescParams = variables.stream().map(var -> typeToCodeType(var.type)).toList();\n@@ -1267,1 +1265,1 @@\n-            result = append(CoreOps._new(typeToTypeElement(type), constructorType, args));\n+            result = append(CoreOps._new(typeToCodeType(type), constructorType, args));\n@@ -1275,1 +1273,1 @@\n-                        typeToTypeElement(tree.type),\n+                        typeToCodeType(tree.type),\n@@ -1294,1 +1292,1 @@\n-                JavaType arrayType = typeToTypeElement(tree.type);\n+                JavaType arrayType = typeToCodeType(tree.type);\n@@ -1354,1 +1352,1 @@\n-                    JavaType fiType = typeToTypeElement(tree.target);\n+                    JavaType fiType = typeToCodeType(tree.target);\n@@ -1445,1 +1443,1 @@\n-            FunctionType actionType = FunctionType.functionType(typeToTypeElement(switchType));\n+            FunctionType actionType = FunctionType.functionType(typeToCodeType(switchType));\n@@ -1660,1 +1658,1 @@\n-            pushBody(tree.expr, FunctionType.functionType(typeToTypeElement(tree.expr.type)));\n+            pushBody(tree.expr, FunctionType.functionType(typeToCodeType(tree.expr.type)));\n@@ -1670,2 +1668,2 @@\n-            JavaType eType = typeToTypeElement(var.type);\n-            VarType varEType = VarType.varType(typeToTypeElement(var.type));\n+            JavaType eType = typeToCodeType(var.type);\n+            VarType varEType = VarType.varType(typeToCodeType(var.type));\n@@ -1720,1 +1718,1 @@\n-                            .map(t -> VarType.varType(typeToTypeElement(t.type)))\n+                            .map(t -> VarType.varType(typeToCodeType(t.type)))\n@@ -1829,1 +1827,1 @@\n-                    FunctionType.functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToCodeType(condType)));\n@@ -1843,1 +1841,1 @@\n-                    FunctionType.functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToCodeType(condType)));\n@@ -1853,1 +1851,1 @@\n-            result = append(ExtendedOps.conditionalExpression(typeToTypeElement(condType), bodies));\n+            result = append(ExtendedOps.conditionalExpression(typeToCodeType(condType), bodies));\n@@ -1893,1 +1891,1 @@\n-                         FunctionType.functionType(typeToTypeElement(tree.detail.type)));\n+                         FunctionType.functionType(typeToCodeType(tree.detail.type)));\n@@ -1951,1 +1949,1 @@\n-            List<TypeElement> rTypes = new ArrayList<>();\n+            List<CodeType> rTypes = new ArrayList<>();\n@@ -1959,1 +1957,1 @@\n-                        rTypes.add(VarType.varType(typeToTypeElement(vdecl.type)));\n+                        rTypes.add(VarType.varType(typeToCodeType(vdecl.type)));\n@@ -1961,1 +1959,1 @@\n-                        rTypes.add(typeToTypeElement(resource.type));\n+                        rTypes.add(typeToCodeType(resource.type));\n@@ -2003,1 +2001,1 @@\n-                pushBody(catcher.body, FunctionType.functionType(JavaType.VOID, typeToTypeElement(catcher.param.type)));\n+                pushBody(catcher.body, FunctionType.functionType(JavaType.VOID, typeToCodeType(catcher.param.type)));\n@@ -2165,1 +2163,1 @@\n-            result = append(CoreOps.constant(typeToTypeElement(constantType), value));\n+            result = append(CoreOps.constant(typeToCodeType(constantType), value));\n@@ -2226,1 +2224,1 @@\n-            return typeToTypeElement(s.erasure(types));\n+            return typeToCodeType(s.erasure(types));\n@@ -2229,1 +2227,1 @@\n-        JavaType typeToTypeElement(Type t) {\n+        JavaType typeToCodeType(Type t) {\n@@ -2243,1 +2241,1 @@\n-                    yield JavaType.array(typeToTypeElement(et));\n+                    yield JavaType.array(typeToCodeType(et));\n@@ -2249,1 +2247,1 @@\n-                            JavaType.wildcard(wt.isExtendsBound() ? BoundKind.EXTENDS : BoundKind.SUPER, typeToTypeElement(wt.type));\n+                            JavaType.wildcard(wt.isExtendsBound() ? BoundKind.EXTENDS : BoundKind.SUPER, typeToCodeType(wt.type));\n@@ -2253,1 +2251,1 @@\n-                                typeToTypeElement(t.getUpperBound())) :\n+                                typeToCodeType(t.getUpperBound())) :\n@@ -2256,1 +2254,1 @@\n-                                typeToTypeElement(t.getUpperBound()));\n+                                typeToCodeType(t.getUpperBound()));\n@@ -2265,1 +2263,1 @@\n-                            typeArguments.add(typeToTypeElement(ta));\n+                            typeArguments.add(typeToCodeType(ta));\n@@ -2296,1 +2294,1 @@\n-                    typeToTypeElement(s.owner.erasure(types)),\n+                    typeToCodeType(s.owner.erasure(types)),\n@@ -2298,1 +2296,1 @@\n-                    typeToTypeElement(erasedType));\n+                    typeToCodeType(erasedType));\n@@ -2311,1 +2309,1 @@\n-                    typeToTypeElement(s.owner.erasure(types)),\n+                    typeToCodeType(s.owner.erasure(types)),\n@@ -2313,2 +2311,2 @@\n-                    typeToTypeElement(erasedType.getReturnType()),\n-                    erasedType.getParameterTypes().stream().map(this::typeToTypeElement).toArray(TypeElement[]::new));\n+                    typeToCodeType(erasedType.getReturnType()),\n+                    erasedType.getParameterTypes().stream().map(this::typeToCodeType).toArray(CodeType[]::new));\n@@ -2323,2 +2321,2 @@\n-                    typeToTypeElement(t.getReturnType()),\n-                    t.getParameterTypes().stream().map(this::typeToTypeElement).toArray(TypeElement[]::new));\n+                    typeToCodeType(t.getReturnType()),\n+                    t.getParameterTypes().stream().map(this::typeToCodeType).toArray(CodeType[]::new));\n@@ -2328,1 +2326,1 @@\n-            TypeElement recordType = typeToTypeElement(s.type);\n+            CodeType recordType = typeToCodeType(s.type);\n@@ -2330,1 +2328,1 @@\n-                    .map(rc -> new RecordTypeRef.ComponentRef(typeToTypeElement(rc.type), rc.name.toString()))\n+                    .map(rc -> new RecordTypeRef.ComponentRef(typeToCodeType(rc.type), rc.name.toString()))\n@@ -2337,9 +2335,9 @@\n-                case BYTE -> CoreOps.constant(typeToTypeElement(t), (byte)0);\n-                case CHAR -> CoreOps.constant(typeToTypeElement(t), (char)0);\n-                case BOOLEAN -> CoreOps.constant(typeToTypeElement(t), false);\n-                case SHORT -> CoreOps.constant(typeToTypeElement(t), (short)0);\n-                case INT -> CoreOps.constant(typeToTypeElement(t), 0);\n-                case FLOAT -> CoreOps.constant(typeToTypeElement(t), 0f);\n-                case LONG -> CoreOps.constant(typeToTypeElement(t), 0L);\n-                case DOUBLE -> CoreOps.constant(typeToTypeElement(t), 0d);\n-                default -> CoreOps.constant(typeToTypeElement(t), null);\n+                case BYTE -> CoreOps.constant(typeToCodeType(t), (byte)0);\n+                case CHAR -> CoreOps.constant(typeToCodeType(t), (char)0);\n+                case BOOLEAN -> CoreOps.constant(typeToCodeType(t), false);\n+                case SHORT -> CoreOps.constant(typeToCodeType(t), (short)0);\n+                case INT -> CoreOps.constant(typeToCodeType(t), 0);\n+                case FLOAT -> CoreOps.constant(typeToCodeType(t), 0f);\n+                case LONG -> CoreOps.constant(typeToCodeType(t), 0L);\n+                case DOUBLE -> CoreOps.constant(typeToCodeType(t), 0d);\n+                default -> CoreOps.constant(typeToCodeType(t), null);\n@@ -2351,7 +2349,7 @@\n-                case BYTE -> CoreOps.constant(typeToTypeElement(t), (byte)1);\n-                case CHAR -> CoreOps.constant(typeToTypeElement(t), (char)1);\n-                case SHORT -> CoreOps.constant(typeToTypeElement(t), (short)1);\n-                case INT -> CoreOps.constant(typeToTypeElement(t), 1);\n-                case FLOAT -> CoreOps.constant(typeToTypeElement(t), 1f);\n-                case LONG -> CoreOps.constant(typeToTypeElement(t), 1L);\n-                case DOUBLE -> CoreOps.constant(typeToTypeElement(t), 1d);\n+                case BYTE -> CoreOps.constant(typeToCodeType(t), (byte)1);\n+                case CHAR -> CoreOps.constant(typeToCodeType(t), (char)1);\n+                case SHORT -> CoreOps.constant(typeToCodeType(t), (short)1);\n+                case INT -> CoreOps.constant(typeToCodeType(t), 1);\n+                case FLOAT -> CoreOps.constant(typeToCodeType(t), 1f);\n+                case LONG -> CoreOps.constant(typeToCodeType(t), 1L);\n+                case DOUBLE -> CoreOps.constant(typeToCodeType(t), 1d);\n@@ -2368,1 +2366,1 @@\n-        Type typeElementToType(TypeElement desc) {\n+        Type codeTypeToType(CodeType desc) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":87,"deletions":89,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -248,1 +248,1 @@\n-            TypeElement retType = functionType.returnType().equals(functionType.parameterTypes().getFirst())\n+            CodeType retType = functionType.returnType().equals(functionType.parameterTypes().getFirst())\n@@ -269,1 +269,1 @@\n-            List<TypeElement> funcParameters = funcOp.invokableType().parameterTypes();\n+            List<CodeType> funcParameters = funcOp.invokableType().parameterTypes();\n@@ -286,1 +286,1 @@\n-            for (TypeElement parameterType : funcParameters) {\n+            for (CodeType parameterType : funcParameters) {\n@@ -297,1 +297,1 @@\n-        private static Class<?> resolveParameter(TypeElement typeElement, MethodHandles.Lookup lookup) {\n+        private static Class<?> resolveParameter(CodeType codeType, MethodHandles.Lookup lookup) {\n@@ -299,1 +299,1 @@\n-                return ((JavaType) typeElement).resolve(lookup);\n+                return ((JavaType) codeType).resolve(lookup);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/CoreBinaryOpsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -51,1 +51,1 @@\n-        TypeElement elementType();\n+        CodeType elementType();\n@@ -74,1 +74,1 @@\n-        private Queryable insertQuery(TypeElement et, String name, ClosureOp c) {\n+        private Queryable insertQuery(CodeType et, String name, ClosureOp c) {\n@@ -101,1 +101,1 @@\n-            TypeElement resultType = JavaType.type(JavaType.type(Stream.class), (JavaType) elementType());\n+            CodeType resultType = JavaType.type(JavaType.type(Stream.class), (JavaType) elementType());\n@@ -111,1 +111,1 @@\n-        private QueryResult insertQueryResult(String name, TypeElement resultType) {\n+        private QueryResult insertQueryResult(String name, CodeType resultType) {\n@@ -129,1 +129,1 @@\n-        TypeElement resultType();\n+        CodeType resultType();\n@@ -138,1 +138,1 @@\n-        TypeElement queryableType();\n+        CodeType queryableType();\n@@ -140,1 +140,1 @@\n-        TypeElement queryResultType();\n+        CodeType queryResultType();\n@@ -142,1 +142,1 @@\n-        Queryable createQuery(TypeElement elementType, FuncOp expression);\n+        Queryable createQuery(CodeType elementType, FuncOp expression);\n@@ -144,1 +144,1 @@\n-        QueryResult createQueryResult(TypeElement resultType, FuncOp expression);\n+        QueryResult createQueryResult(CodeType resultType, FuncOp expression);\n@@ -146,1 +146,1 @@\n-        Queryable newQuery(TypeElement elementType);\n+        Queryable newQuery(CodeType elementType);\n@@ -153,1 +153,1 @@\n-        final TypeElement elementType;\n+        final CodeType elementType;\n@@ -157,1 +157,1 @@\n-        TestQueryable(TypeElement elementType, TestQueryProvider provider) {\n+        TestQueryable(CodeType elementType, TestQueryProvider provider) {\n@@ -167,1 +167,1 @@\n-        TestQueryable(TypeElement elementType, TestQueryProvider provider, FuncOp expression) {\n+        TestQueryable(CodeType elementType, TestQueryProvider provider, FuncOp expression) {\n@@ -174,1 +174,1 @@\n-        public TypeElement elementType() {\n+        public CodeType elementType() {\n@@ -189,1 +189,1 @@\n-    public record TestQueryResult(TypeElement resultType, FuncOp expression) implements QueryResult {\n+    public record TestQueryResult(CodeType resultType, FuncOp expression) implements QueryResult {\n@@ -198,2 +198,2 @@\n-        final TypeElement queryableType;\n-        final TypeElement queryResultType;\n+        final CodeType queryableType;\n+        final CodeType queryResultType;\n@@ -207,1 +207,1 @@\n-        public TypeElement queryableType() {\n+        public CodeType queryableType() {\n@@ -212,1 +212,1 @@\n-        public TypeElement queryResultType() {\n+        public CodeType queryResultType() {\n@@ -217,1 +217,1 @@\n-        public TestQueryable createQuery(TypeElement elementType, FuncOp expression) {\n+        public TestQueryable createQuery(CodeType elementType, FuncOp expression) {\n@@ -222,1 +222,1 @@\n-        public QueryResult createQueryResult(TypeElement resultType, FuncOp expression) {\n+        public QueryResult createQueryResult(CodeType resultType, FuncOp expression) {\n@@ -227,1 +227,1 @@\n-        public Queryable newQuery(TypeElement elementType) {\n+        public Queryable newQuery(CodeType elementType) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLinqUsingQuoted.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -322,1 +322,1 @@\n-    static String formatString(TypeElement t) {\n+    static String formatString(CodeType t) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLocalTransformationsAdaption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import java.lang.reflect.code.TypeElement;\n+import java.lang.reflect.code.CodeType;\n@@ -545,1 +545,1 @@\n-            TypeElement rt = func.invokableType().returnType();\n+            CodeType rt = func.invokableType().returnType();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}