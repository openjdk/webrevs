{"files":[{"patch":"@@ -377,4 +377,3 @@\n-        return !moreThanOneUse(op.result())\n-            || op.operands().getFirst() instanceof Block.Parameter bp && bp.declaringBlock().isEntryBlock() && !moreThanOneUse(bp)\n-            || op.initOperand() instanceof Op.Result or && or.op() instanceof ConstantOp cop && canDefer(cop) && isDefinitelyAssigned(op);\n-\n+        return !op.isUninitialized() && (!moreThanOneUse(op.result())\n+            || op.initOperand() instanceof Block.Parameter bp && bp.declaringBlock().isEntryBlock() && !moreThanOneUse(bp)\n+            || op.initOperand() instanceof Op.Result or && or.op() instanceof ConstantOp cop && canDefer(cop) && isDefinitelyAssigned(op));\n@@ -558,1 +557,1 @@\n-                        } else {\n+                        } else if (!op.isUninitialized()) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.Body;\n@@ -201,0 +202,1 @@\n+        Body parentBody;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotOp.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+                var.parentBody = slotOp.ancestorBody();\n@@ -172,2 +173,6 @@\n-                for (SlotOp.Var var : toInitialize) {\n-                    var.value = block.op(CoreOp.var(block.op(liftDefaultValue(var.typeKind))));\n+                for (var it = toInitialize.iterator(); it.hasNext();) {\n+                    SlotOp.Var var = it.next();\n+                    if (var.parentBody == op.ancestorBody()) {\n+                        var.value = block.op(CoreOp.var(toTypeElement(var.typeKind)));\n+                        it.remove();\n+                    }\n@@ -175,1 +180,0 @@\n-                toInitialize.clear();\n@@ -213,2 +217,1 @@\n-    \/\/ @@@ can be replaced with unitialized VarOp\n-    private static CoreOp.ConstantOp liftDefaultValue(TypeKind tk) {\n+    private static TypeElement toTypeElement(TypeKind tk) {\n@@ -216,9 +219,9 @@\n-            case INT -> CoreOp.constant(UnresolvedType.unresolvedInt(), 0);\n-            case REFERENCE -> CoreOp.constant(UnresolvedType.unresolvedRef(), null);\n-            case LONG -> CoreOp.constant(JavaType.LONG, 0l);\n-            case DOUBLE -> CoreOp.constant(JavaType.DOUBLE, 0d);\n-            case FLOAT -> CoreOp.constant(JavaType.FLOAT, 0f);\n-            case BOOLEAN -> CoreOp.constant(JavaType.BOOLEAN, false);\n-            case BYTE -> CoreOp.constant(JavaType.BYTE, (byte)0);\n-            case SHORT -> CoreOp.constant(JavaType.SHORT, (short)0);\n-            case CHAR -> CoreOp.constant(JavaType.CHAR, (char)0);\n+            case INT -> UnresolvedType.unresolvedInt();\n+            case REFERENCE -> UnresolvedType.unresolvedRef();\n+            case LONG -> JavaType.LONG;\n+            case DOUBLE -> JavaType.DOUBLE;\n+            case FLOAT -> JavaType.FLOAT;\n+            case BOOLEAN -> JavaType.BOOLEAN;\n+            case BYTE -> JavaType.BYTE;\n+            case SHORT -> JavaType.SHORT;\n+            case CHAR -> JavaType.CHAR;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotToVarTransformer.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-        boolean changed = ut.resolveFrom(vo.initOperand().type());\n+        boolean changed = vo.isUninitialized() ? false : ut.resolveFrom(vo.initOperand().type());\n@@ -225,1 +225,3 @@\n-                    cc.mapValue(op.result(), block.op(CoreOp.var(vop.varName(), ut.resolved(), cc.getValueOrDefault(vop.initOperand(), vop.initOperand()))));\n+                    cc.mapValue(op.result(), block.op(vop.isUninitialized()\n+                            ? CoreOp.var(vop.varName(), ut.resolved())\n+                            : CoreOp.var(vop.varName(), ut.resolved(), cc.getValueOrDefault(vop.initOperand(), vop.initOperand()))));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/UnresolvedTypesTransformer.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4043,1 +4043,1 @@\n-        return var(null, type, null);\n+        return var(null, type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}