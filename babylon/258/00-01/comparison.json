{"files":[{"patch":"@@ -61,1 +61,1 @@\n-    private static final int ROUNDS = 3;\n+    private static final int ROUNDS = 1;\n@@ -157,2 +157,2 @@\n-            System.out.println(\"Code reflection model verification failed\");\n-            errors.forEach(System.out::println);\n+            System.out.println(\"Code reflection model verification failed:\");\n+            errors.forEach(e -> System.out.println(e.getMessage()));\n@@ -160,1 +160,1 @@\n-            throw new AssertionError(errors.getFirst());\n+            throw new AssertionError(\"Code reflection model verification failed\");\n@@ -165,7 +165,8 @@\n-        for (var e : ClassFile.of().verify(bytecode.parent().get())) {\n-            if (!e.getMessage().contains(\"Illegal call to internal method\")) {\n-                printReflection();\n-                printBytecode();\n-                System.out.println(\"Bytecode verification failed\");\n-                throw e;\n-            }\n+        var errors = ClassFile.of().verify(bytecode.parent().get()).stream()\n+                .filter(e -> !e.getMessage().contains(\"Illegal call to internal method\")).toList();\n+        if (!errors.isEmpty()) {\n+            printReflection();\n+            System.out.println(\"Bytecode verification failed:\");\n+            errors.forEach(e -> System.out.println(e.getMessage()));\n+            printBytecode();\n+            throw new AssertionError(\"Bytecode verification failed\");\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"}]}