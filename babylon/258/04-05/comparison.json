{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.util.ArrayDeque;\n@@ -30,2 +29,0 @@\n-import java.util.Deque;\n-import java.util.HashSet;\n@@ -145,51 +142,0 @@\n-    \/**\n-     * Returns {@code true} if this value is dominated by the given set of values {@code doms}.\n-     * <p>\n-     * The set dominates if every path from the entry node go through any member of the set.\n-     * <p>\n-     * First part checks individual dominance of every member of the set.\n-     * <p>\n-     * If no member of the set is individually dominant, the second part tries to find path\n-     * to the entry block bypassing all blocks from the tested set.\n-     * <p>\n-     * Implementation searches for the paths by traversing the value declaring block predecessors,\n-     * stopping at blocks where values from the tested set are declared or at blocks already processed.\n-     * Negative test result is returned when the entry block is reached.\n-     * Positive test result is returned when no path to the entry block is found.\n-     *\n-     * @param doms the dominating value\n-     * @return {@code true} if this value is dominated by the given set of values {@code dom}.\n-     * @throws IllegalStateException if the declaring block is partially built\n-     *\/\n-    public boolean isDominatedBy(Set<? extends Value> doms) {\n-        if (doms.isEmpty()) {\n-            return false;\n-        }\n-\n-        for (Value dom : doms) {\n-            if (isDominatedBy(dom)) {\n-                return true;\n-            }\n-        }\n-\n-        Set<Block> stopBlocks = new HashSet<>();\n-        for (Value dom : doms) {\n-            stopBlocks.add(dom.declaringBlock());\n-        }\n-\n-        Deque<Block> toProcess = new ArrayDeque<>();\n-        toProcess.add(declaringBlock());\n-        stopBlocks.add(declaringBlock());\n-        while (!toProcess.isEmpty()) {\n-            for (Block b : toProcess.pop().predecessors()) {\n-                if (b.isEntryBlock()) {\n-                    return false;\n-                }\n-                if (stopBlocks.add(b)) {\n-                    toProcess.add(b);\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Value.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -389,1 +389,1 @@\n-            if (load.op() instanceof VarAccessOp.VarLoadOp && !load.isDominatedBy(stores)) {\n+            if (load.op() instanceof VarAccessOp.VarLoadOp && !BytecodeUtil.isDominatedBy(load, stores)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.reflect.code.bytecode;\n+\n+import java.lang.reflect.code.Block;\n+import java.lang.reflect.code.Value;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+final class BytecodeUtil {\n+\n+    \/**\n+     * Returns {@code true} if this value is dominated by the given set of values {@code doms}.\n+     * <p>\n+     * The set dominates if every path from the entry node go through any member of the set.\n+     * <p>\n+     * First part checks individual dominance of every member of the set.\n+     * <p>\n+     * If no member of the set is individually dominant, the second part tries to find path\n+     * to the entry block bypassing all blocks from the tested set.\n+     * <p>\n+     * Implementation searches for the paths by traversing the value declaring block predecessors,\n+     * stopping at blocks where values from the tested set are declared or at blocks already processed.\n+     * Negative test result is returned when the entry block is reached.\n+     * Positive test result is returned when no path to the entry block is found.\n+     *\n+     * @param value the value\n+     * @param doms the dominating set of values\n+     * @return {@code true} if this value is dominated by the given set of values {@code dom}.\n+     * @throws IllegalStateException if the declaring block is partially built\n+     *\/\n+    public static boolean isDominatedBy(Value value, Set<? extends Value> doms) {\n+        if (doms.isEmpty()) {\n+            return false;\n+        }\n+\n+        for (Value dom : doms) {\n+            if (value.isDominatedBy(dom)) {\n+                return true;\n+            }\n+        }\n+\n+        Set<Block> stopBlocks = new HashSet<>();\n+        for (Value dom : doms) {\n+            stopBlocks.add(dom.declaringBlock());\n+        }\n+\n+        Deque<Block> toProcess = new ArrayDeque<>();\n+        toProcess.add(value.declaringBlock());\n+        stopBlocks.add(value.declaringBlock());\n+        while (!toProcess.isEmpty()) {\n+            for (Block b : toProcess.pop().predecessors()) {\n+                if (b.isEntryBlock()) {\n+                    return false;\n+                }\n+                if (stopBlocks.add(b)) {\n+                    toProcess.add(b);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private BytecodeUtil() {\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeUtil.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -270,1 +270,1 @@\n-        return slotOp.result().isDominatedBy(predecessors);\n+        return BytecodeUtil.isDominatedBy(slotOp.result(), predecessors);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotToVarTransformer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}