{"files":[{"patch":"@@ -67,1 +67,1 @@\n-import java.util.HashMap;\n+import java.util.IdentityHashMap;\n@@ -233,2 +233,2 @@\n-        this.slots = new HashMap<>();\n-        this.singlePredecessorsValues = new HashMap<>();\n+        this.slots = new IdentityHashMap<>();\n+        this.singlePredecessorsValues = new IdentityHashMap<>();\n@@ -237,1 +237,1 @@\n-        this.deferCache = new HashMap<>();\n+        this.deferCache = new IdentityHashMap<>();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import java.util.IdentityHashMap;\n@@ -127,1 +128,1 @@\n-        this.exceptionHandlersMap = new HashMap<>();\n+        this.exceptionHandlersMap = new IdentityHashMap<>();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.lang.reflect.code.Body;\n@@ -194,9 +193,0 @@\n-\n-    \/\/ @@@ move to SlotToVarTransformer\n-    static final class Var {\n-        boolean single;\n-        TypeKind typeKind;\n-        Value value;\n-        Body parentBody;\n-    }\n-    Var var;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotOp.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.code.Body;\n@@ -40,1 +41,0 @@\n-import java.util.HashMap;\n@@ -42,0 +42,1 @@\n+import java.util.IdentityHashMap;\n@@ -55,0 +56,7 @@\n+    static final class Var {\n+        boolean single;\n+        TypeKind typeKind;\n+        Value value;\n+        Body parentBody;\n+    }\n+\n@@ -106,1 +114,15 @@\n-try {\n+        try {\n+            return new SlotToVarTransformer().convert(func);\n+        } catch (Throwable t) {\n+            System.out.println(func.toText());\n+            throw t;\n+        }\n+    }\n+\n+    private final Map<SlotOp, Var> varMap;\n+\n+    private SlotToVarTransformer() {\n+        varMap = new IdentityHashMap<>();\n+    }\n+\n+    private CoreOp.FuncOp convert(CoreOp.FuncOp func) {\n@@ -108,1 +130,1 @@\n-        ExcStackMap excMap = func.traverse(new ExcStackMap(new ArrayList<>(), new HashMap<>()),\n+        ExcStackMap excMap = func.traverse(new ExcStackMap(new ArrayList<>(), new IdentityHashMap<>()),\n@@ -111,2 +133,2 @@\n-        List<SlotOp.Var> toInitialize = func.body().traverse(new ArrayList<>(), CodeElement.opVisitor((toInit, op) -> {\n-            if (op instanceof SlotOp slotOp && slotOp.var == null) {\n+        List<Var> toInitialize = func.body().traverse(new ArrayList<>(), CodeElement.opVisitor((toInit, op) -> {\n+            if (op instanceof SlotOp slotOp && !varMap.containsKey(slotOp)) {\n@@ -115,1 +137,1 @@\n-                SlotOp.Var var = new SlotOp.Var(); \/\/ New variable\n+                Var var = new Var(); \/\/ New variable\n@@ -122,2 +144,2 @@\n-                    if (se.var == null) {\n-                        se.var = var; \/\/ Assign variable to the segment\n+                    if (!varMap.containsKey(se)) {\n+                        varMap.put(se, var); \/\/ Assign variable to the segment\n@@ -128,1 +150,1 @@\n-                                if (to.var == null) {\n+                                if (!varMap.containsKey(to)) {\n@@ -132,1 +154,1 @@\n-                        };\n+                        }\n@@ -136,1 +158,1 @@\n-                                if (from.var == null) {\n+                                if (!varMap.containsKey(from)) {\n@@ -139,1 +161,3 @@\n-                            };\n+                            }\n+                        } else if (se instanceof SlotOp.SlotStoreOp store) {\n+                            stores.add(store); \/\/ Collection of all SlotStoreOps of the variable\n@@ -142,3 +166,0 @@\n-                    if (se.var == var && se instanceof SlotOp.SlotStoreOp store) {\n-                        stores.add(store); \/\/ Collection of all SlotStoreOps of the variable\n-                    }\n@@ -163,1 +184,1 @@\n-                    toInit.add(stores.getFirst().var);\n+                    toInit.add(varMap.get(stores.getFirst()));\n@@ -174,1 +195,1 @@\n-                    SlotOp.Var var = it.next();\n+                    Var var = it.next();\n@@ -184,1 +205,2 @@\n-                    if (slo.var.value == null) {\n+                    Var var = varMap.get(slo);\n+                    if (var.value == null) {\n@@ -188,1 +210,1 @@\n-                    cc.mapValue(op.result(), slo.var.single ? slo.var.value : block.op(CoreOp.varLoad(slo.var.value)));\n+                    cc.mapValue(op.result(), var.single ? var.value : block.op(CoreOp.varLoad(var.value)));\n@@ -191,0 +213,1 @@\n+                    Var var = varMap.get(sso);\n@@ -193,3 +216,3 @@\n-                    if (sso.var.single) {\n-                        sso.var.value = val;\n-                    } else if (sso.var.value == null) {\n+                    if (var.single) {\n+                        var.value = val;\n+                    } else if (var.value == null) {\n@@ -201,1 +224,1 @@\n-                        sso.var.value = block.op(CoreOp.var(null, varType, val));\n+                        var.value = block.op(CoreOp.var(null, varType, val));\n@@ -203,1 +226,1 @@\n-                        block.op(CoreOp.varStore(sso.var.value, val));\n+                        block.op(CoreOp.varStore(var.value, val));\n@@ -211,4 +234,0 @@\n-} catch (Throwable t) {\n-    System.out.println(func.toText());\n-    throw t;\n-}\n@@ -242,1 +261,2 @@\n-    private static boolean isDominatedByTheSameVar(SlotOp slotOp, ExcStackMap excMap) {\n+    private boolean isDominatedByTheSameVar(SlotOp slotOp, ExcStackMap excMap) {\n+        Var var = varMap.get(slotOp);\n@@ -245,1 +265,1 @@\n-            if (pred.var != slotOp.var) {\n+            if (varMap.get(pred) != var) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotToVarTransformer.java","additions":50,"deletions":30,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import java.util.HashMap;\n+import java.util.IdentityHashMap;\n@@ -61,1 +61,1 @@\n-        resolvedMap = new HashMap<>();\n+        resolvedMap = new IdentityHashMap<>();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/UnresolvedTypesTransformer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}