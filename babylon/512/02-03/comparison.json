{"files":[{"patch":"@@ -181,1 +181,15 @@\n-    \/\/ Extract the quoted operation from funcOp and maps the operands and captured values to the runtime values\n+    \/**\n+     * Extract the quoted operation from {@code funcOp}\n+     * and map its operands and captured values to the runtime values in {@code args}.\n+     * <p>\n+     * {@code funcOp} must have the same structure as if it's produced by {@link #quoteOp(Op)}.\n+     * In addition, we allow ConstantOp to appear in {@code funcOp} entry block.\n+     *\n+     * @param funcOp Model to extract the quoted op from\n+     * @param args Runtime values for {@code funcOp} parameters\n+     * @return Quoted instance that wraps the quoted operation,\n+     * plus the mapping of its operands and captured values to the given runtime values\n+     * @throws RuntimeException If {@code funcOp} isn't a valid code model\n+     * @throws RuntimeException If {@code funcOp} parameters size is different from {@code args} length\n+\n+    * *\/\n@@ -214,1 +228,6 @@\n-        \/\/ validation rule of block params and constant op result\n+        \/\/ validation rule of block params and ConstantOp result\n+        \/\/ let v be a block param or ConstantOp result\n+        \/\/ if v not used -> throw\n+        \/\/ if v used once and user is VarOp and VarOp not used or VarOp used in funcOp entry block -> throw\n+        \/\/ if v is used once and not as operand or capture -> throw\n+        \/\/ if v is used more than once and one of the uses is in funcOp entry block -> throw\n@@ -218,4 +237,6 @@\n-            } else if (v.uses().size() == 1\n-                    && !(v.uses().iterator().next().op() instanceof CoreOp.VarOp vop && vop.result().uses().size() >= 1\n-                    && vop.result().uses().stream().noneMatch(u -> u.op().ancestorBlock() == fblock))\n-                    && !operandsAndCaptures.contains(v)) {\n+            } else if (v.uses().size() == 1 && v.uses().iterator().next().op() instanceof CoreOp.VarOp vop\n+                    && (vop.result().uses().isEmpty() ||\n+                    vop.result().uses().stream().anyMatch(u -> u.op().ancestorBlock() == fblock))) {\n+                throw invalidQuotedModel(funcOp);\n+            } else if (v.uses().size() == 1 && !operandsAndCaptures.contains(v)) {\n+                \/\/ if we reach here, the user is not a VarOp\n@@ -248,2 +269,2 @@\n-        \/\/ map captured values to their corresponding runtime values\n-        \/\/ captured value can be:\n+        \/\/ map operands and captures to their corresponding runtime values\n+        \/\/ operand and capture can be:\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":29,"deletions":8,"binary":false,"changes":37,"status":"modified"}]}