{"files":[{"patch":"@@ -96,0 +96,7 @@\n+\n+        \/**\n+         * {@return the captured values}\n+         *\/\n+        default List<Value> capturedValues() {\n+            return List.of();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,3 @@\n+\/**\n+ * Transformer of code models to bytecode.\n+ *\/\n@@ -69,2 +72,12 @@\n-    public static MethodHandle generate(MethodHandles.Lookup l, CoreOps.FuncOp fop) {\n-        byte[] classBytes = generateClassData(l, fop);\n+    \/**\n+     * Transforms the invokable operation to bytecode encapsulated in a method of hidden class and exposed\n+     * for invocation via a method handle.\n+     *\n+     * @param l the lookup\n+     * @param iop the invokable operation to transform to bytecode\n+     * @return the invoking method handle\n+     * @param <O> the type of the invokable operation\n+     *\/\n+    public static <O extends Op & Op.Invokable> MethodHandle generate(MethodHandles.Lookup l, O iop) {\n+        String name = iop instanceof FuncOp fop ? fop.funcName() : \"m\";\n+        byte[] classBytes = generateClassData(l, name, iop);\n@@ -93,1 +106,1 @@\n-            FunctionType ft = fop.invokableType();\n+            FunctionType ft = iop.invokableType();\n@@ -95,1 +108,1 @@\n-            return hcl.findStatic(hcl.lookupClass(), fop.funcName(), mt);\n+            return hcl.findStatic(hcl.lookupClass(), name, mt);\n@@ -106,1 +119,28 @@\n-    public static byte[] generateClassData(MethodHandles.Lookup lookup, CoreOps.FuncOp fop) {\n+    \/**\n+     * Transforms the function operation to bytecode encapsulated in a method of a class file.\n+     * <p>\n+     * The name of the method is the function operation's {@link FuncOp#funcName() function name}.\n+     *\n+     * @param lookup the lookup\n+     * @param fop the function operation to transform to bytecode\n+     * @return the class file bytes\n+     *\/\n+    public static byte[] generateClassData(MethodHandles.Lookup lookup, FuncOp fop) {\n+        return generateClassData(lookup, fop.funcName(), fop);\n+    }\n+\n+    \/**\n+     * Transforms the invokable operation to bytecode encapsulated in a method of a class file.\n+     *\n+     * @param lookup the lookup\n+     * @param name the name to use for the method of the class file\n+     * @param iop the invokable operation to transform to bytecode\n+     * @return the class file bytes\n+     * @param <O> the type of the invokable operation\n+     *\/\n+    public static <O extends Op & Op.Invokable> byte[] generateClassData(MethodHandles.Lookup lookup,\n+                                                                         String name, O iop) {\n+        if (!iop.capturedValues().isEmpty()) {\n+            throw new UnsupportedOperationException(\"Operation captures values\");\n+        }\n+\n@@ -109,4 +149,4 @@\n-                ? fop.funcName()\n-                : packageName + \".\" + fop.funcName();\n-        Liveness liveness = new Liveness(fop);\n-        MethodTypeDesc mtd = MethodRef.toNominalDescriptor(fop.invokableType());\n+                ? name\n+                : packageName + \".\" + name;\n+        Liveness liveness = new Liveness(iop);\n+        MethodTypeDesc mtd = MethodRef.toNominalDescriptor(iop.invokableType());\n@@ -115,1 +155,1 @@\n-                        fop.funcName(),\n+                        name,\n@@ -120,1 +160,1 @@\n-                            generateBody(fop.body(), cob, c);\n+                            generateBody(iop.body(), cob, c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":51,"deletions":11,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -511,0 +511,1 @@\n+        @Override\n@@ -626,0 +627,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.Quoted;\n@@ -62,0 +64,13 @@\n+    @Test\n+    public void testQuoted() throws Throwable {\n+        Quoted q = (int i, int j) -> {\n+            i = i + j;\n+            return i;\n+        };\n+        CoreOps.ClosureOp cop = (CoreOps.ClosureOp) q.op();\n+\n+        MethodHandle mh = generate(cop);\n+\n+        Assert.assertEquals(f(1, 2), (int) mh.invoke(1, 2));\n+    }\n+\n@@ -245,1 +260,1 @@\n-    static MethodHandle generate(CoreOps.FuncOp f) {\n+    static <O extends Op & Op.Invokable> MethodHandle generate(O f) {\n@@ -248,1 +263,2 @@\n-        CoreOps.FuncOp lf = f.transform((block, op) -> {\n+        @SuppressWarnings(\"unchecked\")\n+        O lf = (O) f.transform(CopyContext.create(), (block, op) -> {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSimple.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}