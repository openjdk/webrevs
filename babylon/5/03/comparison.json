{"files":[{"patch":"@@ -1069,2 +1069,1 @@\n-                return value == NULL_ATTRIBUTE_VALUE ? null :\n-                        TypeDesc.ofNominalDescriptor(ClassDesc.of(value.toString()));\n+                return value == NULL_ATTRIBUTE_VALUE ? null : TypeDesc.ofString(value.toString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -445,1 +445,2 @@\n-                        Tag.SKIP);\n+                        Tag.SKIP,\n+                        Tag.TYPEARRAY);\n@@ -904,0 +905,5 @@\n+        @Override\n+        public void visitTypeArray(JCTree.JCArrayTypeTree tree) {\n+            result = null; \/\/ MyType[].class is handled in visitSelect just as MyType.class\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.reflect.Method;\n+import java.lang.runtime.CodeReflection;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+\/*\n+ * @test\n+ * @run testng TestArrayTypes\n+ *\/\n+\n+public class TestArrayTypes {\n+    @CodeReflection\n+    public static Class<?> f() {\n+        return String[].class;\n+    }\n+\n+    @Test\n+    public void testf() {\n+        CoreOps.FuncOp f = getFuncOp(\"f\");\n+\n+        f.writeTo(System.out);\n+\n+        Assert.assertEquals(Interpreter.invoke(f), f());\n+    }\n+\n+    @CodeReflection\n+    public static Class<?> f2() {\n+        return int[][].class;\n+    }\n+\n+    @Test\n+    public void testf2() {\n+        CoreOps.FuncOp f = getFuncOp(\"f2\");\n+\n+        f.writeTo(System.out);\n+\n+        Assert.assertEquals(Interpreter.invoke(f), f2());\n+    }\n+\n+    @CodeReflection\n+    public static Class<?> f3() {\n+        return CoreOps.ArrayLengthOp[][][][][][][].class;\n+    }\n+\n+    @Test\n+    public void testf3() {\n+        CoreOps.FuncOp f = getFuncOp(\"f3\");\n+\n+        f.writeTo(System.out);\n+\n+        Assert.assertEquals(Interpreter.invoke(f), f3());\n+    }\n+\n+    static CoreOps.FuncOp getFuncOp(String name) {\n+        Optional<Method> om = Stream.of(TestArrayTypes.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestArrayTypes.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -218,0 +218,60 @@\n+\n+    @IR(\"\"\"\n+            func @\"test14\" (%0 : ConstantsTest)void -> {\n+                %1 : java.lang.Class = constant @\"java.lang.String[]\";\n+                %2 : Var<java.lang.Class> = var %1 @\"s\";\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    void test14() {\n+        Class<?> s = String[].class;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test15\" (%0 : ConstantsTest)void -> {\n+                %1 : java.lang.Class = constant @\"java.lang.String[][]\";\n+                %2 : Var<java.lang.Class> = var %1 @\"s\";\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    void test15() {\n+        Class<?> s = String[][].class;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test16\" (%0 : ConstantsTest)void -> {\n+                %1 : java.lang.Class = constant @\"java.lang.String[][][]\";\n+                %2 : Var<java.lang.Class> = var %1 @\"s\";\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    void test16() {\n+        Class<?> s = String[][][].class;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test17\" (%0 : ConstantsTest)void -> {\n+                %1 : java.lang.Class = constant @\"boolean[]\";\n+                %2 : Var<java.lang.Class> = var %1 @\"s\";\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    void test17() {\n+        Class<?> s = boolean[].class;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test18\" (%0 : ConstantsTest)void -> {\n+                %1 : java.lang.Class = constant @\"boolean[][][]\";\n+                %2 : Var<java.lang.Class> = var %1 @\"s\";\n+                return;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    void test18() {\n+        Class<?> s = boolean[][][].class;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/ConstantsTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}