{"files":[{"patch":"@@ -79,1 +79,1 @@\n-        public static final String NAME = \"func\";\n+        static final String NAME = \"func\";\n@@ -85,1 +85,1 @@\n-        public static FuncOp create(ExternalizedOp def) {\n+        static FuncOp create(ExternalizedOp def) {\n@@ -173,1 +173,1 @@\n-        public static final String NAME = \"func.call\";\n+        static final String NAME = \"func.call\";\n@@ -179,1 +179,1 @@\n-        public static FuncCallOp create(ExternalizedOp def) {\n+        static FuncCallOp create(ExternalizedOp def) {\n@@ -231,1 +231,1 @@\n-        public static final String NAME = \"module\";\n+        static final String NAME = \"module\";\n@@ -236,1 +236,1 @@\n-        public static ModuleOp create(ExternalizedOp def) {\n+        static ModuleOp create(ExternalizedOp def) {\n@@ -317,1 +317,1 @@\n-        public static final String NAME = \"quoted\";\n+        static final String NAME = \"quoted\";\n@@ -325,1 +325,1 @@\n-        public QuotedOp(ExternalizedOp def) {\n+        QuotedOp(ExternalizedOp def) {\n@@ -409,1 +409,1 @@\n-        public static final String NAME = \"closure\";\n+        static final String NAME = \"closure\";\n@@ -413,1 +413,1 @@\n-        public ClosureOp(ExternalizedOp def) {\n+        ClosureOp(ExternalizedOp def) {\n@@ -475,1 +475,1 @@\n-        public static final String NAME = \"closure.call\";\n+        static final String NAME = \"closure.call\";\n@@ -477,1 +477,1 @@\n-        public ClosureCallOp(ExternalizedOp def) {\n+        ClosureCallOp(ExternalizedOp def) {\n@@ -509,1 +509,1 @@\n-        public static final String NAME = \"return\";\n+        static final String NAME = \"return\";\n@@ -511,1 +511,1 @@\n-        public ReturnOp(ExternalizedOp def) {\n+        ReturnOp(ExternalizedOp def) {\n@@ -555,1 +555,1 @@\n-        public static final String NAME = \"unreachable\";\n+        static final String NAME = \"unreachable\";\n@@ -557,1 +557,1 @@\n-        public UnreachableOp(ExternalizedOp def) {\n+        UnreachableOp(ExternalizedOp def) {\n@@ -593,1 +593,1 @@\n-        public static final String NAME = \"yield\";\n+        static final String NAME = \"yield\";\n@@ -595,1 +595,1 @@\n-        public YieldOp(ExternalizedOp def) {\n+        YieldOp(ExternalizedOp def) {\n@@ -643,1 +643,1 @@\n-        public static final String NAME = \"branch\";\n+        static final String NAME = \"branch\";\n@@ -647,1 +647,1 @@\n-        public BranchOp(ExternalizedOp def) {\n+        BranchOp(ExternalizedOp def) {\n@@ -697,1 +697,1 @@\n-        public static final String NAME = \"cbranch\";\n+        static final String NAME = \"cbranch\";\n@@ -702,1 +702,1 @@\n-        public ConditionalBranchOp(ExternalizedOp def) {\n+        ConditionalBranchOp(ExternalizedOp def) {\n@@ -758,1 +758,1 @@\n-        public static final String NAME = \"constant\";\n+        static final String NAME = \"constant\";\n@@ -765,1 +765,1 @@\n-        public static ConstantOp create(ExternalizedOp def) {\n+        static ConstantOp create(ExternalizedOp def) {\n@@ -871,1 +871,1 @@\n-        public static final String NAME = \"var\";\n+        static final String NAME = \"var\";\n@@ -877,1 +877,1 @@\n-        public static VarOp create(ExternalizedOp def) {\n+        static VarOp create(ExternalizedOp def) {\n@@ -1002,1 +1002,1 @@\n-            public static final String NAME = \"var.load\";\n+            static final String NAME = \"var.load\";\n@@ -1039,1 +1039,1 @@\n-            public static final String NAME = \"var.store\";\n+            static final String NAME = \"var.store\";\n@@ -1087,1 +1087,1 @@\n-        public static final String NAME = \"tuple\";\n+        static final String NAME = \"tuple\";\n@@ -1089,1 +1089,1 @@\n-        public TupleOp(ExternalizedOp def) {\n+        TupleOp(ExternalizedOp def) {\n@@ -1117,1 +1117,1 @@\n-        public static final String NAME = \"tuple.load\";\n+        static final String NAME = \"tuple.load\";\n@@ -1122,1 +1122,1 @@\n-        public static TupleLoadOp create(ExternalizedOp def) {\n+        static TupleLoadOp create(ExternalizedOp def) {\n@@ -1178,1 +1178,1 @@\n-        public static final String NAME = \"tuple.with\";\n+        static final String NAME = \"tuple.with\";\n@@ -1183,1 +1183,1 @@\n-        public static TupleWithOp create(ExternalizedOp def) {\n+        static TupleWithOp create(ExternalizedOp def) {\n@@ -1239,0 +1239,27 @@\n+    static Op createOp(ExternalizedOp def) {\n+        Op op = switch (def.name()) {\n+            case \"branch\" -> new BranchOp(def);\n+            case \"cbranch\" -> new ConditionalBranchOp(def);\n+            case \"closure\" -> new ClosureOp(def);\n+            case \"closure.call\" -> new ClosureCallOp(def);\n+            case \"constant\" -> ConstantOp.create(def);\n+            case \"func\" -> FuncOp.create(def);\n+            case \"func.call\" -> FuncCallOp.create(def);\n+            case \"module\" -> ModuleOp.create(def);\n+            case \"quoted\" -> new QuotedOp(def);\n+            case \"return\" -> new ReturnOp(def);\n+            case \"tuple\" -> new TupleOp(def);\n+            case \"tuple.load\" -> TupleLoadOp.create(def);\n+            case \"tuple.with\" -> TupleWithOp.create(def);\n+            case \"unreachable\" -> new UnreachableOp(def);\n+            case \"var\" -> VarOp.create(def);\n+            case \"var.load\" -> new VarAccessOp.VarLoadOp(def);\n+            case \"var.store\" -> new VarAccessOp.VarStoreOp(def);\n+            case \"yield\" -> new YieldOp(def);\n+            default -> null;\n+        };\n+        if (op != null) {\n+            op.setLocation(def.location());\n+        }\n+        return op;\n+    }\n@@ -1243,1 +1270,1 @@\n-    public static final OpFactory CORE_OP_FACTORY = OpFactory.OP_FACTORY.get(CoreOp.class);\n+    public static final OpFactory CORE_OP_FACTORY = CoreOp::createOp;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":62,"deletions":35,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        public static final String NAME = \"lambda\";\n+        static final String NAME = \"lambda\";\n@@ -176,1 +176,1 @@\n-        public LambdaOp(ExternalizedOp def) {\n+        LambdaOp(ExternalizedOp def) {\n@@ -376,1 +376,1 @@\n-        public static final String NAME = \"throw\";\n+        static final String NAME = \"throw\";\n@@ -378,1 +378,1 @@\n-        public ThrowOp(ExternalizedOp def) {\n+        ThrowOp(ExternalizedOp def) {\n@@ -415,1 +415,1 @@\n-        public static final String NAME = \"assert\";\n+        static final String NAME = \"assert\";\n@@ -418,1 +418,1 @@\n-        public AssertOp(ExternalizedOp def) {\n+        AssertOp(ExternalizedOp def) {\n@@ -478,1 +478,1 @@\n-            public static final String NAME = \"monitor.enter\";\n+            static final String NAME = \"monitor.enter\";\n@@ -480,1 +480,1 @@\n-            public MonitorEnterOp(ExternalizedOp def) {\n+            MonitorEnterOp(ExternalizedOp def) {\n@@ -507,1 +507,1 @@\n-            public static final String NAME = \"monitor.exit\";\n+            static final String NAME = \"monitor.exit\";\n@@ -509,1 +509,1 @@\n-            public MonitorExitOp(ExternalizedOp def) {\n+            MonitorExitOp(ExternalizedOp def) {\n@@ -557,1 +557,1 @@\n-        public static final String NAME = \"invoke\";\n+        static final String NAME = \"invoke\";\n@@ -567,1 +567,1 @@\n-        public static InvokeOp create(ExternalizedOp def) {\n+        static InvokeOp create(ExternalizedOp def) {\n@@ -708,1 +708,1 @@\n-        public static final String NAME = \"conv\";\n+        static final String NAME = \"conv\";\n@@ -712,1 +712,1 @@\n-        public ConvOp(ExternalizedOp def) {\n+        ConvOp(ExternalizedOp def) {\n@@ -746,1 +746,1 @@\n-        public static final String NAME = \"new\";\n+        static final String NAME = \"new\";\n@@ -754,1 +754,1 @@\n-        public static NewOp create(ExternalizedOp def) {\n+        static NewOp create(ExternalizedOp def) {\n@@ -871,1 +871,1 @@\n-            public static final String NAME = \"field.load\";\n+            static final String NAME = \"field.load\";\n@@ -875,1 +875,1 @@\n-            public static FieldLoadOp create(ExternalizedOp def) {\n+            static FieldLoadOp create(ExternalizedOp def) {\n@@ -931,1 +931,1 @@\n-            public static final String NAME = \"field.store\";\n+            static final String NAME = \"field.store\";\n@@ -933,1 +933,1 @@\n-            public static FieldStoreOp create(ExternalizedOp def) {\n+            static FieldStoreOp create(ExternalizedOp def) {\n@@ -984,1 +984,1 @@\n-        public static final String NAME = \"array.length\";\n+        static final String NAME = \"array.length\";\n@@ -986,1 +986,1 @@\n-        public ArrayLengthOp(ExternalizedOp def) {\n+        ArrayLengthOp(ExternalizedOp def) {\n@@ -1041,1 +1041,1 @@\n-            public static final String NAME = \"array.load\";\n+            static final String NAME = \"array.load\";\n@@ -1044,1 +1044,1 @@\n-            public ArrayLoadOp(ExternalizedOp def) {\n+            ArrayLoadOp(ExternalizedOp def) {\n@@ -1085,1 +1085,1 @@\n-            public static final String NAME = \"array.store\";\n+            static final String NAME = \"array.store\";\n@@ -1087,1 +1087,1 @@\n-            public ArrayStoreOp(ExternalizedOp def) {\n+            ArrayStoreOp(ExternalizedOp def) {\n@@ -1122,1 +1122,1 @@\n-        public static final String NAME = \"instanceof\";\n+        static final String NAME = \"instanceof\";\n@@ -1127,1 +1127,1 @@\n-        public static InstanceOfOp create(ExternalizedOp def) {\n+        static InstanceOfOp create(ExternalizedOp def) {\n@@ -1178,1 +1178,1 @@\n-        public static final String NAME = \"cast\";\n+        static final String NAME = \"cast\";\n@@ -1184,1 +1184,1 @@\n-        public static CastOp create(ExternalizedOp def) {\n+        static CastOp create(ExternalizedOp def) {\n@@ -1237,1 +1237,1 @@\n-        public static final String NAME = \"exception.region.enter\";\n+        static final String NAME = \"exception.region.enter\";\n@@ -1245,1 +1245,1 @@\n-        public ExceptionRegionEnter(ExternalizedOp def) {\n+        ExceptionRegionEnter(ExternalizedOp def) {\n@@ -1295,1 +1295,1 @@\n-        public static final String NAME = \"exception.region.exit\";\n+        static final String NAME = \"exception.region.exit\";\n@@ -1301,1 +1301,1 @@\n-        public ExceptionRegionExit(ExternalizedOp def) {\n+        ExceptionRegionExit(ExternalizedOp def) {\n@@ -1352,1 +1352,1 @@\n-        public static final String NAME = \"concat\";\n+        static final String NAME = \"concat\";\n@@ -1358,1 +1358,1 @@\n-        public ConcatOp(ExternalizedOp def) {\n+        ConcatOp(ExternalizedOp def) {\n@@ -1468,1 +1468,1 @@\n-        public static final String NAME = \"add\";\n+        static final String NAME = \"add\";\n@@ -1470,1 +1470,1 @@\n-        public AddOp(ExternalizedOp def) {\n+        AddOp(ExternalizedOp def) {\n@@ -1493,1 +1493,1 @@\n-        public static final String NAME = \"sub\";\n+        static final String NAME = \"sub\";\n@@ -1495,1 +1495,1 @@\n-        public SubOp(ExternalizedOp def) {\n+        SubOp(ExternalizedOp def) {\n@@ -1518,1 +1518,1 @@\n-        public static final String NAME = \"mul\";\n+        static final String NAME = \"mul\";\n@@ -1520,1 +1520,1 @@\n-        public MulOp(ExternalizedOp def) {\n+        MulOp(ExternalizedOp def) {\n@@ -1543,1 +1543,1 @@\n-        public static final String NAME = \"div\";\n+        static final String NAME = \"div\";\n@@ -1545,1 +1545,1 @@\n-        public DivOp(ExternalizedOp def) {\n+        DivOp(ExternalizedOp def) {\n@@ -1568,1 +1568,1 @@\n-        public static final String NAME = \"mod\";\n+        static final String NAME = \"mod\";\n@@ -1570,1 +1570,1 @@\n-        public ModOp(ExternalizedOp def) {\n+        ModOp(ExternalizedOp def) {\n@@ -1594,1 +1594,1 @@\n-        public static final String NAME = \"or\";\n+        static final String NAME = \"or\";\n@@ -1596,1 +1596,1 @@\n-        public OrOp(ExternalizedOp def) {\n+        OrOp(ExternalizedOp def) {\n@@ -1620,1 +1620,1 @@\n-        public static final String NAME = \"and\";\n+        static final String NAME = \"and\";\n@@ -1622,1 +1622,1 @@\n-        public AndOp(ExternalizedOp def) {\n+        AndOp(ExternalizedOp def) {\n@@ -1646,1 +1646,1 @@\n-        public static final String NAME = \"xor\";\n+        static final String NAME = \"xor\";\n@@ -1648,1 +1648,1 @@\n-        public XorOp(ExternalizedOp def) {\n+        XorOp(ExternalizedOp def) {\n@@ -1671,1 +1671,1 @@\n-        public static final String NAME = \"lshl\";\n+        static final String NAME = \"lshl\";\n@@ -1673,1 +1673,1 @@\n-        public LshlOp(ExternalizedOp def) {\n+        LshlOp(ExternalizedOp def) {\n@@ -1696,1 +1696,1 @@\n-        public static final String NAME = \"ashr\";\n+        static final String NAME = \"ashr\";\n@@ -1698,1 +1698,1 @@\n-        public AshrOp(ExternalizedOp def) {\n+        AshrOp(ExternalizedOp def) {\n@@ -1721,1 +1721,1 @@\n-        public static final String NAME = \"lshr\";\n+        static final String NAME = \"lshr\";\n@@ -1723,1 +1723,1 @@\n-        public LshrOp(ExternalizedOp def) {\n+        LshrOp(ExternalizedOp def) {\n@@ -1746,1 +1746,1 @@\n-        public static final String NAME = \"neg\";\n+        static final String NAME = \"neg\";\n@@ -1748,1 +1748,1 @@\n-        public NegOp(ExternalizedOp def) {\n+        NegOp(ExternalizedOp def) {\n@@ -1771,1 +1771,1 @@\n-        public static final String NAME = \"compl\";\n+        static final String NAME = \"compl\";\n@@ -1773,1 +1773,1 @@\n-        public ComplOp(ExternalizedOp def) {\n+        ComplOp(ExternalizedOp def) {\n@@ -1796,1 +1796,1 @@\n-        public static final String NAME = \"not\";\n+        static final String NAME = \"not\";\n@@ -1798,1 +1798,1 @@\n-        public NotOp(ExternalizedOp def) {\n+        NotOp(ExternalizedOp def) {\n@@ -1822,1 +1822,1 @@\n-        public static final String NAME = \"eq\";\n+        static final String NAME = \"eq\";\n@@ -1824,1 +1824,1 @@\n-        public EqOp(ExternalizedOp def) {\n+        EqOp(ExternalizedOp def) {\n@@ -1848,1 +1848,1 @@\n-        public static final String NAME = \"neq\";\n+        static final String NAME = \"neq\";\n@@ -1850,1 +1850,1 @@\n-        public NeqOp(ExternalizedOp def) {\n+        NeqOp(ExternalizedOp def) {\n@@ -1873,1 +1873,1 @@\n-        public static final String NAME = \"gt\";\n+        static final String NAME = \"gt\";\n@@ -1875,1 +1875,1 @@\n-        public GtOp(ExternalizedOp def) {\n+        GtOp(ExternalizedOp def) {\n@@ -1899,1 +1899,1 @@\n-        public static final String NAME = \"ge\";\n+        static final String NAME = \"ge\";\n@@ -1901,1 +1901,1 @@\n-        public GeOp(ExternalizedOp def) {\n+        GeOp(ExternalizedOp def) {\n@@ -1925,1 +1925,1 @@\n-        public static final String NAME = \"lt\";\n+        static final String NAME = \"lt\";\n@@ -1927,1 +1927,1 @@\n-        public LtOp(ExternalizedOp def) {\n+        LtOp(ExternalizedOp def) {\n@@ -1951,1 +1951,1 @@\n-        public static final String NAME = \"le\";\n+        static final String NAME = \"le\";\n@@ -1953,1 +1953,1 @@\n-        public LeOp(ExternalizedOp def) {\n+        LeOp(ExternalizedOp def) {\n@@ -2060,1 +2060,1 @@\n-        public static final String NAME = \"java.break\";\n+        static final String NAME = \"java.break\";\n@@ -2062,1 +2062,1 @@\n-        public JavaBreakOp(ExternalizedOp def) {\n+        JavaBreakOp(ExternalizedOp def) {\n@@ -2090,1 +2090,1 @@\n-        public static final String NAME = \"java.continue\";\n+        static final String NAME = \"java.continue\";\n@@ -2092,1 +2092,1 @@\n-        public JavaContinueOp(ExternalizedOp def) {\n+        JavaContinueOp(ExternalizedOp def) {\n@@ -2142,1 +2142,1 @@\n-        public static final String NAME = \"java.yield\";\n+        static final String NAME = \"java.yield\";\n@@ -2144,1 +2144,1 @@\n-        public JavaYieldOp(ExternalizedOp def) {\n+        JavaYieldOp(ExternalizedOp def) {\n@@ -2220,1 +2220,1 @@\n-        public static final String NAME = \"java.block\";\n+        static final String NAME = \"java.block\";\n@@ -2224,1 +2224,1 @@\n-        public JavaBlockOp(ExternalizedOp def) {\n+        JavaBlockOp(ExternalizedOp def) {\n@@ -2299,1 +2299,1 @@\n-        public static final String NAME = \"java.synchronized\";\n+        static final String NAME = \"java.synchronized\";\n@@ -2304,1 +2304,1 @@\n-        public JavaSynchronizedOp(ExternalizedOp def) {\n+        JavaSynchronizedOp(ExternalizedOp def) {\n@@ -2467,1 +2467,1 @@\n-        public static final String NAME = \"java.labeled\";\n+        static final String NAME = \"java.labeled\";\n@@ -2471,1 +2471,1 @@\n-        public JavaLabeledOp(ExternalizedOp def) {\n+        JavaLabeledOp(ExternalizedOp def) {\n@@ -2640,1 +2640,1 @@\n-        public static final String NAME = \"java.if\";\n+        static final String NAME = \"java.if\";\n@@ -2644,1 +2644,1 @@\n-        public JavaIfOp(ExternalizedOp def) {\n+        JavaIfOp(ExternalizedOp def) {\n@@ -2921,1 +2921,1 @@\n-        public static final String NAME = \"java.switch.expression\";\n+        static final String NAME = \"java.switch.expression\";\n@@ -2925,1 +2925,1 @@\n-        public JavaSwitchExpressionOp(ExternalizedOp def) {\n+        JavaSwitchExpressionOp(ExternalizedOp def) {\n@@ -2958,1 +2958,1 @@\n-        public static final String NAME = \"java.switch.statement\";\n+        static final String NAME = \"java.switch.statement\";\n@@ -2960,1 +2960,1 @@\n-        public JavaSwitchStatementOp(ExternalizedOp def) {\n+        JavaSwitchStatementOp(ExternalizedOp def) {\n@@ -2990,1 +2990,1 @@\n-        public static final String NAME = \"java.switch.fallthrough\";\n+        static final String NAME = \"java.switch.fallthrough\";\n@@ -2992,1 +2992,1 @@\n-        public JavaSwitchFallthroughOp(ExternalizedOp def) {\n+        JavaSwitchFallthroughOp(ExternalizedOp def) {\n@@ -3136,1 +3136,1 @@\n-        public static JavaForOp create(ExternalizedOp def) {\n+        static JavaForOp create(ExternalizedOp def) {\n@@ -3140,1 +3140,1 @@\n-        public JavaForOp(ExternalizedOp def) {\n+        JavaForOp(ExternalizedOp def) {\n@@ -3370,1 +3370,1 @@\n-        public static JavaEnhancedForOp create(ExternalizedOp def) {\n+        static JavaEnhancedForOp create(ExternalizedOp def) {\n@@ -3374,1 +3374,1 @@\n-        public JavaEnhancedForOp(ExternalizedOp def) {\n+        JavaEnhancedForOp(ExternalizedOp def) {\n@@ -3590,1 +3590,1 @@\n-        public JavaWhileOp(ExternalizedOp def) {\n+        JavaWhileOp(ExternalizedOp def) {\n@@ -3733,1 +3733,1 @@\n-        public JavaDoWhileOp(ExternalizedOp def) {\n+        JavaDoWhileOp(ExternalizedOp def) {\n@@ -3962,1 +3962,1 @@\n-        public static final String NAME = \"java.cand\";\n+        static final String NAME = \"java.cand\";\n@@ -3964,1 +3964,1 @@\n-        public JavaConditionalAndOp(ExternalizedOp def) {\n+        JavaConditionalAndOp(ExternalizedOp def) {\n@@ -4017,1 +4017,1 @@\n-        public static final String NAME = \"java.cor\";\n+        static final String NAME = \"java.cor\";\n@@ -4019,1 +4019,1 @@\n-        public JavaConditionalOrOp(ExternalizedOp def) {\n+        JavaConditionalOrOp(ExternalizedOp def) {\n@@ -4049,1 +4049,1 @@\n-        public static final String NAME = \"java.cexpression\";\n+        static final String NAME = \"java.cexpression\";\n@@ -4055,1 +4055,1 @@\n-        public JavaConditionalExpressionOp(ExternalizedOp def) {\n+        JavaConditionalExpressionOp(ExternalizedOp def) {\n@@ -4212,1 +4212,1 @@\n-        public static JavaTryOp create(ExternalizedOp def) {\n+        static JavaTryOp create(ExternalizedOp def) {\n@@ -4216,1 +4216,1 @@\n-        public JavaTryOp(ExternalizedOp def) {\n+        JavaTryOp(ExternalizedOp def) {\n@@ -4677,1 +4677,1 @@\n-            public static final String NAME = \"pattern.type\";\n+            static final String NAME = \"pattern.type\";\n@@ -4684,1 +4684,1 @@\n-            public TypePatternOp(ExternalizedOp def) {\n+            TypePatternOp(ExternalizedOp def) {\n@@ -4740,1 +4740,1 @@\n-            public static final String NAME = \"pattern.record\";\n+            static final String NAME = \"pattern.record\";\n@@ -4746,1 +4746,1 @@\n-            public static RecordPatternOp create(ExternalizedOp def) {\n+            static RecordPatternOp create(ExternalizedOp def) {\n@@ -4801,1 +4801,1 @@\n-            public static final String NAME = \"pattern.match.all\";\n+            static final String NAME = \"pattern.match.all\";\n@@ -4803,1 +4803,1 @@\n-            public MatchAllPatternOp(ExternalizedOp def) {\n+            MatchAllPatternOp(ExternalizedOp def) {\n@@ -4831,1 +4831,1 @@\n-            public static final String NAME = \"pattern.match\";\n+            static final String NAME = \"pattern.match\";\n@@ -4836,1 +4836,1 @@\n-            public MatchOp(ExternalizedOp def) {\n+            MatchOp(ExternalizedOp def) {\n@@ -5086,0 +5086,70 @@\n+    static Op createOp(ExternalizedOp def) {\n+        Op op = switch (def.name()) {\n+            case \"add\" -> new AddOp(def);\n+            case \"and\" -> new AndOp(def);\n+            case \"array.length\" -> new ArrayLengthOp(def);\n+            case \"array.load\" -> new ArrayAccessOp.ArrayLoadOp(def);\n+            case \"array.store\" -> new ArrayAccessOp.ArrayStoreOp(def);\n+            case \"ashr\" -> new AshrOp(def);\n+            case \"assert\" -> new AssertOp(def);\n+            case \"cast\" -> CastOp.create(def);\n+            case \"compl\" -> new ComplOp(def);\n+            case \"concat\" -> new ConcatOp(def);\n+            case \"conv\" -> new ConvOp(def);\n+            case \"div\" -> new DivOp(def);\n+            case \"eq\" -> new EqOp(def);\n+            case \"exception.region.enter\" -> new ExceptionRegionEnter(def);\n+            case \"exception.region.exit\" -> new ExceptionRegionExit(def);\n+            case \"field.load\" -> FieldAccessOp.FieldLoadOp.create(def);\n+            case \"field.store\" -> FieldAccessOp.FieldStoreOp.create(def);\n+            case \"ge\" -> new GeOp(def);\n+            case \"gt\" -> new GtOp(def);\n+            case \"instanceof\" -> InstanceOfOp.create(def);\n+            case \"invoke\" -> InvokeOp.create(def);\n+            case \"java.block\" -> new JavaBlockOp(def);\n+            case \"java.break\" -> new JavaBreakOp(def);\n+            case \"java.cand\" -> new JavaConditionalAndOp(def);\n+            case \"java.cexpression\" -> new JavaConditionalExpressionOp(def);\n+            case \"java.continue\" -> new JavaContinueOp(def);\n+            case \"java.cor\" -> new JavaConditionalOrOp(def);\n+            case \"java.do.while\" -> new JavaDoWhileOp(def);\n+            case \"java.enhancedFor\" -> JavaEnhancedForOp.create(def);\n+            case \"java.for\" -> JavaForOp.create(def);\n+            case \"java.if\" -> new JavaIfOp(def);\n+            case \"java.labeled\" -> new JavaLabeledOp(def);\n+            case \"java.switch.expression\" -> new JavaSwitchExpressionOp(def);\n+            case \"java.switch.fallthrough\" -> new JavaSwitchFallthroughOp(def);\n+            case \"java.switch.statement\" -> new JavaSwitchStatementOp(def);\n+            case \"java.synchronized\" -> new JavaSynchronizedOp(def);\n+            case \"java.try\" -> JavaTryOp.create(def);\n+            case \"java.while\" -> new JavaWhileOp(def);\n+            case \"java.yield\" -> new JavaYieldOp(def);\n+            case \"lambda\" -> new LambdaOp(def);\n+            case \"le\" -> new LeOp(def);\n+            case \"lshl\" -> new LshlOp(def);\n+            case \"lshr\" -> new LshrOp(def);\n+            case \"lt\" -> new LtOp(def);\n+            case \"mod\" -> new ModOp(def);\n+            case \"monitor.enter\" -> new MonitorOp.MonitorEnterOp(def);\n+            case \"monitor.exit\" -> new MonitorOp.MonitorExitOp(def);\n+            case \"mul\" -> new MulOp(def);\n+            case \"neg\" -> new NegOp(def);\n+            case \"neq\" -> new NeqOp(def);\n+            case \"new\" -> NewOp.create(def);\n+            case \"not\" -> new NotOp(def);\n+            case \"or\" -> new OrOp(def);\n+            case \"pattern.match\" -> new PatternOps.MatchOp(def);\n+            case \"pattern.match.all\" -> new PatternOps.MatchAllPatternOp(def);\n+            case \"pattern.record\" -> PatternOps.RecordPatternOp.create(def);\n+            case \"pattern.type\" -> new PatternOps.TypePatternOp(def);\n+            case \"sub\" -> new SubOp(def);\n+            case \"throw\" -> new ThrowOp(def);\n+            case \"xor\" -> new XorOp(def);\n+            default -> null;\n+        };\n+        if (op != null) {\n+            op.setLocation(def.location());\n+        }\n+        return op;\n+    }\n+\n@@ -5089,1 +5159,1 @@\n-    public static final OpFactory JAVA_OP_FACTORY = CoreOp.CORE_OP_FACTORY.andThen(OpFactory.OP_FACTORY.get(JavaOp.class));\n+    public static final OpFactory JAVA_OP_FACTORY = CoreOp.CORE_OP_FACTORY.andThen(JavaOp::createOp);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":189,"deletions":119,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -231,0 +231,77 @@\n+\n+\/\/    \/\/ Uncomment the following and execute like as follows to generate a factory method\n+\/\/    \/\/ for enclosed concrete operations\n+\/\/    \/\/ java --add-modules jdk.incubator.code jdk.incubator.code.extern.OpFactory jdk.incubator.code.dialect.core.CoreOp\n+\/\/    static void main(String[] args) throws Throwable {\n+\/\/        Class<?> enclosingOpClass = Class.forName(args[0]);\n+\/\/        generateSwitchExpression(enclosingOpClass, System.out);\n+\/\/    }\n+\/\/\n+\/\/    static void generateSwitchExpression(Class<?> enclosingOpClass, java.io.PrintStream out) throws Throwable {\n+\/\/        java.util.Map<String, java.lang.reflect.Executable> opNameMap = new java.util.TreeMap<>();\n+\/\/        for (Class<?> opClass : enclosingOpClass.getNestMembers()) {\n+\/\/            if (!Op.class.isAssignableFrom(opClass)) {\n+\/\/                continue;\n+\/\/            }\n+\/\/            if (!Modifier.isFinal(opClass.getModifiers())) {\n+\/\/                continue;\n+\/\/            }\n+\/\/\n+\/\/            OpDeclaration opDecl = opClass.getAnnotation(OpDeclaration.class);\n+\/\/            String name = opDecl.value();\n+\/\/\n+\/\/            var e = getOpConstructorExecutable(opClass);\n+\/\/            opNameMap.put(name, e);\n+\/\/        }\n+\/\/\n+\/\/        out.println(\"static Op createOp(ExternalizedOp def) {\");\n+\/\/        out.println(\"    Op op = switch (def.name()) {\");\n+\/\/        opNameMap.forEach((name, e) -> {\n+\/\/            out.print(\"        case \\\"\" + name + \"\\\" -> \");\n+\/\/            switch (e) {\n+\/\/                case java.lang.reflect.Constructor<?> constructor -> {\n+\/\/                    out.println(\"new \" + name(enclosingOpClass, constructor.getDeclaringClass()) + \"(def);\");\n+\/\/                }\n+\/\/                case java.lang.reflect.Method method -> {\n+\/\/                    out.println(name(enclosingOpClass, method.getDeclaringClass()) + \".\" + method.getName() + \"(def);\");\n+\/\/                }\n+\/\/            }\n+\/\/        });\n+\/\/        out.println(\"        default -> null;\");\n+\/\/        out.println(\"    };\");\n+\/\/        out.print(\n+\/\/                \"\"\"\n+\/\/                    if (op != null) {\n+\/\/                        op.setLocation(def.location());\n+\/\/                    }\n+\/\/                    return op;\n+\/\/                \"\"\");\n+\/\/        out.println(\"}\");\n+\/\/    }\n+\/\/\n+\/\/    private static java.lang.reflect.Executable getOpConstructorExecutable(Class<?> opClass) {\n+\/\/        java.lang.reflect.Executable e = null;\n+\/\/        try {\n+\/\/            e = opClass.getMethod(\"create\", ExternalizedOp.class);\n+\/\/        } catch (NoSuchMethodException _) {\n+\/\/        }\n+\/\/\n+\/\/        if (e != null) {\n+\/\/            if (!Modifier.isStatic(e.getModifiers())) {\n+\/\/                throw new InternalError(\"Operation constructor is not a static method: \" + e);\n+\/\/            }\n+\/\/            return e;\n+\/\/        }\n+\/\/\n+\/\/        try {\n+\/\/            e = opClass.getConstructor(ExternalizedOp.class);\n+\/\/        } catch (NoSuchMethodException _) {\n+\/\/            return null;\n+\/\/        }\n+\/\/\n+\/\/        return e;\n+\/\/    }\n+\/\/\n+\/\/    static String name(Class<?> enclosingOpClass, Class<?> declaringClass) {\n+\/\/        return declaringClass.getCanonicalName().substring(enclosingOpClass.getCanonicalName().length() + 1);\n+\/\/    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpFactory.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"}]}