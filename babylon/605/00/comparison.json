{"files":[{"patch":"@@ -242,1 +242,5 @@\n-                    builder.nl().kernelMethod(buildContext, funcOp).nl();\n+                    if (funcOp.location().equals(kernelCallGraph.entrypoint.funcOp().location())) {\n+                        builder.nl().kernelEntrypoint(buildContext, args).nl();\n+                    } else {\n+                        builder.nl().kernelMethod(buildContext, funcOp).nl();\n+                    }\n@@ -246,4 +250,0 @@\n-        HatFinalDetectionPhase hatFinalDetectionPhase = new HatFinalDetectionPhase();\n-        hatFinalDetectionPhase.apply(kernelCallGraph.entrypoint.funcOp());\n-        buildContext.setFinals(hatFinalDetectionPhase.getFinalVars());\n-        builder.nl().kernelEntrypoint(buildContext, args).nl();\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import hat.callgraph.KernelCallGraph;\n@@ -134,8 +135,12 @@\n-        entry.traverse(null, (map, op) -> {\n-            if (op instanceof JavaOp.InvokeOp invokeOp) {\n-                Class<?> javaRefTypeClass = javaRefClassOrThrow(callGraph.computeContext.accelerator.lookup, invokeOp);\n-                try {\n-                    var method = invokeOp.invokeDescriptor().resolveToMethod(l, invokeOp.invokeKind());\n-                    CoreOp.FuncOp f = Op.ofMethod(method).orElse(null);\n-                    if (f != null && !callGraph.filterCalls(f, invokeOp, method, invokeOp.invokeDescriptor(), javaRefTypeClass)) {\n-                        work.push(new RefAndFunc(invokeOp.invokeDescriptor(),  f));\n+        entry.elements().filter(elem -> elem instanceof JavaOp.InvokeOp)\n+                .forEach(elem -> {\n+                    JavaOp.InvokeOp iop = (JavaOp.InvokeOp) elem;\n+                    Class<?> javaRefTypeClass = javaRefClassOrThrow(callGraph.computeContext.accelerator.lookup, iop);\n+                    try {\n+                        var method = iop.invokeDescriptor().resolveToMethod(l, iop.invokeKind());\n+                        CoreOp.FuncOp f = Op.ofMethod(method).orElse(null);\n+                        if (f != null && !callGraph.filterCalls(f, iop, method, iop.invokeDescriptor(), javaRefTypeClass)) {\n+                            work.push(new RefAndFunc(iop.invokeDescriptor(), f));\n+                        }\n+                    } catch (ReflectiveOperationException _) {\n+                        throw new IllegalStateException(\"Could not resolve invokeWrapper to method\");\n@@ -143,21 +148,3 @@\n-                } catch (ReflectiveOperationException _) {\n-                    throw new IllegalStateException(\"Could not resolve invokeWrapper to method\");\n-                }\n-            }\n-            return map;\n-        });\n-\n-        \/\/ modEntry.elements().filter(elem -> elem instanceof JavaOp.InvokeOp)\n-        \/\/         .forEach(elem -> {\n-        \/\/             JavaOp.InvokeOp iop = (JavaOp.InvokeOp) elem;\n-        \/\/             Class<?> javaRefTypeClass = javaRefClassOrThrow(callGraph.computeContext.accelerator.lookup, iop);\n-        \/\/             try {\n-        \/\/                 var method = iop.invokeDescriptor().resolveToMethod(l, iop.invokeKind());\n-        \/\/                 CoreOp.FuncOp f = Op.ofMethod(method).orElse(null);\n-        \/\/                 if (f != null && !callGraph.filterCalls(f, iop, method, iop.invokeDescriptor(), javaRefTypeClass)) {\n-        \/\/                     work.push(new RefAndFunc(iop.invokeDescriptor(), f));\n-        \/\/                 }\n-        \/\/             } catch (ReflectiveOperationException _) {\n-        \/\/                 throw new IllegalStateException(\"Could not resolve invokeWrapper to method\");\n-        \/\/             }\n-        \/\/         });\n+                });\n+\n+        funcs.addFirst(entry);\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/OpTk.java","additions":16,"deletions":29,"binary":false,"changes":45,"status":"modified"}]}