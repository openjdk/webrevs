{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.code.op.CoreOps;\n@@ -38,0 +39,1 @@\n+import java.util.Optional;\n@@ -60,1 +62,1 @@\n-    \/\/ Conversions\n+    \/\/ Resolutions and model access\n@@ -66,0 +68,2 @@\n+    Optional<CoreOps.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException;\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/MethodRef.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.op.CoreOps;\n@@ -37,0 +38,1 @@\n+import java.util.Optional;\n@@ -68,0 +70,1 @@\n+        \/\/ @@@ Constructor\n@@ -114,0 +117,6 @@\n+    \/\/ Copied code in jdk.compiler module throws UOE\n+    @Override\n+    public Optional<CoreOps.FuncOp> codeModel(MethodHandles.Lookup l) throws ReflectiveOperationException {\n+\/*__throw new UnsupportedOperationException();__*\/        return resolveToMember(l).getCodeModel();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/impl\/MethodRefImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.code.op.CoreOps;\n@@ -31,0 +34,2 @@\n+import java.lang.runtime.CodeReflection;\n+import java.util.Optional;\n@@ -97,0 +102,10 @@\n+\n+    @CodeReflection\n+    static void x() {}\n+\n+    @Test\n+    public void testAccessCodeModel() throws ReflectiveOperationException {\n+        MethodRef xr = MethodRef.method(TestReferences.class, \"x\", void.class);\n+        Optional<CoreOps.FuncOp> m = xr.codeModel(MethodHandles.lookup());\n+        Assert.assertTrue(m.isPresent());\n+    }\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestReferences.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}