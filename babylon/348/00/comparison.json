{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#define opencl_backend_cpp\n@@ -32,0 +33,1 @@\n+       alwaysCopy(!minimizeCopies),\n@@ -34,0 +36,2 @@\n+       traceEnqueues((mode&TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n+       traceCalls((mode&TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n@@ -44,0 +48,1 @@\n+          std::cout << \"native alwaysCopy \" << alwaysCopy<<std::endl;\n@@ -46,0 +51,1 @@\n+          std::cout << \"native traceCalls \" << traceCalls<<std::endl;\n@@ -47,0 +53,1 @@\n+          std::cout << \"native traceEnqueues \" << traceEnqueues<<std::endl;\n@@ -183,0 +190,3 @@\n+              if (openclConfig.traceEnqueues | openclConfig.traceCopies){\n+                 std::cout << \"copying buffer from device (from java access) \"<< std::endl;\n+              }\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-      if (!minimizingBuffers || (((arg.flags &JavaDirty)==JavaDirty) && kernel.readsFrom(arg))) {\n+      if (alwaysCopyBuffers || (((arg.flags &JavaDirty)==JavaDirty) && kernel.readsFrom(arg))) {\n@@ -39,1 +39,1 @@\n-      if (!minimizingBuffers){\n+      if (alwaysCopyBuffers){\n@@ -53,1 +53,1 @@\n-bool shouldCopyToDevice(BufferState_s *bufferState, Arg_s *arg ){\n+bool shouldCopyToDevice(BufferState_s *bufferState, Arg_s *arg, bool alwaysCopy, bool showWhy){\n@@ -58,5 +58,17 @@\n-   if (result && bufferState->isDeviceDirty()){\n-         std::cout << \"already still on GPU!\"<<std::endl;\n-         result= false;\n-   }\n-   return result;\n+\n+   if (showWhy){\n+     std::cout<<\n+          \"alwaysCopy=\"<<alwaysCopy\n+          << \" | argRW=\"<<(arg->value.buffer.access==RW_BYTE)\n+          << \" | argRO=\"<<(arg->value.buffer.access==RO_BYTE)\n+          << \" | kernelNeedsToRead=\"<<  kernelReadsFromThisArg\n+          << \" | hostDirty=\"<< bufferState->isHostDirty()\n+          << \" | hostNew=\"<< bufferState->isHostNew()\n+          << \" | deviceDirty=\"<< bufferState->isDeviceDirty()\n+          <<\" so \"\n+            ;\n+    }\n+    if (result && bufferState->isDeviceDirty()){\n+            result= false;\n+      }\n+   return alwaysCopy |result;\n@@ -64,1 +76,1 @@\n-bool shouldCopyFromDevice( BufferState_s *bufferState, Arg_s *arg ){\n+bool shouldCopyFromDevice( BufferState_s *bufferState, Arg_s *arg, bool alwaysCopy, bool showWhy ){\n@@ -67,4 +79,10 @@\n-   \/\/if (!result){\n-    \/\/  std::cout << \"shouldCopyFromDevice false\"<<std::endl;\n-  \/\/ }\n-   return result;\n+   if (showWhy){\n+       std::cout<<\n+         \"alwaysCopy=\"<<alwaysCopy\n+            << \" | argWO=\"<<(arg->value.buffer.access==WO_BYTE)\n+            << \" | argRW=\"<<(arg->value.buffer.access==RW_BYTE)\n+            << \" | kernelWroteToThisArg=\"<<  kernelWroteToThisArg\n+            <<\" so \"\n+              ;\n+      }\n+   return alwaysCopy;\n@@ -81,0 +99,3 @@\n+    if (openclBackend->openclConfig.traceCalls){\n+       std::cout << \"ndrange(\\\"\" <<  (dynamic_cast<Backend::Program::Kernel*>(this))->name<< \"\\\"){\"<<std::endl;\n+    }\n@@ -116,2 +137,2 @@\n-                if (!openclBackend->openclConfig.minimizeCopies\n-                   || shouldCopyToDevice(bufferState, arg)){\n+                if (shouldCopyToDevice(bufferState, arg,openclBackend->openclConfig.alwaysCopy,\n+                      (openclBackend->openclConfig.traceCopies|openclBackend->openclConfig.traceEnqueues))){\n@@ -120,1 +141,1 @@\n-                        \/\/  std::cout << \"We are not minimising copies OR (HOST is JAVA dirty and the kernel is READS this arg) so copying arg \" << arg->idx <<\" to device \"<< std::endl;\n+                          std::cout << \"We are always cloying  OR (HOST is JAVA dirty and the kernel is READS this arg) so copying arg \" << arg->idx <<\" to device \"<< std::endl;\n@@ -123,0 +144,3 @@\n+                       if (openclBackend->openclConfig.traceEnqueues){\n+                           std::cout << \"copying arg \" << arg->idx <<\" to device \"<< std::endl;\n+                       }\n@@ -127,1 +151,1 @@\n-                                          std::cout << \"NOT copying arg \" << arg->idx <<\" to device \"<< std::endl;\n+                           std::cout << \"NOT copying arg \" << arg->idx <<\" to device \"<< std::endl;\n@@ -129,1 +153,1 @@\n-                                     }\n+                     }\n@@ -187,2 +211,3 @@\n-    if (openclBackend->openclConfig.trace){\n-       std::cout << \"enqueued kernel dispatch globalSize=\" << globalSize << std::endl;\n+    if (openclBackend->openclConfig.trace | openclBackend->openclConfig.traceEnqueues){\n+       std::cout << \"enqueued kernel dispatch \\\"\" << (dynamic_cast<Backend::Program::Kernel*>(this))->name <<\n+       \"\\\" globalSize=\" << globalSize << std::endl;\n@@ -196,1 +221,3 @@\n-             if (!openclBackend->openclConfig.minimizeCopies || shouldCopyFromDevice(bufferState,arg)){\n+             if (shouldCopyFromDevice(bufferState,arg,\n+                 openclBackend->openclConfig.alwaysCopy,\n+                 openclBackend->openclConfig.traceEnqueues)){\n@@ -202,0 +229,3 @@\n+                if (openclBackend->openclConfig.traceEnqueues){\n+                   std::cout << \"copying arg \" << arg->idx <<\" from device \"<< std::endl;\n+                }\n@@ -219,0 +249,3 @@\n+       if (openclBackend->openclConfig.traceCalls){\n+                  std::cout << \"\\\"\" <<  (dynamic_cast<Backend::Program::Kernel*>(this))->name<< \"\\\"}\"<<std::endl;\n+       }\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend_kernel_dispatch.cpp","additions":54,"deletions":21,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -48,11 +48,20 @@\n-        const static  int GPU_BIT =1<<1;\n-        const static  int CPU_BIT =1<<2;\n-        const static  int MINIMIZE_COPIES_BIT =1<<3;\n-        const static  int TRACE_BIT =1<<4;\n-        const static  int PROFILE_BIT =1<<5;\n-        const static  int SHOW_CODE_BIT = 1 << 6;\n-        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 7;\n-        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<8;\n-        const static  int INFO_BIT = 1 <<9;\n-        const static  int TRACE_COPIES_BIT = 1 <<10;\n-        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<11;\n+    \/\/ These must sync with hat\/backend\/ffi\/Mode.java\n+        \/\/ Bits 0-3 select platform id 0..5\n+        \/\/ Bits 4-7 select device id 0..15\n+        const static  int START_BIT_IDX = 16;\n+        const static  int GPU_BIT =1<<START_BIT_IDX;\n+        const static  int CPU_BIT =1<<17;\n+        const static  int MINIMIZE_COPIES_BIT =1<<18;\n+        const static  int TRACE_BIT =1<<19;\n+        const static  int PROFILE_BIT =1<<20;\n+        const static  int SHOW_CODE_BIT = 1 << 21;\n+        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 22;\n+        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<23;\n+        const static  int INFO_BIT = 1<<24;\n+        const static  int TRACE_COPIES_BIT = 1 <<25;\n+        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<26;\n+        const static  int TRACE_ENQUEUES_BIT = 1 <<27;\n+        const static  int TRACE_CALLS_BIT = 1 <<28;\n+        const static  int END_BIT_IDX = 29;\n+\n+        const static  char *bitNames[]; \/\/ See below for out of line definition\n@@ -63,0 +72,1 @@\n+        bool alwaysCopy;\n@@ -68,1 +78,3 @@\n-         bool traceSkippedCopies;\n+        bool traceSkippedCopies;\n+        bool traceEnqueues;\n+        bool traceCalls;\n@@ -74,1 +86,2 @@\n-       static const int CopyToDeviceBits= 1<<20;\n+       const static  int START_BIT_IDX =20;\n+       static const int CopyToDeviceBits= 1<<START_BIT_IDX;\n@@ -83,0 +96,1 @@\n+       const static  int END_BIT_IDX = 27;\n@@ -169,1 +183,18 @@\n-extern \"C\" long getOpenCLBackend(int mode, int platform, int device, int unused);\n\\ No newline at end of file\n+extern \"C\" long getOpenCLBackend(int mode, int platform, int device, int unused);\n+#ifdef opencl_backend_cpp\n+const  char *OpenCLBackend::OpenCLConfig::bitNames[] = {\n+              \"GPU\",\n+              \"CPU\",\n+              \"MINIMIZE_COPIES\",\n+              \"TRACE\",\n+              \"PROFILE\",\n+              \"SHOW_CODE\",\n+              \"SHOW_KERNEL_MODEL\",\n+              \"SHOW_COMPUTE_MODEL\",\n+              \"INFO\",\n+              \"TRACE_COPIES\",\n+              \"TRACE_SKIPPED_COPIES\",\n+              \"TRACE_ENQUEUES\",\n+              \"TRACE_CALLS\"\n+        };\n+#endif\n\\ No newline at end of file\n","filename":"hat\/backends\/ffi\/opencl\/include\/opencl_backend.h","additions":45,"deletions":14,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -0,0 +1,273 @@\n+package hat.backend.ffi;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public record Config(int bits) {\n+    record Bit(int index, String name){};\n+    \/\/ These must sync with hat\/backends\/ffi\/opencl\/include\/opencl_backend.h\n+    \/\/ Bits 0-3 select platform id 0..5\n+    \/\/ Bits 4-7 select device id 0..15\n+    private static final int START_BIT_IDX = 16;\n+    private static final int GPU_BIT = 1 << START_BIT_IDX;\n+    private static final int CPU_BIT = 1 << 17;\n+    private static final int MINIMIZE_COPIES_BIT = 1 << 18;\n+    private static final int TRACE_BIT = 1 << 19;\n+    private static final int PROFILE_BIT = 1 << 20;\n+    private static final int SHOW_CODE_BIT = 1 << 21;\n+    private static final int SHOW_KERNEL_MODEL_BIT = 1 << 22;\n+    private static final int SHOW_COMPUTE_MODEL_BIT = 1 << 23;\n+    private static final int INFO_BIT = 1 << 24;\n+    private static final int TRACE_COPIES_BIT = 1 << 25;\n+    private static final int TRACE_SKIPPED_COPIES_BIT = 1 << 26;\n+    private static final int TRACE_ENQUEUES_BIT = 1 << 27;\n+    private static final int TRACE_CALLS_BIT = 1 << 28;\n+    private static final int END_BIT_IDX = 29;\n+\n+    private static String[] bitNames = {\n+      \"GPU\",\n+      \"CPU\",\n+      \"MINIMIZE_COPIES\",\n+      \"TRACE\",\n+      \"PROFILE\",\n+      \"SHOW_CODE\",\n+      \"SHOW_KERNEL_MODEL\",\n+      \"SHOW_COMPUTE_MODEL\",\n+      \"INFO\",\n+      \"TRACE_COPIES\",\n+      \"TRACE_SKIPPED_COPIES\",\n+      \"TRACE_ENQUEUES\",\n+      \"TRACE_CALLS\"\n+    };\n+    public static Config of() {\n+        if ((((System.getenv(\"HAT\") instanceof String e) ? e : \"\") +\n+                ((System.getProperty(\"HAT\") instanceof String p) ? p : \"\")) instanceof String opts) {\n+            return of(opts);\n+        }\n+        return of();\n+    }\n+\n+    public static Config of(int bits) {\n+        return new Config(bits);\n+    }\n+\n+    public static Config of(List<Config> configs) {\n+        int allBits = 0;\n+        for (Config config : configs) {\n+            allBits |= config.bits;\n+        }\n+        return new Config(allBits);\n+    }\n+\n+    public static Config of(Config... configs) {\n+        return of(List.of(configs));\n+    }\n+\n+    public Config and(Config... configs) {\n+        return Config.of(Config.of(List.of(configs)).bits & bits);\n+    }\n+\n+    public Config or(Config... configs) {\n+        return Config.of(Config.of(List.of(configs)).bits | bits);\n+    }\n+\n+    public static Config of(String name) {\n+        for (int i = 0; i < bitNames.length; i++) {\n+            if (bitNames[i].equals(name)) {\n+                return new Config(1<<(i+START_BIT_IDX));\n+            }\n+        }\n+\n+                if (name.contains(\",\")) {\n+                    List<Config> configs = new ArrayList<>();\n+                    Arrays.stream(name.split(\",\")).forEach(opt ->\n+                            configs.add(of(opt))\n+                    );\n+                    return of(configs);\n+                } else {\n+                    System.out.println(\"Unexpected opt '\" + name + \"'\");\n+                    return Config.of(0);\n+                }\n+    }\n+\n+    public static Config TRACE_COPIES() {\n+        return new Config(TRACE_COPIES_BIT);\n+    }\n+    public boolean isTRACE_COPIES() {\n+        return (bits & TRACE_COPIES_BIT) == TRACE_COPIES_BIT;\n+    }\n+    public static Config TRACE_CALLS() {\n+        return new Config(TRACE_CALLS_BIT);\n+    }\n+    public boolean isTRACE_CALLS() {\n+        return (bits & TRACE_CALLS_BIT) == TRACE_CALLS_BIT;\n+    }\n+    public static Config TRACE_ENQUEUES() {\n+        return new Config(TRACE_ENQUEUES_BIT);\n+    }\n+    public boolean isTRACE_ENQUEUES() {\n+        return (bits & TRACE_ENQUEUES_BIT) == TRACE_ENQUEUES_BIT;\n+    }\n+\n+\n+    public static Config TRACE_SKIPPED_COPIES() {\n+        return new Config(TRACE_SKIPPED_COPIES_BIT);\n+    }\n+    public boolean isTRACE_SKIPPED_COPIES() {\n+        return (bits & TRACE_SKIPPED_COPIES_BIT) == TRACE_SKIPPED_COPIES_BIT;\n+    }\n+\n+    public static Config INFO() {\n+        return new Config(INFO_BIT);\n+    }\n+    public boolean isINFO() {\n+        return (bits & INFO_BIT) == INFO_BIT;\n+    }\n+\n+    public static Config CPU() {\n+        return new Config(CPU_BIT);\n+    }\n+    public boolean isCPU() {\n+        return (bits & CPU_BIT) == CPU_BIT;\n+    }\n+\n+    public static Config GPU() {\n+        return new Config(GPU_BIT);\n+    }\n+    public boolean isGPU() {\n+        return (bits & GPU_BIT) == GPU_BIT;\n+    }\n+\n+    public static Config PROFILE() {\n+        return new Config(PROFILE_BIT);\n+    }\n+    public boolean isPROFILE() {\n+        return (bits & PROFILE_BIT) == PROFILE_BIT;\n+    }\n+\n+    public static Config TRACE() {\n+        return new Config(TRACE_BIT);\n+    }\n+    public boolean isTRACE() {\n+        return (bits & TRACE_BIT) == TRACE_BIT;\n+    }\n+\n+    public static Config MINIMIZE_COPIES() {\n+        return new Config(MINIMIZE_COPIES_BIT);\n+    }\n+    public boolean isMINIMIZE_COPIES() {\n+        String hex = Integer.toHexString(bits);\n+        return (bits & MINIMIZE_COPIES_BIT) == MINIMIZE_COPIES_BIT;\n+    }\n+\n+    public static Config SHOW_CODE() {\n+        return new Config(SHOW_CODE_BIT);\n+    }\n+    public boolean isSHOW_CODE() {\n+        return (bits & SHOW_CODE_BIT) == SHOW_CODE_BIT;\n+    }\n+\n+    public static Config SHOW_KERNEL_MODEL() {\n+        return new Config(SHOW_KERNEL_MODEL_BIT);\n+    }\n+    public boolean isSHOW_KERNEL_MODEL() {\n+        return (bits & SHOW_KERNEL_MODEL_BIT) == SHOW_KERNEL_MODEL_BIT;\n+    }\n+\n+    public static Config SHOW_COMPUTE_MODEL() {\n+        return new Config(SHOW_COMPUTE_MODEL_BIT);\n+    }\n+    public boolean isSHOW_COMPUTE_MODEL() {\n+        return (bits & SHOW_COMPUTE_MODEL_BIT) == SHOW_COMPUTE_MODEL_BIT;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        for (int bitIdx = START_BIT_IDX; bitIdx < END_BIT_IDX; bitIdx++) {\n+            if ((bits&(1<<bitIdx))==(1<<bitIdx)) {\n+                if (!builder.isEmpty()) {\n+                    builder.append(\"|\");\n+                }\n+                builder.append(bitNames[bitIdx-START_BIT_IDX]);\n+\n+            }\n+        }\n+        \/*\n+        if (isTRACE_COPIES()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"TRACE_COPIES\");\n+        }\n+        if (isTRACE_SKIPPED_COPIES()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"TRACE_SKIPPED_COPIES\");\n+        }\n+        if (isINFO()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"INFO\");\n+        }\n+        if (isCPU()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"CPU\");\n+        }\n+        if (isGPU()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"GPU\");\n+        }\n+        if (isTRACE()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"TRACE\");\n+        }\n+        if (isPROFILE()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"PROFILE\");\n+        }\n+        if (isMINIMIZE_COPIES()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"MINIMIZE_COPIES\");\n+        }\n+        if (isSHOW_CODE()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"SHOW_CODE\");\n+        }\n+        if (isSHOW_COMPUTE_MODEL()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"SHOW_COMPUTE_MODEL\");\n+        }\n+        if (isSHOW_KERNEL_MODEL()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"SHOW_KERNEL_MODEL\");\n+        }\n+        if (isMINIMIZE_COPIES()) {\n+            if (!builder.isEmpty()) {\n+                builder.append(\"|\");\n+            }\n+            builder.append(\"MINIMIZE_COPIES\");\n+        } *\/\n+\n+        return builder.toString();\n+    }\n+}\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/Config.java","additions":273,"deletions":0,"binary":false,"changes":273,"status":"added"},{"patch":"@@ -35,3 +35,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n@@ -42,12 +39,0 @@\n-    public record Mode(int bits) {\n-        private static final int GPU_BIT = 1 << 1;\n-        private static final int CPU_BIT = 1 << 2;\n-        private static final int MINIMIZE_COPIES_BIT = 1 << 3;\n-        private static final int TRACE_BIT = 1 << 4;\n-        private static final int PROFILE_BIT = 1 << 5;\n-        private static final int SHOW_CODE_BIT = 1 << 6;\n-        private static final int SHOW_KERNEL_MODEL_BIT = 1 << 7;\n-        private static final int SHOW_COMPUTE_MODEL_BIT = 1 <<8;\n-        private static final int INFO_BIT = 1 <<9;\n-        private static final int TRACE_COPIES_BIT = 1 << 10;\n-        private static final int TRACE_SKIPPED_COPIES_BIT = 1 << 11;\n@@ -55,207 +40,1 @@\n-\n-        public static Mode of() {\n-          \/\/  List<Mode> modes = new ArrayList<>();\n-            if (( ((System.getenv(\"HAT\") instanceof String e)?e:\"\")+\n-                    ((System.getProperty(\"HAT\") instanceof String p)?p:\"\")) instanceof String opts) {\n-           \/\/     Arrays.stream(opts.split(\",\")).forEach(opt ->\n-                        return of(opts);\n-             \/\/   );\n-            }\n-           return of();\n-        }\n-        public static Mode of(int bits) {\n-\n-            return new Mode(bits);\n-        }\n-        public static Mode of(List<Mode> modes) {\n-            int allBits = 0;\n-            for (Mode mode : modes) {\n-                allBits |= mode.bits;\n-            }\n-            return new Mode(allBits);\n-        }\n-        public static Mode of(Mode ...modes) {\n-           return of(List.of(modes));\n-        }\n-        public Mode and(Mode ...modes) {\n-            return Mode.of(Mode.of(List.of(modes)).bits&bits);\n-        }\n-        public Mode or(Mode ...modes) {\n-            return Mode.of(Mode.of(List.of(modes)).bits|bits);\n-        }\n-        public static Mode of(String name) {\n-            return switch (name){\n-                case \"GPU\" -> GPU();\n-                case \"CPU\" -> CPU();\n-                case \"MINIMIZE_COPIES\" -> MINIMIZE_COPIES();\n-                case \"TRACE\" -> TRACE();\n-                case \"TRACE_COPIES\" -> TRACE_COPIES();\n-                case \"TRACE_SKIPPED_COPIES\" -> TRACE_SKIPPED_COPIES();\n-                case \"SHOW_CODE\" -> SHOW_CODE();\n-                case \"SHOW_KERNEL_MODEL\" -> SHOW_KERNEL_MODEL();\n-                case \"SHOW_COMPUTE_MODEL\" -> SHOW_COMPUTE_MODEL();\n-                case \"PROFILE\" -> PROFILE();\n-                case \"INFO\" -> INFO();\n-                default -> {\n-                    if (name.contains(\",\")) {\n-                        List<Mode> modes = new ArrayList<>();\n-                        Arrays.stream(name.split(\",\")).forEach(opt ->\n-                                modes.add(of(opt))\n-                        );\n-                        yield of(modes);\n-                    } else {\n-                        System.out.println(\"Unexpected opt '\" + name + \"'\");\n-                        yield Mode.of(0);\n-                    }\n-                }\n-            };\n-        }\n-        public static Mode TRACE_COPIES() {\n-            return new Mode(TRACE_COPIES_BIT);\n-        }\n-        public boolean isTRACE_COPIES() {\n-            return (bits&TRACE_COPIES_BIT)==TRACE_COPIES_BIT;\n-        }\n-        public static Mode TRACE_SKIPPED_COPIES() {\n-            return new Mode(TRACE_SKIPPED_COPIES_BIT);\n-        }\n-        public boolean isTRACE_SKIPPED_COPIES() {\n-            return (bits&TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT;\n-        }\n-        public static Mode INFO() {\n-            return new Mode(INFO_BIT);\n-        }\n-        public boolean isINFO() {\n-            return (bits&INFO_BIT)==INFO_BIT;\n-        }\n-        public static Mode CPU() {\n-            return new Mode(CPU_BIT);\n-        }\n-        public boolean isCPU() {\n-            return (bits&CPU_BIT)==CPU_BIT;\n-        }\n-        public static Mode GPU() {\n-            return new Mode(GPU_BIT);\n-        }\n-        public boolean isGPU() {\n-            return (bits&GPU_BIT)==GPU_BIT;\n-        }\n-        public static Mode PROFILE() {\n-            return new Mode(PROFILE_BIT);\n-        }\n-        public boolean isPROFILE() {\n-            return (bits&PROFILE_BIT)==PROFILE_BIT;\n-        }\n-        public static Mode TRACE() {\n-            return new Mode(TRACE_BIT);\n-        }\n-        public boolean isTRACE() {\n-            return (bits&TRACE_BIT)==TRACE_BIT;\n-        }\n-        public static Mode MINIMIZE_COPIES() {\n-            return new Mode(MINIMIZE_COPIES_BIT);\n-        }\n-        public boolean isMINIMIZE_COPIES() {\n-            String hex = Integer.toHexString(bits);\n-            return (bits&MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT;\n-        }\n-        public static Mode SHOW_CODE() {\n-            return new Mode(SHOW_CODE_BIT);\n-        }\n-        public boolean isSHOW_CODE() {\n-            return (bits&SHOW_CODE_BIT)==SHOW_CODE_BIT;\n-        }\n-        public static Mode SHOW_KERNEL_MODEL() {\n-            return new Mode(SHOW_KERNEL_MODEL_BIT);\n-        }\n-        public boolean isSHOW_KERNEL_MODEL() {\n-            return (bits&SHOW_KERNEL_MODEL_BIT)==SHOW_KERNEL_MODEL_BIT;\n-        }\n-        public static Mode SHOW_COMPUTE_MODEL() {\n-            return new Mode(SHOW_COMPUTE_MODEL_BIT);\n-        }\n-        public boolean isSHOW_COMPUTE_MODEL() {\n-            return (bits&SHOW_COMPUTE_MODEL_BIT)==SHOW_COMPUTE_MODEL_BIT;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            StringBuilder builder = new StringBuilder();\n-            if (isTRACE_COPIES()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"TRACE_COPIES\");\n-            }\n-            if (isTRACE_SKIPPED_COPIES()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"TRACE_SKIPPED_COPIES\");\n-            }\n-            if (isINFO()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"INFO\");\n-            }\n-            if (isCPU()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"CPU\");\n-            }\n-            if (isGPU()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"GPU\");\n-            }\n-            if (isTRACE()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"TRACE\");\n-            }\n-            if (isPROFILE()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"PROFILE\");\n-            }\n-            if (isMINIMIZE_COPIES()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"MINIMIZE_COPIES\");\n-            }\n-            if (isSHOW_CODE()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"SHOW_CODE\");\n-            }\n-            if (isSHOW_COMPUTE_MODEL()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"SHOW_COMPUTE_MODEL\");\n-            }\n-            if (isSHOW_KERNEL_MODEL()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"SHOW_KERNEL_MODEL\");\n-            }\n-            if (isMINIMIZE_COPIES()) {\n-                if (!builder.isEmpty()){\n-                    builder.append(\"|\");\n-                }\n-                builder.append(\"MINIMIZE_COPIES\");\n-            }\n-\n-            return builder.toString();\n-        }\n-    }\n-\n-    final Mode mode;\n+    final Config config;\n@@ -272,2 +51,2 @@\n-    public OpenCLBackend(String spec) {\n-        this(Mode.of(spec));\n+    public OpenCLBackend(String configSpec) {\n+        this(Config.of(configSpec));\n@@ -275,1 +54,1 @@\n-    public OpenCLBackend(Mode mode) {\n+    public OpenCLBackend(Config config) {\n@@ -277,1 +56,1 @@\n-        this.mode = mode;\n+        this.config = config;\n@@ -279,3 +58,3 @@\n-        getBackend(mode.bits,0, 0, 0 );\n-        if (mode.isINFO()) {\n-            System.out.println(mode);\n+        getBackend(config.bits(),0, 0, 0 );\n+        if (config.isINFO()) {\n+            System.out.println(\"CONFIG = \"+config);\n@@ -288,1 +67,1 @@\n-        this(Mode.of().or(Mode.GPU()));\n+        this(Config.of().or(Config.GPU()));\n@@ -295,1 +74,1 @@\n-        injectBufferTracking(computeContext.computeCallGraph.entrypoint, mode.isSHOW_COMPUTE_MODEL());\n+        injectBufferTracking(computeContext.computeCallGraph.entrypoint, config.isSHOW_COMPUTE_MODEL());\n@@ -302,2 +81,2 @@\n-            String code = createCode(kernelCallGraph, new OpenCLHatKernelBuilder(), args, mode.isSHOW_KERNEL_MODEL());\n-            if (mode.isSHOW_CODE()) {\n+            String code = createCode(kernelCallGraph, new OpenCLHatKernelBuilder(), args, config.isSHOW_KERNEL_MODEL());\n+            if (config.isSHOW_CODE()) {\n@@ -320,1 +99,1 @@\n-        if (mode.isMINIMIZE_COPIES()) {\n+        if (config.isMINIMIZE_COPIES()) {\n@@ -333,1 +112,1 @@\n-        if (mode.isMINIMIZE_COPIES()) {\n+        if (config.isMINIMIZE_COPIES()) {\n@@ -340,1 +119,1 @@\n-        if (mode.isMINIMIZE_COPIES()) {\n+        if (config.isMINIMIZE_COPIES()) {\n@@ -357,1 +136,1 @@\n-        if (mode.isMINIMIZE_COPIES()) {\n+        if (config.isMINIMIZE_COPIES()) {\n@@ -370,1 +149,1 @@\n-        if (mode.isMINIMIZE_COPIES()) {\n+        if (config.isMINIMIZE_COPIES()) {\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":17,"deletions":238,"binary":false,"changes":255,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static hat.backend.ffi.OpenCLBackend.Mode.*;\n+import static hat.backend.ffi.Config.*;\n@@ -34,1 +34,0 @@\n-import hat.backend.DebugBackend;\n@@ -36,1 +35,0 @@\n-import hat.buffer.BufferAllocator;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Mesh.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import hat.buffer.Buffer;\n@@ -38,1 +37,1 @@\n-import static hat.backend.ffi.OpenCLBackend.Mode.*;\n+import static hat.backend.ffi.Config.*;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/MinBufferTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -187,2 +187,2 @@\n-public final JMenuBar menuBar;\n-         private final JButton startButton;\n+        public final JMenuBar menuBar;\n+        private final JButton startButton;\n@@ -200,1 +200,1 @@\n-             panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n+            panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Viewer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+\n@@ -142,1 +143,3 @@\n-                System.out.println(\"FPS = \" + ((zoomFrames * 2 * 1000) \/ (System.currentTimeMillis() - startMillis)));\n+                var fps =  ((zoomFrames * 2 * 1000) \/ (System.currentTimeMillis() - startMillis));\n+                viewer.framesSecondSevenSegment.set((int)fps);\n+               \/\/ System.out.println(\"FPS = \" +fps);\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/Main.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.util.ui.SevenSegmentDisplay;\n@@ -30,0 +31,3 @@\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n@@ -32,0 +36,3 @@\n+import javax.swing.JLabel;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n@@ -48,0 +55,2 @@\n+    public final SevenSegmentDisplay framesSecondSevenSegment;\n+\n@@ -127,0 +136,10 @@\n+        var menuBar = new JMenuBar();\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));\n+        ((JButton) panel.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n+        panel.add(new JLabel(\"FPS\"));\n+        this.framesSecondSevenSegment = (SevenSegmentDisplay)\n+                panel.add(new SevenSegmentDisplay(3,30,panel.getForeground(),panel.getBackground()));\n+        panel.add(Box.createHorizontalStrut(400));\n+        menuBar.add(panel);\n+        this.setJMenuBar(menuBar);\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/Viewer.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import hat.backend.ffi.Config;\n@@ -119,1 +120,1 @@\n-                new OpenCLBackend(OpenCLBackend.Mode.of(\"GPU\"))\n+                new OpenCLBackend(Config.of(\"GPU\"))\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/opencl\/OpenCLNBodyGLWindow.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}