{"files":[{"patch":"@@ -1,107 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-import java.io.StringWriter;\n-import java.lang.reflect.Method;\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.op.CoreOp;\n-import jdk.incubator.code.op.ExtendedOp;\n-import jdk.incubator.code.parser.OpParser;\n-import jdk.incubator.code.writer.OpWriter;\n-import java.lang.runtime.CodeReflection;\n-import java.util.Optional;\n-\n-\/**\n- * @test\n- * @summary Test symbolic access of method\n- * @run testng TreeAccessTest\n- *\/\n-\n-public class TreeAccessTest {\n-\n-    @CodeReflection\n-    public int m(String s) {\n-        return s.length();\n-    }\n-\n-    @Test\n-    void testTreeAccess() throws Exception {\n-        Method m = TreeAccessTest.class.getDeclaredMethod(\"m\", String.class);\n-\n-        Optional<CoreOp.FuncOp> tree = m.getCodeModel();\n-        Assert.assertTrue(tree.isPresent());\n-\n-        CoreOp.FuncOp methodTree = tree.get();\n-\n-        String expectedTree = \"\"\"\n-                func @\"m\" (%0 : TreeAccessTest, %1 : java.lang.String)int -> {\n-                      %2 : Var<java.lang.String> = var %1 @\"s\";\n-                      %3 : java.lang.String = var.load %2;\n-                      %4 : int = invoke %3 @\"java.lang.String::length()int\";\n-                      return %4;\n-                };\n-                \"\"\";\n-\n-        Assert.assertEquals(canonicalizeModel(methodTree), canonicalizeModel(expectedTree));\n-    }\n-\n-    @Test\n-    public int n(String s) {\n-        return s.length();\n-    }\n-\n-    @Test\n-    void testNoTree() throws Exception {\n-        Method m = TreeAccessTest.class.getDeclaredMethod(\"n\", String.class);\n-\n-        Optional<CoreOp.FuncOp> tree = m.getCodeModel();\n-        Assert.assertTrue(tree.isEmpty());\n-    }\n-\n-\n-    \/\/ serializes dropping location information, parses, and then serializes, dropping location information\n-    static String canonicalizeModel(Op o) {\n-        return canonicalizeModel(serialize(o));\n-    }\n-\n-    \/\/ parses, and then serializes, dropping location information\n-    static String canonicalizeModel(String d) {\n-        Op o;\n-        try {\n-            o = OpParser.fromString(ExtendedOp.FACTORY, d).get(0);\n-        } catch (Exception e) {\n-            throw new IllegalStateException(e);\n-        }\n-        return serialize(o);\n-    }\n-\n-    \/\/ serializes, dropping location information\n-    static String serialize(Op o) {\n-        StringWriter w = new StringWriter();\n-        OpWriter.writeTo(w, o, OpWriter.LocationOption.DROP_LOCATION);\n-        return w.toString();\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/reflect\/Method\/cr\/TreeAccessTest.java","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"}]}