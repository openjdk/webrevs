{"files":[{"patch":"@@ -2785,0 +2785,5 @@\n+        final class MatchAll implements Pattern {\n+            MatchAll() {\n+            }\n+        }\n+\n@@ -2792,0 +2797,3 @@\n+        JavaType PATTERN_MATCH_ALL_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n+                \"$\" + Pattern.MatchAll.class.getSimpleName()));\n+\n@@ -2800,0 +2808,4 @@\n+        static JavaType matchAllType() {\n+            return PATTERN_MATCH_ALL_TYPE;\n+        }\n+\n@@ -2969,0 +2981,28 @@\n+        @OpFactory.OpDeclaration(MatchAllPatternOp.NAME)\n+        public static final class MatchAllPatternOp extends PatternOp {\n+\n+            public static final String NAME = \"pattern.match.all\";\n+\n+            public MatchAllPatternOp(ExternalizedOp def) {\n+                super(def);\n+            }\n+\n+            MatchAllPatternOp(MatchAllPatternOp that, CopyContext cc) {\n+                super(that, cc);\n+            }\n+\n+            MatchAllPatternOp() {\n+                super(NAME, List.of());\n+            }\n+\n+            @Override\n+            public Op transform(CopyContext cc, OpTransformer ot) {\n+                return new MatchAllPatternOp(this, cc);\n+            }\n+\n+            @Override\n+            public TypeElement resultType() {\n+                return Pattern.matchAllType();\n+            }\n+        }\n+\n@@ -3070,7 +3110,6 @@\n-                if (pattern instanceof ExtendedOp.PatternOps.RecordPatternOp rp) {\n-                    return lowerRecordPattern(endNoMatchBlock, currentBlock, bindings, rp, target);\n-                } else if (pattern instanceof TypePatternOp bp) {\n-                    return lowerBindingPattern(endNoMatchBlock, currentBlock, bindings, bp, target);\n-                } else {\n-                    throw new UnsupportedOperationException(\"Unknown pattern op: \" + pattern);\n-                }\n+                return switch (pattern) {\n+                    case RecordPatternOp rp -> lowerRecordPattern(endNoMatchBlock, currentBlock, bindings, rp, target);\n+                    case TypePatternOp tp -> lowerBindingPattern(endNoMatchBlock, currentBlock, bindings, tp, target);\n+                    case MatchAllPatternOp map -> lowerMatchAllPattern(currentBlock);\n+                    case null, default -> throw new UnsupportedOperationException(\"Unknown pattern op: \" + pattern);\n+                };\n@@ -3109,2 +3148,2 @@\n-                                                     TypePatternOp bpOp, Value target) {\n-                TypeElement targetType = bpOp.targetType();\n+                                                     TypePatternOp tpOp, Value target) {\n+                TypeElement targetType = tpOp.targetType();\n@@ -3126,0 +3165,4 @@\n+            static Block.Builder lowerMatchAllPattern(Block.Builder currentBlock) {\n+                return currentBlock;\n+            }\n+\n@@ -3601,0 +3644,4 @@\n+    public static PatternOps.MatchAllPatternOp matchAllPattern() {\n+        return new PatternOps.MatchAllPatternOp();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":56,"deletions":9,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1222,1 +1222,1 @@\n-                    super(Set.of(Tag.BINDINGPATTERN, Tag.RECORDPATTERN));\n+                    super(Set.of(Tag.BINDINGPATTERN, Tag.RECORDPATTERN, Tag.ANYPATTERN));\n@@ -1249,0 +1249,5 @@\n+                @Override\n+                public void visitAnyPattern(JCTree.JCAnyPattern anyPattern) {\n+                    result = append(ExtendedOp.matchAllPattern());\n+                }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,0 +108,22 @@\n+    record R(Number n) {}\n+\n+    @CodeReflection\n+    static boolean recordPatterns2(Object o) {\n+        return o instanceof R(_);\n+    }\n+\n+    @Test\n+    void testRecordPattern2() {\n+\n+        CoreOp.FuncOp f = getFuncOp(\"recordPatterns2\");\n+        f.writeTo(System.out);\n+\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n+        lf.writeTo(System.out);\n+\n+        Object[] objects = {new R(1), \"str\", null};\n+        for (Object o : objects) {\n+            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), recordPatterns2(o));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -373,0 +373,25 @@\n+\n+    @IR(\"\"\"\n+            func @\"test9\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                %3 : java.lang.Object = var.load %2;\n+                %4 : PatternsTest$ConcretePoint = constant @null;\n+                %5 : Var<PatternsTest$ConcretePoint> = var %4 @\"cp\";\n+                %6 : boolean = pattern.match %3\n+                    ()java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> -> {\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$MatchAll = pattern.match.all;\n+                        %8 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"cp\";\n+                        %9 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                        yield %9;\n+                    }\n+                    (%10 : PatternsTest$ConcretePoint)void -> {\n+                        var.store %5 %10;\n+                        yield;\n+                    };\n+                return %6;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test9(Object o) {\n+        return o instanceof Rectangle(_, ConcretePoint cp);\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}