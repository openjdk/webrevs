{"files":[{"patch":"@@ -2171,1 +2171,1 @@\n-            this.varName = varName;\n+            this.varName = varName == null || varName.isEmpty() ? null : varName;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2880,1 +2880,1 @@\n-         * Synthetic binding pattern type.\n+         * Synthetic type pattern type.\n@@ -2884,2 +2884,2 @@\n-        final class Binding<T> implements Pattern {\n-            Binding() {\n+        final class Type<T> implements Pattern {\n+            Type() {\n@@ -2899,0 +2899,5 @@\n+        final class MatchAll implements Pattern {\n+            MatchAll() {\n+            }\n+        }\n+\n@@ -2902,1 +2907,1 @@\n-                \"$\" + Binding.class.getSimpleName()));\n+                \"$\" + Type.class.getSimpleName()));\n@@ -2906,0 +2911,3 @@\n+        JavaType PATTERN_MATCH_ALL_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n+                \"$\" + Pattern.MatchAll.class.getSimpleName()));\n+\n@@ -2914,0 +2922,4 @@\n+        static JavaType MatchAllType() {\n+            return PATTERN_MATCH_ALL_TYPE;\n+        }\n+\n@@ -2946,3 +2958,3 @@\n-        @OpFactory.OpDeclaration(BindingPatternOp.NAME)\n-        public static final class BindingPatternOp extends PatternOp {\n-            public static final String NAME = \"pattern.binding\";\n+        @OpFactory.OpDeclaration(TypePatternOp.NAME)\n+        public static final class TypePatternOp extends PatternOp {\n+            public static final String NAME = \"pattern.type\";\n@@ -2955,1 +2967,1 @@\n-            public static BindingPatternOp create(ExternalizedOp def) {\n+            public static TypePatternOp create(ExternalizedOp def) {\n@@ -2959,2 +2971,2 @@\n-                            case null, default ->\n-                                    throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n+                            case null -> null;\n+                            default -> throw new UnsupportedOperationException(\"Unsupported pattern binding name value:\" + v);\n@@ -2962,1 +2974,1 @@\n-                return new BindingPatternOp(def, name);\n+                return new TypePatternOp(def, name);\n@@ -2965,1 +2977,1 @@\n-            BindingPatternOp(ExternalizedOp def, String bindingName) {\n+            TypePatternOp(ExternalizedOp def, String bindingName) {\n@@ -2972,1 +2984,1 @@\n-            BindingPatternOp(BindingPatternOp that, CopyContext cc) {\n+            TypePatternOp(TypePatternOp that, CopyContext cc) {\n@@ -2980,2 +2992,2 @@\n-            public BindingPatternOp transform(CopyContext cc, OpTransformer ot) {\n-                return new BindingPatternOp(this, cc);\n+            public TypePatternOp transform(CopyContext cc, OpTransformer ot) {\n+                return new TypePatternOp(this, cc);\n@@ -2984,1 +2996,1 @@\n-            BindingPatternOp(TypeElement targetType, String bindingName) {\n+            TypePatternOp(TypeElement targetType, String bindingName) {\n@@ -2994,1 +3006,3 @@\n-                attrs.put(\"\", bindingName);\n+                if (bindingName != null) {\n+                    attrs.put(\"\", bindingName);\n+                }\n@@ -3081,0 +3095,32 @@\n+        @OpFactory.OpDeclaration(MatchAllPatternOp.NAME)\n+        public static final class MatchAllPatternOp extends PatternOp {\n+\n+            public static final String NAME = \"pattern.match.all\";\n+\n+            MatchAllPatternOp(ExternalizedOp def) {\n+                super(def);\n+            }\n+\n+            MatchAllPatternOp(MatchAllPatternOp that, CopyContext cc) {\n+                super(that, cc);\n+            }\n+\n+            MatchAllPatternOp() {\n+                super(NAME, List.of());\n+            }\n+\n+            public static MatchAllPatternOp create(ExternalizedOp def) {\n+                return new MatchAllPatternOp(def);\n+            }\n+\n+            @Override\n+            public Op transform(CopyContext cc, OpTransformer ot) {\n+                return new MatchAllPatternOp(this, cc);\n+            }\n+\n+            @Override\n+            public TypeElement resultType() {\n+                return Pattern.MatchAllType();\n+            }\n+        }\n+\n@@ -3184,1 +3230,1 @@\n-                } else if (pattern instanceof ExtendedOp.PatternOps.BindingPatternOp bp) {\n+                } else if (pattern instanceof TypePatternOp bp) {\n@@ -3210,0 +3256,3 @@\n+                    if (nestedPattern.op() instanceof MatchAllPatternOp) {\n+                        continue;\n+                    }\n@@ -3221,1 +3270,1 @@\n-                                                     ExtendedOp.PatternOps.BindingPatternOp bpOp, Value target) {\n+                                                     TypePatternOp bpOp, Value target) {\n@@ -3687,2 +3736,2 @@\n-    public static PatternOps.BindingPatternOp bindingPattern(TypeElement type, String bindingName) {\n-        return new PatternOps.BindingPatternOp(type, bindingName);\n+    public static PatternOps.TypePatternOp typePattern(TypeElement type, String bindingName) {\n+        return new PatternOps.TypePatternOp(type, bindingName);\n@@ -3713,0 +3762,4 @@\n+    public static PatternOps.MatchAllPatternOp matchAllPattern() {\n+        return new PatternOps.MatchAllPatternOp();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":74,"deletions":21,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -1218,1 +1218,1 @@\n-                    super(Set.of(Tag.BINDINGPATTERN, Tag.RECORDPATTERN));\n+                    super(Set.of(Tag.BINDINGPATTERN, Tag.RECORDPATTERN, Tag.ANYPATTERN));\n@@ -1225,2 +1225,3 @@\n-\n-                    result = append(ExtendedOp.bindingPattern(typeToTypeElement(var.type), var.name.toString()));\n+                    boolean unnamedPatternVariable = var.name.isEmpty();\n+                    String bindingName = unnamedPatternVariable ? null : var.name.toString();\n+                    result = append(ExtendedOp.typePattern(typeToTypeElement(var.type), bindingName));\n@@ -1244,0 +1245,5 @@\n+                @Override\n+                public void visitAnyPattern(JCTree.JCAnyPattern anyPattern) {\n+                    result = append(ExtendedOp.matchAllPattern());\n+                }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -108,0 +108,22 @@\n+    record R(Number n) {}\n+\n+    @CodeReflection\n+    static boolean recordPatterns2(Object o) {\n+        return o instanceof R(_);\n+    }\n+\n+    @Test\n+    void testRecordPattern2() {\n+\n+        CoreOp.FuncOp f = getFuncOp(\"recordPatterns2\");\n+        f.writeTo(System.out);\n+\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n+        lf.writeTo(System.out);\n+\n+        Object[] objects = {new R(1), \"str\", null};\n+        for (Object o : objects) {\n+            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), recordPatterns2(o));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -72,2 +72,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -111,2 +111,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -170,2 +170,2 @@\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ConcretePoint> = pattern.binding @\"p\";\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$Color> = pattern.binding @\"c\";\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"p\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$Color> = pattern.type @\"c\";\n@@ -173,1 +173,1 @@\n-                                %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<PatternsTest$ColoredPoint> = pattern.binding @\"lr\";\n+                                %14 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$ColoredPoint> = pattern.type @\"lr\";\n@@ -230,2 +230,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -268,2 +268,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -315,2 +315,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n-                                        %14 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n+                                        %14 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n@@ -350,0 +350,48 @@\n+\n+    @IR(\"\"\"\n+            func @\"test8\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                   %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                   %3 : java.lang.Object = var.load %2;\n+                   %4 : java.lang.String = constant @null;\n+                   %5 : Var<java.lang.String> = var %4;\n+                   %6 : boolean = pattern.match %3\n+                       ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                           %7 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type;\n+                           yield %7;\n+                       }\n+                       (%8 : java.lang.String)void -> {\n+                           var.store %5 %8;\n+                           yield;\n+                       };\n+                   return %6;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test8(Object o) {\n+        return o instanceof String _;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"test9\" (%0 : PatternsTest, %1 : java.lang.Object)boolean -> {\n+                %2 : Var<java.lang.Object> = var %1 @\"o\";\n+                %3 : java.lang.Object = var.load %2;\n+                %4 : PatternsTest$ConcretePoint = constant @null;\n+                %5 : Var<PatternsTest$ConcretePoint> = var %4 @\"cp\";\n+                %6 : boolean = pattern.match %3\n+                    ()java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> -> {\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$MatchAll = pattern.match.all;\n+                        %8 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"cp\";\n+                        %9 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                        yield %9;\n+                    }\n+                    (%10 : PatternsTest$ConcretePoint)void -> {\n+                        var.store %5 %10;\n+                        yield;\n+                    };\n+                return %6;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    boolean test9(Object o) {\n+        return o instanceof Rectangle(_, ConcretePoint cp);\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":63,"deletions":15,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n@@ -363,2 +363,2 @@\n-                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -417,1 +417,1 @@\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n@@ -435,2 +435,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                        %19 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -462,2 +462,2 @@\n-                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                    ^pattern()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                        %29 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -827,2 +827,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> -> {\n-                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.binding @\"o\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Object> -> {\n+                                %12 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Object> = pattern.type @\"o\";\n@@ -866,2 +866,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchExpressionTest2$B> -> {\n-                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchExpressionTest2$B> = pattern.binding @\"b\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B> -> {\n+                                %10 : java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchExpressionTest2$B> = pattern.type @\"b\";\n@@ -882,2 +882,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> -> {\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = pattern.binding @\"c\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> -> {\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Type<.<SwitchExpressionTest2, SwitchExpressionTest2$C>> = pattern.type @\"c\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1106,2 +1106,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$K> = pattern.binding @\"k\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchStatementTest$K> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchStatementTest$K> = pattern.type @\"k\";\n@@ -1125,2 +1125,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> -> {\n-                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<SwitchStatementTest$J> = pattern.binding @\"j\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchStatementTest$J> -> {\n+                                %18 : java.lang.reflect.code.ExtendedOp$Pattern$Type<SwitchStatementTest$J> = pattern.type @\"j\";\n@@ -1187,2 +1187,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> -> {\n-                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Object> = pattern.binding @\"o\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Object> -> {\n+                                %15 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Object> = pattern.type @\"o\";\n@@ -1231,2 +1231,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n@@ -1250,2 +1250,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -1306,2 +1306,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n@@ -1325,2 +1325,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -1387,2 +1387,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n+                                  %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n@@ -1406,2 +1406,2 @@\n-                              ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                  %18 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -1467,2 +1467,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n-                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n+                                %11 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n@@ -1483,2 +1483,2 @@\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                            ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                %16 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -1567,2 +1567,2 @@\n-                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                          %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n+                                          %19 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n@@ -1597,2 +1597,2 @@\n-                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> -> {\n-                                          %31 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Integer> = pattern.binding @\"i\";\n+                                      ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> -> {\n+                                          %31 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Integer> = pattern.type @\"i\";\n@@ -1653,144 +1653,144 @@\n-                %1 : Var<java.lang.Object> = var %0 @\"o\";\n-                %2 : java.lang.String = constant @\"\";\n-                %3 : Var<java.lang.String> = var %2 @\"r\";\n-                %4 : java.lang.Object = var.load %1;\n-                %5 : java.lang.String = constant @null;\n-                %6 : Var<java.lang.String> = var %5 @\"\";\n-                %7 : java.util.RandomAccess = constant @null;\n-                %8 : Var<java.util.RandomAccess> = var %7 @\"\";\n-                %9 : int[] = constant @null;\n-                %10 : Var<int[]> = var %9 @\"\";\n-                %11 : java.util.Stack[][] = constant @null;\n-                %12 : Var<java.util.Stack[][]> = var %11 @\"\";\n-                %13 : java.util.Collection[][][] = constant @null;\n-                %14 : Var<java.util.Collection[][][]> = var %13 @\"\";\n-                %15 : java.lang.Number = constant @null;\n-                %16 : Var<java.lang.Number> = var %15 @\"n\";\n-                java.switch.statement %4\n-                    (%17 : java.lang.Object)boolean -> {\n-                        %18 : boolean = pattern.match %17\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                %19 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"\";\n-                                yield %19;\n-                            }\n-                            (%20 : java.lang.String)void -> {\n-                                var.store %6 %20;\n-                                yield;\n-                            };\n-                        yield %18;\n-                    }\n-                    ()void -> {\n-                        %21 : java.lang.String = var.load %3;\n-                        %22 : java.lang.String = constant @\"String\";\n-                        %23 : java.lang.String = concat %21 %22;\n-                        var.store %3 %23;\n-                        yield;\n-                    }\n-                    (%24 : java.lang.Object)boolean -> {\n-                        %25 : boolean = pattern.match %24\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> -> {\n-                                %26 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.RandomAccess> = pattern.binding @\"\";\n-                                yield %26;\n-                            }\n-                            (%27 : java.util.RandomAccess)void -> {\n-                                var.store %8 %27;\n-                                yield;\n-                            };\n-                        yield %25;\n-                    }\n-                    ()void -> {\n-                        %28 : java.lang.String = var.load %3;\n-                        %29 : java.lang.String = constant @\"RandomAccess\";\n-                        %30 : java.lang.String = concat %28 %29;\n-                        var.store %3 %30;\n-                        yield;\n-                    }\n-                    (%31 : java.lang.Object)boolean -> {\n-                        %32 : boolean = pattern.match %31\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> -> {\n-                                %33 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<int[]> = pattern.binding @\"\";\n-                                yield %33;\n-                            }\n-                            (%34 : int[])void -> {\n-                                var.store %10 %34;\n-                                yield;\n-                            };\n-                        yield %32;\n-                    }\n-                    ()void -> {\n-                        %35 : java.lang.String = var.load %3;\n-                        %36 : java.lang.String = constant @\"int[]\";\n-                        %37 : java.lang.String = concat %35 %36;\n-                        var.store %3 %37;\n-                        yield;\n-                    }\n-                    (%38 : java.lang.Object)boolean -> {\n-                        %39 : boolean = pattern.match %38\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> -> {\n-                                %40 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Stack[][]> = pattern.binding @\"\";\n-                                yield %40;\n-                            }\n-                            (%41 : java.util.Stack[][])void -> {\n-                                var.store %12 %41;\n-                                yield;\n-                            };\n-                        yield %39;\n-                    }\n-                    ()void -> {\n-                        %42 : java.lang.String = var.load %3;\n-                        %43 : java.lang.String = constant @\"Stack[][]\";\n-                        %44 : java.lang.String = concat %42 %43;\n-                        var.store %3 %44;\n-                        yield;\n-                    }\n-                    (%45 : java.lang.Object)boolean -> {\n-                        %46 : boolean = pattern.match %45\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> -> {\n-                                %47 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.util.Collection[][][]> = pattern.binding @\"\";\n-                                yield %47;\n-                            }\n-                            (%48 : java.util.Collection[][][])void -> {\n-                                var.store %14 %48;\n-                                yield;\n-                            };\n-                        yield %46;\n-                    }\n-                    ()void -> {\n-                        %49 : java.lang.String = var.load %3;\n-                        %50 : java.lang.String = constant @\"Collection[][][]\";\n-                        %51 : java.lang.String = concat %49 %50;\n-                        var.store %3 %51;\n-                        yield;\n-                    }\n-                    (%52 : java.lang.Object)boolean -> {\n-                        %53 : boolean = pattern.match %52\n-                            ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> -> {\n-                                %54 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n-                                yield %54;\n-                            }\n-                            (%55 : java.lang.Number)void -> {\n-                                var.store %16 %55;\n-                                yield;\n-                            };\n-                        yield %53;\n-                    }\n-                    ()void -> {\n-                        %56 : java.lang.String = var.load %3;\n-                        %57 : java.lang.String = constant @\"Number\";\n-                        %58 : java.lang.String = concat %56 %57;\n-                        var.store %3 %58;\n-                        yield;\n-                    }\n-                    ()boolean -> {\n-                        %17 : boolean = constant @\"true\";\n-                        yield %17;\n-                    }\n-                    ()void -> {\n-                        %59 : java.lang.String = var.load %3;\n-                        %60 : java.lang.String = constant @\"something else\";\n-                        %61 : java.lang.String = concat %59 %60;\n-                        var.store %3 %61;\n-                        yield;\n-                    };\n-                %62 : java.lang.String = var.load %3;\n-                return %62;\n+                  %1 : Var<java.lang.Object> = var %0 @\"o\";\n+                  %2 : java.lang.String = constant @\"\";\n+                  %3 : Var<java.lang.String> = var %2 @\"r\";\n+                  %4 : java.lang.Object = var.load %1;\n+                  %5 : java.lang.String = constant @null;\n+                  %6 : Var<java.lang.String> = var %5;\n+                  %7 : java.util.RandomAccess = constant @null;\n+                  %8 : Var<java.util.RandomAccess> = var %7;\n+                  %9 : int[] = constant @null;\n+                  %10 : Var<int[]> = var %9;\n+                  %11 : java.util.Stack[][] = constant @null;\n+                  %12 : Var<java.util.Stack[][]> = var %11;\n+                  %13 : java.util.Collection[][][] = constant @null;\n+                  %14 : Var<java.util.Collection[][][]> = var %13;\n+                  %15 : java.lang.Number = constant @null;\n+                  %16 : Var<java.lang.Number> = var %15 @\"n\";\n+                  java.switch.statement %4\n+                      (%17 : java.lang.Object)boolean -> {\n+                          %18 : boolean = pattern.match %17\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                  %19 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type;\n+                                  yield %19;\n+                              }\n+                              (%20 : java.lang.String)void -> {\n+                                  var.store %6 %20;\n+                                  yield;\n+                              };\n+                          yield %18;\n+                      }\n+                      ()void -> {\n+                          %21 : java.lang.String = var.load %3;\n+                          %22 : java.lang.String = constant @\"String\";\n+                          %23 : java.lang.String = concat %21 %22;\n+                          var.store %3 %23;\n+                          yield;\n+                      }\n+                      (%24 : java.lang.Object)boolean -> {\n+                          %25 : boolean = pattern.match %24\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.RandomAccess> -> {\n+                                  %26 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.RandomAccess> = pattern.type;\n+                                  yield %26;\n+                              }\n+                              (%27 : java.util.RandomAccess)void -> {\n+                                  var.store %8 %27;\n+                                  yield;\n+                              };\n+                          yield %25;\n+                      }\n+                      ()void -> {\n+                          %28 : java.lang.String = var.load %3;\n+                          %29 : java.lang.String = constant @\"RandomAccess\";\n+                          %30 : java.lang.String = concat %28 %29;\n+                          var.store %3 %30;\n+                          yield;\n+                      }\n+                      (%31 : java.lang.Object)boolean -> {\n+                          %32 : boolean = pattern.match %31\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<int[]> -> {\n+                                  %33 : java.lang.reflect.code.ExtendedOp$Pattern$Type<int[]> = pattern.type;\n+                                  yield %33;\n+                              }\n+                              (%34 : int[])void -> {\n+                                  var.store %10 %34;\n+                                  yield;\n+                              };\n+                          yield %32;\n+                      }\n+                      ()void -> {\n+                          %35 : java.lang.String = var.load %3;\n+                          %36 : java.lang.String = constant @\"int[]\";\n+                          %37 : java.lang.String = concat %35 %36;\n+                          var.store %3 %37;\n+                          yield;\n+                      }\n+                      (%38 : java.lang.Object)boolean -> {\n+                          %39 : boolean = pattern.match %38\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.Stack[][]> -> {\n+                                  %40 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.Stack[][]> = pattern.type;\n+                                  yield %40;\n+                              }\n+                              (%41 : java.util.Stack[][])void -> {\n+                                  var.store %12 %41;\n+                                  yield;\n+                              };\n+                          yield %39;\n+                      }\n+                      ()void -> {\n+                          %42 : java.lang.String = var.load %3;\n+                          %43 : java.lang.String = constant @\"Stack[][]\";\n+                          %44 : java.lang.String = concat %42 %43;\n+                          var.store %3 %44;\n+                          yield;\n+                      }\n+                      (%45 : java.lang.Object)boolean -> {\n+                          %46 : boolean = pattern.match %45\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.Collection[][][]> -> {\n+                                  %47 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.util.Collection[][][]> = pattern.type;\n+                                  yield %47;\n+                              }\n+                              (%48 : java.util.Collection[][][])void -> {\n+                                  var.store %14 %48;\n+                                  yield;\n+                              };\n+                          yield %46;\n+                      }\n+                      ()void -> {\n+                          %49 : java.lang.String = var.load %3;\n+                          %50 : java.lang.String = constant @\"Collection[][][]\";\n+                          %51 : java.lang.String = concat %49 %50;\n+                          var.store %3 %51;\n+                          yield;\n+                      }\n+                      (%52 : java.lang.Object)boolean -> {\n+                          %53 : boolean = pattern.match %52\n+                              ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> -> {\n+                                  %54 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n+                                  yield %54;\n+                              }\n+                              (%55 : java.lang.Number)void -> {\n+                                  var.store %16 %55;\n+                                  yield;\n+                              };\n+                          yield %53;\n+                      }\n+                      ()void -> {\n+                          %56 : java.lang.String = var.load %3;\n+                          %57 : java.lang.String = constant @\"Number\";\n+                          %58 : java.lang.String = concat %56 %57;\n+                          var.store %3 %58;\n+                          yield;\n+                      }\n+                      ()boolean -> {\n+                          %59 : boolean = constant @\"true\";\n+                          yield %59;\n+                      }\n+                      ()void -> {\n+                          %60 : java.lang.String = var.load %3;\n+                          %61 : java.lang.String = constant @\"something else\";\n+                          %62 : java.lang.String = concat %60 %61;\n+                          var.store %3 %62;\n+                          yield;\n+                      };\n+                  %63 : java.lang.String = var.load %3;\n+                  return %63;\n@@ -1827,1 +1827,1 @@\n-                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                %9 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n@@ -1884,2 +1884,2 @@\n-                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> -> {\n-                                        %12 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.String> = pattern.binding @\"s\";\n+                                    ()java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> -> {\n+                                        %12 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.String> = pattern.type @\"s\";\n@@ -1919,1 +1919,1 @@\n-                                        %28 : java.lang.reflect.code.ExtendedOp$Pattern$Binding<java.lang.Number> = pattern.binding @\"n\";\n+                                        %28 : java.lang.reflect.code.ExtendedOp$Pattern$Type<java.lang.Number> = pattern.type @\"n\";\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":174,"deletions":174,"binary":false,"changes":348,"status":"modified"}]}