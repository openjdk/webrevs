{"files":[{"patch":"@@ -2899,0 +2899,5 @@\n+        final class MatchAll implements Pattern {\n+            MatchAll() {\n+            }\n+        }\n+\n@@ -2906,0 +2911,3 @@\n+        JavaType PATTERN_MATCH_ALL_TYPE = JavaType.type(ClassDesc.of(Pattern_CLASS_NAME +\n+                \"$\" + Pattern.MatchAll.class.getSimpleName()));\n+\n@@ -2914,0 +2922,4 @@\n+        static JavaType MatchAllType() {\n+            return PATTERN_MATCH_ALL_TYPE;\n+        }\n+\n@@ -3083,0 +3095,32 @@\n+        @OpFactory.OpDeclaration(MatchAllPatternOp.NAME)\n+        public static final class MatchAllPatternOp extends PatternOp {\n+\n+            public static final String NAME = \"pattern.match.all\";\n+\n+            MatchAllPatternOp(ExternalizedOp def) {\n+                super(def);\n+            }\n+\n+            MatchAllPatternOp(MatchAllPatternOp that, CopyContext cc) {\n+                super(that, cc);\n+            }\n+\n+            MatchAllPatternOp() {\n+                super(NAME, List.of());\n+            }\n+\n+            public static MatchAllPatternOp create(ExternalizedOp def) {\n+                return new MatchAllPatternOp(def);\n+            }\n+\n+            @Override\n+            public Op transform(CopyContext cc, OpTransformer ot) {\n+                return new MatchAllPatternOp(this, cc);\n+            }\n+\n+            @Override\n+            public TypeElement resultType() {\n+                return Pattern.MatchAllType();\n+            }\n+        }\n+\n@@ -3212,0 +3256,3 @@\n+                    if (nestedPattern.op() instanceof MatchAllPatternOp) {\n+                        continue;\n+                    }\n@@ -3715,0 +3762,4 @@\n+    public static PatternOps.MatchAllPatternOp matchAllPattern() {\n+        return new PatternOps.MatchAllPatternOp();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1247,1 +1247,1 @@\n-                    result = append(ExtendedOp.typePattern(typeToTypeElement(anyPattern.type), null));\n+                    result = append(ExtendedOp.matchAllPattern());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,0 +108,2 @@\n+    record R(Number n) {}\n+\n@@ -109,2 +111,2 @@\n-    static String recordPatterns2(Object o) {\n-        return o instanceof Rectangle(_, _) ? \"match\" : \"no-match\";\n+    static boolean recordPatterns2(Object o) {\n+        return o instanceof R(_);\n@@ -122,11 +124,3 @@\n-        {\n-            Rectangle r = new Rectangle(\n-                    new ColoredPoint(new ConcretePoint(1, 2), Color.BLUE),\n-                    new ConcretePoint(3, 4)\n-            );\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, r), recordPatterns2(r));\n-        }\n-\n-        {\n-            Number n = 99;\n-            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, n), recordPatterns2(n));\n+        Object[] objects = {new R(1), \"str\", null};\n+        for (Object o : objects) {\n+            Assert.assertEquals(Interpreter.invoke(MethodHandles.lookup(), lf, o), recordPatterns2(o));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -378,1 +378,3 @@\n-                %4 : boolean = pattern.match %3\n+                %4 : PatternsTest$ConcretePoint = constant @null;\n+                %5 : Var<PatternsTest$ConcretePoint> = var %4 @\"cp\";\n+                %6 : boolean = pattern.match %3\n@@ -380,4 +382,4 @@\n-                        %5 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$Point> = pattern.type;\n-                        %6 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$Point> = pattern.type;\n-                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %5 %6 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n-                        yield %7;\n+                        %7 : java.lang.reflect.code.ExtendedOp$Pattern$MatchAll = pattern.match.all;\n+                        %8 : java.lang.reflect.code.ExtendedOp$Pattern$Type<PatternsTest$ConcretePoint> = pattern.type @\"cp\";\n+                        %9 : java.lang.reflect.code.ExtendedOp$Pattern$Record<PatternsTest$Rectangle> = pattern.record %7 %8 @\"(PatternsTest$Point upperLeft, PatternsTest$Point lowerRight)PatternsTest$Rectangle\";\n+                        yield %9;\n@@ -385,1 +387,2 @@\n-                    ()void -> {\n+                    (%10 : PatternsTest$ConcretePoint)void -> {\n+                        var.store %5 %10;\n@@ -388,1 +391,1 @@\n-                return %4;\n+                return %6;\n@@ -393,1 +396,1 @@\n-        return o instanceof Rectangle(_, _);\n+        return o instanceof Rectangle(_, ConcretePoint cp);\n","filename":"test\/langtools\/tools\/javac\/reflect\/PatternsTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}