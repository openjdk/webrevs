{"files":[{"patch":"@@ -150,13 +150,17 @@\n-    cursor->expectDigit(\"long byteCount of buffer\", __LINE__);\n-    long bytes = cursor->getLong();\n-    if (cursor->isEither('#', '+', &actual)) {\n-        bool complete = (actual == '#');\n-        cursor->expectAlpha(\"identifier\", __LINE__);\n-        char *identifier = cursor->getIdentifier();\n-        cursor->expect(':', \"after identifier \", __LINE__);\n-        cursor->expect('{', \"top level arg struct\", __LINE__);\n-        addChild(cursor, new ArgStructNode(this, complete, identifier));\n-    } else if (cursor->peekAlpha()) {\n-        addChild(cursor, new FieldNode(this, cursor->getIdentifier()));\n-    } else {\n-        cursor->error(std::cerr, __FILE__, __LINE__, \"expecting '#' \");\n+    if (cursor->peekAlpha()) {\n+        addChild(cursor, new FieldNode(this, nullptr));\n+    }else{\n+        cursor->expectDigit(\"long byteCount of buffer\", __LINE__);\n+        long bytes = cursor->getLong();\n+        if (cursor->isEither('#', '+', &actual)) {\n+            bool complete = (actual == '#');\n+            cursor->expectAlpha(\"identifier\", __LINE__);\n+            char *identifier = cursor->getIdentifier();\n+            cursor->expect(':', \"after identifier \", __LINE__);\n+            cursor->expect('{', \"top level arg struct\", __LINE__);\n+            addChild(cursor, new ArgStructNode(this, complete, identifier));\n+        } else if (cursor->peekAlpha()) {\n+            addChild(cursor, new FieldNode(this, cursor->getIdentifier()));\n+        } else {\n+            cursor->error(std::cerr, __FILE__, __LINE__, \"expecting '#' \");\n+        }\n","filename":"hat\/backends\/shared\/cpp\/schema.cpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-\n+    char* squares = (char*)\"2(!:32#KernelContext:{x:s32,maxX:s32}),(?:4+S32Array:{length:s32,array:[*:?:s32]})\";\n+    char *suaresadd=(char*)\"3(!:32#KernelContext:{x:s32,maxX:s32}),(?:4+S32Array:{length:s32,array:[*:?:s32]}),(?:s32)\";\n@@ -102,1 +103,1 @@\n-    char *schema = cascadeSchema;\n+    char *schema = suaresadd;\n","filename":"hat\/backends\/shared\/cpp\/schemadump.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.BiConsumer;\n@@ -45,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -195,1 +197,1 @@\n-    FuncOpWrapper(CoreOp.FuncOp op) {\n+    public FuncOpWrapper(CoreOp.FuncOp op) {\n@@ -237,0 +239,2 @@\n+\n+\n@@ -252,0 +256,16 @@\n+    public FuncOpWrapper transformIfaceInvokes(BiConsumer<Block.Builder,InvokeOpWrapper> wrappedOpTransformer) {\n+        return OpWrapper.wrap(op().transform((b, op) -> {\n+            if (op instanceof CoreOp.InvokeOp invokeOp) {\n+                InvokeOpWrapper wrapped = OpWrapper.wrap(invokeOp);\n+                if (wrapped.isIfaceBufferMethod()) {\n+                    wrappedOpTransformer.accept(b,wrapped);\n+                }else{\n+                    b.op(op);\n+                }\n+            } else {\n+                b.op(op);\n+            }\n+            return b;\n+        }));\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FuncOpWrapper.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -12,0 +12,3 @@\n+    <orderEntry type=\"module\" module-name=\"backend_opencl\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_ptx\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_mock\" \/>\n@@ -13,1 +16,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/experiments.iml","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}