{"files":[{"patch":"@@ -4,1 +4,1 @@\n-version=25\n+version=26\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-        <maven.compiler.source>25<\/maven.compiler.source>\n-        <maven.compiler.target>25<\/maven.compiler.target>\n+        <maven.compiler.source>26<\/maven.compiler.source>\n+        <maven.compiler.target>26<\/maven.compiler.target>\n","filename":"cr-examples\/onnx\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-        <maven.compiler.source>25<\/maven.compiler.source>\n-        <maven.compiler.target>25<\/maven.compiler.target>\n+        <maven.compiler.source>26<\/maven.compiler.source>\n+        <maven.compiler.target>26<\/maven.compiler.target>\n","filename":"cr-examples\/spirv\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -297,2 +297,2 @@\n-                        else if (call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc(\"spirvdemo.IntArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.INT) ||\n-                                call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc(\"spirvdemo.FloatArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.FLOAT)))) {\n+                        else if (call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc.of(\"spirvdemo.IntArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.INT)) ||\n+                                call.callDescriptor().equals(MethodRef.method(JavaType.type(ClassDesc.of(\"spirvdemo.FloatArray\")), \"set\", JavaType.VOID, JavaType.LONG, JavaType.FLOAT))) {\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/SpirvModuleGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-        <maven.compiler.source>25<\/maven.compiler.source>\n-        <maven.compiler.target>25<\/maven.compiler.target>\n+        <maven.compiler.source>26<\/maven.compiler.source>\n+        <maven.compiler.target>26<\/maven.compiler.target>\n","filename":"cr-examples\/triton\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-   --class-path build\/hat-1.0.jar:build\/hat-example-mandel-1.0.jar:build\/hat-backend-ffi-opencl-1.0.jar \\\n+   --class-path build\/hat-core-1.0.jar:build\/hat-backend-ffi-shared-1.0.jar:build\/hat-backend-ffi-opencl-1.0.jar:build\/hat-example-mandel-1.0.jar \\\n@@ -142,1 +142,1 @@\n-java @hat\/run headless opencl mandel\n+java @hat\/run headless ffi-opencl mandel\n@@ -160,1 +160,1 @@\n-java --add-modules jdk.incubator.code --enable-preview --source 25 bld\n+java --add-modules jdk.incubator.code --enable-preview --source 26 hat\/bld.java\n@@ -165,1 +165,1 @@\n-We also have a handy `hat\/XXXX` which allows us to avoid specifying common args `--enable-preview --source 25` eash time we launch a script\n+We also have a handy `hat\/XXXX` which allows us to avoid specifying common args `--enable-preview --source 26` eash time we launch a script\n@@ -171,1 +171,1 @@\n-|   ├── sanity      (the args for sanity.java)  \"--enable-preview --source 25 sanity\"\n+|   ├── sanity      (the args for sanity.java)  \"--enable-preview --source 26 sanity\"\n@@ -173,1 +173,1 @@\n-|   ├── run         (the args for sanity.java)  \"--enable-preview --source 25 hatrun\"\n+|   ├── run         (the args for sanity.java)  \"--enable-preview --source 26 hatrun\"\n@@ -175,1 +175,1 @@\n-|   ├── bld         (the args for bld.java)      \"--enable-preview --source 25 bld\"\n+|   ├── bld         (the args for bld.java)      \"--enable-preview --source 26 bld\"\n@@ -187,1 +187,1 @@\n-java --enable-preview --source 25 hat\/bld.java\n+java --add-modules jdk.incubator.code --enable-preview --source 26 hat\/bld.java\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-import static java.io.IO.print;\n-import static java.io.IO.println;\n+import static java.lang.IO.print;\n+import static java.lang.IO.println;\n","filename":"hat\/hat\/Script.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/bld.java\n+--enable-preview --source 26 hat\/bld.java\n","filename":"hat\/hat\/bld","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static java.lang.IO.print;\n+import static java.lang.IO.println;\n@@ -32,1 +34,1 @@\n-           │    ├──bld                                 \/\/  --enable-preview --source 25 hat\/bld.java\n+           │    ├──bld                                 \/\/  --enable-preview --source 26 hat\/bld.java\n@@ -34,1 +36,1 @@\n-           │    ├──run                                 \/\/  --enable-preview --source 25 hat\/run.java\n+           │    ├──run                                 \/\/  --enable-preview --source 26 hat\/run.java\n","filename":"hat\/hat\/bld.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/clean.java\n+--enable-preview --source 26 hat\/clean.java\n","filename":"hat\/hat\/clean","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n--agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=y --enable-preview --source 25 hat\/run.java\n+-agentlib:jdwp=transport=dt_socket,server=y,address=8000,suspend=y --enable-preview --source 26 hat\/run.java\n","filename":"hat\/hat\/debug","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/run.java\n+--enable-preview --source 26 hat\/run.java\n","filename":"hat\/hat\/run","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/run.java ffi-opencl life\n+--enable-preview --source 26 hat\/run.java ffi-opencl life\n","filename":"hat\/hat\/run-ffi-opencl-life","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/run.java  java-mt\n+--enable-preview --source 26 hat\/run.java  java-mt\n","filename":"hat\/hat\/run-java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/run.java ffi-opencl\n+--enable-preview --source 26 hat\/run.java ffi-opencl\n","filename":"hat\/hat\/run-opencl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+\n+import static java.lang.IO.print;\n+import static java.lang.IO.println;\n+\n@@ -168,1 +172,1 @@\n-              .verbose(config.verbose)\n+              .verbose(true)\n","filename":"hat\/hat\/run.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 25 hat\/sanity.java\n+--enable-preview --source 26 hat\/sanity.java\n","filename":"hat\/hat\/sanity","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import static java.lang.IO.println;\n+\n","filename":"hat\/hat\/sanity.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-                    <source>25<\/source>\n-                    <target>25<\/target>\n+                    <source>26<\/source>\n+                    <target>26<\/target>\n","filename":"hat\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-EXCLUDES += java\/lang\/doc-files \\\n-    java\/lang\/classfile\/snippet-files \\\n-    java\/lang\/classfile\/components\/snippet-files \\\n-    java\/lang\/foreign\/snippet-files\n-\n","filename":"make\/modules\/java.base\/Java.gmk","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -406,3 +406,1 @@\n-            if (wrapper == Wrapper.VOID) {\n-                continue;\n-            }\n+            int ftype = wrapper == Wrapper.VOID ? DirectMethodHandle.FT_CHECKED_REF : DirectMethodHandle.ftypeKind(wrapper.primitiveType());\n@@ -410,1 +408,0 @@\n-                int ftype = DirectMethodHandle.ftypeKind(wrapper.primitiveType());\n@@ -413,4 +410,4 @@\n-                if (form.kind != LambdaForm.Kind.GENERIC) {\n-                    forms.add(form);\n-                    names.add(form.kind.defaultLambdaName);\n-                }\n+                if (form.kind == GENERIC)\n+                    throw new InternalError(b + \" non-volatile \" + ftype);\n+                forms.add(form);\n+                names.add(form.kind.defaultLambdaName);\n@@ -420,4 +417,4 @@\n-                if (form.kind != LambdaForm.Kind.GENERIC) {\n-                    forms.add(form);\n-                    names.add(form.kind.defaultLambdaName);\n-                }\n+                if (form.kind == GENERIC)\n+                    throw new InternalError(b + \" volatile \" + ftype);\n+                forms.add(form);\n+                names.add(form.kind.defaultLambdaName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -159,1 +159,0 @@\n-        jdk.crypto.cryptoki, \/\/ participates in preview features\n@@ -278,0 +277,3 @@\n+        java.naming,\n+        java.rmi,\n+        java.net.http,\n@@ -279,0 +281,1 @@\n+        jdk.incubator.vector,\n@@ -280,0 +283,1 @@\n+        jdk.httpserver,\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,0 +156,5 @@\n+\n+    \/**\n+      * 26, tbd\n+      *\/\n+    JDK26(\"26\"),\n@@ -208,0 +213,1 @@\n+        case JDK26  -> Target.JDK1_26;\n@@ -265,1 +271,1 @@\n-        IMPLICIT_CLASSES(JDK21, Fragments.FeatureImplicitClasses, DiagKind.PLURAL),\n+        IMPLICIT_CLASSES(JDK25, Fragments.FeatureImplicitClasses, DiagKind.PLURAL),\n@@ -269,3 +275,3 @@\n-        FLEXIBLE_CONSTRUCTORS(JDK22, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n-        MODULE_IMPORTS(JDK23, Fragments.FeatureModuleImports, DiagKind.PLURAL),\n-        JAVA_BASE_TRANSITIVE(JDK24, Fragments.FeatureJavaBaseTransitive, DiagKind.PLURAL),\n+        FLEXIBLE_CONSTRUCTORS(JDK25, Fragments.FeatureFlexibleConstructors, DiagKind.NORMAL),\n+        MODULE_IMPORTS(JDK25, Fragments.FeatureModuleImports, DiagKind.PLURAL),\n+        JAVA_BASE_TRANSITIVE(JDK25, Fragments.FeatureJavaBaseTransitive, DiagKind.PLURAL),\n@@ -362,0 +368,1 @@\n+        case JDK26  -> RELEASE_26;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,0 +232,2 @@\n+    public final Type requiresIdentityType;\n+    public final Type requiresIdentityInternalType;\n@@ -234,1 +236,0 @@\n-    public final Type ioType;\n@@ -399,0 +400,6 @@\n+        return enterSyntheticAnnotation(names.fromString(name));\n+    }\n+\n+    \/\/ Enter a synthetic class that is used to mark classes in ct.sym.\n+    \/\/ This class does not have a class file.\n+    private Type enterSyntheticAnnotation(Name name) {\n@@ -401,1 +408,1 @@\n-        ClassType type = (ClassType)enterClass(java_base, names.fromString(name)).type;\n+        ClassType type = (ClassType)enterClass(java_base, name).type;\n@@ -627,0 +634,2 @@\n+        requiresIdentityType = enterClass(\"jdk.internal.RequiresIdentity\");\n+        requiresIdentityInternalType = enterSyntheticAnnotation(names.requiresIdentityInternal);\n@@ -629,1 +638,0 @@\n-        ioType = enterClass(\"java.io.IO\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -5164,10 +5164,6 @@\n-        if (isSameType(selectorType, targetType)) {\n-            return true;\n-        }\n-\n-        return (selectorType.isPrimitive() && targetType.isPrimitive()) &&\n-                ((selectorType.hasTag(BYTE) && !targetType.hasTag(CHAR)) ||\n-                 (selectorType.hasTag(SHORT) && (selectorType.getTag().isStrictSubRangeOf(targetType.getTag()))) ||\n-                 (selectorType.hasTag(CHAR)  && (selectorType.getTag().isStrictSubRangeOf(targetType.getTag())))  ||\n-                 (selectorType.hasTag(INT)   && (targetType.hasTag(DOUBLE) || targetType.hasTag(LONG))) ||\n-                 (selectorType.hasTag(FLOAT) && (selectorType.getTag().isStrictSubRangeOf(targetType.getTag()))));\n+        return isSameType(selectorType, targetType) ||\n+                (selectorType.isPrimitive() && targetType.isPrimitive()) &&\n+                ((selectorType.getTag().isStrictSubRangeOf(targetType.getTag())) &&\n+                        !((selectorType.hasTag(BYTE) && targetType.hasTag(CHAR)) ||\n+                          (selectorType.hasTag(INT)  && targetType.hasTag(FLOAT)) ||\n+                          (selectorType.hasTag(LONG) && (targetType.hasTag(DOUBLE) || targetType.hasTag(FLOAT)))));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n-            if (tree.restype != null && !tree.restype.type.hasTag(VOID))\n+            if (tree.restype != null && !tree.restype.type.hasTag(VOID)) {\n@@ -1071,0 +1071,2 @@\n+            }\n+            chk.checkRequiresIdentity(tree, env.info.lint);\n@@ -1350,0 +1352,1 @@\n+            chk.checkRequiresIdentity(tree, env.info.lint);\n@@ -1719,0 +1722,1 @@\n+        Type seltypeUnboxed = types.unboxedTypeOrType(seltype);\n@@ -1726,1 +1730,1 @@\n-            boolean booleanSwitch = types.isSameType(types.unboxedTypeOrType(seltype), syms.booleanType);\n+            boolean booleanSwitch = types.isSameType(seltypeUnboxed, syms.booleanType);\n@@ -1824,3 +1828,6 @@\n-                                    if (!stringSwitch && !intSwitch &&\n-                                            !((pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN)) &&\n-                                              types.isSameType(types.unboxedTypeOrType(seltype), pattype))) {\n+                                    boolean isLongFloatDoubleOrBooleanConstant =\n+                                            pattype.getTag().isInSuperClassesOf(LONG) || pattype.getTag().equals(BOOLEAN);\n+                                    if (isLongFloatDoubleOrBooleanConstant) {\n+                                        preview.checkSourceLevel(label.pos(), Feature.PRIMITIVE_PATTERNS);\n+                                    }\n+                                    if (!stringSwitch && !intSwitch && !(isLongFloatDoubleOrBooleanConstant && types.isSameType(seltypeUnboxed, pattype))) {\n@@ -1967,1 +1974,1 @@\n-        if (isValueBased(tree.lock.type)) {\n+        if (tree.lock.type != null && tree.lock.type.isValueBased()) {\n@@ -1973,5 +1980,0 @@\n-        \/\/ where\n-        private boolean isValueBased(Type t) {\n-            return t != null && t.tsym != null && (t.tsym.flags() & VALUE_BASED) != 0;\n-        }\n-\n@@ -2690,0 +2692,1 @@\n+        chk.checkRequiresIdentity(tree, env.info.lint);\n@@ -2932,0 +2935,2 @@\n+            chk.checkRequiresIdentity(tree, env.info.lint);\n+\n@@ -3466,0 +3471,4 @@\n+                        if (bound.tsym != syms.objectType.tsym && (!bound.isInterface() || (bound.tsym.flags() & ANNOTATION) != 0)) {\n+                            \/\/ bound must be j.l.Object or an interface, but not an annotation\n+                            reportIntersectionError(that, \"not.an.intf.component\", bound);\n+                        }\n@@ -3489,0 +3498,5 @@\n+        private void reportIntersectionError(DiagnosticPosition pos, String key, Object... args) {\n+             resultInfo.checkContext.report(pos,\n+                 diags.fragment(Fragments.BadIntersectionTargetForFunctionalExpr(diags.fragment(key, args))));\n+        }\n+\n@@ -3903,0 +3917,1 @@\n+            chk.checkRequiresIdentity(that, localEnv.info.lint);\n@@ -4206,0 +4221,1 @@\n+        chk.checkRequiresIdentity(tree, env.info.lint);\n@@ -4347,0 +4363,1 @@\n+        chk.checkRequiresIdentity(tree, env.info.lint);\n@@ -4654,1 +4671,1 @@\n-                    return rs.resolveSelf(pos, env, site.tsym, name);\n+                    return rs.resolveSelf(pos, env, site.tsym, tree);\n@@ -5581,2 +5598,7 @@\n-                                log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n-                                        Errors.InvalidPermitsClause(Fragments.DoesntExtendSealed(subType)));\n+                                if(c.isInterface()) {\n+                                    log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n+                                            Errors.InvalidPermitsClause(Fragments.DoesntImplementSealed(kindName(subType.tsym), subType)));\n+                                } else {\n+                                    log.error(TreeInfo.diagnosticPositionFor(subType.tsym, env.tree),\n+                                            Errors.InvalidPermitsClause(Fragments.DoesntExtendSealed(subType)));\n+                                }\n@@ -5700,0 +5722,2 @@\n+        chk.checkRequiresIdentity(tree, env.info.lint);\n+\n@@ -5815,1 +5839,1 @@\n-            tree.vartype = make.at(Position.NOPOS).Erroneous();\n+            tree.vartype = make.at(tree.pos()).Erroneous();\n@@ -5817,1 +5841,1 @@\n-            tree.vartype = make.at(Position.NOPOS).Type(type);\n+            tree.vartype = make.at(tree.pos()).Type(type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":40,"deletions":16,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -3700,1 +3700,1 @@\n-            body.endpos = TreeInfo.endPos(tree.body);\n+            body.bracePos = TreeInfo.endPos(tree.body);\n@@ -4161,1 +4161,1 @@\n-                res.endpos = TreeInfo.endPos(tree);\n+                res.bracePos = TreeInfo.endPos(tree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -3858,2 +3858,2 @@\n-     * @param c             The qualifier.\n-     * @param name          The identifier's name.\n+     * @param c             The type of the selected expression\n+     * @param tree          The expression\n@@ -3864,1 +3864,2 @@\n-                       Name name) {\n+                       JCFieldAccess tree) {\n+        Name name = tree.name;\n@@ -3875,1 +3876,3 @@\n-                    else if (env1.info.ctorPrologue && !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n+                    else if (env1.info.ctorPrologue &&\n+                            !isReceiverParameter(env, tree) &&\n+                            !isAllowedEarlyReference(pos, env1, (VarSymbol)sym))\n@@ -3927,0 +3930,6 @@\n+    private boolean isReceiverParameter(Env<AttrContext> env, JCFieldAccess tree) {\n+        if (env.tree.getTag() != METHODDEF)\n+            return false;\n+        JCMethodDecl method = (JCMethodDecl)env.tree;\n+        return method.recvparam != null && tree == method.recvparam.nameexpr;\n+    }\n@@ -4002,5 +4011,13 @@\n-        return env.info.ctorPrologue &&\n-            (v.flags() & STATIC) == 0 &&\n-            v.owner.kind == TYP &&\n-            types.isSubtype(env.enclClass.type, v.owner.type) &&\n-            (base == null || TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base));\n+        if (env.info.ctorPrologue &&\n+                (v.flags() & STATIC) == 0 &&\n+                v.isMemberOf(env.enclClass.sym, types)) {\n+\n+            \/\/ Allow \"Foo.this.x\" when \"Foo\" is (also) an outer class, as this refers to the outer instance\n+            if (base != null) {\n+                return TreeInfo.isExplicitThisReference(types, (ClassType)env.enclClass.type, base);\n+            }\n+\n+            \/\/ It's an early reference to an instance field member of the current instance\n+            return true;\n+        }\n+        return false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -814,3 +814,0 @@\n-        Type selsuper = types.supertype(tree.selector.type);\n-        boolean enumSwitch = selsuper != null &&\n-            selsuper.tsym == syms.enumSym;\n@@ -852,4 +849,1 @@\n-        Type selsuper = types.supertype(tree.selector.type);\n-        boolean enumSwitch = selsuper != null &&\n-            selsuper.tsym == syms.enumSym;\n-        tree.cases = translate(tree.cases, tree.type);\n+        tree.cases = translate(tree.cases, erasure(tree.type));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransTypes.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -503,1 +503,1 @@\n-            block.endpos = TreeInfo.endPos(clinitStats.last());\n+            block.bracePos = TreeInfo.endPos(clinitStats.last());\n@@ -556,2 +556,2 @@\n-            if (md.body.endpos == Position.NOPOS)\n-                md.body.endpos = TreeInfo.endPos(md.body.stats.last());\n+            if (md.body.bracePos == Position.NOPOS)\n+                md.body.bracePos = TreeInfo.endPos(md.body.stats.last());\n@@ -1124,1 +1124,1 @@\n-            code.statBegin(tree.endpos);\n+            code.statBegin(tree.bracePos);\n@@ -1195,5 +1195,1 @@\n-            Chain exit = loopEnv.info.exit;\n-            if (exit != null) {\n-                code.resolve(exit);\n-                exit.state.defined.excludeFrom(code.nextreg);\n-            }\n+            code.resolve(loopEnv.info.exit);\n@@ -1209,5 +1205,1 @@\n-        Chain exit = localEnv.info.exit;\n-        if (exit != null) {\n-            code.resolve(exit);\n-            exit.state.defined.excludeFrom(code.nextreg);\n-        }\n+        code.resolve(localEnv.info.exit);\n@@ -1416,5 +1408,1 @@\n-            Chain exit = switchEnv.info.exit;\n-            if  (exit != null) {\n-                code.resolve(exit);\n-                exit.state.defined.excludeFrom(limit);\n-            }\n+            code.resolve(switchEnv.info.exit);\n@@ -1856,1 +1844,0 @@\n-                code.state.forceStackTop(tree.target.type);\n@@ -1972,1 +1959,0 @@\n-            code.state.forceStackTop(tree.type);\n@@ -1982,1 +1968,0 @@\n-            code.state.forceStackTop(tree.type);\n@@ -2543,1 +2528,8 @@\n-    static class GenContext {\n+    final class GenContext {\n+\n+        \/**\n+         * The top defined local variables for exit or continue branches to merge into.\n+         * It may contain uninitialized variables to be initialized by branched code,\n+         * so we cannot use Code.State.defined bits.\n+         *\/\n+        final int limit;\n@@ -2569,0 +2561,5 @@\n+        GenContext() {\n+            var code = Gen.this.code;\n+            this.limit = code == null ? 0 : code.nextreg;\n+        }\n+\n@@ -2572,0 +2569,3 @@\n+            if (c != null) {\n+                c.state.defined.excludeFrom(limit);\n+            }\n@@ -2578,0 +2578,3 @@\n+            if (c != null) {\n+                c.state.defined.excludeFrom(limit);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":27,"deletions":24,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-    component type {0} is not an interface\n+    component type {0} is not an interface or java.lang.Object\n@@ -532,1 +532,1 @@\n-    implicitly declared class should not have package declaration\n+    compact source file should not have package declaration\n@@ -535,1 +535,1 @@\n-    implicitly declared class does not have main method in the form of void main() or void main(String[] args)\n+    compact source file does not have main method in the form of void main() or void main(String[] args)\n@@ -697,0 +697,3 @@\n+compiler.err.illegal.char.literal.multiple.surrogates=\\\n+    character literal contains more than one UTF-16 code unit\n+\n@@ -3965,1 +3968,5 @@\n-    subclass {0} must extend sealed class\n+    class {0} must extend sealed class\n+\n+# 0: kind name, 1: type\n+compiler.misc.doesnt.implement.sealed=\\\n+    {0} {1} must extend sealed interface\n@@ -4256,1 +4263,1 @@\n-# lint: synchronization\n+# lint: identity\n@@ -4260,0 +4267,4 @@\n+# lint: identity\n+compiler.warn.attempt.to.use.value.based.where.identity.expected=\\\n+    use of a value-based class with an operation that expects reliable identity\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1134,1 +1134,1 @@\n-        public int endpos = Position.NOPOS;\n+        public int bracePos = Position.NOPOS;\n@@ -1343,1 +1343,1 @@\n-        public int endpos = Position.NOPOS;\n+        public int bracePos = Position.NOPOS;\n@@ -1443,1 +1443,1 @@\n-        public int endpos = Position.NOPOS;\n+        public int bracePos = Position.NOPOS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -516,2 +516,2 @@\n-    \/** The end position of given tree, if it is a block with\n-     *  defined endpos.\n+    \/** The closing brace position of given tree, if it is a block with\n+     *  defined bracePos.\n@@ -520,2 +520,2 @@\n-        if (tree.hasTag(BLOCK) && ((JCBlock) tree).endpos != Position.NOPOS)\n-            return ((JCBlock) tree).endpos;\n+        if (tree.hasTag(BLOCK) && ((JCBlock) tree).bracePos != Position.NOPOS)\n+            return ((JCBlock) tree).bracePos;\n@@ -529,2 +529,2 @@\n-                   ((JCSwitch) tree).endpos != Position.NOPOS) {\n-            return ((JCSwitch) tree).endpos;\n+                   ((JCSwitch) tree).bracePos != Position.NOPOS) {\n+            return ((JCSwitch) tree).bracePos;\n@@ -532,2 +532,2 @@\n-                   ((JCSwitchExpression) tree).endpos != Position.NOPOS) {\n-            return ((JCSwitchExpression) tree).endpos;\n+                   ((JCSwitchExpression) tree).bracePos != Position.NOPOS) {\n+            return ((JCSwitchExpression) tree).bracePos;\n@@ -662,5 +662,0 @@\n-        if (endPosTable == null) {\n-            \/\/ fall back on limited info in the tree\n-            return endPos(tree);\n-        }\n-\n@@ -747,2 +742,2 @@\n-     *  end position of given tree, if it is a block with\n-     *  defined endpos.\n+     *  closing brace position of given tree, if it is a block with\n+     *  defined closing brace position.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -236,0 +236,3 @@\n+    \/\/ special annotation names\n+    public final Name requiresIdentityInternal;\n+\n@@ -425,0 +428,3 @@\n+\n+        \/\/ special annotations:\n+        requiresIdentityInternal = fromString(\"jdk.internal.RequiresIdentity+Annotation\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,0 +166,1 @@\n+ * <tr><th scope=\"row\">{@code identity}             <td>use of a value-based class where an identity class is expected\n@@ -188,1 +189,5 @@\n- * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes\n+ * <tr><th scope=\"row\">{@code synchronization}      <td>synchronization attempts on instances of value-based classes;\n+ *                                                      this key is a deprecated alias for {@code identity}, which has\n+ *                                                      the same uses and effects. Users are encouraged to use the\n+ *                                                      {@code identity} category for all future and existing uses of\n+ *                                                      {@code synchronization}\n","filename":"src\/jdk.compiler\/share\/classes\/module-info.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-#  Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,3 @@\n+# These sub groups of tier3 allow for running certain tests separately from the\n+# rest. When adding tests to tier3, in most cases they should be added to\n+# tier3_part1.\n@@ -87,0 +90,4 @@\n+    :tier3_part1 \\\n+    :tier3_jpackage\n+\n+tier3_part1 = \\\n@@ -94,1 +101,0 @@\n-    :jdk_jpackage \\\n@@ -97,0 +103,4 @@\n+# The jpackage tests on Windows require permissions that aren't always present\n+tier3_jpackage = \\\n+    :jdk_jpackage\n+\n@@ -390,1 +400,0 @@\n-    java\/foreign\/TestMatrix.java \\\n@@ -622,1 +631,0 @@\n-    jdk\/nio\/zipfs\/TestLocOffsetFromZip64EF.java \\\n@@ -628,1 +636,3 @@\n-    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java\n+    com\/sun\/net\/httpserver\/simpleserver\/DocRootDirPermissionsWinTest.java \\\n+    javax\/xml\/jaxp\/datatype\/8033980\/GregorianCalAndDurSerDataUtil.java \\\n+    java\/util\/zip\/ZipFile\/CenSizeMaximum.java\n@@ -652,1 +662,3 @@\n-    java\/rmi\/registry\/nonLocalRegistry\/NonLocalSkeletonTest.java\n+    java\/rmi\/registry\/nonLocalRegistry\/NonLocalSkeletonTest.java \\\n+    java\/foreign\/TestMatrix.java \\\n+    java\/nio\/channels\/FileChannel\/BlockDeviceSize.java\n","filename":"test\/jdk\/TEST.groups","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+compiler.warn.is.preview                                # difficult to produce reliably despite future changes to java.base\n@@ -147,2 +148,0 @@\n-compiler.misc.bad.intersection.target.for.functional.expr  # currently not generated, should be removed?\n-compiler.misc.not.an.intf.component\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}