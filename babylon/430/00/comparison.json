{"files":[{"patch":"@@ -4,1 +4,0 @@\n-\n","filename":"hat\/backends\/ffi\/CMakeLists.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,2 +54,0 @@\n-\/\/#include <cuda_runtime_api.h>\n-#define CUDA_TYPES\n@@ -80,0 +78,1 @@\n+\n@@ -89,0 +88,1 @@\n+\n","filename":"hat\/backends\/ffi\/cuda\/include\/cuda_backend.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,7 +6,18 @@\n-find_package(hip)\n-if(hip_FOUND)\n-\tmessage(\"HIP\")\n-\n-\tif (\"${HIP_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n-\t\tset (HIP_BACKEND \"${CMAKE_SOURCE_DIR}\")\n-\t\tmessage(\"HIP_BACKEND=${HIP_BACKEND}\")\n+# this is the only way I can think of to get cmake to find FindHIP.cmake\n+set(ROCM_PATH \"\/opt\/rocm\")\n+list(APPEND CMAKE_MODULE_PATH \"${ROCM_PATH}\/lib\/cmake\/hip\")\n+# \/opt\/rocm-6.3.4\/lib\/cmake\/hip\/FindHIP.cmake\n+# Weirdly the above does not set HIP_INCLUDE_DIR\n+# This seems to set expected VARS but is not \n+# invoked  \/opt\/rocm-6.3.4\/lib\/cmake\/hip\/hip-config.cmake\n+find_package(HIP)\n+get_cmake_property(_variableNames VARIABLES)\n+foreach (_variableName ${_variableNames})\n+    message(STATUS \"${_variableName}=${${_variableName}}\")\n+endforeach()\n+if(HIP_FOUND)\n+   if(HIP_READY) #  get rid of this once we figur out how to build\n+    set(HIP_INCLUDE_DIR \"\/opt\/rocm\/include\")\n+    if (\"${HIP_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+      set (HIP_BACKEND \"${CMAKE_SOURCE_DIR}\")\n+      message(\"HIP_BACKEND=${HIP_BACKEND}\")\n@@ -21,3 +32,3 @@\n-            ${HIP_INCLUDE_DIR}\n-            ${SHARED_BACKEND}\/include\n-            ${HIP_BACKEND}\/include\n+       ${HIP_INCLUDE_DIR}\n+       ${SHARED_BACKEND}\/include\n+       ${HIP_BACKEND}\/include\n@@ -27,2 +38,2 @@\n-            ${CMAKE_BINARY_DIR}\n-            ${HIP_LIBRARY_DIR}\n+       ${CMAKE_BINARY_DIR}\n+       ${hip_LIB_INSTALL_DIR}\n@@ -32,2 +43,2 @@\n-\t    ${SHARED_BACKEND}\/cpp\/shared.cpp\n-\t    ${HIP_BACKEND}\/cpp\/hip_backend.cpp\n+       ${SHARED_BACKEND}\/cpp\/shared.cpp\n+       ${HIP_BACKEND}\/cpp\/hip_backend.cpp\n@@ -36,3 +47,3 @@\n-    target_link_libraries(hip_backend\n-\t    PRIVATE hip::host\n-    )\n+    #target_link_libraries(hip_backend\n+    #   PRIVATE hip::host\n+    #)\n@@ -41,1 +52,1 @@\n-\t    ${HIP_BACKEND}\/cpp\/info.cpp\n+       ${HIP_BACKEND}\/cpp\/info.cpp\n@@ -45,2 +56,2 @@\n-            hip_backend\n-            hip::host\n+       hip_backend\n+     #  hip::host\n@@ -48,0 +59,3 @@\n+  else()\n+     message(\"FOUND HIP but CMakefile still broken\")\n+  endif()\n","filename":"hat\/backends\/ffi\/hip\/CMakeLists.txt","additions":34,"deletions":20,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -29,2 +53,1 @@\n-\n-#define HIP_TYPES\n+#include <builtin_types.h>\n@@ -37,0 +60,40 @@\n+#include <thread>\n+\n+\/*\n+struct WHERE{\n+    const char* f;\n+    int l;\n+    cudaError_enum e;\n+    const char* t;\n+    void report() const{\n+        if (e == CUDA_SUCCESS){\n+           \/\/ std::cout << t << \"  OK at \" << f << \" line \" << l << std::endl;\n+        }else {\n+            const char *buf;\n+            cuGetErrorName(e, &buf);\n+            std::cerr << t << \" CUDA error = \" << e << \" \" << buf <<std::endl<< \"      \" << f << \" line \" << l << std::endl;\n+            exit(-1);\n+        }\n+    }\n+};\n+\n+*\/\n+class PtxSource: public Text  {\n+public:\n+    PtxSource();\n+    PtxSource(size_t len);\n+    PtxSource(size_t len, char *text);\n+    PtxSource(char *text);\n+    ~PtxSource() = default;\n+   \/\/ static PtxSource *nvcc(const char *cudaSource, size_t len);\n+};\n+\n+class HipSource: public Text  {\n+public:\n+    HipSource();\n+    HipSource(size_t len);\n+    HipSource(size_t len, char *text);\n+    HipSource(char *text);\n+    ~HipSource() = default;\n+\n+};\n@@ -38,1 +101,1 @@\n-class HIPBackend : public Backend {\n+class HipBackend : public Backend {\n@@ -40,1 +103,1 @@\n-    class HIPConfig : public Backend::Config {\n+class HipQueue: public Backend::Queue {\n@@ -42,2 +105,5 @@\n-        boolean gpu;\n-    };\n+         std::thread::id streamCreationThread;\n+        CUstream cuStream;\n+        HipQueue(Backend *backend);\n+        void init();\n+         void wait() override;\n@@ -45,5 +111,1 @@\n-    class HIPProgram : public Backend::Program {\n-        class HIPKernel : public Backend::Program::Kernel {\n-            class HIPBuffer : public Backend::Program::Kernel::Buffer {\n-            public:\n-                hipDeviceptr_t devicePtr;\n+         void release() override;\n@@ -51,1 +113,1 @@\n-                HIPBuffer(Backend::Program::Kernel *kernel, Arg_s *arg);\n+         void computeStart() override;\n@@ -53,1 +115,1 @@\n-                void copyToDevice();\n+         void computeEnd() override;\n@@ -55,1 +117,19 @@\n-                void copyFromDevice();\n+         void copyToDevice(Buffer *buffer) override;\n+\n+         void copyFromDevice(Buffer *buffer) override;\n+\n+        virtual void dispatch(KernelContext *kernelContext, CompilationUnit::Kernel *kernel) override;\n+\n+        virtual ~HipQueue();\n+\n+};\n+\n+  class HipBuffer : public Backend::Buffer {\n+    public:\n+        CUdeviceptr devicePtr;\n+        HipBuffer(Backend *backend, BufferState *bufferState);\n+        virtual ~CudaBuffer();\n+    };\n+\n+    class HipProgram : public Backend::CompilationUnit {\n+        class HipKernel : public Backend::CompilationUnit::Kernel {\n@@ -57,2 +137,0 @@\n-                virtual ~HIPBuffer();\n-            };\n@@ -64,1 +142,1 @@\n-            HIPKernel(Backend::Program *program, char* name, hipFunction_t kernel);\n+            HIPKernel(Backend::CompilationUnit *program, char* name, hipFunction_t kernel);\n@@ -72,1 +150,4 @@\n-        hipModule_t module;\n+        HipModule_t module;\n+        HipSource hipSource;\n+        PtxSource ptxSource;\n+        Log log;\n@@ -76,1 +157,0 @@\n-\n@@ -79,1 +159,2 @@\n-        long getKernel(int nameLen, char *name);\n+        long getHipKernel(char *name);\n+        long getHipKernel(int nameLen, char *name);\n@@ -88,0 +169,1 @@\n+    void info();\n@@ -89,2 +171,1 @@\n-    HIPBackend(HIPConfig *config, int configSchemaLen, char *configSchema);\n-\n+     HIPBackend(in mode);\n@@ -92,1 +173,0 @@\n-\n@@ -97,4 +177,0 @@\n-    void info();\n-\n-    long compileProgram(int len, char *source);\n-\n","filename":"hat\/backends\/ffi\/hip\/include\/hip_backend.h","additions":103,"deletions":27,"binary":false,"changes":130,"status":"modified"}]}