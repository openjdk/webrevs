{"files":[{"patch":"@@ -452,9 +452,6 @@\n-        if (quotableOpGetterInfo.getMethodType().parameterList().equals(List.of(CodeReflectionSupport.OP_FACTORY_CLASS,\n-                CodeReflectionSupport.TYPE_ELEMENT_FACTORY_CLASS))) {\n-            \/\/ load arguments to quotableOpGetter: ExtendedOp.FACTORY and CORE_TYPE_FACTORY\n-            cob.fieldAccess(Opcode.GETSTATIC, CodeReflectionSupport.EXTENDED_OP_CLASS.describeConstable().get(),\n-                    \"FACTORY\", CodeReflectionSupport.OP_FACTORY_CLASS.describeConstable().get());\n-            cob.fieldAccess(Opcode.GETSTATIC, CodeReflectionSupport.CORE_TYPE_FACTORY_CLASS.describeConstable().get(),\n-                    \"CORE_TYPE_FACTORY\",\n-                    CodeReflectionSupport.TYPE_ELEMENT_FACTORY_CLASS.describeConstable().get());\n-        }\n+        \/\/ load arguments to quotableOpGetter: ExtendedOp.FACTORY and CORE_TYPE_FACTORY\n+        cob.fieldAccess(Opcode.GETSTATIC, CodeReflectionSupport.EXTENDED_OP_CLASS.describeConstable().get(),\n+                \"FACTORY\", CodeReflectionSupport.OP_FACTORY_CLASS.describeConstable().get());\n+        cob.fieldAccess(Opcode.GETSTATIC, CodeReflectionSupport.CORE_TYPE_FACTORY_CLASS.describeConstable().get(),\n+                \"CORE_TYPE_FACTORY\",\n+                CodeReflectionSupport.TYPE_ELEMENT_FACTORY_CLASS.describeConstable().get());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -535,1 +535,0 @@\n-        Object[] args;\n@@ -538,2 +537,2 @@\n-            opMethod = method.getDeclaringClass().getDeclaredMethod(opMethodName);\n-            args = new Object[] {};\n+            opMethod = method.getDeclaringClass().getDeclaredMethod(opMethodName, OpFactory.class,\n+                    TypeElementFactory.class);\n@@ -541,7 +540,1 @@\n-            try {\n-                opMethod = method.getDeclaringClass().getDeclaredMethod(opMethodName, OpFactory.class,\n-                        TypeElementFactory.class);\n-                args = new Object[] {ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY};\n-            } catch (NoSuchMethodException e2) {\n-                return Optional.empty();\n-            }\n+            return Optional.empty();\n@@ -551,1 +544,1 @@\n-            FuncOp funcOp = (FuncOp) opMethod.invoke(null, args);\n+            FuncOp funcOp = (FuncOp) opMethod.invoke(null, ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.incubator.code.op.OpFactory;\n@@ -64,0 +65,1 @@\n+import jdk.incubator.code.type.TypeElementFactory;\n@@ -95,0 +97,2 @@\n+    private static final MethodTypeDesc opMethodDesc = MethodTypeDesc.of(FuncOp.class.describeConstable().get(),\n+            OpFactory.class.describeConstable().get(), TypeElementFactory.class.describeConstable().get());\n@@ -168,1 +172,1 @@\n-                    clb.withMethod(\"op$lambda$\" + i, MethodTypeDesc.of(FuncOp.class.describeConstable().get()),\n+                    clb.withMethod(\"op$lambda$\" + i, opMethodDesc,\n@@ -904,1 +908,1 @@\n-                                                MethodTypeDesc.of(FuncOp.class.describeConstable().get()))));\n+                                                opMethodDesc)));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}