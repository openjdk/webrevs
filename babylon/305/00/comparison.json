{"files":[{"patch":"@@ -141,0 +141,1 @@\n+    private final CodeModelStorageOption codeModelStorageOption;\n@@ -157,0 +158,1 @@\n+        codeModelStorageOption = CodeModelStorageOption.valueOf(options.get(\"codeModelStorageOption\"));\n@@ -209,1 +211,1 @@\n-                classOps.add(opMethodDecl(methodName(bodyScanner.symbolToErasedMethodRef(tree.sym)), funcOp));\n+                classOps.add(opMethodDecl(methodName(bodyScanner.symbolToErasedMethodRef(tree.sym)), funcOp, codeModelStorageOption));\n@@ -257,1 +259,1 @@\n-                JCMethodDecl opMethod = opMethodDecl(lambdaName(), funcOp);\n+                JCMethodDecl opMethod = opMethodDecl(lambdaName(), funcOp, codeModelStorageOption);\n@@ -318,1 +320,1 @@\n-                JCMethodDecl opMethod = opMethodDecl(lambdaName(), funcOp);\n+                JCMethodDecl opMethod = opMethodDecl(lambdaName(), funcOp, codeModelStorageOption);\n@@ -391,6 +393,12 @@\n-    private JCMethodDecl opMethodDecl(Name methodName, CoreOp.FuncOp op) {\n-        var mt = new MethodType(com.sun.tools.javac.util.List.nil(), crSyms.funcOpType,\n-                com.sun.tools.javac.util.List.nil(), syms.methodClass);\n-        var mn = names.fromString(\"op$\").append(methodName);\n-        var ms = new MethodSymbol(PUBLIC | STATIC | SYNTHETIC, mn, mt, currentClassSym);\n-        currentClassSym.members().enter(ms);\n+    private enum CodeModelStorageOption {\n+        TEXT,\n+        CODE_BUILDER\n+    }\n+\n+    private JCMethodDecl opMethodDecl(Name methodName, CoreOp.FuncOp op, CodeModelStorageOption codeModelStorageOption) {\n+        if (CodeModelStorageOption.TEXT.equals(codeModelStorageOption)) {\n+            var mt = new MethodType(com.sun.tools.javac.util.List.nil(), crSyms.funcOpType,\n+                    com.sun.tools.javac.util.List.nil(), syms.methodClass);\n+            var mn = names.fromString(\"op$\").append(methodName);\n+            var ms = new MethodSymbol(PUBLIC | STATIC | SYNTHETIC, mn, mt, currentClassSym);\n+            currentClassSym.members().enter(ms);\n@@ -398,3 +406,3 @@\n-        var opFromStr = make.App(make.Ident(crSyms.opParserFromString),\n-                com.sun.tools.javac.util.List.of(make.Literal(op.toText())));\n-        var ret = make.Return(make.TypeCast(crSyms.funcOpType, opFromStr));\n+            var opFromStr = make.App(make.Ident(crSyms.opParserFromString),\n+                    com.sun.tools.javac.util.List.of(make.Literal(op.toText())));\n+            var ret = make.Return(make.TypeCast(crSyms.funcOpType, opFromStr));\n@@ -402,2 +410,7 @@\n-        var md = make.MethodDef(ms, make.Block(0, com.sun.tools.javac.util.List.of(ret)));\n-        return md;\n+            var md = make.MethodDef(ms, make.Block(0, com.sun.tools.javac.util.List.of(ret)));\n+            return md;\n+        } else if (CodeModelStorageOption.CODE_BUILDER.equals(codeModelStorageOption)) {\n+            throw new IllegalStateException(\"code model storage option %s not supported for the moment\".formatted(codeModelStorageOption));\n+        } else {\n+            throw new IllegalStateException(\"unknown code model storage option: \" + codeModelStorageOption);\n+        }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"}]}