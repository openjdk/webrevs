{"files":[{"patch":"@@ -135,0 +135,2 @@\n+        Value receiver = invokeOp.invokeKind() == CoreOp.InvokeOp.InvokeKind.INSTANCE ? invokeOp.operands().get(0) : null;\n+        List<Value> arguments = invokeOp.operands().stream().skip(receiver == null ? 0 : 1).collect(List.collector());\n@@ -136,1 +138,1 @@\n-        for (Value operand : invokeOp.operands()) {\n+        for (Value operand : arguments) {\n@@ -143,1 +145,1 @@\n-        var meth = treeMaker.Ident(methodSym);\n+        var meth = receiver == null ? treeMaker.Ident(methodSym) : treeMaker.Select((JCTree.JCExpression) valueToTree.get(receiver), methodSym);\n@@ -145,1 +147,1 @@\n-        for (Value operand : invokeOp.operands()) {\n+        for (Value operand : arguments) {\n@@ -197,6 +199,3 @@\n-            case CoreOp.ConstantOp constantOp when constantOp.resultType() instanceof PrimitiveType ->\n-                    treeMaker.Literal(constantOp.value());\n-            case CoreOp.ConstantOp constantOp -> {\n-                var literalType = typeElementToType(constantOp.resultType());\n-               yield treeMaker.Literal(literalType.getTag(), constantOp.value()).setType(literalType);\n-            }\n+            case CoreOp.ConstantOp constantOp when constantOp.value() == null ->\n+                    treeMaker.Literal(TypeTag.BOT, null).setType(syms.botType);\n+            case CoreOp.ConstantOp constantOp -> treeMaker.Literal(constantOp.value());\n@@ -230,3 +229,2 @@\n-            case CoreOp.VarAccessOp.VarLoadOp varLoadOp -> {\n-                yield treeMaker.Ident((JCTree.JCVariableDecl) valueToTree.get(varLoadOp.varOperand()));\n-            }\n+            case CoreOp.VarAccessOp.VarLoadOp varLoadOp ->\n+                    treeMaker.Ident((JCTree.JCVariableDecl) valueToTree.get(varLoadOp.varOperand()));\n@@ -312,2 +310,0 @@\n-\n-\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/CodeModelToAST.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"}]}