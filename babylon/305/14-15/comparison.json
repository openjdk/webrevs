{"files":[{"patch":"@@ -445,0 +445,1 @@\n+        \/\/ load class data: CodeReflectionSupport.HANDLE_MAKE_QUOTED and quotableOpGetter\n@@ -446,1 +447,0 @@\n-        \/\/ load op string from field\n@@ -452,1 +452,1 @@\n-\/\/        ExtendedOp.FACTORY;\n+        \/\/ load arguments to quotableOpGetter: ExtendedOp.FACTORY and CORE_TYPE_FACTORY\n@@ -455,1 +455,0 @@\n-\/\/        CoreTypeFactory.CORE_TYPE_FACTORY\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tools.javac.code.Symbol;\n@@ -53,0 +54,4 @@\n+    public final Type extendedOpType;\n+    public final Type coreTypeFactoryType;\n+    public final Symbol.VarSymbol extendedOpFactorySym;\n+    public final Symbol.VarSymbol coreTypeFactorySym;\n@@ -84,2 +89,6 @@\n-\n-\n+        extendedOpType = syms.enterClass(jdk_incubator_code, \"jdk.incubator.code.op.ExtendedOp\");\n+        coreTypeFactoryType = syms.enterClass(jdk_incubator_code, \"jdk.incubator.code.type.CoreTypeFactory\");\n+        extendedOpFactorySym = new Symbol.VarSymbol(PUBLIC | STATIC, names.fromString(\"FACTORY\"), opFactoryType,\n+                extendedOpType.tsym);\n+        coreTypeFactorySym = new Symbol.VarSymbol(PUBLIC | STATIC, names.fromString(\"CORE_TYPE_FACTORY\"), typeElementFactoryType,\n+                coreTypeFactoryType.tsym);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/CodeReflectionSymbols.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -273,2 +273,6 @@\n-                        \/\/ Deserialize the func operation\n-                        JCMethodInvocation op = make.App(opMethodId);\n+                        \/\/ Get the func operation\n+                        JCFieldAccess opFactory = make.Select(make.Ident(crSyms.extendedOpType.tsym),\n+                                crSyms.extendedOpFactorySym);\n+                        JCFieldAccess typeFactory = make.Select(make.Ident(crSyms.coreTypeFactoryType.tsym),\n+                                crSyms.coreTypeFactorySym);\n+                        JCMethodInvocation op = make.App(opMethodId, com.sun.tools.javac.util.List.of(opFactory, typeFactory));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}