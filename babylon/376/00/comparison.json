{"files":[{"patch":"@@ -648,0 +648,1 @@\n+                super.visitNewClass(tree);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,32 @@\n+    @Test\n+    public void testCaptureThisInInvocationArg() {\n+        Quotable quotable = (Quotable & ToIntFunction<Number>)y -> y.intValue() + Integer.valueOf(hashCode());\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n+        assertEquals(quoted.capturedValues().size(), 1);\n+        Iterator<Object> it = quoted.capturedValues().values().iterator();\n+        assertEquals(it.next(), this);\n+        List<Object> arguments = new ArrayList<>();\n+        arguments.add(1);\n+        arguments.addAll(quoted.capturedValues().values());\n+        int res = (int)Interpreter.invoke(MethodHandles.lookup(), (Op & Op.Invokable) quoted.op(),\n+                arguments);\n+        assertEquals(res, 1 + hashCode());\n+    }\n+\n+    record R(int i) {}\n+\n+    @Test\n+    public void testCaptureThisInNewArg() {\n+        Quotable quotable = (Quotable & ToIntFunction<Number>)y -> y.intValue() + new R(hashCode()).i;\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n+        assertEquals(quoted.capturedValues().size(), 1);\n+        Iterator<Object> it = quoted.capturedValues().values().iterator();\n+        assertEquals(it.next(), this);\n+        List<Object> arguments = new ArrayList<>();\n+        arguments.add(1);\n+        arguments.addAll(quoted.capturedValues().values());\n+        int res = (int)Interpreter.invoke(MethodHandles.lookup(), (Op & Op.Invokable) quoted.op(),\n+                arguments);\n+        assertEquals(res, 1 + hashCode());\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuotable.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -104,0 +104,31 @@\n+    @Test\n+    public void testCaptureThisInInvocationArg() {\n+        Quoted quoted = (Number y) -> y.intValue() + Integer.valueOf(hashCode());\n+        assertEquals(quoted.capturedValues().size(), 1);\n+        Iterator<Object> it = quoted.capturedValues().values().iterator();\n+        assertEquals(it.next(), this);\n+        List<Object> arguments = new ArrayList<>();\n+        arguments.add(1);\n+        arguments.addAll(quoted.capturedValues().values());\n+        int res = (int)Interpreter.invoke(MethodHandles.lookup(), (Op & Op.Invokable) quoted.op(),\n+                arguments);\n+        assertEquals(res, 1 + hashCode());\n+    }\n+\n+    record R(int i) {}\n+\n+    @Test\n+    public void testCaptureThisInNewArg() {\n+        Quoted quoted = (Number y) -> y.intValue() + new R(hashCode()).i;\n+        assertEquals(quoted.capturedValues().size(), 1);\n+        Iterator<Object> it = quoted.capturedValues().values().iterator();\n+        assertEquals(it.next(), this);\n+        List<Object> arguments = new ArrayList<>();\n+        arguments.add(1);\n+        arguments.addAll(quoted.capturedValues().values());\n+        int res = (int)Interpreter.invoke(MethodHandles.lookup(), (Op & Op.Invokable) quoted.op(),\n+                arguments);\n+        assertEquals(res, 1 + hashCode());\n+    }\n+\n+\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuoted.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"}]}