{"files":[{"patch":"@@ -65,0 +65,4 @@\n+        \/\/ @@@ property is used to test both impls\n+        if (!\"cytron\".equalsIgnoreCase(System.getProperty(\"babylon.ssa\"))) {\n+            return SSAConstruction.transform(nestedOp);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/analysis\/SSA.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @run junit\/othervm -Dbabylon.ssa=cytron CoreBinaryOpsTest\n@@ -47,2 +48,0 @@\n-import java.lang.reflect.code.CopyContext;\n-import java.lang.reflect.code.Op;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/CoreBinaryOpsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+ * @run testng\/othervm -Dbabylon.ssa=cytron TestBuild\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBuild.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @run testng\/othervm -Dbabylon.ssa=cytron TestSSA\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSSA.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @run testng\/othervm -Dbabylon.ssa=cytron TestStringConcatTransform\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestStringConcatTransform.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @run testng\/othervm -Dbabylon.ssa=cytron TestTransitiveInvokeModule\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTransitiveInvokeModule.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @run testng\/othervm -Dbabylon.ssa=cytron TestForwardAutoDiff\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/TestForwardAutoDiff.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                branch ^block_0(%1, %2);\n+                branch ^block_1(%2, %1);\n@@ -88,1 +88,1 @@\n-              ^block_0(%3 : int, %4 : int):\n+              ^block_1(%3 : int, %4 : int):\n@@ -90,2 +90,2 @@\n-                %6 : boolean = lt %4 %5;\n-                cbranch %6 ^block_1 ^block_2;\n+                %6 : boolean = lt %3 %5;\n+                cbranch %6 ^block_2 ^block_4;\n@@ -93,3 +93,3 @@\n-              ^block_1:\n-                %7 : int = array.load %0 %4;\n-                %8 : int = add %3 %7;\n+              ^block_2:\n+                %7 : int = array.load %0 %3;\n+                %8 : int = add %4 %7;\n@@ -100,2 +100,2 @@\n-                %10 : int = add %4 %9;\n-                branch ^block_0(%8, %10);\n+                %10 : int = add %3 %9;\n+                branch ^block_1(%10, %8);\n@@ -103,2 +103,2 @@\n-              ^block_2:\n-                return %3;\n+              ^block_4:\n+                return %4;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/TestLoop.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}