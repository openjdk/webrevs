{"files":[{"patch":"@@ -20,1 +20,0 @@\n-import static java.lang.foreign.ValueLayout.*;\n@@ -58,3 +57,0 @@\n-    private static final AddressLayout ADDR_WITH_ADDR = ADDRESS.withTargetLayout(ADDRESS);\n-    private static final AddressLayout ADDR_WITH_STRING = ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));\n-\n@@ -68,1 +64,1 @@\n-        ret = arena.allocate(ADDR_WITH_ADDR);\n+        ret = arena.allocate(C_POINTER);\n@@ -142,2 +138,2 @@\n-            var inputNames = arena.allocate(ADDRESS, inputLen);\n-            var inputs = arena.allocate(ADDRESS, inputLen);\n+            var inputNames = arena.allocate(C_POINTER, inputLen);\n+            var inputs = arena.allocate(C_POINTER, inputLen);\n@@ -147,2 +143,2 @@\n-                    inputNames.setAtIndex(ADDRESS, index, arena.allocateFrom(getInputName(i)));\n-                    inputs.setAtIndex(ADDRESS, index++, inputValues.get(i).get());\n+                    inputNames.setAtIndex(C_POINTER, index, arena.allocateFrom(getInputName(i)));\n+                    inputs.setAtIndex(C_POINTER, index++, inputValues.get(i).get());\n@@ -151,2 +147,2 @@\n-            var outputNames = arena.allocate(ADDRESS, outputLen);\n-            var outputs = arena.allocate(ADDRESS, outputLen);\n+            var outputNames = arena.allocate(C_POINTER, outputLen);\n+            var outputs = arena.allocate(C_POINTER, outputLen);\n@@ -154,2 +150,2 @@\n-                outputNames.setAtIndex(ADDRESS, i, arena.allocateFrom(getOutputName(i)));\n-                outputs.setAtIndex(ADDRESS, i, MemorySegment.NULL);\n+                outputNames.setAtIndex(C_POINTER, i, arena.allocateFrom(getOutputName(i)));\n+                outputs.setAtIndex(C_POINTER, i, MemorySegment.NULL);\n@@ -160,1 +156,1 @@\n-                retArr[i] = outputs.getAtIndex(ADDRESS, i);\n+                retArr[i] = outputs.getAtIndex(C_POINTER, i);\n@@ -173,1 +169,1 @@\n-        var shapeAddr = shape.length == 0 ? MemorySegment.NULL : arena.allocateFrom(JAVA_LONG, shape);\n+        var shapeAddr = shape.length == 0 ? MemorySegment.NULL : arena.allocateFrom(C_LONG_LONG, shape);\n@@ -185,1 +181,1 @@\n-        var shape = arena.allocate(JAVA_LONG, dims);\n+        var shape = arena.allocate(C_LONG_LONG, dims);\n@@ -187,1 +183,1 @@\n-        return shape.toArray(JAVA_LONG);\n+        return shape.toArray(C_LONG_LONG);\n@@ -219,1 +215,2 @@\n-        return ret.get(ADDR_WITH_ADDR, 0);\n+        return ret.get(C_POINTER, 0)\n+                .reinterpret(arena, null);\n@@ -224,1 +221,1 @@\n-        return ret.get(JAVA_INT, 0);\n+        return ret.get(C_INT, 0);\n@@ -229,1 +226,1 @@\n-        return ret.get(JAVA_LONG, 0);\n+        return ret.get(C_LONG_LONG, 0);\n@@ -233,2 +230,2 @@\n-        checkStatus(res);\n-        return ret.get(ADDR_WITH_STRING, 0).getString(0);\n+        return retAddr(res).reinterpret(Long.MAX_VALUE)\n+                .getString(0);\n@@ -240,2 +237,2 @@\n-            if (status.get(JAVA_INT, 0) != 0) {\n-                throw new RuntimeException(status.getString(JAVA_INT.byteSize()));\n+            if (status.get(C_INT, 0) != 0) {\n+                throw new RuntimeException(status.getString(C_INT.byteSize()));\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":21,"deletions":24,"binary":false,"changes":45,"status":"modified"}]}