{"files":[{"patch":"@@ -488,6 +488,1 @@\n-                \/\/ we know jdk.incubator code is there, no need to check\n-                ModuleLayer parent = ModuleLayer.boot();\n-                Configuration cf = parent.configuration()\n-                        .resolve(ModuleFinder.of(), ModuleFinder.ofSystem(), Set.of(\"jdk.incubator.code\"));\n-                ClassLoader scl = ClassLoader.getSystemClassLoader();\n-                ModuleLayer layer = parent.defineModulesWithOneLoader(cf, scl);\n+                ModuleLayer layer = codeLayer();\n@@ -508,0 +503,17 @@\n+        static ModuleLayer codeLayer() {\n+            final ModuleLayer codeLayer;\n+            if (ModuleLayer.boot().findModule(\"jdk.incubator.code\").isPresent()) {\n+                \/\/ we are in an exploded build, so just use the boot layer\n+                return ModuleLayer.boot();\n+            } else if (java.lang.module.ModuleFinder.ofSystem().find(\"jdk.incubator.code\").isPresent()) {\n+                \/\/ the code module is installed, but not in the boot layer, create a new layer which contains it\n+                ModuleLayer parent = ModuleLayer.boot();\n+                Configuration cf = parent.configuration()\n+                        .resolve(ModuleFinder.of(), ModuleFinder.ofSystem(), Set.of(\"jdk.incubator.code\"));\n+                ClassLoader scl = ClassLoader.getSystemClassLoader();\n+                return parent.defineModulesWithOneLoader(cf, scl);\n+            } else {\n+                throw new IllegalStateException(\"jdk.incubator.code module not found\");\n+            }\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1685,6 +1685,3 @@\n-        if (CodeReflectionSupport.CODE_LAYER != null) {\n-            return ServiceLoader.load(CodeReflectionSupport.CODE_LAYER, CodeReflectionTransformer.class)\n-                            .findFirst();\n-        } else {\n-            return Optional.empty();\n-        }\n+        return CodeReflectionSupport.CODE_LAYER != null ?\n+                ServiceLoader.load(CodeReflectionSupport.CODE_LAYER, CodeReflectionTransformer.class).findFirst() :\n+                Optional.empty();\n@@ -1697,2 +1694,5 @@\n-            if (java.lang.module.ModuleFinder.ofSystem().find(\"jdk.incubator.code\").isPresent() &&\n-                    !ModuleLayer.boot().findModule(\"jdk.incubator.code\").isPresent()) {\n+            if (ModuleLayer.boot().findModule(\"jdk.incubator.code\").isPresent()) {\n+                \/\/ we are in an exploded build, so just use the boot layer\n+                CODE_LAYER = ModuleLayer.boot();\n+            } else if (java.lang.module.ModuleFinder.ofSystem().find(\"jdk.incubator.code\").isPresent()) {\n+                \/\/ the code module is installed, but not in the boot layer, create a new layer which contains it\n@@ -1711,1 +1711,1 @@\n-                \/\/ if we run javac in bootstrap mode, there might be no jdk.incubator.code\n+                \/\/ if we run in bootstrap mode, there might be no jdk.incubator.code\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}