{"files":[{"patch":"@@ -91,1 +91,1 @@\n-    private static final String NAME_METHOD_QUOTED = \"quoted\";\n+    private static final String NAME_METHOD_QUOTED = \"__internal_quoted\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -481,0 +481,2 @@\n+     * @apiNote If the Quotable instance is a proxy instance, then the quoted code model is inaccessible and this method\n+     * returns an empty optional.\n@@ -491,1 +493,1 @@\n-            method = oq.getClass().getMethod(\"quoted\");\n+            method = oq.getClass().getMethod(\"__internal_quoted\");\n@@ -493,1 +495,1 @@\n-            throw new RuntimeException(e);\n+            return Optional.empty();\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -500,1 +500,1 @@\n-                                    return quoted();\n+                                    return __internal_quoted();\n@@ -507,1 +507,1 @@\n-                            public Quoted quoted() {\n+                            public Quoted __internal_quoted() {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+import jdk.incubator.code.CodeReflection;\n@@ -2,0 +3,1 @@\n+import jdk.incubator.code.interpreter.Interpreter;\n@@ -6,0 +8,3 @@\n+\n+import java.lang.invoke.MethodHandles;\n+import java.util.function.IntSupplier;\n@@ -36,0 +41,18 @@\n+\n+    public interface QuotableIntSupplier extends IntSupplier, Quotable {}\n+    @CodeReflection\n+    static Quotable q() {\n+        QuotableIntSupplier r = () -> 8;\n+        return r;\n+    }\n+\n+    @Test\n+    void testMultiThreadsViaInterpreter() throws NoSuchMethodException {\n+        var qm = this.getClass().getDeclaredMethod(\"q\");\n+        var q = Op.ofMethod(qm).get();\n+        Quotable quotable = (Quotable) Interpreter.invoke(MethodHandles.lookup(), q);\n+        Object[] quotedObjects = IntStream.range(0, 1024).parallel().mapToObj(__ -> Op.ofQuotable(quotable).get()).toArray();\n+        for (int i = 1; i < quotedObjects.length; i++) {\n+            Assert.assertSame(quotedObjects[i], quotedObjects[i - 1]);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedSameInstanceTest.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}