{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.lang.classfile.FieldBuilder;\n@@ -44,1 +43,0 @@\n-import java.lang.constant.DynamicConstantDesc;\n@@ -52,2 +50,0 @@\n-import java.util.Optional;\n-import java.util.ServiceLoader;\n@@ -61,1 +57,1 @@\n-import java.lang.classfile.constantpool.MethodRefEntry;\n+\n@@ -65,2 +61,0 @@\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.NESTMATE;\n-import static java.lang.invoke.MethodHandles.Lookup.ClassOption.STRONG;\n@@ -371,1 +365,1 @@\n-                    generateQuotableMethod(clb);\n+                    generateQuotedMethod(clb);\n@@ -580,1 +574,1 @@\n-     * Generate a writeReplace method that supports serialization\n+    * Generate method #quoted()\n@@ -582,1 +576,1 @@\n-    private void generateQuotableMethod(ClassBuilder clb) {\n+    private void generateQuotedMethod(ClassBuilder clb) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -882,1 +882,1 @@\n-                MethodSymbol opMethodSym = tree.codeModel;\n+                MethodSymbol opMethodSym = (MethodSymbol)tree.codeModel;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.incubator.code.internal.Quotable2;\n@@ -51,0 +52,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -475,0 +477,37 @@\n+    \/**\n+     * Returns the code model of the Quotable passed in.\n+     * @param q the Quotable we want to get its code model.\n+     * @return the code model of the Quotable passed in.\n+     * @since 99\n+     *\/\n+    public static Optional<Quoted> ofQuotable(Quotable q) {\n+        \/\/ Quotable is a marker interface with no method\n+        \/\/ the code here, expect class of object q to have the method: Quoted quoted()\n+        \/\/ for lambda objects are created through LambdaMetaFactory, we know that their classes has the method\n+        \/\/ for lambda objects created via interpreter, the proxy class implements Quotable2\n+        \/\/ so the proxy class has the method\n+        \/\/ but it's in a package that's not exported to this module\n+        \/\/ so trying to do: method.setAccessible(true), will result in the error:\n+        \/\/ module jdk.proxy2 does not \"exports com.sun.proxy.jdk.proxy2\" to module jdk.incubator.code\n+        \/\/ that's why we do it differently by checking if q is instance of Quotable2\n+\n+        \/\/ also note that lambda classes created via LambdaMetaFactory, can't access Quotable2 because it's not exported\n+\n+        if (q instanceof Quotable2 q2) {\n+            return Optional.of(q2.quoted());\n+        }\n+        Method method;\n+        try {\n+            method = q.getClass().getMethod(\"quoted\");\n+        } catch (NoSuchMethodException e) {\n+            throw new RuntimeException(e);\n+        }\n+        method.setAccessible(true);\n+        Quoted quoted;\n+        try {\n+            quoted = (Quoted) method.invoke(q);\n+        } catch (InvocationTargetException | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return Optional.of(quoted);\n+    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * a {@link Quoted} object using {@link #quoted()}, which returns the intermediate\n+ * a {@link Quoted} object using {@link Op#ofQuotable(Quotable)}, which returns the intermediate\n@@ -34,3 +34,0 @@\n-    default Quoted quoted() {\n-        throw new UnsupportedOperationException();\n-    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quotable.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,8 @@\n+package jdk.incubator.code.internal;\n+\n+import jdk.incubator.code.Quotable;\n+import jdk.incubator.code.Quoted;\n+\n+public interface Quotable2 extends Quotable {\n+    Quoted quoted();\n+}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/Quotable2.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.code.internal.Quotable2;\n@@ -490,1 +491,1 @@\n-            \/\/ If a quotable lambda proxy again to implement Quotable\n+            \/\/ If a quotable lambda proxy again to add method Quoted quoted()\n@@ -492,1 +493,1 @@\n-                return Proxy.newProxyInstance(l.lookupClass().getClassLoader(), new Class<?>[]{fi},\n+                return Proxy.newProxyInstance(l.lookupClass().getClassLoader(), new Class<?>[]{fi, Quotable2.class},\n@@ -494,2 +495,1 @@\n-                            if (method.getDeclaringClass() == Quotable.class) {\n-                                \/\/ Implement Quotable::quoted\n+                            if (method.getDeclaringClass() == Quotable2.class) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        return SSA.transform((LambdaOp) iboq.quoted().op());\n+        return SSA.transform((LambdaOp) Op.ofQuotable(iboq).get().op());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBuild.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-        Op qop = quotable.quoted().op();\n+        Op qop = Op.ofQuotable(quotable).get().op();\n@@ -183,1 +183,1 @@\n-            Quoted q = op.quoted();\n+            Quoted q = Op.ofQuotable(op).get();\n@@ -201,1 +201,1 @@\n-            Quoted q = op.quoted();\n+            Quoted q = Op.ofQuotable(op).get();\n@@ -238,1 +238,1 @@\n-        Quoted quoted = q.quoted();\n+        Quoted quoted = Op.ofQuotable(q).get();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLambdaOps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -389,3 +389,3 @@\n-        Assert.assertNotNull(f.quoted());\n-        Assert.assertNotNull(f.quoted().op());\n-        Assert.assertTrue(f.quoted().op() instanceof CoreOp.LambdaOp);\n+        Assert.assertNotNull(Op.ofQuotable(f).get());\n+        Assert.assertNotNull(Op.ofQuotable(f).get().op());\n+        Assert.assertTrue(Op.ofQuotable(f).get().op() instanceof CoreOp.LambdaOp);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        CoreOp.Var<Integer> capture = (CoreOp.Var<Integer>) s.quoted().capturedValues().values().iterator().next();\n+        CoreOp.Var<Integer> capture = (CoreOp.Var<Integer>) Op.ofQuotable(s).get().capturedValues().values().iterator().next();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestNestedCapturingLambda.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        LambdaOp l = (LambdaOp) f.quoted().op();\n+        LambdaOp l = (LambdaOp) Op.ofQuotable(f).get().op();\n@@ -55,1 +55,1 @@\n-        LambdaOp l = (LambdaOp) f.quoted().op();\n+        LambdaOp l = (LambdaOp) Op.ofQuotable(f).get().op();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/linq\/Queryable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-                if (!(quotedLambda.quoted().op() instanceof LambdaOp lambdaOp)) {\n+                if (!(Op.ofQuotable(quotedLambda).get().op() instanceof LambdaOp lambdaOp)) {\n@@ -77,1 +77,1 @@\n-                if (!(quotedLambda.quoted().capturedValues().isEmpty())) {\n+                if (!(Op.ofQuotable(quotedLambda).get().capturedValues().isEmpty())) {\n@@ -200,1 +200,1 @@\n-            if (!(quotableConsumer.quoted().op() instanceof LambdaOp consumer)) {\n+            if (!(Op.ofQuotable(quotableConsumer).get().op() instanceof LambdaOp consumer)) {\n@@ -203,1 +203,1 @@\n-            if (!(quotableConsumer.quoted().capturedValues().isEmpty())) {\n+            if (!(Op.ofQuotable(quotableConsumer).get().capturedValues().isEmpty())) {\n@@ -227,1 +227,1 @@\n-            if (!(quotableSupplier.quoted().op() instanceof LambdaOp supplier)) {\n+            if (!(Op.ofQuotable(quotableSupplier).get().op() instanceof LambdaOp supplier)) {\n@@ -230,1 +230,1 @@\n-            if (!(quotableSupplier.quoted().capturedValues().isEmpty())) {\n+            if (!(Op.ofQuotable(quotableSupplier).get().capturedValues().isEmpty())) {\n@@ -233,1 +233,1 @@\n-            if (!(quotableAccumulator.quoted().op() instanceof LambdaOp accumulator)) {\n+            if (!(Op.ofQuotable(quotableAccumulator).get().op() instanceof LambdaOp accumulator)) {\n@@ -236,1 +236,1 @@\n-            if (!(quotableAccumulator.quoted().capturedValues().isEmpty())) {\n+            if (!(Op.ofQuotable(quotableAccumulator).get().capturedValues().isEmpty())) {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/StreamFuserUsingQuotable.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-            String found = canonicalizeModel(field, getModelOfQuotedOp(quotable.quoted()));\n+            String found = canonicalizeModel(field, getModelOfQuotedOp(Op.ofQuotable(quotable).get()));\n","filename":"test\/langtools\/tools\/javac\/reflect\/CodeReflectionTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+import jdk.incubator.code.Op;\n@@ -10,1 +11,1 @@\n- * @summary test that invoking Quotable#quoted returns the same instance\n+ * @summary test that invoking Op#ofQuotable returns the same instance\n@@ -22,1 +23,1 @@\n-        Assert.assertSame(q1.quoted(), q1.quoted());\n+        Assert.assertSame(Op.ofQuotable(q1).get(), Op.ofQuotable(q1).get());\n@@ -30,1 +31,1 @@\n-        Object[] quotedObjects = IntStream.range(0, 1024).parallel().mapToObj(__ -> q2.quoted()).toArray();\n+        Object[] quotedObjects = IntStream.range(0, 1024).parallel().mapToObj(__ -> Op.ofQuotable(q2).get()).toArray();\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedSameInstanceTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        Quoted quoted = quotable.quoted();\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n@@ -70,1 +70,1 @@\n-        Quoted quoted = quotable.quoted();\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n@@ -97,1 +97,1 @@\n-        Quoted quoted = quotable.quoted();\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n@@ -123,1 +123,1 @@\n-        Quoted quoted = quotable.quoted();\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n@@ -145,1 +145,1 @@\n-        Quoted quoted = quotable.quoted();\n+        Quoted quoted = Op.ofQuotable(quotable).get();\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuotable.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}