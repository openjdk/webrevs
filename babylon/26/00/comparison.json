{"files":[{"patch":"@@ -61,0 +61,40 @@\n+\n+        \/**\n+         * Returns the invokable operation associated with this block parameter.\n+         * <p>\n+         * If this block parameter is declared in an entry block and that\n+         * block's ancestor operation (the parent of the entry block's parent body)\n+         * is an instance of {@link Op.Invokable}, then that instance is returned,\n+         * otherwise {@code null} is returned.\n+         * <p>\n+         * A non-{@code null} result implies this parameter is an invokable parameter.\n+         *\n+         * @apiNote\n+         * This method may be used to pattern match on the returned result:\n+         * {@snippet lang = \"java\" :\n+         *     if (p.invokableOperation() instanceof CoreOps.FuncOp f) {\n+         *         assert f.parameters().indexOf(p) == p.index(); \/\/ @link substring=\"parameters()\" target=\"Op.Invokable#parameters()\"\n+         *     }\n+         * }\n+         *\n+         * @return the invokable operation, otherwise {@code null} if the operation\n+         * is not an instance of {@link Op.Invokable}.\n+         * @see Op.Invokable#parameters()\n+         *\/\n+        public Op.Invokable invokableOperation() {\n+            if (declaringBlock().isEntryBlock() &&\n+                    declaringBlock().parentBody().parentOp() instanceof Op.Invokable o) {\n+                return o;\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        \/**\n+         * {@return the index of this block parameter in the parameters of its declaring block.}\n+         * @see Value#declaringBlock()\n+         * @see Block#parameters()\n+         *\/\n+        public int index() {\n+            return declaringBlock().parameters().indexOf(this);\n+        }\n@@ -152,1 +192,1 @@\n-     * {@snippet lang = \"java\"\n+     * {@snippet lang = \"java\" :\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Block.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-         * @return the body of the invokable operation.\n+         * {@return the body of the invokable operation.}\n@@ -86,1 +86,1 @@\n-         * @return the function type describing the invokable operation's parameter types and return type.\n+         * {@return the function type describing the invokable operation's parameter types and return type.}\n@@ -89,0 +89,7 @@\n+\n+        \/**\n+         * {@return the entry block parameters of this operation's body}\n+         *\/\n+        default List<Block.Parameter> parameters() {\n+            return body().entryBlock().parameters();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng TestBlockParameters\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.code.Block;\n+import java.lang.reflect.code.CodeElement;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.type.FunctionType;\n+import java.lang.reflect.code.type.JavaType;\n+\n+import static java.lang.reflect.code.op.CoreOps.*;\n+import static java.lang.reflect.code.type.FunctionType.functionType;\n+import static java.lang.reflect.code.type.JavaType.INT;\n+\n+public class TestBlockParameters {\n+    static FuncOp m() {\n+        return func(\"f\", functionType(INT, INT, INT))\n+                .body(fe -> {\n+                    LambdaOp lop = lambda(fe.parentBody(), functionType(INT, INT), JavaType.type(FunctionType.class))\n+                            .body(le -> {\n+                                le.op(_return(le.parameters().get(0)));\n+                            });\n+                    fe.op(lop);\n+                    Block.Builder b = fe.block(INT, INT);\n+                    fe.op(branch(b.successor(fe.parameters())));\n+\n+                    b.op(_return(b.parameters().get(0)));\n+                });\n+    }\n+\n+    @Test\n+    public void t() {\n+        FuncOp m = m();\n+        m.traverse(null, CodeElement.blockVisitor((_, b) -> {\n+            for (Block.Parameter p : b.parameters()) {\n+                testBlockParameter(p);\n+            }\n+\n+            return null;\n+        }));\n+    }\n+\n+    void testBlockParameter(Block.Parameter p) {\n+        Assert.assertEquals(p.index(), p.declaringBlock().parameters().indexOf(p));\n+\n+        if (p.invokableOperation() instanceof Op.Invokable iop) {\n+            Assert.assertTrue(p.declaringBlock().isEntryBlock());\n+            Assert.assertEquals(p.index(), iop.parameters().indexOf(p));\n+        } else {\n+            \/\/ There are no non-invokable operations with bodies in the model\n+            Assert.assertFalse(p.declaringBlock().isEntryBlock());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockParameters.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}