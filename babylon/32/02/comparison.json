{"files":[{"patch":"@@ -799,0 +799,49 @@\n+    \/**\n+     * The assertion operation. Supporting assertions in statement form.\n+     *\/\n+    @OpDeclaration(AssertOp.NAME)\n+    public static final class AssertOp extends OpWithDefinition implements Op.Nested {\n+        public static final String NAME = \"assert\";\n+        public final List<Body> bodies;\n+\n+        public AssertOp(OpDefinition def) {\n+            super(def);\n+            var bodies = def.bodyDefinitions().stream().map(b -> b.build(this)).toList();\n+            checkBodies(bodies);\n+            this.bodies = bodies;\n+        }\n+\n+        public AssertOp(List<Body.Builder> bodies) {\n+            super(NAME, List.of());\n+            checkBodies(bodies);\n+            this.bodies = bodies.stream().map(b -> b.build(this)).toList();\n+        }\n+\n+        AssertOp(AssertOp that, CopyContext cc, OpTransformer ot) {\n+\n+            super(that, cc);\n+            this.bodies = that.bodies.stream().map(b -> b.transform(cc, ot).build(this)).toList();\n+        }\n+\n+        private void checkBodies(List<?> bodies) {\n+            if (bodies.size() != 1 && bodies.size() != 2) {\n+                throw new IllegalArgumentException(\"Assert must have one or two bodies.\");\n+            }\n+        }\n+\n+        @Override\n+        public Op transform(CopyContext cc, OpTransformer ot) {\n+            return new AssertOp(this, cc, ot);\n+        }\n+\n+        @Override\n+        public TypeElement resultType() {\n+            return JavaType.VOID;\n+        }\n+\n+        @Override\n+        public List<Body> bodies() {\n+            return this.bodies;\n+        }\n+    }\n+\n@@ -3106,0 +3155,9 @@\n+    \/**\n+     * Creates an assert operation.\n+     * @param bodies the nested bodies\n+     * @return the assert operation\n+     *\/\n+    public static AssertOp _assert(List<Body.Builder> bodies) {\n+        return new AssertOp(bodies);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+import com.sun.tools.javac.tree.JCTree.JCAssert;\n@@ -443,0 +444,1 @@\n+                        Tag.ASSERT,\n@@ -1818,0 +1820,37 @@\n+        @Override\n+        public void visitAssert(JCAssert tree) {\n+            \/\/ assert <cond:body1> [detail:body2]\n+\n+            List<Body.Builder> bodies = new ArrayList<>();\n+            JCTree.JCExpression cond = TreeInfo.skipParens(tree.cond);\n+\n+            \/\/ Push condition\n+            pushBody(cond,\n+                    FunctionType.functionType(JavaType.BOOLEAN));\n+            Value condVal = toValue(cond);\n+\n+            \/\/ Yield the boolean result of the condition\n+            append(CoreOps._yield(condVal));\n+            bodies.add(stack.body);\n+\n+            \/\/ Pop condition\n+            popBody();\n+\n+            if (tree.detail != null) {\n+                JCTree.JCExpression detail = TreeInfo.skipParens(tree.detail);\n+\n+                pushBody(detail,\n+                         FunctionType.functionType(JavaType.J_L_STRING));\n+                Value detailVal = toValue(detail);\n+\n+                append(CoreOps._yield(detailVal));\n+                bodies.add(stack.body);\n+\n+                \/\/Pop detail\n+                popBody();\n+            }\n+\n+            result = append(CoreOps._assert(bodies));\n+\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.runtime.CodeReflection;\n+\n+\/*\n+ * @test\n+ * @summary Smoke test for code reflection with array access.\n+ * @build AssertTest\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester AssertTest\n+ *\/\n+public class AssertTest {\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+              func @\"assertTest\" (%0 : int)void -> {\n+                  %1 : Var<int> = var %0 @\"i\";\n+                  assert\n+                      ()boolean -> {\n+                          %2 : int = var.load %1;\n+                          %3 : int = constant @\"1\";\n+                          %4 : boolean = eq %2 %3;\n+                          yield %4;\n+                      }\n+                      ()java.lang.String -> {\n+                          %5 : java.lang.String = constant @\"i does not equal 1\";\n+                          yield %5;\n+                      };\n+                  return;\n+              };\n+            \"\"\")\n+    public static void assertTest(int i) {\n+        assert (i == 1) : \"i does not equal 1\";\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"assertTest2\" (%0 : int)void -> {\n+                  %1 : Var<int> = var %0 @\"i\";\n+                  assert ()boolean -> {\n+                      %2 : int = var.load %1;\n+                      %3 : int = constant @\"1\";\n+                      %4 : boolean = eq %2 %3;\n+                      yield %4;\n+                  };\n+                  return;\n+              };\n+            \"\"\")\n+    public static void assertTest2(int i) {\n+        assert (i == 1);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/AssertTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}