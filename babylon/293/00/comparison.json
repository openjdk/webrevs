{"files":[{"patch":"@@ -70,22 +70,20 @@\n-    var hatDir = Dir.current();\/\/Dir.ofExisting(\"\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\");\n-        final var hatCoreDir = hatDir.existingDir(\"hat\");\n-        final var backendsDir = hatDir.existingDir(\"backends\");\n-        final var examplesDir = hatDir.existingDir(\"examples\");\n-        final var stageDir = hatDir.buildDir(\"stage\").create();\n-        final var repoDir = stageDir.repoDir(\"repo\").create();\n-        final var jextractDir = stageDir.buildDir(\"jextract\").create();\n-        final var buildDir = BuildDir.of(hatDir.path(\"build\")).create();\n-        final var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n-        \/\/ var jextract1 = Bldr.Jextract.of(fromPATH(\"jextract\").orElseThrow(()-> new RuntimeException(\"Can't locate jextract\")));\n-        final var jextract = Jextract.of(Path.of(\"\/Users\/garyfrost\/jextract-22\/bin\/jextract\"));\n-        final var extractedOpenCLJar = buildDir.jarFile(\"jextracted-opencl.jar\");\n-        final var extractedOpenGLJar = buildDir.jarFile(\"jextracted-opengl.jar\");\n-        final var verbose = false;\n-\n-\n-    Capabilities.Capability opencl = Capabilities.OpenCL.of();\n-    Capabilities.Capability opengl = Capabilities.OpenGL.of();\n-    Capabilities.Capability cuda = Capabilities.CUDA.of();\n-    Capabilities.Capability hip = Capabilities.HIP.of();\n-    Capabilities capabilities = Capabilities.of(opencl, opengl, cuda, hip);\n-    CMakeProbe cmakeProbe = new CMakeProbe(buildDir, capabilities);\n+    var hatDir = Dir.current();\n+    var hatCoreDir = hatDir.existingDir(\"hat\");\n+    var backendsDir = hatDir.existingDir(\"backends\");\n+    var examplesDir = hatDir.existingDir(\"examples\");\n+    var stageDir = hatDir.buildDir(\"stage\").create();\n+    var repoDir = stageDir.repoDir(\"repo\").create();\n+    var jextractDir = stageDir.buildDir(\"jextract\").create();\n+    var buildDir = BuildDir.of(hatDir.path(\"build\")).create();\n+    var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+    var jextract = Jextract.of(fromPATH(\"jextract\").orElseThrow(()-> new RuntimeException(\"Can't locate jextract\")));\n+    var extractedOpenCLJar = buildDir.jarFile(\"jextracted-opencl.jar\");\n+    var extractedOpenGLJar = buildDir.jarFile(\"jextracted-opengl.jar\");\n+    var verbose = false;\n+\n+    var opencl = Capabilities.OpenCL.of();\n+    var opengl = Capabilities.OpenGL.of();\n+    var cuda = Capabilities.CUDA.of();\n+    var hip = Capabilities.HIP.of();\n+    var capabilities= Capabilities.of(opencl, opengl, cuda, hip);\n+    var cmakeProbe = new CMakeProbe(buildDir, capabilities);\n@@ -168,4 +166,1 @@\n-            .subDirs(backendDir ->\n-                    !backendDir.matches(\"^.*(spirv|hip|shared|target|.idea)$\") \/\/&&\n-                           \/\/ capabilities.capabilityIsAvailable(backendDir.fileName())\n-            )\n+            .subDirs(backendDir -> !backendDir.matches(\"^.*(spirv|hip|shared|target|.idea)$\"))\n@@ -202,1 +197,2 @@\n-        examplesDir.subDirs(exampleDir -> exampleDir.matches(\"^.*(nbody)$\"))\n+        examplesDir\n+            .subDirs(exampleDir -> exampleDir.matches(\"^.*(nbody)$\"))\n","filename":"hat\/bld","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-            return result.create(biConsumer);\n+            return result.create(biConsumer).jarFile;\n@@ -492,1 +492,1 @@\n-            return result.create(consumer);\n+            return result.create(consumer).jarFile;\n@@ -569,1 +569,1 @@\n-        public JarFile create(BiConsumer<JarBuilder, JarFile> jarBuilderConsumer) {\n+        public JarResult create(BiConsumer<JarBuilder, JarFile> jarBuilderConsumer) {\n@@ -576,1 +576,1 @@\n-        public JarFile create(Consumer<JarBuilder> jarBuilderConsumer) {\n+        public JarResult create(Consumer<JarBuilder> jarBuilderConsumer) {\n@@ -764,0 +764,3 @@\n+    public abstract static class Result{\n+\n+    }\n@@ -813,1 +816,3 @@\n-    public abstract static class OptsBuilder<T extends OptsBuilder<T>> extends Builder<T> {\n+    public static class Strings {\n+        public List<String> strings = new ArrayList<>();\n+        Strings(){\n@@ -815,1 +820,7 @@\n-        public List<String> opts = new ArrayList<>();\n+        }\n+        Strings(Strings strings){\n+            add(strings);\n+        }\n+        Strings(List<String> strings){\n+            add(strings);\n+        }\n@@ -817,3 +828,2 @@\n-        public T opts(List<String> opts) {\n-            this.opts.addAll(opts);\n-            return self();\n+        Strings(String ... strings){\n+            add(strings);\n@@ -822,3 +832,19 @@\n-        public T opts(String... opts) {\n-            opts(Arrays.asList(opts));\n-            return self();\n+        public Strings add(List<String> strings) {\n+            this.strings.addAll(strings);\n+            return this;\n+        }\n+\n+        public Strings add(String... strings) {\n+            add(Arrays.asList(strings));\n+            return this;\n+        }\n+\n+        public Strings add(Strings strings) {\n+            add(strings.strings);\n+            return this;\n+        }\n+\n+        public String spaceSeperated() {\n+            StringBuilder stringBuilder = new StringBuilder();\n+            strings.forEach(opt->stringBuilder.append(stringBuilder.isEmpty()?\"\":\" \").append(opt));\n+            return stringBuilder.toString();\n@@ -826,0 +852,1 @@\n+    }\n@@ -827,0 +854,6 @@\n+    public abstract static class OptsBuilder<T extends OptsBuilder<T>> extends Builder<T> {\n+        public Strings opts = new Strings();\n+        public T opts(OptsBuilder<?> optsBuilder) {\n+            opts.add(optsBuilder.opts);\n+            return self();\n+        }\n@@ -832,2 +865,3 @@\n-        public T opts(JavaOpts<?> javaOpts) {\n-            return opts(javaOpts.opts);\n+        public T opts(String... opts) {\n+            this.opts.add(opts);\n+            return self();\n@@ -846,1 +880,2 @@\n-            return opts(\"--add-exports=\" + fromModule + \"\/\" + pack + \"=\" + toModule);\n+             opts.add(\"--add-exports=\" + fromModule + \"\/\" + pack + \"=\" + toModule);\n+             return self();\n@@ -850,1 +885,1 @@\n-            List.of(modules).forEach(module -> opts(\"--add-modules=\" + module));\n+            List.of(modules).forEach(module -> opts.add(\"--add-modules=\" + module));\n@@ -860,1 +895,2 @@\n-            return opts(\"--enable-preview\");\n+            opts.add(\"--enable-preview\");\n+            return self();\n@@ -883,1 +919,2 @@\n-            return opts(\"--source\", Integer.toString(version));\n+             opts.add(\"--source\", Integer.toString(version));\n+             return self();\n@@ -910,2 +947,14 @@\n-    public static JavacBuilder javac(JavacBuilder javacBuilder) {\n-        List<String> opts = new ArrayList<>(javacBuilder.opts);\n+    public static class JavacResult{\n+        JavacBuilder builder;\n+        Strings opts = new Strings();\n+        List<JavaFileObject> classes = new ArrayList<>();\n+        ClassDir classDir;\n+        JavacResult(JavacBuilder builder) {\n+            this.builder = builder;\n+            opts.add(builder.opts);\n+        }\n+    }\n+\n+    public static JavacResult javac(JavacBuilder javacBuilder) {\n+        JavacResult result = new JavacResult(javacBuilder);\n+\n@@ -913,3 +962,2 @@\n-            ClassDir classDir = javacBuilder.classDir==null?ClassDir.temp():javacBuilder.classDir;\n-            javacBuilder.classDir = classDir;\n-            opts.addAll(List.of(\"-d\", classDir.path().toString()));\n+            result.classDir = javacBuilder.classDir==null?ClassDir.temp():javacBuilder.classDir;\n+            result.opts.add(\"-d\", result.classDir.path().toString());\n@@ -918,1 +966,1 @@\n-                opts.addAll(List.of(\"--class-path\", javacBuilder.classPath.charSeparated()));\n+                result.opts.add(\"--class-path\", javacBuilder.classPath.charSeparated());\n@@ -921,1 +969,1 @@\n-            opts.addAll(List.of(\"--source-path\", javacBuilder.sourcePath.charSeparated()));\n+            result.opts.add(\"--source-path\", javacBuilder.sourcePath.charSeparated());\n@@ -941,3 +989,1 @@\n-                StringBuilder stringBuilder = new StringBuilder();\n-                opts.forEach(opt->stringBuilder.append(stringBuilder.isEmpty()?\"\":\" \").append(opt));\n-                println(\"javac \"+stringBuilder);\n+                println(\"javac \"+result.opts.spaceSeperated());\n@@ -945,1 +991,1 @@\n-            JavaCompiler.CompilationTask compilationTask =\n+             JavaCompiler.CompilationTask compilationTask =\n@@ -950,1 +996,1 @@\n-                            opts,\n+                            result.opts.strings,\n@@ -953,2 +999,4 @@\n-            ((com.sun.source.util.JavacTask) compilationTask).generate();\n-            return javacBuilder;\n+            ((com.sun.source.util.JavacTask) compilationTask).generate().forEach(javaFileObject -> {\n+                result.classes.add(javaFileObject);\n+            });\n+            return result;\n@@ -960,1 +1008,1 @@\n-    public static JavacBuilder javac(Consumer<JavacBuilder> javacBuilderConsumer) {\n+    public static JavacResult javac(Consumer<JavacBuilder> javacBuilderConsumer) {\n@@ -970,1 +1018,1 @@\n-        public List<String> args = new ArrayList<>();\n+        public Strings args = new Strings();\n@@ -973,1 +1021,2 @@\n-            return opts(\"--enable-native-access=\" + module);\n+             opts.add(\"--enable-native-access=\" + module);\n+             return self();\n@@ -977,1 +1026,1 @@\n-            this.args.addAll(args);\n+            this.args.add(args);\n@@ -1012,1 +1061,1 @@\n-        List<String> execOpts = new ArrayList<>();\n+        Strings execOpts = new Strings();\n@@ -1017,1 +1066,1 @@\n-        execOpts.addAll(javaBuilder.opts);\n+        execOpts.add(javaBuilder.opts);\n@@ -1019,1 +1068,1 @@\n-            execOpts.addAll(List.of(\"--class-path\", javaBuilder.classPath.charSeparated()));\n+            execOpts.add(\"--class-path\", javaBuilder.classPath.charSeparated());\n@@ -1025,1 +1074,1 @@\n-        execOpts.addAll(javaBuilder.args);\n+        execOpts.add(javaBuilder.args);\n@@ -1028,1 +1077,1 @@\n-            var processBuilder = new ProcessBuilder().inheritIO().command(execOpts);\n+            var processBuilder = new ProcessBuilder().inheritIO().command(execOpts.strings);\n@@ -1220,1 +1269,1 @@\n-        public JavacBuilder javacBuilder;\n+        public JavacResult javacResult;\n@@ -1229,1 +1278,1 @@\n-            this.javacBuilder = Bldr.javac(javacBuilder);\n+            this.javacResult = Bldr.javac(javacBuilder);\n@@ -1232,2 +1281,2 @@\n-                            ? DirPath.of().add(this.javacBuilder.classDir)\n-                            : this.dirList.add(this.javacBuilder.classDir);\n+                            ? DirPath.of().add(this.javacResult.classDir)\n+                            : this.dirList.add(this.javacResult.classDir);\n@@ -1238,3 +1287,3 @@\n-            this.javacBuilder = new JavacBuilder();\n-            javacBuilderConsumer.accept(this.javacBuilder);\n-            return javac(this.javacBuilder);\n+            JavacBuilder javacBuilder= new JavacBuilder();\n+            javacBuilderConsumer.accept(javacBuilder);\n+            return javac(javacBuilder);\n@@ -1249,1 +1298,19 @@\n-    public static JarFile jar(JarBuilder jarBuilder) {\n+    public static class JarResult extends Result implements ClassPathEntryProvider{\n+        JarBuilder jarBuilder;\n+        Strings opts = new Strings();\n+        List<RootDirAndSubPath> pathsToJar = new ArrayList<>();\n+        List<Path> paths = new ArrayList<>();\n+        JarFile jarFile;\n+        public JarResult(JarBuilder jarBuilder) {\n+            this.jarBuilder = jarBuilder;\n+            this.jarFile = jarBuilder.jar;\n+        }\n+\n+        @Override\n+        public List<ClassPathEntry> classPathEntries() {\n+            return List.of(jarFile);\n+        }\n+    }\n+\n+    public static JarResult jar(JarBuilder jarBuilder) {\n+        JarResult result = new JarResult(jarBuilder);\n@@ -1251,1 +1318,1 @@\n-            List<RootDirAndSubPath> pathsToJar = new ArrayList<>();\n+\n@@ -1257,2 +1324,2 @@\n-                                    .forEach(pathsToJar::add));\n-            pathsToJar.stream()\n+                                    .forEach(result.pathsToJar::add));\n+            result.pathsToJar.stream()\n@@ -1263,0 +1330,1 @@\n+                                    result.paths.add(rootAndPath.path);\n@@ -1280,1 +1348,1 @@\n-            return jarBuilder.jar;\n+            return result;\n@@ -1286,1 +1354,1 @@\n-    public static JarFile jar(Consumer<JarBuilder> jarBuilderConsumer) {\n+    public static JarResult jar(Consumer<JarBuilder> jarBuilderConsumer) {\n","filename":"hat\/bldr\/Bldr.java","additions":122,"deletions":54,"binary":false,"changes":176,"status":"modified"}]}