{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.util.stream.Gatherer;\n+import java.util.stream.Stream;\n@@ -47,0 +49,19 @@\n+    \/**\n+     * {@return a stream of code elements sorted topologically in pre-order traversal.}\n+     *\/\n+    default Stream<CodeElement<?, ?>> elements() {\n+        return Stream.of(Void.class).gather(() -> (_, _, downstream) -> traversePreOrder(downstream));\n+    }\n+\n+    private boolean traversePreOrder(Gatherer.Downstream<? super CodeElement<?, ?>> v) {\n+        if (!v.push(this)) {\n+            return false;\n+        }\n+        for (C c : children()) {\n+            if (!((CodeElement<?, ?>) c).traversePreOrder(v)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/CodeElement.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @run testng TestTraverse\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.CodeElement;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.analysis.SSA;\n+import java.lang.reflect.code.op.CoreOps;\n+import java.lang.runtime.CodeReflection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class TestTraverse {\n+\n+    @CodeReflection\n+    private static int f(String s, int i, List<Object> acc) {\n+        char c = s.charAt(i);\n+        int d = (c - '0');\n+        int n = s.length();\n+        while (++i < n) {\n+            c = s.charAt(i);\n+            if (c >= '0' && c <= '9') {\n+                d = d * 10 + (c - '0');\n+                continue;\n+            }\n+            break;\n+        }\n+        acc.add(d);\n+        return i;\n+    }\n+\n+    @Test\n+    public void test() {\n+        CoreOps.FuncOp f = getFuncOp(\"f\");\n+        testTraverse(f);\n+\n+        f = f.transform((b, o) -> {\n+            if (o instanceof Op.Lowerable l) {\n+                return l.lower(b);\n+            } else {\n+                b.op(o);\n+                return b;\n+            }\n+        });\n+        testTraverse(f);\n+\n+        f = SSA.transform(f);\n+        testTraverse(f);\n+    }\n+\n+    void testTraverse(Op op) {\n+        List<CodeElement<?, ?>> tl = op.traverse(new ArrayList<>(), (l, e) -> {\n+            l.add(e);\n+            return l;\n+        });\n+        Assert.assertEquals(op.elements().toList(), tl);\n+\n+        Assert.assertEquals(op.elements().limit(2).toList(), tl.subList(0, 2));\n+    }\n+\n+    static CoreOps.FuncOp getFuncOp(String name) {\n+        Optional<Method> om = Stream.of(TestTraverse.class.getDeclaredMethods())\n+                .filter(m -> m.getName().equals(name))\n+                .findFirst();\n+\n+        Method m = om.get();\n+        return m.getCodeModel().get();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTraverse.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}