{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import java.awt.Dimension;\n@@ -51,0 +52,1 @@\n+import java.awt.Point;\n@@ -69,5 +71,1 @@\n-\n-    int mDownX;\n-    int mDownY;\n-    float mDownXOffset;\n-    float mDownYOffset;\n+    Point mDown;\n@@ -101,4 +99,1 @@\n-            mDownX = e.getX();\n-            mDownY = e.getY();\n-            mDownXOffset = xOffset;\n-            mDownYOffset = yOffset;\n+            mDown = e.getPoint();\n@@ -122,2 +117,2 @@\n-            int dx = e.getX() - mDownX;\n-            int dy = e.getY() - mDownY;\n+            Point rightButonPoint = e.getPoint();\n+            Dimension dragDelta = new Dimension(rightButonPoint.x - mDown.x, rightButonPoint.y - mDown.y);\n@@ -126,8 +121,7 @@\n-                int sw = getWidth();\n-                int sh = getHeight();\n-                int iw = image.getWidth();\n-                int ih = image.getHeight();\n-                float scale = zoom * Math.min(sw \/ (float) iw, sh \/ (float) ih);\n-                xOffset = mDownXOffset + 2 * (dx \/ (sw - scale * iw));\n-                yOffset = mDownYOffset + 2 * (dy \/ (sh - scale * ih));\n-\n+                Dimension displaySize = getSize();\n+                Dimension imageSize = new Dimension( image.getWidth(),image.getHeight());\n+                float scale = zoom *\n+                        Math.min(displaySize.width \/ (float) imageSize.width,\n+                                displaySize.height \/ (float) imageSize.height);\n+                xOffset =  2 * (dragDelta.width \/ (displaySize.width - scale * imageSize.width));\n+                yOffset =  2 * (dragDelta.height \/ (displaySize.height - scale * imageSize.height));\n@@ -161,4 +155,3 @@\n-        int sw = getWidth();\n-        int sh = getHeight();\n-        int iw = image.getWidth();\n-        int ih = image.getHeight();\n+\n+        Dimension displaySize = getSize();\n+        Dimension imageSize = new Dimension( image.getWidth(),image.getHeight());\n@@ -167,3 +160,5 @@\n-        double scale = zoom * Math.min(sw \/ (double) iw, sh \/ (double) ih);\n-        transform.translate((1 + xOffset) * (sw - iw * scale) \/ 2,\n-                (1 + yOffset) * (sh - ih * scale) \/ 2);\n+        double scale = zoom *\n+                Math.min(displaySize.width \/ (double) imageSize.width,\n+                        displaySize.height \/ (double) imageSize.height);\n+        transform.translate((1 + xOffset) * (displaySize.width - imageSize.width * scale) \/ 2,\n+                (1 + yOffset) * (displaySize.height - imageSize.height * scale) \/ 2);\n@@ -172,1 +167,1 @@\n-        g.drawImage(image, 0, 0, iw, ih, null);\n+        g.drawImage(image, 0, 0, imageSize.width, imageSize.height, null);\n","filename":"hat\/examples\/heal\/src\/java\/heal\/Display.java","additions":22,"deletions":27,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-\n@@ -58,1 +57,0 @@\n-\n@@ -62,2 +60,1 @@\n-\n-        XYList.XY xy= (XYList.XY)path.xy(i);\n+            XYList.XY xy = (XYList.XY) path.xy(i);\n@@ -75,3 +72,1 @@\n-    public static void heal(Selection selection,\n-                            int fromDeltaX,\n-                            int fromDeltaY) {\n+    public static void heal(Selection selection, int fromDeltaX, int fromDeltaY) {\n@@ -83,1 +78,1 @@\n-long start = System.currentTimeMillis();\n+        long start = System.currentTimeMillis();\n@@ -87,6 +82,4 @@\n-            src[i] = selection.imageData.data[(selection.path.y1 + y - 1 + fromDeltaY) * selection.imageData.width + selection.path.x1 + x + fromDeltaX];\n-            if (mask[i] != 0) {\n-                dest[i] = src[i];\n-            } else {\n-                dest[i] = selection.imageData.data[(selection.path.y1 + y - 1) * selection.imageData.width + selection.path.x1 + x];\n-            }\n+            src[i] = selection.imageData.data[\n+                    (selection.path.y1 + y - 1 + fromDeltaY) * selection.imageData.width + selection.path.x1 + x + fromDeltaX\n+                    ];\n+            dest[i] =(mask[i] != 0)?src[i]:selection.imageData.data[(selection.path.y1 + y - 1) * selection.imageData.width + selection.path.x1 + x];\n@@ -94,1 +87,1 @@\n-        System.out.println(\"heal \" +(System.currentTimeMillis()-start)+\"ms\");\n+        System.out.println(\"heal \" + (System.currentTimeMillis() - start) + \"ms\");\n@@ -97,1 +90,4 @@\n-          displayLapacian(srclap, dest, mask);\n+\n+        displayLapacian(srclap, dest, mask);\n+\n+\n@@ -100,1 +96,2 @@\n-start=System.currentTimeMillis();\n+\n+        start = System.currentTimeMillis();\n@@ -106,1 +103,1 @@\n-        System.out.println(\"heal2 \" +(System.currentTimeMillis()-start)+\"ms\");\n+        System.out.println(\"heal2 \" + (System.currentTimeMillis() - start) + \"ms\");\n@@ -111,2 +108,1 @@\n-        int[] tmp = new int[dest.length];\n-        System.arraycopy(dest, 0, tmp, 0, tmp.length);\n+        int[] tmp =  Arrays.copyOf(dest,dest.length);\n@@ -123,0 +119,1 @@\n+\n@@ -127,0 +124,1 @@\n+\n@@ -131,0 +129,1 @@\n+\n@@ -135,3 +134,5 @@\n-                    r += (lap_rgb.rgb[p * 3 + 0]);\n-                    g += (lap_rgb.rgb[p * 3 + 1]);\n-                    b += (lap_rgb.rgb[p * 3 + 2]);\n+\n+                    r += (lap_rgb.rgb[p * RGBList.STRIDE + RGBList.Ridx]);\n+                    g += (lap_rgb.rgb[p * RGBList.STRIDE + RGBList.Gidx]);\n+                    b += (lap_rgb.rgb[p * RGBList.STRIDE + RGBList.Bidx]);\n+\n@@ -141,0 +142,5 @@\n+\n+                    \/\/ r=(dest[x+1,y].r + dest[x-1,y].r +dest[x,y-1].r +dest[x,y+1].r + lap_rgb[x,y].r+2)\/4;\n+                    \/\/ g=(dest[x+1,y].g + dest[x-1,y].g +dest[x,y-1].g +dest[x,y+1].g + lap_ggb[x,y].g+2)\/4;\n+                    \/\/ b=(dest[x+1,y].b + dest[x-1,y].b +dest[x,y-1].b +dest[x,y+1].b + lap_bgb[x,y].b+2)\/4;\n+\n@@ -148,1 +154,1 @@\n-        System.out.println(\"solve \" +(System.currentTimeMillis()-start)+\"ms\");\n+        System.out.println(\"solve \" + (System.currentTimeMillis() - start) + \"ms\");\n@@ -153,1 +159,2 @@\n-        for (RGBList.RGB rgb : lap_rgb) {\n+        for (int i =0; i< lap_rgb.length(); i++) {\n+            var rgb = lap_rgb.rgb(i);\n@@ -155,1 +162,4 @@\n-                dst[rgb.idx] = (((Math.abs(rgb.r) & 0xFF) << 16) | ((Math.abs(rgb.g) & 0xFF) << 8) | (Math.abs(rgb.b) & 0xFF));\n+                dst[rgb.idx] =\n+                        (((Math.abs(rgb.r()) & 0xFF) << 16)\n+                        | ((Math.abs(rgb.g()) & 0xFF) << 8)\n+                                | (Math.abs(rgb.b()) & 0xFF));\n@@ -191,0 +201,4 @@\n+\n+                \/\/ r = r\/4 + src[x-1,y-].r + src[x+1,y].r + src[x-0,y+1].r + src[x,y-1].r\n+                \/\/ g = g\/4 + src[x-1,y-].g + src[x+1,y].g + src[x-0,y+1].g + src[x,y-1].g\n+                \/\/ b = b\/4 + src[x-1,y-].b + src[x+1,y].b + src[x-0,y+1].b + src[x,y-1].b\n@@ -196,1 +210,1 @@\n-        System.out.println(\"laplacian \" +(System.currentTimeMillis()-start)+\"ms\");\n+        System.out.println(\"laplacian \" + (System.currentTimeMillis() - start) + \"ms\");\n@@ -209,1 +223,5 @@\n-            RGBList orig_rgb = extractCurve(selection);\n+            RGBList rgbList = new RGBList();\n+            for (int i = 0; i < selection.path.length(); i++) {\n+                XYList.XY xy = (XYList.XY) selection.path.xy(i);\n+                rgbList.addRGB(selection.imageData.data[xy.y() * selection.imageData.width + xy.x()]);\n+            }\n@@ -211,1 +229,1 @@\n-            RGBList comp = new RGBList(orig_rgb);\n+            RGBList comp = new RGBList(rgbList);\n@@ -214,1 +232,1 @@\n-            int bestdx = -11111, bestdy = 0;\n+            Point best = new Point(-11111, 0);\n@@ -223,3 +241,8 @@\n-                        for (int i=0;i<selection.path.length();i++){\n-                            XYList.XY xy= (XYList.XY)selection.path.xy(i);\n-                            comp.setRGB(xy.idx(), selection.imageData.data[sdy * selection.imageData.width + sdx + xy.y() * selection.imageData.width + xy.x()]);\n+                        for (int i = 0; i < selection.path.length(); i++) {\n+                            XYList.XY xy = (XYList.XY) selection.path.xy(i);\n+                            comp.setRGB(xy.idx(),\n+                                    selection.imageData.data[\n+                                            sdy * selection.imageData.width + sdx + xy.y()\n+                                                    * selection.imageData.width + xy.x()\n+                                            ]\n+                            );\n@@ -229,5 +252,7 @@\n-                        for (RGBList.RGB rgb : orig_rgb) {\n-                            int dx = comp.rgb[rgb.idx * 3 + 0] - rgb.r;\n-                            int dy = comp.rgb[rgb.idx * 3 + 1] - rgb.g;\n-                            int dz = comp.rgb[rgb.idx * 3 + 2] - rgb.b;\n-                            sum += dx * dx + dy * dy + dz * dz;\n+                        for (int i =0; i< rgbList.length(); i++) {\n+                            var rgb = rgbList.rgb(i);\n+                            var compRgb = comp.rgb(i);\n+                            int dr = compRgb.r() - rgb.r();\n+                            int dg = compRgb.g() - rgb.g();\n+                            int db = compRgb.b() - rgb.b();\n+                            sum += dr * dr + dg * dg + db * db;\n@@ -238,2 +263,1 @@\n-                            bestdx = x - selection.path.x1;\n-                            bestdy = y - selection.path.y1;\n+                            best.setLocation(x - selection.path.x1,y - selection.path.y1);\n@@ -244,2 +268,2 @@\n-            System.out.println(\"search \" +(System.currentTimeMillis()-start)+\"ms\");\n-            offset = new Point(bestdx, bestdy);\n+            System.out.println(\"search \" + (System.currentTimeMillis() - start) + \"ms\");\n+            offset = best;\n@@ -248,19 +272,0 @@\n-\n-    }\n-    static RGBList extractCurve(Selection selection) {\n-        RGBList rgbList = new RGBList();\n-        for (int i=0;i<selection.path.length();i++){\n-        XYList.XY xy= (XYList.XY)selection.path.xy(i);\n-            rgbList.addRGB(selection.imageData.data[xy.y() * selection.imageData.width + xy.x()]);\n-        }\n-        return rgbList;\n-    }\n-\n-    static void extractCurve(RGBList rgbList, Selection selection,\n-                                int dx,\n-                                int dy) {\n-        for (int i=0;i<selection.path.length();i++){\n-            XYList.XY xy= (XYList.XY)selection.path.xy(i);\n-            rgbList.setRGB(xy.idx(), selection.imageData.data[dy * selection.imageData.width + dx + xy.y() * selection.imageData.width + xy.x()]);\n-        }\n-\n","filename":"hat\/examples\/heal\/src\/java\/heal\/HealingBrush.java","additions":66,"deletions":61,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -45,1 +45,9 @@\n-import java.awt.*;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Timer;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n@@ -57,5 +65,0 @@\n-import javax.imageio.ImageIO;\n-import javax.swing.JFrame;\n-import javax.swing.SwingUtilities;\n-import javax.swing.Timer;\n-\n@@ -64,1 +67,1 @@\n-    Path selectionPatch = null;\n+    Path selectionPath = null;\n@@ -71,0 +74,1 @@\n+\n@@ -74,1 +78,1 @@\n-                    Selection selection = new Selection(new ImageData(img), selectionPatch.close());\n+                    Selection selection = new Selection(new ImageData(img), selectionPath.close());\n@@ -76,1 +80,1 @@\n-                    matchPath = new Path(selectionPatch,  p.x,  p.y);\n+                    matchPath = new Path();\n@@ -82,1 +86,1 @@\n-                            selectionPatch = null;\n+                            selectionPath = null;\n@@ -99,1 +103,1 @@\n-                        selectionPatch = new Path((int) ptDst.getX(), (int) ptDst.getY());\n+                        selectionPath = new Path((int) ptDst.getX(), (int) ptDst.getY());\n@@ -115,1 +119,1 @@\n-                        selectionPatch.extendTo((int) ptDst.getX(), (int) ptDst.getY());\n+                        selectionPath.extendTo((int) ptDst.getX(), (int) ptDst.getY());\n@@ -128,1 +132,1 @@\n-        if (selectionPatch != null) {\n+        if (selectionPath != null) {\n@@ -130,1 +134,1 @@\n-            g.drawPolygon(selectionPatch.getPolygon());\n+            g.drawPolygon(selectionPath.getPolygon());\n@@ -133,2 +137,2 @@\n-                for (int i=0; i<matchPath.length();i++){\n-                XYList.XY p = (XYList.XY)matchPath.xy(i);\n+                for (int i = 0; i < matchPath.length(); i++) {\n+                    XYList.XY p = (XYList.XY) matchPath.xy(i);\n@@ -149,8 +153,0 @@\n-    private static BufferedImage getdata(InputStream is) throws IOException {\n-        BufferedImage img = ImageIO.read(is);\n-        BufferedImage ret = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);\n-        ret.getGraphics().drawImage(img, 0, 0, null);\n-        return ret;\n-    }\n-\n-\n@@ -159,2 +155,10 @@\n-        BufferedImage image = getdata(HealingBrushDisplay.class.getResourceAsStream(\"\/images\/bolton.png\"));\n-        f.setBounds(new Rectangle(image.getWidth(),image.getHeight()));\n+        BufferedImage originalImage = ImageIO.read(HealingBrushDisplay.class.getResourceAsStream(\"\/images\/bolton.png\"));\n+        BufferedImage image=null;\n+        if (originalImage.getType() == BufferedImage.TYPE_INT_RGB){\n+            image = originalImage;\n+        }else {\n+            \/\/ there must be a better way!\n+            image = new BufferedImage(originalImage.getWidth(), originalImage.getHeight(), BufferedImage.TYPE_INT_RGB);\n+            image.getGraphics().drawImage(originalImage, 0, 0, null);\n+        }\n+        f.setBounds(new Rectangle(image.getWidth(), image.getHeight()));\n@@ -162,2 +166,2 @@\n-        HealingBrushDisplay p = new HealingBrushDisplay();\n-        f.setContentPane(p);\n+        HealingBrushDisplay healingBrushDisplay = new HealingBrushDisplay();\n+        f.setContentPane(healingBrushDisplay);\n@@ -166,1 +170,1 @@\n-        p.setImage(image);\n+        healingBrushDisplay.setImage(image);\n","filename":"hat\/examples\/heal\/src\/java\/heal\/HealingBrushDisplay.java","additions":33,"deletions":29,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-class ImageData{\n+public class ImageData{\n","filename":"hat\/examples\/heal\/src\/java\/heal\/ImageData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-\n@@ -50,1 +49,1 @@\n-class Path extends XYList {\n+public class Path extends XYList {\n@@ -63,1 +62,2 @@\n-\n+    Path(){\n+    }\n@@ -67,7 +67,0 @@\n-\n-    Path(Path path, int offsetx, int offsety){\n-        for (int i=0;i<length();i++){\n-            XY xy = (XYList.XY)xy(i);\n-            add(xy.x()+offsetx, xy.y()+offsety);\n-        }\n-    }\n@@ -84,1 +77,2 @@\n-        add(xy[length()*2-2],xy[length()*2-1], x, y);\n+        add(xy[length()*XYList.STRIDE-(2-XYList.Xidx)],\n+                xy[length()*XYList.STRIDE-(2-XYList.Yidx)], x, y);\n@@ -89,1 +83,1 @@\n-        xy = Arrays.copyOf(xy, length() * 2);\n+        xy = Arrays.copyOf(xy, length() * XYList.STRIDE);\n","filename":"hat\/examples\/heal\/src\/java\/heal\/Path.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-class RGBList implements Iterable<RGBList.RGB>{\n+class RGBList implements S32RGBTable{\n@@ -52,3 +52,11 @@\n-    final static int R= 0;\n-    final static int G= 1;\n-    final static int B= 2;\n+    final static int Ridx= 0;\n+    final static int Gidx= 1;\n+    final static int Bidx= 2;\n+    int length;\n+    int[] rgb = new int[INIT*STRIDE];\n+    private RGB cursor = new RGB(this);\n+    @Override\n+    public RGB rgb(long idx) {\n+        cursor.set((int)idx);\n+        return cursor;\n+    }\n@@ -56,5 +64,4 @@\n-    public class RGB implements Iterator<RGB>{\n-        int idx=-1;\n-        int r;\n-        int g;\n-        int b;\n+    @Override\n+    public int length() {\n+        return length;\n+    }\n@@ -62,3 +69,10 @@\n-        @Override\n-        public boolean hasNext() {\n-            return idx+1<size;\n+    @Override\n+    public void length(int length) {\n+        this.length = length;\n+    }\n+\n+    static public class RGB implements S32RGBTable.RGB{\n+        RGBList rgbList;\n+        int idx=-1;\n+        RGB(RGBList rgbList){\n+            this.rgbList = rgbList;\n@@ -69,3 +83,1 @@\n-            r = rgb[idx*STRIDE+R];\n-            g = rgb[idx*STRIDE+G];\n-            b = rgb[idx*STRIDE+B];\n+\n@@ -76,4 +88,2 @@\n-        public RGB next() {\n-            idx++;\n-            set(idx);\n-            return this;\n+        public int r() {\n+            return rgbList.rgb[idx*STRIDE+Ridx];\n@@ -83,2 +93,25 @@\n-        public void remove() {\n-           throw new IllegalStateException(\"remove not supported\");\n+        public int g() {\n+            return rgbList.rgb[idx*STRIDE+Gidx];\n+        }\n+\n+        @Override\n+        public int b() {\n+\n+                return rgbList.rgb[idx*STRIDE+Bidx];\n+\n+\n+        }\n+\n+        @Override\n+        public void r(int r) {\n+            rgbList.rgb[idx*STRIDE+Ridx]=r;\n+        }\n+\n+        @Override\n+        public void g(int g) {\n+            rgbList.rgb[idx*STRIDE+Gidx]=g;\n+        }\n+\n+        @Override\n+        public void b(int b) {\n+            rgbList.rgb[idx*STRIDE+Bidx]=b;\n@@ -88,2 +121,0 @@\n-    int size;\n-    int rgb[]= new int[INIT*STRIDE];\n@@ -92,3 +123,3 @@\n-        rgb[idx*STRIDE+R]=r;\n-        rgb[idx*STRIDE+G]=g;\n-        rgb[idx*STRIDE+B]=b;\n+        rgb[idx*STRIDE+Ridx]=r;\n+        rgb[idx*STRIDE+Gidx]=g;\n+        rgb[idx*STRIDE+Bidx]=b;\n@@ -98,1 +129,1 @@\n-        if (size*STRIDE== rgb.length){\n+        if (length*STRIDE== rgb.length){\n@@ -101,2 +132,2 @@\n-        set(size, r, g, b);\n-        size++;\n+        set(length, r, g, b);\n+        length++;\n@@ -117,1 +148,1 @@\n-        size = list.size;\n+        length = list.length;\n@@ -121,4 +152,0 @@\n-    @Override\n-    public Iterator<RGB> iterator() {\n-        return new RGB();\n-    }\n","filename":"hat\/examples\/heal\/src\/java\/heal\/RGBList.java","additions":61,"deletions":34,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-class Selection{\n+public class Selection{\n","filename":"hat\/examples\/heal\/src\/java\/heal\/Selection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}