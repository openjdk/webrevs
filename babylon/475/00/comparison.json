{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.extern.ExternalizedTypeElement;\n@@ -143,1 +143,1 @@\n-        w.write(\"@OpFactory.OpDeclaration(\" + s.name() + \".NAME)\\n\");\n+        w.write(\"@OpFactoryHelper.OpDeclaration(\" + s.name() + \".NAME)\\n\");\n@@ -152,1 +152,1 @@\n-        Map<String, List<TypeElement.ExternalizedTypeElement>> typeConstraints =\n+        Map<String, List<ExternalizedTypeElement>> typeConstraints =\n@@ -238,1 +238,1 @@\n-    private Map<String, List<TypeElement.ExternalizedTypeElement>> genTypeConstraintEnum(IndentWriter w, OpSchema s) throws IOException {\n+    private Map<String, List<ExternalizedTypeElement>> genTypeConstraintEnum(IndentWriter w, OpSchema s) throws IOException {\n@@ -245,1 +245,1 @@\n-        Map<String, List<TypeElement.ExternalizedTypeElement>> typeConstraints = new HashMap<>();\n+        Map<String, List<ExternalizedTypeElement>> typeConstraints = new HashMap<>();\n@@ -251,1 +251,1 @@\n-            List<TypeElement.ExternalizedTypeElement> types = tcp.allowed_type_strs().stream()\n+            List<ExternalizedTypeElement> types = tcp.allowed_type_strs().stream()\n@@ -292,1 +292,1 @@\n-                                       Map<String, List<TypeElement.ExternalizedTypeElement>> typeConstraints) throws IOException {\n+                                       Map<String, List<ExternalizedTypeElement>> typeConstraints) throws IOException {\n@@ -308,1 +308,1 @@\n-                TypeElement.ExternalizedTypeElement type = parseTypeString(input.type_str());\n+                ExternalizedTypeElement type = parseTypeString(input.type_str());\n@@ -356,1 +356,1 @@\n-                                        Map<String, List<TypeElement.ExternalizedTypeElement>> typeConstraints) throws IOException {\n+                                        Map<String, List<ExternalizedTypeElement>> typeConstraints) throws IOException {\n@@ -372,1 +372,1 @@\n-                TypeElement.ExternalizedTypeElement type = parseTypeString(output.type_str());\n+                ExternalizedTypeElement type = parseTypeString(output.type_str());\n@@ -809,1 +809,1 @@\n-    private void genTypes(IndentWriter w, List<TypeElement.ExternalizedTypeElement> types) throws IOException {\n+    private void genTypes(IndentWriter w, List<ExternalizedTypeElement> types) throws IOException {\n@@ -811,1 +811,1 @@\n-        for (TypeElement.ExternalizedTypeElement type : types) {\n+        for (ExternalizedTypeElement type : types) {\n@@ -822,1 +822,1 @@\n-    private void genType(IndentWriter w, TypeElement.ExternalizedTypeElement type) throws IOException {\n+    private void genType(IndentWriter w, ExternalizedTypeElement type) throws IOException {\n@@ -837,2 +837,2 @@\n-    static TypeElement.ExternalizedTypeElement parseTypeString(String type_str) {\n-        return TypeElement.ExternalizedTypeElement.ofString(\n+    static ExternalizedTypeElement parseTypeString(String type_str) {\n+        return ExternalizedTypeElement.ofString(\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/onnx\/opgen\/OpGen.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.code.TypeElement;\n+import jdk.incubator.code.extern.ExternalizedTypeElement;\n@@ -134,1 +134,1 @@\n-        Map<String, TypeElement.ExternalizedTypeElement> javaTypeConstraints = javaTypes(typeConstraintMap(s));\n+        Map<String, ExternalizedTypeElement> javaTypeConstraints = javaTypes(typeConstraintMap(s));\n@@ -158,1 +158,1 @@\n-                TypeElement.ExternalizedTypeElement outputType = javaTypeConstraints\n+                ExternalizedTypeElement outputType = javaTypeConstraints\n@@ -188,1 +188,1 @@\n-        final TypeElement.ExternalizedTypeElement outputType;\n+        final ExternalizedTypeElement outputType;\n@@ -202,1 +202,1 @@\n-            outputType = new TypeElement.ExternalizedTypeElement(\"List\",\n+            outputType = new ExternalizedTypeElement(\"List\",\n@@ -209,1 +209,1 @@\n-            outputType = new TypeElement.ExternalizedTypeElement(s.name() + \"Result\", List.of());\n+            outputType = new ExternalizedTypeElement(s.name() + \"Result\", List.of());\n@@ -224,1 +224,1 @@\n-            final TypeElement.ExternalizedTypeElement inputType = javaTypeConstraints\n+            final ExternalizedTypeElement inputType = javaTypeConstraints\n@@ -324,1 +324,1 @@\n-                final TypeElement.ExternalizedTypeElement t = javaTypeConstraints\n+                final ExternalizedTypeElement t = javaTypeConstraints\n@@ -340,1 +340,1 @@\n-    static Map<String, TypeElement.ExternalizedTypeElement> javaTypes(Map<String, TypeElement.ExternalizedTypeElement> tcm) {\n+    static Map<String, ExternalizedTypeElement> javaTypes(Map<String, ExternalizedTypeElement> tcm) {\n@@ -346,1 +346,1 @@\n-    static Set<String> javaTypeVariables(Map<String, TypeElement.ExternalizedTypeElement> tcm) {\n+    static Set<String> javaTypeVariables(Map<String, ExternalizedTypeElement> tcm) {\n@@ -353,1 +353,1 @@\n-    static boolean usesTypeVariable(String typeVariable, TypeElement.ExternalizedTypeElement ete) {\n+    static boolean usesTypeVariable(String typeVariable, ExternalizedTypeElement ete) {\n@@ -360,1 +360,1 @@\n-    static TypeElement.ExternalizedTypeElement javaType(String typeVariable, TypeElement.ExternalizedTypeElement ete) {\n+    static ExternalizedTypeElement javaType(String typeVariable, ExternalizedTypeElement ete) {\n@@ -382,1 +382,1 @@\n-            return new TypeElement.ExternalizedTypeElement(javaIdentifier,\n+            return new ExternalizedTypeElement(javaIdentifier,\n@@ -386,1 +386,1 @@\n-        return new TypeElement.ExternalizedTypeElement(javaIdentifier,\n+        return new ExternalizedTypeElement(javaIdentifier,\n@@ -390,1 +390,1 @@\n-    static Map<String, TypeElement.ExternalizedTypeElement> typeConstraintMap(OpSchema s) {\n+    static Map<String, ExternalizedTypeElement> typeConstraintMap(OpSchema s) {\n@@ -396,2 +396,2 @@\n-    static TypeElement.ExternalizedTypeElement lub(TypeElement.ExternalizedTypeElement a,\n-                                                   TypeElement.ExternalizedTypeElement b) {\n+    static ExternalizedTypeElement lub(ExternalizedTypeElement a,\n+                                                   ExternalizedTypeElement b) {\n@@ -399,1 +399,1 @@\n-            return new TypeElement.ExternalizedTypeElement(\"?\", List.of());\n+            return new ExternalizedTypeElement(\"?\", List.of());\n@@ -404,1 +404,1 @@\n-        List<TypeElement.ExternalizedTypeElement> children = new ArrayList<>();\n+        List<ExternalizedTypeElement> children = new ArrayList<>();\n@@ -409,1 +409,1 @@\n-        return new TypeElement.ExternalizedTypeElement(a.identifier(), children);\n+        return new ExternalizedTypeElement(a.identifier(), children);\n@@ -412,2 +412,2 @@\n-    static TypeElement.ExternalizedTypeElement parseTypeString(String type_str) {\n-        return TypeElement.ExternalizedTypeElement.ofString(\n+    static ExternalizedTypeElement parseTypeString(String type_str) {\n+        return ExternalizedTypeElement.ofString(\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/onnx\/opgen\/OperatorGen.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    @OpFactory.OpDeclaration(GroupQueryAttention.NAME)\n+    @OpFactoryHelper.OpDeclaration(GroupQueryAttention.NAME)\n@@ -239,1 +239,1 @@\n-    @OpFactory.OpDeclaration(MatMulNBits.NAME)\n+    @OpFactoryHelper.OpDeclaration(MatMulNBits.NAME)\n@@ -414,1 +414,1 @@\n-    @OpFactory.OpDeclaration(SkipSimplifiedLayerNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(SkipSimplifiedLayerNormalization.NAME)\n@@ -575,1 +575,1 @@\n-    @OpFactory.OpDeclaration(If.NAME)\n+    @OpFactoryHelper.OpDeclaration(If.NAME)\n@@ -714,1 +714,1 @@\n-    @OpFactory.OpDeclaration(Loop.NAME)\n+    @OpFactoryHelper.OpDeclaration(Loop.NAME)\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/ExplicitOnnxOps.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    @OpFactory.OpDeclaration(Abs.NAME)\n+    @OpFactoryHelper.OpDeclaration(Abs.NAME)\n@@ -155,1 +155,1 @@\n-    @OpFactory.OpDeclaration(Acos.NAME)\n+    @OpFactoryHelper.OpDeclaration(Acos.NAME)\n@@ -269,1 +269,1 @@\n-    @OpFactory.OpDeclaration(Acosh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Acosh.NAME)\n@@ -383,1 +383,1 @@\n-    @OpFactory.OpDeclaration(Adagrad.NAME)\n+    @OpFactoryHelper.OpDeclaration(Adagrad.NAME)\n@@ -552,1 +552,1 @@\n-    @OpFactory.OpDeclaration(Adam.NAME)\n+    @OpFactoryHelper.OpDeclaration(Adam.NAME)\n@@ -733,1 +733,1 @@\n-    @OpFactory.OpDeclaration(Add.NAME)\n+    @OpFactoryHelper.OpDeclaration(Add.NAME)\n@@ -852,1 +852,1 @@\n-    @OpFactory.OpDeclaration(AffineGrid.NAME)\n+    @OpFactoryHelper.OpDeclaration(AffineGrid.NAME)\n@@ -1003,1 +1003,1 @@\n-    @OpFactory.OpDeclaration(And.NAME)\n+    @OpFactoryHelper.OpDeclaration(And.NAME)\n@@ -1123,1 +1123,1 @@\n-    @OpFactory.OpDeclaration(ArgMax.NAME)\n+    @OpFactoryHelper.OpDeclaration(ArgMax.NAME)\n@@ -1280,1 +1280,1 @@\n-    @OpFactory.OpDeclaration(ArgMin.NAME)\n+    @OpFactoryHelper.OpDeclaration(ArgMin.NAME)\n@@ -1437,1 +1437,1 @@\n-    @OpFactory.OpDeclaration(ArrayFeatureExtractor.NAME)\n+    @OpFactoryHelper.OpDeclaration(ArrayFeatureExtractor.NAME)\n@@ -1556,1 +1556,1 @@\n-    @OpFactory.OpDeclaration(Asin.NAME)\n+    @OpFactoryHelper.OpDeclaration(Asin.NAME)\n@@ -1670,1 +1670,1 @@\n-    @OpFactory.OpDeclaration(Asinh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Asinh.NAME)\n@@ -1784,1 +1784,1 @@\n-    @OpFactory.OpDeclaration(Atan.NAME)\n+    @OpFactoryHelper.OpDeclaration(Atan.NAME)\n@@ -1898,1 +1898,1 @@\n-    @OpFactory.OpDeclaration(Atanh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Atanh.NAME)\n@@ -2012,1 +2012,1 @@\n-    @OpFactory.OpDeclaration(AveragePool.NAME)\n+    @OpFactoryHelper.OpDeclaration(AveragePool.NAME)\n@@ -2193,1 +2193,1 @@\n-    @OpFactory.OpDeclaration(BatchNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(BatchNormalization.NAME)\n@@ -2374,1 +2374,1 @@\n-    @OpFactory.OpDeclaration(Bernoulli.NAME)\n+    @OpFactoryHelper.OpDeclaration(Bernoulli.NAME)\n@@ -2526,1 +2526,1 @@\n-    @OpFactory.OpDeclaration(Binarizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(Binarizer.NAME)\n@@ -2671,1 +2671,1 @@\n-    @OpFactory.OpDeclaration(BitShift.NAME)\n+    @OpFactoryHelper.OpDeclaration(BitShift.NAME)\n@@ -2821,1 +2821,1 @@\n-    @OpFactory.OpDeclaration(BitwiseAnd.NAME)\n+    @OpFactoryHelper.OpDeclaration(BitwiseAnd.NAME)\n@@ -2940,1 +2940,1 @@\n-    @OpFactory.OpDeclaration(BitwiseNot.NAME)\n+    @OpFactoryHelper.OpDeclaration(BitwiseNot.NAME)\n@@ -3054,1 +3054,1 @@\n-    @OpFactory.OpDeclaration(BitwiseOr.NAME)\n+    @OpFactoryHelper.OpDeclaration(BitwiseOr.NAME)\n@@ -3173,1 +3173,1 @@\n-    @OpFactory.OpDeclaration(BitwiseXor.NAME)\n+    @OpFactoryHelper.OpDeclaration(BitwiseXor.NAME)\n@@ -3292,1 +3292,1 @@\n-    @OpFactory.OpDeclaration(BlackmanWindow.NAME)\n+    @OpFactoryHelper.OpDeclaration(BlackmanWindow.NAME)\n@@ -3444,1 +3444,1 @@\n-    @OpFactory.OpDeclaration(Cast.NAME)\n+    @OpFactoryHelper.OpDeclaration(Cast.NAME)\n@@ -3596,1 +3596,1 @@\n-    @OpFactory.OpDeclaration(CastLike.NAME)\n+    @OpFactoryHelper.OpDeclaration(CastLike.NAME)\n@@ -3747,1 +3747,1 @@\n-    @OpFactory.OpDeclaration(CastMap.NAME)\n+    @OpFactoryHelper.OpDeclaration(CastMap.NAME)\n@@ -3905,1 +3905,1 @@\n-    @OpFactory.OpDeclaration(CategoryMapper.NAME)\n+    @OpFactoryHelper.OpDeclaration(CategoryMapper.NAME)\n@@ -4069,1 +4069,1 @@\n-    @OpFactory.OpDeclaration(Ceil.NAME)\n+    @OpFactoryHelper.OpDeclaration(Ceil.NAME)\n@@ -4183,1 +4183,1 @@\n-    @OpFactory.OpDeclaration(Celu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Celu.NAME)\n@@ -4328,1 +4328,1 @@\n-    @OpFactory.OpDeclaration(CenterCropPad.NAME)\n+    @OpFactoryHelper.OpDeclaration(CenterCropPad.NAME)\n@@ -4479,1 +4479,1 @@\n-    @OpFactory.OpDeclaration(Clip.NAME)\n+    @OpFactoryHelper.OpDeclaration(Clip.NAME)\n@@ -4605,1 +4605,1 @@\n-    @OpFactory.OpDeclaration(Col2Im.NAME)\n+    @OpFactoryHelper.OpDeclaration(Col2Im.NAME)\n@@ -4772,1 +4772,1 @@\n-    @OpFactory.OpDeclaration(Compress.NAME)\n+    @OpFactoryHelper.OpDeclaration(Compress.NAME)\n@@ -4923,1 +4923,1 @@\n-    @OpFactory.OpDeclaration(Concat.NAME)\n+    @OpFactoryHelper.OpDeclaration(Concat.NAME)\n@@ -5068,1 +5068,1 @@\n-    @OpFactory.OpDeclaration(ConcatFromSequence.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConcatFromSequence.NAME)\n@@ -5220,1 +5220,1 @@\n-    @OpFactory.OpDeclaration(Constant.NAME)\n+    @OpFactoryHelper.OpDeclaration(Constant.NAME)\n@@ -5382,1 +5382,1 @@\n-    @OpFactory.OpDeclaration(ConstantOfShape.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConstantOfShape.NAME)\n@@ -5528,1 +5528,1 @@\n-    @OpFactory.OpDeclaration(Conv.NAME)\n+    @OpFactoryHelper.OpDeclaration(Conv.NAME)\n@@ -5714,1 +5714,1 @@\n-    @OpFactory.OpDeclaration(ConvInteger.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConvInteger.NAME)\n@@ -5908,1 +5908,1 @@\n-    @OpFactory.OpDeclaration(ConvTranspose.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConvTranspose.NAME)\n@@ -6106,1 +6106,1 @@\n-    @OpFactory.OpDeclaration(Cos.NAME)\n+    @OpFactoryHelper.OpDeclaration(Cos.NAME)\n@@ -6220,1 +6220,1 @@\n-    @OpFactory.OpDeclaration(Cosh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Cosh.NAME)\n@@ -6334,1 +6334,1 @@\n-    @OpFactory.OpDeclaration(CumSum.NAME)\n+    @OpFactoryHelper.OpDeclaration(CumSum.NAME)\n@@ -6491,1 +6491,1 @@\n-    @OpFactory.OpDeclaration(DFT.NAME)\n+    @OpFactoryHelper.OpDeclaration(DFT.NAME)\n@@ -6655,1 +6655,1 @@\n-    @OpFactory.OpDeclaration(DeformConv.NAME)\n+    @OpFactoryHelper.OpDeclaration(DeformConv.NAME)\n@@ -6852,1 +6852,1 @@\n-    @OpFactory.OpDeclaration(DepthToSpace.NAME)\n+    @OpFactoryHelper.OpDeclaration(DepthToSpace.NAME)\n@@ -7003,1 +7003,1 @@\n-    @OpFactory.OpDeclaration(DequantizeLinear.NAME)\n+    @OpFactoryHelper.OpDeclaration(DequantizeLinear.NAME)\n@@ -7166,1 +7166,1 @@\n-    @OpFactory.OpDeclaration(Det.NAME)\n+    @OpFactoryHelper.OpDeclaration(Det.NAME)\n@@ -7280,1 +7280,1 @@\n-    @OpFactory.OpDeclaration(DictVectorizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(DictVectorizer.NAME)\n@@ -7432,1 +7432,1 @@\n-    @OpFactory.OpDeclaration(Div.NAME)\n+    @OpFactoryHelper.OpDeclaration(Div.NAME)\n@@ -7551,1 +7551,1 @@\n-    @OpFactory.OpDeclaration(Dropout.NAME)\n+    @OpFactoryHelper.OpDeclaration(Dropout.NAME)\n@@ -7711,1 +7711,1 @@\n-    @OpFactory.OpDeclaration(DynamicQuantizeLinear.NAME)\n+    @OpFactoryHelper.OpDeclaration(DynamicQuantizeLinear.NAME)\n@@ -7828,1 +7828,1 @@\n-    @OpFactory.OpDeclaration(Einsum.NAME)\n+    @OpFactoryHelper.OpDeclaration(Einsum.NAME)\n@@ -7973,1 +7973,1 @@\n-    @OpFactory.OpDeclaration(Elu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Elu.NAME)\n@@ -8118,1 +8118,1 @@\n-    @OpFactory.OpDeclaration(Equal.NAME)\n+    @OpFactoryHelper.OpDeclaration(Equal.NAME)\n@@ -8238,1 +8238,1 @@\n-    @OpFactory.OpDeclaration(Erf.NAME)\n+    @OpFactoryHelper.OpDeclaration(Erf.NAME)\n@@ -8352,1 +8352,1 @@\n-    @OpFactory.OpDeclaration(Exp.NAME)\n+    @OpFactoryHelper.OpDeclaration(Exp.NAME)\n@@ -8466,1 +8466,1 @@\n-    @OpFactory.OpDeclaration(Expand.NAME)\n+    @OpFactoryHelper.OpDeclaration(Expand.NAME)\n@@ -8585,1 +8585,1 @@\n-    @OpFactory.OpDeclaration(EyeLike.NAME)\n+    @OpFactoryHelper.OpDeclaration(EyeLike.NAME)\n@@ -8737,1 +8737,1 @@\n-    @OpFactory.OpDeclaration(FeatureVectorizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(FeatureVectorizer.NAME)\n@@ -8882,1 +8882,1 @@\n-    @OpFactory.OpDeclaration(Flatten.NAME)\n+    @OpFactoryHelper.OpDeclaration(Flatten.NAME)\n@@ -9027,1 +9027,1 @@\n-    @OpFactory.OpDeclaration(Floor.NAME)\n+    @OpFactoryHelper.OpDeclaration(Floor.NAME)\n@@ -9141,1 +9141,1 @@\n-    @OpFactory.OpDeclaration(GRU.NAME)\n+    @OpFactoryHelper.OpDeclaration(GRU.NAME)\n@@ -9358,1 +9358,1 @@\n-    @OpFactory.OpDeclaration(Gather.NAME)\n+    @OpFactoryHelper.OpDeclaration(Gather.NAME)\n@@ -9509,1 +9509,1 @@\n-    @OpFactory.OpDeclaration(GatherElements.NAME)\n+    @OpFactoryHelper.OpDeclaration(GatherElements.NAME)\n@@ -9660,1 +9660,1 @@\n-    @OpFactory.OpDeclaration(GatherND.NAME)\n+    @OpFactoryHelper.OpDeclaration(GatherND.NAME)\n@@ -9810,1 +9810,1 @@\n-    @OpFactory.OpDeclaration(Gelu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Gelu.NAME)\n@@ -9955,1 +9955,1 @@\n-    @OpFactory.OpDeclaration(Gemm.NAME)\n+    @OpFactoryHelper.OpDeclaration(Gemm.NAME)\n@@ -10129,1 +10129,1 @@\n-    @OpFactory.OpDeclaration(GlobalAveragePool.NAME)\n+    @OpFactoryHelper.OpDeclaration(GlobalAveragePool.NAME)\n@@ -10243,1 +10243,1 @@\n-    @OpFactory.OpDeclaration(GlobalLpPool.NAME)\n+    @OpFactoryHelper.OpDeclaration(GlobalLpPool.NAME)\n@@ -10388,1 +10388,1 @@\n-    @OpFactory.OpDeclaration(GlobalMaxPool.NAME)\n+    @OpFactoryHelper.OpDeclaration(GlobalMaxPool.NAME)\n@@ -10502,1 +10502,1 @@\n-    @OpFactory.OpDeclaration(Gradient.NAME)\n+    @OpFactoryHelper.OpDeclaration(Gradient.NAME)\n@@ -10660,1 +10660,1 @@\n-    @OpFactory.OpDeclaration(Greater.NAME)\n+    @OpFactoryHelper.OpDeclaration(Greater.NAME)\n@@ -10780,1 +10780,1 @@\n-    @OpFactory.OpDeclaration(GreaterOrEqual.NAME)\n+    @OpFactoryHelper.OpDeclaration(GreaterOrEqual.NAME)\n@@ -10900,1 +10900,1 @@\n-    @OpFactory.OpDeclaration(GridSample.NAME)\n+    @OpFactoryHelper.OpDeclaration(GridSample.NAME)\n@@ -11063,1 +11063,1 @@\n-    @OpFactory.OpDeclaration(GroupNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(GroupNormalization.NAME)\n@@ -11230,1 +11230,1 @@\n-    @OpFactory.OpDeclaration(HammingWindow.NAME)\n+    @OpFactoryHelper.OpDeclaration(HammingWindow.NAME)\n@@ -11382,1 +11382,1 @@\n-    @OpFactory.OpDeclaration(HannWindow.NAME)\n+    @OpFactoryHelper.OpDeclaration(HannWindow.NAME)\n@@ -11534,1 +11534,1 @@\n-    @OpFactory.OpDeclaration(HardSigmoid.NAME)\n+    @OpFactoryHelper.OpDeclaration(HardSigmoid.NAME)\n@@ -11685,1 +11685,1 @@\n-    @OpFactory.OpDeclaration(HardSwish.NAME)\n+    @OpFactoryHelper.OpDeclaration(HardSwish.NAME)\n@@ -11799,1 +11799,1 @@\n-    @OpFactory.OpDeclaration(Hardmax.NAME)\n+    @OpFactoryHelper.OpDeclaration(Hardmax.NAME)\n@@ -11944,1 +11944,1 @@\n-    @OpFactory.OpDeclaration(Identity.NAME)\n+    @OpFactoryHelper.OpDeclaration(Identity.NAME)\n@@ -12058,1 +12058,1 @@\n-    @OpFactory.OpDeclaration(ImageDecoder.NAME)\n+    @OpFactoryHelper.OpDeclaration(ImageDecoder.NAME)\n@@ -12204,1 +12204,1 @@\n-    @OpFactory.OpDeclaration(Imputer.NAME)\n+    @OpFactoryHelper.OpDeclaration(Imputer.NAME)\n@@ -12367,1 +12367,1 @@\n-    @OpFactory.OpDeclaration(InstanceNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(InstanceNormalization.NAME)\n@@ -12522,1 +12522,1 @@\n-    @OpFactory.OpDeclaration(IsInf.NAME)\n+    @OpFactoryHelper.OpDeclaration(IsInf.NAME)\n@@ -12674,1 +12674,1 @@\n-    @OpFactory.OpDeclaration(IsNaN.NAME)\n+    @OpFactoryHelper.OpDeclaration(IsNaN.NAME)\n@@ -12789,1 +12789,1 @@\n-    @OpFactory.OpDeclaration(LRN.NAME)\n+    @OpFactoryHelper.OpDeclaration(LRN.NAME)\n@@ -12952,1 +12952,1 @@\n-    @OpFactory.OpDeclaration(LSTM.NAME)\n+    @OpFactoryHelper.OpDeclaration(LSTM.NAME)\n@@ -13182,1 +13182,1 @@\n-    @OpFactory.OpDeclaration(LabelEncoder.NAME)\n+    @OpFactoryHelper.OpDeclaration(LabelEncoder.NAME)\n@@ -13394,1 +13394,1 @@\n-    @OpFactory.OpDeclaration(LayerNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(LayerNormalization.NAME)\n@@ -13565,1 +13565,1 @@\n-    @OpFactory.OpDeclaration(LeakyRelu.NAME)\n+    @OpFactoryHelper.OpDeclaration(LeakyRelu.NAME)\n@@ -13710,1 +13710,1 @@\n-    @OpFactory.OpDeclaration(Less.NAME)\n+    @OpFactoryHelper.OpDeclaration(Less.NAME)\n@@ -13830,1 +13830,1 @@\n-    @OpFactory.OpDeclaration(LessOrEqual.NAME)\n+    @OpFactoryHelper.OpDeclaration(LessOrEqual.NAME)\n@@ -13950,1 +13950,1 @@\n-    @OpFactory.OpDeclaration(LinearClassifier.NAME)\n+    @OpFactoryHelper.OpDeclaration(LinearClassifier.NAME)\n@@ -14127,1 +14127,1 @@\n-    @OpFactory.OpDeclaration(LinearRegressor.NAME)\n+    @OpFactoryHelper.OpDeclaration(LinearRegressor.NAME)\n@@ -14290,1 +14290,1 @@\n-    @OpFactory.OpDeclaration(Log.NAME)\n+    @OpFactoryHelper.OpDeclaration(Log.NAME)\n@@ -14404,1 +14404,1 @@\n-    @OpFactory.OpDeclaration(LogSoftmax.NAME)\n+    @OpFactoryHelper.OpDeclaration(LogSoftmax.NAME)\n@@ -14549,1 +14549,1 @@\n-    @OpFactory.OpDeclaration(LpNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(LpNormalization.NAME)\n@@ -14700,1 +14700,1 @@\n-    @OpFactory.OpDeclaration(LpPool.NAME)\n+    @OpFactoryHelper.OpDeclaration(LpPool.NAME)\n@@ -14881,1 +14881,1 @@\n-    @OpFactory.OpDeclaration(MatMul.NAME)\n+    @OpFactoryHelper.OpDeclaration(MatMul.NAME)\n@@ -15000,1 +15000,1 @@\n-    @OpFactory.OpDeclaration(MatMulInteger.NAME)\n+    @OpFactoryHelper.OpDeclaration(MatMulInteger.NAME)\n@@ -15133,1 +15133,1 @@\n-    @OpFactory.OpDeclaration(Max.NAME)\n+    @OpFactoryHelper.OpDeclaration(Max.NAME)\n@@ -15247,1 +15247,1 @@\n-    @OpFactory.OpDeclaration(MaxPool.NAME)\n+    @OpFactoryHelper.OpDeclaration(MaxPool.NAME)\n@@ -15430,1 +15430,1 @@\n-    @OpFactory.OpDeclaration(MaxRoiPool.NAME)\n+    @OpFactoryHelper.OpDeclaration(MaxRoiPool.NAME)\n@@ -15586,1 +15586,1 @@\n-    @OpFactory.OpDeclaration(MaxUnpool.NAME)\n+    @OpFactoryHelper.OpDeclaration(MaxUnpool.NAME)\n@@ -15755,1 +15755,1 @@\n-    @OpFactory.OpDeclaration(Mean.NAME)\n+    @OpFactoryHelper.OpDeclaration(Mean.NAME)\n@@ -15869,1 +15869,1 @@\n-    @OpFactory.OpDeclaration(MeanVarianceNormalization.NAME)\n+    @OpFactoryHelper.OpDeclaration(MeanVarianceNormalization.NAME)\n@@ -16014,1 +16014,1 @@\n-    @OpFactory.OpDeclaration(MelWeightMatrix.NAME)\n+    @OpFactoryHelper.OpDeclaration(MelWeightMatrix.NAME)\n@@ -16181,1 +16181,1 @@\n-    @OpFactory.OpDeclaration(Min.NAME)\n+    @OpFactoryHelper.OpDeclaration(Min.NAME)\n@@ -16295,1 +16295,1 @@\n-    @OpFactory.OpDeclaration(Mish.NAME)\n+    @OpFactoryHelper.OpDeclaration(Mish.NAME)\n@@ -16409,1 +16409,1 @@\n-    @OpFactory.OpDeclaration(Mod.NAME)\n+    @OpFactoryHelper.OpDeclaration(Mod.NAME)\n@@ -16559,1 +16559,1 @@\n-    @OpFactory.OpDeclaration(Momentum.NAME)\n+    @OpFactoryHelper.OpDeclaration(Momentum.NAME)\n@@ -16734,1 +16734,1 @@\n-    @OpFactory.OpDeclaration(Mul.NAME)\n+    @OpFactoryHelper.OpDeclaration(Mul.NAME)\n@@ -16853,1 +16853,1 @@\n-    @OpFactory.OpDeclaration(Multinomial.NAME)\n+    @OpFactoryHelper.OpDeclaration(Multinomial.NAME)\n@@ -17011,1 +17011,1 @@\n-    @OpFactory.OpDeclaration(Neg.NAME)\n+    @OpFactoryHelper.OpDeclaration(Neg.NAME)\n@@ -17125,1 +17125,1 @@\n-    @OpFactory.OpDeclaration(NegativeLogLikelihoodLoss.NAME)\n+    @OpFactoryHelper.OpDeclaration(NegativeLogLikelihoodLoss.NAME)\n@@ -17288,1 +17288,1 @@\n-    @OpFactory.OpDeclaration(NonMaxSuppression.NAME)\n+    @OpFactoryHelper.OpDeclaration(NonMaxSuppression.NAME)\n@@ -17441,1 +17441,1 @@\n-    @OpFactory.OpDeclaration(NonZero.NAME)\n+    @OpFactoryHelper.OpDeclaration(NonZero.NAME)\n@@ -17555,1 +17555,1 @@\n-    @OpFactory.OpDeclaration(Normalizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(Normalizer.NAME)\n@@ -17700,1 +17700,1 @@\n-    @OpFactory.OpDeclaration(Not.NAME)\n+    @OpFactoryHelper.OpDeclaration(Not.NAME)\n@@ -17814,1 +17814,1 @@\n-    @OpFactory.OpDeclaration(OneHot.NAME)\n+    @OpFactoryHelper.OpDeclaration(OneHot.NAME)\n@@ -17971,1 +17971,1 @@\n-    @OpFactory.OpDeclaration(OneHotEncoder.NAME)\n+    @OpFactoryHelper.OpDeclaration(OneHotEncoder.NAME)\n@@ -18128,1 +18128,1 @@\n-    @OpFactory.OpDeclaration(Optional.NAME)\n+    @OpFactoryHelper.OpDeclaration(Optional.NAME)\n@@ -18275,1 +18275,1 @@\n-    @OpFactory.OpDeclaration(OptionalGetElement.NAME)\n+    @OpFactoryHelper.OpDeclaration(OptionalGetElement.NAME)\n@@ -18390,1 +18390,1 @@\n-    @OpFactory.OpDeclaration(OptionalHasElement.NAME)\n+    @OpFactoryHelper.OpDeclaration(OptionalHasElement.NAME)\n@@ -18506,1 +18506,1 @@\n-    @OpFactory.OpDeclaration(Or.NAME)\n+    @OpFactoryHelper.OpDeclaration(Or.NAME)\n@@ -18626,1 +18626,1 @@\n-    @OpFactory.OpDeclaration(PRelu.NAME)\n+    @OpFactoryHelper.OpDeclaration(PRelu.NAME)\n@@ -18745,1 +18745,1 @@\n-    @OpFactory.OpDeclaration(Pad.NAME)\n+    @OpFactoryHelper.OpDeclaration(Pad.NAME)\n@@ -18908,1 +18908,1 @@\n-    @OpFactory.OpDeclaration(Pow.NAME)\n+    @OpFactoryHelper.OpDeclaration(Pow.NAME)\n@@ -19028,1 +19028,1 @@\n-    @OpFactory.OpDeclaration(QLinearConv.NAME)\n+    @OpFactoryHelper.OpDeclaration(QLinearConv.NAME)\n@@ -19247,1 +19247,1 @@\n-    @OpFactory.OpDeclaration(QLinearMatMul.NAME)\n+    @OpFactoryHelper.OpDeclaration(QLinearMatMul.NAME)\n@@ -19399,1 +19399,1 @@\n-    @OpFactory.OpDeclaration(QuantizeLinear.NAME)\n+    @OpFactoryHelper.OpDeclaration(QuantizeLinear.NAME)\n@@ -19574,1 +19574,1 @@\n-    @OpFactory.OpDeclaration(RNN.NAME)\n+    @OpFactoryHelper.OpDeclaration(RNN.NAME)\n@@ -19785,1 +19785,1 @@\n-    @OpFactory.OpDeclaration(RandomNormal.NAME)\n+    @OpFactoryHelper.OpDeclaration(RandomNormal.NAME)\n@@ -19929,1 +19929,1 @@\n-    @OpFactory.OpDeclaration(RandomNormalLike.NAME)\n+    @OpFactoryHelper.OpDeclaration(RandomNormalLike.NAME)\n@@ -20093,1 +20093,1 @@\n-    @OpFactory.OpDeclaration(RandomUniform.NAME)\n+    @OpFactoryHelper.OpDeclaration(RandomUniform.NAME)\n@@ -20237,1 +20237,1 @@\n-    @OpFactory.OpDeclaration(RandomUniformLike.NAME)\n+    @OpFactoryHelper.OpDeclaration(RandomUniformLike.NAME)\n@@ -20401,1 +20401,1 @@\n-    @OpFactory.OpDeclaration(Range.NAME)\n+    @OpFactoryHelper.OpDeclaration(Range.NAME)\n@@ -20525,1 +20525,1 @@\n-    @OpFactory.OpDeclaration(Reciprocal.NAME)\n+    @OpFactoryHelper.OpDeclaration(Reciprocal.NAME)\n@@ -20639,1 +20639,1 @@\n-    @OpFactory.OpDeclaration(ReduceL1.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceL1.NAME)\n@@ -20796,1 +20796,1 @@\n-    @OpFactory.OpDeclaration(ReduceL2.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceL2.NAME)\n@@ -20953,1 +20953,1 @@\n-    @OpFactory.OpDeclaration(ReduceLogSum.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceLogSum.NAME)\n@@ -21110,1 +21110,1 @@\n-    @OpFactory.OpDeclaration(ReduceLogSumExp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceLogSumExp.NAME)\n@@ -21267,1 +21267,1 @@\n-    @OpFactory.OpDeclaration(ReduceMax.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceMax.NAME)\n@@ -21424,1 +21424,1 @@\n-    @OpFactory.OpDeclaration(ReduceMean.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceMean.NAME)\n@@ -21581,1 +21581,1 @@\n-    @OpFactory.OpDeclaration(ReduceMin.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceMin.NAME)\n@@ -21738,1 +21738,1 @@\n-    @OpFactory.OpDeclaration(ReduceProd.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceProd.NAME)\n@@ -21895,1 +21895,1 @@\n-    @OpFactory.OpDeclaration(ReduceSum.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceSum.NAME)\n@@ -22052,1 +22052,1 @@\n-    @OpFactory.OpDeclaration(ReduceSumSquare.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceSumSquare.NAME)\n@@ -22209,1 +22209,1 @@\n-    @OpFactory.OpDeclaration(RegexFullMatch.NAME)\n+    @OpFactoryHelper.OpDeclaration(RegexFullMatch.NAME)\n@@ -22355,1 +22355,1 @@\n-    @OpFactory.OpDeclaration(Relu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Relu.NAME)\n@@ -22469,1 +22469,1 @@\n-    @OpFactory.OpDeclaration(Reshape.NAME)\n+    @OpFactoryHelper.OpDeclaration(Reshape.NAME)\n@@ -22619,1 +22619,1 @@\n-    @OpFactory.OpDeclaration(Resize.NAME)\n+    @OpFactoryHelper.OpDeclaration(Resize.NAME)\n@@ -22831,1 +22831,1 @@\n-    @OpFactory.OpDeclaration(ReverseSequence.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReverseSequence.NAME)\n@@ -22987,1 +22987,1 @@\n-    @OpFactory.OpDeclaration(RoiAlign.NAME)\n+    @OpFactoryHelper.OpDeclaration(RoiAlign.NAME)\n@@ -23173,1 +23173,1 @@\n-    @OpFactory.OpDeclaration(Round.NAME)\n+    @OpFactoryHelper.OpDeclaration(Round.NAME)\n@@ -23287,1 +23287,1 @@\n-    @OpFactory.OpDeclaration(STFT.NAME)\n+    @OpFactoryHelper.OpDeclaration(STFT.NAME)\n@@ -23450,1 +23450,1 @@\n-    @OpFactory.OpDeclaration(SVMClassifier.NAME)\n+    @OpFactoryHelper.OpDeclaration(SVMClassifier.NAME)\n@@ -23657,1 +23657,1 @@\n-    @OpFactory.OpDeclaration(SVMRegressor.NAME)\n+    @OpFactoryHelper.OpDeclaration(SVMRegressor.NAME)\n@@ -23844,1 +23844,1 @@\n-    @OpFactory.OpDeclaration(Scaler.NAME)\n+    @OpFactoryHelper.OpDeclaration(Scaler.NAME)\n@@ -23995,1 +23995,1 @@\n-    @OpFactory.OpDeclaration(Scatter.NAME)\n+    @OpFactoryHelper.OpDeclaration(Scatter.NAME)\n@@ -24151,1 +24151,1 @@\n-    @OpFactory.OpDeclaration(ScatterElements.NAME)\n+    @OpFactoryHelper.OpDeclaration(ScatterElements.NAME)\n@@ -24313,1 +24313,1 @@\n-    @OpFactory.OpDeclaration(ScatterND.NAME)\n+    @OpFactoryHelper.OpDeclaration(ScatterND.NAME)\n@@ -24468,1 +24468,1 @@\n-    @OpFactory.OpDeclaration(Selu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Selu.NAME)\n@@ -24619,1 +24619,1 @@\n-    @OpFactory.OpDeclaration(SequenceAt.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceAt.NAME)\n@@ -24740,1 +24740,1 @@\n-    @OpFactory.OpDeclaration(SequenceConstruct.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceConstruct.NAME)\n@@ -24855,1 +24855,1 @@\n-    @OpFactory.OpDeclaration(SequenceEmpty.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceEmpty.NAME)\n@@ -24975,1 +24975,1 @@\n-    @OpFactory.OpDeclaration(SequenceErase.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceErase.NAME)\n@@ -25096,1 +25096,1 @@\n-    @OpFactory.OpDeclaration(SequenceInsert.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceInsert.NAME)\n@@ -25223,1 +25223,1 @@\n-    @OpFactory.OpDeclaration(SequenceLength.NAME)\n+    @OpFactoryHelper.OpDeclaration(SequenceLength.NAME)\n@@ -25338,1 +25338,1 @@\n-    @OpFactory.OpDeclaration(Shape.NAME)\n+    @OpFactoryHelper.OpDeclaration(Shape.NAME)\n@@ -25490,1 +25490,1 @@\n-    @OpFactory.OpDeclaration(Shrink.NAME)\n+    @OpFactoryHelper.OpDeclaration(Shrink.NAME)\n@@ -25641,1 +25641,1 @@\n-    @OpFactory.OpDeclaration(Sigmoid.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sigmoid.NAME)\n@@ -25755,1 +25755,1 @@\n-    @OpFactory.OpDeclaration(Sign.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sign.NAME)\n@@ -25869,1 +25869,1 @@\n-    @OpFactory.OpDeclaration(Sin.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sin.NAME)\n@@ -25983,1 +25983,1 @@\n-    @OpFactory.OpDeclaration(Sinh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sinh.NAME)\n@@ -26097,1 +26097,1 @@\n-    @OpFactory.OpDeclaration(Size.NAME)\n+    @OpFactoryHelper.OpDeclaration(Size.NAME)\n@@ -26212,1 +26212,1 @@\n-    @OpFactory.OpDeclaration(Slice.NAME)\n+    @OpFactoryHelper.OpDeclaration(Slice.NAME)\n@@ -26349,1 +26349,1 @@\n-    @OpFactory.OpDeclaration(Softmax.NAME)\n+    @OpFactoryHelper.OpDeclaration(Softmax.NAME)\n@@ -26494,1 +26494,1 @@\n-    @OpFactory.OpDeclaration(SoftmaxCrossEntropyLoss.NAME)\n+    @OpFactoryHelper.OpDeclaration(SoftmaxCrossEntropyLoss.NAME)\n@@ -26658,1 +26658,1 @@\n-    @OpFactory.OpDeclaration(Softplus.NAME)\n+    @OpFactoryHelper.OpDeclaration(Softplus.NAME)\n@@ -26772,1 +26772,1 @@\n-    @OpFactory.OpDeclaration(Softsign.NAME)\n+    @OpFactoryHelper.OpDeclaration(Softsign.NAME)\n@@ -26886,1 +26886,1 @@\n-    @OpFactory.OpDeclaration(SpaceToDepth.NAME)\n+    @OpFactoryHelper.OpDeclaration(SpaceToDepth.NAME)\n@@ -27031,1 +27031,1 @@\n-    @OpFactory.OpDeclaration(Split.NAME)\n+    @OpFactoryHelper.OpDeclaration(Split.NAME)\n@@ -27188,1 +27188,1 @@\n-    @OpFactory.OpDeclaration(SplitToSequence.NAME)\n+    @OpFactoryHelper.OpDeclaration(SplitToSequence.NAME)\n@@ -27347,1 +27347,1 @@\n-    @OpFactory.OpDeclaration(Sqrt.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sqrt.NAME)\n@@ -27461,1 +27461,1 @@\n-    @OpFactory.OpDeclaration(Squeeze.NAME)\n+    @OpFactoryHelper.OpDeclaration(Squeeze.NAME)\n@@ -27581,1 +27581,1 @@\n-    @OpFactory.OpDeclaration(StringConcat.NAME)\n+    @OpFactoryHelper.OpDeclaration(StringConcat.NAME)\n@@ -27700,1 +27700,1 @@\n-    @OpFactory.OpDeclaration(StringNormalizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(StringNormalizer.NAME)\n@@ -27848,1 +27848,1 @@\n-    @OpFactory.OpDeclaration(StringSplit.NAME)\n+    @OpFactoryHelper.OpDeclaration(StringSplit.NAME)\n@@ -28002,1 +28002,1 @@\n-    @OpFactory.OpDeclaration(Sub.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sub.NAME)\n@@ -28121,1 +28121,1 @@\n-    @OpFactory.OpDeclaration(Sum.NAME)\n+    @OpFactoryHelper.OpDeclaration(Sum.NAME)\n@@ -28235,1 +28235,1 @@\n-    @OpFactory.OpDeclaration(Tan.NAME)\n+    @OpFactoryHelper.OpDeclaration(Tan.NAME)\n@@ -28349,1 +28349,1 @@\n-    @OpFactory.OpDeclaration(Tanh.NAME)\n+    @OpFactoryHelper.OpDeclaration(Tanh.NAME)\n@@ -28463,1 +28463,1 @@\n-    @OpFactory.OpDeclaration(TfIdfVectorizer.NAME)\n+    @OpFactoryHelper.OpDeclaration(TfIdfVectorizer.NAME)\n@@ -28657,1 +28657,1 @@\n-    @OpFactory.OpDeclaration(ThresholdedRelu.NAME)\n+    @OpFactoryHelper.OpDeclaration(ThresholdedRelu.NAME)\n@@ -28802,1 +28802,1 @@\n-    @OpFactory.OpDeclaration(Tile.NAME)\n+    @OpFactoryHelper.OpDeclaration(Tile.NAME)\n@@ -28922,1 +28922,1 @@\n-    @OpFactory.OpDeclaration(TopK.NAME)\n+    @OpFactoryHelper.OpDeclaration(TopK.NAME)\n@@ -29086,1 +29086,1 @@\n-    @OpFactory.OpDeclaration(Transpose.NAME)\n+    @OpFactoryHelper.OpDeclaration(Transpose.NAME)\n@@ -29231,1 +29231,1 @@\n-    @OpFactory.OpDeclaration(TreeEnsemble.NAME)\n+    @OpFactoryHelper.OpDeclaration(TreeEnsemble.NAME)\n@@ -29466,1 +29466,1 @@\n-    @OpFactory.OpDeclaration(TreeEnsembleClassifier.NAME)\n+    @OpFactoryHelper.OpDeclaration(TreeEnsembleClassifier.NAME)\n@@ -29733,1 +29733,1 @@\n-    @OpFactory.OpDeclaration(TreeEnsembleRegressor.NAME)\n+    @OpFactoryHelper.OpDeclaration(TreeEnsembleRegressor.NAME)\n@@ -29998,1 +29998,1 @@\n-    @OpFactory.OpDeclaration(Trilu.NAME)\n+    @OpFactoryHelper.OpDeclaration(Trilu.NAME)\n@@ -30149,1 +30149,1 @@\n-    @OpFactory.OpDeclaration(Unique.NAME)\n+    @OpFactoryHelper.OpDeclaration(Unique.NAME)\n@@ -30303,1 +30303,1 @@\n-    @OpFactory.OpDeclaration(Unsqueeze.NAME)\n+    @OpFactoryHelper.OpDeclaration(Unsqueeze.NAME)\n@@ -30422,1 +30422,1 @@\n-    @OpFactory.OpDeclaration(Upsample.NAME)\n+    @OpFactoryHelper.OpDeclaration(Upsample.NAME)\n@@ -30572,1 +30572,1 @@\n-    @OpFactory.OpDeclaration(Where.NAME)\n+    @OpFactoryHelper.OpDeclaration(Where.NAME)\n@@ -30697,1 +30697,1 @@\n-    @OpFactory.OpDeclaration(Xor.NAME)\n+    @OpFactoryHelper.OpDeclaration(Xor.NAME)\n@@ -30817,1 +30817,1 @@\n-    @OpFactory.OpDeclaration(ZipMap.NAME)\n+    @OpFactoryHelper.OpDeclaration(ZipMap.NAME)\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OnnxOps.java","additions":212,"deletions":212,"binary":false,"changes":424,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+package oracle.code.onnx.ir;\n+\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.extern.ExternalizedOp;\n+import jdk.incubator.code.extern.OpFactory;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public final class OpFactoryHelper {\n+\n+    \/**\n+     * An operation declaration annotation.\n+     * <p>\n+     * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n+     * that can be declared as this attribute's value.\n+     * <p>\n+     * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n+     *\/\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE)\n+    public @interface OpDeclaration {\n+        \/**\n+         * {@return the operation name}\n+         *\/\n+        String value();\n+    }\n+\n+    \/**\n+     * A class value for lazily computing an operation factory for {@link Op operation} classes\n+     * annotated with {@link OpFactoryHelper.OpDeclaration} and enclosed within a given class to compute over.\n+     * <p>\n+     * Each enclosed class annotated with {@code OpDeclaration} must declare a public static method named {@code create}\n+     * with one parameter type of {@link ExternalizedOp} and return type that is the concrete class type.\n+     * Alternatively, the concrete class must declare public constructor with one parameter type of\n+     * {@link ExternalizedOp}.\n+     *\/\n+    public static final ClassValue<OpFactory> OP_FACTORY = new ClassValue<>() {\n+        @Override\n+        protected OpFactory computeValue(Class<?> c) {\n+            \/\/ @@@ See https:\/\/bugs.openjdk.org\/browse\/JDK-8321207\n+            final Map<String, Class<? extends Op>> opMapping = createOpMapping(c);\n+\n+            return def -> {\n+                var opClass = opMapping.get(def.name());\n+                if (opClass == null) {\n+                    return null;\n+                }\n+\n+                Op op = constructOp(opClass, def);\n+                \/\/ Set location if available\n+                if (op != null && def.location() != null) {\n+                    op.setLocation(def.location());\n+                }\n+                return op;\n+            };\n+        }\n+    };\n+\n+    private static Map<String, Class<? extends Op>> createOpMapping(Class<?> opClasses) {\n+        Map<String, Class<? extends Op>> mapping = new HashMap<>();\n+        for (Class<?> opClass : opClasses.getNestMembers()) {\n+            if (opClass.isAnnotationPresent(OpDeclaration.class)) {\n+                if (!Modifier.isPublic(opClass.getModifiers())) {\n+                    throw new InternalError(\"Operation class not public: \" + opClass.getName());\n+                }\n+\n+                if (!Op.class.isAssignableFrom(opClass)) {\n+                    throw new InternalError(\"Operation class is not assignable to Op: \" + opClass);\n+                }\n+\n+                MethodHandle handle = getOpConstructorMethodHandle(opClass);\n+                if (handle == null) {\n+                    throw new InternalError(\"Operation constructor for operation class not found: \" + opClass.getName());\n+                }\n+\n+                if (!Op.class.isAssignableFrom(handle.type().returnType())) {\n+                    throw new InternalError(\"Operation constructor does not return an Op: \" + handle);\n+                }\n+\n+                String opName = opClass.getAnnotation(OpDeclaration.class).value();\n+                @SuppressWarnings(\"unchecked\")\n+                var opClassCast = (Class<Op>) opClass;\n+                mapping.put(opName, opClassCast);\n+            }\n+        }\n+        return mapping;\n+    }\n+\n+    private static MethodHandle getOpConstructorMethodHandle(Class<?> opClass) {\n+        Method method = null;\n+        try {\n+            method = opClass.getMethod(\"create\", ExternalizedOp.class);\n+        } catch (NoSuchMethodException e) {\n+        }\n+\n+        if (method != null) {\n+            if (!Modifier.isStatic(method.getModifiers())) {\n+                throw new InternalError(\"Operation constructor is not a static method: \" + method);\n+            }\n+\n+            try {\n+                return MethodHandles.publicLookup().unreflect(method);\n+            } catch (IllegalAccessException e) {\n+                throw new InternalError(\"Inaccessible operation constructor for operation: \" +\n+                        method);\n+            }\n+        }\n+\n+        Constructor<?> constructor;\n+        try {\n+            constructor = opClass.getConstructor(ExternalizedOp.class);\n+        } catch (NoSuchMethodException e) {\n+            return null;\n+        }\n+\n+        try {\n+            return MethodHandles.publicLookup().unreflectConstructor(constructor);\n+        } catch (IllegalAccessException e) {\n+            throw new InternalError(\"Inaccessible operation constructor for operation: \" +\n+                    constructor);\n+        }\n+    }\n+\n+    private static Op constructOp(Class<? extends Op> opClass, ExternalizedOp opDef) {\n+        class Enclosed {\n+            private static final ClassValue<Function<ExternalizedOp, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n+                @Override\n+                protected Function<ExternalizedOp, Op> computeValue(Class<?> opClass) {\n+                    final MethodHandle opConstructorMH = getOpConstructorMethodHandle(opClass);\n+                    assert opConstructorMH != null;\n+\n+                    return operationDefinition -> {\n+                        try {\n+                            return (Op) opConstructorMH.invoke(operationDefinition);\n+                        } catch (RuntimeException | Error e) {\n+                            throw e;\n+                        } catch (Throwable t) {\n+                            throw new RuntimeException(t);\n+                        }\n+                    };\n+                }\n+            };\n+        }\n+        return Enclosed.OP_CONSTRUCTOR.get(opClass).apply(opDef);\n+    }\n+}\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/ir\/OpFactoryHelper.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.incubator.code.dialect.core.TupleType;\n@@ -56,4 +55,1 @@\n-import oracle.code.onnx.ir.ExplicitOnnxOps;\n-import oracle.code.onnx.ir.OnnxOp;\n-import oracle.code.onnx.ir.OnnxOps;\n-import oracle.code.onnx.ir.OnnxType;\n+import oracle.code.onnx.ir.*;\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/proto\/OnnxModelTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,136 +0,0 @@\n-package oracle.code.onnx.proto;\n-\n-import jdk.incubator.code.Op;\n-import jdk.incubator.code.extern.ExternalizedOp;\n-import jdk.incubator.code.extern.OpFactory;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.function.Function;\n-\n-public final class OpFactoryHelper {\n-\n-    \/**\n-     * A class value for lazily computing an operation factory for {@link Op operation} classes\n-     * annotated with {@link OpFactory.OpDeclaration} and enclosed within a given class to compute over.\n-     * <p>\n-     * Each enclosed class annotated with {@code OpDeclaration} must declare a public static method named {@code create}\n-     * with one parameter type of {@link ExternalizedOp} and return type that is the concrete class type.\n-     * Alternatively, the concrete class must declare public constructor with one parameter type of\n-     * {@link ExternalizedOp}.\n-     *\/\n-    static final ClassValue<OpFactory> OP_FACTORY = new ClassValue<>() {\n-        @Override\n-        protected OpFactory computeValue(Class<?> c) {\n-            \/\/ @@@ See https:\/\/bugs.openjdk.org\/browse\/JDK-8321207\n-            final Map<String, Class<? extends Op>> opMapping = createOpMapping(c);\n-\n-            return def -> {\n-                var opClass = opMapping.get(def.name());\n-                if (opClass == null) {\n-                    return null;\n-                }\n-\n-                Op op = constructOp(opClass, def);\n-                \/\/ Set location if available\n-                if (op != null && def.location() != null) {\n-                    op.setLocation(def.location());\n-                }\n-                return op;\n-            };\n-        }\n-    };\n-\n-    private static Map<String, Class<? extends Op>> createOpMapping(Class<?> opClasses) {\n-        Map<String, Class<? extends Op>> mapping = new HashMap<>();\n-        for (Class<?> opClass : opClasses.getNestMembers()) {\n-            if (opClass.isAnnotationPresent(OpFactory.OpDeclaration.class)) {\n-                if (!Modifier.isPublic(opClass.getModifiers())) {\n-                    throw new InternalError(\"Operation class not public: \" + opClass.getName());\n-                }\n-\n-                if (!Op.class.isAssignableFrom(opClass)) {\n-                    throw new InternalError(\"Operation class is not assignable to Op: \" + opClass);\n-                }\n-\n-                MethodHandle handle = getOpConstructorMethodHandle(opClass);\n-                if (handle == null) {\n-                    throw new InternalError(\"Operation constructor for operation class not found: \" + opClass.getName());\n-                }\n-\n-                if (!Op.class.isAssignableFrom(handle.type().returnType())) {\n-                    throw new InternalError(\"Operation constructor does not return an Op: \" + handle);\n-                }\n-\n-                String opName = opClass.getAnnotation(OpFactory.OpDeclaration.class).value();\n-                @SuppressWarnings(\"unchecked\")\n-                var opClassCast = (Class<Op>) opClass;\n-                mapping.put(opName, opClassCast);\n-            }\n-        }\n-        return mapping;\n-    }\n-\n-    private static MethodHandle getOpConstructorMethodHandle(Class<?> opClass) {\n-        Method method = null;\n-        try {\n-            method = opClass.getMethod(\"create\", ExternalizedOp.class);\n-        } catch (NoSuchMethodException e) {\n-        }\n-\n-        if (method != null) {\n-            if (!Modifier.isStatic(method.getModifiers())) {\n-                throw new InternalError(\"Operation constructor is not a static method: \" + method);\n-            }\n-\n-            try {\n-                return MethodHandles.publicLookup().unreflect(method);\n-            } catch (IllegalAccessException e) {\n-                throw new InternalError(\"Inaccessible operation constructor for operation: \" +\n-                        method);\n-            }\n-        }\n-\n-        Constructor<?> constructor;\n-        try {\n-            constructor = opClass.getConstructor(ExternalizedOp.class);\n-        } catch (NoSuchMethodException e) {\n-            return null;\n-        }\n-\n-        try {\n-            return MethodHandles.publicLookup().unreflectConstructor(constructor);\n-        } catch (IllegalAccessException e) {\n-            throw new InternalError(\"Inaccessible operation constructor for operation: \" +\n-                    constructor);\n-        }\n-    }\n-\n-    private static Op constructOp(Class<? extends Op> opClass, ExternalizedOp opDef) {\n-        class Enclosed {\n-            private static final ClassValue<Function<ExternalizedOp, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n-                @Override\n-                protected Function<ExternalizedOp, Op> computeValue(Class<?> opClass) {\n-                    final MethodHandle opConstructorMH = getOpConstructorMethodHandle(opClass);\n-                    assert opConstructorMH != null;\n-\n-                    return operationDefinition -> {\n-                        try {\n-                            return (Op) opConstructorMH.invoke(operationDefinition);\n-                        } catch (RuntimeException | Error e) {\n-                            throw e;\n-                        } catch (Throwable t) {\n-                            throw new RuntimeException(t);\n-                        }\n-                    };\n-                }\n-            };\n-        }\n-        return Enclosed.OP_CONSTRUCTOR.get(opClass).apply(opDef);\n-    }\n-}\n","filename":"cr-examples\/onnx\/src\/test\/java\/oracle\/code\/onnx\/proto\/OpFactoryHelper.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"},{"patch":"@@ -66,1 +66,1 @@\n-    @OpFactory.OpDeclaration(ConstantOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConstantOp.NAME)\n@@ -143,1 +143,1 @@\n-    @OpFactory.OpDeclaration(AddOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(AddOp.NAME)\n@@ -165,1 +165,1 @@\n-    @OpFactory.OpDeclaration(SubOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(SubOp.NAME)\n@@ -187,1 +187,1 @@\n-    @OpFactory.OpDeclaration(MulOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(MulOp.NAME)\n@@ -209,1 +209,1 @@\n-    @OpFactory.OpDeclaration(DivOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(DivOp.NAME)\n@@ -231,1 +231,1 @@\n-    @OpFactory.OpDeclaration(RemOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(RemOp.NAME)\n@@ -253,1 +253,1 @@\n-    @OpFactory.OpDeclaration(AndOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(AndOp.NAME)\n@@ -275,1 +275,1 @@\n-    @OpFactory.OpDeclaration(MaxOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(MaxOp.NAME)\n@@ -298,1 +298,1 @@\n-    @OpFactory.OpDeclaration(MinOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(MinOp.NAME)\n@@ -321,1 +321,1 @@\n-    @OpFactory.OpDeclaration(ExpOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ExpOp.NAME)\n@@ -344,1 +344,1 @@\n-    @OpFactory.OpDeclaration(ExpOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ExpOp.NAME)\n@@ -366,1 +366,1 @@\n-    @OpFactory.OpDeclaration(CompareOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(CompareOp.NAME)\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ArithMathOps.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -7,0 +7,4 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n@@ -18,0 +22,17 @@\n+    \/**\n+     * An operation declaration annotation.\n+     * <p>\n+     * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n+     * that can be declared as this attribute's value.\n+     * <p>\n+     * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n+     *\/\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE)\n+    public @interface OpDeclaration {\n+        \/**\n+         * {@return the operation name}\n+         *\/\n+        String value();\n+    }\n+\n@@ -20,1 +41,1 @@\n-     * annotated with {@link OpFactory.OpDeclaration} and enclosed within a given class to compute over.\n+     * annotated with {@link OpFactoryHelper.OpDeclaration} and enclosed within a given class to compute over.\n@@ -52,1 +73,1 @@\n-            if (opClass.isAnnotationPresent(OpFactory.OpDeclaration.class)) {\n+            if (opClass.isAnnotationPresent(OpDeclaration.class)) {\n@@ -70,1 +91,1 @@\n-                String opName = opClass.getAnnotation(OpFactory.OpDeclaration.class).value();\n+                String opName = opClass.getAnnotation(OpDeclaration.class).value();\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/OpFactoryHelper.java","additions":24,"deletions":3,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    @OpFactory.OpDeclaration(ForOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ForOp.NAME)\n@@ -111,1 +111,1 @@\n-    @OpFactory.OpDeclaration(YieldOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(YieldOp.NAME)\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/SCFOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    @OpFactory.OpDeclaration(ModuleOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ModuleOp.NAME)\n@@ -138,1 +138,1 @@\n-    @OpFactory.OpDeclaration(FuncOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(FuncOp.NAME)\n@@ -250,1 +250,1 @@\n-    @OpFactory.OpDeclaration(CallOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(CallOp.NAME)\n@@ -300,1 +300,1 @@\n-    @OpFactory.OpDeclaration(ReduceOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceOp.NAME)\n@@ -385,1 +385,1 @@\n-    @OpFactory.OpDeclaration(ReduceReturnOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReduceReturnOp.NAME)\n@@ -407,1 +407,1 @@\n-    @OpFactory.OpDeclaration(GetProgramIdOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(GetProgramIdOp.NAME)\n@@ -456,1 +456,1 @@\n-    @OpFactory.OpDeclaration(MakeRangeOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(MakeRangeOp.NAME)\n@@ -517,1 +517,1 @@\n-    @OpFactory.OpDeclaration(ExpandOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ExpandOp.NAME)\n@@ -566,1 +566,1 @@\n-    @OpFactory.OpDeclaration(SplatOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(SplatOp.NAME)\n@@ -588,1 +588,1 @@\n-    @OpFactory.OpDeclaration(BroadcastOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(BroadcastOp.NAME)\n@@ -610,1 +610,1 @@\n-    @OpFactory.OpDeclaration(AddPtrOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(AddPtrOp.NAME)\n@@ -632,1 +632,1 @@\n-    @OpFactory.OpDeclaration(LoadOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(LoadOp.NAME)\n@@ -658,1 +658,1 @@\n-    @OpFactory.OpDeclaration(StoreOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(StoreOp.NAME)\n@@ -680,1 +680,1 @@\n-    @OpFactory.OpDeclaration(ReturnOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ReturnOp.NAME)\n@@ -706,1 +706,1 @@\n-    @OpFactory.OpDeclaration(DotOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(DotOp.NAME)\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    @OpFactory.OpDeclaration(ConsumeOp.NAME)\n+    @OpFactoryHelper.OpDeclaration(ConsumeOp.NAME)\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTestOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.incubator.code.extern.OpFactory;\n@@ -34,0 +33,2 @@\n+import jdk.incubator.code.internal.OpDeclaration;\n+\n@@ -78,1 +79,1 @@\n-    @OpFactory.OpDeclaration(SlotLoadOp.NAME)\n+    @OpDeclaration(SlotLoadOp.NAME)\n@@ -125,1 +126,1 @@\n-    @OpFactory.OpDeclaration(SlotStoreOp.NAME)\n+    @OpDeclaration(SlotStoreOp.NAME)\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/SlotOp.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.incubator.code.internal.OpDeclaration;\n@@ -57,1 +58,1 @@\n-    @OpFactory.OpDeclaration(FuncOp.NAME)\n+    @OpDeclaration(FuncOp.NAME)\n@@ -171,1 +172,1 @@\n-    @OpFactory.OpDeclaration(FuncCallOp.NAME)\n+    @OpDeclaration(FuncCallOp.NAME)\n@@ -227,1 +228,1 @@\n-    @OpFactory.OpDeclaration(ModuleOp.NAME)\n+    @OpDeclaration(ModuleOp.NAME)\n@@ -314,1 +315,1 @@\n-    @OpFactory.OpDeclaration(QuotedOp.NAME)\n+    @OpDeclaration(QuotedOp.NAME)\n@@ -389,1 +390,1 @@\n-    @OpFactory.OpDeclaration(ClosureOp.NAME)\n+    @OpDeclaration(ClosureOp.NAME)\n@@ -473,1 +474,1 @@\n-    @OpFactory.OpDeclaration(ClosureCallOp.NAME)\n+    @OpDeclaration(ClosureCallOp.NAME)\n@@ -506,1 +507,1 @@\n-    @OpFactory.OpDeclaration(ReturnOp.NAME)\n+    @OpDeclaration(ReturnOp.NAME)\n@@ -552,1 +553,1 @@\n-    @OpFactory.OpDeclaration(UnreachableOp.NAME)\n+    @OpDeclaration(UnreachableOp.NAME)\n@@ -590,1 +591,1 @@\n-    @OpFactory.OpDeclaration(YieldOp.NAME)\n+    @OpDeclaration(YieldOp.NAME)\n@@ -640,1 +641,1 @@\n-    @OpFactory.OpDeclaration(BranchOp.NAME)\n+    @OpDeclaration(BranchOp.NAME)\n@@ -694,1 +695,1 @@\n-    @OpFactory.OpDeclaration(ConditionalBranchOp.NAME)\n+    @OpDeclaration(ConditionalBranchOp.NAME)\n@@ -755,1 +756,1 @@\n-    @OpFactory.OpDeclaration(ConstantOp.NAME)\n+    @OpDeclaration(ConstantOp.NAME)\n@@ -868,1 +869,1 @@\n-    @OpFactory.OpDeclaration(VarOp.NAME)\n+    @OpDeclaration(VarOp.NAME)\n@@ -999,1 +1000,1 @@\n-        @OpFactory.OpDeclaration(VarLoadOp.NAME)\n+        @OpDeclaration(VarLoadOp.NAME)\n@@ -1036,1 +1037,1 @@\n-        @OpFactory.OpDeclaration(VarStoreOp.NAME)\n+        @OpDeclaration(VarStoreOp.NAME)\n@@ -1085,1 +1086,1 @@\n-    @OpFactory.OpDeclaration(TupleOp.NAME)\n+    @OpDeclaration(TupleOp.NAME)\n@@ -1115,1 +1116,1 @@\n-    @OpFactory.OpDeclaration(TupleLoadOp.NAME)\n+    @OpDeclaration(TupleLoadOp.NAME)\n@@ -1176,1 +1177,1 @@\n-    @OpFactory.OpDeclaration(TupleWithOp.NAME)\n+    @OpDeclaration(TupleWithOp.NAME)\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.incubator.code.internal.OpDeclaration;\n@@ -149,1 +150,1 @@\n-    @OpFactory.OpDeclaration(LambdaOp.NAME)\n+    @OpDeclaration(LambdaOp.NAME)\n@@ -373,1 +374,1 @@\n-    @OpFactory.OpDeclaration(ThrowOp.NAME)\n+    @OpDeclaration(ThrowOp.NAME)\n@@ -412,1 +413,1 @@\n-    @OpFactory.OpDeclaration(AssertOp.NAME)\n+    @OpDeclaration(AssertOp.NAME)\n@@ -476,1 +477,1 @@\n-        @OpFactory.OpDeclaration(MonitorEnterOp.NAME)\n+        @OpDeclaration(MonitorEnterOp.NAME)\n@@ -505,1 +506,1 @@\n-        @OpFactory.OpDeclaration(MonitorExitOp.NAME)\n+        @OpDeclaration(MonitorExitOp.NAME)\n@@ -535,1 +536,1 @@\n-    @OpFactory.OpDeclaration(InvokeOp.NAME)\n+    @OpDeclaration(InvokeOp.NAME)\n@@ -705,1 +706,1 @@\n-    @OpFactory.OpDeclaration(ConvOp.NAME)\n+    @OpDeclaration(ConvOp.NAME)\n@@ -742,1 +743,1 @@\n-    @OpFactory.OpDeclaration(NewOp.NAME)\n+    @OpDeclaration(NewOp.NAME)\n@@ -868,1 +869,1 @@\n-        @OpFactory.OpDeclaration(FieldLoadOp.NAME)\n+        @OpDeclaration(FieldLoadOp.NAME)\n@@ -928,1 +929,1 @@\n-        @OpFactory.OpDeclaration(FieldStoreOp.NAME)\n+        @OpDeclaration(FieldStoreOp.NAME)\n@@ -981,1 +982,1 @@\n-    @OpFactory.OpDeclaration(ArrayLengthOp.NAME)\n+    @OpDeclaration(ArrayLengthOp.NAME)\n@@ -1038,1 +1039,1 @@\n-        @OpFactory.OpDeclaration(ArrayLoadOp.NAME)\n+        @OpDeclaration(ArrayLoadOp.NAME)\n@@ -1082,1 +1083,1 @@\n-        @OpFactory.OpDeclaration(ArrayStoreOp.NAME)\n+        @OpDeclaration(ArrayStoreOp.NAME)\n@@ -1119,1 +1120,1 @@\n-    @OpFactory.OpDeclaration(InstanceOfOp.NAME)\n+    @OpDeclaration(InstanceOfOp.NAME)\n@@ -1175,1 +1176,1 @@\n-    @OpFactory.OpDeclaration(CastOp.NAME)\n+    @OpDeclaration(CastOp.NAME)\n@@ -1234,1 +1235,1 @@\n-    @OpFactory.OpDeclaration(ExceptionRegionEnter.NAME)\n+    @OpDeclaration(ExceptionRegionEnter.NAME)\n@@ -1292,1 +1293,1 @@\n-    @OpFactory.OpDeclaration(ExceptionRegionExit.NAME)\n+    @OpDeclaration(ExceptionRegionExit.NAME)\n@@ -1349,1 +1350,1 @@\n-    @OpFactory.OpDeclaration(ConcatOp.NAME)\n+    @OpDeclaration(ConcatOp.NAME)\n@@ -1466,1 +1467,1 @@\n-    @OpFactory.OpDeclaration(AddOp.NAME)\n+    @OpDeclaration(AddOp.NAME)\n@@ -1491,1 +1492,1 @@\n-    @OpFactory.OpDeclaration(SubOp.NAME)\n+    @OpDeclaration(SubOp.NAME)\n@@ -1516,1 +1517,1 @@\n-    @OpFactory.OpDeclaration(MulOp.NAME)\n+    @OpDeclaration(MulOp.NAME)\n@@ -1541,1 +1542,1 @@\n-    @OpFactory.OpDeclaration(DivOp.NAME)\n+    @OpDeclaration(DivOp.NAME)\n@@ -1566,1 +1567,1 @@\n-    @OpFactory.OpDeclaration(ModOp.NAME)\n+    @OpDeclaration(ModOp.NAME)\n@@ -1592,1 +1593,1 @@\n-    @OpFactory.OpDeclaration(OrOp.NAME)\n+    @OpDeclaration(OrOp.NAME)\n@@ -1618,1 +1619,1 @@\n-    @OpFactory.OpDeclaration(AndOp.NAME)\n+    @OpDeclaration(AndOp.NAME)\n@@ -1644,1 +1645,1 @@\n-    @OpFactory.OpDeclaration(XorOp.NAME)\n+    @OpDeclaration(XorOp.NAME)\n@@ -1669,1 +1670,1 @@\n-    @OpFactory.OpDeclaration(LshlOp.NAME)\n+    @OpDeclaration(LshlOp.NAME)\n@@ -1694,1 +1695,1 @@\n-    @OpFactory.OpDeclaration(AshrOp.NAME)\n+    @OpDeclaration(AshrOp.NAME)\n@@ -1719,1 +1720,1 @@\n-    @OpFactory.OpDeclaration(LshrOp.NAME)\n+    @OpDeclaration(LshrOp.NAME)\n@@ -1744,1 +1745,1 @@\n-    @OpFactory.OpDeclaration(NegOp.NAME)\n+    @OpDeclaration(NegOp.NAME)\n@@ -1769,1 +1770,1 @@\n-    @OpFactory.OpDeclaration(ComplOp.NAME)\n+    @OpDeclaration(ComplOp.NAME)\n@@ -1794,1 +1795,1 @@\n-    @OpFactory.OpDeclaration(NotOp.NAME)\n+    @OpDeclaration(NotOp.NAME)\n@@ -1820,1 +1821,1 @@\n-    @OpFactory.OpDeclaration(EqOp.NAME)\n+    @OpDeclaration(EqOp.NAME)\n@@ -1846,1 +1847,1 @@\n-    @OpFactory.OpDeclaration(NeqOp.NAME)\n+    @OpDeclaration(NeqOp.NAME)\n@@ -1871,1 +1872,1 @@\n-    @OpFactory.OpDeclaration(GtOp.NAME)\n+    @OpDeclaration(GtOp.NAME)\n@@ -1897,1 +1898,1 @@\n-    @OpFactory.OpDeclaration(GeOp.NAME)\n+    @OpDeclaration(GeOp.NAME)\n@@ -1923,1 +1924,1 @@\n-    @OpFactory.OpDeclaration(LtOp.NAME)\n+    @OpDeclaration(LtOp.NAME)\n@@ -1949,1 +1950,1 @@\n-    @OpFactory.OpDeclaration(LeOp.NAME)\n+    @OpDeclaration(LeOp.NAME)\n@@ -2058,1 +2059,1 @@\n-    @OpFactory.OpDeclaration(JavaBreakOp.NAME)\n+    @OpDeclaration(JavaBreakOp.NAME)\n@@ -2088,1 +2089,1 @@\n-    @OpFactory.OpDeclaration(JavaContinueOp.NAME)\n+    @OpDeclaration(JavaContinueOp.NAME)\n@@ -2139,1 +2140,1 @@\n-    @OpFactory.OpDeclaration(JavaYieldOp.NAME)\n+    @OpDeclaration(JavaYieldOp.NAME)\n@@ -2217,1 +2218,1 @@\n-    @OpFactory.OpDeclaration(JavaBlockOp.NAME)\n+    @OpDeclaration(JavaBlockOp.NAME)\n@@ -2296,1 +2297,1 @@\n-    @OpFactory.OpDeclaration(JavaSynchronizedOp.NAME)\n+    @OpDeclaration(JavaSynchronizedOp.NAME)\n@@ -2464,1 +2465,1 @@\n-    @OpFactory.OpDeclaration(JavaLabeledOp.NAME)\n+    @OpDeclaration(JavaLabeledOp.NAME)\n@@ -2554,1 +2555,1 @@\n-    @OpFactory.OpDeclaration(JavaIfOp.NAME)\n+    @OpDeclaration(JavaIfOp.NAME)\n@@ -2918,1 +2919,1 @@\n-    @OpFactory.OpDeclaration(JavaSwitchExpressionOp.NAME)\n+    @OpDeclaration(JavaSwitchExpressionOp.NAME)\n@@ -2955,1 +2956,1 @@\n-    @OpFactory.OpDeclaration(JavaSwitchStatementOp.NAME)\n+    @OpDeclaration(JavaSwitchStatementOp.NAME)\n@@ -2987,1 +2988,1 @@\n-    @OpFactory.OpDeclaration(JavaSwitchFallthroughOp.NAME)\n+    @OpDeclaration(JavaSwitchFallthroughOp.NAME)\n@@ -3033,1 +3034,1 @@\n-    @OpFactory.OpDeclaration(JavaForOp.NAME)\n+    @OpDeclaration(JavaForOp.NAME)\n@@ -3291,1 +3292,1 @@\n-    @OpFactory.OpDeclaration(JavaEnhancedForOp.NAME)\n+    @OpDeclaration(JavaEnhancedForOp.NAME)\n@@ -3550,1 +3551,1 @@\n-    @OpFactory.OpDeclaration(JavaWhileOp.NAME)\n+    @OpDeclaration(JavaWhileOp.NAME)\n@@ -3693,1 +3694,1 @@\n-    @OpFactory.OpDeclaration(JavaDoWhileOp.NAME)\n+    @OpDeclaration(JavaDoWhileOp.NAME)\n@@ -3935,1 +3936,1 @@\n-    @OpFactory.OpDeclaration(JavaConditionalAndOp.NAME)\n+    @OpDeclaration(JavaConditionalAndOp.NAME)\n@@ -3990,1 +3991,1 @@\n-    @OpFactory.OpDeclaration(JavaConditionalOrOp.NAME)\n+    @OpDeclaration(JavaConditionalOrOp.NAME)\n@@ -4045,1 +4046,1 @@\n-    @OpFactory.OpDeclaration(JavaConditionalExpressionOp.NAME)\n+    @OpDeclaration(JavaConditionalExpressionOp.NAME)\n@@ -4146,1 +4147,1 @@\n-    @OpFactory.OpDeclaration(JavaTryOp.NAME)\n+    @OpDeclaration(JavaTryOp.NAME)\n@@ -4675,1 +4676,1 @@\n-        @OpFactory.OpDeclaration(TypePatternOp.NAME)\n+        @OpDeclaration(TypePatternOp.NAME)\n@@ -4738,1 +4739,1 @@\n-        @OpFactory.OpDeclaration(RecordPatternOp.NAME)\n+        @OpDeclaration(RecordPatternOp.NAME)\n@@ -4795,1 +4796,1 @@\n-        @OpFactory.OpDeclaration(MatchAllPatternOp.NAME)\n+        @OpDeclaration(MatchAllPatternOp.NAME)\n@@ -4829,1 +4830,1 @@\n-        @OpFactory.OpDeclaration(MatchOp.NAME)\n+        @OpDeclaration(MatchOp.NAME)\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":61,"deletions":60,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n@@ -41,17 +37,0 @@\n-    \/**\n-     * An operation declaration annotation.\n-     * <p>\n-     * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n-     * that can be declared as this attribute's value.\n-     * <p>\n-     * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n-     *\/\n-    @Retention(RetentionPolicy.RUNTIME)\n-    @Target(ElementType.TYPE)\n-    @interface OpDeclaration {\n-        \/**\n-         * {@return the operation name}\n-         *\/\n-        String value();\n-    }\n-\n@@ -105,1 +84,1 @@\n-\/\/    \/\/ Uncomment the following and execute like as follows to generate a factory method\n+\/\/    \/\/ Uncomment the following and execute using an exploded build like as follows to generate a factory method\n@@ -108,2 +87,7 @@\n-\/\/    static void main(String[] args) throws Throwable {\n-\/\/        Class<?> enclosingOpClass = Class.forName(args[0]);\n+\/\/    static void main(String[] args) {\n+\/\/        Class<?> enclosingOpClass = null;\n+\/\/        try {\n+\/\/            enclosingOpClass = Class.forName(args[0]);\n+\/\/        } catch (ClassNotFoundException e) {\n+\/\/            throw new RuntimeException(e);\n+\/\/        }\n@@ -113,1 +97,1 @@\n-\/\/    static void generateSwitchExpression(Class<?> enclosingOpClass, java.io.PrintStream out) throws Throwable {\n+\/\/    static void generateSwitchExpression(Class<?> enclosingOpClass, java.io.PrintStream out) {\n@@ -119,1 +103,1 @@\n-\/\/            if (!Modifier.isFinal(opClass.getModifiers())) {\n+\/\/            if (!java.lang.reflect.Modifier.isFinal(opClass.getModifiers())) {\n@@ -123,1 +107,1 @@\n-\/\/            OpDeclaration opDecl = opClass.getAnnotation(OpDeclaration.class);\n+\/\/            var opDecl = opClass.getAnnotation(jdk.incubator.code.internal.OpDeclaration.class);\n@@ -158,1 +142,1 @@\n-\/\/            e = opClass.getMethod(\"create\", ExternalizedOp.class);\n+\/\/            e = opClass.getDeclaredMethod(\"create\", ExternalizedOp.class);\n@@ -163,1 +147,1 @@\n-\/\/            if (!Modifier.isStatic(e.getModifiers())) {\n+\/\/            if (!java.lang.reflect.Modifier.isStatic(e.getModifiers())) {\n@@ -170,1 +154,1 @@\n-\/\/            e = opClass.getConstructor(ExternalizedOp.class);\n+\/\/            e = opClass.getDeclaredConstructor(ExternalizedOp.class);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpFactory.java","additions":14,"deletions":30,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+package jdk.incubator.code.internal;\n+\n+import jdk.incubator.code.Op;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * An operation declaration annotation.\n+ * <p>\n+ * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n+ * that can be declared as this attribute's value.\n+ * <p>\n+ * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n+ *\/\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface OpDeclaration {\n+    \/**\n+     * {@return the operation name}\n+     *\/\n+    String value();\n+}\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/OpDeclaration.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.code.extern.OpFactory;\n@@ -33,2 +34,0 @@\n-import static jdk.incubator.code.extern.OpFactory.*;\n-\n@@ -40,1 +39,0 @@\n-    @OpDeclaration(AnfLetOp.NAME)\n@@ -98,1 +96,0 @@\n-    @OpDeclaration(AnfLetRecOp.NAME)\n@@ -165,1 +162,0 @@\n-    @OpDeclaration(AnfIfOp.NAME)\n@@ -257,1 +253,0 @@\n-    @OpDeclaration(AnfFuncOp.NAME)\n@@ -349,1 +344,0 @@\n-    @OpDeclaration(AnfApply.NAME)\n@@ -385,1 +379,0 @@\n-    @OpDeclaration(AnfApplyStub.NAME)\n@@ -442,0 +435,18 @@\n+    static Op createOp(ExternalizedOp def) {\n+        Op op = switch (def.name()) {\n+            case \"anf.apply\" -> new AnfApply(def);\n+            case \"anf.apply.stub\" -> AnfApplyStub.create(def);\n+            case \"anf.func\" -> AnfFuncOp.create(def);\n+            case \"anf.if\" -> new AnfIfOp(def);\n+            case \"anf.let\" -> new AnfLetOp(def);\n+            case \"anf.letrec\" -> new AnfLetRecOp(def);\n+            default -> null;\n+        };\n+        if (op != null) {\n+            op.setLocation(def.location());\n+        }\n+        return op;\n+    }\n+\n+    static final OpFactory FACTORY = AnfDialect::createOp;\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/anf\/AnfDialect.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"}]}