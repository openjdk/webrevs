{"files":[{"patch":"@@ -269,0 +269,30 @@\n+\n+    @IR(\"\"\"\n+            func @\"f\" ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                      %2 : java.type:\"int\" = constant @1;\n+                      %3 : java.type:\"int\" = invoke %2 @java.ref:\"QuotableSubtypeTest::n(int):int\";\n+                      return;\n+                  };\n+                  return;\n+            };\n+            \"\"\")\n+    \/\/ the lambda model used to contain operation that perform unnecessary type conversion\n+    static QuotableRunnable QUOTED_RETURN_VOID = () -> {\n+        n(1);\n+    };\n+    static int n(int i) {\n+        return i;\n+    }\n+\n+    @IR(\"\"\"\n+            func @\"f\" ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                      %2 : java.type:\"java.lang.Object\" = new @java.ref:\"java.lang.Object::()\";\n+                      return;\n+                  };\n+                  return;\n+            };\n+            \"\"\")\n+    \/\/ the lambda model used to contain ReturnOp with a value, even though the lambda type is void\n+    static QuotableRunnable QUOTED_EXPRESSION_RETURN_VOID = () -> new Object();\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableSubtypeTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}