{"files":[{"patch":"@@ -1471,1 +1471,7 @@\n-            if (isQuoted || kind == FunctionalExpressionKind.QUOTED_STRUCTURAL) {\n+            \/\/ a lambda targeted to Quoted is always going to be quoted regardless of whether\n+            \/\/ we are visiting the method that contain it or we are visiting the lambda itself\n+            \/\/ a lambda target it to subtype of Quotable is only going to be quoted when we are visiting the lambda\n+            \/\/ also, we will not introduce nested quoting in case the top level lambda\n+            \/\/ contain other lambdas targeted for quoting\n+            boolean toQuote = (isQuoted && body == tree) || kind == FunctionalExpressionKind.QUOTED_STRUCTURAL;\n+            if (toQuote) {\n@@ -1523,1 +1529,1 @@\n-            if (isQuoted) {\n+            if (toQuote) {\n@@ -1529,1 +1535,1 @@\n-            if (isQuoted || kind == FunctionalExpressionKind.QUOTED_STRUCTURAL) {\n+            if (toQuote) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -299,0 +299,33 @@\n+\n+    @IR(\"\"\"\n+            func @\"f\" ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                      %2 : java.type:\"java.lang.Runnable\" = lambda ()java.type:\"void\" -> {\n+                          return;\n+                      };\n+                      %3 : Var<java.type:\"java.lang.Runnable\"> = var %2 @\"r\";\n+                      return;\n+                  };\n+                  return;\n+            };\n+            \"\"\")\n+    static QuotableRunnable QUOTED_NESTED_LAMBDA = () -> {\n+        Runnable r = () -> {};\n+    };\n+\n+    @IR(\"\"\"\n+            func @\"f\" ()java.type:\"void\" -> {\n+                  %1 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                      %2 : java.type:\"QuotableSubtypeTest$QuotableRunnable\" = lambda ()java.type:\"void\" -> {\n+                          return;\n+                      };\n+                      %3 : Var<java.type:\"QuotableSubtypeTest$QuotableRunnable\"> = var %2 @\"r\";\n+                      return;\n+                  };\n+                  return;\n+            };\n+            \"\"\")\n+    \/\/ @@@ should this be the excepted behaviour in case we have a nested quotable lambda ?\n+    static QuotableRunnable QUOTED_NESTED_QUOTABLE_LAMBDA = () -> {\n+        QuotableRunnable r = () -> {};\n+    };\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotableSubtypeTest.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"}]}