{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package oracle.code.onnx.genai;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.op.CoreOp;\n+import oracle.code.onnx.OnnxProtoBuilder;\n+import oracle.code.onnx.OnnxRuntime;\n+import oracle.code.onnx.compiler.OnnxTransformer;\n+\n+import static oracle.code.onnx.foreign.OrtGenApi.*;\n+\n+public class OnnxGenRuntimeSession implements AutoCloseable {\n+\n+    public static OnnxGenRuntimeSession buildFromCodeReflection(Object codeReflectionModelInstance, String methodName, String promptTemplate, Path targetOnnxModelDir, String targetOnnxModelFileName, String targetExternalDataFileName) throws IOException {\n+        Method method = Stream.of(codeReflectionModelInstance.getClass().getDeclaredMethods()).filter(m -> m.getName().equals(methodName)).findFirst().orElseThrow();\n+        CoreOp.FuncOp javaModel = Op.ofMethod(method).orElseThrow();\n+        OnnxTransformer.ModuleAndInitializers onnxModel = OnnxTransformer.transform(MethodHandles.lookup(), javaModel, true);\n+        List<Object> initializers = OnnxRuntime.getInitValues(MethodHandles.lookup(), onnxModel.initializers(), List.of(codeReflectionModelInstance));\n+        try (OutputStream dataOutput = Files.newOutputStream(targetOnnxModelDir.resolve(targetExternalDataFileName))) {\n+            AtomicLong offset = new AtomicLong();\n+            byte[] protobufModel = OnnxProtoBuilder.buildModel(\"llm\", onnxModel.module(), initializers, onnxModel.namesMap(), t -> {\n+                byte[] data = t.data().toArray(ValueLayout.JAVA_BYTE);\n+                try {\n+                    dataOutput.write(data);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                return new OnnxProtoBuilder.ExternalTensorDataInfo(targetExternalDataFileName, offset.getAndAdd(data.length), data.length);\n+            });\n+            Files.write(targetOnnxModelDir.resolve(targetOnnxModelFileName), protobufModel);\n+        }\n+        return new OnnxGenRuntimeSession(targetOnnxModelDir.toString(), promptTemplate);\n+    }\n+\n+    private final Arena arena;\n+    private final MemorySegment ret, model, tokenizer, tokenizerStream, generatorParams, generator, count;\n+    private final String promptTemplate;\n+\n+    public OnnxGenRuntimeSession(String onnxModelDir, String promptTemplate) {\n+        this.arena = Arena.ofConfined();\n+        ret = arena.allocate(C_POINTER);\n+        model = call(OgaCreateModel(arena.allocateFrom(onnxModelDir), ret));\n+        tokenizer = call(OgaCreateTokenizer(model, ret));\n+        tokenizerStream = call(OgaCreateTokenizerStream(tokenizer, ret));\n+        generatorParams = call(OgaCreateGeneratorParams(model, ret));\n+        generator = call(OgaCreateGenerator(model, generatorParams, ret));\n+        count = arena.allocate(C_LONG);\n+        this.promptTemplate = promptTemplate;\n+    }\n+\n+    private MemorySegment call(MemorySegment status) {\n+        try {\n+            if (!status.equals(MemorySegment.NULL)) {\n+                status = status.reinterpret(C_INT.byteSize());\n+                if (status.get(C_INT, 0) != 0) {\n+                    String errString = OgaResultGetError(status)\n+                            .reinterpret(Long.MAX_VALUE)\n+                            .getString(0L);\n+                    throw new RuntimeException(errString);\n+                }\n+            }\n+            return ret.get(C_POINTER, 0);\n+        } finally {\n+            OgaDestroyResult(status);\n+        }\n+    }\n+\n+    public void prompt(String userPrompt, Consumer<String> outputConsumer) {\n+        var inputTokens = call(OgaCreateSequences(ret));\n+        try {\n+            call(OgaTokenizerEncode(tokenizer, arena.allocateFrom(promptTemplate.formatted(userPrompt)), inputTokens));\n+            call(OgaGenerator_AppendTokenSequences(generator, inputTokens));\n+            while (!OgaGenerator_IsDone(generator)) {\n+                call(OgaGenerator_GenerateNextToken(generator));\n+                int nextToken = call(OgaGenerator_GetNextTokens(generator, ret, count)).get(C_INT, 0);\n+                String response = call(OgaTokenizerStreamDecode(tokenizerStream, nextToken, ret)).getString(0);\n+                outputConsumer.accept(response);\n+            }\n+            outputConsumer.accept(\"\\n\");\n+        } finally {\n+            OgaDestroySequences(inputTokens);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws Exception {\n+        arena.close();\n+        OgaDestroyGenerator(generator);\n+        OgaDestroyGeneratorParams(generatorParams);\n+        OgaDestroyTokenizerStream(tokenizerStream);\n+        OgaDestroyTokenizer(tokenizer);\n+        OgaDestroyModel(model);\n+    }\n+}\n\\ No newline at end of file\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/genai\/OnnxGenRuntimeSession.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}