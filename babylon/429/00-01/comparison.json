{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Map;\n@@ -58,1 +59,1 @@\n-        private final HashMap<String, String> elementsMap;\n+        private final HashMap<String, String> remap;\n@@ -61,3 +62,19 @@\n-        Indexer(Function<CodeItem, String> baseNames) {\n-            this.baseNames = baseNames;\n-            this.elementsMap = new HashMap<>();\n+        Indexer(Op root, Map<Value, String> explicitNames) {\n+            this.baseNames = OpWriter.computeGlobalNames(root);\n+            this.remap = new HashMap<>();\n+            explicitNames.forEach(this::setName);\n+        }\n+\n+        void setName(Value val, String name) {\n+            remap.put(baseName(val), name);\n+            if (val instanceof Op.Result or && or.op() instanceof CoreOp.TupleLoadOp tlo) {\n+                Value tr = tlo.operands().getFirst();\n+                remap.put(baseName(tr, tlo.index()), name);\n+                if (tr instanceof Op.Result tor && tor.op() instanceof CoreOp.TupleOp to) {\n+                    setName(to.operands().get(tlo.index()), name);\n+                }\n+            }\n+        }\n+\n+        private String baseName(Value value) {\n+            return \"%\" + baseNames.apply(value);\n@@ -67,1 +84,1 @@\n-            var name = \"%\" + baseNames.apply(value);\n+            var name = baseName(value);\n@@ -72,1 +89,2 @@\n-            return nameOf(value, 0);\n+            var name = baseName(value);\n+            return remap.getOrDefault(name, name);\n@@ -77,1 +95,1 @@\n-            return elementsMap.getOrDefault(name, name);\n+            return remap.getOrDefault(name, name);\n@@ -81,1 +99,1 @@\n-            elementsMap.put(baseName(tupleLoadResult, 0), nameOf(tuple, elementIndex));\n+            remap.putIfAbsent(baseName(tupleLoadResult), nameOf(tuple, elementIndex));\n@@ -86,1 +104,1 @@\n-                elementsMap.put(baseName(tuple, i), nameOf(elements.get(i)));\n+                remap.putIfAbsent(baseName(tuple, i), nameOf(elements.get(i)));\n@@ -92,1 +110,5 @@\n-        var indexer = new Indexer(OpWriter.computeGlobalNames(module));\n+        return buildModel(domain, module, initializers, Map.of());\n+    }\n+\n+    public static byte[] buildModel(String domain, CoreOp.ModuleOp module, List<Object> initializers, Map<Value, String> explicitValueNames) {\n+        var indexer = new Indexer(module, explicitValueNames);\n@@ -129,1 +151,1 @@\n-        var indexer = new Indexer(OpWriter.computeGlobalNames(block.parentBody().parentOp()));\n+        var indexer = new Indexer(block.parentBody().parentOp(), Map.of());\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxProtoBuilder.java","additions":33,"deletions":11,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public record ModuleAndInitializers(CoreOp.ModuleOp module, SequencedCollection<FieldRef> initializers) {}\n+    public record ModuleAndInitializers(CoreOp.ModuleOp module, SequencedCollection<FieldRef> initializers, Map<Value, String> namesMap) {}\n@@ -96,1 +96,2 @@\n-        return new ModuleAndInitializers(transformModule(l, mi.module()), mi.initializers());\n+        Map<Value, String> namesMap = new HashMap<>();\n+        return new ModuleAndInitializers(transformModule(l, mi.module(), namesMap), mi.initializers(), namesMap);\n@@ -162,1 +163,1 @@\n-            return new ModuleAndInitializers(module, List.of());\n+            return new ModuleAndInitializers(module, List.of(), null);\n@@ -192,1 +193,1 @@\n-        }).toList()), initializers.sequencedKeySet());\n+        }).toList()), initializers.sequencedKeySet(), null);\n@@ -205,1 +206,1 @@\n-    static CoreOp.ModuleOp transformModule(MethodHandles.Lookup l, CoreOp.ModuleOp module) {\n+    static CoreOp.ModuleOp transformModule(MethodHandles.Lookup l, CoreOp.ModuleOp module, Map<Value, String> namesMap) {\n@@ -208,1 +209,1 @@\n-                -> transformFunc(l, f, paramsToDropMap)).toList());\n+                -> transformFunc(l, f, paramsToDropMap, namesMap)).toList());\n@@ -211,1 +212,11 @@\n-    static CoreOp.FuncOp transformFunc(MethodHandles.Lookup l, CoreOp.FuncOp func, Map<String, BitSet> paramsToDropMap) {\n+    static CoreOp.FuncOp transformFunc(MethodHandles.Lookup l, CoreOp.FuncOp func, Map<String, BitSet> paramsToDropMap, Map<Value, String> namesMap) {\n+        \/\/ get original return record class\n+        Class<?> returnRecordClass = null;\n+        try {\n+            if (func.invokableType().returnType() instanceof ClassType ct && ct.rawType().resolve(l) instanceof Class cls && cls.isRecord()) {\n+                returnRecordClass = cls;\n+            }\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n@@ -225,0 +236,8 @@\n+        \/\/ collect param names\n+        String[] paramNames = new String[func.parameters().size()];\n+        for (int i = 0; i < paramNames.length; i++) {\n+            if (func.parameters().get(i).uses().iterator().next().op() instanceof CoreOp.VarOp vo && !vo.varName().isEmpty()) {\n+                paramNames[i] = vo.varName();\n+            }\n+        }\n+\n@@ -226,1 +245,20 @@\n-        return SSA.transform(func);\n+        func = SSA.transform(func);\n+\n+        \/\/ map param names\n+        for (int i = 0; i < paramNames.length; i++) {\n+            if (paramNames[i] != null) {\n+                namesMap.put(func.parameters().get(i), paramNames[i]);\n+            }\n+        }\n+        \/\/ map return tuple names from the original record components\n+        if (returnRecordClass != null\n+                && func.body().entryBlock().terminatingOp() instanceof CoreOp.ReturnOp ro\n+                && ro.operands().getFirst() instanceof Op.Result or\n+                && or.op() instanceof CoreOp.TupleOp to) {\n+            var rcs = returnRecordClass.getRecordComponents();\n+            for (int i = 0; i < to.operands().size(); i++) {\n+                namesMap.put(to.operands().get(i), rcs[i].getName());\n+            }\n+        }\n+\n+        return func;\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":46,"deletions":8,"binary":false,"changes":54,"status":"modified"}]}