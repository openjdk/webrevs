{"files":[{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-backend-cuda<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-backend-cuda<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/backends\/cuda\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-backend-mock<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-backend-mock<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/backends\/mock\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-backend-opencl<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-backend-opencl<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/backends\/opencl\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -71,1 +72,1 @@\n-                        <id>cmake_install_build<\/id>\n+                        <id>cmake-install<\/id>\n@@ -85,1 +86,1 @@\n-                        <id>cmake_clean<\/id>\n+                        <id>rm-clean<\/id>\n","filename":"hat\/backends\/pom.xml","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-backend-ptx<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-backend-ptx<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/backends\/ptx\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4,0 +4,2 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n@@ -7,0 +9,1 @@\n+import java.nio.file.Files;\n@@ -27,0 +30,2 @@\n+\n+import org.w3c.dom.Document;\n@@ -30,0 +35,1 @@\n+import org.xml.sax.SAXException;\n@@ -38,0 +44,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -83,0 +90,1 @@\n+    \/*\n@@ -108,1 +116,1 @@\n-    }\n+    } *\/\n@@ -119,0 +127,5 @@\n+    <L> T forEach(Stream<L> stream, Consumer<L> consumer){\n+      stream.forEach(consumer);\n+      return self();\n+    }\n+\n@@ -138,0 +151,7 @@\n+\n+    public PomXmlBuilder pom(String groupId, String artifactId, String version) {\n+      return modelVersion(\"4.0.0\").packaging(\"pom\").ref(groupId, artifactId, version);\n+    }\n+    public PomXmlBuilder jar(String groupId, String artifactId, String version) {\n+      return modelVersion(\"4.0.0\").packaging(\"jar\").ref(groupId, artifactId, version);\n+    }\n@@ -156,0 +176,1 @@\n+\n@@ -158,1 +179,7 @@\n-              .groupIdArtifactIdVersion(groupId, artifactId, version).then(pomXmlBuilderConsumer)\n+              .ref(groupId, artifactId, version)\n+              .then(pomXmlBuilderConsumer)\n+      );\n+    }\n+    public PomXmlBuilder antPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return plugin(\"org.apache.maven.plugins\", \"maven-antrun-plugin\", \"1.8\", plugin -> plugin\n+              .executions(pomXmlBuilderConsumer)\n@@ -161,0 +188,14 @@\n+    public PomXmlBuilder compilerPluginConfiguration(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return plugin(\"org.apache.maven.plugins\", \"maven-compiler-plugin\", \"3.11.0\", plugin -> plugin\n+                                        .configuration(pomXmlBuilderConsumer)\n+      );\n+    }\n+\n+    public PomXmlBuilder execPlugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return plugin(\"org.codehaus.mojo\", \"exec-maven-plugin\", \"3.1.0\",pomXmlBuilderConsumer);\n+    }\n+\n+    public PomXmlBuilder execPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return execPlugin(plugin->plugin.executions(pomXmlBuilderConsumer));\n+    }\n+\n@@ -166,3 +207,3 @@\n-  \/\/  public PomXmlBuilder plugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-   \/\/   return element(\"plugin\", pomXmlBuilderConsumer);\n-  \/\/  }\n+    public PomXmlBuilder plugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"plugin\", pomXmlBuilderConsumer);\n+    }\n@@ -170,1 +211,1 @@\n-      return parent(parent -> parent.groupIdArtifactIdVersion(groupId, artifactId, version));\n+      return parent(parent -> parent.ref(groupId, artifactId, version));\n@@ -175,0 +216,10 @@\n+    public PomXmlBuilder pluginManagement(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"pluginManagement\", pomXmlBuilderConsumer);\n+    }\n+    public PomXmlBuilder file(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"file\", pomXmlBuilderConsumer);\n+    }\n+\n+    public PomXmlBuilder activation(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"activation\", pomXmlBuilderConsumer);\n+    }\n@@ -176,1 +227,1 @@\n-       return element(\"profiles\", pomXmlBuilderConsumer);\n+      return element(\"profiles\", pomXmlBuilderConsumer);\n@@ -189,0 +240,27 @@\n+    }\n+    public PomXmlBuilder execIdPhaseConf(String id, String phase, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return execution(ex -> ex\n+              .id(id)\n+              .phase(phase)\n+              .goals(gs -> gs\n+                      .goal(\"exec\")\n+              )\n+              .configuration(pomXmlBuilderConsumer)\n+      );\n+    }\n+    public PomXmlBuilder exec(String phase, String executable, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return execIdPhaseConf(executable+\"-\"+phase,phase,conf->conf\n+              .executable(executable)\n+              .arguments(pomXmlBuilderConsumer)\n+      );\n+    }\n+    public PomXmlBuilder ant(String phase, String goal, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return execution(execution -> execution\n+              .phase(phase)\n+              .goals(gs -> gs.goal(goal))\n+              .configuration(configuration -> configuration\n+                      .target(pomXmlBuilderConsumer)\n+              )\n+      );\n+\n+\n@@ -199,0 +277,3 @@\n+    public PomXmlBuilder compilerArgs(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"compilerArgs\", pomXmlBuilderConsumer);\n+    }\n@@ -206,1 +287,4 @@\n-      return dependency($->$.groupIdArtifactIdVersion(groupId, artifactId, version));\n+      return dependency($->$.ref(groupId, artifactId, version));\n+    }\n+    public    PomXmlBuilder dependency(String groupId, String artifactId, String version, String scope) {\n+      return dependency($->$.ref(groupId, artifactId, version).scope(scope));\n@@ -223,0 +307,3 @@\n+    public PomXmlBuilder scope(String s) {\n+      return element(\"scope\", $->$.text(s));\n+    }\n@@ -239,1 +326,1 @@\n-        return groupId(groupId).artifactId(artifactId);\n+      return groupId(groupId).artifactId(artifactId);\n@@ -241,1 +328,1 @@\n-    public PomXmlBuilder groupIdArtifactIdVersion(String groupId, String artifactId, String version) {\n+    public PomXmlBuilder ref(String groupId, String artifactId, String version) {\n@@ -253,0 +340,28 @@\n+    public PomXmlBuilder arg(String s) {\n+      return element(\"arg\", $->$.text(s));\n+    }\n+    public PomXmlBuilder argLine(String s) {\n+      return element(\"argLine\", $->$.text(s));\n+    }\n+    public PomXmlBuilder source(String s) {\n+      return element(\"source\", $->$.text(s));\n+    }\n+    public PomXmlBuilder target(String s) {\n+      return element(\"target\", $->$.text(s));\n+    }\n+    public PomXmlBuilder showWarnings(String s) {\n+      return element(\"showWarnings\", $->$.text(s));\n+    }\n+    public PomXmlBuilder showDeprecation(String s) {\n+      return element(\"showDeprecation\", $->$.text(s));\n+    }\n+    public PomXmlBuilder failOnError(String s) {\n+      return element(\"failOnError\", $->$.text(s));\n+    }\n+    public PomXmlBuilder exists(String s) {\n+      return element(\"exists\", $->$.text(s));\n+    }\n+    public PomXmlBuilder activeByDefault(String s) {\n+      return element(\"activeByDefault\", $->$.text(s));\n+    }\n+\n@@ -257,0 +372,181 @@\n+  public static class ImlBuilder extends AbstractXMLBuilder<ImlBuilder>{\n+    ImlBuilder(Element element) {\n+      super(element);\n+    }\n+    public ImlBuilder element(String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n+      return element(name, ImlBuilder::new, xmlBuilderConsumer);\n+    }\n+    public ImlBuilder element(URI uri, String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n+      return element(uri, name, ImlBuilder::new, xmlBuilderConsumer);\n+    }\n+\n+    public ImlBuilder modelVersion(String s) {\n+      return element(\"modelVersion\", $->$.text(s));\n+    }\n+    public ImlBuilder groupId(String s) {\n+      return element(\"groupId\", $->$.text(s));\n+    }\n+    public ImlBuilder artifactId(String s) {\n+      return element(\"artifactId\", $->$.text(s));\n+    }\n+    public ImlBuilder packaging(String s) {\n+      return element(\"packaging\", $->$.text(s));\n+    }\n+    public ImlBuilder version(String s) {\n+      return element(\"version\", $->$.text(s));\n+    }\n+    public ImlBuilder build(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"build\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder plugins(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"plugins\", pomXmlBuilderConsumer);\n+    }\n+\n+    public ImlBuilder plugin(String groupId, String artifactId, String version, Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"plugin\", $->$\n+              .groupIdArtifactIdVersion(groupId, artifactId, version).then(pomXmlBuilderConsumer)\n+      );\n+    }\n+    public ImlBuilder plugin(String groupId, String artifactId,  Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"plugin\", $->$\n+              .groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer)\n+      );\n+    }\n+    public ImlBuilder plugin(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"plugin\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder parent(String groupId, String artifactId, String version){\n+      return parent(parent -> parent.groupIdArtifactIdVersion(groupId, artifactId, version));\n+    }\n+    public ImlBuilder parent(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"parent\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder pluginManagement(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"pluginManagement\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder file(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"file\", pomXmlBuilderConsumer);\n+    }\n+\n+    public ImlBuilder activation(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"activation\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder profiles(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+       return element(\"profiles\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder profile(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"profile\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder arguments(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"arguments\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder executions(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"executions\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder execution(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"execution\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder goals(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"goals\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder target(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"target\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder configuration(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"configuration\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder compilerArgs(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"compilerArgs\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder properties(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"properties\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder dependencies(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"dependencies\", pomXmlBuilderConsumer);\n+    }\n+    public    ImlBuilder dependency(String groupId, String artifactId, String version) {\n+      return dependency($->$.groupIdArtifactIdVersion(groupId, artifactId, version));\n+    }\n+    public    ImlBuilder dependency(String groupId, String artifactId, String version, String scope) {\n+      return dependency($->$.groupIdArtifactIdVersion(groupId, artifactId, version).scope(scope));\n+    }\n+    public ImlBuilder dependency(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"dependency\", pomXmlBuilderConsumer);\n+    }\n+\n+    public ImlBuilder modules(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+      return element(\"modules\", pomXmlBuilderConsumer);\n+    }\n+    public ImlBuilder module(String name) {\n+      return element(\"module\", $->$.text(name));\n+    }\n+\n+    public ImlBuilder property(String name, String value) {\n+      return element(name,$->$.text(value));\n+    }\n+\n+    public ImlBuilder scope(String s) {\n+      return element(\"scope\", $->$.text(s));\n+    }\n+    public ImlBuilder phase(String s) {\n+      return element(\"phase\", $->$.text(s));\n+    }\n+    public ImlBuilder argument(String s) {\n+      return element(\"argument\", $->$.text(s));\n+    }\n+\n+    public ImlBuilder goal(String s) {\n+      return element(\"goal\", $->$.text(s));\n+    }\n+\n+    public ImlBuilder copy(String file, String toDir) {\n+      return element(\"copy\", $->$.attr(\"file\", file).attr(\"toDir\", toDir));\n+    }\n+\n+    public ImlBuilder groupIdArtifactId(String groupId, String artifactId) {\n+        return groupId(groupId).artifactId(artifactId);\n+    }\n+    public ImlBuilder groupIdArtifactIdVersion(String groupId, String artifactId, String version) {\n+      return groupIdArtifactId(groupId,artifactId).version(version);\n+    }\n+\n+    public ImlBuilder skip(String string) {\n+      return element(\"skip\", $->$.text(string));\n+    }\n+\n+    public ImlBuilder id(String s) {\n+      return element(\"id\", $->$.text(s));\n+    }\n+\n+    public ImlBuilder arg(String s) {\n+      return element(\"arg\", $->$.text(s));\n+    }\n+    public ImlBuilder argLine(String s) {\n+      return element(\"argLine\", $->$.text(s));\n+    }\n+    public ImlBuilder source(String s) {\n+      return element(\"source\", $->$.text(s));\n+    }\n+    public ImlBuilder target(String s) {\n+      return element(\"target\", $->$.text(s));\n+    }\n+    public ImlBuilder showWarnings(String s) {\n+      return element(\"showWarnings\", $->$.text(s));\n+    }\n+    public ImlBuilder showDeprecation(String s) {\n+      return element(\"showDeprecation\", $->$.text(s));\n+    }\n+    public ImlBuilder failOnError(String s) {\n+      return element(\"failOnError\", $->$.text(s));\n+    }\n+    public ImlBuilder exists(String s) {\n+      return element(\"exists\", $->$.text(s));\n+    }\n+    public ImlBuilder activeByDefault(String s) {\n+      return element(\"activeByDefault\", $->$.text(s));\n+    }\n+\n+    public ImlBuilder executable(String s) {\n+      return element(\"executable\", $->$.text(s));\n+    }\n+  }\n@@ -287,1 +583,1 @@\n-  static XMLNode createPom(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+  static XMLNode createIml(String commentText, Consumer<ImlBuilder> imlBuilderConsumer) {\n@@ -290,2 +586,23 @@\n-      \/\/var nl = doc.createTextNode(\"\\n\");\n-      \/\/doc.appendChild(nl);\n+\n+      var uri1 = URI.create(\"http:\/\/maven.apache.org\/POM\/4.0.0\");\n+      var uri2 = URI.create(\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\");\n+      var uri3 = URI.create(\"http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\");\n+      var comment = doc.createComment(commentText);\n+      doc.appendChild(comment);\n+      \/\/   var nl = doc.createTextNode(\"\\n\");\n+      \/\/   doc.appendChild(nl);\n+      var element = doc.createElementNS(uri1.toString(),\"project\");\n+      doc.appendChild(element);\n+      element.setAttributeNS(uri2.toString(), \"xsi:schemaLocation\",uri1+\" \"+ uri3);\n+      ImlBuilder imlBuilder = new ImlBuilder(element);\n+      imlBuilderConsumer.accept(imlBuilder);\n+      return new XMLNode(element);\n+    } catch (ParserConfigurationException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  public static XMLNode createPom(String commentText, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+    try {\n+      var doc  = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+\n@@ -295,0 +612,4 @@\n+      var comment = doc.createComment(commentText);\n+      doc.appendChild(comment);\n+   \/\/   var nl = doc.createTextNode(\"\\n\");\n+   \/\/   doc.appendChild(nl);\n@@ -350,6 +671,21 @@\n-  XMLNode(Path path) throws Throwable {\n-    this(\n-        javax.xml.parsers.DocumentBuilderFactory.newInstance()\n-            .newDocumentBuilder()\n-            .parse(path.toFile())\n-            .getDocumentElement());\n+  static Document parse(InputStream is) {\n+    try {\n+      return javax.xml.parsers.DocumentBuilderFactory.newInstance()\n+              .newDocumentBuilder()\n+              .parse(is);\n+    }catch (ParserConfigurationException | SAXException | IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  static Document parse(Path path) {\n+      try {\n+          return parse(Files.newInputStream(path));\n+      } catch (IOException e) {\n+          throw new RuntimeException(e);\n+      }\n+  }\n+\n+\n+  XMLNode(Path path) {\n+    this(parse(path).getDocumentElement());\n@@ -358,6 +694,2 @@\n-  XMLNode(File file) throws Throwable {\n-    this(\n-        javax.xml.parsers.DocumentBuilderFactory.newInstance()\n-            .newDocumentBuilder()\n-            .parse(file)\n-            .getDocumentElement());\n+  XMLNode(File file)  {\n+    this(parse(file.toPath()).getDocumentElement());\n@@ -367,5 +699,1 @@\n-    this(\n-        javax.xml.parsers.DocumentBuilderFactory.newInstance()\n-            .newDocumentBuilder()\n-            .parse(url.openStream())\n-            .getDocumentElement());\n+    this(parse(url.openStream()).getDocumentElement());\n@@ -378,0 +706,1 @@\n+    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n@@ -379,0 +708,1 @@\n+  \/\/  transformer.setOutputProperty(\"http:\/\/www.oracle.com\/xml\/is-standalone\", \"yes\");\n@@ -389,1 +719,1 @@\n-  void write(Bldr.XMLFile xmlFile) {\n+  public void write(Bldr.XMLFile xmlFile) {\n","filename":"hat\/bldr\/XMLNode.java","additions":361,"deletions":31,"binary":false,"changes":392,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+--enable-preview --source 24 mkpoms\n","filename":"hat\/bldr\/mkpoms","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n---enable-preview --source 24 hatrun opencl \n+--enable-preview --source 24 hatrun opencl\n","filename":"hat\/bldr\/opencl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-blackscholes<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-blackscholes<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/blackscholes\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-heal<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-heal<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/heal\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-life<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-life<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/life\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-mandel<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-mandel<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/mandel\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n","filename":"hat\/examples\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-squares<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-squares<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/squares\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -27,0 +28,3 @@\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-example-violajones<\/artifactId>\n+    <version>1.0<\/version>\n@@ -32,3 +36,0 @@\n-    <groupId>oracle.code<\/groupId>\n-    <artifactId>hat-example-violajones<\/artifactId>\n-    <version>1.0<\/version>\n","filename":"hat\/examples\/violajones\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n","filename":"hat\/hat\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,213 @@\n+\/* vim: set ft=java: \n+ *\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static bldr.Bldr.*;\n+import bldr.XMLNode;\n+import static bldr.XMLNode.*;\n+\n+void main(String[] argv) {\n+  var pomComment = \"\"\"\n+    Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                               \n+    This code is free software; you can redistribute it and\/or modify it\n+    under the terms of the GNU General Public License version 2 only, as\n+    published by the Free Software Foundation.  Oracle designates this\n+    particular file as subject to the \"Classpath\" exception as provided\n+    by Oracle in the LICENSE file that accompanied this code.\n+                               \n+    This code is distributed in the hope that it will be useful, but WITHOUT\n+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+    version 2 for more details (a copy is included in the LICENSE file that\n+    accompanied this code).\n+                               \n+    You should have received a copy of the GNU General Public License version\n+    2 along with this work; if not, write to the Free Software Foundation,\n+    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+                               \n+    Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+    or visit www.oracle.com if you need additional information or have any\n+    questions.                \n+    \"\"\";\n+\n+    var hatDir = Dir.current();\n+    var hatCoreDir = hatDir.existingDir(\"hat\");\n+    var backends = hatDir.existingDir(\"backends\");\n+    var examples = hatDir.existingDir(\"examples\");\n+\n+    \/\/ Here we create the top level pom.xml\n+    XMLNode.createPom(pomComment, pom -> pom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .properties(props -> props\n+         .property(\"project.build.sourceEncoding\", \"UTF-8\")\n+         .property(\"hat.target\", \"${env.PWD}\/build\")\n+      )\n+      .profiles(profiles -> profiles\n+         .profile(profile -> profile\n+            .id(\"default\")\n+            .activation(activation -> activation\n+               .activeByDefault(\"true\")\n+            )\n+            .modules(modules -> modules\n+               .module(\"hat\")\n+               .module(\"backends\")\n+               .module(\"examples\")\n+            )\n+         )\n+      )\n+      .build(build -> build\n+         .plugins(plugins -> plugins\n+            .compilerPluginConfiguration(configuration -> configuration\n+               .compilerArgs(compilerArgs -> compilerArgs\n+                  .arg(\"--add-modules=jdk.incubator.code\")\n+                  .arg(\"--enable-preview\")\n+                  .arg(\"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\")\n+                  .arg(\"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\")\n+               )\n+               .source(\"24\").target(\"24\").showDeprecation(\"true\").failOnError(\"true\").showWarnings(\"true\")\n+            )\n+         )\n+      )\n+   ).write(hatDir.xmlFile(\"pom.xml\"));\n+\n+   \/\/ Now hat\/pom.xml\n+\n+   XMLNode.createPom(pomComment, pom -> pom\n+      .comment(\"Auto generated by mkpoms\")\n+      .jar(\"oracle.code\", \"hat\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .dependencies(dependencies -> dependencies\n+         .dependency(\"org.junit.jupiter\", \"junit-jupiter-engine\", \"5.10.0\", \"test\")\n+      )\n+      .build(build -> build\n+         .pluginManagement(pluginManagement -> pluginManagement\n+            .plugins(plugins -> plugins\n+               .plugin(\"org.apache.maven.plugins\", \"maven-surefire-plugin\", \"3.1.2\", plugin -> plugin\n+                  .configuration(configuration -> configuration\n+                     .argLine(\"-enable-preview\")\n+                  )\n+               )\n+            )\n+         )\n+         .plugins(plugins -> plugins\n+            .antPluginExecutions(executions -> executions\n+               .ant(\"install\", \"run\", ant -> ant\n+                  .copy(\"target\/${project.artifactId}-1.0.jar\", \"${hat.target}\")\n+               )\n+            )\n+         )\n+      )\n+   ).write(hatCoreDir.xmlFile(\"pom.xml\"));\n+\n+   \/\/ Here we create examples\/pom.xml and nested inside we create each example\/*\/pom.xml\n+   XMLNode.createPom(pomComment, examplesPom -> examplesPom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-examples\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .dependencies(deps -> deps\n+         .dependency(\"oracle.code\", \"hat\", \"1.0\")\n+      )\n+      .modules(modules -> examples.subDirs().filter(dir -> !dir.matches(\"^.*(experiments|target|.idea)$\")).forEach(example -> {\n+         modules.module(example.fileName());\n+         \/\/ here is the 'nested example\/*\/pom.xml\n+         XMLNode.createPom(pomComment, examplePom -> examplePom\n+            .comment(\"Auto generated by mkpoms\")\n+            .jar(\"oracle.code\", \"hat-example-\" + example.fileName(), \"1.0\")\n+            .parent(\"oracle.code\", \"hat-examples\", \"1.0\")\n+            .dependencies(deps -> deps\n+               .dependency(\"oracle.code\", \"hat\", \"1.0\")\n+            )\n+            .build(build -> build\n+               .plugins(plugins -> plugins\n+                  .antPluginExecutions(executions -> executions\n+                     .ant(\"install\", \"run\", ant -> ant\n+                        .copy(\"target\/hat-example-\" + example.fileName() + \"-1.0.jar\", \"${hat.target}\")\n+                     )\n+                  )\n+               )\n+            )\n+         ).write(example.xmlFile(\"pom.xml\"));\n+       })\n+      )\n+   ).write(examples.xmlFile(\"pom.xml\"));\n+\n+   \/\/ Now backends\/pom.xml and backends\/*\/pom.xml\n+   XMLNode.createPom(pomComment, backendsPom -> backendsPom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-backends\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .dependencies(deps -> deps.dependency(dep -> dep.ref(\"oracle.code\", \"hat\", \"1.0\")))\n+      .modules(modules -> backends.subDirs().filter(dir -> !dir.matches(\"^.*(spirv|hip|shared|openclx|target|.idea)$\")).forEach(backend -> {\n+         modules.module(backend.fileName());\n+         \/\/ here is the 'nested backends\/*\/pom.xml\n+         XMLNode.createPom(pomComment, $ -> $\n+            .comment(\"Auto generated by mkpoms\")\n+            .jar(\"oracle.code\", \"hat-backend-\" + backend.fileName(), \"1.0\")\n+            .parent(\"oracle.code\", \"hat-backends\", \"1.0\")\n+            .dependencies(deps -> deps\n+               .dependency(\"oracle.code\", \"hat\", \"1.0\")\n+            )\n+            .build($$ -> $$\n+               .plugins(plugins -> plugins\n+                  .plugin(\"org.codehaus.mojo\", \"exec-maven-plugin\", plugin -> plugin\n+                     .configuration(conf -> conf\n+                        .skip(\"true\")\n+                        .comment(\"We want to inherit properties from parent but not plugin that calls cmake\")\n+                     )\n+                  )\n+                  .antPluginExecutions(executions -> executions\n+                     .ant(\"install\", \"run\", ant -> ant\n+                        .copy(\"target\/hat-backend-\" + backend.fileName() + \"-1.0.jar\", \"${hat.target}\")\n+                     )\n+                  )\n+               )\n+           )\n+        ).write(backend.xmlFile(\"pom.xml\"));\n+     }))\n+     .build(build -> build\n+        .plugins(plugins -> plugins\n+           .execPluginExecutions(e -> e\n+              .exec(\"compile\", \"cmake\", args -> args\n+                 .argument(\"-DHAT_TARGET=${hat.target}\")\n+                 .argument(\"-B\")\n+                 .argument(\"${hat.target}\/cmake-build-debug\")\n+              )\n+              .exec(\"install\", \"cmake\", args -> args\n+                 .argument(\"--build\")\n+                 .argument(\"${hat.target}\/cmake-build-debug\")\n+                 )\n+              .exec(\"clean\", \"rm\", args -> args\n+                 .argument(\"-rf\")\n+                 .argument(\"cmake-build-debug\")\n+              )\n+           )\n+        )\n+     )\n+  ).write(backends.xmlFile(\"pom.xml\"));\n+}\n+\n","filename":"hat\/mkpoms","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+    <!--Auto generated by mkpoms-->\n@@ -32,2 +33,0 @@\n-        <maven.compiler.source>24<\/maven.compiler.source>\n-        <maven.compiler.target>24<\/maven.compiler.target>\n@@ -43,0 +42,1 @@\n+                <module>hat<\/module>\n@@ -45,1 +45,0 @@\n-                <module>hat<\/module>\n@@ -62,2 +61,2 @@\n-                    <source>${maven.compiler.source}<\/source>\n-                    <target>${maven.compiler.target}<\/target>\n+                    <source>24<\/source>\n+                    <target>24<\/target>\n","filename":"hat\/pom.xml","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}