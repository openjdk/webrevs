{"files":[{"patch":"@@ -931,2 +931,1 @@\n-        if (falseBlock.targetBlock().parameters().isEmpty()) {\n-            assignBlockArguments(op, falseBlock, cob, c);\n+        if (!needToAssignBlockArguments(falseBlock.targetBlock(), c)) {\n@@ -979,0 +978,11 @@\n+    private static boolean needToAssignBlockArguments(Block b, ConversionContext c) {\n+        c.transitionLiveSlotSetTo(b);\n+        LiveSlotSet liveSlots = c.liveSlotSet(b);\n+        for (Block.Parameter barg : b.parameters()) {\n+            if (liveSlots.getOrAssignSlot(barg) >= 0) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -991,0 +1001,1 @@\n+        LiveSlotSet liveSlots = c.liveSlotSet(s.targetBlock());\n@@ -993,14 +1004,7 @@\n-            int bslot = c.liveSlotSet(s.targetBlock()).getOrAssignSlot(barg);\n-\n-            Value value = sargs.get(i);\n-            if (value instanceof Op.Result or &&\n-                    or.op() instanceof CoreOps.ConstantOp constantOp &&\n-                    !constantOp.resultType().equals(JavaType.J_L_CLASS)) {\n-                cob.constantInstruction(fromValue(constantOp.value()));\n-                TypeKind vt = toTypeKind(barg.type());\n-                cob.storeInstruction(vt, bslot);\n-            } else {\n-                int sslot = c.getSlot(value);\n-\n-                \/\/ Assignment only required if slots differ\n-                if (sslot != bslot) {\n+            int bslot = liveSlots.getOrAssignSlot(barg);\n+            if (bslot >= 0) {\n+                Value value = sargs.get(i);\n+                if (value instanceof Op.Result or &&\n+                        or.op() instanceof CoreOps.ConstantOp constantOp &&\n+                        !constantOp.resultType().equals(JavaType.J_L_CLASS)) {\n+                    cob.constantInstruction(fromValue(constantOp.value()));\n@@ -1008,1 +1012,0 @@\n-                    cob.loadInstruction(vt, sslot);\n@@ -1010,0 +1013,9 @@\n+                } else {\n+                    int sslot = c.getSlot(value);\n+\n+                    \/\/ Assignment only required if slots differ\n+                    if (sslot != bslot) {\n+                        TypeKind vt = toTypeKind(barg.type());\n+                        cob.loadInstruction(vt, sslot);\n+                        cob.storeInstruction(vt, bslot);\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        Assert.assertTrue(failed < 25, STR.\"failed: \\{failed}, passed: \\{passed}, skipped: \\{skipped}\");\n+        Assert.assertTrue(failed < 15, STR.\"failed: \\{failed}, passed: \\{passed}, skipped: \\{skipped}\");\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}