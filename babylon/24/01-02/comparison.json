{"files":[{"patch":"@@ -313,0 +313,11 @@\n+    private static void storeInstruction(CodeBuilder cob, TypeKind tk, int slot) {\n+        if (slot < 0) {\n+            \/\/ Only pop results from stack if the value has no further use (no valid slot)\n+            switch (tk.slotSize()) {\n+                case 1 -> cob.pop();\n+                case 2 -> cob.pop2();\n+            }\n+        } else {\n+            cob.storeInstruction(tk, slot);\n+        }\n+    }\n@@ -413,1 +424,1 @@\n-                    cob.storeInstruction(toTypeKind(ex.type()), slot);\n+                    storeInstruction(cob, toTypeKind(ex.type()), slot);\n@@ -444,1 +455,1 @@\n-                        cob.storeInstruction(toTypeKind(op.varType()), slot);\n+                        storeInstruction(cob, toTypeKind(op.varType()), slot);\n@@ -470,1 +481,1 @@\n-                        cob.storeInstruction(toTypeKind(vop.varType()), slot);\n+                        storeInstruction(cob, toTypeKind(vop.varType()), slot);\n@@ -589,1 +600,1 @@\n-                                    cob.storeInstruction(rvt, slot);\n+                                    storeInstruction(cob, rvt, slot);\n@@ -706,1 +717,1 @@\n-                        cob.storeInstruction(rvt, slot);\n+                        storeInstruction(cob, rvt, slot);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        Assert.assertTrue(failed < 15, STR.\"failed: \\{failed}, passed: \\{passed}, skipped: \\{skipped}\");\n+        Assert.assertTrue(failed < 5, STR.\"failed: \\{failed}, passed: \\{passed}, skipped: \\{skipped}\");\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}