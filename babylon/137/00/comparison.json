{"files":[{"patch":"@@ -69,5 +69,0 @@\n-    @Override\n-    public void length(int length) {\n-        this.length = length;\n-    }\n-\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/RGBList.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.Buffer;\n@@ -55,0 +56,1 @@\n+    StructLayout layout = MemoryLayout.structLayout(  JAVA_INT.withName(\"length\"),\n@@ -56,3 +58,1 @@\n-    static S32RGBTable create(Accelerator accelerator, int length) {\n-        S32RGBTable table = SegmentMapper.of(accelerator.lookup, S32RGBTable.class,\n-                JAVA_INT.withName(\"length\"),\n+            MemoryLayout.sequenceLayout(0, S32RGBTable.RGB.layout).withName(\"rgb\")).withName(S32XYTable.class.getSimpleName());\n@@ -60,3 +60,3 @@\n-                MemoryLayout.sequenceLayout(length, S32RGBTable.RGB.layout).withName(\"rgb\")\n-        ).allocate(accelerator.backend.arena());\n-        table.length(length);\n+    static S32RGBTable create(Accelerator accelerator, int length) {\n+        S32RGBTable table = SegmentMapper.ofIncomplete(accelerator.lookup, S32RGBTable.class,layout,length).allocate(accelerator.backend.arena());\n+        Buffer.setLength(table,length);\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/S32RGBTable.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.Buffer;\n@@ -51,0 +52,4 @@\n+    StructLayout layout = MemoryLayout.structLayout(\n+            JAVA_INT.withName(\"length\"),\n+            MemoryLayout.sequenceLayout(0, S32XYTable.XY.layout).withName(\"xy\")\n+    ).withName(\"XY\");\n@@ -53,5 +58,2 @@\n-        S32XYTable table = SegmentMapper.of(accelerator.lookup, S32XYTable.class,\n-                JAVA_INT.withName(\"length\"),\n-                MemoryLayout.sequenceLayout(length, S32XYTable.XY.layout).withName(\"xy\")\n-        ).allocate(accelerator.backend.arena());\n-        table.length(length);\n+        S32XYTable table = SegmentMapper.ofIncomplete(accelerator.lookup, S32XYTable.class,layout, length).allocate(accelerator.backend.arena());\n+        Buffer.setLength(table, length);\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/S32XYTable.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -67,5 +67,0 @@\n-    @Override\n-    public void length(int length) {\n-        this.length=length;\n-    }\n-\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/XYList.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.Buffer;\n@@ -115,2 +116,2 @@\n-            long offset = s32Array2D.layout().byteOffset(MemoryLayout.PathElement.groupElement(\"array\"));\n-            MemorySegment.copy(s32Array2D.memorySegment(), JAVA_INT, offset, ((DataBufferInt) image.getRaster().getDataBuffer()).getData(), 0, s32Array2D.size());\n+            long offset = Buffer.getLayout(s32Array2D).byteOffset(MemoryLayout.PathElement.groupElement(\"array\"));\n+            MemorySegment.copy(Buffer.getMemorySegment(s32Array2D), JAVA_INT, offset, ((DataBufferInt) image.getRaster().getDataBuffer()).getData(), 0, s32Array2D.size());\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/MandelViewer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.StructLayout;\n@@ -35,0 +36,1 @@\n+    StructLayout layout =  ImageBuffer.createLayout(RgbaS32Image.class,JAVA_SHORT);\n@@ -36,1 +38,1 @@\n-        return ImageBuffer.create(accelerator, RgbaS32Image.class, width, height, BufferedImage.TYPE_INT_ARGB, 1, JAVA_SHORT);\n+        return ImageBuffer.create(accelerator, RgbaS32Image.class, layout,width, height, BufferedImage.TYPE_INT_ARGB, 1);\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/buffers\/RgbaS32Image.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import hat.backend.JavaMultiThreadedBackend;\n+import hat.backend.JavaSequentialBackend;\n@@ -58,1 +60,4 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),\n+              \/\/  new JavaSequentialBackend()\n+                Backend.FIRST\n+        );\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ViolaJonesCompute.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-\n+           \/\/ long featureOffset = feature.offset();\n@@ -258,0 +258,2 @@\n+          \/\/  var offset=scale.offset();\n+           \/\/ System.out.println(\"scale offset \"+offset);\n@@ -261,0 +263,3 @@\n+             \/\/   var layout =scale.layout();\n+              \/\/  offset=scale.offset();\n+              \/\/  System.out.println(\"scale offset \"+offset);\n@@ -291,0 +296,2 @@\n+              \/\/  Class stageClass = stage.getClass();\n+               \/\/ long stageOffset = stage.offset();\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ViolaJonesCoreCompute.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.foreign.StructLayout;\n@@ -35,0 +36,2 @@\n+\n+    StructLayout layout =  ImageBuffer.createLayout(GreyU16Image.class,JAVA_SHORT);\n@@ -36,1 +39,1 @@\n-        return ImageBuffer.create(accelerator, GreyU16Image.class, width, height, BufferedImage.TYPE_USHORT_GRAY, 1, JAVA_SHORT);\n+        return ImageBuffer.create(accelerator, GreyU16Image.class, layout,width, height, BufferedImage.TYPE_USHORT_GRAY, 1);\n@@ -41,1 +44,0 @@\n-\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/buffers\/GreyU16Image.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.StructLayout;\n@@ -35,0 +37,1 @@\n+    StructLayout layout =  ImageBuffer.createLayout(RgbS08x3Image.class,JAVA_BYTE);\n@@ -37,1 +40,1 @@\n-        return ImageBuffer.create(accelerator, RgbS08x3Image.class, width, height, BufferedImage.TYPE_INT_RGB, 3, JAVA_BYTE);\n+        return ImageBuffer.create(accelerator, RgbS08x3Image.class,layout, width, height, BufferedImage.TYPE_INT_RGB, 3);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/buffers\/RgbS08x3Image.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    interface Feature {\n+    interface Feature extends CompleteBuffer{\n@@ -45,1 +45,1 @@\n-        interface Rect {\n+        interface Rect extends CompleteBuffer{\n@@ -76,1 +76,1 @@\n-        interface LinkOrValue {\n+        interface LinkOrValue extends CompleteBuffer {\n@@ -111,1 +111,1 @@\n-        );\n+        ).withName(Feature.class.getSimpleName());\n@@ -131,1 +131,1 @@\n-    interface Stage {\n+    interface Stage extends CompleteBuffer{\n@@ -137,1 +137,1 @@\n-        ).withName(\"Stage\");\n+        ).withName(Stage.class.getSimpleName());\n@@ -156,1 +156,1 @@\n-    interface Tree {\n+    interface Tree extends CompleteBuffer{\n@@ -161,1 +161,1 @@\n-        ).withName(\"Tree\");\n+        ).withName(Tree.class.getSimpleName());\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/Cascade.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.buffer.Buffer;\n@@ -65,0 +66,6 @@\n+    StructLayout layout = MemoryLayout.structLayout(\n+            JAVA_INT.withName(\"length\"),\n+            JAVA_INT.withName(\"atomicResultTableCount\"),\n+            MemoryLayout.sequenceLayout(0, ResultTable.Result.layout).withName(\"result\")\n+    );\n+\n@@ -66,7 +73,3 @@\n-        ResultTable table = SegmentMapper.of(accelerator.lookup, ResultTable.class,\n-                JAVA_INT.withName(\"length\"),\n-                JAVA_INT.withName(\"atomicResultTableCount\"),\n-                MemoryLayout.sequenceLayout(length, ResultTable.Result.layout).withName(\"result\")\n-        ).allocate(accelerator.backend.arena());\n-        table.length(length);\n-        return table;\n+        return Buffer.setLength(\n+                SegmentMapper.ofIncomplete(accelerator.lookup,ResultTable.class,layout,length)\n+                        .allocate(accelerator.backend.arena()),length);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/ResultTable.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.foreign.GroupLayout;\n@@ -34,0 +35,1 @@\n+import java.lang.foreign.SequenceLayout;\n@@ -40,0 +42,2 @@\n+\n+\n@@ -113,1 +117,5 @@\n-\n+    StructLayout layout =  MemoryLayout.structLayout(\n+            JAVA_INT.withName(\"length\"),\n+            JAVA_INT.withName(\"multiScaleAccumulativeRange\"),\n+            MemoryLayout.sequenceLayout(0, ScaleTable.Scale.layout).withName(\"scale\")\n+    ).withName(ScaleTable.class.getSimpleName());\n@@ -115,7 +123,3 @@\n-        ScaleTable scaleTable = SegmentMapper.of(accelerator.lookup, ScaleTable.class,\n-                JAVA_INT.withName(\"length\"),\n-                JAVA_INT.withName(\"multiScaleAccumulativeRange\"),\n-                MemoryLayout.sequenceLayout(length, ScaleTable.Scale.layout).withName(\"scale\")\n-        ).allocate(accelerator.backend.arena());\n-        scaleTable.length(length);\n-        return scaleTable;\n+        return Buffer.setLength(\n+                SegmentMapper.ofIncomplete(accelerator.lookup,ScaleTable.class,layout,length)\n+                        .allocate(accelerator.backend.arena()),length);\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/ifaces\/ScaleTable.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.buffer.Buffer;\n@@ -94,1 +95,1 @@\n-                backendHandle = (long) getBackend_MH.invoke(backendConfig.memorySegment(), schema.length(), cstr);\n+                backendHandle = (long) getBackend_MH.invoke(Buffer.getMemorySegment(backendConfig), schema.length(), cstr);\n@@ -126,1 +127,1 @@\n-            dumpArgArray_MH.invoke(argArray.memorySegment());\n+            dumpArgArray_MH.invoke(Buffer.getMemorySegment(argArray));\n@@ -148,1 +149,1 @@\n-            this.ndrange_MH.invoke(kernelHandle, argArray.memorySegment());\n+            this.ndrange_MH.invoke(kernelHandle, Buffer.getMemorySegment(argArray));\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/NativeBackendDriver.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.lang.foreign.GroupLayout;\n@@ -133,1 +134,1 @@\n-                    info.setLayout(buffer.layout());\n+                    info.setLayout((GroupLayout) Buffer.getLayout(buffer));\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatKernelBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-        this(instance.getClass().getInterfaces()[0], instance.layout());\n+        this(instance.getClass().getInterfaces()[0], Buffer.getLayout(instance));\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/Typedef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                ).withName(\"buf\");\n+                ).withName(Buf.class.getSimpleName());\n@@ -94,1 +94,1 @@\n-            ).withName(\"value\");\n+            ).withName(Value.class.getSimpleName());\n@@ -144,1 +144,1 @@\n-        );\n+        ).withName(Arg.class.getSimpleName());\n@@ -330,1 +330,1 @@\n-                    MemorySegment segment = buffer.memorySegment();\n+                    MemorySegment segment = Buffer.getMemorySegment(buffer);\n@@ -393,1 +393,1 @@\n-                    MemorySegment segment = buffer.memorySegment();\n+                    MemorySegment segment = Buffer.getMemorySegment(buffer);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/ArgArray.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static <T extends Array1D> StructLayout layout(Class<T> clazz, MemoryLayout memoryLayout, int length) {\n+    static <T extends Array1D> StructLayout getLayout(Class<T> clazz, MemoryLayout memoryLayout) {\n@@ -40,1 +40,1 @@\n-                MemoryLayout.sequenceLayout(length, memoryLayout).withName(\"array\")\n+                MemoryLayout.sequenceLayout(0, memoryLayout).withName(\"array\")\n@@ -44,5 +44,4 @@\n-    static <T extends Array1D> T create(Accelerator accelerator, Class<T> clazz, int length, MemoryLayout memoryLayout) {\n-        StructLayout structLayout = Array1D.layout(clazz, memoryLayout, length);\n-        T buffer = SegmentMapper.of(accelerator.lookup, clazz, structLayout).allocate(accelerator.backend.arena());\n-        MemorySegment segment = buffer.memorySegment();\n-        segment.set(JAVA_INT, structLayout.byteOffset(MemoryLayout.PathElement.groupElement(\"length\")), length);\n+    static <T extends Array1D> T create(Accelerator accelerator, Class<T> clazz, StructLayout structLayout, int length) {\n+\n+        T buffer = SegmentMapper.ofIncomplete(accelerator.lookup, clazz, structLayout,length).allocate(accelerator.backend.arena());\n+        Buffer.setLength(buffer,length);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Array1D.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static <T extends Array2D> StructLayout layout(Class<T> clazz, MemoryLayout memoryLayout, int length) {\n+    static <T extends Array2D> StructLayout getLayout(Class<T> iface, MemoryLayout memoryLayout) {\n@@ -41,2 +41,2 @@\n-                MemoryLayout.sequenceLayout(length, memoryLayout).withName(\"array\")\n-        ).withName(clazz.getSimpleName());\n+                MemoryLayout.sequenceLayout(0, memoryLayout).withName(\"array\")\n+        ).withName(iface.getSimpleName());\n@@ -45,3 +45,3 @@\n-    static <T extends Array2D> T create(Accelerator accelerator, Class<T> clazz, int width, int height, MemoryLayout memoryLayout) {\n-        StructLayout structLayout = Array2D.layout(clazz, memoryLayout, width * height);\n-        T buffer = SegmentMapper.of(accelerator.lookup, clazz, Array2D.layout(clazz, memoryLayout, width * height))\n+    static <T extends Array2D> T create(Accelerator accelerator, Class<T> clazz, StructLayout structLayout,int width, int height) {\n+\n+        T buffer = SegmentMapper.ofIncomplete(accelerator.lookup, clazz, structLayout, (long) width * height)\n@@ -49,1 +49,1 @@\n-        MemorySegment segment = buffer.memorySegment();\n+        MemorySegment segment = Buffer.getMemorySegment(buffer);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Array2D.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,0 +39,5 @@\n+import static hat.ifacemapper.MapperUtil.SECRET_LAYOUT_METHOD_NAME;\n+import static hat.ifacemapper.MapperUtil.SECRET_OFFSET_METHOD_NAME;\n+import static hat.ifacemapper.MapperUtil.SECRET_SEGMENT_METHOD_NAME;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n@@ -40,1 +45,1 @@\n-    default MemorySegment memorySegment() {\n+    static <T extends Buffer>MemorySegment getMemorySegment(T buffer){\n@@ -42,1 +47,1 @@\n-            return (MemorySegment) getClass().getDeclaredMethod(\"$_$_$sEgMeNt$_$_$\").invoke(this);\n+            return (MemorySegment) buffer.getClass().getDeclaredMethod(SECRET_SEGMENT_METHOD_NAME).invoke(buffer);\n@@ -48,1 +53,9 @@\n-    default GroupLayout layout() {\n+   static <T extends Buffer>MemoryLayout getLayout(T buffer){\n+       try {\n+           return (MemoryLayout) buffer.getClass().getDeclaredMethod(SECRET_LAYOUT_METHOD_NAME).invoke(buffer);\n+       } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+           throw new RuntimeException(e);\n+       }\n+   }\n+\n+    static <T extends Buffer>long getOffset(T buffer){\n@@ -50,1 +63,1 @@\n-            return (GroupLayout) getClass().getDeclaredMethod(\"$_$_$lAyOuT$_$_$\").invoke(this);\n+            return (long) buffer.getClass().getDeclaredMethod(SECRET_OFFSET_METHOD_NAME).invoke(buffer);\n@@ -55,0 +68,6 @@\n+\n+    static <T extends Buffer> T setLength(T buffer, int length){\n+        Buffer.getMemorySegment(buffer).set(JAVA_INT, Buffer.getLayout(buffer).byteOffset(MemoryLayout.PathElement.groupElement(\"length\")), length);\n+        return buffer;\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Buffer.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-                .literal(memorySegment().byteSize())\n+                .literal(Buffer.getMemorySegment(this).byteSize())\n@@ -11,1 +11,1 @@\n-                .layout(layout(),null, false)\n+                .layout(Buffer.getLayout(this),null, false)\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/CompleteBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.StructLayout;\n@@ -34,0 +35,1 @@\n+    StructLayout layout  = Array1D.getLayout(F32Array.class, JAVA_FLOAT);\n@@ -35,1 +37,1 @@\n-        return Array1D.create(accelerator, F32Array.class, length, JAVA_FLOAT);\n+        return Array1D.create(accelerator, F32Array.class,layout, length);\n@@ -47,1 +49,1 @@\n-        MemorySegment.copy(floats, 0, memorySegment(), JAVA_FLOAT, 4, length());\n+        MemorySegment.copy(floats, 0, Buffer.getMemorySegment(this), JAVA_FLOAT, 4, length());\n@@ -52,1 +54,1 @@\n-        MemorySegment.copy(memorySegment(), JAVA_FLOAT, 4, floats, 0, length());\n+        MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_FLOAT, 4, floats, 0, length());\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/F32Array.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.foreign.StructLayout;\n+\n@@ -30,0 +32,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n@@ -32,0 +35,1 @@\n+    StructLayout layout  = Array2D.getLayout(F32Array2D.class, JAVA_FLOAT);\n@@ -33,1 +37,1 @@\n-        return Array2D.create(accelerator, F32Array2D.class, width, height, JAVA_FLOAT);\n+        return Array2D.create(accelerator, F32Array2D.class, layout, width, height);\n@@ -35,1 +39,0 @@\n-\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/F32Array2D.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,9 @@\n-\n+    static StructLayout createLayout(Class iface, ValueLayout valueLayout) {\n+        return MemoryLayout.structLayout(\n+                JAVA_INT.withName(\"width\"),\n+                JAVA_INT.withName(\"height\"),\n+                JAVA_INT.withName(\"elementsPerPixel\"),\n+                JAVA_INT.withName(\"bufferedImageType\"),\n+                MemoryLayout.sequenceLayout(0, valueLayout).withName(\"data\")\n+        ).withName(iface.getSimpleName());\n+    }\n@@ -53,10 +61,3 @@\n-    static <T extends ImageBuffer> T create(Accelerator accelerator, Class<T> iface, int width, int height, int bufferedImageType, int elementsPerPixel, ValueLayout valueLayout) {\n-        StructLayout structLayout = MemoryLayout.structLayout(\n-                JAVA_INT.withName(\"width\"),\n-                JAVA_INT.withName(\"height\"),\n-                JAVA_INT.withName(\"elementsPerPixel\"),\n-                JAVA_INT.withName(\"bufferedImageType\"),\n-                MemoryLayout.sequenceLayout((long) width * height * elementsPerPixel, valueLayout).withName(\"data\")\n-        ).withName(iface.getSimpleName());\n-        T rgba = SegmentMapper.of(accelerator.lookup, iface, structLayout).allocate(accelerator.backend.arena());\n-        MemorySegment segment = rgba.memorySegment();\n+    static <T extends ImageBuffer> T create(Accelerator accelerator, Class<T> iface,StructLayout structLayout, int width, int height, int bufferedImageType, int elementsPerPixel) {\n+        T rgba = SegmentMapper.ofIncomplete(accelerator.lookup, iface, structLayout, width * height * elementsPerPixel).allocate(accelerator.backend.arena());\n+        MemorySegment segment = Buffer.getMemorySegment(rgba);\n@@ -81,1 +82,1 @@\n-                    MemorySegment.copy(memorySegment(), JAVA_SHORT, 16L, arr.getData(), 0, arr.getData().length);\n+                    MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_SHORT, 16L, arr.getData(), 0, arr.getData().length);\n@@ -83,1 +84,1 @@\n-                    MemorySegment.copy(memorySegment(), JAVA_INT, 16L, arr.getData(), 0, arr.getData().length);\n+                    MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_INT, 16L, arr.getData(), 0, arr.getData().length);\n@@ -85,1 +86,1 @@\n-                    MemorySegment.copy(memorySegment(), JAVA_BYTE, 16L, arr.getData(), 0, arr.getData().length);\n+                    MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_BYTE, 16L, arr.getData(), 0, arr.getData().length);\n@@ -99,1 +100,1 @@\n-                    MemorySegment.copy(arr.getData(), 0, memorySegment(), JAVA_INT, 16L, arr.getData().length);\n+                    MemorySegment.copy(arr.getData(), 0, Buffer.getMemorySegment(this), JAVA_INT, 16L, arr.getData().length);\n@@ -101,1 +102,1 @@\n-                    MemorySegment.copy(arr.getData(), 0, memorySegment(), JAVA_BYTE, 16L, arr.getData().length);\n+                    MemorySegment.copy(arr.getData(), 0, Buffer.getMemorySegment(this), JAVA_BYTE, 16L, arr.getData().length);\n@@ -103,1 +104,1 @@\n-                    MemorySegment.copy(arr.getData(), 0, memorySegment(), JAVA_SHORT, 16L, arr.getData().length);\n+                    MemorySegment.copy(arr.getData(), 0, Buffer.getMemorySegment(this), JAVA_SHORT, 16L, arr.getData().length);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/ImageBuffer.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-        MemoryLayout memoryLayout = layout();\n+        MemoryLayout memoryLayout = Buffer.getLayout(this);\n@@ -17,1 +17,1 @@\n-                        .layout(layout(),tailSequenceLayout,true)\n+                        .layout(Buffer.getLayout(this),tailSequenceLayout,true)\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/IncompleteBuffer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,0 +6,2 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.StructLayout;\n@@ -11,0 +13,5 @@\n+    StructLayout layout = MemoryLayout.structLayout(\n+            JAVA_INT.withName(\"x\"),\n+            JAVA_INT.withName(\"maxX\")\n+    ).withName(KernelContext.class.getSimpleName());\n+\n@@ -12,4 +19,1 @@\n-        KernelContext kernelContext = SegmentMapper.of(lookup, KernelContext.class,\n-                JAVA_INT.withName(\"x\"),\n-                JAVA_INT.withName(\"maxX\")\n-        ).allocate(arena);\n+        KernelContext kernelContext = SegmentMapper.of(lookup, KernelContext.class,layout).allocate(arena);\n@@ -17,1 +21,1 @@\n-        kernelContext.maxX(x);\n+        kernelContext.maxX(maxX);\n@@ -20,1 +24,0 @@\n-\n@@ -22,1 +25,0 @@\n-\n@@ -24,1 +26,0 @@\n-\n@@ -26,1 +27,0 @@\n-\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/KernelContext.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.StructLayout;\n@@ -31,0 +32,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n@@ -34,0 +36,1 @@\n+    StructLayout layout  = Array1D.getLayout(S32Array.class, JAVA_INT);\n@@ -35,1 +38,1 @@\n-        return Array1D.create(accelerator, S32Array.class, length, JAVA_INT);\n+        return Array1D.create(accelerator, S32Array.class,layout, length);\n@@ -47,1 +50,1 @@\n-        MemorySegment.copy(floats, 0, memorySegment(), JAVA_INT, 4, length());\n+        MemorySegment.copy(floats, 0, Buffer.getMemorySegment(this), JAVA_INT, 4, length());\n@@ -52,1 +55,1 @@\n-        MemorySegment.copy(memorySegment(), JAVA_INT, 4, floats, 0, length());\n+        MemorySegment.copy(Buffer.getMemorySegment(this), JAVA_INT, 4, floats, 0, length());\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/S32Array.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import java.lang.foreign.StructLayout;\n+\n@@ -32,0 +34,1 @@\n+    StructLayout layout  = Array2D.getLayout(S32Array2D.class, JAVA_INT);\n@@ -33,1 +36,1 @@\n-        return Array2D.create(accelerator, S32Array2D.class, width, height, JAVA_INT);\n+        return Array2D.create(accelerator, S32Array2D.class, layout, width, height);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/S32Array2D.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,3 +26,0 @@\n-\n-import java.util.function.Consumer;\n-\n@@ -30,6 +27,0 @@\n-\n-   \/\/ default void with(int i, Consumer<T> consumer) {\n-     \/\/   T t = get(i);\n-       \/\/ consumer.accept(t);\n-   \/\/ }\n-\n@@ -37,4 +28,0 @@\n-\n-    void length(int length);\n-\n-   \/\/ T get(int i);\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/Table.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -738,0 +738,42 @@\n+    \/**\n+     * {@return a segment mapper that maps {@linkplain MemorySegment memory segments}\n+     * to the provided interface {@code type} using the provided {@code layout}\n+     * and using the provided {@code lookup}}\n+     *\n+     * @param lookup to use when performing reflective analysis on the\n+     *               provided {@code type}\n+     * @param type   to map memory segment from and to\n+     * @param layout to be used when mapping the provided {@code type}\n+     * @param length to replace the length of the last element (sequenceLayout)\n+     * @param <T>    the type the returned mapper converts MemorySegments from and to\n+     * @throws IllegalArgumentException if the provided {@code type} is not an interface\n+     * @throws IllegalArgumentException if the provided {@code type} is a hidden interface\n+     * @throws IllegalArgumentException if the provided {@code type} is a sealed interface\n+     * @throws IllegalArgumentException if the provided interface {@code type} directly\n+     *                                  declares any generic type parameter\n+     * @throws IllegalArgumentException if the provided interface {@code type} cannot be\n+     *                                  reflectively analysed using the provided {@code lookup}\n+     * @throws IllegalArgumentException if the provided interface {@code type} contains\n+     *                                  methods for which there are no exact mapping (of names and types) in\n+     *                                  the provided {@code layout} or if the provided {@code type} is not public or\n+     *                                  if the method is otherwise unable to create a segment mapper as specified above\n+     * @implNote The order in which methods appear (e.g. in the {@code toString} method)\n+     * is derived from the provided {@code layout}.\n+     * @implNote The returned class can be a\n+     * <a href=\"{@docRoot}\/java.base\/java\/lang\/doc-files\/ValueBased.html\">value-based<\/a>\n+     * class; programmers should treat instances that are\n+     * {@linkplain Object#equals(Object) equal} as interchangeable and should\n+     * not use instances for synchronization, or unpredictable behavior may\n+     * occur. For example, in a future release, synchronization may fail.\n+     * @implNote The returned class can be a {@linkplain Class#isHidden() hidden} class.\n+     *\/\n+\n+    static <T> SegmentMapper<T> ofIncomplete(MethodHandles.Lookup lookup,\n+                                   Class<T> type,\n+                                   GroupLayout layout, long length) {\n+        var members= layout.memberLayouts().toArray(new MemoryLayout[0]);\n+        SequenceLayout sequenceLayout = (SequenceLayout) members[members.length-1];\n+        var newLayout = MemoryLayout.sequenceLayout(length,sequenceLayout.elementLayout()).withName(sequenceLayout.name().get());\n+        members[members.length-1]=newLayout;\n+        return of(lookup,type,members);\n+    }\n","filename":"hat\/hat\/src\/main\/java\/hat\/ifacemapper\/SegmentMapper.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -56,1 +56,6 @@\n-        return nonDeclaredMethod.get();\n+        if (nonDeclaredMethod.isPresent()){\n+            return nonDeclaredMethod.get();\n+        }else {\n+            throw new IllegalStateException(\"what were we looking for ?\"); \/\/ getClass causes this\n+            \/\/return nonDeclaredMethod.get();\n+        }\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/InvokeOpWrapper.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+    <mapping directory=\"$PROJECT_DIR$\/..\/..\/..\/beehive-spirv-toolkit\" vcs=\"Git\" \/>\n@@ -7,1 +8,1 @@\n-<\/project>\n+<\/project>\n\\ No newline at end of file\n","filename":"hat\/intellij\/.idea\/vcs.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}