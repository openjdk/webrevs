{"files":[{"patch":"@@ -780,0 +780,9 @@\n+add_custom_target(squares_ptx DEPENDS squares.jar ptx_backend.jar ptx_backend\n+   COMMAND  ${DOIT}\n+     ${JAVA_HOME}\/bin\/java\n+       --enable-preview --enable-native-access=ALL-UNNAMED\n+       --class-path ${HAT_JAR}:${SQUARES_JAR}:${PTX_BACKEND_JAR}\n+       --add-exports=java.base\/jdk.internal=ALL-UNNAMED\n+       -Djava.library.path=${CMAKE_BINARY_DIR}\n+       squares.Squares\n+)\n","filename":"hat\/CMakeLists.txt","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,1 +88,5 @@\n-)\n\\ No newline at end of file\n+)\n+add_library(ptx_backend SHARED\n+        ${CMAKE_SOURCE_DIR}\/shared\/cpp\/shared.cpp\n+        ${CMAKE_SOURCE_DIR}\/ptx\/cpp\/ptx_backend.cpp\n+)\n","filename":"hat\/backends\/CMakeLists.txt","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-            PTXKernel(Backend::Program *program)\n-                    : Backend::Program::Kernel(program) {\n+            PTXKernel(Backend::Program *program, std::string name)\n+                    : Backend::Program::Kernel(program, name) {\n@@ -44,2 +44,2 @@\n-            long ndrange(int range, void *argArray) {\n-                std::cout << \"ptx ndrange(\" << range << \") \" << std::endl;\n+            long ndrange(void *argArray) {\n+                std::cout << \"ptx ndrange() \" << std::endl;\n@@ -59,1 +59,1 @@\n-            return (long) new PTXKernel(this);\n+            return (long) new PTXKernel(this, std::string(name));\n","filename":"hat\/backends\/ptx\/cpp\/ptx_backend.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-        kernelCallGraph.kernelReachableResolvedStream().forEach(kr -> {\n@@ -53,1 +52,12 @@\n-        });\n+        \/\/ sort the dag by rank means that we get the methods called by the entrypoint in dependency order\n+        \/\/ of course there may not be any of these\n+        kernelCallGraph.kernelReachableResolvedStream()\n+                .sorted((lhs, rhs) -> rhs.rank - lhs.rank)\n+                .forEach(kernelReachableResolvedMethod ->\n+                        System.out.println(\" call to -> \"+kernelReachableResolvedMethod.method.getName())\n+                );\n+\n+        System.out.println(\"Entrypoint ->\"+kernelCallGraph.entrypoint.method.getName());\n+        System.out.println(kernelCallGraph.entrypoint.funcOpWrapper().toText());\n+        System.out.println(\"Add your code to \"+PTXBackend.class.getName()+\".dispatchKernel() to actually run! :)\");\n+        System.exit(1);\n","filename":"hat\/backends\/ptx\/java\/hat\/backend\/PTXBackend.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-           int value = s32Array.array(kc.x);     \/\/ arr[cc.x]\n+           int value = s32Array.array(kc.x);        \/\/ arr[cc.x]\n@@ -46,1 +46,3 @@\n-        cc.dispatchKernel(s32Array.length(), kc -> squareKernel(kc, s32Array));\n+        cc.dispatchKernel(s32Array.length(),\n+                kc -> squareKernel(kc, s32Array)\n+        );\n","filename":"hat\/examples\/squares\/src\/java\/squares\/Squares.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -15,0 +15,1 @@\n+    <orderEntry type=\"module\" module-name=\"backend_ptx\" \/>\n@@ -16,1 +17,1 @@\n-<\/module>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/squares.iml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}