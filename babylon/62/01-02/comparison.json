{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    @OpDeclaration(FuncOp.NAME)\n+    @OpFactory.OpDeclaration(FuncOp.NAME)\n@@ -84,1 +84,1 @@\n-        public static FuncOp create(ExternalOpContent def) {\n+        public static FuncOp create(ExternalizedOp def) {\n@@ -97,1 +97,1 @@\n-        FuncOp(ExternalOpContent def, String funcName) {\n+        FuncOp(ExternalizedOp def, String funcName) {\n@@ -181,1 +181,1 @@\n-    @OpDeclaration(FuncCallOp.NAME)\n+    @OpFactory.OpDeclaration(FuncCallOp.NAME)\n@@ -189,1 +189,1 @@\n-        public static FuncCallOp create(ExternalOpContent def) {\n+        public static FuncCallOp create(ExternalizedOp def) {\n@@ -199,1 +199,1 @@\n-        FuncCallOp(ExternalOpContent def, String funcName) {\n+        FuncCallOp(ExternalizedOp def, String funcName) {\n@@ -246,1 +246,1 @@\n-    @OpDeclaration(ModuleOp.NAME)\n+    @OpFactory.OpDeclaration(ModuleOp.NAME)\n@@ -254,1 +254,1 @@\n-        public static ModuleOp create(ExternalOpContent def) {\n+        public static ModuleOp create(ExternalizedOp def) {\n@@ -262,1 +262,1 @@\n-        ModuleOp(ExternalOpContent def) {\n+        ModuleOp(ExternalizedOp def) {\n@@ -330,1 +330,1 @@\n-    @OpDeclaration(QuotedOp.NAME)\n+    @OpFactory.OpDeclaration(QuotedOp.NAME)\n@@ -343,1 +343,1 @@\n-        public QuotedOp(ExternalOpContent def) {\n+        public QuotedOp(ExternalizedOp def) {\n@@ -416,1 +416,1 @@\n-    @OpDeclaration(LambdaOp.NAME)\n+    @OpFactory.OpDeclaration(LambdaOp.NAME)\n@@ -442,1 +442,1 @@\n-        public LambdaOp(ExternalOpContent def) {\n+        public LambdaOp(ExternalizedOp def) {\n@@ -650,1 +650,1 @@\n-    @OpDeclaration(ClosureOp.NAME)\n+    @OpFactory.OpDeclaration(ClosureOp.NAME)\n@@ -673,1 +673,1 @@\n-        public ClosureOp(ExternalOpContent def) {\n+        public ClosureOp(ExternalizedOp def) {\n@@ -742,1 +742,1 @@\n-    @OpDeclaration(ClosureCallOp.NAME)\n+    @OpFactory.OpDeclaration(ClosureCallOp.NAME)\n@@ -746,1 +746,1 @@\n-        public ClosureCallOp(ExternalOpContent def) {\n+        public ClosureCallOp(ExternalizedOp def) {\n@@ -775,1 +775,1 @@\n-    @OpDeclaration(ReturnOp.NAME)\n+    @OpFactory.OpDeclaration(ReturnOp.NAME)\n@@ -779,1 +779,1 @@\n-        public ReturnOp(ExternalOpContent def) {\n+        public ReturnOp(ExternalizedOp def) {\n@@ -822,1 +822,1 @@\n-    @OpDeclaration(ThrowOp.NAME)\n+    @OpFactory.OpDeclaration(ThrowOp.NAME)\n@@ -826,1 +826,1 @@\n-        public ThrowOp(ExternalOpContent def) {\n+        public ThrowOp(ExternalizedOp def) {\n@@ -860,1 +860,1 @@\n-    @OpDeclaration(AssertOp.NAME)\n+    @OpFactory.OpDeclaration(AssertOp.NAME)\n@@ -865,1 +865,1 @@\n-        public AssertOp(ExternalOpContent def) {\n+        public AssertOp(ExternalizedOp def) {\n@@ -911,1 +911,1 @@\n-    @OpDeclaration(UnreachableOp.NAME)\n+    @OpFactory.OpDeclaration(UnreachableOp.NAME)\n@@ -915,1 +915,1 @@\n-        public UnreachableOp(ExternalOpContent def) {\n+        public UnreachableOp(ExternalizedOp def) {\n@@ -948,1 +948,1 @@\n-    @OpDeclaration(YieldOp.NAME)\n+    @OpFactory.OpDeclaration(YieldOp.NAME)\n@@ -952,1 +952,1 @@\n-        public YieldOp(ExternalOpContent def) {\n+        public YieldOp(ExternalizedOp def) {\n@@ -997,1 +997,1 @@\n-    @OpDeclaration(BranchOp.NAME)\n+    @OpFactory.OpDeclaration(BranchOp.NAME)\n@@ -1003,1 +1003,1 @@\n-        public BranchOp(ExternalOpContent def) {\n+        public BranchOp(ExternalizedOp def) {\n@@ -1052,1 +1052,1 @@\n-    @OpDeclaration(ConditionalBranchOp.NAME)\n+    @OpFactory.OpDeclaration(ConditionalBranchOp.NAME)\n@@ -1059,1 +1059,1 @@\n-        public ConditionalBranchOp(ExternalOpContent def) {\n+        public ConditionalBranchOp(ExternalizedOp def) {\n@@ -1115,1 +1115,1 @@\n-    @OpDeclaration(ConstantOp.NAME)\n+    @OpFactory.OpDeclaration(ConstantOp.NAME)\n@@ -1124,1 +1124,1 @@\n-        public static ConstantOp create(ExternalOpContent def) {\n+        public static ConstantOp create(ExternalizedOp def) {\n@@ -1195,1 +1195,1 @@\n-        ConstantOp(ExternalOpContent def, Object value) {\n+        ConstantOp(ExternalizedOp def, Object value) {\n@@ -1250,1 +1250,1 @@\n-    @OpDeclaration(InvokeOp.NAME)\n+    @OpFactory.OpDeclaration(InvokeOp.NAME)\n@@ -1258,1 +1258,1 @@\n-        public static InvokeOp create(ExternalOpContent def) {\n+        public static InvokeOp create(ExternalizedOp def) {\n@@ -1269,1 +1269,1 @@\n-        InvokeOp(ExternalOpContent def, MethodRef invokeDescriptor) {\n+        InvokeOp(ExternalizedOp def, MethodRef invokeDescriptor) {\n@@ -1324,1 +1324,1 @@\n-    @OpDeclaration(ConvOp.NAME)\n+    @OpFactory.OpDeclaration(ConvOp.NAME)\n@@ -1330,1 +1330,1 @@\n-        public ConvOp(ExternalOpContent def) {\n+        public ConvOp(ExternalizedOp def) {\n@@ -1362,1 +1362,1 @@\n-    @OpDeclaration(NewOp.NAME)\n+    @OpFactory.OpDeclaration(NewOp.NAME)\n@@ -1370,1 +1370,1 @@\n-        public static NewOp create(ExternalOpContent def) {\n+        public static NewOp create(ExternalizedOp def) {\n@@ -1387,1 +1387,1 @@\n-        NewOp(ExternalOpContent def, FunctionType constructorType) {\n+        NewOp(ExternalizedOp def, FunctionType constructorType) {\n@@ -1452,1 +1452,1 @@\n-        FieldAccessOp(ExternalOpContent def, FieldRef fieldDescriptor) {\n+        FieldAccessOp(ExternalizedOp def, FieldRef fieldDescriptor) {\n@@ -1486,1 +1486,1 @@\n-        @OpDeclaration(FieldLoadOp.NAME)\n+        @OpFactory.OpDeclaration(FieldLoadOp.NAME)\n@@ -1492,1 +1492,1 @@\n-            public static FieldLoadOp create(ExternalOpContent def) {\n+            public static FieldLoadOp create(ExternalizedOp def) {\n@@ -1507,1 +1507,1 @@\n-            FieldLoadOp(ExternalOpContent opdef, FieldRef fieldDescriptor) {\n+            FieldLoadOp(ExternalizedOp opdef, FieldRef fieldDescriptor) {\n@@ -1548,1 +1548,1 @@\n-        @OpDeclaration(FieldStoreOp.NAME)\n+        @OpFactory.OpDeclaration(FieldStoreOp.NAME)\n@@ -1552,1 +1552,1 @@\n-            public static FieldStoreOp create(ExternalOpContent def) {\n+            public static FieldStoreOp create(ExternalizedOp def) {\n@@ -1567,1 +1567,1 @@\n-            FieldStoreOp(ExternalOpContent opdef, FieldRef fieldDescriptor) {\n+            FieldStoreOp(ExternalizedOp opdef, FieldRef fieldDescriptor) {\n@@ -1603,1 +1603,1 @@\n-    @OpDeclaration(ArrayLengthOp.NAME)\n+    @OpFactory.OpDeclaration(ArrayLengthOp.NAME)\n@@ -1607,1 +1607,1 @@\n-        public ArrayLengthOp(ExternalOpContent def) {\n+        public ArrayLengthOp(ExternalizedOp def) {\n@@ -1634,1 +1634,1 @@\n-        ArrayAccessOp(ExternalOpContent def) {\n+        ArrayAccessOp(ExternalizedOp def) {\n@@ -1681,1 +1681,1 @@\n-        @OpDeclaration(ArrayLoadOp.NAME)\n+        @OpFactory.OpDeclaration(ArrayLoadOp.NAME)\n@@ -1685,1 +1685,1 @@\n-            public ArrayLoadOp(ExternalOpContent def) {\n+            public ArrayLoadOp(ExternalizedOp def) {\n@@ -1714,1 +1714,1 @@\n-        @OpDeclaration(ArrayStoreOp.NAME)\n+        @OpFactory.OpDeclaration(ArrayStoreOp.NAME)\n@@ -1718,1 +1718,1 @@\n-            public ArrayStoreOp(ExternalOpContent def) {\n+            public ArrayStoreOp(ExternalizedOp def) {\n@@ -1746,1 +1746,1 @@\n-    @OpDeclaration(InstanceOfOp.NAME)\n+    @OpFactory.OpDeclaration(InstanceOfOp.NAME)\n@@ -1753,1 +1753,1 @@\n-        public static InstanceOfOp create(ExternalOpContent def) {\n+        public static InstanceOfOp create(ExternalizedOp def) {\n@@ -1767,1 +1767,1 @@\n-        InstanceOfOp(ExternalOpContent def, TypeElement typeDescriptor) {\n+        InstanceOfOp(ExternalizedOp def, TypeElement typeDescriptor) {\n@@ -1811,1 +1811,1 @@\n-    @OpDeclaration(CastOp.NAME)\n+    @OpFactory.OpDeclaration(CastOp.NAME)\n@@ -1819,1 +1819,1 @@\n-        public static CastOp create(ExternalOpContent def) {\n+        public static CastOp create(ExternalizedOp def) {\n@@ -1833,1 +1833,1 @@\n-        CastOp(ExternalOpContent def, TypeElement typeDescriptor) {\n+        CastOp(ExternalizedOp def, TypeElement typeDescriptor) {\n@@ -1906,1 +1906,1 @@\n-    @OpDeclaration(VarOp.NAME)\n+    @OpFactory.OpDeclaration(VarOp.NAME)\n@@ -1914,1 +1914,1 @@\n-        public static VarOp create(ExternalOpContent def) {\n+        public static VarOp create(ExternalizedOp def) {\n@@ -1927,1 +1927,1 @@\n-        VarOp(ExternalOpContent def, String varName) {\n+        VarOp(ExternalizedOp def, String varName) {\n@@ -1987,1 +1987,1 @@\n-        VarAccessOp(ExternalOpContent opdef) {\n+        VarAccessOp(ExternalizedOp opdef) {\n@@ -2017,1 +2017,1 @@\n-        @OpDeclaration(VarLoadOp.NAME)\n+        @OpFactory.OpDeclaration(VarLoadOp.NAME)\n@@ -2021,1 +2021,1 @@\n-            public VarLoadOp(ExternalOpContent opdef) {\n+            public VarLoadOp(ExternalizedOp opdef) {\n@@ -2058,1 +2058,1 @@\n-        @OpDeclaration(VarStoreOp.NAME)\n+        @OpFactory.OpDeclaration(VarStoreOp.NAME)\n@@ -2062,1 +2062,1 @@\n-            public VarStoreOp(ExternalOpContent opdef) {\n+            public VarStoreOp(ExternalizedOp opdef) {\n@@ -2103,1 +2103,1 @@\n-    @OpDeclaration(TupleOp.NAME)\n+    @OpFactory.OpDeclaration(TupleOp.NAME)\n@@ -2107,1 +2107,1 @@\n-        public TupleOp(ExternalOpContent def) {\n+        public TupleOp(ExternalizedOp def) {\n@@ -2133,1 +2133,1 @@\n-    @OpDeclaration(TupleLoadOp.NAME)\n+    @OpFactory.OpDeclaration(TupleLoadOp.NAME)\n@@ -2140,1 +2140,1 @@\n-        public static TupleLoadOp create(ExternalOpContent def) {\n+        public static TupleLoadOp create(ExternalizedOp def) {\n@@ -2154,1 +2154,1 @@\n-        TupleLoadOp(ExternalOpContent def, int index) {\n+        TupleLoadOp(ExternalizedOp def, int index) {\n@@ -2204,1 +2204,1 @@\n-    @OpDeclaration(TupleWithOp.NAME)\n+    @OpFactory.OpDeclaration(TupleWithOp.NAME)\n@@ -2211,1 +2211,1 @@\n-        public static TupleWithOp create(ExternalOpContent def) {\n+        public static TupleWithOp create(ExternalizedOp def) {\n@@ -2225,1 +2225,1 @@\n-        TupleWithOp(ExternalOpContent def, int index) {\n+        TupleWithOp(ExternalizedOp def, int index) {\n@@ -2293,1 +2293,1 @@\n-    @OpDeclaration(ExceptionRegionEnter.NAME)\n+    @OpFactory.OpDeclaration(ExceptionRegionEnter.NAME)\n@@ -2303,1 +2303,1 @@\n-        public ExceptionRegionEnter(ExternalOpContent def) {\n+        public ExceptionRegionEnter(ExternalizedOp def) {\n@@ -2356,1 +2356,1 @@\n-    @OpDeclaration(ExceptionRegionExit.NAME)\n+    @OpFactory.OpDeclaration(ExceptionRegionExit.NAME)\n@@ -2362,1 +2362,1 @@\n-        public ExceptionRegionExit(ExternalOpContent def) {\n+        public ExceptionRegionExit(ExternalizedOp def) {\n@@ -2429,1 +2429,1 @@\n-    @OpDeclaration(ConcatOp.NAME)\n+    @OpFactory.OpDeclaration(ConcatOp.NAME)\n@@ -2437,1 +2437,1 @@\n-        public ConcatOp(ExternalOpContent def) {\n+        public ConcatOp(ExternalizedOp def) {\n@@ -2466,1 +2466,1 @@\n-        protected ArithmeticOperation(ExternalOpContent def) {\n+        protected ArithmeticOperation(ExternalizedOp def) {\n@@ -2487,1 +2487,1 @@\n-        protected TestOperation(ExternalOpContent def) {\n+        protected TestOperation(ExternalizedOp def) {\n@@ -2508,1 +2508,1 @@\n-        protected BinaryOp(ExternalOpContent def) {\n+        protected BinaryOp(ExternalizedOp def) {\n@@ -2534,1 +2534,1 @@\n-        protected UnaryOp(ExternalOpContent def) {\n+        protected UnaryOp(ExternalizedOp def) {\n@@ -2560,1 +2560,1 @@\n-        protected UnaryTestOp(ExternalOpContent def) {\n+        protected UnaryTestOp(ExternalizedOp def) {\n@@ -2581,1 +2581,1 @@\n-        protected BinaryTestOp(ExternalOpContent def) {\n+        protected BinaryTestOp(ExternalizedOp def) {\n@@ -2606,1 +2606,1 @@\n-    @OpDeclaration(AddOp.NAME)\n+    @OpFactory.OpDeclaration(AddOp.NAME)\n@@ -2610,1 +2610,1 @@\n-        public AddOp(ExternalOpContent def) {\n+        public AddOp(ExternalizedOp def) {\n@@ -2631,1 +2631,1 @@\n-    @OpDeclaration(SubOp.NAME)\n+    @OpFactory.OpDeclaration(SubOp.NAME)\n@@ -2635,1 +2635,1 @@\n-        public SubOp(ExternalOpContent opdef) {\n+        public SubOp(ExternalizedOp opdef) {\n@@ -2656,1 +2656,1 @@\n-    @OpDeclaration(MulOp.NAME)\n+    @OpFactory.OpDeclaration(MulOp.NAME)\n@@ -2660,1 +2660,1 @@\n-        public MulOp(ExternalOpContent opdef) {\n+        public MulOp(ExternalizedOp opdef) {\n@@ -2681,1 +2681,1 @@\n-    @OpDeclaration(DivOp.NAME)\n+    @OpFactory.OpDeclaration(DivOp.NAME)\n@@ -2685,1 +2685,1 @@\n-        public DivOp(ExternalOpContent opdef) {\n+        public DivOp(ExternalizedOp opdef) {\n@@ -2706,1 +2706,1 @@\n-    @OpDeclaration(ModOp.NAME)\n+    @OpFactory.OpDeclaration(ModOp.NAME)\n@@ -2710,1 +2710,1 @@\n-        public ModOp(ExternalOpContent opdef) {\n+        public ModOp(ExternalizedOp opdef) {\n@@ -2732,1 +2732,1 @@\n-    @OpDeclaration(OrOp.NAME)\n+    @OpFactory.OpDeclaration(OrOp.NAME)\n@@ -2736,1 +2736,1 @@\n-        public OrOp(ExternalOpContent opdef) {\n+        public OrOp(ExternalizedOp opdef) {\n@@ -2758,1 +2758,1 @@\n-    @OpDeclaration(AndOp.NAME)\n+    @OpFactory.OpDeclaration(AndOp.NAME)\n@@ -2762,1 +2762,1 @@\n-        public AndOp(ExternalOpContent opdef) {\n+        public AndOp(ExternalizedOp opdef) {\n@@ -2784,1 +2784,1 @@\n-    @OpDeclaration(XorOp.NAME)\n+    @OpFactory.OpDeclaration(XorOp.NAME)\n@@ -2788,1 +2788,1 @@\n-        public XorOp(ExternalOpContent opdef) {\n+        public XorOp(ExternalizedOp opdef) {\n@@ -2809,1 +2809,1 @@\n-    @OpDeclaration(LshlOp.NAME)\n+    @OpFactory.OpDeclaration(LshlOp.NAME)\n@@ -2813,1 +2813,1 @@\n-        public LshlOp(ExternalOpContent opdef) {\n+        public LshlOp(ExternalizedOp opdef) {\n@@ -2834,1 +2834,1 @@\n-    @OpDeclaration(AshrOp.NAME)\n+    @OpFactory.OpDeclaration(AshrOp.NAME)\n@@ -2838,1 +2838,1 @@\n-        public AshrOp(ExternalOpContent opdef) {\n+        public AshrOp(ExternalizedOp opdef) {\n@@ -2859,1 +2859,1 @@\n-    @OpDeclaration(LshrOp.NAME)\n+    @OpFactory.OpDeclaration(LshrOp.NAME)\n@@ -2863,1 +2863,1 @@\n-        public LshrOp(ExternalOpContent opdef) {\n+        public LshrOp(ExternalizedOp opdef) {\n@@ -2884,1 +2884,1 @@\n-    @OpDeclaration(NegOp.NAME)\n+    @OpFactory.OpDeclaration(NegOp.NAME)\n@@ -2888,1 +2888,1 @@\n-        public NegOp(ExternalOpContent opdef) {\n+        public NegOp(ExternalizedOp opdef) {\n@@ -2909,1 +2909,1 @@\n-    @OpDeclaration(NotOp.NAME)\n+    @OpFactory.OpDeclaration(NotOp.NAME)\n@@ -2913,1 +2913,1 @@\n-        public NotOp(ExternalOpContent opdef) {\n+        public NotOp(ExternalizedOp opdef) {\n@@ -2935,1 +2935,1 @@\n-    @OpDeclaration(EqOp.NAME)\n+    @OpFactory.OpDeclaration(EqOp.NAME)\n@@ -2939,1 +2939,1 @@\n-        public EqOp(ExternalOpContent opdef) {\n+        public EqOp(ExternalizedOp opdef) {\n@@ -2961,1 +2961,1 @@\n-    @OpDeclaration(NeqOp.NAME)\n+    @OpFactory.OpDeclaration(NeqOp.NAME)\n@@ -2965,1 +2965,1 @@\n-        public NeqOp(ExternalOpContent opdef) {\n+        public NeqOp(ExternalizedOp opdef) {\n@@ -2986,1 +2986,1 @@\n-    @OpDeclaration(GtOp.NAME)\n+    @OpFactory.OpDeclaration(GtOp.NAME)\n@@ -2990,1 +2990,1 @@\n-        public GtOp(ExternalOpContent opdef) {\n+        public GtOp(ExternalizedOp opdef) {\n@@ -3012,1 +3012,1 @@\n-    @OpDeclaration(GeOp.NAME)\n+    @OpFactory.OpDeclaration(GeOp.NAME)\n@@ -3016,1 +3016,1 @@\n-        public GeOp(ExternalOpContent opdef) {\n+        public GeOp(ExternalizedOp opdef) {\n@@ -3038,1 +3038,1 @@\n-    @OpDeclaration(LtOp.NAME)\n+    @OpFactory.OpDeclaration(LtOp.NAME)\n@@ -3042,1 +3042,1 @@\n-        public LtOp(ExternalOpContent opdef) {\n+        public LtOp(ExternalizedOp opdef) {\n@@ -3064,1 +3064,1 @@\n-    @OpDeclaration(LeOp.NAME)\n+    @OpFactory.OpDeclaration(LeOp.NAME)\n@@ -3068,1 +3068,1 @@\n-        public LeOp(ExternalOpContent opdef) {\n+        public LeOp(ExternalizedOp opdef) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":128,"deletions":128,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.reflect.code.type.PrimitiveType;\n@@ -77,1 +76,1 @@\n-        JavaLabelOp(ExternalOpContent def) {\n+        JavaLabelOp(ExternalizedOp def) {\n@@ -166,1 +165,1 @@\n-    @OpDeclaration(JavaBreakOp.NAME)\n+    @OpFactory.OpDeclaration(JavaBreakOp.NAME)\n@@ -170,1 +169,1 @@\n-        public JavaBreakOp(ExternalOpContent def) {\n+        public JavaBreakOp(ExternalizedOp def) {\n@@ -196,1 +195,1 @@\n-    @OpDeclaration(JavaContinueOp.NAME)\n+    @OpFactory.OpDeclaration(JavaContinueOp.NAME)\n@@ -200,1 +199,1 @@\n-        public JavaContinueOp(ExternalOpContent def) {\n+        public JavaContinueOp(ExternalizedOp def) {\n@@ -248,1 +247,1 @@\n-    @OpDeclaration(JavaYieldOp.NAME)\n+    @OpFactory.OpDeclaration(JavaYieldOp.NAME)\n@@ -252,1 +251,1 @@\n-        public JavaYieldOp(ExternalOpContent def) {\n+        public JavaYieldOp(ExternalizedOp def) {\n@@ -292,1 +291,1 @@\n-    @OpDeclaration(JavaBlockOp.NAME)\n+    @OpFactory.OpDeclaration(JavaBlockOp.NAME)\n@@ -299,1 +298,1 @@\n-        public JavaBlockOp(ExternalOpContent def) {\n+        public JavaBlockOp(ExternalizedOp def) {\n@@ -374,1 +373,1 @@\n-    @OpDeclaration(JavaLabeledOp.NAME)\n+    @OpFactory.OpDeclaration(JavaLabeledOp.NAME)\n@@ -380,1 +379,1 @@\n-        public JavaLabeledOp(ExternalOpContent def) {\n+        public JavaLabeledOp(ExternalizedOp def) {\n@@ -465,1 +464,1 @@\n-    @OpDeclaration(JavaIfOp.NAME)\n+    @OpFactory.OpDeclaration(JavaIfOp.NAME)\n@@ -554,1 +553,1 @@\n-        public JavaIfOp(ExternalOpContent def) {\n+        public JavaIfOp(ExternalizedOp def) {\n@@ -690,1 +689,1 @@\n-    @OpDeclaration(JavaSwitchExpressionOp.NAME)\n+    @OpFactory.OpDeclaration(JavaSwitchExpressionOp.NAME)\n@@ -697,1 +696,1 @@\n-        public JavaSwitchExpressionOp(ExternalOpContent def) {\n+        public JavaSwitchExpressionOp(ExternalizedOp def) {\n@@ -757,1 +756,1 @@\n-    @OpDeclaration(JavaSwitchFallthroughOp.NAME)\n+    @OpFactory.OpDeclaration(JavaSwitchFallthroughOp.NAME)\n@@ -761,1 +760,1 @@\n-        public JavaSwitchFallthroughOp(ExternalOpContent def) {\n+        public JavaSwitchFallthroughOp(ExternalizedOp def) {\n@@ -787,1 +786,1 @@\n-    @OpDeclaration(JavaForOp.NAME)\n+    @OpFactory.OpDeclaration(JavaForOp.NAME)\n@@ -889,1 +888,1 @@\n-        public static JavaForOp create(ExternalOpContent def) {\n+        public static JavaForOp create(ExternalizedOp def) {\n@@ -893,1 +892,1 @@\n-        public JavaForOp(ExternalOpContent def) {\n+        public JavaForOp(ExternalizedOp def) {\n@@ -1046,1 +1045,1 @@\n-    @OpDeclaration(JavaEnhancedForOp.NAME)\n+    @OpFactory.OpDeclaration(JavaEnhancedForOp.NAME)\n@@ -1124,1 +1123,1 @@\n-        public static JavaEnhancedForOp create(ExternalOpContent def) {\n+        public static JavaEnhancedForOp create(ExternalizedOp def) {\n@@ -1128,1 +1127,1 @@\n-        public JavaEnhancedForOp(ExternalOpContent def) {\n+        public JavaEnhancedForOp(ExternalizedOp def) {\n@@ -1306,1 +1305,1 @@\n-    @OpDeclaration(JavaWhileOp.NAME)\n+    @OpFactory.OpDeclaration(JavaWhileOp.NAME)\n@@ -1345,1 +1344,1 @@\n-        public JavaWhileOp(ExternalOpContent def) {\n+        public JavaWhileOp(ExternalizedOp def) {\n@@ -1451,1 +1450,1 @@\n-    @OpDeclaration(JavaDoWhileOp.NAME)\n+    @OpFactory.OpDeclaration(JavaDoWhileOp.NAME)\n@@ -1490,1 +1489,1 @@\n-        public JavaDoWhileOp(ExternalOpContent def) {\n+        public JavaDoWhileOp(ExternalizedOp def) {\n@@ -1597,1 +1596,1 @@\n-        public JavaConditionalOp(ExternalOpContent def) {\n+        public JavaConditionalOp(ExternalizedOp def) {\n@@ -1706,1 +1705,1 @@\n-    @OpDeclaration(JavaConditionalAndOp.NAME)\n+    @OpFactory.OpDeclaration(JavaConditionalAndOp.NAME)\n@@ -1735,1 +1734,1 @@\n-        public JavaConditionalAndOp(ExternalOpContent def) {\n+        public JavaConditionalAndOp(ExternalizedOp def) {\n@@ -1761,1 +1760,1 @@\n-    @OpDeclaration(JavaConditionalOrOp.NAME)\n+    @OpFactory.OpDeclaration(JavaConditionalOrOp.NAME)\n@@ -1790,1 +1789,1 @@\n-        public JavaConditionalOrOp(ExternalOpContent def) {\n+        public JavaConditionalOrOp(ExternalizedOp def) {\n@@ -1816,1 +1815,1 @@\n-    @OpDeclaration(JavaConditionalExpressionOp.NAME)\n+    @OpFactory.OpDeclaration(JavaConditionalExpressionOp.NAME)\n@@ -1825,1 +1824,1 @@\n-        public JavaConditionalExpressionOp(ExternalOpContent def) {\n+        public JavaConditionalExpressionOp(ExternalizedOp def) {\n@@ -1921,1 +1920,1 @@\n-    @OpDeclaration(JavaTryOp.NAME)\n+    @OpFactory.OpDeclaration(JavaTryOp.NAME)\n@@ -1986,1 +1985,1 @@\n-        public static JavaTryOp create(ExternalOpContent def) {\n+        public static JavaTryOp create(ExternalizedOp def) {\n@@ -1990,1 +1989,1 @@\n-        public JavaTryOp(ExternalOpContent def) {\n+        public JavaTryOp(ExternalizedOp def) {\n@@ -2425,1 +2424,1 @@\n-            PatternOp(ExternalOpContent def) {\n+            PatternOp(ExternalizedOp def) {\n@@ -2441,1 +2440,1 @@\n-        @OpDeclaration(BindingPatternOp.NAME)\n+        @OpFactory.OpDeclaration(BindingPatternOp.NAME)\n@@ -2450,1 +2449,1 @@\n-            public static BindingPatternOp create(ExternalOpContent def) {\n+            public static BindingPatternOp create(ExternalizedOp def) {\n@@ -2459,1 +2458,1 @@\n-            BindingPatternOp(ExternalOpContent def, String bindingName) {\n+            BindingPatternOp(ExternalizedOp def, String bindingName) {\n@@ -2509,1 +2508,1 @@\n-        @OpDeclaration(RecordPatternOp.NAME)\n+        @OpFactory.OpDeclaration(RecordPatternOp.NAME)\n@@ -2517,1 +2516,1 @@\n-            public static RecordPatternOp create(ExternalOpContent def) {\n+            public static RecordPatternOp create(ExternalizedOp def) {\n@@ -2528,1 +2527,1 @@\n-            RecordPatternOp(ExternalOpContent def, RecordTypeRef recordDescriptor) {\n+            RecordPatternOp(ExternalizedOp def, RecordTypeRef recordDescriptor) {\n@@ -2577,1 +2576,1 @@\n-        @OpDeclaration(MatchOp.NAME)\n+        @OpFactory.OpDeclaration(MatchOp.NAME)\n@@ -2584,1 +2583,1 @@\n-            public MatchOp(ExternalOpContent def) {\n+            public MatchOp(ExternalizedOp def) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":46,"deletions":47,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.op;\n-\n-import java.lang.reflect.code.*;\n-import java.lang.reflect.code.TypeElement;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-\n-\/**\n- * An operation's external content (a record) that can be utilized to construct an instance\n- * of an {@link ExternalizableOp} associated with the operation's name.\n- *\n- * @param name            the operation name\n- * @param operands        the list of operands\n- * @param successors      the list of successors\n- * @param resultType      the operation result type\n- * @param attributes      the operation's specific content as an attributes map, modifiable\n- * @param bodyDefinitions the list of body builders for building the operation's bodies\n- * @apiNote Deserializers of operations may utilize this record to construct operations,\n- * thereby separating the specifics of deserializing from construction.\n- *\/\n-public record ExternalOpContent(String name,\n-                                List<Value> operands,\n-                                List<Block.Reference> successors,\n-                                TypeElement resultType,\n-                                Map<String, Object> attributes,\n-                                List<Body.Builder> bodyDefinitions) {\n-\n-    \/**\n-     * Removes an attribute value from the attributes map, converts the value by applying it\n-     * to mapping function, and returns the result.\n-     *\n-     * <p>If the attribute is a default attribute then this method first attempts to\n-     * remove the attribute whose name is the empty string, otherwise if there is no such\n-     * attribute present or the attribute is not a default attribute then this method\n-     * attempts to remove the attribute with the given name.\n-     *\n-     * <p>On successful removal of the attribute its value is converted by applying the value\n-     * to the mapping function.\n-     *\n-     * @param name      the attribute name.\n-     * @param isDefault true if the attribute is a default attribute\n-     * @param <T>       the converted attribute value type\n-     * @return the converted attribute value\n-     * @throws IllegalArgumentException if there is no attribute present\n-     *\/\n-    public <T> T extractAttributeValue(String name, boolean isDefault, Function<Object, T> mapper) {\n-        Object value = attributes.remove(isDefault ? \"\" : name);\n-        if (value == null) {\n-            if (!isDefault) {\n-                throw new IllegalArgumentException(\"Required attribute not present: \"\n-                        + name);\n-            }\n-\n-            value = attributes.remove(name);\n-        }\n-\n-        return mapper.apply(value);\n-    }\n-\n-    \/**\n-     * Externalizes an operation to its external content.\n-     *\n-     * @param cc the copy context\n-     * @param op the operation\n-     * @return the operation's external content.\n-     *\/\n-    public static ExternalOpContent fromOp(CopyContext cc, Op op) {\n-        return new ExternalOpContent(\n-                op.opName(),\n-                cc.getValues(op.operands()),\n-                op.successors().stream().map(cc::getSuccessorOrCreate).toList(),\n-                op.resultType(),\n-                op instanceof ExternalizableOp exop ? new HashMap<>(exop.attributes()) : new HashMap<>(),\n-                op.bodies().stream().map(b -> b.copy(cc)).toList()\n-        );\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalOpContent.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.HashMap;\n@@ -31,0 +32,1 @@\n+import java.util.function.Function;\n@@ -34,1 +36,1 @@\n- * via an instance of {@link ExternalOpContent}.\n+ * via an instance of {@link ExternalizedOp}.\n@@ -38,1 +40,1 @@\n- * attributes component of an instance of {@link ExternalOpContent}.\n+ * attributes component of an instance of {@link ExternalizedOp}.\n@@ -42,1 +44,1 @@\n- * via parsing, into an instance of {@link ExternalOpContent} from which a new\n+ * via parsing, into an instance of {@link ExternalizedOp} from which a new\n@@ -48,0 +50,75 @@\n+    \/**\n+     * An operation's externalized content (a record) that can be utilized to construct an instance\n+     * of an {@link ExternalizableOp} associated with the operation's name.\n+     *\n+     * @param name            the operation name\n+     * @param operands        the list of operands\n+     * @param successors      the list of successors\n+     * @param resultType      the operation result type\n+     * @param attributes      the operation's specific content as an attributes map, modifiable\n+     * @param bodyDefinitions the list of body builders for building the operation's bodies\n+     * @apiNote Deserializers of operations may utilize this record to construct operations,\n+     * thereby separating the specifics of deserializing from construction.\n+     *\/\n+    public record ExternalizedOp(String name,\n+                                 List<Value> operands,\n+                                 List<Block.Reference> successors,\n+                                 TypeElement resultType,\n+                                 Map<String, Object> attributes,\n+                                 List<Body.Builder> bodyDefinitions) {\n+\n+        \/**\n+         * Removes an attribute value from the attributes map, converts the value by applying it\n+         * to mapping function, and returns the result.\n+         *\n+         * <p>If the attribute is a default attribute then this method first attempts to\n+         * remove the attribute whose name is the empty string, otherwise if there is no such\n+         * attribute present or the attribute is not a default attribute then this method\n+         * attempts to remove the attribute with the given name.\n+         *\n+         * <p>On successful removal of the attribute its value is converted by applying the value\n+         * to the mapping function.\n+         *\n+         * @param name      the attribute name.\n+         * @param isDefault true if the attribute is a default attribute\n+         * @param <T>       the converted attribute value type\n+         * @return the converted attribute value\n+         * @throws IllegalArgumentException if there is no attribute present\n+         *\/\n+        public <T> T extractAttributeValue(String name, boolean isDefault, Function<Object, T> mapper) {\n+            Object value = attributes.remove(isDefault ? \"\" : name);\n+            if (value == null) {\n+                if (!isDefault) {\n+                    throw new IllegalArgumentException(\"Required attribute not present: \"\n+                            + name);\n+                }\n+\n+                value = attributes.remove(name);\n+            }\n+\n+            return mapper.apply(value);\n+        }\n+\n+        \/**\n+         * Externalizes an operation's content.\n+         * <p>\n+         * If the operation is an instanceof {@code ExternalizableOp} then the operation's\n+         * specific content is externalized to an attribute map, otherwise the attribute map\n+         * is empty.\n+         *\n+         * @param cc the copy context\n+         * @param op the operation\n+         * @return the operation's content.\n+         *\/\n+        public static ExternalizedOp externalizeOp(CopyContext cc, Op op) {\n+            return new ExternalizedOp(\n+                    op.opName(),\n+                    cc.getValues(op.operands()),\n+                    op.successors().stream().map(cc::getSuccessorOrCreate).toList(),\n+                    op.resultType(),\n+                    op instanceof ExternalizableOp exop ? new HashMap<>(exop.attributes()) : new HashMap<>(),\n+                    op.bodies().stream().map(b -> b.copy(cc)).toList()\n+            );\n+        }\n+    }\n+\n@@ -92,1 +169,1 @@\n-    protected ExternalizableOp(ExternalOpContent def) {\n+    protected ExternalizableOp(ExternalizedOp def) {\n@@ -97,1 +174,1 @@\n-    static Location extractLocation(ExternalOpContent def) {\n+    static Location extractLocation(ExternalizedOp def) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalizableOp.java","additions":82,"deletions":5,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.op;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import java.lang.reflect.code.Op;\n-\n-\/**\n- * An operation declaration annotation.\n- * <p>\n- * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n- * that can be declared as this attribute's value.\n- * <p>\n- * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n- *\/\n-@Retention(RetentionPolicy.RUNTIME)\n-@Target(ElementType.TYPE)\n-public @interface OpDeclaration {\n-    \/**\n-     * {@return the operation name}\n-     *\/\n-    String value();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpDeclaration.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -28,0 +28,4 @@\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n@@ -39,1 +43,2 @@\n- * An operation factory for constructing an {@link Op operation} from its {@link ExternalOpContent external content}.\n+ * An operation factory for constructing an {@link Op operation} from its\n+ * {@link ExternalizableOp.ExternalizedOp external content}.\n@@ -43,0 +48,18 @@\n+\n+    \/**\n+     * An operation declaration annotation.\n+     * <p>\n+     * This annotation may be declared on a concrete class implementing an {@link Op operation} whose name is a constant\n+     * that can be declared as this attribute's value.\n+     * <p>\n+     * Tooling can process declarations of this annotation to build a factory for constructing operations from their name.\n+     *\/\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE)\n+    @interface OpDeclaration {\n+        \/**\n+         * {@return the operation name}\n+         *\/\n+        String value();\n+    }\n+\n@@ -48,1 +71,1 @@\n-     * with one parameter type of {@link ExternalOpContent} and return type that is the concrete class type.\n+     * with one parameter type of {@link ExternalizableOp.ExternalizedOp} and return type that is the concrete class type.\n@@ -50,1 +73,1 @@\n-     * {@link ExternalOpContent}.\n+     * {@link ExternalizableOp.ExternalizedOp}.\n@@ -78,1 +101,1 @@\n-    Op constructOp(ExternalOpContent def);\n+    Op constructOp(ExternalizableOp.ExternalizedOp def);\n@@ -91,1 +114,1 @@\n-    default Op constructOpOrFail(ExternalOpContent def) {\n+    default Op constructOpOrFail(ExternalizableOp.ExternalizedOp def) {\n@@ -149,1 +172,1 @@\n-            method = opClass.getMethod(\"create\", ExternalOpContent.class);\n+            method = opClass.getMethod(\"create\", ExternalizableOp.ExternalizedOp.class);\n@@ -168,1 +191,1 @@\n-            constructor = opClass.getConstructor(ExternalOpContent.class);\n+            constructor = opClass.getConstructor(ExternalizableOp.ExternalizedOp.class);\n@@ -181,1 +204,1 @@\n-    private static Op constructOp(Class<? extends Op> opClass, ExternalOpContent opDef) {\n+    private static Op constructOp(Class<? extends Op> opClass, ExternalizableOp.ExternalizedOp opDef) {\n@@ -183,1 +206,1 @@\n-            private static final ClassValue<Function<ExternalOpContent, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n+            private static final ClassValue<Function<ExternalizableOp.ExternalizedOp, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n@@ -185,1 +208,1 @@\n-                protected Function<ExternalOpContent, Op> computeValue(Class<?> opClass) {\n+                protected Function<ExternalizableOp.ExternalizedOp, Op> computeValue(Class<?> opClass) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpFactory.java","additions":33,"deletions":10,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-        ExternalOpContent opdef = nodeToOpDef(opNode, rtype, c, ancestorBody);\n+        ExternalizableOp.ExternalizedOp opdef = nodeToOpDef(opNode, rtype, c, ancestorBody);\n@@ -246,1 +246,1 @@\n-    static ExternalOpContent nodeToOpDef(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n+    static ExternalizableOp.ExternalizedOp nodeToOpDef(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n@@ -253,1 +253,1 @@\n-        return new ExternalOpContent(operationName,\n+        return new ExternalizableOp.ExternalizedOp(operationName,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/OpParser.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.reflect.code.op.ExternalOpContent;\n@@ -47,1 +46,1 @@\n-    static final JavaType J_C_O_OP_DEFINITION = type(ExternalOpContent.class);\n+    static final JavaType J_C_O_EXTERNALIZED_OP = type(ExternalizableOp.ExternalizedOp.class);\n@@ -50,1 +49,1 @@\n-            Op.class, ExternalOpContent.class);\n+            Op.class, ExternalizableOp.ExternalizedOp.class);\n@@ -113,2 +112,2 @@\n-    static final FunctionType OP_DEFINITION_F_TYPE = functionType(\n-            J_C_O_OP_DEFINITION,\n+    static final FunctionType EXTERNALIZED_OP_F_TYPE = functionType(\n+            J_C_O_EXTERNALIZED_OP,\n@@ -220,1 +219,1 @@\n-        return builder.op(_new(OP_DEFINITION_F_TYPE, args));\n+        return builder.op(_new(EXTERNALIZED_OP_F_TYPE, args));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpBuilder.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.code.op.ExternalOpContent;\n+import java.lang.reflect.code.op.ExternalizableOp;\n@@ -63,1 +63,1 @@\n-        ExternalOpContent odef = ExternalOpContent.fromOp(CopyContext.create(), f);\n+        ExternalizableOp.ExternalizedOp odef = ExternalizableOp.ExternalizedOp.externalizeOp(CopyContext.create(), f);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}