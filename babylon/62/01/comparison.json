{"files":[{"patch":"@@ -37,1 +37,1 @@\n-    static abstract class ArithMathOp extends OpWithDefinition {\n+    static abstract class ArithMathOp extends ExternalizableOp {\n@@ -40,1 +40,1 @@\n-        public ArithMathOp(OpDefinition def) {\n+        public ArithMathOp(ExternalOpContent def) {\n@@ -71,1 +71,1 @@\n-        public static ConstantOp create(OpDefinition def) {\n+        public static ConstantOp create(ExternalOpContent def) {\n@@ -137,1 +137,1 @@\n-        ConstantOp(OpDefinition def, Object value) {\n+        ConstantOp(ExternalOpContent def, Object value) {\n@@ -176,1 +176,1 @@\n-        public AddOp(OpDefinition def) {\n+        public AddOp(ExternalOpContent def) {\n@@ -198,1 +198,1 @@\n-        public SubOp(OpDefinition def) {\n+        public SubOp(ExternalOpContent def) {\n@@ -220,1 +220,1 @@\n-        public MulOp(OpDefinition def) {\n+        public MulOp(ExternalOpContent def) {\n@@ -242,1 +242,1 @@\n-        public DivOp(OpDefinition def) {\n+        public DivOp(ExternalOpContent def) {\n@@ -264,1 +264,1 @@\n-        public RemOp(OpDefinition def) {\n+        public RemOp(ExternalOpContent def) {\n@@ -286,1 +286,1 @@\n-        public AndOp(OpDefinition def) {\n+        public AndOp(ExternalOpContent def) {\n@@ -308,1 +308,1 @@\n-        public MaxOp(OpDefinition def) {\n+        public MaxOp(ExternalOpContent def) {\n@@ -331,1 +331,1 @@\n-        public MinOp(OpDefinition def) {\n+        public MinOp(ExternalOpContent def) {\n@@ -354,1 +354,1 @@\n-        public TruncOp(OpDefinition def) {\n+        public TruncOp(ExternalOpContent def) {\n@@ -377,1 +377,1 @@\n-        public ExpOp(OpDefinition def) {\n+        public ExpOp(ExternalOpContent def) {\n@@ -406,1 +406,1 @@\n-        public static CompareOp create(OpDefinition def) {\n+        public static CompareOp create(ExternalOpContent def) {\n@@ -416,1 +416,1 @@\n-        CompareOp(OpDefinition def, CompareKind ck) {\n+        CompareOp(ExternalOpContent def, CompareKind ck) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/ArithMathOps.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    public static final class ForOp extends OpWithDefinition implements Op.Loop {\n+    public static final class ForOp extends ExternalizableOp implements Op.Loop {\n@@ -70,1 +70,1 @@\n-        public ForOp(OpDefinition def) {\n+        public ForOp(ExternalOpContent def) {\n@@ -110,1 +110,1 @@\n-    public static class YieldOp extends OpWithDefinition implements Op.Terminating {\n+    public static class YieldOp extends ExternalizableOp implements Op.Terminating {\n@@ -113,1 +113,1 @@\n-        public YieldOp(OpDefinition def) {\n+        public YieldOp(ExternalOpContent def) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/SCFOps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    static abstract class TritonOp extends OpWithDefinition {\n+    static abstract class TritonOp extends ExternalizableOp {\n@@ -39,1 +39,1 @@\n-        public TritonOp(OpDefinition def) {\n+        public TritonOp(ExternalOpContent def) {\n@@ -70,1 +70,1 @@\n-        public ModuleOp(OpDefinition def) {\n+        public ModuleOp(ExternalOpContent def) {\n@@ -160,1 +160,1 @@\n-        public static FuncOp create(OpDefinition def) {\n+        public static FuncOp create(ExternalOpContent def) {\n@@ -173,1 +173,1 @@\n-        FuncOp(OpDefinition def, String funcName) {\n+        FuncOp(ExternalOpContent def, String funcName) {\n@@ -254,1 +254,1 @@\n-        public static CallOp create(OpDefinition def) {\n+        public static CallOp create(ExternalOpContent def) {\n@@ -264,1 +264,1 @@\n-        CallOp(OpDefinition def, String funcName) {\n+        CallOp(ExternalOpContent def, String funcName) {\n@@ -330,1 +330,1 @@\n-        public static ReduceOp create(OpDefinition def) {\n+        public static ReduceOp create(ExternalOpContent def) {\n@@ -340,1 +340,1 @@\n-        ReduceOp(OpDefinition def, int axis) {\n+        ReduceOp(ExternalOpContent def, int axis) {\n@@ -391,1 +391,1 @@\n-        public ReduceReturnOp(OpDefinition def) {\n+        public ReduceReturnOp(ExternalOpContent def) {\n@@ -416,1 +416,1 @@\n-        public static GetProgramIdOp create(OpDefinition def) {\n+        public static GetProgramIdOp create(ExternalOpContent def) {\n@@ -426,1 +426,1 @@\n-        GetProgramIdOp(OpDefinition def, int axis) {\n+        GetProgramIdOp(ExternalOpContent def, int axis) {\n@@ -470,1 +470,1 @@\n-        public static MakeRangeOp create(OpDefinition def) {\n+        public static MakeRangeOp create(ExternalOpContent def) {\n@@ -486,1 +486,1 @@\n-        MakeRangeOp(OpDefinition def, int start, int end) {\n+        MakeRangeOp(ExternalOpContent def, int start, int end) {\n@@ -532,1 +532,1 @@\n-        public static ExpandOp create(OpDefinition def) {\n+        public static ExpandOp create(ExternalOpContent def) {\n@@ -542,1 +542,1 @@\n-        ExpandOp(OpDefinition def, int axis) {\n+        ExpandOp(ExternalOpContent def, int axis) {\n@@ -581,1 +581,1 @@\n-        public SplatOp(OpDefinition def) {\n+        public SplatOp(ExternalOpContent def) {\n@@ -603,1 +603,1 @@\n-        public BroadcastOp(OpDefinition def) {\n+        public BroadcastOp(ExternalOpContent def) {\n@@ -625,1 +625,1 @@\n-        public AddPtrOp(OpDefinition def) {\n+        public AddPtrOp(ExternalOpContent def) {\n@@ -647,1 +647,1 @@\n-        public LoadOp(OpDefinition def) {\n+        public LoadOp(ExternalOpContent def) {\n@@ -669,1 +669,1 @@\n-        public StoreOp(OpDefinition def) {\n+        public StoreOp(ExternalOpContent def) {\n@@ -691,1 +691,1 @@\n-        public ReturnOp(OpDefinition def) {\n+        public ReturnOp(ExternalOpContent def) {\n@@ -717,1 +717,1 @@\n-        public DotOp(OpDefinition def) {\n+        public DotOp(ExternalOpContent def) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonOps.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.reflect.code.op.OpDefinition;\n+import java.lang.reflect.code.op.ExternalOpContent;\n@@ -35,1 +35,1 @@\n-import java.lang.reflect.code.op.OpWithDefinition;\n+import java.lang.reflect.code.op.ExternalizableOp;\n@@ -42,1 +42,1 @@\n-    public static class ConsumeOp extends OpWithDefinition {\n+    public static class ConsumeOp extends ExternalizableOp {\n@@ -45,1 +45,1 @@\n-        public ConsumeOp(OpDefinition def) {\n+        public ConsumeOp(ExternalOpContent def) {\n","filename":"cr-examples\/triton\/src\/main\/java\/oracle\/code\/triton\/TritonTestOps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -364,16 +364,0 @@\n-    \/**\n-     * The attribute value that represents null.\n-     *\/\n-    public static final Object NULL_ATTRIBUTE_VALUE = new Object();\n-\n-    \/**\n-     * Returns the operation's attributes.\n-     *\n-     * <p>A null attribute value is represented by the constant value {@link #NULL_ATTRIBUTE_VALUE}.\n-     *\n-     * @return the operation's attributes, as an unmodifiable map\n-     *\/\n-    public Map<String, Object> attributes() {\n-        return Map.of();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/Op.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -249,2 +249,2 @@\n-                        case IFNULL -> CoreOps.neq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, Op.NULL_ATTRIBUTE_VALUE)));\n-                        case IFNONNULL -> CoreOps.eq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, Op.NULL_ATTRIBUTE_VALUE)));\n+                        case IFNULL -> CoreOps.neq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, null)));\n+                        case IFNONNULL -> CoreOps.eq(operand, op(CoreOps.constant(JavaType.J_L_OBJECT, null)));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    public static final class FuncOp extends OpWithDefinition implements Op.Invokable, Op.Isolated, Op.Lowerable {\n+    public static final class FuncOp extends ExternalizableOp implements Op.Invokable, Op.Isolated, Op.Lowerable {\n@@ -84,1 +84,1 @@\n-        public static FuncOp create(OpDefinition def) {\n+        public static FuncOp create(ExternalOpContent def) {\n@@ -97,1 +97,1 @@\n-        FuncOp(OpDefinition def, String funcName) {\n+        FuncOp(ExternalOpContent def, String funcName) {\n@@ -182,1 +182,1 @@\n-    public static final class FuncCallOp extends OpWithDefinition {\n+    public static final class FuncCallOp extends ExternalizableOp {\n@@ -189,1 +189,1 @@\n-        public static FuncCallOp create(OpDefinition def) {\n+        public static FuncCallOp create(ExternalOpContent def) {\n@@ -199,1 +199,1 @@\n-        FuncCallOp(OpDefinition def, String funcName) {\n+        FuncCallOp(ExternalOpContent def, String funcName) {\n@@ -247,1 +247,1 @@\n-    public static final class ModuleOp extends OpWithDefinition implements Op.Isolated {\n+    public static final class ModuleOp extends ExternalizableOp implements Op.Isolated {\n@@ -254,1 +254,1 @@\n-        public static ModuleOp create(OpDefinition def) {\n+        public static ModuleOp create(ExternalOpContent def) {\n@@ -262,1 +262,1 @@\n-        ModuleOp(OpDefinition def) {\n+        ModuleOp(ExternalOpContent def) {\n@@ -331,1 +331,1 @@\n-    public static final class QuotedOp extends OpWithDefinition implements Op.Nested, Op.Lowerable, Op.Pure {\n+    public static final class QuotedOp extends ExternalizableOp implements Op.Nested, Op.Lowerable, Op.Pure {\n@@ -343,1 +343,1 @@\n-        public QuotedOp(OpDefinition def) {\n+        public QuotedOp(ExternalOpContent def) {\n@@ -417,1 +417,1 @@\n-    public static final class LambdaOp extends OpWithDefinition implements Op.Invokable, Op.Lowerable {\n+    public static final class LambdaOp extends ExternalizableOp implements Op.Invokable, Op.Lowerable {\n@@ -442,1 +442,1 @@\n-        public LambdaOp(OpDefinition def) {\n+        public LambdaOp(ExternalOpContent def) {\n@@ -651,1 +651,1 @@\n-    public static final class ClosureOp extends OpWithDefinition implements Op.Invokable, Op.Lowerable {\n+    public static final class ClosureOp extends ExternalizableOp implements Op.Invokable, Op.Lowerable {\n@@ -673,1 +673,1 @@\n-        public ClosureOp(OpDefinition def) {\n+        public ClosureOp(ExternalOpContent def) {\n@@ -743,1 +743,1 @@\n-    public static final class ClosureCallOp extends OpWithDefinition {\n+    public static final class ClosureCallOp extends ExternalizableOp {\n@@ -746,1 +746,1 @@\n-        public ClosureCallOp(OpDefinition def) {\n+        public ClosureCallOp(ExternalOpContent def) {\n@@ -776,1 +776,1 @@\n-    public static final class ReturnOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static final class ReturnOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -779,1 +779,1 @@\n-        public ReturnOp(OpDefinition def) {\n+        public ReturnOp(ExternalOpContent def) {\n@@ -823,1 +823,1 @@\n-    public static final class ThrowOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static final class ThrowOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -826,1 +826,1 @@\n-        public ThrowOp(OpDefinition def) {\n+        public ThrowOp(ExternalOpContent def) {\n@@ -861,1 +861,1 @@\n-    public static final class AssertOp extends OpWithDefinition implements Op.Nested {\n+    public static final class AssertOp extends ExternalizableOp implements Op.Nested {\n@@ -865,1 +865,1 @@\n-        public AssertOp(OpDefinition def) {\n+        public AssertOp(ExternalOpContent def) {\n@@ -912,1 +912,1 @@\n-    public static class UnreachableOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static class UnreachableOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -915,1 +915,1 @@\n-        public UnreachableOp(OpDefinition def) {\n+        public UnreachableOp(ExternalOpContent def) {\n@@ -949,1 +949,1 @@\n-    public static class YieldOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static class YieldOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -952,1 +952,1 @@\n-        public YieldOp(OpDefinition def) {\n+        public YieldOp(ExternalOpContent def) {\n@@ -998,1 +998,1 @@\n-    public static class BranchOp extends OpWithDefinition implements Op.BlockTerminating {\n+    public static class BranchOp extends ExternalizableOp implements Op.BlockTerminating {\n@@ -1003,1 +1003,1 @@\n-        public BranchOp(OpDefinition def) {\n+        public BranchOp(ExternalOpContent def) {\n@@ -1053,1 +1053,1 @@\n-    public static class ConditionalBranchOp extends OpWithDefinition implements Op.BlockTerminating {\n+    public static class ConditionalBranchOp extends ExternalizableOp implements Op.BlockTerminating {\n@@ -1059,1 +1059,1 @@\n-        public ConditionalBranchOp(OpDefinition def) {\n+        public ConditionalBranchOp(ExternalOpContent def) {\n@@ -1116,1 +1116,1 @@\n-    public static class ConstantOp extends OpWithDefinition implements Op.Pure {\n+    public static class ConstantOp extends ExternalizableOp implements Op.Pure {\n@@ -1124,1 +1124,1 @@\n-        public static ConstantOp create(OpDefinition def) {\n+        public static ConstantOp create(ExternalOpContent def) {\n@@ -1195,1 +1195,1 @@\n-        ConstantOp(OpDefinition def, Object value) {\n+        ConstantOp(ExternalOpContent def, Object value) {\n@@ -1251,1 +1251,1 @@\n-    public static final class InvokeOp extends OpWithDefinition implements ReflectiveOp {\n+    public static final class InvokeOp extends ExternalizableOp implements ReflectiveOp {\n@@ -1258,1 +1258,1 @@\n-        public static InvokeOp create(OpDefinition def) {\n+        public static InvokeOp create(ExternalOpContent def) {\n@@ -1269,1 +1269,1 @@\n-        InvokeOp(OpDefinition def, MethodRef invokeDescriptor) {\n+        InvokeOp(ExternalOpContent def, MethodRef invokeDescriptor) {\n@@ -1325,1 +1325,1 @@\n-    public static final class ConvOp extends OpWithDefinition implements Op.Pure {\n+    public static final class ConvOp extends ExternalizableOp implements Op.Pure {\n@@ -1330,1 +1330,1 @@\n-        public ConvOp(OpDefinition def) {\n+        public ConvOp(ExternalOpContent def) {\n@@ -1363,1 +1363,1 @@\n-    public static final class NewOp extends OpWithDefinition implements ReflectiveOp {\n+    public static final class NewOp extends ExternalizableOp implements ReflectiveOp {\n@@ -1370,1 +1370,1 @@\n-        public static NewOp create(OpDefinition def) {\n+        public static NewOp create(ExternalOpContent def) {\n@@ -1387,1 +1387,1 @@\n-        NewOp(OpDefinition def, FunctionType constructorType) {\n+        NewOp(ExternalOpContent def, FunctionType constructorType) {\n@@ -1447,1 +1447,1 @@\n-    public abstract static sealed class FieldAccessOp extends OpWithDefinition implements AccessOp, ReflectiveOp {\n+    public abstract static sealed class FieldAccessOp extends ExternalizableOp implements AccessOp, ReflectiveOp {\n@@ -1452,1 +1452,1 @@\n-        FieldAccessOp(OpDefinition def, FieldRef fieldDescriptor) {\n+        FieldAccessOp(ExternalOpContent def, FieldRef fieldDescriptor) {\n@@ -1492,1 +1492,1 @@\n-            public static FieldLoadOp create(OpDefinition def) {\n+            public static FieldLoadOp create(ExternalOpContent def) {\n@@ -1507,1 +1507,1 @@\n-            FieldLoadOp(OpDefinition opdef, FieldRef fieldDescriptor) {\n+            FieldLoadOp(ExternalOpContent opdef, FieldRef fieldDescriptor) {\n@@ -1552,1 +1552,1 @@\n-            public static FieldStoreOp create(OpDefinition def) {\n+            public static FieldStoreOp create(ExternalOpContent def) {\n@@ -1567,1 +1567,1 @@\n-            FieldStoreOp(OpDefinition opdef, FieldRef fieldDescriptor) {\n+            FieldStoreOp(ExternalOpContent opdef, FieldRef fieldDescriptor) {\n@@ -1604,1 +1604,1 @@\n-    public static final class ArrayLengthOp extends OpWithDefinition implements ReflectiveOp {\n+    public static final class ArrayLengthOp extends ExternalizableOp implements ReflectiveOp {\n@@ -1607,1 +1607,1 @@\n-        public ArrayLengthOp(OpDefinition def) {\n+        public ArrayLengthOp(ExternalOpContent def) {\n@@ -1633,2 +1633,2 @@\n-    public abstract static sealed class ArrayAccessOp extends OpWithDefinition implements AccessOp, ReflectiveOp {\n-        ArrayAccessOp(OpDefinition def) {\n+    public abstract static sealed class ArrayAccessOp extends ExternalizableOp implements AccessOp, ReflectiveOp {\n+        ArrayAccessOp(ExternalOpContent def) {\n@@ -1685,1 +1685,1 @@\n-            public ArrayLoadOp(OpDefinition def) {\n+            public ArrayLoadOp(ExternalOpContent def) {\n@@ -1718,1 +1718,1 @@\n-            public ArrayStoreOp(OpDefinition def) {\n+            public ArrayStoreOp(ExternalOpContent def) {\n@@ -1747,1 +1747,1 @@\n-    public static final class InstanceOfOp extends OpWithDefinition implements Op.Pure, ReflectiveOp {\n+    public static final class InstanceOfOp extends ExternalizableOp implements Op.Pure, ReflectiveOp {\n@@ -1753,1 +1753,1 @@\n-        public static InstanceOfOp create(OpDefinition def) {\n+        public static InstanceOfOp create(ExternalOpContent def) {\n@@ -1767,1 +1767,1 @@\n-        InstanceOfOp(OpDefinition def, TypeElement typeDescriptor) {\n+        InstanceOfOp(ExternalOpContent def, TypeElement typeDescriptor) {\n@@ -1812,1 +1812,1 @@\n-    public static final class CastOp extends OpWithDefinition implements Op.Pure, ReflectiveOp {\n+    public static final class CastOp extends ExternalizableOp implements Op.Pure, ReflectiveOp {\n@@ -1819,1 +1819,1 @@\n-        public static CastOp create(OpDefinition def) {\n+        public static CastOp create(ExternalOpContent def) {\n@@ -1833,1 +1833,1 @@\n-        CastOp(OpDefinition def, TypeElement typeDescriptor) {\n+        CastOp(ExternalOpContent def, TypeElement typeDescriptor) {\n@@ -1907,1 +1907,1 @@\n-    public static final class VarOp extends OpWithDefinition {\n+    public static final class VarOp extends ExternalizableOp {\n@@ -1914,1 +1914,1 @@\n-        public static VarOp create(OpDefinition def) {\n+        public static VarOp create(ExternalOpContent def) {\n@@ -1927,1 +1927,1 @@\n-        VarOp(OpDefinition def, String varName) {\n+        VarOp(ExternalOpContent def, String varName) {\n@@ -1986,2 +1986,2 @@\n-    public abstract static sealed class VarAccessOp extends OpWithDefinition implements AccessOp {\n-        VarAccessOp(OpDefinition opdef) {\n+    public abstract static sealed class VarAccessOp extends ExternalizableOp implements AccessOp {\n+        VarAccessOp(ExternalOpContent opdef) {\n@@ -2021,1 +2021,1 @@\n-            public VarLoadOp(OpDefinition opdef) {\n+            public VarLoadOp(ExternalOpContent opdef) {\n@@ -2062,1 +2062,1 @@\n-            public VarStoreOp(OpDefinition opdef) {\n+            public VarStoreOp(ExternalOpContent opdef) {\n@@ -2104,1 +2104,1 @@\n-    public static final class TupleOp extends OpWithDefinition {\n+    public static final class TupleOp extends ExternalizableOp {\n@@ -2107,1 +2107,1 @@\n-        public TupleOp(OpDefinition def) {\n+        public TupleOp(ExternalOpContent def) {\n@@ -2134,1 +2134,1 @@\n-    public static final class TupleLoadOp extends OpWithDefinition {\n+    public static final class TupleLoadOp extends ExternalizableOp {\n@@ -2140,1 +2140,1 @@\n-        public static TupleLoadOp create(OpDefinition def) {\n+        public static TupleLoadOp create(ExternalOpContent def) {\n@@ -2154,1 +2154,1 @@\n-        TupleLoadOp(OpDefinition def, int index) {\n+        TupleLoadOp(ExternalOpContent def, int index) {\n@@ -2205,1 +2205,1 @@\n-    public static final class TupleWithOp extends OpWithDefinition {\n+    public static final class TupleWithOp extends ExternalizableOp {\n@@ -2211,1 +2211,1 @@\n-        public static TupleWithOp create(OpDefinition def) {\n+        public static TupleWithOp create(ExternalOpContent def) {\n@@ -2225,1 +2225,1 @@\n-        TupleWithOp(OpDefinition def, int index) {\n+        TupleWithOp(ExternalOpContent def, int index) {\n@@ -2294,1 +2294,1 @@\n-    public static final class ExceptionRegionEnter extends OpWithDefinition implements Op.BlockTerminating {\n+    public static final class ExceptionRegionEnter extends ExternalizableOp implements Op.BlockTerminating {\n@@ -2303,1 +2303,1 @@\n-        public ExceptionRegionEnter(OpDefinition def) {\n+        public ExceptionRegionEnter(ExternalOpContent def) {\n@@ -2357,1 +2357,1 @@\n-    public static final class ExceptionRegionExit extends OpWithDefinition implements Op.BlockTerminating {\n+    public static final class ExceptionRegionExit extends ExternalizableOp implements Op.BlockTerminating {\n@@ -2362,1 +2362,1 @@\n-        public ExceptionRegionExit(OpDefinition def) {\n+        public ExceptionRegionExit(ExternalOpContent def) {\n@@ -2430,1 +2430,1 @@\n-    public static final class ConcatOp extends OpWithDefinition implements Op.Pure {\n+    public static final class ConcatOp extends ExternalizableOp implements Op.Pure {\n@@ -2437,1 +2437,1 @@\n-        public ConcatOp(OpDefinition def) {\n+        public ConcatOp(ExternalOpContent def) {\n@@ -2465,2 +2465,2 @@\n-    public static abstract class ArithmeticOperation extends OpWithDefinition implements Op.Pure {\n-        protected ArithmeticOperation(OpDefinition def) {\n+    public static abstract class ArithmeticOperation extends ExternalizableOp implements Op.Pure {\n+        protected ArithmeticOperation(ExternalOpContent def) {\n@@ -2486,2 +2486,2 @@\n-    public static abstract class TestOperation extends OpWithDefinition implements Op.Pure {\n-        protected TestOperation(OpDefinition def) {\n+    public static abstract class TestOperation extends ExternalizableOp implements Op.Pure {\n+        protected TestOperation(ExternalOpContent def) {\n@@ -2508,1 +2508,1 @@\n-        protected BinaryOp(OpDefinition def) {\n+        protected BinaryOp(ExternalOpContent def) {\n@@ -2534,1 +2534,1 @@\n-        protected UnaryOp(OpDefinition def) {\n+        protected UnaryOp(ExternalOpContent def) {\n@@ -2560,1 +2560,1 @@\n-        protected UnaryTestOp(OpDefinition def) {\n+        protected UnaryTestOp(ExternalOpContent def) {\n@@ -2581,1 +2581,1 @@\n-        protected BinaryTestOp(OpDefinition def) {\n+        protected BinaryTestOp(ExternalOpContent def) {\n@@ -2610,1 +2610,1 @@\n-        public AddOp(OpDefinition def) {\n+        public AddOp(ExternalOpContent def) {\n@@ -2635,1 +2635,1 @@\n-        public SubOp(OpDefinition opdef) {\n+        public SubOp(ExternalOpContent opdef) {\n@@ -2660,1 +2660,1 @@\n-        public MulOp(OpDefinition opdef) {\n+        public MulOp(ExternalOpContent opdef) {\n@@ -2685,1 +2685,1 @@\n-        public DivOp(OpDefinition opdef) {\n+        public DivOp(ExternalOpContent opdef) {\n@@ -2710,1 +2710,1 @@\n-        public ModOp(OpDefinition opdef) {\n+        public ModOp(ExternalOpContent opdef) {\n@@ -2736,1 +2736,1 @@\n-        public OrOp(OpDefinition opdef) {\n+        public OrOp(ExternalOpContent opdef) {\n@@ -2762,1 +2762,1 @@\n-        public AndOp(OpDefinition opdef) {\n+        public AndOp(ExternalOpContent opdef) {\n@@ -2788,1 +2788,1 @@\n-        public XorOp(OpDefinition opdef) {\n+        public XorOp(ExternalOpContent opdef) {\n@@ -2813,1 +2813,1 @@\n-        public LshlOp(OpDefinition opdef) {\n+        public LshlOp(ExternalOpContent opdef) {\n@@ -2838,1 +2838,1 @@\n-        public AshrOp(OpDefinition opdef) {\n+        public AshrOp(ExternalOpContent opdef) {\n@@ -2863,1 +2863,1 @@\n-        public LshrOp(OpDefinition opdef) {\n+        public LshrOp(ExternalOpContent opdef) {\n@@ -2888,1 +2888,1 @@\n-        public NegOp(OpDefinition opdef) {\n+        public NegOp(ExternalOpContent opdef) {\n@@ -2913,1 +2913,1 @@\n-        public NotOp(OpDefinition opdef) {\n+        public NotOp(ExternalOpContent opdef) {\n@@ -2939,1 +2939,1 @@\n-        public EqOp(OpDefinition opdef) {\n+        public EqOp(ExternalOpContent opdef) {\n@@ -2965,1 +2965,1 @@\n-        public NeqOp(OpDefinition opdef) {\n+        public NeqOp(ExternalOpContent opdef) {\n@@ -2990,1 +2990,1 @@\n-        public GtOp(OpDefinition opdef) {\n+        public GtOp(ExternalOpContent opdef) {\n@@ -3016,1 +3016,1 @@\n-        public GeOp(OpDefinition opdef) {\n+        public GeOp(ExternalOpContent opdef) {\n@@ -3042,1 +3042,1 @@\n-        public LtOp(OpDefinition opdef) {\n+        public LtOp(ExternalOpContent opdef) {\n@@ -3068,1 +3068,1 @@\n-        public LeOp(OpDefinition opdef) {\n+        public LeOp(ExternalOpContent opdef) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":108,"deletions":108,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-    public static sealed abstract class JavaLabelOp extends OpWithDefinition implements Op.Lowerable, Op.BodyTerminating {\n-        JavaLabelOp(OpDefinition def) {\n+    public static sealed abstract class JavaLabelOp extends ExternalizableOp implements Op.Lowerable, Op.BodyTerminating {\n+        JavaLabelOp(ExternalOpContent def) {\n@@ -170,1 +170,1 @@\n-        public JavaBreakOp(OpDefinition def) {\n+        public JavaBreakOp(ExternalOpContent def) {\n@@ -200,1 +200,1 @@\n-        public JavaContinueOp(OpDefinition def) {\n+        public JavaContinueOp(ExternalOpContent def) {\n@@ -249,1 +249,1 @@\n-    public static final class JavaYieldOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static final class JavaYieldOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -252,1 +252,1 @@\n-        public JavaYieldOp(OpDefinition def) {\n+        public JavaYieldOp(ExternalOpContent def) {\n@@ -294,1 +294,1 @@\n-    public static final class JavaBlockOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaBlockOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -299,1 +299,1 @@\n-        public JavaBlockOp(OpDefinition def) {\n+        public JavaBlockOp(ExternalOpContent def) {\n@@ -375,1 +375,1 @@\n-    public static final class JavaLabeledOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaLabeledOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -380,1 +380,1 @@\n-        public JavaLabeledOp(OpDefinition def) {\n+        public JavaLabeledOp(ExternalOpContent def) {\n@@ -466,1 +466,1 @@\n-    public static final class JavaIfOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaIfOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -554,1 +554,1 @@\n-        public JavaIfOp(OpDefinition def) {\n+        public JavaIfOp(ExternalOpContent def) {\n@@ -691,1 +691,1 @@\n-    public static final class JavaSwitchExpressionOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaSwitchExpressionOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -697,1 +697,1 @@\n-        public JavaSwitchExpressionOp(OpDefinition def) {\n+        public JavaSwitchExpressionOp(ExternalOpContent def) {\n@@ -758,1 +758,1 @@\n-    public static final class JavaSwitchFallthroughOp extends OpWithDefinition implements Op.BodyTerminating {\n+    public static final class JavaSwitchFallthroughOp extends ExternalizableOp implements Op.BodyTerminating {\n@@ -761,1 +761,1 @@\n-        public JavaSwitchFallthroughOp(OpDefinition def) {\n+        public JavaSwitchFallthroughOp(ExternalOpContent def) {\n@@ -788,1 +788,1 @@\n-    public static final class JavaForOp extends OpWithDefinition implements Op.Loop, Op.Lowerable {\n+    public static final class JavaForOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n@@ -889,1 +889,1 @@\n-        public static JavaForOp create(OpDefinition def) {\n+        public static JavaForOp create(ExternalOpContent def) {\n@@ -893,1 +893,1 @@\n-        public JavaForOp(OpDefinition def) {\n+        public JavaForOp(ExternalOpContent def) {\n@@ -1047,1 +1047,1 @@\n-    public static final class JavaEnhancedForOp extends OpWithDefinition implements Op.Loop, Op.Lowerable {\n+    public static final class JavaEnhancedForOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n@@ -1124,1 +1124,1 @@\n-        public static JavaEnhancedForOp create(OpDefinition def) {\n+        public static JavaEnhancedForOp create(ExternalOpContent def) {\n@@ -1128,1 +1128,1 @@\n-        public JavaEnhancedForOp(OpDefinition def) {\n+        public JavaEnhancedForOp(ExternalOpContent def) {\n@@ -1307,1 +1307,1 @@\n-    public static final class JavaWhileOp extends OpWithDefinition implements Op.Loop, Op.Lowerable {\n+    public static final class JavaWhileOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n@@ -1345,1 +1345,1 @@\n-        public JavaWhileOp(OpDefinition def) {\n+        public JavaWhileOp(ExternalOpContent def) {\n@@ -1452,1 +1452,1 @@\n-    public static final class JavaDoWhileOp extends OpWithDefinition implements Op.Loop, Op.Lowerable {\n+    public static final class JavaDoWhileOp extends ExternalizableOp implements Op.Loop, Op.Lowerable {\n@@ -1490,1 +1490,1 @@\n-        public JavaDoWhileOp(OpDefinition def) {\n+        public JavaDoWhileOp(ExternalOpContent def) {\n@@ -1594,1 +1594,1 @@\n-    public static sealed abstract class JavaConditionalOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static sealed abstract class JavaConditionalOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -1597,1 +1597,1 @@\n-        public JavaConditionalOp(OpDefinition def) {\n+        public JavaConditionalOp(ExternalOpContent def) {\n@@ -1735,1 +1735,1 @@\n-        public JavaConditionalAndOp(OpDefinition def) {\n+        public JavaConditionalAndOp(ExternalOpContent def) {\n@@ -1790,1 +1790,1 @@\n-        public JavaConditionalOrOp(OpDefinition def) {\n+        public JavaConditionalOrOp(ExternalOpContent def) {\n@@ -1817,1 +1817,1 @@\n-    public static final class JavaConditionalExpressionOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaConditionalExpressionOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -1825,1 +1825,1 @@\n-        public JavaConditionalExpressionOp(OpDefinition def) {\n+        public JavaConditionalExpressionOp(ExternalOpContent def) {\n@@ -1922,1 +1922,1 @@\n-    public static final class JavaTryOp extends OpWithDefinition implements Op.Nested, Op.Lowerable {\n+    public static final class JavaTryOp extends ExternalizableOp implements Op.Nested, Op.Lowerable {\n@@ -1986,1 +1986,1 @@\n-        public static JavaTryOp create(OpDefinition def) {\n+        public static JavaTryOp create(ExternalOpContent def) {\n@@ -1990,1 +1990,1 @@\n-        public JavaTryOp(OpDefinition def) {\n+        public JavaTryOp(ExternalOpContent def) {\n@@ -2424,2 +2424,2 @@\n-        public static sealed abstract class PatternOp extends OpWithDefinition implements Op.Pure {\n-            PatternOp(OpDefinition def) {\n+        public static sealed abstract class PatternOp extends ExternalizableOp implements Op.Pure {\n+            PatternOp(ExternalOpContent def) {\n@@ -2450,1 +2450,1 @@\n-            public static BindingPatternOp create(OpDefinition def) {\n+            public static BindingPatternOp create(ExternalOpContent def) {\n@@ -2459,1 +2459,1 @@\n-            BindingPatternOp(OpDefinition def, String bindingName) {\n+            BindingPatternOp(ExternalOpContent def, String bindingName) {\n@@ -2517,1 +2517,1 @@\n-            public static RecordPatternOp create(OpDefinition def) {\n+            public static RecordPatternOp create(ExternalOpContent def) {\n@@ -2528,1 +2528,1 @@\n-            RecordPatternOp(OpDefinition def, RecordTypeRef recordDescriptor) {\n+            RecordPatternOp(ExternalOpContent def, RecordTypeRef recordDescriptor) {\n@@ -2578,1 +2578,1 @@\n-        public static final class MatchOp extends OpWithDefinition implements Op.Isolated, Op.Lowerable {\n+        public static final class MatchOp extends ExternalizableOp implements Op.Isolated, Op.Lowerable {\n@@ -2584,1 +2584,1 @@\n-            public MatchOp(OpDefinition def) {\n+            public MatchOp(ExternalOpContent def) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect.code.op;\n+\n+import java.lang.reflect.code.*;\n+import java.lang.reflect.code.TypeElement;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+\/**\n+ * An operation's external content (a record) that can be utilized to construct an instance\n+ * of an {@link ExternalizableOp} associated with the operation's name.\n+ *\n+ * @param name            the operation name\n+ * @param operands        the list of operands\n+ * @param successors      the list of successors\n+ * @param resultType      the operation result type\n+ * @param attributes      the operation's specific content as an attributes map, modifiable\n+ * @param bodyDefinitions the list of body builders for building the operation's bodies\n+ * @apiNote Deserializers of operations may utilize this record to construct operations,\n+ * thereby separating the specifics of deserializing from construction.\n+ *\/\n+public record ExternalOpContent(String name,\n+                                List<Value> operands,\n+                                List<Block.Reference> successors,\n+                                TypeElement resultType,\n+                                Map<String, Object> attributes,\n+                                List<Body.Builder> bodyDefinitions) {\n+\n+    \/**\n+     * Removes an attribute value from the attributes map, converts the value by applying it\n+     * to mapping function, and returns the result.\n+     *\n+     * <p>If the attribute is a default attribute then this method first attempts to\n+     * remove the attribute whose name is the empty string, otherwise if there is no such\n+     * attribute present or the attribute is not a default attribute then this method\n+     * attempts to remove the attribute with the given name.\n+     *\n+     * <p>On successful removal of the attribute its value is converted by applying the value\n+     * to the mapping function.\n+     *\n+     * @param name      the attribute name.\n+     * @param isDefault true if the attribute is a default attribute\n+     * @param <T>       the converted attribute value type\n+     * @return the converted attribute value\n+     * @throws IllegalArgumentException if there is no attribute present\n+     *\/\n+    public <T> T extractAttributeValue(String name, boolean isDefault, Function<Object, T> mapper) {\n+        Object value = attributes.remove(isDefault ? \"\" : name);\n+        if (value == null) {\n+            if (!isDefault) {\n+                throw new IllegalArgumentException(\"Required attribute not present: \"\n+                        + name);\n+            }\n+\n+            value = attributes.remove(name);\n+        }\n+\n+        return mapper.apply(value);\n+    }\n+\n+    \/**\n+     * Externalizes an operation to its external content.\n+     *\n+     * @param cc the copy context\n+     * @param op the operation\n+     * @return the operation's external content.\n+     *\/\n+    public static ExternalOpContent fromOp(CopyContext cc, Op op) {\n+        return new ExternalOpContent(\n+                op.opName(),\n+                cc.getValues(op.operands()),\n+                op.successors().stream().map(cc::getSuccessorOrCreate).toList(),\n+                op.resultType(),\n+                op instanceof ExternalizableOp exop ? new HashMap<>(exop.attributes()) : new HashMap<>(),\n+                op.bodies().stream().map(b -> b.copy(cc)).toList()\n+        );\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalOpContent.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.lang.reflect.code.op;\n+\n+import java.lang.reflect.code.*;\n+import java.util.List;\n+import java.util.Map;\n+\n+\/**\n+ * An operation that supports externalization of its content and reconstruction\n+ * via an instance of {@link ExternalOpContent}.\n+ * <p>\n+ * The specific content of an externalizable operation can be externalized to a\n+ * map of {@link #attributes attributes}, and is reconstructed from the\n+ * attributes component of an instance of {@link ExternalOpContent}.\n+ * <p>\n+ * An externalizable operation could be externalized via serialization to\n+ * a textual representation. That textual representation could then be deserialized,\n+ * via parsing, into an instance of {@link ExternalOpContent} from which a new\n+ * externalizable operation can be reconstructed that is identical to one that\n+ * was serialized.\n+ *\/\n+public abstract class ExternalizableOp extends Op {\n+\n+    \/**\n+     * The attribute name associated with the location attribute.\n+     *\/\n+    public static final String ATTRIBUTE_LOCATION = \"loc\";\n+\n+    \/**\n+     * The attribute value that represents the external null value.\n+     *\/\n+    public static final Object NULL_ATTRIBUTE_VALUE = new Object();\n+\n+    \/**\n+     * Constructs an operation by copying given operation.\n+     *\n+     * @param that the operation to copy.\n+     * @param cc   the copy context.\n+     * @implSpec The default implementation calls the constructor with the operation's name, result type, and a list\n+     * values computed, in order, by mapping the operation's operands using the copy context.\n+     *\/\n+    protected ExternalizableOp(Op that, CopyContext cc) {\n+        super(that, cc);\n+    }\n+\n+    \/**\n+     * Constructs an operation with a name, operation result type, and list of operands.\n+     *\n+     * @param name     the operation name.\n+     * @param operands the list of operands, a copy of the list is performed if required.\n+     *\/\n+    protected ExternalizableOp(String name, List<? extends Value> operands) {\n+        super(name, operands);\n+    }\n+\n+    \/**\n+     * Constructs an operation from its external content.\n+     *\n+     * @param def the operation's external content.\n+     * @implSpec This implementation invokes the {@link Op#Op(String, List) constructor}\n+     * accepting the non-optional components of the operation's content, {@code name},\n+     * and {@code operands}:\n+     * <pre> {@code\n+     *  this(def.name(), def.operands());\n+     * }<\/pre>\n+     *\/\n+    @SuppressWarnings(\"this-escape\")\n+    protected ExternalizableOp(ExternalOpContent def) {\n+        super(def.name(), def.operands());\n+        setLocation(extractLocation(def));\n+    }\n+\n+    static Location extractLocation(ExternalOpContent def) {\n+        Object v = def.attributes().get(ATTRIBUTE_LOCATION);\n+        return switch (v) {\n+            case String s -> Location.fromString(s);\n+            case Location loc -> loc;\n+            case null -> null;\n+            default -> throw new UnsupportedOperationException(\"Unsupported location value:\" + v);\n+        };\n+    }\n+\n+    \/**\n+     * Externalizes the operation's specific content as a map of attributes.\n+     *\n+     * <p>A null attribute value is represented by the constant\n+     * value {@link #NULL_ATTRIBUTE_VALUE}.\n+     *\n+     * @return the operation's attributes, as an unmodifiable map\n+     *\/\n+    public Map<String, Object> attributes() {\n+        Location l = location();\n+        return l == null ? Map.of() : Map.of(ATTRIBUTE_LOCATION, l);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExternalizableOp.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.op;\n-\n-import java.lang.reflect.code.*;\n-import java.lang.reflect.code.TypeElement;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.function.Function;\n-\n-\/**\n- * An operation in general form that is utilized to construct a concrete subclass of {@link Op},\n- * such as a subclass of {@link OpWithDefinition}, associated with the operation name.\n- *\n- * @param name            the operation name\n- * @param operands        the list of operands\n- * @param successors      the list of successors\n- * @param resultType      the operation result type\n- * @param attributes      the attribute map, modifiable\n- * @param bodyDefinitions the list of body builders for building the bodies\n- * @apiNote Deserializers of operations may utilize this record to construct operations,\n- * thereby separating the specifics of deserializing from construction.\n- *\/\n-public record OpDefinition(String name,\n-                           List<Value> operands,\n-                           List<Block.Reference> successors,\n-                           TypeElement resultType,\n-                           Map<String, Object> attributes,\n-                           List<Body.Builder> bodyDefinitions) {\n-\n-    \/**\n-     * Removes an attribute value from the attributes map, converts the value by applying it\n-     * to mapping function, and returns the result.\n-     *\n-     * <p>If the attribute is a default attribute then this method first attempts to\n-     * remove the attribute whose name is the empty string, otherwise if there is no such\n-     * attribute present or the attribute is not a default attribute then this method\n-     * attempts to remove the attribute with the given name.\n-     *\n-     * <p>On successful removal of the attribute its value is converted by applying the value\n-     * to the mapping function.\n-     *\n-     * @param name the attribute name.\n-     * @param isDefault true if the attribute is a default attribute\n-     * @return the converted attribute value\n-     * @param <T> the converted attribute value type\n-     * @throws IllegalArgumentException if there is no attribute present\n-     *\/\n-    public <T> T extractAttributeValue(String name, boolean isDefault, Function<Object, T> mapper) {\n-        Object value = attributes.remove(isDefault ? \"\" : name);\n-        if (value == null) {\n-            if (!isDefault) {\n-                throw new IllegalArgumentException(\"Required attribute not present: \"\n-                        + name);\n-            }\n-\n-            value = attributes.remove(name);\n-        }\n-\n-        return mapper.apply(value);\n-    }\n-\n-    \/**\n-     * Copies an operation to its operation definition.\n-     *\n-     * @param cc the copy context\n-     * @param op the operation\n-     * @return the copied operation definition.\n-     *\/\n-    public static OpDefinition fromOp(CopyContext cc, Op op) {\n-        return new OpDefinition(\n-                op.opName(),\n-                cc.getValues(op.operands()),\n-                op.successors().stream().map(cc::getSuccessorOrCreate).toList(),\n-                op.resultType(),\n-                new HashMap<>(op.attributes()),\n-                op.bodies().stream().map(b -> b.copy(cc)).toList()\n-        );\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpDefinition.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -39,1 +39,1 @@\n- * An operation factory for constructing an {@link Op operation} from its {@link OpDefinition operation definition}.\n+ * An operation factory for constructing an {@link Op operation} from its {@link ExternalOpContent external content}.\n@@ -48,1 +48,1 @@\n-     * with one parameter type of {@link OpDefinition} and return type that is the concrete class type.\n+     * with one parameter type of {@link ExternalOpContent} and return type that is the concrete class type.\n@@ -50,1 +50,1 @@\n-     * {@link OpDefinition}.\n+     * {@link ExternalOpContent}.\n@@ -70,1 +70,1 @@\n-     * Constructs an {@link Op operation} from its operation definition.\n+     * Constructs an {@link Op operation} from its external content.\n@@ -72,1 +72,1 @@\n-     * If there is no mapping from the operation definition's name to a concrete\n+     * If there is no mapping from the operation's name to a concrete\n@@ -75,1 +75,1 @@\n-     * @param def the operation definition\n+     * @param def the operation's external content\n@@ -78,1 +78,1 @@\n-    Op constructOp(OpDefinition def);\n+    Op constructOp(ExternalOpContent def);\n@@ -81,1 +81,1 @@\n-     * Constructs an {@link Op operation} from its operation definition.\n+     * Constructs an {@link Op operation} from its external content.\n@@ -83,1 +83,1 @@\n-     * If there is no mapping from the operation definition's name to a concrete\n+     * If there is no mapping from the operation's name to a concrete\n@@ -86,1 +86,1 @@\n-     * @param def the operation definition\n+     * @param def the operation's external content\n@@ -88,1 +88,1 @@\n-     * @throws UnsupportedOperationException if there is no mapping from the operation definition's\n+     * @throws UnsupportedOperationException if there is no mapping from the operation's\n@@ -91,1 +91,1 @@\n-    default Op constructOpOrFail(OpDefinition def) {\n+    default Op constructOpOrFail(ExternalOpContent def) {\n@@ -149,1 +149,1 @@\n-            method = opClass.getMethod(\"create\", OpDefinition.class);\n+            method = opClass.getMethod(\"create\", ExternalOpContent.class);\n@@ -168,1 +168,1 @@\n-            constructor = opClass.getConstructor(OpDefinition.class);\n+            constructor = opClass.getConstructor(ExternalOpContent.class);\n@@ -181,1 +181,1 @@\n-    private static Op constructOp(Class<? extends Op> opClass, OpDefinition opDef) {\n+    private static Op constructOp(Class<? extends Op> opClass, ExternalOpContent opDef) {\n@@ -183,1 +183,1 @@\n-            private static final ClassValue<Function<OpDefinition, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n+            private static final ClassValue<Function<ExternalOpContent, Op>> OP_CONSTRUCTOR = new ClassValue<>() {\n@@ -185,1 +185,1 @@\n-                protected Function<OpDefinition, Op> computeValue(Class<?> opClass) {\n+                protected Function<ExternalOpContent, Op> computeValue(Class<?> opClass) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpFactory.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang.reflect.code.op;\n-\n-import java.lang.reflect.code.*;\n-import java.util.List;\n-import java.util.Map;\n-\n-\/**\n- * An operation that may be constructed with an operation {@link OpDefinition definition}.\n- *\/\n-public abstract class OpWithDefinition extends Op {\n-\n-    \/**\n-     * The attribute name associated with the location attribute.\n-     *\/\n-    public static final String ATTRIBUTE_LOCATION = \"loc\";\n-\n-    \/**\n-     * Constructs an operation by copying given operation.\n-     *\n-     * @param that the operation to copy.\n-     * @param cc   the copy context.\n-     * @implSpec The default implementation calls the constructor with the operation's name, result type, and a list\n-     * values computed, in order, by mapping the operation's operands using the copy context.\n-     *\/\n-    protected OpWithDefinition(Op that, CopyContext cc) {\n-        super(that, cc);\n-    }\n-\n-    \/**\n-     * Constructs an operation with a name, operation result type, and list of operands.\n-     *\n-     * @param name     the operation name.\n-     * @param operands the list of operands, a copy of the list is performed if required.\n-     *\/\n-    protected OpWithDefinition(String name, List<? extends Value> operands) {\n-        super(name, operands);\n-    }\n-\n-    \/**\n-     * Constructs an operation from its operation definition.\n-     *\n-     * @param def the operation definition.\n-     * @implSpec This implementation invokes the {@link Op#Op(String, List) constructor}\n-     * accepting the non-optional components of the operation definition, {@code name}, {@code resultType},\n-     * and {@code operands}:\n-     * <pre> {@code\n-     *  this(def.name(), def.resultType(), def.operands());\n-     * }<\/pre>\n-     * If the attributes component of the operation definition is copied as if by {@code Map.copyOf}.\n-     *\/\n-    @SuppressWarnings(\"this-escape\")\n-    protected OpWithDefinition(OpDefinition def) {\n-        super(def.name(), def.operands());\n-        setLocation(extractLocation(def));\n-    }\n-\n-    static Location extractLocation(OpDefinition def) {\n-        Object v = def.attributes().get(ATTRIBUTE_LOCATION);\n-        return switch(v) {\n-            case String s -> Location.fromString(s);\n-            case Location loc -> loc;\n-            case null -> null;\n-            default -> throw new UnsupportedOperationException(\"Unsupported location value:\" + v);\n-        };\n-    }\n-\n-    @Override\n-    public Map<String, Object> attributes() {\n-        Location l = location();\n-        return l == null ? Map.of() : Map.of(ATTRIBUTE_LOCATION, l);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/OpWithDefinition.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -242,1 +242,1 @@\n-        OpDefinition opdef = nodeToOpDef(opNode, rtype, c, ancestorBody);\n+        ExternalOpContent opdef = nodeToOpDef(opNode, rtype, c, ancestorBody);\n@@ -246,1 +246,1 @@\n-    static OpDefinition nodeToOpDef(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n+    static ExternalOpContent nodeToOpDef(OpNode opNode, TypeDefinition rtype, Context c, Body.Builder ancestorBody) {\n@@ -253,1 +253,1 @@\n-        return new OpDefinition(operationName,\n+        return new ExternalOpContent(operationName,\n@@ -432,1 +432,1 @@\n-            case NULL -> Op.NULL_ATTRIBUTE_VALUE;\n+            case NULL -> ExternalizableOp.NULL_ATTRIBUTE_VALUE;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/parser\/OpParser.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.lang.reflect.code.op.OpDefinition;\n+import java.lang.reflect.code.op.ExternalOpContent;\n@@ -31,0 +31,1 @@\n+import java.lang.reflect.code.op.ExternalizableOp;\n@@ -46,1 +47,1 @@\n-    static final JavaType J_C_O_OP_DEFINITION = type(OpDefinition.class);\n+    static final JavaType J_C_O_OP_DEFINITION = type(ExternalOpContent.class);\n@@ -49,1 +50,1 @@\n-            Op.class, OpDefinition.class);\n+            Op.class, ExternalOpContent.class);\n@@ -200,1 +201,1 @@\n-                inputOp.attributes(),\n+                inputOp instanceof ExternalizableOp exop ? exop.attributes() : Map.of(),\n@@ -325,2 +326,3 @@\n-            case Object o when value == Op.NULL_ATTRIBUTE_VALUE -> {\n-                yield builder.op(fieldLoad(FieldRef.field(Op.class, \"NULL_ATTRIBUTE_VALUE\", Object.class)));\n+            case Object o when value == ExternalizableOp.NULL_ATTRIBUTE_VALUE -> {\n+                yield builder.op(fieldLoad(FieldRef.field(ExternalizableOp.class,\n+                        \"NULL_ATTRIBUTE_VALUE\", Object.class)));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpBuilder.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.reflect.code.op.OpWithDefinition;\n+import java.lang.reflect.code.op.ExternalizableOp;\n@@ -68,1 +68,1 @@\n-            return value == Op.NULL_ATTRIBUTE_VALUE\n+            return value == ExternalizableOp.NULL_ATTRIBUTE_VALUE\n@@ -354,1 +354,1 @@\n-        Map<String, Object> attributes = op.attributes();\n+        Map<String, Object> attributes = op instanceof ExternalizableOp exop ? exop.attributes() : Map.of();\n@@ -356,1 +356,1 @@\n-                attributes.containsKey(OpWithDefinition.ATTRIBUTE_LOCATION)) {\n+                attributes.containsKey(ExternalizableOp.ATTRIBUTE_LOCATION)) {\n@@ -358,1 +358,1 @@\n-            attributes.remove(OpWithDefinition.ATTRIBUTE_LOCATION);\n+            attributes.remove(ExternalizableOp.ATTRIBUTE_LOCATION);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/writer\/OpWriter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.code.op.ExternalizableOp;\n@@ -152,9 +153,11 @@\n-        if (!op.attributes().isEmpty()) {\n-            space().spaceSeparatedList();\n-            for (var e : op.attributes().entrySet()) {\n-                spaceSeparator();\n-                String name = e.getKey();\n-                if (!name.isEmpty()) {\n-                    atIdentifier(name).equal().identifier(AttributeMapper.toString(e.getValue()));\n-                } else {\n-                    atIdentifier(AttributeMapper.toString(e.getValue()));\n+        if (op instanceof ExternalizableOp exop) {\n+            if (!exop.attributes().isEmpty()) {\n+                space().spaceSeparatedList();\n+                for (var e : exop.attributes().entrySet()) {\n+                    spaceSeparator();\n+                    String name = e.getKey();\n+                    if (!name.isEmpty()) {\n+                        atIdentifier(name).equal().identifier(AttributeMapper.toString(e.getValue()));\n+                    } else {\n+                        atIdentifier(AttributeMapper.toString(e.getValue()));\n+                    }\n","filename":"src\/jdk.code.tools\/share\/classes\/jdk\/code\/tools\/renderer\/SRRenderer.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.lang.reflect.code.op.OpDefinition;\n+import java.lang.reflect.code.op.ExternalOpContent;\n@@ -63,1 +63,1 @@\n-        OpDefinition odef = OpDefinition.fromOp(CopyContext.create(), f);\n+        ExternalOpContent odef = ExternalOpContent.fromOp(CopyContext.create(), f);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestCopy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}