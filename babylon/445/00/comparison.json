{"files":[{"patch":"@@ -696,1 +696,1 @@\n-    public static MethodType resolveToMethodType(MethodHandles.Lookup l, FunctionType ft) {\n+    static MethodType resolveToMethodType(MethodHandles.Lookup l, FunctionType ft) {\n@@ -704,1 +704,1 @@\n-    public static Class<?> resolveToClass(MethodHandles.Lookup l, TypeElement d) {\n+    static Class<?> resolveToClass(MethodHandles.Lookup l, TypeElement d) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Interpreter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import jdk.incubator.code.interpreter.Verifier;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n@@ -26,2 +24,0 @@\n-package jdk.incubator.code.interpreter;\n-\n@@ -33,0 +29,1 @@\n+import jdk.incubator.code.dialect.java.MethodRef;\n@@ -34,0 +31,1 @@\n+\n@@ -192,0 +190,9 @@\n+    static final Class<?> CLASS_INVOKABLE_LEAF_OPS;\n+    static {\n+        try {\n+            CLASS_INVOKABLE_LEAF_OPS = Class.forName(\"jdk.incubator.code.interpreter.InvokableLeafOps\");\n+        } catch (ReflectiveOperationException roe) {\n+            throw new InternalError(roe);\n+        }\n+    }\n+\n@@ -194,2 +201,2 @@\n-            var mt = Interpreter.resolveToMethodType(lookup, op.opType()).erase();\n-            MethodHandles.lookup().findStatic(InvokableLeafOps.class, opName, mt);\n+            var mt = MethodRef.toNominalDescriptor(op.opType()).resolveConstantDesc(lookup).erase();\n+            CLASS_INVOKABLE_LEAF_OPS.getDeclaredMethod(opName, mt.parameterArray());\n@@ -198,2 +205,2 @@\n-        } catch (IllegalAccessException iae) {\n-            error(\"%s %s %s\",  op.parentBlock(), op, iae.getMessage());\n+        } catch (ReflectiveOperationException roe) {\n+            error(\"%s %s %s\",  op.parentBlock(), op, roe.getMessage());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/Verifier.java","additions":17,"deletions":10,"binary":false,"changes":27,"previous_filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/interpreter\/Verifier.java","status":"renamed"}]}