{"files":[{"patch":"@@ -246,2 +246,0 @@\n-    \/\/std::cout << \"OpenCLBackend::OpenCLQueue::dispatch with dimensions \" << kernelContext->dimensions << std::endl;\n-    \/\/std::cout << \"Global Work Size: \" << kernelContext->maxX << \",\" << kernelContext->maxY << \",\" << kernelContext->maxZ << \"]\" << std::endl;\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/native\/cpp\/opencl_backend_queue.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+    private static final int NUM_ITERATIONS = 10;\n+\n@@ -83,0 +85,21 @@\n+    \/**\n+     * Naive Matrix Multiplication implemented in 2D.\n+     *\n+     * @param kc\n+     * @param matrixA\n+     * @param matrixB\n+     * @param matrixC\n+     * @param size\n+     *\/\n+    @CodeReflection\n+    public static void matrixMultiplyKernel2DLI(@RO KernelContext kc, @RO F32Array matrixA, @RO F32Array matrixB, @RW F32Array matrixC, int size) {\n+        if (kc.x < kc.maxX) {\n+            if (kc.y < kc.maxY) {\n+                float acc = 0;\n+                for (int k = 0; k < size; k++) {\n+                    acc += (matrixA.array(kc.y * size + k) * matrixB.array(k * size + kc.x));\n+                }\n+                matrixC.array(kc.y * size + kc.x, acc);\n+            }\n+        }\n+    }\n@@ -120,0 +143,7 @@\n+    @CodeReflection\n+    public static void matrixMultiply2DLI(@RO ComputeContext cc, @RO F32Array matrixA, @RO F32Array matrixB, @RW  F32Array matrixC, int size) {\n+        cc.dispatchKernel(size, size,\n+                kc -> matrixMultiplyKernel2DLI(kc, matrixA, matrixB, matrixC, size)\n+        );\n+    }\n+\n@@ -138,1 +168,1 @@\n-    private enum NDRangeConfiguration {\n+    private enum Configuration {\n@@ -140,1 +170,2 @@\n-        _2D;\n+        _2D, \/\/\n+        _2DLI\n@@ -152,1 +183,1 @@\n-        NDRangeConfiguration configuration = NDRangeConfiguration._2D;\n+        Configuration configuration = Configuration._2D;\n@@ -155,1 +186,4 @@\n-                configuration = NDRangeConfiguration._1D;\n+                configuration = Configuration._1D;\n+            }\n+            if (args[0].equals(\"2DLI\")) {\n+                configuration = Configuration._2DLI;\n@@ -184,1 +218,1 @@\n-        for (int it = 0; it < 10; it++) {\n+        for (int it = 0; it < NUM_ITERATIONS; it++) {\n@@ -192,0 +226,2 @@\n+                case _2DLI -> accelerator.compute(cc ->\n+                        Main.matrixMultiply2DLI(cc, matrixA, matrixB, matrixC, size));\n@@ -197,1 +233,2 @@\n-            if (it == 0 || it == 9 && CHECK_RESULT) {\n+            \/\/ If check result is ON, then check first and lat iterations\n+            if (it == 0 || it == (NUM_ITERATIONS - 1) && CHECK_RESULT) {\n","filename":"hat\/examples\/matmul\/src\/main\/java\/matmul\/Main.java","additions":43,"deletions":6,"binary":false,"changes":49,"status":"modified"}]}