{"files":[{"patch":"@@ -42,1 +42,1 @@\n-public final class ClassType implements TypeVarRef.Owner, JavaType {\n+public final class ClassType implements TypeVariableType.Owner, JavaType {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ClassType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-public sealed interface ConstructorRef extends JavaRef, TypeVarRef.Owner\n+public sealed interface ConstructorRef extends JavaRef, TypeVariableType.Owner\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/ConstructorRef.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-                if (!(constructType(tree.arguments().get(0)) instanceof TypeVarRef.Owner owner)) {\n+                if (!(constructType(tree.arguments().get(0)) instanceof TypeVariableType.Owner owner)) {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/CoreTypeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n- *     <li>{@linkplain TypeVarRef type-variables}, e.g. {@code T extends Runnable}<\/li>\n+ *     <li>{@linkplain TypeVariableType type-variables}, e.g. {@code T extends Runnable}<\/li>\n@@ -56,1 +56,1 @@\n-                                                             PrimitiveType, WildcardType, TypeVarRef {\n+                                                             PrimitiveType, WildcardType, TypeVariableType {\n@@ -207,1 +207,1 @@\n-    private static TypeVarRef.Owner owner(GenericDeclaration genDecl) {\n+    private static TypeVariableType.Owner owner(GenericDeclaration genDecl) {\n@@ -346,2 +346,2 @@\n-    static TypeVarRef typeVarRef(String name, TypeVarRef.Owner owner, JavaType bound) {\n-        return new TypeVarRef(name, owner, bound);\n+    static TypeVariableType typeVarRef(String name, TypeVariableType.Owner owner, JavaType bound) {\n+        return new TypeVariableType(name, owner, bound);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/JavaType.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.lang.reflect.Executable;\n@@ -39,1 +38,0 @@\n-import java.util.Optional;\n@@ -46,1 +44,1 @@\n-public sealed interface MethodRef extends JavaRef, TypeVarRef.Owner\n+public sealed interface MethodRef extends JavaRef, TypeVariableType.Owner\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/MethodRef.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import jdk.incubator.code.TypeElement;\n-\n@@ -41,1 +39,1 @@\n-public final class TypeVarRef implements JavaType {\n+public final class TypeVariableType implements JavaType {\n@@ -47,1 +45,1 @@\n-    TypeVarRef(String name, Owner owner, JavaType bound) {\n+    TypeVariableType(String name, Owner owner, JavaType bound) {\n@@ -123,1 +121,1 @@\n-        return o instanceof TypeVarRef that &&\n+        return o instanceof TypeVariableType that &&\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/TypeVariableType.java","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/type\/TypeVarRef.java","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.incubator.code.type.TypeVarRef;\n+import jdk.incubator.code.type.TypeVariableType;\n@@ -155,2 +155,2 @@\n-    static List<TypeAndErasure<TypeVarRef>> typeVars() {\n-        List<TypeAndErasure<TypeVarRef>> typeVars = new ArrayList<>();\n+    static List<TypeAndErasure<TypeVariableType>> typeVars() {\n+        List<TypeAndErasure<TypeVariableType>> typeVars = new ArrayList<>();\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/type\/TestErasure.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}