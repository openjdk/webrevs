{"files":[{"patch":"@@ -62,0 +62,3 @@\n+    \/**\n+     * Test to check if final values are represented in the generated code.\n+     *\/\n@@ -63,1 +66,1 @@\n-    public static void testConstants() {\n+    public static void testConstants01() {\n@@ -86,0 +89,52 @@\n+\n+    @CodeReflection\n+    public static int compute(final int valueA, final int valueB) {\n+        final int BM = 100;\n+        return BM + valueA + valueB;\n+    }\n+\n+    @CodeReflection\n+    public static void vectorWithConstants2(@RO KernelContext kc, @RO S32Array arrayA, @RO S32Array arrayB, @RW S32Array arrayC) {\n+        if (kc.x < kc.gsx) {\n+            final int valueA = arrayA.array(kc.x);\n+            final int valueB = arrayB.array(kc.x);\n+            final int result = compute(valueA, valueB);\n+            arrayC.array(kc.x, result);\n+        }\n+    }\n+\n+    @CodeReflection\n+    public static void vectorWithConstants2(@RO ComputeContext cc, @RO S32Array arrayA, @RO S32Array arrayB, @RW S32Array arrayC) {\n+        ComputeRange computeRange = new ComputeRange(new GlobalMesh1D(arrayA.length()));\n+        cc.dispatchKernel(computeRange, kc -> vectorWithConstants2(kc, arrayA, arrayB, arrayC));\n+    }\n+\n+    \/**\n+     * Test to check multiple method calls that contains constants.\n+     * This triggers the code model analysis for each of the reachable method before the\n+     * final code gen.\n+     *\/\n+    @HatTest\n+    public static void testConstants02() {\n+        final int size = 1024;\n+        var accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+        var arrayA = S32Array.create(accelerator, size);\n+        var arrayB = S32Array.create(accelerator, size);\n+        var arrayC = S32Array.create(accelerator, size);\n+\n+        arrayA.fill(i -> i);\n+        arrayB.fill(i -> 100 + i);\n+\n+        accelerator.compute(cc ->\n+                TestConstants.vectorWithConstants2(cc, arrayA, arrayB, arrayC));\n+\n+        S32Array test = S32Array.create(accelerator, size);\n+\n+        for (int i = 0; i < test.length(); i++) {\n+            test.array(i, CONSTANT + arrayA.array(i) + arrayB.array(i));\n+        }\n+\n+        for (int i = 0; i < test.length(); i++) {\n+            HatAsserts.assertEquals(test.array(i), arrayC.array(i));\n+        }\n+    }\n","filename":"hat\/tests\/src\/main\/java\/oracle\/code\/hat\/TestConstants.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"}]}