{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import hat.ifacemapper.MappableIface;\n+import hat.optools.OpTk;\n@@ -29,0 +31,1 @@\n+import jdk.incubator.code.TypeElement;\n@@ -30,0 +33,1 @@\n+import jdk.incubator.code.dialect.java.JavaType;\n@@ -31,0 +35,1 @@\n+import java.lang.invoke.MethodHandles;\n@@ -47,7 +52,21 @@\n-                boolean isFinalVarOp = true;\n-                for (Op.Result use : uses) {\n-                    Op op = use.op();\n-                    switch (op) {\n-                        case CoreOp.VarAccessOp.VarStoreOp storeOp -> {\n-                            if (storeOp.operands().stream().anyMatch(operand -> operand.equals(varResult))) {\n-                                isFinalVarOp = false;\n+\n+                \/\/ Obtain if the varOp comes from a declaration of\n+                \/\/ a var with MappableIface type. If so, we can't\n+                \/\/ generate the constant, because at this point of the analysis\n+                \/\/ after the dialectify, the only accesses left are accesses\n+                \/\/ to global memory.\n+                TypeElement typeElement = varOp.resultType().valueType();\n+                boolean isMappableType = false;\n+                if (typeElement instanceof JavaType javaType) {\n+                    isMappableType = OpTk.isAssignable(MethodHandles.lookup(), javaType, MappableIface.class);\n+                }\n+\n+                if (!isMappableType) {\n+                    boolean isFinalVarOp = true;\n+                    for (Op.Result use : uses) {\n+                        Op op = use.op();\n+                        switch (op) {\n+                            case CoreOp.VarAccessOp.VarStoreOp storeOp -> {\n+                                if (storeOp.operands().stream().anyMatch(operand -> operand.equals(varResult))) {\n+                                    isFinalVarOp = false;\n+                                }\n@@ -55,4 +74,6 @@\n-                        }\n-                        case CoreOp.YieldOp yieldOp -> {\n-                            if (yieldOp.operands().stream().anyMatch(operand -> operand.equals(varResult))) {\n-                                isFinalVarOp = false;\n+                            case CoreOp.YieldOp yieldOp -> {\n+                                if (yieldOp.operands().stream().anyMatch(operand -> operand.equals(varResult))) {\n+                                    isFinalVarOp = false;\n+                                }\n+                            }\n+                            case null, default -> {\n@@ -60,2 +81,0 @@\n-                        }\n-                        case null, default -> {\n@@ -64,3 +83,3 @@\n-                }\n-                if (isFinalVarOp) {\n-                    finalVars.put(varResult, varOp);\n+                    if (isFinalVarOp) {\n+                        finalVars.put(varResult, varOp);\n+                    }\n","filename":"hat\/core\/src\/main\/java\/hat\/phases\/HatFinalDetectionPhase.java","additions":35,"deletions":16,"binary":false,"changes":51,"status":"modified"}]}