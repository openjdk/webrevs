{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import jdk.incubator.code.dialect.core.CoreOp;\n@@ -229,4 +230,0 @@\n-        \/\/ Phase to detect finals\n-        HatFinalDetectionPhase hatFinalDetectionPhase = new HatFinalDetectionPhase();\n-        hatFinalDetectionPhase.apply(kernelCallGraph.entrypoint.funcOp());\n-\n@@ -235,1 +232,1 @@\n-                        kernelCallGraph.entrypoint.funcOp(), hatFinalDetectionPhase.getFinalVars());\n+                        kernelCallGraph.entrypoint.funcOp());\n@@ -239,1 +236,1 @@\n-            System.out.println(\"NOT using ModuleOp for C99FFIBackend\");\n+            IO.println(\"NOT using ModuleOp for C99FFIBackend\");\n@@ -241,5 +238,7 @@\n-                    .forEach(kernelReachableResolvedMethod ->\n-                            builder\n-                                    .nl()\n-                                    .kernelMethod(buildContext,kernelReachableResolvedMethod.funcOp())\n-                                    .nl());\n+                    .forEach(kernelReachableResolvedMethod -> {\n+                                HatFinalDetectionPhase finals = new HatFinalDetectionPhase();\n+                                finals.apply(kernelReachableResolvedMethod.funcOp());\n+                                \/\/ Update the build context for this method to use the right constants-map\n+                                buildContext.setFinals(finals.getFinalVars());\n+                                builder.nl().kernelMethod(buildContext, kernelReachableResolvedMethod.funcOp()).nl();\n+                    });\n@@ -247,1 +246,1 @@\n-          System.out.println(\"Using ModuleOp for C99FFIBackend\");\n+            IO.println(\"Using ModuleOp for C99FFIBackend\");\n@@ -249,4 +248,9 @@\n-                    .forEach((_, funcOp) -> builder\n-                            .nl()\n-                            .kernelMethod(buildContext,funcOp)\n-                            .nl());\n+                    .forEach((_, funcOp) -> {\n+\n+                        HatFinalDetectionPhase finals = new HatFinalDetectionPhase();\n+                        finals.apply(funcOp);\n+\n+                        \/\/ Update the build context for this method to use the right constants-map\n+                        buildContext.setFinals(finals.getFinalVars());\n+                        builder.nl().kernelMethod(buildContext, funcOp).nl();\n+                    });\n@@ -255,0 +259,4 @@\n+        \/\/ Update the constants-map for the main kernel\n+        HatFinalDetectionPhase hatFinalDetectionPhase = new HatFinalDetectionPhase();\n+        hatFinalDetectionPhase.apply(kernelCallGraph.entrypoint.funcOp());\n+        buildContext.setFinals(hatFinalDetectionPhase.getFinalVars());\n@@ -258,4 +266,4 @@\n-            System.out.println(\"Original\");\n-            System.out.println(kernelCallGraph.entrypoint.funcOp().toText());\n-            System.out.println(\"Lowered\");\n-            System.out.println(OpTk.lower(kernelCallGraph.entrypoint.funcOp()).toText());\n+            IO.println(\"Original\");\n+            IO.println(kernelCallGraph.entrypoint.funcOp().toText());\n+            IO.println(\"Lowered\");\n+            IO.println(OpTk.lower(kernelCallGraph.entrypoint.funcOp()).toText());\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+\n@@ -232,3 +233,3 @@\n-    public ScopedCodeBuilderContext(MethodHandles.Lookup lookup, CoreOp.FuncOp funcOp, Map<Op.Result, CoreOp.VarOp> varOpFinals) {\n-        super(lookup,funcOp);\n-        this.finalVarOps = varOpFinals;\n+\n+    public void setFinals(Map<Op.Result, CoreOp.VarOp> finalVars) {\n+        this.finalVarOps = finalVars;\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/ScopedCodeBuilderContext.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}