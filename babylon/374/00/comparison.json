{"files":[{"patch":"@@ -41,5 +41,5 @@\n-if (\"${PTX_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n-    set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\/ptx\")\n-    message(\"PTX_BACKEND=${PTX_BACKEND}\")\n-endif()\n-add_subdirectory(ptx)\n+#if (\"${PTX_BACKEND}EMPTY\" STREQUAL \"EMPTY\")\n+#    set (PTX_BACKEND \"${CMAKE_SOURCE_DIR}\/ptx\")\n+#    message(\"PTX_BACKEND=${PTX_BACKEND}\")\n+#endif()\n+#add_subdirectory(ptx)\n","filename":"hat\/backends\/ffi\/CMakeLists.txt","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,17 @@\n-\t    ${SHARED_BACKEND}\/cpp\/shared.cpp\n+            ${SHARED_BACKEND}\/cpp\/shared.cpp\n+            ${SHARED_BACKEND}\/include\/shared.h\n+            ${SHARED_BACKEND}\/cpp\/buffer.cpp\n+            ${SHARED_BACKEND}\/include\/buffer.h\n+            ${SHARED_BACKEND}\/cpp\/schema_cursor.cpp\n+            ${SHARED_BACKEND}\/include\/schema_cursor.h\n+            ${SHARED_BACKEND}\/cpp\/buffer_cursor.cpp\n+            ${SHARED_BACKEND}\/include\/buffer_cursor.h\n+            ${SHARED_BACKEND}\/cpp\/hex.cpp\n+            ${SHARED_BACKEND}\/include\/hex.h\n+            ${SHARED_BACKEND}\/cpp\/json.cpp\n+            ${SHARED_BACKEND}\/include\/json.h\n+            ${SHARED_BACKEND}\/cpp\/fsutil.cpp\n+            ${SHARED_BACKEND}\/include\/fsutil.h\n+            ${SHARED_BACKEND}\/cpp\/strutil.cpp\n+            ${SHARED_BACKEND}\/include\/strutil.h\n+            ${CUDA_BACKEND}\/include\/cuda_backend.h\n","filename":"hat\/backends\/ffi\/cuda\/CMakeLists.txt","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include <cuda_runtime_api.h>\n@@ -31,3 +30,3 @@\n-Ptx::Ptx(size_t len)\n-        : len(len), text(len > 0 ? new char[len] : nullptr) {\n-    std::cout << \"in Ptx with buffer allocated \"<<len << std::endl;\n+Text::Text(size_t len, char *text, bool isCopy)\n+        : len(len), text(text), isCopy(isCopy) {\n+    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n@@ -35,4 +34,10 @@\n-\n-Ptx::~Ptx() {\n-    if (len > 0 && text != nullptr) {\n-        std::cout << \"in ~Ptx with deleting allocated \"<<len << std::endl;\n+Text::Text(char *text, bool isCopy)\n+        : len(std::strlen(text)), text(text), isCopy(isCopy) {\n+    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n+}\n+Text::Text(size_t len)\n+        : len(len), text(len > 0 ? new char[len] : nullptr), isCopy(true) {\n+    std::cout << \"in Text len=\"<<len<<\" isCopy=\"<<isCopy << std::endl;\n+}\n+Text::~Text(){\n+    if (isCopy && text){\n@@ -41,0 +46,3 @@\n+    text = nullptr;\n+    isCopy = false;\n+    len = 0;\n@@ -43,0 +51,22 @@\n+PtxSource::PtxSource()\n+        : Text(0L) {\n+}\n+PtxSource::PtxSource(size_t len)\n+        : Text(len) {\n+}\n+PtxSource::PtxSource(char *text)\n+        : Text(text, false) {\n+}\n+CudaSource::CudaSource(size_t len)\n+        : Text(len) {\n+}\n+CudaSource::CudaSource(char *text)\n+        : Text(text, false) {\n+}\n+\n+Log::Log(size_t len)\n+        : Text(len) {\n+}\n+Log::Log(char *text)\n+        : Text(text, false) {\n+}\n@@ -48,2 +78,2 @@\n-Ptx *Ptx::nvcc(const char *cudaSource, size_t len) {\n-    Ptx *ptx = nullptr;\n+PtxSource *PtxSource::nvcc(const char *cudaSource, size_t len) {\n+    PtxSource *ptx = nullptr;\n@@ -93,1 +123,1 @@\n-                ptx = new Ptx(ptxLen + 1);\n+                ptx = new PtxSource(ptxLen + 1);\n@@ -117,2 +147,2 @@\n-CudaBackend::CudaProgram::CudaKernel::CudaBuffer::CudaBuffer(Backend::Program::Kernel *kernel, Arg_s *arg)\n-        : Buffer(kernel, arg), devicePtr() {\n+CudaBackend::CudaBuffer::CudaBuffer(Backend *backend, Arg_s *arg, BufferState_s *bufferState)\n+        : Buffer(backend, arg,bufferState), devicePtr() {\n@@ -132,1 +162,1 @@\n-    arg->value.buffer.vendorPtr = static_cast<void *>(this);\n+  bufferState->vendorPtr= static_cast<void *>(this);\n@@ -135,1 +165,1 @@\n-CudaBackend::CudaProgram::CudaKernel::CudaBuffer::~CudaBuffer() {\n+CudaBackend::CudaBuffer::~CudaBuffer() {\n@@ -147,1 +177,1 @@\n-    arg->value.buffer.vendorPtr = nullptr;\n+    bufferState->vendorPtr= nullptr;\n@@ -150,2 +180,2 @@\n-void CudaBackend::CudaProgram::CudaKernel::CudaBuffer::copyToDevice() {\n-    auto cudaKernel = dynamic_cast<CudaKernel*>(kernel);\n+void CudaBackend::CudaBuffer::copyToDevice() {\n+    auto cudaBackend = dynamic_cast<CudaBackend*>(backend);\n@@ -157,1 +187,1 @@\n-    CUresult status = cuMemcpyHtoDAsync(devicePtr, arg->value.buffer.memorySegment, arg->value.buffer.sizeInBytes,cudaKernel->cudaStream);\n+    CUresult status = cuMemcpyHtoDAsync(devicePtr, arg->value.buffer.memorySegment, arg->value.buffer.sizeInBytes,cudaBackend->cudaQueue.cudaStream);\n@@ -164,1 +194,1 @@\n-    status = static_cast<CUresult >(cudaStreamSynchronize(cudaKernel->cudaStream));\n+    status = static_cast<CUresult >(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n@@ -173,2 +203,3 @@\n-void CudaBackend::CudaProgram::CudaKernel::CudaBuffer::copyFromDevice() {\n-    auto cudaKernel = dynamic_cast<CudaKernel*>(kernel);\n+void CudaBackend::CudaBuffer::copyFromDevice() {\n+    auto cudaBackend = dynamic_cast<CudaBackend*>(backend);\n+  \/\/  auto cudaKernel = dynamic_cast<CudaKernel*>(kernel);\n@@ -180,1 +211,1 @@\n-    CUresult status =cuMemcpyDtoHAsync(arg->value.buffer.memorySegment, devicePtr, arg->value.buffer.sizeInBytes,cudaKernel->cudaStream);\n+    CUresult status =cuMemcpyDtoHAsync(arg->value.buffer.memorySegment, devicePtr, arg->value.buffer.sizeInBytes,cudaBackend->cudaQueue.cudaStream);\n@@ -187,1 +218,1 @@\n-    cudaError_t t1 = cudaStreamSynchronize(cudaKernel->cudaStream);\n+    cudaError_t t1 = cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream);\n@@ -197,2 +228,2 @@\n-CudaBackend::CudaProgram::CudaKernel::CudaKernel(Backend::Program *program,char * name, CUfunction function)\n-        : Backend::Program::Kernel(program, name), function(function),cudaStream() {\n+CudaBackend::CudaModule::CudaKernel::CudaKernel(Backend::CompilationUnit *program,char * name, CUfunction function)\n+        : Backend::CompilationUnit::Kernel(program, name), function(function) {\n@@ -201,1 +232,1 @@\n-CudaBackend::CudaProgram::CudaKernel::~CudaKernel() = default;\n+CudaBackend::CudaModule::CudaKernel::~CudaKernel() = default;\n@@ -203,1 +234,1 @@\n-long CudaBackend::CudaProgram::CudaKernel::ndrange(void *argArray) {\n+long CudaBackend::CudaModule::CudaKernel::ndrange(void *argArray) {\n@@ -205,0 +236,1 @@\n+    auto cudaBackend = dynamic_cast<CudaBackend*>(compilationUnit->backend);\n@@ -206,1 +238,0 @@\n-    cudaStreamCreate(&cudaStream);\n@@ -221,1 +252,1 @@\n-                auto cudaBuffer = new CudaBuffer(this, arg);\n+                auto cudaBuffer = new CudaBackend::CudaBuffer(cudaBackend, arg, BufferState_s::of(arg));\n@@ -252,1 +283,1 @@\n-    auto status= static_cast<CUresult>(cudaStreamSynchronize(cudaStream));\n+    auto status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n@@ -263,1 +294,1 @@\n-                                   0, cudaStream,\n+                                   0, cudaBackend->cudaQueue.cudaStream,\n@@ -271,1 +302,1 @@\n-    status= static_cast<CUresult>(cudaStreamSynchronize(cudaStream));\n+    status= static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n@@ -284,1 +315,1 @@\n-            static_cast<CudaBuffer *>(arg->value.buffer.vendorPtr)->copyFromDevice();\n+            static_cast<CudaBuffer *>(BufferState_s::of(arg)->vendorPtr)->copyFromDevice();\n@@ -288,1 +319,1 @@\n-    status=   static_cast<CUresult>(cudaStreamSynchronize(cudaStream));\n+    status=   static_cast<CUresult>(cudaStreamSynchronize(cudaBackend->cudaQueue.cudaStream));\n@@ -299,2 +330,3 @@\n-            delete static_cast<CudaBuffer *>(arg->value.buffer.vendorPtr);\n-            arg->value.buffer.vendorPtr = nullptr;\n+            delete static_cast<CudaBuffer *>(BufferState_s::of(arg)->vendorPtr);\n+            BufferState_s::of(arg)->vendorPtr = nullptr;\n+\n@@ -303,1 +335,1 @@\n-    cudaStreamDestroy(cudaStream);\n+   \/\/ cudaStreamDestroy(cudaStream);\n@@ -308,2 +340,2 @@\n-CudaBackend::CudaProgram::CudaProgram(Backend *backend, BuildInfo *buildInfo, Ptx *ptx, CUmodule module)\n-        : Backend::Program(backend, buildInfo), ptx(ptx), module(module) {\n+CudaBackend::CudaModule::CudaModule(Backend *backend, char *src, char  *log,  bool ok, CUmodule module)\n+        : Backend::CompilationUnit(backend, src, log, ok), cudaSource(src), ptxSource(),log(log), module(module) {\n@@ -312,1 +344,1 @@\n-CudaBackend::CudaProgram::~CudaProgram() = default;\n+CudaBackend::CudaModule::~CudaModule() = default;\n@@ -314,1 +346,1 @@\n-long CudaBackend::CudaProgram::getKernel(int nameLen, char *name) {\n+long CudaBackend::CudaModule::getKernel(int nameLen, char *name) {\n@@ -327,1 +359,1 @@\n-bool CudaBackend::CudaProgram::programOK() {\n+bool CudaBackend::CudaModule::programOK() {\n@@ -332,1 +364,1 @@\n-        : Backend(mode), device(),context()  {\n+        : Backend(mode), cudaConfig(mode), cudaQueue(this), device(),context()  {\n@@ -366,6 +398,0 @@\n-int CudaBackend::getMaxComputeUnits() {\n-    std::cout << \"getMaxComputeUnits()\" << std::endl;\n-    int value = 1;\n-    return value;\n-}\n-\n@@ -403,2 +429,2 @@\n-long CudaBackend::compileProgram(int len, char *source) {\n-    Ptx *ptx = Ptx::nvcc(source, len);\n+long CudaBackend::compile(int len, char *source) {\n+    PtxSource *ptx = PtxSource::nvcc(source, len);\n@@ -428,1 +454,1 @@\n-        return reinterpret_cast<long>(new CudaProgram(this, nullptr, ptx, module));\n+        return reinterpret_cast<long>(new CudaModule(this,  ptx->text,jitLogBuffer,true, module));\n@@ -438,1 +464,1 @@\n-    long backendHandle= reinterpret_cast<long>(new CudaBackend(mode);\n+    long backendHandle= reinterpret_cast<long>(new CudaBackend(mode));\n@@ -443,0 +469,64 @@\n+CudaBackend::CudaQueue::CudaQueue(Backend *backend)\n+        : Backend::Queue(backend){\n+        cudaStreamCreate(&cudaStream);\n+    }\n+\n+\n+\n+void CudaBackend::CudaQueue::showEvents(int width) {\n+\n+}\n+void CudaBackend::CudaQueue::wait(){\n+    if (eventc > 0){\n+      \/\/  cl_int status = clWaitForEvents(eventc, events);\n+      \/\/  if (status != CL_SUCCESS) {\n+          \/\/  std::cerr << \"failed clWaitForEvents\" << CudaBackend::errorMsg(status) << std::endl;\n+           \/\/ exit(1);\n+       \/\/ }\n+    }\n+}\n+void clCallback(void *){\n+    std::cerr<<\"start of compute\"<<std::endl;\n+}\n+\n+void CudaBackend::CudaQueue::marker(int bits){\n+   \/\/ cl_int status = clEnqueueMarkerWithWaitList(\n+          \/\/  command_queue,\n+           \/\/ this->eventc, this->eventListPtr(),this->nextEventPtr()\n+   \/\/ );\n+   \/\/ if (status != CL_SUCCESS){\n+     \/\/   std::cerr << \"failed to clEnqueueMarkerWithWaitList \"<<errorMsg(status)<< std::endl;\n+     \/\/   std::exit(1);\n+  \/\/  }\n+   \/\/ inc(bits);\n+}\n+void CudaBackend::CudaQueue::marker(int bits, const char* arg){\n+   \/\/ cl_int status = clEnqueueMarkerWithWaitList(\n+          \/\/  command_queue,\n+          \/\/  this->eventc, this->eventListPtr(),this->nextEventPtr()\n+  \/\/  );\n+   \/\/ if (status != CL_SUCCESS){\n+     \/\/   std::cerr << \"failed to clEnqueueMarkerWithWaitList \"<<errorMsg(status)<< std::endl;\n+      \/\/  std::exit(1);\n+   \/\/ }\n+   \/\/ inc(bits, arg);\n+}\n+void CudaBackend::CudaQueue::marker(int bits, int arg){\n+    \/\/cl_int status = clEnqueueMarkerWithWaitList(\n+          \/\/  command_queue,\n+        \/\/    this->eventc, this->eventListPtr(),this->nextEventPtr()\n+  \/\/  );\n+   \/\/ if (status != CL_SUCCESS){\n+    \/\/    std::cerr << \"failed to clEnqueueMarkerWithWaitList \"<<errorMsg(status)<< std::endl;\n+    \/\/    std::exit(1);\n+  \/\/  }\n+ \/\/   inc(bits, arg);\n+}\n+\n+void CudaBackend::CudaQueue::computeStart(){\n+    wait(); \/\/ should be no-op\n+    release(); \/\/ also ;\n+    marker(StartComputeBits);\n+}\n+\n+\n@@ -444,0 +534,3 @@\n+void CudaBackend::CudaQueue::computeEnd(){\n+    marker(EndComputeBits);\n+}\n@@ -445,0 +538,79 @@\n+void CudaBackend::CudaQueue::inc(int bits){\n+    if (eventc+1 >= eventMax){\n+        std::cerr << \"CudaBackend::CudaQueue event list overflowed!!\" << std::endl;\n+    }else{\n+        eventInfoBits[eventc]=bits;\n+    }\n+    eventc++;\n+}\n+void CudaBackend::CudaQueue::inc(int bits, const char *arg){\n+    if (eventc+1 >= eventMax){\n+        std::cerr << \"CudaBackend::CudaQueue event list overflowed!!\" << std::endl;\n+    }else{\n+        eventInfoBits[eventc]=bits|HasConstCharPtrArgBits;\n+        eventInfoConstCharPtrArgs[eventc]=arg;\n+    }\n+    eventc++;\n+}\n+void CudaBackend::CudaQueue::inc(int bits, int arg){\n+    if (eventc+1 >= eventMax){\n+        std::cerr << \"CudaBackend::CudaQueue event list overflowed!!\" << std::endl;\n+    }else{\n+        eventInfoBits[eventc]=bits|arg|hasIntArgBits;\n+    }\n+    eventc++;\n+}\n+\n+void CudaBackend::CudaQueue::markAsEndComputeAndInc(){\n+    inc(EndComputeBits);\n+}\n+void CudaBackend::CudaQueue::markAsStartComputeAndInc(){\n+    inc(StartComputeBits);\n+}\n+void CudaBackend::CudaQueue::markAsNDRangeAndInc(){\n+    inc(NDRangeBits);\n+}\n+void CudaBackend::CudaQueue::markAsCopyToDeviceAndInc(int argn){\n+    inc(CopyToDeviceBits, argn);\n+}\n+void CudaBackend::CudaQueue::markAsCopyFromDeviceAndInc(int argn){\n+    inc(CopyFromDeviceBits, argn);\n+}\n+void CudaBackend::CudaQueue::markAsEnterKernelDispatchAndInc(){\n+    inc(EnterKernelDispatchBits);\n+}\n+void CudaBackend::CudaQueue::markAsLeaveKernelDispatchAndInc(){\n+    inc(LeaveKernelDispatchBits);\n+}\n+\n+void CudaBackend::CudaQueue::release(){\n+   \/\/ cl_int status = CL_SUCCESS;\n+  \/\/  for (int i = 0; i < eventc; i++) {\n+   \/\/     status = clReleaseEvent(events[i]);\n+    \/\/    if (status != CL_SUCCESS) {\n+      \/\/      std::cerr << CudaBackend::errorMsg(status) << std::endl;\n+      \/\/      exit(1);\n+   \/\/     }\n+   \/\/ }\/\/\n+ \/\/   eventc = 0;\n+}\n+\n+CudaBackend::CudaQueue::~CudaQueue(){\n+   \/\/ clReleaseCommandQueue(command_queue);\n+   \/\/ delete []events;\n+\n+}\n+\n+CudaBackend::CudaConfig::CudaConfig(int mode)\n+   : Backend::Config(mode){\n+\n+}\n+void CudaBackend::computeEnd(){\n+\n+}\n+void CudaBackend::computeStart(){\n+\n+}\n+bool CudaBackend::getBufferFromDeviceIfDirty(void *memorySegment, long size){\n+return true;\n+}\n\\ No newline at end of file\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/cuda_backend.cpp","additions":226,"deletions":54,"binary":false,"changes":280,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    CudaBackend cudaBackend(0,0,0);\n+    CudaBackend cudaBackend(0);\n","filename":"hat\/backends\/ffi\/cuda\/cpp\/info.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-\n+#include <cuda_runtime_api.h>\n@@ -66,2 +66,1 @@\n-\n-class Ptx {\n+class Text {\n@@ -71,0 +70,1 @@\n+    bool isCopy;\n@@ -72,3 +72,5 @@\n-    Ptx(size_t len);\n-\n-    ~Ptx();\n+    Text(size_t len, char *text, bool isCopy);\n+    Text(char *text, bool isCopy);\n+    Text(size_t len);\n+    virtual ~Text();\n+};\n@@ -76,1 +78,19 @@\n-    static Ptx *nvcc(const char *cudaSource, size_t len);\n+class PtxSource: public Text  {\n+public:\n+    PtxSource();\n+    PtxSource(size_t len);\n+    PtxSource(char *text);\n+    ~PtxSource() = default;\n+    static PtxSource *nvcc(const char *cudaSource, size_t len);\n+};\n+class CudaSource:public Text  {\n+public:\n+    CudaSource(size_t len);\n+    CudaSource(char* text);\n+    ~CudaSource() = default;\n+};\n+class Log:public Text  {\n+public:\n+    Log(size_t len);\n+    Log(char* text);\n+    ~Log()  = default;\n@@ -79,0 +99,1 @@\n+\n@@ -81,10 +102,41 @@\n-    class CudaProgram : public Backend::Program {\n-        class CudaKernel : public Backend::Program::Kernel {\n-            class CudaBuffer : public Backend::Program::Kernel::Buffer {\n-            public:\n-                CUdeviceptr devicePtr;\n-                CudaBuffer(Backend::Program::Kernel *kernel, Arg_s *arg);\n-                void copyToDevice();\n-                void copyFromDevice();\n-                virtual ~CudaBuffer();\n-            };\n+class CudaConfig : public Backend::Config{\n+    public:\n+        CudaConfig(int mode);\n+         ~CudaConfig()=default;\n+    };\n+class CudaQueue: public Backend::Queue {\n+    public:\n+        cudaStream_t cudaStream;\n+        CudaQueue(Backend *backend);\n+        void showEvents(int width);\n+        void wait();\n+        void release();\n+        void computeStart();\n+        void computeEnd();\n+        void inc(int bits);\n+        void inc(int bits, const char *arg);\n+        void inc(int bits, int arg);\n+        void marker(int bits);\n+        void marker(int bits, const char *arg);\n+        void marker(int bits, int arg);\n+        void markAsCopyToDeviceAndInc(int argn);\n+        void markAsCopyFromDeviceAndInc(int argn);\n+        void markAsNDRangeAndInc();\n+        void markAsStartComputeAndInc();\n+        void markAsEndComputeAndInc();\n+        void markAsEnterKernelDispatchAndInc();\n+        void markAsLeaveKernelDispatchAndInc();\n+        virtual ~CudaQueue();\n+    };\n+\n+    class CudaBuffer : public Backend::Buffer {\n+    public:\n+        CUdeviceptr devicePtr;\n+        CudaBuffer(Backend *backend,Arg_s *arg, BufferState_s *bufferStateS);\n+        void copyToDevice();\n+        void copyFromDevice();\n+        virtual ~CudaBuffer();\n+    };\n+\n+    class CudaModule : public Backend::CompilationUnit {\n+        class CudaKernel : public Backend::CompilationUnit::Kernel {\n@@ -94,1 +146,1 @@\n-            cudaStream_t cudaStream;\n+\n@@ -96,1 +148,1 @@\n-            CudaKernel(Backend::Program *program, char* name, CUfunction function);\n+            CudaKernel(Backend::CompilationUnit *program, char* name, CUfunction function);\n@@ -103,1 +155,3 @@\n-        Ptx *ptx;\n+        CudaSource cudaSource;\n+        PtxSource ptxSource;\n+        Log log;\n@@ -106,2 +160,3 @@\n-        CudaProgram(Backend *backend, BuildInfo *buildInfo, Ptx *ptx, CUmodule module);\n-        ~CudaProgram();\n+\n+        CudaModule(Backend *backend, char *cudaSrc,   char *log, bool ok, CUmodule module);\n+        ~CudaModule();\n@@ -115,0 +170,3 @@\n+\n+    CudaConfig cudaConfig;\n+    CudaQueue cudaQueue;\n@@ -119,0 +177,3 @@\n+    void computeStart();\n+    void computeEnd();\n+    bool getBufferFromDeviceIfDirty(void *memorySegment, long memorySegmentLength);\n","filename":"hat\/backends\/ffi\/cuda\/include\/cuda_backend.h","additions":83,"deletions":22,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    PtxBackend ptxBackend;\n+    PtxBackend ptxBackend(0);\n","filename":"hat\/backends\/ffi\/ptx\/cpp\/info.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,3 +121,3 @@\n-PtxBackend::PtxProgram::PtxKernel::PtxBuffer::PtxBuffer(Backend::Program::Kernel *kernel, Arg_s *arg)\n-        : Buffer(kernel, arg), devicePtr() {\n-    \/*\n+PtxBackend::PtxBuffer::PtxBuffer(Backend *backend,Arg_s *arg, BufferState_s *bufferState)\n+        : Buffer(backend,arg, bufferState), devicePtr() {\n+    \/*z\n@@ -139,1 +139,1 @@\n-PtxBackend::PtxProgram::PtxKernel::PtxBuffer::~PtxBuffer() {\n+PtxBackend::PtxBuffer::~PtxBuffer() {\n@@ -154,2 +154,2 @@\n-void PtxBackend::PtxProgram::PtxKernel::PtxBuffer::copyToDevice() {\n-    auto ptxKernel = dynamic_cast<PtxKernel*>(kernel);\n+void PtxBackend::PtxBuffer::copyToDevice() {\n+  \/\/  auto ptxKernel = dynamic_cast<PtxKernel*>(kernel);\n@@ -187,2 +187,2 @@\n-void PtxBackend::PtxProgram::PtxKernel::PtxBuffer::copyFromDevice() {\n-    auto ptxKernel = dynamic_cast<PtxKernel*>(kernel);\n+void PtxBackend::PtxBuffer::copyFromDevice() {\n+ \/\/   auto ptxKernel = dynamic_cast<PtxKernel*>(kernel);\n@@ -226,2 +226,2 @@\n-PtxBackend::PtxProgram::PtxKernel::PtxKernel(Backend::Program *program,char * name, CUfunction function)\n-        : Backend::Program::Kernel(program, name), function(function),cudaStream() {\n+PtxBackend::PtxProgram::PtxKernel::PtxKernel(Backend::CompilationUnit *program,char * name, CUfunction function)\n+        : Backend::CompilationUnit::Kernel(program, name), function(function),cudaStream() {\n","filename":"hat\/backends\/ffi\/ptx\/cpp\/ptx_backend.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+    class PtxBuffer : public Backend::Buffer {\n+    public:\n+        CUdeviceptr devicePtr;\n@@ -78,5 +81,1 @@\n-    class PtxProgram : public Backend::Program {\n-        class PtxKernel : public Backend::Program::Kernel {\n-            class PtxBuffer : public Backend::Program::Kernel::Buffer {\n-            public:\n-                CUdeviceptr devicePtr;\n+        PtxBuffer(Backend *backend, Arg_s *arg);\n@@ -84,1 +83,1 @@\n-                PtxBuffer(Backend::Program::Kernel *kernel, Arg_s *arg);\n+        void copyToDevice();\n@@ -86,1 +85,1 @@\n-                void copyToDevice();\n+        void copyFromDevice();\n@@ -88,1 +87,4 @@\n-                void copyFromDevice();\n+        virtual ~PtxBuffer();\n+    };\n+    class PtxProgram : public Backend::CompilationUnit {\n+        class PtxKernel : public Backend::CompilationUnit::Kernel {\n@@ -90,2 +92,0 @@\n-                virtual ~PtxBuffer();\n-            };\n@@ -95,1 +95,0 @@\n-            cudaStream_t cudaStream;\n@@ -97,1 +96,1 @@\n-            PtxKernel(Backend::Program *program, char* name, CUfunction function);\n+            PtxKernel(Backend::CompilationUnit *program, char* name, CUfunction function);\n@@ -109,1 +108,1 @@\n-        PtxProgram(Backend *backend, BuildInfo *buildInfo, Ptx *ptx, CUmodule module);\n+        PtxProgram(Backend *backend, Ptx *ptx, CUmodule module);\n@@ -121,0 +120,2 @@\n+\n+    cudaStream_t cudaStream;\n@@ -131,1 +132,3 @@\n-    long compileProgram(int len, char *source);\n+    long compile(int len, char *source);\n+    void computeStart();\n+    void computeEnd();\n","filename":"hat\/backends\/ffi\/ptx\/include\/ptx_backend.h","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"}]}