{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package experiments;\n+\n+import hat.Accelerator;\n+import hat.ComputeContext;\n+import hat.KernelContext;\n+import hat.buffer.S32Array;\n+import hat.ifacemapper.MappableIface;\n+import jdk.incubator.code.CodeReflection;\n+\n+import java.lang.invoke.MethodHandles;\n+\n+public class QuotedArrayArg {\n+    @CodeReflection\n+    public static void addScalerKernel(@MappableIface.RO KernelContext kc, @MappableIface.RO S32Array in, @MappableIface.WO S32Array out, int scaler) {\n+        out.array(kc.x, in.array(kc.x) + scaler);\n+    }\n+\n+    @CodeReflection\n+    static public void addScalerCompute(final ComputeContext computeContext, S32Array in, S32Array out, int scaler) {\n+        computeContext.dispatchKernel(in.length(), kc -> QuotedConstantArgs.addScalerKernel(kc, in, out, scaler));\n+    }\n+\n+    public static void main(String[] args) {\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup());\n+        S32Array in = S32Array.create(accelerator, 32);\n+        in.fill((idx) -> idx);\n+        S32Array out = S32Array.create(accelerator, 32);\n+        int[] array = new int[]{1};\n+        int index = 0;\n+        \/\/ This works\n+        if (args.length == 0) {\n+            int lvar = array[index];\n+            accelerator.compute(computeContext -> QuotedConstantArgs.addScalerCompute(computeContext, in, out,lvar));\n+        }else {\n+            if (args.length == 1 && args[0].equals(\"passIndex\")) {\n+                accelerator.compute(computeContext -> QuotedConstantArgs.addScalerCompute(computeContext, in, out, array[index]));\n+            }else if (args.length == 1 && args[0].equals(\"passZero\")) {\n+                accelerator.compute(computeContext -> QuotedConstantArgs.addScalerCompute(computeContext, in, out, array[0]));\n+            }else{\n+                throw new IllegalArgumentException(\"Invalid args either no args, passIndex or passZero\");\n+            }\n+        }\n+        for (int i = 0; i < in.length(); i++) {\n+            System.out.println(\"[\"+i+\"]  in=\" + in.array(i) + \" out=\" + out.array(i));\n+        }\n+    }\n+\n+}\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/QuotedArrayArg.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-        if (true) {\n+        if (args.length == 0) {\n@@ -55,1 +55,1 @@\n-        }else{\n+        }else if (args.length == 1 && args[0].equals(\"passConstant\")) {\n@@ -57,0 +57,2 @@\n+        }else{\n+            throw new IllegalArgumentException(\"Invalid arguments either zero args or passConstant\");\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/QuotedConstantArgs.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}