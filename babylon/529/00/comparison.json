{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import jdk.incubator.code.OpTransformer;\n@@ -279,9 +280,1 @@\n-        CoreOp.FuncOp lfop = fop.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop)  {\n-                return lop.lower(block);\n-            }\n-            else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lfop = fop.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"cr-examples\/spirv\/src\/main\/java\/intel\/code\/spirv\/TranslateToSpirvModel.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -193,8 +193,1 @@\n-        return OpWrapper.wrap(lookup,op().transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        }));\n+        return OpWrapper.wrap(lookup,op().transform(OpTransformer.LOWERING_TRANSFORMER));\n","filename":"hat\/core\/src\/main\/java\/hat\/optools\/FuncOpWrapper.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -125,2 +125,1 @@\n-     * An operation characteristic indicating the operation can replace itself with a lowered form,\n-     * consisting only of operations in the core dialect.\n+     * An operation characteristic indicating the operation can replace itself with a lowered form.\n@@ -128,0 +127,1 @@\n+    \/\/ @@@ Hide this abstraction within JavaOp?\n@@ -129,3 +129,0 @@\n-        default Block.Builder lower(Block.Builder b) {\n-            return lower(b, OpTransformer.NOOP_TRANSFORMER);\n-        }\n@@ -133,0 +130,10 @@\n+        \/**\n+         * Lowers this operation into the block builder, commonly replacing nested structure\n+         * with interconnected basic blocks. The previous lowering code transformation\n+         * is used to compose with a lowering transformation that is applied to bodies\n+         * of this operation, ensuring lowering is applied consistently to nested content.\n+         *\n+         * @param b the block builder\n+         * @param opT the previous lowering code transformation, may be {@code null}\n+         * @return the block builder to use for further building\n+         *\/\n@@ -134,0 +141,50 @@\n+\n+        \/**\n+         * Returns a composed code transformer that composes with an operation transformer function adapted to lower\n+         * operations.\n+         * <p>\n+         * This method behaves as if it returns the result of the following expression:\n+         * {@snippet lang = java:\n+         * OpTransformer.andThen(before, lowering(before, f));\n+         *}\n+         *\n+         * @param before the code transformer to apply before\n+         * @param f the operation transformer function to apply after\n+         * @return the composed code transformer\n+         *\/\n+        static OpTransformer andThenLowering(OpTransformer before, BiFunction<Block.Builder, Op, Block.Builder> f) {\n+            return OpTransformer.andThen(before, lowering(before, f));\n+        }\n+\n+        \/**\n+         * Returns an adapted operation transformer function that adapts an operation transformer function\n+         * {@code f} to also transform lowerable operations.\n+         * <p>\n+         * The adapted operation transformer function first applies a block builder and operation\n+         * to the operation transformer function {@code f}.\n+         * If the result is not {@code null} then the result is returned.\n+         * Otherwise, if the operation is a lowerable operation then the result of applying the\n+         * block builder and code transformer {@code before} to {@link Lowerable#lower lower}\n+         * of the lowerable operation is returned.\n+         * Otherwise, the operation is copied by applying it to {@link Block.Builder#op op} of the block builder,\n+         * and the block builder is returned.\n+         *\n+         * @param before the code transformer to apply for lowering\n+         * @param f the operation transformer function to apply after\n+         * @return the adapted operation transformer function\n+         *\/\n+        static BiFunction<Block.Builder, Op, Block.Builder> lowering(OpTransformer before, BiFunction<Block.Builder, Op, Block.Builder> f) {\n+            return (block, op) -> {\n+                Block.Builder b = f.apply(block, op);\n+                if (b == null) {\n+                    if (op instanceof Lowerable lop) {\n+                        block = lop.lower(block, before);\n+                    } else {\n+                        block.op(op);\n+                    }\n+                } else {\n+                    block = b;\n+                }\n+                return block;\n+            };\n+        }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":62,"deletions":5,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.util.Objects;\n+import java.util.function.BiFunction;\n@@ -46,5 +46,0 @@\n-    \/**\n-     * A transformer that performs no action on the block builder.\n-     *\/\n-    OpTransformer NOOP_TRANSFORMER = (block, op) -> block;\n-\n@@ -66,1 +61,1 @@\n-            return lop.lower(block);\n+            return lop.lower(block, null);\n@@ -132,1 +127,0 @@\n-     * @throws NullPointerException if a resulting block builder is null\n@@ -137,2 +131,0 @@\n-            \/\/ @@@ See andThen composition\n-            Objects.requireNonNull(builder);\n@@ -153,2 +145,17 @@\n-    default OpTransformer compose(OpTransformer before) {\n-        return before.andThen(this);\n+    \/**\n+     * Returns a composed code transform that transforms an operation that first applies\n+     * a block builder and operation to the function {@code f}, and then applies\n+     * the resulting block builder and the same operation to {@link OpTransformer#acceptOp acceptOp}\n+     * of the code transformer {@code after}.\n+     * <p>\n+     * If the code transformer {@code after} is {@code null} then it is as if a code transformer\n+     * is applied that does nothing except return the block builder it was given.\n+     *\n+     * @param after the code transformer to apply after\n+     * @param f the operation transformer function to apply before\n+     * @return the composed code transformer\n+     *\/\n+    static OpTransformer compose(OpTransformer after, BiFunction<Block.Builder, Op, Block.Builder> f) {\n+        return after == null\n+                ? f::apply\n+                : (block, op) -> after.acceptOp(f.apply(block, op), op);\n@@ -157,16 +164,16 @@\n-    default OpTransformer andThen(OpTransformer after) {\n-        if (after == NOOP_TRANSFORMER) {\n-            return this;\n-        } else if (this == NOOP_TRANSFORMER) {\n-            return after;\n-        } else {\n-            return (bb, o) -> {\n-                Block.Builder nbb = acceptOp(bb, o);\n-                if (nbb != null) {\n-                    return after.acceptOp(nbb, o);\n-                } else {\n-                    \/\/ @@@ This does not currently occur\n-                    return null;\n-                }\n-            };\n-        }\n+    \/**\n+     * Returns a composed code transformer that first applies a block builder and operation to\n+     * {@link OpTransformer#acceptOp acceptOp} of the code transformer {@code before},\n+     * and then applies resulting block builder and the same operation to the function {@code f}.\n+     * <p>\n+     * If the code transformer {@code before} is {@code null} then it is as if a code transformer\n+     * is applied that does nothing except return the block builder it was given.\n+     *\n+     * @param before the code transformer to apply before\n+     * @param f the operation transformer function to apply after\n+     * @return the composed code transformer\n+     *\/\n+    static OpTransformer andThen(OpTransformer before, BiFunction<Block.Builder, Op, Block.Builder> f) {\n+        return before == null\n+                ? f::apply\n+                : (block, op) -> f.apply(before.acceptOp(block, op), op);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/OpTransformer.java","additions":35,"deletions":28,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.BiFunction;\n@@ -43,0 +44,2 @@\n+import static jdk.incubator.code.Op.Lowerable.*;\n+import static jdk.incubator.code.OpTransformer.*;\n@@ -2271,1 +2274,1 @@\n-            b.body(body, List.of(), opT.andThen((block, op) -> {\n+            b.body(body, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -2274,0 +2277,1 @@\n+                    return block;\n@@ -2275,6 +2279,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, opT);\n-                    } else {\n-                        block.op(op);\n-                    }\n+                    return null;\n@@ -2282,1 +2281,0 @@\n-                return block;\n@@ -2373,1 +2371,1 @@\n-            OpTransformer syncExitTransformer = opT.compose((block, op) -> {\n+            OpTransformer syncExitTransformer = compose(opT, (block, op) -> {\n@@ -2387,1 +2385,1 @@\n-            syncRegionEnter.body(blockBody, List.of(), syncExitTransformer.andThen((block, op) -> {\n+            syncRegionEnter.body(blockBody, List.of(), andThenLowering(syncExitTransformer, (block, op) -> {\n@@ -2393,0 +2391,1 @@\n+                    return block;\n@@ -2394,6 +2393,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, syncExitTransformer);\n-                    } else {\n-                        block.op(op);\n-                    }\n+                    return null;\n@@ -2401,1 +2395,0 @@\n-                return block;\n@@ -2424,1 +2417,1 @@\n-            b.body(expr, List.of(), opT.andThen((block, op) -> {\n+            b.body(expr, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -2428,0 +2421,1 @@\n+                    return block;\n@@ -2429,6 +2423,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, opT);\n-                    } else {\n-                        block.op(op);\n-                    }\n+                    return null;\n@@ -2436,1 +2425,0 @@\n-                return block;\n@@ -2513,1 +2501,1 @@\n-            b.body(body, List.of(), opT.andThen((block, op) -> {\n+            b.body(body, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -2522,0 +2510,1 @@\n+                    return block;\n@@ -2523,6 +2512,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, opT);\n-                    } else {\n-                        block.op(op);\n-                    }\n+                    return null;\n@@ -2530,1 +2514,0 @@\n-                return block;\n@@ -2726,1 +2709,1 @@\n-                    pred.body(predBody, List.of(), opT.andThen((block, op) -> {\n+                    pred.body(predBody, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -2730,3 +2713,1 @@\n-                        } else if (op instanceof Lowerable lop) {\n-                            \/\/ @@@ Composition of lowerable ops\n-                            block = lop.lower(block, opT);\n+                            return block;\n@@ -2734,1 +2715,1 @@\n-                            block.op(op);\n+                            return null;\n@@ -2736,1 +2717,0 @@\n-                        return block;\n@@ -2740,1 +2720,1 @@\n-                action.body(actionBody, List.of(), opT.andThen((block, op) -> {\n+                action.body(actionBody, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -2743,0 +2723,1 @@\n+                        return block;\n@@ -2744,6 +2725,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        if (op instanceof Lowerable lop) {\n-                            block = lop.lower(block, opT);\n-                        } else {\n-                            block.op(op);\n-                        }\n+                        return null;\n@@ -2751,1 +2727,0 @@\n-                    return block;\n@@ -2846,15 +2821,15 @@\n-                    curr.body(bodies().get(i), List.of(selectorExpression), opT.andThen((block, op) -> {\n-                        switch (op) {\n-                            case CoreOp.YieldOp _ when isLastLabel && this instanceof SwitchExpressionOp -> {\n-                                block.op(branch(statement.successor()));\n-                            }\n-                            case CoreOp.YieldOp yop -> block.op(conditionalBranch(\n-                                    block.context().getValue(yop.yieldValue()),\n-                                    statement.successor(),\n-                                    isLastLabel ? exit.successor() : nextLabel.successor()\n-                            ));\n-                            case Lowerable lop -> block = lop.lower(block, opT);\n-                            default -> block.op(op);\n-                        }\n-                        return block;\n-                    }));\n+                    curr.body(bodies().get(i), List.of(selectorExpression), andThenLowering(opT,\n+                            (block, op) -> switch (op) {\n+                                case CoreOp.YieldOp _ when isLastLabel && this instanceof SwitchExpressionOp -> {\n+                                    block.op(branch(statement.successor()));\n+                                    yield block;\n+                                }\n+                                case CoreOp.YieldOp yop -> {\n+                                    block.op(conditionalBranch(\n+                                        block.context().getValue(yop.yieldValue()),\n+                                        statement.successor(),\n+                                        isLastLabel ? exit.successor() : nextLabel.successor()));\n+                                    yield block;\n+                                }\n+                                default -> null;\n+                            }));\n@@ -2862,9 +2837,12 @@\n-                    curr.body(bodies().get(i), blocks.get(i).parameters(), opT.andThen((block, op) -> {\n-                        switch (op) {\n-                            case CoreOp.YieldOp _ when this instanceof SwitchStatementOp -> block.op(branch(exit.successor()));\n-                            case CoreOp.YieldOp yop when this instanceof SwitchExpressionOp -> block.op(branch(exit.successor(block.context().getValue(yop.yieldValue()))));\n-                            case Lowerable lop -> block = lop.lower(block, opT);\n-                            default -> block.op(op);\n-                        }\n-                        return block;\n-                    }));\n+                    curr.body(bodies().get(i), blocks.get(i).parameters(), andThenLowering(opT,\n+                            (block, op) -> switch (op) {\n+                                case CoreOp.YieldOp _ when this instanceof SwitchStatementOp -> {\n+                                    block.op(branch(exit.successor()));\n+                                    yield block;\n+                                }\n+                                case CoreOp.YieldOp yop when this instanceof SwitchExpressionOp -> {\n+                                    block.op(branch(exit.successor(block.context().getValue(yop.yieldValue()))));\n+                                    yield block;\n+                                }\n+                                default -> null;\n+                            }));\n@@ -3204,2 +3182,2 @@\n-            b.body(init, List.of(), opT.andThen((block, op) -> {\n-                if (op instanceof CoreOp.TupleOp) {\n+            b.body(init, List.of(), andThenLowering(opT, (block, op) -> switch (op) {\n+                case TupleOp _ -> {\n@@ -3212,1 +3190,3 @@\n-                } else if (op instanceof CoreOp.YieldOp yop) {\n+                    yield  block;\n+                }\n+                case CoreOp.YieldOp yop -> {\n@@ -3215,1 +3195,1 @@\n-                        return block;\n+                        yield block;\n@@ -3217,1 +3197,1 @@\n-                        if (or.op() instanceof CoreOp.TupleOp top) {\n+                        if (or.op() instanceof TupleOp top) {\n@@ -3223,1 +3203,1 @@\n-                        return block;\n+                        yield block;\n@@ -3227,3 +3207,0 @@\n-                } else {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block.op(op);\n@@ -3231,1 +3208,1 @@\n-                return block;\n+                default -> null;\n@@ -3234,1 +3211,1 @@\n-            header.body(cond, initValues, opT.andThen((block, op) -> {\n+            header.body(cond, initValues, andThenLowering(opT, (block, op) -> {\n@@ -3238,3 +3215,1 @@\n-                } else if (op instanceof Lowerable lop) {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block = lop.lower(block, opT);\n+                    return block;\n@@ -3242,1 +3217,1 @@\n-                    block.op(op);\n+                    return null;\n@@ -3244,1 +3219,0 @@\n-                return block;\n@@ -3249,9 +3223,1 @@\n-            body.body(this.body, initValues, opT.andThen((block, op) -> {\n-                \/\/ @@@ Composition of lowerable ops\n-                if (op instanceof Lowerable lop) {\n-                    block = lop.lower(block, opT);\n-                } else {\n-                    block.op(op);\n-                }\n-                return block;\n-            }));\n+            body.body(this.body, initValues, andThenLowering(opT, (_, _) -> null));\n@@ -3259,1 +3225,1 @@\n-            update.body(this.update, initValues, opT.andThen((block, op) -> {\n+            update.body(this.update, initValues, andThenLowering(opT, (block, op) -> {\n@@ -3262,0 +3228,1 @@\n+                    return block;\n@@ -3263,2 +3230,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block.op(op);\n+                    return null;\n@@ -3266,1 +3232,0 @@\n-                return block;\n@@ -3444,1 +3409,1 @@\n-            b.body(expression, List.of(), opT.andThen((block, op) -> {\n+            b.body(expression, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -3448,0 +3413,1 @@\n+                    return block;\n@@ -3449,2 +3415,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block.op(op);\n+                    return null;\n@@ -3452,1 +3417,0 @@\n-                return block;\n@@ -3467,2 +3431,1 @@\n-                \/\/ @@@ Init body has one yield operation yielding a single variable\n-                init.body(this.init, List.of(e), (block, op) -> {\n+                init.body(this.init, List.of(e), andThenLowering(opT, (block, op) -> {\n@@ -3472,0 +3435,1 @@\n+                        return block;\n@@ -3473,2 +3437,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        block.op(op);\n+                        return null;\n@@ -3476,2 +3439,1 @@\n-                    return block;\n-                });\n+                }));\n@@ -3482,9 +3444,1 @@\n-                body.body(this.body, initValues, opT.andThen((block, op) -> {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, opT);\n-                    } else {\n-                        block.op(op);\n-                    }\n-                    return block;\n-                }));\n+                body.body(this.body, initValues, andThenLowering(opT, (_, _) -> null));\n@@ -3504,1 +3458,1 @@\n-                init.body(this.init, List.of(e), opT.andThen((block, op) -> {\n+                init.body(this.init, List.of(e), andThenLowering(opT, (block, op) -> {\n@@ -3508,0 +3462,1 @@\n+                        return block;\n@@ -3509,2 +3464,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        block.op(op);\n+                        return null;\n@@ -3512,1 +3466,0 @@\n-                    return block;\n@@ -3517,9 +3470,1 @@\n-                body.body(this.body, initValues, opT.andThen((block, op) -> {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, opT);\n-                    } else {\n-                        block.op(op);\n-                    }\n-                    return block;\n-                }));\n+                body.body(this.body, initValues, andThenLowering(opT, (_, _) -> null));\n@@ -3645,1 +3590,1 @@\n-            header.body(predicateBody(), List.of(), opT.andThen((block, op) -> {\n+            header.body(predicateBody(), List.of(), andThenLowering(opT, (block, op) -> {\n@@ -3649,3 +3594,1 @@\n-                } else if (op instanceof Lowerable lop) {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block = lop.lower(block, opT);\n+                    return block;\n@@ -3653,1 +3596,1 @@\n-                    block.op(op);\n+                    return null;\n@@ -3655,1 +3598,0 @@\n-                return block;\n@@ -3660,9 +3602,1 @@\n-            body.body(loopBody(), List.of(), opT.andThen((block, op) -> {\n-                \/\/ @@@ Composition of lowerable ops\n-                if (op instanceof Lowerable lop) {\n-                    block = lop.lower(block, opT);\n-                } else {\n-                    block.op(op);\n-                }\n-                return block;\n-            }));\n+            body.body(loopBody(), List.of(), andThenLowering(opT, (_, _) -> null));\n@@ -3789,9 +3723,1 @@\n-            body.body(loopBody(), List.of(), opT.andThen((block, op) -> {\n-                \/\/ @@@ Composition of lowerable ops\n-                if (op instanceof Lowerable lop) {\n-                    block = lop.lower(block, opT);\n-                } else {\n-                    block.op(op);\n-                }\n-                return block;\n-            }));\n+            body.body(loopBody(), List.of(), andThenLowering(opT, (_, _) -> null));\n@@ -3799,1 +3725,1 @@\n-            header.body(predicateBody(), List.of(), opT.andThen((block, op) -> {\n+            header.body(predicateBody(), List.of(), andThenLowering(opT, (block, op) -> {\n@@ -3803,3 +3729,1 @@\n-                } else if (op instanceof Lowerable lop) {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block = lop.lower(block, opT);\n+                    return block;\n@@ -3807,1 +3731,1 @@\n-                    block.op(op);\n+                    return null;\n@@ -3809,1 +3733,0 @@\n-                return block;\n@@ -3868,1 +3791,1 @@\n-                OpTransformer opt;\n+                BiFunction<Block.Builder, Op, Block.Builder> opt;\n@@ -3870,1 +3793,1 @@\n-                    opt = (block, op) -> {\n+                    opt = lowering(opT, (block, op) -> {\n@@ -3874,3 +3797,1 @@\n-                        } else if (op instanceof Lowerable lop) {\n-                            \/\/ @@@ Composition of lowerable ops\n-                            block = lop.lower(block, opT);\n+                            return block;\n@@ -3878,2 +3799,1 @@\n-                            \/\/ Copy\n-                            block.op(op);\n+                            return null;\n@@ -3881,2 +3801,1 @@\n-                        return block;\n-                    };\n+                    });\n@@ -3885,1 +3804,1 @@\n-                    opt = (block, op) -> {\n+                    opt = lowering(opT, (block, op) -> {\n@@ -3893,3 +3812,1 @@\n-                        } else if (op instanceof Lowerable lop) {\n-                            \/\/ @@@ Composition of lowerable ops\n-                            block = lop.lower(block, opT);\n+                            return block;\n@@ -3897,2 +3814,1 @@\n-                            \/\/ Copy\n-                            block.op(op);\n+                            return null;\n@@ -3900,2 +3816,1 @@\n-                        return block;\n-                    };\n+                    });\n@@ -3906,1 +3821,1 @@\n-                    startBlock.body(fromPred, List.of(), opt);\n+                    startBlock.body(fromPred, List.of(), opt::apply);\n@@ -3909,1 +3824,1 @@\n-                    pred.body(fromPred, pred.parameters(), opT.andThen(opt));\n+                    pred.body(fromPred, pred.parameters(), andThen(opT, opt));\n@@ -4097,1 +4012,1 @@\n-            b.body(bodies.get(0), List.of(), opT.andThen((block, op) -> {\n+            b.body(bodies.get(0), List.of(), andThenLowering(opT, (block, op) -> {\n@@ -4101,3 +4016,1 @@\n-                } else if (op instanceof Lowerable lop) {\n-                    \/\/ @@@ Composition of lowerable ops\n-                    block = lop.lower(block, opT);\n+                    return block;\n@@ -4105,1 +4018,1 @@\n-                    block.op(op);\n+                    return null;\n@@ -4107,1 +4020,0 @@\n-                return block;\n@@ -4111,1 +4023,1 @@\n-                builders.get(i).body(bodies.get(i + 1), List.of(), opT.andThen((block, op) -> {\n+                builders.get(i).body(bodies.get(i + 1), List.of(), andThenLowering(opT, (block, op) -> {\n@@ -4114,3 +4026,1 @@\n-                    } else if (op instanceof Lowerable lop) {\n-                        \/\/ @@@ Composition of lowerable ops\n-                        block = lop.lower(block, opT);\n+                        return block;\n@@ -4118,1 +4028,1 @@\n-                        block.op(op);\n+                        return null;\n@@ -4120,1 +4030,0 @@\n-                    return block;\n@@ -4344,1 +4253,1 @@\n-                b.body(body, List.of(), (block, op) -> {\n+                b.body(body, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -4347,0 +4256,1 @@\n+                        return block;\n@@ -4348,6 +4258,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        if (op instanceof Lowerable lop) {\n-                            block = lop.lower(block, opT);\n-                        } else {\n-                            block.op(op);\n-                        }\n+                        return null;\n@@ -4355,2 +4260,1 @@\n-                    return block;\n-                });\n+                }));\n@@ -4384,1 +4288,1 @@\n-                tryExitTransformer = opT.compose((block, op) -> {\n+                tryExitTransformer = compose(opT, (block, op) -> {\n@@ -4393,1 +4297,1 @@\n-                tryExitTransformer = opT.compose((block, op) -> {\n+                tryExitTransformer = compose(opT, (block, op) -> {\n@@ -4406,1 +4310,1 @@\n-            tryRegionEnter.body(body, List.of(), tryExitTransformer.andThen((block, op) -> {\n+            tryRegionEnter.body(body, List.of(), andThenLowering(tryExitTransformer, (block, op) -> {\n@@ -4410,0 +4314,1 @@\n+                    return block;\n@@ -4411,6 +4316,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op instanceof Lowerable lop) {\n-                        block = lop.lower(block, tryExitTransformer);\n-                    } else {\n-                        block.op(op);\n-                    }\n+                    return null;\n@@ -4418,1 +4318,0 @@\n-                return block;\n@@ -4448,1 +4347,1 @@\n-                    OpTransformer catchExitTransformer = opT.compose((block, op) -> {\n+                    OpTransformer catchExitTransformer = compose(opT, (block, op) -> {\n@@ -4459,1 +4358,1 @@\n-                    catchRegionEnter.body(catcherBody, List.of(t), catchExitTransformer.andThen((block, op) -> {\n+                    catchRegionEnter.body(catcherBody, List.of(t), andThenLowering(catchExitTransformer, (block, op) -> {\n@@ -4463,0 +4362,1 @@\n+                            return block;\n@@ -4464,6 +4364,1 @@\n-                            \/\/ @@@ Composition of lowerable ops\n-                            if (op instanceof Lowerable lop) {\n-                                block = lop.lower(block, catchExitTransformer);\n-                            } else {\n-                                block.op(op);\n-                            }\n+                            return null;\n@@ -4471,1 +4366,0 @@\n-                        return block;\n@@ -4481,1 +4375,1 @@\n-                    catcher.body(catcherBody, List.of(t), opT.andThen((block, op) -> {\n+                    catcher.body(catcherBody, List.of(t), andThenLowering(opT, (block, op) -> {\n@@ -4484,0 +4378,1 @@\n+                            return block;\n@@ -4485,6 +4380,1 @@\n-                            \/\/ @@@ Composition of lowerable ops\n-                            if (op instanceof Lowerable lop) {\n-                                block = lop.lower(block, opT);\n-                            } else {\n-                                block.op(op);\n-                            }\n+                            return null;\n@@ -4492,1 +4382,0 @@\n-                        return block;\n@@ -4499,1 +4388,1 @@\n-                finallyEnter.body(finalizer, List.of(), opT.andThen((block, op) -> {\n+                finallyEnter.body(finalizer, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -4502,0 +4391,1 @@\n+                        return block;\n@@ -4503,6 +4393,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        if (op instanceof Lowerable lop) {\n-                            block = lop.lower(block, opT);\n-                        } else {\n-                            block.op(op);\n-                        }\n+                        return null;\n@@ -4510,1 +4395,0 @@\n-                    return block;\n@@ -4519,1 +4403,1 @@\n-                catcherFinally.body(finalizer, List.of(), opT.andThen((block, op) -> {\n+                catcherFinally.body(finalizer, List.of(), andThenLowering(opT, (block, op) -> {\n@@ -4522,0 +4406,1 @@\n+                        return block;\n@@ -4523,6 +4408,1 @@\n-                        \/\/ @@@ Composition of lowerable ops\n-                        if (op instanceof Lowerable lop) {\n-                            block = lop.lower(block, opT);\n-                        } else {\n-                            block.op(op);\n-                        }\n+                        return null;\n@@ -4530,1 +4410,0 @@\n-                    return block;\n@@ -4548,1 +4427,1 @@\n-            finallyEnter.body(finalizer, List.of(), opT.andThen((block2, op2) -> {\n+            finallyEnter.body(finalizer, List.of(), andThenLowering(opT, (block2, op2) -> {\n@@ -4551,0 +4430,1 @@\n+                    return block2;\n@@ -4552,6 +4432,1 @@\n-                    \/\/ @@@ Composition of lowerable ops\n-                    if (op2 instanceof Lowerable lop2) {\n-                        block2 = lop2.lower(block2, opT);\n-                    } else {\n-                        block2.op(op2);\n-                    }\n+                    return null;\n@@ -4559,1 +4434,0 @@\n-                return block2;\n@@ -4886,1 +4760,1 @@\n-                endMatchBlock.body(match, patternValues, opT.andThen((block, op) -> {\n+                endMatchBlock.body(match, patternValues, andThenLowering(opT, (block, op) -> {\n@@ -4890,3 +4764,1 @@\n-                    } else if (op instanceof Lowerable lop) {\n-                        \/\/ @@@ Composition of lowerable ops\n-                        block = lop.lower(block, opT);\n+                        return block;\n@@ -4894,1 +4766,1 @@\n-                        block.op(op);\n+                        return null;\n@@ -4896,1 +4768,0 @@\n-                    return block;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/java\/JavaOp.java","additions":130,"deletions":259,"binary":false,"changes":389,"status":"modified"}]}