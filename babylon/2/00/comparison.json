{"files":[{"patch":"@@ -348,1 +348,2 @@\n-            throw erase(t);\n+            eraseAndThrow(t);\n+            throw new InternalError(\"should not reach here\");\n@@ -363,2 +364,2 @@\n-    public static <E extends Throwable> E erase(Throwable e) throws E {\n-        return (E) e;\n+    public static <E extends Throwable> void eraseAndThrow(Throwable e) throws E {\n+        throw (E) e;\n@@ -643,1 +644,2 @@\n-            throw erase(e);\n+            eraseAndThrow(e);\n+            throw new InternalError(\"should not reach here\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.interpreter.Interpreter;\n+import java.lang.runtime.CodeReflection;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @run testng TestThrowing\n+ *\/\n+\n+public class TestThrowing {\n+\n+    @Test(dataProvider = \"methods-exceptions\")\n+    public void testThrowsCorrectException(String methodName, Class<?> expectedExceptionType) throws NoSuchMethodException {\n+        Method method = TestThrowing.class.getDeclaredMethod(methodName);\n+        try {\n+            Interpreter.invoke(method.getCodeModel().orElseThrow(), List.of());\n+            Assert.fail(\"invoke should throw\");\n+        } catch (Throwable throwable) {\n+            Assert.assertEquals(throwable.getClass(), expectedExceptionType);\n+        }\n+    }\n+\n+    @DataProvider(name = \"methods-exceptions\")\n+    static Object[][] testData() throws NoSuchMethodException {\n+        return new Object[][]{\n+                {\"throwsError\", Error.class},\n+                {\"throwsRuntimeException\", RuntimeException.class},\n+                {\"throwsCheckedException\", IOException.class},\n+        };\n+    }\n+\n+    @CodeReflection\n+    static void throwsError() {\n+        throw new Error();\n+    }\n+\n+    @CodeReflection\n+    static void throwsRuntimeException() {\n+        throw new RuntimeException();\n+    }\n+\n+    @CodeReflection\n+    static void throwsCheckedException() throws IOException {\n+        throw new IOException();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestThrowing.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}