{"files":[{"patch":"@@ -3368,1 +3368,1 @@\n-                restypes.add(that.getBody().type);\n+                restypes.add(checkQuotedReturnExpr((JCExpression) that.getBody()));\n@@ -3382,1 +3382,1 @@\n-                        restypes.add(tree.expr == null ? syms.voidType : tree.expr.type);\n+                        restypes.add(tree.expr == null ? syms.voidType : checkQuotedReturnExpr(tree.expr));\n@@ -3392,0 +3392,2 @@\n+            boolean hasErroneousType = restypes.toList()\n+                    .stream().anyMatch(Type::isErroneous);\n@@ -3398,8 +3400,1 @@\n-                boolean hasNonVoidReturn = restypes.toList()\n-                        .stream().anyMatch(t -> t != syms.voidType);\n-                boolean hasVoidReturn = restypes.toList()\n-                        .stream().anyMatch(t -> t == syms.voidType);\n-\n-                if (hasVoidReturn && hasNonVoidReturn) {\n-                    \/\/ void vs. non-void mismatch\n-                    log.error(that.body, Errors.CantInferQuotedLambdaReturnType(restypes.toList()));\n+                if (hasErroneousType) {\n@@ -3407,2 +3402,0 @@\n-                } else if (hasVoidReturn) {\n-                    restype = syms.voidType;\n@@ -3410,1 +3403,14 @@\n-                    restype = condType(resPositions.toList(), restypes.toList());\n+                    boolean hasNonVoidReturn = restypes.toList()\n+                            .stream().anyMatch(t -> t != syms.voidType);\n+                    boolean hasVoidReturn = restypes.toList()\n+                            .stream().anyMatch(t -> t == syms.voidType);\n+\n+                    if (hasVoidReturn && hasNonVoidReturn) {\n+                        \/\/ void vs. non-void mismatch\n+                        log.error(that.body, Errors.CantInferQuotedLambdaReturnType(restypes.toList()));\n+                        restype = syms.errorType;\n+                    } else if (hasVoidReturn) {\n+                        restype = syms.voidType;\n+                    } else {\n+                        restype = condType(resPositions.toList(), restypes.toList());\n+                    }\n@@ -3417,1 +3423,1 @@\n-            if (restype.hasTag(ERROR)) {\n+            if (!hasErroneousType && restype.hasTag(ERROR)) {\n@@ -3433,0 +3439,8 @@\n+        Type checkQuotedReturnExpr(JCExpression retExpr) {\n+            if (retExpr.type.hasTag(BOT)) {\n+                log.error(retExpr, Errors.BadQuotedLambdaNullReturn);\n+            }\n+            return retExpr.type;\n+        }\n+\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":28,"deletions":14,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1406,0 +1406,3 @@\n+compiler.err.bad.quoted.lambda.null.return=\\\n+    invalid ''null'' return expression in quoted lambda\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -222,0 +222,1 @@\n+compiler.err.bad.quoted.lambda.null.return                    # code reflection\n","filename":"test\/langtools\/tools\/javac\/diags\/examples.not-yet.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.util.List;\n+\n@@ -189,0 +191,33 @@\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"upwardNonDenotableReturn\" (%0 : java.type:\"QuotedTest\")java.type:\"void\" -> {\n+                %1 : java.type:\"jdk.incubator.code.Quoted\" = quoted ()java.type:\"void\" -> {\n+                    %2 : func<java.type:\"java.util.List<? extends java.io.Serializable>\", java.type:\"boolean\", java.type:\"java.util.List<java.lang.String>\", java.type:\"java.util.List<java.lang.Integer>\"> = closure (%3 : java.type:\"boolean\", %4 : java.type:\"java.util.List<java.lang.String>\", %5 : java.type:\"java.util.List<java.lang.Integer>\")java.type:\"java.util.List<? extends java.io.Serializable>\" -> {\n+                        %6 : Var<java.type:\"boolean\"> = var %3 @\"cond\";\n+                        %7 : Var<java.type:\"java.util.List<java.lang.String>\"> = var %4 @\"ls\";\n+                        %8 : Var<java.type:\"java.util.List<java.lang.Integer>\"> = var %5 @\"li\";\n+                        %9 : java.type:\"java.util.List<? extends java.io.Serializable>\" = java.cexpression\n+                            ()java.type:\"boolean\" -> {\n+                                %10 : java.type:\"boolean\" = var.load %6;\n+                                yield %10;\n+                            }\n+                            ()java.type:\"java.util.List<? extends java.io.Serializable>\" -> {\n+                                %11 : java.type:\"java.util.List<java.lang.String>\" = var.load %7;\n+                                yield %11;\n+                            }\n+                            ()java.type:\"java.util.List<? extends java.io.Serializable>\" -> {\n+                                %12 : java.type:\"java.util.List<java.lang.Integer>\" = var.load %8;\n+                                yield %12;\n+                            };\n+                        return %9;\n+                    };\n+                    yield %2;\n+                };\n+                %13 : Var<java.type:\"jdk.incubator.code.Quoted\"> = var %1 @\"op\";\n+                return;\n+            };\n+            \"\"\")\n+    void upwardNonDenotableReturn() {\n+        Quoted op = (boolean cond, List<String> ls, List<Integer> li) -> cond ? ls : li;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/QuotedTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-            Quoted q = () -> null;\n+            Quoted q = () -> { };\n","filename":"test\/langtools\/tools\/javac\/reflect\/TestNoCodeReflectionInInnerClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,24 @@\n-}\n\\ No newline at end of file\n+\n+    void testBadNullReturn(boolean cond) {\n+        Quoted fi_RetNullS = (int i) -> { return null; }; \/\/ error - null return - statement\n+        Quoted fi_RetNullE = (int i) -> null; \/\/ error - null return - expression\n+        Quoted fi_RetNullCondS = (int i) -> { return cond ? null : null; }; \/\/ error - null conditional return - statement\n+        Quoted fi_RetNullCondE = (int i) -> cond ? null : null; \/\/ error - null conditional return - expression\n+    }\n+\n+    void testBadLambdaReturn(boolean cond) {\n+        Quoted fi_RetLambdaS = (int i) -> { return () -> {}; }; \/\/ error - lambda return - statement\n+        Quoted fi_RetLambdaE = (int i) -> () -> {};; \/\/ error - lambda return - expression\n+        Quoted fi_RetLambdaCondS = (int i) -> { return cond ? () -> {} : () -> {}; }; \/\/ error - lambda conditional return - statement\n+        Quoted fi_RetLambdaCondE = (int i) -> cond ? () -> {} : () -> {}; \/\/ error - lambda conditional return - expression\n+    }\n+\n+    void testBadMrefReturn(boolean cond) {\n+        Quoted fi_RetMrefS = (int i) -> { return this::mr; }; \/\/ error - mref return - statement\n+        Quoted fi_RetMrefE = (int i) -> this::mr;; \/\/ error - mref return - expression\n+        Quoted fi_RetMrefCondS = (int i) -> { return cond ? this::mr : this::mr; }; \/\/ error - mref conditional return - statement\n+        Quoted fi_RetMrefCondE = (int i) -> cond ? this::mr : this::mr; \/\/ error - mref conditional return - expression\n+    }\n+\n+    void mr() { }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestAssignment.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -15,1 +15,17 @@\n-14 errors\n+TestAssignment.java:67:50: compiler.err.bad.quoted.lambda.null.return\n+TestAssignment.java:68:41: compiler.err.bad.quoted.lambda.null.return\n+TestAssignment.java:69:59: compiler.err.bad.quoted.lambda.null.return\n+TestAssignment.java:70:50: compiler.err.bad.quoted.lambda.null.return\n+TestAssignment.java:74:52: compiler.err.unexpected.lambda\n+TestAssignment.java:75:43: compiler.err.unexpected.lambda\n+TestAssignment.java:76:63: compiler.err.unexpected.lambda\n+TestAssignment.java:76:74: compiler.err.unexpected.lambda\n+TestAssignment.java:77:54: compiler.err.unexpected.lambda\n+TestAssignment.java:77:65: compiler.err.unexpected.lambda\n+TestAssignment.java:81:50: compiler.err.unexpected.mref\n+TestAssignment.java:82:41: compiler.err.unexpected.mref\n+TestAssignment.java:83:61: compiler.err.unexpected.mref\n+TestAssignment.java:83:72: compiler.err.unexpected.mref\n+TestAssignment.java:84:52: compiler.err.unexpected.mref\n+TestAssignment.java:84:63: compiler.err.unexpected.mref\n+30 errors\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestAssignment.out","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,0 +66,23 @@\n+    void testBadNullReturn(boolean cond) {\n+        apply(Quoted.class, (int i) -> { return null; }); \/\/ error - null return - statement\n+        apply(Quoted.class, (int i) -> null); \/\/ error - null return - expression\n+        apply(Quoted.class, (int i) -> { return cond ? null : null; }); \/\/ error - null conditional return - statement\n+        apply(Quoted.class, (int i) -> cond ? null : null); \/\/ error - null conditional return - expression\n+    }\n+\n+    void testBadLambdaReturn(boolean cond) {\n+        apply(Quoted.class, (int i) -> { return () -> {}; }); \/\/ error - lambda return - statement\n+        apply(Quoted.class, (int i) -> () -> {});; \/\/ error - lambda return - expression\n+        apply(Quoted.class, (int i) -> { return cond ? () -> {} : () -> {}; }); \/\/ error - lambda conditional return - statement\n+        apply(Quoted.class, (int i) -> cond ? () -> {} : () -> {}); \/\/ error - lambda conditional return - expression\n+    }\n+\n+    void testBadMrefReturn(boolean cond) {\n+        apply(Quoted.class, (int i) -> { return this::mr; }); \/\/ error - mref return - statement\n+        apply(Quoted.class, (int i) -> this::mr); \/\/ error - mref return - expression\n+        apply(Quoted.class, (int i) -> { return cond ? this::mr : this::mr; }); \/\/ error - mref conditional return - statement\n+        apply(Quoted.class, (int i) -> cond ? this::mr : this::mr); \/\/ error - mref conditional return - expression\n+    }\n+\n+    void mr() { }\n+\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestGenericMethodCall.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -15,1 +15,17 @@\n-14 errors\n+TestGenericMethodCall.java:67:49: compiler.err.bad.quoted.lambda.null.return\n+TestGenericMethodCall.java:68:40: compiler.err.bad.quoted.lambda.null.return\n+TestGenericMethodCall.java:69:54: compiler.err.bad.quoted.lambda.null.return\n+TestGenericMethodCall.java:70:45: compiler.err.bad.quoted.lambda.null.return\n+TestGenericMethodCall.java:74:49: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:75:40: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:76:56: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:76:67: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:77:47: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:77:58: compiler.err.unexpected.lambda\n+TestGenericMethodCall.java:81:49: compiler.err.unexpected.mref\n+TestGenericMethodCall.java:82:40: compiler.err.unexpected.mref\n+TestGenericMethodCall.java:83:56: compiler.err.unexpected.mref\n+TestGenericMethodCall.java:83:67: compiler.err.unexpected.mref\n+TestGenericMethodCall.java:84:47: compiler.err.unexpected.mref\n+TestGenericMethodCall.java:84:58: compiler.err.unexpected.mref\n+30 errors\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestGenericMethodCall.out","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,0 +66,23 @@\n+    void testBadNullReturn(boolean cond) {\n+        apply((int i) -> { return null; }); \/\/ error - null return - statement\n+        apply((int i) -> null); \/\/ error - null return - expression\n+        apply((int i) -> { return cond ? null : null; }); \/\/ error - null conditional return - statement\n+        apply((int i) -> cond ? null : null); \/\/ error - null conditional return - expression\n+    }\n+\n+    void testBadLambdaReturn(boolean cond) {\n+        apply((int i) -> { return () -> {}; }); \/\/ error - lambda return - statement\n+        apply((int i) -> () -> {});; \/\/ error - lambda return - expression\n+        apply((int i) -> { return cond ? () -> {} : () -> {}; }); \/\/ error - lambda conditional return - statement\n+        apply((int i) -> cond ? () -> {} : () -> {}); \/\/ error - lambda conditional return - expression\n+    }\n+\n+    void testBadMrefReturn(boolean cond) {\n+        apply((int i) -> { return this::mr; }); \/\/ error - mref return - statement\n+        apply((int i) -> this::mr); \/\/ error - mref return - expression\n+        apply((int i) -> { return cond ? this::mr : this::mr; }); \/\/ error - mref conditional return - statement\n+        apply((int i) -> cond ? this::mr : this::mr); \/\/ error - mref conditional return - expression\n+    }\n+\n+    void mr() { }\n+\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestMethodCall.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -15,1 +15,17 @@\n-14 errors\n+TestMethodCall.java:67:35: compiler.err.bad.quoted.lambda.null.return\n+TestMethodCall.java:68:26: compiler.err.bad.quoted.lambda.null.return\n+TestMethodCall.java:69:40: compiler.err.bad.quoted.lambda.null.return\n+TestMethodCall.java:70:31: compiler.err.bad.quoted.lambda.null.return\n+TestMethodCall.java:74:35: compiler.err.unexpected.lambda\n+TestMethodCall.java:75:26: compiler.err.unexpected.lambda\n+TestMethodCall.java:76:42: compiler.err.unexpected.lambda\n+TestMethodCall.java:76:53: compiler.err.unexpected.lambda\n+TestMethodCall.java:77:33: compiler.err.unexpected.lambda\n+TestMethodCall.java:77:44: compiler.err.unexpected.lambda\n+TestMethodCall.java:81:35: compiler.err.unexpected.mref\n+TestMethodCall.java:82:26: compiler.err.unexpected.mref\n+TestMethodCall.java:83:42: compiler.err.unexpected.mref\n+TestMethodCall.java:83:53: compiler.err.unexpected.mref\n+TestMethodCall.java:84:33: compiler.err.unexpected.mref\n+TestMethodCall.java:84:44: compiler.err.unexpected.mref\n+30 errors\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestMethodCall.out","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}