{"files":[{"patch":"@@ -883,0 +883,1 @@\n+                            Method intfMethod = funcIntfMethod(intfClass, mtd);\n@@ -890,1 +891,1 @@\n-                                        funcIntfMethodName(intfClass),\n+                                        intfMethod.getName(),\n@@ -893,1 +894,1 @@\n-                                        mtd,\n+                                        toMTD(intfMethod),\n@@ -908,1 +909,1 @@\n-                                        funcIntfMethodName(intfClass),\n+                                        intfMethod.getName(),\n@@ -910,1 +911,1 @@\n-                                        mtd,\n+                                        toMTD(intfMethod),\n@@ -1092,2 +1093,2 @@\n-    private String funcIntfMethodName(Class<?> intfc) {\n-        String uniqueName = null;\n+    private Method funcIntfMethod(Class<?> intfc, MethodTypeDesc mtd) {\n+        Method intfM = null;\n@@ -1108,3 +1109,3 @@\n-                if (uniqueName == null) {\n-                    uniqueName = methodName;\n-                } else if (!uniqueName.equals(methodName)) {\n+                if (intfM == null && isAdaptable(m, mtd)) {\n+                    intfM = m;\n+                } else if (!intfM.getName().equals(methodName)) {\n@@ -1116,2 +1117,2 @@\n-        if (uniqueName == null) {\n-            throw new IllegalArgumentException(\"No method in: \" + intfc.getName());\n+        if (intfM == null) {\n+            throw new IllegalArgumentException(\"No method in: \" + intfc.getName() + \" matching: \" + mtd);\n@@ -1119,1 +1120,12 @@\n-        return uniqueName;\n+        return intfM;\n+    }\n+\n+    private static boolean isAdaptable(Method m, MethodTypeDesc mdesc) {\n+        \/\/ @@@ filter overrides\n+        return true;\n+    }\n+\n+    private static MethodTypeDesc toMTD(Method m) {\n+        return MethodTypeDesc.of(\n+                m.getReturnType().describeConstable().get(),\n+                Stream.of(m.getParameterTypes()).map(t -> t.describeConstable().get()).toList());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -556,0 +556,5 @@\n+    @CodeReflection\n+    static String functionLambda(String s) {\n+        return ((Function<String, String>)e -> e.substring(1)).apply(s);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}