{"files":[{"patch":"@@ -641,2 +641,2 @@\n-            Collection<TypeElement> boxTypes = JavaType.primitiveToWrapper.values();\n-            return boxTypes.contains(mr.refType()) && (UNBOX_NAMES.contains(mr.name()) || mr.name().equals(\"valueOf\"));\n+            return mr.refType() instanceof ClassType ct && ct.unbox().isPresent() &&\n+                    (UNBOX_NAMES.contains(mr.name()) || mr.name().equals(\"valueOf\"));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.reflect.code.type.PrimitiveType;\n@@ -2859,2 +2860,2 @@\n-                if (isPrimitive(ele.type())) {\n-                    TypeElement wt = getWrapperType(ele.type());\n+                if (ele.type() instanceof PrimitiveType pt && pt.box().isPresent()) {\n+                    ClassType wt = pt.box().get();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOps.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Optional;\n@@ -87,0 +88,19 @@\n+    \/**\n+     * {@return the unboxed primitive type associated with this class type (if any)}\n+     *\/\n+    public Optional<PrimitiveType> unbox() {\n+        class LazyHolder {\n+            static final Map<ClassType, PrimitiveType> wrapperToPrimitive = Map.of(\n+                    J_L_BYTE, BYTE,\n+                    J_L_SHORT, SHORT,\n+                    J_L_INTEGER, INT,\n+                    J_L_LONG, LONG,\n+                    J_L_FLOAT, FLOAT,\n+                    J_L_DOUBLE, DOUBLE,\n+                    J_L_CHARACTER, CHAR,\n+                    J_L_BOOLEAN, BOOLEAN\n+            );\n+        }\n+        return Optional.ofNullable(LazyHolder.wrapperToPrimitive.get(this));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/ClassType.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Map;\n@@ -43,1 +42,1 @@\n-    JavaType VOID = new PrimitiveType(\"void\");\n+    PrimitiveType VOID = new PrimitiveType(\"void\");\n@@ -45,1 +44,1 @@\n-    JavaType BOOLEAN = new PrimitiveType(\"boolean\");\n+    PrimitiveType BOOLEAN = new PrimitiveType(\"boolean\");\n@@ -47,1 +46,1 @@\n-    JavaType J_L_BOOLEAN = new ClassType(\"java.lang.Boolean\");\n+    ClassType J_L_BOOLEAN = new ClassType(\"java.lang.Boolean\");\n@@ -49,1 +48,1 @@\n-    JavaType BOOLEAN_ARRAY = new ArrayType(BOOLEAN);\n+    ArrayType BOOLEAN_ARRAY = new ArrayType(BOOLEAN);\n@@ -51,1 +50,1 @@\n-    JavaType BYTE = new PrimitiveType(\"byte\");\n+    PrimitiveType BYTE = new PrimitiveType(\"byte\");\n@@ -53,1 +52,1 @@\n-    JavaType J_L_BYTE = new ClassType(\"java.lang.Byte\");\n+    ClassType J_L_BYTE = new ClassType(\"java.lang.Byte\");\n@@ -55,1 +54,1 @@\n-    JavaType BYTE_ARRAY = new ArrayType(BYTE);\n+    ArrayType BYTE_ARRAY = new ArrayType(BYTE);\n@@ -57,1 +56,1 @@\n-    JavaType CHAR = new PrimitiveType(\"char\");\n+    PrimitiveType CHAR = new PrimitiveType(\"char\");\n@@ -59,1 +58,1 @@\n-    JavaType J_L_CHARACTER = new ClassType(\"java.lang.Character\");\n+    ClassType J_L_CHARACTER = new ClassType(\"java.lang.Character\");\n@@ -61,1 +60,1 @@\n-    JavaType CHAR_ARRAY = new ArrayType(CHAR);\n+    ArrayType CHAR_ARRAY = new ArrayType(CHAR);\n@@ -63,1 +62,1 @@\n-    JavaType SHORT = new PrimitiveType(\"short\");\n+    PrimitiveType SHORT = new PrimitiveType(\"short\");\n@@ -65,1 +64,1 @@\n-    JavaType J_L_SHORT = new ClassType(\"java.lang.Short\");\n+    ClassType J_L_SHORT = new ClassType(\"java.lang.Short\");\n@@ -67,1 +66,1 @@\n-    JavaType SHORT_ARRAY = new ArrayType(SHORT);\n+    ArrayType SHORT_ARRAY = new ArrayType(SHORT);\n@@ -69,1 +68,1 @@\n-    JavaType INT = new PrimitiveType(\"int\");\n+    PrimitiveType INT = new PrimitiveType(\"int\");\n@@ -71,1 +70,1 @@\n-    JavaType J_L_INTEGER = new ClassType(\"java.lang.Integer\");\n+    ClassType J_L_INTEGER = new ClassType(\"java.lang.Integer\");\n@@ -73,1 +72,1 @@\n-    JavaType INT_ARRAY = new ArrayType(INT);\n+    ArrayType INT_ARRAY = new ArrayType(INT);\n@@ -75,1 +74,1 @@\n-    JavaType LONG = new PrimitiveType(\"long\");\n+    PrimitiveType LONG = new PrimitiveType(\"long\");\n@@ -77,1 +76,1 @@\n-    JavaType J_L_LONG = new ClassType(\"java.lang.Long\");\n+    ClassType J_L_LONG = new ClassType(\"java.lang.Long\");\n@@ -79,1 +78,1 @@\n-    JavaType LONG_ARRAY = new ArrayType(LONG);\n+    ArrayType LONG_ARRAY = new ArrayType(LONG);\n@@ -81,1 +80,1 @@\n-    JavaType FLOAT = new PrimitiveType(\"float\");\n+    PrimitiveType FLOAT = new PrimitiveType(\"float\");\n@@ -83,1 +82,1 @@\n-    JavaType J_L_FLOAT = new ClassType(\"java.lang.Float\");\n+    ClassType J_L_FLOAT = new ClassType(\"java.lang.Float\");\n@@ -85,1 +84,1 @@\n-    JavaType FLOAT_ARRAY = new ArrayType(FLOAT);\n+    ArrayType FLOAT_ARRAY = new ArrayType(FLOAT);\n@@ -87,1 +86,1 @@\n-    JavaType DOUBLE = new PrimitiveType(\"double\");\n+    PrimitiveType DOUBLE = new PrimitiveType(\"double\");\n@@ -89,1 +88,1 @@\n-    JavaType J_L_DOUBLE = new ClassType(\"java.lang.Double\");\n+    ClassType J_L_DOUBLE = new ClassType(\"java.lang.Double\");\n@@ -91,1 +90,1 @@\n-    JavaType DOUBLE_ARRAY = new ArrayType(DOUBLE);\n+    ArrayType DOUBLE_ARRAY = new ArrayType(DOUBLE);\n@@ -93,1 +92,1 @@\n-    JavaType J_L_OBJECT = new ClassType(\"java.lang.Object\");\n+    ClassType J_L_OBJECT = new ClassType(\"java.lang.Object\");\n@@ -95,1 +94,1 @@\n-    JavaType J_L_OBJECT_ARRAY = new ArrayType(J_L_OBJECT);\n+    ArrayType J_L_OBJECT_ARRAY = new ArrayType(J_L_OBJECT);\n@@ -97,1 +96,1 @@\n-    JavaType J_L_CLASS = new ClassType(\"java.lang.Class\");\n+    ClassType J_L_CLASS = new ClassType(\"java.lang.Class\");\n@@ -99,1 +98,1 @@\n-    JavaType J_L_STRING = new ClassType(\"java.lang.String\");\n+    ClassType J_L_STRING = new ClassType(\"java.lang.String\");\n@@ -101,1 +100,1 @@\n-    JavaType J_L_STRING_TEMPLATE = new ClassType(\"java.lang.StringTemplate\");\n+    ClassType J_L_STRING_TEMPLATE = new ClassType(\"java.lang.StringTemplate\");\n@@ -103,1 +102,1 @@\n-    JavaType J_L_STRING_TEMPLATE_PROCESSOR = new ClassType(\"java.lang.StringTemplate$Processor\");\n+    ClassType J_L_STRING_TEMPLATE_PROCESSOR = new ClassType(\"java.lang.StringTemplate$Processor\");\n@@ -105,22 +104,1 @@\n-    JavaType J_U_LIST = new ClassType(\"java.util.List\");\n-\n-    \/\/\n-\n-    Map<TypeElement, TypeElement> primitiveToWrapper = Map.of(\n-            BYTE, J_L_BYTE,\n-            SHORT, J_L_SHORT,\n-            INT, J_L_INTEGER,\n-            LONG, J_L_LONG,\n-            FLOAT, J_L_FLOAT,\n-            DOUBLE, J_L_DOUBLE,\n-            CHAR, J_L_CHARACTER,\n-            BOOLEAN, J_L_BOOLEAN\n-    );\n-\n-    static boolean isPrimitive(TypeElement te) {\n-        return primitiveToWrapper.containsKey(te);\n-    }\n-\n-    static TypeElement getWrapperType(TypeElement te) {\n-        return primitiveToWrapper.get(te);\n-    };\n+    ClassType J_U_LIST = new ClassType(\"java.util.List\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/JavaType.java","additions":32,"deletions":54,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.TypeElement;\n@@ -30,0 +31,1 @@\n+import java.util.Optional;\n@@ -84,0 +86,19 @@\n+    \/**\n+     * {@return the boxed class type associated with this primitive type (if any)}\n+     *\/\n+    public Optional<ClassType> box() {\n+        class LazyHolder {\n+            static final Map<PrimitiveType, ClassType> primitiveToWrapper = Map.of(\n+                    BYTE, J_L_BYTE,\n+                    SHORT, J_L_SHORT,\n+                    INT, J_L_INTEGER,\n+                    LONG, J_L_LONG,\n+                    FLOAT, J_L_FLOAT,\n+                    DOUBLE, J_L_DOUBLE,\n+                    CHAR, J_L_CHARACTER,\n+                    BOOLEAN, J_L_BOOLEAN\n+            );\n+        }\n+        return Optional.ofNullable(LazyHolder.primitiveToWrapper.get(this));\n+    };\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/PrimitiveType.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}