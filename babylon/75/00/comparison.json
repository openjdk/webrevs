{"files":[{"patch":"@@ -58,0 +58,13 @@\n+    \/**\n+     * A transformer that lowers operations that are {@link Op.Lowerable lowerable},\n+     * and copies other operations.\n+     *\/\n+    OpTransformer LOWERING_TRANSFORMER = (block, op) -> {\n+        if (op instanceof Op.Lowerable lop) {\n+            return lop.lower(block);\n+        } else {\n+            block.op(op);\n+            return block;\n+        }\n+    };\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/OpTransformer.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -507,8 +507,1 @@\n-            b.op(this, (block, op) -> {\n-                if (op instanceof Op.Lowerable lop) {\n-                    return lop.lower(block);\n-                } else {\n-                    block.op(op);\n-                    return block;\n-                }\n-            });\n+            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n@@ -731,8 +724,1 @@\n-            b.op(this, (block, op) -> {\n-                if (op instanceof Op.Lowerable lop) {\n-                    return lop.lower(block);\n-                } else {\n-                    block.op(op);\n-                    return block;\n-                }\n-            });\n+            b.op(this, OpTransformer.LOWERING_TRANSFORMER);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -327,8 +328,1 @@\n-        CoreOp.FuncOp func = SSA.transform(op.transform((block, o) -> {\n-            if (o instanceof Op.Lowerable lowerable) {\n-                return lowerable.lower(block);\n-            } else {\n-                block.op(o);\n-                return block;\n-            }\n-        }));\n+        CoreOp.FuncOp func = SSA.transform(op.transform(OpTransformer.LOWERING_TRANSFORMER));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/CoreBinaryOpsTest.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -55,8 +56,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockIndexes.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -72,8 +73,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBlockOp.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -66,8 +67,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -117,8 +111,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -172,8 +159,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -229,8 +209,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestBreakContinue.java","additions":5,"deletions":32,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -52,8 +53,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalExpression.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -82,8 +83,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConditionalOp.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -183,8 +184,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestConstants.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -67,8 +68,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -97,8 +91,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestEnhancedForOp.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -57,8 +58,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -87,8 +81,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -119,8 +106,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestForOp.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -74,8 +75,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestIfOp.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import java.lang.reflect.code.Block;\n-import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.*;\n@@ -30,2 +29,0 @@\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.Quoted;\n@@ -109,8 +106,1 @@\n-        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n@@ -145,8 +135,1 @@\n-        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), (block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.ClosureOp lcop = cop.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n@@ -199,8 +182,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestInline.java","additions":4,"deletions":28,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.reflect.code.CopyContext;\n+import java.lang.reflect.code.*;\n@@ -30,2 +30,0 @@\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.Value;\n@@ -37,1 +35,0 @@\n-import java.lang.reflect.code.TypeElement;\n@@ -99,8 +96,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -150,8 +140,1 @@\n-        fc = fc.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        fc = fc.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -209,8 +192,1 @@\n-        fc = fc.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        fc = fc.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -243,8 +219,1 @@\n-        fc = fc.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        fc = fc.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestLocalTransformationsAdaption.java","additions":5,"deletions":36,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -76,8 +77,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestPatterns.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -5,4 +5,1 @@\n-import java.lang.reflect.code.Block;\n-import java.lang.reflect.code.CopyContext;\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.Value;\n+import java.lang.reflect.code.*;\n@@ -55,8 +52,1 @@\n-        return funcOp.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        return funcOp.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestRemoveFinalVars.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -135,8 +136,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSSA.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -67,8 +68,1 @@\n-        f = f.transform((b, o) -> {\n-            if (o instanceof Op.Lowerable l) {\n-                return l.lower(b);\n-            } else {\n-                b.op(o);\n-                return b;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTraverse.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -71,8 +72,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -135,8 +129,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -202,8 +189,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTry.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -69,8 +70,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -112,8 +106,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -155,8 +142,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -196,8 +176,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinally.java","additions":5,"deletions":32,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -89,8 +90,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -165,8 +159,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -223,8 +210,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -273,8 +253,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -319,8 +292,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinallyNested.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -57,8 +58,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -86,8 +80,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestWhileOp.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -94,8 +95,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/ad\/TestForwardAutoDiff.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -102,8 +103,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestArrayCreation.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.reflect.code.*;\n@@ -43,4 +44,0 @@\n-import java.lang.reflect.code.CopyContext;\n-import java.lang.reflect.code.Op;\n-import java.lang.reflect.code.Quotable;\n-import java.lang.reflect.code.TypeElement;\n@@ -563,8 +560,1 @@\n-        CoreOp.FuncOp lfunc = func.transform(CopyContext.create(), (block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lfunc = func.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -59,8 +60,1 @@\n-        O lf = (O) f.transform(CopyContext.create(), (block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        O lf = (O) f.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestQuoted.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -143,8 +144,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSlots.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -173,8 +174,1 @@\n-        return SSA.transform(func.transform((block, op) -> {\n-                    if (op instanceof Op.Lowerable lop) {\n-                        return lop.lower(block);\n-                    } else {\n-                        block.op(op);\n-                        return block;\n-                    }\n-                }));\n+        return SSA.transform(func.transform(OpTransformer.LOWERING_TRANSFORMER));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -261,8 +262,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTry.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -197,8 +198,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinally.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -220,8 +221,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinallyNested.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -63,8 +64,1 @@\n-        T lf = (T) f.transform(CopyContext.create(), (block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        T lf = (T) f.transform(CopyContext.create(), OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/expression\/TestExpressionElimination.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -164,8 +165,1 @@\n-            final var fz = f.transform((b, o) -> {\n-                if (o instanceof Op.Lowerable l) {\n-                    b = l.lower(b);\n-                } else {\n-                    b.op(o);\n-                }\n-                return b;\n-            });\n+            final var fz = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -186,8 +180,1 @@\n-            final var fz = f.transform((b, o) -> {\n-                if (o instanceof Op.Lowerable l) {\n-                    b = l.lower(b);\n-                } else {\n-                    b.op(o);\n-                }\n-                return b;\n-            });\n+            final var fz = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/interpreter\/TestAssert.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -98,8 +98,1 @@\n-        return f.transform((b, op) -> {\n-            if (op instanceof Op.Lowerable l) {\n-                return l.lower(b);\n-            } else {\n-                b.op(op);\n-                return b;\n-            }\n-        });\n+        return f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/location\/TestLocation.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -70,8 +71,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/CodeReflectionTester.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -54,8 +55,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -80,8 +74,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStream.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -53,8 +54,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n@@ -79,8 +73,1 @@\n-        CoreOp.FuncOp lf = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        CoreOp.FuncOp lf = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/stream\/TestStreamUsingQuotable.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -114,8 +115,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable l) {\n-                return l.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestCodeBuilder.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.lang.reflect.code.OpTransformer;\n@@ -69,8 +70,1 @@\n-        f = f.transform((block, op) -> {\n-            if (op instanceof Op.Lowerable lop) {\n-                return lop.lower(block);\n-            } else {\n-                block.op(op);\n-                return block;\n-            }\n-        });\n+        f = f.transform(OpTransformer.LOWERING_TRANSFORMER);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestNaming.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}