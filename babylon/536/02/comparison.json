{"files":[{"patch":"@@ -720,3 +720,2 @@\n-                return result != null ?\n-                        coerce(result, expression.type, targetType) :\n-                        null;\n+                return (result == null || targetType.hasTag(TypeTag.VOID) || targetType.hasTag(NONE)) ?\n+                        result : coerce(result, expression.type, targetType);\n@@ -739,4 +738,0 @@\n-            if (targetType.hasTag(TypeTag.VOID)) {\n-                \/\/ if target type is void, nothing to coerce\n-                return sourceValue;\n-            }\n@@ -746,2 +741,0 @@\n-            } else {\n-                return convert(sourceValue, targetType);\n@@ -749,0 +742,1 @@\n+            return convert(sourceValue, targetType);\n@@ -1781,1 +1775,1 @@\n-            Type yieldType = tree.type != null ? adaptBottom(tree.type) : null;\n+            Type yieldType = tree.type != null ? adaptBottom(tree.type) : Type.noType;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2011,0 +2011,28 @@\n+\n+    @IR(\"\"\"\n+            func @\"f\" (%0 : java.type:\"int\")java.type:\"int\" -> {\n+                  %1 : Var<java.type:\"int\"> = var %0 @\"i\";\n+                  %2 : java.type:\"int\" = var.load %1;\n+                  java.switch.statement %2\n+                      (%3 : java.type:\"int\")java.type:\"boolean\" -> {\n+                          %4 : java.type:\"int\" = constant @0;\n+                          %5 : java.type:\"boolean\" = eq %3 %4;\n+                          yield %5;\n+                      }\n+                      ()java.type:\"void\" -> {\n+                          %6 : java.type:\"int\" = constant @0;\n+                          return %6;\n+                      };\n+                  %7 : java.type:\"int\" = constant @0;\n+                  return %7;\n+              };\n+            \"\"\")\n+    @CodeReflection\n+    static int f(int i) {\n+        switch (i) {\n+            case 0 -> {\n+                return 0;\n+            }\n+        }\n+        return 0;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchStatementTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}