{"files":[{"patch":"@@ -29,1 +29,1 @@\n-void main(String[] args) throws IOException, InterruptedException {\n+void main(String[] args) throws IOException, InterruptedException, URISyntaxException {\n@@ -31,0 +31,7 @@\n+   var thirdPartyDir = path(hatDir, \"thirdparty\");\/\/ maybe clean?\n+   var jextractDir = untarIfNeeded(\n+         curlIfNeeded(\n+            new URI(\"https:\/\/download.java.net\/java\/early_access\/jextract\/22\/5\/openjdk-22-jextract+5-33_macos-aarch64_bin.tar.gz\").toURL(),\n+            path(thirdPartyDir, \"jextract.tar\")),\n+         path(thirdPartyDir, \"jextract-22\"));\n+\n@@ -35,1 +42,1 @@\n-   paths(hatDir, \"hat\", \"examples\", \"backends\").forEach(dir -> {\n+   paths(hatDir, \"docs\", \"hat\", \"examples\", \"backends\").forEach(dir -> {\n@@ -37,1 +44,1 @@\n-               && Pattern.matches(\"^.*\\\\.(java|cpp|h|hpp)$\", path.toString())\n+               && Pattern.matches(\"^.*\\\\.(java|md|cpp|h|hpp)$\", path.toString())\n@@ -39,2 +46,2 @@\n-                 if (!textFile.grep(licensePattern)){\n-                 System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n+                 if (!Pattern.matches(\"^.*md$\", textFile.path().toString()) && !textFile.grep(licensePattern)) {\n+                     System.err.println(\"ERR MISSING LICENSE \" + textFile.path());\n@@ -43,6 +50,6 @@\n-                       if (line.grep(tab)) {\n-                          System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                       }\n-                       if (line.grep(eolws)) {\n-                          System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n-                       }\n+                    if (line.grep(tab)) {\n+                       System.err.println(\"ERR TAB \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                    }\n+                    if (line.grep(eolws)) {\n+                       System.err.println(\"ERR TRAILING WHITESPACE \" + textFile.path() + \":\" + line.line() + \"#\" + line.num());\n+                    }\n@@ -50,1 +57,1 @@\n-              });\n+         });\n@@ -53,7 +60,9 @@\n-   var target = mkdir(rmdir(path(hatDir, \"build\")));\n-   var hatJavacOpts = List.of(\n-         \"--source\", \"24\",\n-         \"--enable-preview\",\n-         \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-         \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n-         );\n+   var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n+\n+   var hatJavacOpts = javacjarconfig($ -> $.opts(\n+            \"--source\", \"24\",\n+            \"--enable-preview\",\n+            \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+            \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+            ));\n+\n@@ -62,1 +71,1 @@\n-         .opts(hatJavacOpts)\n+         .seed(hatJavacOpts)\n@@ -66,0 +75,1 @@\n+   var hatExampleJavaConfig = javacjarconfig($ -> $.seed(hatJavacOpts).class_path(hatJarResult.jar));\n@@ -67,1 +77,1 @@\n-   for (var exampleDir : paths(path(hatDir, \"examples\"), \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n+   for (var exampleDir : paths(path(hatDir, \"examples\"), \"blackscholes\", \"mandel\", \"squares\", \"heal\", \"violajones\", \"life\")) {\n@@ -69,1 +79,1 @@\n-            .opts(hatJavacOpts)\n+            .seed(hatExampleJavaConfig)\n@@ -72,1 +82,0 @@\n-            .class_path(hatJarResult.jar)\n@@ -79,1 +88,1 @@\n-            .opts(hatJavacOpts)\n+            .seed(hatExampleJavaConfig)\n@@ -82,1 +91,0 @@\n-            .class_path(hatJarResult.jar)\n@@ -87,1 +95,2 @@\n-   if (Files.exists(hattricksDir)){\n+\n+   if (Files.exists(hattricksDir)) {\n@@ -90,1 +99,1 @@\n-               .opts(hatJavacOpts)\n+               .seed(hatExampleJavaConfig)\n@@ -93,1 +102,0 @@\n-               .class_path(hatJarResult.jar)\n@@ -97,1 +105,0 @@\n-      for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n@@ -99,0 +106,1 @@\n+      for (var hattrickDir : paths(hattricksDir, \"nbody\")) {\n@@ -102,9 +110,26 @@\n-         jextract($ -> $\n-              .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n-              .cwd(hattrickDir)\n-              .target_package(\"opencl\")\n-              .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n-              .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n-              .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n-              .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n-         );\n+         var jextractedJava = path(target, \"jextracted-java\");\n+         mkdir(jextractedJava);\n+         var jextractedOpenCL = path(jextractedJava, \"opencl\");\n+         var jextractedOpenGL = path(jextractedJava, \"opengl\");\n+         var jextractconfig = jextractconfig($ -> $\n+               .home(jextractDir)\n+               .cwd(hattrickDir)\n+               .output(jextractedJava)\n+               .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n+               );\n+         if (!existingDir(jextractedOpenCL)) {\n+            jextract($ -> $\n+                  .seed(jextractconfig)\n+                  .target_package(\"opencl\")\n+                  .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n+                  .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n+                  );\n+         }\n+         if (!existingDir(jextractedOpenGL)) {\n+            jextract($ -> $\n+                  .seed(jextractconfig)\n+                  .target_package(\"opengl\")\n+                  .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n+                  .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n+                  );\n+         }\n@@ -112,9 +137,0 @@\n-         jextract($ -> $\n-              .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n-              .cwd(hattrickDir)\n-              .target_package(\"opengl\")\n-              .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n-              .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n-              .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n-              .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n-         );\n@@ -122,1 +138,1 @@\n-               .opts(hatJavacOpts)\n+               .seed(hatExampleJavaConfig)\n@@ -124,2 +140,1 @@\n-               .source_path(path(hattrickDir, \"src\/main\/java\"), path(hattrickDir,\"src\/main\/extracted-java\"))\n-               .class_path(hatJarResult.jar)\n+               .source_path(path(hattrickDir, \"src\/main\/java\"), jextractedOpenCL, jextractedOpenGL)\n","filename":"hat\/bld","additions":65,"deletions":50,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-    public static class JavaJarConfig {\n+    public static class JavacJarConfig {\n@@ -238,1 +238,25 @@\n-        public JavaJarConfig jar(Path jar) {\n+        public JavacJarConfig seed(JavacJarConfig stem) {\n+            if (stem != null) {\n+                if (stem.jar != null) {\n+                    this.jar = stem.jar;\n+                }\n+                if (stem.opts != null) {\n+                    this.opts = new ArrayList<>(stem.opts);\n+                }\n+                if (stem.classesDir != null) {\n+                    this.classesDir = stem.classesDir;\n+                }\n+                if (stem.sourcePath != null) {\n+                    this.sourcePath = new ArrayList<>(stem.sourcePath);\n+                }\n+                if (stem.classPath != null) {\n+                    this.classPath = new ArrayList<>(stem.classPath);\n+                }\n+                if (stem.resourcePath != null) {\n+                    this.resourcePath = new ArrayList<>(stem.resourcePath);\n+                }\n+            }\n+            return this;\n+        }\n+\n+        public JavacJarConfig jar(Path jar) {\n@@ -243,1 +267,1 @@\n-        public JavaJarConfig opts(List<String> opts) {\n+        public JavacJarConfig opts(List<String> opts) {\n@@ -248,1 +272,1 @@\n-        public JavaJarConfig opts(String... opts) {\n+        public JavacJarConfig opts(String... opts) {\n@@ -253,1 +277,1 @@\n-        public JavaJarConfig source_path(Path... sourcePaths) {\n+        public JavacJarConfig source_path(Path... sourcePaths) {\n@@ -258,1 +282,1 @@\n-        public JavaJarConfig class_path(Path... classPaths) {\n+        public JavacJarConfig class_path(Path... classPaths) {\n@@ -263,1 +287,1 @@\n-        public JavaJarConfig resource_path(Path... resourcePaths) {\n+        public JavacJarConfig resource_path(Path... resourcePaths) {\n@@ -267,0 +291,1 @@\n+    }\n@@ -268,4 +293,4 @@\n-        public JavaJarConfig resourcepathIgnoreIfNon(Path... resourcePaths) {\n-            this.resourcePath = new ArrayList<>(Arrays.asList(resourcePaths));\n-            return this;\n-        }\n+    public static JavacJarConfig javacjarconfig(Consumer<JavacJarConfig> javacJarConfigConsumer) {\n+        JavacJarConfig javacJarConfig = new JavacJarConfig();\n+        javacJarConfigConsumer.accept(javacJarConfig);\n+        return javacJarConfig;\n@@ -274,5 +299,5 @@\n-    public static JavaJarConfig javacjar(Consumer<JavaJarConfig> jjb) throws IOException {\n-        JavaJarConfig builder = new JavaJarConfig();\n-        jjb.accept(builder);\n-        if (builder.classesDir == null) {\n-            builder.classesDir = builder.jar.resolveSibling(builder.jar.getFileName().toString() + \".classes\");\n+    public static JavacJarConfig javacjar(Consumer<JavacJarConfig> javacJarConfigConsumer) throws IOException {\n+        JavacJarConfig javacJarConfig = javacjarconfig(javacJarConfigConsumer);\n+\n+        if (javacJarConfig.classesDir == null) {\n+            javacJarConfig.classesDir = javacJarConfig.jar.resolveSibling(javacJarConfig.jar.getFileName().toString() + \".classes\");\n@@ -280,2 +305,2 @@\n-        builder.opts.addAll(List.of(\"-d\", builder.classesDir.toString()));\n-        mkdir(rmdir(builder.classesDir));\n+        javacJarConfig.opts.addAll(List.of(\"-d\", javacJarConfig.classesDir.toString()));\n+        mkdir(rmdir(javacJarConfig.classesDir));\n@@ -283,2 +308,2 @@\n-        if (builder.classPath != null) {\n-            builder.opts.addAll(List.of(\"--class-path\", pathCharSeparated(builder.classPath)));\n+        if (javacJarConfig.classPath != null) {\n+            javacJarConfig.opts.addAll(List.of(\"--class-path\", pathCharSeparated(javacJarConfig.classPath)));\n@@ -287,1 +312,1 @@\n-        builder.opts.addAll(List.of(\"--source-path\", pathCharSeparated(builder.sourcePath)));\n+        javacJarConfig.opts.addAll(List.of(\"--source-path\", pathCharSeparated(javacJarConfig.sourcePath)));\n@@ -289,1 +314,1 @@\n-        builder.sourcePath.forEach(entry ->\n+        javacJarConfig.sourcePath.forEach(entry ->\n@@ -292,2 +317,2 @@\n-        if (builder.resourcePath == null) {\n-            builder.resourcePath = new ArrayList<>();\n+        if (javacJarConfig.resourcePath == null) {\n+            javacJarConfig.resourcePath = new ArrayList<>();\n@@ -310,1 +335,1 @@\n-        ((com.sun.source.util.JavacTask) javac.getTask(new PrintWriter(System.err), javac.getStandardFileManager(dl, null, null), dl, builder.opts, null,\n+        ((com.sun.source.util.JavacTask) javac.getTask(new PrintWriter(System.err), javac.getStandardFileManager(dl, null, null), dl, javacJarConfig.opts, null,\n@@ -321,1 +346,1 @@\n-        )).generate().forEach(fileObject -> pathsToJar.add(new RootAndPath(builder.classesDir, Path.of(fileObject.toUri()))));\n+        )).generate().forEach(fileObject -> pathsToJar.add(new RootAndPath(javacJarConfig.classesDir, Path.of(fileObject.toUri()))));\n@@ -323,1 +348,1 @@\n-        var jarStream = new JarOutputStream(Files.newOutputStream(builder.jar));\n+        var jarStream = new JarOutputStream(Files.newOutputStream(javacJarConfig.jar));\n@@ -325,1 +350,1 @@\n-        builder.resourcePath.stream().sorted().forEach(resourceDir -> {\n+        javacJarConfig.resourcePath.stream().sorted().forEach(resourceDir -> {\n@@ -358,1 +383,1 @@\n-        return builder;\n+        return javacJarConfig;\n@@ -406,0 +431,25 @@\n+        public CMakeConfig seed(CMakeConfig stem) {\n+\n+            if (stem != null) {\n+                if (stem.output != null) {\n+                    this.output = stem.output;\n+                }\n+                if (stem.opts != null) {\n+                    this.opts = new ArrayList<>(stem.opts);\n+                }\n+                if (stem.libraries != null) {\n+                    this.libraries = new ArrayList<>(stem.libraries);\n+                }\n+                if (stem.cwd != null) {\n+                    this.cwd = stem.cwd;\n+                }\n+                if (stem.cmakeBldDebugDir != null) {\n+                    this.cmakeBldDebugDir = stem.cmakeBldDebugDir;\n+                }\n+                if (stem.targetPackage != null) {\n+                    this.targetPackage = targetPackage;\n+                }\n+            }\n+            return this;\n+        }\n+\n@@ -430,1 +480,1 @@\n-    public static void cmake(Consumer<CMakeConfig> cMakeConfigConsumer) {\n+    public static CMakeConfig cmakeconfig(Consumer<CMakeConfig> cMakeConfigConsumer) {\n@@ -433,0 +483,5 @@\n+        return cmakeConfig;\n+    }\n+\n+    public static void cmake(Consumer<CMakeConfig> cMakeConfigConsumer) {\n+        CMakeConfig cmakeConfig = cmakeconfig(cMakeConfigConsumer);\n@@ -450,1 +505,1 @@\n-        public List<String> opts = new ArrayList<>(List.of(\"extract\"));\n+        public List<String> opts = new ArrayList<>(List.of(\"jextract\"));\n@@ -460,0 +515,28 @@\n+        public JExtractConfig seed(JExtractConfig stem) {\n+            if (stem != null) {\n+                if (stem.output != null) {\n+                    this.output = stem.output;\n+                }\n+                if (stem.opts != null) {\n+                    this.opts = new ArrayList<>(stem.opts);\n+                }\n+                if (stem.compileFlags != null) {\n+                    this.compileFlags = new ArrayList<>(stem.compileFlags);\n+                }\n+                if (stem.libraries != null) {\n+                    this.libraries = new ArrayList<>(stem.libraries);\n+                }\n+                if (stem.home != null) {\n+                    this.home = stem.home;\n+                }\n+                if (stem.cwd != null) {\n+                    this.cwd = stem.cwd;\n+                }\n+                if (stem.headers != null) {\n+                    this.headers = new ArrayList<>(stem.headers);\n+                }\n+            }\n+            return this;\n+        }\n+\n+\n@@ -519,1 +602,1 @@\n-    public static void jextract(Consumer<JExtractConfig> jextractConfigConsumer) {\n+    public static JExtractConfig jextractconfig(Consumer<JExtractConfig> jextractConfigConsumer) {\n@@ -522,0 +605,5 @@\n+        return extractConfig;\n+    }\n+\n+    public static void jextract(Consumer<JExtractConfig> jextractConfigConsumer) {\n+        JExtractConfig extractConfig = jextractconfig(jextractConfigConsumer);\n@@ -685,0 +773,53 @@\n+    public static Path curl(URL url, Path file) {\n+        try {\n+            println(\"Downloading \" + url + \"->\" + file);\n+            url.openStream().transferTo(Files.newOutputStream(file));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return file;\n+    }\n+\n+    public static Path curlIfNeeded(URL url, Path file) {\n+        if (!Files.isRegularFile(file)) {\n+            curl(url, file);\n+        }\n+        return file;\n+    }\n+\n+    public static Path untarIfNeeded(Path tarFile, Path expectedDir) {\n+        if (!existingDir(expectedDir)) {\n+            untar(tarFile, tarFile.getParent());\n+        }\n+        return expectedDir;\n+    }\n+\n+    public static boolean available(String execName) {\n+        \/\/ We could just look up the env.PATH?  or we could just try to execute assuming it will need some args ;)\n+        try {\n+            new ProcessBuilder().command(execName).start().waitFor();\n+            return true;\n+        } catch (\n+                InterruptedException e) { \/\/ We get IOException if the executable not found, at least on Mac so interuppted means it exists\n+            return true;\n+        } catch (IOException e) { \/\/ We get IOException if the executable not found, at least on Mac\n+            \/\/throw new RuntimeException(e);\n+            return false;\n+        }\n+    }\n+\n+    public static boolean untar(Path tarFile, Path dir) {\n+        \/\/ We could just look up the env.PATH?  or we could just try to execute assuming it will need some args ;)\n+        try {\n+            \/\/ tar xvf thirdparty\/jextract.tar --directory thirdparty\n+            new ProcessBuilder().inheritIO().command(\"tar\", \"xvf\", tarFile.toString(), \"--directory\", dir.toString()).start().waitFor();\n+            return true;\n+        } catch (\n+                InterruptedException e) { \/\/ We get IOException if the executable not found, at least on Mac so interuppted means it exists\n+            return false;\n+        } catch (IOException e) { \/\/ We get IOException if the executable not found, at least on Mac\n+            \/\/throw new RuntimeException(e);\n+            return false;\n+        }\n+    }\n+\n@@ -688,1 +829,10 @@\n-        var repo = new Repo(mkdir(rmdir(hatDir.resolve(\"thirdparty\"))));\n+        var thirdPartyDir = path(hatDir, \"thirdparty\");\/\/ maybe clean?\n+        var repo = new Repo(thirdPartyDir);\n+\n+        var jextractDir = untarIfNeeded(\n+                curlIfNeeded(\n+                        new URI(\"https:\/\/download.java.net\/java\/early_access\/jextract\/22\/5\/openjdk-22-jextract+5-33_macos-aarch64_bin.tar.gz\").toURL(),\n+                        path(thirdPartyDir, \"jextract.tar\")),\n+                path(thirdPartyDir, \"jextract-22\"));\n+\n+\n@@ -726,2 +876,3 @@\n-        var target = mkdir(rmdir(path(hatDir, \"build\")));\n-        var hatJavacOpts = List.of(\n+        var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n+\n+        var hatJavacOpts = javacjarconfig($ -> $.opts(\n@@ -732,1 +883,1 @@\n-        );\n+        ));\n@@ -736,1 +887,1 @@\n-                .opts(hatJavacOpts)\n+                .seed(hatJavacOpts)\n@@ -740,0 +891,1 @@\n+        var hatExampleJavaConfig = javacjarconfig($ -> $.seed(hatJavacOpts).class_path(hatJarResult.jar));\n@@ -743,1 +895,1 @@\n-                    .opts(hatJavacOpts)\n+                    .seed(hatExampleJavaConfig)\n@@ -746,1 +898,0 @@\n-                    .class_path(hatJarResult.jar)\n@@ -753,1 +904,1 @@\n-                    .opts(hatJavacOpts)\n+                    .seed(hatExampleJavaConfig)\n@@ -756,1 +907,0 @@\n-                    .class_path(hatJarResult.jar)\n@@ -761,0 +911,1 @@\n+\n@@ -764,1 +915,1 @@\n-                        .opts(hatJavacOpts)\n+                        .seed(hatExampleJavaConfig)\n@@ -767,1 +918,0 @@\n-                        .class_path(hatJarResult.jar)\n@@ -771,0 +921,1 @@\n+\n@@ -775,12 +926,6 @@\n-                jextract($ -> $\n-                        .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n-                        .cwd(hattrickDir)\n-                        .target_package(\"opencl\")\n-                        .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n-                        .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n-                        .compile_flag(\"-F\" + MAC_APP_FRAMEWORKS)\n-                        .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n-                );\n-\n-                jextract($ -> $\n-                        .home(Path.of(\"\/Users\/grfrost\/jextract-22\/\"))\n+                var jextractedJava = path(target, \"jextracted-java\");\n+                mkdir(jextractedJava);\n+                var jextractedOpenCL = path(jextractedJava, \"opencl\");\n+                var jextractedOpenGL = path(jextractedJava, \"opengl\");\n+                var jextractconfig = jextractconfig($ -> $\n+                        .home(jextractDir)\n@@ -788,3 +933,1 @@\n-                        .target_package(\"opengl\")\n-                        .output(path(hattrickDir, \"src\/main\/extracted-java\/\"))\n-                        .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n+                        .output(jextractedJava)\n@@ -792,1 +935,0 @@\n-                        .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n@@ -794,0 +936,16 @@\n+                if (!existingDir(jextractedOpenCL)) {\n+                    jextract($ -> $\n+                            .seed(jextractconfig)\n+                            .target_package(\"opencl\")\n+                            .library(path(MAC_LIB_FRAMEWORKS, \"OpenCL.framework\/OpenCL\"))\n+                            .header(path(MAC_APP_FRAMEWORKS, \"OpenCL.framework\/Headers\/opencl.h\"))\n+                    );\n+                }\n+                if (!existingDir(jextractedOpenGL)) {\n+                    jextract($ -> $\n+                            .seed(jextractconfig)\n+                            .target_package(\"opengl\")\n+                            .library(path(MAC_LIB_FRAMEWORKS, \"GLUT.framework\/GLUT\"), path(MAC_LIB_FRAMEWORKS, \"OpenGL.framework\/OpenGL\"))\n+                            .header(path(MAC_APP_FRAMEWORKS, \"GLUT.framework\/Headers\/glut.h\"))\n+                    );\n+                }\n@@ -795,16 +953,0 @@\n-                \/*\n-                cat compile_flags.txt\n-                     -F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\n-\n-                ~\/jextract-22\/bin\/jextract  \\\n-                     -t opengl \\\n-                     -l :${MAC_LIB_FRAMEWORKS}\/GLUT.framework\/GLUT \\\n-                     -l :${MAC_LIB_FRAMEWORKS}\/OpenGL.framework\/OpenGL \\\n-                      ${MAC_APP_FRAMEWORKS}\/GLUT.framework\/Headers\/glut.h\n-\n-\n-                ~\/jextract-22\/bin\/jextract \\\n-                    -t opencl \\\n-                    -l :${MAC_LIB_FRAMEWORKS}\/OpenCL.framework\/OpenCL \\\n-                    ${MAC_APP_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n-                 *\/\n@@ -812,1 +954,1 @@\n-                        .opts(hatJavacOpts)\n+                        .seed(hatExampleJavaConfig)\n@@ -814,2 +956,1 @@\n-                        .source_path(path(hattrickDir, \"src\/main\/java\"), path(hattrickDir, \"src\/main\/extracted-java\"))\n-                        .class_path(hatJarResult.jar)\n+                        .source_path(path(hattrickDir, \"src\/main\/java\"), jextractedOpenCL, jextractedOpenGL)\n","filename":"hat\/bldr\/src\/main\/java\/bldr\/Bldr.java","additions":219,"deletions":78,"binary":false,"changes":297,"status":"modified"},{"patch":"","filename":"hat\/docs\/hat-01-03-building-hat-with-maven.md","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"hat\/docs\/hat-01-03-building-hat.md","status":"copied"},{"patch":"@@ -20,3 +20,1 @@\n-# Building HAT\n-\n-HAT uses both maven and cmake.\n+# Building HAT with Bldr\n@@ -24,1 +22,3 @@\n-Maven controls the build but delegates to cmake for native artifacts (such as various backends).\n+We initially used maven and cmake to build hat.  If you feel more comfortable\n+with maven consider [building with maven and cmake](hat-01-03-building-hat-with-maven.md)\n+but it is possible that maven support will be removed if the `Bldr` approach takes off.\n@@ -26,0 +26,1 @@\n+We might even have `Bldr` create the maven artifacts....\n@@ -32,1 +33,2 @@\n-It will simplify our tasks going forward if we add `${JAVA_HOME}\/bin` to our PATH (before any other JAVA installs).\n+It will simplify our tasks going forward if we\n+add `${JAVA_HOME}\/bin` to our PATH (before any other JAVA installs).\n@@ -34,1 +36,2 @@\n-The `env.bash` shell script can be sourced (dot included) in your shell to set JAVA_HOME and PATH\n+The top level `env.bash` shell script can be sourced (dot included)\n+into your shell to both set `JAVA_HOME` and update your `PATH`\n@@ -36,1 +39,2 @@\n-It should detect the arch type (AARCH64 or X86_46) and select the correct relative parent dir and inject that dir in your PATH.\n+It should detect the arch type (AARCH64 or X86_46) and\n+select the correct relative parent dir and inject that dir in your PATH.\n@@ -47,21 +51,6 @@\n-## Root level maven pom.xml properties\n-\n-If you followed the instructions for building babylon your `pom.xml`\n-properties should look like this, and should not need changing\n-\n-```xml\n-<project>\n-    <!-- yada -->\n-    <properties>\n-        <babylon.repo.name>babylon<\/babylon.repo.name>  <!--replace with your fork name -->\n-        <project.build.sourceEncoding>UTF-8<\/project.build.sourceEncoding>\n-        <maven.compiler.source>24<\/maven.compiler.source>\n-        <maven.compiler.target>24<\/maven.compiler.target>\n-        <github.dir>${env.HOME}\/github<\/github.dir>\n-        <beehive.spirv.toolkit.dir>${github.dir}\/beehive-spirv-toolkit\/<\/beehive.spirv.toolkit.dir>\n-        <babylon.dir>${github.dir}\/${babylon.repo.name}<\/babylon.dir>\n-        <hat.dir>${babylon.dir}\/hat<\/hat.dir>\n-        <hat.target>${hat.dir}\/maven-build<\/hat.target>\n-    <\/properties>\n-    <!-- yada -->\n-<\/project>\n+# Introducing Bldr\n+`Bldr` is a minimal java build system which has all the capabilities needed so far\n+to build existing HAT as well as it's examples and backends. It is just a set of\n+static methods and helper classes wrapping javac\/jar tooling.\n+\n+`Bldr` itself is a java class in\n@@ -69,9 +58,6 @@\n-If say your github dir (the one containing babylon) is somewhere other than `${HOME}\/github` then make sure that `github.dir` is\n-set accordingly.\n-\n-```xml\n-    <properties>\n-        <!-- ... -->\n-        <github.dir>\/full\/path\/to\/github<\/github.dir>\n-        <!-- ... -->\n-    <\/properties>\n+bldr\n+  └── src\n+      └── main\n+          └── java\n+              └── bldr\n+                  └── Bldr.java\n@@ -80,1 +66,1 @@\n-## Sanity checking your env and root pom.xml\n+We do need to compile this one class using javac one time, then we can use this in `bld` scripts to actually bld.\n@@ -82,2 +68,13 @@\n-After sourcing `env.bash` or making changes to `pom.xml` we can\n-sanity check our setup by running\n+Assuming we have our babylon JDK build in our path (via `. env.bash`) we should do this every time we 'pull' HAT.\n+\n+```shell\n+mkdir bldr\/classes\n+javac --enable-preview -source 24 -d bldr\/classes bldr\/src\/main\/java\/bldr\/Bldr.java\n+```\n+\n+Now the `bldr\/classes` dir contains all we need to create build scripts\n+\n+In HAT's root dir is a `#!` (Hash Bang) java launcher style script called `bld`\n+which uses tools exposed by the precompiled `Bldr` to compile, create jars, run jextract, download dependencies, tar\/untar etc.\n+\n+As git does not allow us to check in scripts with execute permission, we need to `chmod +x` this `bld` file.\n@@ -86,2 +83,1 @@\n-cd hat\n-java sanity.java\n+chmod +x bld\n@@ -90,2 +86,30 @@\n-This will check that your `PATH` includes your babylon JDK's bin dir, and will parse the top level `pom.xml` to ensure that that\n-the properties are pointing to `sane` values.\n+A simple example of `bld` script which just compiles core HAT source to `build\/hat-1.0.jar` is shown.\n+\n+```java\n+#!\/usr\/bin\/env java --enable-preview --source 24 --class-path bldr\/classes\n+import module java.compiler;\n+import static bldr.Bldr.*;\n+void main(String[] args) throws IOException, InterruptedException {\n+    var hatDir = Path.of(System.getProperty(\"user.dir\"));\n+    var target = path(hatDir, \"build\");\/\/ mkdir(rmdir(path(hatDir, \"build\")));\n+\n+    var hatJarResult = javacjar($ -> $\n+            .opts(  \"--source\", \"24\",\n+                    \"--enable-preview\",\n+                    \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+                    \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\")\n+            .jar(path(target, \"hat-1.0.jar\"))\n+            .source_path(path(hatDir, \"hat\/src\/main\/java\"))\n+    );\n+}\n+```\n+Note that the first line has the `#!` magic to allow this java code to be executed as if it\n+were a script.  Whilst `bld` is indeed real java code,  we do not need to compile it. Instead we just execute using\n+\n+```bash\n+.\/bld\n+```\n+\n+The real `bld` is more complicated, but not much more. It will will build hat-1.0.jar, along with all the backend jars hat-backend-?-1.0.jar,\n+all the example jars hat-example-?-1.0.jar and will try to build all native artifacts (.so\/.dylib) it can.\n+So if cmake finds OpenCL libs\/headers, you will see libopencl_backend (.so or .dylib)\n@@ -93,1 +117,1 @@\n-## Building with maven\n+On a CUDA machine you will see libcuda_backend(.so or .dylib)\n@@ -95,1 +119,2 @@\n-Now we should be able to use maven to build, if successful maven will place all jars and libs in a newly created `maven-build` dir in your top level hat dir.\n+`bld` will also sanity check .java\/.cpp\/.h files to make sure we don't have any tabs, lines that with whitespace\n+or files without appropriate licence headers\n@@ -100,2 +125,2 @@\n-mvn clean  compile jar:jar install\n-ls maven-build\n+.\/bld\n+ls build\n@@ -111,6 +136,0 @@\n-The provided `build.sh` script contains the minimal maven commandline\n-\n-```bash\n-bash build.sh\n-```\n-\n@@ -119,1 +138,1 @@\n-To run an example we should be able to use the maven artifacts in `maven-build`\n+To run a HAT example we can run from the artifacts in `build` dir\n@@ -124,1 +143,1 @@\n-   --class-path maven-build\/hat-1.0.jar:maven-build\/hat-example-mandel-1.0.jar:maven-build\/hat-backend-opencl-1.0.jar \\\n+   --class-path build\/hat-1.0.jar:build\/hat-example-mandel-1.0.jar:build\/hat-backend-opencl-1.0.jar \\\n@@ -126,1 +145,1 @@\n-   -Djava.library.path=maven-build\\\n+   -Djava.library.path=build\\\n@@ -130,1 +149,2 @@\n-The provided `hatrun.bash` script simplifies this somewhat, we just need to pass the backend name `opencl` and the package name `mandel`\n+The provided `hatrun.bash` script simplifies this somewhat, we just need to pass the backend\n+name `opencl` and the package name `mandel`\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":78,"deletions":58,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -80,2 +80,0 @@\n-        } else {\n-            return part1 * part2;\n@@ -83,0 +81,8 @@\n+        \/\/ note this was an else{} but failed C99 generation\n+         \/*\n+         else{\n+           return part1 * part2;\n+         }\n+         *\/\n+       return part1 * part2;\n+\n","filename":"hat\/examples\/blackscholes\/src\/main\/java\/blackscholes\/Main.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import hat.optools.FuncOpWrapper;\n@@ -51,1 +50,1 @@\n-import hat.optools.UnaryArithmeticOrLogicOperation;\n+import hat.optools.UnaryArithmeticOrLogicOpWrapper;\n@@ -62,1 +61,0 @@\n-import java.lang.reflect.Field;\n@@ -64,1 +62,0 @@\n-import java.lang.reflect.code.TypeElement;\n@@ -103,0 +100,1 @@\n+            case CoreOp.NegOp  o-> 1;\n@@ -106,1 +104,1 @@\n-            case CoreOp.NotOp   o -> 2;\n+            case CoreOp.NotOp o -> 2;\n@@ -226,0 +224,1 @@\n+            case CoreOp.NegOp o -> minus();\n@@ -238,1 +237,1 @@\n-    public T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOperation unaryOperatorOpWrapper) {\n+    public T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOpWrapper unaryOperatorOpWrapper) {\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilder.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-import hat.optools.UnaryArithmeticOrLogicOperation;\n+import hat.optools.UnaryArithmeticOrLogicOpWrapper;\n@@ -74,1 +74,1 @@\n-    T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOperation unaryOperatorOpWrapper);\n+    T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOpWrapper unaryOperatorOpWrapper);\n@@ -130,1 +130,1 @@\n-            case UnaryArithmeticOrLogicOperation $ -> unaryOperation(buildContext, $);\n+            case UnaryArithmeticOrLogicOpWrapper $ -> unaryOperation(buildContext, $);\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilderInterface.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n-            case CoreOp.NotOp $ -> (OW) new UnaryArithmeticOrLogicOperation($);\n+            case CoreOp.NotOp $ -> (OW) new UnaryArithmeticOrLogicOpWrapper($);\n+            case CoreOp.NegOp $ -> (OW) new UnaryArithmeticOrLogicOpWrapper($);\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-public class UnaryArithmeticOrLogicOperation extends UnaryOpWrapper<CoreOp.UnaryOp> {\n-    UnaryArithmeticOrLogicOperation(CoreOp.UnaryOp op) {\n+public class UnaryArithmeticOrLogicOpWrapper extends UnaryOpWrapper<CoreOp.UnaryOp> {\n+    UnaryArithmeticOrLogicOpWrapper(CoreOp.UnaryOp op) {\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/UnaryArithmeticOrLogicOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"hat\/hat\/src\/main\/java\/hat\/optools\/UnaryArithmeticOrLogicOperation.java","status":"renamed"}]}