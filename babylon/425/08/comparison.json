{"files":[{"patch":"@@ -710,0 +710,1 @@\n+\n@@ -713,2 +714,2 @@\n-            if (oprToTransform != null) {\n-                \/\/ If operation is assigned to block, then copy it and transform its contents\n+            if (op.isSealed() || oprToTransform != null) {\n+                \/\/ If operation is assigned to block, or it's sealed, then copy it and transform its contents\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import java.util.function.BiFunction;\n@@ -170,0 +169,6 @@\n+\n+        \/**\n+         * If assigned to an operation result, it indicates the operation is sealed\n+        *\/\n+        private static final Result SEALED_OPR = new Result();\n+\n@@ -172,0 +177,5 @@\n+        private Result() {\n+            super(null, null);\n+            this.op = null;\n+        }\n+\n@@ -303,1 +313,1 @@\n-        if (result == null) {\n+        if (isSealed() || result == null) {\n@@ -328,1 +338,1 @@\n-     * Returns the operation's result, otherwise {@code null} if the operation is not assigned to a block.\n+     * Returns the operation's result, otherwise {@code null} if the operation is unbound or sealed.\n@@ -330,1 +340,1 @@\n-     * @return the operation's result, or {@code null} if not assigned to a block.\n+     * @return the operation's result, or {@code null} if unbound or sealed.\n@@ -333,1 +343,1 @@\n-        return result;\n+        return result == Result.SEALED_OPR ? null : result;\n@@ -535,0 +545,14 @@\n+\n+    public void seal() {\n+        if (result == Result.SEALED_OPR) {\n+            return;\n+        }\n+        if (result != null) {\n+            throw new IllegalStateException(\"Can't freeze a bound operation\");\n+        }\n+        result = Result.SEALED_OPR;\n+    }\n+\n+    public boolean isSealed() {\n+        return result == Result.SEALED_OPR;\n+    }\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -178,0 +178,2 @@\n+        \/\/ seal op\n+        builder.op(invoke(MethodRef.method(Op.class, \"seal\", void.class), result));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/OpBuilder.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2732,0 +2732,1 @@\n+        private static final MethodRef M_OP_SEAL = MethodRef.method(Op.class, \"seal\", void.class);\n@@ -2778,0 +2779,1 @@\n+            Set<MethodRef> mRefs = new HashSet<>(List.of(M_BLOCK_BUILDER_OP, M_BLOCK_BUILDER_PARAM, M_OP_SEAL));\n@@ -2780,2 +2782,1 @@\n-                    case JavaOp.InvokeOp invokeOp when invokeOp.invokeDescriptor().equals(M_BLOCK_BUILDER_OP)\n-                            || invokeOp.invokeDescriptor().equals(M_BLOCK_BUILDER_PARAM) -> true;\n+                    case JavaOp.InvokeOp invokeOp when mRefs.contains(invokeOp.invokeDescriptor()) -> true;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+import jdk.incubator.code.*;\n+import jdk.incubator.code.dialect.core.CoreOp;\n+import jdk.incubator.code.dialect.core.FunctionType;\n+import jdk.incubator.code.dialect.java.JavaType;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.IntUnaryOperator;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run testng TestSealOp\n+ *\/\n+public class TestSealOp {\n+\n+    @CodeReflection\n+    static List<Integer> f(int i) {\n+        return new ArrayList<>(i);\n+    }\n+\n+    @Test\n+    void test0() throws NoSuchMethodException {\n+        Method m = this.getClass().getDeclaredMethod(\"f\", int.class);\n+        CoreOp.FuncOp f = Op.ofMethod(m).get();\n+        assertOpIsCopiedWhenAddedToBlock(f);\n+    }\n+\n+    @Test\n+    void test1() {\n+        Quotable q = (IntUnaryOperator & Quotable) i -> i \/ 2;\n+        Quoted quoted = Op.ofQuotable(q).get();\n+        CoreOp.QuotedOp quotedOp = (CoreOp.QuotedOp) quoted.op().ancestorBody().ancestorOp();\n+        CoreOp.FuncOp funcOp = (CoreOp.FuncOp) quotedOp.ancestorBody().ancestorOp();\n+        assertOpIsCopiedWhenAddedToBlock(funcOp);\n+    }\n+\n+    @Test\n+    void test2() {\n+        CoreOp.ConstantOp constant = CoreOp.constant(JavaType.INT, 7);\n+        constant.seal();\n+        assertOpIsCopiedWhenAddedToBlock(constant);\n+    }\n+\n+    @Test\n+    void test3() {\n+        CoreOp.FuncOp funcOp = CoreOp.func(\"f\", FunctionType.FUNCTION_TYPE_VOID).body(b -> {\n+            b.op(CoreOp.return_());\n+        });\n+        funcOp.seal();\n+        funcOp.seal();\n+    }\n+\n+    @Test\n+    void test4() {\n+        Quoted q = (int a, int b) -> {\n+            return a + b;\n+        };\n+        CoreOp.QuotedOp quotedOp = (CoreOp.QuotedOp) q.op().ancestorBody().ancestorOp();\n+        CoreOp.FuncOp funcOp = (CoreOp.FuncOp) quotedOp.ancestorBody().ancestorOp();\n+        Assert.assertTrue(funcOp.isSealed());\n+        assertOpIsCopiedWhenAddedToBlock(funcOp);\n+    }\n+\n+    @Test\n+    void test5() { \/\/ freezing an already bound op should throw\n+        Body.Builder body = Body.Builder.of(null, FunctionType.FUNCTION_TYPE_VOID);\n+        Op.Result r = body.entryBlock().op(CoreOp.constant(JavaType.DOUBLE, 1d));\n+        Assert.assertThrows(() -> r.op().seal());\n+    }\n+\n+    void assertOpIsCopiedWhenAddedToBlock(Op op) {\n+        Body.Builder body = Body.Builder.of(null, FunctionType.FUNCTION_TYPE_VOID);\n+        body.entryBlock().op(op);\n+        body.entryBlock().op(CoreOp.return_());\n+        CoreOp.FuncOp funcOp = CoreOp.func(\"t\", body);\n+        boolean b = funcOp.body().entryBlock().ops().stream().allMatch(o -> o != op);\n+        Assert.assertTrue(b);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSealOp.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}