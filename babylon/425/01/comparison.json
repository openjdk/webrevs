{"files":[{"patch":"@@ -898,0 +898,4 @@\n+            if (op instanceof Op.Root) {\n+               throw new IllegalStateException(\"Operation %s is root and can't be inserted in a block\".formatted(op.getClass().getSimpleName()));\n+            }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,0 +171,6 @@\n+    \/**\n+     * An operation characteristic indicating the operation is a root operation\n+     *\/\n+    public interface Root {\n+    }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            implements Op.Invokable, Op.Isolated, Op.Lowerable {\n+            implements Op.Invokable, Op.Isolated, Op.Lowerable, Op.Root {\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/dialect\/core\/CoreOp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+import jdk.incubator.code.Block;\n+import jdk.incubator.code.Body;\n+import jdk.incubator.code.CodeReflection;\n+import jdk.incubator.code.Op;\n+import jdk.incubator.code.op.CoreOp;\n+import jdk.incubator.code.type.FunctionType;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+\n+\/*\n+ * @test\n+ * @modules jdk.incubator.code\n+ * @run testng RootOpInsertionTest\n+ *\/\n+public class RootOpInsertionTest {\n+\n+    @CodeReflection\n+    static void f() {}\n+\n+    @Test\n+    void test() throws NoSuchMethodException {\n+        Method mf = this.getClass().getDeclaredMethod(\"f\");\n+        CoreOp.FuncOp funcOp = Op.ofMethod(mf).orElseThrow();\n+\n+        Body.Builder bodyBuilder = Body.Builder.of(null, FunctionType.VOID);\n+        Block.Builder entryBlock = bodyBuilder.entryBlock();\n+        Assert.assertThrows(IllegalStateException.class, () -> entryBlock.op(funcOp));\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/reflect\/RootOpInsertionTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}