{"files":[{"patch":"@@ -714,2 +714,2 @@\n-            if (op.isFrozen() || oprToTransform != null) {\n-                \/\/ If operation is assigned to block, then copy it and transform its contents\n+            if (op.isSealed() || oprToTransform != null) {\n+                \/\/ If operation is assigned to block, or it's sealed, then copy it and transform its contents\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Block.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import java.util.function.BiFunction;\n@@ -172,1 +171,1 @@\n-         * If assigned to an operation result, it indicates the operation is frozen\n+         * If assigned to an operation result, it indicates the operation is sealed\n@@ -174,1 +173,1 @@\n-        private static final Result ROOT = new Result();\n+        private static final Result SEALED_OPR = new Result();\n@@ -314,1 +313,1 @@\n-        if (isFrozen() || result == null) {\n+        if (isSealed() || result == null) {\n@@ -339,1 +338,1 @@\n-     * Returns the operation's result, otherwise {@code null} if the operation is not assigned to a block.\n+     * Returns the operation's result, otherwise {@code null} if the operation is unbound or sealed.\n@@ -341,1 +340,1 @@\n-     * @return the operation's result, or {@code null} if not assigned to a block.\n+     * @return the operation's result, or {@code null} if unbound or sealed.\n@@ -344,1 +343,1 @@\n-        return result == Result.ROOT ? null : result;\n+        return result == Result.SEALED_OPR ? null : result;\n@@ -547,2 +546,5 @@\n-    public void freeze() {\n-        if (result != null && result != Result.ROOT) {\n+    public void seal() {\n+        if (result == Result.SEALED_OPR) {\n+            return;\n+        }\n+        if (result != null) {\n@@ -551,1 +553,1 @@\n-        result = Result.ROOT;\n+        result = Result.SEALED_OPR;\n@@ -554,2 +556,2 @@\n-    public boolean isFrozen() {\n-        return result == Result.ROOT;\n+    public boolean isSealed() {\n+        return result == Result.SEALED_OPR;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Op.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -178,2 +178,2 @@\n-        \/\/ freeze op\n-        builder.op(invoke(MethodRef.method(Op.class, \"freeze\", void.class), result));\n+        \/\/ seal op\n+        builder.op(invoke(MethodRef.method(Op.class, \"seal\", void.class), result));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/OpBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2732,1 +2732,1 @@\n-        private static final MethodRef M_OP_FREEZE = MethodRef.method(Op.class, \"freeze\", void.class);\n+        private static final MethodRef M_OP_SEAL = MethodRef.method(Op.class, \"seal\", void.class);\n@@ -2779,0 +2779,1 @@\n+            Set<MethodRef> mRefs = new HashSet<>(List.of(M_BLOCK_BUILDER_OP, M_BLOCK_BUILDER_PARAM, M_OP_SEAL));\n@@ -2781,3 +2782,1 @@\n-                    case JavaOp.InvokeOp invokeOp when invokeOp.invokeDescriptor().equals(M_BLOCK_BUILDER_OP)\n-                            || invokeOp.invokeDescriptor().equals(M_BLOCK_BUILDER_PARAM)\n-                            || invokeOp.invokeDescriptor().equals(M_OP_FREEZE) -> true;\n+                    case JavaOp.InvokeOp invokeOp when mRefs.contains(invokeOp.invokeDescriptor()) -> true;\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -16,1 +16,1 @@\n- * @run testng TestFreezeOp\n+ * @run testng TestSealOp\n@@ -18,1 +18,1 @@\n-public class TestFreezeOp {\n+public class TestSealOp {\n@@ -44,1 +44,1 @@\n-        constant.freeze();\n+        constant.seal();\n@@ -53,2 +53,2 @@\n-        funcOp.freeze();\n-        funcOp.freeze();\n+        funcOp.seal();\n+        funcOp.seal();\n@@ -64,1 +64,1 @@\n-        Assert.assertTrue(funcOp.isFrozen());\n+        Assert.assertTrue(funcOp.isSealed());\n@@ -72,1 +72,1 @@\n-        Assert.assertThrows(() -> r.op().freeze());\n+        Assert.assertThrows(() -> r.op().seal());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSealOp.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"test\/jdk\/java\/lang\/reflect\/code\/TestFreezeOp.java","status":"renamed"}]}