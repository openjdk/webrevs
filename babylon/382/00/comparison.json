{"files":[{"patch":"@@ -47,10 +47,0 @@\n-        <dependency>\n-            <groupId>oracle.code<\/groupId>\n-            <artifactId>hat-clwrap<\/artifactId>\n-            <version>1.0<\/version>\n-        <\/dependency>\n-        <dependency>\n-            <groupId>oracle.code<\/groupId>\n-            <artifactId>hat-jextracted-opencl<\/artifactId>\n-            <version>1.0<\/version>\n-        <\/dependency>\n","filename":"hat\/examples\/life\/pom.xml","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import hat.backend.ffi.OpenCLBackend;\n@@ -37,3 +36,0 @@\n-import wrap.clwrap.CLPlatform;\n-import wrap.clwrap.CLWrapComputeContext;\n-\n@@ -232,29 +228,0 @@\n-\n-        static void nonHatCompute(CLWrapComputeContext clWrapComputeContext,  CLPlatform.CLDevice.CLContext.CLProgram.CLKernel kernel,Viewer viewer, Control control, CellGrid cellGrid) {\n-            int range = cellGrid.width() * cellGrid.height();\n-            while (viewer.stillRunning()) {\n-\n-                long now = System.currentTimeMillis();\n-                boolean shouldUpdateUI = viewer.isReadyForUpdate(now);\n-\n-                if (viewer.state.usingGPU) {\n-                    BufferState bufferState = BufferState.of(cellGrid);\n-                    if (!viewer.state.minimizingCopies || (viewer.state.generations == 0)){\n-                        bufferState.setState(BufferState.HOST_OWNED);\n-                    }\n-                    BufferState.of(control).setState(BufferState.HOST_OWNED);\n-                    kernel.run(clWrapComputeContext, range, cellGrid, control);\n-\n-\n-                } else {\n-                    IntStream.range(0, range).parallel().forEach(kcx ->\n-                            Compute.lifePerIdx(kcx, control, cellGrid)\n-                    );\n-                }\n-                int to = control.from(); control.from(control.to());control.to(to);\n-\n-                if (shouldUpdateUI) {\n-                    viewer.update(now, cellGrid,control.from());\n-                }\n-            }\n-        }\n@@ -284,10 +251,2 @@\n-        CLWrapComputeContext clWrapComputeContext = new CLWrapComputeContext(arena, 20);\n-        List<CLPlatform> platforms = CLPlatform.platforms(arena);\n-        CLPlatform platform = platforms.get(0);\n-        CLPlatform.CLDevice device = platform.devices.get(0);\n-        CLPlatform.CLDevice.CLContext context = device.createContext();\n-\n-        var program = context.buildProgram(Compute.codeHeader + Compute.codeVal + Compute.codeLifePerIdx);\n-        CLPlatform.CLDevice.CLContext.CLProgram.CLKernel kernel = program.getKernel(\"life\");\n-        \/\/ Set following true to use HAT\n-        Viewer.State state = new Viewer.State(true);\n+\n+        Viewer.State state = new Viewer.State();\n@@ -302,5 +261,2 @@\n-        if (state.useHat) {\n-            accelerator.compute(cc -> Compute.compute(cc, viewer, control, cellGrid));\n-        } else {\n-            Compute.nonHatCompute(clWrapComputeContext, kernel,viewer,control,cellGrid);\n-        }\n+         accelerator.compute(cc -> Compute.compute(cc, viewer, control, cellGrid));\n+\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Main.java","additions":4,"deletions":48,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-        public final boolean useHat;\n+\n@@ -102,2 +102,2 @@\n-        State(boolean useHat) {\n-            this.useHat = useHat;\n+        State() {\n+\n@@ -233,17 +233,1 @@\n-             if (!state.useHat) {\n-                this.useGPUToggleButton = addToggle(panel, \"Java\", \"GPU\");\n-                this.minimizeCopiesToggleButton = addToggle(panel, \"Always Copy\", \"Minimize Moves\");\n-                this.minimizeCopiesToggleButton.setEnabled(state.minimizingCopies);\n-                minimizeCopiesToggleButton.addChangeListener(event -> {\n-                    this.state.minimizingCopies = minimizeCopiesToggleButton.isSelected();\n-                   \/\/ System.out.println(\"Minimizing Copies \" + state.minimizingCopies);\n-                  \/\/  System.out.println(\"Use GPU \" + state.usingGPU);\n-                });\n-                useGPUToggleButton.addChangeListener(event -> {\n-                    this.state.usingGPU = useGPUToggleButton.isSelected();\n-                    this.minimizeCopiesToggleButton.setEnabled(this.state.usingGPU);\n-                    this.state.minimizingCopies = minimizeCopiesToggleButton.isSelected();\n-                    System.out.println(\"Minimizing Copies \" + state.minimizingCopies);\n-                    System.out.println(\"Use GPU \" + state.usingGPU);\n-                });\n-            }\n+\n","filename":"hat\/examples\/life\/src\/main\/java\/life\/Viewer.java","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-        <!--<module>life<\/module>-->\n+        <module>life<\/module>\n+        <!-- <module>nbody<\/module>  sadly we need jextracted cl and gl for this -->\n","filename":"hat\/examples\/pom.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -326,1 +326,4 @@\n-                                        .when(example.dir.matches(\"^.*(life|nbody)$\") && jextractCapability.available() && openclCapability.available(), _ ->\n+                                        .when(example.dir.matches(\"^.*(nbody)$\")\n+                                           && jextractCapability.available()\n+                                           && openclCapability.available()\n+                                            && openglCapability.available(), _ ->\n@@ -328,9 +331,3 @@\n-                                                        targets.clWrapJar,\n-                                                        openclCapability.jarFile(buildDir),\n-                                                        buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\")\n-                                                )\n-                                        )\n-                                        .when(example.dir.matches(\"^.*(nbody)$\") && jextractCapability.available() && openclCapability.available() && openglCapability.available(), _ ->\n-                                                javac.class_path(targets.wrapJar,\n-                                                        targets.glWrapJar,\n-                                                        openglCapability.jarFile(buildDir)\n+                                                        targets.clWrapJar, openclCapability.jarFile(buildDir),\n+                                                        buildDir.jarFile(\"hat-backend-ffi-opencl-1.0.jar\"),\n+                                                        targets.glWrapJar, openglCapability.jarFile(buildDir)\n","filename":"hat\/hat\/bld.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -90,3 +90,0 @@\n-              .when(jextractedOpenCLJar.exists()  && exampleName.equals(\"life\"), _->{ haveBackend\n-                  .class_path(jextractedOpenCLJar, wrapJar, clwrapJar);\n-              })\n","filename":"hat\/hat\/run.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}