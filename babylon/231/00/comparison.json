{"files":[{"patch":"@@ -132,2 +132,2 @@\n-* Code should ideally just contain simple control flow and kernel dispatches.\n-* Data movements (to and from backend) will automatically be derived from control flow and `ifaceMappedSegment` accesses\n+* Code should ideally just contain simple plyTable flow and kernel dispatches.\n+* Data movements (to and from backend) will automatically be derived from plyTable flow and `ifaceMappedSegment` accesses\n","filename":"hat\/docs\/hat-03-programming-model.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-or take complete control and execute the model in native code.\n+or take complete plyTable and execute the model in native code.\n","filename":"hat\/docs\/hat-06-kernel-analysis.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,7 @@\n+\n+### General GPGPU\n+* [A nice GPGPU state of play video](https:\/\/www.youtube.com\/watch?v=48AdJgTYSFQ)\n+* [Interesting project ](https:\/\/www.phoronix.com\/news\/SCALE-CUDA-Apps-For-AMD-GPUs)\n+* [More ](https:\/\/www.phoronix.com\/review\/radeon-cuda-zluda)\n+* [More](https:\/\/scale-lang.com\/posts\/2024-07-12-release-announcement)\n+* [Scale](https:\/\/docs.scale-lang.com\/)\n","filename":"hat\/docs\/hat-notes-and-links.md","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -337,2 +337,4 @@\n-                System.out.println(\"Your move : \");\n-                str = scanner.nextLine().toLowerCase();\n+                do {\n+                    System.out.println(\"Your move : [pnbrqk][a-h][1-8][a-h][1-8]\");\n+                    str = scanner.nextLine().toLowerCase();\n+                }while(str.isEmpty());\n@@ -340,12 +342,12 @@\n-                        && Character.isLetter(str.charAt(1))\n-                        && str.charAt(1) > 96\n-                        && str.charAt(1) < 105\n-                        && Character.isDigit(str.charAt(2))\n-                        && str.charAt(2) > 48\n-                        && str.charAt(2) < 57\n-                        && Character.isLetter(str.charAt(3))\n-                        && str.charAt(3) > 96\n-                        && str.charAt(3) < 105\n-                        && Character.isDigit(str.charAt(4))\n-                        && str.charAt(4) > 48\n-                        && str.charAt(4) < 57)) {\n+                      \/\/  && Character.isLetter(str.charAt(1))\n+                        && str.charAt(1) >='a'\n+                        && str.charAt(1) <='h'\n+                        \/\/&& Character.isDigit(str.charAt(2))\n+                        && str.charAt(2) >= '1'\n+                        && str.charAt(2) <= '8'\n+                     \/\/   && Character.isLetter(str.charAt(3))\n+                        && str.charAt(3) >='a'\n+                        && str.charAt(3) <='h'\n+                       \/\/ && Character.isDigit(str.charAt(4))\n+                        && str.charAt(4) >= '1'\n+                        && str.charAt(4) <= '8')) {\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Chess.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,248 +0,0 @@\n-<html>\n-   <head>\n-       <style>\n-           #side-by-side {\n-               display: flex;\n-           }\n-\n-           #left {\n-               flex: 0 0 50%;\n-           }\n-\n-           #right {\n-               flex: 1;\n-           }\n-           pre{\n-               font-family: \"Courier New\";\n-               background-color: black;\n-               color: yellow;\n-               max-width: 800px;\n-               overflow: clip;\n-\n-           }\n-       <\/style>\n-   <\/head>\n-   <body>\n-    <h3>COMPUTE entrypoint before injecting buffer tracking...<\/h3>\n-    <div id=\"side-by-side\">\n-        <div id=\"left\">\n-    <pre>\n-    func @\"compute\" @loc=\"129:9:file:\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\/examples\/life\/src\/main\/java\/life\/Main.java\" (%0 : hat.ComputeContext, %1 : life.Viewer, %2 : life.Main$Control, %3 : life.Main$CellGrid)void -&gt; {\n-       %4 : Var&lt;hat.ComputeContext&gt; = var %0 @\"cc\" @loc=\"129:9\";\n-       %5 : Var&lt;life.Viewer&gt; = var %1 @\"viewer\" @loc=\"129:9\";\n-       %6 : Var&lt;life.Main$Control&gt; = var %2 @\"ctrl\" @loc=\"129:9\";\n-       %7 : Var&lt;life.Main$CellGrid&gt; = var %3 @\"grid\" @loc=\"129:9\";\n-       java.while @loc=\"131:13\"\n-           ()boolean -&gt; {\n-               %8 : life.Viewer = var.load %5 @loc=\"131:20\";\n-               %9 : boolean = invoke %8 @\"life.Viewer::isVisible()boolean\" @loc=\"131:20\";\n-               yield %9 @loc=\"131:13\";\n-           }\n-           ()void -&gt; {\n-               %10 : hat.ComputeContext = var.load %4 @loc=\"132:17\";\n-               %11 : life.Main$CellGrid = var.load %7 @loc=\"133:25\";\n-\n-               %12 : int = invoke %11 @\"life.Main$CellGrid::width()int\" @loc=\"133:25\";\n-\n-               %13 : life.Main$CellGrid = var.load %7 @loc=\"133:40\";\n-\n-               %14 : int = invoke %13 @\"life.Main$CellGrid::height()int\" @loc=\"133:40\";\n-\n-               %15 : int = mul %12 %14 @loc=\"133:25\";\n-               %16 : hat.ComputeContext$QuotableKernelContextConsumer = lambda @loc=\"134:25\" (%17 : hat.KernelContext)void -&gt; {\n-                   %18 : Var&lt;hat.KernelContext&gt; = var %17 @\"kc\" @loc=\"134:25\";\n-                   %19 : hat.KernelContext = var.load %18 @loc=\"134:44\";\n-                   %20 : life.Main$Control = var.load %6 @loc=\"134:48\";\n-                   %21 : life.Main$CellGrid = var.load %7 @loc=\"134:54\";\n-                   invoke %19 %20 %21 @\"life.Main$Compute::life(hat.KernelContext, life.Main$Control, life.Main$CellGrid)void\" @loc=\"134:31\";\n-                   return @loc=\"134:25\";\n-               };\n-               invoke %10 %15 %16 @\"hat.ComputeContext::dispatchKernel(int, hat.ComputeContext$QuotableKernelContextConsumer)void\" @loc=\"132:17\";\n-               %22 : life.Main$Control = var.load %6 @loc=\"136:26\";\n-\n-               %23 : int = invoke %22 @\"life.Main$Control::from()int\" @loc=\"136:26\";\n-\n-               %24 : Var&lt;int&gt; = var %23 @\"to\" @loc=\"136:17\";\n-               %25 : life.Main$Control = var.load %6 @loc=\"136:39\";\n-               %26 : life.Main$Control = var.load %6 @loc=\"136:49\";\n-\n-               %27 : int = invoke %26 @\"life.Main$Control::to()int\" @loc=\"136:49\";\n-\n-               invoke %25 %27 @\"life.Main$Control::from(int)void\" @loc=\"136:39\";\n-\n-               %28 : life.Main$Control = var.load %6 @loc=\"136:61\";\n-               %29 : int = var.load %24 @loc=\"136:69\";\n-\n-               invoke %28 %29 @\"life.Main$Control::to(int)void\" @loc=\"136:61\";\n-\n-               java.if @loc=\"137:17\"\n-                   ()boolean -&gt; {\n-                       %30 : life.Viewer = var.load %5 @loc=\"137:21\";\n-                       %31 : boolean = invoke %30 @\"life.Viewer::isReadyForUpdate()boolean\" @loc=\"137:21\";\n-                       yield %31 @loc=\"137:17\";\n-                   }\n-                   ()void -&gt; {\n-                       %32 : life.Viewer = var.load %5 @loc=\"138:21\";\n-                       %33 : life.Main$CellGrid = var.load %7 @loc=\"138:35\";\n-                       %34 : int = var.load %24 @loc=\"138:41\";\n-                       invoke %32 %33 %34 @\"life.Viewer::update(life.Main$CellGrid, int)void\" @loc=\"138:21\";\n-                       yield @loc=\"137:17\";\n-                   }\n-                   ()void -&gt; {\n-                       yield;\n-                   };\n-               java.continue @loc=\"131:13\";\n-           };\n-       return @loc=\"129:9\";\n-    }\n-    <\/pre>\n-        <\/div>\n-        <div id=\"right\">\n-    <pre>\n-    func @\"compute\" @loc=\"129:9:file:\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\/examples\/life\/src\/main\/java\/life\/Main.java\" (%0 : hat.ComputeContext, %1 : life.Viewer, %2 : life.Main$Control, %3 : life.Main$CellGrid)void -&gt; {\n-        %4 : Var&lt;hat.ComputeContext&gt; = var %0 @\"cc\" @loc=\"129:9\";\n-        %5 : Var&lt;life.Viewer&gt; = var %1 @\"viewer\" @loc=\"129:9\";\n-        %6 : Var&lt;life.Main$Control&gt; = var %2 @\"ctrl\" @loc=\"129:9\";\n-        %7 : Var&lt;life.Main$CellGrid&gt; = var %3 @\"grid\" @loc=\"129:9\";\n-        java.while @loc=\"131:13\"\n-            ()boolean -&gt; {\n-                %8 : life.Viewer = var.load %5 @loc=\"131:20\";\n-                %9 : boolean = invoke %8 @\"life.Viewer::isVisible()boolean\" @loc=\"131:20\";\n-                yield %9 @loc=\"131:13\";\n-            }\n-            ()void -&gt; {\n-                %10 : hat.ComputeContext = var.load %4 @loc=\"132:17\";\n-                %11 : life.Main$CellGrid = var.load %7 @loc=\"133:25\";\n-                invoke %0 %11 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n-                %12 : int = invoke %11 @\"life.Main$CellGrid::width()int\" @loc=\"133:25\";\n-                invoke %0 %11 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n-                %13 : life.Main$CellGrid = var.load %7 @loc=\"133:40\";\n-                invoke %0 %13 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n-                %14 : int = invoke %13 @\"life.Main$CellGrid::height()int\" @loc=\"133:40\";\n-                invoke %0 %13 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n-                %15 : int = mul %12 %14 @loc=\"133:25\";\n-                %16 : hat.ComputeContext$QuotableKernelContextConsumer = lambda @loc=\"134:25\" (%17 : hat.KernelContext)void -&gt; {\n-                    %18 : Var&lt;hat.KernelContext&gt; = var %17 @\"kc\" @loc=\"134:25\";\n-                    %19 : hat.KernelContext = var.load %18 @loc=\"134:44\";\n-                    %20 : life.Main$Control = var.load %6 @loc=\"134:48\";\n-                    %21 : life.Main$CellGrid = var.load %7 @loc=\"134:54\";\n-                    invoke %19 %20 %21 @\"life.Main$Compute::life(hat.KernelContext, life.Main$Control, life.Main$CellGrid)void\" @loc=\"134:31\";\n-                    return @loc=\"134:25\";\n-                };\n-                invoke %10 %15 %16 @\"hat.ComputeContext::dispatchKernel(int, hat.ComputeContext$QuotableKernelContextConsumer)void\" @loc=\"132:17\";\n-                %22 : life.Main$Control = var.load %6 @loc=\"136:26\";\n-                invoke %0 %22 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n-                %23 : int = invoke %22 @\"life.Main$Control::from()int\" @loc=\"136:26\";\n-                invoke %0 %22 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n-                %24 : Var&lt;int&gt; = var %23 @\"to\" @loc=\"136:17\";\n-                %25 : life.Main$Control = var.load %6 @loc=\"136:39\";\n-                %26 : life.Main$Control = var.load %6 @loc=\"136:49\";\n-                invoke %0 %26 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n-                %27 : int = invoke %26 @\"life.Main$Control::to()int\" @loc=\"136:49\";\n-                invoke %0 %26 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n-                invoke %0 %25 @\"hat.ComputeContext::preMutate(hat.buffer.Buffer)void\";\n-                invoke %25 %27 @\"life.Main$Control::from(int)void\" @loc=\"136:39\";\n-                invoke %0 %25 @\"hat.ComputeContext::postMutate(hat.buffer.Buffer)void\";\n-                %28 : life.Main$Control = var.load %6 @loc=\"136:61\";\n-                %29 : int = var.load %24 @loc=\"136:69\";\n-                invoke %0 %28 @\"hat.ComputeContext::preMutate(hat.buffer.Buffer)void\";\n-                invoke %28 %29 @\"life.Main$Control::to(int)void\" @loc=\"136:61\";\n-                invoke %0 %28 @\"hat.ComputeContext::postMutate(hat.buffer.Buffer)void\";\n-                java.if @loc=\"137:17\"\n-                    ()boolean -&gt; {\n-                        %30 : life.Viewer = var.load %5 @loc=\"137:21\";\n-                        %31 : boolean = invoke %30 @\"life.Viewer::isReadyForUpdate()boolean\" @loc=\"137:21\";\n-                        yield %31 @loc=\"137:17\";\n-                    }\n-                    ()void -&gt; {\n-                        %32 : life.Viewer = var.load %5 @loc=\"138:21\";\n-                        %33 : life.Main$CellGrid = var.load %7 @loc=\"138:35\";\n-                        %34 : int = var.load %24 @loc=\"138:41\";\n-                        invoke %32 %33 %34 @\"life.Viewer::update(life.Main$CellGrid, int)void\" @loc=\"138:21\";\n-                        yield @loc=\"137:17\";\n-                    }\n-                    ()void -&gt; {\n-                        yield;\n-                    };\n-                java.continue @loc=\"131:13\";\n-            };\n-        return @loc=\"129:9\";\n-    };\n-    <\/pre>\n-        <\/div>\n-    <\/div>\n-    <h3>Resulting OpenCL<\/h3>\n-    <pre>\n-        #define NDRANGE_OPENCL\n-        #pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n-        #pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable\n-        #ifndef NULL\n-        #define NULL 0\n-        #endif\n-        #pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n-        #pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable\n-        typedef char s8_t;\n-        typedef char byte;\n-        typedef char boolean;\n-        typedef unsigned char u8_t;\n-        typedef short s16_t;\n-        typedef unsigned short u16_t;\n-        typedef unsigned int u32_t;\n-        typedef int s32_t;\n-        typedef float f32_t;\n-        typedef long s64_t;\n-        typedef unsigned long u64_t;\n-        typedef struct KernelContext_s{\n-            int x;\n-            int maxX;\n-        }KernelContext_t;\n-        typedef struct Control_s{\n-            int from;\n-            int to;\n-        }Control_t;\n-        \n-        typedef struct CellGrid_s{\n-            int width;\n-            int height;\n-            byte cell[1];\n-        }CellGrid_t;\n-        \n-        \n-        \n-        inline int val(\n-            __global CellGrid_t* grid, int from, int w, int x, int y\n-        ){\n-            return (int)grid-&gt;cell[(long)y*(long)w+(long)x+(long)from]&1;\n-        }\n-        \n-        \n-        __kernel void life(\n-            __global KernelContext_t *kc, __global Control_t* control, __global CellGrid_t* cellGrid\n-        ){\n-            kc-&gt;x=get_global_id(0);\n-            if(kc-&gt;x&lt;kc-&gt;maxX){\n-                int w = cellGrid-&gt;width;\n-                int h = cellGrid-&gt;height;\n-                int from = control-&gt;from;\n-                int to = control-&gt;to;\n-                int x = kc-&gt;x%w;\n-                int y = kc-&gt;x\/w;\n-                byte cell = cellGrid-&gt;cell[(long)(kc-&gt;x+from)];\n-                if(x&gt;0 && x&lt;w-1 && y&gt;0 && y&lt;h-1){\n-                    int count = val(cellGrid, from, w, x-1, y-1)\n-                        +val(cellGrid, from, w, x-1, y+0)\n-                        +val(cellGrid, from, w, x-1, y+1)\n-                        +val(cellGrid, from, w, x+0, y-1)\n-                        +val(cellGrid, from, w, x+0, y+1)\n-                        +val(cellGrid, from, w, x+1, y+0)\n-                        +val(cellGrid, from, w, x+1, y-1)\n-                        +val(cellGrid, from, w, x+1, y+1);\n-                    cell=(count==3 || count==2 && (int)cell==(int)-1?-1:0);\n-                }\n-                cellGrid-&gt;cell[(long)(kc-&gt;x+to)]=cell;\n-            }\n-            return;\n-        }\n-    <\/pre>\n-<\/body>\n-<\/html>\n","filename":"hat\/examples\/life\/DEMO.html","additions":0,"deletions":248,"binary":false,"changes":248,"status":"deleted"},{"patch":"@@ -44,0 +44,1 @@\n+            field.setAccessible(true);\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FieldLoadOpWrapper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-if [ $# -eq 0 ]; then \n+if [ $# -eq 0 ]; then\n@@ -67,1 +67,1 @@\n-   if [ $1 == headless ]; then \n+   if [ $1 == headless ]; then\n","filename":"hat\/hatrun.bash","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -14,0 +14,1 @@\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/chess.iml\" filepath=\"$PROJECT_DIR$\/chess.iml\" \/>\n","filename":"hat\/intellij\/.idea\/modules.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output \/>\n+    <content url=\"file:\/\/$MODULE_DIR$\/..\/hattricks\/chess\">\n+      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/hattricks\/chess\/src\/main\/java\" isTestSource=\"false\" \/>\n+      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/hattricks\/chess\/src\/main\/resources\" type=\"java-resource\" \/>\n+    <\/content>\n+    <orderEntry type=\"inheritedJdk\" \/>\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" \/>\n+    <orderEntry type=\"module\" module-name=\"hat\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_opencl\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_cuda\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_spirv\" \/>\n+  <\/component>\n+<\/module>\n","filename":"hat\/intellij\/chess.iml","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"}]}