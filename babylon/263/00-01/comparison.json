{"files":[{"patch":"@@ -484,1 +484,1 @@\n-        } else if (o instanceof CoreOp.UndefinedValueOp uo) {\n+        } else if (o instanceof CoreOp.UnknownValueOp uo) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2137,1 +2137,1 @@\n-     * The undefined value operation, whose result can model the value of an uninitialized variable.\n+     * The unknown value operation, whose result can model the value of an uninitialized variable.\n@@ -2139,2 +2139,2 @@\n-    @OpFactory.OpDeclaration(UndefinedValueOp.NAME)\n-    public static final class UndefinedValueOp extends CoreOp\n+    @OpFactory.OpDeclaration(UnknownValueOp.NAME)\n+    public static final class UnknownValueOp extends CoreOp\n@@ -2142,1 +2142,1 @@\n-        public static final String NAME = \"undefined.value\";\n+        public static final String NAME = \"unknown.value\";\n@@ -2146,1 +2146,1 @@\n-        public UndefinedValueOp(ExternalizedOp def) {\n+        public UnknownValueOp(ExternalizedOp def) {\n@@ -2152,1 +2152,1 @@\n-        UndefinedValueOp(UndefinedValueOp that, CopyContext cc) {\n+        UnknownValueOp(UnknownValueOp that, CopyContext cc) {\n@@ -2159,2 +2159,2 @@\n-        public UndefinedValueOp transform(CopyContext cc, OpTransformer ot) {\n-            return new UndefinedValueOp(this, cc);\n+        public UnknownValueOp transform(CopyContext cc, OpTransformer ot) {\n+            return new UnknownValueOp(this, cc);\n@@ -2163,1 +2163,1 @@\n-        UndefinedValueOp(TypeElement type) {\n+        UnknownValueOp(TypeElement type) {\n@@ -2166,1 +2166,1 @@\n-            this.type = UndefinedType.undefinedType(type);\n+            this.type = UnknownValueType.undefinedType(type);\n@@ -2295,1 +2295,1 @@\n-            return initOperand().type() instanceof UndefinedType;\n+            return initOperand().type() instanceof UnknownValueType;\n@@ -4063,1 +4063,1 @@\n-     * Creates an undefined value operation, whose result models the value of an uninitialized variable\n+     * Creates an unknown value operation, whose result models the value of an uninitialized variable\n@@ -4065,2 +4065,2 @@\n-     * @param valueType the undefined type's value type\n-     * @return the undefined operation.\n+     * @param valueType the unknown value type's value type\n+     * @return the unknown value operation.\n@@ -4068,2 +4068,2 @@\n-    public static UndefinedValueOp undefinedValue(TypeElement valueType) {\n-        return new UndefinedValueOp(valueType);\n+    public static UnknownValueOp unknownValue(TypeElement valueType) {\n+        return new UnknownValueOp(valueType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-                    case UndefinedType.NAME -> {\n+                    case UnknownValueType.NAME -> {\n@@ -41,1 +41,1 @@\n-                        yield UndefinedType.undefinedType(v);\n+                        yield UnknownValueType.undefinedType(v);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/CoreTypeFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-package java.lang.reflect.code.type;\n-\n-import java.lang.reflect.code.TypeElement;\n-import java.util.List;\n-import java.util.Objects;\n-\n-\/**\n- * An undefined type.\n- * <p>\n- * A value whose type is the undefined type holds an unknown value whose type\n- * is the undefined type's value type.\n- *\/\n-public class UndefinedType implements TypeElement {\n-    static final String NAME = \"Undefined\";\n-\n-    final TypeElement valueType;\n-\n-    UndefinedType(TypeElement valueType) {\n-        this.valueType = valueType;\n-    }\n-\n-    \/**\n-     * {@return the undefined type's value type}\n-     *\/\n-    public TypeElement valueType() {\n-        return valueType;\n-    }\n-\n-    @Override\n-    public ExternalizedTypeElement externalize() {\n-        return new ExternalizedTypeElement(NAME, List.of(valueType.externalize()));\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return externalize().toString();\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        return o instanceof UndefinedType that &&\n-                valueType.equals(that.valueType);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return valueType.hashCode();\n-    }\n-\n-    \/**\n-     * Constructs an undefined type.\n-     *\n-     * @param valueType the undefined type's value type.\n-     * @return an undefined type.\n-     *\/\n-    public static UndefinedType undefinedType(TypeElement valueType) {\n-        Objects.requireNonNull(valueType);\n-        return new UndefinedType(valueType);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/UndefinedType.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -0,0 +1,59 @@\n+package java.lang.reflect.code.type;\n+\n+import java.lang.reflect.code.TypeElement;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/**\n+ * An unknown value type. A value whose type is of the unknown value type has a value\n+ * of some other type but that value is unknown.\n+ *\/\n+public class UnknownValueType implements TypeElement {\n+    static final String NAME = \"UnknownValue\";\n+\n+    final TypeElement valueType;\n+\n+    UnknownValueType(TypeElement valueType) {\n+        this.valueType = valueType;\n+    }\n+\n+    \/**\n+     * {@return the unknown value type's value type}\n+     *\/\n+    public TypeElement valueType() {\n+        return valueType;\n+    }\n+\n+    @Override\n+    public ExternalizedTypeElement externalize() {\n+        return new ExternalizedTypeElement(NAME, List.of(valueType.externalize()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return externalize().toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        return o instanceof UnknownValueType that &&\n+                valueType.equals(that.valueType);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return valueType.hashCode();\n+    }\n+\n+    \/**\n+     * Constructs an unknown value type.\n+     *\n+     * @param valueType the unknown value type's value type.\n+     * @return an unknown value type.\n+     *\/\n+    public static UnknownValueType undefinedType(TypeElement valueType) {\n+        Objects.requireNonNull(valueType);\n+        return new UnknownValueType(valueType);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/UnknownValueType.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -845,1 +845,1 @@\n-                initOp = append(CoreOp.undefinedValue(javaType));\n+                initOp = append(CoreOp.unknownValue(javaType));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-                %2 : Undefined<int> = undefined.value;\n+                %2 : UnknownValue<int> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                %1 : Undefined<long> = undefined.value;\n+                %1 : UnknownValue<long> = unknown.value;\n@@ -89,1 +89,1 @@\n-                %3 : Undefined<long> = undefined.value;\n+                %3 : UnknownValue<long> = unknown.value;\n@@ -118,1 +118,1 @@\n-               %3 : Undefined<long> = undefined.value;\n+               %3 : UnknownValue<long> = unknown.value;\n@@ -147,1 +147,1 @@\n-               %3 : Undefined<long> = undefined.value;\n+               %3 : UnknownValue<long> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                %1 : Undefined<int> = undefined.value;\n+                %1 : UnknownValue<int> = unknown.value;\n@@ -75,1 +75,1 @@\n-                %3 : Undefined<int> = undefined.value;\n+                %3 : UnknownValue<int> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/LocalVarTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                %2 : Undefined<java.lang.Boolean> = undefined.value;\n+                %2 : UnknownValue<java.lang.Boolean> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/WhileLoopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}