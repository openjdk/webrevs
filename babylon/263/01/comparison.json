{"files":[{"patch":"@@ -173,0 +173,1 @@\n+            \/\/ @@@ throw exception if holding UINITIALIZED?\n@@ -179,0 +180,2 @@\n+\n+        static final Object UINITIALIZED = new Object();\n@@ -481,0 +484,2 @@\n+        } else if (o instanceof CoreOp.UnknownValueOp uo) {\n+            return VarBox.UINITIALIZED;\n@@ -487,0 +492,1 @@\n+            \/\/ @@@ throw exception if var holds VarBox.UINITIALIZED?\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/Interpreter.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2136,0 +2136,38 @@\n+    \/**\n+     * The unknown value operation, whose result can model the value of an uninitialized variable.\n+     *\/\n+    @OpFactory.OpDeclaration(UnknownValueOp.NAME)\n+    public static final class UnknownValueOp extends CoreOp\n+            implements Op.Pure {\n+        public static final String NAME = \"unknown.value\";\n+\n+        final TypeElement type;\n+\n+        public UnknownValueOp(ExternalizedOp def) {\n+            super(def);\n+\n+            this.type = def.resultType();\n+        }\n+\n+        UnknownValueOp(UnknownValueOp that, CopyContext cc) {\n+            super(that, cc);\n+\n+            this.type = that.type;\n+        }\n+\n+        @Override\n+        public UnknownValueOp transform(CopyContext cc, OpTransformer ot) {\n+            return new UnknownValueOp(this, cc);\n+        }\n+\n+        UnknownValueOp(TypeElement type) {\n+            super(NAME, List.of());\n+\n+            this.type = UnknownValueType.undefinedType(type);\n+        }\n+\n+        @Override\n+        public TypeElement resultType() {\n+            return type;\n+        }\n+    }\n@@ -2255,0 +2293,4 @@\n+\n+        public boolean isUnitialized() {\n+            return initOperand().type() instanceof UnknownValueType;\n+        }\n@@ -4020,0 +4062,10 @@\n+    \/**\n+     * Creates an unknown value operation, whose result models the value of an uninitialized variable\n+     *\n+     * @param valueType the unknown value type's value type\n+     * @return the unknown value operation.\n+     *\/\n+    public static UnknownValueOp unknownValue(TypeElement valueType) {\n+        return new UnknownValueOp(valueType);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/CoreOp.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -32,0 +32,11 @@\n+                    case UnknownValueType.NAME -> {\n+                        if (tree.arguments().size() != 1) {\n+                            throw new IllegalArgumentException();\n+                        }\n+\n+                        TypeElement v = thisThenF.constructType(tree.arguments().getFirst());\n+                        if (v == null) {\n+                            throw new IllegalArgumentException(\"Bad type: \" + tree);\n+                        }\n+                        yield UnknownValueType.undefinedType(v);\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/CoreTypeFactory.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+package java.lang.reflect.code.type;\n+\n+import java.lang.reflect.code.TypeElement;\n+import java.util.List;\n+import java.util.Objects;\n+\n+\/**\n+ * An unknown value type. A value whose type is of the unknown value type has a value\n+ * of some other type but that value is unknown.\n+ *\/\n+public class UnknownValueType implements TypeElement {\n+    static final String NAME = \"UnknownValue\";\n+\n+    final TypeElement valueType;\n+\n+    UnknownValueType(TypeElement valueType) {\n+        this.valueType = valueType;\n+    }\n+\n+    \/**\n+     * {@return the unknown value type's value type}\n+     *\/\n+    public TypeElement valueType() {\n+        return valueType;\n+    }\n+\n+    @Override\n+    public ExternalizedTypeElement externalize() {\n+        return new ExternalizedTypeElement(NAME, List.of(valueType.externalize()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return externalize().toString();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        return o instanceof UnknownValueType that &&\n+                valueType.equals(that.valueType);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return valueType.hashCode();\n+    }\n+\n+    \/**\n+     * Constructs an unknown value type.\n+     *\n+     * @param valueType the unknown value type's value type.\n+     * @return an unknown value type.\n+     *\/\n+    public static UnknownValueType undefinedType(TypeElement valueType) {\n+        Objects.requireNonNull(valueType);\n+        return new UnknownValueType(valueType);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/type\/UnknownValueType.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -841,0 +841,1 @@\n+                result = append(CoreOp.var(tree.name.toString(), typeToTypeElement(tree.type), initOp));\n@@ -842,1 +843,4 @@\n-                initOp = append(defaultValue(tree.type));\n+                \/\/ If uninitialized, then the var's operand is the result of the undefined value operation\n+                JavaType javaType = typeToTypeElement(tree.type);\n+                initOp = append(CoreOp.unknownValue(javaType));\n+                result = append(CoreOp.var(tree.name.toString(), javaType, initOp));\n@@ -844,1 +848,0 @@\n-            result = append(CoreOp.var(tree.name.toString(), typeToTypeElement(tree.type), initOp));\n@@ -1370,0 +1373,1 @@\n+                \/\/ @@@ use undefined value?\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-                %2 : int = constant @\"0\";\n+                %2 : UnknownValue<int> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/IfTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                %1 : long = constant @\"0\";\n+                %1 : UnknownValue<long> = unknown.value;\n@@ -89,1 +89,1 @@\n-                %3 : long = constant @\"0\";\n+                %3 : UnknownValue<long> = unknown.value;\n@@ -118,1 +118,1 @@\n-               %3 : long = constant @\"0\";\n+               %3 : UnknownValue<long> = unknown.value;\n@@ -147,1 +147,1 @@\n-               %3 : long = constant @\"0\";\n+               %3 : UnknownValue<long> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/ImplicitConversionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                %1 : int = constant @\"0\";\n+                %1 : UnknownValue<int> = unknown.value;\n@@ -75,1 +75,1 @@\n-                %3 : int = constant @\"0\";\n+                %3 : UnknownValue<int> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/LocalVarTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                %2 : java.lang.Boolean = constant @null;\n+                %2 : UnknownValue<java.lang.Boolean> = unknown.value;\n","filename":"test\/langtools\/tools\/javac\/reflect\/WhileLoopTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}