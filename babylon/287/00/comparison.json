{"files":[{"patch":"@@ -1,1 +1,1 @@\n-\/* vim: set ft=java: \n+\/* vim: set ft=java:\n@@ -31,4 +31,112 @@\n- var buildDir = BuildDir.of(hatDir.path(\"build\")).create();\n- var hatCoreDir = hatDir.existingDir(\"hat\");\n- var backends = hatDir.existingDir(\"backends\");\n- var examples = hatDir.existingDir(\"examples\");\n+\n+\n+\n+    \/*\n+     *  .\/\n+     *    +--build\/                     All jars, native libs and executables\n+     *    |    +--cmake-build-debug\/    All intermediate cmake artifacts\n+     *    |\n+     *    +--stage\/\n+     *    |    +--repo\/                 All downloaded maven assets\n+     *    |    |\n+     *    |    +--jextract\/             All jextracted files\n+     *    |    |    +--opencl\n+     *    |    |    +--opengl\n+     *    |    |    +--cuda\n+     *    |\n+     *    +--hat                        * Note maven style layout\n+     *    |    +--src\/main\/java\n+     *    |    |    +--hat\/\n+     *    |    |\n+     *    |    +--src\/main\/test\n+     *    |         +--hat\/\n+     *    |\n+     *    +--backends\n+     *    |    +--opencl                (*)\n+     *    |    +--ptx                   (*)\n+     *    |    +--mock                  (*)\n+     *    |    +--spirv                 (*)\n+     *    |    +--cuda                  (*)\n+     *    |    +--hip                   (*)\n+     *    |\n+     *    +--examples\n+     *    |    +--mandel                (*)\n+     *    |    +--squares               (*)\n+     *    |    +--heal                  (*)\n+     *    |    +--life                  (*)\n+     *    |    +--violajones            (*)\n+     *\n+     *\/\n+\n+    var hatCoreDir = hatDir.existingDir(\"hat\");\n+    var backendsDir = hatDir.existingDir(\"backends\");\n+    var examplesDir = hatDir.existingDir(\"examples\");\n+    var stageDir = hatDir.buildDir(\"stage\").create();\n+    var repoDir = stageDir.repoDir(\"repo\").create();\n+    var jextractDir = stageDir.buildDir(\"jextract\").create();\n+\n+    var buildDir = BuildDir.of(hatDir.path(\"build\")).create();\n+    var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n+\n+    var extractOpenCL= false;\n+    var extractOpenGL= false;\n+    if (extractOpenCL || extractOpenGL){\n+       var optionalJextract =fromPATH(\"jextract\");\n+       if (optionalJextract.isPresent()){\n+          var jextract = Jextract.of(optionalJextract.get());\n+          if (extractOpenCL){\n+             var extractedOpenCLJar = buildDir.jarFile(\"jextracted-opencl.jar\");\n+             if (extractedOpenCLJar.exists()) {\n+                println(\"We have \" + extractedOpenCLJar.path());\n+             } else {\n+                var openclSource = jextractDir.sourceDir(\"opencl\");\n+                if (openclSource.exists()) {\n+                   println(\"We have already extracted \" + openclSource.path() + \" to the staging area\");\n+                }else{\n+                   jextract.extract($ -> {\n+                      $.output(jextractDir).target_package(openclSource.fileName());\n+                      switch (os) {\n+                        case OS.Mac mac -> $\n+                           .compile_flag(\"-F\" + mac.appLibFrameworks())\n+                           .library(mac.frameworkLibrary(\"OpenCL\"))\n+                           .header(mac.frameworkHeader(\"OpenCL\", \"opencl.h\"));\n+                        case OS.Linux linux -> {}\n+                           default -> throw new RuntimeException(\"Unsupported OS: \" + os);\n+                      }\n+                   });\n+                } \n+                extractedOpenCLJar.create($ -> $.javac($$ -> $$.source(24).source_path(openclSource)));\n+             }\n+          }\n+          if (extractOpenGL){\n+             var extractedOpenGLJar = buildDir.jarFile(\"jextracted-opengl.jar\");\n+             if (extractedOpenGLJar.exists()) {\n+                println(\"We have \" + extractedOpenGLJar.path());\n+             } else {\n+               var openglSource = jextractDir.sourceDir(\"opengl\");\n+               if (openglSource.exists()) {\n+                   println(\"We have already extracted \" + openglSource.path() + \" to the staging area\");\n+               }else{\n+                  jextract.extract($ -> {\n+                     $.output(jextractDir).target_package(openglSource.fileName());\n+                     switch (os) {\n+                        case OS.Mac mac -> $\n+                           .compile_flag(\"-F\" + mac.appLibFrameworks())\n+                           .library(mac.frameworkLibrary(\"GLUT\"), mac.frameworkLibrary(\"OpenGL\")) .header(mac.frameworkHeader(\"GLUT\", \"glut.h\"));\n+                        case OS.Linux linux -> {}\n+                        default -> throw new RuntimeException(\"Unsupported OS: \" + os);\n+                     }\n+                  });\n+               }\n+               extractedOpenGLJar.create($ -> $.javac($$ -> $$.source(24).source_path(openglSource)));\n+             }\n+         }\n+      }else{\n+         println(\"Failed to locate jextract in the path.  Some examples and some backends will be skipped!\");\n+      }\n+   }\n+\n+\n+ var hatOpts = JavaOpts.of()\n+   .enable_preview().add_modules(\"jdk.incubator.code\")\n+   .add_exports(\"java.base\", List.of(\"jdk.internal\", \"jdk.internal.vm.annotation\"), \"ALL-UNNAMED\");\n@@ -37,6 +145,3 @@\n-   .javac($$->$$\n-     .add_modules(\"jdk.incubator.code\")\n-     .source(24)\n-     .enable_preview()\n-     .add_exports(\"java.base\", List.of(\"jdk.internal\", \"jdk.internal.vm.annotation\"), \"ALL-UNNAMED\")\n-     .source_path(hatCoreDir.sourceDir(\"src\/main\/java\"))\n+   .javac($$->$$.opts(hatOpts)\n+      .source(24)\n+      .source_path(hatCoreDir.sourceDir(\"src\/main\/java\"))\n@@ -46,3 +151,6 @@\n- record TypedDir(String type, Dir dir) {@Override public String toString(){return \"hat-\"+type()+\"-\" + dir().fileName() + \"-1.0.jar\";}}\n-\n-\/\/We need to exclude hip and spirv until we have staged beehive spirv. Once we have spirv staged remove hip and spirv from the regex below\n+\/\/ This allows us to essentially concat the backends and examples into a single stream\n+record TypedDir(String type, Dir dir) {\n+  public String jarName(){\n+    return \"hat-\"+type()+\"-\" + dir().fileName() + \"-1.0.jar\";\n+  }\n+}\n@@ -50,4 +158,3 @@\n- var stream =  Stream.concat(\n-     backends.subDirs().filter(dir-> !dir.matches(\"^.*(hip|spirv|hared|.idea)$\")).map(dir->new TypedDir(\"backend\",dir)),\n-     examples.subDirs().filter( dir-> !dir.matches(\"^.*(experiments|target)$\")).map(dir->new TypedDir(\"example\",dir))\n- );\n+\/\/We exclude hip and spirv until we have staged beehive spirv. Once we have spirv staged remove hip and spirv from the regex below\n+Predicate<Dir>  examplePredicate = example -> !example.matches(\"^.*(experiments|target|.idea)$\");\n+Predicate<Dir>  backendPredicate = backend -> !backend.matches(\"^.*(hip|spirv|shared|target|.idea)$\");\n@@ -55,3 +162,0 @@\n- if (hatDir.dir(\"hattricks\") instanceof Dir hattricks && hattricks.exists()) {\n-    stream = Stream.concat(stream,hattricks.subDirs().filter(dir -> dir.matches(\"^.*chess$\")).map(dir -> new TypedDir(\"example\", dir)));\n- }\n@@ -59,14 +163,17 @@\n- stream.parallel().peek(IO::println).forEach(typeDir->\n-    buildDir.jarFile(\n-       typeDir.toString(), $->$\n-        .javac($$->$$\n-           .add_modules(\"jdk.incubator.code\")\n-           .source(24)\n-           .enable_preview()\n-           .add_exports(\"java.base\", List.of(\"jdk.internal\", \"jdk.internal.vm.annotation\"), \"ALL-UNNAMED\")\n-           .class_path(hatJar)\n-           .source_path(typeDir.dir().sourceDir(\"src\/main\/java\"))\n-        )\n-        .whenExists(typeDir.dir().dir(\"src\/main\/resources\"), (dir, $$$)->$$$.dir_list(dir))\n-    )\n- );\n+Stream.concat(\n+  backendsDir.subDirs().filter(backendPredicate).map(backend->new TypedDir(\"backend\",backend)),\n+  examplesDir.subDirs().filter(examplePredicate).map(example->new TypedDir(\"example\",example))\n+  ) .parallel()\n+    .peek(typeDir->println(typeDir.jarName()))\n+    .forEach(typeDir->\n+       buildDir.jarFile(typeDir.jarName(), $->$\n+          .javac($$->$$.opts(hatOpts)\n+              .source(24)\n+              .class_path(hatJar)\n+              .source_path(typeDir.dir().sourceDir(\"src\/main\/java\"))\n+          )\n+          .whenExists(typeDir.dir().dir(\"src\/main\/resources\"), (resources,_)->$\n+              .dir_list(resources)\n+          )\n+       )\n+    );\n@@ -75,1 +182,0 @@\n- var cmakeBuildDir = buildDir.cMakeBuildDir(\"cmake-build-debug\");\n@@ -78,1 +184,1 @@\n-     .source_dir(backends)\n+     .source_dir(backendsDir)\n","filename":"hat\/bld","additions":143,"deletions":37,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.nio.file.StandardOpenOption;\n@@ -66,1 +67,1 @@\n-    public sealed interface PathHolder permits ClassPathEntry, DirPathHolder, FilePathHolder {\n+    public sealed interface PathHolder permits ClassPathEntry, DirPathHolder, Executable, FilePathHolder {\n@@ -93,7 +94,0 @@\n-        default XMLFile xmlFile(String s, String rootName, Consumer<XMLNode.XMLBuilder> xmlBuilderConsumer) {\n-            var file =  XMLFile.of(path().resolve(s));\n-            XMLNode.create(rootName,xmlBuilderConsumer);\n-\n-            return file;\n-        }\n-\n@@ -156,0 +150,4 @@\n+\n+        default SourcePathEntry sourceDir(String s) {\n+            return SourcePathEntry.of(path().resolve(s));\n+        }\n@@ -164,0 +162,7 @@\n+    public sealed interface Executable extends PathHolder {\n+        default boolean exists() {\n+            return Files.exists(path()) && Files.isRegularFile(path()) && Files.isExecutable(path());\n+        }\n+    }\n+\n+\n@@ -166,1 +171,0 @@\n-\n@@ -177,3 +181,1 @@\n-            entries()\n-                    .forEach(\n-                            pathHolder -> {\n+            entries().forEach(pathHolder -> {\n@@ -189,2 +191,2 @@\n-    public record ClassPath(\n-            List<ClassPathEntry> classPathEntries) implements PathHolderList<ClassPathEntry>, ClassPathEntryProvider {\n+    public record ClassPath(List<ClassPathEntry> classPathEntries)\n+            implements PathHolderList<ClassPathEntry>, ClassPathEntryProvider {\n@@ -200,3 +202,3 @@\n-            classPathEntryProviders.forEach(classPathEntryProvider ->\n-                    this.classPathEntries.addAll(classPathEntryProvider.classPathEntries())\n-            );\n+            classPathEntryProviders.forEach(\n+                    classPathEntryProvider ->\n+                            this.classPathEntries.addAll(classPathEntryProvider.classPathEntries()));\n@@ -261,1 +263,0 @@\n-\n@@ -373,0 +374,25 @@\n+    public record RepoDir(Path path) implements BuildDirHolder<RepoDir> {\n+        public static RepoDir of(Path path) {\n+            return new RepoDir(path);\n+        }\n+\n+        @Override\n+        public RepoDir create() {\n+            return RepoDir.of(mkdir(path()));\n+        }\n+\n+        @Override\n+        public RepoDir remove() {\n+            return RepoDir.of(rmdir(path()));\n+        }\n+\n+        public JarFile jarFile(String name) {\n+            return JarFile.of(path().resolve(name));\n+        }\n+\n+        public ClassPathEntryProvider classPathEntries(String... specs) {\n+            var repo = new MavenStyleRepository(this);\n+            return repo.classPathEntries(specs);\n+        }\n+    }\n+\n@@ -416,3 +442,0 @@\n-        public SourcePathEntry sourceDir(String s) {\n-            return SourcePathEntry.of(path().resolve(s));\n-        }\n@@ -420,1 +443,3 @@\n-        public XMLFile createPom(String comment, Consumer<XMLNode.PomXmlBuilder> pomXmlBuilderConsumer) {\n+\n+        public XMLFile createPom(\n+                String comment, Consumer<XMLNode.PomXmlBuilder> pomXmlBuilderConsumer) {\n@@ -470,0 +495,4 @@\n+        public RepoDir repoDir(String name) {\n+            return RepoDir.of(path().resolve(name));\n+        }\n+\n@@ -500,0 +529,12 @@\n+\n+        public SearchableTextFile textFile(String file, List<String> strings) {\n+            SearchableTextFile textFile = SearchableTextFile.of(path().resolve(file));\n+            try {\n+                PrintWriter pw = new PrintWriter(Files.newOutputStream(textFile.path(), StandardOpenOption.CREATE));\n+                strings.forEach(pw::print);\n+                pw.close();\n+                return textFile;\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n@@ -528,1 +569,2 @@\n-        static Path containing(String suffix, String text) {\n+\n+        static Path tempContaining(String suffix, String text) {\n@@ -563,0 +605,11 @@\n+    public record Jextract(Path path) implements Executable {\n+        public static Jextract of(Path path) {\n+            return new Jextract(path);\n+        }\n+\n+        public void extract(Consumer<JExtractBuilder> jextractBuilderConsumer) {\n+            jextract(this, jextractBuilderConsumer);\n+        }\n+    }\n+\n+\n@@ -596,1 +649,1 @@\n-            return XMLFile.of(TextFile.containing(\"xml\", text));\n+            return XMLFile.of(TextFile.tempContaining(\"xml\", text));\n@@ -600,2 +653,0 @@\n-\n-\n@@ -608,1 +659,1 @@\n-            return TestNGSuiteFile.of(TextFile.containing(\"xml\", text));\n+            return TestNGSuiteFile.of(TextFile.tempContaining(\"xml\", text));\n@@ -659,1 +710,1 @@\n-    public record Java(String version, File home) {\n+    public record Java(String version, Dir home) {\n@@ -663,1 +714,1 @@\n-            new Java(System.getProperty(\"java.version\"), new File(System.getProperty(\"java.home\")));\n+            new Java(System.getProperty(\"java.version\"), Dir.of(System.getProperty(\"java.home\")));\n@@ -665,1 +716,1 @@\n-    public record User(File home, File pwd) {\n+    public record User(Dir home, Dir pwd) {\n@@ -669,53 +720,1 @@\n-            new User(new File(System.getProperty(\"user.home\")), new File(System.getProperty(\"user.dir\")));\n-\n-  \/*\n-      static class POM {\n-          static Pattern varPattern = Pattern.compile(\"\\\\$\\\\{([^}]*)\\\\}\");\n-          static public String varExpand(Map<String, String> props, String value) { \/\/ recurse\n-              String result = value;\n-              if (varPattern.matcher(value) instanceof Matcher matcher && matcher.find()) {\n-                  var v = matcher.groupId(1);\n-                  result = varExpand(props, value.substring(0, matcher.start())\n-                          + (v.startsWith(\"env\")\n-                          ? System.getenv(v.substring(4))\n-                          : props.get(v))\n-                          + value.substring(matcher.end()));\n-                  \/\/out.println(\"incomming ='\"+value+\"'  v= '\"+v+\"' value='\"+value+\"'->'\"+result+\"'\");\n-              }\n-              return result;\n-          }\n-\n-          POM(Path dir) throws Throwable {\n-              var topPom = new XMLNode(new File(dir.toFile(), \"pom.xml\"));\n-              var babylonDirKey = \"babylon.dir\";\n-              var spirvDirKey = \"beehive.spirv.toolkit.dir\";\n-              var hatDirKey = \"hat.dir\";\n-              var interestingKeys = Set.of(spirvDirKey, babylonDirKey, hatDirKey);\n-              var requiredDirKeys = Set.of(babylonDirKey, hatDirKey);\n-              var dirKeyToDirMap = new HashMap<String, File>();\n-              var props = new HashMap<String, String>();\n-\n-              topPom.children.stream().filter(e -> e.element.getNodeName().equals(\"properties\")).forEach(properties ->\n-                      properties.children.stream().forEach(property -> {\n-                          var key = property.element.getNodeName();\n-                          var value = varExpand(props, property.element.getTextContent());\n-                          props.put(key, value);\n-                          if (interestingKeys.contains(key)) {\n-                              var file = new File(value);\n-                              if (requiredDirKeys.contains(key) && !file.exists()) {\n-                                  System.err.println(\"ERR pom.xml has property '\" + key + \"' with value '\" + value + \"' but that dir does not exists!\");\n-                                  System.exit(1);\n-                              }\n-                              dirKeyToDirMap.put(key, file);\n-                          }\n-                      })\n-              );\n-              for (var key : requiredDirKeys) {\n-                  if (!props.containsKey(key)) {\n-                      System.err.println(\"ERR pom.xml expected to have property '\" + key + \"' \");\n-                      System.exit(1);\n-                  }\n-              }\n-          }\n-      }\n-  *\/\n+            new User(Dir.of(System.getProperty(\"user.home\")), Dir.of(System.getProperty(\"user.dir\")));\n@@ -772,4 +771,1 @@\n-    public abstract static class JavaToolBuilder<T extends JavaToolBuilder<T>> extends Builder<T> {\n-        public ClassPath classPath;\n-        public List<String> opts = new ArrayList<>();\n-        public Path jdk = Path.of(System.getProperty(\"java.home\"));\n+    public abstract static class OptsBuilder<T extends OptsBuilder<T>> extends Builder<T> {\n@@ -777,4 +773,1 @@\n-        public T jdk(Path jdk) {\n-            this.jdk = jdk;\n-            return self();\n-        }\n+        public List<String> opts = new ArrayList<>();\n@@ -792,0 +785,18 @@\n+    }\n+\n+    public static class JavaOpts<T extends JavaOpts<T>> extends OptsBuilder<T> {\n+        public Dir jdk = java.home;\n+\n+        public T opts(JavaOpts<?> javaOpts) {\n+            return opts(javaOpts.opts);\n+        }\n+\n+        static public JavaOpts<?> of() {\n+            return new JavaOpts<>();\n+        }\n+\n+        public T jdk(Dir jdk) {\n+            this.jdk = jdk;\n+            return self();\n+        }\n+\n@@ -795,2 +806,3 @@\n-        public T add_modules(String ... modules) {\n-            List.of(modules).forEach(module->  opts(\"--add-modules=\" + module));\n+\n+        public T add_modules(String... modules) {\n+            List.of(modules).forEach(module -> opts(\"--add-modules=\" + module));\n@@ -809,0 +821,5 @@\n+    }\n+\n+    public abstract static class JavaToolBuilder<T extends JavaToolBuilder<T>> extends JavaOpts<T> {\n+        public ClassPath classPath;\n+\n@@ -942,1 +959,0 @@\n-\n@@ -944,1 +960,1 @@\n-        execOpts.add(javaBuilder.jdk.resolve(\"bin\/java\").toString());\n+        execOpts.add(javaBuilder.jdk.path().resolve(\"bin\/java\").toString());\n@@ -979,1 +995,0 @@\n-\n@@ -983,7 +998,0 @@\n-        public MavenStyleRepository repo;\n-\n-        public FormatBuilder repo(MavenStyleRepository repo) {\n-            this.repo = repo;\n-            return this;\n-        }\n-\n@@ -1000,1 +1008,1 @@\n-    public static void format(Consumer<FormatBuilder> formatBuilderConsumer) {\n+    public static void format(RepoDir repoDir, Consumer<FormatBuilder> formatBuilderConsumer) {\n@@ -1003,25 +1011,22 @@\n-        var dag = formatBuilder.repo.dag(\"com.google.googlejavaformat\/google-java-format\");\n-        \/\/ var formatterJars = Bldr.ClassPath.of().add(dag.classPath());\n-\n-        java(\n-                $ ->\n-                        $.verbose()\n-                                .enable_preview()\n-                                .enable_native_access(\"ALL-UNNAMED\")\n-                                .add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n-                                .add_exports(\"jdk.compiler\",\n-                                        List.of(\n-                                                \"com.sun.tools.javac.api\",\n-                                                \"com.sun.tools.javac.code\",\n-                                                \"com.sun.tools.javac.file\",\n-                                                \"com.sun.tools.javac.main\",\n-                                                \"com.sun.tools.javac.parser\",\n-                                                \"com.sun.tools.javac.tree\",\n-                                                \"com.sun.tools.javac.util\"),\n-                                        \"ALL-UNNAMED\"\n-                                )\n-                                .class_path(dag.classPath())\n-                                .main_class(\"com.google.googlejavaformat.java.Main\")\n-                                \/\/  .args(\"--help\")\n-                                .args(\"-r\")\n-                                .args(formatBuilder.sourcePath.javaFiles().map(Path::toString).toList()));\n+        var classPathEntries = repoDir.classPathEntries(\"com.google.googlejavaformat\/google-java-format\");\n+\n+        java($ -> $\n+                .verbose()\n+                .enable_preview()\n+                .enable_native_access(\"ALL-UNNAMED\")\n+                .add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n+                .add_exports(\n+                        \"jdk.compiler\",\n+                        List.of(\n+                                \"com.sun.tools.javac.api\",\n+                                \"com.sun.tools.javac.code\",\n+                                \"com.sun.tools.javac.file\",\n+                                \"com.sun.tools.javac.main\",\n+                                \"com.sun.tools.javac.parser\",\n+                                \"com.sun.tools.javac.tree\",\n+                                \"com.sun.tools.javac.util\"),\n+                        \"ALL-UNNAMED\")\n+                .class_path(classPathEntries)\n+                .main_class(\"com.google.googlejavaformat.java.Main\")\n+                .args(\"-r\")\n+                .args(formatBuilder.sourcePath.javaFiles().map(Path::toString).toList()));\n@@ -1033,2 +1038,0 @@\n-\n-        public MavenStyleRepository repo;\n@@ -1038,5 +1041,0 @@\n-        public TestNGBuilder repo(MavenStyleRepository repo) {\n-            this.repo = repo;\n-            return this;\n-        }\n-\n@@ -1113,2 +1111,1 @@\n-    public static void testng(\n-            Consumer<TestNGBuilder> testNGBuilderConsumer) {\n+    public static void testng(RepoDir repoDir, Consumer<TestNGBuilder> testNGBuilderConsumer) {\n@@ -1118,13 +1115,22 @@\n-        var text = XMLNode.create(\"suite\", $ -> {\n-            $.attr(\"name\", testNGBuilder.suiteBuilder.name);\n-            testNGBuilder.suiteBuilder.testBuilders.forEach(tb -> {\n-                $.element(\"test\", $$ -> $$\n-                        .attr(\"name\", tb.name)\n-                        .element(\"classes\", $$$ ->\n-                                tb.classNames.forEach(className -> $$$\n-                                        .element(\"class\", $$$$->$$$$.attr(\"name\", className))\n-                                )\n-                        )\n-                );\n-            });\n-        }).toString();\n+        var text =\n+                XMLNode.create(\n+                                \"suite\",\n+                                $ -> {\n+                                    $.attr(\"name\", testNGBuilder.suiteBuilder.name);\n+                                    testNGBuilder.suiteBuilder.testBuilders.forEach(\n+                                            tb -> {\n+                                                $.element(\n+                                                        \"test\",\n+                                                        $$ ->\n+                                                                $$.attr(\"name\", tb.name)\n+                                                                        .element(\n+                                                                                \"classes\",\n+                                                                                $$$ ->\n+                                                                                        tb.classNames.forEach(\n+                                                                                                className ->\n+                                                                                                        $$$.element(\n+                                                                                                                \"class\",\n+                                                                                                                $$$$ -> $$$$.attr(\"name\", className)))));\n+                                            });\n+                                })\n+                        .toString();\n@@ -1133,0 +1139,1 @@\n+        var mavenJars = repoDir.classPathEntries(\"org.testng\/testng\", \"org.slf4j\/slf4j-api\");\n@@ -1134,1 +1141,0 @@\n-        var dag = testNGBuilder.repo.dag(\"org.testng\/testng\", \"org.slf4j\/slf4j-api\");\n@@ -1136,8 +1142,9 @@\n-        var testJar = testNGBuilder.testJar.create($ -> $.javac(\n-                        $$ ->\n-                                $$.source(24)\n-                                        .enable_preview()\n-                                        .class_path(testNGBuilder.classPath, dag)\n-                                        .source_path(testNGBuilder.sourcePath)\n-                )\n-        );\n+        var testJar =\n+                testNGBuilder.testJar.create(\n+                        $ ->\n+                                $.javac(\n+                                        $$ ->\n+                                                $$.source(24)\n+                                                        .enable_preview()\n+                                                        .class_path(testNGBuilder.classPath, mavenJars)\n+                                                        .source_path(testNGBuilder.sourcePath)));\n@@ -1148,1 +1155,1 @@\n-                                .add_exports(\"java.base\", \"jdk.internal\", \"ALL_UNNAMED\")\n+                                .add_exports(\"java.base\", \"jdk.internal\", \"ALL-UNNAMED\")\n@@ -1150,1 +1157,1 @@\n-                                .class_path(testNGBuilder.classPath, dag, testJar)\n+                                .class_path(testNGBuilder.classPath, mavenJars, testJar)\n@@ -1179,13 +1186,0 @@\n-\/*\n-    public JarBuilder dir_list(Predicate<DirPathHolder<?>> predicate, DirPathHolder<?>... dirs) {\n-      Stream.of(dirs)\n-          .filter(predicate)\n-          .forEach(\n-              optionalDir -> {\n-                this.dirList =\n-                    (this.dirList == null)\n-                        ? DirPath.of().add(optionalDir)\n-                        : this.dirList.add(optionalDir);\n-              });\n-      return this;\n-    } *\/\n@@ -1335,3 +1329,0 @@\n-        public Path cwd;\n-\n-        public Path home;\n@@ -1339,28 +1330,1 @@\n-        private Path output;\n-\n-        public List<String> opts = new ArrayList<>();\n-\n-        public JExtractBuilder opts(List<String> opts) {\n-            this.opts.addAll(opts);\n-            return self();\n-        }\n-\n-        public JExtractBuilder opts(String... opts) {\n-            opts(Arrays.asList(opts));\n-            return self();\n-        }\n-\n-        public JExtractBuilder() {\n-            opts.add(\"jextract\");\n-        }\n-\n-        public JExtractBuilder cwd(Path cwd) {\n-            this.cwd = cwd;\n-            return this;\n-        }\n-\n-        public JExtractBuilder home(Path home) {\n-            this.home = home;\n-            opts.set(0, home.resolve(\"bin\/jextract\").toString());\n-            return this;\n-        }\n+        private BuildDir output;\n@@ -1370,1 +1334,0 @@\n-            opts(\"--target-package\", targetPackage);\n@@ -1374,1 +1337,1 @@\n-        public JExtractBuilder output(Path output) {\n+        public JExtractBuilder output(BuildDir output) {\n@@ -1376,1 +1339,0 @@\n-            opts(\"--output\", output.toString());\n@@ -1382,3 +1344,0 @@\n-            for (Path library : libraries) {\n-                opts(\"--library\", \":\" + library);\n-            }\n@@ -1395,1 +1354,0 @@\n-            this.opts.add(header.toString());\n@@ -1400,1 +1358,4 @@\n-    public static void jextract(Consumer<JExtractBuilder> jextractBuilderConsumer) {\n+    public static void jextract(Jextract executable, Consumer<JExtractBuilder> jextractBuilderConsumer) {\n+        var exePath = executable.path;\n+        var homePath = exePath.getParent().getParent();\n+\n@@ -1403,9 +1364,2 @@\n-        System.out.println(jExtractBuilder.opts);\n-        var compilerFlags = jExtractBuilder.cwd.resolve(\"compiler_flags.txt\");\n-        try {\n-            PrintWriter compilerFlagsWriter = new PrintWriter(Files.newOutputStream(compilerFlags));\n-            compilerFlagsWriter.println(jExtractBuilder.compileFlags);\n-            compilerFlagsWriter.close();\n-            Files.createDirectories(jExtractBuilder.output);\n-            try {\n-                var processBuilder = new ProcessBuilder();\n+        List<String> opts = new ArrayList<>();\n+        opts.add(executable.path().toString());\n@@ -1413,9 +1367,10 @@\n-                if (jExtractBuilder.output != null) {\n-                    processBuilder.directory(jExtractBuilder.output.toFile());\n-                }\n-                processBuilder.inheritIO().command(jExtractBuilder.opts);\n-                var process = processBuilder.start();\n-                if (jExtractBuilder.verbose) {\n-                    print(jExtractBuilder.opts);\n-                }\n-                process.waitFor();\n+        if (jExtractBuilder.targetPackage != null) {\n+            opts.addAll(List.of(\"--target-package\", jExtractBuilder.targetPackage));\n+        }\n+        if (jExtractBuilder.output != null) {\n+            jExtractBuilder.output.create();\n+            opts.addAll(List.of(\"--output\", jExtractBuilder.output.path().toString()));\n+        }\n+        for (Path library : jExtractBuilder.libraries) {\n+            opts.addAll(List.of(\"--library\", \":\" + library));\n+        }\n@@ -1423,3 +1378,3 @@\n-            } catch (InterruptedException | IOException ie) {\n-                System.out.println(ie);\n-            }\n+        for (Path header : jExtractBuilder.headers) {\n+            opts.add(header.toString());\n+        }\n@@ -1427,3 +1382,18 @@\n-            Files.deleteIfExists(compilerFlags);\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n+        if (jExtractBuilder.compileFlags != null && !jExtractBuilder.compileFlags.isEmpty()) {\n+            jExtractBuilder.output.textFile(\"compile_flags.txt\", jExtractBuilder.compileFlags);\n+        }\n+\n+        if (jExtractBuilder.verbose) {\n+            StringBuilder sb = new StringBuilder();\n+            opts.forEach(opt -> (sb.isEmpty() ? sb : sb.append(\" \")).append(opt));\n+            println(sb);\n+        }\n+        var processBuilder = new ProcessBuilder();\n+        if (jExtractBuilder.output != null) {\n+            processBuilder.directory(jExtractBuilder.output.path().toFile());\n+        }\n+        processBuilder.inheritIO().command(opts);\n+        try {\n+            processBuilder.start().waitFor();\n+        } catch (InterruptedException | IOException ie) {\n+            throw new RuntimeException(ie);\n@@ -1434,0 +1404,3 @@\n+        static SearchableTextFile of(Path path) {\n+            return new SearchableTextFile(path);\n+        }\n@@ -1504,1 +1477,1 @@\n-        var optional = executablesInPath(\"jextract\").findFirst();\n+        var optional = fromPATH(\"jextract\");\n@@ -1562,2 +1535,2 @@\n-    public static Stream<Path> executablesInPath(String name) {\n-        return Arrays.asList(System.getenv(\"PATH\").split(File.pathSeparator)).stream()\n+    public static Optional<Path> fromPATH(String name) {\n+        return Arrays.stream(System.getenv(\"PATH\").split(File.pathSeparator))\n@@ -1565,1 +1538,1 @@\n-                .filter(Files::isExecutable);\n+                .filter(Files::isExecutable).findFirst();\n@@ -1568,0 +1541,1 @@\n+\n@@ -1596,1 +1570,3 @@\n-                                                                \"java.base\", List.of(\"jdk.internal\", \"jdk.internal.vm.annotation\"), \"ALL-UNNAMED\")\n+                                                                \"java.base\",\n+                                                                List.of(\"jdk.internal\", \"jdk.internal.vm.annotation\"),\n+                                                                \"ALL-UNNAMED\")\n","filename":"hat\/bldr\/Bldr.java","additions":219,"deletions":243,"binary":false,"changes":462,"status":"modified"},{"patch":"@@ -3,4 +3,2 @@\n-import static bldr.Bldr.assertExists;\n-import static bldr.Bldr.curl;\n-import static java.io.IO.print;\n-import static java.io.IO.println;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n@@ -25,2 +23,4 @@\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n+\n+import static bldr.Bldr.curl;\n+import static java.io.IO.print;\n+import static java.io.IO.println;\n@@ -29,28 +29,29 @@\n-  private final String repoBase = \"https:\/\/repo1.maven.org\/maven2\/\";\n-  private final String searchBase = \"https:\/\/search.maven.org\/solrsearch\/\";\n-  public Bldr.BuildDir dir;\n-\n-  Bldr.JarFile jarFile(Id id) {\n-    return dir.jarFile(id.artifactAndVersion() + \".jar\");\n-  }\n-\n-  Bldr.XMLFile pomFile(Id id) {\n-    return dir.xmlFile(id.artifactAndVersion() + \".pom\");\n-  }\n-\n-  public enum Scope {\n-    TEST,\n-    COMPILE,\n-    PROVIDED,\n-    RUNTIME,\n-    SYSTEM;\n-\n-    static Scope of(String name) {\n-      return switch (name.toLowerCase()) {\n-        case \"test\" -> TEST;\n-        case \"compile\" -> COMPILE;\n-        case \"provided\" -> PROVIDED;\n-        case \"runtime\" -> RUNTIME;\n-        case \"system\" -> SYSTEM;\n-        default -> COMPILE;\n-      };\n+    private final String repoBase = \"https:\/\/repo1.maven.org\/maven2\/\";\n+    private final String searchBase = \"https:\/\/search.maven.org\/solrsearch\/\";\n+    public Bldr.RepoDir dir;\n+\n+    Bldr.JarFile jarFile(Id id) {\n+        return dir.jarFile(id.artifactAndVersion() + \".jar\");\n+    }\n+\n+    Bldr.XMLFile pomFile(Id id) {\n+        return dir.xmlFile(id.artifactAndVersion() + \".pom\");\n+    }\n+\n+    public enum Scope {\n+        TEST,\n+        COMPILE,\n+        PROVIDED,\n+        RUNTIME,\n+        SYSTEM;\n+\n+        static Scope of(String name) {\n+            return switch (name.toLowerCase()) {\n+                case \"test\" -> TEST;\n+                case \"compile\" -> COMPILE;\n+                case \"provided\" -> PROVIDED;\n+                case \"runtime\" -> RUNTIME;\n+                case \"system\" -> SYSTEM;\n+                default -> COMPILE;\n+            };\n+        }\n@@ -58,1 +59,0 @@\n-  }\n@@ -60,1 +60,1 @@\n-  public record GroupAndArtifactId(GroupId groupId, ArtifactId artifactId) {\n+    public record GroupAndArtifactId(GroupId groupId, ArtifactId artifactId) {\n@@ -62,4 +62,4 @@\n-    public static GroupAndArtifactId of(String groupAndArtifactId) {\n-      int idx = groupAndArtifactId.indexOf('\/');\n-      return of(groupAndArtifactId.substring(0, idx), groupAndArtifactId.substring(idx + 1));\n-    }\n+        public static GroupAndArtifactId of(String groupAndArtifactId) {\n+            int idx = groupAndArtifactId.indexOf('\/');\n+            return of(groupAndArtifactId.substring(0, idx), groupAndArtifactId.substring(idx + 1));\n+        }\n@@ -67,3 +67,3 @@\n-    public static GroupAndArtifactId of(GroupId groupId, ArtifactId artifactId) {\n-      return new GroupAndArtifactId(groupId, artifactId);\n-    }\n+        public static GroupAndArtifactId of(GroupId groupId, ArtifactId artifactId) {\n+            return new GroupAndArtifactId(groupId, artifactId);\n+        }\n@@ -71,3 +71,3 @@\n-    public static GroupAndArtifactId of(String groupId, String artifactId) {\n-      return of(GroupId.of(groupId), ArtifactId.of(artifactId));\n-    }\n+        public static GroupAndArtifactId of(String groupId, String artifactId) {\n+            return of(GroupId.of(groupId), ArtifactId.of(artifactId));\n+        }\n@@ -75,3 +75,3 @@\n-    String location() {\n-      return groupId().string().replace('.', '\/') + \"\/\" + artifactId().string();\n-    }\n+        String location() {\n+            return groupId().string().replace('.', '\/') + \"\/\" + artifactId().string();\n+        }\n@@ -79,3 +79,4 @@\n-    @Override\n-    public String toString() {\n-      return groupId() + \"\/\" + artifactId();\n+        @Override\n+        public String toString() {\n+            return groupId() + \"\/\" + artifactId();\n+        }\n@@ -83,1 +84,0 @@\n-  }\n@@ -85,2 +85,2 @@\n-  public sealed interface Id permits DependencyId, MetaDataId {\n-    MavenStyleRepository mavenStyleRepository();\n+    public sealed interface Id permits DependencyId, MetaDataId {\n+        MavenStyleRepository mavenStyleRepository();\n@@ -88,1 +88,1 @@\n-    GroupAndArtifactId groupAndArtifactId();\n+        GroupAndArtifactId groupAndArtifactId();\n@@ -90,9 +90,1 @@\n-    VersionId versionId();\n-\n-    default String artifactAndVersion() {\n-      return groupAndArtifactId().artifactId().string() + '-' + versionId();\n-    }\n-\n-    default String location() {\n-      return mavenStyleRepository().repoBase + groupAndArtifactId().location() + \"\/\" + versionId();\n-    }\n+        VersionId versionId();\n@@ -100,27 +92,3 @@\n-    default URL url(String suffix) {\n-      try {\n-        return new URI(location() + \"\/\" + artifactAndVersion() + \".\" + suffix).toURL();\n-      } catch (MalformedURLException | URISyntaxException e) {\n-        throw new RuntimeException(e);\n-      }\n-    }\n-  }\n-\n-  public record DependencyId(\n-      MavenStyleRepository mavenStyleRepository,\n-      GroupAndArtifactId groupAndArtifactId,\n-      VersionId versionId,\n-      Scope scope,\n-      boolean required)\n-      implements Id {\n-    @Override\n-    public String toString() {\n-      return groupAndArtifactId().toString()\n-          + \"\/\"\n-          + versionId()\n-          + \":\"\n-          + scope.toString()\n-          + \":\"\n-          + (required ? \"Required\" : \"Optiona\");\n-    }\n-  }\n+        default String artifactAndVersion() {\n+            return groupAndArtifactId().artifactId().string() + '-' + versionId();\n+        }\n@@ -128,6 +96,3 @@\n-  public record Pom(MetaDataId metaDataId, XMLNode xmlNode) {\n-    Bldr.JarFile getJar() {\n-      var jarFile = metaDataId.mavenStyleRepository().jarFile(metaDataId); \/\/ ;\n-      metaDataId.mavenStyleRepository.queryAndCache(metaDataId.jarURL(), jarFile);\n-      return jarFile;\n-    }\n+        default String location() {\n+            return mavenStyleRepository().repoBase + groupAndArtifactId().location() + \"\/\" + versionId();\n+        }\n@@ -135,2 +100,7 @@\n-    String description() {\n-      return xmlNode().xpathQueryString(\"\/project\/description\/text()\");\n+        default URL url(String suffix) {\n+            try {\n+                return new URI(location() + \"\/\" + artifactAndVersion() + \".\" + suffix).toURL();\n+            } catch (MalformedURLException | URISyntaxException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n@@ -139,14 +109,17 @@\n-    Stream<DependencyId> dependencies() {\n-      return xmlNode()\n-          .nodes(xmlNode.xpath(\"\/project\/dependencies\/dependency\"))\n-          .map(node -> new XMLNode((Element) node))\n-          .map(\n-              dependency ->\n-                  new DependencyId(\n-                      metaDataId().mavenStyleRepository(),\n-                      GroupAndArtifactId.of(\n-                          GroupId.of(dependency.xpathQueryString(\"groupId\/text()\")),\n-                          ArtifactId.of(dependency.xpathQueryString(\"artifactId\/text()\"))),\n-                      VersionId.of(dependency.xpathQueryString(\"version\/text()\")),\n-                      Scope.of(dependency.xpathQueryString(\"scope\/text()\")),\n-                      !Boolean.parseBoolean(dependency.xpathQueryString(\"optional\/text()\"))));\n+    public record DependencyId(\n+            MavenStyleRepository mavenStyleRepository,\n+            GroupAndArtifactId groupAndArtifactId,\n+            VersionId versionId,\n+            Scope scope,\n+            boolean required)\n+            implements Id {\n+        @Override\n+        public String toString() {\n+            return groupAndArtifactId().toString()\n+                    + \"\/\"\n+                    + versionId()\n+                    + \":\"\n+                    + scope.toString()\n+                    + \":\"\n+                    + (required ? \"Required\" : \"Optiona\");\n+        }\n@@ -155,4 +128,6 @@\n-    Stream<DependencyId> requiredDependencies() {\n-      return dependencies().filter(DependencyId::required);\n-    }\n-  }\n+    public record Pom(MetaDataId metaDataId, XMLNode xmlNode) {\n+        Bldr.JarFile getJar() {\n+            var jarFile = metaDataId.mavenStyleRepository().jarFile(metaDataId); \/\/ ;\n+            metaDataId.mavenStyleRepository.queryAndCache(metaDataId.jarURL(), jarFile);\n+            return jarFile;\n+        }\n@@ -160,6 +135,2 @@\n-  public Optional<Pom> pom(Id id) {\n-    return switch (id) {\n-      case MetaDataId metaDataId -> {\n-        if (metaDataId.versionId() == VersionId.UNSPECIFIED) {\n-          \/\/ println(\"what to do when the version is unspecified\");\n-          yield Optional.empty();\n+        String description() {\n+            return xmlNode().xpathQueryString(\"\/project\/description\/text()\");\n@@ -167,8 +138,15 @@\n-        try {\n-          yield Optional.of(\n-              new Pom(\n-                  metaDataId,\n-                  queryAndCache(\n-                      metaDataId.pomURL(), metaDataId.mavenStyleRepository.pomFile(metaDataId))));\n-        } catch (Throwable e) {\n-          throw new RuntimeException(e);\n+\n+        Stream<DependencyId> dependencies() {\n+            return xmlNode()\n+                    .nodes(xmlNode.xpath(\"\/project\/dependencies\/dependency\"))\n+                    .map(node -> new XMLNode((Element) node))\n+                    .map(\n+                            dependency ->\n+                                    new DependencyId(\n+                                            metaDataId().mavenStyleRepository(),\n+                                            GroupAndArtifactId.of(\n+                                                    GroupId.of(dependency.xpathQueryString(\"groupId\/text()\")),\n+                                                    ArtifactId.of(dependency.xpathQueryString(\"artifactId\/text()\"))),\n+                                            VersionId.of(dependency.xpathQueryString(\"version\/text()\")),\n+                                            Scope.of(dependency.xpathQueryString(\"scope\/text()\")),\n+                                            !Boolean.parseBoolean(dependency.xpathQueryString(\"optional\/text()\"))));\n@@ -176,20 +154,3 @@\n-      }\n-      case DependencyId dependencyId -> {\n-        if (metaData(\n-                    id.groupAndArtifactId().groupId().string(),\n-                    id.groupAndArtifactId().artifactId().string())\n-                instanceof Optional<MetaData> optionalMetaData\n-            && optionalMetaData.isPresent()) {\n-          if (optionalMetaData\n-                      .get()\n-                      .metaDataIds()\n-                      .filter(metaDataId -> metaDataId.versionId().equals(id.versionId()))\n-                      .findFirst()\n-                  instanceof Optional<MetaDataId> metaId\n-              && metaId.isPresent()) {\n-            yield pom(metaId.get());\n-          } else {\n-            yield Optional.empty();\n-          }\n-        } else {\n-          yield Optional.empty();\n+\n+        Stream<DependencyId> requiredDependencies() {\n+            return dependencies().filter(DependencyId::required);\n@@ -197,36 +158,0 @@\n-      }\n-      default -> throw new IllegalStateException(\"Unexpected value: \" + id);\n-    };\n-  }\n-\n-  public Optional<Pom> pom(GroupAndArtifactId groupAndArtifactId) {\n-    var metaData = metaData(groupAndArtifactId).orElseThrow();\n-    var metaDataId = metaData.latestMetaDataId().orElseThrow();\n-    return pom(metaDataId);\n-  }\n-\n-  record IdVersions(GroupAndArtifactId groupAndArtifactId, Set<Id> versions) {\n-    static IdVersions of(GroupAndArtifactId groupAndArtifactId) {\n-      return new IdVersions(groupAndArtifactId, new HashSet<>());\n-    }\n-  }\n-\n-\n-\n-  public static class Dag implements Bldr.ClassPathEntryProvider {\n-    private final MavenStyleRepository repo;\n-    private final List<GroupAndArtifactId> rootGroupAndArtifactIds;\n-    Map<GroupAndArtifactId, IdVersions> nodes = new HashMap<>();\n-    Map<IdVersions, List<IdVersions>> edges = new HashMap<>();\n-\n-    Dag add(Id from, Id to) {\n-      var fromNode =\n-              nodes.computeIfAbsent(\n-                      from.groupAndArtifactId(), _ -> IdVersions.of(from.groupAndArtifactId()));\n-      fromNode.versions().add(from);\n-      var toNode =\n-              nodes.computeIfAbsent(\n-                      to.groupAndArtifactId(), _ -> IdVersions.of(to.groupAndArtifactId()));\n-      toNode.versions().add(to);\n-      edges.computeIfAbsent(fromNode, k -> new ArrayList<>()).add(toNode);\n-      return this;\n@@ -235,20 +160,40 @@\n-    void removeUNSPECIFIED() {\n-      nodes\n-              .values()\n-              .forEach(\n-                      idversions -> {\n-                        if (idversions.versions().size() > 1) {\n-                          List<Id> versions = new ArrayList<>(idversions.versions());\n-                          idversions.versions().clear();\n-                          idversions\n-                                  .versions()\n-                                  .addAll(\n-                                          versions.stream()\n-                                                  .filter(v -> !v.versionId().equals(VersionId.UNSPECIFIED))\n-                                                  .toList());\n-                          println(idversions);\n-                        }\n-                        if (idversions.versions().size() > 1) {\n-                          throw new IllegalStateException(\"more than one version\");\n-                        }\n-                      });\n+    public Optional<Pom> pom(Id id) {\n+        return switch (id) {\n+            case MetaDataId metaDataId -> {\n+                if (metaDataId.versionId() == VersionId.UNSPECIFIED) {\n+                    \/\/ println(\"what to do when the version is unspecified\");\n+                    yield Optional.empty();\n+                }\n+                try {\n+                    yield Optional.of(\n+                            new Pom(\n+                                    metaDataId,\n+                                    queryAndCache(\n+                                            metaDataId.pomURL(), metaDataId.mavenStyleRepository.pomFile(metaDataId))));\n+                } catch (Throwable e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+            case DependencyId dependencyId -> {\n+                if (metaData(\n+                        id.groupAndArtifactId().groupId().string(),\n+                        id.groupAndArtifactId().artifactId().string())\n+                        instanceof Optional<MetaData> optionalMetaData\n+                        && optionalMetaData.isPresent()) {\n+                    if (optionalMetaData\n+                            .get()\n+                            .metaDataIds()\n+                            .filter(metaDataId -> metaDataId.versionId().equals(id.versionId()))\n+                            .findFirst()\n+                            instanceof Optional<MetaDataId> metaId\n+                            && metaId.isPresent()) {\n+                        yield pom(metaId.get());\n+                    } else {\n+                        yield Optional.empty();\n+                    }\n+                } else {\n+                    yield Optional.empty();\n+                }\n+            }\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + id);\n+        };\n@@ -257,42 +202,4 @@\n-    Dag(MavenStyleRepository repo, List<GroupAndArtifactId> rootGroupAndArtifactIds) {\n-      this.repo = repo;\n-      this.rootGroupAndArtifactIds = rootGroupAndArtifactIds;\n-\n-      Set<Id> unresolved = new HashSet<>();\n-      rootGroupAndArtifactIds.forEach(\n-              rootGroupAndArtifactId -> {\n-                var metaData = repo.metaData(rootGroupAndArtifactId).orElseThrow();\n-                var metaDataId = metaData.latestMetaDataId().orElseThrow();\n-                var optionalPom = repo.pom(rootGroupAndArtifactId);\n-\n-                if (optionalPom.isPresent() && optionalPom.get() instanceof Pom pom) {\n-                  pom.requiredDependencies()\n-                          .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n-                          .forEach(\n-                                  dependencyId -> {\n-                                    add(metaDataId, dependencyId);\n-                                    unresolved.add(dependencyId);\n-                                  });\n-                }\n-              });\n-\n-      while (!unresolved.isEmpty()) {\n-        var resolveSet = new HashSet<>(unresolved);\n-        unresolved.clear();\n-        resolveSet.forEach(\n-                id -> {\n-                  if (repo.pom(id) instanceof Optional<Pom> p && p.isPresent()) {\n-                    p.get()\n-                            .requiredDependencies()\n-                            .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n-                            .forEach(\n-                                    dependencyId -> {\n-                                      unresolved.add(dependencyId);\n-                                      add(id, dependencyId);\n-                                    });\n-                    \/\/ }else{\n-                    \/\/ throw new IllegalArgumentException(\"unresolved pom \" + id);\n-                  }\n-                });\n-      }\n-      removeUNSPECIFIED();\n+    public Optional<Pom> pom(GroupAndArtifactId groupAndArtifactId) {\n+        var metaData = metaData(groupAndArtifactId).orElseThrow();\n+        var metaDataId = metaData.latestMetaDataId().orElseThrow();\n+        return pom(metaDataId);\n@@ -301,2 +208,4 @@\n-    @Override public List<Bldr.ClassPathEntry> classPathEntries(){\n-      return classPath().classPathEntries();\n+    record IdVersions(GroupAndArtifactId groupAndArtifactId, Set<Id> versions) {\n+        static IdVersions of(GroupAndArtifactId groupAndArtifactId) {\n+            return new IdVersions(groupAndArtifactId, new HashSet<>());\n+        }\n@@ -305,1 +214,18 @@\n-    Bldr.ClassPath classPath() {\n+    public static class Dag implements Bldr.ClassPathEntryProvider {\n+        private final MavenStyleRepository repo;\n+        private final List<GroupAndArtifactId> rootGroupAndArtifactIds;\n+        Map<GroupAndArtifactId, IdVersions> nodes = new HashMap<>();\n+        Map<IdVersions, List<IdVersions>> edges = new HashMap<>();\n+\n+        Dag add(Id from, Id to) {\n+            var fromNode =\n+                    nodes.computeIfAbsent(\n+                            from.groupAndArtifactId(), _ -> IdVersions.of(from.groupAndArtifactId()));\n+            fromNode.versions().add(from);\n+            var toNode =\n+                    nodes.computeIfAbsent(\n+                            to.groupAndArtifactId(), _ -> IdVersions.of(to.groupAndArtifactId()));\n+            toNode.versions().add(to);\n+            edges.computeIfAbsent(fromNode, k -> new ArrayList<>()).add(toNode);\n+            return this;\n+        }\n@@ -307,16 +233,21 @@\n-      Bldr.ClassPath jars = Bldr.ClassPath.of();\n-      nodes\n-              .keySet()\n-              .forEach(\n-                      id -> {\n-                        \/\/ println(\"looking for pom for \"+id);\n-                        Optional<Pom> optionalPom = repo.pom(id);\n-                        if (optionalPom.isPresent() && optionalPom.get() instanceof Pom pom) {\n-                          jars.add(pom.getJar());\n-                        } else {\n-                          throw new RuntimeException(\"No pom for \" + id + \" needed by \" + id);\n-                        }\n-                      });\n-      return jars;\n-    }\n-  }\n+        void removeUNSPECIFIED() {\n+            nodes\n+                    .values()\n+                    .forEach(\n+                            idversions -> {\n+                                if (idversions.versions().size() > 1) {\n+                                    List<Id> versions = new ArrayList<>(idversions.versions());\n+                                    idversions.versions().clear();\n+                                    idversions\n+                                            .versions()\n+                                            .addAll(\n+                                                    versions.stream()\n+                                                            .filter(v -> !v.versionId().equals(VersionId.UNSPECIFIED))\n+                                                            .toList());\n+                                    println(idversions);\n+                                }\n+                                if (idversions.versions().size() > 1) {\n+                                    throw new IllegalStateException(\"more than one version\");\n+                                }\n+                            });\n+        }\n@@ -324,3 +255,3 @@\n-  public Dag dag(String... rootGroupAndArtifactIds) {\n-    return dag(Stream.of(rootGroupAndArtifactIds).map(GroupAndArtifactId::of).toList());\n-  }\n+        Dag(MavenStyleRepository repo, List<GroupAndArtifactId> rootGroupAndArtifactIds) {\n+            this.repo = repo;\n+            this.rootGroupAndArtifactIds = rootGroupAndArtifactIds;\n@@ -328,3 +259,6 @@\n-  public Dag dag(GroupAndArtifactId... rootGroupAndArtifactIds) {\n-    return dag(List.of(rootGroupAndArtifactIds));\n-  }\n+            Set<Id> unresolved = new HashSet<>();\n+            rootGroupAndArtifactIds.forEach(\n+                    rootGroupAndArtifactId -> {\n+                        var metaData = repo.metaData(rootGroupAndArtifactId).orElseThrow();\n+                        var metaDataId = metaData.latestMetaDataId().orElseThrow();\n+                        var optionalPom = repo.pom(rootGroupAndArtifactId);\n@@ -332,4 +266,29 @@\n-  public Dag dag(List<GroupAndArtifactId> rootGroupAndArtifactIds) {\n-    var dag = new Dag(this, rootGroupAndArtifactIds);\n-    return dag;\n-  }\n+                        if (optionalPom.isPresent() && optionalPom.get() instanceof Pom pom) {\n+                            pom.requiredDependencies()\n+                                    .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n+                                    .forEach(\n+                                            dependencyId -> {\n+                                                add(metaDataId, dependencyId);\n+                                                unresolved.add(dependencyId);\n+                                            });\n+                        }\n+                    });\n+\n+            while (!unresolved.isEmpty()) {\n+                var resolveSet = new HashSet<>(unresolved);\n+                unresolved.clear();\n+                resolveSet.forEach(id -> {\n+                            if (repo.pom(id) instanceof Optional<Pom> p && p.isPresent()) {\n+                                p.get()\n+                                        .requiredDependencies()\n+                                        .filter(dependencyId -> !dependencyId.scope.equals(Scope.TEST))\n+                                        .forEach(\n+                                                dependencyId -> {\n+                                                    unresolved.add(dependencyId);\n+                                                    add(id, dependencyId);\n+                                                });\n+                            }\n+                        });\n+            }\n+            removeUNSPECIFIED();\n+        }\n@@ -337,0 +296,4 @@\n+        @Override\n+        public List<Bldr.ClassPathEntry> classPathEntries() {\n+            return classPath().classPathEntries();\n+        }\n@@ -338,4 +301,16 @@\n-  public record VersionId(Integer maj, Integer min, Integer point, String classifier)\n-      implements Comparable<VersionId> {\n-    static Integer integerOrNull(String s) {\n-      return (s == null || s.isEmpty()) ? null : Integer.parseInt(s);\n+        Bldr.ClassPath classPath() {\n+\n+            Bldr.ClassPath jars = Bldr.ClassPath.of();\n+            nodes\n+                    .keySet()\n+                    .forEach(\n+                            id -> {\n+                                Optional<Pom> optionalPom = repo.pom(id);\n+                                if (optionalPom.isPresent() && optionalPom.get() instanceof Pom pom) {\n+                                    jars.add(pom.getJar());\n+                                } else {\n+                                    throw new RuntimeException(\"No pom for \" + id + \" needed by \" + id);\n+                                }\n+                            });\n+            return jars;\n+        }\n@@ -344,14 +319,2 @@\n-    public static Pattern pattern = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.(\\\\d+)(.*))?)?$\");\n-    static VersionId UNSPECIFIED = new VersionId(null, null, null, null);\n-\n-    static VersionId of(String version) {\n-      Matcher matcher = pattern.matcher(version);\n-      if (matcher.matches()) {\n-        return new VersionId(\n-            integerOrNull(matcher.group(1)),\n-            integerOrNull(matcher.group(2)),\n-            integerOrNull(matcher.group(3)),\n-            matcher.group(4));\n-      } else {\n-        return UNSPECIFIED;\n-      }\n+    public Bldr.ClassPathEntryProvider classPathEntries(String... rootGroupAndArtifactIds) {\n+        return classPathEntries(Stream.of(rootGroupAndArtifactIds).map(GroupAndArtifactId::of).toList());\n@@ -360,11 +323,2 @@\n-    int cmp(Integer v1, Integer v2) {\n-      if (v1 == null && v2 == null) {\n-        return 0;\n-      }\n-      if (v1 == null) {\n-        return -v2;\n-      } else if (v2 == null) {\n-        return v1;\n-      } else {\n-        return v1 - v2;\n-      }\n+    public Bldr.ClassPathEntryProvider classPathEntries(GroupAndArtifactId... rootGroupAndArtifactIds) {\n+        return classPathEntries(List.of(rootGroupAndArtifactIds));\n@@ -373,14 +327,24 @@\n-    @Override\n-    public int compareTo(VersionId o) {\n-      if (cmp(maj(), o.maj()) == 0) {\n-        if (cmp(min(), o.min()) == 0) {\n-          if (cmp(point(), o.point()) == 0) {\n-            return classifier().compareTo(o.classifier());\n-          } else {\n-            return cmp(point(), o.point());\n-          }\n-        } else {\n-          return cmp(min(), o.min());\n-        }\n-      } else {\n-        return cmp(maj(), o.maj());\n+    public Bldr.ClassPathEntryProvider classPathEntries(List<GroupAndArtifactId> rootGroupAndArtifactIds) {\n+      StringBuilder sb = new StringBuilder();\n+      rootGroupAndArtifactIds.forEach(groupAndArtifactId->sb.append(sb.isEmpty() ?\"\":\"-\").append(groupAndArtifactId.groupId+\"-\"+groupAndArtifactId.artifactId));\n+      System.out.println(sb);\n+      Bldr.ClassPathEntryProvider classPathEntries=null;\n+      var pathFileName = sb+\"-path.xml\";\n+      var pathFile = dir.xmlFile(pathFileName);\n+      if (pathFile.exists()){\n+          System.out.println(pathFileName + \" exists \" + pathFile.path().toString());\n+          XMLNode path = new XMLNode(pathFile.path());\n+          Bldr.ClassPath classPath = Bldr.ClassPath.of();\n+          path.nodes(path.xpath(\"\/path\/jar\/text()\")).forEach(e->\n+                  classPath.add(dir.jarFile(e.getNodeValue()))\n+          );\n+          classPathEntries = classPath;\n+      }else {\n+         var finalClassPathEntries =  new Dag(this, rootGroupAndArtifactIds);\n+              XMLNode.create(\"path\", xml-> {\n+                  finalClassPathEntries.classPathEntries().forEach(cpe ->\n+                          xml.element(\"jar\",jar->jar.text(dir.path().relativize(cpe.path()).toString()))\n+                  );\n+              }).write(pathFile);\n+         System.out.println(\"created \"+pathFile.path());\n+         classPathEntries = finalClassPathEntries;\n@@ -388,0 +352,1 @@\n+        return classPathEntries;\n@@ -390,11 +355,19 @@\n-    @Override\n-    public String toString() {\n-      StringBuilder sb = new StringBuilder();\n-      if (maj() != null) {\n-        sb.append(maj());\n-        if (min() != null) {\n-          sb.append(\".\").append(min());\n-          if (point() != null) {\n-            sb.append(\".\").append(point());\n-            if (classifier() != null) {\n-              sb.append(classifier());\n+    public record VersionId(Integer maj, Integer min, Integer point, String classifier)\n+            implements Comparable<VersionId> {\n+        static Integer integerOrNull(String s) {\n+            return (s == null || s.isEmpty()) ? null : Integer.parseInt(s);\n+        }\n+\n+        public static Pattern pattern = Pattern.compile(\"^(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.(\\\\d+)(.*))?)?$\");\n+        static VersionId UNSPECIFIED = new VersionId(null, null, null, null);\n+\n+        static VersionId of(String version) {\n+            Matcher matcher = pattern.matcher(version);\n+            if (matcher.matches()) {\n+                return new VersionId(\n+                        integerOrNull(matcher.group(1)),\n+                        integerOrNull(matcher.group(2)),\n+                        integerOrNull(matcher.group(3)),\n+                        matcher.group(4));\n+            } else {\n+                return UNSPECIFIED;\n@@ -402,1 +375,0 @@\n-          }\n@@ -404,6 +376,0 @@\n-      } else {\n-        sb.append(\"UNSPECIFIED\");\n-      }\n-      return sb.toString();\n-    }\n-  }\n@@ -411,4 +377,12 @@\n-  public record GroupId(String string) {\n-    public static GroupId of(String s) {\n-      return new GroupId(s);\n-    }\n+        int cmp(Integer v1, Integer v2) {\n+            if (v1 == null && v2 == null) {\n+                return 0;\n+            }\n+            if (v1 == null) {\n+                return -v2;\n+            } else if (v2 == null) {\n+                return v1;\n+            } else {\n+                return v1 - v2;\n+            }\n+        }\n@@ -416,5 +390,16 @@\n-    @Override\n-    public String toString() {\n-      return string;\n-    }\n-  }\n+        @Override\n+        public int compareTo(VersionId o) {\n+            if (cmp(maj(), o.maj()) == 0) {\n+                if (cmp(min(), o.min()) == 0) {\n+                    if (cmp(point(), o.point()) == 0) {\n+                        return classifier().compareTo(o.classifier());\n+                    } else {\n+                        return cmp(point(), o.point());\n+                    }\n+                } else {\n+                    return cmp(min(), o.min());\n+                }\n+            } else {\n+                return cmp(maj(), o.maj());\n+            }\n+        }\n@@ -422,3 +407,19 @@\n-  public record ArtifactId(String string) {\n-    static ArtifactId of(String string) {\n-      return new ArtifactId(string);\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            if (maj() != null) {\n+                sb.append(maj());\n+                if (min() != null) {\n+                    sb.append(\".\").append(min());\n+                    if (point() != null) {\n+                        sb.append(\".\").append(point());\n+                        if (classifier() != null) {\n+                            sb.append(classifier());\n+                        }\n+                    }\n+                }\n+            } else {\n+                sb.append(\"UNSPECIFIED\");\n+            }\n+            return sb.toString();\n+        }\n@@ -427,17 +428,4 @@\n-    @Override\n-    public String toString() {\n-      return string;\n-    }\n-  }\n-\n-  public record MetaDataId(\n-      MavenStyleRepository mavenStyleRepository,\n-      GroupAndArtifactId groupAndArtifactId,\n-      VersionId versionId,\n-      Set<String> downloadables,\n-      Set<String> tags)\n-      implements Id {\n-\n-    public URL pomURL() {\n-      return url(\"pom\");\n-    }\n+    public record GroupId(String string) {\n+        public static GroupId of(String s) {\n+            return new GroupId(s);\n+        }\n@@ -445,2 +433,4 @@\n-    public URL jarURL() {\n-      return url(\"jar\");\n+        @Override\n+        public String toString() {\n+            return string;\n+        }\n@@ -449,8 +439,4 @@\n-    public XMLNode getPom() {\n-      if (downloadables.contains(\".pom\")) {\n-        return mavenStyleRepository.queryAndCache(\n-            url(\"pom\"), mavenStyleRepository.dir.xmlFile(artifactAndVersion() + \".pom\"));\n-      } else {\n-        throw new IllegalStateException(\"no pom\");\n-      }\n-    }\n+    public record ArtifactId(String string) {\n+        static ArtifactId of(String string) {\n+            return new ArtifactId(string);\n+        }\n@@ -458,3 +444,4 @@\n-    @Override\n-    public String toString() {\n-      return groupAndArtifactId().toString() + \".\" + versionId();\n+        @Override\n+        public String toString() {\n+            return string;\n+        }\n@@ -462,1 +449,0 @@\n-  }\n@@ -464,3 +450,7 @@\n-  public MavenStyleRepository(Bldr.BuildDir dir) {\n-    this.dir = dir.create();\n-  }\n+    public record MetaDataId(\n+            MavenStyleRepository mavenStyleRepository,\n+            GroupAndArtifactId groupAndArtifactId,\n+            VersionId versionId,\n+            Set<String> downloadables,\n+            Set<String> tags)\n+            implements Id {\n@@ -468,8 +458,3 @@\n-  Bldr.JarFile queryAndCache(URL query, Bldr.JarFile jarFile) {\n-    try {\n-      if (!jarFile.exists()) {\n-        print(\"Querying and caching \" + jarFile.fileName());\n-        println(\" downloading \" + query);\n-        curl(query, jarFile.path());\n-      } else {\n-        \/\/ println(\"Using cached \" + jarFile.fileName());\n+        public URL pomURL() {\n+            return url(\"pom\");\n+        }\n@@ -477,50 +462,12 @@\n-      }\n-    } catch (Throwable e) {\n-      throw new RuntimeException(e);\n-    }\n-    return jarFile;\n-  }\n-\n-  XMLNode queryAndCache(URL query, Bldr.XMLFile xmlFile) {\n-    XMLNode xmlNode = null;\n-    try {\n-      if (!xmlFile.exists()) {\n-        print(\"Querying and caching \" + xmlFile.fileName());\n-        println(\" downloading \" + query);\n-        xmlNode = new XMLNode(query);\n-        xmlNode.write(xmlFile.path().toFile());\n-      } else {\n-        \/\/ println(\"Using cached \" + xmlFile.fileName());\n-        xmlNode = new XMLNode(xmlFile.path());\n-      }\n-    } catch (Throwable e) {\n-      throw new RuntimeException(e);\n-    }\n-    return xmlNode;\n-  }\n-\n-  public record MetaData(\n-      MavenStyleRepository mavenStyleRepository,\n-      GroupAndArtifactId groupAndArtifactId,\n-      XMLNode xmlNode) {\n-\n-    public Stream<MetaDataId> metaDataIds() {\n-      return xmlNode\n-          .xmlNodes(xmlNode.xpath(\"\/response\/result\/doc\"))\n-          .map(\n-              xmln ->\n-                  new MetaDataId(\n-                      this.mavenStyleRepository,\n-                      GroupAndArtifactId.of(\n-                          GroupId.of(xmln.xpathQueryString(\"str[@name='g']\/text()\")),\n-                          ArtifactId.of(xmln.xpathQueryString(\"str[@name='a']\/text()\"))),\n-                      VersionId.of(xmln.xpathQueryString(\"str[@name='v']\/text()\")),\n-                      new HashSet<>(\n-                          xmln.nodes(xmln.xpath(\"arr[@name='ec']\/str\/text()\"))\n-                              .map(Node::getNodeValue)\n-                              .toList()),\n-                      new HashSet<>(\n-                          xmln.nodes(xmln.xpath(\"arr[@name='tags']\/str\/text()\"))\n-                              .map(Node::getNodeValue)\n-                              .toList())));\n-    }\n+        public URL jarURL() {\n+            return url(\"jar\");\n+        }\n+\n+        public XMLNode getPom() {\n+            if (downloadables.contains(\".pom\")) {\n+                return mavenStyleRepository.queryAndCache(\n+                        url(\"pom\"), mavenStyleRepository.dir.xmlFile(artifactAndVersion() + \".pom\"));\n+            } else {\n+                throw new IllegalStateException(\"no pom\");\n+            }\n+        }\n@@ -528,2 +475,4 @@\n-    public Stream<MetaDataId> sortedMetaDataIds() {\n-      return metaDataIds().sorted(Comparator.comparing(MetaDataId::versionId));\n+        @Override\n+        public String toString() {\n+            return groupAndArtifactId().toString() + \".\" + versionId();\n+        }\n@@ -532,2 +481,2 @@\n-    public Optional<MetaDataId> latestMetaDataId() {\n-      return metaDataIds().max(Comparator.comparing(MetaDataId::versionId));\n+    public MavenStyleRepository(Bldr.RepoDir dir) {\n+        this.dir = dir.create();\n@@ -536,2 +485,14 @@\n-    public Optional<MetaDataId> getMetaDataId(VersionId versionId) {\n-      return metaDataIds().filter(id -> versionId.compareTo(id.versionId()) == 0).findFirst();\n+    Bldr.JarFile queryAndCache(URL query, Bldr.JarFile jarFile) {\n+        try {\n+            if (!jarFile.exists()) {\n+                print(\"Querying and caching \" + jarFile.fileName());\n+                println(\" downloading \" + query);\n+                curl(query, jarFile.path());\n+            } else {\n+                \/\/ println(\"Using cached \" + jarFile.fileName());\n+\n+            }\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+        return jarFile;\n@@ -539,46 +500,56 @@\n-  }\n-\n-  public Optional<MetaData> metaData(String groupId, String artifactId) {\n-    return metaData(GroupAndArtifactId.of(groupId, artifactId));\n-  }\n-\n-  public Optional<MetaData> metaData(GroupAndArtifactId groupAndArtifactId) {\n-    try {\n-      var query = \"g:\" + groupAndArtifactId.groupId() + \" AND a:\" + groupAndArtifactId.artifactId();\n-      URL rowQueryUrl =\n-          new URI(\n-                  searchBase\n-                      + \"select?q=\"\n-                      + URLEncoder.encode(query, StandardCharsets.UTF_8)\n-                      + \"&core=gav&wt=xml&rows=0\")\n-              .toURL();\n-      var rowQueryResponse = new XMLNode(rowQueryUrl);\n-      var numFound = rowQueryResponse.xpathQueryString(\"\/response\/result\/@numFound\");\n-\n-      URL url =\n-          new URI(\n-                  searchBase\n-                      + \"select?q=\"\n-                      + URLEncoder.encode(query, StandardCharsets.UTF_8)\n-                      + \"&core=gav&wt=xml&rows=\"\n-                      + numFound)\n-              .toURL();\n-      try {\n-        \/\/ println(url);\n-        var xmlNode =\n-            queryAndCache(url, dir.xmlFile(groupAndArtifactId.artifactId() + \".meta.xml\"));\n-        \/\/ var numFound2 = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n-        \/\/ var start = xmlNode.xpathQueryString(\"\/response\/result\/@start\");\n-        \/\/ var rows =\n-        \/\/ xmlNode.xpathQueryString(\"\/response\/lst[@name='responseHeader']\/lst[@name='params']\/str[@name='rows']\/text()\");\n-        \/\/ println(\"numFound = \"+numFound+\" rows =\"+rows+ \" start =\"+start);\n-        if (numFound.isEmpty() || numFound.equals(\"0\")) {\n-          return Optional.empty();\n-        } else {\n-          return Optional.of(new MetaData(this, groupAndArtifactId, xmlNode));\n-        }\n-      } catch (Throwable e) {\n-        throw new RuntimeException(e);\n-      }\n-    } catch (Throwable e) {\n-      throw new RuntimeException(e);\n+\n+    XMLNode queryAndCache(URL query, Bldr.XMLFile xmlFile) {\n+        XMLNode xmlNode = null;\n+        try {\n+            if (!xmlFile.exists()) {\n+                print(\"Querying and caching \" + xmlFile.fileName());\n+                println(\" downloading \" + query);\n+                xmlNode = new XMLNode(query);\n+                xmlNode.write(xmlFile.path().toFile());\n+            } else {\n+                \/\/ println(\"Using cached \" + xmlFile.fileName());\n+                xmlNode = new XMLNode(xmlFile.path());\n+            }\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+        return xmlNode;\n+    }\n+\n+    public record MetaData(\n+            MavenStyleRepository mavenStyleRepository,\n+            GroupAndArtifactId groupAndArtifactId,\n+            XMLNode xmlNode) {\n+\n+        public Stream<MetaDataId> metaDataIds() {\n+            return xmlNode\n+                    .xmlNodes(xmlNode.xpath(\"\/response\/result\/doc\"))\n+                    .map(\n+                            xmln ->\n+                                    new MetaDataId(\n+                                            this.mavenStyleRepository,\n+                                            GroupAndArtifactId.of(\n+                                                    GroupId.of(xmln.xpathQueryString(\"str[@name='g']\/text()\")),\n+                                                    ArtifactId.of(xmln.xpathQueryString(\"str[@name='a']\/text()\"))),\n+                                            VersionId.of(xmln.xpathQueryString(\"str[@name='v']\/text()\")),\n+                                            new HashSet<>(\n+                                                    xmln.nodes(xmln.xpath(\"arr[@name='ec']\/str\/text()\"))\n+                                                            .map(Node::getNodeValue)\n+                                                            .toList()),\n+                                            new HashSet<>(\n+                                                    xmln.nodes(xmln.xpath(\"arr[@name='tags']\/str\/text()\"))\n+                                                            .map(Node::getNodeValue)\n+                                                            .toList())));\n+        }\n+\n+        public Stream<MetaDataId> sortedMetaDataIds() {\n+            return metaDataIds().sorted(Comparator.comparing(MetaDataId::versionId));\n+        }\n+\n+        public Optional<MetaDataId> latestMetaDataId() {\n+            return metaDataIds().max(Comparator.comparing(MetaDataId::versionId));\n+        }\n+\n+        public Optional<MetaDataId> getMetaDataId(VersionId versionId) {\n+            return metaDataIds().filter(id -> versionId.compareTo(id.versionId()) == 0).findFirst();\n+        }\n@@ -586,17 +557,3 @@\n-  }\n-\n-  public static void main(String[] args) {\n-\n-    var hatDir = assertExists(Bldr.Dir.of(\"\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\"));\n-\n-    var repo = new MavenStyleRepository(hatDir.buildDir(\"repo\"));\n-    var testngMeta = repo.metaData(\"org.testng\", \"testng\");\n-    if (testngMeta.isPresent()) {\n-      testngMeta\n-          .get()\n-          .sortedMetaDataIds()\n-          .forEach(\n-              metaDataId -> {\n-                var pom = metaDataId.getPom();\n-                \/\/   println(pom.toString());\n-              });\n+\n+    public Optional<MetaData> metaData(String groupId, String artifactId) {\n+        return metaData(GroupAndArtifactId.of(groupId, artifactId));\n@@ -604,8 +561,42 @@\n-    var junitMeta = repo.metaData(\"org.junit.platform\", \"junit-platform-console-standalone\");\n-    if (junitMeta.isPresent()) {\n-      var latest = junitMeta.get().latestMetaDataId();\n-      if (latest.isPresent()) {\n-        var id = latest.get();\n-        var pom = id.getPom();\n-        \/\/ println(pom.toString());\n-      }\n+\n+    public Optional<MetaData> metaData(GroupAndArtifactId groupAndArtifactId) {\n+        try {\n+            var query = \"g:\" + groupAndArtifactId.groupId() + \" AND a:\" + groupAndArtifactId.artifactId();\n+            URL rowQueryUrl =\n+                    new URI(\n+                            searchBase\n+                                    + \"select?q=\"\n+                                    + URLEncoder.encode(query, StandardCharsets.UTF_8)\n+                                    + \"&core=gav&wt=xml&rows=0\")\n+                            .toURL();\n+            var rowQueryResponse = new XMLNode(rowQueryUrl);\n+            var numFound = rowQueryResponse.xpathQueryString(\"\/response\/result\/@numFound\");\n+\n+            URL url =\n+                    new URI(\n+                            searchBase\n+                                    + \"select?q=\"\n+                                    + URLEncoder.encode(query, StandardCharsets.UTF_8)\n+                                    + \"&core=gav&wt=xml&rows=\"\n+                                    + numFound)\n+                            .toURL();\n+            try {\n+                \/\/ println(url);\n+                var xmlNode =\n+                        queryAndCache(url, dir.xmlFile(groupAndArtifactId.artifactId() + \".meta.xml\"));\n+                \/\/ var numFound2 = xmlNode.xpathQueryString(\"\/response\/result\/@numFound\");\n+                \/\/ var start = xmlNode.xpathQueryString(\"\/response\/result\/@start\");\n+                \/\/ var rows =\n+                \/\/ xmlNode.xpathQueryString(\"\/response\/lst[@name='responseHeader']\/lst[@name='params']\/str[@name='rows']\/text()\");\n+                \/\/ println(\"numFound = \"+numFound+\" rows =\"+rows+ \" start =\"+start);\n+                if (numFound.isEmpty() || numFound.equals(\"0\")) {\n+                    return Optional.empty();\n+                } else {\n+                    return Optional.of(new MetaData(this, groupAndArtifactId, xmlNode));\n+                }\n+            } catch (Throwable e) {\n+                throw new RuntimeException(e);\n+            }\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -613,1 +604,0 @@\n-  }\n","filename":"hat\/bldr\/MavenStyleRepository.java","additions":512,"deletions":522,"binary":false,"changes":1034,"status":"modified"},{"patch":"@@ -3,0 +3,16 @@\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n@@ -20,16 +36,0 @@\n-import javax.xml.parsers.ParserConfigurationException;\n-import javax.xml.transform.OutputKeys;\n-import javax.xml.transform.TransformerFactory;\n-import javax.xml.transform.dom.DOMSource;\n-import javax.xml.transform.stream.StreamResult;\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathExpression;\n-import javax.xml.xpath.XPathExpressionException;\n-import javax.xml.xpath.XPathFactory;\n-\n-import org.w3c.dom.Document;\n-import org.w3c.dom.Element;\n-import org.w3c.dom.Node;\n-import org.w3c.dom.NodeList;\n-import org.xml.sax.SAXException;\n@@ -38,38 +38,559 @@\n-  org.w3c.dom.Element element;\n-  List<XMLNode> children = new ArrayList<>();\n-  Map<String, String> attrMap = new HashMap<>();\n-\n-  public static class AbstractXMLBuilder<T extends AbstractXMLBuilder<T>>{\n-    public org.w3c.dom.Element element;\n-    @SuppressWarnings(\"unchecked\")\n-    public T self(){\n-      return (T)this;\n-    }\n-    public T attr(String name, String value) {\n-       \/\/ var att = element.getOwnerDocument().createAttribute(name);\n-        \/\/att.setValue(value);\n-        element.setAttribute(name, value);\n-       \/\/ element.appendChild(att);\n-      return self();\n-    }\n-    public T attr(URI uri,String name, String value) {\n-      \/\/ var att = element.getOwnerDocument().createAttribute(name);\n-      \/\/att.setValue(value);\n-      element.setAttributeNS(uri.toString(),name, value);\n-      \/\/ element.appendChild(att);\n-      return self();\n-    }\n-    public T element(String name, Function<Element,T> factory, Consumer<T> xmlBuilderConsumer) {\n-      var node = element.getOwnerDocument().createElement(name);\n-      element.appendChild(node);\n-      var builder = factory.apply(node);\n-      xmlBuilderConsumer.accept(builder);\n-      return self();\n-    }\n-    public T element(URI uri, String name,  Function<Element,T> factory,Consumer<T> xmlBuilderConsumer) {\n-      var node = element.getOwnerDocument().createElementNS(uri.toString(), name);\n-      element.appendChild(node);\n-      var builder = factory.apply(node);\n-      xmlBuilderConsumer.accept(builder);\n-      return self();\n-    }\n+    org.w3c.dom.Element element;\n+    List<XMLNode> children = new ArrayList<>();\n+    Map<String, String> attrMap = new HashMap<>();\n+\n+    public static class AbstractXMLBuilder<T extends AbstractXMLBuilder<T>> {\n+        public org.w3c.dom.Element element;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public T self() {\n+            return (T) this;\n+        }\n+\n+        public T attr(String name, String value) {\n+            \/\/ var att = element.getOwnerDocument().createAttribute(name);\n+            \/\/ att.setValue(value);\n+            element.setAttribute(name, value);\n+            \/\/ element.appendChild(att);\n+            return self();\n+        }\n+\n+        public T attr(URI uri, String name, String value) {\n+            \/\/ var att = element.getOwnerDocument().createAttribute(name);\n+            \/\/ att.setValue(value);\n+            element.setAttributeNS(uri.toString(), name, value);\n+            \/\/ element.appendChild(att);\n+            return self();\n+        }\n+\n+        public T element(String name, Function<Element, T> factory, Consumer<T> xmlBuilderConsumer) {\n+            var node = element.getOwnerDocument().createElement(name);\n+            element.appendChild(node);\n+            var builder = factory.apply(node);\n+            xmlBuilderConsumer.accept(builder);\n+            return self();\n+        }\n+\n+        public T element(\n+                URI uri, String name, Function<Element, T> factory, Consumer<T> xmlBuilderConsumer) {\n+            var node = element.getOwnerDocument().createElementNS(uri.toString(), name);\n+            element.appendChild(node);\n+            var builder = factory.apply(node);\n+            xmlBuilderConsumer.accept(builder);\n+            return self();\n+        }\n+\n+        AbstractXMLBuilder(org.w3c.dom.Element element) {\n+            this.element = element;\n+        }\n+\n+        public T text(String thisText) {\n+            var node = element.getOwnerDocument().createTextNode(thisText);\n+            element.appendChild(node);\n+            return self();\n+        }\n+\n+        public T comment(String thisComment) {\n+            var node = element.getOwnerDocument().createComment(thisComment);\n+            element.appendChild(node);\n+            return self();\n+        }\n+\n+        <L> T forEach(List<L> list, BiConsumer<T, L> biConsumer) {\n+            list.forEach(l -> biConsumer.accept(self(), l));\n+            return self();\n+        }\n+\n+        <L> T forEach(Stream<L> stream, BiConsumer<T, L> biConsumer) {\n+            stream.forEach(l -> biConsumer.accept(self(), l));\n+            return self();\n+        }\n+\n+        <L> T forEach(Stream<L> stream, Consumer<L> consumer) {\n+            stream.forEach(consumer);\n+            return self();\n+        }\n+\n+        protected T then(Consumer<T> xmlBuilderConsumer) {\n+            xmlBuilderConsumer.accept(self());\n+            return self();\n+        }\n+    }\n+\n+    public static class PomXmlBuilder extends AbstractXMLBuilder<PomXmlBuilder> {\n+        PomXmlBuilder(Element element) {\n+            super(element);\n+        }\n+\n+        public PomXmlBuilder element(String name, Consumer<PomXmlBuilder> xmlBuilderConsumer) {\n+            return element(name, PomXmlBuilder::new, xmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder element(URI uri, String name, Consumer<PomXmlBuilder> xmlBuilderConsumer) {\n+            return element(uri, name, PomXmlBuilder::new, xmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder modelVersion(String s) {\n+            return element(\"modelVersion\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder pom(String groupId, String artifactId, String version) {\n+            return modelVersion(\"4.0.0\").packaging(\"pom\").ref(groupId, artifactId, version);\n+        }\n+\n+        public PomXmlBuilder jar(String groupId, String artifactId, String version) {\n+            return modelVersion(\"4.0.0\").packaging(\"jar\").ref(groupId, artifactId, version);\n+        }\n+\n+        public PomXmlBuilder groupId(String s) {\n+            return element(\"groupId\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder artifactId(String s) {\n+            return element(\"artifactId\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder packaging(String s) {\n+            return element(\"packaging\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder version(String s) {\n+            return element(\"version\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder build(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"build\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder plugins(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"plugins\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder plugin(\n+                String groupId,\n+                String artifactId,\n+                String version,\n+                Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\n+                    \"plugin\", $ -> $.ref(groupId, artifactId, version).then(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder antPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return plugin(\n+                    \"org.apache.maven.plugins\",\n+                    \"maven-antrun-plugin\",\n+                    \"1.8\",\n+                    plugin -> plugin.executions(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder compilerPluginConfiguration(\n+                Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return plugin(\n+                    \"org.apache.maven.plugins\",\n+                    \"maven-compiler-plugin\",\n+                    \"3.11.0\",\n+                    plugin -> plugin.configuration(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder execPlugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return plugin(\"org.codehaus.mojo\", \"exec-maven-plugin\", \"3.1.0\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder execPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return execPlugin(plugin -> plugin.executions(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder plugin(\n+                String groupId, String artifactId, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\n+                    \"plugin\", $ -> $.groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder plugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"plugin\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder parent(String groupId, String artifactId, String version) {\n+            return parent(parent -> parent.ref(groupId, artifactId, version));\n+        }\n+\n+        public PomXmlBuilder parent(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"parent\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder pluginManagement(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"pluginManagement\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder file(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"file\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder activation(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"activation\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder profiles(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"profiles\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder profile(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"profile\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder arguments(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"arguments\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder executions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"executions\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder execution(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"execution\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder execIdPhaseConf(\n+                String id, String phase, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return execution(\n+                    ex ->\n+                            ex.id(id)\n+                                    .phase(phase)\n+                                    .goals(gs -> gs.goal(\"exec\"))\n+                                    .configuration(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder exec(\n+                String phase, String executable, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return execIdPhaseConf(\n+                    executable + \"-\" + phase,\n+                    phase,\n+                    conf -> conf.executable(executable).arguments(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder cmake(\n+                String id, String phase, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return execIdPhaseConf(\n+                    id, phase, conf -> conf.executable(\"cmake\").arguments(pomXmlBuilderConsumer));\n+        }\n+\n+        public PomXmlBuilder cmake(String id, String phase, String... args) {\n+            return execIdPhaseConf(\n+                    id,\n+                    phase,\n+                    conf ->\n+                            conf.executable(\"cmake\")\n+                                    .arguments(arguments -> arguments.forEach(Stream.of(args), arguments::argument)));\n+        }\n+\n+        public PomXmlBuilder jextract(String id, String phase, String... args) {\n+            return execIdPhaseConf(\n+                    id,\n+                    phase,\n+                    conf ->\n+                            conf.executable(\"jextract\")\n+                                    .arguments(arguments -> arguments.forEach(Stream.of(args), arguments::argument)));\n+        }\n+\n+        public PomXmlBuilder ant(\n+                String id, String phase, String goal, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return execution(\n+                    execution ->\n+                            execution\n+                                    .id(id)\n+                                    .phase(phase)\n+                                    .goals(gs -> gs.goal(goal))\n+                                    .configuration(configuration -> configuration.target(pomXmlBuilderConsumer)));\n+        }\n+\n+        public PomXmlBuilder goals(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"goals\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder target(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"target\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder configuration(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"configuration\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder compilerArgs(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"compilerArgs\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder compilerArgs(String... args) {\n+            return element(\"compilerArgs\", $ -> $.forEach(Stream.of(args), $::arg));\n+        }\n+\n+        public PomXmlBuilder properties(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"properties\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder dependencies(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"dependencies\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder dependsOn(String groupId, String artifactId, String version) {\n+            return element(\"dependencies\", $ -> $.dependency(groupId, artifactId, version));\n+        }\n+\n+        public PomXmlBuilder dependency(String groupId, String artifactId, String version) {\n+            return dependency($ -> $.ref(groupId, artifactId, version));\n+        }\n+\n+        public PomXmlBuilder dependency(\n+                String groupId, String artifactId, String version, String scope) {\n+            return dependency($ -> $.ref(groupId, artifactId, version).scope(scope));\n+        }\n+\n+        public PomXmlBuilder dependency(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"dependency\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder modules(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"modules\", pomXmlBuilderConsumer);\n+        }\n+\n+        public PomXmlBuilder modules(String... modules) {\n+            return element(\"modules\", $ -> $.forEach(Stream.of(modules), $::module));\n+        }\n+\n+        public PomXmlBuilder module(String name) {\n+            return element(\"module\", $ -> $.text(name));\n+        }\n+\n+        public PomXmlBuilder property(String name, String value) {\n+            return element(name, $ -> $.text(value));\n+        }\n+\n+        public PomXmlBuilder scope(String s) {\n+            return element(\"scope\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder phase(String s) {\n+            return element(\"phase\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder argument(String s) {\n+            return element(\"argument\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder goal(String s) {\n+            return element(\"goal\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder copy(String file, String toDir) {\n+            return element(\"copy\", $ -> $.attr(\"file\", file).attr(\"toDir\", toDir));\n+        }\n+\n+        public PomXmlBuilder echo(String message) {\n+            return element(\"echo\", $ -> $.attr(\"message\", message));\n+        }\n+\n+        public PomXmlBuilder echo(String filename, String message) {\n+            return element(\"echo\", $ -> $.attr(\"message\", message).attr(\"file\", filename));\n+        }\n+\n+        public PomXmlBuilder groupIdArtifactId(String groupId, String artifactId) {\n+            return groupId(groupId).artifactId(artifactId);\n+        }\n+\n+        public PomXmlBuilder ref(String groupId, String artifactId, String version) {\n+            return groupIdArtifactId(groupId, artifactId).version(version);\n+        }\n+\n+        public PomXmlBuilder skip(String string) {\n+            return element(\"skip\", $ -> $.text(string));\n+        }\n+\n+        public PomXmlBuilder id(String s) {\n+            return element(\"id\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder arg(String s) {\n+            return element(\"arg\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder argLine(String s) {\n+            return element(\"argLine\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder source(String s) {\n+            return element(\"source\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder target(String s) {\n+            return element(\"target\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder showWarnings(String s) {\n+            return element(\"showWarnings\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder showDeprecation(String s) {\n+            return element(\"showDeprecation\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder failOnError(String s) {\n+            return element(\"failOnError\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder exists(String s) {\n+            return element(\"exists\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder activeByDefault(String s) {\n+            return element(\"activeByDefault\", $ -> $.text(s));\n+        }\n+\n+        public PomXmlBuilder executable(String s) {\n+            return element(\"executable\", $ -> $.text(s));\n+        }\n+    }\n+\n+    public static class ImlBuilder extends AbstractXMLBuilder<ImlBuilder> {\n+        ImlBuilder(Element element) {\n+            super(element);\n+        }\n+\n+        public ImlBuilder element(String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n+            return element(name, ImlBuilder::new, xmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder element(URI uri, String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n+            return element(uri, name, ImlBuilder::new, xmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder modelVersion(String s) {\n+            return element(\"modelVersion\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder groupId(String s) {\n+            return element(\"groupId\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder artifactId(String s) {\n+            return element(\"artifactId\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder packaging(String s) {\n+            return element(\"packaging\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder version(String s) {\n+            return element(\"version\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder build(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"build\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder plugins(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"plugins\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder plugin(\n+                String groupId,\n+                String artifactId,\n+                String version,\n+                Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\n+                    \"plugin\",\n+                    $ ->\n+                            $.groupIdArtifactIdVersion(groupId, artifactId, version).then(pomXmlBuilderConsumer));\n+        }\n+\n+        public ImlBuilder plugin(\n+                String groupId, String artifactId, Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\n+                    \"plugin\", $ -> $.groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer));\n+        }\n+\n+        public ImlBuilder plugin(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"plugin\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder parent(String groupId, String artifactId, String version) {\n+            return parent(parent -> parent.groupIdArtifactIdVersion(groupId, artifactId, version));\n+        }\n+\n+        public ImlBuilder parent(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"parent\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder pluginManagement(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"pluginManagement\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder file(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"file\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder activation(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"activation\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder profiles(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"profiles\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder profile(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"profile\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder arguments(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"arguments\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder executions(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"executions\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder execution(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"execution\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder goals(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"goals\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder target(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"target\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder configuration(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"configuration\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder compilerArgs(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"compilerArgs\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder properties(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"properties\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder dependencies(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"dependencies\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder dependency(String groupId, String artifactId, String version) {\n+            return dependency($ -> $.groupIdArtifactIdVersion(groupId, artifactId, version));\n+        }\n+\n+        public ImlBuilder dependency(String groupId, String artifactId, String version, String scope) {\n+            return dependency($ -> $.groupIdArtifactIdVersion(groupId, artifactId, version).scope(scope));\n+        }\n+\n+        public ImlBuilder dependency(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"dependency\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder modules(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n+            return element(\"modules\", pomXmlBuilderConsumer);\n+        }\n+\n+        public ImlBuilder module(String name) {\n+            return element(\"module\", $ -> $.text(name));\n+        }\n@@ -77,44 +598,3 @@\n-    AbstractXMLBuilder(org.w3c.dom.Element element) {this.element=element;}\n-\n-    public T text(String thisText) {\n-      var node = element.getOwnerDocument().createTextNode(thisText);\n-      element.appendChild(node);\n-      return self();\n-    }\n-\n-    public T comment(String thisComment) {\n-      var node = element.getOwnerDocument().createComment(thisComment);\n-      element.appendChild(node);\n-      return self();\n-    }\n-    \/*\n-    public T oracleComment () {\n-      return comment(\"\"\"\n-                        Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n-                        DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-                        This code is free software; you can redistribute it and\/or modify it\n-                        under the terms of the GNU General Public License version 2 only, as\n-                        published by the Free Software Foundation.  Oracle designates this\n-                        particular file as subject to the \"Classpath\" exception as provided\n-                        by Oracle in the LICENSE file that accompanied this code.\n-\n-                        This code is distributed in the hope that it will be useful, but WITHOUT\n-                        ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-                        FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-                        version 2 for more details (a copy is included in the LICENSE file that\n-                        accompanied this code).\n-\n-                        You should have received a copy of the GNU General Public License version\n-                        2 along with this work; if not, write to the Free Software Foundation,\n-                        Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-                        Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-                        or visit www.oracle.com if you need additional information or have any\n-                        questions.\n-                        \"\"\");\n-    } *\/\n-    <L> T forEach(List<L> list, BiConsumer<T,L> biConsumer){\n-      list.forEach(l->biConsumer.accept(self(),l));\n-      return self();\n-    }\n+        public ImlBuilder property(String name, String value) {\n+            return element(name, $ -> $.text(value));\n+        }\n@@ -122,4 +602,7 @@\n-    <L> T forEach(Stream<L> stream, BiConsumer<T,L> biConsumer){\n-      stream.forEach(l->biConsumer.accept(self(),l));\n-      return self();\n-    }\n+        public ImlBuilder scope(String s) {\n+            return element(\"scope\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder phase(String s) {\n+            return element(\"phase\", $ -> $.text(s));\n+        }\n@@ -127,4 +610,3 @@\n-    <L> T forEach(Stream<L> stream, Consumer<L> consumer){\n-      stream.forEach(consumer);\n-      return self();\n-    }\n+        public ImlBuilder argument(String s) {\n+            return element(\"argument\", $ -> $.text(s));\n+        }\n@@ -132,14 +614,240 @@\n-    protected T then(Consumer<T> xmlBuilderConsumer) {\n-      xmlBuilderConsumer.accept(self());\n-      return self();\n-    }\n-  }\n-  public static class PomXmlBuilder extends AbstractXMLBuilder<PomXmlBuilder>{\n-    PomXmlBuilder(Element element) {\n-      super(element);\n-    }\n-    public PomXmlBuilder element(String name, Consumer<PomXmlBuilder> xmlBuilderConsumer) {\n-      return element(name, PomXmlBuilder::new, xmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder element(URI uri, String name, Consumer<PomXmlBuilder> xmlBuilderConsumer) {\n-      return element(uri, name, PomXmlBuilder::new, xmlBuilderConsumer);\n+        public ImlBuilder goal(String s) {\n+            return element(\"goal\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder copy(String file, String toDir) {\n+            return element(\"copy\", $ -> $.attr(\"file\", file).attr(\"toDir\", toDir));\n+        }\n+\n+        public ImlBuilder groupIdArtifactId(String groupId, String artifactId) {\n+            return groupId(groupId).artifactId(artifactId);\n+        }\n+\n+        public ImlBuilder groupIdArtifactIdVersion(String groupId, String artifactId, String version) {\n+            return groupIdArtifactId(groupId, artifactId).version(version);\n+        }\n+\n+        public ImlBuilder skip(String string) {\n+            return element(\"skip\", $ -> $.text(string));\n+        }\n+\n+        public ImlBuilder id(String s) {\n+            return element(\"id\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder arg(String s) {\n+            return element(\"arg\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder argLine(String s) {\n+            return element(\"argLine\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder source(String s) {\n+            return element(\"source\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder target(String s) {\n+            return element(\"target\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder showWarnings(String s) {\n+            return element(\"showWarnings\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder showDeprecation(String s) {\n+            return element(\"showDeprecation\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder failOnError(String s) {\n+            return element(\"failOnError\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder exists(String s) {\n+            return element(\"exists\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder activeByDefault(String s) {\n+            return element(\"activeByDefault\", $ -> $.text(s));\n+        }\n+\n+        public ImlBuilder executable(String s) {\n+            return element(\"executable\", $ -> $.text(s));\n+        }\n+    }\n+\n+    public static class XMLBuilder extends AbstractXMLBuilder<XMLBuilder> {\n+        XMLBuilder(Element element) {\n+            super(element);\n+        }\n+\n+        public XMLBuilder element(String name, Consumer<XMLBuilder> xmlBuilderConsumer) {\n+            return element(name, XMLBuilder::new, xmlBuilderConsumer);\n+        }\n+\n+        public XMLBuilder element(URI uri, String name, Consumer<XMLBuilder> xmlBuilderConsumer) {\n+            return element(uri, name, XMLBuilder::new, xmlBuilderConsumer);\n+        }\n+    }\n+\n+    static XMLNode create(String nodeName, Consumer<XMLBuilder> xmlBuilderConsumer) {\n+\n+        try {\n+            var doc =\n+                    javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+            var element = doc.createElement(nodeName);\n+            doc.appendChild(element);\n+            XMLBuilder xmlBuilder = new XMLBuilder(element);\n+            xmlBuilderConsumer.accept(xmlBuilder);\n+            return new XMLNode(element);\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static XMLNode createIml(String commentText, Consumer<ImlBuilder> imlBuilderConsumer) {\n+        try {\n+            var doc =\n+                    javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+            var uri1 = URI.create(\"http:\/\/maven.apache.org\/POM\/4.0.0\");\n+            var uri2 = URI.create(\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\");\n+            var uri3 = URI.create(\"http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\");\n+            var comment = doc.createComment(commentText);\n+            doc.appendChild(comment);\n+            var element = doc.createElementNS(uri1.toString(), \"project\");\n+            doc.appendChild(element);\n+            element.setAttributeNS(uri2.toString(), \"xsi:schemaLocation\", uri1 + \" \" + uri3);\n+            ImlBuilder imlBuilder = new ImlBuilder(element);\n+            imlBuilderConsumer.accept(imlBuilder);\n+            return new XMLNode(element);\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static XMLNode createPom(\n+            String commentText, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+        try {\n+            var doc =\n+                    javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+\n+            var uri1 = URI.create(\"http:\/\/maven.apache.org\/POM\/4.0.0\");\n+            var uri2 = URI.create(\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\");\n+            var uri3 = URI.create(\"http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\");\n+            var comment = doc.createComment(commentText);\n+            doc.appendChild(comment);\n+            var element = doc.createElementNS(uri1.toString(), \"project\");\n+            doc.appendChild(element);\n+            element.setAttributeNS(uri2.toString(), \"xsi:schemaLocation\", uri1 + \" \" + uri3);\n+            PomXmlBuilder pomXmlBuilder = new PomXmlBuilder(element);\n+            pomXmlBuilderConsumer.accept(pomXmlBuilder);\n+            return new XMLNode(element);\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static XMLNode create(URI uri, String nodeName, Consumer<XMLBuilder> xmlBuilderConsumer) {\n+        try {\n+            var doc =\n+                    javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n+            var element = doc.createElementNS(uri.toString(), nodeName);\n+            doc.appendChild(element);\n+            XMLBuilder xmlBuilder = new XMLBuilder(element);\n+            xmlBuilderConsumer.accept(xmlBuilder);\n+            return new XMLNode(element);\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    XMLNode(org.w3c.dom.Element element) {\n+        this.element = element;\n+        this.element.normalize();\n+        NodeList nodeList = element.getChildNodes();\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            if (nodeList.item(i) instanceof org.w3c.dom.Element e) {\n+                this.children.add(new XMLNode(e));\n+            }\n+        }\n+        for (int i = 0; i < element.getAttributes().getLength(); i++) {\n+            if (element.getAttributes().item(i) instanceof org.w3c.dom.Attr attr) {\n+                this.attrMap.put(attr.getName(), attr.getValue());\n+            }\n+        }\n+    }\n+\n+    public boolean hasAttr(String name) {\n+        return attrMap.containsKey(name);\n+    }\n+\n+    public String attr(String name) {\n+        return attrMap.get(name);\n+    }\n+\n+    static Document parse(InputStream is) {\n+        try {\n+            return javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);\n+        } catch (ParserConfigurationException | SAXException | IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static Document parse(Path path) {\n+        try {\n+            return parse(Files.newInputStream(path));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    XMLNode(Path path) {\n+        this(parse(path).getDocumentElement());\n+    }\n+\n+    XMLNode(File file) {\n+        this(parse(file.toPath()).getDocumentElement());\n+    }\n+\n+    XMLNode(URL url) throws Throwable {\n+        this(parse(url.openStream()).getDocumentElement());\n+    }\n+\n+    void write(StreamResult streamResult) throws Throwable {\n+        var transformer = TransformerFactory.newInstance().newTransformer();\n+        transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n+        transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n+        transformer.transform(new DOMSource(element.getOwnerDocument()), streamResult);\n+    }\n+\n+    void write(File file) {\n+        try {\n+            write(new StreamResult(file));\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    public void write(Bldr.XMLFile xmlFile) {\n+        try {\n+            write(new StreamResult(xmlFile.path().toFile()));\n+        } catch (Throwable t) {\n+            throw new RuntimeException(t);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        var stringWriter = new StringWriter();\n+        try {\n+            var transformer = TransformerFactory.newInstance().newTransformer();\n+            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+            transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n+            transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n+            transformer.transform(new DOMSource(element), new StreamResult(stringWriter));\n+            return stringWriter.toString();\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -148,2 +856,7 @@\n-    public PomXmlBuilder modelVersion(String s) {\n-      return element(\"modelVersion\", $->$.text(s));\n+    XPathExpression xpath(String expression) {\n+        XPath xpath = XPathFactory.newInstance().newXPath();\n+        try {\n+            return xpath.compile(expression);\n+        } catch (XPathExpressionException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -152,23 +865,6 @@\n-    public PomXmlBuilder pom(String groupId, String artifactId, String version) {\n-      return modelVersion(\"4.0.0\").packaging(\"pom\").ref(groupId, artifactId, version);\n-    }\n-    public PomXmlBuilder jar(String groupId, String artifactId, String version) {\n-      return modelVersion(\"4.0.0\").packaging(\"jar\").ref(groupId, artifactId, version);\n-    }\n-    public PomXmlBuilder groupId(String s) {\n-      return element(\"groupId\", $->$.text(s));\n-    }\n-    public PomXmlBuilder artifactId(String s) {\n-      return element(\"artifactId\", $->$.text(s));\n-    }\n-    public PomXmlBuilder packaging(String s) {\n-      return element(\"packaging\", $->$.text(s));\n-    }\n-    public PomXmlBuilder version(String s) {\n-      return element(\"version\", $->$.text(s));\n-    }\n-    public PomXmlBuilder build(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"build\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder plugins(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugins\", pomXmlBuilderConsumer);\n+    Node node(XPathExpression xPathExpression) {\n+        try {\n+            return (Node) xPathExpression.evaluate(this.element, XPathConstants.NODE);\n+        } catch (XPathExpressionException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -177,15 +873,7 @@\n-    public PomXmlBuilder plugin(String groupId, String artifactId, String version, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", $->$\n-              .ref(groupId, artifactId, version)\n-              .then(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder antPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return plugin(\"org.apache.maven.plugins\", \"maven-antrun-plugin\", \"1.8\", plugin -> plugin\n-              .executions(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder compilerPluginConfiguration(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return plugin(\"org.apache.maven.plugins\", \"maven-compiler-plugin\", \"3.11.0\", plugin -> plugin\n-                                        .configuration(pomXmlBuilderConsumer)\n-      );\n+    Optional<Node> optionalNode(XPathExpression xPathExpression) {\n+        var nodes = nodes(xPathExpression).toList();\n+        return switch (nodes.size()) {\n+            case 0 -> Optional.empty();\n+            case 1 -> Optional.of(nodes.getFirst());\n+            default -> throw new IllegalStateException(\"Expected 0 or 1 but got more\");\n+        };\n@@ -194,2 +882,6 @@\n-    public PomXmlBuilder execPlugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return plugin(\"org.codehaus.mojo\", \"exec-maven-plugin\", \"3.1.0\",pomXmlBuilderConsumer);\n+    String str(XPathExpression xPathExpression) {\n+        try {\n+            return (String) xPathExpression.evaluate(this.element, XPathConstants.STRING);\n+        } catch (XPathExpressionException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -198,616 +890,6 @@\n-    public PomXmlBuilder execPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return execPlugin(plugin->plugin.executions(pomXmlBuilderConsumer));\n-    }\n-\n-    public PomXmlBuilder plugin(String groupId, String artifactId,  Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", $->$\n-              .groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder plugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder parent(String groupId, String artifactId, String version){\n-      return parent(parent -> parent.ref(groupId, artifactId, version));\n-    }\n-    public PomXmlBuilder parent(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"parent\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder pluginManagement(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"pluginManagement\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder file(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"file\", pomXmlBuilderConsumer);\n-    }\n-\n-    public PomXmlBuilder activation(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"activation\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder profiles(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"profiles\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder profile(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"profile\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder arguments(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"arguments\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder executions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"executions\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder execution(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"execution\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder execIdPhaseConf(String id, String phase, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return execution(ex -> ex\n-              .id(id)\n-              .phase(phase)\n-              .goals(gs -> gs\n-                      .goal(\"exec\")\n-              )\n-              .configuration(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder exec(String phase, String executable, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return execIdPhaseConf(executable+\"-\"+phase,phase,conf->conf\n-              .executable(executable)\n-              .arguments(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder cmake(String id, String phase,  Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return execIdPhaseConf(id,phase,conf->conf\n-              .executable(\"cmake\")\n-              .arguments(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public PomXmlBuilder cmake(String id, String phase,  String ...args) {\n-      return execIdPhaseConf(id,phase,conf->conf\n-              .executable(\"cmake\")\n-              .arguments(arguments->arguments\n-                  .forEach(Stream.of(args), arguments::argument)\n-              )\n-      );\n-    }\n-    public PomXmlBuilder jextract(String id, String phase,  String ...args) {\n-      return execIdPhaseConf(id,phase,conf->conf\n-              .executable(\"jextract\")\n-              .arguments(arguments->arguments\n-                      .forEach(Stream.of(args), arguments::argument)\n-              )\n-      );\n-    }\n-\n-    public PomXmlBuilder ant(String id, String phase, String goal, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return execution(execution -> execution\n-              .id(id)\n-              .phase(phase)\n-              .goals(gs -> gs.goal(goal))\n-              .configuration(configuration -> configuration\n-                      .target(pomXmlBuilderConsumer)\n-              )\n-      );\n-\n-\n-    }\n-    public PomXmlBuilder goals(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"goals\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder target(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"target\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder configuration(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"configuration\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder compilerArgs(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"compilerArgs\", pomXmlBuilderConsumer);\n-    }\n-\n-    public PomXmlBuilder compilerArgs(String ...args) {\n-      return element(\"compilerArgs\", $->$.forEach(Stream.of(args), $::arg));\n-    }\n-    public PomXmlBuilder properties(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"properties\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder dependencies(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"dependencies\", pomXmlBuilderConsumer);\n-    }\n-    public PomXmlBuilder dependsOn(String groupId, String artifactId, String version) {\n-      return element(\"dependencies\", $->$.dependency(groupId, artifactId, version));\n-    }\n-    public    PomXmlBuilder dependency(String groupId, String artifactId, String version) {\n-      return dependency($->$.ref(groupId, artifactId, version));\n-    }\n-    public    PomXmlBuilder dependency(String groupId, String artifactId, String version, String scope) {\n-      return dependency($->$.ref(groupId, artifactId, version).scope(scope));\n-    }\n-    public PomXmlBuilder dependency(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"dependency\", pomXmlBuilderConsumer);\n-    }\n-\n-    public PomXmlBuilder modules(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"modules\", pomXmlBuilderConsumer);\n-    }\n-\n-    public PomXmlBuilder modules(String ...modules) {\n-       return element(\"modules\", $->$.forEach(Stream.of(modules), $::module));\n-    }\n-    public PomXmlBuilder module(String name) {\n-      return element(\"module\", $->$.text(name));\n-    }\n-\n-    public PomXmlBuilder property(String name, String value) {\n-      return element(name,$->$.text(value));\n-    }\n-\n-    public PomXmlBuilder scope(String s) {\n-      return element(\"scope\", $->$.text(s));\n-    }\n-    public PomXmlBuilder phase(String s) {\n-      return element(\"phase\", $->$.text(s));\n-    }\n-    public PomXmlBuilder argument(String s) {\n-      return element(\"argument\", $->$.text(s));\n-    }\n-\n-    public PomXmlBuilder goal(String s) {\n-      return element(\"goal\", $->$.text(s));\n-    }\n-\n-    public PomXmlBuilder copy(String file, String toDir) {\n-      return element(\"copy\", $->$.attr(\"file\", file).attr(\"toDir\", toDir));\n-    }\n-    public PomXmlBuilder echo(String message) {\n-      return element(\"echo\", $->$.attr(\"message\", message));\n-    }\n-    public PomXmlBuilder echo(String filename, String message) {\n-      return element(\"echo\", $->$.attr(\"message\", message).attr(\"file\", filename));\n-    }\n-\n-    public PomXmlBuilder groupIdArtifactId(String groupId, String artifactId) {\n-      return groupId(groupId).artifactId(artifactId);\n-    }\n-    public PomXmlBuilder ref(String groupId, String artifactId, String version) {\n-      return groupIdArtifactId(groupId,artifactId).version(version);\n-    }\n-\n-    public PomXmlBuilder skip(String string) {\n-      return element(\"skip\", $->$.text(string));\n-    }\n-\n-    public PomXmlBuilder id(String s) {\n-      return element(\"id\", $->$.text(s));\n-    }\n-\n-    public PomXmlBuilder arg(String s) {\n-      return element(\"arg\", $->$.text(s));\n-    }\n-    public PomXmlBuilder argLine(String s) {\n-      return element(\"argLine\", $->$.text(s));\n-    }\n-    public PomXmlBuilder source(String s) {\n-      return element(\"source\", $->$.text(s));\n-    }\n-    public PomXmlBuilder target(String s) {\n-      return element(\"target\", $->$.text(s));\n-    }\n-    public PomXmlBuilder showWarnings(String s) {\n-      return element(\"showWarnings\", $->$.text(s));\n-    }\n-    public PomXmlBuilder showDeprecation(String s) {\n-      return element(\"showDeprecation\", $->$.text(s));\n-    }\n-    public PomXmlBuilder failOnError(String s) {\n-      return element(\"failOnError\", $->$.text(s));\n-    }\n-    public PomXmlBuilder exists(String s) {\n-      return element(\"exists\", $->$.text(s));\n-    }\n-    public PomXmlBuilder activeByDefault(String s) {\n-      return element(\"activeByDefault\", $->$.text(s));\n-    }\n-\n-    public PomXmlBuilder executable(String s) {\n-      return element(\"executable\", $->$.text(s));\n-    }\n-  }\n-  public static class ImlBuilder extends AbstractXMLBuilder<ImlBuilder>{\n-    ImlBuilder(Element element) {\n-      super(element);\n-    }\n-    public ImlBuilder element(String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n-      return element(name, ImlBuilder::new, xmlBuilderConsumer);\n-    }\n-    public ImlBuilder element(URI uri, String name, Consumer<ImlBuilder> xmlBuilderConsumer) {\n-      return element(uri, name, ImlBuilder::new, xmlBuilderConsumer);\n-    }\n-\n-    public ImlBuilder modelVersion(String s) {\n-      return element(\"modelVersion\", $->$.text(s));\n-    }\n-    public ImlBuilder groupId(String s) {\n-      return element(\"groupId\", $->$.text(s));\n-    }\n-    public ImlBuilder artifactId(String s) {\n-      return element(\"artifactId\", $->$.text(s));\n-    }\n-    public ImlBuilder packaging(String s) {\n-      return element(\"packaging\", $->$.text(s));\n-    }\n-    public ImlBuilder version(String s) {\n-      return element(\"version\", $->$.text(s));\n-    }\n-    public ImlBuilder build(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"build\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder plugins(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugins\", pomXmlBuilderConsumer);\n-    }\n-\n-    public ImlBuilder plugin(String groupId, String artifactId, String version, Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", $->$\n-              .groupIdArtifactIdVersion(groupId, artifactId, version).then(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public ImlBuilder plugin(String groupId, String artifactId,  Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", $->$\n-              .groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer)\n-      );\n-    }\n-    public ImlBuilder plugin(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"plugin\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder parent(String groupId, String artifactId, String version){\n-      return parent(parent -> parent.groupIdArtifactIdVersion(groupId, artifactId, version));\n-    }\n-    public ImlBuilder parent(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"parent\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder pluginManagement(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"pluginManagement\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder file(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"file\", pomXmlBuilderConsumer);\n-    }\n-\n-    public ImlBuilder activation(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"activation\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder profiles(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-       return element(\"profiles\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder profile(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"profile\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder arguments(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"arguments\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder executions(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"executions\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder execution(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"execution\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder goals(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"goals\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder target(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"target\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder configuration(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"configuration\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder compilerArgs(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"compilerArgs\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder properties(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"properties\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder dependencies(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"dependencies\", pomXmlBuilderConsumer);\n-    }\n-    public    ImlBuilder dependency(String groupId, String artifactId, String version) {\n-      return dependency($->$.groupIdArtifactIdVersion(groupId, artifactId, version));\n-    }\n-    public    ImlBuilder dependency(String groupId, String artifactId, String version, String scope) {\n-      return dependency($->$.groupIdArtifactIdVersion(groupId, artifactId, version).scope(scope));\n-    }\n-    public ImlBuilder dependency(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"dependency\", pomXmlBuilderConsumer);\n-    }\n-\n-    public ImlBuilder modules(Consumer<ImlBuilder> pomXmlBuilderConsumer) {\n-      return element(\"modules\", pomXmlBuilderConsumer);\n-    }\n-    public ImlBuilder module(String name) {\n-      return element(\"module\", $->$.text(name));\n-    }\n-\n-    public ImlBuilder property(String name, String value) {\n-      return element(name,$->$.text(value));\n-    }\n-\n-    public ImlBuilder scope(String s) {\n-      return element(\"scope\", $->$.text(s));\n-    }\n-    public ImlBuilder phase(String s) {\n-      return element(\"phase\", $->$.text(s));\n-    }\n-    public ImlBuilder argument(String s) {\n-      return element(\"argument\", $->$.text(s));\n-    }\n-\n-    public ImlBuilder goal(String s) {\n-      return element(\"goal\", $->$.text(s));\n-    }\n-\n-    public ImlBuilder copy(String file, String toDir) {\n-      return element(\"copy\", $->$.attr(\"file\", file).attr(\"toDir\", toDir));\n-    }\n-\n-    public ImlBuilder groupIdArtifactId(String groupId, String artifactId) {\n-        return groupId(groupId).artifactId(artifactId);\n-    }\n-    public ImlBuilder groupIdArtifactIdVersion(String groupId, String artifactId, String version) {\n-      return groupIdArtifactId(groupId,artifactId).version(version);\n-    }\n-\n-    public ImlBuilder skip(String string) {\n-      return element(\"skip\", $->$.text(string));\n-    }\n-\n-    public ImlBuilder id(String s) {\n-      return element(\"id\", $->$.text(s));\n-    }\n-\n-    public ImlBuilder arg(String s) {\n-      return element(\"arg\", $->$.text(s));\n-    }\n-    public ImlBuilder argLine(String s) {\n-      return element(\"argLine\", $->$.text(s));\n-    }\n-    public ImlBuilder source(String s) {\n-      return element(\"source\", $->$.text(s));\n-    }\n-    public ImlBuilder target(String s) {\n-      return element(\"target\", $->$.text(s));\n-    }\n-    public ImlBuilder showWarnings(String s) {\n-      return element(\"showWarnings\", $->$.text(s));\n-    }\n-    public ImlBuilder showDeprecation(String s) {\n-      return element(\"showDeprecation\", $->$.text(s));\n-    }\n-    public ImlBuilder failOnError(String s) {\n-      return element(\"failOnError\", $->$.text(s));\n-    }\n-    public ImlBuilder exists(String s) {\n-      return element(\"exists\", $->$.text(s));\n-    }\n-    public ImlBuilder activeByDefault(String s) {\n-      return element(\"activeByDefault\", $->$.text(s));\n-    }\n-\n-    public ImlBuilder executable(String s) {\n-      return element(\"executable\", $->$.text(s));\n-    }\n-  }\n-  public static class XMLBuilder extends AbstractXMLBuilder<XMLBuilder>{\n-\n-    XMLBuilder(Element element) {\n-      super(element);\n-    }\n-    public XMLBuilder element(String name, Consumer<XMLBuilder> xmlBuilderConsumer) {\n-      return element(name, XMLBuilder::new, xmlBuilderConsumer);\n-    }\n-    public XMLBuilder element(URI uri, String name, Consumer<XMLBuilder> xmlBuilderConsumer) {\n-      return element(uri, name, XMLBuilder::new, xmlBuilderConsumer);\n-    }\n-  }\n-  static XMLNode create( String nodeName, Consumer<XMLBuilder> xmlBuilderConsumer) {\n-\n-      try {\n-          var doc  = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n-          \/\/var nl = doc.createTextNode(\"\\n\");\n-          \/\/doc.appendChild(nl);\n-          var element = doc.createElement(nodeName);\n-          doc.appendChild(element);\n-        XMLBuilder xmlBuilder = new XMLBuilder(element);\n-        xmlBuilderConsumer.accept(xmlBuilder);\n-        return new XMLNode(element);\n-      } catch (ParserConfigurationException e) {\n-          throw new RuntimeException(e);\n-      }\n-\n-\n-\n-    }\n-  static XMLNode createIml(String commentText, Consumer<ImlBuilder> imlBuilderConsumer) {\n-    try {\n-      var doc  = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n-\n-      var uri1 = URI.create(\"http:\/\/maven.apache.org\/POM\/4.0.0\");\n-      var uri2 = URI.create(\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\");\n-      var uri3 = URI.create(\"http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\");\n-      var comment = doc.createComment(commentText);\n-      doc.appendChild(comment);\n-      \/\/   var nl = doc.createTextNode(\"\\n\");\n-      \/\/   doc.appendChild(nl);\n-      var element = doc.createElementNS(uri1.toString(),\"project\");\n-      doc.appendChild(element);\n-      element.setAttributeNS(uri2.toString(), \"xsi:schemaLocation\",uri1+\" \"+ uri3);\n-      ImlBuilder imlBuilder = new ImlBuilder(element);\n-      imlBuilderConsumer.accept(imlBuilder);\n-      return new XMLNode(element);\n-    } catch (ParserConfigurationException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  public static XMLNode createPom(String commentText, Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-    try {\n-      var doc  = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n-\n-      var uri1 = URI.create(\"http:\/\/maven.apache.org\/POM\/4.0.0\");\n-      var uri2 = URI.create(\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\");\n-      var uri3 = URI.create(\"http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\");\n-      var comment = doc.createComment(commentText);\n-      doc.appendChild(comment);\n-   \/\/   var nl = doc.createTextNode(\"\\n\");\n-   \/\/   doc.appendChild(nl);\n-      var element = doc.createElementNS(uri1.toString(),\"project\");\n-      doc.appendChild(element);\n-      element.setAttributeNS(uri2.toString(), \"xsi:schemaLocation\",uri1+\" \"+ uri3);\n-      PomXmlBuilder pomXmlBuilder = new PomXmlBuilder(element);\n-      pomXmlBuilderConsumer.accept(pomXmlBuilder);\n-      return new XMLNode(element);\n-    } catch (ParserConfigurationException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  static XMLNode create(URI uri, String nodeName, Consumer<XMLBuilder> xmlBuilderConsumer) {\n-\n-    try {\n-      var doc  = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n-      \/\/var nl = doc.createTextNode(\"\\n\");\n-      \/\/doc.appendChild(nl);\n-      var element = doc.createElementNS(uri.toString(),nodeName);\n-      doc.appendChild(element);\n-      XMLBuilder xmlBuilder = new XMLBuilder(element);\n-      xmlBuilderConsumer.accept(xmlBuilder);\n-      return new XMLNode(element);\n-    } catch (ParserConfigurationException e) {\n-      throw new RuntimeException(e);\n-    }\n-\n-\n-\n-  }\n-\n-\n-  XMLNode(org.w3c.dom.Element element) {\n-    this.element = element;\n-    this.element.normalize();\n-    NodeList nodeList = element.getChildNodes();\n-    for (int i = 0; i < nodeList.getLength(); i++) {\n-      if (nodeList.item(i) instanceof org.w3c.dom.Element e) {\n-        this.children.add(new XMLNode(e));\n-      }\n-    }\n-    for (int i = 0; i < element.getAttributes().getLength(); i++) {\n-      if (element.getAttributes().item(i) instanceof org.w3c.dom.Attr attr) {\n-        this.attrMap.put(attr.getName(), attr.getValue());\n-      }\n-    }\n-  }\n-\n-  public boolean hasAttr(String name) {\n-    return attrMap.containsKey(name);\n-  }\n-\n-  public String attr(String name) {\n-    return attrMap.get(name);\n-  }\n-\n-  static Document parse(InputStream is) {\n-    try {\n-      return javax.xml.parsers.DocumentBuilderFactory.newInstance()\n-              .newDocumentBuilder()\n-              .parse(is);\n-    }catch (ParserConfigurationException | SAXException | IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  static Document parse(Path path) {\n-      try {\n-          return parse(Files.newInputStream(path));\n-      } catch (IOException e) {\n-          throw new RuntimeException(e);\n-      }\n-  }\n-\n-\n-  XMLNode(Path path) {\n-    this(parse(path).getDocumentElement());\n-  }\n-\n-  XMLNode(File file)  {\n-    this(parse(file.toPath()).getDocumentElement());\n-  }\n-\n-  XMLNode(URL url) throws Throwable {\n-    this(parse(url.openStream()).getDocumentElement());\n-  }\n-\n-  void write(StreamResult streamResult) throws Throwable {\n-    var transformer = TransformerFactory.newInstance().newTransformer();\n-    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-    transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-    transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"no\");\n-    transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n-  \/\/  transformer.setOutputProperty(\"http:\/\/www.oracle.com\/xml\/is-standalone\", \"yes\");\n-    transformer.transform(new DOMSource(element.getOwnerDocument()), streamResult);\n-  }\n-\n-  void write(File file) {\n-    try {\n-      write(new StreamResult(file));\n-    }catch (Throwable t){\n-      throw new RuntimeException(t);\n-    }\n-  }\n-  public void write(Bldr.XMLFile xmlFile) {\n-    try {\n-      write(new StreamResult(xmlFile.path().toFile()));\n-    }catch (Throwable t){\n-      throw new RuntimeException(t);\n-    }\n-  }\n-\n-  @Override\n-  public String toString() {\n-    var stringWriter = new StringWriter();\n-    try {\n-      var transformer = TransformerFactory.newInstance().newTransformer();\n-      transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n-      transformer.setOutputProperty(OutputKeys.METHOD, \"xml\");\n-      transformer.setOutputProperty(\"{http:\/\/xml.apache.org\/xslt}indent-amount\", \"4\");\n-      transformer.transform(new DOMSource(element), new StreamResult(stringWriter));\n-      return stringWriter.toString();\n-    } catch (Throwable e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  XPathExpression xpath(String expression) {\n-    XPath xpath = XPathFactory.newInstance().newXPath();\n-    try {\n-      return xpath.compile(expression);\n-    } catch (XPathExpressionException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  Node node(XPathExpression xPathExpression) {\n-    try {\n-      return (Node) xPathExpression.evaluate(this.element, XPathConstants.NODE);\n-    } catch (XPathExpressionException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n-  Optional<Node> optionalNode(XPathExpression xPathExpression) {\n-    var nodes = nodes(xPathExpression).toList();\n-    return switch (nodes.size()) {\n-      case 0 -> Optional.empty();\n-      case 1 -> Optional.of(nodes.getFirst());\n-      default -> throw new IllegalStateException(\"Expected 0 or 1 but got more\");\n-    };\n-  }\n-\n-  String str(XPathExpression xPathExpression) {\n-    try {\n-      return (String) xPathExpression.evaluate(this.element, XPathConstants.STRING);\n-    } catch (XPathExpressionException e) {\n-      throw new RuntimeException(e);\n+    String xpathQueryString(String xpathString) {\n+        try {\n+            return (String) xpath(xpathString).evaluate(this.element, XPathConstants.STRING);\n+        } catch (XPathExpressionException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -815,1 +897,0 @@\n-  }\n@@ -817,5 +898,6 @@\n-  String xpathQueryString(String xpathString) {\n-    try {\n-      return (String) xpath(xpathString).evaluate(this.element, XPathConstants.STRING);\n-    } catch (XPathExpressionException e) {\n-      throw new RuntimeException(e);\n+    NodeList nodeList(XPathExpression xPathExpression) {\n+        try {\n+            return (NodeList) xPathExpression.evaluate(this.element, XPathConstants.NODESET);\n+        } catch (XPathExpressionException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -823,1 +905,0 @@\n-  }\n@@ -825,5 +906,7 @@\n-  NodeList nodeList(XPathExpression xPathExpression) {\n-    try {\n-      return (NodeList) xPathExpression.evaluate(this.element, XPathConstants.NODESET);\n-    } catch (XPathExpressionException e) {\n-      throw new RuntimeException(e);\n+    Stream<Node> nodes(XPathExpression xPathExpression) {\n+        var nodeList = nodeList(xPathExpression);\n+        List<Node> nodes = new ArrayList<>();\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            nodes.add(nodeList.item(i));\n+        }\n+        return nodes.stream();\n@@ -831,1 +914,0 @@\n-  }\n@@ -833,5 +915,8 @@\n-  Stream<Node> nodes(XPathExpression xPathExpression) {\n-    var nodeList = nodeList(xPathExpression);\n-    List<Node> nodes = new ArrayList<>();\n-    for (int i = 0; i < nodeList.getLength(); i++) {\n-      nodes.add(nodeList.item(i));\n+    Stream<org.w3c.dom.Element> elements(XPathExpression xPathExpression) {\n+        return nodes(xPathExpression)\n+                .filter(n -> n instanceof org.w3c.dom.Element)\n+                .map(n -> (Element) n);\n+    }\n+\n+    Stream<XMLNode> xmlNodes(XPathExpression xPathExpression) {\n+        return elements(xPathExpression).map(e -> new XMLNode(e));\n@@ -839,12 +924,0 @@\n-    return nodes.stream();\n-  }\n-\n-  Stream<org.w3c.dom.Element> elements(XPathExpression xPathExpression) {\n-    return nodes(xPathExpression)\n-        .filter(n -> n instanceof org.w3c.dom.Element)\n-        .map(n -> (Element) n);\n-  }\n-\n-  Stream<XMLNode> xmlNodes(XPathExpression xPathExpression) {\n-    return elements(xPathExpression).map(e -> new XMLNode(e));\n-  }\n","filename":"hat\/bldr\/XMLNode.java","additions":881,"deletions":808,"binary":false,"changes":1689,"status":"modified"},{"patch":"@@ -31,5 +31,2 @@\n- var buildDir = hatDir.buildDir(\"build\").remove();\n- hatDir.findDirs(path->path.getFileName().endsWith(\"target\"))\n-       .map(path->BuildDir.of(path))\n-       .peek(dir->println(\"removing \" +dir.path()))\n-       .forEach(dir->dir.remove());\n+ hatDir.buildDir(\"build\").remove();\n+ hatDir.buildDir(\"stage\").remove();\n","filename":"hat\/clean","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}