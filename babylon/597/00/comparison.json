{"files":[{"patch":"@@ -360,9 +360,0 @@\n-\n-    public CudaBackend(String configSpec) {\n-        this(Config.of(configSpec));\n-    }\n-\n-    public CudaBackend() {\n-        this(Config.of());\n-    }\n-\n@@ -373,0 +364,3 @@\n+    public CudaBackend() {\n+        this(Config.fromEnvOrProperty());\n+    }\n@@ -381,2 +375,2 @@\n-            String code = Config.PTX.isSet(config.bits()) ? createPTX(kernelCallGraph,  args) : createC99(kernelCallGraph, args);\n-            if (Config.SHOW_CODE.isSet(config.bits())) {\n+            String code = Config.PTX.isSet(config()) ? createPTX(kernelCallGraph,  args) : createC99(kernelCallGraph, args);\n+            if (Config.SHOW_CODE.isSet(config())) {\n@@ -442,1 +436,1 @@\n-        if (Config.SHOW_KERNEL_MODEL.isSet(config.bits())){\n+        if (Config.SHOW_KERNEL_MODEL.isSet(config())){\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaBackend.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import hat.Config;\n+\n@@ -29,1 +31,1 @@\n-        CudaBackend backend = new CudaBackend();\n+        CudaBackend backend = new CudaBackend(Config.fromIntBits(0));\n","filename":"hat\/backends\/ffi\/cuda\/src\/main\/java\/hat\/backend\/ffi\/CudaDeviceInfo.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(\"mock_backend\", Config.of(0));\n+        super(\"mock_backend\", Config.fromIntBits(0));\n","filename":"hat\/backends\/ffi\/mock\/src\/main\/java\/hat\/backend\/ffi\/MockBackend.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        this(Config.of(configSpec));\n+        this(Config.fromSpec(configSpec));\n@@ -40,1 +40,1 @@\n-        this(Config.of());\n+        this(Config.fromEnvOrProperty());\n@@ -57,1 +57,1 @@\n-            if (Config.SHOW_CODE.isSet(config.bits())) {\n+            if (Config.SHOW_CODE.isSet(config())) {\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import hat.Config;\n+\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLDeviceInfo.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        if (Config.SHOW_KERNEL_MODEL.isSet(config.bits())) {\n+        if (Config.SHOW_KERNEL_MODEL.isSet(config())) {\n@@ -281,1 +281,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -288,1 +288,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -292,1 +292,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -304,1 +304,1 @@\n-        if (Config.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config())) {\n@@ -310,1 +310,1 @@\n-        if (Config.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config())) {\n@@ -322,1 +322,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -330,1 +330,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -334,1 +334,1 @@\n-                if (Config.SHOW_STATE.isSet(config.bits())) {\n+                if (Config.SHOW_STATE.isSet(config())) {\n@@ -347,1 +347,1 @@\n-        if (Config.SHOW_STATE.isSet(config.bits())) {\n+        if (Config.SHOW_STATE.isSet(config())) {\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/C99FFIBackend.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        if (Config.INTERPRET.isSet(config.bits())) {\n+        if (Config.INTERPRET.isSet(config())) {\n@@ -132,2 +132,2 @@\n-        if (Config.MINIMIZE_COPIES.isSet(config.bits())) {\n-            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+        if (Config.MINIMIZE_COPIES.isSet(config())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config())) {\n@@ -205,1 +205,1 @@\n-            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config())) {\n@@ -210,1 +210,1 @@\n-            if (Config.SHOW_COMPUTE_MODEL.isSet(config.bits())) {\n+            if (Config.SHOW_COMPUTE_MODEL.isSet(config())) {\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackend.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public abstract class FFIBackendDriver implements Backend {\n+public abstract class FFIBackendDriver extends Backend {\n@@ -42,1 +42,0 @@\n-    protected final Config config;\n@@ -168,0 +167,1 @@\n+        super(config);\n@@ -169,1 +169,0 @@\n-        this.config = config;\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/java\/hat\/backend\/ffi\/FFIBackendDriver.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-It was auto generated 2025-10-01 11:34:45.328 by hat.FFIConfigCreator\n+It was auto generated 2025-10-02 14:07:12.618 by hat.FFIConfigCreator\n@@ -50,0 +50,4 @@\n+    static constexpr int NO_BUFFER_TAGGING_BIT            = 1<<0x17;\n+    static constexpr int NO_DIALECT_BIT                   = 1<<0x18;\n+    static constexpr int NO_MODULE_OP_BIT                 = 1<<0x19;\n+    static constexpr int HEADLESS_BIT                     = 1<<0x1a;\n@@ -68,0 +72,4 @@\n+    bool noBufferTagging;\n+    bool noDialect;\n+    bool noModuleOp;\n+    bool headless;\n@@ -88,0 +96,4 @@\n+        noBufferTagging((configBits & NO_BUFFER_TAGGING_BIT)==NO_BUFFER_TAGGING_BIT),\n+        noDialect((configBits & NO_DIALECT_BIT)==NO_DIALECT_BIT),\n+        noModuleOp((configBits & NO_MODULE_OP_BIT)==NO_MODULE_OP_BIT),\n+        headless((configBits & HEADLESS_BIT)==HEADLESS_BIT),\n@@ -107,0 +119,4 @@\n+                std::cout << \"native noBufferTagging \" << noBufferTagging << std::endl;\n+                std::cout << \"native noDialect \" << noDialect << std::endl;\n+                std::cout << \"native noModuleOp \" << noModuleOp << std::endl;\n+                std::cout << \"native headless \" << headless << std::endl;\n@@ -131,0 +147,4 @@\n+    \"NO_BUFFER_TAGGING_BIT\",\n+    \"NO_DIALECT_BIT\",\n+    \"NO_MODULE_OP_BIT\",\n+    \"HEADLESS_BIT\",\n@@ -148,0 +168,4 @@\n+    \"Skip AUTO buffer tagging (rely on annotations)\",\n+    \"Skip generating HAT dialect ops\",\n+    \"Use original callgraph (not using Module Op)\",\n+    \"Don't show UI\",\n","filename":"hat\/backends\/ffi\/shared\/src\/main\/native\/include\/config.h","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+\n+\n","filename":"hat\/backends\/java\/seq\/src\/main\/java\/hat\/backend\/java\/JavaSequentialBackend.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.Config;\n@@ -51,2 +52,2 @@\n-    public OpenCLBackend() {\n-        super(\"opencl_backend\");\n+    public OpenCLBackend(Config config) {\n+        super(config,\"opencl_backend\");\n@@ -57,1 +58,3 @@\n-\n+    public OpenCLBackend() { \/\/ Ignore Intellij's no usages here, we load vai serviceloader!\n+        this(Config.fromEnvOrProperty());\n+    }\n","filename":"hat\/backends\/jextracted\/opencl\/src\/main\/java\/hat\/backend\/jextracted\/OpenCLBackend.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -46,2 +47,2 @@\n-    public C99JExtractedBackend(String libName) {\n-        super(libName);\n+    public C99JExtractedBackend(Config config,String libName) {\n+        super(config,libName);\n@@ -49,1 +50,0 @@\n-\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/C99JExtractedBackend.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -57,2 +58,2 @@\n-    public JExtractedBackend(String libName) {\n-        super(libName);\n+    public JExtractedBackend(Config config, String libName) {\n+        super(config,libName);\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackend.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -39,1 +40,1 @@\n-public abstract class JExtractedBackendDriver implements Backend {\n+public abstract class JExtractedBackendDriver extends Backend {\n@@ -68,1 +69,2 @@\n-    public JExtractedBackendDriver(String libName) {\n+    public JExtractedBackendDriver(Config config,String libName) {\n+      super(config);\n","filename":"hat\/backends\/jextracted\/shared\/src\/main\/java\/hat\/backend\/jextracted\/JExtractedBackendDriver.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/Accelerator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -139,0 +139,1 @@\n+    \/*\n@@ -156,1 +157,1 @@\n-    }\n+    } *\/\n@@ -165,0 +166,3 @@\n+        if (kernelCallGraph == null){\n+            throw new RuntimeException(\"Failed to create KernelCallGraph (did you miss @CodeReflection annotation?) \");\n+        }\n@@ -241,7 +245,0 @@\n-\/*\n-    @Override\n-    public void preEscape(Buffer b) {\n-        if (accelerator.backend instanceof BufferTracker bufferTracker) {\n-            bufferTracker.preEscape(b);\n-        }\n-    }\n@@ -249,6 +246,0 @@\n-    @Override\n-    public void postEscape(Buffer b) {\n-        if (accelerator.backend instanceof BufferTracker bufferTracker) {\n-            bufferTracker.postEscape(b);\n-        }\n-    } *\/\n","filename":"hat\/core\/src\/main\/java\/hat\/ComputeContext.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-        public boolean isSet(int bits){\n-            return (shifted()&bits) == shifted();\n+       public boolean isBitSet(int bits){\n+            return (mask()&bits) == mask();\n@@ -54,2 +54,5 @@\n-        public int shifted(){\n-            return 1<<index;\n+        public boolean isSet(Config config){\n+            return (mask()&config.bits) == mask();\n+        }\n+        public int mask(){\n+            return ((1<<size)-1) << index;\n@@ -57,1 +60,0 @@\n-    }\n@@ -59,0 +61,4 @@\n+        public String maskString(){\n+            return Integer.toBinaryString(mask());\n+        }\n+    }\n@@ -60,2 +66,0 @@\n-    \/\/ Bits 0-3 select platform id 0..5\n-    \/\/ Bits 4-7 select device id 0..15\n@@ -79,0 +83,5 @@\n+    public static final Bit NO_BUFFER_TAGGING = Bit.nextBit(INTERPRET, \"NO_BUFFER_TAGGING\", \"Skip AUTO buffer tagging (rely on annotations)\");\n+    public static final Bit NO_DIALECT = Bit.nextBit(NO_BUFFER_TAGGING, \"NO_DIALECT\", \"Skip generating HAT dialect ops\");\n+    public static final Bit NO_MODULE_OP = Bit.nextBit(NO_DIALECT, \"NO_MODULE_OP\", \"Use original callgraph (not using Module Op)\");\n+    public static final Bit HEADLESS = Bit.nextBit(NO_MODULE_OP, \"HEADLESS\", \"Don't show UI\");\n+\n@@ -97,1 +106,5 @@\n-            INTERPRET\n+            INTERPRET,\n+            NO_BUFFER_TAGGING,\n+            NO_DIALECT,\n+            NO_MODULE_OP,\n+            HEADLESS\n@@ -100,2 +113,0 @@\n-\n-\n@@ -119,1 +130,1 @@\n-    public static Config of() {\n+    public static Config fromEnvOrProperty() {\n@@ -122,1 +133,1 @@\n-            return of(opts);\n+            return fromSpec(opts);\n@@ -126,1 +137,1 @@\n-            return of(opts);\n+            return fromSpec(opts);\n@@ -128,1 +139,1 @@\n-        return of(\"\");\n+        return fromSpec(\"\");\n@@ -131,1 +142,1 @@\n-    public static Config of(int bits) {\n+    public static Config fromIntBits(int bits) {\n@@ -135,1 +146,1 @@\n-    public static Config of(List<Bit> configBits) {\n+    public static Config fromBits(List<Bit> configBits) {\n@@ -138,1 +149,1 @@\n-            allBits |= configBit.shifted();\n+            allBits |= configBit.mask();\n@@ -143,2 +154,2 @@\n-    public static Config of(Bit... configBits) {\n-        return of(List.of(configBits));\n+    public static Config fromBits(Bit... configBits) {\n+        return fromBits(List.of(configBits));\n@@ -148,1 +159,1 @@\n-        return Config.of(Config.of(List.of(configBits)).bits & bits);\n+        return Config.fromIntBits(Config.fromBits(List.of(configBits)).bits & bits);\n@@ -152,1 +163,1 @@\n-        return Config.of(Config.of(List.of(configBits)).bits | bits);\n+        return Config.fromIntBits(Config.fromBits(List.of(configBits)).bits | bits);\n@@ -157,1 +168,1 @@\n-    public static Config of(String spec) {\n+    public static Config fromSpec(String spec) {\n@@ -159,1 +170,1 @@\n-            return Config.of(0);\n+            return Config.fromIntBits(0);\n@@ -163,1 +174,1 @@\n-                return new Config(bit.shifted());\n+                return new Config(bit.mask());\n@@ -179,1 +190,1 @@\n-            return of(bits);\n+            return fromIntBits(bits);\n@@ -183,1 +194,1 @@\n-            return Config.of(0);\n+            return Config.fromIntBits(0);\n@@ -191,1 +202,1 @@\n-            if (bit.isSet(bits)) {\n+            if (bit.isBitSet(bits)) {\n@@ -202,0 +213,7 @@\n+    public static void main(String[] args){\n+       bitList.forEach(b-> {\n+           System.out.printf(\"%30s MASK= %32s\\n\",  b.name,b.maskString());\n+       });\n+\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/Config.java","additions":45,"deletions":27,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -15,0 +39,1 @@\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/FFIConfigCreator.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -38,1 +39,2 @@\n-public interface Backend extends BufferAllocator {\n+public  abstract class Backend implements BufferAllocator {\n+    private final Config config;\n@@ -40,1 +42,7 @@\n-   \/\/ Arena arena();\n+    public Config config(){\n+        return config;\n+    }\n+\n+    protected Backend(Config config){\n+        this.config = config;\n+    }\n@@ -42,1 +50,1 @@\n-    default String getName() {\n+    final public String getName() {\n@@ -46,1 +54,1 @@\n-    Predicate<Backend> PROPERTY = (backend) -> {\n+    final public static Predicate<Backend> PROPERTY = (backend) -> {\n@@ -54,3 +62,1 @@\n-    Predicate<Backend> FIRST = backend -> true;\n-   \/\/  Predicate<Backend> JAVA_MULTITHREADED = backend -> backend instanceof JavaMultiThreadedBackend;\n-   \/\/ Predicate<Backend> JAVA_SEQUENTIAL = backend -> backend instanceof JavaSequentialBackend;\n+    public static Predicate<Backend> FIRST = backend -> true;\n@@ -58,1 +64,1 @@\n-    static Backend getBackend(Predicate<Backend> backendPredicate) {\n+    public static Backend getBackend(Predicate<Backend> backendPredicate) {\n@@ -66,1 +72,1 @@\n-    void computeContextHandoff(ComputeContext computeContext);\n+    public abstract void computeContextHandoff(ComputeContext computeContext);\n@@ -68,1 +74,1 @@\n-    void dispatchCompute(ComputeContext computeContext, Object... args);\n+    public abstract void dispatchCompute(ComputeContext computeContext, Object... args);\n@@ -70,1 +76,1 @@\n-    void dispatchKernel(KernelCallGraph kernelCallGraph, NDRange ndRange, Object... args);\n+    public abstract void dispatchKernel(KernelCallGraph kernelCallGraph, NDRange ndRange, Object... args);\n","filename":"hat\/core\/src\/main\/java\/hat\/backend\/Backend.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -38,1 +39,5 @@\n-public abstract class BackendAdaptor implements Backend {\n+public abstract class BackendAdaptor extends Backend {\n+    BackendAdaptor(Config config) {\n+        super(config);\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/backend\/BackendAdaptor.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -53,0 +54,1 @@\n+        super(Config.fromEnvOrProperty());\n","filename":"hat\/core\/src\/main\/java\/hat\/backend\/DebugBackend.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -38,1 +39,1 @@\n-public abstract class JavaBackend implements Backend {\n+public abstract class JavaBackend extends Backend {\n@@ -60,0 +61,8 @@\n+    JavaBackend(Config config){\n+        super(config);\n+    }\n+\n+    JavaBackend(){\n+        this(Config.fromEnvOrProperty());\n+    }\n+\n","filename":"hat\/core\/src\/main\/java\/hat\/backend\/java\/JavaBackend.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import hat.callgraph.CallGraph;\n@@ -296,2 +297,0 @@\n-        boolean bufferTagging = Boolean.getBoolean(\"bufferTagging\");\n-\n@@ -334,1 +333,1 @@\n-                    if (bufferTagging) assert bufferAccessList.get(i).value == accessByte;\n+                    if (CallGraph.bufferTagging) assert bufferAccessList.get(i).value == accessByte;\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/ArgArray.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -45,2 +46,4 @@\n-    public static boolean noModuleOp = Boolean.getBoolean(\"noModuleOp\");\n-    public static boolean bufferTagging = Boolean.getBoolean(\"bufferTagging\");\n+\n+    \/\/ Todo: We should phase these out. We can also use Config.....\n+    public final static boolean noModuleOp = Boolean.getBoolean(\"noModuleOp\");\n+    public final static boolean bufferTagging = Boolean.getBoolean(\"bufferTagging\");\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/CallGraph.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -92,4 +92,5 @@\n-        if (fow.body().yieldType().equals(JavaType.VOID)) {\n-            if (calledMethod.getParameterTypes() instanceof Class<?>[] parameterTypes && parameterTypes.length > 1) {\n-                \/\/ We check that the proposed kernel first arg is an KernelContext and\n-                \/\/ the only other args are primitive or ifacebuffers\n+        if (fow.body().yieldType().equals(JavaType.VOID)\n+                && calledMethod.getParameterTypes() instanceof Class<?>[] parameterTypes\n+                && parameterTypes.length > 1) {\n+                \/\/ We check that the proposed kernel returns void, the first arg is an KernelContext and we have more args\n+                \/\/ We also check that other args are primitive or ifacebuffers  (or atomics?)...\n@@ -116,3 +117,0 @@\n-        } else {\n-            return false;\n-        }\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/ComputeCallGraph.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -69,1 +93,1 @@\n-        var c = Config.of(\"INFO,SHOW_CODE,SHOW_KERNEL_MODEL,SHOW_COMPUTE_MODEL,PLATFORM:0,DEVICE:0\");\n+        var c = Config.fromSpec(\"INFO,SHOW_CODE,HEADLESS,NO_BUFFER_TAGGING,SHOW_KERNEL_MODEL,SHOW_COMPUTE_MODEL,PLATFORM:0,DEVICE:0\");\n","filename":"hat\/core\/src\/main\/java\/hat\/codebuilders\/C99HATConfigBuilder.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-                ,new OpenCLBackend(of(Config.PROFILE,  Config.TRACE)));\n+                ,new OpenCLBackend(fromBits(Config.PROFILE,  Config.TRACE)));\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Mesh.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,5 +62,1 @@\n-                new OpenCLBackend(of(\n-                        Config.TRACE_COPIES,\n-                        Config.MINIMIZE_COPIES\n-                ))\n-\n+                new OpenCLBackend(fromSpec(\"TRACE_COPIES,MINIMIZE_COPIES\"))\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/MinBufferTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import hat.Config;\n@@ -74,2 +75,0 @@\n-        boolean headless = Boolean.getBoolean(\"headless\") ||( args.length>0 && args[0].equals(\"--headless\"));\n-\n@@ -86,0 +85,3 @@\n+        \/\/ TODO: lets use Config going forward\n+        boolean headless = Boolean.getBoolean(\"headless\") ||( args.length>0 && args[0].equals(\"--headless\"))\n+                || Config.HEADLESS.isSet(accelerator.backend.config());\n@@ -87,4 +89,0 @@\n-        \/\/var s32Array2DState = SegmentMapper.BufferState.of(s32Array2D);\n-        \/\/System.out.println(s32Array2DState);\n-\n-\n","filename":"hat\/examples\/mandel\/src\/main\/java\/mandel\/Main.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import hat.Config;\n@@ -46,1 +47,1 @@\n-        boolean headless = Boolean.getBoolean(\"headless\") ||( args.length>0 && args[0].equals(\"--headless\"));\n+\n@@ -48,1 +49,1 @@\n-      \/\/  System.out.println(\"Using image \"+imageName+\".jpg\");\n+\n@@ -50,5 +51,1 @@\n-               \/\/\"\/images\/team.jpg\"\n-              \/\/ \"\/images\/eggheads.jpg\"\n-             \/\/ \"\/images\/highett.jpg\"\n-        \/\/     \"\/images\/Nasa1996.jpg\"\n-      \/\/  ));\n+\n@@ -57,4 +54,5 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(),\n-              \/\/  new JavaSequentialBackend()\n-                Backend.FIRST\n-        );\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+\n+        \/\/ TODO: lets use Config going forward\n+        boolean headless = Boolean.getBoolean(\"headless\") ||( args.length>0 && args[0].equals(\"--headless\"))\n+                || Config.HEADLESS.isSet(accelerator.backend.config());\n@@ -67,1 +65,0 @@\n-       \/\/ System.out.println(\"result table layout \"+Buffer.getLayout(resultTable));\n","filename":"hat\/examples\/violajones\/src\/main\/java\/violajones\/Main.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"}]}