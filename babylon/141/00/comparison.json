{"files":[{"patch":"@@ -12,1 +12,5 @@\n-set(BEEHIVE $ENV{HOME}\/github\/beehive-spirv-toolkit)\n+if (DEFINED ENV{BEEHIVE})\n+   set(BEEHIVE $ENV{BEEHIVE})\n+else()\n+   set(BEEHIVE $ENV{HOME}\/github\/beehive-spirv-toolkit)\n+endif()\n","filename":"hat\/CMakeLists.txt","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,4 +75,4 @@\n-            var loopParams = forOpWrapper().op().loopBody().blocks().getFirst().parameters().toArray(new Block.Parameter[0]);\n-            var updateParams = forOpWrapper().op().update().blocks().getFirst().parameters().toArray(new Block.Parameter[0]);\n-            var condParams = forOpWrapper().op().cond().blocks().getFirst().parameters().toArray(new Block.Parameter[0]);\n-            var lastInitOp = forOpWrapper().op().init().blocks().getFirst().ops().getLast();\n+            var loopParams = forOpWrapper().op().loopBody().entryBlock().parameters().toArray(new Block.Parameter[0]);\n+            var updateParams = forOpWrapper().op().update().entryBlock().parameters().toArray(new Block.Parameter[0]);\n+            var condParams = forOpWrapper().op().cond().entryBlock().parameters().toArray(new Block.Parameter[0]);\n+            var lastInitOp = forOpWrapper().op().init().entryBlock().ops().getLast();\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuildContext.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -20,1 +20,1 @@\n-        blockWrapperConsumer.accept(new BlockWrapper(body.blocks().getFirst()));\n+        blockWrapperConsumer.accept(new BlockWrapper(body.entryBlock()));\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/BodyWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-        op().body().blocks().getFirst().parameters().forEach(parameter -> {\n+        op().parameters().forEach(parameter -> {\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/FuncOpWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        return OpWrapper.wrap(op().bodies().get(0).blocks().get(0).ops().stream()\n+        return OpWrapper.wrap(op().body().entryBlock().ops().stream()\n@@ -48,1 +48,1 @@\n-        var block = op().bodies().get(0).blocks().get(0);\n+        var block = op().body().entryBlock();\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/LambdaOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,3 +27,0 @@\n-import hat.util.Result;\n-import hat.util.StreamCounter;\n-\n@@ -42,0 +39,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -50,11 +48,3 @@\n-            if (varOp.parentBlock().parentBody().parentOp() instanceof CoreOp.FuncOp funcOp) {\n-                Result<OW> result = new Result<>();\n-                StreamCounter.of(funcOp.bodies().getFirst().blocks().getFirst().parameters(), (c, parameter) -> {\n-                            if (parameter.uses().stream().findFirst().get().op().equals(varOp)) {\n-                                result.of((OW) new VarFuncDeclarationOpWrapper(varOp, funcOp, parameter, c.value()));\n-                            }\n-                        }\n-                );\n-                if (result.isPresent()) {\n-                    return result.get();\n-                }\n+            if (varOp.operands().getFirst() instanceof Block.Parameter parameter &&\n+                    parameter.invokableOperation() instanceof CoreOp.FuncOp funcOp) {\n+                return (OW) new VarFuncDeclarationOpWrapper(varOp, funcOp, parameter);\n@@ -189,1 +179,1 @@\n-        return bodyN(i).blocks().getFirst();\n+        return bodyN(i).entryBlock();\n@@ -193,1 +183,1 @@\n-        return op().bodies().getFirst().blocks().getFirst();\n+        return op().bodies().getFirst().entryBlock();\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-    public VarFuncDeclarationOpWrapper(CoreOp.VarOp op, CoreOp.FuncOp funcOp, Block.Parameter blockParameter, int idx) {\n+    public VarFuncDeclarationOpWrapper(CoreOp.VarOp op, CoreOp.FuncOp funcOp, Block.Parameter blockParameter) {\n@@ -15,1 +15,1 @@\n-        this.idx = idx;\n+        this.idx = blockParameter.index();\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/VarFuncDeclarationOpWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,0 @@\n-import java.lang.reflect.code.TypeElement;\n@@ -6,1 +5,0 @@\n-import java.lang.reflect.code.type.VarType;\n@@ -14,6 +12,1 @@\n-        TypeElement typeElement = op().resultType();\n-\n-        if (typeElement instanceof VarType varType) {\n-            return (JavaType) varType.valueType();\n-        }\n-        return (JavaType) typeElement;\n+        return (JavaType) op().varType();\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/VarOpWrapper.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,26 +2,38 @@\n-   backend=$1\n-   example=$2\n-   example_class=$3\n-   if test \"${backend}\" =  \"java\"; then\n-       backend_jar=backends\/shared\/src\/main\/resources\n-   else\n-       backend_jar=maven-build\/hat-backend-${backend}-1.0.jar\n-   fi\n-   echo checking backend_jar = ${backend_jar}\n-   if test -f ${backend_jar} -o -d ${backend_jar} ;then\n-      example_jar=maven-build\/hat-example-${example}-1.0.jar\n-      echo checking example_jar = ${example_jar}\n-      if test -f ${example_jar} ; then\n-         ${JAVA_HOME}\/bin\/java \\\n-            --enable-preview --enable-native-access=ALL-UNNAMED \\\n-            --class-path hat\/target\/hat-1.0.jar:${example_jar}:${backend_jar} \\\n-            --add-exports=java.base\/jdk.internal=ALL-UNNAMED \\\n-            -Djava.library.path=maven-build\\\n-            -Dheadless=true \\\n-            ${example}.${example_class}\n-      else\n-         echo no such example example_jar = ${example_jar}\n-      fi\n-   else\n-      echo no such backend backend_jar = ${backend_jar}\n-   fi\n+  backend=$1\n+  example=$2\n+  example_class=$3\n+  if test \"${backend}\" = \"java\"; then\n+    backend_jar=backends\/shared\/src\/main\/resources\n+  else\n+    backend_jar=backends\/${backend}\/target\/hat-backend-${backend}-1.0.jar\n+  fi\n+\n+  echo checking backend_jar = ${backend_jar}\n+  if ! test -e ${backend_jar} ;then\n+    echo no such backend backend_jar = ${backend_jar}\n+    exit 1\n+  fi\n+\n+  backend_native_path=build\/backends\/${backend}\n+  if ! test \"${backend}\" = \"java\"; then\n+    echo checking backend_native_path = ${backend_native_path}\n+    if ! test -d ${backend_native_path} ;then\n+      echo no such native path backend_native_path = ${backend_native_path}\n+      exit 1\n+    fi\n+  fi\n+\n+  example_jar=examples\/${example}\/target\/hat-example-${example}-1.0.jar\n+  echo checking example_jar = ${example_jar}\n+  if ! test -f ${example_jar} ;then\n+    echo no such example example_jar = ${example_jar}\n+    exit 1\n+  fi\n+\n+  ${JAVA_HOME}\/bin\/java \\\n+    --enable-preview --enable-native-access=ALL-UNNAMED \\\n+    --class-path hat\/target\/hat-1.0.jar:${example_jar}:${backend_jar} \\\n+    --add-exports=java.base\/jdk.internal=ALL-UNNAMED \\\n+    -Djava.library.path=${backend_native_path} \\\n+    -Dheadless=true \\\n+    ${example}.${example_class}\n","filename":"hat\/hatrun.bash","additions":38,"deletions":26,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-bash .\/hatrun.bash violajones ViolaJonesCompute\n+bash .\/hatrun.bash opencl violajones ViolaJonesCompute\n","filename":"hat\/run.bash","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}