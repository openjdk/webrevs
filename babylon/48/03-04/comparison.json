{"files":[{"patch":"@@ -67,1 +67,0 @@\n-import java.util.Arrays;\n@@ -76,0 +75,7 @@\n+            DirectMethodHandleDesc.Kind.STATIC,\n+            LambdaMetafactory.class.describeConstable().orElseThrow(),\n+            \"metafactory\",\n+            MethodTypeDesc.of(CD_CallSite, CD_MethodHandles_Lookup, CD_String, CD_MethodType,\n+                              CD_MethodType, CD_MethodHandle, CD_MethodType));\n+\n+    private static final DirectMethodHandleDesc DMHD_LAMBDA_ALT_METAFACTORY = MethodHandleDesc.ofMethod(\n@@ -79,1 +85,2 @@\n-            MethodTypeDesc.of(CD_CallSite, CD_MethodHandles_Lookup, CD_String, CD_MethodType, CD_Object.arrayType()));\n+            MethodTypeDesc.of(CD_CallSite, CD_MethodHandles_Lookup, CD_String, CD_MethodType,\n+                              CD_Object.arrayType()));\n@@ -147,1 +154,3 @@\n-    public static <O extends Op & Op.Invokable> byte[] generateClassData(MethodHandles.Lookup lookup, String name, O iop) {\n+    public static <O extends Op & Op.Invokable> byte[] generateClassData(MethodHandles.Lookup lookup,\n+                                                                         String name,\n+                                                                         O iop) {\n@@ -173,1 +182,8 @@\n-    private static <O extends Op & Op.Invokable> void generateMethod(MethodHandles.Lookup lookup, ClassDesc className, String methodName, O iop, ClassBuilder clb, List<LambdaOp> lambdaSink, BitSet quotable) {\n+    private static <O extends Op & Op.Invokable> void generateMethod(MethodHandles.Lookup lookup,\n+                                                                     ClassDesc className,\n+                                                                     String methodName,\n+                                                                     O iop,\n+                                                                     ClassBuilder clb,\n+                                                                     List<LambdaOp> lambdaSink,\n+                                                                     BitSet quotable) {\n+\n@@ -175,2 +191,3 @@\n-        MethodTypeDesc mtd = MethodRef.toNominalDescriptor(iop.invokableType());\n-        mtd = mtd.insertParameterTypes(0, capturedValues.stream().map(Value::type).map(BytecodeGenerator::toClassDesc).toArray(ClassDesc[]::new));\n+        MethodTypeDesc mtd = MethodRef.toNominalDescriptor(\n+                iop.invokableType()).insertParameterTypes(0, capturedValues.stream()\n+                        .map(Value::type).map(BytecodeGenerator::toClassDesc).toArray(ClassDesc[]::new));\n@@ -179,1 +196,2 @@\n-                    new BytecodeGenerator(lookup, className, capturedValues, new Liveness(iop), iop.body().blocks(), cob, lambdaSink, quotable).generate()));\n+                    new BytecodeGenerator(lookup, className, capturedValues, new Liveness(iop),\n+                                          iop.body().blocks(), cob, lambdaSink, quotable).generate()));\n@@ -198,1 +216,8 @@\n-    private BytecodeGenerator(MethodHandles.Lookup lookup, ClassDesc className, List<Value> capturedValues, Liveness liveness, List<Block> blocks, CodeBuilder cob, List<LambdaOp> lambdaSink, BitSet quotable) {\n+    private BytecodeGenerator(MethodHandles.Lookup lookup,\n+                              ClassDesc className,\n+                              List<Value> capturedValues,\n+                              Liveness liveness,\n+                              List<Block> blocks,\n+                              CodeBuilder cob,\n+                              List<LambdaOp> lambdaSink,\n+                              BitSet quotable) {\n@@ -690,1 +715,2 @@\n-                                        throw new IllegalStateException(\"Bad method descriptor resolution: \" + op.opType() + \" > \" + op.invokeDescriptor());\n+                                        throw new IllegalStateException(\"Bad method descriptor resolution: \"\n+                                                                        + op.opType() + \" > \" + op.invokeDescriptor());\n@@ -751,1 +777,3 @@\n-                            ClassDesc[] captureTypes = op.capturedValues().stream().map(Value::type).map(BytecodeGenerator::toClassDesc).toArray(ClassDesc[]::new);\n+                            ClassDesc[] captureTypes = op.capturedValues().stream()\n+                                    .map(Value::type).map(BytecodeGenerator::toClassDesc).toArray(ClassDesc[]::new);\n+                            int lambdaIndex = lambdaSink.size();\n@@ -758,1 +786,1 @@\n-                                        DMHD_LAMBDA_METAFACTORY,\n+                                        DMHD_LAMBDA_ALT_METAFACTORY,\n@@ -760,2 +788,4 @@\n-                                        \/\/ @@@ double the descriptor parameters to enable LambdaMetafactory.FLAG_QUOTABLE\n-                                        MethodTypeDesc.of(intfType.toNominalDescriptor(), Stream.concat(Stream.of(captureTypes), Stream.of(captureTypes)).toList()),\n+                                        \/\/ @@@ double the descriptor parameters\n+                                        MethodTypeDesc.of(intfType.toNominalDescriptor(),\n+                                                          Stream.concat(Stream.of(captureTypes),\n+                                                                        Stream.of(captureTypes)).toList()),\n@@ -763,1 +793,4 @@\n-                                        MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC, className, \"lambda$\" + lambdaSink.size(), mtd.insertParameterTypes(0, captureTypes)),\n+                                        MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC,\n+                                                                  className,\n+                                                                  \"lambda$\" + lambdaIndex,\n+                                                                  mtd.insertParameterTypes(0, captureTypes)),\n@@ -766,1 +799,4 @@\n-                                        MethodHandleDesc.ofField(DirectMethodHandleDesc.Kind.STATIC_GETTER, className, \"lambda$\" + lambdaSink.size() + \"$op\", CD_String)));\n+                                        MethodHandleDesc.ofField(DirectMethodHandleDesc.Kind.STATIC_GETTER,\n+                                                                 className,\n+                                                                 \"lambda$\" + lambdaIndex + \"$op\",\n+                                                                 CD_String)));\n@@ -774,3 +810,5 @@\n-                                        MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC, className, \"lambda$\" + lambdaSink.size(), mtd.insertParameterTypes(0, captureTypes)),\n-                                        mtd,\n-                                        0));\n+                                        MethodHandleDesc.ofMethod(DirectMethodHandleDesc.Kind.STATIC,\n+                                                                  className,\n+                                                                  \"lambda$\" + lambdaIndex,\n+                                                                  mtd.insertParameterTypes(0, captureTypes)),\n+                                        mtd));\n@@ -870,3 +908,10 @@\n-                    && (m.getReturnType() != String.class || m.getParameterCount() != 0 || !methodName.equals(\"toString\"))\n-                    && (m.getReturnType() != int.class || m.getParameterCount() != 0 || !methodName.equals(\"hashCode\"))\n-                    && (m.getReturnType() != boolean.class || m.getParameterCount() != 1 || m.getParameterTypes()[0] != Object.class || !methodName.equals(\"equals\"))) {\n+                    && (m.getReturnType() != String.class\n+                        || m.getParameterCount() != 0\n+                        || !methodName.equals(\"toString\"))\n+                    && (m.getReturnType() != int.class\n+                        || m.getParameterCount() != 0\n+                        || !methodName.equals(\"hashCode\"))\n+                    && (m.getReturnType() != boolean.class\n+                        || m.getParameterCount() != 1\n+                        || m.getParameterTypes()[0] != Object.class\n+                        || !methodName.equals(\"equals\"))) {\n@@ -984,1 +1029,2 @@\n-    static DirectMethodHandleDesc resolveToMethodHandleDesc(MethodHandles.Lookup l, MethodRef d) throws ReflectiveOperationException {\n+    static DirectMethodHandleDesc resolveToMethodHandleDesc(MethodHandles.Lookup l,\n+                                                            MethodRef d) throws ReflectiveOperationException {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":68,"deletions":22,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -295,0 +295,2 @@\n+        Assert.assertNotNull(f.quoted());\n+        Assert.assertNotNull(f.quoted().op());\n@@ -346,1 +348,2 @@\n-            String s = testMethod.getName() + Arrays.stream(testMethod.getParameterTypes()).map(Class::getSimpleName).collect(Collectors.joining(\",\", \"(\", \")\"));\n+            String s = testMethod.getName() + Arrays.stream(testMethod.getParameterTypes())\n+                    .map(Class::getSimpleName).collect(Collectors.joining(\",\", \"(\", \")\"));\n@@ -354,1 +357,3 @@\n-        return Stream.of(TestBytecode.class.getDeclaredMethods()).filter(m -> m.isAnnotationPresent(CodeReflection.class)).map(TestData::new).toArray(TestData[]::new);\n+        return Stream.of(TestBytecode.class.getDeclaredMethods())\n+                .filter(m -> m.isAnnotationPresent(CodeReflection.class))\n+                .map(TestData::new).toArray(TestData[]::new);\n@@ -366,2 +371,4 @@\n-        return MethodTypeDesc.of(m.getReturnType().describeConstable().orElseThrow(),\n-                                 Arrays.stream(m.getParameterTypes()).map(cls -> cls.describeConstable().orElseThrow()).toList());\n+        return MethodTypeDesc.of(\n+                m.getReturnType().describeConstable().orElseThrow(),\n+                Arrays.stream(m.getParameterTypes())\n+                        .map(cls -> cls.describeConstable().orElseThrow()).toList());\n@@ -379,1 +386,2 @@\n-        initTestArgs(values(1, 2, 3, 4), int.class, Integer.class, byte.class, Byte.class, short.class, Short.class, char.class, Character.class);\n+        initTestArgs(values(1, 2, 3, 4), int.class, Integer.class, byte.class,\n+                Byte.class, short.class, Short.class, char.class, Character.class);\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"}]}