{"files":[{"patch":"@@ -383,1 +383,1 @@\n-                        List.of(implementation, quotableOpGetter, CodeReflectionSupport.QUOTED_OP_MH);\n+                        List.of(implementation, quotableOpGetter, CodeReflectionSupport.QUOTED_EXTRACT_OP_MH);\n@@ -495,1 +495,1 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeExact\", methodDesc(CodeReflectionSupport.QUOTED_OP_MH.type()))\n+        cob.invokevirtual(CD_MethodHandle, \"invokeExact\", methodDesc(CodeReflectionSupport.QUOTED_EXTRACT_OP_MH.type()))\n@@ -502,1 +502,1 @@\n-        static final MethodHandle QUOTED_OP_MH;\n+        static final MethodHandle QUOTED_EXTRACT_OP_MH;\n@@ -512,1 +512,1 @@\n-                QUOTED_OP_MH = Lookup.IMPL_LOOKUP.findStatic(QUOTED_CLASS, \"quotedOp\",\n+                QUOTED_EXTRACT_OP_MH = Lookup.IMPL_LOOKUP.findStatic(QUOTED_CLASS, \"extractOp\",\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-    public static CoreOp.FuncOp quoteOp(Op op) {\n+    public static CoreOp.FuncOp embedOp(Op op) {\n@@ -218,1 +218,1 @@\n-     * {@code funcOp} must have the same structure as if it's produced by {@link #quoteOp(Op)}.\n+     * {@code funcOp} must have the same structure as if it's produced by {@link #embedOp(Op)}.\n@@ -227,1 +227,1 @@\n-    public static Quoted quotedOp(CoreOp.FuncOp funcOp, List<Object> args) {\n+    public static Quoted extractOp(CoreOp.FuncOp funcOp, List<Object> args) {\n@@ -334,1 +334,1 @@\n-     * {@code funcOp} must have the same structure as if it's produced by {@link #quoteOp(Op)}.\n+     * {@code funcOp} must have the same structure as if it's produced by {@link #embedOp(Op)}.\n@@ -342,1 +342,1 @@\n-     * @see Quoted#quotedOp(CoreOp.FuncOp, List)\n+     * @see Quoted#extractOp(CoreOp.FuncOp, List)\n@@ -344,2 +344,2 @@\n-    public static Quoted quotedOp(CoreOp.FuncOp funcOp, Object... args) {\n-        return quotedOp(funcOp, List.of(args));\n+    public static Quoted extractOp(CoreOp.FuncOp funcOp, Object... args) {\n+        return extractOp(funcOp, List.of(args));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/Quoted.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-                                .loadConstant(Quoted.quoteOp(lop).toText())\n+                                .loadConstant(Quoted.embedOp(lop).toText())\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/bytecode\/BytecodeGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public final MethodSymbol quotedQuotedOp;\n+    public final MethodSymbol quotedExtractOp;\n@@ -63,2 +63,2 @@\n-        quotedQuotedOp = new MethodSymbol(PUBLIC | STATIC | VARARGS,\n-                names.fromString(\"quotedOp\"),\n+        quotedExtractOp = new MethodSymbol(PUBLIC | STATIC | VARARGS,\n+                names.fromString(\"extractOp\"),\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/CodeReflectionSymbols.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-                    JCMethodInvocation quotedInvoke = make.App(make.Ident(crSyms.quotedQuotedOp), args.toList());\n+                    JCMethodInvocation quotedInvoke = make.App(make.Ident(crSyms.quotedExtractOp), args.toList());\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/ReflectMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        CoreOp.FuncOp funcOp = Quoted.quoteOp(lop);\n+        CoreOp.FuncOp funcOp = Quoted.embedOp(lop);\n@@ -47,1 +47,1 @@\n-        Quoted quoted = Quoted.quotedOp(funcOp, args);\n+        Quoted quoted = Quoted.extractOp(funcOp, args);\n@@ -71,1 +71,1 @@\n-        CoreOp.FuncOp funcOp = Quoted.quoteOp(invOp);\n+        CoreOp.FuncOp funcOp = Quoted.embedOp(invOp);\n@@ -74,1 +74,1 @@\n-        Quoted quoted = Quoted.quotedOp(funcOp, args);\n+        Quoted quoted = Quoted.extractOp(funcOp, args);\n@@ -97,1 +97,1 @@\n-        Quoted quoted2 = Quoted.quotedOp(fop, args);\n+        Quoted quoted2 = Quoted.extractOp(fop, args);\n@@ -339,1 +339,1 @@\n-        Assert.assertThrows(RuntimeException.class, () -> Quoted.quotedOp(fop, args));\n+        Assert.assertThrows(RuntimeException.class, () -> Quoted.extractOp(fop, args));\n@@ -472,1 +472,1 @@\n-        Quoted quoted = Quoted.quotedOp(fop, args);\n+        Quoted quoted = Quoted.extractOp(fop, args);\n@@ -546,1 +546,1 @@\n-        CoreOp.FuncOp qm = Quoted.quoteOp(funcOp.body().entryBlock().ops().getFirst());\n+        CoreOp.FuncOp qm = Quoted.embedOp(funcOp.body().entryBlock().ops().getFirst());\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestQuoteOp.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}