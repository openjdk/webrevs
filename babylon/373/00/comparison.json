{"files":[{"patch":"@@ -0,0 +1,2 @@\n+.idea\/\n+cmake-build-debug\/\n","filename":"hat\/backends\/ffi\/.gitignore","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -42,0 +42,5 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n","filename":"hat\/backends\/ffi\/cuda\/pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+\n","filename":"hat\/backends\/ffi\/hip\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+\n","filename":"hat\/backends\/ffi\/mock\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        : Backend::Buffer(backend, arg), bufferState(bufferState) {\n+        : Backend::Buffer(backend, arg, bufferState) {\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend_buffer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,14 +28,1 @@\n-OpenCLBackend::OpenCLConfig::OpenCLConfig(int configBits):\n-       configBits(configBits),\n-       minimizeCopies((configBits&MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT),\n-       alwaysCopy(!minimizeCopies),\n-       trace((configBits&TRACE_BIT)==TRACE_BIT),\n-       traceCopies((configBits&TRACE_COPIES_BIT)==TRACE_COPIES_BIT),\n-       traceEnqueues((configBits&TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n-       traceCalls((configBits&TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n-       traceSkippedCopies((configBits&TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT),\n-       info((configBits&INFO_BIT)==INFO_BIT),\n-       showCode((configBits&SHOW_CODE_BIT)==SHOW_CODE_BIT),\n-       profile((configBits&PROFILE_BIT)==PROFILE_BIT),\n-       showWhy((configBits&SHOW_WHY_BIT)==SHOW_WHY_BIT),\n-       showState((configBits&SHOW_STATE_BIT)==SHOW_STATE_BIT),\n+OpenCLBackend::OpenCLConfig::OpenCLConfig(int configBits): Backend::Config(configBits){\n@@ -43,18 +30,0 @@\n-       platform((configBits&0xf)),\n-       device((configBits&0xf0)>>4){\n-       if (info){\n-          std::cout << \"native showCode \" << showCode <<std::endl;\n-          std::cout << \"native info \" << info<<std::endl;\n-          std::cout << \"native minimizeCopies \" << minimizeCopies<<std::endl;\n-          std::cout << \"native alwaysCopy \" << alwaysCopy<<std::endl;\n-          std::cout << \"native trace \" << trace<<std::endl;\n-          std::cout << \"native traceSkippedCopies \" << traceSkippedCopies<<std::endl;\n-          std::cout << \"native traceCalls \" << traceCalls<<std::endl;\n-          std::cout << \"native traceCopies \" << traceCopies<<std::endl;\n-          std::cout << \"native traceEnqueues \" << traceEnqueues<<std::endl;\n-          std::cout << \"native profile \" << profile<<std::endl;\n-          std::cout << \"native showWhy \" << showWhy<<std::endl;\n-          std::cout << \"native showState \" << showState<<std::endl;\n-          std::cout << \"native platform \" << platform<<std::endl;\n-          std::cout << \"native device \" << device<<std::endl;\n-       }\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend_config.cpp","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,7 +31,3 @@\n- OpenCLBackend::OpenCLQueue::OpenCLQueue(OpenCLBackend *openclBackend)\n-    :openclBackend(openclBackend),\n-     eventMax(10000),\n-     events(new cl_event[eventMax]),\n-     eventInfoBits(new int[eventMax]),\n-      eventInfoConstCharPtrArgs(new const char *[eventMax]),\n-      eventc(0){\n+ OpenCLBackend::OpenCLQueue::OpenCLQueue(Backend *backend)\n+    : Backend::Queue(backend),\n+     events(new cl_event[eventMax]){\n@@ -272,2 +268,1 @@\n-     delete []eventInfoBits;\n-     delete []eventInfoConstCharPtrArgs;\n+\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend_queue.cpp","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    class OpenCLConfig{\n+    class OpenCLConfig : public Backend::Config{\n@@ -48,35 +48,0 @@\n-    \/\/ These must sync with hat\/backend\/ffi\/Mode.java\n-        \/\/ Bits 0-3 select platform id 0..5\n-        \/\/ Bits 4-7 select device id 0..15\n-        const static  int START_BIT_IDX = 16;\n-        const static  int MINIMIZE_COPIES_BIT =1<<START_BIT_IDX;\n-        const static  int TRACE_BIT =1<<17;\n-        const static  int PROFILE_BIT =1<<18;\n-        const static  int SHOW_CODE_BIT = 1 << 19;\n-        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n-        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<21;\n-        const static  int INFO_BIT = 1<<22;\n-        const static  int TRACE_COPIES_BIT = 1 <<23;\n-        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<24;\n-        const static  int TRACE_ENQUEUES_BIT = 1 <<25;\n-        const static  int TRACE_CALLS_BIT = 1 <<26;\n-        const static  int SHOW_WHY_BIT = 1 <<27;\n-        const static  int SHOW_STATE_BIT = 1 <<28;\n-        const static  int END_BIT_IDX = 29;\n-\n-        const static  char *bitNames[]; \/\/ See below for out of line definition\n-        int configBits;\n-        bool minimizeCopies;\n-        bool alwaysCopy;\n-        bool trace;\n-        bool profile;\n-        bool showCode;\n-        bool info;\n-        bool traceCopies;\n-        bool traceSkippedCopies;\n-        bool traceEnqueues;\n-        bool traceCalls;\n-        bool showWhy;\n-        bool showState;\n-        int platform; \/\/0..15\n-        int device; \/\/0..15\n@@ -86,1 +51,1 @@\n-    class OpenCLQueue {\n+    class OpenCLQueue : public Backend::Queue {\n@@ -88,17 +53,0 @@\n-       const static  int START_BIT_IDX =20;\n-       static const int CopyToDeviceBits= 1<<START_BIT_IDX;\n-       static const int CopyFromDeviceBits= 1<<21;\n-       static const int NDRangeBits =1<<22;\n-       static const int StartComputeBits= 1<<23;\n-       static const int EndComputeBits= 1<<24;\n-       static const int EnterKernelDispatchBits= 1<<25;\n-       static const int LeaveKernelDispatchBits= 1<<26;\n-       static const int HasConstCharPtrArgBits = 1<<27;\n-       static const int hasIntArgBits = 1<<28;\n-       const static  int END_BIT_IDX = 27;\n-       OpenCLBackend *openclBackend;\n-       size_t eventMax;\n-       cl_event *events;\n-       int *eventInfoBits;\n-       const char **eventInfoConstCharPtrArgs;\n-       size_t eventc;\n@@ -106,2 +54,2 @@\n-\n-       OpenCLQueue(OpenCLBackend *openclBackend);\n+       cl_event *events;\n+       OpenCLQueue(Backend *backend);\n@@ -110,18 +58,20 @@\n-       void showEvents(int width);\n-       void wait();\n-       void release();\n-       void computeStart();\n-       void computeEnd();\n-       void inc(int bits);\n-       void inc(int bits, const char *arg);\n-       void inc(int bits, int arg);\n-       void marker(int bits);\n-       void marker(int bits, const char *arg);\n-       void marker(int bits, int arg);\n-       void markAsCopyToDeviceAndInc(int argn);\n-       void markAsCopyFromDeviceAndInc(int argn);\n-       void markAsNDRangeAndInc();\n-       void markAsStartComputeAndInc();\n-       void markAsEndComputeAndInc();\n-       void markAsEnterKernelDispatchAndInc();\n-       void markAsLeaveKernelDispatchAndInc();\n+\n+        virtual void showEvents(int width);\n+        virtual void wait();\n+        virtual void release();\n+        virtual void computeStart();\n+        virtual void computeEnd();\n+        virtual void inc(int bits);\n+        virtual void inc(int bits, const char *arg);\n+        virtual  void inc(int bits, int arg);\n+        virtual void marker(int bits);\n+        virtual void marker(int bits, const char *arg);\n+        virtual void marker(int bits, int arg);\n+        virtual void markAsCopyToDeviceAndInc(int argn);\n+        virtual  void markAsCopyFromDeviceAndInc(int argn);\n+        virtual void markAsNDRangeAndInc();\n+        virtual void markAsStartComputeAndInc();\n+        virtual  void markAsEndComputeAndInc();\n+        virtual  void markAsEnterKernelDispatchAndInc();\n+        virtual void markAsLeaveKernelDispatchAndInc();\n+\n@@ -133,1 +83,0 @@\n-                BufferState_s * bufferState;\n@@ -185,18 +134,0 @@\n-#ifdef opencl_backend_config_cpp\n-const  char *OpenCLBackend::OpenCLConfig::bitNames[] = {\n-              \"MINIMIZE_COPIES\",\n-              \"TRACE\",\n-              \"PROFILE\",\n-              \"SHOW_CODE\",\n-              \"SHOW_KERNEL_MODEL\",\n-              \"SHOW_COMPUTE_MODEL\",\n-              \"INFO\",\n-              \"TRACE_COPIES\",\n-              \"TRACE_SKIPPED_COPIES\",\n-              \"TRACE_ENQUEUES\",\n-              \"TRACE_CALLS\"\n-              \"SHOW_WHY_BIT\",\n-              \"USE_STATE_BIT\",\n-              \"SHOW_STATE_BIT\"\n-        };\n-#endif\n","filename":"hat\/backends\/ffi\/opencl\/include\/opencl_backend.h","additions":24,"deletions":93,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -42,0 +42,5 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n","filename":"hat\/backends\/ffi\/opencl\/pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+        <module>shared<\/module>\n","filename":"hat\/backends\/ffi\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+\n","filename":"hat\/backends\/ffi\/ptx\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -187,1 +187,52 @@\n-}\n\\ No newline at end of file\n+}\n+\n+\n+\n+Backend::Config::Config(int configBits):\n+        configBits(configBits),\n+        minimizeCopies((configBits&MINIMIZE_COPIES_BIT)==MINIMIZE_COPIES_BIT),\n+        alwaysCopy(!minimizeCopies),\n+        trace((configBits&TRACE_BIT)==TRACE_BIT),\n+        traceCopies((configBits&TRACE_COPIES_BIT)==TRACE_COPIES_BIT),\n+        traceEnqueues((configBits&TRACE_ENQUEUES_BIT)==TRACE_ENQUEUES_BIT),\n+        traceCalls((configBits&TRACE_CALLS_BIT)==TRACE_CALLS_BIT),\n+        traceSkippedCopies((configBits&TRACE_SKIPPED_COPIES_BIT)==TRACE_SKIPPED_COPIES_BIT),\n+        info((configBits&INFO_BIT)==INFO_BIT),\n+        showCode((configBits&SHOW_CODE_BIT)==SHOW_CODE_BIT),\n+        profile((configBits&PROFILE_BIT)==PROFILE_BIT),\n+        showWhy((configBits&SHOW_WHY_BIT)==SHOW_WHY_BIT),\n+        showState((configBits&SHOW_STATE_BIT)==SHOW_STATE_BIT),\n+\n+        platform((configBits&0xf)),\n+        device((configBits&0xf0)>>4){\n+    if (info){\n+        std::cout << \"native showCode \" << showCode <<std::endl;\n+        std::cout << \"native info \" << info<<std::endl;\n+        std::cout << \"native minimizeCopies \" << minimizeCopies<<std::endl;\n+        std::cout << \"native alwaysCopy \" << alwaysCopy<<std::endl;\n+        std::cout << \"native trace \" << trace<<std::endl;\n+        std::cout << \"native traceSkippedCopies \" << traceSkippedCopies<<std::endl;\n+        std::cout << \"native traceCalls \" << traceCalls<<std::endl;\n+        std::cout << \"native traceCopies \" << traceCopies<<std::endl;\n+        std::cout << \"native traceEnqueues \" << traceEnqueues<<std::endl;\n+        std::cout << \"native profile \" << profile<<std::endl;\n+        std::cout << \"native showWhy \" << showWhy<<std::endl;\n+        std::cout << \"native showState \" << showState<<std::endl;\n+        std::cout << \"native platform \" << platform<<std::endl;\n+        std::cout << \"native device \" << device<<std::endl;\n+    }\n+}\n+Backend::Config::~Config(){\n+}\n+\n+Backend::Queue::Queue(Backend *backend)\n+        :backend(backend),\n+         eventMax(10000),\n+         eventInfoBits(new int[eventMax]),\n+         eventInfoConstCharPtrArgs(new const char *[eventMax]),\n+         eventc(0){\n+}\n+Backend::Queue::~Queue() {\n+    delete[]eventInfoBits;\n+    delete[]eventInfoConstCharPtrArgs;\n+}\n","filename":"hat\/backends\/ffi\/shared\/cpp\/shared.cpp","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -300,0 +300,80 @@\n+    class Config{\n+    public:\n+        \/\/ These must sync with hat\/backend\/ffi\/Mode.java\n+        \/\/ Bits 0-3 select platform id 0..5\n+        \/\/ Bits 4-7 select device id 0..15\n+        const static  int START_BIT_IDX = 16;\n+        const static  int MINIMIZE_COPIES_BIT =1<<START_BIT_IDX;\n+        const static  int TRACE_BIT =1<<17;\n+        const static  int PROFILE_BIT =1<<18;\n+        const static  int SHOW_CODE_BIT = 1 << 19;\n+        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n+        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<21;\n+        const static  int INFO_BIT = 1<<22;\n+        const static  int TRACE_COPIES_BIT = 1 <<23;\n+        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<24;\n+        const static  int TRACE_ENQUEUES_BIT = 1 <<25;\n+        const static  int TRACE_CALLS_BIT = 1 <<26;\n+        const static  int SHOW_WHY_BIT = 1 <<27;\n+        const static  int SHOW_STATE_BIT = 1 <<28;\n+        const static  int END_BIT_IDX = 29;\n+\n+        const static  char *bitNames[]; \/\/ See below for out of line definition\n+        int configBits;\n+        bool minimizeCopies;\n+        bool alwaysCopy;\n+        bool trace;\n+        bool profile;\n+        bool showCode;\n+        bool info;\n+        bool traceCopies;\n+        bool traceSkippedCopies;\n+        bool traceEnqueues;\n+        bool traceCalls;\n+        bool showWhy;\n+        bool showState;\n+        int platform; \/\/0..15\n+        int device; \/\/0..15\n+        Config(int mode);\n+        virtual ~Config();\n+    };\n+    class Queue {\n+    public:\n+        const static  int START_BIT_IDX =20;\n+        static const int CopyToDeviceBits= 1<<START_BIT_IDX;\n+        static const int CopyFromDeviceBits= 1<<21;\n+        static const int NDRangeBits =1<<22;\n+        static const int StartComputeBits= 1<<23;\n+        static const int EndComputeBits= 1<<24;\n+        static const int EnterKernelDispatchBits= 1<<25;\n+        static const int LeaveKernelDispatchBits= 1<<26;\n+        static const int HasConstCharPtrArgBits = 1<<27;\n+        static const int hasIntArgBits = 1<<28;\n+        const static  int END_BIT_IDX = 27;\n+        Backend *backend;\n+        size_t eventMax;\n+        size_t eventc;\n+\n+        int *eventInfoBits;\n+        const char **eventInfoConstCharPtrArgs;\n+        Queue(Backend *openclBackend);\n+        virtual void showEvents(int width)=0;\n+        virtual void wait()=0;\n+        virtual void release()=0;\n+        virtual void computeStart()=0;\n+        virtual void computeEnd()=0;\n+        virtual void inc(int bits)=0;\n+        virtual void inc(int bits, const char *arg)=0;\n+        virtual  void inc(int bits, int arg)=0;\n+        virtual void marker(int bits)=0;\n+        virtual void marker(int bits, const char *arg)=0;\n+        virtual void marker(int bits, int arg)=0;\n+        virtual void markAsCopyToDeviceAndInc(int argn)=0;\n+        virtual  void markAsCopyFromDeviceAndInc(int argn)=0;\n+        virtual void markAsNDRangeAndInc()=0;\n+        virtual void markAsStartComputeAndInc()=0;\n+        virtual  void markAsEndComputeAndInc()=0;\n+        virtual  void markAsEnterKernelDispatchAndInc()=0;\n+        virtual void markAsLeaveKernelDispatchAndInc()=0;\n+         virtual ~Queue();\n+    };\n@@ -304,0 +384,1 @@\n+        BufferState_s *bufferState;\n@@ -309,2 +390,2 @@\n-        Buffer(Backend *backend, Arg_s *arg)\n-                : backend(backend), arg(arg) {\n+        Buffer(Backend *backend, Arg_s *arg, BufferState_s *bufferState)\n+                : backend(backend), arg(arg), bufferState(bufferState) {\n@@ -375,0 +456,19 @@\n+\n+#ifdef shared_cpp\n+const  char *Backend::Config::bitNames[] = {\n+              \"MINIMIZE_COPIES\",\n+              \"TRACE\",\n+              \"PROFILE\",\n+              \"SHOW_CODE\",\n+              \"SHOW_KERNEL_MODEL\",\n+              \"SHOW_COMPUTE_MODEL\",\n+              \"INFO\",\n+              \"TRACE_COPIES\",\n+              \"TRACE_SKIPPED_COPIES\",\n+              \"TRACE_ENQUEUES\",\n+              \"TRACE_CALLS\"\n+              \"SHOW_WHY_BIT\",\n+              \"USE_STATE_BIT\",\n+              \"SHOW_STATE_BIT\"\n+        };\n+#endif\n","filename":"hat\/backends\/ffi\/shared\/include\/shared.h","additions":102,"deletions":2,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                                <copy file=\"target\/hat-backend-java-shared-1.0.jar\" toDir=\"${hat.build}\"\/>\n+                                <copy file=\"target\/${project.artifactId}-${project.version}.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/ffi\/shared\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,6 @@\n+        <dependency>\n+            <groupId>oracle.code<\/groupId>\n+            <artifactId>hat-backend-ffi-shared<\/artifactId>\n+            <version>1.0<\/version>\n+        <\/dependency>\n+\n","filename":"hat\/backends\/ffi\/spirv\/pom.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+       export JEXTRACT_HOME=$(dirname $(dirname $(command -v jextract)))\n@@ -109,1 +110,1 @@\n-      echo 'You will need to add jextract to your PATH to be able to build'\n+      echo 'You will need to add jextract your PATH to be able to build'\n","filename":"hat\/env.bash","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1986,2 +1986,2 @@\n-        public JExtractBuilder library(Path... libraries) {\n-            this.libraries.addAll(Arrays.asList(libraries));\n+        public JExtractBuilder library(List<Path>libraries) {\n+            this.libraries.addAll(libraries);\n@@ -1991,0 +1991,4 @@\n+        public JExtractBuilder library(Path... libraries) {\n+            return library(Arrays.asList(libraries));\n+        }\n+\n@@ -2156,1 +2160,3 @@\n-                .filter(Files::isExecutable).findFirst();\n+                .filter(Files::isExecutable)\n+                .filter(Files::isRegularFile)\n+                .findFirst();\n@@ -2458,0 +2464,3 @@\n+        public void dump() {\n+            varMap.forEach((k,v)->System.out.println(\"'\"+k+\"'='\"+v+\"'\"));\n+        }\n@@ -2613,3 +2622,6 @@\n-                        linux -> {\n-                            throw new IllegalStateException(\"Linux not handled yet\");\n-                        });\n+         linux -> jextractBuilder\n+                 \/\/ .compile_flag(\"-F\"\n+                 \/\/        + appLibFrameworks() + \"\/System\/library\/Frameworks\")\n+                 .library(Path.of(lib()))\n+                 .header(Path.of(includeDir()).resolve(\"opencl.h\"))\n+                      );\n@@ -2650,2 +2662,4 @@\n-            public String lib() {\n-                return cmakeProbe.value(libKey);\n+            public List<Path> libs() {\n+                return Arrays.stream(cmakeProbe.value(libKey).split(\";\"))\n+                        .map(s->Path.of(s)).toList();\n+\n@@ -2655,1 +2669,2 @@\n-                return Path.of(cmakeProbe.value(libKey).split(\";\")[0]).resolve(frameworkName + \".framework\/\" + frameworkName);\n+                var split = cmakeProbe.value(libKey).split(\";\");\n+                return Path.of(split[0]).resolve(frameworkName + \".framework\/\" + frameworkName);\n@@ -2694,2 +2709,3 @@\n-                        .os(mac -> jextractBuilder\n-                                .compile_flag(\"-F\"\n+                        .os(\n+                                mac -> jextractBuilder\n+                                   .compile_flag(\"-F\"\n@@ -2697,7 +2713,10 @@\n-                                .library(mac.frameworkLibrary(\"OpenGL\"))\n-                                .library(mac.frameworkLibrary(\"GLUT\"))\n-                                .header(glutIncludeDir().dir(\"glut.h\").path()),\n-                        linux -> {\n-                            throw new IllegalStateException(\"Linux not handled yet\");\n-                        }\n-                );\n+                                   .library(mac.frameworkLibrary(\"OpenGL\"))\n+                                   .library(mac.frameworkLibrary(\"GLUT\"))\n+                                   .header(glutIncludeDir().dir(\"glut.h\").path()),\n+                                linux -> jextractBuilder\n+                                  \/\/ .compile_flag(\"-F\"\n+                                    \/\/        + appLibFrameworks() + \"\/System\/library\/Frameworks\")\n+                                    .library(libs())\n+                                   \/\/ .library(lib(\"GLUT\"))\n+                                    .header(glutIncludeDir().dir(\"glut.h\").path())\n+                        );\n","filename":"hat\/hat\/Script.java","additions":37,"deletions":18,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-            .filter(backend -> backend.failsToMatch(\"^.*(spirv|hip|shared|target|.idea)$\"))\n+            .filter(backend -> backend.failsToMatch(\"^.*(spirv|hip|shared|target|cmake-build-debug|.idea)$\"))\n","filename":"hat\/hat\/bld.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}