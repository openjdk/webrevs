{"files":[{"patch":"@@ -142,2 +142,2 @@\n-                    Dag dag = project.all();\n-                    Dag available = dag.available();\n+                    var dag = project.all();\n+                    var available = dag.available();\n@@ -148,2 +148,2 @@\n-                    Dag dag = project.all();\n-                    Dag available = dag.available();\n+                    var dag = project.all();\n+                    var available = dag.available();\n@@ -153,5 +153,5 @@\n-                    final  Pattern copyrightPattern = Pattern.compile(\"^.*Copyright.*202[0-9].*(Intel|Oracle).*$\");\n-                    final  Pattern copyrightExemptPattern = Pattern.compile(\"^(robertograham|CMakeFiles|hip)\");\n-                    final  Pattern tabOrEolWsPattern = Pattern.compile(\"^(.*\\\\t.*|.* )$\");\n-                    final  Pattern textSuffix  = Pattern.compile(\"^(.*\\\\.(java|cpp|h|hpp|md)|pom.xml)$\");\n-                    final  Pattern sourceSuffix  = Pattern.compile(\"^(.*\\\\.(java|cpp|h|hpp)|pom.xml)$\");\n+                    final  var copyrightPattern = Pattern.compile(\"^.*Copyright.*202[0-9].*(Intel|Oracle).*$\");\n+                    final  var copyrightExemptPattern = Pattern.compile(\"^(robertograham|CMakeFiles|hip)\");\n+                    final  var tabOrEolWsPattern = Pattern.compile(\"^(.*\\\\t.*|.* )$\");\n+                    final  var textSuffix  = Pattern.compile(\"^(.*\\\\.(java|cpp|h|hpp|md)|pom.xml)$\");\n+                    final  var sourceSuffix  = Pattern.compile(\"^(.*\\\\.(java|cpp|h|hpp)|pom.xml)$\");\n@@ -163,3 +163,3 @@\n-                                        (d)-> true, \/\/ we do this foir all subdirs\n-                                        (f)-> textSuffix.matcher(f.getFileName().toString()).matches() && Util.grepLines(tabOrEolWsPattern, f),\n-                                        (c)-> System.out.println(\"File contains WS issue (TAB or EOLWs) \" + c)\n+                                   (d)-> true, \/\/ we do this for all subdirs\n+                                   (f)-> textSuffix.matcher(f.getFileName().toString()).matches() && Util.grepLines(tabOrEolWsPattern, f),\n+                                   (c)-> System.out.println(\"File contains WS issue (TAB or EOLWs) \" + c)\n@@ -168,3 +168,3 @@\n-                                        (d)-> !copyrightExemptPattern.matcher(d.getFileName().toString()).matches(), \/\/ we skip these subdirs\n-                                        (f)-> sourceSuffix.matcher(f.getFileName().toString()).matches() && !Util.grepLines(copyrightPattern, f),\n-                                        (c)-> System.out.println(\"File does not contain copyright \" + c)\n+                                   (d)-> !copyrightExemptPattern.matcher(d.getFileName().toString()).matches(), \/\/ we skip these subdirs\n+                                   (f)-> sourceSuffix.matcher(f.getFileName().toString()).matches() && !Util.grepLines(copyrightPattern, f),\n+                                   (c)-> System.out.println(\"File does not contain copyright \" + c)\n@@ -175,1 +175,0 @@\n-\n@@ -178,2 +177,2 @@\n-                        String backendName = args.removeFirst();\n-                        String runnableName = args.removeFirst();\n+                        var backendName = args.removeFirst();\n+                        var runnableName = args.removeFirst();\n@@ -182,5 +181,5 @@\n-                                List<String> vmOpts = new ArrayList<>();\n-                                \/\/vmOpts.add(\"-DnoModuleOp=true\");\n-                                \/\/vmOpts.add(\"-DbufferTracking=true\");\n-                                var dag = new job.Dag(runnable, backend);\n-                                if (runnableName.equals(\"nbody\") && mac.isAvailable()) {  \/\/ nbody (or anything using OpenGL on mac) needs this\n+                                var vmOpts = new ArrayList<String>(List.of(\n+                                  \/\/ \"-DnoModuleOp=true\",\n+                                  \/\/ \"-DbufferTagging=true\"\n+                                ));\n+                                if (runnableName.equals(\"nbody\") && mac.isAvailable()) {  \/\/ nbody (anything on mac using OpenGL\n@@ -189,1 +188,1 @@\n-                                runnable.run(runnableName + \".Main\", dag.ordered(), vmOpts,args);\n+                                runnable.run(runnableName + \".Main\", new job.Dag(runnable, backend).ordered(), vmOpts,args);\n@@ -203,1 +202,1 @@\n-                        String backendName = args.removeFirst();\n+                        var backendName = args.removeFirst();\n@@ -205,1 +204,0 @@\n-                           Path file = Paths.get(\"test_report.txt\");\n@@ -209,25 +207,0 @@\n-                               public void incrementPassed(int val) {\n-                                   passed += val;\n-                               }\n-                               public void incrementFailed(int fail) {\n-                                   failed += fail;\n-                               }\n-\n-                               public int getPassed() {\n-                                   return passed;\n-                               }\n-                               public int getFailed() {\n-                                   return failed;\n-                               }\n-\n-                               @Override\n-                               public String toString() {\n-                                   return String.format(\"Global passed: %d, failed: %d, pass-rate: %.2f%%\",\n-                                       passed, failed, ((float)(passed * 100 \/ (passed + failed))));\n-                               }\n-                           }\n-\n-                           try {\n-                              Files.deleteIfExists(file);\n-                           } catch (IOException e) {\n-                              e.printStackTrace();\n@@ -235,20 +208,9 @@\n-                           var suite = new String[] {\n-                               \"oracle.code.hat.TestArrays\",\n-                               \"oracle.code.hat.TestMatMul\",\n-                               \"oracle.code.hat.TestMandel\",\n-                               \"oracle.code.hat.TestLocal\",\n-                               \"oracle.code.hat.TestReductions\"\n-                           };\n-                           for(var s:suite){\n-                              List<String> vmOpts = new ArrayList<>();\n-                              var dag = new job.Dag(tests, backend);\n-                              args.add(s);\n-                              tests.run(\"oracle.code.hat.engine.HatTestEngine\", dag.ordered(), vmOpts,args);\n-                              args.remove(args.size()-1);\n-                           }\n-                           String regex = \"passed: (\\\\d+), failed: (\\\\d+)\";\n-                           Pattern pattern = Pattern.compile(regex);\n-                           Stats stats = new Stats();\n-\n-                           System.out.println(\"\\n\\n************************************************\");\n-                           System.out.println(\"                 HAT Test Report \");\n+                           var test_reports_txt = Paths.get(\"test_report.txt\");\n+                           Files.deleteIfExists(test_reports_txt); \/\/ because we will append to it in the next loop\n+                           Stream.of( \"Arrays\", \"MatMul\", \"Mandel\", \"Local\", \"Reductions\")\n+                              .map(s->\"oracle.code.hat.Test\"+s)\n+                              .forEach(suite->{\n+                                 tests.run(\"oracle.code.hat.engine.HatTestEngine\",\n+                                    new job.Dag(tests, backend).ordered(), List.of(),List.of(suite));\n+                              });\n+                           System.out.println(\"\\n\\n\"+logo+\"                 HAT Test Report \");\n@@ -256,12 +218,7 @@\n-                           try {\n-                              List<String> lines = Files.readAllLines(file);\n-                              for (String line : lines) {\n-                                 System.out.println(line);\n-\n-                                 Matcher matcher = pattern.matcher(line);\n-                                 if (matcher.find()) {\n-                                    int passed = Integer.parseInt(matcher.group(1));\n-                                    int fail = Integer.parseInt(matcher.group(2));\n-                                    stats.incrementPassed(passed);\n-                                    stats.incrementFailed(fail);\n-                                 }\n+                           var pattern = Pattern.compile( \"passed: (\\\\d+), failed: (\\\\d+)\");\n+                           var stats = new Stats();\n+                           Files.readAllLines(test_reports_txt).forEach(line->{\n+                              System.out.println(line);\n+                              if (pattern.matcher(line) instanceof Matcher matcher && matcher.find()){\n+                                 stats.passed+=Integer.parseInt(matcher.group(1));\n+                                 stats.failed+=Integer.parseInt(matcher.group(2));\n@@ -269,5 +226,3 @@\n-                          } catch (IOException e) {\n-                              e.printStackTrace();\n-                          }\n-                          System.out.println(stats);\n-\n+                          });\n+                          System.out.printf(\"Global passed: %d, failed: %d, pass-rate: %.2f%%\",\n+                                stats.passed, stats.failed, ((float)(stats.passed * 100 \/ (stats.passed + stats.failed))));\n@@ -284,3 +239,3 @@\n-                        String backendName = args.removeFirst();\n-                        String runnableName = \"experiments\";\n-                        String className = args.removeFirst();\n+                        var backendName = args.removeFirst();\n+                        var runnableName = \"experiments\";\n+                        var className = args.removeFirst();\n@@ -289,3 +244,4 @@\n-                                List<String> vmOpts = new ArrayList<>();\n-                                \/\/vmOpts.add(\"-DnoModuleOp=true\");\n-                                \/\/vmOpts.add(\"-DbufferTracking=true\");\n+                                var vmOpts = new ArrayList<String>(List.of(\n+                                  \/\/ \"-DnoModuleOp=true\",\n+                                  \/\/ \"-DbufferTagging=true\"\n+                                ));\n","filename":"hat\/hat.java","additions":50,"deletions":94,"binary":false,"changes":144,"status":"modified"}]}