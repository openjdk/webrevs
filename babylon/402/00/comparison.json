{"files":[{"patch":"@@ -68,1 +68,1 @@\n-                                <argument>${hat.build}\/cmake-build-debug<\/argument>\n+                                <argument>${hat.build}\/ffi-cmake-build-debug<\/argument>\n@@ -82,1 +82,1 @@\n-                                <argument>${hat.build}\/cmake-build-debug<\/argument>\n+                                <argument>${hat.build}\/ffi-cmake-build-debug<\/argument>\n","filename":"hat\/backends\/ffi\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-        <module>nbody<\/module>  <!-- we need jextracted cl and gl for this -->\n@@ -52,0 +51,9 @@\n+    <profiles>\n+        <profile>\n+            <id>opengl<\/id>\n+            <modules>\n+               <module>nbody<\/module>\n+            <\/modules>\n+        <\/profile>\n+    <\/profiles>\n+\n","filename":"hat\/examples\/pom.xml","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4,11 +4,0 @@\n-if (APPLE)\n-   set(OSX_SDK ${CMAKE_OSX_SYSROOT})\n-   set(OSX_SDK_LIBRARY_FRAMEWORKS ${OSX_SDK}\/System\/Library\/Frameworks)\n-   set(OSX_SYS_LIBRARY_FRAMEWORKS \/System\/Library\/Frameworks)\n-else()\n-\n-endif()\n-get_cmake_property(_variableNames VARIABLES)\n-foreach (_variableName ${_variableNames})\n-    message(STATUS \"${_variableName}=${${_variableName}}\")\n-endforeach()\n","filename":"hat\/extractions\/CMakeLists.txt","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    <artifactId>hat-jextracted-opencl<\/artifactId>\n+    <artifactId>hat-jextracted-cuda<\/artifactId>\n@@ -38,0 +38,7 @@\n+ <plugin>\n+              <groupId>org.codehaus.mojo<\/groupId>\n+              <artifactId>exec-maven-plugin<\/artifactId>\n+              <version>3.1.0<\/version>\n+              <configuration>exec.skip<\/configuration>\n+            <\/plugin>\n+\n","filename":"hat\/extractions\/cuda\/pom.xml","additions":8,"deletions":1,"binary":false,"changes":9,"previous_filename":"hat\/extractions\/opencl\/pom.xml","status":"copied"},{"patch":"@@ -4,1 +4,9 @@\n-#We can assume that 'parent' has guarded us with find_package(XxxxXX) + if(XXXXXX_FOUND)\n+#get_cmake_property(_variableNames VARIABLES)\n+#foreach (_variableName ${_variableNames})\n+#    message(STATUS \"${_variableName}=${${_variableName}}\")\n+#endforeach()\n+find_package(OpenCL)\n+if(OPENCL_FOUND)\n+   set(JEXTRACT_PACKAGE opencl)\n+   set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/src\/main\/java)\n+   set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n@@ -6,3 +14,21 @@\n-set(JEXTRACT_PACKAGE opencl)\n-set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/${JEXTRACT_PACKAGE}\/src\/main\/java)\n-set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n+   if (APPLE)\n+      set(OSX_SDK ${CMAKE_OSX_SYSROOT})\n+      set(OSX_SDK_LIBRARY_FRAMEWORKS ${OSX_SDK}\/System\/Library\/Frameworks)\n+      set(OSX_SYS_LIBRARY_FRAMEWORKS \/System\/Library\/Frameworks)\n+   \n+     add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+        COMMAND echo creating ${JEXTRACT_SOURCE}\n+        COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+        COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n+        COMMAND jextract \n+            --target-package ${JEXTRACT_PACKAGE} \n+            --output ${JEXTRACT_SOURCE} \n+            --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/OpenCL \n+           --header-class-name ${JEXTRACT_PACKAGE}_h\n+              ${OSX_SDK_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n+            WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+            VERBATIM\n+       )\n+   else()\n+   \n+   endif()\n@@ -10,14 +36,4 @@\n-add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n-   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n-   COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n-   COMMAND jextract \n-       --target-package ${JEXTRACT_PACKAGE} \n-       --output ${JEXTRACT_SOURCE} \n-       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/OpenCL \n-       --header-class-name ${JEXTRACT_PACKAGE}_h\n-       ${OSX_SDK_LIBRARY_FRAMEWORKS}\/OpenCL.framework\/Headers\/opencl.h\n-       WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n-       VERBATIM\n-   )\n-\n-add_custom_target(extract_opencl DEPENDS  ${JEXTRACT_HEADER})\n+   add_custom_target(extract_opencl DEPENDS  ${JEXTRACT_HEADER})\n+else()\n+   message(\"NO OPENCL\")\n+endif()\n","filename":"hat\/extractions\/opencl\/CMakeLists.txt","additions":34,"deletions":18,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -38,19 +38,57 @@\n-            <plugin>\n-                <groupId>org.apache.maven.plugins<\/groupId>\n-                <artifactId>maven-antrun-plugin<\/artifactId>\n-                <version>1.8<\/version>\n-                <executions>\n-                    <execution>\n-                        <id>1<\/id>\n-                        <phase>install<\/phase>\n-                        <goals>\n-                            <goal>run<\/goal>\n-                        <\/goals>\n-                        <configuration>\n-                            <target>\n-                                <copy file=\"target\/${project.artifactId}-${project.version}.jar\" toDir=\"${hat.build}\"\/>\n-                            <\/target>\n-                        <\/configuration>\n-                    <\/execution>\n-                <\/executions>\n-            <\/plugin>\n+           <plugin>\n+              <groupId>org.codehaus.mojo<\/groupId>\n+              <artifactId>exec-maven-plugin<\/artifactId>\n+              <version>3.1.0<\/version>\n+              <executions>\n+                 <execution>\n+                   <id>cmake-B<\/id>\n+                   <phase>generate-sources<\/phase>\n+                   <goals>\n+                      <goal>exec<\/goal>\n+                   <\/goals>\n+                   <configuration>\n+                     <executable>cmake<\/executable>\n+                     <arguments>\n+                        <argument>-DHAT_TARGET=${hat.build}<\/argument>\n+                        <argument>-B<\/argument>\n+                        <argument>${hat.build}\/extract-opencl-cmake-build-debug<\/argument>\n+                     <\/arguments>\n+                   <\/configuration>\n+                <\/execution>\n+                <execution>\n+                   <id>cmake--build<\/id>\n+                   <phase>generate-sources<\/phase>\n+                   <goals>\n+                      <goal>exec<\/goal>\n+                   <\/goals>\n+                   <configuration>\n+                      <executable>cmake<\/executable>\n+                      <arguments>\n+                         <argument>--build<\/argument>\n+                         <argument>${hat.build}\/extract-opencl-cmake-build-debug<\/argument>\n+                         <argument>--target<\/argument>\n+                         <argument>extract_opencl<\/argument>\n+                      <\/arguments>\n+                   <\/configuration>\n+                <\/execution>\n+             <\/executions>\n+          <\/plugin>\n+          <plugin>\n+             <groupId>org.apache.maven.plugins<\/groupId>\n+             <artifactId>maven-antrun-plugin<\/artifactId>\n+             <version>1.8<\/version>\n+             <executions>\n+                <execution>\n+                   <id>1<\/id>\n+                   <phase>package<\/phase>\n+                   <goals>\n+                       <goal>run<\/goal>\n+                   <\/goals>\n+                   <configuration>\n+                       <target>\n+                          <copy file=\"target\/${project.artifactId}-${project.version}.jar\" toDir=\"${hat.build}\"\/>\n+                       <\/target>\n+                    <\/configuration>\n+                <\/execution>\n+             <\/executions>\n+           <\/plugin>\n","filename":"hat\/extractions\/opencl\/pom.xml","additions":57,"deletions":19,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-#We can assume that 'parent' has guarded us with find_package(XxxxXX) + if(XXXXXX_FOUND)\n@@ -6,18 +5,42 @@\n-set(JEXTRACT_PACKAGE opengl)\n-set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/${JEXTRACT_PACKAGE}\/src\/main\/java)\n-set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n-\n-if (APPLE)\n-add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n-   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n-   COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n-   COMMAND jextract \n-       --target-package ${JEXTRACT_PACKAGE} \n-       --output ${JEXTRACT_SOURCE} \n-       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenGL.framework\/OpenGL \n-       --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/GLUT.framework\/GLUT \n-       --header-class-name ${JEXTRACT_PACKAGE}_h\n-       ${OSX_SDK_LIBRARY_FRAMEWORKS}\/GLUT.framework\/Headers\/glut.h\n-   WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n-   VERBATIM\n-)\n+find_package(OpenGL)\n+if(OPENGL_FOUND)\n+   set(JEXTRACT_PACKAGE opengl)\n+   set(JEXTRACT_SOURCE ${CMAKE_SOURCE_DIR}\/src\/main\/java)\n+   set(JEXTRACT_HEADER ${JEXTRACT_SOURCE}\/${JEXTRACT_PACKAGE}\/${JEXTRACT_PACKAGE}_h.java)  \n+   \n+   if (APPLE)\n+      set(OSX_SDK ${CMAKE_OSX_SYSROOT})\n+      set(OSX_SDK_LIBRARY_FRAMEWORKS ${OSX_SDK}\/System\/Library\/Frameworks)\n+      set(OSX_SYS_LIBRARY_FRAMEWORKS \/System\/Library\/Frameworks)\n+      add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+         COMMAND echo creating ${JEXTRACT_SOURCE}\n+         COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+         COMMAND echo -F${OSX_SDK_LIBRARY_FRAMEWORKS} > ${CMAKE_BINARY_DIR}\/compile_flags.txt\n+         COMMAND jextract \n+             --target-package ${JEXTRACT_PACKAGE} \n+             --output ${JEXTRACT_SOURCE} \n+             --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/OpenGL.framework\/OpenGL \n+             --library :${OSX_SYS_LIBRARY_FRAMEWORKS}\/GLUT.framework\/GLUT \n+             --header-class-name ${JEXTRACT_PACKAGE}_h\n+             ${OSX_SDK_LIBRARY_FRAMEWORKS}\/GLUT.framework\/Headers\/glut.h\n+         WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+         VERBATIM\n+      )\n+   else()\n+      add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n+         COMMAND echo creating ${JEXTRACT_SOURCE}\n+         COMMAND mkdir -p ${JEXTRACT_SOURCE}\n+         COMMAND jextract \n+             --target-package ${JEXTRACT_PACKAGE} \n+             --output ${JEXTRACT_SOURCE} \n+             --library :\/usr\/lib\/aarch64-linux-gnu\/libOpenGL.so\n+             --library :\/usr\/lib\/aarch64-linux-gnu\/libGLU.so\n+             --header-class-name ${JEXTRACT_PACKAGE}_h\n+             \/usr\/include\/GL\/glut.h\n+         WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n+         VERBATIM\n+      )\n+   \n+   endif()\n+   \n+   add_custom_target(extract_opengl DEPENDS  ${JEXTRACT_HEADER})\n@@ -25,20 +48,1 @@\n-add_custom_command(OUTPUT  ${JEXTRACT_HEADER}\n-   COMMAND mkdir -p ${JEXTRACT_SOURCE}\n-   COMMAND jextract \n-       --target-package ${JEXTRACT_PACKAGE} \n-       --output ${JEXTRACT_SOURCE} \n-       --library :\/usr\/lib\/aarch64-linux-gnu\/libOpenGL.so\n-       --library :\/usr\/lib\/aarch64-linux-gnu\/libGLU.so\n-       --header-class-name ${JEXTRACT_PACKAGE}_h\n-       \/usr\/include\/GL\/glut.h\n-   WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}\"\n-   VERBATIM\n-)\n-\n-# --target-package opengl \\\n-#    --output \/home\/gfrost\/github\/grfrost\/babylon-grfrost-fork\/hat\/stage\/jextract \\\n-#    --library :\/usr\/lib\/aarch64-linux-gnu\/libOpenGL.so:\/usr\/lib\/aarch64-linux-gnu\/libGLU.so\\\n-#     \/usr\/include\/GL\/glut.h\n-\n-#    --library :\/usr\/lib\/aarch64-linux-gnu\/libOpenGL.so:\/usr\/lib\/aarch64-linux-gnu\/libGLX.so:\/usr\/lib\/aarch64-linux-gnu\/libGLU.so\/libOpenGL.so \\ \/usr\/include\/GL\/glut.h\n-\n+   message(\"NO OPENGL\")\n@@ -46,2 +50,0 @@\n-\n-add_custom_target(extract_opengl DEPENDS  ${JEXTRACT_HEADER})\n","filename":"hat\/extractions\/opengl\/CMakeLists.txt","additions":43,"deletions":41,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -38,0 +38,41 @@\n+\n+  <plugin>\n+              <groupId>org.codehaus.mojo<\/groupId>\n+              <artifactId>exec-maven-plugin<\/artifactId>\n+              <version>3.1.0<\/version>\n+              <executions>\n+                 <execution>\n+                   <id>cmake-B<\/id>\n+                   <phase>generate-sources<\/phase>\n+                   <goals>\n+                      <goal>exec<\/goal>\n+                   <\/goals>\n+                   <configuration>\n+                     <executable>cmake<\/executable>\n+                     <arguments>\n+                        <argument>-DHAT_TARGET=${hat.build}<\/argument>\n+                        <argument>-B<\/argument>\n+                        <argument>${hat.build}\/extract-opengl-cmake-build-debug<\/argument>\n+                     <\/arguments>\n+                   <\/configuration>\n+                <\/execution>\n+                <execution>\n+                   <id>cmake--build<\/id>\n+                   <phase>generate-sources<\/phase>\n+                   <goals>\n+                      <goal>exec<\/goal>\n+                   <\/goals>\n+                   <configuration>\n+                      <executable>cmake<\/executable>\n+                      <arguments>\n+                         <argument>--build<\/argument>\n+                         <argument>${hat.build}\/extract-opengl-cmake-build-debug<\/argument>\n+                         <argument>--target<\/argument>\n+                         <argument>extract_opengl<\/argument>\n+                      <\/arguments>\n+                   <\/configuration>\n+                <\/execution>\n+             <\/executions>\n+          <\/plugin>\n+\n+\n@@ -45,1 +86,1 @@\n-                        <phase>install<\/phase>\n+                        <phase>package<\/phase>\n","filename":"hat\/extractions\/opengl\/pom.xml","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -37,5 +37,20 @@\n-    <modules>\n-        <module>opencl<\/module>\n-        <module>opengl<\/module>\n-        <!--<module>cuda<\/module>-->\n-    <\/modules>\n+    <profiles>\n+        <profile>\n+            <id>cuda<\/id>\n+            <modules>\n+               <module>cuda<\/module>\n+            <\/modules>\n+        <\/profile>\n+        <profile>\n+            <id>opencl<\/id>\n+            <modules>\n+               <module>opencl<\/module>\n+            <\/modules>\n+        <\/profile>\n+        <profile>\n+            <id>opengl<\/id>\n+            <modules>\n+               <module>opengl<\/module>\n+            <\/modules>\n+        <\/profile>\n+    <\/profiles>\n","filename":"hat\/extractions\/pom.xml","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n---enable-preview --source 24 hat\/extract.java\n\\ No newline at end of file\n","filename":"hat\/hat\/extract","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- *\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-import static java.lang.System.out;\n-\n-void main(String[] args) {\n-    var layout = \"\"\"\n-            └──.\/\n-                ├──hat                         All build scripts in each case 'foo' has java options for (and points to) 'foo.java'\n-                │    ├──bld                    --enable-preview --source 24 hat\/bld.java\n-                │    ├──bld.java\n-                │    ├──run                    --enable-preview --source 24 hat\/run.java\n-                │    ├──run.java\n-                │    └──Script                 Contains all the tools for building\n-                │\n-                ├──build\/                            All jars, native libs and executables\n-                │    └──cmake-build-debug\/           All intermediate cmake artifacts\n-                │        ├── hat-*wrap-1.0.jar              Wrapper jars around extracted * (clwrap, glwrap, cuwrap)\n-                │        ├── hat-core-1.0.jar               Base hat jar\n-                │        ├── hat-example-*-1.0.jar          Example jars (hat-example-nbody-1.0.jar, hat-example-life-1.0.jar)\n-                │        ├── hat-jextracted-opencl-1.0.jar  Raw jextracted jars (hat-jextracted-opencl-1.0.jar ....)\n-                │        ├── lib*_backend.[dylib|so]        ffi library backends\n-                │        └── *(no suffix)                   various generated executables (opencl_info, cuda_info, cuda_squares)\n-                ├──stage\/\n-                │   ├── repo\/\n-                │   │   └── *                      Maven artifacts (poms and jars)\n-                │   ├── opencl_jextracted\/         All jextracted files (created using java @hat\/extract\n-                │   │   ├── compile_flags.txt\n-                │   │   └── opencl\n-                │   ├── cuda_jextracted\/\n-                │   │   ├── compile_flags.txt\n-                │   │   └── cuda\n-                │   └── opengl_jextracted\/\n-                │       ├── compile_flags.txt\n-                │       └── opengl\n-                ├──wrap\/\n-                │    └──wrap\/                 All downloaded maven assets\n-                │         ├──wrap\/                (*)\n-                │         ├──clwrap\/              (*)\n-                │         ├──glwrap\/              (*)\n-                │         └──cuwrap\/              (*)\n-                │\n-                ├──hat-core                       Maven style layout\n-                │    ├──src\/main\/java\n-                │    │    └──hat\/\n-                │    │\n-                │    └──src\/main\/test\n-                │         └──hat\/\n-                │\n-                ├──backends\n-                │    ├──java\n-                │    │    ├──mt                    Maven style layout\n-                │    │    └──seq                   Maven style layout\n-                │    ├──jextracted\n-                │    │    └──opencl                Maven style layout\n-                │    └──ffi\n-                │         ├──opencl                Maven style layout with cmake\n-                │         ├──ptx                   Maven style layout with cmake\n-                │         ├──mock                  Maven style layout with cmake\n-                │         ├──spirv                 Maven style layout with cmake\n-                │         ├──cuda                  Maven style layout with cmake\n-                │         └──hip                   Maven style layout with cmake\n-                │\n-                └──examples\n-                     ├──mandel                     Maven style layout\n-                     ├──squares                    Maven style layout\n-                     ├──heal                       Maven style layout\n-                     ├──life                       Maven style layout\n-                     ├──nbody                      Maven style layout\n-                     ├──experiments                Maven style layout\n-                     └──violajones                 Maven style layout\n-            \"\"\";\n-\n-    var dir = Script.DirEntry.current();\n-    var buildDir = Script.BuildDir.of(dir.path(\"build\")).create();\n-\n-    var jextractCapability = Script.Capabilities.JExtract.required();\n-    var cmakeCapability = Script.Capabilities.CMake.required();\n-\n-\n-    var openclCapability = Script.Capabilities.OpenCL.of();\n-    var openglCapability = Script.Capabilities.OpenGL.of();\n-    var cudaCapability = Script.Capabilities.CUDA.of();\n-    var hipCapability = Script.Capabilities.HIP.of();\n-\n-    Script.Capabilities capabilities = Script.Capabilities.of(openclCapability, openglCapability, cudaCapability, hipCapability, jextractCapability, cmakeCapability);\n-\n-    cmakeCapability.probe(buildDir, capabilities);\n-\n-    var stageDir = dir.buildDir(\"stage\").create();\n-\n-    println(capabilities.tickOrCheck());\n-\n-    Stream.of(openglCapability, openclCapability, cudaCapability,hipCapability)\n-            .filter(capability -> {\n-                          out.println(capability.tickOrCheck());\n-                if (!capability.available()) {\n-                    out.println(\"This platform does not have \" + capability.name);\n-                }\n-                return capability.available();\n-            })\n-            .forEach(capability -> {\n-                var extractedDir = stageDir.buildDir(capability.packageName() + \"_jextracted\");\n-                if (!extractedDir.exists()) {\n-                    Script.jextract(jextractCapability.executable, $ -> $.verbose(true).capability(capability, extractedDir));\n-                } else {\n-                    out.println(\"Using previously extracted  \" + extractedDir.fileName());\n-                }\n-                var extractedJar = buildDir.jarFile(\"hat-jextracted-\" + capability.packageName() + \"-1.0.jar\");\n-                Script.jar(jar -> jar\n-                        .jarFile(extractedJar)\n-                        .javac(javac -> javac\n-                                .current_source()\n-                                .source_path(Script.SourceDir.of(extractedDir))\n-                        )\n-                );\n-            });\n-\n-}\n-\n","filename":"hat\/hat\/extract.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -28,8 +28,1 @@\n-echo We need to run cmake in extractions dir first \n-pushd extractions\n-rm -rf cmake-build-debug\n-cmake -B  cmake-build-debug\n-cmake --build cmake-build-debug --target extract \n-popd\n-echo Now we can use maven \n-mvn -e clean compile package install\n+mvn -e clean compile package install -Popencl,opengl\n","filename":"hat\/maven-build.bash","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -38,3 +38,0 @@\n-        <module>clwrap<\/module>\n-        <module>glwrap<\/module>\n-        <!--<module>cuwrap<\/module>-->\n@@ -42,0 +39,21 @@\n+  <profiles>\n+        <profile>\n+            <id>cuda<\/id>\n+            <modules>\n+               <module>cuwrap<\/module>\n+            <\/modules>\n+        <\/profile>\n+        <profile>\n+            <id>opencl<\/id>\n+            <modules>\n+               <module>clwrap<\/module>\n+            <\/modules>\n+        <\/profile>\n+        <profile>\n+            <id>opengl<\/id>\n+            <modules>\n+               <module>glwrap<\/module>\n+            <\/modules>\n+        <\/profile>\n+    <\/profiles>\n+\n","filename":"hat\/wrap\/pom.xml","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"}]}