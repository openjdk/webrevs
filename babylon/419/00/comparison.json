{"files":[{"patch":"@@ -6,0 +6,1 @@\n+import java.util.stream.Stream;\n@@ -89,0 +90,36 @@\n+        public static ExternalizedTypeElement of(String s) {\n+            return new ExternalizedTypeElement(s, List.of());\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 ExternalizedTypeElement a) {\n+            return new ExternalizedTypeElement(s, List.of(a));\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 ExternalizedTypeElement a1, ExternalizedTypeElement a2) {\n+            return new ExternalizedTypeElement(s, List.of(a1, a2));\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 ExternalizedTypeElement a1, ExternalizedTypeElement a2,\n+                                                 ExternalizedTypeElement a3) {\n+            return new ExternalizedTypeElement(s, List.of(a1, a2, a3));\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 ExternalizedTypeElement a1, ExternalizedTypeElement a2,\n+                                                 ExternalizedTypeElement a3, ExternalizedTypeElement a4) {\n+            return new ExternalizedTypeElement(s, List.of(a1, a2, a3, a4));\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 ExternalizedTypeElement... arguments) {\n+            return new ExternalizedTypeElement(s, List.of(arguments));\n+        }\n+\n+        public static ExternalizedTypeElement of(String s,\n+                                                 List<ExternalizedTypeElement> arguments) {\n+            return new ExternalizedTypeElement(s, arguments);\n+        }\n+\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/TypeElement.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -201,2 +201,2 @@\n-                var val = arrayStoreOp.operands().get(1);\n-                var index = arrayStoreOp.operands().get(2);\n+                var index = arrayStoreOp.operands().get(1);\n+                var val = arrayStoreOp.operands().get(2);\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/internal\/CodeModelToAST.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -54,3 +55,0 @@\n-    static final MethodRef EX_TYPE_ELEMENT_OF_STRING = MethodRef.method(ExternalizedTypeElement.class, \"ofString\",\n-            ExternalizedTypeElement.class, String.class);\n-\n@@ -98,0 +96,6 @@\n+    static final JavaType EX_TYPE_ELEM = type(ExternalizedTypeElement.class);\n+\n+    static final MethodRef EX_TYPE_ELEM_OF_LIST = MethodRef.method(EX_TYPE_ELEM, \"of\",\n+            EX_TYPE_ELEM, J_L_STRING, J_U_LIST);\n+\n+\n@@ -116,0 +120,2 @@\n+    Map<ExternalizedTypeElement, Value> exTypeElementMap;\n+\n@@ -137,0 +143,1 @@\n+        this.exTypeElementMap = new HashMap<>();\n@@ -256,2 +263,1 @@\n-            Value typeString = builder.op(constant(J_L_STRING, t.externalize().toString()));\n-            Value exTypeElem = builder.op(invoke(EX_TYPE_ELEMENT_OF_STRING, typeString));\n+            Value exTypeElem = buildExternalizedType(t.externalize());\n@@ -262,0 +268,28 @@\n+    Value buildExternalizedType(ExternalizedTypeElement e) {\n+        \/\/ Cannot use computeIfAbsent due to recursion\n+        if (exTypeElementMap.get(e) instanceof Value v) {\n+            return v;\n+        }\n+\n+        List<Value> arguments = new ArrayList<>();\n+        for (ExternalizedTypeElement a : e.arguments()) {\n+            arguments.add(buildExternalizedType(a));\n+        }\n+\n+        Value identifier = builder.op(constant(J_L_STRING, e.identifier()));\n+        Value ve;\n+        if (e.arguments().size() < 5) {\n+            MethodRef elemOf = MethodRef.method(EX_TYPE_ELEM, \"of\",\n+                    EX_TYPE_ELEM, Stream.concat(Stream.of(J_L_STRING),\n+                            Collections.nCopies(e.arguments().size(), EX_TYPE_ELEM).stream()).toList());\n+            arguments.addFirst(identifier);\n+            ve = builder.op(invoke(elemOf, arguments));\n+        } else {\n+            Value list = buildList(EX_TYPE_ELEM, arguments);\n+            ve = builder.op(invoke(EX_TYPE_ELEM_OF_LIST, identifier, list));\n+        }\n+\n+        exTypeElementMap.put(e, ve);\n+        return ve;\n+    }\n+\n@@ -366,2 +400,4 @@\n-            builder.op(arrayStoreOp(array, elements.get(i),\n-                    builder.op(constant(INT, i))));\n+            builder.op(arrayStoreOp(\n+                    array,\n+                    builder.op(constant(INT, i)),\n+                    elements.get(i)));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/writer\/OpBuilder.java","additions":43,"deletions":7,"binary":false,"changes":50,"status":"modified"}]}