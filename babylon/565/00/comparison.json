{"files":[{"patch":"@@ -7,1 +7,2 @@\n-mvn process-test-classes exec:exec -Dexec.executable=<path to the Babylon JDK home>\/bin\/java -Dexec.mainClass=oracle.code.onnx.mnist.MNISTDemo\n+JAVA_HOME=<path to the Babylon JDK home>\n+mvn process-test-classes exec:java -Dexec.mainClass=oracle.code.onnx.mnist.MNISTDemo\n@@ -18,1 +19,2 @@\n-mvn process-test-classes exec:exec -Dexec.executable=<path to the Babylon JDK home>\/bin\/java -Dexec.mainClass=oracle.code.onnx.llm.LlamaDemo\n+JAVA_HOME=<path to the Babylon JDK home>\n+mvn process-test-classes exec:java -Dexec.mainClass=oracle.code.onnx.llm.LlamaDemo\n","filename":"cr-examples\/onnx\/README.md","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -263,0 +263,4 @@\n+        try {\n+            \/\/ workaround to avoid CNFE when the ReleaseEnv class is attempted to load in the above shutdown hook from already closed classloader\n+            Class.forName(\"oracle.code.onnx.foreign.OrtApi$ReleaseEnv\");\n+        } catch (ClassNotFoundException _) {}\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/OnnxRuntime.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -482,1 +482,0 @@\n-                        if (mv == null) System.out.println(no.toText());\n@@ -517,1 +516,1 @@\n-                case CoreOp.ReturnOp ro when bb.context().getProperty(ro.operands().getFirst()) instanceof List list -> {\n+                case CoreOp.ReturnOp ro when bb.context().getProperty(skipVars(ro.operands().getFirst())) instanceof List list -> {\n","filename":"cr-examples\/onnx\/src\/main\/java\/oracle\/code\/onnx\/compiler\/OnnxTransformer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}