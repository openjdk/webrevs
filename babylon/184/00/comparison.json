{"files":[{"patch":"@@ -51,0 +51,1 @@\n+import hat.optools.UnaryArithmeticOrLogicOperation;\n@@ -105,0 +106,1 @@\n+            case CoreOp.NotOp   o -> 2;\n@@ -107,0 +109,3 @@\n+            case CoreOp.AshrOp o -> 4;\n+            case CoreOp.LshlOp o -> 4;\n+            case CoreOp.LshrOp o -> 4;\n@@ -216,0 +221,3 @@\n+            case CoreOp.AshrOp o -> cchevron().cchevron();\n+            case CoreOp.LshlOp o -> ochevron().ochevron();\n+            case CoreOp.LshrOp o -> cchevron().cchevron();\n@@ -218,0 +226,1 @@\n+            case CoreOp.NotOp o -> pling();\n@@ -227,0 +236,8 @@\n+    @Override\n+    public T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOperation unaryOperatorOpWrapper) {\n+      \/\/  parencedence(buildContext, binaryOperatorOpWrapper.op(), binaryOperatorOpWrapper.lhsAsOp());\n+        symbol(unaryOperatorOpWrapper.op());\n+        parencedence(buildContext, unaryOperatorOpWrapper.op(), unaryOperatorOpWrapper.operandNAsResult(0).op());\n+        return self();\n+    }\n+\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilder.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import hat.optools.UnaryArithmeticOrLogicOperation;\n@@ -73,0 +74,2 @@\n+    T unaryOperation(C99HatBuildContext buildContext, UnaryArithmeticOrLogicOperation unaryOperatorOpWrapper);\n+\n@@ -127,0 +130,1 @@\n+            case UnaryArithmeticOrLogicOperation $ -> unaryOperation(buildContext, $);\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/c99codebuilders\/C99HatBuilderInterface.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -65,1 +66,4 @@\n-\n+    default S32Array2D copyFrom(int[] ints) {\n+        MemorySegment.copy(ints, 0, Buffer.getMemorySegment(this), JAVA_INT, 2* JAVA_INT.byteSize(), width()*height());\n+        return this;\n+    }\n","filename":"hat\/hat\/src\/main\/java\/hat\/buffer\/S32Array2D.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+            case CoreOp.NotOp $ -> (OW) new UnaryArithmeticOrLogicOperation($);\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/OpWrapper.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-public class BinaryLogicalOpWrapper extends BinaryOpWrapper<CoreOp.BinaryOp> {\n-    BinaryLogicalOpWrapper(CoreOp.BinaryOp op) {\n+public class UnaryArithmeticOrLogicOperation extends UnaryOpWrapper<CoreOp.UnaryOp> {\n+    UnaryArithmeticOrLogicOperation(CoreOp.UnaryOp op) {\n","filename":"hat\/hat\/src\/main\/java\/hat\/optools\/UnaryArithmeticOrLogicOperation.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"hat\/hat\/src\/main\/java\/hat\/optools\/BinaryLogicalOpWrapper.java","status":"copied"}]}