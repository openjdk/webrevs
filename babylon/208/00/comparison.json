{"files":[{"patch":"@@ -53,0 +53,2 @@\n+\n+import javax.swing.JTextField;\n@@ -89,1 +91,2 @@\n-    public static void heal(Accelerator accelerator, S32Array2D s32Array2D, Selection selection, Point bestMatchOffset) {\n+    public static void heal(Accelerator accelerator, S32Array2D s32Array2D, Selection selection, Point bestMatchOffset,\n+                            JTextField maskTB, JTextField healTB) {\n@@ -102,1 +105,1 @@\n-        System.out.println(\"mask \" + (System.currentTimeMillis() - start) + \"ms\");\n+        maskTB.setText(Long.toString(System.currentTimeMillis() - start));\n@@ -167,1 +170,2 @@\n-        System.out.println(\"heal2 \" + (System.currentTimeMillis() - start) + \"ms\");\n+     \/\/   System.out.println(\"heal2 \" + (System.currentTimeMillis() - start) + \"ms\");\n+        healTB.setText(Long.toString(System.currentTimeMillis() - start));\n@@ -263,1 +267,1 @@\n-    public static Point getBestMatchOffset(Accelerator accelerator, S32Array2D s32Array2D, Selection selection) {\n+    public static Point getBestMatchOffset(Accelerator accelerator, S32Array2D s32Array2D, Selection selection, JTextField searchTB) {\n@@ -315,1 +319,1 @@\n-            System.out.println(\"total search \" + (System.currentTimeMillis() - hatStart) + \"ms\");\n+            searchTB.setText(Long.toString(System.currentTimeMillis() - hatStart));\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/Compute.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import javax.swing.Box;\n+import javax.swing.JButton;\n@@ -33,0 +35,3 @@\n+import javax.swing.JLabel;\n+import javax.swing.JMenuBar;\n+import javax.swing.JTextField;\n@@ -41,0 +46,2 @@\n+        Accelerator accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n+\n@@ -47,2 +54,0 @@\n-        Accelerator accelerator = new Accelerator(MethodHandles.lookup(), Backend.FIRST);\n-\n@@ -50,0 +55,18 @@\n+        var menuBar = new JMenuBar();\n+        f.setJMenuBar(menuBar);\n+        ((JButton) menuBar.add(new JButton(\"Exit\"))).addActionListener(_ -> System.exit(0));\n+        menuBar.add(Box.createHorizontalStrut(40));\n+        menuBar.add(new JLabel(\"Search ms\"));\n+        var searchTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n+        searchTB.setEditable(false);\n+        menuBar.add(new JLabel(\"Mask ms\"));\n+        var maskTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n+        searchTB.setEditable(false);\n+        searchTB.setColumns(5);\n+        menuBar.add(new JLabel(\"Heal ms\"));\n+        var healTB = (JTextField) menuBar.add(new JTextField(\"\",5));\n+        healTB.setColumns(5);\n+        searchTB.setEditable(false);\n+\n+        Viewer viewer = new Viewer(accelerator,image, searchTB, maskTB, healTB);\n+\n@@ -52,1 +75,1 @@\n-        f.setContentPane( new Viewer(accelerator,image));\n+        f.setContentPane(viewer);\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/Main.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import javax.swing.JTextField;\n@@ -87,1 +88,1 @@\n-    public Viewer(Accelerator accelerator,BufferedImage image) {\n+    public Viewer(Accelerator accelerator,BufferedImage image, JTextField searchTB, JTextField maskTB, JTextField healTB) {\n@@ -97,2 +98,2 @@\n-                    bestMatchOffset = Compute.getBestMatchOffset(accelerator, s32Array2D, selection.close());\n-                    Compute.heal(accelerator,s32Array2D, selection, bestMatchOffset);\n+                    bestMatchOffset = Compute.getBestMatchOffset(accelerator, s32Array2D, selection.close(), searchTB);\n+                    Compute.heal(accelerator,s32Array2D, selection, bestMatchOffset, maskTB, healTB);\n","filename":"hat\/examples\/heal\/src\/main\/java\/heal\/Viewer.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,248 @@\n+<html>\n+   <head>\n+       <style>\n+           #side-by-side {\n+               display: flex;\n+           }\n+\n+           #left {\n+               flex: 0 0 50%;\n+           }\n+\n+           #right {\n+               flex: 1;\n+           }\n+           pre{\n+               font-family: \"Courier New\";\n+               background-color: black;\n+               color: yellow;\n+               max-width: 800px;\n+               overflow: clip;\n+\n+           }\n+       <\/style>\n+   <\/head>\n+   <body>\n+    <h3>COMPUTE entrypoint before injecting buffer tracking...<\/h3>\n+    <div id=\"side-by-side\">\n+        <div id=\"left\">\n+    <pre>\n+    func @\"compute\" @loc=\"129:9:file:\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\/examples\/life\/src\/main\/java\/life\/Main.java\" (%0 : hat.ComputeContext, %1 : life.Viewer, %2 : life.Main$Control, %3 : life.Main$CellGrid)void -&gt; {\n+       %4 : Var&lt;hat.ComputeContext&gt; = var %0 @\"cc\" @loc=\"129:9\";\n+       %5 : Var&lt;life.Viewer&gt; = var %1 @\"viewer\" @loc=\"129:9\";\n+       %6 : Var&lt;life.Main$Control&gt; = var %2 @\"ctrl\" @loc=\"129:9\";\n+       %7 : Var&lt;life.Main$CellGrid&gt; = var %3 @\"grid\" @loc=\"129:9\";\n+       java.while @loc=\"131:13\"\n+           ()boolean -&gt; {\n+               %8 : life.Viewer = var.load %5 @loc=\"131:20\";\n+               %9 : boolean = invoke %8 @\"life.Viewer::isVisible()boolean\" @loc=\"131:20\";\n+               yield %9 @loc=\"131:13\";\n+           }\n+           ()void -&gt; {\n+               %10 : hat.ComputeContext = var.load %4 @loc=\"132:17\";\n+               %11 : life.Main$CellGrid = var.load %7 @loc=\"133:25\";\n+\n+               %12 : int = invoke %11 @\"life.Main$CellGrid::width()int\" @loc=\"133:25\";\n+\n+               %13 : life.Main$CellGrid = var.load %7 @loc=\"133:40\";\n+\n+               %14 : int = invoke %13 @\"life.Main$CellGrid::height()int\" @loc=\"133:40\";\n+\n+               %15 : int = mul %12 %14 @loc=\"133:25\";\n+               %16 : hat.ComputeContext$QuotableKernelContextConsumer = lambda @loc=\"134:25\" (%17 : hat.KernelContext)void -&gt; {\n+                   %18 : Var&lt;hat.KernelContext&gt; = var %17 @\"kc\" @loc=\"134:25\";\n+                   %19 : hat.KernelContext = var.load %18 @loc=\"134:44\";\n+                   %20 : life.Main$Control = var.load %6 @loc=\"134:48\";\n+                   %21 : life.Main$CellGrid = var.load %7 @loc=\"134:54\";\n+                   invoke %19 %20 %21 @\"life.Main$Compute::life(hat.KernelContext, life.Main$Control, life.Main$CellGrid)void\" @loc=\"134:31\";\n+                   return @loc=\"134:25\";\n+               };\n+               invoke %10 %15 %16 @\"hat.ComputeContext::dispatchKernel(int, hat.ComputeContext$QuotableKernelContextConsumer)void\" @loc=\"132:17\";\n+               %22 : life.Main$Control = var.load %6 @loc=\"136:26\";\n+\n+               %23 : int = invoke %22 @\"life.Main$Control::from()int\" @loc=\"136:26\";\n+\n+               %24 : Var&lt;int&gt; = var %23 @\"to\" @loc=\"136:17\";\n+               %25 : life.Main$Control = var.load %6 @loc=\"136:39\";\n+               %26 : life.Main$Control = var.load %6 @loc=\"136:49\";\n+\n+               %27 : int = invoke %26 @\"life.Main$Control::to()int\" @loc=\"136:49\";\n+\n+               invoke %25 %27 @\"life.Main$Control::from(int)void\" @loc=\"136:39\";\n+\n+               %28 : life.Main$Control = var.load %6 @loc=\"136:61\";\n+               %29 : int = var.load %24 @loc=\"136:69\";\n+\n+               invoke %28 %29 @\"life.Main$Control::to(int)void\" @loc=\"136:61\";\n+\n+               java.if @loc=\"137:17\"\n+                   ()boolean -&gt; {\n+                       %30 : life.Viewer = var.load %5 @loc=\"137:21\";\n+                       %31 : boolean = invoke %30 @\"life.Viewer::isReadyForUpdate()boolean\" @loc=\"137:21\";\n+                       yield %31 @loc=\"137:17\";\n+                   }\n+                   ()void -&gt; {\n+                       %32 : life.Viewer = var.load %5 @loc=\"138:21\";\n+                       %33 : life.Main$CellGrid = var.load %7 @loc=\"138:35\";\n+                       %34 : int = var.load %24 @loc=\"138:41\";\n+                       invoke %32 %33 %34 @\"life.Viewer::update(life.Main$CellGrid, int)void\" @loc=\"138:21\";\n+                       yield @loc=\"137:17\";\n+                   }\n+                   ()void -&gt; {\n+                       yield;\n+                   };\n+               java.continue @loc=\"131:13\";\n+           };\n+       return @loc=\"129:9\";\n+    }\n+    <\/pre>\n+        <\/div>\n+        <div id=\"right\">\n+    <pre>\n+    func @\"compute\" @loc=\"129:9:file:\/Users\/grfrost\/github\/babylon-grfrost-fork\/hat\/examples\/life\/src\/main\/java\/life\/Main.java\" (%0 : hat.ComputeContext, %1 : life.Viewer, %2 : life.Main$Control, %3 : life.Main$CellGrid)void -&gt; {\n+        %4 : Var&lt;hat.ComputeContext&gt; = var %0 @\"cc\" @loc=\"129:9\";\n+        %5 : Var&lt;life.Viewer&gt; = var %1 @\"viewer\" @loc=\"129:9\";\n+        %6 : Var&lt;life.Main$Control&gt; = var %2 @\"ctrl\" @loc=\"129:9\";\n+        %7 : Var&lt;life.Main$CellGrid&gt; = var %3 @\"grid\" @loc=\"129:9\";\n+        java.while @loc=\"131:13\"\n+            ()boolean -&gt; {\n+                %8 : life.Viewer = var.load %5 @loc=\"131:20\";\n+                %9 : boolean = invoke %8 @\"life.Viewer::isVisible()boolean\" @loc=\"131:20\";\n+                yield %9 @loc=\"131:13\";\n+            }\n+            ()void -&gt; {\n+                %10 : hat.ComputeContext = var.load %4 @loc=\"132:17\";\n+                %11 : life.Main$CellGrid = var.load %7 @loc=\"133:25\";\n+                invoke %0 %11 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n+                %12 : int = invoke %11 @\"life.Main$CellGrid::width()int\" @loc=\"133:25\";\n+                invoke %0 %11 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n+                %13 : life.Main$CellGrid = var.load %7 @loc=\"133:40\";\n+                invoke %0 %13 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n+                %14 : int = invoke %13 @\"life.Main$CellGrid::height()int\" @loc=\"133:40\";\n+                invoke %0 %13 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n+                %15 : int = mul %12 %14 @loc=\"133:25\";\n+                %16 : hat.ComputeContext$QuotableKernelContextConsumer = lambda @loc=\"134:25\" (%17 : hat.KernelContext)void -&gt; {\n+                    %18 : Var&lt;hat.KernelContext&gt; = var %17 @\"kc\" @loc=\"134:25\";\n+                    %19 : hat.KernelContext = var.load %18 @loc=\"134:44\";\n+                    %20 : life.Main$Control = var.load %6 @loc=\"134:48\";\n+                    %21 : life.Main$CellGrid = var.load %7 @loc=\"134:54\";\n+                    invoke %19 %20 %21 @\"life.Main$Compute::life(hat.KernelContext, life.Main$Control, life.Main$CellGrid)void\" @loc=\"134:31\";\n+                    return @loc=\"134:25\";\n+                };\n+                invoke %10 %15 %16 @\"hat.ComputeContext::dispatchKernel(int, hat.ComputeContext$QuotableKernelContextConsumer)void\" @loc=\"132:17\";\n+                %22 : life.Main$Control = var.load %6 @loc=\"136:26\";\n+                invoke %0 %22 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n+                %23 : int = invoke %22 @\"life.Main$Control::from()int\" @loc=\"136:26\";\n+                invoke %0 %22 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n+                %24 : Var&lt;int&gt; = var %23 @\"to\" @loc=\"136:17\";\n+                %25 : life.Main$Control = var.load %6 @loc=\"136:39\";\n+                %26 : life.Main$Control = var.load %6 @loc=\"136:49\";\n+                invoke %0 %26 @\"hat.ComputeContext::preAccess(hat.buffer.Buffer)void\";\n+                %27 : int = invoke %26 @\"life.Main$Control::to()int\" @loc=\"136:49\";\n+                invoke %0 %26 @\"hat.ComputeContext::postAccess(hat.buffer.Buffer)void\";\n+                invoke %0 %25 @\"hat.ComputeContext::preMutate(hat.buffer.Buffer)void\";\n+                invoke %25 %27 @\"life.Main$Control::from(int)void\" @loc=\"136:39\";\n+                invoke %0 %25 @\"hat.ComputeContext::postMutate(hat.buffer.Buffer)void\";\n+                %28 : life.Main$Control = var.load %6 @loc=\"136:61\";\n+                %29 : int = var.load %24 @loc=\"136:69\";\n+                invoke %0 %28 @\"hat.ComputeContext::preMutate(hat.buffer.Buffer)void\";\n+                invoke %28 %29 @\"life.Main$Control::to(int)void\" @loc=\"136:61\";\n+                invoke %0 %28 @\"hat.ComputeContext::postMutate(hat.buffer.Buffer)void\";\n+                java.if @loc=\"137:17\"\n+                    ()boolean -&gt; {\n+                        %30 : life.Viewer = var.load %5 @loc=\"137:21\";\n+                        %31 : boolean = invoke %30 @\"life.Viewer::isReadyForUpdate()boolean\" @loc=\"137:21\";\n+                        yield %31 @loc=\"137:17\";\n+                    }\n+                    ()void -&gt; {\n+                        %32 : life.Viewer = var.load %5 @loc=\"138:21\";\n+                        %33 : life.Main$CellGrid = var.load %7 @loc=\"138:35\";\n+                        %34 : int = var.load %24 @loc=\"138:41\";\n+                        invoke %32 %33 %34 @\"life.Viewer::update(life.Main$CellGrid, int)void\" @loc=\"138:21\";\n+                        yield @loc=\"137:17\";\n+                    }\n+                    ()void -&gt; {\n+                        yield;\n+                    };\n+                java.continue @loc=\"131:13\";\n+            };\n+        return @loc=\"129:9\";\n+    };\n+    <\/pre>\n+        <\/div>\n+    <\/div>\n+    <h3>Resulting OpenCL<\/h3>\n+    <pre>\n+        #define NDRANGE_OPENCL\n+        #pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n+        #pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable\n+        #ifndef NULL\n+        #define NULL 0\n+        #endif\n+        #pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n+        #pragma OPENCL EXTENSION cl_khr_local_int32_base_atomics : enable\n+        typedef char s8_t;\n+        typedef char byte;\n+        typedef char boolean;\n+        typedef unsigned char u8_t;\n+        typedef short s16_t;\n+        typedef unsigned short u16_t;\n+        typedef unsigned int u32_t;\n+        typedef int s32_t;\n+        typedef float f32_t;\n+        typedef long s64_t;\n+        typedef unsigned long u64_t;\n+        typedef struct KernelContext_s{\n+            int x;\n+            int maxX;\n+        }KernelContext_t;\n+        typedef struct Control_s{\n+            int from;\n+            int to;\n+        }Control_t;\n+        \n+        typedef struct CellGrid_s{\n+            int width;\n+            int height;\n+            byte cell[1];\n+        }CellGrid_t;\n+        \n+        \n+        \n+        inline int val(\n+            __global CellGrid_t* grid, int from, int w, int x, int y\n+        ){\n+            return (int)grid-&gt;cell[(long)y*(long)w+(long)x+(long)from]&1;\n+        }\n+        \n+        \n+        __kernel void life(\n+            __global KernelContext_t *kc, __global Control_t* control, __global CellGrid_t* cellGrid\n+        ){\n+            kc-&gt;x=get_global_id(0);\n+            if(kc-&gt;x&lt;kc-&gt;maxX){\n+                int w = cellGrid-&gt;width;\n+                int h = cellGrid-&gt;height;\n+                int from = control-&gt;from;\n+                int to = control-&gt;to;\n+                int x = kc-&gt;x%w;\n+                int y = kc-&gt;x\/w;\n+                byte cell = cellGrid-&gt;cell[(long)(kc-&gt;x+from)];\n+                if(x&gt;0 && x&lt;w-1 && y&gt;0 && y&lt;h-1){\n+                    int count = val(cellGrid, from, w, x-1, y-1)\n+                        +val(cellGrid, from, w, x-1, y+0)\n+                        +val(cellGrid, from, w, x-1, y+1)\n+                        +val(cellGrid, from, w, x+0, y-1)\n+                        +val(cellGrid, from, w, x+0, y+1)\n+                        +val(cellGrid, from, w, x+1, y+0)\n+                        +val(cellGrid, from, w, x+1, y-1)\n+                        +val(cellGrid, from, w, x+1, y+1);\n+                    cell=(count==3 || count==2 && (int)cell==(int)-1?-1:0);\n+                }\n+                cellGrid-&gt;cell[(long)(kc-&gt;x+to)]=cell;\n+            }\n+            return;\n+        }\n+    <\/pre>\n+<\/body>\n+<\/html>\n","filename":"hat\/examples\/life\/DEMO.html","additions":248,"deletions":0,"binary":false,"changes":248,"status":"added"},{"patch":"@@ -117,1 +117,3 @@\n-                            .forEach(value -> CoreOp.invoke(ESCAPE.pre, cc, bldrCntxt.getValue(value)));\n+                            .forEach(value ->\n+                                    bldr.op(CoreOp.invoke(ESCAPE.pre, cc, bldrCntxt.getValue(value)))\n+                            );\n@@ -121,1 +123,3 @@\n-                            .forEach(value -> CoreOp.invoke(ESCAPE.post, cc, bldrCntxt.getValue(value)));\n+                            .forEach(value -> bldr.op(\n+                                    CoreOp.invoke(ESCAPE.post, cc, bldrCntxt.getValue(value)))\n+                            );\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/NativeBackend.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        System.out.println(\"new workstealer!\");\n+      \/\/  System.out.println(\"new workstealer!\");\n","filename":"hat\/hat\/src\/main\/java\/hat\/backend\/WorkStealer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}