{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import java.io.CharArrayWriter;\n@@ -280,1 +281,11 @@\n-        String fieldName = getName() + \"$\" + \"op\";\n+        CharArrayWriter sigB = new CharArrayWriter();\n+        for (var p : parameterTypes) {\n+            sigB.append(p.descriptorString());\n+        }\n+        char[] sig = sigB.toCharArray();\n+        for (int i = 0; i < sig.length; i++) {\n+            switch (sig[i]) {\n+                case '.', ';', '[', '\/': sig[i] = '$';\n+            }\n+        }\n+        String fieldName = getName() + \"$\" + new String(sig) + \"$\" + \"op\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+import java.io.CharArrayWriter;\n@@ -194,1 +195,1 @@\n-                classOps.add(opFieldDecl(tree.name, tree.getModifiers().flags, funcOp));\n+                classOps.add(opFieldDecl(methodName(tree), tree.getModifiers().flags, funcOp));\n@@ -357,0 +358,28 @@\n+    Name methodName(JCMethodDecl method) {\n+        CharArrayWriter sig = new CharArrayWriter();\n+        var sigGen = new Types.SignatureGenerator(types) {\n+            @Override\n+            protected void append(char ch) {\n+                sig.append(ch);\n+            }\n+            @Override\n+            protected void append(byte[] ba) {\n+                sig.append(new String(ba));\n+            }\n+            @Override\n+            protected void append(Name name) {\n+                sig.append(name.toString());\n+            }\n+        };\n+        for (var pt : method.sym.externalType(types).getParameterTypes()) {\n+            sigGen.assembleSig(types.erasure(pt));\n+        }\n+        char[] sigCh = sig.toCharArray();\n+        for (int i = 0; i < sigCh.length; i++) {\n+            switch (sigCh[i]) {\n+                case '.', ';', '[', '\/' -> sigCh[i] = '$';\n+            }\n+        }\n+        return method.name.append('$', names.fromChars(sigCh, 0, sigCh.length));\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-    public void finallyReturn() {\n+    public void testFinallyReturn() {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestTryFinally.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-    public void finallyReturn() {\n+    public void testFinallyReturn() {\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestTryFinally.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}