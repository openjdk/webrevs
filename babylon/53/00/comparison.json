{"files":[{"patch":"@@ -626,1 +626,1 @@\n-            for (int i = 0; i < argNames.length; i++) {\n+            for (int i = 0; i < argNames.length - reflectiveCaptureCount(); i++) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,1 +306,6 @@\n-                capturedArgs.add(make.at(pos).Ident(capturedSym));\n+                VarSymbol var = (VarSymbol)capturedSym;\n+                if (var.getConstValue() == null) {\n+                    capturedArgs.add(make.at(pos).Ident(capturedSym));\n+                } else {\n+                    capturedArgs.add(make.at(pos).Literal(var.getConstValue()));\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.function.ToIntFunction;\n@@ -56,0 +57,13 @@\n+    @Test\n+    public void testCaptureRefAndIntConstant() {\n+        final int x = 100;\n+        String hello = \"hello\";\n+        Quotable quotable = (Quotable & ToIntFunction<Number>)y -> y.intValue() + hello.length() + x;\n+        Quoted quoted = quotable.quoted();\n+        assertEquals(quoted.capturedValues().size(), 2);\n+        assertEquals(((Var)quoted.capturedValues().values().iterator().next()).value(), x);\n+        int res = (int)Interpreter.invoke(MethodHandles.lookup(), (Op & Op.Invokable) quoted.op(),\n+                quoted.capturedValues(), 1);\n+        assertEquals(res, x + 1 + hello.length());\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuotable.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}