{"files":[{"patch":"@@ -623,19 +623,2 @@\n-                        Value[] bootstrapArgs = new Value[bsmDesc.parameterCount()];\n-                        bootstrapArgs[0] = lookup();\n-                        bootstrapArgs[1] = liftConstant(inst.name().toString());\n-                        bootstrapArgs[2] = liftConstant(mtd);\n-                        ClassDesc lastArgType = bsmDesc.parameterType(bsmDesc.parameterCount() - 1);\n-                        List<ConstantDesc> bsmArgs = inst.bootstrapArgs();\n-                        if (lastArgType.isArray()) {\n-                            for (int ai = 0; ai < bootstrapArgs.length - 4; ai++) {\n-                                bootstrapArgs[ai + 3] = liftConstant(bsmArgs.get(ai));\n-                            }\n-                            \/\/ Vararg tail of the bootstrap method parameters\n-                            bootstrapArgs[bootstrapArgs.length - 1] =\n-                                    liftConstantsIntoArray(JavaType.type(lastArgType),\n-                                                           bsmArgs.subList(bootstrapArgs.length - 4, bsmArgs.size()).toArray());\n-                        } else {\n-                            for (int ai = 0; ai < bootstrapArgs.length - 3; ai++) {\n-                                bootstrapArgs[ai + 3] = liftConstant(bsmArgs.get(ai));\n-                            }\n-                        }\n+\n+                        Value[] bootstrapArgs = liftBootstrapArgs(bsmDesc, inst.name().toString(), mtd, inst.bootstrapArgs());\n@@ -868,7 +851,0 @@\n-                    List<Value> bootstrapArgs = new ArrayList<>();\n-                    bootstrapArgs.add(lookup());\n-                    bootstrapArgs.add(liftConstant(dcd.constantName()));\n-                    bootstrapArgs.add(liftConstant(dcd.constantType()));\n-                    for (ConstantDesc barg : dcd.bootstrapArgs()) {\n-                        bootstrapArgs.add(liftConstant(barg));\n-                    }\n@@ -877,0 +853,1 @@\n+                    Value[] bootstrapArgs = liftBootstrapArgs(bsmDesc, dcd.constantName(), dcd.constantType(), dcd.bootstrapArgsList());\n@@ -891,0 +868,22 @@\n+    private Value[] liftBootstrapArgs(MethodTypeDesc bsmDesc, String name, ConstantDesc desc, List<ConstantDesc> bsmArgs) {\n+        Value[] bootstrapArgs = new Value[bsmDesc.parameterCount()];\n+        bootstrapArgs[0] = lookup();\n+        bootstrapArgs[1] = liftConstant(name);\n+        bootstrapArgs[2] = liftConstant(desc);\n+        ClassDesc lastArgType = bsmDesc.parameterType(bsmDesc.parameterCount() - 1);\n+        if (lastArgType.isArray()) {\n+            for (int ai = 0; ai < bootstrapArgs.length - 4; ai++) {\n+                bootstrapArgs[ai + 3] = liftConstant(bsmArgs.get(ai));\n+            }\n+            \/\/ Vararg tail of the bootstrap method parameters\n+            bootstrapArgs[bootstrapArgs.length - 1] =\n+                    liftConstantsIntoArray(JavaType.type(lastArgType),\n+                                           bsmArgs.subList(bootstrapArgs.length - 4, bsmArgs.size()).toArray());\n+        } else {\n+            for (int ai = 0; ai < bootstrapArgs.length - 3; ai++) {\n+                bootstrapArgs[ai + 3] = liftConstant(bsmArgs.get(ai));\n+            }\n+        }\n+        return bootstrapArgs;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":25,"deletions":26,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        for (var vti : smfi.stack().reversed()) {\n+        for (var vti : smfi.stack()) {\n@@ -143,1 +143,1 @@\n-        if (!ConstantDescs.CD_void.equals(type)) stack.addLast(type);\n+        if (!ConstantDescs.CD_void.equals(type)) stack.add(type);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.lang.reflect.code.OpTransformer;\n-import java.lang.reflect.code.analysis.SSA;\n@@ -117,1 +115,1 @@\n-                    CoreOp.FuncOp firstTransform = transform(firstLift);\n+                    MethodModel firstModel = lower(firstLift);\n@@ -119,1 +117,1 @@\n-                        MethodModel firstModel = lower(firstTransform);\n+                        CoreOp.FuncOp secondLift = lift(firstModel);\n@@ -121,24 +119,13 @@\n-                            CoreOp.FuncOp secondLift = lift(firstModel);\n-                            try {\n-                                CoreOp.FuncOp secondTransform = transform(secondLift);\n-                                try {\n-                                    MethodModel secondModel = lower(secondTransform);\n-\n-                                    \/\/ testing only methods passing through\n-                                    var firstNormalized = normalize(firstModel);\n-                                    var secondNormalized = normalize(secondModel);\n-                                    if (!firstNormalized.equals(secondNormalized)) {\n-                                        notMatching++;\n-                                        System.out.println(clm.thisClass().asInternalName() + \"::\" + originalModel.methodName().stringValue() + originalModel.methodTypeSymbol().displayDescriptor());\n-                                        printInColumns(firstLift, secondLift);\n-                                        printInColumns(firstTransform, secondTransform);\n-                                        printInColumns(firstNormalized, secondNormalized);\n-                                        System.out.println();\n-                                    } else {\n-                                        passed++;\n-                                    }\n-                                } catch (Exception e) {\n-                                    error(\"second lower\", e);\n-                                }\n-                            } catch (Exception e) {\n-                                error(\"second transform\", e);\n+                            MethodModel secondModel = lower(secondLift);\n+\n+                            \/\/ testing only methods passing through\n+                            var firstNormalized = normalize(firstModel);\n+                            var secondNormalized = normalize(secondModel);\n+                            if (!firstNormalized.equals(secondNormalized)) {\n+                                notMatching++;\n+                                System.out.println(clm.thisClass().asInternalName() + \"::\" + originalModel.methodName().stringValue() + originalModel.methodTypeSymbol().displayDescriptor());\n+                                printInColumns(firstLift, secondLift);\n+                                printInColumns(firstNormalized, secondNormalized);\n+                                System.out.println();\n+                            } else {\n+                                passed++;\n@@ -147,1 +134,1 @@\n-                            error(\"second lift\", e);\n+                            error(\"second lower\", e);\n@@ -150,1 +137,1 @@\n-                        error(\"first lower\", e);\n+                        error(\"second lift\", e);\n@@ -153,1 +140,1 @@\n-                    error(\"first transform\", e);\n+                    error(\"first lower\", e);\n@@ -181,4 +168,0 @@\n-    private static CoreOp.FuncOp transform(CoreOp.FuncOp func) {\n-        return SSA.transform(func.transform(OpTransformer.LOWERING_TRANSFORMER));\n-    }\n-\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":18,"deletions":35,"binary":false,"changes":53,"status":"modified"}]}