{"files":[{"patch":"@@ -1115,0 +1115,1 @@\n+        boolean jumpingToCatchBlock = catchingBlocks.get(ref.targetBlock().index());\n@@ -1124,1 +1125,3 @@\n-                storeIfUsed(barg);\n+                if (!jumpingToCatchBlock) { \/\/ Catch block expects the exception parameter on stack\n+                    storeIfUsed(barg);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,0 +80,3 @@\n+    private record ExceptionRegion(Label startLabel, Label endLabel, Label handlerLabel) {}\n+    private record ExceptionRegionEntry(Op.Result enter, ExceptionRegion region) {}\n+\n@@ -104,1 +107,1 @@\n-    private final List<ExcRegion> exceptionRegions;\n+    private final List<ExceptionRegion> exceptionRegions;\n@@ -110,1 +113,1 @@\n-    private final ArrayDeque<ExceptionEntry> exceptionRegionStack;\n+    private final ArrayDeque<ExceptionRegionEntry> exceptionRegionStack;\n@@ -138,1 +141,1 @@\n-    private static List<ExcRegion> extractExceptionRegions(CodeAttribute codeAttribute) {\n+    private static List<ExceptionRegion> extractExceptionRegions(CodeAttribute codeAttribute) {\n@@ -180,1 +183,1 @@\n-                .map(ec -> new ExcRegion(ec.tryStart(), ec.tryEnd(), ec.handler())).distinct().toList();\n+                .map(ec -> new ExceptionRegion(ec.tryStart(), ec.tryEnd(), ec.handler())).distinct().toList();\n@@ -184,1 +187,1 @@\n-            var newRegions = new ArrayList<ExcRegion>();\n+            var newRegions = new ArrayList<ExceptionRegion>();\n@@ -199,1 +202,1 @@\n-                            newRegions.add(new ExcRegion(startLabel, breakLabel, reg.handlerLabel()));\n+                            newRegions.add(new ExceptionRegion(startLabel, breakLabel, reg.handlerLabel()));\n@@ -204,1 +207,1 @@\n-                    newRegions.add(new ExcRegion(startLabel, reg.endLabel(), reg.handlerLabel()));\n+                    newRegions.add(new ExceptionRegion(startLabel, reg.endLabel(), reg.handlerLabel()));\n@@ -298,3 +301,0 @@\n-    record ExcRegion(Label startLabel, Label endLabel, Label handlerLabel) {}\n-    record ExceptionEntry(Op.Result enter, ExcRegion region) {}\n-\n@@ -303,1 +303,1 @@\n-        for (ExceptionEntry ee : exceptionRegionStack) {\n+        for (ExceptionRegionEntry ee : exceptionRegionStack) {\n@@ -327,1 +327,1 @@\n-                        ExceptionEntry er = exceptionRegionStack.pop();\n+                        ExceptionRegionEntry er = exceptionRegionStack.pop();\n@@ -347,1 +347,1 @@\n-                    for (ExcRegion reg : exceptionRegions.reversed()) {\n+                    for (ExceptionRegion reg : exceptionRegions.reversed()) {\n@@ -353,2 +353,2 @@\n-                            \/\/ Push ExceptionEntry on stack\n-                            exceptionRegionStack.push(new ExceptionEntry(ere.result(), reg));\n+                            \/\/ Push ExceptionRegionEntry on stack\n+                            exceptionRegionStack.push(new ExceptionRegionEntry(ere.result(), reg));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}