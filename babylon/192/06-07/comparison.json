{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.classfile.TypeKind;\n@@ -37,0 +36,1 @@\n+import java.lang.constant.ConstantDescs;\n@@ -39,0 +39,1 @@\n+import java.util.HashMap;\n@@ -45,1 +46,0 @@\n-import java.lang.constant.ConstantDescs;\n@@ -47,1 +47,3 @@\n-import java.util.HashMap;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -208,2 +210,12 @@\n-                push(ClassDesc.ofDescriptor(i.typeKind() == TypeKind.ReferenceType ?\n-                        i.constantValue().getClass().descriptorString() : i.typeKind().descriptor()));\n+                push(switch (i.constantValue()) {\n+                    case null -> CD_Object;\n+                    case ClassDesc _ -> CD_Class;\n+                    case Double _ -> CD_double;\n+                    case Float _ -> CD_float;\n+                    case Integer _ -> CD_int;\n+                    case Long _ -> CD_long;\n+                    case String _ -> CD_String;\n+                    case DynamicConstantDesc<?> cd -> cd.constantType();\n+                    case DirectMethodHandleDesc _ -> CD_MethodHandle;\n+                    case MethodTypeDesc _ -> CD_MethodType;\n+                });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        Assert.assertTrue(passed > 32800, String.format(\"\"\"\n+        Assert.assertTrue(passed > 33350, String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}