{"files":[{"patch":"@@ -104,0 +104,1 @@\n+    private final CodeAttribute codeAttribtue;\n@@ -110,0 +111,1 @@\n+    private final ArrayDeque<ExceptionRegion> exceptionRegionStack;\n@@ -116,1 +118,1 @@\n-        var res = (CodeAttribute)codeModel;\n+        this.codeAttribtue = (CodeAttribute)codeModel;\n@@ -119,2 +121,2 @@\n-                eh -> res.labelToBci(eh.handler()) >= res.labelToBci(eh.tryEnd())\n-                   || res.labelToBci(eh.handler()) < res.labelToBci(eh.tryStart())).toList();\n+                eh -> codeAttribtue.labelToBci(eh.handler()) >= codeAttribtue.labelToBci(eh.tryEnd())\n+                   || codeAttribtue.labelToBci(eh.handler()) < codeAttribtue.labelToBci(eh.tryStart())).toList();\n@@ -137,0 +139,1 @@\n+        this.exceptionRegionStack = new ArrayDeque<>();\n@@ -225,0 +228,18 @@\n+    record ExceptionRegion(Op.Result enter, Label startLabel, Label endLabel) {}\n+\n+    private Block.Builder insertExceptionRegionExits(Label targetLabel) {\n+        Block.Builder targetBlock = blockMap.get(targetLabel);\n+        for (ExceptionRegion er : exceptionRegionStack) {\n+            int targetBci = codeAttribtue.labelToBci(targetLabel);\n+            if (targetBci < codeAttribtue.labelToBci(er.startLabel()) || targetBci > codeAttribtue.labelToBci(er.endLabel())) {\n+                \/\/ Branching out of the exception region, need to insert a block with ExceptionRegionExit\n+                Block.Builder next = newBlock(targetBlock.parameters());\n+                next.op(CoreOp.exceptionRegionExit(er.enter(), successor(targetBlock)));\n+                targetBlock = next;\n+            } else {\n+                return targetBlock;\n+            }\n+        }\n+        return targetBlock;\n+    }\n+\n@@ -226,1 +247,0 @@\n-        final Map<ExceptionCatch, Op.Result> exceptionRegionsMap = new HashMap<>();\n@@ -251,2 +271,2 @@\n-                            \/\/ Store ERE into map for exit\n-                            exceptionRegionsMap.put(ec, ere.result());\n+                            \/\/ Push ExceptionRegion on stack\n+                            exceptionRegionStack.push(new ExceptionRegion(ere.result(), ec.tryStart(), ec.tryEnd()));\n@@ -256,8 +276,7 @@\n-                    \/\/ Insert relevant tryEnd blocks in normal order\n-                    for (ExceptionCatch ec : exceptionHandlers) {\n-                        if (lt.label() == ec.tryEnd()) {\n-                            \/\/ Create exit block with parameters constructed from the stack\n-                            next = newBlock();\n-                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), successor(next)));\n-                            moveTo(next);\n-                        }\n+                    \/\/ Insert relevant tryEnd blocks\n+                    while (!exceptionRegionStack.isEmpty() && lt.label() == exceptionRegionStack.peek().endLabel()) {\n+                        \/\/ Create exit block with parameters constructed from the stack\n+                        ExceptionRegion er = exceptionRegionStack.pop();\n+                        next = newBlock();\n+                        op(CoreOp.exceptionRegionExit(er.enter(), successor(next)));\n+                        moveTo(next);\n@@ -267,1 +286,1 @@\n-                    op(CoreOp.branch(successor(blockMap.get(inst.target()))));\n+                    op(CoreOp.branch(successor(insertExceptionRegionExits(inst.target()))));\n@@ -292,1 +311,1 @@\n-                    Block.Builder branch = blockMap.get(inst.target());\n+                    Block.Builder branch = insertExceptionRegionExits(inst.target());\n@@ -790,1 +809,1 @@\n-        Block.Builder def = blockMap.get(defaultTarget);\n+        Block.Builder def = insertExceptionRegionExits(defaultTarget);\n@@ -795,1 +814,1 @@\n-                    successor(blockMap.get(sc.target())),\n+                    successor(insertExceptionRegionExits(sc.target())),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":37,"deletions":18,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        Assert.assertTrue(passed > 33720, String.format(\"\"\"\n+        Assert.assertTrue(passed > 33730, String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}