{"files":[{"patch":"@@ -42,1 +42,0 @@\n-import java.util.function.Function;\n@@ -52,0 +51,2 @@\n+    record Frame(List<ClassDesc> stack, List<ClassDesc> locals) {}\n+\n@@ -55,1 +56,1 @@\n-    private final Map<Label, StackMapFrameInfo> stackMap;\n+    private final Map<Label, Frame> stackMap;\n@@ -57,0 +58,1 @@\n+    private boolean frameDirty;\n@@ -65,1 +67,2 @@\n-        this.locals = new ArrayList<>(initFrameLocals);\n+        this.locals = new ArrayList<>(initFrameLocals.size());\n+        this.newMap = computeNewMap(codeElements);\n@@ -68,4 +71,22 @@\n-                Function.identity()))).orElse(Map.of());\n-        this.newMap = computeNewMap(codeElements);\n-        for (int i = 0; i < codeElements.size(); i++) {\n-            accept(i, codeElements.get(i));\n+                this::toFrame))).orElse(Map.of());\n+        do {\n+            this.locals.addAll(initFrameLocals);\n+            this.frameDirty = false;\n+            for (int i = 0; i < codeElements.size(); i++) {\n+                accept(i, codeElements.get(i));\n+            }\n+            endOfFlow();\n+        } while (this.frameDirty);\n+    }\n+\n+    private Frame toFrame(StackMapFrameInfo smfi) {\n+        List<ClassDesc> fstack = new ArrayList<>(smfi.stack().size());\n+        List<ClassDesc> flocals = new ArrayList<>(smfi.locals().size() * 2);\n+        for (var vti : smfi.stack().reversed()) {\n+            fstack.add(vtiToStackType(vti));\n+        }\n+        for (var vti : smfi.locals()) {\n+            flocals.add(vtiToStackType(vti));\n+            if (vti == ITEM_DOUBLE || vti == ITEM_LONG) {\n+                flocals.add(null);\n+            }\n@@ -73,0 +94,1 @@\n+        return new Frame(fstack, flocals);\n@@ -169,2 +191,16 @@\n-            case BranchInstruction i when !i.opcode().isUnconditionalBranch() ->\n-                pop(1);\n+            case BranchInstruction i -> {\n+                switch (i.opcode()) {\n+                    case IFEQ, IFGE, IFGT, IFLE, IFLT, IFNE, IFNONNULL, IFNULL -> {\n+                        pop();\n+                        mergeToTargetFrame(i.target());\n+                    }\n+                    case IF_ACMPEQ, IF_ACMPNE, IF_ICMPEQ, IF_ICMPGE, IF_ICMPGT, IF_ICMPLE, IF_ICMPLT, IF_ICMPNE -> {\n+                        pop(2);\n+                        mergeToTargetFrame(i.target());\n+                    }\n+                    case GOTO, GOTO_W -> {\n+                        mergeToTargetFrame(i.target());\n+                        endOfFlow();\n+                    }\n+                }\n+            }\n@@ -248,11 +284,5 @@\n-                var smfi = stackMap.get(lt.label());\n-                if (smfi != null) {\n-                    stack.clear();\n-                    for (var vti : smfi.stack()) {\n-                        push(vtiToStackType(vti));\n-                    }\n-                    locals.clear();\n-                    int slot = 0;\n-                    for (var vti : smfi.locals()) {\n-                        store(slot, vtiToStackType(vti));\n-                        slot += (vti == ITEM_DOUBLE || vti == ITEM_LONG) ? 2 : 1;\n+                var frame = stackMap.get(lt.label());\n+                if (frame != null) {\n+                    if (!stack.isEmpty() || !locals.isEmpty()) {\n+                        mergeToTargetFrame(lt.label());\n+                        endOfFlow();\n@@ -260,0 +290,20 @@\n+                    stack.addAll(frame.stack());\n+                    locals.addAll(frame.locals());\n+                }\n+            }\n+            case ReturnInstruction _ , ThrowInstruction _ -> {\n+                endOfFlow();\n+            }\n+            case TableSwitchInstruction tsi -> {\n+                pop();\n+                mergeToTargetFrame(tsi.defaultTarget());\n+                for (var c : tsi.cases()) {\n+                    mergeToTargetFrame(c.target());\n+                }\n+                endOfFlow();\n+            }\n+            case LookupSwitchInstruction lsi -> {\n+                pop();\n+                mergeToTargetFrame(lsi.defaultTarget());\n+                for (var c : lsi.cases()) {\n+                    mergeToTargetFrame(c.target());\n@@ -261,0 +311,1 @@\n+                endOfFlow();\n@@ -265,0 +316,29 @@\n+\n+    private void endOfFlow() {\n+        stack.clear();\n+        locals.clear();\n+    }\n+\n+    private void mergeToTargetFrame(Label target) {\n+        Frame targetFrame = stackMap.get(target);\n+        \/\/ Merge stack\n+        assert stack.size() == targetFrame.stack.size();\n+        for (int i = 0; i < targetFrame.stack.size(); i++) {\n+            ClassDesc se = stack.get(i);\n+            ClassDesc fe = targetFrame.stack.get(i);\n+            if (!se.equals(fe) && se.isPrimitive() && CD_int.equals(fe)) {\n+                targetFrame.stack.set(i, se);\n+                this.frameDirty = true;\n+            }\n+        }\n+        \/\/ Merge locals\n+        int lSize = Math.min(locals.size(), targetFrame.locals.size());\n+        for (int i = 0; i < lSize; i++) {\n+            ClassDesc le = locals.get(i);\n+            ClassDesc fe = targetFrame.locals.get(i);\n+            if (le != null && !le.equals(fe) && le.isPrimitive() && CD_int.equals(fe)) {\n+                targetFrame.locals.set(i, le);\n+                this.frameDirty = true;\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java","additions":100,"deletions":20,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -255,2 +255,2 @@\n-    static int deepStackBranches(int a, int b) {\n-        return MAP[a > 2 ? MAP[b > 2 ? 1 : 2] : MAP[b > 2 ? 3 : 4]];\n+    static int deepStackBranches(boolean a, boolean b) {\n+        return MAP[a ? MAP[b ? 1 : 2] : MAP[b ? 3 : 4]];\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.lang.reflect.AccessFlag;\n-import java.lang.reflect.code.Op;\n@@ -88,1 +86,1 @@\n-        Assert.assertTrue(passed > 29000, String.format(\"\"\"\n+        Assert.assertTrue(passed > 29300, String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}