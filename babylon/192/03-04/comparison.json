{"files":[{"patch":"@@ -172,12 +172,0 @@\n-    private Block.Builder getBlock(Label l) {\n-        Block.Builder bb = blockMap.get(l);\n-        if (bb == null) {\n-            if (currentBlock == null) {\n-                throw new IllegalArgumentException(\"Block without an stack frame detected.\");\n-            } else {\n-                return newBlock();\n-            }\n-        }\n-        return bb;\n-    }\n-\n@@ -188,0 +176,4 @@\n+    private Block.Builder newBlock(List<Block.Parameter> otherBlockParams) {\n+        return entryBlock.block(otherBlockParams.stream().map(Block.Parameter::type).toList());\n+    }\n+\n@@ -219,1 +211,1 @@\n-                            op(CoreOp.branch(next.successor(List.copyOf(stack))));\n+                            op(CoreOp.branch(successor(next)));\n@@ -226,1 +218,1 @@\n-                            Block.Builder handler = getBlock(ec.handler());\n+                            Block.Builder handler = blockMap.get(ec.handler());\n@@ -229,1 +221,1 @@\n-                            Op ere = CoreOp.exceptionRegionEnter(next.successor(List.copyOf(stack)), handler.successor(List.copyOf(stack)));\n+                            Op ere = CoreOp.exceptionRegionEnter(successor(next), successor(handler));\n@@ -241,1 +233,1 @@\n-                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), next.successor(List.copyOf(stack))));\n+                            op(CoreOp.exceptionRegionExit(exceptionRegionsMap.get(ec), successor(next)));\n@@ -247,1 +239,1 @@\n-                    op(CoreOp.branch(getBlock(inst.target()).successor(List.copyOf(stack))));\n+                    op(CoreOp.branch(successor(blockMap.get(inst.target()))));\n@@ -272,1 +264,2 @@\n-                    Block.Builder next = newBlock();\n+                    Block.Builder branch = blockMap.get(inst.target());\n+                    Block.Builder next = newBlock(branch.parameters());\n@@ -274,2 +267,2 @@\n-                            next.successor(List.copyOf(stack)),\n-                            getBlock(inst.target()).successor(List.copyOf(stack))));\n+                            successor(next),\n+                            successor(branch)));\n@@ -769,0 +762,1 @@\n+        Block.Builder def = blockMap.get(defaultTarget);\n@@ -770,1 +764,1 @@\n-            Block.Builder next = sc == last ? blockMap.get(defaultTarget) : newBlock();\n+            Block.Builder next = sc == last ? def : newBlock(def.parameters());\n@@ -773,2 +767,2 @@\n-                    blockMap.get(sc.target()).successor(List.copyOf(stack)),\n-                    next.successor(List.copyOf(stack))));\n+                    successor(blockMap.get(sc.target())),\n+                    successor(next)));\n@@ -780,0 +774,4 @@\n+    Block.Reference successor(Block.Builder next) {\n+        return next.successor(stack.stream().limit(next.parameters().size()).toList());\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":21,"deletions":23,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.reflect.code.type.PrimitiveType;\n@@ -80,1 +81,1 @@\n-                    if (vl.resultType().equals(v.type())) {\n+                    if (vl.resultType().equals(v.type()) || v.type() instanceof PrimitiveType) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotSSA.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        Assert.assertTrue(passed > 29300, String.format(\"\"\"\n+        Assert.assertTrue(passed > 29760, String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}