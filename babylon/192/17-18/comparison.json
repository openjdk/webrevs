{"files":[{"patch":"@@ -931,1 +931,1 @@\n-    private boolean inBlockArgs(Op.Result res) {\n+    private static boolean inBlockArgs(Op.Result res) {\n@@ -941,0 +941,7 @@\n+    private static boolean moreThanOneUse(Op.Result res) {\n+        Set<Op.Result> uses = res.uses();\n+        return uses.size() > 1\n+            || uses.size() == 1 && uses.iterator().next().op().operands().stream().filter(o -> o == res).count() > 1\n+            || inBlockArgs(res);\n+    }\n+\n@@ -945,1 +952,1 @@\n-            if (res.uses().size() > 1 || inBlockArgs(res)) {\n+            if (moreThanOneUse(res)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -824,1 +824,1 @@\n-        Op.Result res = c instanceof ClassDesc ? null : constantCache.get(c); \/\/ Do not cache class constants\n+        Op.Result res = constantCache.get(c);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -538,0 +538,6 @@\n+    @CodeReflection\n+    static long doubleUseOfOperand(int x) {\n+        long piece = x;\n+        return piece * piece;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}