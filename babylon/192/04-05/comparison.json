{"files":[{"patch":"@@ -130,3 +130,4 @@\n-        this.blockMap = codeTracker.stackMap.entrySet().stream().collect(Collectors.toUnmodifiableMap(\n-                        Map.Entry::getKey,\n-                        me -> entryBlock.block(me.getValue().stack().stream().map(JavaType::type).toArray(TypeElement[]::new))));\n+        this.blockMap = smta.map(sma ->\n+                sma.entries().stream().collect(Collectors.toUnmodifiableMap(\n+                        StackMapFrameInfo::target,\n+                        smfi -> entryBlock.block(toBlockParams(smfi.stack()))))).orElseGet(Map::of);\n@@ -136,0 +137,25 @@\n+    private List<TypeElement> toBlockParams(List<StackMapFrameInfo.VerificationTypeInfo> vtis) {\n+        ArrayList<TypeElement> params = new ArrayList<>(vtis.size());\n+        for (int i = vtis.size() - 1; i >= 0; i--) {\n+            var vti = vtis.get(i);\n+            switch (vti) {\n+                case ITEM_INTEGER -> params.add(JavaType.INT);\n+                case ITEM_FLOAT -> params.add(JavaType.FLOAT);\n+                case ITEM_DOUBLE -> params.add(JavaType.DOUBLE);\n+                case ITEM_LONG -> params.add(JavaType.LONG);\n+                case ITEM_NULL -> params.add(JavaType.J_L_OBJECT);\n+                case ITEM_UNINITIALIZED_THIS ->\n+                    params.add(JavaType.type(classModel.thisClass().asSymbol()));\n+                case StackMapFrameInfo.ObjectVerificationTypeInfo ovti ->\n+                    params.add(JavaType.type(ovti.classSymbol()));\n+\n+                    \/\/ Unitialized entry (a new object before its constructor is called)\n+                    \/\/ must be skipped from block parameters because they do not exist in code reflection model\n+                case StackMapFrameInfo.UninitializedVerificationTypeInfo _ -> {}\n+                default ->\n+                    throw new IllegalArgumentException(\"Unexpected VTI: \" + vti);\n+            }\n+        }\n+        return params;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"}]}