{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.reflect.code.Block;\n@@ -81,1 +80,1 @@\n-        for (Path p : Files.walk(JRT.getPath(\"modules\/java.base\/java\"))\n+        for (Path p : Files.walk(JRT.getPath(\"modules\/java.base\/\"))\n@@ -96,2 +95,2 @@\n-        \/\/ @@@ There is still several failing cases and a lot of errors\n-        Assert.assertTrue(passed > 33890, String.format(\"\"\"\n+        \/\/ Roundtrip is >90% stable, no exceptions, no verification errors\n+        Assert.assertTrue(passed > 59900 && errorStats.isEmpty(), String.format(\"\"\"\n@@ -118,16 +117,2 @@\n-                    boolean vError = false;\n-                    for (var e : ClassFile.of().verify(firstModel.parent().get())) {\n-                        if (!e.getMessage().contains(\"Illegal call to internal method\")) {\n-                            if (!vError) System.out.println(\"--------------------------------------\");\n-                            System.out.println(e);\n-                            vError = true;\n-                        }\n-                    }\n-                    if (vError) {\n-                        System.out.println(path);\n-                        ClassPrinter.toYaml(originalModel, ClassPrinter.Verbosity.CRITICAL_ATTRIBUTES, System.out::print);\n-                        firstLift.writeTo(System.out);\n-                        ClassPrinter.toYaml(firstModel, ClassPrinter.Verbosity.CRITICAL_ATTRIBUTES, System.out::print);\n-                        System.out.println(\"--------------------------------------\");\n-                        error(\"first verify\", path.toString());\n-                    } else try {\n+                    verify(\"first verify\", firstModel);\n+                    try {\n@@ -137,14 +122,10 @@\n-                            for (var e : ClassFile.of().verify(secondModel.parent().get())) {\n-                                if (!e.getMessage().contains(\"Illegal call to internal method\")) {\n-                                    if (!vError) System.out.println(\"--------------------------------------\");\n-                                    System.out.println(e);\n-                                    vError = true;\n-                                }\n-                            }\n-                            if (vError) {\n-\/\/                                System.out.println(path);\n-\/\/                                ClassPrinter.toYaml(firstModel, ClassPrinter.Verbosity.CRITICAL_ATTRIBUTES, System.out::print);\n-\/\/                                secondLift.writeTo(System.out);\n-\/\/                                ClassPrinter.toYaml(secondModel, ClassPrinter.Verbosity.CRITICAL_ATTRIBUTES, System.out::print);\n-\/\/                                System.out.println(\"--------------------------------------\");\n-                                error(\"second verify\", path.toString());\n+                            verify(\"second verify\", secondModel);\n+                            \/\/ testing only methods passing through\n+                            var firstNormalized = normalize(firstModel);\n+                            var secondNormalized = normalize(secondModel);\n+                            if (!firstNormalized.equals(secondNormalized)) {\n+                                notMatching++;\n+\/\/                                System.out.println(clm.thisClass().asInternalName() + \"::\" + originalModel.methodName().stringValue() + originalModel.methodTypeSymbol().displayDescriptor());\n+\/\/                                printInColumns(firstLift, secondLift);\n+\/\/                                printInColumns(firstNormalized, secondNormalized);\n+\/\/                                System.out.println();\n@@ -152,12 +133,1 @@\n-                                \/\/ testing only methods passing through\n-                                var firstNormalized = normalize(firstModel);\n-                                var secondNormalized = normalize(secondModel);\n-                                if (!firstNormalized.equals(secondNormalized)) {\n-                                    notMatching++;\n-\/\/                                    System.out.println(clm.thisClass().asInternalName() + \"::\" + originalModel.methodName().stringValue() + originalModel.methodTypeSymbol().displayDescriptor());\n-\/\/                                    printInColumns(firstLift, secondLift);\n-\/\/                                    printInColumns(firstNormalized, secondNormalized);\n-\/\/                                    System.out.println();\n-                                } else {\n-                                    passed++;\n-                                }\n+                                passed++;\n@@ -180,28 +150,5 @@\n-\/\/    private static void printBlockGraph(CoreOp.FuncOp func) {\n-\/\/        for (Block b : func.body().blocks()) {\n-\/\/            System.out.println(b.index() + \": \" + switch (b.terminatingOp()) {\n-\/\/                case CoreOp.ReturnOp _ -> \"return\";\n-\/\/                case CoreOp.ThrowOp _ -> \"throw\";\n-\/\/                case CoreOp.BranchOp br -> \"-> \" + br.branch().targetBlock().index();\n-\/\/                case CoreOp.ConditionalBranchOp br -> \"-> \" + br.trueBranch().targetBlock().index() + \", \" + br.falseBranch().targetBlock().index();\n-\/\/                case CoreOp.ExceptionRegionEnter er -> \"try \" + er.start().targetBlock().index() + \" catch \" + er.catchBlocks().stream().map(r -> String.valueOf(r.targetBlock().index())).collect(Collectors.joining(\", \"));\n-\/\/                case CoreOp.ExceptionRegionExit er -> \" -> exit \" + er.regionStart().parentBlock().index() + \" -> \" + er.end().targetBlock().index();\n-\/\/                default -> b.terminatingOp().opName();\n-\/\/            });\n-\/\/        }\n-\/\/    }\n-\n-    private static void printInColumns(CoreOp.FuncOp first, CoreOp.FuncOp second) {\n-        StringWriter fw = new StringWriter();\n-        first.writeTo(fw);\n-        StringWriter sw = new StringWriter();\n-        second.writeTo(sw);\n-        printInColumns(fw.toString().lines().toList(), sw.toString().lines().toList());\n-    }\n-\n-    private static void printInColumns(List<String> first, List<String> second) {\n-        System.out.println(\"-\".repeat(COLUMN_WIDTH ) + \"--+-\" + \"-\".repeat(COLUMN_WIDTH ));\n-        for (int i = 0; i < first.size() || i < second.size(); i++) {\n-            String f = i < first.size() ? first.get(i) : \"\";\n-            String s = i < second.size() ? second.get(i) : \"\";\n-            System.out.println(\" \" + f + (f.length() < COLUMN_WIDTH ? \" \".repeat(COLUMN_WIDTH - f.length()) : \"\") + (f.equals(s) ? \" | \" : \" x \") + s);\n+    private void verify(String category, MethodModel model) {\n+        for (var e : ClassFile.of().verify(model.parent().get())) {\n+            if (!e.getMessage().contains(\"Illegal call to internal method\")) {\n+                error(category, e.getMessage());\n+            }\n@@ -211,0 +158,17 @@\n+\/\/    private static void printInColumns(CoreOp.FuncOp first, CoreOp.FuncOp second) {\n+\/\/        StringWriter fw = new StringWriter();\n+\/\/        first.writeTo(fw);\n+\/\/        StringWriter sw = new StringWriter();\n+\/\/        second.writeTo(sw);\n+\/\/        printInColumns(fw.toString().lines().toList(), sw.toString().lines().toList());\n+\/\/    }\n+\/\/\n+\/\/    private static void printInColumns(List<String> first, List<String> second) {\n+\/\/        System.out.println(\"-\".repeat(COLUMN_WIDTH ) + \"--+-\" + \"-\".repeat(COLUMN_WIDTH ));\n+\/\/        for (int i = 0; i < first.size() || i < second.size(); i++) {\n+\/\/            String f = i < first.size() ? first.get(i) : \"\";\n+\/\/            String s = i < second.size() ? second.get(i) : \"\";\n+\/\/            System.out.println(\" \" + f + (f.length() < COLUMN_WIDTH ? \" \".repeat(COLUMN_WIDTH - f.length()) : \"\") + (f.equals(s) ? \" | \" : \" x \") + s);\n+\/\/        }\n+\/\/    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":38,"deletions":74,"binary":false,"changes":112,"status":"modified"}]}