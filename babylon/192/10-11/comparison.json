{"files":[{"patch":"@@ -468,9 +468,12 @@\n-                Label startLabel = getLabel(start);\n-                Label endLabel = getLabel(end);\n-                for (Block.Reference cbr : erNode.ere.catchBlocks()) {\n-                    List<Block.Parameter> params = cbr.targetBlock().parameters();\n-                    if (!params.isEmpty()) {\n-                        JavaType jt = (JavaType) params.get(0).type();\n-                        cob.exceptionCatch(startLabel, endLabel, getLabel(cbr), jt.toNominalDescriptor());\n-                    } else {\n-                        cob.exceptionCatchAll(startLabel, endLabel, getLabel(cbr));\n+                \/\/ Avoid declaration of empty exception regions\n+                if (!(blocks.get(start).firstOp() instanceof ExceptionRegionExit erEx) || erEx.end().targetBlock().index() != end) {\n+                    Label startLabel = getLabel(start);\n+                    Label endLabel = getLabel(end);\n+                    for (Block.Reference cbr : erNode.ere.catchBlocks()) {\n+                        List<Block.Parameter> params = cbr.targetBlock().parameters();\n+                        if (!params.isEmpty()) {\n+                            JavaType jt = (JavaType) params.get(0).type();\n+                            cob.exceptionCatch(startLabel, endLabel, getLabel(cbr), jt.toNominalDescriptor());\n+                        } else {\n+                            cob.exceptionCatchAll(startLabel, endLabel, getLabel(cbr));\n+                        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -253,0 +253,10 @@\n+                    \/\/ Insert relevant tryEnd blocks\n+                    while (!exceptionRegionStack.isEmpty() && lt.label() == exceptionRegionStack.peek().endLabel()) {\n+                        \/\/ Create exit block with parameters constructed from the stack\n+                        ExceptionRegion er = exceptionRegionStack.pop();\n+                        if (currentBlock != null) {\n+                            Block.Builder next = newBlock();\n+                            op(CoreOp.exceptionRegionExit(er.enter(), successor(next)));\n+                            moveTo(next);\n+                        }\n+                    }\n@@ -254,0 +264,1 @@\n+\n@@ -263,0 +274,1 @@\n+\n@@ -265,1 +277,1 @@\n-                        if (lt.label() == ec.tryStart()) {\n+                        if (lt.label() == ec.tryStart() && ec.tryStart() != ec.tryEnd()) {\n@@ -276,8 +288,0 @@\n-                    \/\/ Insert relevant tryEnd blocks\n-                    while (!exceptionRegionStack.isEmpty() && lt.label() == exceptionRegionStack.peek().endLabel()) {\n-                        \/\/ Create exit block with parameters constructed from the stack\n-                        ExceptionRegion er = exceptionRegionStack.pop();\n-                        next = newBlock();\n-                        op(CoreOp.exceptionRegionExit(er.enter(), successor(next)));\n-                        moveTo(next);\n-                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -515,0 +515,9 @@\n+    @CodeReflection\n+    static int excHandlerFollowingSplitTable(boolean b) {\n+        try {\n+            if (b) return 1;\n+            else throw new Exception();\n+        } catch (Exception ex) {}\n+        return 2;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}