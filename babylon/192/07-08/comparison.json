{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.lang.classfile.attribute.CodeAttribute;\n@@ -42,0 +43,1 @@\n+import java.lang.constant.ConstantDesc;\n@@ -43,0 +45,5 @@\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.DynamicConstantDesc;\n+import java.lang.constant.MethodTypeDesc;\n+import java.lang.invoke.CallSite;\n+import java.lang.invoke.MethodHandle;\n@@ -44,1 +51,0 @@\n-\n@@ -51,1 +57,0 @@\n-import java.lang.reflect.code.type.MethodRef;\n@@ -54,0 +59,3 @@\n+import java.lang.reflect.code.type.MethodRef;\n+import java.lang.reflect.code.type.PrimitiveType;\n+import java.lang.reflect.code.type.VarType;\n@@ -56,0 +64,1 @@\n+import java.util.Arrays;\n@@ -61,0 +70,1 @@\n+import java.util.function.BiFunction;\n@@ -63,13 +73,0 @@\n-import static java.lang.classfile.attribute.StackMapFrameInfo.SimpleVerificationTypeInfo.*;\n-import java.lang.constant.ConstantDesc;\n-import static java.lang.constant.ConstantDescs.CD_void;\n-import java.lang.constant.DirectMethodHandleDesc;\n-import java.lang.constant.DynamicConstantDesc;\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.invoke.CallSite;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.reflect.code.op.CoreOp.LambdaOp;\n-import java.lang.reflect.code.type.PrimitiveType;\n-import java.lang.reflect.code.type.VarType;\n-import java.util.Arrays;\n-import java.util.function.BiFunction;\n@@ -78,0 +75,1 @@\n+import static java.lang.classfile.attribute.StackMapFrameInfo.SimpleVerificationTypeInfo.*;\n@@ -118,1 +116,5 @@\n-        this.exceptionHandlers = codeModel.exceptionHandlers();\n+        var res = (CodeAttribute)codeModel;\n+        \/\/ Filter out exception handlers overlapping with try blocks\n+        this.exceptionHandlers = codeModel.exceptionHandlers().stream().filter(\n+                eh -> res.labelToBci(eh.handler()) >= res.labelToBci(eh.tryEnd())\n+                   || res.labelToBci(eh.handler()) < res.labelToBci(eh.tryStart())).toList();\n@@ -468,3 +470,3 @@\n-                        LambdaOp.Builder lambda = CoreOp.lambda(currentBlock.parentBody(),\n-                                                                lambdaFunc,\n-                                                                JavaType.type(inst.typeSymbol().returnType()));\n+                        CoreOp.LambdaOp.Builder lambda = CoreOp.lambda(currentBlock.parentBody(),\n+                                                                       lambdaFunc,\n+                                                                       JavaType.type(inst.typeSymbol().returnType()));\n@@ -736,1 +738,1 @@\n-                            CoreOp.invoke(FIND_CONSTRUCTOR, lookup, owner, liftConstant(invDesc.changeReturnType(CD_void)));\n+                            CoreOp.invoke(FIND_CONSTRUCTOR, lookup, owner, liftConstant(invDesc.changeReturnType(ConstantDescs.CD_Void)));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        Assert.assertTrue(passed > 33350, String.format(\"\"\"\n+        Assert.assertTrue(passed > 33670, String.format(\"\"\"\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}