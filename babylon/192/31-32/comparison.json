{"files":[{"patch":"@@ -355,0 +355,1 @@\n+        List<Value> values;\n@@ -363,1 +364,1 @@\n-                !op.capturedValues().isEmpty() && op.capturedValues().getFirst() == opr;\n+                !(values = op.capturedValues()).isEmpty() && values.getFirst() == opr;\n@@ -370,0 +371,3 @@\n+            \/\/ Unconditional branch first target block argument\n+            case BranchOp op ->\n+                !(values = op.branch().arguments()).isEmpty() && values.getFirst() == opr;\n@@ -372,1 +376,1 @@\n-                !nextOp.operands().isEmpty() && nextOp.operands().getFirst() == opr;\n+                !(values = nextOp.operands()).isEmpty() && values.getFirst() == opr;\n@@ -936,10 +940,1 @@\n-    private static boolean inBlockArgs(Op.Result res) {\n-        \/\/ Check if used in successor\n-        for (Block.Reference s : res.declaringBlock().successors()) {\n-            if (s.arguments().contains(res)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n+    \/\/ Checks if the Op.Result is used more than once in operands and block arguments\n@@ -947,4 +942,6 @@\n-        Set<Op.Result> uses = res.uses();\n-        return uses.size() > 1\n-            || uses.size() == 1 && uses.iterator().next().op().operands().stream().filter(o -> o == res).count() > 1\n-            || inBlockArgs(res);\n+        return res.uses().stream().flatMap(u ->\n+                Stream.concat(\n+                        u.op().operands().stream(),\n+                        u.op().successors().stream()\n+                                .flatMap(r -> r.arguments().stream())))\n+                .filter(res::equals).limit(2).count() > 1;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"}]}