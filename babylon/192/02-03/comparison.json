{"files":[{"patch":"@@ -182,1 +182,1 @@\n-                    new BytecodeGenerator(lookup, className, capturedValues, new Liveness(iop),\n+                    new BytecodeGenerator(lookup, className, capturedValues, TypeKind.from(mtd.returnType()), new Liveness(iop),\n@@ -192,0 +192,1 @@\n+    private final TypeKind returnType;\n@@ -206,0 +207,1 @@\n+                              TypeKind returnType,\n@@ -214,0 +216,1 @@\n+        this.returnType = returnType;\n@@ -885,4 +888,1 @@\n-                    Value a = op.returnValue();\n-                    if (a == null) {\n-                        cob.return_();\n-                    } else {\n+                    if (returnType != TypeKind.VoidType) {\n@@ -890,1 +890,1 @@\n-                        cob.return_(toTypeKind(a.type()));\n+                        \/\/ @@@ box, unbox, cast here ?\n@@ -892,0 +892,1 @@\n+                    cob.return_(returnType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-                                eb.op(CoreOp._return(eb.op(CoreOp.invoke(\n+                                Op.Result ret = eb.op(CoreOp.invoke(\n@@ -468,1 +468,2 @@\n-                                        Stream.concat(Arrays.stream(capturedValues), eb.parameters().stream()).toArray(Value[]::new)))));\n+                                        Stream.concat(Arrays.stream(capturedValues), eb.parameters().stream()).toArray(Value[]::new)));\n+                                eb.op(ret.type().equals(JavaType.VOID) ? CoreOp._return() : CoreOp._return(ret));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.util.function.Consumer;\n@@ -429,0 +430,15 @@\n+    static void consume(boolean b, Consumer<Object> requireNonNull) {\n+        if (b) {\n+            requireNonNull.accept(new Object());\n+        } else try {\n+            requireNonNull.accept(null);\n+            throw new AssertionError(\"Expectend NPE\");\n+        } catch (NullPointerException expected) {\n+        }\n+    }\n+\n+    @CodeReflection\n+    static void nullReturningMethodHandle(boolean b) {\n+        consume(b, Objects::requireNonNull);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}