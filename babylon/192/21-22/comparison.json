{"files":[{"patch":"@@ -104,1 +104,1 @@\n-    private final List<ExceptionCatch> exceptionHandlers;\n+    private final List<ExcRegion> exceptionRegions;\n@@ -110,1 +110,1 @@\n-    private final ArrayDeque<ExceptionRegion> exceptionRegionStack;\n+    private final ArrayDeque<ExceptionEntry> exceptionRegionStack;\n@@ -119,1 +119,1 @@\n-        this.exceptionHandlers = extractExceptionHandlers(codeAttribtue);\n+        this.exceptionRegions = extractExceptionRegions(codeAttribtue);\n@@ -138,1 +138,1 @@\n-    private static List<ExceptionCatch> extractExceptionHandlers(CodeAttribute codeAttribute) {\n+    private static List<ExcRegion> extractExceptionRegions(CodeAttribute codeAttribute) {\n@@ -176,2 +176,5 @@\n-        \/\/ Filter and split exception handlers\n-        var handlers = codeAttribute.exceptionHandlers();\n+\n+        \/\/ Filter and split exception regions\n+        var regions = codeAttribute.exceptionHandlers().stream()\n+                .filter(ec -> ec.tryStart() != ec.tryEnd() && ec.tryStart() != ec.handler())\n+                .map(ec -> new ExcRegion(ec.tryStart(), ec.tryEnd(), ec.handler())).distinct().toList();\n@@ -181,5 +184,5 @@\n-            var newHandlers = new ArrayList<ExceptionCatch>();\n-            for (var eh : handlers) {\n-                final int tryStart = codeAttribute.labelToBci(eh.tryStart());\n-                final int tryEnd = codeAttribute.labelToBci(eh.tryEnd());\n-                final int handler = codeAttribute.labelToBci(eh.handler());\n+            var newRegions = new ArrayList<ExcRegion>();\n+            for (var reg : regions) {\n+                final int startBci = codeAttribute.labelToBci(reg.startLabel());\n+                final int endBci = codeAttribute.labelToBci(reg.endLabel());\n+                final int handlerBci = codeAttribute.labelToBci(reg.handlerLabel());\n@@ -187,3 +190,3 @@\n-                if (handler >= tryEnd || handler < tryStart) {\n-                    Label startLabel = eh.tryStart();\n-                    int breakIndex = tryStart;\n+                if (handlerBci >= endBci || handlerBci < startBci) {\n+                    Label startLabel = reg.startLabel();\n+                    int breakIndex = startBci;\n@@ -191,1 +194,1 @@\n-                    while ((breakIndex = targetBcis.nextSetBit(breakIndex + 1)) >= 0 &&  breakIndex < tryEnd) {\n+                    while ((breakIndex = targetBcis.nextSetBit(breakIndex + 1)) >= 0 &&  breakIndex < endBci) {\n@@ -194,1 +197,1 @@\n-                        if (jt.sourceBcis.stream().anyMatch(sourceBci -> sourceBci < tryStart || sourceBci > tryEnd)) {\n+                        if (jt.sourceBcis.stream().anyMatch(sourceBci -> sourceBci < startBci || sourceBci > endBci)) {\n@@ -196,1 +199,1 @@\n-                            newHandlers.add(ExceptionCatch.of(eh.handler(), startLabel, breakLabel, eh.catchType()));\n+                            newRegions.add(new ExcRegion(startLabel, breakLabel, reg.handlerLabel()));\n@@ -201,1 +204,1 @@\n-                    newHandlers.add(ExceptionCatch.of(eh.handler(), startLabel, eh.tryEnd(), eh.catchType()));\n+                    newRegions.add(new ExcRegion(startLabel, reg.endLabel(), reg.handlerLabel()));\n@@ -204,1 +207,1 @@\n-            handlers = newHandlers;\n+            regions = newRegions;\n@@ -206,1 +209,1 @@\n-        return handlers;\n+        return regions;\n@@ -295,1 +298,2 @@\n-    record ExceptionRegion(Op.Result enter, Label startLabel, Label endLabel) {}\n+    record ExcRegion(Label startLabel, Label endLabel, Label handlerLabel) {}\n+    record ExceptionEntry(Op.Result enter, ExcRegion region) {}\n@@ -299,1 +303,1 @@\n-        for (ExceptionRegion er : exceptionRegionStack) {\n+        for (ExceptionEntry ee : exceptionRegionStack) {\n@@ -301,1 +305,1 @@\n-            if (targetBci < codeAttribtue.labelToBci(er.startLabel()) || targetBci > codeAttribtue.labelToBci(er.endLabel())) {\n+            if (targetBci < codeAttribtue.labelToBci(ee.region.startLabel) || targetBci >= codeAttribtue.labelToBci(ee.region.endLabel)) {\n@@ -304,1 +308,1 @@\n-                next.op(CoreOp.exceptionRegionExit(er.enter(), successor(targetBlock)));\n+                next.op(CoreOp.exceptionRegionExit(ee.enter(), targetBlock.successor(next.parameters())));\n@@ -321,1 +325,1 @@\n-                    while (!exceptionRegionStack.isEmpty() && lt.label() == exceptionRegionStack.peek().endLabel()) {\n+                    while (!exceptionRegionStack.isEmpty() && lt.label() == exceptionRegionStack.peek().region.endLabel) {\n@@ -323,1 +327,1 @@\n-                        ExceptionRegion er = exceptionRegionStack.pop();\n+                        ExceptionEntry er = exceptionRegionStack.pop();\n@@ -343,3 +347,2 @@\n-                    for (ExceptionCatch ec : exceptionHandlers.reversed()) {\n-                        if (lt.label() == ec.tryStart() && ec.tryStart() != ec.tryEnd()) {\n-                            Block.Builder handler = blockMap.get(ec.handler());\n+                    for (ExcRegion reg : exceptionRegions.reversed()) {\n+                        if (lt.label() == reg.startLabel()) {\n@@ -348,1 +351,1 @@\n-                            Op ere = CoreOp.exceptionRegionEnter(successor(next), handler.successor());\n+                            Op ere = CoreOp.exceptionRegionEnter(successor(next), insertExceptionRegionExits(reg.handlerLabel()).successor());\n@@ -350,2 +353,2 @@\n-                            \/\/ Push ExceptionRegion on stack\n-                            exceptionRegionStack.push(new ExceptionRegion(ere.result(), ec.tryStart(), ec.tryEnd()));\n+                            \/\/ Push ExceptionEntry on stack\n+                            exceptionRegionStack.push(new ExceptionEntry(ere.result(), reg));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-        Assert.assertTrue(passed > 33750, String.format(\"\"\"\n+        Assert.assertTrue(passed > 33890, String.format(\"\"\"\n@@ -133,2 +133,2 @@\n-                        } catch (Exception e) {\n-                            error(\"second lower\", e);\n+                        } catch (Throwable t) {\n+                            error(\"second lower\", t);\n@@ -136,2 +136,2 @@\n-                    } catch (Exception e) {\n-                        error(\"second lift\", e);\n+                    } catch (Throwable t) {\n+                        error(\"second lift\", t);\n@@ -139,2 +139,2 @@\n-                } catch (Exception e) {\n-                    error(\"first lower\", e);\n+                } catch (Throwable t) {\n+                    error(\"first lower\", t);\n@@ -142,2 +142,2 @@\n-            } catch (Exception e) {\n-                error(\"first lift\", e);\n+            } catch (Throwable t) {\n+                error(\"first lift\", t);\n@@ -250,1 +250,1 @@\n-    private void error(String category, Exception e) {\n+    private void error(String category, Throwable t) {\n@@ -252,1 +252,1 @@\n-        e.printStackTrace(new PrintWriter(sw));\n+        t.printStackTrace(new PrintWriter(sw));\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}