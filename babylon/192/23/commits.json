[{"commit":{"message":"fixed generation of multi-catch exception regions"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"8c87a825587049752666d779ef92bd12b5a6cf35"},{"commit":{"message":"BytecodeLKift fixed insertion of exception region exits before handler blocks in nested try\/catch\nand de-duplicated exception regions"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"4f6ed2493cc6cf1d704873d0b0a2fe2ea4a2b6b3"},{"commit":{"message":"fixed lifting of CONDY with vararg BSM"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"55c4108ccb1619f8582164154ef445faf3c9d8d8"},{"commit":{"message":"Removing catch blocks from dominance frontier in SlotSSA"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotSSA.java"}],"sha":"cfda3b51e2d3b026c314fb17863fc3a5e465d054"},{"commit":{"message":"SlotSSA modified to avoid adding block parameters to catch blocks"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotSSA.java"}],"sha":"88c5550609a6533db7b302fe2ad2cb7453869481"},{"commit":{"message":"fixed BytecodeGenerator NPE when result is used twice in one operands\n+ test"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"26073d96599cef53b9542fedc408235f890ef127"},{"commit":{"message":"Do not cache class constants in BytecodeLift"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"26b38f3a7443ef97fa6bb52f7620386d2635f339"},{"commit":{"message":"fixed BytecodeLift::extractExceptionHandlers"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"f19605a27a4d568e8cb11a15bd8abf9bc222bebf"},{"commit":{"message":"fixed INDY lifting of BSMs with vararg parameter"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"30790163802062ac82762ac3122406bbd5d628d0"},{"commit":{"message":"fixed LshlOp generation"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"}],"sha":"6a50b0e6a4b024d414b0e4bf06e354aa090d2025"},{"commit":{"message":"Implemented BytecodeLift::extractExceptionHandlers to filter and split exception handlers by each detected external entry\n+ added TestBytecode::finallyWithLoop test"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"4983f05fcb456460500594e94bb9adcaa1d3f652"},{"commit":{"message":"fixed generation of exception regions with implicit exits only"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"401b4380040fdda5ebaeabf59599f2d365d7a08d"},{"commit":{"message":"Fixd lifting of split exception table (with internal transitions) imediatelly followed by handler\n+ avoided lifting and generation of empty exception regions"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"c1ac080ee205e8b8a2d4d7da7bda8a31aa48e9bc"},{"commit":{"message":"BytecodeLift detects branches out of the exception region and inserts ExceptionRegionExits"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"0140e0731457400ee577324bb6d595f37cdb4738"},{"commit":{"message":"using trusted lookup in TestSmallCorpus"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"0bd79b474324d75cadddb54ad43d0a512fd80efc"},{"commit":{"message":"BytecodeLift filters out exception handlers overlapping with try blocks"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"44762197b9a8ee453305c255123ec99921c67e25"},{"commit":{"message":"fixed ConstantInstruction type detection in LocalsTypeMapper"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"40e25729e1d5bc55ae3566a8f0644d43c1d1963d"},{"commit":{"message":"fixed lifting of IF_ACMPEQ and IF_ACMPNE"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"557fd9eb5432af5cece5110e7adabf167a85a294"},{"commit":{"message":"fixed unitialized stack maps objects in block parameters"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"ea75652421c092e10801ae8d76e5c99430f840fc"},{"commit":{"message":"TestSmallCorpus progress"},"files":[{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"81de23349c0a6930ee483229a114acfff4afd397"},{"commit":{"message":"corrected stack to block parametrs conversion"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"}],"sha":"12513ec66d5d8c6e94845cd6bc3afcd7871099c1"},{"commit":{"message":"fixed SlotSSA to avoid explicit cast of primitive types"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/SlotSSA.java"}],"sha":"2a8f6f213e3d340ef298866f13e3b97968cb28a6"},{"commit":{"message":"fixed lifting and generation of non-void returning MH used in void returning INDY calls"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"e2c90bec02383a8d934250389979512632b60ded"},{"commit":{"message":"block parameters constructions from fixed stack maps"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"}],"sha":"8bc8d2fd8bb38a7de1c831d4c09b8ae1e006633e"},{"commit":{"message":"LocalTypeMapper performs iterative correction of int stack map frame entries to support byte, boolean, short and char types"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestSmallCorpus.java"}],"sha":"edf96390a822051c69ad7f66abfa07afbc801692"},{"commit":{"message":"Merge branch 'code-reflection' into bytecode-round-9"},"files":[],"sha":"24155587cc128cd486aa29e8785505f034b2c15b"},{"commit":{"message":"removed obsolete BytecodeGenerator::conversion"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"}],"sha":"44faf0123a5fa7516d5b28dac22934252af6dced"},{"commit":{"message":"removed debug output"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"}],"sha":"0c9f5865da50adb8fa6831f68863ea3fa5d84f81"},{"commit":{"message":"BytecodeLift fixes of code branching with deep stack and unitialized frame objects"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftCustomBytecode.java"}],"sha":"e08395f3bb4839d31cf2e9f20f5f208d08099693"},{"commit":{"message":"fixed LocalsTypeMapper to track uninitialized types"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"}],"sha":"807a5c9337ff8617361db4165d2ab3ef061f9af1"},{"commit":{"message":"fixed LocalsTypeMapper and lambdas lifting"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/LocalsTypeMapper.java"}],"sha":"f5eaa8f3f5ca630ed6243428cc30f8bfc73d07f8"},{"commit":{"message":"fixed generating of non-String concats"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"}],"sha":"d32912f097e67032869b73432cfd1e083d5e42cb"},{"commit":{"message":"lifting concats"},"files":[{"filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeLift.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestBytecode.java"},{"filename":"test\/jdk\/java\/lang\/reflect\/code\/bytecode\/TestLiftCustomBytecode.java"}],"sha":"eea8b31e87cbc47732161fb8f2c97f54b18f3408"}]