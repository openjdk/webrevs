{"files":[{"patch":"@@ -5,1 +5,1 @@\n-To use HAT you will need to clone and build the  `babylon` (JDK23+Babylon) project or of course your fork of the babylon project (say `babylon-myfork`)\n+To use HAT you will need to clone and build the  `babylon` (JDK24+Babylon) project or of course your fork of the babylon project (say `babylon-myfork`)\n@@ -11,1 +11,1 @@\n-We will walk through the initial steps to clone and build babylon and then focus on the steps for building HAT.\n+## Building Babylon\n@@ -13,59 +13,1 @@\n-If you follow these steps, you should not have to change any of the maven or cmake build files.\n-\n-We suggest starting with a 'github' dir and a dir where we will need to install jdk22\n-\n-```\n-export GITHUB=${HOME}\/github\n-mkdir -p ${GITHUB}\n-mkdir -p ${HOME}\/java\n-```\n-\n-We need an existing jdk22 build to build babylon. These steps are slightly different for Mac OSX and Ubuntu\n-\n-### Ubuntu\n-\n-```\n-cd ${HOME}\/java\n-wget https:\/\/download.java.net\/java\/GA\/jdk22.0.1\/c7ec1332f7bb44aeba2eb341ae18aca4\/8\/GPL\/openjdk-22.0.1_linux-x64_bin.tar.gz\n-export BOOT_JDK=${HOME}\/java\/jdk-22.0.1.jdk\n-```\n-\n-### Mac OSX Aarch64\n-```\n-cd ${HOME}\/java\n-wget https:\/\/download.java.net\/java\/GA\/jdk22.0.1\/c7ec1332f7bb44aeba2eb341ae18aca4\/8\/GPL\/openjdk-22.0.1_linux-x64_bin.tar.gz\n-export BOOT_JDK=${HOME}\/java\/jdk-22.0.1.jdk\/Contents\/Home\n-```\n-\n-From now on the Mac and Ubuntu steps are the same.\n-\n-If you have your own fork of the babylon repo use it rather that babylon.git below.\n-\n-```\n-cd ${GITHUB}\n-git clone https:\/\/github.com\/openjdk\/babylon.git\n-cd ${GITHUB}\/babylon\n-bash configure  --with-boot-jdk=${BOOT_JDK}\n-make clean\n-make images\n-```\n-If you have never built JDK before you may find that the 'configure' step will suggest packages to install.\n-\n-I usually just take the suggestions and try running `bash configure` again.\n-\n-Eventually you will have a successful babylon build.\n-\n-You now should have\n-\n-```\n-github\n-├── babylon (or babylon-my-fork)\n-│   ├── build\n-│   │   └── XXXX-server-release\n-│   │       ├── jdk\n-│   │       └── ...\n-│   ├── hat\n-│   │   ├── README.md\n-\n-```\n-Where XXXX is either linux-x64 or macosx-aarch64 and contains your build of babylon JDK.\n+[See](docs\/hat-01-02-building-babylon.md)\n@@ -75,34 +17,1 @@\n-HAT uses maven and cmake.\n-\n-Maven controls the build but delegates to cmake to build the native code for the various backends.\n-\n-To build HAT we need to ensure that `JAVA_HOME` is set up to point to the babylon build (that we just created) and that `${JAVA_HOME}\/bin` is in your PATH.\n-\n-The `env.bash` shell script can be sourced (dot included) in your shell to set up these vars.\n-\n-It should detect the arch type and select the correct relative parent dir and inject that dir in your PATH.\n-\n-```bash\n-cd hat\n-. .\/env.bash\n-echo ${JAVA_HOME}\n-\/Users\/ME\/github\/babylon\/hat\/..\/build\/macosx-aarch64-server-release\/jdk\n-echo ${PATH}\n-\/Users\/ME\/github\/babylon\/hat\/..\/build\/macosx-aarch64-server-release\/jdk\/bin:\/usr\/local\/bin:......\n-```\n-\n-Now we should be able to use maven to build, it will do its magic and place all jars and libs in `maven-build` dir\n-\n-```\n-cd hat\n-. .\/env.bash\n-mvn clean  compile jar:jar install\n-ls maven-build\n-hat-1.0.jar                     hat-example-heal-1.0.jar        libptx_backend.dylib\n-hat-backend-cuda-1.0.jar        hat-example-mandel-1.0.jar      libspirv_backend.dylib\n-hat-backend-mock-1.0.jar        hat-example-squares-1.0.jar     mock_info\n-hat-backend-opencl-1.0.jar      hat-example-view-1.0.jar        opencl_info\n-hat-backend-ptx-1.0.jar         hat-example-violajones-1.0.jar  ptx_info\n-hat-backend-spirv-1.0.jar       libmock_backend.dylib           spirv_info\n-hat-example-experiments-1.0.jar libopencl_backend.dylib\n-```\n+HAT uses both maven and cmake.\n@@ -110,9 +19,1 @@\n-To run an example\n-```\n-${JAVA_HOME}\/bin\/java \\\n-   --enable-preview --enable-native-access=ALL-UNNAMED \\\n-   --class-path maven-build\/hat-1.0.jar:maven-build\/hat-example-mandel-1.0.jar:maven-build\/hat-backend-opencl-1.0.jar \\\n-   --add-exports=java.base\/jdk.internal=ALL-UNNAMED \\\n-   -Djava.library.path=maven-build\\\n-   mandel.MandelCompute\n-```\n+Maven controls the build but delegates to cmake for native artifacts (such as various backends).\n@@ -120,1 +21,1 @@\n-The `hatrun.bash` script simplifies this somewhat\n+[See](docs\/hat-01-03-building-hat.md)\n@@ -122,3 +23,0 @@\n-```\n-bash hatrun.bash opencl mandel MandelCompute\n-```\n@@ -126,1 +24,1 @@\n-### Intellij and Clion\n+## Intellij and Clion\n","filename":"hat\/README.md","additions":7,"deletions":109,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-00.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-01-01-project-layout.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-  * [Maven and CMake](hat-01-03-maven-cmake.md)\n+  * [Building HAT](hat-01-03-building-hat.md)\n@@ -25,0 +25,4 @@\n+If you follow the steps below to build babylon, you should not have to\n+change any of the maven or cmake build files for hat.\n+\n+\n@@ -34,1 +38,0 @@\n-### Clone Babylon from github\n@@ -36,1 +39,23 @@\n-[https:\/\/github.com\/opendjk\/babylon.git](https:\/\/github.com\/opendjk\/babylon.git)\n+If you don't have jdk22, these steps are slightly different for Mac OSX and Ubuntu\n+\n+### Ubuntu\n+\n+```\n+cd ${HOME}\/java\n+wget https:\/\/download.java.net\/java\/GA\/jdk22.0.1\/c7ec1332f7bb44aeba2eb341ae18aca4\/8\/GPL\/openjdk-22.0.1_linux-x64_bin.tar.gz\n+export BOOT_JDK=${HOME}\/java\/jdk-22.0.1.jdk\n+```\n+\n+### Mac OSX Aarch64\n+```\n+cd ${HOME}\/java\n+wget https:\/\/download.java.net\/java\/GA\/jdk22.0.1\/c7ec1332f7bb44aeba2eb341ae18aca4\/8\/GPL\/openjdk-22.0.1_linux-x64_bin.tar.gz\n+export BOOT_JDK=${HOME}\/java\/jdk-22.0.1.jdk\/Contents\/Home\n+```\n+\n+### Create a suitable github dir\n+\n+We suggest starting with a 'github' dir where we will install babylon, hat, jtreg and\n+other hat dependencies\n+\n+The HAT maven build will assume that `${GITHUB}` -> `${HOME}\/github`\n@@ -41,0 +66,8 @@\n+mkdir -p ${HOME}\/java\n+```\n+\n+### Clone Babylon from github\n+\n+[https:\/\/github.com\/opendjk\/babylon.git](https:\/\/github.com\/opendjk\/babylon.git)\n+\n+```bash\n@@ -46,1 +79,1 @@\n-In order to run openjdk tests we will need to build `jtreg`\n+In order to run openjdk tests we will need to get and build `jtreg`\n@@ -53,2 +86,7 @@\n-export JTREG=${GITHUB}\/jtreg\n-cd ${JTREG}\n+```\n+\n+We will build it now using our `BOOT_JDK`\n+\n+```bash\n+export JTREG_HOME=${GITHUB}\/jtreg\n+cd ${JTREG_HOME}\n@@ -56,0 +94,1 @@\n+export JTREG=${JTREG_HOME}\/build\/images\/jtreg\n@@ -57,0 +96,1 @@\n+\n@@ -60,0 +100,2 @@\n+cd ${GITHUB}\n+git clone https:\/\/github.com\/openjdk\/babylon.git\n@@ -61,1 +103,9 @@\n-bash configure  --with-boot-jdk=${BOOT_JDK} --with-jtreg=${JTREG}\/build\/images\/jtreg\n+bash configure  --with-boot-jdk=${BOOT_JDK} --with-jtreg=${JTREG}\n+```\n+If you have never built JDK before you may find that the 'configure'\n+step will suggest packages to install.\n+\n+I usually just keep running `bash configure` and take suggestions until I get a successful babylon build.\n+\n+You now should have\n+\n@@ -63,3 +113,8 @@\n-On your first build configure might exit and suggest installing other\n-dependencies.  Generally I suggest just taking its recommendations and\n-restarting configure\n+github\n+├── babylon\n+│   ├── build\n+│   │   └── XXXX-server-release\n+│   │       ├── jdk\n+│   │       └── ...\n+│   ├── hat\n+│   │   ├── ...\n@@ -67,1 +122,2 @@\n-Eventually we should complete and are ready to build\n+```\n+Where XXXX is either linux-x64 or macosx-aarch64 and contains your build of babylon JDK.\n@@ -69,1 +125,1 @@\n-### Build\n+### Build Babylon\n@@ -78,1 +134,1 @@\n-If we included jtreg above we can run the `babylon` tests using\n+If we included jtreg above we can run the `babylon` code reflection tests using\n@@ -99,0 +155,2 @@\n+\n+[Next Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-01-02-building-babylon.md","additions":71,"deletions":13,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+# Building HAT\n+\n+----\n+\n+* [Contents](hat-00.md)\n+* House Keeping\n+    * [Project Layout](hat-01-01-project-layout.md)\n+    * [Building Babylon](hat-01-02-building-babylon.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n+* Programming Model\n+    * [Programming Model](hat-03-programming-model.md)\n+* Interface Mapping\n+    * [Interface Mapping Overview](hat-04-01-interface-mapping.md)\n+    * [Cascade Interface Mapping](hat-04-02-cascade-interface-mapping.md)\n+* Implementation Detail\n+    * [Walkthrough Of Accelerator.compute()](hat-accelerator-compute.md)\n+\n+---\n+\n+# Building HAT\n+\n+HAT uses both maven and cmake.\n+\n+Maven controls the build but delegates to cmake for native artifacts (such as various backends).\n+\n+\n+## Setting environment variables JAVA_HOME and PATH\n+\n+To build HAT we need to ensure that `JAVA_HOME` is set\n+to point to our babylon jdk (the one we built [here](hat-01-02-building-babylon.md))\n+\n+It will simplify our tasks going forward if we add `${JAVA_HOME}\/bin` to our PATH (before any other JAVA installs).\n+\n+The `env.bash` shell script can be sourced (dot included) in your shell to set JAVA_HOME and PATH\n+\n+It should detect the arch type (AARCH64 or X86_46) and select the correct relative parent dir and inject that dir in your PATH.\n+\n+```bash\n+cd hat\n+. .\/env.bash\n+echo ${JAVA_HOME}\n+\/Users\/ME\/github\/babylon\/hat\/..\/build\/macosx-aarch64-server-release\/jdk\n+echo ${PATH}\n+\/Users\/ME\/github\/babylon\/hat\/..\/build\/macosx-aarch64-server-release\/jdk\/bin:\/usr\/local\/bin:......\n+```\n+\n+## Root level maven pom.xml properties\n+\n+If you followed the instructions for building babylon your `pom.xml`\n+properties should look like this, and should not need changing\n+\n+```xml\n+<project>\n+    <!-- yada -->\n+    <properties>\n+        <babylon.repo.name>babylon<\/babylon.repo.name>  <!--replace with your fork name -->\n+        <project.build.sourceEncoding>UTF-8<\/project.build.sourceEncoding>\n+        <maven.compiler.source>24<\/maven.compiler.source>\n+        <maven.compiler.target>24<\/maven.compiler.target>\n+        <github.dir>${env.HOME}\/github<\/github.dir>\n+        <beehive.spirv.toolkit.dir>${github.dir}\/beehive-spirv-toolkit\/<\/beehive.spirv.toolkit.dir>\n+        <babylon.dir>${github.dir}\/${babylon.repo.name}<\/babylon.dir>\n+        <hat.dir>${babylon.dir}\/hat<\/hat.dir>\n+        <hat.target>${hat.dir}\/maven-build<\/hat.target>\n+    <\/properties>\n+    <!-- yada -->\n+<\/project>\n+```\n+If say your github dir (the one containing babylon) is somewhere other than `${HOME}\/github` then make sure that `github.dir` is\n+set accordingly.\n+\n+```xml\n+    <properties>\n+        <!-- ... -->\n+        <github.dir>\/full\/path\/to\/github<\/github.dir>\n+        <!-- ... -->\n+    <\/properties>\n+```\n+\n+## Sanity checking your env and root pom.xml\n+\n+After sourcing `env.bash` or making changes to `pom.xml` we can\n+sanity check our setup by running\n+\n+```bash\n+cd hat\n+java sanity.java\n+```\n+\n+This will check that your `PATH` includes your babylon JDK's bin dir, and will parse the top level `pom.xml` to ensure that that\n+the properties are pointing to `sane` values.\n+\n+## Building with maven\n+\n+Now we should be able to use maven to build, if successful maven will place all jars and libs in a newly created `maven-build` dir in your top level hat dir.\n+\n+```bash\n+cd hat\n+. .\/env.bash\n+mvn clean  compile jar:jar install\n+ls maven-build\n+hat-1.0.jar                     hat-example-heal-1.0.jar        libptx_backend.dylib\n+hat-backend-cuda-1.0.jar        hat-example-mandel-1.0.jar      libspirv_backend.dylib\n+hat-backend-mock-1.0.jar        hat-example-squares-1.0.jar     mock_info\n+hat-backend-opencl-1.0.jar      hat-example-view-1.0.jar        opencl_info\n+hat-backend-ptx-1.0.jar         hat-example-violajones-1.0.jar  ptx_info\n+hat-backend-spirv-1.0.jar       libmock_backend.dylib           spirv_info\n+hat-example-experiments-1.0.jar libopencl_backend.dylib\n+```\n+\n+The provided `build.sh` script contains the minimal maven commandline\n+\n+```bash\n+bash build.sh\n+```\n+\n+## Running an example\n+\n+To run an example we should be able to use the maven artifacts in `maven-build`\n+\n+```bash\n+${JAVA_HOME}\/bin\/java \\\n+   --enable-preview --enable-native-access=ALL-UNNAMED \\\n+   --class-path maven-build\/hat-1.0.jar:maven-build\/hat-example-mandel-1.0.jar:maven-build\/hat-backend-opencl-1.0.jar \\\n+   --add-exports=java.base\/jdk.internal=ALL-UNNAMED \\\n+   -Djava.library.path=maven-build\\\n+   mandel.Main\n+```\n+\n+The provided `hatrun.bash` script simplifies this somewhat, we just need to pass the backend name `opencl` and the package name `mandel`\n+(all examples are assumed to be in `packagename\/Main.java`\n+\n+```bash\n+bash hatrun.bash opencl mandel\n+```\n","filename":"hat\/docs\/hat-01-03-building-hat.md","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -1,35 +0,0 @@\n-\n-# Building HAT\n-\n-----\n-\n-* [Contents](hat-00.md)\n-* House Keeping\n-    * [Project Layout](hat-01-01-project-layout.md)\n-    * [Building Babylon](hat-01-02-building-babylon.md)\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n-* Programming Model\n-    * [Programming Model](hat-03-programming-model.md)\n-* Interface Mapping\n-    * [Interface Mapping Overview](hat-04-01-interface-mapping.md)\n-    * [Cascade Interface Mapping](hat-04-02-cascade-interface-mapping.md)\n-* Implementation Detail\n-    * [Walkthrough Of Accelerator.compute()](hat-accelerator-compute.md)\n-\n----\n-\n-# Building HAT\n-\n-We use maven as the primary build tool, but we also required cmake to be available\n-as maven delegates to cmake to building native OpenCL\/CUDA libs in the various backends.\n-\n-Whilst the root level cmake `CMakeLists.txt` can create some java artifacts, it should not be\n-relied on, and will probably be 'deprecated soon'\n-\n-To build with maven\n-\n-```bash\n-cd ${GITHUB}\/babylon\n-mvn clean compile jar:jar install\n-```\n-\n","filename":"hat\/docs\/hat-01-03-maven-cmake.md","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -9,1 +9,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-01-04-intellij.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-03-programming-model.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-04-01-interface-mapping.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-04-02-cascade-interface-mapping.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-05-accelerator-compute.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-06-kernel-analysis.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-    * [Maven and CMake](hat-01-03-maven-cmake.md)\n+    * [Building HAT](hat-01-03-building-hat.md)\n","filename":"hat\/docs\/hat-notes-and-links.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,0 +5,1 @@\n+    <mapping directory=\"$PROJECT_DIR$\/..\/hattricks\" vcs=\"Git\" \/>\n","filename":"hat\/intellij\/.idea\/vcs.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}