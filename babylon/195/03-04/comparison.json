{"files":[{"patch":"@@ -860,1 +860,21 @@\n-            for (int i = 0; i < bodies().size(); i++) {\n+            \/\/ move default case to the last position\n+            final int n = bodies().size();\n+            final List<Body> bodies = new ArrayList<>(n);\n+            int defaultLabelIndex = n - 2;\n+            for (int i = 0; i < n - 1; i+=2) {\n+                Body label = bodies().get(i);\n+                Body expr = bodies().get(i + 1);\n+                boolean isDefault = label.blocks().size() == 1 && label.entryBlock().terminatingOp() instanceof YieldOp yop\n+                        && yop.operands().isEmpty();\n+                boolean isLast = i == n - 2;\n+                if (isDefault && !isLast) {\n+                    defaultLabelIndex = i;\n+                    continue;\n+                }\n+                bodies.add(label);\n+                bodies.add(expr);\n+            }\n+            bodies.add(bodies().get(defaultLabelIndex));\n+            bodies.add(bodies().get(defaultLabelIndex + 1));\n+\n+            for (int i = 0; i < n; i++) {\n@@ -865,4 +885,3 @@\n-                    boolean isDefaultLabel = i == blocks.size() - 2;\n-                    Block.Builder nextLabel = isDefaultLabel ? null : blocks.get(i + 2);\n-                    Body body = bodies().get(i);\n-                    curr.transformBody(bodies().get(i), List.of(selectorExpression), opT.andThen((block, op) -> {\n+                    boolean isLastLabel = i == n - 2;\n+                    Block.Builder nextLabel = isLastLabel ? null : blocks.get(i + 2);\n+                    curr.transformBody(bodies.get(i), List.of(selectorExpression), opT.andThen((block, op) -> {\n@@ -871,2 +890,2 @@\n-                                if (isDefaultLabel) {\n-                                        block.op(branch(expression.successor()));\n+                                if (isLastLabel) {\n+                                    block.op(branch(expression.successor()));\n@@ -887,1 +906,1 @@\n-                    curr.transformBody(bodies().get(i), blocks.get(i).parameters(), opT.andThen((block, op) -> {\n+                    curr.transformBody(bodies.get(i), blocks.get(i).parameters(), opT.andThen((block, op) -> {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/op\/ExtendedOp.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1649,1 +1649,0 @@\n-                Class<?> exClass = isEnum(tree.selector.type.tsym) ? IncompatibleClassChangeError.class : MatchException.class;\n@@ -1651,1 +1650,1 @@\n-                        append(_new(functionType(type(exClass))))\n+                        append(_new(functionType(type(MatchException.class))))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -418,0 +418,36 @@\n+    @Test\n+    void testUnconditionalPattern() {\n+        CoreOp.FuncOp lmodel = lower(\"unconditionalPattern\");\n+        String[] args = {\"A\", \"X\"};\n+        for (String arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), unconditionalPattern(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    static String unconditionalPattern(String s) {\n+        return switch (s) {\n+            case \"A\" -> \"A\";\n+            case Object o -> \"default\";\n+        };\n+    }\n+\n+\n+    @Test\n+    void testDefaultCaseNotTheLast() {\n+        CoreOp.FuncOp lmodel = lower(\"defaultCaseNotTheLast\");\n+        String[] args = {\"something\", \"M\", \"A\"};\n+        for (String arg : args) {\n+            Assert.assertEquals(Interpreter.invoke(lmodel, arg), defaultCaseNotTheLast(arg));\n+        }\n+    }\n+\n+    @CodeReflection\n+    static String defaultCaseNotTheLast(String s) {\n+        return switch (s) {\n+            default -> \"else\";\n+            case \"M\" -> \"Mow\";\n+            case \"A\" -> \"Aow\";\n+        };\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-                        %28 : java.lang.IncompatibleClassChangeError = new @\"func<java.lang.IncompatibleClassChangeError>\";\n+                        %28 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n@@ -783,1 +783,1 @@\n-                        %12 : java.lang.IncompatibleClassChangeError = new @\"func<java.lang.IncompatibleClassChangeError>\";\n+                        %12 : java.lang.MatchException = new @\"func<java.lang.MatchException>\";\n@@ -901,0 +901,42 @@\n+\n+    @IR(\"\"\"\n+            func @\"defaultNotTheLastLabel\" (%0 : java.lang.String)java.lang.String -> {\n+                %1 : Var<java.lang.String> = var %0 @\"s\";\n+                %2 : java.lang.String = var.load %1;\n+                %3 : java.lang.String = java.switch.expression %2\n+                    ()void -> {\n+                        yield;\n+                    }\n+                    ()java.lang.String -> {\n+                        %4 : java.lang.String = constant @\"else\";\n+                        yield %4;\n+                    }\n+                    (%5 : java.lang.String)boolean -> {\n+                        %6 : java.lang.String = constant @\"M\";\n+                        %7 : boolean = invoke %5 %6 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %7;\n+                    }\n+                    ()java.lang.String -> {\n+                        %8 : java.lang.String = constant @\"Mow\";\n+                        yield %8;\n+                    }\n+                    (%9 : java.lang.String)boolean -> {\n+                        %10 : java.lang.String = constant @\"A\";\n+                        %11 : boolean = invoke %9 %10 @\"java.util.Objects::equals(java.lang.Object, java.lang.Object)boolean\";\n+                        yield %11;\n+                    }\n+                    ()java.lang.String -> {\n+                        %12 : java.lang.String = constant @\"Aow\";\n+                        yield %12;\n+                    };\n+                return %3;\n+            };\n+            \"\"\")\n+    @CodeReflection\n+    static String defaultNotTheLastLabel(String s) {\n+        return switch (s) {\n+            default -> \"else\";\n+            case \"M\" -> \"Mow\";\n+            case \"A\" -> \"Aow\";\n+        };\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/SwitchExpressionTest2.java","additions":44,"deletions":2,"binary":false,"changes":46,"status":"modified"}]}