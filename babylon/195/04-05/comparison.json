{"files":[{"patch":"@@ -96,1 +96,3 @@\n-import static com.sun.tools.javac.code.Flags.*;\n+import static com.sun.tools.javac.code.Flags.NOOUTERTHIS;\n+import static com.sun.tools.javac.code.Flags.PARAMETER;\n+import static com.sun.tools.javac.code.Flags.SYNTHETIC;\n@@ -102,4 +104,0 @@\n-import static jdk.internal.java.lang.reflect.code.op.CoreOp._new;\n-import static jdk.internal.java.lang.reflect.code.op.CoreOp._throw;\n-import static jdk.internal.java.lang.reflect.code.type.FunctionType.functionType;\n-import static jdk.internal.java.lang.reflect.code.type.JavaType.type;\n@@ -506,1 +504,1 @@\n-            FunctionType bodyType = functionType(\n+            FunctionType bodyType = FunctionType.functionType(\n@@ -533,1 +531,1 @@\n-            FunctionType mtDesc = functionType(typeToTypeElement(mtype.restype),\n+            FunctionType mtDesc = FunctionType.functionType(typeToTypeElement(mtype.restype),\n@@ -730,1 +728,1 @@\n-                    functionType(typeToTypeElement(box), typeToTypeElement(types.unboxedType(box))));\n+                    FunctionType.functionType(typeToTypeElement(box), typeToTypeElement(types.unboxedType(box))));\n@@ -744,1 +742,1 @@\n-                    functionType(typeToTypeElement(unboxedType)));\n+                    FunctionType.functionType(typeToTypeElement(unboxedType)));\n@@ -1193,1 +1191,1 @@\n-            pushBody(pattern, functionType(patternType));\n+            pushBody(pattern, FunctionType.functionType(patternType));\n@@ -1261,1 +1259,1 @@\n-            FunctionType matchFuncType = functionType(JavaType.VOID, patternDescParams);\n+            FunctionType matchFuncType = FunctionType.functionType(JavaType.VOID, patternDescParams);\n@@ -1316,1 +1314,1 @@\n-            FunctionType constructorType = functionType(\n+            FunctionType constructorType = FunctionType.functionType(\n@@ -1350,1 +1348,1 @@\n-                FunctionType constructorType = functionType(arrayType,\n+                FunctionType constructorType = FunctionType.functionType(arrayType,\n@@ -1447,1 +1445,1 @@\n-                        functionType(JavaType.BOOLEAN));\n+                        FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1495,1 +1493,1 @@\n-            FunctionType caseLabelType = functionType(JavaType.BOOLEAN, target.type());\n+            FunctionType caseLabelType = FunctionType.functionType(JavaType.BOOLEAN, target.type());\n@@ -1497,1 +1495,1 @@\n-            FunctionType actionType = functionType(typeToTypeElement(switchType));\n+            FunctionType actionType = FunctionType.functionType(typeToTypeElement(switchType));\n@@ -1514,1 +1512,1 @@\n-                        pushBody(pcl.pat, functionType(JavaType.BOOLEAN));\n+                        pushBody(pcl.pat, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1520,1 +1518,1 @@\n-                        pushBody(c.guard, functionType(JavaType.BOOLEAN));\n+                        pushBody(c.guard, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1556,1 +1554,1 @@\n-                            pushBody(ccl, functionType(JavaType.BOOLEAN));\n+                            pushBody(ccl, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1649,2 +1647,2 @@\n-                append(_throw(\n-                        append(_new(functionType(type(MatchException.class))))\n+                append(CoreOp._throw(\n+                        append(CoreOp._new(FunctionType.functionType(JavaType.type(MatchException.class))))\n@@ -1675,1 +1673,1 @@\n-            pushBody(cond, functionType(JavaType.BOOLEAN));\n+            pushBody(cond, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1713,1 +1711,1 @@\n-            pushBody(cond, functionType(JavaType.BOOLEAN));\n+            pushBody(cond, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1730,1 +1728,1 @@\n-            pushBody(tree.expr, functionType(typeToTypeElement(tree.expr.type)));\n+            pushBody(tree.expr, FunctionType.functionType(typeToTypeElement(tree.expr.type)));\n@@ -1746,1 +1744,1 @@\n-            pushBody(var, functionType(varEType, eType));\n+            pushBody(var, FunctionType.functionType(varEType, eType));\n@@ -1754,1 +1752,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, varEType));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, varEType));\n@@ -1808,1 +1806,1 @@\n-                pushBody(null, functionType(TupleType.tupleType(varTypes)));\n+                pushBody(null, FunctionType.functionType(TupleType.tupleType(varTypes)));\n@@ -1814,1 +1812,1 @@\n-                pushBody(null, functionType(varTypes.get(0)));\n+                pushBody(null, FunctionType.functionType(varTypes.get(0)));\n@@ -1830,1 +1828,1 @@\n-            pushBody(tree.cond, functionType(JavaType.BOOLEAN, varTypes));\n+            pushBody(tree.cond, FunctionType.functionType(JavaType.BOOLEAN, varTypes));\n@@ -1847,1 +1845,1 @@\n-            pushBody(null, functionType(JavaType.VOID, varTypes));\n+            pushBody(null, FunctionType.functionType(JavaType.VOID, varTypes));\n@@ -1860,1 +1858,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, varTypes));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, varTypes));\n@@ -1884,1 +1882,1 @@\n-                    functionType(JavaType.BOOLEAN));\n+                    FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1899,1 +1897,1 @@\n-                    functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToTypeElement(condType)));\n@@ -1913,1 +1911,1 @@\n-                    functionType(typeToTypeElement(condType)));\n+                    FunctionType.functionType(typeToTypeElement(condType)));\n@@ -1949,1 +1947,1 @@\n-                    functionType(JavaType.BOOLEAN));\n+                    FunctionType.functionType(JavaType.BOOLEAN));\n@@ -1963,1 +1961,1 @@\n-                         functionType(typeToTypeElement(tree.detail.type)));\n+                         FunctionType.functionType(typeToTypeElement(tree.detail.type)));\n@@ -2036,1 +2034,1 @@\n-                pushBody(null, functionType(TupleType.tupleType(rTypes)));\n+                pushBody(null, FunctionType.functionType(TupleType.tupleType(rTypes)));\n@@ -2063,1 +2061,1 @@\n-            pushBody(tree.body, functionType(JavaType.VOID, rVarTypes));\n+            pushBody(tree.body, FunctionType.functionType(JavaType.VOID, rVarTypes));\n@@ -2077,1 +2075,1 @@\n-                pushBody(catcher.body, functionType(JavaType.VOID, typeToTypeElement(catcher.param.type)));\n+                pushBody(catcher.body, FunctionType.functionType(JavaType.VOID, typeToTypeElement(catcher.param.type)));\n@@ -2159,1 +2157,1 @@\n-                pushBody(tree.lhs, functionType(JavaType.BOOLEAN));\n+                pushBody(tree.lhs, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2169,1 +2167,1 @@\n-                pushBody(tree.rhs, functionType(JavaType.BOOLEAN));\n+                pushBody(tree.rhs, FunctionType.functionType(JavaType.BOOLEAN));\n@@ -2255,1 +2253,1 @@\n-            result = append(_throw(throwVal));\n+            result = append(CoreOp._throw(throwVal));\n@@ -2364,1 +2362,1 @@\n-                        typ = type(ClassDesc.of(t.tsym.flatName().toString()));\n+                        typ = JavaType.type(ClassDesc.of(t.tsym.flatName().toString()));\n@@ -2428,1 +2426,1 @@\n-            return functionType(\n+            return FunctionType.functionType(\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":42,"deletions":44,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -454,0 +454,5 @@\n+    \/\/ we are not testing switch expr that has no default,\n+    \/\/ because to test for MatchException we need to set up separate compilation\n+    \/\/ in compiler tests we are checking that the code model contains a default case that throws MatchException\n+    \/\/ that should be enough\n+\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/TestSwitchExpressionOp.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}