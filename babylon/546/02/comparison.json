{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.BiFunction;\n@@ -340,0 +341,8 @@\n+    static BiFunction<Class<? extends CodeItem>, String, String> getDyer() {\n+        return Boolean.getBoolean(\"jdk.incubator.code.extern.OpWriter.COLOR\") ? (itemType, text) -> \"\\033[3\" +\n+                (itemType == Op.class ? '4' : \/\/ blue\n+                itemType == Block.class ? '5': \/\/ purple\n+                itemType == TypeElement.class ? '2': '1') \/\/ green : red\n+                + \"m\" + text + \"\\033[0m\" : (_, text) -> text;\n+    }\n+\n@@ -345,0 +354,1 @@\n+    final BiFunction<Class<? extends CodeItem>, String, String> dyer;\n@@ -357,0 +367,1 @@\n+        this.dyer = getDyer();\n@@ -394,0 +405,1 @@\n+        this.dyer = getDyer();\n@@ -416,1 +428,1 @@\n-        write(op.opName());\n+        write(Op.class, op.opName());\n@@ -522,2 +534,1 @@\n-        write(\"^\");\n-        write(namer.apply(b));\n+        write(Block.class, \"^\" + namer.apply(b));\n@@ -527,2 +538,1 @@\n-        write(\"%\");\n-        write(namer.apply(v));\n+        write(Value.class, \"%\" + namer.apply(v));\n@@ -532,2 +542,1 @@\n-        write(\"%\");\n-        write(namer.apply(v));\n+        write(Value.class, \"%\" + namer.apply(v));\n@@ -558,1 +567,5 @@\n-        write(JavaTypeUtils.flatten(te.externalize()).toString());\n+        write(TypeElement.class, JavaTypeUtils.flatten(te.externalize()).toString());\n+    }\n+\n+    void write(Class<? extends CodeItem> itemType, String s) {\n+        write(dyer.apply(itemType, s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpWriter.java","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"}]}