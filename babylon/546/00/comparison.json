{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.BiFunction;\n@@ -340,0 +341,32 @@\n+    \/**\n+     * An option describing how to color the output.\n+     *\/\n+    public enum ColoringOption implements Option {\n+        \/** Performs no coloring. *\/\n+        NONE((_, text) -> text),\n+\n+        \/** Uses ANSI codes to color the output *\/\n+        ANSI((itemType, text) -> \"\\033[3\" +\n+                (itemType == Op.class ? '4' : \/\/ blue\n+                itemType == Block.class ? '5': \/\/ purple\n+                itemType == TypeElement.class ? '2': '1') \/\/ green : red\n+                + \"m\" + text + \"\\033[0m\"),\n+\n+        \/** Uses HTML elements to color the output *\/\n+        HTML((itemType, text) -> \"<font color=\\\"\" +\n+                (itemType == Op.class ? \"blue\" :\n+                itemType == Block.class ? \"purple\":\n+                itemType == TypeElement.class ? \"green\" : \"red\")\n+                + \"\\\">\" + text + \"<\/font>\");\n+\n+        public static ColoringOption defaultValue() {\n+            return NONE;\n+        }\n+\n+        final BiFunction<Class<? extends CodeItem>, String, String> dyer;\n+\n+        ColoringOption(BiFunction<Class<? extends CodeItem>, String, String> dyer) {\n+            this.dyer = dyer;\n+        }\n+    }\n+\n@@ -345,0 +378,1 @@\n+    final BiFunction<Class<? extends CodeItem>, String, String> dyer;\n@@ -357,0 +391,1 @@\n+        this.dyer = ColoringOption.NONE.dyer;\n@@ -370,0 +405,1 @@\n+        var dyer = ColoringOption.NONE.dyer;\n@@ -386,0 +422,3 @@\n+                case ColoringOption colorSchemaOption -> {\n+                    dyer = colorSchemaOption.dyer;\n+                }\n@@ -394,0 +433,1 @@\n+        this.dyer = dyer;\n@@ -416,1 +456,1 @@\n-        write(op.opName());\n+        write(Op.class, op.opName());\n@@ -522,2 +562,1 @@\n-        write(\"^\");\n-        write(namer.apply(b));\n+        write(Block.class, \"^\" + namer.apply(b));\n@@ -527,2 +566,1 @@\n-        write(\"%\");\n-        write(namer.apply(v));\n+        write(Value.class, \"%\" + namer.apply(v));\n@@ -532,2 +570,1 @@\n-        write(\"%\");\n-        write(namer.apply(v));\n+        write(Value.class, \"%\" + namer.apply(v));\n@@ -558,1 +595,5 @@\n-        write(JavaTypeUtils.flatten(te.externalize()).toString());\n+        write(TypeElement.class, JavaTypeUtils.flatten(te.externalize()).toString());\n+    }\n+\n+    void write(Class<? extends CodeItem> itemType, String s) {\n+        write(dyer.apply(itemType, s));\n","filename":"src\/jdk.incubator.code\/share\/classes\/jdk\/incubator\/code\/extern\/OpWriter.java","additions":49,"deletions":8,"binary":false,"changes":57,"status":"modified"}]}