{"files":[{"patch":"@@ -447,22 +447,0 @@\n-    \/**\n-     * Generate a static field and a static initializer that sets this field to an instance of the lambda\n-     *\/\n-    private void generateClassInitializer(ClassBuilder clb) {\n-        ClassDesc lambdaTypeDescriptor = classDesc(factoryType.returnType());\n-\n-        \/\/ Generate the static final field that holds the lambda singleton\n-        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n-\n-        \/\/ Instantiate the lambda and store it to the static final field\n-        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<>() {\n-            @Override\n-            public void accept(CodeBuilder cob) {\n-                assert factoryType.parameterCount() == 0;\n-                cob.new_(lambdaClassEntry)\n-                   .dup()\n-                   .invokespecial(pool.methodRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(INIT_NAME, constructorTypeDesc)))\n-                   .putstatic(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor)))\n-                   .return_();\n-            }\n-        });\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"}]}