{"files":[{"patch":"@@ -445,22 +445,0 @@\n-    \/**\n-     * Generate a static field and a static initializer that sets this field to an instance of the lambda\n-     *\/\n-    private void generateClassInitializer(ClassBuilder clb) {\n-        ClassDesc lambdaTypeDescriptor = classDesc(factoryType.returnType());\n-\n-        \/\/ Generate the static final field that holds the lambda singleton\n-        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n-\n-        \/\/ Instantiate the lambda and store it to the static final field\n-        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<>() {\n-            @Override\n-            public void accept(CodeBuilder cob) {\n-                assert factoryType.parameterCount() == 0;\n-                cob.new_(lambdaClassEntry)\n-                   .dup()\n-                   .invokespecial(pool.methodRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(INIT_NAME, constructorTypeDesc)))\n-                   .putstatic(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor)))\n-                   .return_();\n-            }\n-        });\n-    }\n@@ -490,33 +468,0 @@\n-    private void generateQuotedFieldInitializer(CodeBuilder cob) {\n-        ConstantPoolBuilder cp = cob.constantPool();\n-        MethodHandleEntry bsmDataAt = cp.methodHandleEntry(BSM_CLASS_DATA_AT);\n-        NameAndTypeEntry natMH = cp.nameAndTypeEntry(DEFAULT_NAME, CD_MethodHandle);\n-        \/\/ push the receiver on the stack for operand of put field instruction\n-        cob.aload(0)\n-                \/\/ load class data: CodeReflectionSupport.HANDLE_MAKE_QUOTED\n-                .ldc(cp.constantDynamicEntry(cp.bsmEntry(bsmDataAt, List.of(cp.intEntry(2))), natMH))\n-                .getstatic(lambdaClassEntry.asSymbol(), COMPILER_GENERATED_MODEL_FIELD_NAME,\n-                        CodeReflectionSupport.FUNC_OP_CLASS.describeConstable().get());\n-\n-\n-        \/\/ load captured args in array\n-\n-        int capturedArity = factoryType.parameterCount();\n-        cob.loadConstant(capturedArity)\n-           .anewarray(CD_Object);\n-        \/\/ initialize quoted captures\n-        for (int i = 0; i < capturedArity; i++) {\n-            cob.dup()\n-               .loadConstant(i)\n-               .aload(0)\n-               .getfield(lambdaClassEntry.asSymbol(), argName(i), argDescs[i]);\n-            TypeConvertingMethodAdapter.boxIfTypePrimitive(cob, TypeKind.from(argDescs[i]));\n-            cob.aastore();\n-        }\n-\n-        \/\/ Create a Quoted from FuncOp and captured args Object[]\n-\n-        cob.invokevirtual(CD_MethodHandle, \"invokeExact\", methodDesc(CodeReflectionSupport.HANDLE_MAKE_QUOTED.type()))\n-           .putfield(lambdaClassEntry.asSymbol(), quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"}]}