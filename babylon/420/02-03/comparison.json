{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.classfile.Label;\n@@ -341,1 +342,1 @@\n-                    clb.withField(quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted, ACC_PRIVATE + ACC_FINAL);\n+                    clb.withField(quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted, ACC_PRIVATE | ACC_VOLATILE);\n@@ -484,3 +485,0 @@\n-                        if (quotableOpGetter != null) {\n-                            generateQuotedFieldInitializer(cob);\n-                        }\n@@ -639,0 +637,8 @@\n+                \/\/ bytecode for double-checked locking (copied from the compiler)\n+                Label l1 = cob.newLabel();\n+                Label l2 = cob.newLabel();\n+                Label target = cob.newLabel();\n+                Label from1 = cob.newLabel();\n+                Label to1 = cob.newLabel();\n+                Label from2 = cob.newLabel();\n+                Label to2 = cob.newLabel();\n@@ -640,2 +646,41 @@\n-                   .getfield(lambdaClassEntry.asSymbol(), quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted)\n-                   .areturn();\n+                        .getfield(lambdaClassEntry.asSymbol(), quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted)\n+                        .astore(1)\n+                        .aload(1)\n+                        .ifnonnull(l1)\n+                        .aload(0)\n+                        .dup()\n+                        .astore(2)\n+                        .monitorenter()\n+                        .labelBinding(from1)\n+                        .aload(0)\n+                        .getfield(lambdaClassEntry.asSymbol(), quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted)\n+                        .astore(1)\n+                        .aload(1)\n+                        .ifnonnull(l2);\n+                createQuotedObj(cob);\n+                cob.astore(1)\n+                        .aload(0)\n+                        .aload(1)\n+                        .putfield(lambdaClassEntry.asSymbol(), quotedInstanceFieldName, CodeReflectionSupport.CD_Quoted)\n+                        .labelBinding(l2)\n+                        .aload(2)\n+                        .monitorexit()\n+                        .labelBinding(to1)\n+                        .goto_(l1)\n+\n+                        \/\/ exception handling\n+                        .labelBinding(target)\n+                        .labelBinding(from2)\n+                        .astore(3)\n+                        .aload(2)\n+                        .monitorexit()\n+                        .labelBinding(to2)\n+                        .aload(3)\n+                        .athrow()\n+\n+                        .labelBinding(l1)\n+                        .aload(1)\n+                        .areturn()\n+                        .exceptionCatchAll(from1, to1, target)\n+                        .exceptionCatchAll(from2, to2, target);\n+\n@@ -646,0 +691,32 @@\n+    private void createQuotedObj(CodeBuilder cob) {\n+        ConstantPoolBuilder cp = cob.constantPool();\n+        MethodHandleEntry bsmDataAt = cp.methodHandleEntry(BSM_CLASS_DATA_AT);\n+        NameAndTypeEntry natMH = cp.nameAndTypeEntry(DEFAULT_NAME, CD_MethodHandle);\n+\n+        \/\/ load MH to QuotedHelper.makeQuoted\n+        cob.ldc(cp.constantDynamicEntry(cp.bsmEntry(bsmDataAt, List.of(cp.intEntry(2))), natMH));\n+        \/\/ load compiler generated model\n+        cob.getstatic(lambdaClassEntry.asSymbol(), COMPILER_GENERATED_MODEL_FIELD_NAME,\n+                        CodeReflectionSupport.FUNC_OP_CLASS.describeConstable().get());\n+\n+\n+        \/\/ load captured args in array\n+\n+        int capturedArity = factoryType.parameterCount();\n+        cob.loadConstant(capturedArity)\n+                .anewarray(CD_Object);\n+        \/\/ initialize quoted captures\n+        for (int i = 0; i < capturedArity; i++) {\n+            cob.dup()\n+                    .loadConstant(i)\n+                    .aload(0)\n+                    .getfield(lambdaClassEntry.asSymbol(), argName(i), argDescs[i]);\n+            TypeConvertingMethodAdapter.boxIfTypePrimitive(cob, TypeKind.from(argDescs[i]));\n+            cob.aastore();\n+        }\n+\n+        \/\/ Create a Quoted from FuncOp and captured args Object[]\n+\n+        cob.invokevirtual(CD_MethodHandle, \"invokeExact\", methodDesc(CodeReflectionSupport.HANDLE_MAKE_QUOTED.type()));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":83,"deletions":6,"binary":false,"changes":89,"status":"modified"}]}