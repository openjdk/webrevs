{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n@@ -91,7 +93,3 @@\n-        \/\/ Determine if fp\n-        boolean fp = false;\n-        for (char c : numStr.toCharArray()) {\n-            if (c == 'e' || c == 'E' || c =='.') {\n-                fp = true;\n-                break;\n-            }\n+        try {\n+            return Long.parseLong(numStr);\n+        } catch (NumberFormatException e) {\n@@ -100,13 +98,3 @@\n-        \/\/ Make conversion\n-        if (!fp) {\n-            \/\/ integral numbers\n-            try {\n-                return Integer.valueOf(numStr);\n-            } catch (NumberFormatException _) {\n-                \/\/ int overflow. try long\n-                try {\n-                    return Long.valueOf(numStr);\n-                } catch (NumberFormatException _) {\n-                    \/\/ long overflow. convert to Double\n-                }\n-            }\n+        try {\n+            return new BigInteger(numStr);\n+        } catch (NumberFormatException e) {\n@@ -114,3 +102,3 @@\n-        var num = Double.valueOf(numStr);\n-        if (Double.isInfinite(num)) {\n-            throw new NumberFormatException(\"The number is infinitely large in magnitude\");\n+\n+        if (Double.valueOf(numStr) instanceof double d && !Double.isInfinite(d)) {\n+            return d;\n@@ -118,1 +106,31 @@\n-        return num;\n+\n+        return new BigDecimal(numStr);\n+\n+\/\/        \/\/ Determine if fp\n+\/\/        boolean fp = false;\n+\/\/        for (char c : numStr.toCharArray()) {\n+\/\/            if (c == 'e' || c == 'E' || c =='.') {\n+\/\/                fp = true;\n+\/\/                break;\n+\/\/            }\n+\/\/        }\n+\/\/\n+\/\/        \/\/ Make conversion\n+\/\/        if (!fp) {\n+\/\/            \/\/ integral numbers\n+\/\/            try {\n+\/\/                return Integer.valueOf(numStr);\n+\/\/            } catch (NumberFormatException _) {\n+\/\/                \/\/ int overflow. try long\n+\/\/                try {\n+\/\/                    return Long.valueOf(numStr);\n+\/\/                } catch (NumberFormatException _) {\n+\/\/                    \/\/ long overflow. convert to Double\n+\/\/                }\n+\/\/            }\n+\/\/        }\n+\/\/        var num = Double.valueOf(numStr);\n+\/\/        if (Double.isInfinite(num)) {\n+\/\/            throw new NumberFormatException(\"The number is infinitely large in magnitude\");\n+\/\/        }\n+\/\/        return num;\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/json\/JsonNumberImpl.java","additions":42,"deletions":24,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        w.write(\"public final class \" + ONNX_OPS_CLASS + \" {\\n\");\n+        w.write(\"public final class \" + ONNX_OPS_CLASS + \" extends ExplicitOnnxOps {\\n\");\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/onnx\/opgen\/OpGen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+            \/\/ Coerce to int when int is declared\n@@ -98,1 +99,3 @@\n-            case JsonNumber n when n.value() instanceof Integer i && c == Object.class -> (T) i;\n+            \/\/ Coerce to int when Object is declared and when integral JSON number\n+            case JsonNumber n when n.value() instanceof Long i && c == Object.class -> (T) (Integer) i.intValue();\n+            \/\/ Coerce to float when Object is declared and when real JSON number\n","filename":"cr-examples\/onnx\/opgen\/src\/main\/java\/oracle\/code\/onnx\/opgen\/OpSchemaParser.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}