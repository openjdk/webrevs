{"files":[{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Member;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.code.Op;\n+import java.lang.reflect.code.analysis.SSA;\n+import java.lang.reflect.code.op.CoreOps;\n+import java.lang.reflect.code.op.ExtendedOps;\n+import java.lang.reflect.code.parser.OpParser;\n+import java.lang.runtime.CodeReflection;\n+\n+public class CodeReflectionTester {\n+\n+    public static void main(String[] args) throws ReflectiveOperationException {\n+        if (args.length != 1) {\n+            System.err.println(\"Usage: CodeReflectionTester <classname>\");\n+            System.exit(1);\n+        }\n+        Class<?> clazz = Class.forName(args[0]);\n+        for (Method m : clazz.getDeclaredMethods()) {\n+            check(m);\n+        }\n+    }\n+\n+    static void check(Method method) throws ReflectiveOperationException {\n+        if (!method.isAnnotationPresent(CodeReflection.class)) {\n+            return;\n+        }\n+\n+        LoweredModel lma = method.getAnnotation(LoweredModel.class);\n+        if (lma == null) {\n+            throw new AssertionError(\"No @IR annotation found on reflective method\");\n+        }\n+\n+        CoreOps.FuncOp f = method.getCodeModel().orElseThrow(() ->\n+                new AssertionError(\"No code model for reflective method\"));\n+        f = lower(f, lma.ssa());\n+\n+        String actual = canonicalizeModel(method, f.toText());\n+        String expected = canonicalizeModel(method, lma.value());\n+        if (!actual.equals(expected)) {\n+            throw new AssertionError(String.format(\"Bad code model\\nFound:\\n%s\\n\\nExpected:\\n%s\", actual, expected));\n+        }\n+    }\n+\n+    static CoreOps.FuncOp lower(CoreOps.FuncOp f, boolean ssa) {\n+        f = f.transform((block, op) -> {\n+            if (op instanceof Op.Lowerable lop) {\n+                return lop.lower(block);\n+            } else {\n+                block.op(op);\n+                return block;\n+            }\n+        });\n+        f.writeTo(System.out);\n+\n+        if (ssa) {\n+            f = SSA.transform(f);\n+            f.writeTo(System.out);\n+        }\n+\n+        return f;\n+    }\n+\n+    \/\/ parses and then serializes\n+    static String canonicalizeModel(Member m, String d) {\n+        try {\n+            return OpParser.fromString(ExtendedOps.FACTORY, d).get(0).toText();\n+        } catch (Exception e) {\n+            throw new IllegalStateException(m.toString(), e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/CodeReflectionTester.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n-public @interface IR {\n+public @interface LoweredModel {\n@@ -30,0 +30,1 @@\n+    boolean ssa() default false;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/LoweredModel.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/langtools\/tools\/javac\/reflect\/IR.java","status":"copied"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.runtime.CodeReflection;\n+\n+\/*\n+ * @test\n+ * @summary test lowering of loops\n+ * @build TestLoop\n+ * @build CodeReflectionTester\n+ * @run main CodeReflectionTester TestLoop\n+ *\/\n+\n+public class TestLoop {\n+    @CodeReflection\n+    @LoweredModel(value = \"\"\"\n+            func @\"testFor\" (%0 : int[])int -> {\n+                %1 : Var<int[]> = var %0 @\"a\";\n+                %2 : int = constant @\"0\";\n+                %3 : Var<int> = var %2 @\"sum\";\n+                %4 : int = constant @\"0\";\n+                %5 : Var<int> = var %4 @\"i\";\n+                branch ^block_0;\n+\n+              ^block_0:\n+                %6 : int = var.load %5;\n+                %7 : int[] = var.load %1;\n+                %8 : int = array.length %7;\n+                %9 : boolean = lt %6 %8;\n+                cbranch %9 ^block_1 ^block_2;\n+\n+              ^block_1:\n+                %10 : int = var.load %3;\n+                %11 : int[] = var.load %1;\n+                %12 : int = var.load %5;\n+                %13 : int = array.load %11 %12;\n+                %14 : int = add %10 %13;\n+                var.store %3 %14;\n+                branch ^block_3;\n+\n+              ^block_3:\n+                %15 : int = var.load %5;\n+                %16 : int = constant @\"1\";\n+                %17 : int = add %15 %16;\n+                var.store %5 %17;\n+                branch ^block_0;\n+\n+              ^block_2:\n+                %18 : int = var.load %3;\n+                return %18;\n+            };\n+            \"\"\", ssa = false)\n+    static int testFor(int[] a) {\n+        int sum = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            sum += a[i];\n+        }\n+        return sum;\n+    }\n+\n+    @CodeReflection\n+    @LoweredModel(value = \"\"\"\n+            func @\"testForSSA\" (%0 : int[])int -> {\n+                %1 : int = constant @\"0\";\n+                %2 : int = constant @\"0\";\n+                branch ^block_0(%1, %2);\n+\n+              ^block_0(%3 : int, %4 : int):\n+                %5 : int = array.length %0;\n+                %6 : boolean = lt %4 %5;\n+                cbranch %6 ^block_1 ^block_2;\n+\n+              ^block_1:\n+                %7 : int = array.load %0 %4;\n+                %8 : int = add %3 %7;\n+                branch ^block_3;\n+\n+              ^block_3:\n+                %9 : int = constant @\"1\";\n+                %10 : int = add %4 %9;\n+                branch ^block_0(%8, %10);\n+\n+              ^block_2:\n+                return %3;\n+            };\n+            \"\"\", ssa = true)\n+    static int testForSSA(int[] a) {\n+        int sum = 0;\n+        for (int i = 0; i < a.length; i++) {\n+            sum += a[i];\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/lower\/TestLoop.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}