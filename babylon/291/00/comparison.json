{"files":[{"patch":"@@ -66,1 +66,1 @@\n-                                <copy file=\"target\/hat-backend-cuda-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-cuda-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/cuda\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                                <copy file=\"target\/hat-backend-hip-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-hip-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/hip\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                                <copy file=\"target\/hat-backend-mock-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-mock-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/mock\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                                <copy file=\"target\/hat-backend-opencl-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-opencl-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/opencl\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                                <argument>-DHAT_TARGET=${hat.target}<\/argument>\n+                                <argument>-DHAT_TARGET=${hat.build}<\/argument>\n@@ -67,1 +67,1 @@\n-                                <argument>${hat.target}\/cmake-build-debug<\/argument>\n+                                <argument>${hat.build}\/cmake-build-debug<\/argument>\n@@ -81,1 +81,1 @@\n-                                <argument>${hat.target}\/cmake-build-debug<\/argument>\n+                                <argument>${hat.build}\/cmake-build-debug<\/argument>\n","filename":"hat\/backends\/pom.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-                                <copy file=\"target\/hat-backend-ptx-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-ptx-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/ptx\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-                                <copy file=\"target\/hat-backend-spirv-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-backend-spirv-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/backends\/spirv\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-        public XMLFile createPom(\n+        public XMLFile pom(\n","filename":"hat\/bldr\/Bldr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-        public org.w3c.dom.Element element;\n-\n+        final public org.w3c.dom.Element element;\n@@ -178,1 +177,1 @@\n-        public PomXmlBuilder antPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n+        public PomXmlBuilder antPlugin(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n@@ -183,1 +182,1 @@\n-                    plugin -> plugin.executions(pomXmlBuilderConsumer));\n+                    pomXmlBuilderConsumer);\n@@ -186,1 +185,1 @@\n-        public PomXmlBuilder compilerPluginConfiguration(\n+        public PomXmlBuilder compilerPlugin(\n@@ -191,2 +190,2 @@\n-                    \"3.11.0\",\n-                    plugin -> plugin.configuration(pomXmlBuilderConsumer));\n+                    \"3.11.0\",pomXmlBuilderConsumer\n+                  );\n@@ -199,3 +198,0 @@\n-        public PomXmlBuilder execPluginExecutions(Consumer<PomXmlBuilder> pomXmlBuilderConsumer) {\n-            return execPlugin(plugin -> plugin.executions(pomXmlBuilderConsumer));\n-        }\n@@ -205,2 +201,1 @@\n-            return element(\n-                    \"plugin\", $ -> $.groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer));\n+            return element(\"plugin\", $ -> $.groupIdArtifactId(groupId, artifactId).then(pomXmlBuilderConsumer));\n@@ -255,6 +250,1 @@\n-            return execution(\n-                    ex ->\n-                            ex.id(id)\n-                                    .phase(phase)\n-                                    .goals(gs -> gs.goal(\"exec\"))\n-                                    .configuration(pomXmlBuilderConsumer));\n+            return execution(execution -> execution.id(id).phase(phase).goals(gs -> gs.goal(\"exec\")).configuration(pomXmlBuilderConsumer));\n@@ -297,3 +287,1 @@\n-            return execution(\n-                    execution ->\n-                            execution\n+            return execution(execution -> execution\n@@ -366,0 +354,3 @@\n+        public PomXmlBuilder antproperty(String name, String value) {\n+            return element(\"property\", $ -> $.attr(\"name\", name).attr(\"value\", value));\n+        }\n@@ -395,0 +386,4 @@\n+        public PomXmlBuilder mkdir(String dirName) {\n+            return element(\"mkdir\", $ -> $.attr(\"dir\", dirName));\n+        }\n+\n@@ -450,0 +445,4 @@\n+\n+        public PomXmlBuilder workingDirectory(String s) {\n+            return element(\"workingDirectory\", $ -> $.text(s));\n+        }\n@@ -453,0 +452,1 @@\n+\n@@ -680,1 +680,1 @@\n-        XMLBuilder(Element element) {\n+       XMLBuilder(Element element) {\n","filename":"hat\/bldr\/XMLNode.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -57,3 +57,1 @@\n-        <maven.compiler.source>24<\/maven.compiler.source>\n-        <maven.compiler.target>24<\/maven.compiler.target>\n-        <hat.target>${env.PWD}\/maven-build<\/hat.target>\n+        <hat.build>${env.PWD}\/build<\/hat.build>\n","filename":"hat\/docs\/hat-01-03-building-hat-with-maven.md","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-blackscholes-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-blackscholes-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/blackscholes\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                                <copy file=\"target\/hat-example-experiments-1.0.jar\" todir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-experiments-1.0.jar\" todir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/experiments\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-heal-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-heal-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/heal\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-life-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-life-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/life\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-mandel-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-mandel-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/mandel\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-squares-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-squares-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/squares\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                <copy file=\"target\/hat-example-violajones-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/hat-example-violajones-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/examples\/violajones\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+target\/\n","filename":"hat\/extractions\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+target\/\n","filename":"hat\/extractions\/opencl\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+      accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+     or visit www.oracle.com if you need additional information or have any\n+     questions.\n+--><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n+    <!--Auto generated by mkpoms-->\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <packaging>pom<\/packaging>\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-extraction-opencl<\/artifactId>\n+    <version>1.0<\/version>\n+    <parent>\n+        <groupId>oracle.code<\/groupId>\n+        <artifactId>hat-extractions<\/artifactId>\n+        <version>1.0<\/version>\n+    <\/parent>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.codehaus.mojo<\/groupId>\n+                <artifactId>exec-maven-plugin<\/artifactId>\n+                <version>3.1.0<\/version>\n+                <executions>\n+                    <execution>\n+                        <id>2<\/id>\n+                        <phase>compile<\/phase>\n+                        <goals>\n+                            <goal>exec<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <executable>jextract<\/executable>\n+                            <workingDirectory>${hat.stage.jextract}<\/workingDirectory>\n+                            <arguments>\n+                                <argument>--output<\/argument>\n+                                <argument>${hat.stage.jextract}<\/argument>\n+                                <argument>-t<\/argument>\n+                                <argument>opencl<\/argument>\n+                                <argument>-l<\/argument>\n+                                <argument>${mac.lib.frameworks}\/OpenCL.framework\/OpenCL<\/argument>\n+                                <argument>${mac.app.frameworks}\/OpenCL.framework\/Headers\/opencl.h<\/argument>\n+                            <\/arguments>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+<\/project>\n","filename":"hat\/extractions\/opencl\/pom.xml","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+target\/\n","filename":"hat\/extractions\/opengl\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+      accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+     or visit www.oracle.com if you need additional information or have any\n+     questions.\n+--><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n+    <!--Auto generated by mkpoms-->\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <packaging>pom<\/packaging>\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-extraction-opengl<\/artifactId>\n+    <version>1.0<\/version>\n+    <parent>\n+        <groupId>oracle.code<\/groupId>\n+        <artifactId>hat-extractions<\/artifactId>\n+        <version>1.0<\/version>\n+    <\/parent>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.codehaus.mojo<\/groupId>\n+                <artifactId>exec-maven-plugin<\/artifactId>\n+                <version>3.1.0<\/version>\n+                <executions>\n+                    <execution>\n+                        <id>2<\/id>\n+                        <phase>compile<\/phase>\n+                        <goals>\n+                            <goal>exec<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <executable>jextract<\/executable>\n+                            <workingDirectory>${hat.stage.jextract}<\/workingDirectory>\n+                            <arguments>\n+                                <argument>--output<\/argument>\n+                                <argument>${hat.stage.jextract}<\/argument>\n+                                <argument>-t<\/argument>\n+                                <argument>opengl<\/argument>\n+                                <argument>-l<\/argument>\n+                                <argument>${mac.lib.frameworks}\/GLUT.framework\/GLUT<\/argument>\n+                                <argument>-l<\/argument>\n+                                <argument>${mac.lib.frameworks}\/OpenGL.framework\/OpenGL<\/argument>\n+                                <argument>${mac.app.frameworks}\/GLUT.framework\/Headers\/glut.h<\/argument>\n+                            <\/arguments>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+<\/project>\n","filename":"hat\/extractions\/opengl\/pom.xml","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+      accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+     or visit www.oracle.com if you need additional information or have any\n+     questions.\n+--><project xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\">\n+    <!--Auto generated by mkpoms-->\n+    <modelVersion>4.0.0<\/modelVersion>\n+    <packaging>pom<\/packaging>\n+    <groupId>oracle.code<\/groupId>\n+    <artifactId>hat-extractions<\/artifactId>\n+    <version>1.0<\/version>\n+    <parent>\n+        <groupId>oracle.code<\/groupId>\n+        <artifactId>hat-root<\/artifactId>\n+        <version>1.0<\/version>\n+    <\/parent>\n+    <modules>\n+        <module>opencl<\/module>\n+        <module>opengl<\/module>\n+    <\/modules>\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-antrun-plugin<\/artifactId>\n+                <version>1.8<\/version>\n+                <executions>\n+                    <execution>\n+                        <id>createDir<\/id>\n+                        <phase>compile<\/phase>\n+                        <goals>\n+                            <goal>run<\/goal>\n+                        <\/goals>\n+                        <configuration>\n+                            <target>\n+                                <mkdir dir=\"${hat.stage.jextract}\"\/>\n+                                <echo file=\"${hat.stage.jextract}\/compile_flags.txt\" message=\"-F${mac.app.frameworks}\"\/>\n+                            <\/target>\n+                        <\/configuration>\n+                    <\/execution>\n+                <\/executions>\n+            <\/plugin>\n+        <\/plugins>\n+    <\/build>\n+<\/project>\n","filename":"hat\/extractions\/pom.xml","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -71,1 +71,1 @@\n-                                <copy file=\"target\/${project.artifactId}-1.0.jar\" toDir=\"${hat.target}\"\/>\n+                                <copy file=\"target\/${project.artifactId}-1.0.jar\" toDir=\"${hat.build}\"\/>\n","filename":"hat\/hat\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<module type=\"JAVA_MODULE\" version=\"4\">\n+  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n+    <exclude-output \/>\n+    <content url=\"file:\/\/$MODULE_DIR$\/..\/examples\/nbody\">\n+      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/examples\/nbody\/src\/main\/java\" isTestSource=\"false\" \/>\n+      <sourceFolder url=\"file:\/\/$MODULE_DIR$\/..\/examples\/nbody\/src\/main\/resources\" type=\"java-resource\" \/>\n+    <\/content>\n+    <orderEntry type=\"inheritedJdk\" \/>\n+    <orderEntry type=\"sourceFolder\" forTests=\"false\" \/>\n+    <orderEntry type=\"module\" module-name=\"hat\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_opencl\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_cuda\" \/>\n+    <orderEntry type=\"module\" module-name=\"backend_spirv\" \/>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/jextracted-opengl.jar!\/\" \/>\n+        <\/CLASSES>\n+        <JAVADOC \/>\n+        <SOURCES \/>\n+      <\/library>\n+    <\/orderEntry>\n+    <orderEntry type=\"module-library\">\n+      <library>\n+        <CLASSES>\n+          <root url=\"jar:\/\/$MODULE_DIR$\/..\/build\/jextracted-opencl.jar!\/\" \/>\n+        <\/CLASSES>\n+        <JAVADOC \/>\n+        <SOURCES \/>\n+      <\/library>\n+    <\/orderEntry>\n+  <\/component>\n+<\/module>\n\\ No newline at end of file\n","filename":"hat\/intellij\/nbody.iml","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -59,0 +59,1 @@\n+   var extractions = hatDir.existingDir(\"extractions\");\n@@ -61,20 +62,27 @@\n-   hatDir.createPom(pomComment, pom -> pom\n-     .comment(\"Auto generated by mkpoms\")\n-     .pom(\"oracle.code\", \"hat-root\", \"1.0\")\n-     .properties(props -> props\n-        .property(\"project.build.sourceEncoding\", \"UTF-8\")\n-        .property(\"hat.target\", \"${env.PWD}\/build\")\n-     )\n-     .modules(\"hat\", \"backends\", \"examples\")\n-     .build(build -> build\n-        .plugins(plugins -> plugins\n-           .compilerPluginConfiguration(configuration -> configuration\n-              \/\/ These compiler args are inherited by backends and examples\n-              .compilerArgs(\n-                 \"--add-modules=jdk.incubator.code\",\n-                 \"--enable-preview\",\n-                 \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n-                 \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n-              )\n-              .source(\"24\").target(\"24\").showDeprecation(\"true\").failOnError(\"true\").showWarnings(\"true\")\n-           )\n+   hatDir.pom(pomComment, pom -> pom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .properties(props -> props\n+         .property(\"project.build.sourceEncoding\", \"UTF-8\")\n+         .property(\"hat.root\", \"${env.PWD}\")\n+         .property(\"hat.build\", \"${hat.root}\/build\")\n+         .property(\"hat.stage\", \"${hat.root}\/stage\")\n+         .property(\"hat.stage.repo\", \"${hat.stage}\/repo\")\n+         .property(\"hat.stage.jextract\", \"${hat.stage}\/jextract\")\n+         .property(\"mac.app.frameworks\", \"\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\")\n+         .property(\"mac.lib.frameworks\", \"\/System\/Library\/Frameworks\")\n+      )\n+      .modules(\"hat\", \"extractions\", \"backends\", \"examples\")\n+      .build(build -> build\n+         .plugins(plugins -> plugins\n+            .compilerPlugin(plugin -> plugin\n+               .configuration(configuration -> configuration\n+                  .compilerArgs(\n+                     \"--add-modules=jdk.incubator.code\",\n+                     \"--enable-preview\",\n+                     \"--add-exports=java.base\/jdk.internal=ALL-UNNAMED\",\n+                     \"--add-exports=java.base\/jdk.internal.vm.annotation=ALL-UNNAMED\"\n+                  )\n+                  .source(\"24\").target(\"24\").showDeprecation(\"true\").failOnError(\"true\").showWarnings(\"true\")\n+               )\n+            )\n@@ -86,55 +94,81 @@\n-   hatCoreDir.createPom(pomComment, pom -> pom\n-     .comment(\"Auto generated by mkpoms\")\n-     .jar(\"oracle.code\", \"hat\", \"1.0\")\n-     .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n-     .dependencies(dependencies -> dependencies\n-        .dependency(\"org.junit.jupiter\", \"junit-jupiter-engine\", \"5.10.0\", \"test\")\n-     )\n-     .build(build -> build\n-        .pluginManagement(pluginManagement -> pluginManagement\n-           .plugins(plugins -> plugins\n-              \/\/ This is for the test cases (testng)\n-              .plugin(\"org.apache.maven.plugins\", \"maven-surefire-plugin\", \"3.1.2\", plugin -> plugin\n-                 .configuration(configuration -> configuration\n-                    .argLine(\"-enable-preview\")\n-                 )\n-              )\n-           )\n-        )\n-        .plugins(plugins -> plugins\n-           .antPluginExecutions(executions -> executions\n-              \/\/ We copy the jar to the build dir here\n-              .ant(\"1\",\"install\", \"run\", ant -> ant\n-                 .copy(\"target\/${project.artifactId}-1.0.jar\", \"${hat.target}\")\n-              )\n-           )\n-        )\n-     )\n-  );\n-\n-   \/\/ Here we create examples\/pom.xml and nested inside we create each example\/*\/pom.xml\n-   examples.createPom(pomComment, examplesPom -> examplesPom\n-     .comment(\"Auto generated by mkpoms\")\n-     .pom(\"oracle.code\", \"hat-examples\", \"1.0\")\n-     .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n-     .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n-     .modules(modules -> examples.subDirs().filter(dir -> !dir.matches(\"^.*(experiments|nbody|target|.idea)$\")).forEach(example -> {\n-        modules.module(example.fileName());\n-        \/\/ here is the 'nested example\/*\/pom.xml\n-        example.createPom(pomComment, examplePom -> examplePom\n-           .comment(\"Auto generated by mkpoms\")\n-           .jar(\"oracle.code\", \"hat-example-\" + example.fileName(), \"1.0\")\n-           .parent(\"oracle.code\", \"hat-examples\", \"1.0\")\n-           .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n-           .build(build -> build\n-              .plugins(plugins -> plugins\n-                 .antPluginExecutions(executions -> executions\n-                    \/\/ We copy the example jar to the build dir here\n-                    .ant(\"1\",\"install\", \"run\", ant -> ant\n-                       .copy(\"target\/hat-example-\" + example.fileName() + \"-1.0.jar\", \"${hat.target}\")\n-                    )\n-                 )\n-              )\n-           )\n-        );\n-     }))\n+   hatCoreDir.pom(pomComment, pom -> pom\n+      .comment(\"Auto generated by mkpoms\")\n+      .jar(\"oracle.code\", \"hat\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .dependencies(dependencies -> dependencies\n+         .dependency(\"org.junit.jupiter\", \"junit-jupiter-engine\", \"5.10.0\", \"test\")\n+      )\n+      .build(build -> build\n+         .pluginManagement(pluginManagement -> pluginManagement\n+            .plugins(plugins -> plugins\n+               .plugin(\"org.apache.maven.plugins\", \"maven-surefire-plugin\", \"3.1.2\", plugin -> plugin\n+                  .configuration(configuration -> configuration\n+                     .argLine(\"-enable-preview\")\n+                  )\n+               )\n+            )\n+         )\n+         .plugins(plugins -> plugins\n+            .antPlugin(plugin -> plugin\n+               .executions(executions -> executions\n+                  .ant(\"1\", \"install\", \"run\", ant -> ant\n+                     .copy(\"target\/${project.artifactId}-1.0.jar\", \"${hat.build}\")\n+                  )\n+               )\n+            )\n+         )\n+      )\n+   );\n+\n+   Predicate<Dir> extractionPredicate = example -> !example.matches(\"^.*(target)$\");\n+   extractions.pom(pomComment, pom -> pom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-extractions\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .modules(modules -> extractions.subDirs().filter(extractionPredicate).forEach(extraction -> {\n+         modules.module(extraction.fileName());\n+         extraction.pom(pomComment, examplePom -> examplePom\n+            .comment(\"Auto generated by mkpoms\")\n+            .pom(\"oracle.code\", \"hat-extraction-\" + extraction.fileName(), \"1.0\")\n+            .parent(\"oracle.code\", \"hat-extractions\", \"1.0\")\n+            .build(build -> build\n+               .plugins(plugins -> plugins\n+                  .execPlugin(plugin -> plugin\n+                     .executions(execution -> execution\n+                        .execIdPhaseConf(\"2\", \"compile\", configuration -> configuration\n+                           .executable(\"jextract\")\n+                           .workingDirectory(\"${hat.stage.jextract}\")\n+                           .arguments(arguments -> {arguments\n+                              .argument(\"--output\").argument(\"${hat.stage.jextract}\")\n+                              .argument(\"-t\").argument(extraction.fileName());\n+                              switch (extraction.fileName()) {\n+                                 case \"opencl\" -> arguments\n+                                    .argument(\"-l\").argument(\"${mac.lib.frameworks}\/OpenCL.framework\/OpenCL\")\n+                                    .argument(\"${mac.app.frameworks}\/OpenCL.framework\/Headers\/opencl.h\");\n+                                 case \"opengl\" -> arguments\n+                                    .argument(\"-l\").argument(\"${mac.lib.frameworks}\/GLUT.framework\/GLUT\")\n+                                    .argument(\"-l\").argument(\"${mac.lib.frameworks}\/OpenGL.framework\/OpenGL\")\n+                                    .argument(\"${mac.app.frameworks}\/GLUT.framework\/Headers\/glut.h\");\n+                                 default ->\n+                                    throw new IllegalStateException(\"Unexpected value: \" + extraction.fileName());\n+                              };\n+                           })\n+                        )\n+                     )\n+                  )\n+               )\n+            )\n+         );\n+      }))\n+      .build(build -> build\n+         .plugins(plugins -> plugins\n+            .antPlugin(plugin -> plugin\n+               .executions(executions -> executions\n+                  .ant(\"createDir\", \"compile\", \"run\", ant -> ant\n+                     .mkdir(\"${hat.stage.jextract}\")\n+                     .echo(\"${hat.stage.jextract}\/compile_flags.txt\", \"-F${mac.app.frameworks}\")\n+                  )\n+               )\n+            )\n+         )\n+      )\n@@ -143,27 +177,64 @@\n-   \/\/ Now backends\/pom.xml and backends\/*\/pom.xml\n-   backends.createPom(pomComment, backendsPom -> backendsPom\n-     .comment(\"Auto generated by mkpoms\")\n-     .pom(\"oracle.code\", \"hat-backends\", \"1.0\")\n-     .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n-     .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n-     .modules(modules -> backends.subDirs().filter(dir -> !dir.matches(\"^.*(spirv|hip|shared|openclx|target|.idea)$\")).forEach(backend -> {\n-        modules.module(backend.fileName());\n-\n-        \/\/ here is the 'nested backends\/*\/pom.xml\n-        backend.createPom(pomComment, backendPom ->{backendPom\n-           .comment(\"Auto generated by mkpoms\")\n-           .jar(\"oracle.code\", \"hat-backend-\" + backend.fileName(), \"1.0\")\n-           .parent(\"oracle.code\", \"hat-backends\", \"1.0\")\n-           .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n-           .build(build -> build\n-              .plugins(plugins -> {plugins\n-                 .execPlugin(plugin -> plugin.configuration(conf -> conf.skip(\"true\")))\n-                 .antPluginExecutions(executions -> executions\n-                    .ant(\"1\", \"install\", \"run\", ant -> ant\n-                       .copy(\"target\/hat-backend-\" + backend.fileName() + \"-1.0.jar\", \"${hat.target}\")\n-                    )\n-\/\/                    .ant(\"2\", \"generate-sources\", \"run\", ant -> ant\n-\/\/                       .echo(\"in generate sources phase\")\n-\/\/                    )\n-                 );\n-              })\n+\n+    Predicate<Dir> examplePredicate = example -> !example.matches(\"^.*(experiments|target|nbody|.idea)$\");\n+\n+    \/\/ Here we create examples\/pom.xml and nested inside we create each example\/*\/pom.xml\n+    examples.pom(pomComment, examplesPom -> examplesPom\n+      .comment(\"Auto generated by mkpoms\")\n+      .pom(\"oracle.code\", \"hat-examples\", \"1.0\")\n+      .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+      .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n+      .modules(modules -> examples.subDirs().filter(examplePredicate).forEach(example -> {\n+         modules.module(example.fileName());\n+         \/\/ here is the 'nested example\/*\/pom.xml\n+         example.pom(pomComment, examplePom -> examplePom\n+            .comment(\"Auto generated by mkpoms\")\n+            .jar(\"oracle.code\", \"hat-example-\" + example.fileName(), \"1.0\")\n+            .parent(\"oracle.code\", \"hat-examples\", \"1.0\")\n+            .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n+            .build(build -> build\n+               .plugins(plugins -> plugins\n+                  .antPlugin(plugin -> plugin\n+                     .executions(executions -> executions\n+                        .ant(\"1\", \"install\", \"run\", ant -> ant\n+                           .copy(\"target\/hat-example-\" + example.fileName() + \"-1.0.jar\", \"${hat.build}\")\n+                        )\n+                     )\n+                  )\n+               )\n+            )\n+         );\n+      }))\n+    );\n+\n+    \/\/ Now backends\/pom.xml and backends\/*\/pom.xml\n+    Predicate<Dir> backendPredicate = backend -> !backend.matches(\"^.*(hip|spirv|shared|openclx|target|.idea)$\");\n+\n+    backends.pom(pomComment, backendsPom -> backendsPom\n+       .comment(\"Auto generated by mkpoms\")\n+       .pom(\"oracle.code\", \"hat-backends\", \"1.0\")\n+       .parent(\"oracle.code\", \"hat-root\", \"1.0\")\n+       .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n+       .modules(modules -> backends.subDirs().filter(backendPredicate).forEach(backend -> {\n+           modules.module(backend.fileName());\n+           \/\/ here is the 'nested backends\/*\/pom.xml\n+           backend.pom(pomComment, backendPom -> backendPom\n+              .comment(\"Auto generated by mkpoms\")\n+              .jar(\"oracle.code\", \"hat-backend-\" + backend.fileName(), \"1.0\")\n+              .parent(\"oracle.code\", \"hat-backends\", \"1.0\")\n+              .dependsOn(\"oracle.code\", \"hat\", \"1.0\")\n+              .build(build -> build\n+                 .plugins(plugins -> { plugins\n+                     .execPlugin(plugin -> plugin\n+                       .configuration(conf -> conf\n+                          .skip(\"true\")\n+                       )\n+                     )\n+                     .antPlugin(plugin -> plugin\n+                        .executions(executions -> executions\n+                           .ant(\"1\", \"install\", \"run\", ant -> ant\n+                              .copy(\"target\/hat-backend-\" + backend.fileName() + \"-1.0.jar\", \"${hat.build}\")\n+                           )\n+                        )\n+                     );\n+                 })\n+              )\n@@ -171,11 +242,13 @@\n-        });\n-     }))\n-     .build(build -> build\n-        .plugins(plugins -> plugins\n-           .execPluginExecutions(e -> e\n-              .cmake(\"1\",\"compile\", \"-DHAT_TARGET=${hat.target}\", \"-B\", \"${hat.target}\/cmake-build-debug\")\n-              .cmake(\"2\" ,\"install\", \"--build\",\"${hat.target}\/cmake-build-debug\")\n-           )\n-        )\n-     )\n-  );\n+         })\n+       )\n+       .build(build -> build\n+          .plugins(plugins -> plugins\n+              .execPlugin(plugin -> plugin\n+                  .executions(executions -> executions\n+                      .cmake(\"1\", \"compile\", \"-DHAT_TARGET=${hat.build}\", \"-B\", \"${hat.build}\/cmake-build-debug\")\n+                      .cmake(\"2\", \"install\", \"--build\", \"${hat.build}\/cmake-build-debug\")\n+                  )\n+              )\n+          )\n+       )\n+   );\n","filename":"hat\/mkpoms","additions":186,"deletions":113,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -33,1 +33,7 @@\n-        <hat.target>${env.PWD}\/build<\/hat.target>\n+        <hat.root>${env.PWD}<\/hat.root>\n+        <hat.build>${hat.root}\/build<\/hat.build>\n+        <hat.stage>${hat.root}\/stage<\/hat.stage>\n+        <hat.stage.repo>${hat.stage}\/repo<\/hat.stage.repo>\n+        <hat.stage.jextract>${hat.stage}\/jextract<\/hat.stage.jextract>\n+        <mac.app.frameworks>\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks<\/mac.app.frameworks>\n+        <mac.lib.frameworks>\/System\/Library\/Frameworks<\/mac.lib.frameworks>\n@@ -37,0 +43,1 @@\n+        <module>extractions<\/module>\n","filename":"hat\/pom.xml","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}