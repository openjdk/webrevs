{"files":[{"patch":"@@ -200,5 +200,4 @@\n-        Value val = op.operands().getFirst();\n-        while (!(val instanceof Block.Parameter)) {\n-            Op root = ((Op.Result) val).op();\n-            if (root.operands().isEmpty()) { \/\/ if the \"root op\" is an invoke\n-                return root.result();\n+        while (op.operands().getFirst() instanceof Op.Result r) {\n+            op = r.op();\n+            if (op.operands().isEmpty()) { \/\/ if the \"root op\" is an invoke\n+                return op.result();\n@@ -206,1 +205,0 @@\n-            val = root.operands().getFirst();\n@@ -208,1 +206,1 @@\n-        return val;\n+        return op.operands().getFirst();\n","filename":"hat\/core\/src\/main\/java\/hat\/BufferTagger.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.List;\n@@ -294,1 +295,2 @@\n-        ArrayList<BufferTagger.AccessType> bufferAccessList = kernelCallGraph.bufferAccessList;\n+        List<BufferTagger.AccessType> bufferAccessList = kernelCallGraph.bufferAccessList;\n+        boolean bufferTagging = Boolean.getBoolean(\"bufferTagging\");\n@@ -332,1 +334,1 @@\n-                    assert bufferAccessList.get(i).value == accessByte;\n+                    if (bufferTagging) assert bufferAccessList.get(i).value == accessByte;\n","filename":"hat\/core\/src\/main\/java\/hat\/buffer\/ArgArray.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    public static boolean bufferTagging = Boolean.getBoolean(\"bufferTagging\");\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/CallGraph.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    public final ArrayList<BufferTagger.AccessType> bufferAccessList;\n+    public final List<BufferTagger.AccessType> bufferAccessList;\n@@ -82,1 +82,3 @@\n-        bufferAccessList = BufferTagger.getAccessList(computeContext.accelerator.lookup, entrypoint.funcOp());\n+        System.out.println(\"-DbufferTagging=\"+CallGraph.bufferTagging);\n+        System.out.println(\"-DnoModuleOp=\"+CallGraph.noModuleOp);\n+        bufferAccessList = CallGraph.bufferTagging?BufferTagger.getAccessList(computeContext.accelerator.lookup, entrypoint.funcOp()):List.of();\n","filename":"hat\/core\/src\/main\/java\/hat\/callgraph\/KernelCallGraph.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1288,0 +1288,1 @@\n+        public boolean bufferTagging;\n@@ -1350,0 +1351,4 @@\n+\n+        public void bufferTagging() {\n+            this.bufferTagging = true;\n+        }\n@@ -1384,0 +1389,3 @@\n+        if (javaBuilder.bufferTagging) {\n+            result.opts.add(\"-DbufferTagging=true\");\n+        }\n","filename":"hat\/hat\/Script.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+     boolean bufferTagging = false;\n@@ -76,0 +77,1 @@\n+                   case \"bufferTagging\" -> bufferTagging = true;\n@@ -184,0 +186,1 @@\n+              .when(config.bufferTagging, Script.JavaBuilder::bufferTagging)\n","filename":"hat\/hat\/run.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}