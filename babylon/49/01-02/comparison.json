{"files":[{"patch":"@@ -86,1 +86,1 @@\n-    public static int leftShift(int l, int r) {\n+    public static int lshl(int l, int r) {\n@@ -90,1 +90,1 @@\n-    public static int rightShift(int l, int r) {\n+    public static int ashr(int l, int r) {\n@@ -94,1 +94,1 @@\n-    public static int unsignedRightShift(int l, int r) {\n+    public static int lshr(int l, int r) {\n@@ -98,1 +98,1 @@\n-    public static int leftShift(int l, long r) {\n+    public static int lshl(int l, long r) {\n@@ -102,1 +102,1 @@\n-    public static int rightShift(int l, long r) {\n+    public static int ashr(int l, long r) {\n@@ -106,1 +106,1 @@\n-    public static int unsignedRightShift(int l, long r) {\n+    public static int lshr(int l, long r) {\n@@ -172,1 +172,1 @@\n-    public static long leftShift(long l, long r) {\n+    public static long lshl(long l, long r) {\n@@ -176,1 +176,1 @@\n-    public static long rightShift(long l, long r) {\n+    public static long ashr(long l, long r) {\n@@ -180,1 +180,1 @@\n-    public static long unsignedRightShift(long l, long r) {\n+    public static long lshr(long l, long r) {\n@@ -184,1 +184,1 @@\n-    public static long leftShift(long l, int r) {\n+    public static long lshl(long l, int r) {\n@@ -188,1 +188,1 @@\n-    public static long rightShift(long l, int r) {\n+    public static long ashr(long l, int r) {\n@@ -192,1 +192,1 @@\n-    public static long unsignedRightShift(long l, int r) {\n+    public static long lshr(long l, int r) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/interpreter\/InvokableLeafOps.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2073,0 +2073,1 @@\n+                \/\/ @@@ potentially handle shift input conversion like other binary ops\n@@ -2099,3 +2100,4 @@\n-                    case SL -> append(CoreOps.leftShift(lhs, rhs));\n-                    case SR -> append(CoreOps.rightShift(lhs, rhs));\n-                    case USR -> append(CoreOps.unsignedRightShift(lhs, rhs));\n+                    \/\/ Shift operations\n+                    case SL -> append(CoreOps.lshl(lhs, rhs));\n+                    case SR -> append(CoreOps.ashr(lhs, rhs));\n+                    case USR -> append(CoreOps.lshr(lhs, rhs));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}