{"files":[{"patch":"@@ -198,1 +198,1 @@\n-    public static ClassModel addOpByteCodeToClassFile(MethodHandles.Lookup lookup, ClassModel cm, String methodName, FuncOp builderOp) {\n+    public static byte[] addOpByteCodeToClassFile(MethodHandles.Lookup lookup, ClassModel cm, String methodName, FuncOp builderOp) {\n@@ -208,1 +208,1 @@\n-        return ClassFile.of().parse(newBytes);\n+        return newBytes;\n@@ -864,1 +864,1 @@\n-                                        ((JavaType) op.resultType()).toNominalDescriptor(),\n+                                        jt.toNominalDescriptor(),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/code\/bytecode\/BytecodeGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -19,0 +20,1 @@\n+import java.lang.reflect.code.type.MethodRef;\n@@ -51,1 +53,0 @@\n-        ClassPrinter.toYaml(CLASS_MODEL, ClassPrinter.Verbosity.TRACE_ALL, System.out::print);\n@@ -54,5 +55,17 @@\n-    @Test\n-    void test() {\n-        var inputCm = CLASS_MODEL;\n-        var opFieldsAndIRs = getOpFieldsAndIRs(inputCm);\n-        var cm = removeOpFields(inputCm);\n+    @DataProvider\n+    byte[][] classes() {\n+        try {\n+            return new byte[][] {\n+                    IR.class.getResourceAsStream(\"IR.class\").readAllBytes()\n+            };\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"classes\")\n+    void test(byte[] cd) throws Throwable {\n+        var cf = ClassFile.of();\n+        var cm = cf.parse(cd);\n+        var opFieldsAndIRs = getOpFieldsAndIRs(cm);\n+        cd = removeOpFields(cm);\n@@ -62,1 +75,1 @@\n-            var builtOp = (Op) Interpreter.invoke(MethodHandles.lookup(), builderOp, ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY);\n+            var builtOp = (Op) Interpreter.invoke(builderOp, ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY);\n@@ -64,3 +77,13 @@\n-            cm = BytecodeGenerator.addOpByteCodeToClassFile(MethodHandles.lookup(), cm, opFieldAndIR.fieldName(), builderOp);\n-            Assert.assertTrue(cm.methods().stream().anyMatch(mm -> mm.methodName().equalsString(opFieldAndIR.fieldName())\n-                    && mm.methodTypeSymbol().returnType().equals(Op.class.describeConstable().get())));\n+\n+            cd = BytecodeGenerator.addOpByteCodeToClassFile(MethodHandles.lookup(), cm, opFieldAndIR.fieldName(), builderOp);\n+            cm = cf.parse(cd);\n+            Assert.assertEquals(cm.methods().stream().filter(mm -> mm.methodName().equalsString(opFieldAndIR.fieldName())).count(),\n+                    opFieldsAndIRs.size());\n+\n+            var l = MethodHandles.lookup().defineHiddenClass(cd, true);\n+            var mh = l.findStatic(l.lookupClass(),\n+                    opFieldAndIR.fieldName(),\n+                    MethodRef.toNominalDescriptor(builderOp.invokableType()).resolveConstantDesc(l));\n+            Assert.assertEquals(\n+                    ((Op) mh.invoke(ExtendedOp.FACTORY, CoreTypeFactory.CORE_TYPE_FACTORY)).toText(),\n+                    opFieldAndIR.ir());\n@@ -68,1 +91,5 @@\n-        ClassPrinter.toYaml(cm, ClassPrinter.Verbosity.TRACE_ALL, System.out::print);\n+        print(cm);\n+    }\n+\n+    static void print(byte[] bytes) {\n+        print(ClassFile.of().parse(bytes));\n@@ -71,0 +98,3 @@\n+    static void print(ClassModel cm) {\n+        ClassPrinter.toYaml(cm, ClassPrinter.Verbosity.TRACE_ALL, System.out::print);\n+    }\n@@ -84,1 +114,1 @@\n-                res.add(new OpFieldAndIR(fi.name().stringValue(), pe.stringValue()));\n+                res.add(new OpFieldAndIR(fi.name().stringValue().substring(fi.name().stringValue().indexOf(':') + 2), pe.stringValue()));\n@@ -93,1 +123,2 @@\n-        var cm = removeOpFields(CLASS_MODEL);\n+        var bytes = removeOpFields(CLASS_MODEL);\n+        var cm = ClassFile.of().parse(bytes);\n@@ -99,1 +130,0 @@\n-        ClassPrinter.toYaml(cm, ClassPrinter.Verbosity.TRACE_ALL, System.out::print);\n@@ -102,1 +132,1 @@\n-    private ClassModel removeOpFields(ClassModel cm) {\n+    private byte[] removeOpFields(ClassModel cm) {\n@@ -131,1 +161,1 @@\n-        return ClassFile.of().parse(bytes);\n+        return bytes;\n","filename":"test\/jdk\/java\/lang\/reflect\/code\/writer\/TestOpMethod.java","additions":46,"deletions":16,"binary":false,"changes":62,"status":"modified"}]}