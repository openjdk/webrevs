{"files":[{"patch":"@@ -2024,1 +2024,1 @@\n-                    Value rhs = toValue(tree.arg);\n+                    Value rhs = toValue(tree.arg, tree.type);\n@@ -2028,1 +2028,1 @@\n-                    Value rhs = toValue(tree.arg);\n+                    Value rhs = toValue(tree.arg, tree.type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ReflectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -653,0 +653,60 @@\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test30\" (%0 : java.lang.Integer)void -> {\n+                  %1 : Var<java.lang.Integer> = var %0 @\"i\";\n+                  %2 : java.lang.Integer = var.load %1;\n+                  %3 : int = invoke %2 @\"java.lang.Integer::intValue()int\";\n+                  %4 : int = neg %3;\n+                  %5 : Var<int> = var %4 @\"j\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test30(Integer i) {\n+        int j = -i;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test31\" (%0 : int)void -> {\n+                  %1 : Var<int> = var %0 @\"i\";\n+                  %2 : int = var.load %1;\n+                  %3 : int = neg %2;\n+                  %4 : java.lang.Integer = invoke %3 @\"java.lang.Integer::valueOf(int)java.lang.Integer\";\n+                  %5 : Var<java.lang.Integer> = var %4 @\"j\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test31(int i) {\n+        Integer j = -i;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test32\" (%0 : boolean)void -> {\n+                  %1 : Var<boolean> = var %0 @\"i\";\n+                  %2 : boolean = var.load %1;\n+                  %3 : boolean = not %2;\n+                  %4 : java.lang.Boolean = invoke %3 @\"java.lang.Boolean::valueOf(boolean)java.lang.Boolean\";\n+                  %5 : Var<java.lang.Boolean> = var %4 @\"j\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test32(boolean i) {\n+        Boolean j = !i;\n+    }\n+\n+    @CodeReflection\n+    @IR(\"\"\"\n+            func @\"test33\" (%0 : java.lang.Boolean)void -> {\n+                  %1 : Var<java.lang.Boolean> = var %0 @\"i\";\n+                  %2 : java.lang.Boolean = var.load %1;\n+                  %3 : boolean = invoke %2 @\"java.lang.Boolean::booleanValue()boolean\";\n+                  %4 : boolean = not %3;\n+                  %5 : Var<boolean> = var %4 @\"j\";\n+                  return;\n+            };\n+            \"\"\")\n+    static void test33(Boolean i) {\n+        boolean j = !i;\n+    }\n","filename":"test\/langtools\/tools\/javac\/reflect\/BoxingConversionTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.reflect.code.Value;\n@@ -38,0 +39,1 @@\n+import java.util.Iterator;\n@@ -64,1 +66,3 @@\n-        assertEquals(((Var)quoted.capturedValues().values().iterator().next()).value(), x);\n+        Iterator<Object> it = quoted.capturedValues().values().iterator();\n+        assertEquals(((Var)it.next()).value(), hello);\n+        assertEquals(((Var)it.next()).value(), x);\n","filename":"test\/langtools\/tools\/javac\/reflect\/quoted\/TestCaptureQuotable.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}