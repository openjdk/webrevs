{"files":[{"patch":"@@ -28,1 +28,1 @@\n-    OpenCLBackend backend(OpenCLBackend::OpenCLConfig::GPU_BIT);\n+    OpenCLBackend backend(0);\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/info.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-       gpu((configBits&GPU_BIT)==GPU_BIT),\n-       cpu((configBits&CPU_BIT)==CPU_BIT),\n@@ -43,3 +41,1 @@\n-       device((configBits&0xf0)>>4)\n-\n-       {\n+       device((configBits&0xf0)>>4){\n@@ -49,2 +45,0 @@\n-          std::cout << \"native gpu \" << gpu<<std::endl;\n-          std::cout << \"native cpu \" << cpu<<std::endl;\n@@ -194,15 +188,6 @@\n-            \/\/ we use static cast because the ptr type is void*\n-            static_cast<OpenCLProgram::OpenCLKernel::OpenCLBuffer *>(bufferState->vendorPtr)->copyFromDevice();\n-              if (openclConfig.traceEnqueues | openclConfig.traceCopies){\n-                 std::cout << \"copying buffer from device (from java access) \"<< std::endl;\n-              }\n-                     \/\/  if (openclConfig.traceCopies){\n-                         \/\/ std::cout << \"copying buffer from device \"<< std::endl;\n-                       \/\/   bufferState->dump(\"After copy from device\");\n-                     \/\/  }\n-                       openclQueue.wait();\n-                       openclQueue.release();\n-                      \/\/  bufferState->dump(\"1 After copy from device\");\n-                     \/\/ we don't clear the deviceDirty because we may have only read!  bufferState->clearDeviceDirty();\n-                       \/\/ bufferState->dump(\"2 After copy from device\");\n-        \/\/  std::cout << \"We have pulled the buffer from the device and cleared device dirty flag\"<<std::endl;\n+          static_cast<OpenCLProgram::OpenCLKernel::OpenCLBuffer *>(bufferState->vendorPtr)->copyFromDevice();\n+          if (openclConfig.traceEnqueues | openclConfig.traceCopies){\n+             std::cout << \"copying buffer from device (from java access) \"<< std::endl;\n+          }\n+          openclQueue.wait();\n+          openclQueue.release();\n@@ -223,5 +208,0 @@\n-    if (openclConfig.trace){\n-        std::cout << \"openclConfig->gpu\" << (openclConfig.gpu ? \"true\" : \"false\") << std::endl;\n-        std::cout << \"openclConfig->minimizeCopies\" << (openclConfig.minimizeCopies ? \"true\" : \"false\") << std::endl;\n-    }\n-    cl_device_type requestedType =openclConfig.gpu ? CL_DEVICE_TYPE_GPU : CL_DEVICE_TYPE_CPU;\n@@ -232,3 +212,8 @@\n-        if (status != CL_SUCCESS){\n-           std::cerr << \"clGetPlatformIDs (to get count) failed \" << errorMsg(status)<<std::endl;\n-        }\n+        std::cerr << \"clGetPlatformIDs (to get count) failed \" << errorMsg(status)<<std::endl;\n+        std::exit(1);\n+        return;\n+    }\n+\n+    if (openclConfig.platform >= platformc){\n+        std::cerr << \"We only have \"<<platformc<<\" platform\"<<((platformc>1)?\"s\":\"\")<<\" (platform[0]-platform[\"<<(platformc-1)<<\"] inclusive) you requested platform[\"<<openclConfig.platform<<\"]\"<< std::endl;\n+        std::exit(1);\n@@ -239,3 +224,2 @@\n-         if (status != CL_SUCCESS){\n-            std::cerr << \"clGetPlatformIDs failed \" << errorMsg(status)<<std::endl;\n-         }\n+        std::cerr << \"clGetPlatformIDs failed \" << errorMsg(status)<<std::endl;\n+        std::exit(1);\n@@ -244,1 +228,0 @@\n-\n@@ -246,3 +229,2 @@\n-    for (unsigned int i = 0; devicec == 0 && i < platformc; ++i) {\n-        platform_id = platforms[i];\n-        if ((status = clGetDeviceIDs(platform_id, requestedType, 0, NULL, &devicec)) != CL_SUCCESS) {\n+        platform_id = platforms[openclConfig.platform];\n+        if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, 0, NULL, &devicec)) != CL_SUCCESS) {\n@@ -255,1 +237,8 @@\n-    }\n+       if (openclConfig.device >= devicec){\n+            std::cerr << \"Platform[\"<<openclConfig.platform<<\"] only has \"<<devicec<<\" device\"<<((devicec>1)?\"s\":\"\")<<\" (device[0]-device[\"<<(devicec-1)<<\"] inclusive) and you requested device[\"<<openclConfig.device<<\"]\"<< std::endl;\n+            std::cerr << \"No device available \" << errorMsg(CL_DEVICE_NOT_AVAILABLE)<<std::endl;\n+              delete[] platforms;\n+            std::exit(1);\n+            return;\n+        }\n+\n@@ -259,0 +248,1 @@\n+          delete[] platforms;\n@@ -262,2 +252,1 @@\n-    if ((status = clGetDeviceIDs(platform_id, requestedType, devicec, device_ids, NULL)) != CL_SUCCESS) {\n-\n+    if ((status = clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, devicec, device_ids, NULL)) != CL_SUCCESS) {\n@@ -269,1 +258,1 @@\n-    if ((context = clCreateContext(0, 1, device_ids, NULL, NULL, &status)) == NULL || status != CL_SUCCESS) {\n+    if ((context = clCreateContext(nullptr, 1, &device_ids[openclConfig.device], NULL, NULL, &status)) == NULL || status != CL_SUCCESS) {\n@@ -290,0 +279,1 @@\n+\n@@ -296,8 +286,0 @@\n-\/*\n-  static char *strInfo(cl_device_id device_id, cl_device_info device_info){\n-     size_t sz;\n-     cl_int  status = clGetDeviceInfo(device_id, device_info, 0, nullptr,  &sz);\n-     char *ptr = new char[sz+1];\n-     status = clGetDeviceInfo(device_id, device_info, sz, ptr,nullptr);\n-     return ptr;\n-  }\n@@ -305,24 +287,0 @@\n-  static cl_int cl_int_info(cl_device_id device_id, cl_device_info device_info){\n-     cl_uint v;\n-     cl_int status = clGetDeviceInfo(device_id, device_info, sizeof(v), &v, nullptr);\n-     return v;\n-  }\n-  static cl_ulong cl_ulong_info(cl_device_id device_id, cl_device_info device_info){\n-     cl_ulong v;\n-     cl_int status = clGetDeviceInfo(device_id, device_info, sizeof(v), &v, nullptr);\n-     return v;\n-  }\n-  static size_t size_t_info(cl_device_id device_id, cl_device_info device_info){\n-     size_t v;\n-     cl_int status = clGetDeviceInfo(device_id, device_info, sizeof(v), &v, nullptr);\n-     return v;\n-  }\n-\n-  static char *strInfo(cl_platform_id platform_id,cl_platform_info platform_info){\n-       size_t sz;\n-       cl_int  status = clGetPlatformInfo(platform_id, platform_info, 0, nullptr,  &sz);\n-       char *ptr = new char[sz+1];\n-       status = clGetPlatformInfo(platform_id, platform_info, sz, ptr,nullptr);\n-       return ptr;\n-  }\n-  *\/\n","filename":"hat\/backends\/ffi\/opencl\/cpp\/opencl_backend.cpp","additions":31,"deletions":73,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -52,14 +52,12 @@\n-        const static  int GPU_BIT =1<<START_BIT_IDX;\n-        const static  int CPU_BIT =1<<17;\n-        const static  int MINIMIZE_COPIES_BIT =1<<18;\n-        const static  int TRACE_BIT =1<<19;\n-        const static  int PROFILE_BIT =1<<20;\n-        const static  int SHOW_CODE_BIT = 1 << 21;\n-        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 22;\n-        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<23;\n-        const static  int INFO_BIT = 1<<24;\n-        const static  int TRACE_COPIES_BIT = 1 <<25;\n-        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<26;\n-        const static  int TRACE_ENQUEUES_BIT = 1 <<27;\n-        const static  int TRACE_CALLS_BIT = 1 <<28;\n-        const static  int END_BIT_IDX = 29;\n+        const static  int MINIMIZE_COPIES_BIT =1<<START_BIT_IDX;\n+        const static  int TRACE_BIT =1<<17;\n+        const static  int PROFILE_BIT =1<<18;\n+        const static  int SHOW_CODE_BIT = 1 << 19;\n+        const static  int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n+        const static  int SHOW_COMPUTE_MODEL_BIT = 1 <<21;\n+        const static  int INFO_BIT = 1<<22;\n+        const static  int TRACE_COPIES_BIT = 1 <<23;\n+        const static  int TRACE_SKIPPED_COPIES_BIT = 1 <<24;\n+        const static  int TRACE_ENQUEUES_BIT = 1 <<25;\n+        const static  int TRACE_CALLS_BIT = 1 <<26;\n+        const static  int END_BIT_IDX = 27;\n@@ -69,2 +67,0 @@\n-        bool gpu;\n-        bool cpu;\n@@ -188,2 +184,0 @@\n-              \"GPU\",\n-              \"CPU\",\n","filename":"hat\/backends\/ffi\/opencl\/include\/opencl_backend.h","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,311 +0,0 @@\n-package hat.backend.ffi;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-public record Config(int bits) {\n-    record Bit(int index, String name) {\n-    }\n-\n-    ;\n-    \/\/ These must sync with hat\/backends\/ffi\/opencl\/include\/opencl_backend.h\n-    \/\/ Bits 0-3 select platform id 0..5\n-    \/\/ Bits 4-7 select device id 0..15\n-    private static final int START_BIT_IDX = 16;\n-    private static final int GPU_BIT = 1 << START_BIT_IDX;\n-    private static final int CPU_BIT = 1 << 17;\n-    private static final int MINIMIZE_COPIES_BIT = 1 << 18;\n-    private static final int TRACE_BIT = 1 << 19;\n-    private static final int PROFILE_BIT = 1 << 20;\n-    private static final int SHOW_CODE_BIT = 1 << 21;\n-    private static final int SHOW_KERNEL_MODEL_BIT = 1 << 22;\n-    private static final int SHOW_COMPUTE_MODEL_BIT = 1 << 23;\n-    private static final int INFO_BIT = 1 << 24;\n-    private static final int TRACE_COPIES_BIT = 1 << 25;\n-    private static final int TRACE_SKIPPED_COPIES_BIT = 1 << 26;\n-    private static final int TRACE_ENQUEUES_BIT = 1 << 27;\n-    private static final int TRACE_CALLS_BIT = 1 << 28;\n-    private static final int END_BIT_IDX = 29;\n-\n-    private static String[] bitNames = {\n-            \"GPU\",\n-            \"CPU\",\n-            \"MINIMIZE_COPIES\",\n-            \"TRACE\",\n-            \"PROFILE\",\n-            \"SHOW_CODE\",\n-            \"SHOW_KERNEL_MODEL\",\n-            \"SHOW_COMPUTE_MODEL\",\n-            \"INFO\",\n-            \"TRACE_COPIES\",\n-            \"TRACE_SKIPPED_COPIES\",\n-            \"TRACE_ENQUEUES\",\n-            \"TRACE_CALLS\"\n-    };\n-\n-    public static Config of() {\n-        if ((((System.getenv(\"HAT\") instanceof String e) ? e : \"\") +\n-                ((System.getProperty(\"HAT\") instanceof String p) ? p : \"\")) instanceof String opts) {\n-            return of(opts);\n-        }\n-        return of();\n-    }\n-\n-    public static Config of(int bits) {\n-        return new Config(bits);\n-    }\n-\n-    public static Config of(List<Config> configs) {\n-        int allBits = 0;\n-        for (Config config : configs) {\n-            allBits |= config.bits;\n-        }\n-        return new Config(allBits);\n-    }\n-\n-    public static Config of(Config... configs) {\n-        return of(List.of(configs));\n-    }\n-\n-    public Config and(Config... configs) {\n-        return Config.of(Config.of(List.of(configs)).bits & bits);\n-    }\n-\n-    public Config or(Config... configs) {\n-        return Config.of(Config.of(List.of(configs)).bits | bits);\n-    }\n-\n-    public static Config of(String name) {\n-        for (int i = 0; i < bitNames.length; i++) {\n-            if (bitNames[i].equals(name)) {\n-                return new Config(1 << (i + START_BIT_IDX));\n-            }\n-        }\n-\n-\n-\n-        if (name.contains(\",\")) {\n-            List<Config> configs = new ArrayList<>();\n-            Arrays.stream(name.split(\",\")).forEach(opt ->\n-                    configs.add(of(opt))\n-            );\n-            return of(configs);\n-        }else if (name.contains(\":\")){\n-            var tokens=name.split(\":\");\n-            if (tokens.length == 2) {\n-                if (tokens[0].equals(\"PLATFORM\")) {\n-                    int value = Integer.parseInt(tokens[1]);\n-                    return new Config(value);\n-                }else  if (tokens[0].equals(\"DEVICE\")) {\n-                    int value = Integer.parseInt(tokens[1]);\n-                    return new Config(value<<4);\n-                }else{\n-                    System.out.println(\"Unexpected opt '\" + name + \"'\");\n-                    return Config.of(0);\n-                }\n-            }else{\n-                System.out.println(\"Unexpected opt '\" + name + \"'\");\n-                return Config.of(0);\n-            }\n-        } else {\n-            System.out.println(\"Unexpected opt '\" + name + \"'\");\n-            return Config.of(0);\n-        }\n-    }\n-\n-    public static Config TRACE_COPIES() {\n-        return new Config(TRACE_COPIES_BIT);\n-    }\n-\n-    public boolean isTRACE_COPIES() {\n-        return (bits & TRACE_COPIES_BIT) == TRACE_COPIES_BIT;\n-    }\n-\n-    public static Config TRACE_CALLS() {\n-        return new Config(TRACE_CALLS_BIT);\n-    }\n-\n-    public boolean isTRACE_CALLS() {\n-        return (bits & TRACE_CALLS_BIT) == TRACE_CALLS_BIT;\n-    }\n-\n-    public static Config TRACE_ENQUEUES() {\n-        return new Config(TRACE_ENQUEUES_BIT);\n-    }\n-\n-    public boolean isTRACE_ENQUEUES() {\n-        return (bits & TRACE_ENQUEUES_BIT) == TRACE_ENQUEUES_BIT;\n-    }\n-\n-\n-    public static Config TRACE_SKIPPED_COPIES() {\n-        return new Config(TRACE_SKIPPED_COPIES_BIT);\n-    }\n-\n-    public boolean isTRACE_SKIPPED_COPIES() {\n-        return (bits & TRACE_SKIPPED_COPIES_BIT) == TRACE_SKIPPED_COPIES_BIT;\n-    }\n-\n-    public static Config INFO() {\n-        return new Config(INFO_BIT);\n-    }\n-\n-    public boolean isINFO() {\n-        return (bits & INFO_BIT) == INFO_BIT;\n-    }\n-\n-    public static Config CPU() {\n-        return new Config(CPU_BIT);\n-    }\n-\n-    public boolean isCPU() {\n-        return (bits & CPU_BIT) == CPU_BIT;\n-    }\n-\n-    public static Config GPU() {\n-        return new Config(GPU_BIT);\n-    }\n-\n-    public boolean isGPU() {\n-        return (bits & GPU_BIT) == GPU_BIT;\n-    }\n-\n-    public static Config PROFILE() {\n-        return new Config(PROFILE_BIT);\n-    }\n-\n-    public boolean isPROFILE() {\n-        return (bits & PROFILE_BIT) == PROFILE_BIT;\n-    }\n-\n-    public static Config TRACE() {\n-        return new Config(TRACE_BIT);\n-    }\n-\n-    public boolean isTRACE() {\n-        return (bits & TRACE_BIT) == TRACE_BIT;\n-    }\n-\n-    public static Config MINIMIZE_COPIES() {\n-        return new Config(MINIMIZE_COPIES_BIT);\n-    }\n-\n-    public boolean isMINIMIZE_COPIES() {\n-        String hex = Integer.toHexString(bits);\n-        return (bits & MINIMIZE_COPIES_BIT) == MINIMIZE_COPIES_BIT;\n-    }\n-\n-    public static Config SHOW_CODE() {\n-        return new Config(SHOW_CODE_BIT);\n-    }\n-\n-    public boolean isSHOW_CODE() {\n-        return (bits & SHOW_CODE_BIT) == SHOW_CODE_BIT;\n-    }\n-\n-    public static Config SHOW_KERNEL_MODEL() {\n-        return new Config(SHOW_KERNEL_MODEL_BIT);\n-    }\n-\n-    public boolean isSHOW_KERNEL_MODEL() {\n-        return (bits & SHOW_KERNEL_MODEL_BIT) == SHOW_KERNEL_MODEL_BIT;\n-    }\n-\n-    public static Config SHOW_COMPUTE_MODEL() {\n-        return new Config(SHOW_COMPUTE_MODEL_BIT);\n-    }\n-\n-    public boolean isSHOW_COMPUTE_MODEL() {\n-        return (bits & SHOW_COMPUTE_MODEL_BIT) == SHOW_COMPUTE_MODEL_BIT;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder builder = new StringBuilder();\n-        for (int bitIdx = START_BIT_IDX; bitIdx < END_BIT_IDX; bitIdx++) {\n-            if ((bits & (1 << bitIdx)) == (1 << bitIdx)) {\n-                if (!builder.isEmpty()) {\n-                    builder.append(\"|\");\n-                }\n-                builder.append(bitNames[bitIdx - START_BIT_IDX]);\n-\n-            }\n-        }\n-        \/*\n-        if (isTRACE_COPIES()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"TRACE_COPIES\");\n-        }\n-        if (isTRACE_SKIPPED_COPIES()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"TRACE_SKIPPED_COPIES\");\n-        }\n-        if (isINFO()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"INFO\");\n-        }\n-        if (isCPU()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"CPU\");\n-        }\n-        if (isGPU()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"GPU\");\n-        }\n-        if (isTRACE()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"TRACE\");\n-        }\n-        if (isPROFILE()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"PROFILE\");\n-        }\n-        if (isMINIMIZE_COPIES()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"MINIMIZE_COPIES\");\n-        }\n-        if (isSHOW_CODE()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"SHOW_CODE\");\n-        }\n-        if (isSHOW_COMPUTE_MODEL()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"SHOW_COMPUTE_MODEL\");\n-        }\n-        if (isSHOW_KERNEL_MODEL()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"SHOW_KERNEL_MODEL\");\n-        }\n-        if (isMINIMIZE_COPIES()) {\n-            if (!builder.isEmpty()) {\n-                builder.append(\"|\");\n-            }\n-            builder.append(\"MINIMIZE_COPIES\");\n-        } *\/\n-\n-        return builder.toString();\n-    }\n-}\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/Config.java","additions":0,"deletions":311,"binary":false,"changes":311,"status":"deleted"},{"patch":"@@ -40,1 +40,1 @@\n-    final Config config;\n+    final OpenCLConfig config;\n@@ -52,1 +52,1 @@\n-        this(Config.of(configSpec));\n+        this(OpenCLConfig.of(configSpec));\n@@ -54,1 +54,1 @@\n-    public OpenCLBackend(Config config) {\n+    public OpenCLBackend(OpenCLConfig config) {\n@@ -67,1 +67,1 @@\n-        this(Config.of().or(Config.GPU()));\n+        this(OpenCLConfig.of());\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLBackend.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,213 @@\n+package hat.backend.ffi;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public record OpenCLConfig(int bits) {\n+    record Bit(int index, String name) {\n+    }\n+\n+    \/\/ These must sync with hat\/backends\/ffi\/opencl\/include\/opencl_backend.h\n+    \/\/ Bits 0-3 select platform id 0..5\n+    \/\/ Bits 4-7 select device id 0..15\n+    private static final int START_BIT_IDX = 16;\n+    private static final int MINIMIZE_COPIES_BIT = 1 << 16;\n+    private static final int TRACE_BIT = 1 << 17;\n+    private static final int PROFILE_BIT = 1 << 18;\n+    private static final int SHOW_CODE_BIT = 1 << 19;\n+    private static final int SHOW_KERNEL_MODEL_BIT = 1 << 20;\n+    private static final int SHOW_COMPUTE_MODEL_BIT = 1 << 21;\n+    private static final int INFO_BIT = 1 << 22;\n+    private static final int TRACE_COPIES_BIT = 1 << 23;\n+    private static final int TRACE_SKIPPED_COPIES_BIT = 1 << 24;\n+    private static final int TRACE_ENQUEUES_BIT = 1 << 25;\n+    private static final int TRACE_CALLS_BIT = 1 << 26;\n+    private static final int END_BIT_IDX = 27;\n+\n+    private static String[] bitNames = {\n+            \"MINIMIZE_COPIES\",\n+            \"TRACE\",\n+            \"PROFILE\",\n+            \"SHOW_CODE\",\n+            \"SHOW_KERNEL_MODEL\",\n+            \"SHOW_COMPUTE_MODEL\",\n+            \"INFO\",\n+            \"TRACE_COPIES\",\n+            \"TRACE_SKIPPED_COPIES\",\n+            \"TRACE_ENQUEUES\",\n+            \"TRACE_CALLS\"\n+    };\n+\n+    public static OpenCLConfig of() {\n+        if ((((System.getenv(\"HAT\") instanceof String e) ? e : \"\") +\n+                ((System.getProperty(\"HAT\") instanceof String p) ? p : \"\")) instanceof String opts) {\n+            return of(opts);\n+        }\n+        return of();\n+    }\n+\n+    public static OpenCLConfig of(int bits) {\n+        return new OpenCLConfig(bits);\n+    }\n+\n+    public static OpenCLConfig of(List<OpenCLConfig> configs) {\n+        int allBits = 0;\n+        for (OpenCLConfig config : configs) {\n+            allBits |= config.bits;\n+        }\n+        return new OpenCLConfig(allBits);\n+    }\n+\n+    public static OpenCLConfig of(OpenCLConfig... configs) {\n+        return of(List.of(configs));\n+    }\n+\n+    public OpenCLConfig and(OpenCLConfig... configs) {\n+        return OpenCLConfig.of(OpenCLConfig.of(List.of(configs)).bits & bits);\n+    }\n+\n+    public OpenCLConfig or(OpenCLConfig... configs) {\n+        return OpenCLConfig.of(OpenCLConfig.of(List.of(configs)).bits | bits);\n+    }\n+\n+    public static OpenCLConfig of(String name) {\n+        for (int i = 0; i < bitNames.length; i++) {\n+            if (bitNames[i].equals(name)) {\n+                return new OpenCLConfig(1 << (i + START_BIT_IDX));\n+            }\n+        }\n+        if (name.contains(\",\")) {\n+            List<OpenCLConfig> configs = new ArrayList<>();\n+            Arrays.stream(name.split(\",\")).forEach(opt ->\n+                    configs.add(of(opt))\n+            );\n+            return of(configs);\n+        }else if (name.contains(\":\")){\n+            var tokens=name.split(\":\");\n+            if (tokens.length == 2) {\n+                if (tokens[0].equals(\"PLATFORM\")) {\n+                    int value = Integer.parseInt(tokens[1]);\n+                    return new OpenCLConfig(value);\n+                }else  if (tokens[0].equals(\"DEVICE\")) {\n+                    int value = Integer.parseInt(tokens[1]);\n+                    return new OpenCLConfig(value<<4);\n+                }else{\n+                    System.out.println(\"Unexpected opt '\" + name + \"'\");\n+                    return OpenCLConfig.of(0);\n+                }\n+            }else{\n+                System.out.println(\"Unexpected opt '\" + name + \"'\");\n+                return OpenCLConfig.of(0);\n+            }\n+        } else {\n+            System.out.println(\"Unexpected opt '\" + name + \"'\");\n+            return OpenCLConfig.of(0);\n+        }\n+    }\n+\n+    public static OpenCLConfig TRACE_COPIES() {\n+        return new OpenCLConfig(TRACE_COPIES_BIT);\n+    }\n+\n+    public boolean isTRACE_COPIES() {\n+        return (bits & TRACE_COPIES_BIT) == TRACE_COPIES_BIT;\n+    }\n+\n+    public static OpenCLConfig TRACE_CALLS() {\n+        return new OpenCLConfig(TRACE_CALLS_BIT);\n+    }\n+\n+    public boolean isTRACE_CALLS() {\n+        return (bits & TRACE_CALLS_BIT) == TRACE_CALLS_BIT;\n+    }\n+\n+    public static OpenCLConfig TRACE_ENQUEUES() {\n+        return new OpenCLConfig(TRACE_ENQUEUES_BIT);\n+    }\n+\n+    public boolean isTRACE_ENQUEUES() {\n+        return (bits & TRACE_ENQUEUES_BIT) == TRACE_ENQUEUES_BIT;\n+    }\n+\n+\n+    public static OpenCLConfig TRACE_SKIPPED_COPIES() {\n+        return new OpenCLConfig(TRACE_SKIPPED_COPIES_BIT);\n+    }\n+\n+    public boolean isTRACE_SKIPPED_COPIES() {\n+        return (bits & TRACE_SKIPPED_COPIES_BIT) == TRACE_SKIPPED_COPIES_BIT;\n+    }\n+\n+    public static OpenCLConfig INFO() {\n+        return new OpenCLConfig(INFO_BIT);\n+    }\n+\n+    public boolean isINFO() {\n+        return (bits & INFO_BIT) == INFO_BIT;\n+    }\n+\n+\n+    public static OpenCLConfig PROFILE() {\n+        return new OpenCLConfig(PROFILE_BIT);\n+    }\n+\n+    public boolean isPROFILE() {\n+        return (bits & PROFILE_BIT) == PROFILE_BIT;\n+    }\n+\n+    public static OpenCLConfig TRACE() {\n+        return new OpenCLConfig(TRACE_BIT);\n+    }\n+\n+    public boolean isTRACE() {\n+        return (bits & TRACE_BIT) == TRACE_BIT;\n+    }\n+\n+    public static OpenCLConfig MINIMIZE_COPIES() {\n+        return new OpenCLConfig(MINIMIZE_COPIES_BIT);\n+    }\n+\n+    public boolean isMINIMIZE_COPIES() {\n+        return (bits & MINIMIZE_COPIES_BIT) == MINIMIZE_COPIES_BIT;\n+    }\n+\n+    public static OpenCLConfig SHOW_CODE() {\n+        return new OpenCLConfig(SHOW_CODE_BIT);\n+    }\n+\n+    public boolean isSHOW_CODE() {\n+        return (bits & SHOW_CODE_BIT) == SHOW_CODE_BIT;\n+    }\n+\n+    public static OpenCLConfig SHOW_KERNEL_MODEL() {\n+        return new OpenCLConfig(SHOW_KERNEL_MODEL_BIT);\n+    }\n+\n+    public boolean isSHOW_KERNEL_MODEL() {\n+        return (bits & SHOW_KERNEL_MODEL_BIT) == SHOW_KERNEL_MODEL_BIT;\n+    }\n+\n+    public static OpenCLConfig SHOW_COMPUTE_MODEL() {\n+        return new OpenCLConfig(SHOW_COMPUTE_MODEL_BIT);\n+    }\n+\n+    public boolean isSHOW_COMPUTE_MODEL() {\n+        return (bits & SHOW_COMPUTE_MODEL_BIT) == SHOW_COMPUTE_MODEL_BIT;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        for (int bitIdx = START_BIT_IDX; bitIdx < END_BIT_IDX; bitIdx++) {\n+            if ((bits & (1 << bitIdx)) == (1 << bitIdx)) {\n+                if (!builder.isEmpty()) {\n+                    builder.append(\"|\");\n+                }\n+                builder.append(bitNames[bitIdx - START_BIT_IDX]);\n+\n+            }\n+        }\n+        return builder.toString();\n+    }\n+}\n","filename":"hat\/backends\/ffi\/opencl\/src\/main\/java\/hat\/backend\/ffi\/OpenCLConfig.java","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n-import static hat.backend.ffi.Config.*;\n+import static hat.backend.ffi.OpenCLConfig.*;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/Mesh.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import static hat.backend.ffi.Config.*;\n+import static hat.backend.ffi.OpenCLConfig.*;\n","filename":"hat\/examples\/experiments\/src\/main\/java\/experiments\/MinBufferTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import hat.backend.ffi.Config;\n+import hat.backend.ffi.OpenCLConfig;\n@@ -120,1 +120,1 @@\n-                new OpenCLBackend(Config.of(\"GPU\"))\n+                new OpenCLBackend(OpenCLConfig.of(\"GPU\"))\n","filename":"hat\/examples\/nbody\/src\/main\/java\/nbody\/opencl\/OpenCLNBodyGLWindow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}