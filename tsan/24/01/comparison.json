{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -90,1 +91,0 @@\n-  DEBUG_ONLY(NoSafepointVerifier nsv;)\n@@ -97,0 +97,7 @@\n+  \/\/ Use ThreadInVMfromUnknown to transition to VM state to safely call into\n+  \/\/ Method::checked_resolve_jmethod_id. That avoids assertion on thread state\n+  \/\/ with AccessInternal::check_access_thread_state on JDK debug binary. As\n+  \/\/ TsanSymbolize could be triggered from native or Java code, we can't simply\n+  \/\/ make it a JVM_ENTRY to handle native -> vm state transition.\n+  ThreadInVMfromUnknown __tiv;\n+\n","filename":"src\/hotspot\/share\/tsan\/tsan.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}