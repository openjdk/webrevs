[{"commit":{"message":"Merge jdk21u"},"files":[{"filename":".jcheck\/conf"},{"filename":"make\/RunTests.gmk"},{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/spec.gmk.in"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp"},{"filename":"src\/hotspot\/share\/logging\/logTag.hpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"},{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"676ca74b1812df70da7f30cbdcc3a2d798c57057"},{"commit":{"message":"Reimplement TsanOopMap support using WeakHandle and ResizeableResourceHashtable\n\nReviewed-by: manc"},"files":[{"filename":"src\/hotspot\/share\/logging\/logTag.hpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"}],"sha":"87a8248d31ad9f20a22a3d2e0626af739eacd6f7"},{"commit":{"message":"8336924: Disable jcheck for issue number in TSAN project\n\nReviewed-by: cushon"},"files":[{"filename":".jcheck\/conf"}],"sha":"592de08d8771c8401df10f980a77950023237f98"},{"commit":{"message":"Merge\n\nReviewed-by: manc"},"files":[{"filename":".jcheck\/conf"},{"filename":"make\/RunTests.gmk"},{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/spec.gmk.in"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"46ab1ec9ce06cdc406bb3951359e01e5a5bba0fb"},{"commit":{"message":"Merge\n\nReviewed-by: manc"},"files":[{"filename":".jcheck\/conf"},{"filename":"make\/RunTests.gmk"},{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/spec.gmk.in"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"83feada732caa469d12a144ada784b96abb36257"},{"commit":{"message":"Merge jdk-15-ga\n\nReviewed-by: jiangli"},"files":[{"filename":"make\/RunTests.gmk"},{"filename":"make\/autoconf\/flags-cflags.m4"},{"filename":"make\/autoconf\/spec.gmk.in"},{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"8fe80f4e6d9f8bd358dba5178422de0743b0b3ff"},{"commit":{"message":"Enable array access instrumentation for aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"}],"sha":"5b22e1802c285b7a3b8764ac90da36476d08311a"},{"commit":{"message":"Enable field access instrumentation for aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"}],"sha":"7f1f31a18bafd9df728b03c63953f4e3fe20abdb"},{"commit":{"message":"Add the code to track object allocation for aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp"}],"sha":"7ff9b065170d5ad3147405f2e7cdd21e887d242a"},{"commit":{"message":"Update code location decoding for aarch64"},"files":[],"sha":"3c27e4dc2075c13dd5ab8635303c82cd6b9457d9"},{"commit":{"message":"Add aarch64 specific lock\/unlock tsan instruments"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"3ec97caa4b3078a4cf1cd269caf1307618a4926a"},{"commit":{"message":"Avoid jtreg test timeout in aarch64 due to a stackoverflow in process reaper"},"files":[{"filename":"make\/RunTests.gmk"}],"sha":"02fa9c0d24bf177373dc58ae63e02d1eb6a293e5"},{"commit":{"message":"Add function entry\/exit instruments for aarch64"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"}],"sha":"4e35cd6b7c052cf73b9adb97e116170f507b37dd"},{"commit":{"message":"Add a limition to allocate object heap in aarch64 with tsan enabled.\n\nReviewed-by: manc"},"files":[{"filename":"src\/hotspot\/os\/posix\/os_posix.cpp"}],"sha":"3542538da7901a31ddbc11d0360dc3d585adb67b"},{"commit":{"message":"Enable aarch64 build in jdk\/tsan."},"files":[{"filename":"make\/autoconf\/flags-cflags.m4"}],"sha":"aeb549dc8e94985c411958d21f3648ecefe6d42e"},{"commit":{"message":"Fix check for volatile in putfield_or_static\n\nReviewed-by: manc"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"}],"sha":"c99ad6a790b4871d05100beca6738b9ce290a10f"},{"commit":{"message":"Merge openjdk\/tsan:tsan\n\nmerge with master:952f32e"},"files":[{"filename":"make\/autoconf\/spec.gmk.in"},{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"f4ecc1725675ff92461d5f407f2458604548f34e"},{"commit":{"message":"8242037: Update jcheck configuration for tsan\n\nReviewed-by: ehelin"},"files":[{"filename":".jcheck\/conf"}],"sha":"44c4c3cb2783777975c6fdc329400bbc2c58a55b"},{"commit":{"message":"Instrument Unsafe CAS"},"files":[],"sha":"c3475755d4afdd3ef4c62ad0f77eccb1776e26a5"},{"commit":{"message":"Instrument unsafe volatile memory accesses"},"files":[],"sha":"bc495b993caf1d9be888df1d994b6cf50606a78b"},{"commit":{"message":"Instrument normal Unsafe puts and gets"},"files":[],"sha":"8bd9935e7a1d9c2bf82bcab18f960f57c0779c75"},{"commit":{"message":"Don't mark finalizers as racy due to running in a different thread\n\n\"There is a happens-before edge from the end of a constructor of an object to the start of a finalizer for that object.\"\nThis change is too coarse and will have false negatives, but this is a relatively simple solution that gets rid of false positives.\n"},"files":[{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"}],"sha":"61206193f74199057c8d21405f2b7cb1d7270c54"},{"commit":{"message":"Make uncaught exception in child threads trigger test failure"},"files":[{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"3218b153e9672f3c9b993ed3e0aa0263d8beb9a9"},{"commit":{"message":"Add a configure flag --<enable|disable>-tsan-launcher\n\nThis flag allows more control on whether to link TSAN runtime with launcher.\nDefault is consistent with whether the JVM feature \"tsan\" is enabled.\n"},"files":[],"sha":"3b4bd080386401c331200c8128fde60578a38169"},{"commit":{"message":"Add missing includes"},"files":[],"sha":"87eae1764dd0cb7022567e59eb5bf7c553fa4d8e"},{"commit":{"message":"Fix assertion error in TsanOopSizeMap::collect_oops()\n\nThe assertion check for target_oop after calling pointer_adjuster->do_oop()\nis too strong. The target_oop may not point to a valid oop yet, because\nthe collector may move the object to target_oop later.\n\n\nReviewed-by: aeubanks, jcbeyler"},"files":[],"sha":"d38b03116666bd2d5aab591f178dd9bbce1d4681"},{"commit":{"message":"Implement field suppression via a suppression list"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"6681b105cdedcbe67b379d105332d1360df5683a"},{"commit":{"message":"Add TSAN instrumentation for allocation and garbage collection\n\nReviewed-by: aeubanks, jcbeyler"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp"},{"filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"fb2f0f1f0a5e9e908f5743c93bbf87b473805e89"},{"commit":{"message":"Fix clobbered address passed to TSAN\n\naccess_load_at() sometimes clobbered the address we passed to TSAN in tsan_observe_load_or_store().\nDo the TSAN instrumentation first, then do the load. Initially the order was access_load_at(), then TSAN instrumentation. Field accesses can behave as volatile, and I wanted arrays to match up with the field TSAN instrumentation\/actual load order. But it doesn't really matter for array loads since they can never be volatile.\n\nAdded some asserts for fastdebug that the oop is valid and that the field\/element offset is within the oop size. The size check fails without the TSAN instrumentation\/actual load reordering because the offset register was clobbered.\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"}],"sha":"63f9cad842f8f94d325ae9a94ccfeae30fcd6986"},{"commit":{"message":"Don't reported races on fields marked @LazyInit\n\nThis change introduces a new annotation, java.util.concurrent.annotation.LazyInit, which causes TSAN to ignore races on that field.\nReferences are not simply ignored, but a release\/acquire is performed on them. This is so that any following accesses to its member variables are not also reported as racy.\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"},{"filename":"src\/hotspot\/share\/oops\/cpCache.cpp"}],"sha":"f95076b072f5fcd1fd0c1a78e6c5d9c8266509b9"},{"commit":{"message":"Suppress races in j.u.c.ConcurrentHashMap\n\nThese are appearing and it's not worth trying to understand j.u.c.\n"},"files":[],"sha":"a88993323b1b0292713dceb17dff96d6e30285d9"},{"commit":{"message":"Suppress some String races\n\nSome common String operations are racy, e.g. hashCode or concatenation.\nThese races should be suppressed. Since they are in the JDK.\nAdd a test that calls hashCode() on a const String, and does local String concatenation.\n"},"files":[],"sha":"0fd7554167888cbeb68a5218a416900fcee1d0e4"},{"commit":{"message":"Comment out stack alignment assertion in os::verify_stack_alignment()"},"files":[{"filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.cpp"}],"sha":"243a7cae68f413f54b8d95517d50c369f13be4ce"},{"commit":{"message":"Disable CDS when TSAN is on\n\nWe eagerly allocate jmethodIDs in ClassFileParser::fill_instance_klass().\nClassFileParser::fill_instance_klass() is never called on classes in a shared archive.\n\nThis fixes a test coming in a future change.\n"},"files":[{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"}],"sha":"25ab06f222b7365c0a586de6b0efe37036c3f89e"},{"commit":{"message":"Cleanup tests and add lots of new tests\n\nNo need for both a jtreg @summary and a class description.\nAdd tests that test all combinations of racy\/non-racy, array\/field, bool\/byte\/char\/double\/float\/int\/long\/short\/String.\nAdd tests that test that synchronized blocks, and synchronized blocks with an exception are properly handled.\nAdd test that static initializer block is not considered racy.\nUse System.out.println() instead of System.out.format() so that we don't have to specify the right format string.\n"},"files":[],"sha":"f0646912df7127b19c1bb43b1c20773851b89a76"},{"commit":{"message":"Add Java memory instrumentation\n\nNow we can detect Java races.\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp"},{"filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"f0777fb5208cb3fb0f62051438c850f8340c833e"},{"commit":{"message":"Move TSAN symbolizer function override to launcher\n\nSymbolization doesn't work because __tsan_symbolize_external_ex() is not in the launcher but in libjvm.so.\n\nRename the existing __tsan_symbolize_external_ex() to TsanSymbolize() and export from libjvm.so. Get a pointer to it in libjli. The launcher can call TsanSymbolize() through libjli in its override of __tsan_symbolize_external_ex().\n"},"files":[],"sha":"5a0e910c125c0ab55a601961fc1d550dbdb3cd2a"},{"commit":{"message":"Supports statically linking TSAN runtime into the launcher with Clang\n\nThis is a workaround for the version issue with libtsan.so in GCC.\nIf we build the JDK with Clang, we will have a newer version of the\nTSAN runtime statically linked into the launcher:\n\n$ nm images\/jdk\/bin\/java | grep tsan_symbolize\n000000000048e640 W __tsan_symbolize_external\n000000000048e650 W __tsan_symbolize_external_ex\n\nIn the long term, Java TSAN will still work with GCC, but stack trace\nsymbolization will be broken until OpenJDK can be built with GCC9,\nwhich contains the new version of libtsan.so that we need.\n\nAlso need to write distinct values to the global variable in\nlibAbstractNativeLoop.cpp, otherwise some optimization in Clang\ncould treat the variable as constant, and TSAN reports \"Write of size 1\"\ninstead of \"size 4\".\n\n\nReviewed-by: jcbeyler, aeubanks"},"files":[],"sha":"31afda59044441f4b36ef2d2605c15f06ba8055c"},{"commit":{"message":"Use TSAN_RUNTIME_ONLY for most instrumentation\n\nThis fixes build error using --with-jvm-features=-tsan,\nand reduces boilerplate code for instrumentation.\n\nAlso simplified oopDesc:is_oop() uses and updated a comment.\n\n\nReviewed-by: jcbeyler, aeubanks"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"c71fcc06fa8046be201e53be04943d8d16735c85"},{"commit":{"message":"Add JVMTI raw monitor lock\/unlock mechanisms\n\n- Added three tests that pass.\n- Moved the libAbstractNativeLoop.cpp to C++ because seriously, why stay in C?\n\n\nReviewed-by: aeubanks, manc"},"files":[{"filename":"src\/hotspot\/share\/prims\/jvm.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp"},{"filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp"},{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"5a5c6a97f0c484aaf9bc18713d27d9b510967d97"},{"commit":{"message":"Provide (un)lock info from Java to TSAN"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"},{"filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp"}],"sha":"adea4785441396f4a32b7702d0dab5081b245714"},{"commit":{"message":"Move -XX:+ThreadSanitizer to the testing process\n\nOtherwise we are never testing TSAN :)\n\nThis passes the non racy ones but fails the NonRacyNativeLoop one,\nwhich is expected\n"},"files":[{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"d00ad9e3fd814a45ee7dbb0b5029a58710075aac"},{"commit":{"message":"Add test which does synchronization in native land"},"files":[],"sha":"aa1f01ade2419cdd1b48710ae587d5532a28b199"},{"commit":{"message":"Rename INCLUDE_TSAN to LAUNCHER_INCLUDE_TSAN in launcher\n\nIt's confusing that it's the same name as the hotspot macro but uses a different style (#ifdef vs #if).\n"},"files":[],"sha":"f530c22bbb4ccac53a677d53cfc432ec1ce9af4f"},{"commit":{"message":"Force jmethodIDs to be populated under TSAN\n\nOtherwise they might be null when we need them.\n"},"files":[{"filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp"}],"sha":"b529eae68a2c388850857b061da4fa1e31190f4d"},{"commit":{"message":"Don't manually pass the thread to google_tsan_interp_method_entry\n\nThe JavaThread is handled automatically by JRT_ENTRY.\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"}],"sha":"a28261c13cfdc71e3f76590c0a88635875fa9821"},{"commit":{"message":"Support running TSAN without LD_PRELOAD\n\nThis dynamically links TSAN runtime with the launcher bin\/java, and moves\nthe default suppression list into hard-coded string in the launcher's\nsource. With this change, we can just use the following command to run\ntsan tests:\n\n$ make test TEST=\"hotspot\/jtreg\/tsan\"\n\nCurrently only NonRacyNativeLoopTest fails due to missing lock instrumentation.\n\nAlso refactored hotspot.m4 to consolidate TSAN-related code into one block.\n"},"files":[{"filename":"make\/autoconf\/spec.gmk.in"}],"sha":"1995080fb2888d4e1943f301f2e242b9767a333e"},{"commit":{"message":"Add a TSAN suppression list\n\nuse with TSAN_OPTIONS=suppressions=path\/to\/jdk\/bin\/tsan.supp\n\nThis will tell TSAN to not report any races from libjvm.so and libjimage.so in tsan.supp.\n\nNow there's an extra argument to pass to jtreg: -e:TSAN_OPTIONS\n$ $JTREG -e:LD_PRELOAD=\/usr\/lib\/gcc\/x86_64-linux-gnu\/8\/libtsan.so -jdk:$JDK_ROOT\/build\/images\/jdk\/ -nativepath:$JDK_ROOT\/build\/images\/test\/hotspot\/jtreg\/native\/ -e:TSAN_OPTIONS=suppressions=$JDK_ROOT\/bin\/tsan.supp $JDK_ROOT\/test\/hotspot\/jtreg\/tsan\/\n"},"files":[],"sha":"4240ecf36587775a6dc01b9d1e100309c83fcd6a"},{"commit":{"message":"Update\/clean\/add TSAN tests\n\nAdd native code that can be called by TSAN tests.\nAdd runTsanTestExpectFailure\/Success to TsanRunner so tests don't have to repeat the success\/failure checks.\nAdd two native tests, one racy, one not. (right now unrelated JVM races are reported so the non-racy one fails)\n\n\"make test\" doesn't work since it doesn't work with LD_PRELOAD. Instead, run:\n$ make jdk-image test-image\n$ JTREG=path\/to\/jtreg\n$ JDK_ROOT=path\/to\/tsan_jdk\n$ $JTREG -e:LD_PRELOAD=\/usr\/lib\/gcc\/x86_64-linux-gnu\/8\/libtsan.so -jdk:$JDK_ROOT\/build\/images\/jdk\/ -nativepath:$JDK_ROOT\/build\/images\/test\/hotspot\/jtreg\/native\/ $JDK_ROOT\/test\/hotspot\/jtreg\/tsan\/\nwhere $JDK_ROOT must be an absolute path because -nativepath only works with an absolute path.\n"},"files":[{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"f712a93996d1997b70ab7e8fccaa89be90bdb006"},{"commit":{"message":"Add code to symbolize stack traces"},"files":[],"sha":"4ab20b94f7b5400cedd279719772b8f5bbe3ac41"},{"commit":{"message":"Make tsan a build-time JVM feature"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"}],"sha":"2878f50730bb2b864e158898b78d15e41a67af55"},{"commit":{"message":"Add method entry\/exit hooks for interpreter and native wrappers\n\nAlso force -Xint when -XX:+ThreadSanitizer\n"},"files":[{"filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp"},{"filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp"},{"filename":"src\/hotspot\/share\/runtime\/arguments.cpp"},{"filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp"}],"sha":"58d949853a6856d475eb3a690d6244450f149926"},{"commit":{"message":"Change a wrong type to fix build\n\nJVM doesn't recognize \"int64\", use \"julong\" instead.\n"},"files":[],"sha":"fb60ce0b5fe9e16716fa2799f3b8ff6c981ba557"},{"commit":{"message":"Add __tsan_symbolize_external_ex()\n\nThis is the function that TSAN calls to symbolize a stack frame produced by Java.\nThe actual implementation will come later.\n"},"files":[],"sha":"0ddf7550c15c5b4b16496aa860a43b32207b61a5"},{"commit":{"message":"Create interface to call TSAN runtime\n\n$ LD_PRELOAD=\/usr\/lib\/gcc\/x86_64-linux-gnu\/8\/libtsan.so .\/images\/jdk\/bin\/java -XX:+ThreadSanitizer\nworks, reports some internal JVM races, and exits with 66, the default exit code when TSAN finds any races.\n\n$ LD_PRELOAD=\/usr\/lib\/gcc\/x86_64-linux-gnu\/8\/libtsan.so TSAN_OPTIONS=\"exitcode=123\" .\/images\/jdk\/bin\/java -XX:+ThreadSanitizer ; echo $?\nOverriding the default TSAN error exit code works.\n\nWith this, the way to provide the TSAN runtime is with LD_PRELOAD. In the future we will have a better way, but this is the current short-term solution so we can iterate faster.\n"},"files":[{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"4055f02e7a15f622a15a9fa9593d7f54a7359ca5"},{"commit":{"message":"Adding a first JTREG test that passes if TSAN is not working\n\nTest currently passes until we get the base Java tsan up and running.\nThen the test would fail and we can flip the switch on it.\n"},"files":[{"filename":"test\/hotspot\/jtreg\/tsan\/TsanRunner.java"}],"sha":"0afeb178bacef6d53a0d01a74f77d7fe5dfcb947"},{"commit":{"message":"Start of Tsan"},"files":[],"sha":"dd4c981d4eb6a1197dc7e926467f0b028e52c4fe"}]