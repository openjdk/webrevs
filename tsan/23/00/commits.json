[{"commit":{"message":"- Remove obj->fast_no_hash_check() case from TsanOopMapTable::add_entry. We don't use oop\n  identity hash for computing the entry hash. So it is not necessary.\n\n- Change TsanOopMapTableKey::get_hash and TsanOopMapTableKey::equals to use entry.object_no_keepalive()\n  instead of entry._obj. If entry._obj is outdated, we can compute incorrect hash value for\n  the current entry. It should use the updated oop address instead. Running tsan jtreg tests\n  on slowdebug binary run into new failures without the fix."},"files":[{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp"}],"sha":"e1f56f32e851a20e977870797a6742b53d0538c7"},{"commit":{"message":"Add TsanOopMapImpl::MovedEntry. Also save the oop size for a moved oop and avoid calling oop size() when adding a moved\nentry back to the tsanOopMap.\n\nJtreg testing ran into crashes with tsan\/NonRacyFinalizerLoopTest.java due to calling size() when adding a moved entry back to the tsanOopMap."},"files":[{"filename":"src\/hotspot\/share\/tsan\/tsanOopMap.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp"}],"sha":"c7fac7da2d77b43eb65b1af6379252f8b5872b9c"},{"commit":{"message":"Update comments."},"files":[{"filename":"src\/hotspot\/share\/tsan\/tsanOopMap.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp"}],"sha":"9ae9f7c657971a44eefb2d7254c764ab70eab1ee"},{"commit":{"message":"Remove moved_entry_sizes array."},"files":[{"filename":"src\/hotspot\/share\/tsan\/tsanOopMap.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp"}],"sha":"65f3962f2fa4faad97efffd2b64b2635fdf4ab09"},{"commit":{"message":"Change to compute primitive_hash using the oop address instead of oop identity_hash for an entry's hash.\n\nDuring TsanOopMap::notify_tsan_for_freed_and_moved_objects \/ TsanOopMapTable::collect_moved_objects_and_notify_freed,\nif an oop is moved by GC, remove the enclosing entry from the tsanOopMap. A new entry is created for the\nmoved oop and collected into an array. All collected entries are re-inserted into the tsanOopMap using\nrecomputed hash values.\n\nTesting found using oop identity hash for tsanOopMap entry hash causes the same oop being added into the\ntsanOopMap more than once in some cases. During InterpreterMacroAssembler::lock_object, it appears calling\nidentity_hash for an oop (with a computed identity hash) may cause a new identity hash value being used\nfor the oop in some cases."},"files":[{"filename":"src\/hotspot\/share\/tsan\/tsanOopMap.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp"},{"filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp"}],"sha":"2b04258b771d047f2647c21d7ac59f7ad11df4d5"}]