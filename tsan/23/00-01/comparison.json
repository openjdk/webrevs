{"files":[{"patch":"@@ -97,0 +97,1 @@\n+  TSAN_ONLY(assert(_nworkers_completed == 0, \"must be\");)\n@@ -112,0 +113,3 @@\n+#if INCLUDE_TSAN\n+  _nworkers_completed(0),\n+#endif\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+  TSAN_ONLY(uint _nworkers_completed;)\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,1 +100,6 @@\n-    TsanOopMap::notify_tsan_for_freed_and_moved_objects();\n+    MutexLocker mu(TsanOopMap_lock, Mutex::_no_safepoint_check_flag);\n+    _nworkers_completed ++;\n+    assert((_nworkers >= _nworkers_completed), \"must be\");\n+    if (_nworkers == _nworkers_completed) {\n+      TsanOopMap::notify_tsan_for_freed_and_moved_objects();\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/weakProcessor.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -208,0 +208,1 @@\n+  assert(TsanOopMap_lock->is_locked(), \"sanity check\");\n@@ -222,3 +223,1 @@\n-  {\n-    MutexLocker mu(TsanOopMap_lock, Mutex::_no_safepoint_check_flag);\n-    _oop_map->collect_moved_objects_and_notify_freed(\n+  _oop_map->collect_moved_objects_and_notify_freed(\n@@ -230,6 +229,6 @@\n-    \/\/ Add back the entries with moved oops. New hashes for the entries\n-    \/\/ are computed using the new oop address.\n-    for (int i = 0; i < moved_entries.length(); i++) {\n-      const TsanOopMapImpl::MovedEntry &e = moved_entries.at(i);\n-      _oop_map->add_entry(e.key(), e.value());\n-    }\n+  \/\/ Add back the entries with moved oops. New hashes for the entries\n+  \/\/ are computed using the new oop address.\n+  for (int i = 0; i < moved_entries.length(); i++) {\n+    const TsanOopMapImpl::MovedEntry &e = moved_entries.at(i);\n+    _oop_map->add_entry(e.key(), e.value());\n+    delete e.key();\n@@ -238,1 +237,0 @@\n-  \/\/ No lock is needed after this point.\n","filename":"src\/hotspot\/share\/tsan\/tsanOopMap.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -40,0 +40,6 @@\n+TsanOopMapTableKey::TsanOopMapTableKey(const TsanOopMapTableKey& entry, oop obj) {\n+  assert(entry.object_no_keepalive() == obj, \"must be\");\n+  _wh = entry._wh;\n+  _obj = obj;\n+}\n+\n@@ -48,7 +54,0 @@\n-void TsanOopMapTableKey::update_obj() {\n-  oop obj = _wh.peek();\n-  if (obj != nullptr && obj != _obj) {\n-    _obj = obj;\n-  }\n-}\n-\n@@ -74,0 +73,2 @@\n+  assert(TsanOopMap_lock->is_locked(), \"sanity check\");\n+\n@@ -82,0 +83,2 @@\n+  assert(TsanOopMap_lock->is_locked(), \"sanity check\");\n+\n@@ -161,3 +164,2 @@\n-        entry.update_obj();\n-\n-        TsanOopMapTableKey* new_entry = new TsanOopMapTableKey(entry);\n+        \/\/ Create a new entry using the existing weakhandle and the moved oop.\n+        TsanOopMapTableKey *new_entry = new TsanOopMapTableKey(entry, entry.object_no_keepalive());\n","filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-\n@@ -73,0 +72,1 @@\n+  TsanOopMapTableKey(const TsanOopMapTableKey& src, oop obj);\n","filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}