{"files":[{"patch":"@@ -759,1 +759,1 @@\n-      SharedRuntime::tsan_acquire((address)java_mirror());\n+      SharedRuntime::tsan_acquire(cast_from_oop<address>(java_mirror()));\n@@ -1209,1 +1209,1 @@\n-      SharedRuntime::tsan_release((address)java_mirror());\n+      SharedRuntime::tsan_release(cast_from_oop<address>(java_mirror()));\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,2 +137,2 @@\n-        log_trace(tsan)(\"__tsan_java_free for \" PTR_FORMAT \"\\n\", (long unsigned int)entry.obj());\n-        __tsan_java_free((char *)entry.obj(), size * HeapWordSize);\n+        log_trace(tsan)(\"__tsan_java_free for \" PTR_FORMAT \"\\n\", cast_from_oop<uintx>(entry.obj()));\n+        __tsan_java_free(cast_from_oop<char*>(entry.obj()), size * HeapWordSize);\n@@ -143,1 +143,1 @@\n-          {(char *)entry.obj(), (char *)wh_obj, size * HeapWordSize};\n+          {cast_from_oop<char*>(entry.obj()), cast_from_oop<char*>(wh_obj), size * HeapWordSize};\n","filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  \/\/ Address of the oop tracked by the WeakHandle.\n+  \/\/ Pointer to the oop tracked by the WeakHandle.\n@@ -57,3 +57,3 @@\n-  \/\/ need to cache the original oop address for notifying Tsan after\n-  \/\/ the object is freed.\n-  oopDesc *_obj;\n+  \/\/ need to cache the original oop for notifying Tsan after the object\n+  \/\/ is freed.\n+  oop _obj;\n@@ -79,3 +79,1 @@\n-    oop lhs_obj = lhs._obj != nullptr ? (oop)lhs._obj : lhs.object_no_keepalive();\n-    oop rhs_obj = rhs._obj != nullptr ? (oop)rhs._obj : rhs.object_no_keepalive();\n-    return lhs_obj == rhs_obj;\n+    return lhs._obj == rhs._obj;\n","filename":"src\/hotspot\/share\/tsan\/tsanOopMapTable.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}