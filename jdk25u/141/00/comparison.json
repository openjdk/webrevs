{"files":[{"patch":"@@ -1939,1 +1939,1 @@\n-    const ZVirtualMemory non_harvested_vmem = vmem.last_part(allocation->harvested());\n+    const ZVirtualMemory non_harvested_vmem = partial_vmem.last_part(allocation->harvested());\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,0 +217,9 @@\n+static size_t inject_commit_limit(const ZVirtualMemory& vmem) {\n+  \/\/ To facilitate easier interoperability with multi partition allocations we\n+  \/\/ divide by ZNUMA::count(). Users of ZFailLargerCommits need to be aware of\n+  \/\/ this when writing tests. In the future we could probe the VirtualMemoryManager\n+  \/\/ and condition this division on whether the vmem is in the multi partition\n+  \/\/ address space.\n+  return align_up(MIN2(ZFailLargerCommits \/ ZNUMA::count(), vmem.size()), ZGranuleSize);\n+}\n+\n@@ -219,1 +228,3 @@\n-  const size_t size = vmem.size();\n+  const size_t size = ZFailLargerCommits > 0\n+      ? inject_commit_limit(vmem)\n+      : vmem.size();\n","filename":"src\/hotspot\/share\/gc\/z\/zPhysicalMemoryManager.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -121,0 +121,5 @@\n+  develop(size_t, ZFailLargerCommits, 0,                                    \\\n+          \"Commits larger than ZFailLargerCommits will be truncated, \"      \\\n+          \"used to stress page allocation commit failure paths \"            \\\n+          \"(0: Disabled)\")                                                  \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/z\/z_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.z;\n+\n+\/*\n+ * @test id=ZFakeNUMA\n+ * @requires vm.gc.Z & vm.debug\n+ * @library \/ \/test\/lib\n+ * @summary Test ZGC graceful failure when a commit fails (with ZFakeNUMA)\n+ * @run driver gc.z.TestCommitFailure -XX:ZFakeNUMA=16\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import static gc.testlibrary.Allocation.blackHole;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class TestCommitFailure {\n+    static final int K = 1024;\n+    static final int M = 1024 * K;\n+\n+    static final int XMS = 128 * M;\n+    static final int XMX = 512 * M;\n+\n+    static class Test {\n+        static final int LARGE_ALLOC = 256 * M;\n+        static final int SMALL_GARBAGE = 256 * M;\n+        static final int SMALL_LIVE = 128 * M;\n+\n+        \/\/ Allocates at least totalLive bytes of objects and add them to list.\n+        static void allocLive(List<Object> list, int totalLive) {\n+            final int largePageAllocationSize = 6 * M;\n+            for (int live = 0; live < totalLive; live += largePageAllocationSize) {\n+                list.add(new byte[largePageAllocationSize - K]);\n+            }\n+        }\n+\n+        \/\/ Allocates at least totalGarbage bytes of garbage large pages.\n+        static void allocGarbage(int totalGarbage) {\n+            final int largePageAllocationSize = 6 * M;\n+            for (int garbage = 0; garbage < totalGarbage; garbage += largePageAllocationSize) {\n+                blackHole(new byte[largePageAllocationSize - K]);\n+            }\n+        }\n+\n+        public static void main(String[] args) {\n+            final var list = new ArrayList<Object>();\n+            try {\n+                \/\/ Fill heap with small live objects\n+                allocLive(list, SMALL_LIVE);\n+                \/\/ Fill with small garbage objects\n+                allocGarbage(SMALL_GARBAGE);\n+                \/\/ Allocate large objects where commit fails until an OOME is thrown\n+                while (true) {\n+                    list.add(new byte[LARGE_ALLOC - K]);\n+                }\n+            } catch (OutOfMemoryError oome) {}\n+            blackHole(list);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        final int xmxInM = XMX \/ M;\n+        final int xmsInM = XMS \/ M;\n+        final var arguments = new ArrayList(Arrays.asList(args));\n+        arguments.addAll(List.of(\n+            \"-XX:+UseZGC\",\n+            \"-Xlog:gc+init\",\n+            \"-XX:ZFailLargerCommits=\" + XMS,\n+            \"-Xms\" + xmsInM + \"M\",\n+            \"-Xmx\" + xmxInM + \"M\",\n+            Test.class.getName()));\n+\n+        ProcessTools.executeTestJava(arguments)\n+                .outputTo(System.out)\n+                .errorTo(System.out)\n+                .shouldContain(\"Forced to lower max Java heap size\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/z\/TestCommitFailure.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}