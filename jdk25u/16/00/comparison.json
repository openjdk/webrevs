{"files":[{"patch":"@@ -545,1 +545,1 @@\n-                        String transPattern = translateDateFormatLetters(calendarType, pattern, this::convertDateTimePatternLetter);\n+                        String transPattern = translateDateFormatLetters(calendarType, key, pattern, this::convertDateTimePatternLetter);\n@@ -548,1 +548,1 @@\n-                        sdfPatterns.add(i, translateDateFormatLetters(calendarType, transPattern, this::convertSDFLetter));\n+                        sdfPatterns.add(i, translateDateFormatLetters(calendarType, key, transPattern, this::convertSDFLetter));\n@@ -571,1 +571,1 @@\n-    private String translateDateFormatLetters(CalendarType calendarType, String cldrFormat, ConvertDateTimeLetters converter) {\n+    private String translateDateFormatLetters(CalendarType calendarType, String patternKey, String cldrFormat, ConvertDateTimeLetters converter) {\n@@ -590,1 +590,1 @@\n-                            converter.convert(calendarType, lastLetter, count, jrePattern);\n+                            converter.convert(calendarType, patternKey, lastLetter, count, jrePattern);\n@@ -600,1 +600,1 @@\n-                        converter.convert(calendarType, lastLetter, count, jrePattern);\n+                        converter.convert(calendarType, patternKey, lastLetter, count, jrePattern);\n@@ -617,1 +617,1 @@\n-                    converter.convert(calendarType, lastLetter, count, jrePattern);\n+                    converter.convert(calendarType, patternKey, lastLetter, count, jrePattern);\n@@ -630,1 +630,1 @@\n-            converter.convert(calendarType, lastLetter, count, jrePattern);\n+            converter.convert(calendarType, patternKey, lastLetter, count, jrePattern);\n@@ -640,1 +640,1 @@\n-            converter.convert(calendarType, lastLetter, count, jrePattern);\n+            converter.convert(calendarType, patternKey, lastLetter, count, jrePattern);\n@@ -664,1 +664,1 @@\n-    private void convertDateTimePatternLetter(CalendarType calendarType, char cldrLetter, int count, StringBuilder sb) {\n+    private void convertDateTimePatternLetter(CalendarType calendarType, String patternKey, char cldrLetter, int count, StringBuilder sb) {\n@@ -686,1 +686,1 @@\n-    private void convertSDFLetter(CalendarType calendarType, char cldrLetter, int count, StringBuilder sb) {\n+    private void convertSDFLetter(CalendarType calendarType, String patternKey, char cldrLetter, int count, StringBuilder sb) {\n@@ -725,0 +725,11 @@\n+            case 'y':\n+                \/\/ If the style is FULL\/LONG for a Japanese Calendar, make the\n+                \/\/ count == 4 for Gan-nen\n+                if (calendarType == CalendarType.JAPANESE &&\n+                        (patternKey.contains(\"full-\") ||\n+                         patternKey.contains(\"long-\"))) {\n+                    count = 4;\n+                }\n+                appendN(cldrLetter, count, sb);\n+                break;\n+\n@@ -770,0 +781,1 @@\n+                        e.getKey(),\n@@ -778,1 +790,1 @@\n-        void convert(CalendarType calendarType, char cldrLetter, int count, StringBuilder sb);\n+        void convert(CalendarType calendarType, String patternKey, char cldrLetter, int count, StringBuilder sb);\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/Bundle.java","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8202088 8207152 8217609 8219890 8358819\n+ * @summary Test the localized Japanese calendar names, such as\n+ *      the Reiwa Era names (May 1st. 2019-), or the Gan-nen text\n+ * @modules jdk.localedata\n+ * @run junit JapaneseCalendarNameTest\n+ *\/\n+\n+import static java.util.Calendar.*;\n+import static java.util.Locale.*;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class JapaneseCalendarNameTest {\n+    private static final Calendar c = new Calendar.Builder()\n+            .setCalendarType(\"japanese\")\n+            .setFields(ERA, 5, YEAR, 1, MONTH, MAY, DAY_OF_MONTH, 1)\n+            .build();\n+    private static final Locale JAJPJP = Locale.of(\"ja\", \"JP\", \"JP\");\n+    private static final Locale JCAL = Locale.forLanguageTag(\"ja-u-ca-japanese\");\n+\n+    private static Stream<Arguments> reiwaEraNames() {\n+        return Stream.of(\n+            \/\/ type, locale, name\n+            Arguments.of(LONG, JAPAN, \"令和\"),\n+            Arguments.of(LONG, US, \"Reiwa\"),\n+            Arguments.of(LONG, CHINA, \"令和\"),\n+            Arguments.of(SHORT, JAPAN, \"令和\"),\n+            Arguments.of(SHORT, US, \"Reiwa\"),\n+            Arguments.of(SHORT, CHINA, \"令和\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"reiwaEraNames\")\n+    void testReiwaEraName(int type, Locale locale, String expected) {\n+        assertEquals(expected, c.getDisplayName(ERA, type, locale));\n+    }\n+\n+    private static Stream<Arguments> gannen() {\n+        return Stream.of(\n+            \/\/ format,\n+            \/\/ formatted text\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.FULL, JAJPJP),\n+                \"令和元年5月1日水曜日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.FULL, JCAL),\n+                \"令和元年5月1日水曜日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.LONG, JAJPJP),\n+                \"令和元年5月1日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.LONG, JCAL),\n+                \"令和元年5月1日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.MEDIUM, JAJPJP),\n+                \"令和1年5月1日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.MEDIUM, JCAL),\n+                \"令和1年5月1日\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.SHORT, JAJPJP),\n+                \"令和1\/5\/1\"),\n+            Arguments.of(DateFormat.getDateInstance(DateFormat.SHORT, JCAL),\n+                \"令和1\/5\/1\")\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gannen\")\n+    void testGannenFormat(DateFormat df, String expected) {\n+        assertEquals(expected, df.format(c.getTime()));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"gannen\")\n+    void testGannenParse(DateFormat df, String formatted) throws ParseException {\n+        assertEquals(c.getTime(), df.parse(formatted));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/JapaneseCalendarNameTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8202088 8207152 8217609 8219890\n- * @summary Test the localized Japanese new era name (May 1st. 2019-)\n- *      is retrieved no matter CLDR provider contains the name or not.\n- * @modules jdk.localedata\n- * @run testng JapaneseEraNameTest\n- *\/\n-\n-import static java.util.Calendar.*;\n-import static java.util.Locale.*;\n-import java.util.Calendar;\n-import java.util.Locale;\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.assertEquals;\n-\n-@Test\n-public class JapaneseEraNameTest {\n-    static final Calendar c = new Calendar.Builder()\n-            .setCalendarType(\"japanese\")\n-            .setFields(ERA, 5, YEAR, 1, MONTH, MAY, DAY_OF_MONTH, 1)\n-            .build();\n-\n-    @DataProvider(name=\"names\")\n-    Object[][] names() {\n-        return new Object[][] {\n-            \/\/ type,    locale,  name\n-            { LONG,     JAPAN,   \"\\u4ee4\\u548c\" },\n-            { LONG,     US,      \"Reiwa\" },\n-            { LONG,     CHINA,   \"\\u4ee4\\u548c\" },\n-            { SHORT,    JAPAN,   \"\\u4ee4\\u548c\" },\n-            { SHORT,    US,      \"Reiwa\" },\n-            { SHORT,    CHINA,   \"\\u4ee4\\u548c\" },\n-        };\n-    }\n-\n-    @Test(dataProvider=\"names\")\n-    public void testJapaneseNewEraName(int type, Locale locale, String expected) {\n-        assertEquals(c.getDisplayName(ERA, type, locale), expected);\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Calendar\/JapaneseEraNameTest.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"}]}