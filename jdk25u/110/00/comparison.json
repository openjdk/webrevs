{"files":[{"patch":"@@ -105,2 +105,0 @@\n-    private static final String STORE_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n-    private static final String LOAD_OF_CLASS_POSTFIX = \"(:|\\\\+)\\\\S* \\\\*\" + END;\n@@ -2941,0 +2939,12 @@\n+    \/\/ Typename in load\/store have the structure:\n+    \/\/ @fully\/qualified\/package\/name\/to\/TheClass+12 *\n+    \/\/ And variation:\n+    \/\/ - after @, we can have \"stable:\" or other labels, with optional space after ':'\n+    \/\/ - the class can actually be a subclass, with $ separator (and it must be ok to give only the deepest one\n+    \/\/ - after the class name, we can have a comma-separated list of implemented interfaces enclosed in parentheses\n+    \/\/ - before the offset, we can have something like \":NotNull\", either way, seeing \"+\" or \":\" means the end of the type\n+    \/\/ Worst case, it can be something like:\n+    \/\/ @bla: bli:a\/b\/c$d$e (f\/g,h\/i\/j):NotNull+24 *\n+    private static final String LOAD_STORE_PREFIX = \"@(\\\\w+: ?)*[\\\\w\/\\\\$]*\\\\b\";\n+    private static final String LOAD_STORE_SUFFIX = \"( \\\\([^\\\\)]+\\\\))?(:|\\\\+)\\\\S* \\\\*\";\n+\n@@ -2942,1 +2952,1 @@\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + IS_REPLACED + LOAD_OF_CLASS_POSTFIX;\n+        String regex = START + irNodeRegex + MID + LOAD_STORE_PREFIX + IS_REPLACED + LOAD_STORE_SUFFIX + END;\n@@ -2947,1 +2957,1 @@\n-        String regex = START + irNodeRegex + MID + \"@\\\\S*\" + IS_REPLACED + STORE_OF_CLASS_POSTFIX;\n+        String regex = START + irNodeRegex + MID + LOAD_STORE_PREFIX + IS_REPLACED + LOAD_STORE_SUFFIX + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+        run(LoadStore.class);\n@@ -552,0 +553,236 @@\n+\n+\/\/ Test load and store regexes\n+class LoadStore {\n+    int i;\n+    float f;\n+    interface I1 {}\n+    static class Base implements I1 {\n+        int i;\n+    }\n+    interface I2 {}\n+    static class Derived extends Base implements I2 {\n+        long l;\n+    }\n+    Base base = new Base();\n+    Derived derived = new Derived();\n+\n+    static class SingleNest {\n+        static class DoubleNest {\n+            int i;\n+        }\n+    }\n+\n+    SingleNest.DoubleNest doubleNest = new SingleNest.DoubleNest();\n+\n+\n+    @Test\n+    @IR(failOn = {IRNode.LOAD_OF_CLASS, \".*\", IRNode.STORE_OF_CLASS, \".*\"})\n+    public void triviallyFailBoth() {\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.LOAD_OF_CLASS, \"LoadS[a-z]+\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"Load.tore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"LoadStore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"\/LoadStore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"tests\/LoadStore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"\/tests\/LoadStore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"ir_framework\/tests\/LoadStore\", \"1\",\n+            IRNode.LOAD_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\", \"1\",  \/\/ To assert it's the whole qualification\n+            IRNode.LOAD_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.LOAD_OF_CLASS, \"oadStore\",\n+            IRNode.LOAD_OF_CLASS, \"LoadStor\",\n+            IRNode.LOAD_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\",\n+            IRNode.LOAD_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore+12 *\n+    public float simpleLoad() {\n+        return f;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.STORE_OF_CLASS, \"LoadS[a-z]+\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"Load.tore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"\/LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"tests\/LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"\/tests\/LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"ir_framework\/tests\/LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\", \"1\",\n+            IRNode.STORE_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.STORE_OF_CLASS, \"oadStore\",\n+            IRNode.STORE_OF_CLASS, \"LoadStor\",\n+            IRNode.STORE_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\",\n+            IRNode.STORE_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore+12 *\n+    public void simpleStore() {\n+        i = 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.LOAD_I_OF_CLASS, \"Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadS[a-z]+\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"Load.tore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.LOAD_I_OF_CLASS, \"\/Base\",\n+            IRNode.LOAD_I_OF_CLASS, \"oadStore\\\\$Base\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\\\\$Bas\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\",\n+            IRNode.LOAD_I_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\\\\$Base\",\n+            IRNode.LOAD_I_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$Base (ir_framework\/tests\/LoadStore$I1)+12 *\n+    public int loadWithInterface() {\n+        return base.i;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.STORE_I_OF_CLASS, \"Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadS[a-z]+\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"Load.tore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\\\\$Base\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.STORE_I_OF_CLASS, \"\/Base\",\n+            IRNode.STORE_I_OF_CLASS, \"oadStore\\\\$Base\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\\\\$Bas\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\",\n+            IRNode.STORE_I_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\\\\$Base\",\n+            IRNode.STORE_I_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$Base (ir_framework\/tests\/LoadStore$I1)+12 *\n+    public void storeWithInterface() {\n+        base.i = 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.LOAD_L_OF_CLASS, \"Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"LoadS[a-z]+\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"Load.tore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.LOAD_L_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.LOAD_L_OF_CLASS, \"\/Derived\",\n+            IRNode.LOAD_L_OF_CLASS, \"oadStore\\\\$Derived\",\n+            IRNode.LOAD_L_OF_CLASS, \"LoadStore\\\\$Derive\",\n+            IRNode.LOAD_L_OF_CLASS, \"LoadStore\",\n+            IRNode.LOAD_L_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\\\\$Derived\",\n+            IRNode.LOAD_L_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$Derived (ir_framework\/tests\/LoadStore$I1,ir_framework\/tests\/LoadStore$I2)+24 *\n+    public long loadWithInterfaces() {\n+        return derived.l;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.STORE_L_OF_CLASS, \"Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"LoadS[a-z]+\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"Load.tore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"(?<=[@: ])ir_framework\/tests\/LoadStore\\\\$Derived\", \"1\",\n+            IRNode.STORE_L_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$\/]*tests[\\\\w\\\\$\/]*\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.STORE_L_OF_CLASS, \"\/Derived\",\n+            IRNode.STORE_L_OF_CLASS, \"oadStore\\\\$Derived\",\n+            IRNode.STORE_L_OF_CLASS, \"LoadStore\\\\$Derive\",\n+            IRNode.STORE_L_OF_CLASS, \"LoadStore\",\n+            IRNode.STORE_L_OF_CLASS, \"\/ir_framework\/tests\/LoadStore\\\\$Derived\",\n+            IRNode.STORE_L_OF_CLASS, \"(?<=[@: ])[\\\\w\\\\$]*tests[\\\\w\\\\$]*\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$Derived (ir_framework\/tests\/LoadStore$I1,ir_framework\/tests\/LoadStore$I2)+24 *\n+    public void storeWithInterfaces() {\n+        derived.l = 1;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.LOAD_I_OF_CLASS, \"DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"\/tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.LOAD_I_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.LOAD_I_OF_CLASS, \"SingleNest\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\",\n+            IRNode.LOAD_I_OF_CLASS, \"LoadStore\\\\$SingleNest\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$SingleNest$DoubleNest+12 *\n+    public int loadDoubleNested() {\n+        return doubleNest.i;\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+            IRNode.STORE_I_OF_CLASS, \"DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"\/tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+            IRNode.STORE_I_OF_CLASS, \"ir_framework\/tests\/LoadStore\\\\$SingleNest\\\\$DoubleNest\", \"1\",\n+        },\n+        failOn = {\n+            IRNode.STORE_I_OF_CLASS, \"SingleNest\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\",\n+            IRNode.STORE_I_OF_CLASS, \"LoadStore\\\\$SingleNest\",\n+        }\n+    )\n+    \/\/ @ir_framework\/tests\/LoadStore$SingleNest$DoubleNest+12 *\n+    public void storeDoubleNested() {\n+        doubleNest.i = 1;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPhaseIRMatching.java","additions":237,"deletions":0,"binary":false,"changes":237,"status":"modified"}]}