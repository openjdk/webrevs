{"files":[{"patch":"@@ -101,0 +101,1 @@\n+        private final String identifier;\n@@ -102,1 +103,1 @@\n-        RemoteSettings(FlightRecorderMXBean mbean, long recordingId) {\n+        RemoteSettings(FlightRecorderMXBean mbean, long recordingId, String identifier) {\n@@ -105,0 +106,1 @@\n+            this.identifier = identifier;\n@@ -114,1 +116,1 @@\n-            newSettings.put(name, value);\n+            newSettings.put(identifier + \"#\" + name, value);\n@@ -343,1 +345,1 @@\n-        EventSettings s = ManagementSupport.newEventSettings(new RemoteSettings(mbean, recordingId));\n+        EventSettings s = ManagementSupport.newEventSettings(new RemoteSettings(mbean, recordingId, name));\n@@ -345,1 +347,1 @@\n-            return s.with(name + \"#\" + ENABLED, \"false\");\n+            return s.with(ENABLED, \"false\");\n@@ -367,1 +369,1 @@\n-        EventSettings s = ManagementSupport.newEventSettings(new RemoteSettings(mbean, recordingId));\n+        EventSettings s = ManagementSupport.newEventSettings(new RemoteSettings(mbean, recordingId, name));\n@@ -369,1 +371,1 @@\n-            return s.with(name + \"#\" + ENABLED, \"true\");\n+            return s.with(ENABLED, \"true\");\n","filename":"src\/jdk.management.jfr\/share\/classes\/jdk\/management\/jfr\/RemoteRecordingStream.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @summary Tests that event settings for a RemoteRecordingStream can be changed\n+ * @summary Tests that the enabled setting can be configured for a RemoteRecordingStream\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestEnableDisable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.jmx.streaming;\n+\n+import java.lang.management.ManagementFactory;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+\n+import javax.management.MBeanServerConnection;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.EventSettings;\n+import jdk.jfr.FlightRecorder;\n+import jdk.jfr.Name;\n+import jdk.jfr.Period;\n+import jdk.jfr.StackTrace;\n+import jdk.jfr.Threshold;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordedStackTrace;\n+import jdk.management.jfr.RemoteRecordingStream;\n+\n+\/**\n+ * @test\n+ * @requires vm.flagless\n+ * @summary Tests that event settings for a RemoteRecordingStream can be changed\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm jdk.jfr.jmx.streaming.TestWithers\n+ *\/\n+public class TestWithers {\n+    private static final Set<String> RESULT = Collections.synchronizedSet(new HashSet<>());\n+\n+    @Name(\"AA\")\n+    @StackTrace(false)\n+    static class A extends Event {\n+    }\n+\n+    @Name(\"BB\")\n+    @StackTrace(true)\n+    static class B extends Event {\n+    }\n+\n+    @Name(\"CC\")\n+    @Threshold(\"10 h\")\n+    static class C extends Event {\n+    }\n+\n+    @Name(\"DD\")\n+    @Threshold(\"10 h\")\n+    static class D extends Event {\n+    }\n+\n+    @Name(\"EE\")\n+    @StackTrace(false)\n+    static class E extends Event {\n+    }\n+\n+    @Name(\"FF\")\n+    @Period(\"10 h\")\n+    static class F extends Event {\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        MBeanServerConnection conn = ManagementFactory.getPlatformMBeanServer();\n+        try (RemoteRecordingStream stream = new RemoteRecordingStream(conn)) {\n+            addCheck(stream, es -> es.withStackTrace(), \"AA\", TestWithers::hasStackTrace);\n+            addCheck(stream, es -> es.withoutStackTrace(), \"BB\", e -> !hasStackTrace(e));\n+            addCheck(stream, es -> es.withThreshold(Duration.ofMillis(0)), \"CC\", e -> true);\n+            addCheck(stream, es -> es.withoutThreshold(), \"DD\", e -> true);\n+            addCheck(stream, es -> es.with(\"stackTrace\", \"true\"), \"EE\", TestWithers::hasStackTrace);\n+            addCheck(stream, es -> es.withPeriod(Duration.ofMillis(700)), \"FF\", e -> true);\n+            FlightRecorder.addPeriodicEvent(F.class, () -> {\n+                F f = new F();\n+                f.commit();\n+            });\n+            stream.onFlush(() -> {\n+                System.out.println(RESULT);\n+                if (RESULT.size() == 6) {\n+                    stream.close();\n+                }\n+            });\n+\n+            stream.startAsync();\n+            A a = new A();\n+            a.commit();\n+\n+            B b = new B();\n+            b.commit();\n+\n+            C c = new C();\n+            c.commit();\n+\n+            D d = new D();\n+            d.commit();\n+\n+            E e = new E();\n+            e.commit();\n+\n+            stream.awaitTermination();\n+        }\n+    }\n+\n+    private static void addCheck(RemoteRecordingStream stream, Consumer<EventSettings> es, String eventName, Predicate<RecordedEvent> validator) {\n+        es.accept(stream.enable(eventName));\n+        stream.onEvent(eventName, e -> {\n+            System.out.println(e);\n+            if (validator.test(e)) {\n+                RESULT.add(eventName);\n+            }\n+        });\n+    }\n+\n+    private static boolean hasStackTrace(RecordedEvent e) {\n+        RecordedStackTrace rs = e.getStackTrace();\n+        return rs != null && !rs.getFrames().isEmpty();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestWithers.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}