{"files":[{"patch":"@@ -699,1 +699,1 @@\n-            if (!Platform.isBusybox(\"\/bin\/true\")) {\n+            if (!Files.isSymbolicLink(Paths.get(\"\/bin\/true\"))) {\n@@ -714,1 +714,1 @@\n-            if (!Platform.isBusybox(\"\/bin\/false\")) {\n+            if (!Files.isSymbolicLink(Paths.get(\"\/bin\/false\"))) {\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,4 +298,6 @@\n-                    } else if (Platform.isBusybox(\"\/bin\/sleep\")) {\n-                        \/\/ With busybox sleep is just a sym link to busybox.\n-                        \/\/ The busbox executable is seen as ProcessHandle.Info command.\n-                        expected = \"busybox\";\n+                    } else if (Files.isSymbolicLink(Paths.get(\"\/bin\/sleep\"))) {\n+                        \/\/ Busybox sleep is a symbolic link to \/bin\/busybox.\n+                        \/\/ Rust coreutils sleep is a symbolic link to coreutils\n+                        \/\/ The busbox\/coreutils executables are seen as ProcessHandle.Info command.\n+                        Path executable = Files.readSymbolicLink(Paths.get(\"\/bin\/sleep\"));\n+                        expected = executable.getFileName().toString();\n","filename":"test\/jdk\/java\/lang\/ProcessHandle\/InfoTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}