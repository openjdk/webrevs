{"files":[{"patch":"@@ -352,0 +352,4 @@\n+\/\/ Returns the resident set size (RSS) of the process.\n+\/\/ Falls back to using VmRSS from \/proc\/self\/status if \/proc\/self\/smaps_rollup is unavailable.\n+\/\/ Note: On kernels with memory cgroups or shared memory, VmRSS may underreport RSS.\n+\/\/ Users requiring accurate RSS values should be aware of this limitation.\n@@ -354,3 +358,8 @@\n-  os::Linux::meminfo_t info;\n-  if (os::Linux::query_process_memory_info(&info)) {\n-    size = info.vmrss * K;\n+  os::Linux::accurate_meminfo_t accurate_info;\n+  if (os::Linux::query_accurate_process_memory_info(&accurate_info) && accurate_info.rss != -1) {\n+    size = accurate_info.rss * K;\n+  } else {\n+    os::Linux::meminfo_t info;\n+    if (os::Linux::query_process_memory_info(&info)) {\n+      size = info.vmrss * K;\n+    }\n@@ -2349,0 +2358,31 @@\n+\/\/ Accurate memory information need Linux 4.14 or newer\n+bool os::Linux::query_accurate_process_memory_info(os::Linux::accurate_meminfo_t* info) {\n+  FILE* f = os::fopen(\"\/proc\/self\/smaps_rollup\", \"r\");\n+  if (f == nullptr) {\n+    return false;\n+  }\n+\n+  const size_t num_values = sizeof(os::Linux::accurate_meminfo_t) \/ sizeof(size_t);\n+  size_t num_found = 0;\n+  char buf[256];\n+  info->rss = info->pss = info->pssdirty = info->pssanon =\n+      info->pssfile = info->pssshmem = info->swap = info->swappss = -1;\n+\n+  while (::fgets(buf, sizeof(buf), f) != nullptr && num_found < num_values) {\n+    if ( (info->rss == -1        && sscanf(buf, \"Rss: %zd kB\", &info->rss) == 1) ||\n+         (info->pss == -1        && sscanf(buf, \"Pss: %zd kB\", &info->pss) == 1) ||\n+         (info->pssdirty == -1   && sscanf(buf, \"Pss_Dirty: %zd kB\", &info->pssdirty) == 1) ||\n+         (info->pssanon == -1    && sscanf(buf, \"Pss_Anon: %zd kB\", &info->pssanon) == 1) ||\n+         (info->pssfile == -1    && sscanf(buf, \"Pss_File: %zd kB\", &info->pssfile) == 1) ||\n+         (info->pssshmem == -1   && sscanf(buf, \"Pss_Shmem: %zd kB\", &info->pssshmem) == 1) ||\n+         (info->swap == -1       && sscanf(buf, \"Swap: %zd kB\", &info->swap) == 1) ||\n+         (info->swappss == -1    && sscanf(buf, \"SwapPss: %zd kB\", &info->swappss) == 1)\n+         )\n+    {\n+      num_found ++;\n+    }\n+  }\n+  fclose(f);\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -184,0 +184,17 @@\n+  \/\/ Output structure for query_accurate_process_memory_info() (all values in KB)\n+  struct accurate_meminfo_t {\n+    ssize_t rss;        \/\/ current resident set size\n+    ssize_t pss;        \/\/ current proportional set size\n+    ssize_t pssdirty;   \/\/ proportional set size (dirty)\n+    ssize_t pssanon;    \/\/ proportional set size (anonymous mappings)\n+    ssize_t pssfile;    \/\/ proportional set size (file mappings)\n+    ssize_t pssshmem;   \/\/ proportional set size (shared mappings)\n+    ssize_t swap;       \/\/ swapped out\n+    ssize_t swappss;    \/\/ proportional set size (swapped out)\n+  };\n+\n+  \/\/ Attempts to query accurate memory information from \/proc\/self\/smaps_rollup and return it in the output structure.\n+  \/\/ May fail (returns false) or succeed (returns true) but not all output fields are available; unavailable\n+  \/\/ fields will contain -1.\n+  static bool query_accurate_process_memory_info(accurate_meminfo_t* info);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                                      \"than or equal to heap size(\" + heapSize + \"b) (available memory: \" + available + \")\");\n+                                      \"than or equal to heap size(\" + heapSize + \"b) (available memory: \" + available + \"). On Linux Kernel < 4.14 RSS can be inaccurate\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestAlwaysPreTouchBehavior.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}