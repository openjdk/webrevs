{"files":[{"patch":"@@ -154,1 +154,1 @@\n-void Jfr::on_vm_shutdown(bool exception_handler, bool halt) {\n+void Jfr::on_vm_shutdown(bool emit_old_object_samples, bool emit_event_shutdown, bool halt) {\n@@ -156,1 +156,1 @@\n-    JfrEmergencyDump::on_vm_shutdown(exception_handler);\n+    JfrEmergencyDump::on_vm_shutdown(emit_old_object_samples, emit_event_shutdown);\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  static void on_vm_shutdown(bool exception_handler = false, bool halt = false);\n+  static void on_vm_shutdown(bool emit_old_object_samples, bool emit_event_shutdown, bool halt = false);\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -559,2 +559,5 @@\n-static void post_events(bool exception_handler, Thread* thread) {\n-  if (exception_handler) {\n+static void post_events(bool emit_old_object_samples, bool emit_event_shutdown, Thread* thread) {\n+  if (emit_old_object_samples) {\n+    LeakProfiler::emit_events(max_jlong, false, false);\n+  }\n+  if (emit_event_shutdown) {\n@@ -564,3 +567,0 @@\n-  } else {\n-    \/\/ OOM\n-    LeakProfiler::emit_events(max_jlong, false, false);\n@@ -569,1 +569,1 @@\n-  event.set_reason(exception_handler ? \"Crash\" : \"Out of Memory\");\n+  event.set_reason(emit_old_object_samples ? \"Out of Memory\" : \"Crash\");\n@@ -574,1 +574,1 @@\n-void JfrEmergencyDump::on_vm_shutdown(bool exception_handler) {\n+void JfrEmergencyDump::on_vm_shutdown(bool emit_old_object_samples, bool emit_event_shutdown) {\n@@ -587,1 +587,1 @@\n-  post_events(exception_handler, thread);\n+  post_events(emit_old_object_samples, emit_event_shutdown, thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-  static void on_vm_shutdown(bool exception_handler);\n+  static void on_vm_shutdown(bool emit_old_object_samples, bool emit_event_shutdown);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -466,1 +466,4 @@\n-  JFR_ONLY(Jfr::on_vm_shutdown(false, halt);)\n+  \/\/ 2nd argument (emit_event_shutdown) should be set to false\n+  \/\/ because EventShutdown would be emitted at Threads::destroy_vm().\n+  \/\/ (one of the callers of before_exit())\n+  JFR_ONLY(Jfr::on_vm_shutdown(true, false, halt);)\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1859,1 +1859,1 @@\n-  JFR_ONLY(Jfr::on_vm_shutdown(true);)\n+  JFR_ONLY(Jfr::on_vm_shutdown(static_cast<VMErrorType>(_id) == OOM_JAVA_HEAP_FATAL, true);)\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.oldobject;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import jdk.jfr.consumer.EventStream;\n+import jdk.jfr.consumer.RecordingFile;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+* @test\n+* @bug 8364090\n+* @summary Tests Dump reason and OldObjectSample events at OOME.\n+* @requires vm.flagless\n+* @requires vm.hasJFR\n+* @library \/test\/lib\n+* @run main\/othervm jdk.jfr.event.oldobject.TestEmergencyDumpAtOOM\n+*\/\n+public class TestEmergencyDumpAtOOM {\n+\n+    public static List<String> DEFAULT_LEAKER_ARGS = List.of(\n+        \"-Xmx64m\",\n+        \"-XX:TLABSize=2k\",\n+        \"-XX:StartFlightRecording:dumponexit=true,filename=oom.jfr\",\n+        Leaker.class.getName()\n+    );\n+\n+    public static class Leaker {\n+        public static void main(String... args) {\n+            List<byte[]> list = new ArrayList<>();\n+            while (true) {\n+                list.add(new byte[1024]);\n+            }\n+        }\n+    }\n+\n+    private static void test(boolean shouldCrash) throws Exception {\n+        List<String> args = new ArrayList<>(DEFAULT_LEAKER_ARGS);\n+        if (shouldCrash) {\n+            args.add(0, \"-XX:+CrashOnOutOfMemoryError\");\n+        }\n+\n+        while (true) {\n+            Process p = ProcessTools.createTestJavaProcessBuilder(args).start();\n+            p.waitFor();\n+            OutputAnalyzer output = new OutputAnalyzer(p);\n+            if (!output.contains(\"java.lang.OutOfMemoryError\")) {\n+                throw new RuntimeException(\"OutOfMemoryError did not happen.\");\n+            }\n+\n+            \/\/ Check recording file\n+            String jfrFileName = shouldCrash ? String.format(\"hs_err_pid%d.jfr\", p.pid()) : \"oom.jfr\";\n+            Path jfrPath = Path.of(jfrFileName);\n+            Asserts.assertTrue(Files.exists(jfrPath), \"No jfr recording file \" + jfrFileName + \" exists\");\n+\n+            \/\/ Check events\n+            AtomicLong oldObjects = new AtomicLong();\n+            AtomicReference<String> shutdownReason = new AtomicReference<>();\n+            AtomicReference<String> dumpReason = new AtomicReference<>();\n+            try (EventStream stream = EventStream.openFile(jfrPath)) {\n+                stream.onEvent(\"jdk.OldObjectSample\", e -> oldObjects.incrementAndGet());\n+                stream.onEvent(\"jdk.Shutdown\", e -> shutdownReason.set(e.getString(\"reason\")));\n+                stream.onEvent(\"jdk.DumpReason\", e -> dumpReason.set(e.getString(\"reason\")));\n+                stream.start();\n+            }\n+\n+            \/\/ Check OldObjectSample events\n+            if (oldObjects.get() > 0L) {\n+                if (shouldCrash) {\n+                    Asserts.assertEquals(\"VM Error\", shutdownReason.get());\n+                    Asserts.assertEquals(\"Out of Memory\", dumpReason.get());\n+                } else {\n+                    Asserts.assertEquals(\"No remaining non-daemon Java threads\", shutdownReason.get());\n+                }\n+                \/\/ Passed this test\n+                return;\n+            }\n+\n+            System.out.println(\"Could not find OldObjectSample events. Retrying.\");\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        test(true);\n+        test(false);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/oldobject\/TestEmergencyDumpAtOOM.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}