{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8362237\n+ * @summary Test source launcher with specific VM behaviors\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.launcher\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          java.base\/jdk.internal.module\n+ * @build toolbox.JavaTask toolbox.JavacTask toolbox.TestRunner toolbox.ToolBox\n+ * @run main\/othervm -XX:-StackTraceInThrowable SourceLauncherStackTraceTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import toolbox.TestRunner;\n+\n+\/\/\/ SourceLauncherTest runs the source launcher in the same VM, so we must\n+\/\/\/ use another test to run specific tests with specific VM flags\n+public class SourceLauncherStackTraceTest extends TestRunner {\n+\n+    \/\/ Inheritance will shadow all parent tests\n+    SourceLauncherTest parent = new SourceLauncherTest();\n+\n+    SourceLauncherStackTraceTest() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        SourceLauncherStackTraceTest t = new SourceLauncherStackTraceTest();\n+        t.runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    \/*\n+     * Tests in which main throws an exception without a stacktrace.\n+     *\/\n+    @Test\n+    public void testTargetException2(Path base) throws IOException {\n+        parent.tb.writeJavaFiles(base, \"\"\"\n+                public class TestLauncher {\n+                    public static TestLauncher test() {\n+                        throw new RuntimeException(\"No trace\");\n+                    }\n+\n+                    public static void main(String[] args) {\n+                        \/\/ This will throw a RuntimeException without\n+                        \/\/ a stack trace due to VM options\n+                        test();\n+                    }\n+                }\n+                \"\"\");\n+        Path file = base.resolve(\"TestLauncher.java\");\n+        SourceLauncherTest.Result r = parent.run(file, List.of(), List.of(\"3\"));\n+        parent.checkEmpty(\"stdout\", r.stdOut());\n+        parent.checkEmpty(\"stderr\", r.stdErr());\n+        parent.checkTrace(\"exception\", r.exception(), \"java.lang.RuntimeException: No trace\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherStackTraceTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -79,1 +79,1 @@\n-    private final ToolBox tb;\n+    final ToolBox tb;\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}