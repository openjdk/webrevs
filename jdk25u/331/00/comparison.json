{"files":[{"patch":"@@ -136,2 +136,7 @@\n-  void load_field_entry(Register cache, Register index, int bcp_offset = 1);\n-  void load_method_entry(Register cache, Register index, int bcp_offset = 1);\n+  void load_field_or_method_entry(bool is_method, Register cache, Register index, int bcp_offset, bool for_fast_bytecode);\n+  void load_field_entry(Register cache, Register index, int bcp_offset = 1, bool for_fast_bytecode = false) {\n+    load_field_or_method_entry(false, cache, index, bcp_offset, for_fast_bytecode);\n+  }\n+  void load_method_entry(Register cache, Register index, int bcp_offset = 1, bool for_fast_bytecode = false) {\n+    load_field_or_method_entry(true, cache, index, bcp_offset, for_fast_bytecode);\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -471,1 +471,5 @@\n-void InterpreterMacroAssembler::load_field_entry(Register cache, Register index, int bcp_offset) {\n+void InterpreterMacroAssembler::load_field_or_method_entry(bool is_method, Register cache, Register index, int bcp_offset, bool for_fast_bytecode) {\n+  const int entry_size     = is_method ? sizeof(ResolvedMethodEntry) : sizeof(ResolvedFieldEntry),\n+            base_offset    = is_method ? Array<ResolvedMethodEntry>::base_offset_in_bytes() : Array<ResolvedFieldEntry>::base_offset_in_bytes(),\n+            entries_offset = is_method ? in_bytes(ConstantPoolCache::method_entries_offset()) : in_bytes(ConstantPoolCache::field_entries_offset());\n+\n@@ -475,1 +479,1 @@\n-  if (is_power_of_2(sizeof(ResolvedFieldEntry))) {\n+  if (is_power_of_2(entry_size)) {\n@@ -477,1 +481,1 @@\n-    sldi(index, index, log2i_exact(sizeof(ResolvedFieldEntry)));\n+    sldi(index, index, log2i_exact(entry_size));\n@@ -480,1 +484,1 @@\n-    mulli(index, index, sizeof(ResolvedFieldEntry));\n+    mulli(index, index, entry_size);\n@@ -483,2 +487,2 @@\n-  ld_ptr(cache, in_bytes(ConstantPoolCache::field_entries_offset()), R27_constPoolCache);\n-  addi(cache, cache, Array<ResolvedFieldEntry>::base_offset_in_bytes());\n+  ld_ptr(cache, entries_offset, R27_constPoolCache);\n+  addi(cache, cache, base_offset);\n@@ -486,1 +490,0 @@\n-}\n@@ -488,10 +491,7 @@\n-void InterpreterMacroAssembler::load_method_entry(Register cache, Register index, int bcp_offset) {\n-  \/\/ Get index out of bytecode pointer\n-  get_cache_index_at_bcp(index, bcp_offset, sizeof(u2));\n-  \/\/ Scale the index to be the entry index * sizeof(ResolvedMethodEntry)\n-  mulli(index, index, sizeof(ResolvedMethodEntry));\n-\n-  \/\/ Get address of field entries array\n-  ld_ptr(cache, ConstantPoolCache::method_entries_offset(), R27_constPoolCache);\n-  addi(cache, cache, Array<ResolvedMethodEntry>::base_offset_in_bytes());\n-  add(cache, cache, index); \/\/ method_entries + base_offset + scaled index\n+  if (for_fast_bytecode) {\n+    \/\/ Prevent speculative loading from ResolvedFieldEntry\/ResolvedMethodEntry as it can miss the info written by another thread.\n+    \/\/ TemplateTable::patch_bytecode uses release-store.\n+    \/\/ We reached here via control dependency (Bytecode dispatch has used the rewritten Bytecode).\n+    \/\/ So, we can use control-isync based ordering.\n+    isync();\n+  }\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -151,1 +151,3 @@\n-  \/\/ Patch bytecode.\n+  \/\/ Patch bytecode with release store to coordinate with ResolvedFieldEntry\n+  \/\/ and ResolvedMethodEntry loads in fast bytecode codelets.\n+  __ release();\n@@ -315,0 +317,1 @@\n+  \/\/ Only rewritten during link time. So, no need for memory barriers for accessing resolved info.\n@@ -3112,1 +3115,1 @@\n-  __ load_field_entry(Rcache, Rscratch);\n+  __ load_field_entry(Rcache, Rscratch, 1, \/* for_fast_bytecode *\/ true);\n@@ -3193,1 +3196,1 @@\n-  __ load_field_entry(Rcache, Rscratch);\n+  __ load_field_entry(Rcache, Rscratch, 1, \/* for_fast_bytecode *\/ true);\n@@ -3332,1 +3335,1 @@\n-  __ load_field_entry(Rcache, Rscratch, 2);\n+  __ load_field_entry(Rcache, Rscratch, 2, \/* for_fast_bytecode *\/ true);\n@@ -3493,1 +3496,1 @@\n-  __ load_method_entry(Rcache, R11_scratch1);\n+  __ load_method_entry(Rcache, R11_scratch1, 1, \/* for_fast_bytecode *\/ true);\n","filename":"src\/hotspot\/cpu\/ppc\/templateTable_ppc_64.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}