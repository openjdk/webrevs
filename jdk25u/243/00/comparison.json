{"files":[{"patch":"@@ -596,0 +596,19 @@\n+    case VECTOR_OP_TAN:   \/\/ fall-through\n+    case VECTOR_OP_TANH:  \/\/ fall-through\n+    case VECTOR_OP_SIN:   \/\/ fall-through\n+    case VECTOR_OP_SINH:  \/\/ fall-through\n+    case VECTOR_OP_COS:   \/\/ fall-through\n+    case VECTOR_OP_COSH:  \/\/ fall-through\n+    case VECTOR_OP_ASIN:  \/\/ fall-through\n+    case VECTOR_OP_ACOS:  \/\/ fall-through\n+    case VECTOR_OP_ATAN:  \/\/ fall-through\n+    case VECTOR_OP_ATAN2: \/\/ fall-through\n+    case VECTOR_OP_CBRT:  \/\/ fall-through\n+    case VECTOR_OP_LOG:   \/\/ fall-through\n+    case VECTOR_OP_LOG10: \/\/ fall-through\n+    case VECTOR_OP_LOG1P: \/\/ fall-through\n+    case VECTOR_OP_POW:   \/\/ fall-through\n+    case VECTOR_OP_EXP:   \/\/ fall-through\n+    case VECTOR_OP_EXPM1: \/\/ fall-through\n+    case VECTOR_OP_HYPOT: return 0; \/\/ not supported; should be handled in Java code\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -104,0 +104,19 @@\n+    VECTOR_OP_TAN   = 101,\n+    VECTOR_OP_TANH  = 102,\n+    VECTOR_OP_SIN   = 103,\n+    VECTOR_OP_SINH  = 104,\n+    VECTOR_OP_COS   = 105,\n+    VECTOR_OP_COSH  = 106,\n+    VECTOR_OP_ASIN  = 107,\n+    VECTOR_OP_ACOS  = 108,\n+    VECTOR_OP_ATAN  = 109,\n+    VECTOR_OP_ATAN2 = 110,\n+    VECTOR_OP_CBRT  = 111,\n+    VECTOR_OP_LOG   = 112,\n+    VECTOR_OP_LOG10 = 113,\n+    VECTOR_OP_LOG1P = 114,\n+    VECTOR_OP_POW   = 115,\n+    VECTOR_OP_EXP   = 116,\n+    VECTOR_OP_EXPM1 = 117,\n+    VECTOR_OP_HYPOT = 118,\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.FloatVector;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+\/*\n+ * @test\n+ * @bug 8367333\n+ * @requires vm.compiler2.enabled\n+ * @modules jdk.incubator.vector\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+StressIncrementalInlining\n+ *                   -XX:CompileCommand=quiet\n+ *                   -XX:CompileCommand=compileonly,compiler.vectorapi.TestVectorMathLib::test*\n+ *                   compiler.vectorapi.TestVectorMathLib\n+ *\/\n+\n+public class TestVectorMathLib {\n+    private static final VectorSpecies SPECIES = FloatVector.SPECIES_PREFERRED;\n+\n+    static FloatVector testTAN(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.TAN);\n+    }\n+    static FloatVector testTANH(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.TANH);\n+    }\n+    static FloatVector testSIN(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.SIN);\n+    }\n+    static FloatVector testSINH(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.SINH);\n+    }\n+    static FloatVector testCOS(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.COS);\n+    }\n+    static FloatVector testCOSH(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.COSH);\n+    }\n+    static FloatVector testASIN(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.ASIN);\n+    }\n+    static FloatVector testACOS(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.ACOS);\n+    }\n+    static FloatVector testATAN(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.ATAN);\n+    }\n+    static FloatVector testATAN2(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.ATAN2, fv);\n+    }\n+    static FloatVector testCBRT(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.CBRT);\n+    }\n+    static FloatVector testLOG(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.LOG);\n+    }\n+    static FloatVector testLOG10(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.LOG10);\n+    }\n+    static FloatVector testLOG1P(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.LOG1P);\n+    }\n+    static FloatVector testPOW(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.POW, fv);\n+    }\n+    static FloatVector testEXP(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.EXP);\n+    }\n+    static FloatVector testEXPM1(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.EXPM1);\n+    }\n+    static FloatVector testHYPOT(FloatVector fv) {\n+        return fv.lanewise(VectorOperators.HYPOT, fv);\n+    }\n+\n+    public static void main(String[] args) {\n+        FloatVector z = FloatVector.zero(SPECIES);\n+        for (int i = 0; i < 20_000; i++) {\n+            z.neg();  \/\/ unary\n+            z.add(z); \/\/ binary\n+\n+            testTAN(z);\n+            testTANH(z);\n+            testSIN(z);\n+            testSINH(z);\n+            testCOS(z);\n+            testCOSH(z);\n+            testASIN(z);\n+            testACOS(z);\n+            testATAN(z);\n+            testATAN2(z);\n+            testCBRT(z);\n+            testLOG(z);\n+            testLOG10(z);\n+            testLOG1P(z);\n+            testPOW(z);\n+            testEXP(z);\n+            testEXPM1(z);\n+            testHYPOT(z);\n+        }\n+\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorMathLib.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}