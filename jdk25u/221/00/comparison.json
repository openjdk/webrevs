{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Arrays;\n@@ -46,1 +47,1 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -88,1 +89,1 @@\n-        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"MANIFEST.MF\");\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"META-INF\/MANIFEST.MF\");\n@@ -98,0 +99,16 @@\n+    \/*\n+     * Modify a single byte in signature filename in LOC, and\n+     * validate that jarsigner -verify emits a warning message.\n+     *\/\n+    @Test\n+    void verifySignatureEntryName() throws Exception {\n+        modifyJarEntryName(ORIGINAL_JAR, MODIFIED_JAR, \"META-INF\/MYKEY.SF\");\n+        SecurityTools.jarsigner(\"-verify -verbose \" + MODIFIED_JAR)\n+                .shouldContain(\"This JAR file contains internal \" +\n+                        \"inconsistencies that may result in different \" +\n+                        \"contents when reading via JarFile and JarInputStream:\")\n+                .shouldContain(\"- Entry XETA-INF\/MYKEY.SF is present when reading \" +\n+                        \"via JarInputStream but missing when reading via JarFile\")\n+                .shouldHaveExitValue(0);\n+    }\n+\n@@ -114,3 +131,8 @@\n-        var jarString = new String(jarBytes, StandardCharsets.UTF_8);\n-        var pos = jarString.indexOf(entryName);\n-        assertTrue(pos != -1, entryName + \" is not present in the JAR\");\n+        byte[] entryNameBytes = entryName.getBytes(StandardCharsets.UTF_8);\n+        int pos = 0;\n+        try {\n+            while (!Arrays.equals(jarBytes, pos, pos + entryNameBytes.length,\n+                    entryNameBytes, 0, entryNameBytes.length)) pos++;\n+        } catch (ArrayIndexOutOfBoundsException ignore) {\n+            fail(entryName + \" is not present in the JAR\");\n+        }\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/VerifyJarEntryName.java","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"}]}