{"files":[{"patch":"@@ -1907,2 +1907,2 @@\n-                if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n-                    ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n+                if (Thread.currentThread() instanceof ForkJoinWorkerThread wt)\n+                    ForkJoinPool.helpAsyncBlocker(wt.pool, q);\n@@ -1953,2 +1953,2 @@\n-                if (Thread.currentThread() instanceof ForkJoinWorkerThread)\n-                    ForkJoinPool.helpAsyncBlocker(defaultExecutor(), q);\n+                if (Thread.currentThread() instanceof ForkJoinWorkerThread wt)\n+                    ForkJoinPool.helpAsyncBlocker(wt.pool, q);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import java.util.concurrent.ForkJoinWorkerThread;\n@@ -5136,0 +5137,42 @@\n+\n+    public void testOnlyHelpsIfInTheSamePool() throws Exception {\n+        class Logic {\n+            interface Extractor { ForkJoinPool pool(CompletableFuture<ForkJoinPool> cf) throws Exception; }\n+            static final List<ForkJoinPool> executeInnerOuter(\n+                ForkJoinPool outer, ForkJoinPool inner, Logic.Extractor extractor\n+            ) throws Exception {\n+                return CompletableFuture.supplyAsync(() ->\n+                    Stream.iterate(1, i -> i + 1)\n+                        .limit(64)\n+                        .map(i -> CompletableFuture.supplyAsync(\n+                            () -> Thread.currentThread() instanceof ForkJoinWorkerThread wt ? wt.getPool() : null, inner)\n+                        )\n+                        .map(cf -> {\n+                            try {\n+                                return extractor.pool(cf);\n+                            } catch (Exception ex) {\n+                                throw new AssertionError(\"Unexpected\", ex);\n+                            }\n+                        })\n+                        .toList()\n+                , outer).join();\n+            }\n+        }\n+\n+        List<Logic.Extractor> extractors =\n+            List.of(\n+                c -> c.get(60, SECONDS),\n+                CompletableFuture::get,\n+                CompletableFuture::join\n+            );\n+\n+        try (var pool = new ForkJoinPool(2)) {\n+            for (var extractor : extractors) {\n+                for (var p : Logic.executeInnerOuter(pool, ForkJoinPool.commonPool(), extractor))\n+                    assertTrue(p != pool); \/\/ The inners should have all been executed by commonPool\n+\n+                for (var p : Logic.executeInnerOuter(pool, pool, extractor))\n+                    assertTrue(p == pool); \/\/ The inners could have been helped by the outer\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/CompletableFutureTest.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}