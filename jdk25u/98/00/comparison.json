{"files":[{"patch":"@@ -189,1 +189,1 @@\n-            Float16 result =  negate(valueOf(arg));\n+            Float16 result =  negate(valueOfExact(arg));\n@@ -216,1 +216,1 @@\n-            Float16 result =  abs(valueOf(arg));\n+            Float16 result =  abs(valueOfExact(arg));\n@@ -241,1 +241,1 @@\n-            boolean result = isNaN(valueOf(testCase));\n+            boolean result = isNaN(valueOfExact(testCase));\n@@ -257,2 +257,2 @@\n-            boolean result1 = isFinite(valueOf(infinity));\n-            boolean result2 = isInfinite(valueOf(infinity));\n+            boolean result1 = isFinite(valueOfExact(infinity));\n+            boolean result2 = isInfinite(valueOfExact(infinity));\n@@ -285,2 +285,2 @@\n-            boolean result1 = isFinite(valueOf(finity));\n-            boolean result2 = isInfinite(valueOf(finity));\n+            boolean result1 = isFinite(valueOfExact(finity));\n+            boolean result2 = isInfinite(valueOfExact(finity));\n@@ -304,1 +304,1 @@\n-        if (min(valueOf(small), valueOf(large)).floatValue() != small) {\n+        if (min(valueOfExact(small), valueOfExact(large)).floatValue() != small) {\n@@ -309,1 +309,1 @@\n-        if (max(valueOf(small), valueOf(large)).floatValue() != large) {\n+        if (max(valueOfExact(small), valueOfExact(large)).floatValue() != large) {\n@@ -321,1 +321,1 @@\n-        Float16 a16 = valueOf(a);\n+        Float16 a16 = valueOfExact(a);\n@@ -324,1 +324,1 @@\n-        Float16 b16 = valueOf(b);\n+        Float16 b16 = valueOfExact(b);\n@@ -374,1 +374,1 @@\n-            Float16 result =  sqrt(valueOf(arg));\n+            Float16 result =  sqrt(valueOfExact(arg));\n@@ -412,1 +412,1 @@\n-            Float16 result =  valueOf(getExponent(valueOf(arg)));\n+            Float16 result =  valueOfExact(getExponent(valueOfExact(arg)));\n@@ -448,1 +448,1 @@\n-            Float16 result =  ulp(valueOf(arg));\n+            Float16 result =  ulp(valueOfExact(arg));\n@@ -605,1 +605,1 @@\n-            checkFloat16(result, expected, \"Float16.valueOf(String) \" + input);\n+            checkFloat16(result, expected, \"Float16.valueOfExact(String) \" + input);\n@@ -750,1 +750,1 @@\n-            final float ulpOneFp16 = ulp(valueOf(1.0f)).floatValue();\n+            final float ulpOneFp16 = ulp(valueOfExact(1.0f)).floatValue();\n@@ -784,1 +784,1 @@\n-            final float ulpOneFp16 = ulp(valueOf(1.0f)).floatValue();\n+            final float ulpOneFp16 = ulp(valueOfExact(1.0f)).floatValue();\n@@ -842,4 +842,4 @@\n-            Float16 a = valueOf(input1);\n-            Float16 b = valueOf(input2);\n-            Float16 c = valueOf(input3);\n-            Float16 d = valueOf(expected);\n+            Float16 a = valueOfExact(input1);\n+            Float16 b = valueOfExact(input2);\n+            Float16 c = valueOfExact(input3);\n+            Float16 d = valueOfExact(expected);\n@@ -868,0 +868,16 @@\n+\n+    \/**\n+     * {@return a Float16 value converted from the {@code float}\n+     * argument throwing an {@code ArithmeticException} if the\n+     * conversion is inexact}.\n+     *\n+     * @param f the {@code float} value to convert exactly\n+     * @throws ArithmeticException\n+     *\/\n+    private static Float16 valueOfExact(float f) {\n+        Float16 f16 = valueOf(f);\n+        if (Float.compare(f16.floatValue(), f) != 0) {\n+            throw new ArithmeticException(\"Inexact conversion to Float16 of float value \" + f);\n+        }\n+        return f16;\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/BasicFloat16ArithTests.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"}]}