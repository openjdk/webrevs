{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+import jtreg.SkippedException;\n@@ -126,0 +127,3 @@\n+            if (configuration.getExplicitAvailableHugePageNumber() == 0) {\n+                throw new SkippedException(\"No usable explicit hugepages configured on the system, skipping test\");\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDecisionsAtVMStartup.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    long _explicitAvailableHugePageNumber = -1;\n@@ -83,0 +84,4 @@\n+    public long getExplicitAvailableHugePageNumber() {\n+        return _explicitAvailableHugePageNumber;\n+    }\n+\n@@ -119,1 +124,1 @@\n-    public HugePageConfiguration(Set<ExplicitHugePageConfig> explicitHugePageConfigurations, long explicitDefaultHugePageSize, THPMode _thpMode, long _thpPageSize, ShmemTHPMode _shmemThpMode) {\n+    public HugePageConfiguration(Set<ExplicitHugePageConfig> explicitHugePageConfigurations, long explicitDefaultHugePageSize, long explicitAvailableHugePageNumber, THPMode _thpMode, long _thpPageSize, ShmemTHPMode _shmemThpMode) {\n@@ -122,0 +127,1 @@\n+        this._explicitAvailableHugePageNumber = explicitAvailableHugePageNumber;\n@@ -132,0 +138,1 @@\n+                \", _explicitAvailableHugePageNumber=\" + _explicitAvailableHugePageNumber +\n@@ -141,0 +148,1 @@\n+                            _explicitAvailableHugePageNumber,\n@@ -152,0 +160,1 @@\n+        \/\/ _explicitAvailableHugePageNumber is not compared here, because there is no direct counterpart on the JVM-side log.\n@@ -172,0 +181,15 @@\n+    private static long readAvailableHugePageNumberFromOS() {\n+        Pattern pat = Pattern.compile(\"HugePages_Free: *(\\\\d+)$\");\n+        try (Scanner scanner = new Scanner(new File(\"\/proc\/meminfo\"))) {\n+            while (scanner.hasNextLine()) {\n+                Matcher mat = pat.matcher(scanner.nextLine());\n+                if (mat.matches()) {\n+                    return Long.parseLong(mat.group(1));\n+                }\n+            }\n+        } catch (FileNotFoundException e) {\n+            System.out.println(\"Could not open \/proc\/meminfo\");\n+        }\n+        return 0;\n+    }\n+\n@@ -266,0 +290,1 @@\n+                readAvailableHugePageNumberFromOS(),\n@@ -336,1 +361,1 @@\n-        return new HugePageConfiguration(explicitHugePageConfigs, defaultHugepageSize, thpMode, thpPageSize, shmemThpMode);\n+        return new HugePageConfiguration(explicitHugePageConfigs, defaultHugepageSize, -1, thpMode, thpPageSize, shmemThpMode);\n","filename":"test\/lib\/jdk\/test\/lib\/os\/linux\/HugePageConfiguration.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}