{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -804,2 +804,5 @@\n-                \/\/ Need no status update.\n-                bufferedFragments.add(hsf);\n+                \/\/ Make sure it's not a retransmitted message\n+                if (hsf.recordEpoch > handshakeEpoch) {\n+                    bufferedFragments.add(hsf);\n+                    flightIsReady = holes.isEmpty();\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DTLSInputRecord.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\n+\/*\n+ * @test\n+ * @bug 8367133\n+ * @summary Verify that handshake succeeds when Finished message is fragmented\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @build DTLSOverDatagram\n+ * @run main\/othervm FragmentedFinished\n+ *\/\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import java.net.DatagramPacket;\n+import java.net.SocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class FragmentedFinished extends DTLSOverDatagram {\n+    private SSLEngine serverSSLEngine;\n+    public static void main(String[] args) throws Exception {\n+        FragmentedFinished testCase = new FragmentedFinished();\n+        testCase.runTest(testCase);\n+    }\n+\n+    @Override\n+    SSLEngine createSSLEngine(boolean isClient) throws Exception {\n+        SSLEngine sslEngine = super.createSSLEngine(isClient);\n+        if (!isClient) {\n+            serverSSLEngine = sslEngine;\n+        }\n+        return sslEngine;\n+    }\n+\n+    @Override\n+    DatagramPacket createHandshakePacket(byte[] ba, SocketAddress socketAddr) {\n+        if (ba.length < 30) { \/\/ detect ChangeCipherSpec\n+            \/\/ Reduce the maximumPacketSize to force fragmentation\n+            \/\/ of the Finished message\n+            SSLParameters params = serverSSLEngine.getSSLParameters();\n+            params.setMaximumPacketSize(53);\n+            serverSSLEngine.setSSLParameters(params);\n+        }\n+\n+        return super.createHandshakePacket(ba, socketAddr);\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/FragmentedFinished.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}