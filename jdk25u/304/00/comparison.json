{"files":[{"patch":"@@ -42,0 +42,3 @@\n+    \/\/ No hardware barriers are necessary. All members are volatile and the profiler\n+    \/\/ is run from a signal handler and the only observer is the thread its running on.\n+\n@@ -44,1 +47,0 @@\n-    OrderAccess::release();\n@@ -50,1 +52,3 @@\n-    \/\/ In order to make sure the transition state is valid for \"this\"\n+    \/\/ No hardware barriers are necessary. All members are volatile and the profiler\n+    \/\/ is run from a signal handler and the only observer is the thread its running on.\n+\n@@ -52,5 +56,0 @@\n-    \/\/\n-    \/\/ Hack Alert: Temporary bugfix for 4717480\/4721647\n-    \/\/ To act like previous version (pd_cache_state) don't null _last_Java_sp\n-    \/\/ unless the value is changing\n-    \/\/\n@@ -60,1 +59,0 @@\n-      OrderAccess::release();\n","filename":"src\/hotspot\/cpu\/riscv\/javaFrameAnchor_riscv.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -393,2 +393,0 @@\n-  sd(last_java_sp, Address(xthread, JavaThread::last_Java_sp_offset()));\n-\n@@ -399,0 +397,4 @@\n+\n+  \/\/ We must set sp last.\n+  sd(last_java_sp, Address(xthread, JavaThread::last_Java_sp_offset()));\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}