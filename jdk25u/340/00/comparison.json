{"files":[{"patch":"@@ -204,0 +204,5 @@\n+  if (JvmtiEnvBase::get_phase() != JVMTI_PHASE_LIVE) {\n+    st->print_cr(\"Dynamic agent loading is only permitted in the live phase\");\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import com.sun.tools.attach.AgentLoadException;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.AfterAll;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.concurrent.TimeUnit;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test EarlyDynamicLoad\n+ * @summary Test that dynamic attach fails gracefully when the JVM is not in live phase.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @run junit EarlyDynamicLoad\n+ *\/\n+public class EarlyDynamicLoad {\n+    private static final String EXPECTED_MESSAGE = \"Dynamic agent loading is only permitted in the live phase\";\n+\n+    private static Process child;\n+\n+    @BeforeAll\n+    static void startAndWaitChild() throws Exception {\n+        child = ProcessTools.createTestJavaProcessBuilder(\n+                        \"-XX:+StartAttachListener\",\n+                        \"-agentpath:\" + Utils.TEST_NATIVE_PATH + File.separator + System.mapLibraryName(\"EarlyDynamicLoad\"),\n+                        \"--version\").start();\n+\n+        \/\/ Wait until the process enters VMStartCallback\n+        try (InputStream is = child.getInputStream()) {\n+            is.read();\n+        }\n+    }\n+\n+    @AfterAll\n+    static void stopChild() throws Exception {\n+        try (OutputStream os = child.getOutputStream()) {\n+            os.write(0);\n+        }\n+\n+        if (!child.waitFor(5, TimeUnit.SECONDS)) {\n+            child.destroyForcibly();\n+            throw new AssertionError(\"Timed out while waiting child process to complete\");\n+        }\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(child);\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.stderrShouldBeEmpty();\n+    }\n+\n+    @Test\n+    public void virtualMachine() throws Exception {\n+        try {\n+            VirtualMachine vm = VirtualMachine.attach(String.valueOf(child.pid()));\n+            vm.loadAgent(\"some.jar\");\n+            vm.detach();\n+            throw new AssertionError(\"Should have failed with AgentLoadException\");\n+        } catch(AgentLoadException exception) {\n+            if (!exception.getMessage().contains(EXPECTED_MESSAGE)) {\n+                throw new AssertionError(\"Unexpected error message\", exception);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void jcmd() throws Exception {\n+        PidJcmdExecutor executor = new PidJcmdExecutor(String.valueOf(child.pid()));\n+        OutputAnalyzer out = executor.execute(\"JVMTI.agent_load some.jar\");\n+\n+        out.shouldHaveExitValue(0);\n+        out.stdoutShouldContain(EXPECTED_MESSAGE);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/EarlyDynamicLoad\/EarlyDynamicLoad.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jvmti.h>\n+#include <cstdio>\n+#include <cstring>\n+\n+extern \"C\" {\n+\n+static void JNICALL VMStartCallback(jvmtiEnv* jvmti, JNIEnv* env) {\n+  putchar('1');\n+  fflush(stdout);\n+  getchar();\n+}\n+\n+JNIEXPORT int Agent_OnLoad(JavaVM* vm, char* options, void* reserved) {\n+  jvmtiEnv* jvmti;\n+  if (vm->GetEnv((void**) &jvmti, JVMTI_VERSION_1_0) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during GetEnv\\n\");\n+    return JNI_ERR;\n+  }\n+\n+  jvmtiEventCallbacks callbacks;\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.VMStart = VMStartCallback;\n+\n+  if (jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks)) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during SetEventCallbacks\\n\");\n+    return JNI_ERR;\n+  }\n+  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_START, nullptr) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during SetEventNotificationMode\\n\");\n+    return JNI_ERR;\n+  }\n+\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/EarlyDynamicLoad\/libEarlyDynamicLoad.cpp","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}