{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * test\n+ * @test\n@@ -27,3 +27,4 @@\n- * @summary Tests that AWT use correct toolkit to be wrapped into HeadlessToolkit\n- * @author artem.ananiev@sun.com: area=awt.headless\n- * @run shell WrappedToolkitTest.sh\n+ * @summary Tests that AWT uses correct toolkit wrapped into HeadlessToolkit\n+ * @modules java.desktop\/sun.awt:open\n+ * @library \/test\/lib\n+ * @run main\/othervm -Djava.awt.headless=true TestWrapped\n@@ -32,1 +33,3 @@\n-import java.awt.*;\n+import java.awt.Toolkit;\n+import java.lang.Class;\n+import java.lang.reflect.Field;\n@@ -34,1 +37,1 @@\n-import java.lang.reflect.*;\n+import jdk.test.lib.Platform;\n@@ -36,1 +39,1 @@\n-import sun.awt.*;\n+public final class TestWrapped {\n@@ -38,9 +41,13 @@\n-public class TestWrapped\n-{\n-    public static void main(String[] args)\n-    {\n-        try\n-        {\n-        if (args.length != 1) {\n-            System.err.println(\"No correct toolkit class name is specified, test is not run\");\n-            System.exit(0);\n+    private static final String HEADLESS_TOOLKIT = \"sun.awt.HeadlessToolkit\";\n+    private static final String MACOSX_TOOLKIT = \"sun.lwawt.macosx.LWCToolkit\";\n+    private static final String UNIX_TOOLKIT = \"sun.awt.X11.XToolkit\";\n+    private static final String WINDOWS_TOOLKIT = \"sun.awt.windows.WToolkit\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String expectedToolkitClassName;\n+        if (Platform.isWindows()) {\n+            expectedToolkitClassName = WINDOWS_TOOLKIT;\n+        } else if (Platform.isOSX()) {\n+            expectedToolkitClassName = MACOSX_TOOLKIT;\n+        } else {\n+            expectedToolkitClassName = UNIX_TOOLKIT;\n@@ -49,1 +56,0 @@\n-        String correctToolkitClassName = args[0];\n@@ -51,6 +57,5 @@\n-        Class tkClass = tk.getClass();\n-        if (!tkClass.getName().equals(\"sun.awt.HeadlessToolkit\"))\n-        {\n-            System.err.println(tkClass.getName());\n-            System.err.println(\"Error: default toolkit is not an instance of HeadlessToolkit\");\n-            System.exit(-1);\n+        Class<?> tkClass = tk.getClass();\n+        if (!tkClass.getName().equals(HEADLESS_TOOLKIT)) {\n+            System.err.println(\"Expected: \" + HEADLESS_TOOLKIT);\n+            System.err.println(\"Actual: \" + tkClass.getName());\n+            throw new RuntimeException(\"Wrong default toolkit\");\n@@ -61,6 +66,5 @@\n-        Class wrappedClass = f.get(tk).getClass();\n-        if (!wrappedClass.getName().equals(correctToolkitClassName)) {\n-            System.err.println(wrappedClass.getName());\n-            System.err.println(\"Error: wrapped toolkit is not an instance of \" + correctToolkitClassName);\n-            System.exit(-1);\n-        }\n+        Class<?> wrappedClass = f.get(tk).getClass();\n+        if (!wrappedClass.getName().equals(expectedToolkitClassName)) {\n+            System.err.println(\"Expected: \" + expectedToolkitClassName);\n+            System.err.println(\"Actual: \" + wrappedClass.getName());\n+            throw new RuntimeException(\"Wrong wrapped toolkit\");\n@@ -68,7 +72,0 @@\n-        catch (Exception z)\n-        {\n-            z.printStackTrace(System.err);\n-            System.exit(-1);\n-        }\n-\n-        System.exit(0);\n","filename":"test\/jdk\/java\/awt\/Toolkit\/Headless\/WrappedToolkitTest\/TestWrapped.java","additions":34,"deletions":37,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1,221 +0,0 @@\n-#!\/bin\/ksh -p\n-\n-#\n-# Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-#   @test\n-#   @bug 6282388 8030640\n-#   @summary Tests that AWT use correct toolkit to be wrapped into HeadlessToolkit\n-#   @author artem.ananiev@sun.com: area=awt.headless\n-#   compile TestWrapped.java\n-#   @run shell WrappedToolkitTest.sh\n-\n-# Beginning of subroutines:\n-status=1\n-\n-#Call this from anywhere to fail the test with an error message\n-# usage: fail \"reason why the test failed\"\n-fail() \n- { echo \"The test failed :-(\"\n-   echo \"$*\" 1>&2\n-   echo \"exit status was $status\"\n-   exit $status\n- } #end of fail()\n-\n-#Call this from anywhere to pass the test with a message\n-# usage: pass \"reason why the test passed if applicable\"\n-pass() \n- { echo \"The test passed!!!\"\n-   echo \"$*\" 1>&2\n-   exit 0\n- } #end of pass()\n-\n-# end of subroutines\n-\n-\n-# The beginning of the script proper\n-\n-# Checking for proper OS\n-OS=`uname -s`\n-case \"$OS\" in\n-   AIX | CYGWIN* | Darwin | Linux )\n-      FILESEP=\"\/\"\n-      ;;\n-    \n-   Windows* )\n-      FILESEP=\"\\\\\"\n-      ;;\n-\n-   # catch all other OSs\n-   * )\n-      echo \"Unrecognized system!  $OS\"\n-      fail \"Unrecognized system!  $OS\"\n-      ;;\n-esac\n-\n-# check that some executable or other file you need is available, abort if not\n-#  note that the name of the executable is in the fail string as well.\n-# this is how to check for presence of the compiler, etc.\n-#RESOURCE=`whence SomeProgramOrFileNeeded`\n-#if [ \"${RESOURCE}\" = \"\" ] ; \n-#   then fail \"Need SomeProgramOrFileNeeded to perform the test\" ; \n-#fi\n-\n-# Want this test to run standalone as well as in the harness, so do the \n-#  following to copy the test's directory into the harness's scratch directory \n-#  and set all appropriate variables:\n-\n-if [ -z \"${TESTJAVA}\" ] ; then\n-   # TESTJAVA is not set, so the test is running stand-alone.\n-   # TESTJAVA holds the path to the root directory of the build of the JDK\n-   # to be tested.  That is, any java files run explicitly in this shell\n-   # should use TESTJAVA in the path to the java interpreter.\n-   # So, we'll set this to the JDK spec'd on the command line.  If none\n-   # is given on the command line, tell the user that and use a cheesy\n-   # default.\n-   # THIS IS THE JDK BEING TESTED.\n-   if [ -n \"$1\" ] ;\n-      then TESTJAVA=$1\n-      else fail \"no JDK specified on command line!\"\n-   fi\n-   TESTSRC=.\n-   TESTCLASSES=.\n-   STANDALONE=1;\n-fi\n-echo \"JDK under test is: $TESTJAVA\"\n-\n-#if in test harness, then copy the entire directory that the test is in over \n-# to the scratch directory.  This catches any support files needed by the test.\n-if [ -z \"${STANDALONE}\" ] ; \n-   then cp ${TESTSRC}\/* . \n-fi\n-case \"$OS\" in\n-  Windows* | CYGWIN* )\n-    ${COMPILEJAVA}\/bin\/javac ${TESTJAVACOPTS} \\\n-                         --add-exports java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-exports java.desktop\/sun.awt.windows=ALL-UNNAMED ${CP} \\\n-                         *.java\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Compilation failed\";\n-    fi\n-    ;;\n-\n-  AIX | Linux )\n-    ${COMPILEJAVA}\/bin\/javac ${TESTJAVACOPTS} \\\n-                         --add-exports java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-exports java.desktop\/sun.awt.X11=ALL-UNNAMED ${CP} \\\n-                         *.java\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Compilation failed\";\n-    fi\n-    ;;\n-\n-  Darwin)\n-    ${COMPILEJAVA}\/bin\/javac ${TESTJAVACOPTS} \\\n-                         --add-exports java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-exports java.desktop\/sun.lwawt.macosx=ALL-UNNAMED ${CP} \\\n-                         *.java\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Compilation failed\";\n-    fi\n-    ;;\n-\n-esac\n-\n-#Just before executing anything, make sure it has executable permission!\n-chmod 777 .\/*\n-\n-###############  YOUR TEST CODE HERE!!!!!!!  #############\n-\n-case \"$OS\" in\n-  Windows* | CYGWIN* )\n-    ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Djava.awt.headless=true \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.awt.windows=ALL-UNNAMED ${CP} \\\n-                         TestWrapped sun.awt.windows.WToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.awt.windows.WToolkit\";\n-    fi\n-    ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Djava.awt.headless=true \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.awt.windows=ALL-UNNAMED ${CP} \\\n-                         -Dawt.toolkit=sun.awt.windows.WToolkit \\\n-                         TestWrapped sun.awt.windows.WToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.awt.windows.WToolkit\";\n-    fi\n-    ;;\n-\n-  AIX | Linux )\n-    ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Djava.awt.headless=true \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.awt.X11=ALL-UNNAMED ${CP} \\\n-                         -Dawt.toolkit=sun.awt.X11.XToolkit \\\n-                         TestWrapped sun.awt.X11.XToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.awt.xawt.XToolkit\";\n-    fi\n-    AWT_TOOLKIT=XToolkit ${TESTJAVA}\/bin\/java ${TESTVMOPTS} \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.awt.X11=ALL-UNNAMED ${CP} \\\n-                                              -Djava.awt.headless=true \\\n-                                              TestWrapped sun.awt.X11.XToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.awt.xawt.XToolkit\";\n-    fi\n-    ;;\n-\n-  Darwin)\n-    ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Djava.awt.headless=true \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.lwawt.macosx=ALL-UNNAMED ${CP} \\\n-                         TestWrapped sun.lwawt.macosx.LWCToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.lwawt.macosx.LWCToolkit\";\n-    fi\n-    ${TESTJAVA}\/bin\/java ${TESTVMOPTS} -Djava.awt.headless=true \\\n-                         --add-opens java.desktop\/sun.awt=ALL-UNNAMED \\\n-                         --add-opens java.desktop\/sun.lwawt.macosx=ALL-UNNAMED ${CP} \\\n-                         -Dawt.toolkit=sun.lwawt.macosx.LWCToolkit \\\n-                         TestWrapped sun.lwawt.macosx.LWCToolkit\n-    status=$?\n-    if [ ! $status -eq \"0\" ]; then\n-      fail \"Test FAILED: toolkit wrapped into HeadlessToolkit is not an instance of sun.lwawt.macosx.LWCToolkit\";\n-    fi\n-    ;;\n-\n-esac\n-\n-pass \"All the tests are PASSED\";\n-\n-#For additional examples of how to write platform independent KSH scripts,\n-# see the jtreg file itself.  It is a KSH script for both Solaris and Win32\n","filename":"test\/jdk\/java\/awt\/Toolkit\/Headless\/WrappedToolkitTest\/WrappedToolkitTest.sh","additions":0,"deletions":221,"binary":false,"changes":221,"status":"deleted"}]}