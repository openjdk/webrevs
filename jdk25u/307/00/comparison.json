{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -34,1 +34,1 @@\n-     * Java class file format Magic number (0xCAFEBABE)\n+     * Java class file format Magic number: {@value}.\n@@ -42,1 +42,1 @@\n-     * Major version number of class files for Java 1.1.\n+     * Major version number of class files for Java 1.1: {@value}.\n@@ -49,1 +49,1 @@\n-     * Minor version number of class files for Java 1.1.\n+     * Minor version number of class files for Java 1.1: {@value}.\n@@ -56,1 +56,1 @@\n-     * Major version number of class files for Java 1.2.\n+     * Major version number of class files for Java 1.2: {@value}.\n@@ -63,1 +63,1 @@\n-     * Minor version number of class files for Java 1.2.\n+     * Minor version number of class files for Java 1.2: {@value}.\n@@ -70,1 +70,1 @@\n-     * Major version number of class files for Java 1.2.\n+     * Major version number of class files for Java 1.2: {@value}.\n@@ -77,1 +77,1 @@\n-     * Minor version number of class files for Java 1.3.\n+     * Minor version number of class files for Java 1.3: {@value}.\n@@ -84,1 +84,1 @@\n-     * Major version number of class files for Java 1.3.\n+     * Major version number of class files for Java 1.3: {@value}.\n@@ -91,1 +91,1 @@\n-     * Minor version number of class files for Java 1.4.\n+     * Minor version number of class files for Java 1.4: {@value}.\n@@ -98,1 +98,1 @@\n-     * Major version number of class files for Java 1.4.\n+     * Major version number of class files for Java 1.4: {@value}.\n@@ -105,1 +105,1 @@\n-     * Minor version number of class files for Java 1.5.\n+     * Minor version number of class files for Java 1.5: {@value}.\n@@ -112,1 +112,1 @@\n-     * Major version number of class files for Java 1.6.\n+     * Major version number of class files for Java 1.6: {@value}.\n@@ -119,1 +119,1 @@\n-     * Minor version number of class files for Java 1.6.\n+     * Minor version number of class files for Java 1.6: {@value}.\n@@ -126,1 +126,1 @@\n-     * Major version number of class files for Java 1.7.\n+     * Major version number of class files for Java 1.7: {@value}.\n@@ -133,1 +133,1 @@\n-     * Minor version number of class files for Java 1.7.\n+     * Minor version number of class files for Java 1.7: {@value}.\n@@ -140,1 +140,1 @@\n-     * Major version number of class files for Java 1.8.\n+     * Major version number of class files for Java 1.8: {@value}.\n@@ -147,1 +147,1 @@\n-     * Minor version number of class files for Java 1.8.\n+     * Minor version number of class files for Java 1.8: {@value}.\n@@ -154,1 +154,1 @@\n-     * Major version number of class files for Java 9.\n+     * Major version number of class files for Java 9: {@value}.\n@@ -161,1 +161,1 @@\n-     * Minor version number of class files for Java 9.\n+     * Minor version number of class files for Java 9: {@value}.\n@@ -168,1 +168,1 @@\n-     * @deprecated Use {@link #MAJOR_9} instead\n+     * @deprecated Use {@link #MAJOR_9} ({@value}) instead.\n@@ -174,1 +174,1 @@\n-     * @deprecated Use {@link #MINOR_9} instead\n+     * @deprecated Use {@link #MINOR_9} ({@value}) instead.\n@@ -180,1 +180,1 @@\n-     * Major version number of class files for Java 10.\n+     * Major version number of class files for Java 10: {@value}.\n@@ -187,1 +187,1 @@\n-     * Minor version number of class files for Java 10.\n+     * Minor version number of class files for Java 10: {@value}.\n@@ -194,1 +194,1 @@\n-     * Major version number of class files for Java 11.\n+     * Major version number of class files for Java 11: {@value}.\n@@ -201,1 +201,1 @@\n-     * Minor version number of class files for Java 11.\n+     * Minor version number of class files for Java 11: {@value}.\n@@ -208,1 +208,1 @@\n-     * Major version number of class files for Java 12.\n+     * Major version number of class files for Java 12: {@value}.\n@@ -215,1 +215,1 @@\n-     * Minor version number of class files for Java 12.\n+     * Minor version number of class files for Java 12: {@value}.\n@@ -222,1 +222,1 @@\n-     * Major version number of class files for Java 13.\n+     * Major version number of class files for Java 13: {@value}.\n@@ -229,1 +229,1 @@\n-     * Minor version number of class files for Java 13.\n+     * Minor version number of class files for Java 13: {@value}.\n@@ -236,1 +236,1 @@\n-     * Minor version number of class files for Java 14.\n+     * Minor version number of class files for Java 14: {@value}.\n@@ -244,1 +244,1 @@\n-     * Minor version number of class files for Java 15.\n+     * Minor version number of class files for Java 15: {@value}.\n@@ -252,1 +252,1 @@\n-     * Minor version number of class files for Java 16.\n+     * Minor version number of class files for Java 16: {@value}.\n@@ -260,1 +260,1 @@\n-     * Minor version number of class files for Java 17.\n+     * Minor version number of class files for Java 17: {@value}.\n@@ -268,1 +268,1 @@\n-     * Minor version number of class files for Java 18.\n+     * Minor version number of class files for Java 18: {@value}.\n@@ -276,1 +276,1 @@\n-     * Minor version number of class files for Java 19.\n+     * Minor version number of class files for Java 19: {@value}.\n@@ -284,1 +284,41 @@\n-     * Major version number of class files for Java 14.\n+     * Minor version number of class files for Java 20: {@value}.\n+     *\n+     * @see #MAJOR_20\n+     * @since 6.8.0\n+     *\/\n+    public static final short MINOR_20 = 0;\n+\n+    \/**\n+     * Minor version number of class files for Java 21: {@value}.\n+     *\n+     * @see #MAJOR_21\n+     * @since 6.8.0\n+     *\/\n+    public static final short MINOR_21 = 0;\n+\n+    \/**\n+     * Minor version number of class files for Java 22: {@value}.\n+     *\n+     * @see #MAJOR_22\n+     * @since 6.10.0\n+     *\/\n+    public static final short MINOR_22 = 0;\n+\n+    \/**\n+     * Minor version number of class files for Java 23: {@value}.\n+     *\n+     * @see #MAJOR_23\n+     * @since 6.10.0\n+     *\/\n+    public static final short MINOR_23 = 0;\n+\n+    \/**\n+     * Minor version number of class files for Java 24: {@value}.\n+     *\n+     * @see #MAJOR_24\n+     * @since 6.10.0\n+     *\/\n+    public static final short MINOR_24 = 0;\n+\n+    \/**\n+     * Major version number of class files for Java 14: {@value}.\n@@ -292,1 +332,1 @@\n-     * Major version number of class files for Java 15.\n+     * Major version number of class files for Java 15: {@value}.\n@@ -300,1 +340,1 @@\n-     * Major version number of class files for Java 16.\n+     * Major version number of class files for Java 16: {@value}.\n@@ -308,1 +348,1 @@\n-     * Major version number of class files for Java 17.\n+     * Major version number of class files for Java 17: {@value}.\n@@ -316,1 +356,1 @@\n-     * Major version number of class files for Java 18.\n+     * Major version number of class files for Java 18: {@value}.\n@@ -324,1 +364,1 @@\n-     * Major version number of class files for Java 19.\n+     * Major version number of class files for Java 19: {@value}.\n@@ -332,1 +372,41 @@\n-     * Default major version number. Class file is for Java 1.1.\n+     * Major version number of class files for Java 20: {@value}.\n+     *\n+     * @see #MINOR_20\n+     * @since 6.8.0\n+     *\/\n+    public static final short MAJOR_20 = 64;\n+\n+    \/**\n+     * Major version number of class files for Java 21: {@value}.\n+     *\n+     * @see #MINOR_21\n+     * @since 6.8.0\n+     *\/\n+    public static final short MAJOR_21 = 65;\n+\n+    \/**\n+     * Major version number of class files for Java 22: {@value}.\n+     *\n+     * @see #MINOR_22\n+     * @since 6.10.0\n+     *\/\n+    public static final short MAJOR_22 = 66;\n+\n+    \/**\n+     * Major version number of class files for Java 23: {@value}.\n+     *\n+     * @see #MINOR_23\n+     * @since 6.10.0\n+     *\/\n+    public static final short MAJOR_23 = 67;\n+\n+    \/**\n+     * Major version number of class files for Java 24: {@value}.\n+     *\n+     * @see #MINOR_24\n+     * @since 6.10.0\n+     *\/\n+    public static final short MAJOR_24 = 68;\n+\n+    \/**\n+     * Default major version number. Class file is for Java 1.1: {@value}.\n@@ -339,1 +419,1 @@\n-     * Default major version number. Class file is for Java 1.1.\n+     * Default major version number. Class file is for Java 1.1: {@value}.\n@@ -346,1 +426,1 @@\n-     * Maximum value for an unsigned short.\n+     * Maximum value for an unsigned short: {@value}.\n@@ -351,1 +431,1 @@\n-     * Maximum value for an unsigned byte.\n+     * Maximum value for an unsigned byte: {@value}.\n@@ -356,1 +436,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -370,1 +450,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -377,1 +457,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -384,1 +464,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -391,1 +471,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -398,1 +478,1 @@\n-     * One of the access flags for the Module attribute.\n+     * One of the access flags for the Module attribute: {@value}.\n@@ -405,1 +485,1 @@\n-     * One of the access flags for classes.\n+     * One of the access flags for classes: {@value}.\n@@ -412,1 +492,1 @@\n-     * One of the access flags for methods.\n+     * One of the access flags for methods: {@value}.\n@@ -419,1 +499,1 @@\n-     * One of the access flags for the Module attribute.\n+     * One of the access flags for the Module attribute: {@value}.\n@@ -426,1 +506,1 @@\n-     * One of the access flags for methods.\n+     * One of the access flags for methods: {@value}.\n@@ -433,1 +513,1 @@\n-     * One of the access flags for the Module attribute.\n+     * One of the access flags for the Module attribute: {@value}.\n@@ -440,1 +520,1 @@\n-     * One of the access flags for fields.\n+     * One of the access flags for fields: {@value}.\n@@ -447,1 +527,1 @@\n-     * One of the access flags for fields.\n+     * One of the access flags for fields: {@value}.\n@@ -454,1 +534,1 @@\n-     * One of the access flags for methods.\n+     * One of the access flags for methods: {@value}.\n@@ -461,1 +541,1 @@\n-     * One of the access flags for methods.\n+     * One of the access flags for methods: {@value}.\n@@ -468,1 +548,1 @@\n-     * One of the access flags for classes.\n+     * One of the access flags for classes: {@value}.\n@@ -475,1 +555,1 @@\n-     * One of the access flags for methods or classes.\n+     * One of the access flags for methods or classes: {@value}.\n@@ -482,1 +562,1 @@\n-     * One of the access flags for methods.\n+     * One of the access flags for methods: {@value}.\n@@ -489,1 +569,1 @@\n-     * One of the access flags for fields, methods, classes, MethodParameter attribute, or Module attribute.\n+     * One of the access flags for fields, methods, classes, MethodParameter attribute, or Module attribute: {@value}.\n@@ -496,1 +576,1 @@\n-     * One of the access flags for classes.\n+     * One of the access flags for classes: {@value}.\n@@ -503,1 +583,1 @@\n-     * One of the access flags for fields or classes.\n+     * One of the access flags for fields or classes: {@value}.\n@@ -511,1 +591,1 @@\n-     * One of the access flags for MethodParameter or Module attributes.\n+     * One of the access flags for MethodParameter or Module attributes: {@value}.\n@@ -518,1 +598,1 @@\n-     * One of the access flags for classes.\n+     * One of the access flags for classes: {@value}.\n@@ -525,1 +605,1 @@\n-     * One of the access flags for fields, methods, or classes.\n+     * One of the access flags for fields, methods, or classes: {@value}.\n@@ -534,1 +614,1 @@\n-     * One of the access flags for fields, methods, or classes. ACC_MODULE is negative as a short.\n+     * One of the access flags for fields, methods, or classes. ACC_MODULE is negative as a short: {@value}.\n@@ -556,1 +636,1 @@\n-     * Marks a constant pool entry as type UTF-8.\n+     * Marks a constant pool entry as type UTF-8: {@value}.\n@@ -569,1 +649,1 @@\n-     * Marks a constant pool entry as type Integer.\n+     * Marks a constant pool entry as type Integer: {@value}.\n@@ -577,1 +657,1 @@\n-     * Marks a constant pool entry as type Float.\n+     * Marks a constant pool entry as type Float: {@value}.\n@@ -585,1 +665,1 @@\n-     * Marks a constant pool entry as type Long.\n+     * Marks a constant pool entry as type Long: {@value}.\n@@ -593,1 +673,1 @@\n-     * Marks a constant pool entry as type Double.\n+     * Marks a constant pool entry as type Double: {@value}.\n@@ -601,1 +681,1 @@\n-     * Marks a constant pool entry as a Class\n+     * Marks a constant pool entry as a Class: {@value}.\n@@ -609,1 +689,1 @@\n-     * Marks a constant pool entry as a Field Reference.\n+     * Marks a constant pool entry as a Field Reference: {@value}.\n@@ -617,1 +697,1 @@\n-     * Marks a constant pool entry as type String\n+     * Marks a constant pool entry as type String: {@value}.\n@@ -625,1 +705,1 @@\n-     * Marks a constant pool entry as a Method Reference.\n+     * Marks a constant pool entry as a Method Reference: {@value}.\n@@ -633,1 +713,1 @@\n-     * Marks a constant pool entry as an Interface Method Reference.\n+     * Marks a constant pool entry as an Interface Method Reference: {@value}.\n@@ -641,1 +721,1 @@\n-     * Marks a constant pool entry as a name and type.\n+     * Marks a constant pool entry as a name and type: {@value}.\n@@ -649,1 +729,1 @@\n-     * Marks a constant pool entry as a Method Handle.\n+     * Marks a constant pool entry as a Method Handle: {@value}.\n@@ -657,1 +737,1 @@\n-     * Marks a constant pool entry as a Method Type.\n+     * Marks a constant pool entry as a Method Type: {@value}.\n@@ -665,1 +745,1 @@\n-     * Marks a constant pool entry as dynamically computed.\n+     * Marks a constant pool entry as dynamically computed: {@value}.\n@@ -667,2 +747,2 @@\n-     * @see <a href=\"https:\/\/bugs.openjdk.java.net\/secure\/attachment\/74618\/constant-dynamic.html\"> Change request for JEP\n-     *      309<\/a>\n+     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se11\/html\/jvms-4.html#jvms-4.4.10\"> The Constant Pool in The\n+     *      Java Virtual Machine Specification<\/a>\n@@ -674,1 +754,1 @@\n-     * Marks a constant pool entry as an Invoke Dynamic\n+     * Marks a constant pool entry as an Invoke Dynamic: {@value}.\n@@ -682,1 +762,1 @@\n-     * Marks a constant pool entry as a Module Reference.\n+     * Marks a constant pool entry as a Module Reference: {@value}.\n@@ -691,1 +771,1 @@\n-     * Marks a constant pool entry as a Package Reference.\n+     * Marks a constant pool entry as a Package Reference: {@value}.\n@@ -708,1 +788,1 @@\n-     * initialization method&quot;. This is &quot;&lt;clinit&gt;&quot;.\n+     * initialization method&quot;. This is {@value}.\n@@ -714,1 +794,1 @@\n-     * &quot;&lt;init&gt;&quot;.\n+     * {@value}.\n@@ -719,1 +799,1 @@\n-     * The names of the interfaces implemented by arrays\n+     * The names of the interfaces implemented by arrays.\n@@ -724,1 +804,1 @@\n-     * Maximum Constant Pool entries. One of the limitations of the Java Virtual Machine.\n+     * Maximum Constant Pool entries: {@value}. One of the limitations of the Java Virtual Machine.\n@@ -732,7 +812,11 @@\n-     * Maximum code size (plus one; the code size must be LESS than this) One of the limitations of the Java Virtual\n-     * Machine. Note vmspec2 page 152 (\"Limitations\") says: \"The amount of code per non-native, non-abstract method is\n-     * limited to 65536 bytes by the sizes of the indices in the exception_table of the Code attribute (4.7.3), in the\n-     * LineNumberTable attribute (4.7.8), and in the LocalVariableTable attribute (4.7.9).\" However this should be taken\n-     * as an upper limit rather than the defined maximum. On page 134 (4.8.1 Static Constants) of the same spec, it says:\n-     * \"The value of the code_length item must be less than 65536.\" The entry in the Limitations section has been removed\n-     * from later versions of the spec; it is not present in the Java SE 8 edition.\n+     * Maximum code size (plus one; the code size must be LESS than this): {@value}.\n+     * <p>\n+     * One of the limitations of the Java Virtual Machine. Note vmspec2 page 152 (\"Limitations\") says:\n+     * <\/p>\n+     * <pre>\"The amount of code per non-native, non-abstract method is limited to 65536 bytes by the sizes of the indices in the exception_table of the Code\n+     * attribute (4.7.3), in the LineNumberTable attribute (4.7.8), and in the LocalVariableTable attribute (4.7.9).\" However this should be taken as an\n+     * upper limit rather than the defined maximum. On page 134 (4.8.1 Static Constants) of the same spec, it says: \"The value of the code_length item must be\n+     * less than 65536.\"<\/pre>\n+     * <p>\n+     * The entry in the Limitations section has been removed from later versions of the specification; it is not present in the Java SE 8 edition.\n+     * <\/p>\n@@ -740,2 +824,2 @@\n-     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.7.3-300-E\"> The Java Virtual\n-     *      Machine Specification, Java SE 8 Edition, page 104, chapter 4.7.<\/a>\n+     * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.7.3-300-E\"> The Java Virtual Machine Specification, Java SE 8\n+     *      Edition, page 104, chapter 4.7.<\/a>\n@@ -746,1 +830,1 @@\n-     * The maximum number of dimensions in an array ({@value}). One of the limitations of the Java Virtual Machine.\n+     * The maximum number of dimensions in an array: {@value}. One of the limitations of the Java Virtual Machine.\n@@ -754,1 +838,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -762,1 +846,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -770,1 +854,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -778,1 +862,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -786,1 +870,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -794,1 +878,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -802,1 +886,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -810,1 +894,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -818,1 +902,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -826,1 +910,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -834,1 +918,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -842,1 +926,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -850,1 +934,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -858,1 +942,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -866,1 +950,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -874,1 +958,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -882,1 +966,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -890,1 +974,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -898,1 +982,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -906,1 +990,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -914,1 +998,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -922,1 +1006,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -930,1 +1014,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -938,1 +1022,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -946,1 +1030,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -954,1 +1038,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -962,1 +1046,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -970,1 +1054,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -978,1 +1062,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -986,1 +1070,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -994,1 +1078,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1002,1 +1086,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1010,1 +1094,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1018,1 +1102,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1026,1 +1110,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1034,1 +1118,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1042,1 +1126,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1050,1 +1134,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1058,1 +1142,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1066,1 +1150,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1074,1 +1158,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1082,1 +1166,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1090,1 +1174,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1098,1 +1182,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1106,1 +1190,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1114,1 +1198,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1122,1 +1206,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1130,1 +1214,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1138,1 +1222,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1146,1 +1230,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1154,1 +1238,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1162,1 +1246,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1170,1 +1254,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1178,1 +1262,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1186,1 +1270,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1194,1 +1278,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1202,1 +1286,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1210,1 +1294,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1218,1 +1302,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1226,1 +1310,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1234,1 +1318,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1242,1 +1326,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1250,1 +1334,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1258,1 +1342,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1266,1 +1350,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1274,1 +1358,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1282,1 +1366,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1290,1 +1374,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1298,1 +1382,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1306,1 +1390,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1314,1 +1398,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1322,1 +1406,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1330,1 +1414,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1338,1 +1422,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1346,1 +1430,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1354,1 +1438,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1362,1 +1446,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1370,1 +1454,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1378,1 +1462,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1386,1 +1470,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1394,1 +1478,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1402,1 +1486,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1410,1 +1494,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1418,1 +1502,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1426,1 +1510,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1434,1 +1518,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1442,1 +1526,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1450,1 +1534,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1458,1 +1542,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1466,1 +1550,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1474,1 +1558,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1482,1 +1566,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1490,1 +1574,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1498,1 +1582,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1506,1 +1590,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1514,1 +1598,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1522,1 +1606,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1530,1 +1614,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1538,1 +1622,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1546,1 +1630,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1554,1 +1638,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1562,1 +1646,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1570,1 +1654,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1578,1 +1662,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1586,1 +1670,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1594,1 +1678,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1602,1 +1686,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1610,1 +1694,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1618,1 +1702,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1626,1 +1710,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1634,1 +1718,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1642,1 +1726,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1650,1 +1734,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1658,1 +1742,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1666,1 +1750,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1674,1 +1758,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1682,1 +1766,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1690,1 +1774,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1698,1 +1782,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1706,1 +1790,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1714,1 +1798,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1722,1 +1806,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1730,1 +1814,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1738,1 +1822,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1746,1 +1830,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1754,1 +1838,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1762,1 +1846,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1770,1 +1854,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1778,1 +1862,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1786,1 +1870,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1794,1 +1878,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1802,1 +1886,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1810,1 +1894,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1818,1 +1902,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1826,1 +1910,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1834,1 +1918,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1842,1 +1926,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1850,1 +1934,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1858,1 +1942,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1866,1 +1950,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1874,1 +1958,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1882,1 +1966,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1890,1 +1974,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1898,1 +1982,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1906,1 +1990,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1914,1 +1998,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1922,1 +2006,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1930,1 +2014,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1938,1 +2022,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1946,1 +2030,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1954,1 +2038,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1962,1 +2046,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1970,1 +2054,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1978,1 +2062,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1986,1 +2070,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -1994,1 +2078,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2002,1 +2086,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2010,1 +2094,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2018,1 +2102,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2026,1 +2110,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2034,1 +2118,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2042,1 +2126,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2050,1 +2134,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2058,1 +2142,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2066,1 +2150,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2074,1 +2158,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2082,1 +2166,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2090,1 +2174,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2098,1 +2182,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2106,1 +2190,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2114,1 +2198,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2122,1 +2206,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2130,1 +2214,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2138,1 +2222,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2146,1 +2230,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2154,1 +2238,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2162,1 +2246,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2170,1 +2254,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2178,1 +2262,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2186,1 +2270,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2194,1 +2278,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2202,1 +2286,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2210,1 +2294,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2218,1 +2302,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2226,1 +2310,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2234,1 +2318,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2242,1 +2326,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2250,1 +2334,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2258,1 +2342,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2266,1 +2350,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2274,1 +2358,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2282,1 +2366,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2290,1 +2374,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2298,1 +2382,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2306,1 +2390,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2314,1 +2398,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2322,1 +2406,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2330,1 +2414,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2338,1 +2422,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2346,1 +2430,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2354,1 +2438,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2362,1 +2446,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2370,1 +2454,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2378,1 +2462,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2386,1 +2470,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2394,1 +2478,1 @@\n-     * Java VM opcode.\n+     * Java VM opcode {@value}.\n@@ -2402,1 +2486,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2410,1 +2494,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2421,1 +2505,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2432,1 +2516,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2443,1 +2527,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2454,1 +2538,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2465,1 +2549,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2476,1 +2560,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2487,1 +2571,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2498,1 +2582,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2509,1 +2593,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2520,1 +2604,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2531,1 +2615,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2542,1 +2626,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2553,1 +2637,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2564,1 +2648,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2575,1 +2659,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2586,1 +2670,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2597,1 +2681,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2608,1 +2692,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2619,1 +2703,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2630,1 +2714,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2641,1 +2725,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2652,1 +2736,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2663,1 +2747,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2674,1 +2758,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2685,1 +2769,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2693,1 +2777,1 @@\n-     * JVM internal opcode.\n+     * JVM internal opcode {@value}.\n@@ -2701,1 +2785,1 @@\n-     * BCEL virtual instruction for pushing an arbitrary data type onto the stack. Will be converted to the appropriate JVM\n+     * BCEL virtual instruction for pushing an arbitrary data type onto the stack: {@value}. Will be converted to the appropriate JVM\n@@ -2707,1 +2791,1 @@\n-     * BCEL virtual instruction for either LOOKUPSWITCH or TABLESWITCH. Will be converted to the appropriate JVM opcode when\n+     * BCEL virtual instruction for either LOOKUPSWITCH or TABLESWITCH: {@value}. Will be converted to the appropriate JVM opcode when\n@@ -2712,1 +2796,3 @@\n-    \/** Illegal opcode. *\/\n+    \/**\n+     * Illegal opcode: {@value}.\n+     *\/\n@@ -2715,1 +2801,3 @@\n-    \/** Illegal opcode. *\/\n+    \/**\n+     * Illegal opcode: {@value}.\n+     *\/\n@@ -2718,1 +2806,3 @@\n-    \/** Illegal opcode. *\/\n+    \/**\n+     * Illegal opcode: {@value}.\n+     *\/\n@@ -2721,1 +2811,3 @@\n-    \/** Mnemonic for an illegal opcode. *\/\n+    \/**\n+     * Mnemonic for an illegal opcode: {@value}.\n+     *\/\n@@ -2724,1 +2816,3 @@\n-    \/** Mnemonic for an illegal type. *\/\n+    \/**\n+     * Mnemonic for an illegal type: {@value}.\n+     *\/\n@@ -2728,1 +2822,1 @@\n-     * Boolean data type.\n+     * Boolean data type: {@value}.\n@@ -2736,1 +2830,1 @@\n-     * Char data type.\n+     * Char data type: {@value}.\n@@ -2744,1 +2838,1 @@\n-     * Float data type.\n+     * Float data type: {@value}.\n@@ -2752,1 +2846,1 @@\n-     * Double data type.\n+     * Double data type: {@value}.\n@@ -2760,1 +2854,1 @@\n-     * Byte data type.\n+     * Byte data type: {@value}.\n@@ -2768,1 +2862,1 @@\n-     * Short data type.\n+     * Short data type: {@value}.\n@@ -2776,1 +2870,1 @@\n-     * Int data type.\n+     * Int data type: {@value}.\n@@ -2784,1 +2878,1 @@\n-     * Long data type.\n+     * Long data type: {@value}.\n@@ -2830,1 +2924,1 @@\n-    private static final String[] SHORT_TYPE_NAMES = {ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, \"Z\", \"C\", \"F\", \"D\", \"B\", \"S\", \"I\", \"J\", \"V\",\n+    public static final String[] SHORT_TYPE_NAMES = {ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, ILLEGAL_TYPE, \"Z\", \"C\", \"F\", \"D\", \"B\", \"S\", \"I\", \"J\", \"V\",\n@@ -3039,1 +3133,3 @@\n-    public static final short KNOWN_ATTRIBUTES = 27; \/\/ count of attributes\n+    public static final byte ATTR_RECORD = 27;\n+\n+    public static final short KNOWN_ATTRIBUTES = 28; \/\/ count of attributes\n@@ -3043,1 +3139,1 @@\n-        \"StackMapTable\", \"BootstrapMethods\", \"MethodParameters\", \"Module\", \"ModulePackages\", \"ModuleMainClass\", \"NestHost\", \"NestMembers\"};\n+        \"StackMapTable\", \"BootstrapMethods\", \"MethodParameters\", \"Module\", \"ModulePackages\", \"ModuleMainClass\", \"NestHost\", \"NestMembers\", \"Record\"};\n@@ -3073,0 +3169,1 @@\n+\n@@ -3093,0 +3190,1 @@\n+\n@@ -3100,1 +3198,1 @@\n-     * @param index\n+     * @param index index into {@code ACCESS_NAMES}.\n@@ -3110,1 +3208,1 @@\n-     * @param index\n+     * @param index index into {@code ACCESS_NAMES}.\n@@ -3121,1 +3219,1 @@\n-     * @param index\n+     * @param index index into {@code CLASS_TYPE_NAMES}.\n@@ -3131,1 +3229,1 @@\n-     * @param index\n+     * @param index index into {@code CONSTANT_NAMES}.\n@@ -3143,1 +3241,1 @@\n-     * @param index\n+     * @param index index into {@code CONSUME_STACK}.\n@@ -3160,1 +3258,1 @@\n-     * @param index\n+     * @param index index into {@code ITEM_NAMES}.\n@@ -3170,1 +3268,1 @@\n-     * @param index\n+     * @param index index into {@code METHODHANDLE_NAMES}.\n@@ -3180,1 +3278,1 @@\n-     * @param index\n+     * @param index index into {@code NO_OF_OPERANDS}.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/Const.java","additions":463,"deletions":365,"binary":false,"changes":828,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -55,1 +55,0 @@\n-\n@@ -70,0 +69,1 @@\n+\n@@ -73,1 +73,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/ExceptionConst.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -177,1 +177,1 @@\n-     * Lookups class somewhere found on your CLASSPATH, or wherever the repository instance looks for it.\n+     * Lookups class somewhere found on your CLASSPATH, or whereever the repository instance looks for it.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/Repository.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @LastModified: Jan 2020\n+ * @LastModified: Sept 2025\n@@ -33,1 +33,3 @@\n-     * @deprecated (since 6.0) will be made private; do not access directly, use getter\/setter\n+     * Access flags.\n+     *\n+     * @deprecated (since 6.0) will be made private; do not access directly, use getter\/setter.\n@@ -38,0 +40,3 @@\n+    \/**\n+     * Constructs a new instance.\n+     *\/\n@@ -42,1 +47,3 @@\n-     * @param a initial access flags\n+     * Constructs a new instance.\n+     *\n+     * @param accessFlags initial access flags.\n@@ -44,2 +51,2 @@\n-    public AccessFlags(final int a) {\n-        access_flags = a;\n+    public AccessFlags(final int accessFlags) {\n+        access_flags = accessFlags;\n@@ -49,0 +56,2 @@\n+     * Gets access flags.\n+     *\n@@ -56,1 +65,3 @@\n-     * @return Access flags of the object aka. \"modifiers\".\n+     * Gets access flags.\n+     *\n+     * @return Access flags of the object also known as modifiers.\n@@ -62,0 +73,5 @@\n+    \/**\n+     * Tests whether the abstract bit is on.\n+     *\n+     * @return whether the abstract bit is on.\n+     *\/\n@@ -63,1 +79,1 @@\n-        return (access_flags & Const.ACC_ABSTRACT) != 0;\n+        return test(Const.ACC_ABSTRACT);\n@@ -66,0 +82,5 @@\n+    \/**\n+     * Sets the abstract bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -70,0 +91,5 @@\n+    \/**\n+     * Tests whether the annotation bit is on.\n+     *\n+     * @return whether the annotation bit is on.\n+     *\/\n@@ -71,1 +97,1 @@\n-        return (access_flags & Const.ACC_ANNOTATION) != 0;\n+        return test(Const.ACC_ANNOTATION);\n@@ -74,0 +100,5 @@\n+    \/**\n+     * Sets the annotation bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -77,1 +108,5 @@\n-\n+    \/**\n+     * Tests whether the enum bit is on.\n+     *\n+     * @return whether the enum bit is on.\n+     *\/\n@@ -79,1 +114,1 @@\n-        return (access_flags & Const.ACC_ENUM) != 0;\n+        return test(Const.ACC_ENUM);\n@@ -82,0 +117,5 @@\n+    \/**\n+     * Sets the enum bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -86,0 +126,5 @@\n+    \/**\n+     * Tests whether the final bit is on.\n+     *\n+     * @return whether the final bit is on.\n+     *\/\n@@ -87,1 +132,1 @@\n-        return (access_flags & Const.ACC_FINAL) != 0;\n+        return test(Const.ACC_FINAL);\n@@ -90,0 +135,5 @@\n+    \/**\n+     * Sets the final bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -94,0 +144,5 @@\n+    \/**\n+     * Tests whether the interface bit is on.\n+     *\n+     * @return whether the interface bit is on.\n+     *\/\n@@ -95,1 +150,1 @@\n-        return (access_flags & Const.ACC_INTERFACE) != 0;\n+        return test(Const.ACC_INTERFACE);\n@@ -98,0 +153,5 @@\n+    \/**\n+     * Sets the interface bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -102,0 +162,5 @@\n+    \/**\n+     * Tests whether the native bit is on.\n+     *\n+     * @return whether the native bit is on.\n+     *\/\n@@ -103,1 +168,1 @@\n-        return (access_flags & Const.ACC_NATIVE) != 0;\n+        return test(Const.ACC_NATIVE);\n@@ -106,0 +171,5 @@\n+    \/**\n+     * Sets the native bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -110,0 +180,5 @@\n+    \/**\n+     * Tests whether the private bit is on.\n+     *\n+     * @return whether the private bit is on.\n+     *\/\n@@ -111,1 +186,1 @@\n-        return (access_flags & Const.ACC_PRIVATE) != 0;\n+        return test(Const.ACC_PRIVATE);\n@@ -114,0 +189,5 @@\n+    \/**\n+     * Sets the private bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -118,0 +198,5 @@\n+    \/**\n+     * Tests whether the protected bit is on.\n+     *\n+     * @return whether the protected bit is on.\n+     *\/\n@@ -119,1 +204,1 @@\n-        return (access_flags & Const.ACC_PROTECTED) != 0;\n+        return test(Const.ACC_PROTECTED);\n@@ -122,0 +207,5 @@\n+    \/**\n+     * Sets the protected bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -126,0 +216,5 @@\n+    \/**\n+     * Tests whether the public bit is on.\n+     *\n+     * @return whether the public bit is on.\n+     *\/\n@@ -127,1 +222,1 @@\n-        return (access_flags & Const.ACC_PUBLIC) != 0;\n+        return test(Const.ACC_PUBLIC);\n@@ -130,0 +225,5 @@\n+    \/**\n+     * Sets the public bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -134,0 +234,5 @@\n+    \/**\n+     * Tests whether the static bit is on.\n+     *\n+     * @return whether the static bit is on.\n+     *\/\n@@ -135,1 +240,1 @@\n-        return (access_flags & Const.ACC_STATIC) != 0;\n+        return test(Const.ACC_STATIC);\n@@ -138,0 +243,5 @@\n+    \/**\n+     * Sets the static bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -142,0 +252,5 @@\n+    \/**\n+     * Tests whether the strict bit is on.\n+     *\n+     * @return whether the strict bit is on.\n+     *\/\n@@ -143,1 +258,1 @@\n-        return (access_flags & Const.ACC_STRICT) != 0;\n+        return test(Const.ACC_STRICT);\n@@ -146,0 +261,5 @@\n+    \/**\n+     * Sets the strict bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -150,0 +270,5 @@\n+    \/**\n+     * Tests whether the synchronized bit is on.\n+     *\n+     * @return whether the synchronized bit is on.\n+     *\/\n@@ -151,1 +276,1 @@\n-        return (access_flags & Const.ACC_SYNCHRONIZED) != 0;\n+        return test(Const.ACC_SYNCHRONIZED);\n@@ -154,0 +279,5 @@\n+    \/**\n+     * Sets the synchronized bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -158,0 +288,5 @@\n+    \/**\n+     * Tests whether the synthetic bit is on.\n+     *\n+     * @return whether the synthetic bit is on.\n+     *\/\n@@ -159,1 +294,1 @@\n-        return (access_flags & Const.ACC_SYNTHETIC) != 0;\n+        return test(Const.ACC_SYNTHETIC);\n@@ -162,0 +297,5 @@\n+    \/**\n+     * Sets the synthetic bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -166,0 +306,5 @@\n+    \/**\n+     * Tests whether the transient bit is on.\n+     *\n+     * @return whether the varargs bit is on.\n+     *\/\n@@ -167,1 +312,1 @@\n-        return (access_flags & Const.ACC_TRANSIENT) != 0;\n+        return test(Const.ACC_TRANSIENT);\n@@ -170,0 +315,5 @@\n+    \/**\n+     * Sets the varargs bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -174,0 +324,5 @@\n+    \/**\n+     * Tests whether the varargs bit is on.\n+     *\n+     * @return whether the varargs bit is on.\n+     *\/\n@@ -175,1 +330,1 @@\n-        return (access_flags & Const.ACC_VARARGS) != 0;\n+        return test(Const.ACC_VARARGS);\n@@ -178,0 +333,5 @@\n+    \/**\n+     * Sets the varargs bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -182,0 +342,5 @@\n+    \/**\n+     * Tests whether the volatile bit is on.\n+     *\n+     * @return whether the volatile bit is on.\n+     *\/\n@@ -183,1 +348,1 @@\n-        return (access_flags & Const.ACC_VOLATILE) != 0;\n+        return test(Const.ACC_VOLATILE);\n@@ -186,0 +351,5 @@\n+    \/**\n+     * Sets the volatile bit.\n+     *\n+     * @param flag The new value.\n+     *\/\n@@ -191,1 +361,1 @@\n-     * Set access flags aka \"modifiers\".\n+     * Sets access flags also known as modifiers.\n@@ -210,1 +380,1 @@\n-     * Set access flags aka \"modifiers\".\n+     * Sets access flags aka \"modifiers\".\n@@ -217,0 +387,10 @@\n+\n+    \/**\n+     * Tests whether the bit is on.\n+     *\n+     * @param test the bit to test.\n+     * @return whether the bit is on.\n+     *\/\n+    private boolean test(final short test) {\n+        return (access_flags & test) != 0;\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AccessFlags.java","additions":206,"deletions":26,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +29,1 @@\n+import jdk.xml.internal.Utils;\n@@ -35,0 +35,1 @@\n+ * @LastModified: Sept 2025\n@@ -40,1 +41,1 @@\n-    public static AnnotationEntry[] createAnnotationEntries(final Attribute[] attrs) {\n+    public static AnnotationEntry[] createAnnotationEntries(final Attribute[] attributes) {\n@@ -42,2 +43,2 @@\n-        return Stream.of(attrs).filter(Annotations.class::isInstance).flatMap(e -> Stream.of(((Annotations) e).getAnnotationEntries()))\n-            .toArray(AnnotationEntry[]::new);\n+        return Utils.streamOfIfNonNull(attributes).filter(Annotations.class::isInstance).flatMap(e -> Stream.of(((Annotations) e).getAnnotationEntries()))\n+                .toArray(AnnotationEntry[]::new);\n@@ -58,1 +59,0 @@\n-        annotationEntry.elementValuePairs = new ArrayList<>();\n@@ -72,1 +72,1 @@\n-    private List<ElementValuePair> elementValuePairs;\n+    private final List<ElementValuePair> elementValuePairs;\n@@ -78,0 +78,1 @@\n+        this.elementValuePairs = new ArrayList<>();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/AnnotationEntry.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        this.annotationTable = annotationTable;\n+        setAnnotationTable(annotationTable);\n@@ -111,3 +111,0 @@\n-        if (annotationTable == null) {\n-            return 0;\n-        }\n@@ -132,1 +129,1 @@\n-        this.annotationTable = annotationTable;\n+        this.annotationTable = annotationTable != null ? annotationTable : AnnotationEntry.EMPTY_ARRAY;\n@@ -154,3 +151,0 @@\n-        if (annotationTable == null) {\n-            return;\n-        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Annotations.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    public ArrayElementValue(final int type, final ElementValue[] datums, final ConstantPool cpool) {\n+    public ArrayElementValue(final int type, final ElementValue[] elementValues, final ConstantPool cpool) {\n@@ -39,1 +39,1 @@\n-        this.elementValues = datums;\n+        this.elementValues = elementValues != null ? elementValues : EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ArrayElementValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -184,0 +184,2 @@\n+        case Const.ATTR_RECORD:\n+            return new Record(nameIndex, length, dataInput, constantPool);\n@@ -282,1 +284,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Attribute.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +29,1 @@\n+import jdk.xml.internal.Utils;\n@@ -38,0 +38,1 @@\n+ * @LastModified: Sept 2025\n@@ -41,0 +42,2 @@\n+    static final BootstrapMethod[] EMPTY_ARRAY = {};\n+\n@@ -57,1 +60,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -81,1 +84,1 @@\n-        this.bootstrapArguments = bootstrapArguments;\n+        setBootstrapArguments(bootstrapArguments);\n@@ -90,1 +93,1 @@\n-        } catch (final CloneNotSupportedException e) {\n+        } catch (final CloneNotSupportedException ignore) {\n@@ -135,1 +138,1 @@\n-        this.bootstrapArguments = bootstrapArguments;\n+        this.bootstrapArguments = Utils.createEmptyArrayIfNull(bootstrapArguments);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/BootstrapMethod.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        this.bootstrapMethods = bootstrapMethods;\n+        setBootstrapMethods(bootstrapMethods);\n@@ -65,1 +65,1 @@\n-     * Construct object from Input stream.\n+     * Constructs object from Input stream.\n@@ -138,1 +138,1 @@\n-        this.bootstrapMethods = bootstrapMethods;\n+        this.bootstrapMethods = bootstrapMethods != null ? bootstrapMethods : BootstrapMethod.EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/BootstrapMethods.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-     * <p>\n-     * Note that the detail message associated with {@code cause} is <i>not<\/i> automatically incorporated in this runtime exception's detail message.\n@@ -54,2 +52,2 @@\n-     * @param cause   the cause (which is saved for later retrieval by the {@link #getCause()} method). (A {@code null} value is permitted, and indicates that\n-     *                the cause is nonexistent or unknown.)\n+     * @param cause   the cause (which is saved for later retrieval by the {@link #getCause()} method). A {@code null} value is permitted, and indicates that\n+     *                the cause is nonexistent or unknown.\n@@ -66,2 +64,2 @@\n-     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A {@code null} value is permitted, and indicates that the\n-     *              cause is nonexistent or unknown.)\n+     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). A {@code null} value is permitted, and indicates that the\n+     *              cause is nonexistent or unknown.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ClassFormatException.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- * <a href=\"http:\/\/docs.oracle.com\/javase\/specs\/\"> JVM specification 1.0<\/a>. See this paper for further details about\n+ * <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/\"> JVM specification 1.0<\/a>. See this paper for further details about\n@@ -60,1 +60,1 @@\n-    private final boolean isZip; \/\/ Loaded from zip file\n+    private final boolean isZip; \/\/ Loaded from ZIP file\n@@ -94,1 +94,1 @@\n-     * @param zipFile zip file name\n+     * @param zipFile ZIP file name\n@@ -107,1 +107,1 @@\n-     * not include verification of the byte code as it is performed by the java interpreter).\n+     * not include verification of the byte code as it is performed by the Java interpreter).\n@@ -154,1 +154,1 @@\n-            \/\/ if(file.available() > 0) {\n+            \/\/ if (file.available() > 0) {\n@@ -158,1 +158,1 @@\n-            \/\/ if(!(isZip && (buf.length == 1))) {\n+            \/\/ if (!(isZip && (buf.length == 1))) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ClassParser.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.xml.internal.Utils;\n@@ -62,1 +63,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -96,1 +97,1 @@\n-         * Read exception table that contains all regions where an exception handler is active, i.e., a try { ... } catch()\n+         * Read exception table that contains all regions where an exception handler is active, i.e., a try { ... } catch ()\n@@ -110,1 +111,1 @@\n-            attributes[i] = Attribute.readAttribute(file, constantPool);\n+            attributes[i] = readAttribute(file, constantPool);\n@@ -134,2 +135,2 @@\n-        this.code = code != null ? code : Const.EMPTY_BYTE_ARRAY;\n-        this.exceptionTable = exceptionTable != null ? exceptionTable : CodeException.EMPTY_CODE_EXCEPTION_ARRAY;\n+        this.code = Utils.createEmptyArrayIfNull(code);\n+        this.exceptionTable = Utils.createEmptyArrayIfNull(exceptionTable, CodeException[].class);\n@@ -266,0 +267,14 @@\n+    \/**\n+     * Gets the local variable type table attribute {@link LocalVariableTypeTable}.\n+     * @return LocalVariableTypeTable of Code, if it has one, null otherwise.\n+     * @since 6.10.0\n+     *\/\n+    public LocalVariableTypeTable getLocalVariableTypeTable() {\n+        for (final Attribute attribute : attributes) {\n+            if (attribute instanceof LocalVariableTypeTable) {\n+                return (LocalVariableTypeTable) attribute;\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -280,0 +295,14 @@\n+    \/**\n+     * Finds the attribute of {@link StackMap} instance.\n+     * @return StackMap of Code, if it has one, else null.\n+     * @since 6.8.0\n+     *\/\n+    public StackMap getStackMap() {\n+        for (final Attribute attribute : attributes) {\n+            if (attribute instanceof StackMap) {\n+                return (StackMap) attribute;\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -292,1 +321,1 @@\n-        this.code = code != null ? code : Const.EMPTY_BYTE_ARRAY;\n+        this.code = Utils.createEmptyArrayIfNull(code);\n@@ -300,1 +329,1 @@\n-        this.exceptionTable = exceptionTable != null ? exceptionTable : CodeException.EMPTY_CODE_EXCEPTION_ARRAY;\n+        this.exceptionTable = exceptionTable != null ? exceptionTable : CodeException.EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Code.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -62,1 +62,1 @@\n-    static final CodeException[] EMPTY_CODE_EXCEPTION_ARRAY = {};\n+    static final CodeException[] EMPTY_ARRAY = {};\n@@ -67,1 +67,1 @@\n-    \/** active. startPc is inclusive, endPc exclusive. *\/\n+    \/** Active. startPc is inclusive, endPc exclusive. *\/\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/CodeException.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -39,1 +39,3 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    static final Constant[] EMPTY_ARRAY = {};\n+\n+    private static BCELComparator<Constant> bcelComparator = new BCELComparator<Constant>() {\n@@ -42,4 +44,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final Constant THIS = (Constant) o1;\n-            final Constant THAT = (Constant) o2;\n-            return Objects.equals(THIS.toString(), THAT.toString());\n+        public boolean equals(final Constant a, final Constant b) {\n+            return a == b || a != null && b != null && Objects.equals(a.toString(), b.toString());\n@@ -49,3 +49,2 @@\n-        public int hashCode(final Object o) {\n-            final Constant THIS = (Constant) o;\n-            return THIS.toString().hashCode();\n+        public int hashCode(final Constant o) {\n+            return o != null ? Objects.hashCode(o.toString()) : 0;\n@@ -56,1 +55,1 @@\n-     * @return Comparison strategy object\n+     * @return Comparison strategy object.\n@@ -58,1 +57,1 @@\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<Constant> getComparator() {\n@@ -116,1 +115,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<Constant> comparator) {\n@@ -151,1 +150,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n@@ -177,1 +176,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof Constant && bcelComparator.equals(this, (Constant) obj);\n@@ -188,1 +187,1 @@\n-     * Returns value as defined by given BCELComparator strategy. By default return the hashcode of the result of\n+     * Returns value as defined by given BCELComparator strategy. By default return the hash code of the result of\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Constant.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,5 +31,5 @@\n- * @see     ConstantFieldref\n- * @see     ConstantMethodref\n- * @see     ConstantInterfaceMethodref\n- * @see     ConstantInvokeDynamic\n- * @LastModified: Jun 2019\n+ * @see ConstantFieldref\n+ * @see ConstantMethodref\n+ * @see ConstantInterfaceMethodref\n+ * @see ConstantInvokeDynamic\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantCP.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @see     Constant\n- * @LastModified: Jun 2019\n+ * @see Constant\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantDouble.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @see     Constant\n- * @LastModified: Jun 2019\n+ * @see Constant\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantFloat.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @see     Constant\n- * @LastModified: Jun 2019\n+ * @see Constant\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantInteger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @see     Constant\n- * @LastModified: Jan 2020\n+ * @see Constant\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantLong.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,4 @@\n-     * @return object representing the constant, e.g., Long for ConstantLong\n+     * Gets the object representing the constant, e.g., Long for ConstantLong.\n+     *\n+     * @param constantPool the constant.\n+     * @return object representing the constant, e.g., Long for ConstantLong.\n@@ -34,1 +37,1 @@\n-    Object getConstantValue(ConstantPool cp);\n+    Object getConstantValue(ConstantPool constantPool);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantObject.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -76,1 +76,1 @@\n-        this.constantPool = constantPool;\n+        setConstantPool(constantPool);\n@@ -91,0 +91,1 @@\n+         * constantPool[0] is currently unused by the implementation.\n@@ -291,1 +292,1 @@\n-        if (c.getTag() != tag) {\n+        if (c == null || c.getTag() != tag) {\n@@ -316,5 +317,1 @@\n-        \/\/ Previous check ensures this won't throw a ClassCastException\n-        final T c = castTo.cast(constantPool[index]);\n-        if (c == null\n-            \/\/ the 0th element is always null\n-            && index != 0) {\n+        if (index > 1) {\n@@ -322,2 +319,3 @@\n-            if (prev == null || prev.getTag() != Const.CONSTANT_Double && prev.getTag() != Const.CONSTANT_Long) {\n-                throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\n+            if (prev != null && (prev.getTag() == Const.CONSTANT_Double || prev.getTag() == Const.CONSTANT_Long)) {\n+                throw new ClassFormatException(\"Constant pool at index \" + index + \" is invalid. The index is unused due to the preceeding \"\n+                        + Const.getConstantName(prev.getTag()) + \".\");\n@@ -326,0 +324,5 @@\n+        \/\/ Previous check ensures this won't throw a ClassCastException\n+        final T c = castTo.cast(constantPool[index]);\n+        if (c == null) {\n+            throw new ClassFormatException(\"Constant pool at index \" + index + \" is null.\");\n+        }\n@@ -405,1 +408,1 @@\n-        return constantPool == null ? 0 : constantPool.length;\n+        return constantPool.length;\n@@ -424,1 +427,1 @@\n-        this.constantPool = constantPool;\n+        this.constantPool = constantPool != null ? constantPool : Constant.EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantPool.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * <li>{@value #SYS_PROP_CACHE_MAX_ENTRIES} (since 6.4): The size of the cache, by default 0, meaning caching is\n+ * <li>{@link #SYS_PROP_CACHE_MAX_ENTRIES} (since 6.4): The size of the cache, by default 0, meaning caching is\n@@ -41,1 +41,1 @@\n- * <li>{@value #SYS_PROP_CACHE_MAX_ENTRY_SIZE} (since 6.0): The maximum size of the values to cache, by default 200, 0\n+ * <li>{@link #SYS_PROP_CACHE_MAX_ENTRY_SIZE} (since 6.0): The maximum size of the values to cache, by default 200, 0\n@@ -43,1 +43,1 @@\n- * <li>{@value #SYS_PROP_STATISTICS} (since 6.0): Prints statistics on the console when the JVM exits.<\/li>\n+ * <li>{@link #SYS_PROP_STATISTICS} (since 6.0): Prints statistics on the console when the JVM exits.<\/li>\n@@ -61,1 +61,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -65,1 +65,1 @@\n-    private static class Cache {\n+    private static final class Cache {\n@@ -85,1 +85,1 @@\n-            return Cache.MAX_ENTRIES > 0 && MAX_ENTRY_SIZE > 0;\n+            return MAX_ENTRIES > 0 && MAX_ENTRY_SIZE > 0;\n@@ -120,0 +120,5 @@\n+    \/\/ Avoid Spotbugs complaint about Write to static field\n+    private static void countCreated() {\n+        created++;\n+    }\n+\n@@ -206,1 +211,1 @@\n-        created++;\n+        countCreated();\n@@ -215,1 +220,1 @@\n-        created++;\n+        countCreated();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantUtf8.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ConstantValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Deprecated.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import jdk.xml.internal.Utils;\n@@ -27,3 +28,2 @@\n- * Traverses a JavaClass with another Visitor object 'piggy-backed' that is\n- * applied to all components of a JavaClass object. I.e. this class supplies the\n- * traversal strategy, other classes can make use of it.\n+ * Traverses a JavaClass with another Visitor object 'piggy-backed' that is applied to all components of a JavaClass\n+ * object. I.e. this class supplies the traversal strategy, other classes can make use of it.\n@@ -31,0 +31,1 @@\n+ * @LastModified: Sept 2025\n@@ -49,1 +50,1 @@\n-        Stream.of(node).forEach(e -> e.accept(this));\n+        Utils.streamOfIfNonNull(node).forEach(e -> e.accept(this));\n@@ -510,0 +511,15 @@\n+    @Override\n+    public void visitRecord(final Record record) {\n+        stack.push(record);\n+        record.accept(visitor);\n+        accept(record.getComponents());\n+        stack.pop();\n+    }\n+\n+    @Override\n+    public void visitRecordComponent(final RecordComponentInfo recordComponentInfo) {\n+        stack.push(recordComponentInfo);\n+        recordComponentInfo.accept(visitor);\n+        stack.pop();\n+    }\n+\n@@ -534,0 +550,14 @@\n+        stack.push(var);\n+        var.accept(visitor);\n+        accept(var.getTypesOfLocals());\n+        accept(var.getTypesOfStackItems());\n+        stack.pop();\n+    }\n+\n+    \/**\n+     * Visits a {@link StackMapType} object.\n+     * @param var object to visit\n+     * @since 6.8.0\n+     *\/\n+    @Override\n+    public void visitStackMapType(final StackMapType var) {\n@@ -552,0 +582,1 @@\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/DescendingVisitor.java","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -70,0 +70,1 @@\n+    static final ElementValue[] EMPTY_ARRAY = {};\n@@ -127,1 +128,1 @@\n-                evalues[j] = ElementValue.readElementValue(input, cpool, arrayNesting);\n+                evalues[j] = readElementValue(input, cpool, arrayNesting);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ElementValue.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -318,0 +318,9 @@\n+    \/**\n+     * Visits a {@link StackMapType} object.\n+     * @param obj object to visit\n+     * @since 6.8.0\n+     *\/\n+    @Override\n+    public void visitStackMapType(final StackMapType obj) {\n+    }\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/EmptyVisitor.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.xml.internal.Utils;\n@@ -46,1 +47,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -63,1 +64,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -88,1 +89,1 @@\n-        this.exceptionIndexTable = exceptionIndexTable != null ? exceptionIndexTable : Const.EMPTY_INT_ARRAY;\n+        this.exceptionIndexTable = Utils.createEmptyArrayIfNull(exceptionIndexTable);\n@@ -159,1 +160,1 @@\n-        this.exceptionIndexTable = exceptionIndexTable != null ? exceptionIndexTable : Const.EMPTY_INT_ARRAY;\n+        this.exceptionIndexTable = Utils.createEmptyArrayIfNull(exceptionIndexTable);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ExceptionTable.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<Field> bcelComparator = new BCELComparator<Field>() {\n@@ -48,4 +48,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final Field THIS = (Field) o1;\n-            final Field THAT = (Field) o2;\n-            return Objects.equals(THIS.getName(), THAT.getName()) && Objects.equals(THIS.getSignature(), THAT.getSignature());\n+        public boolean equals(final Field a, final Field b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getName(), b.getName()) && Objects.equals(a.getSignature(), b.getSignature());\n@@ -55,3 +53,2 @@\n-        public int hashCode(final Object o) {\n-            final Field THIS = (Field) o;\n-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();\n+        public int hashCode(final Field o) {\n+            return o != null ? Objects.hash(o.getSignature(), o.getName()) : 0;\n@@ -62,1 +59,1 @@\n-     * Empty array.\n+     * @return Comparison strategy object.\n@@ -64,6 +61,1 @@\n-    static final Field[] EMPTY_FIELD_ARRAY = {};\n-\n-    \/**\n-     * @return Comparison strategy object\n-     *\/\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<Field> getComparator() {\n@@ -74,1 +66,1 @@\n-     * @param comparator Comparison strategy object\n+     * @param comparator Comparison strategy object.\n@@ -76,1 +68,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<Field> comparator) {\n@@ -81,1 +73,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -83,1 +75,1 @@\n-     * @param file Input stream\n+     * @param file Input stream.\n@@ -136,1 +128,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof Field && bcelComparator.equals(this, (Field) obj);\n@@ -152,0 +144,2 @@\n+     * See https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se8\/html\/jvms-4.html#jvms-4.2.2\n+     *\n@@ -155,1 +149,1 @@\n-        return Type.getReturnType(getSignature());\n+        return Type.getType(getSignature());\n@@ -159,1 +153,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the field's name XOR\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the field's name XOR\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Field.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @LastModified: Jan 2020\n+ * @LastModified: Sept 2025\n@@ -75,1 +75,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -91,1 +91,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -140,1 +140,1 @@\n-            throw new IllegalStateException(e);\n+            throw new UnsupportedOperationException(e);\n@@ -155,4 +155,2 @@\n-        if (attributes != null) {\n-            for (final Attribute attribute : attributes) {\n-                attribute.dump(file);\n-            }\n+        for (final Attribute attribute : attributes) {\n+            attribute.dump(file);\n@@ -174,0 +172,16 @@\n+    \/**\n+     * Gets attribute for given tag.\n+     * @return Attribute for given tag, null if not found.\n+     * Refer to {@link com.sun.org.apache.bcel.internal.Const#ATTR_UNKNOWN} constants named ATTR_* for possible values.\n+     * @since 6.10.0\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public final <T extends Attribute> T getAttribute(final byte tag) {\n+        for (final Attribute attribute : getAttributes()) {\n+            if (attribute.getTag() == tag) {\n+                return (T) attribute;\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -224,1 +238,1 @@\n-     * @return String representation of object's type signature (java style)\n+     * @return String representation of object's type signature (Java style)\n@@ -241,2 +255,2 @@\n-        this.attributes = attributes;\n-        this.attributes_count = attributes != null ? attributes.length : 0; \/\/ init deprecated field\n+        this.attributes = attributes != null ? attributes : Attribute.EMPTY_ARRAY;\n+        this.attributes_count = this.attributes.length; \/\/ init deprecated field\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/FieldOrMethod.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/InnerClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final InnerClass[] EMPTY_INNER_CLASSE_ARRAY = {};\n+    private static final InnerClass[] EMPTY_ARRAY = {};\n@@ -60,1 +60,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -85,1 +85,1 @@\n-        this.innerClasses = innerClasses != null ? innerClasses : EMPTY_INNER_CLASSE_ARRAY;\n+        this.innerClasses = innerClasses != null ? innerClasses : EMPTY_ARRAY;\n@@ -144,1 +144,1 @@\n-        this.innerClasses = innerClasses != null ? innerClasses : EMPTY_INNER_CLASSE_ARRAY;\n+        this.innerClasses = innerClasses != null ? innerClasses : EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/InnerClasses.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+\/**\n+ * Thrown when the BCEL attempts to read a class file and determines that a class is malformed or otherwise cannot be interpreted as a class file.\n+ *\n+ * @since 6.8.0\n+ *\/\n+public class InvalidMethodSignatureException extends ClassFormatException {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    \/**\n+     * Constructs a new instance with the specified invalid signature as the message.\n+     *\n+     * @param signature The invalid signature is saved for later retrieval by the {@link #getMessage()} method.\n+     *\/\n+    public InvalidMethodSignatureException(final String signature) {\n+        super(signature);\n+    }\n+\n+    \/**\n+     * Constructs a new instance with the specified invalid signature as the message and a cause.\n+     *\n+     * @param signature The invalid signature is saved for later retrieval by the {@link #getMessage()} method.\n+     * @param cause     the cause (which is saved for later retrieval by the {@link #getCause()} method). A {@code null} value is permitted, and indicates that\n+     *                  the cause is nonexistent or unknown.\n+     *\/\n+    public InvalidMethodSignatureException(final String signature, final Throwable cause) {\n+        super(signature, cause);\n+    }\n+\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/InvalidMethodSignatureException.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import jdk.xml.internal.Utils;\n@@ -49,1 +50,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -70,1 +71,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<JavaClass> bcelComparator = new BCELComparator<JavaClass>() {\n@@ -73,4 +74,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final JavaClass THIS = (JavaClass) o1;\n-            final JavaClass THAT = (JavaClass) o2;\n-            return Objects.equals(THIS.getClassName(), THAT.getClassName());\n+        public boolean equals(final JavaClass a, final JavaClass b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getClassName(), b.getClassName());\n@@ -80,3 +79,2 @@\n-        public int hashCode(final Object o) {\n-            final JavaClass THIS = (JavaClass) o;\n-            return THIS.getClassName().hashCode();\n+        public int hashCode(final JavaClass o) {\n+            return o != null ? Objects.hashCode(o.getClassName()) : 0;\n@@ -87,1 +85,1 @@\n-     * @return Comparison strategy object\n+     * @return Comparison strategy object.\n@@ -89,1 +87,1 @@\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<JavaClass> getComparator() {\n@@ -103,1 +101,1 @@\n-     * @param comparator Comparison strategy object\n+     * @param comparator Comparison strategy object.\n@@ -105,1 +103,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<JavaClass> comparator) {\n@@ -131,0 +129,1 @@\n+    private boolean isRecord;\n@@ -133,0 +132,1 @@\n+    private boolean computedRecord;\n@@ -180,3 +180,1 @@\n-        if (interfaces == null) {\n-            interfaces = Const.EMPTY_INT_ARRAY;\n-        }\n+        interfaces = Utils.createEmptyArrayIfNull(interfaces);\n@@ -187,1 +185,1 @@\n-            fields = Field.EMPTY_FIELD_ARRAY;\n+            fields = Field.EMPTY_ARRAY;\n@@ -190,1 +188,1 @@\n-            methods = Method.EMPTY_METHOD_ARRAY;\n+            methods = Method.EMPTY_ARRAY;\n@@ -257,0 +255,13 @@\n+    private void computeIsRecord() {\n+        if (computedRecord) {\n+            return;\n+        }\n+        for (final Attribute attribute : this.attributes) {\n+            if (attribute instanceof Record) {\n+                isRecord = true;\n+                break;\n+            }\n+        }\n+        this.computedRecord = true;\n+    }\n+\n@@ -387,1 +398,41 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof JavaClass && bcelComparator.equals(this, (JavaClass) obj);\n+    }\n+\n+    \/**\n+     * Finds a visible field by name and type in this class and its super classes.\n+     * @param fieldName the field name to find\n+     * @param fieldType the field type to find\n+     * @return field matching given name and type, null if field is not found or not accessible from this class.\n+     * @throws ClassNotFoundException\n+     * @since 6.8.0\n+     *\/\n+    public Field findField(final String fieldName, final Type fieldType) throws ClassNotFoundException {\n+        for (final Field field : fields) {\n+            if (field.getName().equals(fieldName)) {\n+                final Type fType = Type.getType(field.getSignature());\n+                \/*\n+                 * TODO: Check if assignment compatibility is sufficient. What does Sun do?\n+                 *\/\n+                if (fType.equals(fieldType)) {\n+                    return field;\n+                }\n+            }\n+        }\n+\n+        final JavaClass superclass = getSuperClass();\n+        if (superclass != null && !\"java.lang.Object\".equals(superclass.getClassName())) {\n+            final Field f = superclass.findField(fieldName, fieldType);\n+            if (f != null && (f.isPublic() || f.isProtected() || !f.isPrivate() && packageName.equals(superclass.getPackageName()))) {\n+                return f;\n+            }\n+        }\n+        final JavaClass[] implementedInterfaces = getInterfaces();\n+        if (implementedInterfaces != null) {\n+            for (final JavaClass implementedInterface : implementedInterfaces) {\n+                final Field f = implementedInterface.findField(fieldName, fieldType);\n+                if (f != null) {\n+                    return f;\n+                }\n+            }\n+        }\n+        return null;\n@@ -391,1 +442,1 @@\n-     * Get all interfaces implemented by this JavaClass (transitively).\n+     * Gets all interfaces implemented by this JavaClass (transitively).\n@@ -412,1 +463,1 @@\n-        return allInterfaces.toArray(JavaClass.EMPTY_ARRAY);\n+        return allInterfaces.toArray(EMPTY_ARRAY);\n@@ -427,0 +478,16 @@\n+    \/**\n+     * Gets attribute for given tag.\n+     * @return Attribute for given tag, null if not found.\n+     * Refer to {@link com.sun.org.apache.bcel.internal.Const#ATTR_UNKNOWN} constants named ATTR_* for possible values.\n+     * @since 6.10.0\n+     *\/\n+    @SuppressWarnings(\"unchecked\")\n+    public final <T extends Attribute> T getAttribute(final byte tag) {\n+        for (final Attribute attribute : getAttributes()) {\n+            if (attribute.getTag() == tag) {\n+                return (T) attribute;\n+            }\n+        }\n+        return null;\n+    }\n+\n@@ -498,1 +565,1 @@\n-     * Get interfaces directly implemented by this JavaClass.\n+     * Gets interfaces directly implemented by this JavaClass.\n@@ -590,1 +657,1 @@\n-     * @return the superclass for this JavaClass object, or null if this is java.lang.Object\n+     * @return the superclass for this JavaClass object, or null if this is {@link Object}\n@@ -610,1 +677,1 @@\n-        return allSuperClasses.toArray(JavaClass.EMPTY_ARRAY);\n+        return allSuperClasses.toArray(EMPTY_ARRAY);\n@@ -614,2 +681,2 @@\n-     * returns the super class name of this class. In the case that this class is java.lang.Object, it will return itself\n-     * (java.lang.Object). This is probably incorrect but isn't fixed at this time to not break existing clients.\n+     * returns the super class name of this class. In the case that this class is {@link Object}, it will return itself\n+     * ({@link Object}). This is probably incorrect but isn't fixed at this time to not break existing clients.\n@@ -631,1 +698,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the class name.\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the class name.\n@@ -648,1 +715,1 @@\n-        if (this.equals(inter)) {\n+        if (equals(inter)) {\n@@ -667,1 +734,1 @@\n-        if (this.equals(superclass)) {\n+        if (equals(superclass)) {\n@@ -701,0 +768,11 @@\n+    \/**\n+     * Tests whether this class was declared as a record\n+     *\n+     * @return true if a record attribute is present, false otherwise.\n+     * @since 6.9.0\n+     *\/\n+    public boolean isRecord() {\n+        computeIsRecord();\n+        return this.isRecord;\n+    }\n+\n@@ -709,1 +787,1 @@\n-        this.attributes = attributes;\n+        this.attributes = attributes != null ? attributes : Attribute.EMPTY_ARRAY;\n@@ -737,1 +815,1 @@\n-        this.fields = fields;\n+        this.fields = fields != null ? fields : Field.EMPTY_ARRAY;\n@@ -741,1 +819,1 @@\n-     * Set File name of class, aka SourceFile attribute value\n+     * Sets File name of class, aka SourceFile attribute value\n@@ -751,1 +829,1 @@\n-        this.interfaceNames = interfaceNames;\n+        this.interfaceNames = Utils.createEmptyArrayIfNull(interfaceNames, String[].class);\n@@ -758,1 +836,1 @@\n-        this.interfaces = interfaces;\n+        this.interfaces = Utils.createEmptyArrayIfNull(interfaces);\n@@ -772,1 +850,1 @@\n-        this.methods = methods;\n+        this.methods = methods != null ? methods : Method.EMPTY_ARRAY;\n@@ -790,1 +868,1 @@\n-     * Set absolute path to file this class was read from.\n+     * Sets absolute path to file this class was read from.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/JavaClass.java","additions":115,"deletions":37,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    \/** number in source file *\/\n+    \/** Number in source file *\/\n@@ -47,1 +47,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LineNumber.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -47,1 +47,1 @@\n-     * Construct object from input stream.\n+     * Constructs a new instance from a data input stream.\n@@ -64,2 +64,2 @@\n-    \/*\n-     * @param nameIndex Index of name\n+    \/**\n+     * Constructs a new instance.\n@@ -67,0 +67,1 @@\n+     * @param nameIndex Index of name\n@@ -68,1 +69,0 @@\n-     *\n@@ -70,1 +70,0 @@\n-     *\n@@ -79,3 +78,5 @@\n-    \/*\n-     * Initialize from another object. Note that both objects use the same references (shallow copy). Use copy() for a\n-     * physical copy.\n+    \/**\n+     * Constructs a new instance from another.\n+     * <p>\n+     * Note that both objects use the same references (shallow copy). Use copy() for a physical copy.\n+     * <\/p>\n@@ -193,1 +194,1 @@\n-        this.lineNumberTable = lineNumberTable;\n+        this.lineNumberTable = lineNumberTable != null ? lineNumberTable : LineNumber.EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LineNumberTable.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+    private static final LocalVariable[] EMPTY_ARRAY = {};\n+\n@@ -46,1 +48,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -71,1 +73,1 @@\n-        this.localVariableTable = localVariableTable != null ? localVariableTable : LocalVariable.EMPTY_ARRAY;\n+        this.localVariableTable = localVariableTable != null ? localVariableTable : EMPTY_ARRAY;\n@@ -170,1 +172,1 @@\n-        return localVariableTable == null ? 0 : localVariableTable.length;\n+        return localVariableTable.length;\n@@ -179,1 +181,1 @@\n-        this.localVariableTable = localVariableTable;\n+        this.localVariableTable = localVariableTable != null ? localVariableTable : EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LocalVariableTable.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,0 +66,2 @@\n+    private static final LocalVariable[] EMPTY_ARRAY = {};\n+\n@@ -70,1 +72,0 @@\n-\n@@ -73,1 +74,0 @@\n-\n@@ -100,1 +100,0 @@\n-\n@@ -122,1 +121,0 @@\n-\n@@ -140,1 +138,1 @@\n-        this.localVariableTypeTable = localVariableTable;\n+        this.localVariableTypeTable = localVariableTable != null ? localVariableTable : EMPTY_ARRAY;\n@@ -149,1 +147,0 @@\n-\n@@ -152,1 +149,0 @@\n-\n@@ -157,1 +153,0 @@\n-\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/LocalVariableTypeTable.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<Method> bcelComparator = new BCELComparator<Method>() {\n@@ -46,4 +46,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final Method THIS = (Method) o1;\n-            final Method THAT = (Method) o2;\n-            return Objects.equals(THIS.getName(), THAT.getName()) && Objects.equals(THIS.getSignature(), THAT.getSignature());\n+        public boolean equals(final Method a, final Method b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getName(), b.getName()) && Objects.equals(a.getSignature(), b.getSignature());\n@@ -53,3 +51,2 @@\n-        public int hashCode(final Object o) {\n-            final Method THIS = (Method) o;\n-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();\n+        public int hashCode(final Method o) {\n+            return o != null ? Objects.hash(o.getSignature(), o.getName()) : 0;\n@@ -60,1 +57,1 @@\n-     * Empty array.\n+     * @return Comparison strategy object.\n@@ -62,6 +59,1 @@\n-    static final Method[] EMPTY_METHOD_ARRAY = {};\n-\n-    \/**\n-     * @return Comparison strategy object\n-     *\/\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<Method> getComparator() {\n@@ -72,1 +64,1 @@\n-     * @param comparator Comparison strategy object\n+     * @param comparator Comparison strategy object.\n@@ -74,1 +66,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<Method> comparator) {\n@@ -78,1 +70,1 @@\n-    \/\/ annotations defined on the parameters of a method\n+    \/** Annotations defined on the parameters of a method. *\/\n@@ -88,1 +80,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -145,1 +137,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof Method && bcelComparator.equals(this, (Method) obj);\n@@ -192,1 +184,1 @@\n-     * @return LocalVariableTable of code attribute if any, i.e. the call is forwarded to the Code atribute.\n+     * @return LocalVariableTable of code attribute if any, i.e. the call is forwarded to the Code attribute.\n@@ -202,0 +194,13 @@\n+    \/**\n+     * Gets the local variable type table attribute {@link LocalVariableTypeTable}.\n+     * @return LocalVariableTypeTable of code attribute if any, i.e. the call is forwarded to the Code attribute.\n+     * @since 6.10.0\n+     *\/\n+    public LocalVariableTypeTable getLocalVariableTypeTable() {\n+        final Code code = getCode();\n+        if (code == null) {\n+            return null;\n+        }\n+        return code.getLocalVariableTypeTable();\n+    }\n+\n@@ -221,1 +226,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the method's name XOR\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the method's name XOR\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Method.java","additions":27,"deletions":22,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -32,0 +32,3 @@\n+ * <p>\n+ * Implements {@link Node} as of 6.7.0.\n+ * <\/p>\n@@ -49,1 +52,1 @@\n-     * Construct object from input stream.\n+     * Constructs an instance from a DataInput.\n@@ -78,1 +81,1 @@\n-     * Dump object to file stream on binary format.\n+     * Dumps object to file stream on binary format.\n@@ -97,1 +100,4 @@\n-     * Returns the name of the parameter.\n+     * Gets the name of the parameter.\n+     *\n+     * @param constantPool The pool to query.\n+     * @return Constant from the given pool.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/MethodParameter.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final MethodParameter[] EMPTY_METHOD_PARAMETER_ARRAY = {};\n+    private static final MethodParameter[] EMPTY_ARRAY = {};\n@@ -47,1 +47,1 @@\n-    private MethodParameter[] parameters = EMPTY_METHOD_PARAMETER_ARRAY;\n+    private MethodParameter[] parameters = EMPTY_ARRAY;\n@@ -51,1 +51,0 @@\n-\n@@ -68,1 +67,0 @@\n-\n@@ -99,1 +97,1 @@\n-        this.parameters = parameters;\n+        this.parameters = parameters != null ? parameters : EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/MethodParameters.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,7 @@\n+    private static String getClassNameAtIndex(final ConstantPool cp, final int index, final boolean compactClassName) {\n+        final String className = cp.getConstantString(index, Const.CONSTANT_Class);\n+        if (compactClassName) {\n+            return Utility.compactClassName(className, false);\n+        }\n+        return className;\n+    }\n@@ -49,1 +56,0 @@\n-    private final int moduleVersionIndex;\n@@ -51,0 +57,1 @@\n+    private final int moduleVersionIndex;\n@@ -56,0 +63,1 @@\n+\n@@ -59,1 +67,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -116,2 +124,0 @@\n-    \/\/ TODO add more getters and setters?\n-\n@@ -189,0 +195,19 @@\n+    \/**\n+     * Gets flags for this module.\n+     * @return module flags\n+     * @since 6.10.0\n+     *\/\n+    public int getModuleFlags() {\n+        return moduleFlags;\n+    }\n+\n+    \/**\n+     * Gets module name.\n+     * @param cp Array of constants\n+     * @return module name\n+     * @since 6.10.0\n+     *\/\n+    public String getModuleName(final ConstantPool cp) {\n+        return cp.getConstantString(moduleNameIndex, Const.CONSTANT_Module);\n+    }\n+\n@@ -213,0 +238,25 @@\n+    \/**\n+     * Gets the array of class names for this module's uses.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @param compactClassName false for original constant pool value, true to replace '\/' with '.'\n+     * @return array of used class names\n+     * @since 6.10.0\n+     *\/\n+    public String[] getUsedClassNames(final ConstantPool constantPool, final boolean compactClassName) {\n+        final String[] usedClassNames = new String[usesCount];\n+        for (int i = 0; i < usesCount; i++) {\n+            usedClassNames[i] = getClassNameAtIndex(constantPool, usesIndex[i], compactClassName);\n+        }\n+        return usedClassNames;\n+    }\n+\n+    \/**\n+     * Gets version for this module.\n+     * @param cp Array of constants\n+     * @return version from constant pool, \"0\" if version index is 0\n+     * @since 6.10.0\n+     *\/\n+    public String getVersion(final ConstantPool cp) {\n+        return moduleVersionIndex == 0 ? \"0\" : cp.getConstantString(moduleVersionIndex, Const.CONSTANT_Utf8);\n+    }\n+\n@@ -221,1 +271,1 @@\n-        buf.append(\"  name:    \").append(Utility.pathToPackage(cp.getConstantString(moduleNameIndex, Const.CONSTANT_Module))).append(\"\\n\");\n+        buf.append(\"  name:    \").append(Utility.pathToPackage(getModuleName(cp))).append(\"\\n\");\n@@ -223,1 +273,1 @@\n-        final String version = moduleVersionIndex == 0 ? \"0\" : cp.getConstantString(moduleVersionIndex, Const.CONSTANT_Utf8);\n+        final String version = getVersion(cp);\n@@ -243,2 +293,2 @@\n-            final String className = cp.getConstantString(index, Const.CONSTANT_Class);\n-            buf.append(\"    \").append(Utility.compactClassName(className, false)).append(\"\\n\");\n+            final String className = getClassNameAtIndex(cp, index, true);\n+            buf.append(\"    \").append(className).append(\"\\n\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Module.java","additions":58,"deletions":8,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+    private static String getToModuleNameAtIndex(final ConstantPool constantPool, final int index) {\n+        return constantPool.getConstantString(index, Const.CONSTANT_Module);\n+    }\n@@ -42,0 +45,1 @@\n+\n@@ -45,1 +49,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -71,2 +75,0 @@\n-    \/\/ TODO add more getters and setters?\n-\n@@ -100,0 +102,33 @@\n+    \/**\n+     * Gets the flags for this ModuleExports.\n+     * @return the exportsFlags\n+     * @since 6.10.0\n+     *\/\n+    public int getExportsFlags() {\n+        return exportsFlags;\n+    }\n+\n+    \/**\n+     * Gets the exported package name.\n+     * @param constantPool the constant pool from the ClassFile\n+     * @return the exported package name\n+     * @since 6.10.0\n+     *\/\n+    public String getPackageName(final ConstantPool constantPool) {\n+        return constantPool.constantToString(exportsIndex, Const.CONSTANT_Package);\n+    }\n+\n+    \/**\n+     * Gets an array of module names for this ModuleExports.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @return array of module names following 'exports to'\n+     * @since 6.10.0\n+     *\/\n+    public String[] getToModuleNames(final ConstantPool constantPool) {\n+        final String[] toModuleNames = new String[exportsToCount];\n+        for (int i = 0; i < exportsToCount; i++) {\n+            toModuleNames[i] = getToModuleNameAtIndex(constantPool, exportsToIndex[i]);\n+        }\n+        return toModuleNames;\n+    }\n+\n@@ -113,2 +148,2 @@\n-        final String packageName = constantPool.constantToString(exportsIndex, Const.CONSTANT_Package);\n-        buf.append(Utility.compactClassName(packageName, false));\n+        final String packageName = getPackageName(constantPool);\n+        buf.append(packageName);\n@@ -118,2 +153,2 @@\n-            final String moduleName = constantPool.getConstantString(index, Const.CONSTANT_Module);\n-            buf.append(\"      \").append(Utility.compactClassName(moduleName, false)).append(\"\\n\");\n+            final String moduleName = getToModuleNameAtIndex(constantPool, index);\n+            buf.append(\"      \").append(moduleName).append(\"\\n\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleExports.java","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleMainClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+    private static String getToModuleNameAtIndex(final ConstantPool constantPool, final int index) {\n+        return constantPool.getConstantString(index, Const.CONSTANT_Module);\n+    }\n@@ -42,0 +45,1 @@\n+\n@@ -45,1 +49,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -71,2 +75,0 @@\n-    \/\/ TODO add more getters and setters?\n-\n@@ -100,0 +102,33 @@\n+    \/**\n+     * Gets the flags for this ModuleOpens.\n+     * @return the opensFlags\n+     * @since 6.10.0\n+     *\/\n+    public int getOpensFlags() {\n+        return opensFlags;\n+    }\n+\n+    \/**\n+     * Gets the opened package name.\n+     * @param constantPool the constant pool from the ClassFile\n+     * @return the opened package name\n+     * @since 6.10.0\n+     *\/\n+    public String getPackageName(final ConstantPool constantPool) {\n+        return constantPool.constantToString(opensIndex, Const.CONSTANT_Package);\n+    }\n+\n+    \/**\n+     * Gets an array of module names for this ModuleOpens.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @return array of module names following 'opens to'\n+     * @since 6.10.0\n+     *\/\n+    public String[] getToModuleNames(final ConstantPool constantPool) {\n+        final String[] toModuleNames = new String[opensToCount];\n+        for (int i = 0; i < opensToCount; i++) {\n+            toModuleNames[i] = getToModuleNameAtIndex(constantPool, opensToIndex[i]);\n+        }\n+        return toModuleNames;\n+    }\n+\n@@ -113,2 +148,2 @@\n-        final String packageName = constantPool.constantToString(opensIndex, Const.CONSTANT_Package);\n-        buf.append(Utility.compactClassName(packageName, false));\n+        final String packageName = getPackageName(constantPool);\n+        buf.append(packageName);\n@@ -118,2 +153,2 @@\n-            final String moduleName = constantPool.getConstantString(index, Const.CONSTANT_Module);\n-            buf.append(\"      \").append(Utility.compactClassName(moduleName, false)).append(\"\\n\");\n+            final String moduleName = getToModuleNameAtIndex(constantPool, index);\n+            buf.append(\"      \").append(moduleName).append(\"\\n\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleOpens.java","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.xml.internal.Utils;\n@@ -36,1 +37,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -43,1 +44,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -68,1 +69,1 @@\n-        this.packageIndexTable = packageIndexTable != null ? packageIndexTable : Const.EMPTY_INT_ARRAY;\n+        this.packageIndexTable = Utils.createEmptyArrayIfNull(packageIndexTable);\n@@ -148,1 +149,1 @@\n-        this.packageIndexTable = packageIndexTable != null ? packageIndexTable : Const.EMPTY_INT_ARRAY;\n+        this.packageIndexTable = Utils.createEmptyArrayIfNull(packageIndexTable);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModulePackages.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,7 @@\n+    private static String getImplementationClassNameAtIndex(final ConstantPool constantPool, final int index, final boolean compactClassName) {\n+        final String className = constantPool.getConstantString(index, Const.CONSTANT_Class);\n+        if (compactClassName) {\n+            return Utility.compactClassName(className, false);\n+        }\n+        return className;\n+    }\n@@ -41,0 +48,1 @@\n+\n@@ -44,1 +52,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -69,2 +77,0 @@\n-    \/\/ TODO add more getters and setters?\n-\n@@ -97,0 +103,25 @@\n+    \/**\n+     * Gets the array of implementation class names for this ModuleProvides.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @param compactClassName false for original constant pool value, true to replace '\/' with '.'\n+     * @return array of implementation class names\n+     * @since 6.10.0\n+     *\/\n+    public String[] getImplementationClassNames(final ConstantPool constantPool, final boolean compactClassName) {\n+        final String[] implementationClassNames = new String[providesWithCount];\n+        for (int i = 0; i < providesWithCount; i++) {\n+            implementationClassNames[i] = getImplementationClassNameAtIndex(constantPool, providesWithIndex[i], compactClassName);\n+        }\n+        return implementationClassNames;\n+    }\n+\n+    \/**\n+     * Gets the interface name for this ModuleProvides.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @return interface name\n+     * @since 6.10.0\n+     *\/\n+    public String getInterfaceName(final ConstantPool constantPool) {\n+        return constantPool.constantToString(providesIndex, Const.CONSTANT_Class);\n+    }\n+\n@@ -110,2 +141,2 @@\n-        final String interfaceName = constantPool.constantToString(providesIndex, Const.CONSTANT_Class);\n-        buf.append(Utility.compactClassName(interfaceName, false));\n+        final String interfaceName = getInterfaceName(constantPool);\n+        buf.append(interfaceName);\n@@ -114,2 +145,2 @@\n-            final String className = constantPool.getConstantString(index, Const.CONSTANT_Class);\n-            buf.append(\"      \").append(Utility.compactClassName(className, false)).append(\"\\n\");\n+            final String className = getImplementationClassNameAtIndex(constantPool, index, true);\n+            buf.append(\"      \").append(className).append(\"\\n\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleProvides.java","additions":38,"deletions":7,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -66,2 +66,0 @@\n-    \/\/ TODO add more getters and setters?\n-\n@@ -92,0 +90,29 @@\n+    \/**\n+     * Gets the module name from the constant pool.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @return module name\n+     * @since 6.10.0\n+     *\/\n+    public String getModuleName(final ConstantPool constantPool) {\n+        return constantPool.constantToString(requiresIndex, Const.CONSTANT_Module);\n+    }\n+\n+    \/**\n+     * Gets the flags for this ModuleRequires.\n+     * @return the requiresFlags\n+     * @since 6.10.0\n+     *\/\n+    public int getRequiresFlags() {\n+        return requiresFlags;\n+    }\n+\n+    \/**\n+     * Gets the required version from the constant pool.\n+     * @param constantPool Array of constants usually obtained from the ClassFile object\n+     * @return required version, \"0\" if version index is 0.\n+     * @since 6.10.0\n+     *\/\n+    public String getVersion(final ConstantPool constantPool) {\n+        return requiresVersionIndex == 0 ? \"0\" : constantPool.getConstantString(requiresVersionIndex, Const.CONSTANT_Utf8);\n+    }\n+\n@@ -105,2 +132,2 @@\n-        final String moduleName = constantPool.constantToString(requiresIndex, Const.CONSTANT_Module);\n-        buf.append(Utility.compactClassName(moduleName, false));\n+        final String moduleName = getModuleName(constantPool);\n+        buf.append(moduleName);\n@@ -108,1 +135,1 @@\n-        final String version = requiresVersionIndex == 0 ? \"0\" : constantPool.getConstantString(requiresVersionIndex, Const.CONSTANT_Utf8);\n+        final String version = getVersion(constantPool);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ModuleRequires.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import jdk.xml.internal.Utils;\n@@ -37,1 +38,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -44,1 +45,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -69,1 +70,1 @@\n-        this.classes = classes != null ? classes : Const.EMPTY_INT_ARRAY;\n+        this.classes = Utils.createEmptyArrayIfNull(classes);\n@@ -149,1 +150,1 @@\n-        this.classes = classes != null ? classes : Const.EMPTY_INT_ARRAY;\n+        this.classes = Utils.createEmptyArrayIfNull(classes);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/NestMembers.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    void accept(Visitor obj);\n+    void accept(Visitor visitor);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Node.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/PMGClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,4 @@\n-    public static ParameterAnnotationEntry[] createParameterAnnotationEntries(final Attribute[] attrs) {\n+    public static ParameterAnnotationEntry[] createParameterAnnotationEntries(final Attribute[] attributes) {\n+        if (attributes == null) {\n+            return EMPTY_ARRAY;\n+        }\n@@ -42,2 +45,2 @@\n-        final List<ParameterAnnotationEntry> accumulatedAnnotations = new ArrayList<>(attrs.length);\n-        for (final Attribute attribute : attrs) {\n+        final List<ParameterAnnotationEntry> accumulatedAnnotations = new ArrayList<>(attributes.length);\n+        for (final Attribute attribute : attributes) {\n@@ -46,1 +49,4 @@\n-                Collections.addAll(accumulatedAnnotations, runtimeAnnotations.getParameterAnnotationEntries());\n+                final ParameterAnnotationEntry[] parameterAnnotationEntries = runtimeAnnotations.getParameterAnnotationEntries();\n+                if (parameterAnnotationEntries != null) {\n+                    Collections.addAll(accumulatedAnnotations, parameterAnnotationEntries);\n+                }\n@@ -49,1 +55,1 @@\n-        return accumulatedAnnotations.toArray(ParameterAnnotationEntry.EMPTY_ARRAY);\n+        return accumulatedAnnotations.toArray(EMPTY_ARRAY);\n@@ -55,1 +61,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ParameterAnnotationEntry.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    private static final ParameterAnnotationEntry[] EMPTY_ARRAY = {};\n+\n@@ -41,0 +43,2 @@\n+     * Constructs a new instance.\n+     *\n@@ -58,0 +62,2 @@\n+     * Constructs a new instance.\n+     *\n@@ -123,1 +129,1 @@\n-        this.parameterAnnotationTable = parameterAnnotationTable;\n+        this.parameterAnnotationTable = parameterAnnotationTable != null ? parameterAnnotationTable : EMPTY_ARRAY;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/ParameterAnnotations.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+import com.sun.org.apache.bcel.internal.util.Args;\n+\n+\/**\n+ * Extends {@link Attribute} and records the classes and\n+ * interfaces that are authorized to claim membership in the nest hosted by the\n+ * current class or interface. There may be at most one Record attribute in a\n+ * ClassFile structure.\n+ *\n+ * @see Attribute\n+ * @since 6.9.0\n+ *\/\n+public final class Record extends Attribute {\n+\n+    private static final RecordComponentInfo[] EMPTY_RCI_ARRAY = {};\n+\n+    private static RecordComponentInfo[] readComponents(final DataInput input, final ConstantPool constantPool)\n+            throws IOException {\n+        final int classCount = input.readUnsignedShort();\n+        final RecordComponentInfo[] components = new RecordComponentInfo[classCount];\n+        for (int i = 0; i < classCount; i++) {\n+            components[i] = new RecordComponentInfo(input, constantPool);\n+        }\n+        return components;\n+    }\n+\n+    private RecordComponentInfo[] components;\n+\n+    \/**\n+     * Constructs object from input stream.\n+     *\n+     * @param nameIndex    Index in constant pool\n+     * @param length       Content length in bytes\n+     * @param input        Input stream\n+     * @param constantPool Array of constants\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    Record(final int nameIndex, final int length, final DataInput input, final ConstantPool constantPool)\n+            throws IOException {\n+        this(nameIndex, length, readComponents(input, constantPool), constantPool);\n+    }\n+\n+    \/**\n+     * Constructs a new instance using components.\n+     *\n+     * @param nameIndex    Index in constant pool\n+     * @param length       Content length in bytes\n+     * @param classes      Array of Record Component Info elements\n+     * @param constantPool Array of constants\n+     *\/\n+    public Record(final int nameIndex, final int length, final RecordComponentInfo[] classes,\n+            final ConstantPool constantPool) {\n+        super(Const.ATTR_RECORD, nameIndex, length, constantPool);\n+        this.components = classes != null ? classes : EMPTY_RCI_ARRAY;\n+        Args.requireU2(this.components.length, \"attributes.length\");\n+    }\n+\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitly\n+     * defined by the contents of a Java class. For example, the hierarchy of methods,\n+     * fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     *\/\n+    @Override\n+    public void accept(final Visitor v) {\n+        v.visitRecord(this);\n+    }\n+\n+    \/**\n+     * Copies this instance and its components.\n+     *\n+     * @return a deep copy of this instance and its components.\n+     *\/\n+    @Override\n+    public Attribute copy(final ConstantPool constantPool) {\n+        final Record c = (Record) clone();\n+        if (components.length > 0) {\n+            c.components = components.clone();\n+        }\n+        c.setConstantPool(constantPool);\n+        return c;\n+    }\n+\n+    \/**\n+     * Dumps this instance into a file stream in binary format.\n+     *\n+     * @param file output stream.\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    @Override\n+    public void dump(final DataOutputStream file) throws IOException {\n+        super.dump(file);\n+        file.writeShort(components.length);\n+        for (final RecordComponentInfo component : components) {\n+            component.dump(file);\n+        }\n+    }\n+\n+    \/**\n+     * Gets all the record components.\n+     *\n+     * @return array of Record Component Info elements.\n+     *\/\n+    public RecordComponentInfo[] getComponents() {\n+        return components;\n+    }\n+\n+    \/**\n+     * Converts this instance to a String suitable for debugging.\n+     *\n+     * @return String a String suitable for debugging.\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"Record(\");\n+        buf.append(components.length);\n+        buf.append(\"):\\n\");\n+        for (final RecordComponentInfo component : components) {\n+            buf.append(\"  \").append(component.toString()).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length() - 1); \/\/ remove the last newline\n+    }\n+\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Record.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+package com.sun.org.apache.bcel.internal.classfile;\n+\n+import java.io.DataInput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+\n+import com.sun.org.apache.bcel.internal.Const;\n+\n+\/**\n+ * Record component info from a record. Instances from this class maps\n+ * every component from a given record.\n+ *\n+ * @see <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/jvms\/se14\/preview\/specs\/records-jvms.html#jvms-4.7.30\">\n+ *      The Java Virtual Machine Specification, Java SE 14 Edition, Records (preview)<\/a>\n+ * @since 6.9.0\n+ *\/\n+public class RecordComponentInfo implements Node {\n+\n+    private final int index;\n+    private final int descriptorIndex;\n+    private final Attribute[] attributes;\n+    private final ConstantPool constantPool;\n+\n+    \/**\n+     * Constructs a new instance from an input stream.\n+     *\n+     * @param input        Input stream\n+     * @param constantPool Array of constants\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    public RecordComponentInfo(final DataInput input, final ConstantPool constantPool) throws IOException {\n+        this.index = input.readUnsignedShort();\n+        this.descriptorIndex = input.readUnsignedShort();\n+        final int attributesCount = input.readUnsignedShort();\n+        this.attributes = new Attribute[attributesCount];\n+        for (int j = 0; j < attributesCount; j++) {\n+            attributes[j] = Attribute.readAttribute(input, constantPool);\n+        }\n+        this.constantPool = constantPool;\n+    }\n+\n+    @Override\n+    public void accept(final Visitor v) {\n+        v.visitRecordComponent(this);\n+    }\n+\n+    \/**\n+     * Dumps contents into a file stream in binary format.\n+     *\n+     * @param file Output file stream\n+     * @throws IOException if an I\/O error occurs.\n+     *\/\n+    public void dump(final DataOutputStream file) throws IOException {\n+        file.writeShort(index);\n+        file.writeShort(descriptorIndex);\n+        file.writeShort(attributes.length);\n+        for (final Attribute attribute : attributes) {\n+            attribute.dump(file);\n+        }\n+    }\n+\n+    \/**\n+     * Gets all attributes.\n+     *\n+     * @return all attributes.\n+     *\/\n+    public Attribute[] getAttributes() {\n+        return attributes;\n+    }\n+\n+    \/**\n+     * Gets the constant pool.\n+     *\n+     * @return Constant pool.\n+     *\/\n+    public ConstantPool getConstantPool() {\n+        return constantPool;\n+    }\n+\n+    \/**\n+     * Gets the description index.\n+     *\n+     * @return index in constant pool of this record component descriptor.\n+     *\/\n+    public int getDescriptorIndex() {\n+        return descriptorIndex;\n+    }\n+\n+    \/**\n+     * Gets the name index.\n+     *\n+     * @return index in constant pool of this record component name.\n+     *\/\n+    public int getIndex() {\n+        return index;\n+    }\n+\n+    \/**\n+     * Converts this instance to a String suitable for debugging.\n+     *\n+     * @return a String suitable for debugging.\n+     *\/\n+    @Override\n+    public String toString() {\n+        final StringBuilder buf = new StringBuilder();\n+        buf.append(\"RecordComponentInfo(\");\n+        buf.append(constantPool.getConstantString(index, Const.CONSTANT_Utf8));\n+        buf.append(\",\");\n+        buf.append(constantPool.getConstantString(descriptorIndex, Const.CONSTANT_Utf8));\n+        buf.append(\",\");\n+        buf.append(attributes.length);\n+        buf.append(\"):\\n\");\n+        for (final Attribute attribute : attributes) {\n+            buf.append(\"  \").append(attribute.toString()).append(\"\\n\");\n+        }\n+        return buf.substring(0, buf.length() - 1); \/\/ remove the last newline\n+    }\n+\n+}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RecordComponentInfo.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -31,1 +31,1 @@\n- * represents an annotation that is represented in the class file but is not provided to the JVM.\n+ * An annotation that is represented in the class file but is not provided to the JVM.\n@@ -38,0 +38,2 @@\n+     * Constructs a new instance.\n+     *\n@@ -49,1 +51,3 @@\n-     * @return deep copy of this attribute\n+     * Creates a deep copy of this attribute.\n+     *\n+     * @return deep copy of this attribute.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeInvisibleAnnotations.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+     * Constructs a new instance.\n+     *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeInvisibleParameterAnnotations.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * represents an annotation that is represented in the class file and is provided to the JVM.\n+ * An annotation that is represented in the class file and is provided to the JVM.\n@@ -38,0 +38,2 @@\n+     * Constructs a new instance.\n+     *\n@@ -49,1 +51,3 @@\n-     * @return deep copy of this attribute\n+     * Creates a deep copy of this attribute.\n+     *\n+     * @return deep copy of this attribute.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeVisibleAnnotations.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+     * Constructs a new instance.\n+     *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/RuntimeVisibleParameterAnnotations.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        \/\/ System.out.println(\"return from ident:\" + (char)ch);\n+        \/\/ System.out.println(\"return from ident:\" + (char) ch);\n@@ -131,1 +131,1 @@\n-                \/\/ System.out.println(\"so far:\" + buf2 + \":next:\" +(char)ch);\n+                \/\/ System.out.println(\"so far:\" + buf2 + \":next:\" +(char) ch);\n@@ -144,1 +144,1 @@\n-            \/\/ System.out.println(\"within ident:\"+ (char)ch);\n+            \/\/ System.out.println(\"within ident:\"+ (char) ch);\n@@ -147,1 +147,1 @@\n-        \/\/ System.out.println(\"regular return ident:\"+ (char)ch + \":\" + buf2);\n+        \/\/ System.out.println(\"regular return ident:\"+ (char) ch + \":\" + buf2);\n@@ -163,1 +163,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Signature.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            throw new ClassFormatException(\"SimpleElementValue doesnt know how to write out type \" + type);\n+            throw new ClassFormatException(\"SimpleElementValue doesn't know how to write out type \" + type);\n@@ -70,1 +70,1 @@\n-            throw new IllegalStateException(\"Dont call getValueBoolean() on a non BOOLEAN ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueBoolean() on a non BOOLEAN ElementValue\");\n@@ -78,1 +78,1 @@\n-            throw new IllegalStateException(\"Dont call getValueByte() on a non BYTE ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueByte() on a non BYTE ElementValue\");\n@@ -85,1 +85,1 @@\n-            throw new IllegalStateException(\"Dont call getValueChar() on a non CHAR ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueChar() on a non CHAR ElementValue\");\n@@ -92,1 +92,1 @@\n-            throw new IllegalStateException(\"Dont call getValueDouble() on a non DOUBLE ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueDouble() on a non DOUBLE ElementValue\");\n@@ -100,1 +100,1 @@\n-            throw new IllegalStateException(\"Dont call getValueFloat() on a non FLOAT ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueFloat() on a non FLOAT ElementValue\");\n@@ -108,1 +108,1 @@\n-            throw new IllegalStateException(\"Dont call getValueInt() on a non INT ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueInt() on a non INT ElementValue\");\n@@ -115,1 +115,1 @@\n-            throw new IllegalStateException(\"Dont call getValueLong() on a non LONG ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueLong() on a non LONG ElementValue\");\n@@ -123,1 +123,1 @@\n-            throw new IllegalStateException(\"Dont call getValueShort() on a non SHORT ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueShort() on a non SHORT ElementValue\");\n@@ -131,1 +131,1 @@\n-            throw new IllegalStateException(\"Dont call getValueString() on a non STRING ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueString() on a non STRING ElementValue\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/SimpleElementValue.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/SourceFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,2 @@\n- * <a href=\"http:\/\/java.sun.com\/j2me\/\"> Java 2 Micro Edition<\/a> (J2ME). This attribute is used by the\n- * <a href=\"http:\/\/java.sun.com\/products\/cldc\/\">KVM<\/a> and contained within the Code attribute of a method. See CLDC\n+ * <a href=\"https:\/\/java.sun.com\/j2me\/\"> Java 2 Micro Edition<\/a> (J2ME). This attribute is used by the\n+ * <a href=\"https:\/\/java.sun.com\/products\/cldc\/\">KVM<\/a> and contained within the Code attribute of a method. See CLDC\n@@ -49,1 +49,1 @@\n- * @LastModified: Oct 2020\n+ * @LastModified: Sept 2025\n@@ -56,1 +56,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMap.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n@@ -78,3 +78,1 @@\n-        } else if (frameType >= Const.CHOP_FRAME && frameType <= Const.CHOP_FRAME_MAX) {\n-            byteCodeOffset = dataInput.readUnsignedShort();\n-        } else if (frameType == Const.SAME_FRAME_EXTENDED) {\n+        } else if (frameType >= Const.CHOP_FRAME && frameType <= Const.CHOP_FRAME_MAX || frameType == Const.SAME_FRAME_EXTENDED) {\n@@ -170,1 +168,1 @@\n-            throw new Error(\"Clone Not Supported\");\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", ex);\n@@ -193,3 +191,1 @@\n-        } else if (frameType >= Const.CHOP_FRAME && frameType <= Const.CHOP_FRAME_MAX) {\n-            file.writeShort(byteCodeOffset);\n-        } else if (frameType == Const.SAME_FRAME_EXTENDED) {\n+        } else if (frameType >= Const.CHOP_FRAME && frameType <= Const.CHOP_FRAME_MAX || frameType == Const.SAME_FRAME_EXTENDED) {\n@@ -235,1 +231,0 @@\n-     *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMapEntry.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public final class StackMapType implements Cloneable {\n+public final class StackMapType implements Node, Cloneable {\n@@ -39,1 +39,1 @@\n-    public static final StackMapType[] EMPTY_ARRAY = {}; \/\/ must be public because BCELifier code generator writes calls to it\n+    public static final StackMapType[] EMPTY_ARRAY = {}; \/\/ BCELifier code generator writes calls to constructor translating null to EMPTY_ARRAY\n@@ -56,1 +56,1 @@\n-     * Construct object from file stream.\n+     * Constructs object from file stream.\n@@ -69,0 +69,12 @@\n+    \/**\n+     * Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class.\n+     * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.\n+     *\n+     * @param v Visitor object\n+     * @since 6.8.0\n+     *\/\n+    @Override\n+    public void accept(final Visitor v) {\n+        v.visitStackMapType(this);\n+    }\n+\n@@ -101,0 +113,9 @@\n+    \/**\n+     * Gets the class name of this StackMapType from the constant pool at index position.\n+     * @return the fully qualified name of the class for this StackMapType.\n+     * @since 6.8.0\n+     *\/\n+    public String getClassName() {\n+        return constantPool.constantToString(index, Const.CONSTANT_Class);\n+    }\n+\n@@ -132,1 +153,1 @@\n-            return \", class=\" + constantPool.constantToString(index, Const.CONSTANT_Class);\n+            return \", class=\" + getClassName();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/StackMapType.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-     * Construct object from input stream.\n+     * Constructs object from input stream.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Synthetic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -54,1 +54,1 @@\n-    private static class JavaReader extends FilterReader {\n+    private static final class JavaReader extends FilterReader {\n@@ -91,1 +91,1 @@\n-     * Encode bytes into valid java identifier characters. Used by\n+     * Encode bytes into valid Java identifier characters. Used by\n@@ -94,1 +94,1 @@\n-    private static class JavaWriter extends FilterWriter {\n+    private static final class JavaWriter extends FilterWriter {\n@@ -440,1 +440,3 @@\n-            \/\/$FALL-THROUGH$\n+            index = bytes.readUnsignedShort();\n+            buf.append(\"\\t<\").append(constantPool.constantToString(index, Const.CONSTANT_Class)).append(\">\").append(verbose ? \" (\" + index + \")\" : \"\");\n+            break;\n@@ -867,1 +869,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -875,1 +877,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -906,1 +908,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -910,1 +912,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -962,1 +964,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -988,1 +990,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -1175,1 +1177,1 @@\n-            type = type + typeSignatureToString(signature.substring(index), chopit);\n+            type += typeSignatureToString(signature.substring(index), chopit);\n@@ -1240,1 +1242,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -1245,1 +1247,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -1289,1 +1291,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -1292,1 +1294,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -1472,2 +1474,2 @@\n-                    consumedChars = unwrap(Utility.CONSUMER_CHARS) + consumedChars;\n-                    wrap(Utility.CONSUMER_CHARS, consumedChars);\n+                    consumedChars = unwrap(CONSUMER_CHARS) + consumedChars;\n+                    wrap(CONSUMER_CHARS, consumedChars);\n@@ -1493,2 +1495,2 @@\n-                        consumedChars = unwrap(Utility.CONSUMER_CHARS) + consumedChars;\n-                        wrap(Utility.CONSUMER_CHARS, consumedChars);\n+                        consumedChars = unwrap(CONSUMER_CHARS) + consumedChars;\n+                        wrap(CONSUMER_CHARS, consumedChars);\n@@ -1511,2 +1513,2 @@\n-                    consumedChars = unwrap(Utility.CONSUMER_CHARS) + consumedChars;\n-                    wrap(Utility.CONSUMER_CHARS, consumedChars);\n+                    consumedChars = unwrap(CONSUMER_CHARS) + consumedChars;\n+                    wrap(CONSUMER_CHARS, consumedChars);\n@@ -1518,1 +1520,1 @@\n-                wrap(Utility.CONSUMER_CHARS, consumedChars + 1); \/\/ remove final \";\"\n+                wrap(CONSUMER_CHARS, consumedChars + 1); \/\/ remove final \";\"\n@@ -1539,3 +1541,3 @@\n-                \/\/ Utility.consumed_chars += consumed_chars; is replaced by:\n-                final int temp = unwrap(Utility.CONSUMER_CHARS) + consumedChars;\n-                wrap(Utility.CONSUMER_CHARS, temp);\n+                \/\/ consumed_chars += consumed_chars; is replaced by:\n+                final int temp = unwrap(CONSUMER_CHARS) + consumedChars;\n+                wrap(CONSUMER_CHARS, temp);\n@@ -1555,1 +1557,1 @@\n-        return tl.get();\n+        return tl.get().intValue();\n@@ -1559,1 +1561,1 @@\n-        tl.set(value);\n+        tl.set(Integer.valueOf(value));\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Utility.java","additions":31,"deletions":29,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -220,0 +220,1 @@\n+\n@@ -225,0 +226,20 @@\n+    \/**\n+     * Visits a {@link Record} object.\n+     *\n+     * @param obj Record to visit\n+     * @since 6.9.0\n+     *\/\n+    default void visitRecord(final Record obj) {\n+        \/\/ empty\n+    }\n+\n+    \/**\n+     * Visits a {@link RecordComponentInfo} object.\n+     *\n+     * @param record component to visit\n+     * @since 6.9.0\n+     *\/\n+    default void visitRecordComponent(final RecordComponentInfo record) {\n+     \/\/ noop\n+    }\n+\n@@ -233,0 +254,10 @@\n+    \/**\n+     * Visits a {@link StackMapType} object.\n+     *\n+     * @param obj object to visit\n+     * @since 6.8.0\n+     *\/\n+    default void visitStackMapType(final StackMapType obj) {\n+      \/\/ empty\n+    }\n+\n@@ -236,0 +267,1 @@\n+\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/Visitor.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+\/**\n+ * Classes that describe the structure of a Java class file and a class file parser.\n+ *\/\n+package com.sun.org.apache.bcel.internal.classfile;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/classfile\/package-info.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -36,1 +36,1 @@\n-     * Get length of array\n+     * Gets length of array\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ARRAYLENGTH.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+ *\n+ * @LastModified: Sept 2025\n@@ -32,1 +34,1 @@\n-public class ATHROW extends Instruction implements UnconditionalBranch, ExceptionThrower {\n+public class ATHROW extends Instruction implements UnconditionalBranch, ExceptionThrower, StackConsumer {\n@@ -51,0 +53,1 @@\n+        v.visitStackConsumer(this);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ATHROW.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.util.stream.Collectors;\n@@ -40,0 +41,1 @@\n+import jdk.xml.internal.Utils;\n@@ -43,1 +45,1 @@\n- * @LastModified: Jan 2020\n+ * @LastModified: Sept 2025\n@@ -56,1 +58,1 @@\n-        if (annotationEntryGens.length == 0) {\n+        if (annotationEntryGens == null && annotationEntryGens.length == 0) {\n@@ -258,5 +260,1 @@\n-        final List<ElementValuePairGen> out = new ArrayList<>();\n-        for (final ElementValuePair nvp : in) {\n-            out.add(new ElementValuePairGen(nvp, cpool, copyPoolEntries));\n-        }\n-        return out;\n+        return Utils.streamOfIfNonNull(in).map(nvp -> new ElementValuePairGen(nvp, cpool, copyPoolEntries)).collect(Collectors.toList());\n@@ -289,1 +287,1 @@\n-        return getTypeSignature();\/\/ BCELBUG: Should I use this instead?\n+        return getTypeSignature(); \/\/ BCELBUG: Should I use this instead?\n@@ -294,1 +292,1 @@\n-        \/\/ ConstantClass c = (ConstantClass)cpool.getConstant(typeIndex);\n+        \/\/ ConstantClass c = (ConstantClass) cpool.getConstant(typeIndex);\n@@ -300,1 +298,3 @@\n-     * Returns list of ElementNameValuePair objects\n+     * Returns list of ElementNameValuePair objects.\n+     *\n+     * @return list of ElementNameValuePair objects.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/AnnotationEntryGen.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +27,1 @@\n+import java.util.stream.Collectors;\n@@ -31,0 +31,1 @@\n+import jdk.xml.internal.Utils;\n@@ -34,0 +35,1 @@\n+ * @LastModified: Sept 2025\n@@ -49,1 +51,1 @@\n-            evalues.add(ElementValueGen.copy(element, cpool, copyPoolEntries));\n+            evalues.add(copy(element, cpool, copyPoolEntries));\n@@ -58,1 +60,1 @@\n-    public ArrayElementValueGen(final int type, final ElementValue[] datums, final ConstantPoolGen cpool) {\n+    public ArrayElementValueGen(final int type, final ElementValue[] elementValues, final ConstantPoolGen cpool) {\n@@ -63,4 +65,1 @@\n-        this.evalues = new ArrayList<>();\n-        for (final ElementValue datum : datums) {\n-            evalues.add(ElementValueGen.copy(datum, cpool, true));\n-        }\n+        this.evalues = Utils.streamOfIfNonNull(elementValues).map(e -> copy(e, cpool, true)).collect(Collectors.toList());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ArrayElementValueGen.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n- * reserved comment block\n- * DO NOT REMOVE OR ALTER!\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +26,2 @@\n+ *\n+ * @LastModified: Sept 2025\n@@ -46,1 +47,1 @@\n-     * @param className complete name of class (java.lang.String, e.g.)\n+     * @param className complete name of class ({@link String}, for example)\n@@ -59,0 +60,1 @@\n+    @SuppressWarnings(\"deprecation\") \/\/signature\n@@ -82,1 +84,1 @@\n-        super.setSignature(buf.toString());\n+        this.signature = buf.toString();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ArrayType.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-     * Set new contents. Old instruction is disposed and may not be used anymore.\n+     * Sets new contents. Old instruction is disposed and may not be used anymore.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/BranchHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n- * @LastModified: Jan 2020\n+ * @LastModified: Sept 2025\n@@ -107,1 +107,1 @@\n-     * Set the index to constant pool.\n+     * Sets the index to constant pool.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CPInstruction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        super(ElementValueGen.CLASS, cpool);\n+        super(CLASS, cpool);\n@@ -56,1 +56,1 @@\n-        super(ElementValueGen.CLASS, cpool);\n+        super(CLASS, cpool);\n@@ -70,1 +70,1 @@\n-        \/\/ ConstantClass c = (ConstantClass)getConstantPool().getConstant(idx);\n+        \/\/ ConstantClass c = (ConstantClass) getConstantPool().getConstant(idx);\n@@ -72,1 +72,1 @@\n-        \/\/ (ConstantUtf8)getConstantPool().getConstant(c.getNameIndex());\n+        \/\/ (ConstantUtf8) getConstantPool().getConstant(c.getNameIndex());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ClassElementValueGen.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * Template class for building up a java class. May be initialized with an existing java class (file).\n+ * Template class for building up a java class. May be initialized with an existing Java class (file).\n@@ -46,1 +46,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -50,1 +50,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<ClassGen> bcelComparator = new BCELComparator<ClassGen>() {\n@@ -53,4 +53,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final ClassGen THIS = (ClassGen) o1;\n-            final ClassGen THAT = (ClassGen) o2;\n-            return Objects.equals(THIS.getClassName(), THAT.getClassName());\n+        public boolean equals(final ClassGen a, final ClassGen b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getClassName(), b.getClassName());\n@@ -60,3 +58,2 @@\n-        public int hashCode(final Object o) {\n-            final ClassGen THIS = (ClassGen) o;\n-            return THIS.getClassName().hashCode();\n+        public int hashCode(final ClassGen o) {\n+            return o != null ? Objects.hashCode(o.getClassName()) : 0;\n@@ -69,1 +66,1 @@\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<ClassGen> getComparator() {\n@@ -76,1 +73,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<ClassGen> comparator) {\n@@ -104,1 +101,1 @@\n-     * Initialize with existing class.\n+     * Constructs a new instance from an existing class.\n@@ -121,4 +118,9 @@\n-        Collections.addAll(interfaceList, clazz.getInterfaceNames());\n-        for (final Attribute attribute : attributes) {\n-            if (!(attribute instanceof Annotations)) {\n-                addAttribute(attribute);\n+        final String[] interfaceNames = clazz.getInterfaceNames();\n+        if (interfaceNames != null) {\n+            Collections.addAll(interfaceList, interfaceNames);\n+        }\n+        if (attributes != null) {\n+            for (final Attribute attribute : attributes) {\n+                if (!(attribute instanceof Annotations)) {\n+                    addAttribute(attribute);\n+                }\n@@ -128,2 +130,8 @@\n-        Collections.addAll(methodList, clazz.getMethods());\n-        Collections.addAll(fieldList, clazz.getFields());\n+        final Method[] methods = clazz.getMethods();\n+        if (methods != null) {\n+            Collections.addAll(methodList, methods);\n+        }\n+        final Field[] fields = clazz.getFields();\n+        if (fields != null) {\n+            Collections.addAll(fieldList, fields);\n+        }\n@@ -245,1 +253,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n@@ -285,1 +293,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof ClassGen && bcelComparator.equals(this, (ClassGen) obj);\n@@ -382,1 +390,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the class name.\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the class name.\n@@ -481,1 +489,1 @@\n-     * Set major version number of class file, default value is 45 (JDK 1.1)\n+     * Sets major version number of class file, default value is 45 (JDK 1.1)\n@@ -495,1 +503,3 @@\n-        Collections.addAll(methodList, methods);\n+        if (methods != null) {\n+            Collections.addAll(methodList, methods);\n+        }\n@@ -499,1 +509,1 @@\n-     * Set minor version number of class file, default value is 3 (JDK 1.1)\n+     * Sets minor version number of class file, default value is 3 (JDK 1.1)\n@@ -518,1 +528,1 @@\n-     * Look for attributes representing annotations and unpack them.\n+     * Unpacks attributes representing annotations.\n@@ -520,1 +530,1 @@\n-    private AnnotationEntryGen[] unpackAnnotations(final Attribute[] attrs) {\n+    private AnnotationEntryGen[] unpackAnnotations(final Attribute[] attributes) {\n@@ -522,7 +532,9 @@\n-        for (final Attribute attr : attrs) {\n-            if (attr instanceof RuntimeVisibleAnnotations) {\n-                final RuntimeVisibleAnnotations rva = (RuntimeVisibleAnnotations) attr;\n-                rva.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, getConstantPool(), false)));\n-            } else if (attr instanceof RuntimeInvisibleAnnotations) {\n-                final RuntimeInvisibleAnnotations ria = (RuntimeInvisibleAnnotations) attr;\n-                ria.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, getConstantPool(), false)));\n+        if (attributes != null) {\n+            for (final Attribute attr : attributes) {\n+                if (attr instanceof RuntimeVisibleAnnotations) {\n+                    final RuntimeVisibleAnnotations rva = (RuntimeVisibleAnnotations) attr;\n+                    rva.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, getConstantPool(), false)));\n+                } else if (attr instanceof RuntimeInvisibleAnnotations) {\n+                    final RuntimeInvisibleAnnotations ria = (RuntimeInvisibleAnnotations) attr;\n+                    ria.forEach(a -> annotationGenObjs.add(new AnnotationEntryGen(a, getConstantPool(), false)));\n+                }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ClassGen.java","additions":47,"deletions":35,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n@@ -84,1 +84,1 @@\n-     * Get CodeException object.<BR>\n+     * Gets CodeException object.<BR>\n@@ -123,1 +123,1 @@\n-     * Set end of handler\n+     * Sets end of handler\n@@ -133,1 +133,1 @@\n-     * Set handler code\n+     * Sets handler code\n@@ -143,1 +143,1 @@\n-     * Set start of handler\n+     * Sets start of handler\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/CodeExceptionGen.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        \/\/ (!nvp.getNameString().equals(((ConstantUtf8)constantPoolGen.getConstant(nvp.getNameIndex())).getBytes()))\n+        \/\/ (!nvp.getNameString().equals(((ConstantUtf8) constantPoolGen.getConstant(nvp.getNameIndex())).getBytes()))\n@@ -89,1 +89,1 @@\n-        \/\/ ConstantString cu8 = (ConstantString)constantPoolGen.getConstant(nameIdx);\n+        \/\/ ConstantString cu8 = (ConstantString) constantPoolGen.getConstant(nameIdx);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ElementValuePairGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,4 +43,2 @@\n-            typeIdx = cpool.addUtf8(value.getEnumTypeString());\/\/ was\n-                                                               \/\/ addClass(value.getEnumTypeString());\n-            valueIdx = cpool.addUtf8(value.getEnumValueString()); \/\/ was\n-                                                                  \/\/ addString(value.getEnumValueString());\n+            typeIdx = cpool.addUtf8(value.getEnumTypeString()); \/\/ was addClass(value.getEnumTypeString());\n+            valueIdx = cpool.addUtf8(value.getEnumValueString()); \/\/ was addString(value.getEnumValueString());\n@@ -58,1 +56,1 @@\n-        super(ElementValueGen.ENUM_CONSTANT, cpool);\n+        super(ENUM_CONSTANT, cpool);\n@@ -67,3 +65,3 @@\n-        super(ElementValueGen.ENUM_CONSTANT, cpool);\n-        typeIdx = cpool.addUtf8(t.getSignature());\/\/ was addClass(t);\n-        valueIdx = cpool.addUtf8(value);\/\/ was addString(value);\n+        super(ENUM_CONSTANT, cpool);\n+        typeIdx = cpool.addUtf8(t.getSignature()); \/\/ was addClass(t);\n+        valueIdx = cpool.addUtf8(value); \/\/ was addString(value);\n@@ -93,1 +91,1 @@\n-        \/\/ (ConstantClass)getConstantPool().getConstant(typeIdx);\n+        \/\/ (ConstantClass) getConstantPool().getConstant(typeIdx);\n@@ -95,1 +93,1 @@\n-        \/\/ ((ConstantUtf8)getConstantPool().getConstant(cu8.getNameIndex())).getBytes();\n+        \/\/ ((ConstantUtf8) getConstantPool().getConstant(cu8.getNameIndex())).getBytes();\n@@ -103,1 +101,1 @@\n-        \/\/ (ConstantString)getConstantPool().getConstant(valueIdx);\n+        \/\/ (ConstantString) getConstantPool().getConstant(valueIdx);\n@@ -105,1 +103,1 @@\n-        \/\/ ((ConstantUtf8)getConstantPool().getConstant(cu8.getStringIndex())).getBytes();\n+        \/\/ ((ConstantUtf8) getConstantPool().getConstant(cu8.getStringIndex())).getBytes();\n@@ -121,1 +119,1 @@\n-        \/\/ (ConstantString)getConstantPool().getConstant(valueIdx);\n+        \/\/ (ConstantString) getConstantPool().getConstant(valueIdx);\n@@ -123,1 +121,1 @@\n-        \/\/ ((ConstantUtf8)getConstantPool().getConstant(cu8.getStringIndex())).getBytes();\n+        \/\/ ((ConstantUtf8) getConstantPool().getConstant(cu8.getStringIndex())).getBytes();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/EnumElementValueGen.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * the truth as such; because all instructions may throw an java.lang.VirtualMachineError. These exceptions are omitted.\n+ * the truth as such; because all instructions may throw a {@link VirtualMachineError}. These exceptions are omitted.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ExceptionThrower.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -47,1 +47,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<FieldGen> bcelComparator = new BCELComparator<FieldGen>() {\n@@ -50,4 +50,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final FieldGen THIS = (FieldGen) o1;\n-            final FieldGen THAT = (FieldGen) o2;\n-            return Objects.equals(THIS.getName(), THAT.getName()) && Objects.equals(THIS.getSignature(), THAT.getSignature());\n+        public boolean equals(final FieldGen a, final FieldGen b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getName(), b.getName()) && Objects.equals(a.getSignature(), b.getSignature());\n@@ -57,3 +55,2 @@\n-        public int hashCode(final Object o) {\n-            final FieldGen THIS = (FieldGen) o;\n-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();\n+        public int hashCode(final FieldGen o) {\n+            return o != null ? Objects.hash(o.getSignature(), o.getName()) : 0;\n@@ -64,1 +61,1 @@\n-     * @return Comparison strategy object\n+     * @return Comparison strategy object.\n@@ -66,1 +63,1 @@\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<FieldGen> getComparator() {\n@@ -71,1 +68,1 @@\n-     * @param comparator Comparison strategy object\n+     * @param comparator Comparison strategy object.\n@@ -73,1 +70,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<FieldGen> comparator) {\n@@ -84,2 +81,2 @@\n-     * @param field Field object\n-     * @param cp constant pool (must contain the same entries as the field's constant pool)\n+     * @param field Field object.\n+     * @param cp constant pool (must contain the same entries as the field's constant pool).\n@@ -190,1 +187,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof FieldGen && bcelComparator.equals(this, (FieldGen) obj);\n@@ -194,1 +191,1 @@\n-     * Get field object after having set up all necessary values.\n+     * Gets field object after having set up all necessary values.\n@@ -210,4 +207,1 @@\n-        if (value != null) {\n-            return value.toString();\n-        }\n-        return null;\n+        return Objects.toString(value, null);\n@@ -222,1 +216,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the field's name XOR\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the field's name XOR\n@@ -298,1 +292,1 @@\n-     * Set (optional) initial value of field, otherwise it will be set to null\/0\/false by the JVM automatically.\n+     * Sets (optional) initial value of field, otherwise it will be set to null\/0\/false by the JVM automatically.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldGen.java","additions":18,"deletions":24,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -70,2 +70,4 @@\n-    protected void addAll(final Attribute[] attrs) {\n-        Collections.addAll(attributeList, attrs);\n+    protected void addAll(final Attribute[] attributes) {\n+        if (attributes != null) {\n+            Collections.addAll(attributeList, attributes);\n+        }\n@@ -96,1 +98,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldGenOrMethodGen.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-     *\n@@ -92,0 +91,3 @@\n+        if (rt instanceof ArrayType) {\n+            return Type.OBJECT;\n+        }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/FieldOrMethod.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ICONST.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -107,1 +107,1 @@\n-     * Since InvokeDynamic doesn't refer to a reference type, just return java.lang.Object, as that is the only type we can\n+     * Since InvokeDynamic doesn't refer to a reference type, just return {@link Object}, as that is the only type we can\n@@ -111,1 +111,1 @@\n-     * @return an ObjectType for java.lang.Object\n+     * @return an ObjectType for {@link Object}\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/INVOKEDYNAMIC.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -464,1 +464,1 @@\n-        if (InstructionConst.getInstruction(this.getOpcode()) != null) {\n+        if (InstructionConst.getInstruction(getOpcode()) != null) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Instruction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-     * Get object via its opcode, for immutable instructions like branch instructions entries are set to null.\n+     * Gets object via its opcode, for immutable instructions like branch instructions entries are set to null.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionConst.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -37,1 +37,1 @@\n-    private static class MethodObject {\n+    private static final class MethodObject {\n@@ -56,2 +56,4 @@\n-    \/\/ N.N. These must agree with the order of Constants.T_CHAR through T_LONG\n-    private static final String[] shortNames = {\"C\", \"F\", \"D\", \"B\", \"S\", \"I\", \"L\"};\n+    \/**\n+     * These must agree with the order of Constants.T_CHAR through T_LONG.\n+     *\/\n+    private static final String[] SHORT_NAMES = {\"C\", \"F\", \"D\", \"B\", \"S\", \"I\", \"L\"};\n@@ -59,1 +61,1 @@\n-    private static final MethodObject[] appendMethodObjects = {\n+    private static final MethodObject[] APPEND_METHOD_OBJECTS = {\n@@ -487,1 +489,1 @@\n-            return createInvoke(appendMethodObjects[0], Const.INVOKEVIRTUAL);\n+            return createInvoke(APPEND_METHOD_OBJECTS[0], Const.INVOKEVIRTUAL);\n@@ -498,1 +500,1 @@\n-            return createInvoke(appendMethodObjects[t], Const.INVOKEVIRTUAL);\n+            return createInvoke(APPEND_METHOD_OBJECTS[t], Const.INVOKEVIRTUAL);\n@@ -501,1 +503,1 @@\n-            return createInvoke(appendMethodObjects[1], Const.INVOKEVIRTUAL);\n+            return createInvoke(APPEND_METHOD_OBJECTS[1], Const.INVOKEVIRTUAL);\n@@ -518,1 +520,1 @@\n-            final String name = \"com.sun.org.apache.bcel.internal.generic.\" + shortNames[src - Const.T_CHAR] + \"2\" + shortNames[dest - Const.T_CHAR];\n+            final String name = \"com.sun.org.apache.bcel.internal.generic.\" + SHORT_NAMES[src - Const.T_CHAR] + \"2\" + SHORT_NAMES[dest - Const.T_CHAR];\n@@ -645,2 +647,4 @@\n-        for (final Type argType : argTypes) {\n-            nargs += argType.getSize();\n+        if (argTypes != null) {\n+            for (final Type argType : argTypes) {\n+                nargs += argType.getSize();\n+            }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionFactory.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -121,1 +121,1 @@\n-        \/\/ if(!targeters.contains(t))\n+        \/\/ if (!targeters.contains(t))\n@@ -138,1 +138,1 @@\n-     * Get attribute of an instruction handle.\n+     * Gets attribute of an instruction handle.\n@@ -143,4 +143,1 @@\n-        if (attributes != null) {\n-            return attributes.get(key);\n-        }\n-        return null;\n+        return attributes != null ? attributes.get(key) : null;\n@@ -250,1 +247,1 @@\n-     * Set the position, i.e., the byte code offset of the contained instruction.\n+     * Sets the position, i.e., the byte code offset of the contained instruction.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionHandle.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.xml.internal.Utils;\n@@ -49,1 +50,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -63,17 +64,19 @@\n-        int l = 0;\n-        int r = count - 1;\n-        \/*\n-         * Do a binary search since the pos array is orderd.\n-         *\/\n-        do {\n-            final int i = l + r >>> 1;\n-            final int j = pos[i];\n-            if (j == target) {\n-                return ihs[i];\n-            }\n-            if (target < j) {\n-                r = i - 1;\n-            } else {\n-                l = i + 1;\n-            }\n-        } while (l <= r);\n+        if (ihs != null && pos != null) {\n+            int l = 0;\n+            int r = count - 1;\n+            \/*\n+             * Do a binary search since the pos array is orderd.\n+             *\/\n+            do {\n+                final int i = l + r >>> 1;\n+                final int j = pos[i];\n+                if (j == target) {\n+                    return ihs[i];\n+                }\n+                if (target < j) {\n+                    r = i - 1;\n+                } else {\n+                    l = i + 1;\n+                }\n+            } while (l <= r);\n+        }\n@@ -516,1 +519,1 @@\n-     * Get instruction handle for instruction at byte code position pos. This only works properly, if the list is freshly\n+     * Gets instruction handle for instruction at byte code position pos. This only works properly, if the list is freshly\n@@ -608,1 +611,1 @@\n-     * Get positions (offsets) of all instructions in the list. This relies on that the list has been freshly created from\n+     * Gets positions (offsets) of all instructions in the list. This relies on that the list has been freshly created from\n@@ -962,1 +965,1 @@\n-        for (final CodeExceptionGen exception : exceptions) {\n+        Utils.streamOfIfNonNull(exceptions).forEach(exception -> {\n@@ -972,1 +975,1 @@\n-        }\n+        });\n@@ -984,4 +987,2 @@\n-        for (final LocalVariableGen element : lg) {\n-            final InstructionHandle start = element.getStart();\n-            final InstructionHandle end = element.getEnd();\n-            if (start == oldTarget) {\n+        Utils.streamOfIfNonNull(lg).forEach(element -> {\n+            if (element.getStart() == oldTarget) {\n@@ -990,1 +991,1 @@\n-            if (end == oldTarget) {\n+            if (element.getEnd() == oldTarget) {\n@@ -993,1 +994,1 @@\n-        }\n+        });\n@@ -1123,1 +1124,1 @@\n-             * Get an estimate about how many additional bytes may be added, because BranchInstructions may have variable length\n+             * Gets an estimate about how many additional bytes may be added, because BranchInstructions may have variable length\n@@ -1135,0 +1136,3 @@\n+            default:\n+                \/\/ TODO should this be an error?\n+                break;\n@@ -1139,1 +1143,1 @@\n-         * Pass 2: Expand the variable-length (Branch)Instructions depending on the target offset (short or int) and ensure that\n+         * Pass 2: Expand the variable-length (Branch) Instructions depending on the target offset (short or int) and ensure that\n@@ -1155,2 +1159,1 @@\n-        bytePositions = new int[count]; \/\/ Trim to proper size\n-        System.arraycopy(pos, 0, bytePositions, 0, count);\n+        bytePositions = Arrays.copyOfRange(pos, 0, count); \/\/ Trim to proper size\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionList.java","additions":36,"deletions":33,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * Denote that a class targets InstructionHandles within an InstructionList. Namely the following implementers:\n+ * Denotes that a class targets InstructionHandles within an InstructionList.\n@@ -36,1 +36,4 @@\n-     * Checks whether this targeter targets the specified instruction handle.\n+     * Tests whether this targeter targets the specified instruction handle.\n+     *\n+     * @param instructionHandle the instruction handle to test.\n+     * @return whether this targeter targets the specified instruction handle.\n@@ -38,1 +41,1 @@\n-    boolean containsTarget(InstructionHandle ih);\n+    boolean containsTarget(InstructionHandle instructionHandle);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/InstructionTargeter.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n- *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LCMP.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,2 @@\n+        case com.sun.org.apache.bcel.internal.Const.CONSTANT_Dynamic:\n+            return Type.OBJECT;\n@@ -116,1 +118,4 @@\n-            return Type.getType(((com.sun.org.apache.bcel.internal.classfile.ConstantUtf8) c).getBytes());\n+            return Type.getType(Type.internalTypeNameToSignature(((com.sun.org.apache.bcel.internal.classfile.ConstantUtf8) c).getBytes()));\n+        case com.sun.org.apache.bcel.internal.Const.CONSTANT_Dynamic:\n+            \/\/ Really not sure what to return here, maybe a BootstrapMethod instance but how do we get it?\n+            return c;\n@@ -132,1 +137,1 @@\n-     * Set the index to constant pool and adjust size.\n+     * Sets the index to constant pool and adjust size.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LDC.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n@@ -74,1 +74,1 @@\n-     * Get LineNumber attribute.\n+     * Gets LineNumber attribute.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LineNumberGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            throw new Error(\"Clone Not Supported\"); \/\/ never happens\n+            throw new UnsupportedOperationException(\"Clone Not Supported\", e); \/\/ never happens\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LocalVariableGen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -165,1 +165,1 @@\n-     * Set the local variable index. also updates opcode and length TODO Why?\n+     * Sets the local variable index. also updates opcode and length TODO Why?\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/LocalVariableInstruction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.stream.Collectors;\n@@ -49,0 +50,1 @@\n+import jdk.xml.internal.Utils;\n@@ -60,1 +62,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -105,1 +107,1 @@\n-    private static BCELComparator bcelComparator = new BCELComparator() {\n+    private static BCELComparator<FieldGenOrMethodGen> bcelComparator = new BCELComparator<FieldGenOrMethodGen>() {\n@@ -108,4 +110,2 @@\n-        public boolean equals(final Object o1, final Object o2) {\n-            final FieldGenOrMethodGen THIS = (FieldGenOrMethodGen) o1;\n-            final FieldGenOrMethodGen THAT = (FieldGenOrMethodGen) o2;\n-            return Objects.equals(THIS.getName(), THAT.getName()) && Objects.equals(THIS.getSignature(), THAT.getSignature());\n+        public boolean equals(final FieldGenOrMethodGen a, final FieldGenOrMethodGen b) {\n+            return a == b || a != null && b != null && Objects.equals(a.getName(), b.getName()) && Objects.equals(a.getSignature(), b.getSignature());\n@@ -115,3 +115,2 @@\n-        public int hashCode(final Object o) {\n-            final FieldGenOrMethodGen THIS = (FieldGenOrMethodGen) o;\n-            return THIS.getSignature().hashCode() ^ THIS.getName().hashCode();\n+        public int hashCode(final FieldGenOrMethodGen o) {\n+            return o != null ? Objects.hash(o.getSignature(), o.getName()) : 0;\n@@ -130,1 +129,1 @@\n-     * @return Comparison strategy object\n+     * @return Comparison strategy object.\n@@ -132,1 +131,1 @@\n-    public static BCELComparator getComparator() {\n+    public static BCELComparator<FieldGenOrMethodGen> getComparator() {\n@@ -209,1 +208,1 @@\n-     * @param comparator Comparison strategy object\n+     * @param comparator Comparison strategy object.\n@@ -211,1 +210,1 @@\n-    public static void setComparator(final BCELComparator comparator) {\n+    public static void setComparator(final BCELComparator<FieldGenOrMethodGen> comparator) {\n@@ -639,1 +638,1 @@\n-        return bcelComparator.equals(this, obj);\n+        return obj instanceof FieldGenOrMethodGen && bcelComparator.equals(this, (FieldGenOrMethodGen) obj);\n@@ -793,1 +792,1 @@\n-     * Get method object. Never forget to call setMaxStack() or setMaxStack(max), respectively, before calling this method\n+     * Gets method object. Never forget to call setMaxStack() or setMaxStack(max), respectively, before calling this method\n@@ -891,1 +890,1 @@\n-     * Return value as defined by given BCELComparator strategy. By default return the hashcode of the method's name XOR\n+     * Return value as defined by given BCELComparator strategy. By default return the hash code of the method's name XOR\n@@ -902,5 +901,1 @@\n-        final List<AnnotationEntryGen> result = new ArrayList<>();\n-        for (final AnnotationEntry element : mutableArray) {\n-            result.add(new AnnotationEntryGen(element, getConstantPool(), false));\n-        }\n-        return result;\n+        return Utils.streamOfIfNonNull(mutableArray).map(ae -> new AnnotationEntryGen(ae, getConstantPool(), false)).collect(Collectors.toList());\n@@ -1030,4 +1025,2 @@\n-    public void removeRuntimeAttributes(final Attribute[] attrs) {\n-        for (final Attribute attr : attrs) {\n-            removeAttribute(attr);\n-        }\n+    public void removeRuntimeAttributes(final Attribute[] attributes) {\n+        Utils.streamOfIfNonNull(attributes).forEach(this::removeAttribute);\n@@ -1041,1 +1034,1 @@\n-        this.argNames = argNames;\n+        this.argNames = Utils.createEmptyArrayIfNull(argNames, String[].class);\n@@ -1049,1 +1042,1 @@\n-        this.argTypes = argTypes;\n+        this.argTypes = argTypes != null ? argTypes : Type.NO_ARGS;\n@@ -1087,1 +1080,1 @@\n-     * Set maximum number of local variables.\n+     * Sets maximum number of local variables.\n@@ -1105,1 +1098,1 @@\n-     * Set maximum stack size for this method.\n+     * Sets maximum stack size for this method.\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/MethodGen.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * Denotes reference such as java.lang.String.\n+ * Denotes reference such as {@link String}.\n@@ -50,1 +50,1 @@\n-     * @param className fully qualified class name, e.g. java.lang.String\n+     * @param className fully qualified class name, e.g. {@link String}\n@@ -154,1 +154,1 @@\n-        if (this.referencesInterfaceExact() || superclass.referencesInterfaceExact()) {\n+        if (referencesInterfaceExact() || superclass.referencesInterfaceExact()) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ObjectType.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-     * Set index of local variable containg the return address\n+     * Sets index of local variable containg the return address\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/RET.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,4 +45,4 @@\n-     * interface). If one of the types is a superclass of the other, the former is returned. If \"this\" is Type.NULL, then t\n-     * is returned. If t is Type.NULL, then \"this\" is returned. If \"this\" equals t ['this.equals(t)'] \"this\" is returned. If\n-     * \"this\" or t is an ArrayType, then Type.OBJECT is returned. If \"this\" or t is a ReferenceType referencing an\n-     * interface, then Type.OBJECT is returned. If not all of the two classes' superclasses cannot be found, \"null\" is\n+     * interface). If one of the types is a superclass of the other, the former is returned. If \"this\" is NULL, then t\n+     * is returned. If t is NULL, then \"this\" is returned. If \"this\" equals t ['this.equals(t)'] \"this\" is returned. If\n+     * \"this\" or t is an ArrayType, then {@link #OBJECT} is returned. If \"this\" or t is a ReferenceType referencing an\n+     * interface, then {@link #OBJECT} is returned. If not all of the two classes' superclasses cannot be found, \"null\" is\n@@ -56,1 +56,1 @@\n-        if (this.equals(Type.NULL)) {\n+        if (equals(NULL)) {\n@@ -59,1 +59,1 @@\n-        if (t.equals(Type.NULL) || this.equals(t)) {\n+        if (t.equals(NULL) || equals(t)) {\n@@ -62,3 +62,3 @@\n-             * TODO: Above sounds a little arbitrary. On the other hand, there is no object referenced by Type.NULL so we can also\n-             * say all the objects referenced by Type.NULL were derived from java.lang.Object. However, the Java Language's\n-             * \"instanceof\" operator proves us wrong: \"null\" is not referring to an instance of java.lang.Object :)\n+             * TODO: Above sounds a little arbitrary. On the other hand, there is no object referenced by {@link #NULL} so we can also\n+             * say all the objects referenced by {@link #NULL} were derived from {@link Object}. However, the Java Language's\n+             * \"instanceof\" operator proves us wrong: \"null\" is not referring to an instance of {@link Object} :)\n@@ -68,2 +68,2 @@\n-            return Type.OBJECT;\n-            \/\/ TODO: Is there a proof of OBJECT being the direct ancestor of every ArrayType?\n+            return OBJECT;\n+            \/\/ TODO: Is there a proof of {@link #OBJECT} being the direct ancestor of every ArrayType?\n@@ -76,3 +76,3 @@\n-     * interface). If one of the types is a superclass of the other, the former is returned. If \"this\" is Type.NULL, then t\n-     * is returned. If t is Type.NULL, then \"this\" is returned. If \"this\" equals t ['this.equals(t)'] \"this\" is returned. If\n-     * \"this\" or t is an ArrayType, then Type.OBJECT is returned; unless their dimensions match. Then an ArrayType of the\n+     * interface). If one of the types is a superclass of the other, the former is returned. If \"this\" is NULL, then t\n+     * is returned. If t is NULL, then \"this\" is returned. If \"this\" equals t ['this.equals(t)'] \"this\" is returned. If\n+     * \"this\" or t is an ArrayType, then {@link #OBJECT} is returned; unless their dimensions match. Then an ArrayType of the\n@@ -80,1 +80,1 @@\n-     * \"this\" and t. If \"this\" or t is a ReferenceType referencing an interface, then Type.OBJECT is returned. If not all of\n+     * \"this\" and t. If \"this\" or t is a ReferenceType referencing an interface, then {@link #OBJECT} is returned. If not all of\n@@ -87,1 +87,1 @@\n-        if (this.equals(Type.NULL)) {\n+        if (equals(NULL)) {\n@@ -90,1 +90,1 @@\n-        if (t.equals(Type.NULL) || this.equals(t)) {\n+        if (t.equals(NULL) || equals(t)) {\n@@ -93,3 +93,3 @@\n-             * TODO: Above sounds a little arbitrary. On the other hand, there is no object referenced by Type.NULL so we can also\n-             * say all the objects referenced by Type.NULL were derived from java.lang.Object. However, the Java Language's\n-             * \"instanceof\" operator proves us wrong: \"null\" is not referring to an instance of java.lang.Object :)\n+             * TODO: Above sounds a little arbitrary. On the other hand, there is no object referenced by {@link #NULL} so we can also\n+             * say all the objects referenced by {@link #NULL} were derived from {@link Object}. However, the Java Language's\n+             * \"instanceof\" operator proves us wrong: \"null\" is not referring to an instance of {@link Object} :)\n@@ -109,2 +109,2 @@\n-            return Type.OBJECT;\n-            \/\/ TODO: Is there a proof of OBJECT being the direct ancestor of every ArrayType?\n+            return OBJECT;\n+            \/\/ TODO: Is there a proof of {@link #OBJECT} being the direct ancestor of every ArrayType?\n@@ -118,1 +118,1 @@\n-            return Type.OBJECT;\n+            return OBJECT;\n@@ -145,1 +145,1 @@\n-        \/\/ Huh? Did you ask for Type.OBJECT's superclass??\n+        \/\/ Huh? Did you ask for OBJECT's superclass??\n@@ -161,1 +161,1 @@\n-        if (this.equals(Type.NULL)) {\n+        if (equals(NULL)) {\n@@ -172,1 +172,1 @@\n-                && (this.equals(T) || Repository.instanceOf(((ObjectType) this).getClassName(), ((ObjectType) T).getClassName()))) {\n+                && (equals(T) || Repository.instanceOf(((ObjectType) this).getClassName(), ((ObjectType) T).getClassName()))) {\n@@ -190,1 +190,1 @@\n-            if (T instanceof ObjectType && ((ObjectType) T).referencesClassExact() && T.equals(Type.OBJECT)) {\n+            if (T instanceof ObjectType && ((ObjectType) T).referencesClassExact() && T.equals(OBJECT)) {\n@@ -197,1 +197,1 @@\n-                && (this.equals(T) || Repository.implementationOf(((ObjectType) this).getClassName(), ((ObjectType) T).getClassName()))) {\n+                && (equals(T) || Repository.implementationOf(((ObjectType) this).getClassName(), ((ObjectType) T).getClassName()))) {\n@@ -208,1 +208,1 @@\n-            if (T instanceof ObjectType && ((ObjectType) T).referencesClassExact() && T.equals(Type.OBJECT)) {\n+            if (T instanceof ObjectType && ((ObjectType) T).referencesClassExact() && T.equals(OBJECT)) {\n@@ -249,1 +249,1 @@\n-     * Type.NULL is not defined (see the CHECKCAST definition in the JVM specification). However, because e.g. CHECKCAST\n+     * {@link #NULL} is not defined (see the CHECKCAST definition in the JVM specification). However, because e.g. CHECKCAST\n@@ -256,1 +256,1 @@\n-        if (this.equals(Type.NULL)) {\n+        if (equals(NULL)) {\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/ReferenceType.java","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-        int[] matchClone = match.clone();\n+        final int[] matchClone = match.clone();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SWITCH.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -90,1 +90,1 @@\n-        \/\/ don't set default target before instuction is built\n+        \/\/ don't set default target before instruction is built\n@@ -291,1 +291,1 @@\n-     * Set branch target for 'i'th case\n+     * Sets branch target for 'i'th case\n@@ -317,1 +317,5 @@\n-                    s = targets[i].getInstruction().toString();\n+                    if (targets[i].getInstruction() == this) {\n+                        s = \"<points to itself>\";\n+                    } else {\n+                        s = targets[i].getInstruction().toString();\n+                    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Select.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-            throw new IllegalStateException(\"SimpleElementValueGen doesnt know how to write out type \" + super.getElementValueType());\n+            throw new IllegalStateException(\"SimpleElementValueGen doesn't know how to write out type \" + super.getElementValueType());\n@@ -187,1 +187,1 @@\n-            throw new IllegalStateException(\"Dont call getValueString() on a non STRING ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueString() on a non STRING ElementValue\");\n@@ -195,1 +195,1 @@\n-            throw new IllegalStateException(\"Dont call getValueString() on a non STRING ElementValue\");\n+            throw new IllegalStateException(\"Don't call getValueString() on a non STRING ElementValue\");\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/SimpleElementValueGen.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,3 @@\n- * Thrown by InstructionList.remove() when one or multiple disposed instructions are still being referenced by an\n- * InstructionTargeter object. I.e. the InstructionTargeter has to be notified that (one of) the InstructionHandle it is\n- * referencing is being removed from the InstructionList and thus not valid anymore.\n+ * Thrown by {@link InstructionList} when one or multiple disposed instructions are still being referenced by an {@link InstructionTargeter} object. I.e. the\n+ * {@link InstructionTargeter} has to be notified that (one of) the {@link InstructionHandle} it is referencing is being removed from the\n+ * {@link InstructionList} and thus not valid anymore.\n@@ -29,2 +29,2 @@\n- * Making this an exception instead of a return value forces the user to handle these case explicitly in a try { ... }\n- * catch. The following code illustrates how this may be done:\n+ * Making this an exception instead of a return value forces the user to handle these case explicitly in a try { ... } catch. The following code illustrates how\n+ * this may be done:\n@@ -33,1 +33,1 @@\n- * <PRE>\n+ * <pre>\n@@ -37,1 +37,1 @@\n- *     } catch(TargetLostException e) {\n+ *     } catch (TargetLostException e) {\n@@ -44,1 +44,1 @@\n- * <\/PRE>\n+ * <\/pre>\n@@ -49,1 +49,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -57,3 +57,3 @@\n-    TargetLostException(final InstructionHandle[] t, final String mesg) {\n-        super(mesg);\n-        targets = t;\n+    TargetLostException(final InstructionHandle[] targets, final String message) {\n+        super(message);\n+        this.targets = targets;\n@@ -63,0 +63,2 @@\n+     * Gets the list of instructions still being targeted.\n+     *\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/TargetLostException.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.org.apache.bcel.internal.classfile.InvalidMethodSignatureException;\n@@ -30,0 +31,1 @@\n+import jdk.xml.internal.Utils;\n@@ -32,1 +34,1 @@\n- * Abstract super class for all possible java types, namely basic types such as int, object types like String and array\n+ * Abstract super class for all possible Java types, namely basic types such as int, object types like String and array\n@@ -34,1 +36,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -91,1 +93,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -95,1 +97,1 @@\n-                \/\/ corrected concurrent private static field acess\n+                \/\/ corrected concurrent private static field access\n@@ -99,1 +101,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -113,1 +115,1 @@\n-                throw new ClassFormatException(\"Invalid method signature: \" + signature);\n+                throw new InvalidMethodSignatureException(signature);\n@@ -121,1 +123,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -157,1 +159,1 @@\n-            throw new ClassFormatException(\"Invalid method signature: \" + signature, e);\n+            throw new InvalidMethodSignatureException(signature, e);\n@@ -163,1 +165,1 @@\n-        return Type.size(getTypeSize(signature.substring(index)));\n+        return size(getTypeSize(signature.substring(index)));\n@@ -178,1 +180,1 @@\n-     * Convert runtime java.lang.Class to BCEL Type object.\n+     * Convert runtime {@link Class} to BCEL Type object.\n@@ -186,1 +188,1 @@\n-         * That's an amzingly easy case, because getName() returns the signature. That's what we would have liked anyway.\n+         * That's an amazingly easy case, because getName() returns the signature. That's what we would have liked anyway.\n@@ -233,1 +235,1 @@\n-            \/\/ corrected concurrent private static field acess\n+            \/\/ corrected concurrent private static field access\n@@ -249,1 +251,1 @@\n-        \/\/ corrected concurrent private static field acess\n+        \/\/ corrected concurrent private static field access\n@@ -257,1 +259,1 @@\n-     * Convert runtime java.lang.Class[] to BCEL Type objects.\n+     * Convert runtime {@code java.lang.Class[]} to BCEL Type objects.\n@@ -289,0 +291,18 @@\n+    static String internalTypeNameToSignature(final String internalTypeName) {\n+        if (Utils.isEmpty(internalTypeName) || Arrays.asList(Const.SHORT_TYPE_NAMES).contains(internalTypeName)) {\n+            return internalTypeName;\n+        }\n+        switch (internalTypeName.charAt(0)) {\n+            case '[':\n+                return internalTypeName;\n+            case 'L':\n+            case 'T':\n+                if (internalTypeName.charAt(internalTypeName.length() - 1) == ';') {\n+                    return internalTypeName;\n+                }\n+                return 'L' + internalTypeName + ';';\n+            default:\n+                return 'L' + internalTypeName + ';';\n+        }\n+    }\n+\n@@ -364,1 +384,1 @@\n-     * @return hashcode of Type\n+     * @return hash code of Type\n@@ -372,2 +392,2 @@\n-     * boolean, short and char variable are considered as int in the stack or local variable area. Returns {@link Type#INT}\n-     * for {@link Type#BOOLEAN}, {@link Type#SHORT} or {@link Type#CHAR}, otherwise returns the given type.\n+     * boolean, short and char variable are considered as int in the stack or local variable area. Returns {@link #INT}\n+     * for {@link #BOOLEAN}, {@link #SHORT} or {@link #CHAR}, otherwise returns the given type.\n@@ -378,2 +398,2 @@\n-        if (this == Type.BOOLEAN || this == Type.BYTE || this == Type.SHORT || this == Type.CHAR) {\n-            return Type.INT;\n+        if (this == BOOLEAN || this == BYTE || this == SHORT || this == CHAR) {\n+            return INT;\n@@ -384,8 +404,0 @@\n-    \/*\n-     * Currently only used by the ArrayType constructor. The signature has a complicated dependency on other parameter so\n-     * it's tricky to do it in a call to the super ctor.\n-     *\/\n-    void setSignature(final String signature) {\n-        this.signature = signature;\n-    }\n-\n@@ -397,1 +409,1 @@\n-        return this.equals(Type.NULL) || type >= Const.T_UNKNOWN ? signature : Utility.signatureToString(signature, false);\n+        return equals(NULL) || type >= Const.T_UNKNOWN ? signature : Utility.signatureToString(signature, false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/Type.java","additions":41,"deletions":29,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * Get the type associated with an instruction, int for ILOAD, or the type of the field of a PUTFIELD instruction, e.g..\n+ * Gets the type associated with an instruction, int for ILOAD, or the type of the field of a PUTFIELD instruction, e.g..\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/TypedInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+\/**\n+ * Generic part of the <a href=\"https:\/\/commons.apache.org\/bcel\/\">Apache Byte Code Engineering Library (BCEL)<\/a>, classes to dynamically modify class objects\n+ * and byte code instructions.\n+ *\/\n+package com.sun.org.apache.bcel.internal.generic;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/generic\/package-info.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+\/**\n+ * Basic classes for the <a href=\"https:\/\/commons.apache.org\/bcel\/\">Apache Byte Code Engineering Library (BCEL)<\/a> and constants defined by the\n+ * <a href=\"https:\/\/docs.oracle.com\/javase\/specs\/\"> JVM specification<\/a>.\n+ *\/\n+package com.sun.org.apache.bcel.internal;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/package-info.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n- * Used for BCEL comparison strategy\n+ * Used for BCEL comparison strategy.\n@@ -27,0 +27,1 @@\n+ * @param <T> What type we are comparing.\n@@ -29,1 +30,1 @@\n-public interface BCELComparator {\n+public interface BCELComparator<T> {\n@@ -32,1 +33,1 @@\n-     * Compare two objects and return what THIS.equals(THAT) should return\n+     * Compares two objects and return what a.equals(b) should return.\n@@ -34,3 +35,3 @@\n-     * @param THIS\n-     * @param THAT\n-     * @return true if and only if THIS equals THAT\n+     * @param a an object.\n+     * @param b an object to be compared with {@code a} for equality.\n+     * @return {@code true} if the arguments are equal to each other and {@code false} otherwise.\n@@ -38,1 +39,1 @@\n-    boolean equals(Object THIS, Object THAT);\n+    boolean equals(T a, T b);\n@@ -41,1 +42,1 @@\n-     * Return hashcode for THIS.hashCode()\n+     * Gets the hash code for o.hashCode()\n@@ -43,2 +44,2 @@\n-     * @param THIS\n-     * @return hashcode for THIS.hashCode()\n+     * @param o\n+     * @return hash code for o.hashCode()\n@@ -46,1 +47,1 @@\n-    int hashCode(Object THIS);\n+    int hashCode(T o);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELComparator.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -68,1 +68,1 @@\n-class BCELFactory extends EmptyVisitor {\n+final class BCELFactory extends EmptyVisitor {\n@@ -91,1 +91,1 @@\n-            embed = \"(char)0x\" + Integer.toHexString(((Character) value).charValue());\n+            embed = \"(char) 0x\" + Integer.toHexString(((Character) value).charValue());\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import com.sun.org.apache.bcel.internal.classfile.Code;\n@@ -38,0 +39,3 @@\n+import com.sun.org.apache.bcel.internal.classfile.StackMap;\n+import com.sun.org.apache.bcel.internal.classfile.StackMapEntry;\n+import com.sun.org.apache.bcel.internal.classfile.StackMapType;\n@@ -49,1 +53,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -77,1 +81,1 @@\n-    public static void _main(final String[] argv) throws Exception {\n+    public static void main(final String[] argv) throws Exception {\n@@ -314,0 +318,7 @@\n+        final Code code = method.getCode();\n+        if (code != null) {\n+            final StackMap stackMap = code.getStackMap();\n+            if (stackMap != null) {\n+                stackMap.accept(this);\n+            }\n+        }\n@@ -322,0 +333,74 @@\n+\n+    @Override\n+    public void visitStackMap(final StackMap stackMap) {\n+        super.visitStackMap(stackMap);\n+        printWriter.print(\"    method.addCodeAttribute(\");\n+        printWriter.print(\"new StackMap(_cp.addUtf8(\\\"\");\n+        printWriter.print(stackMap.getName());\n+        printWriter.print(\"\\\"), \");\n+        printWriter.print(stackMap.getLength());\n+        printWriter.print(\", \");\n+        printWriter.print(\"new StackMapEntry[] {\");\n+        final StackMapEntry[] table = stackMap.getStackMap();\n+        for (int i = 0; i < table.length; i++) {\n+            table[i].accept(this);\n+            if (i < table.length - 1) {\n+                printWriter.print(\", \");\n+            } else {\n+                printWriter.print(\" }\");\n+            }\n+        }\n+        printWriter.print(\", _cp.getConstantPool())\");\n+        printWriter.println(\");\");\n+    }\n+\n+    @Override\n+    public void visitStackMapEntry(final StackMapEntry stackMapEntry) {\n+        super.visitStackMapEntry(stackMapEntry);\n+        printWriter.print(\"new StackMapEntry(\");\n+        printWriter.print(stackMapEntry.getFrameType());\n+        printWriter.print(\", \");\n+        printWriter.print(stackMapEntry.getByteCodeOffset());\n+        printWriter.print(\", \");\n+        visitStackMapTypeArray(stackMapEntry.getTypesOfLocals());\n+        printWriter.print(\", \");\n+        visitStackMapTypeArray(stackMapEntry.getTypesOfStackItems());\n+        printWriter.print(\", _cp.getConstantPool())\");\n+    }\n+\n+    \/**\n+     * Visits a {@link StackMapType} object.\n+     * @param stackMapType object to visit\n+     * @since 6.7.1\n+     *\/\n+    @Override\n+    public void visitStackMapType(final StackMapType stackMapType) {\n+        super.visitStackMapType(stackMapType);\n+        printWriter.print(\"new StackMapType((byte)\");\n+        printWriter.print(stackMapType.getType());\n+        printWriter.print(\", \");\n+        if (stackMapType.hasIndex()) {\n+            printWriter.print(\"_cp.addClass(\\\"\");\n+            printWriter.print(stackMapType.getClassName());\n+            printWriter.print(\"\\\")\");\n+        } else {\n+            printWriter.print(\"-1\");\n+        }\n+        printWriter.print(\", _cp.getConstantPool())\");\n+    }\n+\n+    private void visitStackMapTypeArray(final StackMapType[] types) {\n+        if (types == null || types.length == 0) {\n+            printWriter.print(\"null\"); \/\/ null translates to StackMapType.EMPTY_ARRAY\n+        } else {\n+            printWriter.print(\"new StackMapType[] {\");\n+            for (int i = 0; i < types.length; i++) {\n+                types[i].accept(this);\n+                if (i < types.length - 1) {\n+                    printWriter.print(\", \");\n+                } else {\n+                    printWriter.print(\" }\");\n+                }\n+            }\n+        }\n+    }\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/BCELifier.java","additions":88,"deletions":3,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n@@ -76,1 +76,1 @@\n-    public static void _main(final String[] argv) throws IOException {\n+    public static void main(final String[] argv) throws IOException {\n@@ -92,1 +92,1 @@\n-                        dir = dir + sep;\n+                        dir += sep;\n@@ -118,1 +118,1 @@\n-                    parser = new ClassParser(zipFile, fileName[i]); \/\/ Create parser object from zip file\n+                    parser = new ClassParser(zipFile, fileName[i]); \/\/ Create parser object from ZIP file\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/Class2HTML.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n- * @LastModified: Feb 2023\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/ClassSet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -545,1 +545,1 @@\n-                     * Set an anchor mark if this line is targetted by a goto, jsr, etc. Defining an anchor for every line is very\n+                     * Sets an anchor mark if this line is targetted by a goto, jsr, etc. Defining an anchor for every line is very\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/CodeHTML.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n- * @LastModified: May 2021\n+ * @LastModified: Sept 2025\n@@ -73,1 +73,0 @@\n-     *\n@@ -377,1 +376,1 @@\n-\/\/        StringBuffer buf = new StringBuffer();\n+\/\/        StringBuilder buf = new StringBuilder();\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/InstructionFinder.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @see org.apache.bcel.Repository\n- * @LastModified: Feb 2023\n+ * @see com.sun.org.apache.bcel.internal.Repository\n+ * @LastModified: Sept 2025\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/Repository.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * reserved comment block\n+ * DO NOT REMOVE OR ALTER!\n+ *\/\n+\/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http:\/\/www.apache.org\/licenses\/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\/\n+\n+\/**\n+ * Utility classes for the <a href=\"https:\/\/commons.apache.org\/bcel\/\">Apache Byte Code Engineering Library (BCEL)<\/a>, namely:\n+ * <ul>\n+ * <li>Collection classes for JavaClass objects<\/li>\n+ * <li>A converter for class files to HTML<\/li>\n+ * <li>A tool to find instructions patterns via regular expressions<\/li>\n+ * <li>A class to find classes as defined in the CLASSPATH<\/li>\n+ * <li>A class loader that allows to create classes at run time<\/li>\n+ * <\/ul>\n+ *\/\n+package com.sun.org.apache.bcel.internal.util;\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/bcel\/internal\/util\/package-info.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.lang.reflect.Array;\n@@ -29,0 +30,1 @@\n+import java.util.Objects;\n@@ -30,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -79,0 +82,55 @@\n+\n+    \/**\n+     * Returns the original array, or an empty array if it is {@code null}.\n+     * @param array the specified array\n+     * @return the original array, or an empty array if it is {@code null}\n+     *\/\n+    public static byte[] createEmptyArrayIfNull(byte[] array) {\n+        return (array != null) ? array : new byte[0];\n+    }\n+\n+    \/**\n+     * Returns the original array, or an empty array if it is {@code null}.\n+     * @param array the specified array\n+     * @return the original array, or an empty array if it is {@code null}\n+     *\/\n+    public static int[] createEmptyArrayIfNull(int[] array) {\n+        return (array != null) ? array : new int[0];\n+    }\n+\n+    \/**\n+     * Returns the original array, or an empty array if it is {@code null}.\n+     * @param <T> the class type\n+     * @param array the specified array\n+     * @param type the type of the array\n+     * @return the original array, or an empty array if it is {@code null}\n+     *\/\n+    public static <T> T[] createEmptyArrayIfNull(final T[] array, final Class<T[]> type) {\n+        Objects.requireNonNull(type, \"The type argument should not be null.\");\n+\n+        return (array != null) ? array : type.cast(Array.newInstance(type.getComponentType(), 0));\n+    }\n+\n+    \/**\n+     * Returns the new stream created by {@code Stream.of(values)} or an empty\n+     * sequential stream created by {@code Stream.empty()} if values is null.\n+     *\n+     * @param <T> the type of stream elements\n+     * @param values the elements of the new stream\n+     * @return the new stream created by {@code Stream.of(values)} or an empty\n+     * sequential stream created by {@code Stream.empty()} if values is null.\n+     *\/\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\") \/\/ Creating a stream from an array is safe\n+    public static <T> Stream<T> streamOfIfNonNull(final T... values) {\n+        return values == null ? Stream.empty() : Stream.of(values);\n+    }\n+\n+    \/**\n+     * Checks if a CharSequence is empty (\"\") or null.\n+     * @param cs the CharSequence to check, may be null\n+     * @return {@code true} if the CharSequence is empty or null\n+     *\/\n+    public static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n","filename":"src\/java.xml\/share\/classes\/jdk\/xml\/internal\/Utils.java","additions":59,"deletions":1,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## Apache Commons Byte Code Engineering Library (BCEL) Version 6.7.0\n+## Apache Commons Byte Code Engineering Library (BCEL) Version 6.10.0\n","filename":"src\/java.xml\/share\/legal\/bcel.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}