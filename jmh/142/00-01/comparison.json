{"files":[{"patch":"@@ -460,1 +460,1 @@\n-        \/\/ generate padding\n+        \/\/ Generate padding\n@@ -463,2 +463,0 @@\n-        writer.println(ident(1) + \"static final String BLACKHOLE_CHALLENGE = \\\"Should not be calling this.\\\";\");\n-        writer.println();\n@@ -466,16 +464,2 @@\n-        \/\/ Shared fields and their initializations.\n-        writer.println(ident(1) + \"BenchmarkParams benchmarkParams;\");\n-        writer.println(ident(1) + \"IterationParams iterationParams;\");\n-        writer.println(ident(1) + \"ThreadParams threadParams;\");\n-        writer.println(ident(1) + \"Blackhole blackhole;\");\n-        writer.println(ident(1) + \"Control notifyControl;\");\n-        writer.println();\n-        writer.println(ident(1) + \"void init(InfraControl control, ThreadParams tp) {\");\n-        writer.println(ident(2) + \"benchmarkParams = control.benchmarkParams;\");\n-        writer.println(ident(2) + \"iterationParams = control.iterationParams;\");\n-        writer.println(ident(2) + \"notifyControl = control.notifyControl;\");\n-        writer.println(ident(2) + \"threadParams = tp;\");\n-        writer.println(ident(2) + \"if (blackhole == null) {\");\n-        writer.println(ident(3) + \"blackhole = new Blackhole(BLACKHOLE_CHALLENGE);\");\n-        writer.println(ident(2) + \"}\");\n-        writer.println(ident(1) + \"}\");\n+        \/\/ Write shared fields and their initializations\n+        generateSharedFields(writer);\n@@ -483,1 +467,1 @@\n-        \/\/ write all methods\n+        \/\/ Write all methods\n@@ -527,0 +511,20 @@\n+    private void generateSharedFields(PrintWriter writer) {\n+        writer.println(ident(1) + \"static final String BLACKHOLE_CHALLENGE = \\\"Should not be calling this.\\\";\");\n+        writer.println();\n+        writer.println(ident(1) + \"BenchmarkParams benchmarkParams;\");\n+        writer.println(ident(1) + \"IterationParams iterationParams;\");\n+        writer.println(ident(1) + \"ThreadParams threadParams;\");\n+        writer.println(ident(1) + \"Blackhole blackhole;\");\n+        writer.println(ident(1) + \"Control notifyControl;\");\n+        writer.println();\n+        writer.println(ident(1) + \"void init(InfraControl control, ThreadParams tp) {\");\n+        writer.println(ident(2) + \"benchmarkParams = control.benchmarkParams;\");\n+        writer.println(ident(2) + \"iterationParams = control.iterationParams;\");\n+        writer.println(ident(2) + \"notifyControl = control.notifyControl;\");\n+        writer.println(ident(2) + \"threadParams = tp;\");\n+        writer.println(ident(2) + \"if (blackhole == null) {\");\n+        writer.println(ident(3) + \"blackhole = new Blackhole(BLACKHOLE_CHALLENGE);\");\n+        writer.println(ident(2) + \"}\");\n+        writer.println(ident(1) + \"}\");\n+    }\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        long ms = getDurationMs(TimeUnit.MILLISECONDS);\n+        long ms = getDuration(TimeUnit.MILLISECONDS);\n@@ -66,1 +66,1 @@\n-    public long getDurationMs(TimeUnit unit) {\n+    public long getDuration(TimeUnit unit) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/InfraControl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}