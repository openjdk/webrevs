{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -461,1 +460,1 @@\n-        \/\/ generate padding\n+        \/\/ Generate padding\n@@ -464,2 +463,0 @@\n-        writer.println(ident(1) + \"static final String BLACKHOLE_CHALLENGE = \\\"Should not be calling this.\\\";\");\n-        writer.println();\n@@ -467,6 +464,2 @@\n-        writer.println(ident(1) + \"int startRndMask;\");\n-        writer.println(ident(1) + \"BenchmarkParams benchmarkParams;\");\n-        writer.println(ident(1) + \"IterationParams iterationParams;\");\n-        writer.println(ident(1) + \"ThreadParams threadParams;\");\n-        writer.println(ident(1) + \"Blackhole blackhole;\");\n-        writer.println(ident(1) + \"Control notifyControl;\");\n+        \/\/ Write shared fields and their initializations\n+        generateSharedFields(writer);\n@@ -474,1 +467,1 @@\n-        \/\/ write all methods\n+        \/\/ Write all methods\n@@ -504,5 +497,3 @@\n-                List.class, AtomicInteger.class,\n-                Collection.class, ArrayList.class,\n-                TimeUnit.class, CompilerControl.class,\n-                InfraControl.class, ThreadParams.class,\n-                BenchmarkTaskResult.class,\n+                InfraControl.class, BenchmarkParams.class, IterationParams.class, ThreadParams.class,\n+                Blackhole.class, Control.class, BenchmarkTaskResult.class, RawResults.class, ResultRole.class,\n+                SampleBuffer.class, Field.class, FailureAssistException.class,\n@@ -510,7 +501,2 @@\n-                SampleTimeResult.class, SingleShotResult.class, SampleBuffer.class,\n-                Mode.class, Fork.class, Measurement.class, Threads.class, Warmup.class,\n-                BenchmarkMode.class, RawResults.class, ResultRole.class,\n-                Field.class, BenchmarkParams.class, IterationParams.class,\n-                Blackhole.class, Control.class,\n-                ScalarResult.class, AggregationPolicy.class,\n-                FailureAssistException.class\n+                SampleTimeResult.class, SingleShotResult.class,\n+                ScalarResult.class, AggregationPolicy.class\n@@ -525,0 +511,20 @@\n+    private void generateSharedFields(PrintWriter writer) {\n+        writer.println(ident(1) + \"static final String BLACKHOLE_CHALLENGE = \\\"Should not be calling this.\\\";\");\n+        writer.println();\n+        writer.println(ident(1) + \"BenchmarkParams benchmarkParams;\");\n+        writer.println(ident(1) + \"IterationParams iterationParams;\");\n+        writer.println(ident(1) + \"ThreadParams threadParams;\");\n+        writer.println(ident(1) + \"Blackhole blackhole;\");\n+        writer.println(ident(1) + \"Control notifyControl;\");\n+        writer.println();\n+        writer.println(ident(1) + \"void init(InfraControl control, ThreadParams tp) {\");\n+        writer.println(ident(2) + \"benchmarkParams = control.benchmarkParams;\");\n+        writer.println(ident(2) + \"iterationParams = control.iterationParams;\");\n+        writer.println(ident(2) + \"notifyControl = control.notifyControl;\");\n+        writer.println(ident(2) + \"threadParams = tp;\");\n+        writer.println(ident(2) + \"if (blackhole == null) {\");\n+        writer.println(ident(3) + \"blackhole = new Blackhole(BLACKHOLE_CHALLENGE);\");\n+        writer.println(ident(2) + \"}\");\n+        writer.println(ident(1) + \"}\");\n+    }\n+\n@@ -812,1 +818,1 @@\n-        return \"control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl, startRndMask\";\n+        return \"control, res, benchmarkParams, iterationParams, threadParams, blackhole, notifyControl\";\n@@ -818,1 +824,1 @@\n-                \"Blackhole blackhole, Control notifyControl, int startRndMask\";\n+                \"Blackhole blackhole, Control notifyControl\";\n@@ -822,8 +828,1 @@\n-        \/\/ do nothing\n-        writer.println(ident(2) + \"this.benchmarkParams = control.benchmarkParams;\");\n-        writer.println(ident(2) + \"this.iterationParams = control.iterationParams;\");\n-        writer.println(ident(2) + \"this.threadParams    = threadParams;\");\n-        writer.println(ident(2) + \"this.notifyControl   = control.notifyControl;\");\n-        writer.println(ident(2) + \"if (this.blackhole == null) {\");\n-        writer.println(ident(3) + \"this.blackhole = new Blackhole(BLACKHOLE_CHALLENGE);\");\n-        writer.println(ident(2) + \"}\");\n+        writer.println(ident(2) + \"init(control, threadParams);\");\n@@ -833,1 +832,1 @@\n-        writer.println(ident(3) + \"this.blackhole.evaporate(BLACKHOLE_CHALLENGE);\");\n+        writer.println(ident(3) + \"blackhole.evaporate(BLACKHOLE_CHALLENGE);\");\n@@ -879,1 +878,1 @@\n-            writer.println(ident(3) + \"int targetSamples = (int) (control.getDuration(TimeUnit.MILLISECONDS) * 20); \/\/ at max, 20 timestamps per millisecond\");\n+            writer.println(ident(3) + \"int targetSamples = control.getDurationMs() * 20;\");\n@@ -955,1 +954,1 @@\n-            writer.println(ident(2) + \"int rndMask = startRndMask;\");\n+            writer.println(ident(2) + \"int rndMask = 0;\");\n@@ -970,1 +969,1 @@\n-            writer.println(ident(4) + \"\" + emitCall(method, states) + ';');\n+            writer.println(ident(4) + emitCall(method, states) + ';');\n@@ -986,1 +985,0 @@\n-            writer.println(ident(2) + \"startRndMask = Math.max(startRndMask, rndMask);\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/BenchmarkGenerator.java","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-                    result.add(\"        TimeUnit.MILLISECONDS.sleep(\" + so.localIdentifier + \"_backoff);\");\n+                    result.add(\"        Thread.sleep(\" + so.localIdentifier + \"_backoff);\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/StateObjectHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,7 @@\n-    public long getDuration() {\n-        return getDuration(TimeUnit.MILLISECONDS);\n+    public int getDurationMs() {\n+        long ms = getDuration(TimeUnit.MILLISECONDS);\n+        int ims = (int) ms;\n+        if (ms != ims) {\n+            throw new IllegalStateException(\"Integer truncation problem\");\n+        }\n+        return ims;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/InfraControl.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}