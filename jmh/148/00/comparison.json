{"files":[{"patch":"@@ -79,1 +79,2 @@\n-                            <forkCount>1C<\/forkCount>\n+                            <!-- Integration tests run with sleeps as payloads, we can execute them with larger parallelism -->\n+                            <forkCount>1.5C<\/forkCount>\n","filename":"jmh-core-it\/pom.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 50;\n+    private static final int SLEEP_TIME_MS = 10;\n@@ -93,1 +93,1 @@\n-            .measurementIterations(5)\n+            .measurementIterations(3)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/BatchSizeSanityTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    private static final int SLEEP_TIME_MS = 50;\n+    private static final int SLEEP_TIME_MS = 10;\n@@ -93,1 +93,1 @@\n-            .measurementIterations(5)\n+            .measurementIterations(3)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/batchsize\/OpsPerInvSanityTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                    .measurementTime(TimeValue.seconds(5))\n+                    .measurementTime(TimeValue.seconds(3))\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/ccontrol\/CompilerControlDontInlineActualTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                    .measurementTime(TimeValue.seconds(5))\n+                    .measurementTime(TimeValue.seconds(3))\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/ccontrol\/CompilerControlExcludeActualTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                    .measurementTime(TimeValue.seconds(5))\n+                    .measurementTime(TimeValue.seconds(3))\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/ccontrol\/CompilerControlInlineActualTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+@Fork(1)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/control\/ControlStartStopTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+@Fork(1)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/control\/ControlStopTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-                    .measurementIterations(mode == Mode.SingleShotTime ? 500_000 : 1_000)\n-                    .measurementTime(TimeValue.milliseconds(5))\n+                    .measurementIterations(mode == Mode.SingleShotTime ? 100_000 : 1_000)\n+                    .measurementTime(TimeValue.milliseconds(1))\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/footprint\/ForkedFootprintTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-@Warmup(iterations = 5)\n+@Warmup(iterations = 5, time = 100, timeUnit = TimeUnit.MILLISECONDS)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/AbstractHotspotProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    @Measurement(iterations = 2, time = 2, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)\n@@ -69,1 +69,1 @@\n-    @Measurement(iterations = 1, time = 2, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 1, time = 1, timeUnit = TimeUnit.SECONDS)\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/GCProfilerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}