{"files":[{"patch":"@@ -84,3 +84,2 @@\n-\n-    private long recordStartMs = 0;\n-    private long forkStartTimeMs = 0;\n+    private long recordStartMs;\n+    private long forkStartTimeMs;\n@@ -109,0 +108,1 @@\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/XCTraceAsmProfiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.util.Collections;\n-import java.util.List;\n@@ -62,0 +60,1 @@\n+    static final String FMT = \"fmt\";\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/XCTraceTableHandler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+    private static final long UNKNOWN_ADDRESS = -1L;\n+\n@@ -70,1 +72,1 @@\n-    private XCTraceSample currentSample = null;\n+    private XCTraceSample currentSample;\n@@ -76,1 +78,1 @@\n-     * @param onSample A callback that will be invoked on a sample once it parsed.\n+     * @param onSample  A callback that will be invoked on a sample once it parsed.\n@@ -93,1 +95,3 @@\n-        if (!val.startsWith(\"0x\")) throw new IllegalStateException(\"Unexpected address format: \" + val);\n+        if (!val.startsWith(\"0x\")) {\n+            throw new IllegalStateException(\"Unexpected address format: \" + val);\n+        }\n@@ -110,1 +114,1 @@\n-        TraceElement old = entriesCache.put(e.id, e);\n+        TraceElement old = entriesCache.put(e.getId(), e);\n@@ -112,1 +116,1 @@\n-            throw new IllegalStateException(\"Duplicate entry for key \" + e.id + \". New value: \"\n+            throw new IllegalStateException(\"Duplicate entry for key \" + e.getId() + \". New value: \"\n@@ -152,1 +156,1 @@\n-            value.value = Long.parseLong(getCharacters());\n+            value.setValue(Long.parseLong(getCharacters()));\n@@ -158,1 +162,1 @@\n-        String fmt = attributes.getValue(\"fmt\");\n+        String fmt = attributes.getValue(XCTraceTableHandler.FMT);\n@@ -164,1 +168,2 @@\n-        Frame frame = new Frame(-1 \/* fake frame *\/, nameOrAddr, -1 \/* need to parse nested text-addresses *\/);\n+        Frame frame = new Frame(-1 \/* fake frame *\/, nameOrAddr,\n+                UNKNOWN_ADDRESS \/* need to parse nested text-addresses *\/);\n@@ -169,1 +174,1 @@\n-            frame.binary = \"[unknown]\";\n+            frame.setBinary(\"[unknown]\");\n@@ -199,1 +204,1 @@\n-                \/\/ Starting from version ~14.3 backtraces contains all required details and saved as a sequnces\n+                \/\/ Starting from version ~14.3 backtraces contains all required details and saved as a sequence\n@@ -201,1 +206,1 @@\n-                \/\/ For older versions, there are no frames. Instead, backtraces have \"fmt\" attribute which containes\n+                \/\/ For older versions, there are no frames. Instead, backtraces have \"fmt\" attribute which contains\n@@ -206,1 +211,1 @@\n-                    holder.value = tryParseLegacyBacktrace(attributes);\n+                    holder.setValue(tryParseLegacyBacktrace(attributes));\n@@ -235,1 +240,1 @@\n-                currentSample.setTime(value.value);\n+                currentSample.setTime(value.getValue());\n@@ -243,1 +248,1 @@\n-                currentSample.setWeight(value.value);\n+                currentSample.setWeight(value.getValue());\n@@ -246,2 +251,2 @@\n-                Frame topFrame = this.<ValueHolder<Frame>>pop().value;\n-                currentSample.setTopFrame(topFrame.address, topFrame.name, topFrame.binary);\n+                Frame topFrame = this.<ValueHolder<Frame>>pop().getValue();\n+                currentSample.setTopFrame(topFrame.getAddress(), topFrame.getName(), topFrame.getBinary());\n@@ -251,1 +256,1 @@\n-                this.<Frame>peek().binary = bin.value;\n+                this.<Frame>peek().setBinary(bin.getValue());\n@@ -257,2 +262,2 @@\n-                if (backtrace.value == null) {\n-                    backtrace.value = frame;\n+                if (backtrace.getValue() == null) {\n+                    backtrace.setValue(frame);\n@@ -265,2 +270,2 @@\n-                    addresses.value = Arrays.stream(getCharacters().split(\" \"))\n-                            .mapToLong(Long::parseUnsignedLong).findFirst().orElse(-1);\n+                    addresses.setValue(Arrays.stream(getCharacters().split(\" \"))\n+                            .mapToLong(Long::parseUnsignedLong).findFirst().orElse(UNKNOWN_ADDRESS));\n@@ -269,4 +274,4 @@\n-                \/\/ For legacy backtraces, the address is initially -1. It is then updated by the top-most address\n-                \/\/ extracted from text-addresses elements.\n-                if (bt.value.address == -1 && addresses.value != -1) {\n-                    bt.value.address = addresses.value;\n+                \/\/ For legacy backtraces, the address is initially UNKNOWN_ADDRESS.\n+                \/\/ It is then updated by the top-most address extracted from text-addresses elements.\n+                if (bt.getValue().getAddress() == UNKNOWN_ADDRESS && addresses.getValue() != UNKNOWN_ADDRESS) {\n+                    bt.getValue().setAddress(addresses.getValue());\n@@ -288,1 +293,1 @@\n-        public final long id;\n+        private final long id;\n@@ -293,0 +298,4 @@\n+\n+        public long getId() {\n+            return id;\n+        }\n@@ -296,1 +305,1 @@\n-        public T value;\n+        private T value;\n@@ -306,0 +315,8 @@\n+\n+        public T getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(T value) {\n+            this.value = value;\n+        }\n@@ -309,1 +326,1 @@\n-        public long value = 0;\n+        private long value;\n@@ -314,0 +331,8 @@\n+\n+        public long getValue() {\n+            return value;\n+        }\n+\n+        public void setValue(long value) {\n+            this.value = value;\n+        }\n@@ -317,1 +342,1 @@\n-        public final String name;\n+        private final String name;\n@@ -319,1 +344,1 @@\n-        public long address;\n+        private long address;\n@@ -321,1 +346,1 @@\n-        public String binary = null;\n+        private String binary;\n@@ -328,0 +353,20 @@\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public long getAddress() {\n+            return address;\n+        }\n+\n+        public void setAddress(long address) {\n+            this.address = address;\n+        }\n+\n+        public String getBinary() {\n+            return binary;\n+        }\n+\n+        public void setBinary(String binary) {\n+            this.binary = binary;\n+        }\n@@ -333,5 +378,5 @@\n-        private long timeFromStartNs = 0;\n-        private long weight = 0;\n-        private String symbol = null;\n-        private long address = 0;\n-        private String binary = null;\n+        private long timeFromStartNs;\n+        private long weight;\n+        private String symbol;\n+        private long address;\n+        private String binary;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/XCTraceTableProfileHandler.java","additions":81,"deletions":36,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Arrays;\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/profile\/XCTraceTableOfContentsHandlerTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}