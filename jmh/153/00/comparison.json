{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.ref.WeakReference;\n@@ -112,5 +111,10 @@\n-     * to evade that effect. Some caution needs to be exercised not to retain the\n-     * captured objects forever: this is normally achieved by calling evaporate()\n-     * regularly, but we also additionally protect with retaining the object on\n-     * weak reference (contrary to phantom-ref, publishing object still has to\n-     * happen, because reference users might need to discover the object).\n+     * to evade that effect.\n+     *\n+     * Some caution needs to be exercised not to retain the captured objects forever.\n+     * We achieve this by providing the box and two aliases to that box. Storing through\n+     * one alias and immediately clearing through another alias allows to both avoid\n+     * dead-code elimination, and never retain the object, as long as alias analysis\n+     * cannot prove we are dealing with the same box. This is achieved by reading aliases\n+     * from volatile fields, which forces most compilers to assume the value is not stable,\n+     * and using the non-inlined clearBox() method, which forces compilers to do aggressive\n+     * inter-procedural optimizations to figure out aliasing.\n@@ -190,1 +194,3 @@\n-        obj1 = null;\n+        \/\/ The boxes should actually be always empty. Clear them out just in case.\n+        box1.o = null;\n+        box2.o = null;\n@@ -401,2 +407,3 @@\n-            \/\/ SHOULD ALMOST NEVER HAPPEN IN MEASUREMENT\n-            this.obj1 = new WeakReference<>(obj);\n+            \/\/ SHOULD ALMOST NEVER HAPPEN IN MEASUREMENT.\n+            this.box1.o = obj;\n+            clearBox();\n@@ -407,0 +414,4 @@\n+    private void clearBox() {\n+        this.box2.o = null;\n+    }\n+\n@@ -477,1 +488,2 @@\n-    public volatile Object obj1;\n+    public volatile Box box1;\n+    public volatile Box box2;\n@@ -486,1 +498,2 @@\n-        obj1 = new Object();\n+        box1 = new Box();\n+        box2 = box1;\n@@ -522,0 +535,4 @@\n+\n+    protected static class Box {\n+        public Object o;\n+    }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/infra\/Blackhole.java","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+                hints.add(\"dontinline,org\/openjdk\/jmh\/infra\/Blackhole.clearBox\");\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/CompilerHints.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}