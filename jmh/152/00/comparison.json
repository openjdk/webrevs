{"files":[{"patch":"@@ -722,0 +722,1 @@\n+            reader.setClientPid(Utils.getPid(p));\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/Runner.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-            pushFrame(new HandshakeInitFrame(Utils.getPid()));\n+            pushFrame(new HandshakeInitFrame());\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/link\/BinaryLinkClient.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,0 +203,4 @@\n+    public void setClientPid(long pid) {\n+        clientPid = pid;\n+    }\n+\n@@ -354,1 +358,0 @@\n-            clientPid = obj.getPid();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/link\/BinaryLinkServer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,10 +31,0 @@\n-\n-    private final long pid;\n-\n-    public HandshakeInitFrame(long pid) {\n-        this.pid = pid;\n-    }\n-\n-    public long getPid() {\n-        return pid;\n-    }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/link\/HandshakeInitFrame.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.management.RuntimeMXBean;\n@@ -34,0 +35,1 @@\n+import java.security.AccessControlException;\n@@ -391,1 +393,16 @@\n-        final String DELIM = \"@\";\n+        \/\/ Step 1. Try public ProcessHandle.current().pid(), available since JDK 9.\n+        \/\/ We need to use Reflection here to work well with JDK 8.\n+        try {\n+            Class<?> clProcHandle = Class.forName(\"java.lang.ProcessHandle\");\n+            Method mCurrent = clProcHandle.getMethod(\"current\");\n+            Method mPid = clProcHandle.getMethod(\"pid\");\n+            Object objProcHandle = mCurrent.invoke(null);\n+            Object pid = mPid.invoke(objProcHandle);\n+            if (pid instanceof Long) {\n+                return (long) pid;\n+            }\n+        } catch (ClassNotFoundException | NoSuchMethodException |\n+                 AccessControlException | InvocationTargetException |\n+                 IllegalAccessException e) {\n+            \/\/ Fallthrough.\n+        }\n@@ -393,1 +410,1 @@\n-        String name = ManagementFactory.getRuntimeMXBean().getName();\n+        RuntimeMXBean bean = ManagementFactory.getRuntimeMXBean();\n@@ -395,2 +412,17 @@\n-        if (name != null) {\n-            int idx = name.indexOf(DELIM);\n+        \/\/ Step 2. This is probably JDK 8. Try to call an internal method without\n+        \/\/ going to fallback.\n+        try {\n+            Field fJvm = bean.getClass().getDeclaredField(\"jvm\");\n+            fJvm.setAccessible(true);\n+            Object objMgmt = fJvm.get(bean);\n+            Method mPid = objMgmt.getClass().getDeclaredMethod(\"getProcessId\");\n+            mPid.setAccessible(true);\n+            Object pid = mPid.invoke(objMgmt);\n+            if (pid instanceof Integer) {\n+                return (int) pid;\n+            }\n+        } catch (NoSuchMethodException | AccessControlException |\n+                 InvocationTargetException | IllegalAccessException |\n+                 NoSuchFieldException e) {\n+            \/\/ Fallthrough.\n+        }\n@@ -398,6 +430,14 @@\n-            if (idx != -1) {\n-                String str = name.substring(0, name.indexOf(DELIM));\n-                try {\n-                    return Long.parseLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    throw new IllegalStateException(\"Process PID is not a number: \" + str);\n+        \/\/ Step 3. Fallback to public API. This potentially resolves hostnames,\n+        \/\/ and thus can be slower than first two steps.\n+        {\n+            final String DELIM = \"@\";\n+            String name = bean.getName();\n+            if (name != null) {\n+                int idx = name.indexOf(DELIM);\n+                if (idx != -1) {\n+                    String str = name.substring(0, name.indexOf(DELIM));\n+                    try {\n+                        return Long.parseLong(str);\n+                    } catch (NumberFormatException nfe) {\n+                        throw new IllegalStateException(\"Process PID is not a number: \" + str);\n+                    }\n@@ -406,0 +446,1 @@\n+            throw new IllegalStateException(\"Unsupported PID format: \" + name);\n@@ -407,1 +448,0 @@\n-        throw new IllegalStateException(\"Unsupported PID format: \" + name);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":51,"deletions":11,"binary":false,"changes":62,"status":"modified"}]}