{"files":[{"patch":"@@ -151,0 +151,2 @@\n+            double joulesCpu = Double.NaN;\n+            double joulesRam = Double.NaN;\n@@ -180,0 +182,15 @@\n+\n+                if (line.contains(\"power\/energy-cores\/\")) {\n+                    try {\n+                        joulesCpu = NumberFormat.getInstance().parse(line.trim().split(\" \")[0]).doubleValue();\n+                    } catch (ParseException e) {\n+                        \/\/ do nothing, processing code will handle\n+                    }\n+                }\n+                if (line.contains(\"power\/energy-ram\/\")) {\n+                    try {\n+                        joulesRam = NumberFormat.getInstance().parse(line.trim().split(\" \")[0]).doubleValue();\n+                    } catch (ParseException e) {\n+                        \/\/ do nothing, processing code will handle\n+                    }\n+                }\n@@ -194,1 +211,3 @@\n-                    insns\n+                    insns,\n+                    joulesCpu,\n+                    joulesRam\n@@ -207,0 +226,2 @@\n+        private final double joulesCpu;\n+        private final double joulesRam;\n@@ -208,1 +229,1 @@\n-        public PerfResult(String output, long cycles, long instructions) {\n+        public PerfResult(String output, long cycles, long instructions, double joulesCpu, double joulesRam) {\n@@ -213,0 +234,2 @@\n+            this.joulesCpu = joulesCpu;\n+            this.joulesRam = joulesRam;\n@@ -227,1 +250,2 @@\n-            List<Result> res = new ArrayList<>();\n+            List<Result<?>> res = new ArrayList<>(4);\n+\n@@ -231,0 +255,5 @@\n+\n+            }\n+\n+            if(!Double.isNaN(joulesCpu)) {\n+                res.add(new ScalarDerivativeResult(\"power\/energy-cores\/\", joulesCpu, \"Joules\", AggregationPolicy.AVG));\n@@ -232,0 +261,4 @@\n+            if(!Double.isNaN(joulesRam)) {\n+                res.add(new ScalarDerivativeResult(\"power\/energy-ram\/\", joulesRam, \"Joules\", AggregationPolicy.AVG));\n+            }\n+\n@@ -238,1 +271,3 @@\n-                return String.format(\"%s IPC, %s CPI\",\n+                StringBuilder str = new StringBuilder();\n+\n+                str.append(String.format(\"%s IPC, %s CPI\",\n@@ -240,1 +275,11 @@\n-                        ScoreFormatter.format(1.0 * cycles \/ instructions));\n+                        ScoreFormatter.format(1.0 * cycles \/ instructions)));\n+\n+\n+                if(!Double.isNaN(joulesCpu)) {\n+                    str.append(String.format(\", %s CPU Joules\", ScoreFormatter.format(joulesCpu)));\n+                }\n+                if(!Double.isNaN(joulesRam)) {\n+                    str.append(String.format(\", %s RAM Joules\", ScoreFormatter.format(joulesRam)));\n+                }\n+\n+                return str.toString();\n@@ -258,1 +303,3 @@\n-            String output = \"\";\n+            double joulesCpu = 0.0;\n+            double joulesRam = 0.0;\n+            StringBuilder output = new StringBuilder();\n@@ -262,1 +309,4 @@\n-                output += r.output;\n+                joulesCpu += r.joulesCpu;\n+                joulesRam += r.joulesRam;\n+\n+                output.append(r.output);\n@@ -264,1 +314,1 @@\n-            return new PerfResult(output, cycles, instructions);\n+            return new PerfResult(output.toString(), cycles, instructions, joulesCpu, joulesRam);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/LinuxPerfProfiler.java","additions":58,"deletions":8,"binary":false,"changes":66,"status":"modified"}]}