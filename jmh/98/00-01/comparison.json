{"files":[{"patch":"@@ -95,1 +95,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -143,1 +143,1 @@\n-            return Optional.ofNullable(labels);\n+            return Optional.eitherOf(labels);\n@@ -145,1 +145,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -153,1 +153,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -160,1 +160,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -169,1 +169,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -178,1 +178,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -187,1 +187,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -196,1 +196,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -205,1 +205,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -214,1 +214,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -223,1 +223,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -232,1 +232,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -241,1 +241,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -251,1 +251,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -261,1 +261,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -271,1 +271,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -278,1 +278,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -307,1 +307,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/MethodGroup.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        if (options.getOutput().isPresent()) {\n+        if (options.getOutput().hasValue()) {\n@@ -140,1 +140,1 @@\n-            if (params.isPresent()) {\n+            if (params.hasValue()) {\n@@ -240,1 +240,1 @@\n-        if (options.getResult().isPresent() || options.getResultFormat().isPresent()) {\n+        if (options.getResult().hasValue() || options.getResultFormat().hasValue()) {\n@@ -297,1 +297,1 @@\n-                if (br.getParams().isPresent()) {\n+                if (br.getParams().hasValue()) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/Runner.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-                timeUnit = Optional.empty();\n+                timeUnit = Optional.none();\n@@ -299,1 +299,1 @@\n-                warmupMode = Optional.empty();\n+                warmupMode = Optional.none();\n@@ -309,1 +309,1 @@\n-                resultFormat = Optional.empty();\n+                resultFormat = Optional.none();\n@@ -357,1 +357,1 @@\n-                verbose = Optional.empty();\n+                verbose = Optional.none();\n@@ -434,1 +434,1 @@\n-            return Optional.ofNullable(option.value(set));\n+            return Optional.eitherOf(option.value(set));\n@@ -436,1 +436,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -453,1 +453,1 @@\n-        return Optional.empty();\n+        return Optional.none();\n@@ -540,1 +540,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -609,1 +609,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/CommandLineOptions.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.util.function.Function;\n@@ -74,7 +73,0 @@\n-    private <T> Optional<T> getOrOther(Optional<T> thisOption, Function<Options, Optional<T>> getter) {\n-        if (otherOptions != null && !thisOption.isPresent()) {\n-            return getter.apply(otherOptions);\n-        }\n-        return thisOption;\n-    }\n-\n@@ -127,1 +119,1 @@\n-    private Optional<String> output = Optional.empty();\n+    private Optional<String> output = Optional.none();\n@@ -137,1 +129,5 @@\n-        return getOrOther(output, Options::getOutput);\n+        if (otherOptions != null) {\n+            return output.orAnother(otherOptions.getOutput());\n+        } else {\n+            return output;\n+        }\n@@ -142,1 +138,1 @@\n-    private Optional<ResultFormatType> rfType = Optional.empty();\n+    private Optional<ResultFormatType> rfType = Optional.none();\n@@ -152,1 +148,5 @@\n-        return getOrOther(rfType, Options::getResultFormat);\n+        if (otherOptions != null) {\n+            return rfType.orAnother(otherOptions.getResultFormat());\n+        } else {\n+            return rfType;\n+        }\n@@ -157,1 +157,1 @@\n-    private Optional<String> result = Optional.empty();\n+    private Optional<String> result = Optional.none();\n@@ -167,1 +167,5 @@\n-        return getOrOther(result, Options::getResult);\n+        if (otherOptions != null) {\n+            return result.orAnother(otherOptions.getResult());\n+        } else {\n+            return result;\n+        }\n@@ -172,1 +176,1 @@\n-    private Optional<Boolean> shouldDoGC = Optional.empty();\n+    private Optional<Boolean> shouldDoGC = Optional.none();\n@@ -182,1 +186,5 @@\n-        return getOrOther(shouldDoGC, Options::shouldDoGC);\n+        if (otherOptions != null) {\n+            return shouldDoGC.orAnother(otherOptions.shouldDoGC());\n+        } else {\n+            return shouldDoGC;\n+        }\n@@ -225,1 +233,1 @@\n-    private Optional<VerboseMode> verbosity = Optional.empty();\n+    private Optional<VerboseMode> verbosity = Optional.none();\n@@ -235,1 +243,5 @@\n-        return getOrOther(verbosity, Options::verbosity);\n+        if (otherOptions != null) {\n+            return verbosity.orAnother(otherOptions.verbosity());\n+        } else {\n+            return verbosity;\n+        }\n@@ -240,1 +252,1 @@\n-    private Optional<Boolean> shouldFailOnError = Optional.empty();\n+    private Optional<Boolean> shouldFailOnError = Optional.none();\n@@ -250,1 +262,5 @@\n-        return getOrOther(shouldFailOnError, Options::shouldFailOnError);\n+        if (otherOptions != null) {\n+            return shouldFailOnError.orAnother(otherOptions.shouldFailOnError());\n+        } else {\n+            return shouldFailOnError;\n+        }\n@@ -255,1 +271,1 @@\n-    private Optional<Integer> threads = Optional.empty();\n+    private Optional<Integer> threads = Optional.none();\n@@ -268,1 +284,5 @@\n-        return getOrOther(threads, Options::getThreads);\n+        if (otherOptions != null) {\n+            return threads.orAnother(otherOptions.getThreads());\n+        } else {\n+            return threads;\n+        }\n@@ -273,1 +293,1 @@\n-    private Optional<int[]> threadGroups = Optional.empty();\n+    private Optional<int[]> threadGroups = Optional.none();\n@@ -289,1 +309,5 @@\n-        return getOrOther(threadGroups, Options::getThreadGroups);\n+        if (otherOptions != null) {\n+            return threadGroups.orAnother(otherOptions.getThreadGroups());\n+        } else {\n+            return threadGroups;\n+        }\n@@ -294,1 +318,1 @@\n-    private Optional<Boolean> syncIterations = Optional.empty();\n+    private Optional<Boolean> syncIterations = Optional.none();\n@@ -304,1 +328,5 @@\n-        return getOrOther(syncIterations, Options::shouldSyncIterations);\n+        if (otherOptions != null) {\n+            return syncIterations.orAnother(otherOptions.shouldSyncIterations());\n+        } else {\n+            return syncIterations;\n+        }\n@@ -309,1 +337,1 @@\n-    private Optional<Integer> warmupIterations = Optional.empty();\n+    private Optional<Integer> warmupIterations = Optional.none();\n@@ -320,1 +348,5 @@\n-        return getOrOther(warmupIterations, Options::getWarmupIterations);\n+        if (otherOptions != null) {\n+            return warmupIterations.orAnother(otherOptions.getWarmupIterations());\n+        } else {\n+            return warmupIterations;\n+        }\n@@ -325,1 +357,1 @@\n-    private Optional<Integer> warmupBatchSize = Optional.empty();\n+    private Optional<Integer> warmupBatchSize = Optional.none();\n@@ -336,1 +368,5 @@\n-        return getOrOther(warmupBatchSize, Options::getWarmupBatchSize);\n+        if (otherOptions != null) {\n+            return warmupBatchSize.orAnother(otherOptions.getWarmupBatchSize());\n+        } else {\n+            return warmupBatchSize;\n+        }\n@@ -341,1 +377,1 @@\n-    private Optional<TimeValue> warmupTime = Optional.empty();\n+    private Optional<TimeValue> warmupTime = Optional.none();\n@@ -351,1 +387,5 @@\n-        return getOrOther(warmupTime, Options::getWarmupTime);\n+        if (otherOptions != null) {\n+            return warmupTime.orAnother(otherOptions.getWarmupTime());\n+        } else {\n+            return warmupTime;\n+        }\n@@ -356,1 +396,1 @@\n-    private Optional<WarmupMode> warmupMode = Optional.empty();\n+    private Optional<WarmupMode> warmupMode = Optional.none();\n@@ -366,1 +406,5 @@\n-        return getOrOther(warmupMode, Options::getWarmupMode);\n+        if (otherOptions != null) {\n+            return warmupMode.orAnother(otherOptions.getWarmupMode());\n+        } else {\n+            return warmupMode;\n+        }\n@@ -391,1 +435,1 @@\n-    private Optional<Integer> iterations = Optional.empty();\n+    private Optional<Integer> iterations = Optional.none();\n@@ -402,1 +446,5 @@\n-        return getOrOther(iterations, Options::getMeasurementIterations);\n+        if (otherOptions != null) {\n+            return iterations.orAnother(otherOptions.getMeasurementIterations());\n+        } else {\n+            return iterations;\n+        }\n@@ -407,1 +455,1 @@\n-    private Optional<TimeValue> measurementTime = Optional.empty();\n+    private Optional<TimeValue> measurementTime = Optional.none();\n@@ -417,1 +465,5 @@\n-        return getOrOther(measurementTime, Options::getMeasurementTime);\n+        if (otherOptions != null) {\n+            return measurementTime.orAnother(otherOptions.getMeasurementTime());\n+        } else {\n+            return measurementTime;\n+        }\n@@ -422,1 +474,1 @@\n-    private Optional<Integer> measurementBatchSize = Optional.empty();\n+    private Optional<Integer> measurementBatchSize = Optional.none();\n@@ -433,1 +485,5 @@\n-        return getOrOther(measurementBatchSize, Options::getMeasurementBatchSize);\n+        if (otherOptions != null) {\n+            return measurementBatchSize.orAnother(otherOptions.getMeasurementBatchSize());\n+        } else {\n+            return measurementBatchSize;\n+        }\n@@ -436,0 +492,1 @@\n+\n@@ -457,1 +514,1 @@\n-    private Optional<TimeUnit> timeUnit = Optional.empty();\n+    private Optional<TimeUnit> timeUnit = Optional.none();\n@@ -467,1 +524,5 @@\n-        return getOrOther(timeUnit, Options::getTimeUnit);\n+        if (otherOptions != null) {\n+            return timeUnit.orAnother(otherOptions.getTimeUnit());\n+        } else {\n+            return timeUnit;\n+        }\n@@ -472,1 +533,1 @@\n-    private Optional<Integer> opsPerInvocation = Optional.empty();\n+    private Optional<Integer> opsPerInvocation = Optional.none();\n@@ -483,1 +544,5 @@\n-        return getOrOther(opsPerInvocation, Options::getOperationsPerInvocation);\n+        if (otherOptions != null) {\n+            return opsPerInvocation.orAnother(otherOptions.getOperationsPerInvocation());\n+        } else {\n+            return opsPerInvocation;\n+        }\n@@ -488,1 +553,1 @@\n-    private Optional<Integer> forks = Optional.empty();\n+    private Optional<Integer> forks = Optional.none();\n@@ -499,1 +564,5 @@\n-        return getOrOther(forks, Options::getForkCount);\n+        if (otherOptions != null) {\n+            return forks.orAnother(otherOptions.getForkCount());\n+        } else {\n+            return forks;\n+        }\n@@ -504,1 +573,1 @@\n-    private Optional<Integer> warmupForks = Optional.empty();\n+    private Optional<Integer> warmupForks = Optional.none();\n@@ -515,1 +584,5 @@\n-        return getOrOther(warmupForks, Options::getWarmupForkCount);\n+        if (otherOptions != null) {\n+            return warmupForks.orAnother(otherOptions.getWarmupForkCount());\n+        } else {\n+            return warmupForks;\n+        }\n@@ -520,1 +593,1 @@\n-    private Optional<String> jvmBinary = Optional.empty();\n+    private Optional<String> jvmBinary = Optional.none();\n@@ -530,1 +603,5 @@\n-        return getOrOther(jvmBinary, Options::getJvm);\n+        if (otherOptions != null) {\n+            return jvmBinary.orAnother(otherOptions.getJvm());\n+        } else {\n+            return jvmBinary;\n+        }\n@@ -535,1 +612,1 @@\n-    private Optional<Collection<String>> jvmArgs = Optional.empty();\n+    private Optional<Collection<String>> jvmArgs = Optional.none();\n@@ -545,1 +622,5 @@\n-        return getOrOther(jvmArgs, Options::getJvmArgs);\n+        if (otherOptions != null) {\n+            return jvmArgs.orAnother(otherOptions.getJvmArgs());\n+        } else {\n+            return jvmArgs;\n+        }\n@@ -550,1 +631,1 @@\n-    private Optional<Collection<String>> jvmArgsAppend = Optional.empty();\n+    private Optional<Collection<String>> jvmArgsAppend = Optional.none();\n@@ -560,1 +641,5 @@\n-        return getOrOther(jvmArgsAppend, Options::getJvmArgsAppend);\n+        if (otherOptions != null) {\n+            return jvmArgsAppend.orAnother(otherOptions.getJvmArgsAppend());\n+        } else {\n+            return jvmArgsAppend;\n+        }\n@@ -565,1 +650,1 @@\n-    private Optional<Collection<String>> jvmArgsPrepend = Optional.empty();\n+    private Optional<Collection<String>> jvmArgsPrepend = Optional.none();\n@@ -575,1 +660,5 @@\n-        return getOrOther(jvmArgsPrepend, Options::getJvmArgsPrepend);\n+        if (otherOptions != null) {\n+            return jvmArgsPrepend.orAnother(otherOptions.getJvmArgsPrepend());\n+        } else {\n+            return jvmArgsPrepend;\n+        }\n@@ -597,1 +686,1 @@\n-                return Optional.empty();\n+                return Optional.none();\n@@ -612,1 +701,1 @@\n-    private Optional<TimeValue> timeout = Optional.empty();\n+    private Optional<TimeValue> timeout = Optional.none();\n@@ -622,1 +711,5 @@\n-        return getOrOther(timeout, Options::getTimeout);\n+        if (otherOptions != null) {\n+            return timeout.orAnother(otherOptions.getTimeout());\n+        } else {\n+            return timeout;\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/OptionsBuilder.java","additions":152,"deletions":59,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -59,0 +59,4 @@\n+    public Optional<T> orAnother(Optional<T> alternative) {\n+        return (val == null) ? alternative : this;\n+    }\n+\n@@ -64,1 +68,1 @@\n-    public static <T> Optional<T> empty() {\n+    public static <T> Optional<T> none() {\n@@ -78,1 +82,1 @@\n-    public static <T> Optional<T> ofNullable(T val) {\n+    public static <T> Optional<T> eitherOf(T val) {\n@@ -80,1 +84,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -86,1 +90,1 @@\n-    public boolean isPresent() {\n+    public boolean hasValue() {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Optional.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -110,1 +110,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -121,1 +121,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -132,1 +132,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -143,1 +143,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n@@ -173,1 +173,1 @@\n-            return Optional.empty();\n+            return Optional.none();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n@@ -83,1 +83,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n@@ -100,1 +100,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n@@ -113,1 +113,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n@@ -122,1 +122,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n@@ -131,1 +131,1 @@\n-        if (!opt.isPresent()) {\n+        if (!opt.hasValue()) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.jmh.runner.options.TimeValue;\n@@ -36,0 +37,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -54,1 +56,1 @@\n-                Optional.empty(),\n+                Optional.<Integer>none(),\n@@ -56,17 +58,17 @@\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty()\n+                Optional.<Collection<String>>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<String>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Map<String, String[]>>none(),\n+                Optional.<TimeUnit>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkList.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jmh.runner.options.TimeValue;\n@@ -37,0 +38,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -48,1 +50,1 @@\n-                Optional.empty(),\n+                Optional.<Integer>none(),\n@@ -50,17 +52,17 @@\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty()\n+                Optional.<Collection<String>>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<String>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Map<String, String[]>>none(),\n+                Optional.<TimeUnit>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListEncoding.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jmh.runner.options.TimeValue;\n@@ -34,0 +35,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -45,1 +47,1 @@\n-                Optional.empty(),\n+                Optional.<Integer>none(),\n@@ -47,17 +49,17 @@\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty(),\n-                Optional.empty()\n+                Optional.<Collection<String>>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<Integer>none(),\n+                Optional.<String>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Collection<String>>none(),\n+                Optional.<Map<String, String[]>>none(),\n+                Optional.<TimeUnit>none(),\n+                Optional.<Integer>none(),\n+                Optional.<TimeValue>none()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListSorting.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        Assert.assertFalse(builder.getForkCount().isPresent());\n+        Assert.assertFalse(builder.getForkCount().hasValue());\n@@ -152,1 +152,1 @@\n-        Assert.assertFalse(builder.shouldDoGC().isPresent());\n+        Assert.assertFalse(builder.shouldDoGC().hasValue());\n@@ -173,1 +173,1 @@\n-        Assert.assertFalse(builder.getJvm().isPresent());\n+        Assert.assertFalse(builder.getJvm().hasValue());\n@@ -194,1 +194,1 @@\n-        Assert.assertFalse(builder.getJvmArgs().isPresent());\n+        Assert.assertFalse(builder.getJvmArgs().hasValue());\n@@ -215,1 +215,1 @@\n-        Assert.assertFalse(builder.getJvmArgsAppend().isPresent());\n+        Assert.assertFalse(builder.getJvmArgsAppend().hasValue());\n@@ -236,1 +236,1 @@\n-        Assert.assertFalse(builder.getJvmArgsPrepend().isPresent());\n+        Assert.assertFalse(builder.getJvmArgsPrepend().hasValue());\n@@ -257,1 +257,1 @@\n-        Assert.assertFalse(builder.getOutput().isPresent());\n+        Assert.assertFalse(builder.getOutput().hasValue());\n@@ -278,1 +278,1 @@\n-        Assert.assertFalse(builder.getResult().isPresent());\n+        Assert.assertFalse(builder.getResult().hasValue());\n@@ -299,1 +299,1 @@\n-        Assert.assertFalse(builder.getResultFormat().isPresent());\n+        Assert.assertFalse(builder.getResultFormat().hasValue());\n@@ -320,1 +320,1 @@\n-        Assert.assertFalse(builder.getMeasurementTime().isPresent());\n+        Assert.assertFalse(builder.getMeasurementTime().hasValue());\n@@ -341,1 +341,1 @@\n-        Assert.assertFalse(builder.getMeasurementIterations().isPresent());\n+        Assert.assertFalse(builder.getMeasurementIterations().hasValue());\n@@ -362,1 +362,1 @@\n-        Assert.assertFalse(builder.shouldFailOnError().isPresent());\n+        Assert.assertFalse(builder.shouldFailOnError().hasValue());\n@@ -383,1 +383,1 @@\n-        Assert.assertFalse(builder.shouldSyncIterations().isPresent());\n+        Assert.assertFalse(builder.shouldSyncIterations().hasValue());\n@@ -404,1 +404,1 @@\n-        Assert.assertFalse(builder.getThreadGroups().isPresent());\n+        Assert.assertFalse(builder.getThreadGroups().hasValue());\n@@ -425,1 +425,1 @@\n-        Assert.assertFalse(builder.getThreads().isPresent());\n+        Assert.assertFalse(builder.getThreads().hasValue());\n@@ -446,1 +446,1 @@\n-        Assert.assertFalse(builder.getTimeUnit().isPresent());\n+        Assert.assertFalse(builder.getTimeUnit().hasValue());\n@@ -467,1 +467,1 @@\n-        Assert.assertFalse(builder.getOperationsPerInvocation().isPresent());\n+        Assert.assertFalse(builder.getOperationsPerInvocation().hasValue());\n@@ -488,1 +488,1 @@\n-        Assert.assertFalse(builder.verbosity().isPresent());\n+        Assert.assertFalse(builder.verbosity().hasValue());\n@@ -509,1 +509,1 @@\n-        Assert.assertFalse(builder.getWarmupForkCount().isPresent());\n+        Assert.assertFalse(builder.getWarmupForkCount().hasValue());\n@@ -530,1 +530,1 @@\n-        Assert.assertFalse(builder.getWarmupIterations().isPresent());\n+        Assert.assertFalse(builder.getWarmupIterations().hasValue());\n@@ -551,1 +551,1 @@\n-        Assert.assertFalse(builder.getWarmupTime().isPresent());\n+        Assert.assertFalse(builder.getWarmupTime().hasValue());\n@@ -593,1 +593,1 @@\n-        Assert.assertFalse(builder.getParameter(\"x\").isPresent());\n+        Assert.assertFalse(builder.getParameter(\"x\").hasValue());\n@@ -622,1 +622,1 @@\n-        Assert.assertFalse(builder.getTimeout().isPresent());\n+        Assert.assertFalse(builder.getTimeout().hasValue());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/options\/TestParentOptions.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import org.openjdk.jmh.util.lines.TestLineReader;\n+import org.openjdk.jmh.util.lines.TestLineWriter;\n@@ -33,0 +35,1 @@\n+import java.util.Collection;\n@@ -45,2 +48,2 @@\n-        writer.putOptionalString(Optional.ofNullable(\"full-optional\"));\n-        writer.putOptionalString(Optional.empty());\n+        writer.putOptionalString(Optional.eitherOf(\"full-optional\"));\n+        writer.putOptionalString(Optional.<String>none());\n@@ -48,2 +51,2 @@\n-        writer.putOptionalInt(Optional.ofNullable(42));\n-        writer.putOptionalInt(Optional.empty());\n+        writer.putOptionalInt(Optional.eitherOf(42));\n+        writer.putOptionalInt(Optional.<Integer>none());\n@@ -53,2 +56,2 @@\n-        writer.putOptionalTimeValue(Optional.ofNullable(TimeValue.milliseconds(14)));\n-        writer.putOptionalTimeValue(Optional.empty());\n+        writer.putOptionalTimeValue(Optional.eitherOf(TimeValue.milliseconds(14)));\n+        writer.putOptionalTimeValue(Optional.<TimeValue>none());\n@@ -56,2 +59,2 @@\n-        writer.putOptionalTimeUnit(Optional.ofNullable(TimeUnit.HOURS));\n-        writer.putOptionalTimeUnit(Optional.empty());\n+        writer.putOptionalTimeUnit(Optional.eitherOf(TimeUnit.HOURS));\n+        writer.putOptionalTimeUnit(Optional.<TimeUnit>none());\n@@ -59,2 +62,2 @@\n-        writer.putOptionalStringCollection(Optional.ofNullable(Arrays.asList(\"foo\", \"bar\", \"baz\")));\n-        writer.putOptionalStringCollection(Optional.empty());\n+        writer.putOptionalStringCollection(Optional.<Collection<String>>eitherOf(Arrays.asList(\"foo\", \"bar\", \"baz\")));\n+        writer.putOptionalStringCollection(Optional.<Collection<String>>none());\n@@ -67,2 +70,2 @@\n-        writer.putOptionalParamCollection(Optional.ofNullable(expectedMap));\n-        writer.putOptionalParamCollection(Optional.empty());\n+        writer.putOptionalParamCollection(Optional.<Map<String,String[]>>eitherOf(expectedMap));\n+        writer.putOptionalParamCollection(Optional.<Map<String,String[]>>none());\n@@ -78,1 +81,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalString().isPresent());\n+        Assert.assertEquals(false, reader.nextOptionalString().hasValue());\n@@ -81,1 +84,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalInt().isPresent());\n+        Assert.assertEquals(false, reader.nextOptionalInt().hasValue());\n@@ -86,1 +89,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalTimeValue().isPresent());\n+        Assert.assertEquals(false, reader.nextOptionalTimeValue().hasValue());\n@@ -89,1 +92,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalTimeUnit().isPresent());\n+        Assert.assertEquals(false, reader.nextOptionalTimeUnit().hasValue());\n@@ -92,1 +95,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalStringCollection().isPresent());\n+        Assert.assertEquals(false, reader.nextOptionalStringCollection().hasValue());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineTest.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"}]}