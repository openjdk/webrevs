{"files":[{"patch":"@@ -95,1 +95,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -143,1 +143,1 @@\n-            return Optional.eitherOf(labels);\n+            return Optional.ofNullable(labels);\n@@ -145,1 +145,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -153,1 +153,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -160,1 +160,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -169,1 +169,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -178,1 +178,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -187,1 +187,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -196,1 +196,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -205,1 +205,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -214,1 +214,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -223,1 +223,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -232,1 +232,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -241,1 +241,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -251,1 +251,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -261,1 +261,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -271,1 +271,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -278,1 +278,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -307,1 +307,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/generators\/core\/MethodGroup.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.nio.channels.FileChannel;\n@@ -101,1 +100,1 @@\n-        if (options.getOutput().hasValue()) {\n+        if (options.getOutput().isPresent()) {\n@@ -141,1 +140,1 @@\n-            if (params.hasValue()) {\n+            if (params.isPresent()) {\n@@ -241,1 +240,1 @@\n-        if (options.getResult().hasValue() || options.getResultFormat().hasValue()) {\n+        if (options.getResult().isPresent() || options.getResultFormat().isPresent()) {\n@@ -298,1 +297,1 @@\n-                if (br.getParams().hasValue()) {\n+                if (br.getParams().isPresent()) {\n@@ -478,8 +477,5 @@\n-        \/\/ may prevent us doing so. When JMH upgrades to Java 8, replaces this with proper Optional\n-        \/\/ and lazy Supplier.\n-        Optional<Collection<String>> jvmArgsMid = options.getJvmArgs().orAnother(benchmark.getJvmArgs());\n-        if (jvmArgsMid.hasValue()) {\n-            jvmArgs.addAll(jvmArgsMid.get());\n-        } else {\n-            jvmArgs.addAll(ManagementFactory.getRuntimeMXBean().getInputArguments());\n-        }\n+        \/\/ may prevent us doing so.\n+        jvmArgs.addAll(options.getJvmArgs().orElseGet(\n+                () -> benchmark.getJvmArgs().orElseGet(\n+                        () -> ManagementFactory.getRuntimeMXBean().getInputArguments())));\n+\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/Runner.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-                timeUnit = Optional.none();\n+                timeUnit = Optional.empty();\n@@ -299,1 +299,1 @@\n-                warmupMode = Optional.none();\n+                warmupMode = Optional.empty();\n@@ -309,1 +309,1 @@\n-                resultFormat = Optional.none();\n+                resultFormat = Optional.empty();\n@@ -357,1 +357,1 @@\n-                verbose = Optional.none();\n+                verbose = Optional.empty();\n@@ -434,1 +434,1 @@\n-            return Optional.eitherOf(option.value(set));\n+            return Optional.ofNullable(option.value(set));\n@@ -436,1 +436,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -453,1 +453,1 @@\n-        return Optional.none();\n+        return Optional.empty();\n@@ -540,1 +540,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -609,1 +609,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/CommandLineOptions.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.function.Function;\n@@ -73,0 +74,7 @@\n+    private <T> Optional<T> getOrOther(Optional<T> thisOption, Function<Options, Optional<T>> getter) {\n+        if (otherOptions != null && !thisOption.isPresent()) {\n+            return getter.apply(otherOptions);\n+        }\n+        return thisOption;\n+    }\n+\n@@ -119,1 +127,1 @@\n-    private Optional<String> output = Optional.none();\n+    private Optional<String> output = Optional.empty();\n@@ -129,5 +137,1 @@\n-        if (otherOptions != null) {\n-            return output.orAnother(otherOptions.getOutput());\n-        } else {\n-            return output;\n-        }\n+        return getOrOther(output, Options::getOutput);\n@@ -138,1 +142,1 @@\n-    private Optional<ResultFormatType> rfType = Optional.none();\n+    private Optional<ResultFormatType> rfType = Optional.empty();\n@@ -148,5 +152,1 @@\n-        if (otherOptions != null) {\n-            return rfType.orAnother(otherOptions.getResultFormat());\n-        } else {\n-            return rfType;\n-        }\n+        return getOrOther(rfType, Options::getResultFormat);\n@@ -157,1 +157,1 @@\n-    private Optional<String> result = Optional.none();\n+    private Optional<String> result = Optional.empty();\n@@ -167,5 +167,1 @@\n-        if (otherOptions != null) {\n-            return result.orAnother(otherOptions.getResult());\n-        } else {\n-            return result;\n-        }\n+        return getOrOther(result, Options::getResult);\n@@ -176,1 +172,1 @@\n-    private Optional<Boolean> shouldDoGC = Optional.none();\n+    private Optional<Boolean> shouldDoGC = Optional.empty();\n@@ -186,5 +182,1 @@\n-        if (otherOptions != null) {\n-            return shouldDoGC.orAnother(otherOptions.shouldDoGC());\n-        } else {\n-            return shouldDoGC;\n-        }\n+        return getOrOther(shouldDoGC, Options::shouldDoGC);\n@@ -233,1 +225,1 @@\n-    private Optional<VerboseMode> verbosity = Optional.none();\n+    private Optional<VerboseMode> verbosity = Optional.empty();\n@@ -243,5 +235,1 @@\n-        if (otherOptions != null) {\n-            return verbosity.orAnother(otherOptions.verbosity());\n-        } else {\n-            return verbosity;\n-        }\n+        return getOrOther(verbosity, Options::verbosity);\n@@ -252,1 +240,1 @@\n-    private Optional<Boolean> shouldFailOnError = Optional.none();\n+    private Optional<Boolean> shouldFailOnError = Optional.empty();\n@@ -262,5 +250,1 @@\n-        if (otherOptions != null) {\n-            return shouldFailOnError.orAnother(otherOptions.shouldFailOnError());\n-        } else {\n-            return shouldFailOnError;\n-        }\n+        return getOrOther(shouldFailOnError, Options::shouldFailOnError);\n@@ -271,1 +255,1 @@\n-    private Optional<Integer> threads = Optional.none();\n+    private Optional<Integer> threads = Optional.empty();\n@@ -284,5 +268,1 @@\n-        if (otherOptions != null) {\n-            return threads.orAnother(otherOptions.getThreads());\n-        } else {\n-            return threads;\n-        }\n+        return getOrOther(threads, Options::getThreads);\n@@ -293,1 +273,1 @@\n-    private Optional<int[]> threadGroups = Optional.none();\n+    private Optional<int[]> threadGroups = Optional.empty();\n@@ -309,5 +289,1 @@\n-        if (otherOptions != null) {\n-            return threadGroups.orAnother(otherOptions.getThreadGroups());\n-        } else {\n-            return threadGroups;\n-        }\n+        return getOrOther(threadGroups, Options::getThreadGroups);\n@@ -318,1 +294,1 @@\n-    private Optional<Boolean> syncIterations = Optional.none();\n+    private Optional<Boolean> syncIterations = Optional.empty();\n@@ -328,5 +304,1 @@\n-        if (otherOptions != null) {\n-            return syncIterations.orAnother(otherOptions.shouldSyncIterations());\n-        } else {\n-            return syncIterations;\n-        }\n+        return getOrOther(syncIterations, Options::shouldSyncIterations);\n@@ -337,1 +309,1 @@\n-    private Optional<Integer> warmupIterations = Optional.none();\n+    private Optional<Integer> warmupIterations = Optional.empty();\n@@ -348,5 +320,1 @@\n-        if (otherOptions != null) {\n-            return warmupIterations.orAnother(otherOptions.getWarmupIterations());\n-        } else {\n-            return warmupIterations;\n-        }\n+        return getOrOther(warmupIterations, Options::getWarmupIterations);\n@@ -357,1 +325,1 @@\n-    private Optional<Integer> warmupBatchSize = Optional.none();\n+    private Optional<Integer> warmupBatchSize = Optional.empty();\n@@ -368,5 +336,1 @@\n-        if (otherOptions != null) {\n-            return warmupBatchSize.orAnother(otherOptions.getWarmupBatchSize());\n-        } else {\n-            return warmupBatchSize;\n-        }\n+        return getOrOther(warmupBatchSize, Options::getWarmupBatchSize);\n@@ -377,1 +341,1 @@\n-    private Optional<TimeValue> warmupTime = Optional.none();\n+    private Optional<TimeValue> warmupTime = Optional.empty();\n@@ -387,5 +351,1 @@\n-        if (otherOptions != null) {\n-            return warmupTime.orAnother(otherOptions.getWarmupTime());\n-        } else {\n-            return warmupTime;\n-        }\n+        return getOrOther(warmupTime, Options::getWarmupTime);\n@@ -396,1 +356,1 @@\n-    private Optional<WarmupMode> warmupMode = Optional.none();\n+    private Optional<WarmupMode> warmupMode = Optional.empty();\n@@ -406,5 +366,1 @@\n-        if (otherOptions != null) {\n-            return warmupMode.orAnother(otherOptions.getWarmupMode());\n-        } else {\n-            return warmupMode;\n-        }\n+        return getOrOther(warmupMode, Options::getWarmupMode);\n@@ -435,1 +391,1 @@\n-    private Optional<Integer> iterations = Optional.none();\n+    private Optional<Integer> iterations = Optional.empty();\n@@ -446,5 +402,1 @@\n-        if (otherOptions != null) {\n-            return iterations.orAnother(otherOptions.getMeasurementIterations());\n-        } else {\n-            return iterations;\n-        }\n+        return getOrOther(iterations, Options::getMeasurementIterations);\n@@ -455,1 +407,1 @@\n-    private Optional<TimeValue> measurementTime = Optional.none();\n+    private Optional<TimeValue> measurementTime = Optional.empty();\n@@ -465,5 +417,1 @@\n-        if (otherOptions != null) {\n-            return measurementTime.orAnother(otherOptions.getMeasurementTime());\n-        } else {\n-            return measurementTime;\n-        }\n+        return getOrOther(measurementTime, Options::getMeasurementTime);\n@@ -474,1 +422,1 @@\n-    private Optional<Integer> measurementBatchSize = Optional.none();\n+    private Optional<Integer> measurementBatchSize = Optional.empty();\n@@ -485,5 +433,1 @@\n-        if (otherOptions != null) {\n-            return measurementBatchSize.orAnother(otherOptions.getMeasurementBatchSize());\n-        } else {\n-            return measurementBatchSize;\n-        }\n+        return getOrOther(measurementBatchSize, Options::getMeasurementBatchSize);\n@@ -492,1 +436,0 @@\n-\n@@ -514,1 +457,1 @@\n-    private Optional<TimeUnit> timeUnit = Optional.none();\n+    private Optional<TimeUnit> timeUnit = Optional.empty();\n@@ -524,5 +467,1 @@\n-        if (otherOptions != null) {\n-            return timeUnit.orAnother(otherOptions.getTimeUnit());\n-        } else {\n-            return timeUnit;\n-        }\n+        return getOrOther(timeUnit, Options::getTimeUnit);\n@@ -533,1 +472,1 @@\n-    private Optional<Integer> opsPerInvocation = Optional.none();\n+    private Optional<Integer> opsPerInvocation = Optional.empty();\n@@ -544,5 +483,1 @@\n-        if (otherOptions != null) {\n-            return opsPerInvocation.orAnother(otherOptions.getOperationsPerInvocation());\n-        } else {\n-            return opsPerInvocation;\n-        }\n+        return getOrOther(opsPerInvocation, Options::getOperationsPerInvocation);\n@@ -553,1 +488,1 @@\n-    private Optional<Integer> forks = Optional.none();\n+    private Optional<Integer> forks = Optional.empty();\n@@ -564,5 +499,1 @@\n-        if (otherOptions != null) {\n-            return forks.orAnother(otherOptions.getForkCount());\n-        } else {\n-            return forks;\n-        }\n+        return getOrOther(forks, Options::getForkCount);\n@@ -573,1 +504,1 @@\n-    private Optional<Integer> warmupForks = Optional.none();\n+    private Optional<Integer> warmupForks = Optional.empty();\n@@ -584,5 +515,1 @@\n-        if (otherOptions != null) {\n-            return warmupForks.orAnother(otherOptions.getWarmupForkCount());\n-        } else {\n-            return warmupForks;\n-        }\n+        return getOrOther(warmupForks, Options::getWarmupForkCount);\n@@ -593,1 +520,1 @@\n-    private Optional<String> jvmBinary = Optional.none();\n+    private Optional<String> jvmBinary = Optional.empty();\n@@ -603,5 +530,1 @@\n-        if (otherOptions != null) {\n-            return jvmBinary.orAnother(otherOptions.getJvm());\n-        } else {\n-            return jvmBinary;\n-        }\n+        return getOrOther(jvmBinary, Options::getJvm);\n@@ -612,1 +535,1 @@\n-    private Optional<Collection<String>> jvmArgs = Optional.none();\n+    private Optional<Collection<String>> jvmArgs = Optional.empty();\n@@ -622,5 +545,1 @@\n-        if (otherOptions != null) {\n-            return jvmArgs.orAnother(otherOptions.getJvmArgs().orAnother(Optional.<Collection<String>>none()));\n-        } else {\n-            return jvmArgs.orAnother(Optional.<Collection<String>>none());\n-        }\n+        return getOrOther(jvmArgs, Options::getJvmArgs);\n@@ -631,1 +550,1 @@\n-    private Optional<Collection<String>> jvmArgsAppend = Optional.none();\n+    private Optional<Collection<String>> jvmArgsAppend = Optional.empty();\n@@ -641,5 +560,1 @@\n-        if (otherOptions != null) {\n-            return jvmArgsAppend.orAnother(otherOptions.getJvmArgsAppend().orAnother(Optional.<Collection<String>>none()));\n-        } else {\n-            return jvmArgsAppend.orAnother(Optional.<Collection<String>>none());\n-        }\n+        return getOrOther(jvmArgsAppend, Options::getJvmArgsAppend);\n@@ -650,1 +565,1 @@\n-    private Optional<Collection<String>> jvmArgsPrepend = Optional.none();\n+    private Optional<Collection<String>> jvmArgsPrepend = Optional.empty();\n@@ -660,5 +575,1 @@\n-        if (otherOptions != null) {\n-            return jvmArgsPrepend.orAnother(otherOptions.getJvmArgsPrepend().orAnother(Optional.<Collection<String>>none()));\n-        } else {\n-            return jvmArgsPrepend.orAnother(Optional.<Collection<String>>none());\n-        }\n+        return getOrOther(jvmArgsPrepend, Options::getJvmArgsPrepend);\n@@ -686,1 +597,1 @@\n-                return Optional.none();\n+                return Optional.empty();\n@@ -701,1 +612,1 @@\n-    private Optional<TimeValue> timeout = Optional.none();\n+    private Optional<TimeValue> timeout = Optional.empty();\n@@ -711,5 +622,1 @@\n-        if (otherOptions != null) {\n-            return timeout.orAnother(otherOptions.getTimeout());\n-        } else {\n-            return timeout;\n-        }\n+        return getOrOther(timeout, Options::getTimeout);\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/runner\/options\/OptionsBuilder.java","additions":59,"deletions":152,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.function.Supplier;\n@@ -54,2 +55,2 @@\n-    public Optional<T> orAnother(Optional<T> alternative) {\n-        return (val == null) ? alternative : this;\n+    public T orElseGet(Supplier<T> alternativeSupplier) {\n+        return val != null ? val : alternativeSupplier.get();\n@@ -63,1 +64,1 @@\n-    public static <T> Optional<T> none() {\n+    public static <T> Optional<T> empty() {\n@@ -77,1 +78,1 @@\n-    public static <T> Optional<T> eitherOf(T val) {\n+    public static <T> Optional<T> ofNullable(T val) {\n@@ -79,1 +80,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -85,1 +86,1 @@\n-    public boolean hasValue() {\n+    public boolean isPresent() {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Optional.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -110,1 +110,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -121,1 +121,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -132,1 +132,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -143,1 +143,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n@@ -173,1 +173,1 @@\n-            return Optional.none();\n+            return Optional.empty();\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineReader.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n@@ -83,1 +83,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n@@ -100,1 +100,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n@@ -113,1 +113,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n@@ -122,1 +122,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n@@ -131,1 +131,1 @@\n-        if (!opt.hasValue()) {\n+        if (!opt.isPresent()) {\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import org.openjdk.jmh.runner.options.TimeValue;\n@@ -37,1 +36,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -56,1 +54,1 @@\n-                Optional.<Integer>none(),\n+                Optional.empty(),\n@@ -58,17 +56,17 @@\n-                Optional.<Collection<String>>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<String>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Map<String, String[]>>none(),\n-                Optional.<TimeUnit>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none()\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkList.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jmh.runner.options.TimeValue;\n@@ -38,1 +37,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -50,1 +48,1 @@\n-                Optional.<Integer>none(),\n+                Optional.empty(),\n@@ -52,17 +50,17 @@\n-                Optional.<Collection<String>>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<String>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Map<String, String[]>>none(),\n-                Optional.<TimeUnit>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none()\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListEncoding.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.jmh.runner.options.TimeValue;\n@@ -35,1 +34,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -47,1 +45,1 @@\n-                Optional.<Integer>none(),\n+                Optional.empty(),\n@@ -49,17 +47,17 @@\n-                Optional.<Collection<String>>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<Integer>none(),\n-                Optional.<String>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Collection<String>>none(),\n-                Optional.<Map<String, String[]>>none(),\n-                Optional.<TimeUnit>none(),\n-                Optional.<Integer>none(),\n-                Optional.<TimeValue>none()\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty(),\n+                Optional.empty()\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/TestBenchmarkListSorting.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        Assert.assertFalse(builder.getForkCount().hasValue());\n+        Assert.assertFalse(builder.getForkCount().isPresent());\n@@ -152,1 +152,1 @@\n-        Assert.assertFalse(builder.shouldDoGC().hasValue());\n+        Assert.assertFalse(builder.shouldDoGC().isPresent());\n@@ -173,1 +173,1 @@\n-        Assert.assertFalse(builder.getJvm().hasValue());\n+        Assert.assertFalse(builder.getJvm().isPresent());\n@@ -194,1 +194,1 @@\n-        Assert.assertFalse(builder.getJvmArgs().hasValue());\n+        Assert.assertFalse(builder.getJvmArgs().isPresent());\n@@ -215,1 +215,1 @@\n-        Assert.assertFalse(builder.getJvmArgsAppend().hasValue());\n+        Assert.assertFalse(builder.getJvmArgsAppend().isPresent());\n@@ -236,1 +236,1 @@\n-        Assert.assertFalse(builder.getJvmArgsPrepend().hasValue());\n+        Assert.assertFalse(builder.getJvmArgsPrepend().isPresent());\n@@ -257,1 +257,1 @@\n-        Assert.assertFalse(builder.getOutput().hasValue());\n+        Assert.assertFalse(builder.getOutput().isPresent());\n@@ -278,1 +278,1 @@\n-        Assert.assertFalse(builder.getResult().hasValue());\n+        Assert.assertFalse(builder.getResult().isPresent());\n@@ -299,1 +299,1 @@\n-        Assert.assertFalse(builder.getResultFormat().hasValue());\n+        Assert.assertFalse(builder.getResultFormat().isPresent());\n@@ -320,1 +320,1 @@\n-        Assert.assertFalse(builder.getMeasurementTime().hasValue());\n+        Assert.assertFalse(builder.getMeasurementTime().isPresent());\n@@ -341,1 +341,1 @@\n-        Assert.assertFalse(builder.getMeasurementIterations().hasValue());\n+        Assert.assertFalse(builder.getMeasurementIterations().isPresent());\n@@ -362,1 +362,1 @@\n-        Assert.assertFalse(builder.shouldFailOnError().hasValue());\n+        Assert.assertFalse(builder.shouldFailOnError().isPresent());\n@@ -383,1 +383,1 @@\n-        Assert.assertFalse(builder.shouldSyncIterations().hasValue());\n+        Assert.assertFalse(builder.shouldSyncIterations().isPresent());\n@@ -404,1 +404,1 @@\n-        Assert.assertFalse(builder.getThreadGroups().hasValue());\n+        Assert.assertFalse(builder.getThreadGroups().isPresent());\n@@ -425,1 +425,1 @@\n-        Assert.assertFalse(builder.getThreads().hasValue());\n+        Assert.assertFalse(builder.getThreads().isPresent());\n@@ -446,1 +446,1 @@\n-        Assert.assertFalse(builder.getTimeUnit().hasValue());\n+        Assert.assertFalse(builder.getTimeUnit().isPresent());\n@@ -467,1 +467,1 @@\n-        Assert.assertFalse(builder.getOperationsPerInvocation().hasValue());\n+        Assert.assertFalse(builder.getOperationsPerInvocation().isPresent());\n@@ -488,1 +488,1 @@\n-        Assert.assertFalse(builder.verbosity().hasValue());\n+        Assert.assertFalse(builder.verbosity().isPresent());\n@@ -509,1 +509,1 @@\n-        Assert.assertFalse(builder.getWarmupForkCount().hasValue());\n+        Assert.assertFalse(builder.getWarmupForkCount().isPresent());\n@@ -530,1 +530,1 @@\n-        Assert.assertFalse(builder.getWarmupIterations().hasValue());\n+        Assert.assertFalse(builder.getWarmupIterations().isPresent());\n@@ -551,1 +551,1 @@\n-        Assert.assertFalse(builder.getWarmupTime().hasValue());\n+        Assert.assertFalse(builder.getWarmupTime().isPresent());\n@@ -593,1 +593,1 @@\n-        Assert.assertFalse(builder.getParameter(\"x\").hasValue());\n+        Assert.assertFalse(builder.getParameter(\"x\").isPresent());\n@@ -622,1 +622,1 @@\n-        Assert.assertFalse(builder.getTimeout().hasValue());\n+        Assert.assertFalse(builder.getTimeout().isPresent());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/runner\/options\/TestParentOptions.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import org.openjdk.jmh.util.lines.TestLineReader;\n-import org.openjdk.jmh.util.lines.TestLineWriter;\n@@ -35,1 +33,0 @@\n-import java.util.Collection;\n@@ -48,2 +45,2 @@\n-        writer.putOptionalString(Optional.eitherOf(\"full-optional\"));\n-        writer.putOptionalString(Optional.<String>none());\n+        writer.putOptionalString(Optional.ofNullable(\"full-optional\"));\n+        writer.putOptionalString(Optional.empty());\n@@ -51,2 +48,2 @@\n-        writer.putOptionalInt(Optional.eitherOf(42));\n-        writer.putOptionalInt(Optional.<Integer>none());\n+        writer.putOptionalInt(Optional.ofNullable(42));\n+        writer.putOptionalInt(Optional.empty());\n@@ -56,2 +53,2 @@\n-        writer.putOptionalTimeValue(Optional.eitherOf(TimeValue.milliseconds(14)));\n-        writer.putOptionalTimeValue(Optional.<TimeValue>none());\n+        writer.putOptionalTimeValue(Optional.ofNullable(TimeValue.milliseconds(14)));\n+        writer.putOptionalTimeValue(Optional.empty());\n@@ -59,2 +56,2 @@\n-        writer.putOptionalTimeUnit(Optional.eitherOf(TimeUnit.HOURS));\n-        writer.putOptionalTimeUnit(Optional.<TimeUnit>none());\n+        writer.putOptionalTimeUnit(Optional.ofNullable(TimeUnit.HOURS));\n+        writer.putOptionalTimeUnit(Optional.empty());\n@@ -62,2 +59,2 @@\n-        writer.putOptionalStringCollection(Optional.<Collection<String>>eitherOf(Arrays.asList(\"foo\", \"bar\", \"baz\")));\n-        writer.putOptionalStringCollection(Optional.<Collection<String>>none());\n+        writer.putOptionalStringCollection(Optional.ofNullable(Arrays.asList(\"foo\", \"bar\", \"baz\")));\n+        writer.putOptionalStringCollection(Optional.empty());\n@@ -70,2 +67,2 @@\n-        writer.putOptionalParamCollection(Optional.<Map<String,String[]>>eitherOf(expectedMap));\n-        writer.putOptionalParamCollection(Optional.<Map<String,String[]>>none());\n+        writer.putOptionalParamCollection(Optional.ofNullable(expectedMap));\n+        writer.putOptionalParamCollection(Optional.empty());\n@@ -81,1 +78,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalString().hasValue());\n+        Assert.assertEquals(false, reader.nextOptionalString().isPresent());\n@@ -84,1 +81,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalInt().hasValue());\n+        Assert.assertEquals(false, reader.nextOptionalInt().isPresent());\n@@ -89,1 +86,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalTimeValue().hasValue());\n+        Assert.assertEquals(false, reader.nextOptionalTimeValue().isPresent());\n@@ -92,1 +89,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalTimeUnit().hasValue());\n+        Assert.assertEquals(false, reader.nextOptionalTimeUnit().isPresent());\n@@ -95,1 +92,1 @@\n-        Assert.assertEquals(false, reader.nextOptionalStringCollection().hasValue());\n+        Assert.assertEquals(false, reader.nextOptionalStringCollection().isPresent());\n","filename":"jmh-core\/src\/test\/java\/org\/openjdk\/jmh\/util\/lines\/TestLineTest.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"}]}