{"files":[{"patch":"@@ -113,0 +113,4 @@\n+        OptionSpec<String> optNativeMem = parser.accepts(\"nativemem\",\n+                \"Enable native memory profiling. Optional argument (e.g. =2m) specifies allocation sampling rate. \" + secondaryEventOk)\n+                .withOptionalArg().ofType(String.class).describedAs(\"sample bytes\");\n+\n@@ -114,1 +118,1 @@\n-                \"Enable lock profiling. Optional argument (e.g. =1ms) limits capture based on lock duration. \" + secondaryEventOk)\n+                \"Enable lock profiling. Optional argument (e.g. =1ms) specifies lock duration threshold. \" + secondaryEventOk)\n@@ -147,0 +151,4 @@\n+        OptionSpec<Boolean> optNorm = parser.accepts(\"norm\",\n+                \"Normalize names of hidden classes.\")\n+                .withRequiredArg().ofType(Boolean.class).describedAs(\"bool\");\n+\n@@ -155,0 +163,4 @@\n+        OptionSpec<Boolean> optLib = parser.accepts(\"lib\",\n+                \"Prepend library names.\")\n+                .withRequiredArg().ofType(Boolean.class).describedAs(\"bool\");\n+\n@@ -169,1 +181,1 @@\n-                \"SVG title.\")\n+                \"Flame graph title.\")\n@@ -173,1 +185,1 @@\n-                \"SVG width.\")\n+                \"Flame graph width.\")\n@@ -176,2 +188,2 @@\n-        OptionSpec<Long> optMinWidth = parser.accepts(\"minwidth\", \"Skip frames smaller than px\")\n-                .withRequiredArg().ofType(Long.class).describedAs(\"pixels\");\n+        OptionSpec<Double> optMinWidth = parser.accepts(\"minwidth\", \"Skip frames smaller than x%\")\n+                .withRequiredArg().ofType(Double.class).describedAs(\"percent\");\n@@ -218,0 +230,1 @@\n+            builder.appendIfTrue(optNorm);\n@@ -220,0 +233,1 @@\n+            builder.appendIfTrue(optLib);\n@@ -277,0 +291,5 @@\n+            if (set.has(optNativeMem)) {\n+                secondaryEvents.add(\"nativemem\");\n+                builder.append(optNativeMem);\n+            }\n+\n@@ -399,5 +418,0 @@\n-                case collapsed:\n-                    File collapsedFile = outputFile(\"collapsed-%s.csv\");\n-                    dump(collapsedFile, \"collapsed\");\n-                    results.add(new FileResult(\"async-collapsed\", Collections.singletonList(collapsedFile)));\n-                    break;\n@@ -418,5 +432,0 @@\n-                case tree:\n-                    File treeFile = outputFile(\"tree-%s.html\");\n-                    dump(treeFile, \"tree\");\n-                    results.add(new FileResult(\"async-tree\", Collections.singletonList(treeFile)));\n-                    break;\n@@ -427,0 +436,5 @@\n+                default:\n+                    File outFile = outputFile(outputType.name() + \"-%s.\" + outputType.ext());\n+                    dump(outFile, outputType.name());\n+                    results.add(new FileResult(\"async-\" + outputType.name(), Collections.singletonList(outFile)));\n+                    break;\n@@ -458,0 +472,1 @@\n+        dwarf,\n@@ -459,0 +474,2 @@\n+        vm,\n+        vmx,\n@@ -463,5 +480,16 @@\n-        text,\n-        collapsed,\n-        flamegraph,\n-        tree,\n-        jfr\n+        text(\"txt\"),\n+        collapsed(\"csv\"),\n+        flamegraph(\"html\"),\n+        tree(\"html\"),\n+        jfr(\"jfr\"),\n+        otlp(\"pb\");\n+\n+        private final String ext;\n+\n+        OutputType(String ext) {\n+            this.ext = ext;\n+        }\n+\n+        public String ext() {\n+            return ext;\n+        }\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/AsyncProfiler.java","additions":48,"deletions":20,"binary":false,"changes":68,"status":"modified"}]}