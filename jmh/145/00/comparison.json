{"files":[{"patch":"@@ -27,2 +27,0 @@\n-import sun.misc.Unsafe;\n-\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/util\/Utils.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,3 +33,1 @@\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.*;\n@@ -41,0 +39,4 @@\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -60,1 +62,1 @@\n-        volatile double x = Math.PI;\n+        int x;\n@@ -65,1 +67,1 @@\n-        volatile double x = Math.PI;\n+        int x;\n@@ -72,1 +74,1 @@\n-     * makes building multi-threaded benchmark a breeze.\n+     * simplifies building multithreaded benchmarks.\n@@ -82,1 +84,1 @@\n-        \/\/ will have it's own copy of the state, and this benchmark\n+        \/\/ will have its own copy of the state, and this benchmark\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_03_States.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,3 +33,1 @@\n-import org.openjdk.jmh.annotations.Benchmark;\n-import org.openjdk.jmh.annotations.Scope;\n-import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.*;\n@@ -41,0 +39,2 @@\n+import java.util.concurrent.TimeUnit;\n+\n@@ -48,0 +48,2 @@\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -51,1 +53,1 @@\n-    double x = Math.PI;\n+    int x;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_04_DefaultState.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,4 @@\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -42,1 +46,1 @@\n-    double x;\n+    int x;\n@@ -69,1 +73,1 @@\n-        x = Math.PI;\n+        x = 1;\n@@ -78,1 +82,1 @@\n-        assert x > Math.PI : \"Nothing changed?\";\n+        assert x > 1 : \"Nothing changed?\";\n@@ -100,1 +104,1 @@\n-        double x = 0;\n+        int x = 0;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_05_StateFixtures.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,4 @@\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@@ -42,1 +46,1 @@\n-    double x;\n+    int x;\n@@ -59,1 +63,1 @@\n-        assert x > Math.PI : \"Nothing changed?\";\n+        assert x > 1 : \"Nothing changed?\";\n@@ -69,1 +73,1 @@\n-        double x = 0;\n+        int x = 0;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_06_FixtureLevel.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+@BenchmarkMode(Mode.AverageTime)\n@@ -80,1 +81,0 @@\n-\n@@ -104,2 +104,1 @@\n-    @BenchmarkMode(Mode.AverageTime)\n-    public double measureHot(NormalState e, final Scratch s) throws ExecutionException, InterruptedException {\n+    public int measureHot(NormalState e, final Scratch s) throws ExecutionException, InterruptedException {\n@@ -110,2 +109,1 @@\n-    @BenchmarkMode(Mode.AverageTime)\n-    public double measureCold(LaggingState e, final Scratch s) throws ExecutionException, InterruptedException {\n+    public int measureCold(LaggingState e, final Scratch s) throws ExecutionException, InterruptedException {\n@@ -121,4 +119,3 @@\n-        private double p;\n-        public double doWork() {\n-            p = Math.log(p);\n-            return p;\n+        private int p;\n+        public int doWork() {\n+            return p++;\n@@ -128,1 +125,1 @@\n-    public static class Task implements Callable<Double> {\n+    public static class Task implements Callable<Integer> {\n@@ -136,1 +133,1 @@\n-        public Double call() {\n+        public Integer call() {\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_07_FixtureLevelInvocation.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    private double x = Math.PI;\n+    int x;\n@@ -60,1 +60,1 @@\n-    private double compute(double d) {\n+    private int compute(int d) {\n@@ -62,1 +62,1 @@\n-            d = d * d \/ Math.PI;\n+            d = d * d \/ 42;\n@@ -69,1 +69,1 @@\n-        \/\/ do nothing, this is a baseline\n+        \/\/ Do nothing, this is a baseline\n@@ -79,1 +79,1 @@\n-    public double measureRight() {\n+    public int measureRight() {\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_08_DeadCode.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-    double x1 = Math.PI;\n-    double x2 = Math.PI * 2;\n+    int x1;\n+    int x2;\n@@ -59,1 +59,1 @@\n-    private double compute(double d) {\n+    private int compute(int d) {\n@@ -61,1 +61,1 @@\n-            d = d * d \/ Math.PI;\n+            d = d * d \/ 42;\n@@ -71,1 +71,1 @@\n-    public double baseline() {\n+    public int baseline() {\n@@ -81,1 +81,1 @@\n-    public double measureWrong() {\n+    public int measureWrong() {\n@@ -95,1 +95,1 @@\n-    public double measureRight_1() {\n+    public int measureRight_1() {\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_09_Blackholes.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    \/\/ IDEs will say \"Oh, you can convert this field to local variable\". Don't. Trust. Them.\n+    \/\/ IDEs will say \"Look, this field could be final\". Don't. Trust. Them.\n@@ -60,1 +60,1 @@\n-    private double x = Math.PI;\n+    private int x = 42;\n@@ -62,1 +62,1 @@\n-    \/\/ IDEs will probably also say \"Look, it could be final\". Don't. Trust. Them. Either.\n+    \/\/ IDEs will say \"Oh, you can convert this field to local variable\". Don't. Trust. Them. Either.\n@@ -64,1 +64,1 @@\n-    private final double wrongX = Math.PI;\n+    private final int wrongX = 42;\n@@ -66,1 +66,1 @@\n-    private double compute(double d) {\n+    private int compute(int d) {\n@@ -68,1 +68,1 @@\n-            d = d * d \/ Math.PI;\n+            d = d * d \/ 42;\n@@ -74,1 +74,1 @@\n-    public double baseline() {\n+    public int baseline() {\n@@ -76,1 +76,1 @@\n-        return Math.PI;\n+        return 42;\n@@ -80,1 +80,1 @@\n-    public double measureWrong_1() {\n+    public int measureWrong_1() {\n@@ -82,1 +82,1 @@\n-        return compute(Math.PI);\n+        return compute(42);\n@@ -86,1 +86,1 @@\n-    public double measureWrong_2() {\n+    public int measureWrong_2() {\n@@ -92,1 +92,1 @@\n-    public double measureRight() {\n+    public int measureRight() {\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_10_ConstantFold.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    double x1 = Math.PI;\n+    int x;\n@@ -71,2 +71,2 @@\n-    public double measure() {\n-        return Math.log(x1);\n+    public void measure() {\n+        x++;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_20_Annotations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        int x;\n+        double x;\n@@ -76,1 +76,1 @@\n-            x = 42;\n+            x = Math.PI;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_24_Inheritance.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-                    return v \/ (Math.random() * 2);\n+                    return v \/ (Math.random() * 3);\n@@ -324,1 +324,1 @@\n-                    return v * (Math.random() * 2);\n+                    return v * (Math.random() * 3);\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_25_API_GA.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    private double compute(double d) {\n+    private int compute(int d) {\n@@ -81,1 +81,1 @@\n-            d = d * d \/ Math.PI;\n+            d = d * d \/ 42;\n@@ -89,1 +89,1 @@\n-            double x;\n+            int x;\n@@ -98,1 +98,1 @@\n-            double x;\n+            int x;\n@@ -107,1 +107,1 @@\n-            double x;\n+            int x;\n","filename":"jmh-samples\/src\/main\/java\/org\/openjdk\/jmh\/samples\/JMHSample_28_BlackholeHelpers.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}