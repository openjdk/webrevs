{"files":[{"patch":"@@ -63,1 +63,1 @@\n-        double timeMeasurement = ProfilerTestUtils.checkedGet(sr, \"compiler.time.measure\").getScore();\n+        double timeMeasurement = ProfilerTestUtils.checkedGet(sr, \"compiler.time.measurement\").getScore();\n@@ -65,1 +65,1 @@\n-        String details = \"Total: \" + timeTotal + \", Warmup: \" + timeWarmup + \", Measure: \" + timeMeasurement;\n+        String details = \"Total: \" + timeTotal + \", Warmup: \" + timeWarmup + \", Measurement: \" + timeMeasurement;\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.jmh.runner.IterationType;\n@@ -38,1 +39,0 @@\n-\n@@ -41,2 +41,4 @@\n-    private long warmupStartTime = UNDEFINED;\n-    private long measurementStartTime = UNDEFINED;\n+    private final CompilationMXBean bean;\n+\n+    private long prevTime = UNDEFINED;\n+    private long warmupTime = UNDEFINED;\n@@ -50,2 +52,2 @@\n-        CompilationMXBean comp = ManagementFactory.getCompilationMXBean();\n-        if (!comp.isCompilationTimeMonitoringSupported()) {\n+        bean = ManagementFactory.getCompilationMXBean();\n+        if (!bean.isCompilationTimeMonitoringSupported()) {\n@@ -58,1 +60,0 @@\n-        CompilationMXBean comp = ManagementFactory.getCompilationMXBean();\n@@ -60,13 +61,4 @@\n-            switch (iterationParams.getType()) {\n-                case WARMUP: {\n-                    if (warmupStartTime == UNDEFINED) {\n-                        warmupStartTime = comp.getTotalCompilationTime();\n-                    }\n-                    break;\n-                }\n-                case MEASUREMENT: {\n-                    if (measurementStartTime == UNDEFINED) {\n-                        measurementStartTime = comp.getTotalCompilationTime();\n-                    }\n-                    break;\n-                }\n+            if (prevTime == UNDEFINED) {\n+                long curTime = bean.getTotalCompilationTime();\n+                prevTime = curTime;\n+                warmupTime = curTime;\n@@ -81,1 +73,0 @@\n-        CompilationMXBean comp = ManagementFactory.getCompilationMXBean();\n@@ -83,6 +74,9 @@\n-            long curTime = comp.getTotalCompilationTime();\n-            Collection<ScalarResult> res = new ArrayList<>();\n-            res.add(new ScalarResult(\"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX));\n-            if (measurementStartTime != UNDEFINED) {\n-                if (warmupStartTime != UNDEFINED) {\n-                    res.add(new ScalarResult(\"compiler.time.warmup\", measurementStartTime - warmupStartTime, \"ms\", AggregationPolicy.SUM));\n+            long curTime = bean.getTotalCompilationTime();\n+            long delta = curTime - prevTime;\n+            prevTime = curTime;\n+\n+            if (iterationParams.getType() == IterationType.MEASUREMENT) {\n+                Collection<ScalarResult> res = new ArrayList<>();\n+                if (warmupTime != UNDEFINED) {\n+                    res.add(new ScalarResult(\"compiler.time.warmup\", curTime - warmupTime, \"ms\", AggregationPolicy.SUM));\n+                    warmupTime = UNDEFINED;\n@@ -90,1 +84,5 @@\n-                res.add(new ScalarResult(\"compiler.time.measure\", curTime - measurementStartTime, \"ms\", AggregationPolicy.SUM));\n+                res.add(new ScalarResult(\"compiler.time.measurement\", delta, \"ms\", AggregationPolicy.SUM));\n+                res.add(new ScalarResult(\"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX));\n+                return res;\n+            } else {\n+                return Collections.emptyList();\n@@ -92,1 +90,0 @@\n-            return res;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/CompilerProfiler.java","additions":25,"deletions":28,"binary":false,"changes":53,"status":"modified"}]}