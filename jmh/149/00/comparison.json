{"files":[{"patch":"@@ -62,1 +62,2 @@\n-        double timeProfiled = ProfilerTestUtils.checkedGet(sr, \"compiler.time.profiled\").getScore();\n+        double timeWarmup = ProfilerTestUtils.checkedGet(sr, \"compiler.time.warmup\").getScore();\n+        double timeMeasurement = ProfilerTestUtils.checkedGet(sr, \"compiler.time.measure\").getScore();\n@@ -64,4 +65,1 @@\n-        if (timeProfiled > timeTotal) {\n-            throw new IllegalStateException(\"Profiled time is larger than total time. \" +\n-                    \"Total: \" + timeTotal + \", Profiled: \" + timeProfiled);\n-        }\n+        String details = \"Total: \" + timeTotal + \", Warmup: \" + timeWarmup + \", Measure: \" + timeMeasurement;\n@@ -69,2 +67,2 @@\n-        if (timeProfiled <= 0) {\n-            throw new IllegalStateException(\"Should have profiled time: \" + timeProfiled);\n+        if (timeTotal < timeWarmup + timeMeasurement) {\n+            throw new IllegalStateException(\"Warmup+measure should be less than total. \" + details);\n@@ -74,1 +72,5 @@\n-            throw new IllegalStateException(\"Should have total time: \" + timeTotal);\n+            throw new IllegalStateException(\"Should have total time.\" + details);\n+        }\n+\n+        if (timeWarmup + timeMeasurement <= 0) {\n+            throw new IllegalStateException(\"Should have warmup+measure time.\" + details);\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.util.Arrays;\n+import java.util.ArrayList;\n@@ -39,1 +39,4 @@\n-    private long startCompTime;\n+    private static final int UNDEFINED = -1;\n+\n+    private long warmupStartTime = UNDEFINED;\n+    private long measurementStartTime = UNDEFINED;\n@@ -57,1 +60,14 @@\n-            startCompTime = comp.getTotalCompilationTime();\n+            switch (iterationParams.getType()) {\n+                case WARMUP: {\n+                    if (warmupStartTime == UNDEFINED) {\n+                        warmupStartTime = comp.getTotalCompilationTime();\n+                    }\n+                    break;\n+                }\n+                case MEASUREMENT: {\n+                    if (measurementStartTime == UNDEFINED) {\n+                        measurementStartTime = comp.getTotalCompilationTime();\n+                    }\n+                    break;\n+                }\n+            }\n@@ -68,4 +84,9 @@\n-            return Arrays.asList(\n-                new ScalarResult(\"compiler.time.profiled\", curTime - startCompTime, \"ms\", AggregationPolicy.SUM),\n-                new ScalarResult(\"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX)\n-            );\n+            Collection<ScalarResult> res = new ArrayList<>();\n+            res.add(new ScalarResult(\"compiler.time.total\", curTime, \"ms\", AggregationPolicy.MAX));\n+            if (measurementStartTime != UNDEFINED) {\n+                if (warmupStartTime != UNDEFINED) {\n+                    res.add(new ScalarResult(\"compiler.time.warmup\", measurementStartTime - warmupStartTime, \"ms\", AggregationPolicy.SUM));\n+                }\n+                res.add(new ScalarResult(\"compiler.time.measure\", curTime - measurementStartTime, \"ms\", AggregationPolicy.SUM));\n+            }\n+            return res;\n","filename":"jmh-core\/src\/main\/java\/org\/openjdk\/jmh\/profile\/CompilerProfiler.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"}]}