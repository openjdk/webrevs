{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jmh.infra.Blackhole;\n+\n@@ -35,0 +37,1 @@\n+    private static final int WORK_TIME_MS;\n@@ -47,0 +50,5 @@\n+        WORK_TIME_MS = AccessController.doPrivileged(new PrivilegedAction<Integer>() {\n+            public Integer run() {\n+                return Integer.getInteger(\"jmh.core.it.workTime\", 10);\n+            }\n+        });\n@@ -57,0 +65,4 @@\n+    \/**\n+     * Perform some work, without any guarantees that method would be hot.\n+     * Use this method as the courtesy for other parallel-running tests.\n+     *\/\n@@ -58,1 +70,0 @@\n-        \/\/ courtesy for parallel-running tests\n@@ -60,1 +71,1 @@\n-            TimeUnit.MILLISECONDS.sleep(10);\n+            TimeUnit.MILLISECONDS.sleep(WORK_TIME_MS);\n@@ -66,0 +77,11 @@\n+    \/**\n+     * Perform some busy work, hopefully triggering CPU use and compilations.\n+     *\/\n+    public static void busyWork() {\n+        long endTime = System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(WORK_TIME_MS);\n+        while (System.nanoTime() < endTime) {\n+            Blackhole.consumeCPU(10);\n+        }\n+        Thread.yield();\n+    }\n+\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/Fixtures.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        Fixtures.work();\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/CompilerProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        Fixtures.work();\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/JavaFlightRecorderProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        Fixtures.work();\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfC2CProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,6 +51,1 @@\n-        somethingInTheMiddle();\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void somethingInTheMiddle() {\n-        Blackhole.consumeCPU(1);\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfNormProfilerTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,6 +52,1 @@\n-        somethingInTheMiddle();\n-    }\n-\n-    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n-    public void somethingInTheMiddle() {\n-        Blackhole.consumeCPU(1);\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/LinuxPerfProfilerTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        Fixtures.work();\n+        Fixtures.busyWork();\n","filename":"jmh-core-it\/src\/test\/java\/org\/openjdk\/jmh\/it\/profilers\/StackProfilerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}