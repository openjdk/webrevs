{"files":[{"patch":"@@ -3136,1 +3136,1 @@\n-    log_info(scc, nmethod)(\"%d (L%d): Skip nmethod with expanded buffer '%s'\", comp_id, (int)comp_level, method->name_and_sig_as_C_string());\n+    log_warning(scc, nmethod)(\"%d (L%d): Skip nmethod with expanded buffer '%s'\", comp_id, (int)comp_level, method->name_and_sig_as_C_string());\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -545,1 +545,1 @@\n-    if (cb.insts()->maybe_expand_to_ensure_remaining(PhaseOutput::MAX_inst_size) && cb.blob() == nullptr) {\n+    if (cb.insts()->maybe_expand_to_ensure_remaining(PhaseOutput::max_inst_gcstub_size()) && cb.blob() == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-    if (cb.insts()->maybe_expand_to_ensure_remaining(PhaseOutput::MAX_inst_size) && cb.blob() == nullptr) {\n+    if (cb.insts()->maybe_expand_to_ensure_remaining(PhaseOutput::max_inst_gcstub_size()) && cb.blob() == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -890,1 +890,1 @@\n-  return PhaseOutput::MAX_inst_size + PhaseOutput::MAX_stubs_size + const_size + slop + locs_size;\n+  return PhaseOutput::max_inst_size() + PhaseOutput::MAX_stubs_size + const_size + slop + locs_size;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"code\/SCCache.hpp\"\n@@ -1373,1 +1374,1 @@\n-  code_req += MAX_inst_size;    \/\/ ensure per-instruction margin\n+  code_req += max_inst_size();  \/\/ ensure per-instruction margin\n@@ -1570,1 +1571,1 @@\n-          masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+          masm->code()->insts()->maybe_expand_to_ensure_remaining(max_inst_size());\n@@ -1699,1 +1700,1 @@\n-      masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+      masm->code()->insts()->maybe_expand_to_ensure_remaining(max_inst_size());\n@@ -3356,1 +3357,1 @@\n-  assert(blob->size() > MAX_inst_size, \"sanity\");\n+  assert(blob->size() > max_inst_size(), \"sanity\");\n@@ -3670,0 +3671,14 @@\n+\n+int PhaseOutput::max_inst_size() {\n+  if (SCCache::is_on_for_write()) {\n+    \/\/ See the comment in output.hpp.\n+    return 16384;\n+  } else {\n+    return mainline_MAX_inst_size;\n+  }\n+}\n+\n+int PhaseOutput::max_inst_gcstub_size() {\n+  assert(mainline_MAX_inst_size <= max_inst_size(), \"Sanity\");\n+  return mainline_MAX_inst_size;\n+}\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -185,0 +185,15 @@\n+  \/\/ SCCache::write_nmethod bails when nmethod buffer is expanded.\n+  \/\/ Large methods would routinely expand the buffer, making themselves\n+  \/\/ ineligible for SCCache stores. In order to minimize this effect,\n+  \/\/ we default to larger default sizes. We do this only when SCC dumping\n+  \/\/ is active, to avoid impact on default configuration.\n+  \/\/\n+  \/\/ Additionally, GC barrier stubs expand up to MAX_inst_size in mainline,\n+  \/\/ which also forced resizes often. Current code replaces it with\n+  \/\/ max_inst_gcstub_size, which equals to old MAX_inst_size, so GC stubs\n+  \/\/ still fit nicely, and do not force the resizes too often.\n+  \/\/\n+  \/\/ The old enum is renamed, so direct misuse in new code from mainline would\n+  \/\/ be caught as build failure.\n+  \/\/\n+  \/\/ TODO: Revert this back to mainline once SCCache is fixed.\n@@ -186,1 +201,1 @@\n-    MAX_inst_size       = 2048,\n+    mainline_MAX_inst_size = 2048,\n@@ -192,0 +207,4 @@\n+  \/\/ Current uses of MAX_inst_size should be replaced with these getters:\n+  static int max_inst_size();\n+  static int max_inst_gcstub_size();\n+\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}