{"files":[{"patch":"@@ -3136,1 +3136,1 @@\n-    log_info(scc, nmethod)(\"%d (L%d): Skip nmethod with expanded buffer '%s'\", comp_id, (int)comp_level, method->name_and_sig_as_C_string());\n+    log_warning(scc, nmethod)(\"%d (L%d): Skip nmethod with expanded buffer '%s'\", comp_id, (int)comp_level, method->name_and_sig_as_C_string());\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -540,0 +540,17 @@\n+int G1BarrierSetC2::estimate_stub_size() const {\n+  Compile* const C = Compile::current();\n+  BufferBlob* const blob = C->output()->scratch_buffer_blob();\n+  GrowableArray<G1BarrierStubC2*>* const stubs = barrier_set_state()->stubs();\n+  int size = 0;\n+\n+  for (int i = 0; i < stubs->length(); i++) {\n+    CodeBuffer cb(blob->content_begin(), checked_cast<CodeBuffer::csize_t>((address)C->output()->scratch_locs_memory() - blob->content_begin()));\n+    MacroAssembler masm(&cb);\n+    stubs->at(i)->emit_code(masm);\n+    size += cb.insts_size();\n+  }\n+\n+  \/\/ Add slop to avoid expansion during emit_stubs.\n+  return size + PhaseOutput::MAX_inst_size;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -121,0 +121,1 @@\n+  virtual int estimate_stub_size() const;\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1365,0 +1365,2 @@\n+  \/\/ Despite the name \"stub\", GC barrier stubs are emitted into\n+  \/\/ the insn section, and should be counted in code_req.\n@@ -1366,1 +1368,1 @@\n-  stub_req += bs->estimate_stub_size();\n+  code_req += bs->estimate_stub_size();\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -185,0 +185,5 @@\n+  \/\/ SCCache::write_nmethod bails when nmethod buffer is expanded.\n+  \/\/ Large methods would routinely expand the buffer, making themselves\n+  \/\/ ineligible for SCCache stores. In order to minimize this effect,\n+  \/\/ we default to larger default sizes.\n+  \/\/ TODO: Revert this back to mainline once SCCache is fixed.\n@@ -186,1 +191,1 @@\n-    MAX_inst_size       = 2048,\n+    MAX_inst_size       = 8192,\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}