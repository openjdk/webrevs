{"files":[{"patch":"@@ -1083,0 +1083,3 @@\n+        if (nm != nullptr && nm->preloaded()) {\n+          mdo->inc_preload_decompile_count();\n+        }\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -540,0 +540,3 @@\n+  uint preload_decompile_count() const {\n+    return _orig.preload_decompile_count();\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1970,0 +1970,3 @@\n+  if (preloaded()) {\n+    mdo->inc_preload_decompile_count();\n+  }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2043,0 +2043,1 @@\n+    uint _nof_preload_decompiles;     \/\/ count of all nmethod removals for preload code\n@@ -2053,1 +2054,6 @@\n-    CompilerCounters() : _nof_decompiles(0), _nof_overflow_recompiles(0), _nof_overflow_traps(0), __gap(0) {\n+    CompilerCounters() :\n+      _nof_decompiles(0),\n+      _nof_preload_decompiles(0),\n+      _nof_overflow_recompiles(0),\n+      _nof_overflow_traps(0),\n+      __gap(0) {\n@@ -2097,0 +2103,6 @@\n+    uint preload_decompile_count() const {\n+      return _nof_preload_decompiles;\n+    }\n+    uint inc_preload_decompile_count() {\n+      return ++_nof_preload_decompiles;\n+    }\n@@ -2485,0 +2497,7 @@\n+  uint preload_decompile_count() const {\n+    return _compiler_counters.preload_decompile_count();\n+  }\n+  uint inc_preload_decompile_count() {\n+    return _compiler_counters.inc_preload_decompile_count();\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ci\/ciMethodData.hpp\"\n@@ -131,0 +132,8 @@\n+    if (target->method_data() != nullptr && target->method_data()->preload_decompile_count() > 0) {\n+      \/\/ Preload code was decompiled, possibly due to a trap. Preload code should not normally have\n+      \/\/ traps, but some are still there. Since preload code is compiled more conservatively,\n+      \/\/ we assume that non-preload code would trap again in similar conditions. Therefore,\n+      \/\/ there is no point in trying to load it. Instead, wait for normal compilation to occur.\n+      env->record_failure(\"Preload code was decompiled\");\n+      return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}