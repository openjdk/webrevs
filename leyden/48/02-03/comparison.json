{"files":[{"patch":"@@ -1083,3 +1083,0 @@\n-        if (nm != nullptr && nm->preloaded()) {\n-          mdo->inc_preload_decompile_count();\n-        }\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -540,3 +540,0 @@\n-  uint preload_decompile_count() const {\n-    return _orig.preload_decompile_count();\n-  }\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4459,0 +4459,19 @@\n+\n+void SCCache::block_loading(Method* method, CompLevel comp_level) {\n+  SCCache* cache = open_for_read();\n+  if (cache == nullptr) {\n+    return;\n+  }\n+\n+  ReadingMark rdmk;\n+  if (rdmk.failed()) {\n+    \/\/ Cache is closed, cannot touch anything.\n+    return;\n+  }\n+\n+  Thread* current = Thread::current();\n+  HandleMark hm(current);\n+  methodHandle mh(current, method);\n+  SCCEntry* scc_entry = cache->find_code_entry(mh, comp_level);\n+  cache->invalidate_entry(scc_entry);\n+}\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -555,0 +555,2 @@\n+  static void block_loading(Method* method, CompLevel comp_level);\n+\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1970,3 +1970,0 @@\n-  if (preloaded()) {\n-    mdo->inc_preload_decompile_count();\n-  }\n@@ -2081,0 +2078,9 @@\n+    if (preloaded() && method() != nullptr) {\n+      \/\/ Preload code was decompiled, possibly due to a trap. Preload code should not\n+      \/\/ normally have traps, but some are still there. Since preload code is compiled\n+      \/\/ more conservatively, we assume that non-preload code would trap again in similar\n+      \/\/ conditions. Therefore, there is no point in trying to load it. Instead, wait for\n+      \/\/ normal compilation to occur.\n+      SCCache::block_loading(method(), CompLevel_full_optimization);\n+    }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2043,1 +2043,0 @@\n-    uint _nof_preload_decompiles;     \/\/ count of all nmethod removals for preload code\n@@ -2054,6 +2053,1 @@\n-    CompilerCounters() :\n-      _nof_decompiles(0),\n-      _nof_preload_decompiles(0),\n-      _nof_overflow_recompiles(0),\n-      _nof_overflow_traps(0),\n-      __gap(0) {\n+    CompilerCounters() : _nof_decompiles(0), _nof_overflow_recompiles(0), _nof_overflow_traps(0), __gap(0) {\n@@ -2103,6 +2097,0 @@\n-    uint preload_decompile_count() const {\n-      return _nof_preload_decompiles;\n-    }\n-    uint inc_preload_decompile_count() {\n-      return ++_nof_preload_decompiles;\n-    }\n@@ -2497,7 +2485,0 @@\n-  uint preload_decompile_count() const {\n-    return _compiler_counters.preload_decompile_count();\n-  }\n-  uint inc_preload_decompile_count() {\n-    return _compiler_counters.inc_preload_decompile_count();\n-  }\n-\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"ci\/ciMethodData.hpp\"\n@@ -132,9 +131,0 @@\n-    if (target->method_data() != nullptr && target->method_data()->preload_decompile_count() > 0) {\n-      \/\/ Preload code was decompiled, possibly due to a trap. Preload code should not normally have\n-      \/\/ traps, but some are still there. Since preload code is compiled more conservatively,\n-      \/\/ we assume that non-preload code would trap again in similar conditions. Therefore,\n-      \/\/ there is no point in trying to load it. Instead, wait for normal compilation to occur.\n-      SCCache::invalidate(task->scc_entry()); \/\/ mark sca_entry as not entrant\n-      env->record_failure(\"Preload code was decompiled\");\n-      return;\n-    }\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}