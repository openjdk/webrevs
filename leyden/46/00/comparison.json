{"files":[{"patch":"@@ -2894,1 +2894,1 @@\n-          PTR_FORMAT \", size: %zu\",\n+          \"%llu, size: %zu\",\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private static final int JMOD_MINOR_VERSION = 0x00;\n+    private static final int JMOD_MINOR_VERSION = 0x01;\n@@ -50,1 +50,5 @@\n-        JMOD_MAJOR_VERSION, JMOD_MINOR_VERSION, \/* version 1.0 *\/\n+        JMOD_MAJOR_VERSION, JMOD_MINOR_VERSION, \/* version 1.1 *\/\n+    };\n+    private static final byte[] JMOD_MAGIC_NO_STATIC_LIB = {\n+        0x4A, 0x4D, \/* JM *\/\n+        JMOD_MAJOR_VERSION, 0x00, \/* version 1.0 *\/\n@@ -82,1 +86,2 @@\n-        NATIVE_CMDS(\"bin\");\n+        NATIVE_CMDS(\"bin\"),\n+        STATIC_LIBS(\"static-lib\");\n@@ -185,2 +190,6 @@\n-    public static void writeMagicNumber(OutputStream os) throws IOException {\n-        os.write(JMOD_MAGIC_NUMBER);\n+    public static void writeMagicNumber(OutputStream os, boolean withStaticLib) throws IOException {\n+        if (withStaticLib) {\n+            os.write(JMOD_MAGIC_NUMBER);\n+        } else {\n+            os.write(JMOD_MAGIC_NO_STATIC_LIB);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jmod\/JmodFile.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compressLevel) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compressLevel, boolean withStaticLib) throws IOException {\n@@ -61,1 +61,1 @@\n-        return new JmodOutputStream(bos, date, compressLevel);\n+        return new JmodOutputStream(bos, date, compressLevel, withStaticLib);\n@@ -66,1 +66,1 @@\n-    private JmodOutputStream(OutputStream out, LocalDateTime date, int compressLevel) {\n+    private JmodOutputStream(OutputStream out, LocalDateTime date, int compressLevel, boolean withStaticLib) {\n@@ -71,1 +71,1 @@\n-            JmodFile.writeMagicNumber(out);\n+            JmodFile.writeMagicNumber(out, withStaticLib);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+    private boolean withStaticLibs = false;\n@@ -158,0 +159,1 @@\n+        List<Path> staticLibs;\n@@ -443,1 +445,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel, withStaticLibs)) {\n@@ -468,0 +470,1 @@\n+        final List<Path> staticLibs = options.staticLibs;\n@@ -498,0 +501,1 @@\n+            processSection(out, Section.STATIC_LIBS, staticLibs);\n@@ -1029,1 +1033,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel, withStaticLibs))\n@@ -1402,0 +1406,5 @@\n+        OptionSpec<List<Path>> staticLibs\n+                = parser.accepts(\"static-libs\", getMessage(\"main.opt.static-libs\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(DirPathConverter.INSTANCE);\n+\n@@ -1493,0 +1502,4 @@\n+            if (opts.has(staticLibs)) {\n+                options.staticLibs = getLastElement(opts.valuesOf(staticLibs));\n+                withStaticLibs = !options.staticLibs.isEmpty();\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+main.opt.static-libs=Location of native static libraries\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    static final String STATIC_LIBS_PREFIX = \"static-lib\/\";\n@@ -91,0 +92,1 @@\n+            createStaticLibs(dir.resolve(\"static-lib\"));\n@@ -304,0 +306,1 @@\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n@@ -310,0 +313,1 @@\n+             \"--static-libs\", slp.toString(),\n@@ -331,1 +335,1 @@\n-                assertSameContent(lp.resolve(\"first.so\"),\n+                assertSameContent(lp.resolve(\"second.so\"),\n@@ -333,0 +337,2 @@\n+                assertSameContent(slp.resolve(\"third\").resolve(\"third.a\"),\n+                                  p.resolve(STATIC_LIBS_PREFIX).resolve(\"third\").resolve(\"third.a\"));\n@@ -438,0 +444,26 @@\n+\n+        assertMagic(jmod, 0);\n+    }\n+\n+    @Test\n+    public void testStaticLibs() throws IOException {\n+        Path jmod = MODS_DIR.resolve(\"fooLibs.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+        Path cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\");\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n+\n+        jmod(\"create\",\n+             \"--static-libs=\" + slp.toString(),\n+             \"--class-path\", cp.toString(),\n+             jmod.toString())\n+            .assertSuccess()\n+            .resultChecker(r -> {\n+                try (Stream<String> s1 = findFiles(slp).map(p -> STATIC_LIBS_PREFIX + p);\n+                     Stream<String> s2 = findFiles(cp).map(p -> CLASSES_PREFIX + p)) {\n+                    Set<String> expectedFilenames = Stream.concat(s1,s2)\n+                                                          .collect(toSet());\n+                    assertJmodContent(jmod, expectedFilenames);\n+                }\n+            });\n+\n+        assertMagic(jmod, 1);\n@@ -447,0 +479,1 @@\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n@@ -453,0 +486,1 @@\n+             \"--static-libs=\" + slp.toString(),\n@@ -460,3 +494,5 @@\n-                     Stream<String> s4 = findFiles(cf).map(p -> CONFIGS_PREFIX + p)) {\n-                    Set<String> expectedFilenames = Stream.concat(Stream.concat(s1,s2),\n-                                                                  Stream.concat(s3, s4))\n+                     Stream<String> s4 = findFiles(cf).map(p -> CONFIGS_PREFIX + p);\n+                     Stream<String> s5 = findFiles(slp).map(p -> STATIC_LIBS_PREFIX + p)) {\n+                    Set<String> expectedFilenames = Stream.concat(Stream.concat(Stream.concat(s1,s2),\n+                                                                                Stream.concat(s3, s4)),\n+                                                                  s5)\n@@ -923,0 +959,14 @@\n+    static void assertMagic(Path file, int minorVersion) throws IOException {\n+        try (InputStream in = Files.newInputStream(file)) {\n+            \/\/ validate the header\n+            byte[] magic = in.readNBytes(4);\n+            if (magic.length != 4) {\n+                throw new IOException(\"Invalid JMOD file: \" + file);\n+            }\n+            assertEquals(magic[0], 0x4A); \/\/ J\n+            assertEquals(magic[1], 0x4D); \/\/ M\n+            assertEquals(magic[2], 0x01);\n+            assertEquals(magic[3], minorVersion);\n+        }\n+    }\n+\n@@ -956,0 +1006,6 @@\n+    static void createStaticLibs(Path dir) throws IOException {\n+        List<String> files = Arrays.asList(\n+                \"first.a\", \"second.a\", \"third\" + File.separator + \"third.a\");\n+        createFiles(dir, files);\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"}]}