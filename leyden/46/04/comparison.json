{"files":[{"patch":"@@ -40,2 +40,8 @@\n-JMODS_DIR := $(IMAGES_OUTPUTDIR)\/jmods\n-JMODS_SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jmods\n+ifeq ($(STATIC_JMOD), true)\n+  JMODS_DIR := $(IMAGES_OUTPUTDIR)\/static-jmods\n+  JMODS_SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/static-jmods\n+  JMOD_TYPE_MSG := static $(SPACE)\n+else\n+  JMODS_DIR := $(IMAGES_OUTPUTDIR)\/jmods\n+  JMODS_SUPPORT_DIR := $(SUPPORT_OUTPUTDIR)\/images\/jmods\n+endif\n@@ -46,0 +52,2 @@\n+STATIC_LIBS_DIR ?= $(firstword $(wildcard $(addsuffix \/$(MODULE), \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_static-libs $(IMPORT_MODULES_STATIC_LIBS))))\n@@ -57,1 +65,1 @@\n-    $(LIBS_DIR) $(CMDS_DIR) $(CONF_DIR) $(CLASSES_DIR) \\\n+    $(LIBS_DIR) $(STATIC_LIBS_DIR) $(CMDS_DIR) $(CONF_DIR) $(CLASSES_DIR) \\\n@@ -80,0 +88,16 @@\n+\n+ifeq ($(STATIC_JMOD), true)\n+  ifneq ($(STATIC_LIBS_DIR), )\n+    STATIC_LIB_FILES := $(filter %$(STATIC_LIBRARY_SUFFIX), \\\n+          $(call FindFiles, $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/*\/static))\n+    $(eval $(call SetupCopyFiles, COPY_STATIC_LIBS, \\\n+        FLATTEN := true, \\\n+        SRC := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE), \\\n+        DEST := $(SUPPORT_OUTPUTDIR)\/modules_static-libs\/$(MODULE), \\\n+        FILES := $(STATIC_LIB_FILES), \\\n+    ))\n+    DEPS += $(COPY_STATIC_LIBS)\n+    JMOD_FLAGS += --static-libs $(STATIC_LIBS_DIR)\n+  endif\n+endif\n+\n@@ -214,1 +238,1 @@\n-  INTERIM_MSG := interim$(SPACE)\n+  JMOD_TYPE_MSG := interim$(SPACE)\n@@ -257,1 +281,1 @@\n-    WARN := Creating $(INTERIM_MSG)$(JMOD_FILE), \\\n+    WARN := Creating $(JMOD_TYPE_MSG)$(JMOD_FILE), \\\n","filename":"make\/CreateJmods.gmk","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -388,0 +388,1 @@\n+STATIC_JMOD_TARGETS := $(addsuffix -static-jmod, $(JMOD_MODULES))\n@@ -394,0 +395,4 @@\n+  $1-static-jmod:\n+\t+($(CD) $(TOPDIR)\/make && $(MAKE) $(MAKE_ARGS) \\\n+\t    $(patsubst %,-I%\/modules\/$1,$(PHASE_MAKEDIRS)) \\\n+\t    -f CreateJmods.gmk MODULE=$1 STATIC_JMOD=true)\n@@ -398,1 +403,1 @@\n-ALL_TARGETS += $(JMOD_TARGETS)\n+ALL_TARGETS += $(JMOD_TARGETS) $(STATIC_JMOD_TARGETS)\n@@ -1017,0 +1022,4 @@\n+    java.base-static-jmod: jrtfs-jar $(addsuffix -static-jmod, $(filter-out java.base, $(sort \\\n+        $(foreach m, $(filter-out $(call FindAllUpgradeableModules), $(JMOD_MODULES)), \\\n+          $m $(call FindTransitiveDepsForModules, $m) \\\n+        ))))\n@@ -1024,0 +1033,1 @@\n+  java.base-static-jmod: $(JVM_MAIN_TARGETS)\n@@ -1031,0 +1041,1 @@\n+\n@@ -1032,0 +1043,4 @@\n+\n+  $(foreach m, $(STATIC_LIBS_MODULES), $(eval $m_STATIC_JMOD_DEPS += $m-static-libs))\n+  $(foreach m, $(ALL_MODULES), $(eval $m-static-jmod: $($(m)_JMOD_DEPS) $($(m)_STATIC_JMOD_DEPS)))\n+\n@@ -1062,1 +1077,1 @@\n-      $(JMOD_TARGETS): create-buildjdk\n+      $(JMOD_TARGETS) $(STATIC_JMOD_TARGETS): create-buildjdk\n@@ -1073,1 +1088,1 @@\n-      $(JMOD_TARGETS) $(INTERIM_JMOD_TARGETS): java.base-libs java.base-copy \\\n+      $(JMOD_TARGETS) $(INTERIM_JMOD_TARGETS) $(STATIC_JMOD_TARGETS): java.base-libs java.base-copy \\\n@@ -1079,1 +1094,1 @@\n-    $(JMOD_TARGETS) $(INTERIM_JMOD_TARGETS): exploded-image\n+    $(JMOD_TARGETS) $(INTERIM_JMOD_TARGETS) $(STATIC_JMOD_TARGETS): exploded-image\n@@ -1086,1 +1101,1 @@\n-  $(JMOD_TARGETS): java.base-copy\n+  $(JMOD_TARGETS) $(STATIC_JMOD_TARGETS): java.base-copy\n@@ -1105,2 +1120,4 @@\n-    # The generated classlist needs to go into java.base-jmod.\n-    java.base-jmod jdk.jlink-jmod jdk-image legacy-jre-image: generate-link-opt-data\n+    # The generated classlist is needed by images and core jmods.\n+    java.base-jmod jdk.jlink-jmod: generate-link-opt-data\n+    java.base-static-jmod jdk.jlink-static-jmod: generate-link-opt-data\n+    jdk-image legacy-jre-image: generate-link-opt-data\n@@ -1182,0 +1199,2 @@\n+static-jmods: $(STATIC_JMOD_TARGETS)\n+\n@@ -1192,0 +1211,1 @@\n+$(foreach m, $(STATIC_LIBS_MODULES), $(eval $m: $m-static-libs))\n@@ -1334,1 +1354,1 @@\n-    copy java libs static-libs launchers jmods \\\n+    copy java libs static-libs launchers jmods static-jmods \\\n","filename":"make\/Main.gmk","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -68,0 +68,3 @@\n+  if test -d \"$IMPORT_MODULES_TOPDIR\/modules_libs\"; then\n+    IMPORT_MODULES_STATIC_LIBS=\"$IMPORT_MODULES_TOPDIR\/modules_static-libs\"\n+  fi\n@@ -87,0 +90,1 @@\n+  AC_SUBST(IMPORT_MODULES_STATIC_LIBS)\n","filename":"make\/autoconf\/source-dirs.m4","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+IMPORT_MODULES_STATIC_LIBS := @IMPORT_MODULES_STATIC_LIBS@\n","filename":"make\/autoconf\/spec.gmk.template","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2894,1 +2894,1 @@\n-          PTR_FORMAT \", size: %zu\",\n+          JULONG_FORMAT_X \", size: %zu\",\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private static final int JMOD_MINOR_VERSION = 0x00;\n+    private static final int JMOD_MINOR_VERSION = 0x01;\n@@ -50,1 +50,5 @@\n-        JMOD_MAJOR_VERSION, JMOD_MINOR_VERSION, \/* version 1.0 *\/\n+        JMOD_MAJOR_VERSION, JMOD_MINOR_VERSION, \/* version 1.1 *\/\n+    };\n+    private static final byte[] JMOD_MAGIC_NO_STATIC_LIB = {\n+        0x4A, 0x4D, \/* JM *\/\n+        JMOD_MAJOR_VERSION, 0x00, \/* version 1.0 *\/\n@@ -82,1 +86,2 @@\n-        NATIVE_CMDS(\"bin\");\n+        NATIVE_CMDS(\"bin\"),\n+        STATIC_LIBS(\"static-lib\");\n@@ -185,2 +190,6 @@\n-    public static void writeMagicNumber(OutputStream os) throws IOException {\n-        os.write(JMOD_MAGIC_NUMBER);\n+    public static void writeMagicNumber(OutputStream os, boolean withStaticLib) throws IOException {\n+        if (withStaticLib) {\n+            os.write(JMOD_MAGIC_NUMBER);\n+        } else {\n+            os.write(JMOD_MAGIC_NO_STATIC_LIB);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jmod\/JmodFile.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compressLevel) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, LocalDateTime date, int compressLevel, boolean withStaticLib) throws IOException {\n@@ -61,1 +61,1 @@\n-        return new JmodOutputStream(bos, date, compressLevel);\n+        return new JmodOutputStream(bos, date, compressLevel, withStaticLib);\n@@ -66,1 +66,1 @@\n-    private JmodOutputStream(OutputStream out, LocalDateTime date, int compressLevel) {\n+    private JmodOutputStream(OutputStream out, LocalDateTime date, int compressLevel, boolean withStaticLib) {\n@@ -71,1 +71,1 @@\n-            JmodFile.writeMagicNumber(out);\n+            JmodFile.writeMagicNumber(out, withStaticLib);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+    private boolean withStaticLibs = false;\n@@ -158,0 +159,1 @@\n+        List<Path> staticLibs;\n@@ -443,1 +445,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel, withStaticLibs)) {\n@@ -468,0 +470,1 @@\n+        final List<Path> staticLibs = options.staticLibs;\n@@ -498,0 +501,1 @@\n+            processSection(out, Section.STATIC_LIBS, staticLibs);\n@@ -1029,1 +1033,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date, options.compressLevel, withStaticLibs))\n@@ -1402,0 +1406,5 @@\n+        OptionSpec<List<Path>> staticLibs\n+                = parser.accepts(\"static-libs\", getMessage(\"main.opt.static-libs\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(DirPathConverter.INSTANCE);\n+\n@@ -1493,0 +1502,4 @@\n+            if (opts.has(staticLibs)) {\n+                options.staticLibs = getLastElement(opts.valuesOf(staticLibs));\n+                withStaticLibs = !options.staticLibs.isEmpty();\n+            }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+main.opt.static-libs=Location of native static libraries\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -168,0 +168,4 @@\n+`--static-libs` *path*\n+:   Specifies location of native static libraries to copy into the resulting\n+    JMOD file.\n+\n","filename":"src\/jdk.jlink\/share\/man\/jmod.md","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    static final String STATIC_LIBS_PREFIX = \"static-lib\/\";\n@@ -91,0 +92,1 @@\n+            createStaticLibs(dir.resolve(\"static-lib\"));\n@@ -304,0 +306,1 @@\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n@@ -310,0 +313,1 @@\n+             \"--static-libs\", slp.toString(),\n@@ -331,1 +335,1 @@\n-                assertSameContent(lp.resolve(\"first.so\"),\n+                assertSameContent(lp.resolve(\"second.so\"),\n@@ -333,0 +337,2 @@\n+                assertSameContent(slp.resolve(\"third\").resolve(\"third.a\"),\n+                                  p.resolve(STATIC_LIBS_PREFIX).resolve(\"third\").resolve(\"third.a\"));\n@@ -438,0 +444,26 @@\n+\n+        assertMagic(jmod, 1, 0);\n+    }\n+\n+    @Test\n+    public void testStaticLibs() throws IOException {\n+        Path jmod = MODS_DIR.resolve(\"fooLibs.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n+        Path cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\");\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n+\n+        jmod(\"create\",\n+             \"--static-libs=\" + slp.toString(),\n+             \"--class-path\", cp.toString(),\n+             jmod.toString())\n+            .assertSuccess()\n+            .resultChecker(r -> {\n+                try (Stream<String> s1 = findFiles(slp).map(p -> STATIC_LIBS_PREFIX + p);\n+                     Stream<String> s2 = findFiles(cp).map(p -> CLASSES_PREFIX + p)) {\n+                    Set<String> expectedFilenames = Stream.concat(s1,s2)\n+                                                          .collect(toSet());\n+                    assertJmodContent(jmod, expectedFilenames);\n+                }\n+            });\n+\n+        assertMagic(jmod, 1, 1);\n@@ -447,0 +479,1 @@\n+        Path slp = EXPLODED_DIR.resolve(\"foo\").resolve(\"static-lib\");\n@@ -453,0 +486,1 @@\n+             \"--static-libs=\" + slp.toString(),\n@@ -460,3 +494,5 @@\n-                     Stream<String> s4 = findFiles(cf).map(p -> CONFIGS_PREFIX + p)) {\n-                    Set<String> expectedFilenames = Stream.concat(Stream.concat(s1,s2),\n-                                                                  Stream.concat(s3, s4))\n+                     Stream<String> s4 = findFiles(cf).map(p -> CONFIGS_PREFIX + p);\n+                     Stream<String> s5 = findFiles(slp).map(p -> STATIC_LIBS_PREFIX + p)) {\n+                    Set<String> expectedFilenames = Stream.concat(Stream.concat(Stream.concat(s1,s2),\n+                                                                                Stream.concat(s3, s4)),\n+                                                                  s5)\n@@ -923,0 +959,14 @@\n+    static void assertMagic(Path file, int majorVersion, int minorVersion) throws IOException {\n+        try (InputStream in = Files.newInputStream(file)) {\n+            \/\/ validate the header\n+            byte[] magic = in.readNBytes(4);\n+            if (magic.length != 4) {\n+                throw new IOException(\"Invalid JMOD file: \" + file);\n+            }\n+            assertEquals(magic[0], 0x4A); \/\/ J\n+            assertEquals(magic[1], 0x4D); \/\/ M\n+            assertEquals(magic[2], majorVersion);\n+            assertEquals(magic[3], minorVersion);\n+        }\n+    }\n+\n@@ -956,0 +1006,6 @@\n+    static void createStaticLibs(Path dir) throws IOException {\n+        List<String> files = Arrays.asList(\n+                \"first.a\", \"second.a\", \"third\" + File.separator + \"third.a\");\n+        createFiles(dir, files);\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"}]}