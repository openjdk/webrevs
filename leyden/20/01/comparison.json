{"files":[{"patch":"@@ -5175,1 +5175,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -5190,1 +5190,1 @@\n-  predicate(CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int()));\n+  predicate(CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int()) && !SCCache::is_on_for_write());\n@@ -5205,1 +5205,1 @@\n-  predicate(CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int()));\n+  predicate(CompressedOops::shift() == 0 && size_fits_all_mem_uses(n->as_AddP(), n->in(AddPNode::Offset)->in(2)->get_int()) && !SCCache::is_on_for_write());\n@@ -5220,1 +5220,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0  && !SCCache::is_on_for_write());\n@@ -5235,1 +5235,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -5250,1 +5250,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -5265,1 +5265,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -7793,1 +7793,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4973,0 +4973,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_for_aot(d, s);\n+    return;\n+  }\n@@ -5006,0 +5010,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_not_null_for_aot(r, r);\n+    return;\n+  }\n@@ -5026,1 +5034,4 @@\n-\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_not_null_for_aot(dst, src);\n+    return;\n+  }\n@@ -5045,0 +5056,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    decode_heap_oop_for_aot(d, s);\n+    return;\n+  }\n@@ -5066,0 +5081,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    decode_heap_oop_not_null_for_aot(r, r);\n+    return;\n+  }\n@@ -5084,0 +5103,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    decode_heap_oop_not_null_for_aot(dst, src);\n+    return;\n+  }\n@@ -5099,0 +5122,74 @@\n+static Register pick_different_tmp(Register dst, Register src) {\n+  Register tmp = r0;\n+  if (tmp == src || tmp == dst) {\n+    tmp = r1;\n+    if (tmp == src || tmp == dst) {\n+      tmp = r2;\n+    }\n+  }\n+  return tmp;\n+}\n+\n+void MacroAssembler::encode_heap_oop_for_aot(Register dst, Register src) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register tmp = pick_different_tmp(dst, src);\n+  RegSet regs = RegSet::of(tmp);\n+\n+  push(regs, sp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  ldr(tmp, tmp);\n+  subs(dst, src, tmp);\n+  csel(dst, dst, zr, Assembler::HS);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  ldrw(tmp, tmp);\n+  lsrv(dst, dst, tmp);\n+  pop(regs, sp);\n+}\n+\n+void MacroAssembler::encode_heap_oop_not_null_for_aot(Register dst, Register src) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register tmp = pick_different_tmp(dst, src);\n+  RegSet regs = RegSet::of(tmp);\n+\n+  push(regs, sp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  ldr(tmp, tmp);\n+  sub(dst, src, tmp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  ldrw(tmp, tmp);\n+  lsrv(dst, dst, tmp);\n+  pop(regs, sp);\n+}\n+\n+void MacroAssembler::decode_heap_oop_for_aot(Register dst, Register src) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register tmp = pick_different_tmp(dst, src);\n+  RegSet regs = RegSet::of(tmp);\n+\n+  push(regs, sp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  ldrw(tmp, tmp);\n+  lslv(dst, src, tmp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  ldr(tmp, tmp);\n+  cmp(dst, zr);\n+  csel(tmp, zr, tmp, EQ);\n+  add(dst, dst, tmp);\n+  pop(regs, sp);\n+}\n+\n+void MacroAssembler::decode_heap_oop_not_null_for_aot(Register dst, Register src) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register tmp = pick_different_tmp(dst, src);\n+  RegSet regs = RegSet::of(tmp);\n+\n+  push(regs, sp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  ldrw(tmp, tmp);\n+  lslv(dst, src, tmp);\n+  lea(tmp, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  ldr(tmp, tmp);\n+  add(dst, dst, tmp);\n+  pop(regs, sp);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":98,"deletions":1,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -923,0 +923,7 @@\n+private:\n+  void encode_heap_oop_for_aot(Register dst, Register src);\n+  void decode_heap_oop_for_aot(Register dst, Register src);\n+  void encode_heap_oop_not_null_for_aot(Register dst, Register src);\n+  void decode_heap_oop_not_null_for_aot(Register dst, Register src);\n+\n+public:\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5777,0 +5777,24 @@\n+void MacroAssembler::encode_heap_oop_for_aot(Register r) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register oop = r;\n+  if (r == rcx) {\n+    push(rscratch1);\n+    movq(rscratch1, r);\n+    oop = rscratch1;\n+  } else {\n+    push(rcx);\n+  }\n+  testq(oop, oop);\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  cmovq(Assembler::equal, oop, rcx);\n+  subq(oop, rcx);\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  shrq(oop);\n+  if (r == rcx) {\n+    mov(r, rscratch1);\n+    pop(rscratch1);\n+  } else {\n+    pop(rcx);\n+  }\n+}\n+\n@@ -5783,0 +5807,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_for_aot(r);\n+    return;\n+  }\n@@ -5796,0 +5824,22 @@\n+void MacroAssembler::encode_heap_oop_not_null_for_aot(Register r) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register oop = r;\n+  if (r == rcx) {\n+    push(rscratch1);\n+    movq(rscratch1, r);\n+    oop = rscratch1;\n+  } else {\n+    push(rcx);\n+  }\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  subq(oop, rcx);\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  shrq(oop);\n+  if (r == rcx) {\n+    mov(r, rscratch1);\n+    pop(rscratch1);\n+  } else {\n+    pop(rcx);\n+  }\n+}\n+\n@@ -5808,0 +5858,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_not_null_for_aot(r);\n+    return;\n+  }\n@@ -5832,0 +5886,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    encode_heap_oop_not_null_for_aot(dst);\n+    return;\n+  }\n@@ -5841,1 +5899,26 @@\n-void  MacroAssembler::decode_heap_oop(Register r) {\n+void MacroAssembler::decode_heap_oop_for_aot(Register r) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Label done;\n+  Register narrowOop = r;\n+  if (r == rcx) {\n+    push(rscratch1);\n+    movq(rscratch1, r);\n+    narrowOop = rscratch1;\n+  } else {\n+    push(rcx);\n+  }\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  shlq(narrowOop);\n+  jccb(Assembler::equal, done);\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  addq(narrowOop, rcx);\n+  bind(done);\n+  if (r == rcx) {\n+    movq(r, rscratch1);\n+    pop(rscratch1);\n+  } else {\n+    pop(rcx);\n+  }\n+}\n+\n+void MacroAssembler::decode_heap_oop(Register r) {\n@@ -5845,0 +5928,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    decode_heap_oop_for_aot(r);\n+    return;\n+  }\n@@ -5860,1 +5947,23 @@\n-void  MacroAssembler::decode_heap_oop_not_null(Register r) {\n+void MacroAssembler::decode_heap_oop_not_null_for_aot(Register r) {\n+  assert(SCCache::is_on_for_write(), \"should be for AOT code\");\n+  Register narrowOop = r;\n+  if (r == rcx) {\n+    push(rscratch1);\n+    movq(rscratch1, r);\n+    narrowOop = rscratch1;\n+  } else {\n+    push(rcx);\n+  }\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_shift_address()));\n+  shlq(narrowOop);\n+  movptr(rcx, ExternalAddress(AOTRuntimeConstants::coops_base_address()));\n+  addq(narrowOop, rcx);\n+  if (r == rcx) {\n+    movq(r, rscratch1);\n+    pop(rscratch1);\n+  } else {\n+    pop(rcx);\n+  }\n+}\n+\n+void MacroAssembler::decode_heap_oop_not_null(Register r) {\n@@ -5867,0 +5976,4 @@\n+  if (SCCache::is_on_for_write()) {\n+    decode_heap_oop_not_null_for_aot(r);\n+    return;\n+  }\n@@ -5885,0 +5998,7 @@\n+  if (SCCache::is_on_for_write()) {\n+    if (dst != src) {\n+      movq(dst, src);\n+    }\n+    decode_heap_oop_not_null_for_aot(dst);\n+    return;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":122,"deletions":2,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -401,0 +401,5 @@\n+  void encode_heap_oop_for_aot(Register r);\n+  void decode_heap_oop_for_aot(Register r);\n+  void encode_heap_oop_not_null_for_aot(Register r);\n+  void decode_heap_oop_not_null_for_aot(Register r);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -424,0 +424,1 @@\n+#include <code\/SCCache.hpp>\n@@ -3083,1 +3084,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::shift() == Address::times_8));\n+  predicate(UseCompressedOops && (CompressedOops::shift() == Address::times_8) && !SCCache::is_on_for_write());\n@@ -3100,1 +3101,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3116,1 +3117,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3132,1 +3133,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3148,1 +3149,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3165,1 +3166,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3182,1 +3183,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3199,1 +3200,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n@@ -3217,1 +3218,1 @@\n-  predicate(CompressedOops::shift() == 0 && n->in(2)->in(3)->as_Type()->type()->is_long()->_lo >= 0);\n+  predicate(CompressedOops::shift() == 0 && n->in(2)->in(3)->as_Type()->type()->is_long()->_lo >= 0 && !SCCache::is_on_for_write());\n@@ -3234,1 +3235,1 @@\n-  predicate(CompressedOops::shift() == 0 && n->in(2)->in(3)->in(1)->as_Type()->type()->is_long()->_lo >= 0);\n+  predicate(CompressedOops::shift() == 0 && n->in(2)->in(3)->in(1)->as_Type()->type()->is_long()->_lo >= 0 && !SCCache::is_on_for_write());\n@@ -5998,1 +5999,1 @@\n-  predicate(CompressedOops::shift() == 0);\n+  predicate(CompressedOops::shift() == 0 && !SCCache::is_on_for_write());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -455,0 +455,1 @@\n+#if 0\n@@ -469,0 +470,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -679,2 +679,4 @@\n-  if (_compressedOopShift != (uint)CompressedOops::shift()) {\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with CompressedOops::shift() = %d vs current %d\", cache_path, _compressedOopShift, CompressedOops::shift());\n+#ifdef _LP64\n+  if (UseCompatibleCompressedOops && (_compressedOopShift != (uint)CompressedOops::shift())) {\n+    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with CompressedOops::shift() = %d vs current %d and UseCompatibleCompressedOops=%s\", cache_path, _compressedOopShift, CompressedOops::shift(),\n+                           UseCompatibleCompressedOops ? \"true\" : \"false\");\n@@ -683,0 +685,1 @@\n+#endif\n@@ -4183,0 +4186,4 @@\n+  if (UseCompressedOops) {\n+    _aot_runtime_constants._coops_base = CompressedOops::base();\n+    _aot_runtime_constants._coops_shift = CompressedOops::shift();\n+  }\n@@ -4190,0 +4197,2 @@\n+  coops_base_address(),\n+  coops_shift_address(),\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -621,0 +621,3 @@\n+  address _coops_base;\n+  uint _coops_shift;\n+\n@@ -635,0 +638,3 @@\n+  static address coops_base_address() { return (address)&_aot_runtime_constants._coops_base; }\n+  static address coops_shift_address() { return (address)&_aot_runtime_constants._coops_shift; }\n+\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}