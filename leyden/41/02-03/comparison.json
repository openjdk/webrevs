{"files":[{"patch":"@@ -92,2 +92,1 @@\n-    private static final class Transform {\n-        final SoftReference<LambdaForm> cache;\n+    private static final class Transform extends SoftReference<LambdaForm> {\n@@ -98,1 +97,1 @@\n-            cache = new SoftReference<LambdaForm>(result);\n+            super(result);\n@@ -139,4 +138,0 @@\n-\n-        public LambdaForm get() {\n-            return cache.get();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Iterator;\n@@ -44,1 +43,0 @@\n-import jdk.internal.misc.CDS;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    private final Object[] methodHandles;\n+    private final SoftReference<MethodHandle>[] methodHandles;\n@@ -64,1 +64,1 @@\n-    private final Object[] lambdaForms;\n+    private final SoftReference<LambdaForm>[] lambdaForms;\n@@ -112,1 +112,0 @@\n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n@@ -114,6 +113,2 @@\n-        Object entry = methodHandles[which];\n-        if (entry == null) {\n-            return null;\n-        } else {\n-            return ((SoftReference<MethodHandle>)entry).get();\n-        }\n+        SoftReference<MethodHandle> entry = methodHandles[which];\n+        return (entry != null) ? entry.get() : null;\n@@ -132,1 +127,0 @@\n-    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n@@ -134,6 +128,2 @@\n-        Object entry = lambdaForms[which];\n-        if (entry == null) {\n-            return null;\n-        } else {\n-            return ((SoftReference<LambdaForm>)entry).get();\n-        }\n+        SoftReference<LambdaForm> entry = lambdaForms[which];\n+        return (entry != null) ? entry.get() : null;\n@@ -157,0 +147,1 @@\n+     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n@@ -197,2 +188,2 @@\n-            this.lambdaForms   = new Object[LF_LIMIT];\n-            this.methodHandles = new Object[MH_LIMIT];\n+            this.lambdaForms   = new SoftReference[LF_LIMIT];\n+            this.methodHandles = new SoftReference[MH_LIMIT];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodTypeForm.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"}]}