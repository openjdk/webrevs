{"files":[{"patch":"@@ -1142,1 +1142,0 @@\n-    return false;\n@@ -1368,2 +1367,0 @@\n-  int i = method->invocation_count();\n-  int b = method->backedge_count();\n@@ -1373,19 +1370,8 @@\n-  } else {\n-    if (MethodTrainingData::have_data()) {\n-      MethodTrainingData* mtd = MethodTrainingData::find_fast(method);\n-      if (mtd == nullptr) {\n-        \/\/ We haven't see compilations of this method in training. It's either very cold or the behavior changed.\n-        \/\/ Feed it to the standard TF with no profiling delay.\n-        next_level = standard_transition<Predicate>(method, cur_level, false \/*delay_profiling*\/, disable_feedback);\n-      } else {\n-        next_level = trained_transition(method, cur_level, mtd, THREAD);\n-        if (cur_level == next_level) {\n-          \/\/ trained_transtion() is going to return the same level if no startup\/warmup optimizations apply.\n-          \/\/ In order to catch possible pathologies due to behavior change we feed the event to the regular\n-          \/\/ TF but with profiling delay.\n-          next_level = standard_transition<Predicate>(method, cur_level, true \/*delay_profiling*\/, disable_feedback);\n-        }\n-      }\n-    } else if (is_trivial(method) || method->is_native()) {\n-      next_level = CompilationModeFlag::disable_intermediate() ? CompLevel_full_optimization : CompLevel_simple;\n-    } else {\n+  } else if (is_trivial(method) || method->is_native()) {\n+    \/\/ We do not care if there is profiling data for these methods, throw them to compiler.\n+    next_level = CompilationModeFlag::disable_intermediate() ? CompLevel_full_optimization : CompLevel_simple;\n+  } else if (MethodTrainingData::have_data()) {\n+    MethodTrainingData* mtd = MethodTrainingData::find_fast(method);\n+    if (mtd == nullptr) {\n+      \/\/ We haven't see compilations of this method in training. It's either very cold or the behavior changed.\n+      \/\/ Feed it to the standard TF with no profiling delay.\n@@ -1393,0 +1379,8 @@\n+    } else {\n+      next_level = trained_transition(method, cur_level, mtd, THREAD);\n+      if (cur_level == next_level) {\n+        \/\/ trained_transtion() is going to return the same level if no startup\/warmup optimizations apply.\n+        \/\/ In order to catch possible pathologies due to behavior change we feed the event to the regular\n+        \/\/ TF but with profiling delay.\n+        next_level = standard_transition<Predicate>(method, cur_level, true \/*delay_profiling*\/, disable_feedback);\n+      }\n@@ -1394,0 +1388,2 @@\n+  } else {\n+    next_level = standard_transition<Predicate>(method, cur_level, false \/*delay_profiling*\/, disable_feedback);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"}]}