{"files":[{"patch":"@@ -541,1 +541,0 @@\n-#endif\n@@ -543,0 +542,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -235,16 +235,1 @@\n-\n-#if INCLUDE_CDS\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    address card_shift_address = (address)AOTRuntimeConstants::card_shift_address();\n-    __ lea(tmp2, ExternalAddress(card_shift_address));\n-    __ ldrb(tmp2, tmp2);\n-    __ lsrv(tmp1, store_addr, tmp2);                        \/\/ tmp1 := card address relative to card table base\n-  } else\n-#endif\n-  {\n-    __ lsr(tmp1, store_addr, CardTable::card_shift());     \/\/ tmp1 := card address relative to card table base\n-  }\n-\n+  __ lsr(tmp1, store_addr, CardTable::card_shift());     \/\/ tmp1 := card address relative to card table base\n@@ -584,14 +569,1 @@\n-#if INCLUDE_CDS\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    address card_shift_address = (address)AOTRuntimeConstants::card_shift_address();\n-    __ lea(rscratch1, ExternalAddress(card_shift_address));\n-    __ ldrb(rscratch1, rscratch1);\n-    __ lsrv(card_offset, card_offset, rscratch1);\n-  } else\n-#endif\n-  {\n-    __ lsr(card_offset, card_offset, CardTable::card_shift());\n-  }\n+  __ lsr(card_offset, card_offset, CardTable::card_shift());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":2,"deletions":30,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"code\/aotCodeCache.hpp\"\n@@ -36,2 +35,2 @@\n-void CardTableBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst) {\n-\n+void CardTableBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst, Register rscratch) {\n+  precond(rscratch != noreg);\n@@ -41,14 +40,2 @@\n-#if INCLUDE_CDS\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    address card_shift_address = (address)AOTRuntimeConstants::card_shift_address();\n-    __ lea(rscratch1, ExternalAddress(card_shift_address));\n-    __ ldrb(rscratch1, rscratch1);\n-    __ lsrv(obj, obj, rscratch1);\n-  } else\n-#endif\n-  {\n-    __ lsr(obj, obj, CardTable::card_shift());\n-  }\n+  __ lsr(obj, obj, CardTable::card_shift());\n+\n@@ -57,1 +44,1 @@\n-  __ load_byte_map_base(rscratch1);\n+  __ load_byte_map_base(rscratch);\n@@ -61,1 +48,1 @@\n-    __ ldrb(rscratch2,  Address(obj, rscratch1));\n+    __ ldrb(rscratch2,  Address(obj, rscratch));\n@@ -63,1 +50,1 @@\n-    __ strb(zr, Address(obj, rscratch1));\n+    __ strb(zr, Address(obj, rscratch));\n@@ -66,1 +53,1 @@\n-    __ strb(zr, Address(obj, rscratch1));\n+    __ strb(zr, Address(obj, rscratch));\n@@ -79,16 +66,2 @@\n-#if INCLUDE_CDS\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    address card_shift_address = (address)AOTRuntimeConstants::card_shift_address();\n-    __ lea(scratch, ExternalAddress(card_shift_address));\n-    __ ldrb(scratch, scratch);\n-    __ lsrv(start, start, scratch);\n-    __ lsrv(end, end, scratch);\n-  } else\n-#endif\n-  {\n-    __ lsr(start, start, CardTable::card_shift());\n-    __ lsr(end, end, CardTable::card_shift());\n-  }\n+  __ lsr(start, start, CardTable::card_shift());\n+  __ lsr(end, end, CardTable::card_shift());\n@@ -118,1 +91,1 @@\n-      store_check(masm, dst.base(), dst);\n+      store_check(masm, dst.base(), dst, tmp2);\n@@ -121,1 +94,1 @@\n-      store_check(masm, tmp3, dst);\n+      store_check(masm, tmp3, dst, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.cpp","additions":12,"deletions":39,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  void store_check(MacroAssembler* masm, Register obj, Address dst);\n+  void store_check(MacroAssembler* masm, Register obj, Address dst, Register rscratch);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,7 +134,0 @@\n-\/\/ return a register that differs from reg1, reg2, reg3, reg4\n-inline Register pick_different_reg(Register reg1, Register reg2, Register reg3, Register reg4) {\n-  RegSet available = (RegSet::of(rscratch1, rscratch2, rax, rbx) + rdx -\n-                      RegSet::of(reg1, reg2, reg3, reg4));\n-  return *(available.begin());\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -544,1 +544,0 @@\n-#endif\n@@ -546,0 +545,1 @@\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,0 +239,8 @@\n+\/\/ return a register that differs from reg1, reg2, reg3 and is not rcx\n+\n+static Register pick_different_reg(Register reg1, Register reg2 = noreg, Register reg3= noreg, Register reg4 = noreg) {\n+  RegSet available = (RegSet::of(rscratch1, rscratch2, rax, rbx) + rdx -\n+                      RegSet::of(reg1, reg2, reg3, reg4));\n+  return *(available.begin());\n+}\n+\n@@ -248,3 +256,0 @@\n-  __ movptr(tmp, store_addr);                                    \/\/ tmp := store address\n-  __ xorptr(tmp, new_val);                                       \/\/ tmp := store address ^ new value\n-\n@@ -255,1 +260,1 @@\n-  Register save = pick_different_reg(rcx, tmp, new_val, store_addr);\n+\n@@ -257,1 +262,13 @@\n-    __ shrptr_aotrc(tmp, save, AOTRuntimeConstants::grain_shift_address());\n+    address grain_shift_addr = AOTRuntimeConstants::grain_shift_address();\n+    Register save = pick_different_reg(rcx, tmp, new_val, store_addr);\n+    __ push(save);\n+    __ movptr(save, store_addr);\n+    __ xorptr(save, new_val);\n+    __ push(rcx);\n+    __ lea(rcx, ExternalAddress(grain_shift_addr));\n+    __ movptr(rcx, Address(rcx, 0));\n+    __ shrptr(save);\n+    __ pop(rcx);\n+    __ mov(tmp, save);\n+    __ pop(save);\n+    __ jcc(Assembler::equal, done);\n@@ -261,0 +278,2 @@\n+    __ movptr(tmp, store_addr);                                    \/\/ tmp := store address\n+    __ xorptr(tmp, new_val);                                       \/\/ tmp := store address ^ new value\n@@ -262,0 +281,1 @@\n+    __ jcc(Assembler::equal, done);\n@@ -263,1 +283,0 @@\n-  __ jcc(Assembler::equal, done);\n@@ -272,1 +291,1 @@\n-\n+  __ shrptr(tmp, CardTable::card_shift());                       \/\/ tmp := card address relative to card table base\n@@ -274,10 +293,0 @@\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    __ shrptr_aotrc(tmp, save, AOTRuntimeConstants::card_shift_address());\n-  } else\n-#endif \/\/ INCLUDE_CDS\n-  {\n-    __ shrptr(tmp, CardTable::card_shift());                       \/\/ tmp := card address relative to card table base\n-  }\n@@ -286,1 +295,0 @@\n-#if INCLUDE_CDS\n@@ -611,2 +619,2 @@\n-  const Register cardtable = rcx;\n-  const Register card_addr = rax;\n+  const Register cardtable = rax;\n+  const Register card_addr = rcx;\n@@ -615,0 +623,2 @@\n+  __ shrptr(card_addr, CardTable::card_shift());\n+\n@@ -616,12 +626,0 @@\n-  \/\/ AOT code needs to load the barrier card shift from the aot\n-  \/\/ runtime constants area in the code cache otherwise we can compile\n-  \/\/ it as an immediate operand\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    \/\/ cardtable = rcx is not used yet\n-    __ mov32(rcx, ExternalAddress(AOTRuntimeConstants::card_shift_address()));\n-    __ shrptr(card_addr);\n-  } else\n-#endif \/\/ INCLUDE_CDS\n-  {\n-    __ shrptr(card_addr, CardTable::card_shift());\n-  }\n@@ -632,1 +630,3 @@\n-  } else {\n+  } else\n+#endif \/\/ INCLUDE_CDS\n+  {\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -63,11 +63,2 @@\n-#if INCLUDE_CDS\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    Register save = pick_different_reg(rcx, tmp, addr, end); \/\/ any could be rcx\n-    __ shrptr_aotrc(addr, save, AOTRuntimeConstants::card_shift_address());\n-    __ shrptr_aotrc(end, save, AOTRuntimeConstants::card_shift_address());\n-  } else\n-#endif\n-  {\n-    __ shrptr(addr, CardTable::card_shift());\n-    __ shrptr(end, CardTable::card_shift());\n-  }\n+  __ shrptr(addr, CardTable::card_shift());\n+  __ shrptr(end, CardTable::card_shift());\n@@ -93,1 +84,1 @@\n-void CardTableBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst) {\n+void CardTableBarrierSetAssembler::store_check(MacroAssembler* masm, Register obj, Address dst, Register rscratch) {\n@@ -101,10 +92,1 @@\n-#if INCLUDE_CDS\n-  Register save = obj == rscratch1 ? rscratch2 : rscratch1;\n-  precond(save != rcx);\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    __ shrptr_aotrc(obj, save, AOTRuntimeConstants::card_shift_address());\n-  } else\n-#endif\n-  {\n-    __ shrptr(obj, CardTable::card_shift());\n-  }\n+  __ shrptr(obj, CardTable::card_shift());\n@@ -113,0 +95,1 @@\n+  precond(rscratch != noreg);\n@@ -122,3 +105,2 @@\n-    __ push_ppx(save);\n-    __ movptr(save, ExternalAddress(AOTRuntimeConstants::card_table_address()));\n-    card_addr = Address(save, obj, Address::times_1, 0);\n+    __ movptr(rscratch, ExternalAddress(AOTRuntimeConstants::card_table_address()));\n+    card_addr = Address(rscratch, obj, Address::times_1, 0);\n@@ -136,1 +118,1 @@\n-    card_addr = __ as_Address(ArrayAddress(cardtable, index), rscratch1);\n+    card_addr = __ as_Address(ArrayAddress(cardtable, index), rscratch);\n@@ -149,5 +131,0 @@\n-#if INCLUDE_CDS\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    __ pop_ppx(save);\n-  }\n-#endif\n@@ -170,1 +147,1 @@\n-      store_check(masm, dst.base(), dst);\n+      store_check(masm, dst.base(), dst, tmp2);\n@@ -173,1 +150,1 @@\n-      store_check(masm, tmp1, dst);\n+      store_check(masm, tmp1, dst, tmp2);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.cpp","additions":10,"deletions":33,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  void store_check(MacroAssembler* masm, Register obj, Address dst);\n+  void store_check(MacroAssembler* masm, Register obj, Address dst, Register rscratch);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/cardTableBarrierSetAssembler_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2527,18 +2527,0 @@\n-void MacroAssembler::shrptr_aotrc(Register reg, Register save, address adr) {\n-#if INCLUDE_CDS\n-  precond(AOTCodeCache::is_on_for_dump());\n-  \/\/ all aotrc field addresses should be registered in the AOTCodeCache address table\n-  assert(AOTRuntimeConstants::contains(adr), \"address out of range for data area\");\n-  push_ppx(save);\n-  movptr(save, reg); \/\/ reg could be rcx\n-  push_ppx(rcx);\n-  mov32(rcx, ExternalAddress(adr));\n-  shrptr(save);\n-  pop_ppx(rcx);\n-  movptr(reg, save);\n-  pop_ppx(save);\n-#else\n-  ShouldNotCallThis();\n-#endif\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -820,2 +820,0 @@\n-  void shrptr_aotrc(Register reg, Register save, address adr);\n-\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+  _gcCardSize            = GCCardSizeInBytes;\n@@ -666,0 +667,5 @@\n+  if (_gcCardSize != (uint)GCCardSizeInBytes) {\n+    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with GCCardSizeInBytes = %d vs current %d\", _gcCardSize, GCCardSizeInBytes);\n+    return false;\n+  }\n+\n@@ -3815,1 +3821,0 @@\n-    _aot_runtime_constants._card_shift = ctbs->card_shift();\n@@ -3822,1 +3827,0 @@\n-  card_shift_address(),\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -320,0 +320,1 @@\n+    uint _gcCardSize;\n@@ -836,1 +837,0 @@\n-  uint    _card_shift;\n@@ -852,1 +852,0 @@\n-  static address card_shift_address() { return (address)&_aot_runtime_constants._card_shift; }\n@@ -860,1 +859,0 @@\n-  static address card_shift_address()    { return nullptr; }\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,23 +72,0 @@\n-#if INCLUDE_CDS\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    \/\/ AOT code needs to load the barrier card shift from the aot\n-    \/\/ runtime constants area.\n-#ifdef X86\n-    LIR_Opr card_shift = gen->shiftCountOpr(); \/\/ To use ECX register\n-#else \/\/ X86\n-    LIR_Opr card_shift = gen->new_register(T_INT);\n-#endif \/\/ X86\n-    LIR_Opr card_shift_addr = LIR_OprFact::intptrConst(AOTRuntimeConstants::card_shift_address());\n-    LIR_Opr card_shift_reg = gen->new_pointer_register();\n-    LIR_Address* card_shift_indirect = new LIR_Address(card_shift_reg, 0, T_INT);\n-    __ move(card_shift_addr, card_shift_reg);\n-    __ move(card_shift_indirect, card_shift);\n-    if (two_operand_lir_form) {\n-      LIR_Opr addr_opr = LIR_OprFact::address(new LIR_Address(addr, addr->type()));\n-      __ leal(addr_opr, tmp);\n-      __ unsigned_shift_right(tmp, card_shift, tmp, LIR_Opr::illegalOpr());\n-    } else {\n-      __ unsigned_shift_right(addr, card_shift, tmp, LIR_Opr::illegalOpr());\n-    }\n-  } else \/\/ AOTCodeCache::is_on_for_dump()\n-#endif \/\/ INCLUDE_CDS\n","filename":"src\/hotspot\/share\/gc\/shared\/c1\/cardTableBarrierSetC1.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,11 +39,0 @@\n-Node* CardTableBarrierSetC2::card_shift_node(IdealKit* kit) const {\n-#if INCLUDE_CDS\n-  if (AOTCodeCache::is_on_for_dump()) {\n-    \/\/ load the card shift from the AOT Runtime Constants area\n-    Node* card_shift_adr = kit->makecon(TypeRawPtr::make(AOTRuntimeConstants::card_shift_address()));\n-    return kit->load_aot_const(card_shift_adr, TypeInt::POS);\n-  }\n-#endif\n-  return kit->ConI(CardTable::card_shift());\n-}\n-\n@@ -108,1 +97,1 @@\n-  Node* card_offset = __ URShiftX(cast, card_shift_node(&ideal));\n+  Node* card_offset = __ URShiftX(cast, __ ConI(CardTable::card_shift()));\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-  Node* card_shift_node(IdealKit* kit) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}