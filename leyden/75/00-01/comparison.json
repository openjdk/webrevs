{"files":[{"patch":"@@ -233,1 +233,6 @@\n-  return UseCodeLoadThread && is_using_code();\n+  \/\/ We cannot trust AOTCodeCache status here, due to bootstrapping circularity.\n+  \/\/ Compilation policy init runs before AOT cache is fully initialized, so the\n+  \/\/ normal AOT cache status check would always fail.\n+  \/\/ See: https:\/\/bugs.openjdk.org\/browse\/JDK-8358690\n+  \/\/ return UseCodeLoadThread && is_using_code();\n+  return UseCodeLoadThread && AOTCodeCaching && CDSConfig::is_using_archive();\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -666,7 +666,1 @@\n-    \/\/ We cannot trust AOTCodeCache status here, due to bootstrapping circularity.\n-    \/\/ Compilation policy init runs before AOT cache is fully initialized, so the\n-    \/\/ normal AOT cache status check would always fail.\n-    \/\/ See: https:\/\/bugs.openjdk.org\/browse\/JDK-8358690\n-    \/\/\n-    \/\/ if (AOTCodeCache::is_code_load_thread_on()) {\n-    if (AOTCodeCaching && UseCodeLoadThread && CDSConfig::is_using_archive()) {\n+    if (AOTCodeCache::is_code_load_thread_on()) {\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}