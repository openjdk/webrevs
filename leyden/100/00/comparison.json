{"files":[{"patch":"@@ -764,1 +764,1 @@\n-bool VM_Version::supports_features(void* features_buffer) {\n+bool VM_Version::supports_features(void* features_buffer, uint cpu_features_number) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-  static bool supports_features(void* features_to_test);\n+  static bool supports_features(void* features_to_test, uint cpu_features_number);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3313,0 +3313,4 @@\n+uint VM_Version::cpu_features_number() {\n+  return _features.cpu_features_number();\n+}\n+\n@@ -3319,1 +3323,1 @@\n-bool VM_Version::supports_features(void* features_buffer) {\n+bool VM_Version::supports_features(void* features_buffer, uint cpu_features_number) {\n@@ -3321,1 +3325,1 @@\n-  return _features.supports_features(features_to_test);\n+  return _features.supports_features(features_to_test, cpu_features_number);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -513,1 +513,8 @@\n-    bool supports_features(VM_Features* features_to_test) {\n+    uint cpu_features_number() {\n+      return MAX_CPU_FEATURES;\n+    }\n+\n+    bool supports_features(VM_Features* features_to_test, uint cpu_features_num) {\n+      if (cpu_features_num != cpu_features_number()) {\n+        return false;\n+      }\n@@ -1098,0 +1105,3 @@\n+  \/\/ Returns number of cpu features\n+  static uint cpu_features_number();\n+\n@@ -1102,1 +1112,1 @@\n-  static bool supports_features(void* features_to_test);\n+  static bool supports_features(void* features_to_test, uint cpu_features_number);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -734,0 +734,3 @@\n+  uint cpu_features_number = *(uint *)cache->addr(offset);\n+  assert(cpu_features_number == VM_Version::cpu_features_number(), \"must be\");\n+  offset += sizeof(uint);\n@@ -743,1 +746,1 @@\n-  if (AOTCodeCPUFeatureCheck && !VM_Version::supports_features(cached_cpu_features_buffer)) {\n+  if (AOTCodeCPUFeatureCheck && !VM_Version::supports_features(cached_cpu_features_buffer, cpu_features_number)) {\n@@ -745,4 +748,9 @@\n-      ResourceMark rm; \/\/ required for stringStream::as_string()\n-      stringStream ss;\n-      VM_Version::get_missing_features_name(cached_cpu_features_buffer, ss);\n-      log.print_cr(\"AOT Code Cache disabled: required cpu features are missing: %s\", ss.as_string());\n+      if (cpu_features_number != (uint)VM_Version::cpu_features_number()) {\n+        log.print_cr(\"AOT Code Cache disabled: archived features number: %d, local features number: %d\",\n+                     cpu_features_number, (uint)VM_Version::cpu_features_number());\n+      } else {\n+        ResourceMark rm; \/\/ required for stringStream::as_string()\n+        stringStream ss;\n+        VM_Version::get_missing_features_name(cached_cpu_features_buffer, ss);\n+        log.print_cr(\"AOT Code Cache disabled: required cpu features are missing: %s\", ss.as_string());\n+      }\n@@ -1107,1 +1115,1 @@\n-void AOTCodeCache::store_cpu_features(char*& buffer, uint buffer_size) {\n+void AOTCodeCache::store_cpu_features(char*& buffer, uint buffer_size, uint cpu_features_number) {\n@@ -1111,0 +1119,3 @@\n+  uint* number_ptr = (uint *)buffer;\n+  *number_ptr = cpu_features_number;\n+  buffer += sizeof(uint);\n@@ -1150,0 +1161,1 @@\n+    uint cpu_features_number = VM_Version::cpu_features_number();\n@@ -1162,1 +1174,1 @@\n-    store_cpu_features(current, cpu_features_size);\n+    store_cpu_features(current, cpu_features_size, cpu_features_number);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-  void store_cpu_features(char*& buffer, uint buffer_size);\n+  void store_cpu_features(char*& buffer, uint buffer_size, uint cpu_features_number);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,0 +237,3 @@\n+  \/\/ Returns number of cpu features\n+  static uint cpu_features_number() { return 0; }\n+\n@@ -242,1 +245,1 @@\n-  static bool supports_features(void* features_to_test) { return false; };\n+  static bool supports_features(void* features_to_test, uint cpu_features_number) { return false; };\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}