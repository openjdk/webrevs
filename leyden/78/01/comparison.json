{"files":[{"patch":"@@ -5135,1 +5135,2 @@\n-    } else if (((uint64_t)CompressedKlassPointers::base() & 0xffffffff) == 0\n+    } else if (!AOTCodeCache::is_on_for_dump() &&\n+               ((uint64_t)CompressedKlassPointers::base() & 0xffffffff) == 0\n@@ -5394,1 +5395,1 @@\n-  if (AOTCodeCache::is_on_for_dump()) {\n+  if (CompressedKlassPointers::base() != nullptr && AOTCodeCache::is_on_for_dump()) {\n@@ -5460,1 +5461,1 @@\n-  if (AOTCodeCache::is_on_for_dump()) {\n+  if (CompressedKlassPointers::base() != nullptr && AOTCodeCache::is_on_for_dump()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5506,3 +5506,8 @@\n-        const intptr_t base_right_shifted =\n-            (intptr_t)CompressedKlassPointers::base() >> CompressedKlassPointers::shift();\n-        movptr(dst, base_right_shifted);\n+        if (AOTCodeCache::is_on_for_dump()) {\n+          movptr(dst, ExternalAddress(CompressedKlassPointers::base_addr()));\n+          shrq(dst, CompressedKlassPointers::shift());\n+        } else {\n+          const intptr_t base_right_shifted =\n+               (intptr_t)CompressedKlassPointers::base() >> CompressedKlassPointers::shift();\n+          movptr(dst, base_right_shifted);\n+        }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -703,0 +703,1 @@\n+  _compressedKlassBase   = CompressedKlassPointers::base();\n@@ -770,0 +771,5 @@\n+  if ((_compressedKlassBase == nullptr || CompressedKlassPointers::base() == nullptr) && (_compressedKlassBase != CompressedKlassPointers::base())) {\n+    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: incompatible CompressedKlassPointers::base(): %p vs current %p\", _compressedKlassBase, CompressedKlassPointers::base());\n+    return false;\n+  }\n+\n@@ -773,1 +779,1 @@\n-    AOTStubCaching = false;\n+    return false;\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -341,0 +341,1 @@\n+    address _compressedKlassBase;\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"code\/aotCodeCache.hpp\"\n@@ -1980,1 +1981,3 @@\n-  assert(!UseCompactObjectHeaders || tkls->offset() != in_bytes(Klass::prototype_header_offset()),\n+  assert(!UseCompactObjectHeaders ||\n+         AOTCodeCache::is_on_for_dump() ||\n+         tkls->offset() != in_bytes(Klass::prototype_header_offset()),\n@@ -2165,1 +2168,3 @@\n-      if (UseCompactObjectHeaders) {\n+      \/\/ Class encoding in prototype header may change between runs.\n+      \/\/ Force loading prototype header when AOT code is generated.\n+      if (UseCompactObjectHeaders && !AOTCodeCache::is_on_for_dump()) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}