{"files":[{"patch":"@@ -4083,2 +4083,2 @@\n-  MethodDetails methodDetails(callee);\n-  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, methodDetails);\n+  MethodDetails method_details(callee);\n+  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, method_details);\n@@ -4088,1 +4088,1 @@\n-    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, methodDetails, upcall);\n+    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, method_details, upcall);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2680,2 +2680,2 @@\n-  MethodDetails methodDetails(method());\n-  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, methodDetails);\n+  MethodDetails method_details(method());\n+  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, method_details);\n@@ -2688,1 +2688,1 @@\n-    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, methodDetails, upcall);\n+    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, method_details, upcall);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+\n+\n+\n@@ -30,0 +33,2 @@\n+#include \"interpreter\/linkResolver.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n@@ -33,0 +38,2 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/macros.hpp\"\n@@ -47,1 +54,2 @@\n-bool CDSEndTrainingUpcall::register_upcalls() {\n+bool CDSEndTrainingUpcall::register_upcalls()\n+{\n@@ -85,1 +93,1 @@\n-bool CDSEndTrainingUpcall::filter_method_callback(MethodDetails& methodDetails)\n+bool CDSEndTrainingUpcall::filter_method_callback(MethodDetails& method_details)\n@@ -88,1 +96,1 @@\n-    return _matcher->match(methodDetails);\n+    return _matcher->match(method_details);\n@@ -103,3 +111,3 @@\n-  const char* seperatorStr = \",\";\n-  const char* countStr = \"count=\";\n-  const size_t countStrLen = strlen(countStr);\n+  const char* seperator_str = \",\";\n+  const char* count_str = \"count=\";\n+  const size_t count_str_len = strlen(count_str);\n@@ -110,1 +118,1 @@\n-    method_pattern = strtok_r(line, seperatorStr, &line);\n+    method_pattern = strtok_r(line, seperator_str, &line);\n@@ -113,2 +121,2 @@\n-      if (strncmp(method_pattern, countStr, countStrLen) == 0) {\n-        int number = atoi(method_pattern + countStrLen);\n+      if (strncmp(method_pattern, count_str, count_str_len) == 0) {\n+        int number = atoi(method_pattern + count_str_len);\n","filename":"src\/hotspot\/share\/cds\/cdsEndTrainingUpcall.cpp","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,6 +30,0 @@\n-\/\/#include \"code\/codeBlob.hpp\"\n-\/\/#include \"code\/vmreg.hpp\"\n-#include \"interpreter\/linkResolver.hpp\"\n-#include \"memory\/allStatic.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"utilities\/macros.hpp\"\n@@ -54,1 +47,1 @@\n-  static bool filter_method_callback(MethodDetails& methodDetails);\n+  static bool filter_method_callback(MethodDetails& method_details);\n","filename":"src\/hotspot\/share\/cds\/cdsEndTrainingUpcall.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -363,4 +363,4 @@\n-bool MethodMatcher::matches(MethodDetails& methodDetails) const {\n-  if (match(methodDetails.class_name(), this->class_name(), _class_mode) &&\n-      match(methodDetails.method_name(), this->method_name(), _method_mode) &&\n-      ((this->signature() == nullptr) || match(methodDetails.signature(), this->signature(), Prefix))) {\n+bool MethodMatcher::matches(MethodDetails& method_details) const {\n+  if (match(method_details.class_name(), this->class_name(), _class_mode) &&\n+      match(method_details.method_name(), this->method_name(), _method_mode) &&\n+      ((this->signature() == nullptr) || match(method_details.signature(), this->signature(), Prefix))) {\n@@ -416,1 +416,1 @@\n-bool BasicMatcher::match(MethodDetails& methodDetails) {\n+bool BasicMatcher::match(MethodDetails& method_details) {\n@@ -418,1 +418,1 @@\n-    if (current->matches(methodDetails)) {\n+    if (current->matches(method_details)) {\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  bool matches(MethodDetails& methodDetails) const;\n+  bool matches(MethodDetails& method_details) const;\n@@ -88,1 +88,1 @@\n-  bool match(MethodDetails& methodDetails);\n+  bool match(MethodDetails& method_details);\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-  MethodDetails methodDetails(method);\n-  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, methodDetails);\n+  MethodDetails method_details(method);\n+  RuntimeUpcallInfo* upcall = RuntimeUpcalls::get_first_upcall(RuntimeUpcallType::onMethodEntry, method_details);\n@@ -54,1 +54,1 @@\n-    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, methodDetails, upcall);\n+    upcall = RuntimeUpcalls::get_next_upcall(RuntimeUpcallType::onMethodEntry, method_details, upcall);\n","filename":"src\/hotspot\/share\/opto\/parseHelper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,4 +36,4 @@\n-    if (_methodHandle != nullptr) {\n-      _class_name = (*_methodHandle)->method_holder()->name();\n-    } else if (_ciMethod != nullptr) {\n-      _class_name = _ciMethod->holder()->name()->get_symbol();\n+    if (_method_handle != nullptr) {\n+      _class_name = (*_method_handle)->method_holder()->name();\n+    } else if (_ci_method != nullptr) {\n+      _class_name = _ci_method->holder()->name()->get_symbol();\n@@ -49,4 +49,4 @@\n-    if (_methodHandle != nullptr) {\n-      _method_name = (*_methodHandle)->name();\n-    } else if (_ciMethod != nullptr) {\n-      _method_name = _ciMethod->name()->get_symbol();\n+    if (_method_handle != nullptr) {\n+      _method_name = (*_method_handle)->name();\n+    } else if (_ci_method != nullptr) {\n+      _method_name = _ci_method->name()->get_symbol();\n@@ -62,4 +62,4 @@\n-    if (_methodHandle != nullptr) {\n-      _signature = (*_methodHandle)->signature();\n-    } else if (_ciMethod != nullptr) {\n-      _signature = _ciMethod->signature()->as_symbol()->get_symbol();\n+    if (_method_handle != nullptr) {\n+      _signature = (*_method_handle)->signature();\n+    } else if (_ci_method != nullptr) {\n+      _signature = _ci_method->signature()->as_symbol()->get_symbol();\n","filename":"src\/hotspot\/share\/runtime\/methodDetails.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-  const methodHandle* _methodHandle;\n-  const ciMethod* _ciMethod;\n+  const methodHandle* _method_handle;\n+  const ciMethod* _ci_method;\n@@ -47,2 +47,2 @@\n-  MethodDetails(const methodHandle* methodHandle, const ciMethod* ciMethod, const Method* method) :\n-    _methodHandle(methodHandle), _ciMethod(ciMethod), _method(method),\n+  MethodDetails(const methodHandle* method_handle, const ciMethod* ci_method, const Method* method) :\n+    _method_handle(method_handle), _ci_method(ci_method), _method(method),\n","filename":"src\/hotspot\/share\/runtime\/methodDetails.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n@@ -31,1 +32,1 @@\n-bool RuntimeUpcallNop::methodFilterResult = false;\n+bool RuntimeUpcallNop::_method_filter_result = false;\n@@ -34,0 +35,5 @@\n+{\n+  return RuntimeUpcallNop::register_upcalls();\n+}\n+\n+bool RuntimeUpcallNop::register_upcalls()\n@@ -37,4 +43,4 @@\n-  const char* methodEntry = \"onMethodEntry:\";\n-  const size_t methodEntryLen = strlen(methodEntry);\n-  const char* methodExit = \"onMethodExit:\";\n-  const size_t methodExitLen = strlen(methodExit);\n+  const char* method_entry = \"onMethodEntry:\";\n+  const size_t method_entry_len = strlen(method_entry);\n+  const char* method_exit = \"onMethodExit:\";\n+  const size_t method_exit_len = strlen(method_exit);\n@@ -42,4 +48,4 @@\n-  const char* filterAll = \"all\";\n-  const size_t filterAllLen = strlen(filterAll);\n-  const char* filterNone = \"none\";\n-  const size_t filterNoneLen = strlen(filterNone);\n+  const char* filter_all = \"all\";\n+  const size_t filter_all_len = strlen(filter_all);\n+  const char* filter_none = \"none\";\n+  const size_t filter_none_len = strlen(filter_none);\n@@ -47,2 +53,2 @@\n-  const char* filterOption = nullptr;\n-  RuntimeUpcallType upcallType = RuntimeUpcallType::onMethodEntry;\n+  const char* filter_option = nullptr;\n+  RuntimeUpcallType upcall_type = RuntimeUpcallType::onMethodEntry;\n@@ -51,6 +57,6 @@\n-  if (strncmp(command, methodEntry, methodEntryLen) == 0) {\n-    filterOption = command + methodEntryLen;\n-    upcallType = RuntimeUpcallType::onMethodEntry;\n-  } else if (strncmp(command, methodExit, methodExitLen) == 0) {\n-    filterOption = command + methodExitLen;\n-    upcallType = RuntimeUpcallType::onMethodExit;\n+  if (strncmp(command, method_entry, method_entry_len) == 0) {\n+    filter_option = command + method_entry_len;\n+    upcall_type = RuntimeUpcallType::onMethodEntry;\n+  } else if (strncmp(command, method_exit, method_exit_len) == 0) {\n+    filter_option = command + method_exit_len;\n+    upcall_type = RuntimeUpcallType::onMethodExit;\n@@ -64,5 +70,5 @@\n-  assert(filterOption != nullptr, \"sanity\");\n-  if (strncmp(filterOption, filterAll, filterAllLen) == 0) {\n-    RuntimeUpcallNop::methodFilterResult = true;\n-  } else if (strncmp(filterOption, filterNone, filterNoneLen) == 0) {\n-    RuntimeUpcallNop::methodFilterResult = false;\n+  assert(filter_option != nullptr, \"sanity\");\n+  if (strncmp(filter_option, filter_all, filter_all_len) == 0) {\n+    _method_filter_result = true;\n+  } else if (strncmp(filter_option, filter_none, filter_none_len) == 0) {\n+    _method_filter_result = false;\n@@ -77,1 +83,1 @@\n-        upcallType,\n+        upcall_type,\n@@ -86,1 +92,1 @@\n-bool RuntimeUpcallNop::filter_method_callback(MethodDetails& methodDetails)\n+bool RuntimeUpcallNop::filter_method_callback(MethodDetails& method_details)\n@@ -88,1 +94,1 @@\n-  return methodFilterResult;\n+  return _method_filter_result;\n","filename":"src\/hotspot\/share\/runtime\/runtimeUpcallNop.cpp","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include \"memory\/allStatic.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -31,3 +29,0 @@\n-\/\/#include \"code\/codeBlob.hpp\"\n-\/\/#include \"code\/vmreg.hpp\"\n-#include \"interpreter\/linkResolver.hpp\"\n@@ -36,0 +31,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -41,0 +37,2 @@\n+private:\n+  static bool _method_filter_result;\n@@ -42,2 +40,2 @@\n-  static bool methodFilterResult;\n-  static bool filter_method_callback(MethodDetails& methodDetails);\n+  static bool register_upcalls();\n+  static bool filter_method_callback(MethodDetails& method_details);\n","filename":"src\/hotspot\/share\/runtime\/runtimeUpcallNop.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,6 +55,6 @@\n-void RuntimeUpcalls::mark_for_upcalls(RuntimeUpcallType upcallType, const methodHandle& method) {\n-  if (_upcalls[upcallType] != nullptr) {\n-    MethodDetails md(method);\n-    for(RuntimeUpcallInfo* info : *(_upcalls[upcallType])) {\n-      if(info->includes(md)) {\n-        switch(upcallType) {\n+void RuntimeUpcalls::mark_for_upcalls(RuntimeUpcallType upcall_type, const methodHandle& method) {\n+  if (_upcalls[upcall_type] != nullptr) {\n+    MethodDetails method_details(method);\n+    for(RuntimeUpcallInfo* info : *(_upcalls[upcall_type])) {\n+      if(info->includes(method_details)) {\n+        switch(upcall_type) {\n@@ -71,2 +71,2 @@\n-bool RuntimeUpcalls::register_upcall(RuntimeUpcallType upcallType, RuntimeUpcallInfo* info) {\n-  assert(upcallType != onMethodExit, \"Upcalls on method exit are not supported yet\");\n+bool RuntimeUpcalls::register_upcall(RuntimeUpcallType upcall_type, RuntimeUpcallInfo* info) {\n+  assert(upcall_type != onMethodExit, \"Upcalls on method exit are not supported yet\");\n@@ -74,2 +74,2 @@\n-  if (_upcalls[upcallType] == nullptr) {\n-    _upcalls[upcallType] = new (mtServiceability) GrowableArray<RuntimeUpcallInfo*>(1, mtServiceability);\n+  if (_upcalls[upcall_type] == nullptr) {\n+    _upcalls[upcall_type] = new (mtServiceability) GrowableArray<RuntimeUpcallInfo*>(1, mtServiceability);\n@@ -77,2 +77,2 @@\n-  info->set_index(_upcalls[upcallType]->length());\n-  _upcalls[upcallType]->append(info);\n+  info->set_index(_upcalls[upcall_type]->length());\n+  _upcalls[upcall_type]->append(info);\n@@ -82,2 +82,2 @@\n-int RuntimeUpcalls::get_num_upcalls(RuntimeUpcallType upcallType) {\n-  return (_upcalls[upcallType] == nullptr) ? 0 : _upcalls[upcallType]->length();\n+int RuntimeUpcalls::get_num_upcalls(RuntimeUpcallType upcall_type) {\n+  return (_upcalls[upcall_type] == nullptr) ? 0 : _upcalls[upcall_type]->length();\n@@ -86,2 +86,2 @@\n-void RuntimeUpcalls::upcall_redirect(RuntimeUpcallType upcallType, JavaThread* current, Method* method) {\n-  MethodDetails md(method);\n+void RuntimeUpcalls::upcall_redirect(RuntimeUpcallType upcall_type, JavaThread* current, Method* method) {\n+  MethodDetails method_details(method);\n@@ -98,1 +98,1 @@\n-  RuntimeUpcallInfo* upcall = get_first_upcall(upcallType, md);\n+  RuntimeUpcallInfo* upcall = get_first_upcall(upcall_type, method_details);\n@@ -101,1 +101,1 @@\n-    upcall = get_next_upcall(upcallType, md, upcall);\n+    upcall = get_next_upcall(upcall_type, method_details, upcall);\n@@ -123,1 +123,1 @@\n-bool RuntimeUpcalls::register_upcall(RuntimeUpcallType upcallType, const char* upcallName, RuntimeUpcall upcall, RuntimeUpcallMethodFilterCallback methodFilterCallback)\n+bool RuntimeUpcalls::register_upcall(RuntimeUpcallType upcall_type, const char* upcall_name, RuntimeUpcall upcall, RuntimeUpcallMethodFilterCallback method_filter_callback)\n@@ -125,1 +125,1 @@\n-  assert(upcallType < numTypes, \"invalid upcall type\");\n+  assert(upcall_type < numTypes, \"invalid upcall type\");\n@@ -128,1 +128,1 @@\n-  return register_upcall(upcallType, RuntimeUpcallInfo::create(upcallName, upcall, methodFilterCallback));\n+  return register_upcall(upcall_type, RuntimeUpcallInfo::create(upcall_name, upcall, method_filter_callback));\n@@ -131,3 +131,3 @@\n-RuntimeUpcallInfo* RuntimeUpcalls::get_next_upcall(RuntimeUpcallType upcallType, MethodDetails& methodDetails, RuntimeUpcallInfo* prevUpcallInfo) {\n-  assert(upcallType < numTypes, \"invalid upcall type\");\n-  if (_upcalls[upcallType] != nullptr) {\n+RuntimeUpcallInfo* RuntimeUpcalls::get_next_upcall(RuntimeUpcallType upcall_type, MethodDetails& method_details, RuntimeUpcallInfo* prev_upcall_info) {\n+  assert(upcall_type < numTypes, \"invalid upcall type\");\n+  if (_upcalls[upcall_type] != nullptr) {\n@@ -135,2 +135,2 @@\n-    if (_upcalls[upcallType]->length() == 1) {\n-      if (prevUpcallInfo != nullptr) {\n+    if (_upcalls[upcall_type]->length() == 1) {\n+      if (prev_upcall_info != nullptr) {\n@@ -139,2 +139,2 @@\n-      RuntimeUpcallInfo* upcall = _upcalls[upcallType]->at(0);\n-      return upcall->includes(methodDetails) ? upcall : nullptr;\n+      RuntimeUpcallInfo* upcall = _upcalls[upcall_type]->at(0);\n+      return upcall->includes(method_details) ? upcall : nullptr;\n@@ -144,5 +144,5 @@\n-    assert(prevUpcallInfo == nullptr || (prevUpcallInfo->get_index() >= 0 && prevUpcallInfo->get_index() < _upcalls[upcallType]->length()), \"invalid upcall index\");\n-    int index = (prevUpcallInfo != nullptr) ? prevUpcallInfo->get_index() + 1 : 0;\n-    for (int i = index; i < _upcalls[upcallType]->length(); i++) {\n-      RuntimeUpcallInfo* upcall = _upcalls[upcallType]->at(i);\n-      if (upcall->includes(methodDetails)) {\n+    assert(prev_upcall_info == nullptr || (prev_upcall_info->get_index() >= 0 && prev_upcall_info->get_index() < _upcalls[upcall_type]->length()), \"invalid upcall index\");\n+    int index = (prev_upcall_info != nullptr) ? prev_upcall_info->get_index() + 1 : 0;\n+    for (int i = index; i < _upcalls[upcall_type]->length(); i++) {\n+      RuntimeUpcallInfo* upcall = _upcalls[upcall_type]->at(i);\n+      if (upcall->includes(method_details)) {\n@@ -157,2 +157,2 @@\n-RuntimeUpcallInfo* RuntimeUpcalls::get_first_upcall(RuntimeUpcallType upcallType, MethodDetails& methodDetails) {\n-  return get_next_upcall(upcallType, methodDetails, nullptr);\n+RuntimeUpcallInfo* RuntimeUpcalls::get_first_upcall(RuntimeUpcallType upcall_type, MethodDetails& method_details) {\n+  return get_next_upcall(upcall_type, method_details, nullptr);\n","filename":"src\/hotspot\/share\/runtime\/runtimeUpcalls.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  const char* _upcallName;\n+  const char* _upcall_name;\n@@ -45,1 +45,1 @@\n-  const RuntimeUpcallMethodFilterCallback _methodFilter;\n+  const RuntimeUpcallMethodFilterCallback _method_filter;\n@@ -49,1 +49,1 @@\n-  RuntimeUpcallInfo(const char* upcallName,\n+  RuntimeUpcallInfo(const char* upcall_name,\n@@ -51,2 +51,2 @@\n-                    const RuntimeUpcallMethodFilterCallback methodFilter)\n-  : _upcallName(upcallName),\n+                    const RuntimeUpcallMethodFilterCallback method_filter)\n+  : _upcall_name(upcall_name),\n@@ -54,1 +54,1 @@\n-    _methodFilter(methodFilter),\n+    _method_filter(method_filter),\n@@ -65,2 +65,2 @@\n-  static RuntimeUpcallInfo* create(const char* upcallName, const RuntimeUpcall upcall, const RuntimeUpcallMethodFilterCallback methodFilter) {\n-    assert(upcallName != nullptr, \"upcall name must be provided\");\n+  static RuntimeUpcallInfo* create(const char* upcall_name, const RuntimeUpcall upcall, const RuntimeUpcallMethodFilterCallback method_filter) {\n+    assert(upcall_name != nullptr, \"upcall name must be provided\");\n@@ -68,2 +68,2 @@\n-    assert(methodFilter != nullptr, \"method filter must be provided\");\n-    return new RuntimeUpcallInfo(upcallName, upcall, methodFilter);\n+    assert(method_filter != nullptr, \"method filter must be provided\");\n+    return new RuntimeUpcallInfo(upcall_name, upcall, method_filter);\n@@ -73,1 +73,1 @@\n-  const char* upcall_name() const { return _upcallName; }\n+  const char* upcall_name() const { return _upcall_name; }\n@@ -76,2 +76,2 @@\n-  bool includes(MethodDetails& methodDetails) const {\n-    return _methodFilter(methodDetails);\n+  bool includes(MethodDetails& method_details) const {\n+    return _method_filter(method_details);\n@@ -93,3 +93,3 @@\n-  static void mark_for_upcalls(RuntimeUpcallType upcallType, const methodHandle& method);\n-  static bool register_upcall(RuntimeUpcallType upcallType, RuntimeUpcallInfo* info);\n-  static void upcall_redirect(RuntimeUpcallType upcallType, JavaThread* current, Method* method);\n+  static void mark_for_upcalls(RuntimeUpcallType upcall_type, const methodHandle& method);\n+  static bool register_upcall(RuntimeUpcallType upcall_type, RuntimeUpcallInfo* info);\n+  static void upcall_redirect(RuntimeUpcallType upcall_type, JavaThread* current, Method* method);\n@@ -97,1 +97,1 @@\n-  static int  get_num_upcalls(RuntimeUpcallType upcallType);\n+  static int  get_num_upcalls(RuntimeUpcallType upcall_type);\n@@ -105,1 +105,1 @@\n-  static bool               register_upcall(RuntimeUpcallType upcallType, const char* upcallName, RuntimeUpcall upcall, RuntimeUpcallMethodFilterCallback methodFilterCallback = nullptr);\n+  static bool               register_upcall(RuntimeUpcallType upcall_type, const char* upcall_name, RuntimeUpcall upcall, RuntimeUpcallMethodFilterCallback method_filter_callback = nullptr);\n@@ -110,2 +110,2 @@\n-  static RuntimeUpcallInfo* get_first_upcall(RuntimeUpcallType upcallType, MethodDetails& methodDetails);\n-  static RuntimeUpcallInfo* get_next_upcall(RuntimeUpcallType upcallType, MethodDetails& methodDetails, RuntimeUpcallInfo* prevUpcallInfo = nullptr);\n+  static RuntimeUpcallInfo* get_first_upcall(RuntimeUpcallType upcall_type, MethodDetails& method_details);\n+  static RuntimeUpcallInfo* get_next_upcall(RuntimeUpcallType upcall_type, MethodDetails& method_details, RuntimeUpcallInfo* prev_upcall_info = nullptr);\n","filename":"src\/hotspot\/share\/runtime\/runtimeUpcalls.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+#if INCLUDE_CDS\n@@ -139,0 +140,1 @@\n+#endif \/\/ INCLUDE_CDS\n@@ -997,0 +999,1 @@\n+#if INCLUDE_CDS\n@@ -1006,0 +1009,1 @@\n+#endif \/\/ INCLUDE_CDS\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}