{"files":[{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=no_trigger\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LEYDEN\n+ *\/\n+\n+\/*\n+ * @test id=trigger\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LeydenEndTrainingTriggerApp.triggerMethod LEYDEN\n+ *\/\n+\n+\/*\n+ * @test id=trigger_count_1\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LeydenEndTrainingTriggerApp.triggerMethod 1 LEYDEN\n+ *\/\n+\n+\/*\n+ * @test id=trigger_count_2\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LeydenEndTrainingTriggerApp.triggerMethod 2 LEYDEN\n+ *\/\n+\n+\/*\n+ * @test id=trigger_count_3\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LeydenEndTrainingTriggerApp.triggerMethod 3 LEYDEN\n+ *\/\n+\n+\/*\n+ * @test id=trigger_count_99\n+ * @requires vm.cds.write.archived.java.heap\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LeydenEndTrainingTrigger\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenEndTrainingTriggerApp\n+ * @run driver LeydenEndTrainingTrigger LeydenEndTrainingTriggerApp.triggerMethod 99 LEYDEN\n+ *\/\n+\n+import java.util.Arrays;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LeydenEndTrainingTrigger {\n+    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n+    static final String mainClass = \"LeydenEndTrainingTriggerApp\";\n+    static final String vmCmdPrefix = \"-XX:AOTEndTrainingOnMethodEntry=\";\n+    static String triggerMethod = \"\";\n+    static int count = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester t = new Tester();\n+        if (args.length > 1) {\n+            triggerMethod = vmCmdPrefix + args[0];\n+            args = Arrays.copyOfRange(args, 1, args.length);\n+        }\n+        if (args.length == 2) {\n+            triggerMethod += \",count=\" + args[0];\n+            count = Integer.parseInt(args[0]);\n+            args = Arrays.copyOfRange(args, 1, args.length);\n+        }\n+        t.run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            return appJar;\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass, runMode.name()\n+            };\n+        }\n+        \n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            if (runMode == RunMode.TRAINING && triggerMethod.length() > 0) {\n+                return new String[] { triggerMethod };\n+            }\n+            return new String[] {};\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n+            if (!runMode.isStaticDump()) {\n+                \/\/ always expect this output\n+                out.shouldContain(\"LeydenEndTrainingTriggerApp_line_1\");\n+                out.shouldContain(\"LeydenEndTrainingTriggerApp_line_2\");\n+                out.shouldContain(\"LeydenEndTrainingTriggerApp_line_3\");\n+            }\n+            if (runMode == RunMode.TRAINING) {\n+                \/\/ in training mode we expect the dump to be triggered\n+                \/\/ count controls where in the application output the dump occurs\n+                \/\/ so we test that the counts worked as expected (even the case where no trigger was specified)\n+                var lines = out.asLines();\n+                \/\/ find the line number that contains \"CacheDataStore dumping is complete\"\n+                var dumpComplete = lines.indexOf(\"CacheDataStore dumping is complete\");\n+                Asserts.assertNE(dumpComplete, -1, \"CacheDataStore dumping is complete not found\");\n+                var line1 = lines.indexOf(\"LeydenEndTrainingTriggerApp_line_1\");\n+                var line2 = lines.indexOf(\"LeydenEndTrainingTriggerApp_line_2\");\n+                var line3 = lines.indexOf(\"LeydenEndTrainingTriggerApp_line_3\");\n+\n+                if (triggerMethod.length() == 0) {\n+                    \/\/ no trigger, so dump should run after execution\n+                    Asserts.assertGT(dumpComplete, line3, \"dump \");\n+                } else {\n+                    switch(count) {\n+                        case 0:\n+                            \/\/ no count specified, default is 1 (ie first trigger)\n+                            Asserts.assertLT(dumpComplete, line1, \"dumpComplete should be before line 1 of application output\");\n+                            break;\n+                        case 1:\n+                            Asserts.assertLT(dumpComplete, line1, \"dumpComplete should be before line 1 of application output\");\n+                            break;\n+                        case 2:\n+                            Asserts.assertGT(dumpComplete, line1, \"dumpComplete should be after line 1 of application output\");\n+                            Asserts.assertLT(dumpComplete, line2, \"dumpComplete should be before line 2 of application output\");\n+                            break;\n+                        case 3:\n+                            Asserts.assertGT(dumpComplete, line2, \"dumpComplete should be after line 2 of application output\");\n+                            Asserts.assertLT(dumpComplete, line3, \"dumpComplete should be before line 3 of application output\");\n+                            break;\n+                        default:\n+                            Asserts.assertGT(dumpComplete, line3, \"dumpComplete should be after line 3 of application output\");\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+class LeydenEndTrainingTriggerApp {\n+    public static void triggerMethod(String text) {\n+        System.out.println(\"LeydenEndTrainingTriggerApp_line_\" + text);\n+    }\n+    public static void main(String args[]) {\n+        triggerMethod(\"1\");\n+        triggerMethod(\"2\");\n+        triggerMethod(\"3\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenEndTrainingTrigger.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"}]}