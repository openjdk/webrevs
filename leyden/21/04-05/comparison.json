{"files":[{"patch":"@@ -1403,5 +1403,1 @@\n-  if (CDSConfig::is_dumping_preimage_static_archive_with_triggers()) {\n-    \/\/ this code will be used for all methods of the same type and so we can't\n-    \/\/ check the method flag while generating the code\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::end_training_check));\n-  }\n+  call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::end_training_check));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1159,1 +1159,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -1279,1 +1279,3 @@\n-  __ end_training_check();\n+  if (end_training_trigger) {\n+    __ end_training_check();\n+  }\n@@ -1585,1 +1587,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n@@ -1731,1 +1733,3 @@\n-  __ end_training_check();\n+  if (end_training_trigger) {\n+    __ end_training_check();\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -806,1 +806,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -1140,1 +1140,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1179,1 +1179,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -1610,1 +1610,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -959,1 +959,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -1356,1 +1356,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1303,1 +1303,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -1659,1 +1659,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1935,3 +1935,1 @@\n-  if (CDSConfig::is_dumping_preimage_static_archive_with_triggers()) {\n-    call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::end_training_check));\n-  }\n+  call_VM(noreg, CAST_FROM_FN_PTR(address, InterpreterRuntime::end_training_check));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-address TemplateInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -920,1 +920,3 @@\n-  __ end_training_check();\n+  if (end_training_trigger) {\n+    __ end_training_check();\n+  }\n@@ -1335,1 +1337,1 @@\n-address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address TemplateInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n@@ -1478,1 +1480,3 @@\n-  __ end_training_check();\n+  if (end_training_trigger) {\n+    __ end_training_check();\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -169,1 +169,4 @@\n-    return m->is_synchronized() ? native_synchronized : native;\n+    if (m->is_synchronized()) {\n+      return m->is_end_training_trigger() ? native_synchronized_end_training_trigger : native_synchronized;\n+    }\n+    return m->is_end_training_trigger() ? native_end_training_trigger : native;\n@@ -174,1 +177,1 @@\n-    return zerolocals_synchronized;\n+    return m->is_end_training_trigger() ? zerolocals_synchronized_end_training_trigger : zerolocals_synchronized;\n@@ -179,1 +182,1 @@\n-    return empty;\n+    return m->is_end_training_trigger() ? empty_end_training_trigger : empty;\n@@ -193,1 +196,1 @@\n-  return zerolocals;\n+  return m->is_end_training_trigger() ? zerolocals_end_training_trigger : zerolocals;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    zerolocals_end_training_trigger,                            \/\/ method needs locals initialization & is end training trigger\n+    zerolocals_synchronized_end_training_trigger,               \/\/ method needs locals initialization & is synchronized & is end training trigger\n@@ -64,0 +66,2 @@\n+    native_end_training_trigger,                                \/\/ native method & is end training trigger\n+    native_synchronized_end_training_trigger,                   \/\/ native method & is synchronized & is end training trigger\n@@ -65,0 +69,1 @@\n+    empty_end_training_trigger,                                 \/\/ empty method & is end training trigger (code: _return)\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1160,4 +1160,1 @@\n-  LastFrameAccessor last_frame(current);\n-  ResourceMark rm(current);\n-  methodHandle m (current, last_frame.method());\n-  if(m->is_end_training_trigger()) {\n+\n@@ -1165,1 +1162,0 @@\n-  }\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -189,0 +190,5 @@\n+  if (CDSConfig::is_dumping_preimage_static_archive_with_triggers()) {\n+    method_entry(zerolocals_end_training_trigger)\n+    method_entry(zerolocals_synchronized_end_training_trigger)\n+    method_entry(empty_end_training_trigger)\n+  }\n@@ -223,0 +229,4 @@\n+  if (CDSConfig::is_dumping_preimage_static_archive_with_triggers()) {\n+    native_method_entry(native_end_training_trigger)\n+    native_method_entry(native_synchronized_end_training_trigger)\n+  }\n@@ -409,0 +419,55 @@\n+bool TemplateInterpreterGenerator::is_synchronized_method(AbstractInterpreter::MethodKind kind) {\n+  switch (kind) {\n+    case Interpreter::zerolocals_synchronized                     : \/\/ fall thru\n+    case Interpreter::zerolocals_synchronized_end_training_trigger: \/\/ fall thru\n+    case Interpreter::native_synchronized                         : \/\/ fall thru\n+    case Interpreter::native_synchronized_end_training_trigger    :\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+bool TemplateInterpreterGenerator::is_end_training_trigger_method(AbstractInterpreter::MethodKind kind) {\n+  switch (kind) {\n+    case Interpreter::zerolocals_end_training_trigger             : \/\/ fall thru\n+    case Interpreter::zerolocals_synchronized_end_training_trigger: \/\/ fall thru\n+    case Interpreter::native_end_training_trigger                 : \/\/ fall thru\n+    case Interpreter::native_synchronized_end_training_trigger    : \/\/ fall thru\n+    case Interpreter::empty_end_training_trigger                  :\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+bool TemplateInterpreterGenerator::is_intrinsic_method(AbstractInterpreter::MethodKind kind) {\n+  switch (kind) {\n+    case Interpreter::zerolocals                                  : \/\/ fall thru\n+    case Interpreter::zerolocals_synchronized                     : \/\/ fall thru\n+    case Interpreter::zerolocals_end_training_trigger             : \/\/ fall thru\n+    case Interpreter::zerolocals_synchronized_end_training_trigger: \/\/ fall thru\n+    case Interpreter::native                                      : \/\/ fall thru\n+    case Interpreter::native_synchronized                         : \/\/ fall thru\n+    case Interpreter::native_end_training_trigger                 : \/\/ fall thru\n+    case Interpreter::native_synchronized_end_training_trigger    : \/\/ fall thru\n+    case Interpreter::empty                                       : \/\/ fall thru\n+    case Interpreter::empty_end_training_trigger                  : \/\/ fall thru\n+    case Interpreter::getter                                      : \/\/ fall thru\n+    case Interpreter::setter                                      : \/\/ fall thru\n+    case Interpreter::abstract                                    :\n+      return false;\n+    default:\n+      return true;\n+  }\n+}\n+\n+bool TemplateInterpreterGenerator::is_abstract_method(AbstractInterpreter::MethodKind kind) {\n+  switch (kind) {\n+    case Interpreter::abstract:\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n@@ -412,2 +477,0 @@\n-  \/\/ determine code generation flags\n-  bool synchronized = false;\n@@ -416,12 +479,4 @@\n-  switch (kind) {\n-  case Interpreter::zerolocals             :                           break;\n-  case Interpreter::zerolocals_synchronized: synchronized = true;      break;\n-  case Interpreter::native                 :                           break;\n-  case Interpreter::native_synchronized    : synchronized = true;      break;\n-  case Interpreter::empty                  : break;\n-  case Interpreter::getter                 : break;\n-  case Interpreter::setter                 : break;\n-  case Interpreter::abstract               : entry_point = generate_abstract_entry(); break;\n-  default:\n-    entry_point = generate_intrinsic_entry(kind); \/\/ process the rest\n-    break;\n+  if (is_abstract_method(kind)) {\n+    entry_point = generate_abstract_entry();\n+  } else if (is_intrinsic_method(kind)) {\n+    entry_point = generate_intrinsic_entry(kind);\n@@ -434,0 +489,3 @@\n+  bool synchronized = is_synchronized_method(kind);\n+  bool end_training_trigger = is_end_training_trigger_method(kind);\n+\n@@ -435,10 +493,17 @@\n-  if (native) {\n-    entry_point = Interpreter::entry_for_kind(synchronized ? Interpreter::native_synchronized : Interpreter::native);\n-    if (entry_point == nullptr) {\n-      entry_point = generate_native_entry(synchronized);\n-    }\n-  } else {\n-    entry_point = Interpreter::entry_for_kind(synchronized ? Interpreter::zerolocals_synchronized : Interpreter::zerolocals);\n-    if (entry_point == nullptr) {\n-      entry_point = generate_normal_entry(synchronized);\n-    }\n+  if (!synchronized && !end_training_trigger) {\n+    entry_point = Interpreter::entry_for_kind(native ? Interpreter::native \n+                                                     : Interpreter::zerolocals);\n+  } else if (synchronized && !end_training_trigger) {\n+    entry_point = Interpreter::entry_for_kind(native ? Interpreter::native_synchronized\n+                                                     : Interpreter::zerolocals_synchronized);\n+  } else if (!synchronized && end_training_trigger) {\n+    entry_point = Interpreter::entry_for_kind(native ? Interpreter::native_end_training_trigger\n+                                                     : Interpreter::zerolocals_end_training_trigger);\n+  } else if (synchronized && end_training_trigger) {\n+    entry_point = Interpreter::entry_for_kind(native ? Interpreter::native_synchronized_end_training_trigger\n+                                                     : Interpreter::zerolocals_synchronized_end_training_trigger);\n+  }\n+\n+  if (entry_point == nullptr) {\n+      entry_point = native ? generate_native_entry(synchronized, end_training_trigger)\n+                           : generate_normal_entry(synchronized, end_training_trigger);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":89,"deletions":24,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -86,0 +86,6 @@\n+  \/\/ helpers for method entry generation\n+  bool is_synchronized_method(AbstractInterpreter::MethodKind kind);\n+  bool is_end_training_trigger_method(AbstractInterpreter::MethodKind kind);\n+  bool is_intrinsic_method(AbstractInterpreter::MethodKind kind);\n+  bool is_abstract_method(AbstractInterpreter::MethodKind kind);\n+\n@@ -92,2 +98,2 @@\n-  address generate_normal_entry(bool synchronized);\n-  address generate_native_entry(bool synchronized);\n+  address generate_normal_entry(bool synchronized, bool end_training_trigger);\n+  address generate_native_entry(bool synchronized, bool end_training_trigger);\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-      entry_point = generate_native_entry(synchronized);\n+      entry_point = generate_native_entry(synchronized, false);\n@@ -127,1 +127,1 @@\n-      entry_point = generate_normal_entry(synchronized);\n+      entry_point = generate_normal_entry(synchronized, false);\n@@ -177,1 +177,1 @@\n-address ZeroInterpreterGenerator::generate_native_entry(bool synchronized) {\n+address ZeroInterpreterGenerator::generate_native_entry(bool synchronized, bool end_training_trigger) {\n@@ -181,1 +181,1 @@\n-address ZeroInterpreterGenerator::generate_normal_entry(bool synchronized) {\n+address ZeroInterpreterGenerator::generate_normal_entry(bool synchronized, bool end_training_trigger) {\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-  address generate_normal_entry(bool synchronized);\n-  address generate_native_entry(bool synchronized);\n+  address generate_normal_entry(bool synchronized, bool end_training_trigger);\n+  address generate_native_entry(bool synchronized, bool end_training_trigger);\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1424,4 +1424,6 @@\n-  Atomic::inc(&_end_training_count);\n-  if(_end_training_count >= _end_training_predicate)\n-  {\n-    SharedRuntime::end_training(CHECK);\n+  if (_end_training_triggered == 0) {\n+    Atomic::inc(&_end_training_count);\n+    if(_end_training_count >= _end_training_predicate)\n+    {\n+      SharedRuntime::end_training(CHECK);\n+    }\n@@ -1433,3 +1435,5 @@\n-  if (Atomic::cmpxchg(&_end_training_triggered, 0, 1) == 0) {\n-    MetaspaceShared::preload_and_dump(CHECK);\n-    assert(!THREAD->has_pending_exception(), \"must be\");\n+  if (_end_training_triggered == 0) {\n+    if (Atomic::cmpxchg(&_end_training_triggered, 0, 1) == 0) {\n+      MetaspaceShared::preload_and_dump(CHECK);\n+      assert(!THREAD->has_pending_exception(), \"must be\");\n+    }\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-      return \"High: [insert reason here]\";\n+      return \"Medium: Pause time depends on number of loaded classes\";\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}