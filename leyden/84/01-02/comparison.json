{"files":[{"patch":"@@ -736,16 +736,6 @@\n-void VM_Version::insert_features_names(uint64_t features, char* names_buf, size_t buf_size) {\n-  char* buf = names_buf;\n-  size_t buf_rem = buf_size;\n-  bool first = true;\n-  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n-    if (supports_feature(features, (VM_Version::Feature_Flag)i)) {\n-      int res = 0;\n-      if (first) {\n-        res = jio_snprintf(buf, buf_size, \"%s\", _features_names[i]);\n-      } else {\n-        res = jio_snprintf(buf, buf_size, \", %s\", _features_names[i]);\n-      }\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buf_rem -= res;\n-      first = false;\n+void VM_Version::insert_features_names(uint64_t features, CpuInfoBuffer& info_buffer) {\n+  info_buffer.insert_string_list(0, MAX_CPU_FEATURES, [&](int i) {\n+    if (supports_feature((VM_Version::Feature_Flag)i)) {\n+      return _features_names[i];\n+    } else {\n+      return (const char*)nullptr;\n@@ -753,5 +743,2 @@\n-  }\n-}\n-\n-void VM_Version::get_supported_cpu_features_name(char* names_buf, size_t buf_size) {\n-  insert_features_names(_features, names_buf, buf_size);\n+  });\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n@@ -760,1 +747,1 @@\n-void VM_Version::get_cpu_features_name(void* features_buffer, char* names_buf, size_t buf_size) {\n+void VM_Version::get_cpu_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) {\n@@ -762,1 +749,1 @@\n-  insert_features_names(features, names_buf, buf_size);\n+  insert_features_names(features, info_buffer);\n@@ -765,1 +752,1 @@\n-void VM_Version::get_missing_features_name(void* features_buffer, char* missing_features_name, size_t buf_size) {\n+void VM_Version::get_missing_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) {\n@@ -767,4 +754,1 @@\n-  char* buf = missing_features_name;\n-  size_t buf_rem = buf_size;\n-  bool first = true;\n-  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+  info_buffer.insert_string_list(0, MAX_CPU_FEATURES, [&](int i) {\n@@ -773,10 +757,3 @@\n-      int res = 0;\n-      if (first) {\n-        res = jio_snprintf(buf, buf_size, \"%s\", _features_names[i]);\n-      } else {\n-        res = jio_snprintf(buf, buf_size, \", %s\", _features_names[i]);\n-      }\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buf_rem -= res;\n-      first = false;\n+      return _features_names[i];\n+    } else {\n+      return (const char*)nullptr;\n@@ -784,1 +761,2 @@\n-  }\n+  });\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":17,"deletions":39,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  static void insert_features_names(uint64_t features, char* names_buf, size_t buf_size);\n+  static void insert_features_names(uint64_t features, CpuInfoBuffer& info_buffer);\n@@ -225,3 +225,2 @@\n-  static void get_supported_cpu_features_name(char* names_buf, size_t buf_size);\n-  static void get_cpu_features_name(void* features_buffer, char* names_buf, size_t buf_size);\n-  static void get_missing_features_name(void* features_buffer, char* missing_features_name, size_t buf_size);\n+  static void get_cpu_features_name(void* features_buffer, CpuInfoBuffer& info_buffer);\n+  static void get_missing_features_name(void* features_buffer, CpuInfoBuffer& info_buffer);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -1103,7 +1104,8 @@\n-  char buf[2048];\n-  size_t cpu_info_size = jio_snprintf(\n-              buf, sizeof(buf),\n-              \"(%u cores per cpu, %u threads per core) family %d model %d stepping %d microcode 0x%x\",\n-              cores_per_cpu(), threads_per_core(),\n-              cpu_family(), _model, _stepping, os::cpu_microcode_revision());\n-  assert(cpu_info_size > 0, \"not enough temporary space allocated\");\n+  CpuInfoBuffer info_buffer(\"(%u cores per cpu, %u threads per core) family %d model %d stepping %d microcode 0x%x\",\n+                                          cores_per_cpu(), threads_per_core(), cpu_family(),\n+                                          _model, _stepping, os::cpu_microcode_revision());\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n+  info_buffer.append(\", \");\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n+  int features_offset = info_buffer.length();\n+  insert_features_names(_features, info_buffer);\n@@ -1111,7 +1113,2 @@\n-  insert_features_names(_features, buf + cpu_info_size, sizeof(buf) - cpu_info_size, \/* use_front_comma *\/ true);\n-\n-  _cpu_info_string = os::strdup(buf);\n-\n-  _features_string = extract_features_string(_cpu_info_string,\n-                                             strnlen(_cpu_info_string, sizeof(buf)),\n-                                             cpu_info_size);\n+  _cpu_info_string = os::strdup(info_buffer.buffer());\n+  _features_string = _cpu_info_string + features_offset;\n@@ -3299,3 +3296,2 @@\n-void VM_Version::insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen, bool use_front_comma) {\n-  bool first = true;\n-  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+void VM_Version::insert_features_names(VM_Version::VM_Features features, CpuInfoBuffer& info_buffer) {\n+  info_buffer.insert_string_list(0, MAX_CPU_FEATURES, [&](int i) {\n@@ -3303,10 +3299,3 @@\n-      int res = 0;\n-      if (first && !use_front_comma) {\n-        res = jio_snprintf(buf, buflen, \"%s\", _features_names[i]);\n-      } else {\n-        res = jio_snprintf(buf, buflen, \", %s\", _features_names[i]);\n-      }\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buflen -= res;\n-      first = false;\n+      return _features_names[i];\n+    } else {\n+      return (const char*)nullptr;\n@@ -3314,1 +3303,2 @@\n-  }\n+  });\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n@@ -3317,5 +3307,1 @@\n-void VM_Version::get_supported_cpu_features_name(char* names_buf, size_t buf_size) {\n-  insert_features_names(_features, names_buf, buf_size, \/* use_front_comma *\/ false);\n-}\n-\n-void VM_Version::get_cpu_features_name(void* features_buffer, char* names_buf, size_t buf_size) {\n+void VM_Version::get_cpu_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) {\n@@ -3323,1 +3309,1 @@\n-  insert_features_names(*features, names_buf, buf_size, \/* use_front_comma *\/ false);\n+  insert_features_names(*features, info_buffer);\n@@ -3326,1 +3312,1 @@\n-void VM_Version::get_missing_features_name(void* features_buffer, char* missing_features_name, size_t buf_size) {\n+void VM_Version::get_missing_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) {\n@@ -3328,4 +3314,1 @@\n-  char* buf = missing_features_name;\n-  size_t buf_rem = buf_size;\n-  bool first = true;\n-  for (int i = 0; i < MAX_CPU_FEATURES; i++) {\n+  info_buffer.insert_string_list(0, MAX_CPU_FEATURES, [&](int i) {\n@@ -3334,9 +3317,3 @@\n-      int res = 0;\n-      if (first) {\n-        res = jio_snprintf(buf, buf_size, \"%s\", _features_names[i]);\n-      } else {\n-        res = jio_snprintf(buf, buf_size, \", %s\", _features_names[i]);\n-      }\n-      assert(res > 0, \"not enough temporary space allocated\");\n-      buf += res;\n-      buf_rem -= res;\n+      return _features_names[i];\n+    } else {\n+      return (const char*)nullptr;\n@@ -3344,1 +3321,2 @@\n-  }\n+  });\n+  assert(!info_buffer.overflow(), \"not enough buffer size\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":27,"deletions":49,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -934,1 +934,1 @@\n-  static void insert_features_names(VM_Version::VM_Features features, char* buf, size_t buflen, bool use_front_comma);\n+  static void insert_features_names(VM_Version::VM_Features features, CpuInfoBuffer& info_buffer);\n@@ -1086,3 +1086,2 @@\n-  static void get_supported_cpu_features_name(char* names_buf, size_t buf_size);\n-  static void get_cpu_features_name(void* features_buffer, char* names_buf, size_t buf_size);\n-  static void get_missing_features_name(void* features_buffer, char* missing_features_name, size_t buf_size);\n+  static void get_cpu_features_name(void* features_buffer, CpuInfoBuffer& info_buffer);\n+  static void get_missing_features_name(void* features_buffer, CpuInfoBuffer& info_buffer);\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+#include \"utilities\/formatBuffer.hpp\"\n@@ -649,4 +650,0 @@\n-#if !defined(ZERO) && (defined(IA32) || defined(AMD64))\n-  _useSSE                = UseSSE;\n-  _useAVX                = UseAVX;\n-#endif\n@@ -728,3 +725,4 @@\n-  char cpu_features[2048];\n-  VM_Version::get_supported_cpu_features_name(cpu_features, sizeof(cpu_features));\n-  log_debug(aot, codecache, init)(\"Available CPU features: %s\", cpu_features);\n+  LogStreamHandle(Debug, aot, codecache, init) log;\n+  if (log.is_enabled()) {\n+    log.print(\"Available CPU features: %s\", VM_Version::features_string());\n+  }\n@@ -738,2 +736,5 @@\n-  VM_Version::get_cpu_features_name(cached_cpu_features_buffer, cpu_features, sizeof(cpu_features));\n-  log_debug(aot, codecache, init)(\"CPU features recorded in AOTCodeCache: %s\", cpu_features);\n+  if (log.is_enabled()) {\n+    CpuInfoBuffer msg_buffer;\n+    VM_Version::get_cpu_features_name(cached_cpu_features_buffer, msg_buffer);\n+    log.print(\"CPU features recorded in AOTCodeCache: %s\", msg_buffer.buffer());\n+  }\n@@ -742,3 +743,5 @@\n-    char missing_features_name[2048];\n-    VM_Version::get_missing_features_name(cached_cpu_features_buffer, missing_features_name, sizeof(missing_features_name));\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: required cpu features are missing: %s\", missing_features_name);\n+    if (log.is_enabled()) {\n+      CpuInfoBuffer msg_buffer;\n+      VM_Version::get_missing_features_name(cached_cpu_features_buffer, msg_buffer);\n+      log.print(\"AOT Code Cache disabled: required cpu features are missing: %s\", msg_buffer.buffer());\n+    }\n@@ -754,11 +757,0 @@\n-#if !defined(ZERO) && (defined(IA32) || defined(AMD64))\n-  if (UseSSE < _useSSE) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with UseSSE = %d vs current %d\", _useSSE, UseSSE);\n-    return false;\n-  }\n-  if (UseAVX < _useAVX) {\n-    log_debug(aot, codecache, init)(\"AOT Code Cache disabled: it was created with UseAVX = %d vs current %d\", _useAVX, UseAVX);\n-    return false;\n-  }\n-#endif\n-\n@@ -1117,3 +1109,1 @@\n-  char cpu_features[4096];\n-  VM_Version::get_supported_cpu_features_name(cpu_features, sizeof(cpu_features));\n-  log_debug(aot, codecache, exit)(\"CPU features recorded in AOTCodeCache: %s\", cpu_features);\n+  log_debug(aot, codecache, exit)(\"CPU features recorded in AOTCodeCache: %s\", VM_Version::features_string());\n@@ -3259,4 +3249,1 @@\n-  \/\/ polling_page_vectors_safepoint_handler_blob can be nullptr if AVX feature is not present or is disabled\n-  if (SharedRuntime::polling_page_vectors_safepoint_handler_blob() != nullptr) {\n-    SET_ADDRESS(_shared_blobs, SharedRuntime::polling_page_vectors_safepoint_handler_blob()->entry_point());\n-  }\n+  SET_ADDRESS(_shared_blobs, SharedRuntime::polling_page_vectors_safepoint_handler_blob()->entry_point());\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":17,"deletions":30,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -329,4 +329,0 @@\n-#if defined(IA32) || defined(AMD64)\n-    int  _useSSE; \/\/ Hack before we record CPU features\n-    int  _useAVX;\n-#endif\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,6 @@\n+#define CPU_INFO_BUF_SIZE 2048\n+\n+template<size_t bufsz> class FormatBuffer;\n+\n+using CpuInfoBuffer = FormatBuffer<CPU_INFO_BUF_SIZE>;\n+\n@@ -233,3 +239,2 @@\n-  static void get_supported_cpu_features_name(char* names_buf, size_t buf_size) { return; }\n-  static void get_cpu_features_name(void* features_buffer, char* names_buf, size_t buf_size) { return; }\n-  static void get_missing_features_name(void* features_buffer, char* missing_features_name, size_t buf_size) { return; }\n+  static void get_cpu_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) { return; }\n+  static void get_missing_features_name(void* features_buffer, CpuInfoBuffer& info_buffer) { return; }\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-  inline void append(const char* format, ...)  ATTRIBUTE_PRINTF(2, 3);\n+  inline FormatBuffer();\n+  inline int append(const char* format, ...)  ATTRIBUTE_PRINTF(2, 3);\n@@ -64,0 +65,20 @@\n+  int length() { return _len; }\n+  int overflow() { return _overflow; }\n+\n+  template<typename FN>\n+  void insert_string_list(int start, int limit, FN fn) {\n+    bool first = true;\n+    for (int i = start; i < limit; i++) {\n+      const char* str = fn(i);\n+      if (str == nullptr) {\n+        continue;\n+      }\n+      const char* comma = first ? \"\" : \", \";\n+      int result = append(\"%s%s\", comma, str);\n+      if (result < 0) {\n+        return;\n+      }\n+      first = false;\n+    }\n+    return;\n+  }\n@@ -68,3 +89,9 @@\n-\n- protected:\n-  inline FormatBuffer();\n+  int _len;\n+  bool _overflow;\n+\n+  bool check_overflow(int result) {\n+    if (result == -1) {\n+      _overflow = true;\n+    }\n+    return _overflow;\n+  }\n@@ -74,1 +101,1 @@\n-FormatBuffer<bufsz>::FormatBuffer(const char * format, ...) : FormatBufferBase(_buffer) {\n+FormatBuffer<bufsz>::FormatBuffer(const char * format, ...) : FormatBufferBase(_buffer), _len(0), _overflow(false) {\n@@ -77,1 +104,1 @@\n-  jio_vsnprintf(_buf, bufsz, format, argp);\n+  int result = jio_vsnprintf(_buf, bufsz, format, argp);\n@@ -79,0 +106,1 @@\n+  _len = check_overflow(result) ? bufsz-1 : result;\n@@ -82,2 +110,3 @@\n-FormatBuffer<bufsz>::FormatBuffer(FormatBufferDummy dummy, const char * format, va_list ap) : FormatBufferBase(_buffer) {\n-  jio_vsnprintf(_buf, bufsz, format, ap);\n+FormatBuffer<bufsz>::FormatBuffer(FormatBufferDummy dummy, const char * format, va_list ap) : FormatBufferBase(_buffer), _len(0), _overflow(false) {\n+  int result = jio_vsnprintf(_buf, bufsz, format, ap);\n+  _len = check_overflow(result) ? bufsz-1 : result;\n@@ -87,1 +116,1 @@\n-FormatBuffer<bufsz>::FormatBuffer() : FormatBufferBase(_buffer) {\n+FormatBuffer<bufsz>::FormatBuffer() : FormatBufferBase(_buffer), _len(0), _overflow(false) {\n@@ -95,1 +124,1 @@\n-  jio_vsnprintf(_buf, bufsz, format, argp);\n+  int result = jio_vsnprintf(_buf, bufsz, format, argp);\n@@ -97,0 +126,1 @@\n+  _len = check_overflow(result) ? bufsz-1 : result;\n@@ -101,1 +131,2 @@\n-  jio_vsnprintf(_buf, bufsz, format, argp);\n+  int result = jio_vsnprintf(_buf, bufsz, format, argp);\n+  _len = check_overflow(result) ? bufsz-1 : result;\n@@ -105,1 +136,4 @@\n-void FormatBuffer<bufsz>::append(const char* format, ...) {\n+int FormatBuffer<bufsz>::append(const char* format, ...) {\n+  if (_overflow) {\n+    return -1;\n+  }\n@@ -108,2 +142,2 @@\n-  size_t len = strlen(_buf);\n-  char* buf_end = _buf + len;\n+  assert(_buf != nullptr, \"sanity check\");\n+  char* buf_end = _buf + _len;\n@@ -113,1 +147,1 @@\n-  jio_vsnprintf(buf_end, bufsz - len, format, argp);\n+  int result = jio_vsnprintf(buf_end, bufsz - _len, format, argp);\n@@ -115,0 +149,2 @@\n+  _len = check_overflow(result) ? bufsz-1 : _len+result;\n+  return result;\n","filename":"src\/hotspot\/share\/utilities\/formatBuffer.hpp","additions":51,"deletions":15,"binary":false,"changes":66,"status":"modified"}]}