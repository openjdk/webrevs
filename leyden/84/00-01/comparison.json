{"files":[{"patch":"@@ -75,1 +75,1 @@\n-  _features_names[bit] = #name;\n+  _features_names[bit] = XSTR(name);\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -614,1 +614,1 @@\n-void AOTCodeCache::Config::record() {\n+void AOTCodeCache::Config::record(uint cpu_features_offset) {\n@@ -654,6 +654,1 @@\n-  _cpu_features_size     = (uint)VM_Version::cpu_features_size();\n-  void* cpu_features_buffer = (void*)(this+1);\n-  VM_Version::store_cpu_features(cpu_features_buffer);\n-  char cpu_features[4096];\n-  VM_Version::get_supported_cpu_features_name(cpu_features, sizeof(cpu_features));\n-  log_debug(aot, codecache, exit)(\"CPU features recorded in AOTCodeCache: %s\", cpu_features);\n+  _cpu_features_offset   = cpu_features_offset;\n@@ -662,1 +657,1 @@\n-bool AOTCodeCache::Config::verify() const {\n+bool AOTCodeCache::Config::verify(AOTCodeCache* cache) const {\n@@ -733,1 +728,0 @@\n-  assert(_cpu_features_size == (uint)VM_Version::cpu_features_size(), \"must be\");\n@@ -738,1 +732,6 @@\n-  void* cached_cpu_features_buffer = (void*)(this+1);\n+  uint offset = _cpu_features_offset;\n+  uint cpu_features_size = *(uint *)cache->addr(offset);\n+  assert(cpu_features_size == (uint)VM_Version::cpu_features_size(), \"must be\");\n+  offset += sizeof(uint);\n+\n+  void* cached_cpu_features_buffer = (void *)cache->addr(offset);\n@@ -1112,0 +1111,13 @@\n+void AOTCodeCache::store_cpu_features(char*& buffer, uint buffer_size) {\n+  uint* size_ptr = (uint *)buffer;\n+  *size_ptr = buffer_size;\n+  buffer += sizeof(uint);\n+\n+  VM_Version::store_cpu_features(buffer);\n+  char cpu_features[4096];\n+  VM_Version::get_supported_cpu_features_name(cpu_features, sizeof(cpu_features));\n+  log_debug(aot, codecache, exit)(\"CPU features recorded in AOTCodeCache: %s\", cpu_features);\n+  buffer += buffer_size;\n+  buffer = align_up(buffer, DATA_ALIGNMENT);\n+}\n+\n@@ -1134,1 +1146,1 @@\n-    uint header_size = (uint)align_up(AOTCodeCache::Header::size(),  DATA_ALIGNMENT);\n+    uint header_size = (uint)align_up(sizeof(AOTCodeCache::Header), DATA_ALIGNMENT);\n@@ -1145,0 +1157,2 @@\n+    uint cpu_features_size = VM_Version::cpu_features_size();\n+    uint total_cpu_features_size = sizeof(uint) + cpu_features_size; \/\/ sizeof(uint) to store cpu_features_size\n@@ -1146,1 +1160,2 @@\n-                     code_alignment + search_size + preload_entries_size + entries_size;\n+                      code_alignment + search_size + preload_entries_size + entries_size +\n+                      align_up(total_cpu_features_size, DATA_ALIGNMENT);\n@@ -1149,3 +1164,0 @@\n-\n-    \/\/ Create ordered search table for entries [id, index];\n-    uint* search = NEW_C_HEAP_ARRAY(uint, search_count, mtCode);\n@@ -1157,0 +1169,8 @@\n+    uint cpu_features_offset = current - start;\n+    store_cpu_features(current, cpu_features_size);\n+    assert(is_aligned(current, DATA_ALIGNMENT), \"sanity check\");\n+    assert(current < start + total_size, \"sanity check\");\n+\n+    \/\/ Create ordered search table for entries [id, index];\n+    uint* search = NEW_C_HEAP_ARRAY(uint, search_count, mtCode);\n+\n@@ -1330,1 +1350,2 @@\n-                 C1_blobs_count, C2_blobs_count, stubs_count);\n+                 C1_blobs_count, C2_blobs_count,\n+                 stubs_count, cpu_features_offset);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-    uint _cpu_features_size;\n+    uint _cpu_features_offset; \/\/ offset in the cache where cpu features are stored\n@@ -349,3 +349,2 @@\n-    void record();\n-    bool verify() const;\n-    static size_t trailing_data_size() { return VM_Version::cpu_features_size(); }\n+    void record(uint cpu_features_offset);\n+    bool verify(AOTCodeCache* cache) const;\n@@ -381,1 +380,2 @@\n-              uint C1_blobs_count, uint C2_blobs_count, uint stubs_count) {\n+              uint C1_blobs_count, uint C2_blobs_count,\n+              uint stubs_count, uint cpu_features_offset) {\n@@ -396,2 +396,1 @@\n-      assert((int)config_offset() + sizeof(Config) == sizeof(Header), \"_config must be the last member of Header\");\n-      _config.record();\n+      _config.record(cpu_features_offset);\n@@ -420,2 +419,2 @@\n-    bool verify_vm_config() const { \/\/ Called after Universe initialized\n-      return _config.verify();\n+    bool verify_vm_config(AOTCodeCache* cache) const { \/\/ Called after Universe initialized\n+      return _config.verify(cache);\n@@ -423,3 +422,0 @@\n-    static size_t trailing_data_size() { return Config::trailing_data_size(); }\n-    static size_t size() { return sizeof(Header) + trailing_data_size(); };\n-    static ByteSize config_offset() { return byte_offset_of(Header, _config); }\n@@ -543,0 +539,2 @@\n+  void store_cpu_features(char*& buffer, uint buffer_size);\n+\n@@ -601,1 +599,1 @@\n-      return _cache->_load_header->verify_vm_config();\n+      return _cache->_load_header->verify_vm_config(_cache);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}