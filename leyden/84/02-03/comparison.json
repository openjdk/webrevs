{"files":[{"patch":"@@ -3330,1 +3330,3 @@\n-  memcpy(buf, &_features, sizeof(VM_Features));\n+  VM_Features copy = _features;\n+  copy.clear_feature(CPU_HT); \/\/ HT does not result in incompatibility of aot code cache\n+  memcpy(buf, &copy, sizeof(VM_Features));\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-    log.print(\"Available CPU features: %s\", VM_Version::features_string());\n+    log.print_cr(\"Available CPU features: %s\", VM_Version::features_string());\n@@ -739,1 +739,1 @@\n-    log.print(\"CPU features recorded in AOTCodeCache: %s\", msg_buffer.buffer());\n+    log.print_cr(\"CPU features recorded in AOTCodeCache: %s\", msg_buffer.buffer());\n@@ -746,1 +746,1 @@\n-      log.print(\"AOT Code Cache disabled: required cpu features are missing: %s\", msg_buffer.buffer());\n+      log.print_cr(\"AOT Code Cache disabled: required cpu features are missing: %s\", msg_buffer.buffer());\n@@ -3249,1 +3249,4 @@\n-  SET_ADDRESS(_shared_blobs, SharedRuntime::polling_page_vectors_safepoint_handler_blob()->entry_point());\n+  \/\/ polling_page_vectors_safepoint_handler_blob can be nullptr if AVX feature is not present or is disabled\n+  if (SharedRuntime::polling_page_vectors_safepoint_handler_blob() != nullptr) {\n+    SET_ADDRESS(_shared_blobs, SharedRuntime::polling_page_vectors_safepoint_handler_blob()->entry_point());\n+  }\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary CPU feature compatibility test for AOT Code Cache\n+ * @requires vm.cds.supports.aot.code.caching\n+ * @requires vm.compMode != \"Xcomp\" & vm.compMode != \"Xint\"\n+ * @comment The test verifies AOT checks during VM startup and not code generation.\n+ *          No need to run it with -Xcomp.\n+ * @library \/test\/lib \/test\/setup_aot\n+ * @build AOTCodeX86CPUFeatureIncompatibilityTest JavacBenchApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *             JavacBenchApp\n+ *             JavacBenchApp$ClassFile\n+ *             JavacBenchApp$FileManager\n+ *             JavacBenchApp$SourceFile\n+ * @run driver AOTCodeX86CPUFeatureIncompatibilityTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class AOTCodeX86CPUFeatureIncompatibilityTest {\n+    public static void main(String... args) throws Exception {\n+        testIncompatibleSSEFeature();\n+        testIncompatibleAVXFeature();\n+    }\n+\n+    \/\/ Minimum value of UseSSE required by JVM is 2. So the production run has to be executed with UseSSE=2.\n+    \/\/ To simulate the case of incmpatible SSE feature, we can run this test only on system with higher SSE level (sse3 or above).\n+    public static void testIncompatibleSSEFeature() throws Exception {\n+        if (checkSSE3Feature()) {\n+            new CDSAppTester(\"AOTCodeX86CPUFeatureIncompatibilityTest\") {\n+                @Override\n+                public String[] vmArgs(RunMode runMode) {\n+                    if (runMode == RunMode.PRODUCTION) {\n+                        return new String[] {\"-XX:UseSSE=2\", \"-Xlog:aot+codecache+init=debug\"};\n+                    }\n+                    return new String[] {};\n+                }\n+                @Override\n+                public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+                    if (runMode == RunMode.ASSEMBLY) {\n+                        out.shouldMatch(\"CPU features recorded in AOTCodeCache:.*sse3.*\");\n+                    } else if (runMode == RunMode.PRODUCTION) {\n+                        out.shouldMatch(\"AOT Code Cache disabled: required cpu features are missing:.*avx.*\");\n+                        out.shouldContain(\"Unable to use AOT Code Cache\");\n+                    }\n+                }\n+                @Override\n+                public String classpath(RunMode runMode) {\n+                    return \"app.jar\";\n+                }\n+                @Override\n+                public String[] appCommandLine(RunMode runMode) {\n+                    return new String[] {\n+                        \"JavacBenchApp\", \"10\"\n+                    };\n+                }\n+            }.runAOTWorkflow(\"--two-step-training\");\n+        } else {\n+            \/* SSE3 not supported on this system, nothing to do *\/\n+        }\n+    }\n+\n+    public static void testIncompatibleAVXFeature() throws Exception {\n+        if (checkAVXFeature()) {\n+            new CDSAppTester(\"AOTCodeX86CPUFeatureIncompatibilityTest\") {\n+                @Override\n+                public String[] vmArgs(RunMode runMode) {\n+                    if (runMode == RunMode.PRODUCTION) {\n+                        return new String[] {\"-XX:UseAVX=0\", \"-Xlog:aot+codecache+init=debug\"};\n+                    }\n+                    return new String[] {};\n+                }\n+                @Override\n+                public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+                    if (runMode == RunMode.ASSEMBLY) {\n+                        out.shouldMatch(\"CPU features recorded in AOTCodeCache:.*avx.*\");\n+                    } else if (runMode == RunMode.PRODUCTION) {\n+                        out.shouldMatch(\"AOT Code Cache disabled: required cpu features are missing:.*avx.*\");\n+                        out.shouldContain(\"Unable to use AOT Code Cache\");\n+                    }\n+                }\n+                @Override\n+                public String classpath(RunMode runMode) {\n+                    return \"app.jar\";\n+                }\n+                @Override\n+                public String[] appCommandLine(RunMode runMode) {\n+                    return new String[] {\n+                        \"JavacBenchApp\", \"10\"\n+                    };\n+                }\n+            }.runAOTWorkflow(\"--two-step-training\");\n+        } else {\n+            \/* AVX features not supported on this system, nothing to do *\/\n+        }\n+    }\n+\n+    static boolean checkAVXFeature() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:os+cpu=info\", \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldMatch(\"CPU:.*avx.*\");\n+        return output.matches(\"CPU:.*avx.*\");\n+    }\n+\n+    static boolean checkSSE3Feature() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:os+cpu=info\", \"-version\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldMatch(\"CPU:.*sse3.*\");\n+        return output.matches(\"CPU:.*sse3.*\");\n+\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeX86CPUFeatureIncompatibilityTest.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -242,0 +242,15 @@\n+    public boolean matches(String regexp) {\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        String stdout = getStdout();\n+        Matcher matcher = pattern.matcher(stdout);\n+        if (matcher.find()) {\n+            return true;\n+        }\n+        String stderr = getStderr();\n+        matcher = pattern.matcher(stderr);\n+        if (matcher.find()) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}