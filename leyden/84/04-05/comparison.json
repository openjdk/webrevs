{"files":[{"patch":"@@ -201,0 +201,4 @@\n+  product(bool, AOTCodeCPUFeatureCheck, true, DIAGNOSTIC,                   \\\n+          \"Check CPU features during production run are compatible \"        \\\n+          \"with the CPU features used during the assembly phase.\")          \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -754,1 +754,1 @@\n-  if (!VM_Version::supports_features(cached_cpu_features_buffer)) {\n+  if (AOTCodeCPUFeatureCheck && !VM_Version::supports_features(cached_cpu_features_buffer)) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @summary CPU feature compatibility test for AOT Code Cache\n+ * @requires vm.cds.supports.aot.code.caching\n+ * @requires vm.compMode != \"Xcomp\" & vm.compMode != \"Xint\"\n+ * @requires os.simpleArch == \"x64\" | os.simpleArch == \"aarch64\"\n+ * @comment The test verifies AOT checks during VM startup and not code generation.\n+ *          No need to run it with -Xcomp.\n+ * @library \/test\/lib \/test\/setup_aot\n+ * @build AOTCodeCPUFeatureIncompatibilityTest JavacBenchApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n+ *             JavacBenchApp\n+ *             JavacBenchApp$ClassFile\n+ *             JavacBenchApp$FileManager\n+ *             JavacBenchApp$SourceFile\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI AOTCodeCPUFeatureIncompatibilityTest\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.whitebox.cpuinfo.CPUInfo;\n+\n+public class AOTCodeCPUFeatureIncompatibilityTest {\n+    public static void main(String... args) throws Exception {\n+        List<String> cpuFeatures = CPUInfo.getFeatures();\n+        if (Platform.isX64()) {\n+            \/\/ Minimum value of UseSSE required by JVM is 2. So the production run has to be executed with UseSSE=2.\n+            \/\/ To simulate the case of incmpatible SSE feature, we can run this test only on system with higher SSE level (sse3 or above).\n+            if (isSSE3Supported(cpuFeatures)) {\n+                testIncompatibleFeature(\"-XX:UseSSE=2\", \"sse3\");\n+\t    }\n+\t    if (isAVXSupported(cpuFeatures)) {\n+                testIncompatibleFeature(\"-XX:UseAVX=0\", \"avx\");\n+            }\n+\n+        \/*\n+         * Unfortunately -XX:-UseCRC32 does not clear the feature bit in VM_Version::_features!\n+         * Disable this test until it is fixed\n+\t} else if (Platform.isAArch64()) {\n+            if (isCRC32Supported(cpuFeatures)) {\n+                testIncompatibleFeature(\"-XX:-UseCRC32\", \"crc32\");\n+            }\n+        *\/\n+        }\n+    }\n+\n+    \/\/ vmOption = command line option to disable CPU feature\n+    \/\/ featureName = name of the CPU feature used by the JVM in the log messages\n+    public static void testIncompatibleFeature(String vmOption, String featureName) throws Exception {\n+        new CDSAppTester(\"AOTCodeCPUFeatureIncompatibilityTest\") {\n+            @Override\n+            public String[] vmArgs(RunMode runMode) {\n+                if (runMode == RunMode.PRODUCTION) {\n+                    return new String[] {vmOption, \"-Xlog:aot+codecache+init=debug\"};\n+                }\n+                return new String[] {};\n+            }\n+            @Override\n+            public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+                if (runMode == RunMode.ASSEMBLY) {\n+                    out.shouldMatch(\"CPU features recorded in AOTCodeCache:.*\" + featureName + \".*\");\n+                } else if (runMode == RunMode.PRODUCTION) {\n+                    out.shouldMatch(\"AOT Code Cache disabled: required cpu features are missing:.*\" + featureName + \".*\");\n+                    out.shouldContain(\"Unable to use AOT Code Cache\");\n+                }\n+            }\n+            @Override\n+            public String classpath(RunMode runMode) {\n+                return \"app.jar\";\n+            }\n+            @Override\n+            public String[] appCommandLine(RunMode runMode) {\n+                return new String[] {\n+                    \"JavacBenchApp\", \"10\"\n+                };\n+            }\n+        }.runAOTWorkflow(\"--two-step-training\");\n+    }\n+\n+    \/\/ Only used on x86-64 platform\n+    static boolean isSSE3Supported(List<String> cpuFeatures) {\n+        return cpuFeatures.contains(\"sse3\");\n+    }\n+\n+    \/\/ Only used on x86-64 platform\n+    static boolean isAVXSupported(List<String> cpuFeatures) {\n+        return cpuFeatures.contains(\"avx\");\n+    }\n+\n+    \/\/ Only used on aarch64 platofrm\n+    static boolean isCRC32Supported(List<String> cpuFeatures) {\n+        return cpuFeatures.contains(\"crc32\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeCPUFeatureIncompatibilityTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -1,145 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/**\n- * @test\n- * @summary CPU feature compatibility test for AOT Code Cache\n- * @requires vm.cds.supports.aot.code.caching\n- * @requires vm.compMode != \"Xcomp\" & vm.compMode != \"Xint\"\n- * @comment The test verifies AOT checks during VM startup and not code generation.\n- *          No need to run it with -Xcomp.\n- * @library \/test\/lib \/test\/setup_aot\n- * @build AOTCodeX86CPUFeatureIncompatibilityTest JavacBenchApp\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar\n- *             JavacBenchApp\n- *             JavacBenchApp$ClassFile\n- *             JavacBenchApp$FileManager\n- *             JavacBenchApp$SourceFile\n- * @run driver AOTCodeX86CPUFeatureIncompatibilityTest\n- *\/\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import jdk.test.lib.cds.CDSAppTester;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class AOTCodeX86CPUFeatureIncompatibilityTest {\n-    public static void main(String... args) throws Exception {\n-        testIncompatibleSSEFeature();\n-        testIncompatibleAVXFeature();\n-    }\n-\n-    \/\/ Minimum value of UseSSE required by JVM is 2. So the production run has to be executed with UseSSE=2.\n-    \/\/ To simulate the case of incmpatible SSE feature, we can run this test only on system with higher SSE level (sse3 or above).\n-    public static void testIncompatibleSSEFeature() throws Exception {\n-        if (checkSSE3Feature()) {\n-            new CDSAppTester(\"AOTCodeX86CPUFeatureIncompatibilityTest\") {\n-                @Override\n-                public String[] vmArgs(RunMode runMode) {\n-                    if (runMode == RunMode.PRODUCTION) {\n-                        return new String[] {\"-XX:UseSSE=2\", \"-Xlog:aot+codecache+init=debug\"};\n-                    }\n-                    return new String[] {};\n-                }\n-                @Override\n-                public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n-                    if (runMode == RunMode.ASSEMBLY) {\n-                        out.shouldMatch(\"CPU features recorded in AOTCodeCache:.*sse3.*\");\n-                    } else if (runMode == RunMode.PRODUCTION) {\n-                        out.shouldMatch(\"AOT Code Cache disabled: required cpu features are missing:.*avx.*\");\n-                        out.shouldContain(\"Unable to use AOT Code Cache\");\n-                    }\n-                }\n-                @Override\n-                public String classpath(RunMode runMode) {\n-                    return \"app.jar\";\n-                }\n-                @Override\n-                public String[] appCommandLine(RunMode runMode) {\n-                    return new String[] {\n-                        \"JavacBenchApp\", \"10\"\n-                    };\n-                }\n-            }.runAOTWorkflow(\"--two-step-training\");\n-        } else {\n-            \/* SSE3 not supported on this system, nothing to do *\/\n-        }\n-    }\n-\n-    public static void testIncompatibleAVXFeature() throws Exception {\n-        if (checkAVXFeature()) {\n-            new CDSAppTester(\"AOTCodeX86CPUFeatureIncompatibilityTest\") {\n-                @Override\n-                public String[] vmArgs(RunMode runMode) {\n-                    if (runMode == RunMode.PRODUCTION) {\n-                        return new String[] {\"-XX:UseAVX=0\", \"-Xlog:aot+codecache+init=debug\"};\n-                    }\n-                    return new String[] {};\n-                }\n-                @Override\n-                public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n-                    if (runMode == RunMode.ASSEMBLY) {\n-                        out.shouldMatch(\"CPU features recorded in AOTCodeCache:.*avx.*\");\n-                    } else if (runMode == RunMode.PRODUCTION) {\n-                        out.shouldMatch(\"AOT Code Cache disabled: required cpu features are missing:.*avx.*\");\n-                        out.shouldContain(\"Unable to use AOT Code Cache\");\n-                    }\n-                }\n-                @Override\n-                public String classpath(RunMode runMode) {\n-                    return \"app.jar\";\n-                }\n-                @Override\n-                public String[] appCommandLine(RunMode runMode) {\n-                    return new String[] {\n-                        \"JavacBenchApp\", \"10\"\n-                    };\n-                }\n-            }.runAOTWorkflow(\"--two-step-training\");\n-        } else {\n-            \/* AVX features not supported on this system, nothing to do *\/\n-        }\n-    }\n-\n-    static boolean checkAVXFeature() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:os+cpu=info\", \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-        output.shouldMatch(\"CPU:.*avx.*\");\n-        return output.matches(\"CPU:.*avx.*\");\n-    }\n-\n-    static boolean checkSSE3Feature() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:os+cpu=info\", \"-version\");\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldHaveExitValue(0);\n-        output.shouldMatch(\"CPU:.*sse3.*\");\n-        return output.matches(\"CPU:.*sse3.*\");\n-\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeX86CPUFeatureIncompatibilityTest.java","additions":0,"deletions":145,"binary":false,"changes":145,"status":"deleted"}]}