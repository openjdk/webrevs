{"files":[{"patch":"@@ -397,0 +397,8 @@\n+  if (count == 0) {\n+    \/\/ Avoid confusing CDS code with zero-sized tables, just return.\n+    log_info(cds)(\"No permanent oops\");\n+    _permanent_oop_count = count;\n+    _permanent_oop_offsets = nullptr;\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -337,0 +337,7 @@\n+  \/\/ Current Leyden implementation requires SegmentedCodeCache: the archive-backed code\n+  \/\/ cache would be initialized only then. Force SegmentedCodeCache if we are loading\/storing\n+  \/\/ cached code. TODO: Resolve this in code cache initialization code.\n+  if (!SegmentedCodeCache && (LoadCachedCode || StoreCachedCode)) {\n+    FLAG_SET_ERGO(SegmentedCodeCache, true);\n+  }\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}