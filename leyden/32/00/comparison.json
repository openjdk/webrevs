{"files":[{"patch":"@@ -399,0 +399,8 @@\n+  if (count == 0) {\n+    \/\/ Avoid confusing CDS code with zero-sized tables, just return.\n+    log_info(cds)(\"No permanent oops\");\n+    _permanent_oop_count = count;\n+    _permanent_oop_offsets = nullptr;\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -338,0 +338,7 @@\n+  \/\/ Current Leyden implementation requires SegmentedCodeCache: the archive-backed code\n+  \/\/ cache would be initialized only then. Force SegmentedCodeCache if we are loading\/storing\n+  \/\/ cached code. TODO: Resolve this in code cache initialization code.\n+  if (!SegmentedCodeCache && (LoadCachedCode || StoreCachedCode)) {\n+    FLAG_SET_ERGO(SegmentedCodeCache, true);\n+  }\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -214,3 +214,5 @@\n-    compile_cached_code(CompLevel_full_profile,      false, CompLevel_limited_profile,   CHECK);\n-    compile_cached_code(CompLevel_limited_profile,   false, CompLevel_limited_profile,   CHECK);\n-    compile_cached_code(CompLevel_simple,            false, CompLevel_simple,            CHECK);\n+    if (TieredCompilation) {\n+      compile_cached_code(CompLevel_full_profile,      false, CompLevel_limited_profile,   CHECK);\n+      compile_cached_code(CompLevel_limited_profile,   false, CompLevel_limited_profile,   CHECK);\n+      compile_cached_code(CompLevel_simple,            false, CompLevel_simple,            CHECK);\n+    }\n@@ -235,6 +237,2 @@\n-    for (int level = CompLevel_simple; level <= CompLevel_full_optimization; level++) {\n-      CompLevel comp_level = (CompLevel)level;\n-      if (comp_level == CompLevel_full_profile) {\n-        comp_level = CompLevel_limited_profile;\n-      }\n-      PrecompileIterator pi(comp_level, false \/*for_preload*\/, (CompLevel)level, THREAD);\n+    {\n+      PrecompileIterator pi(CompLevel_full_optimization, false \/*for_preload*\/, CompLevel_full_optimization, THREAD);\n@@ -245,0 +243,12 @@\n+    if (TieredCompilation) {\n+      for (int level = CompLevel_simple; level < CompLevel_full_optimization; level++) {\n+        CompLevel comp_level = (CompLevel) level;\n+        if (comp_level == CompLevel_full_profile) {\n+          comp_level = CompLevel_limited_profile;\n+        }\n+        PrecompileIterator pi(comp_level, false \/*for_preload*\/, (CompLevel) level, THREAD);\n+        TrainingData::iterate(pi);\n+        pi.precompile(builder, THREAD);\n+      }\n+    }\n+\n","filename":"src\/hotspot\/share\/compiler\/precompiler.cpp","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"}]}