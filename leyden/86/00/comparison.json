{"files":[{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/safepointVerifiers.hpp\"\n@@ -1332,0 +1333,1 @@\n+        assert(HeapShared::has_been_archived(source_oop), \"did you call HeapShared::rehash_archived_object_cache()?\");\n@@ -1381,1 +1383,1 @@\n-        if (ArchiveHeapWriter::is_marked_as_native_pointer(_heap_info, _source_obj, fd->offset())) {\n+        if (ArchiveHeapWriter::is_marked_as_native_pointer(_heap_info, _buffered_addr, fd->offset())) {\n@@ -1404,1 +1406,1 @@\n-      oop requested_obj = ArchiveHeapWriter::source_obj_to_requested_obj(_source_obj);\n+      oop requested_obj = cast_to_oop(ArchiveHeapWriter::buffered_addr_to_requested_addr(_buffered_addr));\n@@ -1504,0 +1506,1 @@\n+      assert(HeapShared::has_been_archived(source_oop), \"did you call HeapShared::rehash_archived_object_cache()?\");\n@@ -1572,0 +1575,5 @@\n+    \/\/ HeapShared::archived_object_cache() uses raw address of oop to compute the hash. At this point,\n+    \/\/ a GC might have happened and moved some of the oops, so the table needs to be rehashed.\n+    NoSafepointVerifier nsv;\n+    HeapShared::rehash_archived_object_cache();\n+\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -103,0 +103,5 @@\n+void ArchiveHeapWriter::delete_tables_with_raw_oops() {\n+  delete _source_objs;\n+  _source_objs = nullptr;\n+}\n+\n@@ -153,1 +158,1 @@\n-  HeapShared::CachedOopInfo* p = HeapShared::archived_object_cache()->get(src_obj);\n+  HeapShared::CachedOopInfo* p = HeapShared::get_cached_oop_info(src_obj);\n@@ -162,3 +167,3 @@\n-  oop* p = _buffer_offset_to_source_obj_table->get(buffered_address_to_offset(buffered_addr));\n-  if (p != nullptr) {\n-    return *p;\n+  OopHandle* oh = _buffer_offset_to_source_obj_table->get(buffered_address_to_offset(buffered_addr));\n+  if (oh != nullptr) {\n+    return oh->resolve();\n@@ -326,1 +331,1 @@\n-    HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(src_obj);\n@@ -333,1 +338,2 @@\n-    _buffer_offset_to_source_obj_table->put_when_absent(buffer_offset, src_obj);\n+    OopHandle handle(Universe::vm_global(), src_obj);\n+    _buffer_offset_to_source_obj_table->put_when_absent(buffer_offset, handle);\n@@ -685,1 +691,1 @@\n-    HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(src_obj);\n@@ -737,10 +743,3 @@\n-bool ArchiveHeapWriter::is_marked_as_native_pointer(ArchiveHeapInfo* heap_info, oop src_obj, int field_offset) {\n-  HeapShared::CachedOopInfo* p = HeapShared::archived_object_cache()->get(src_obj);\n-  assert(p != nullptr, \"must be\");\n-\n-  \/\/ requested_field_addr = the address of this field in the requested space\n-  oop requested_obj = requested_obj_from_buffer_offset(p->buffer_offset());\n-  Metadata** requested_field_addr = (Metadata**)(cast_from_oop<address>(requested_obj) + field_offset);\n-  assert((Metadata**)_requested_bottom <= requested_field_addr && requested_field_addr < (Metadata**) _requested_top, \"range check\");\n-\n-  BitMap::idx_t idx = requested_field_addr - (Metadata**) _requested_bottom;\n+bool ArchiveHeapWriter::is_marked_as_native_pointer(ArchiveHeapInfo* heap_info, address buffered_obj, int field_offset) {\n+  size_t offset = buffered_address_to_offset(buffered_obj) + checked_cast<size_t>(field_offset); \/\/ in bytes\n+  BitMap::idx_t idx = checked_cast<BitMap::idx_t>(offset) \/ HeapWordSize;\n@@ -768,1 +767,1 @@\n-    HeapShared::CachedOopInfo* p = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* p = HeapShared::get_cached_oop_info(src_obj);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-  typedef ResizeableResourceHashtable<size_t, oop,\n+  typedef ResizeableResourceHashtable<size_t, OopHandle,\n@@ -232,0 +232,1 @@\n+  static void delete_tables_with_raw_oops();\n@@ -241,1 +242,1 @@\n-  static bool is_marked_as_native_pointer(ArchiveHeapInfo* heap_info, oop src_obj, int field_offset);\n+  static bool is_marked_as_native_pointer(ArchiveHeapInfo* heap_info, address buffered_obj, int field_offset);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -288,1 +289,2 @@\n-inline bool CDSHeapVerifier::do_entry(oop& orig_obj, HeapShared::CachedOopInfo& value) {\n+inline bool CDSHeapVerifier::do_entry(OopHandle& orig_obj_handle, HeapShared::CachedOopInfo& value) {\n+  oop orig_obj = orig_obj_handle.resolve();\n@@ -338,1 +340,1 @@\n-  HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(orig_obj);\n+  HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(orig_obj);\n@@ -372,1 +374,1 @@\n-    HeapShared::CachedOopInfo* ref = HeapShared::archived_object_cache()->get(info->orig_referrer());\n+    HeapShared::CachedOopInfo* ref = HeapShared::get_cached_oop_info(info->orig_referrer());\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"oops\/oopHandle.hpp\"\n@@ -83,1 +84,1 @@\n-  inline bool do_entry(oop& orig_obj, HeapShared::CachedOopInfo& value);\n+  inline bool do_entry(OopHandle& orig_obj, HeapShared::CachedOopInfo& value);\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -176,0 +177,19 @@\n+oop HeapShared::CachedOopInfo::orig_referrer() const {\n+  return _orig_referrer.resolve();\n+}\n+\n+void HeapShared::rehash_archived_object_cache() {\n+  assert(SafepointSynchronize::is_at_safepoint() ||\n+         JavaThread::current()->is_in_no_safepoint_scope(), \"sanity\");\n+\n+  ArchivedObjectCache* new_cache =\n+      new (mtClass)ArchivedObjectCache(archived_object_cache()->table_size(), MAX_TABLE_SIZE);\n+\n+  archived_object_cache()->iterate_all([&](OopHandle o, CachedOopInfo& info) {\n+    new_cache->put_when_absent(o, info);\n+  });\n+\n+  delete _archived_object_cache;\n+  _archived_object_cache = new_cache;\n+}\n+\n@@ -177,0 +197,2 @@\n+  assert(SafepointSynchronize::is_at_safepoint() ||\n+         JavaThread::current()->is_in_no_safepoint_scope(), \"sanity\");\n@@ -182,0 +204,17 @@\n+unsigned int HeapShared::oop_handle_hash_raw(const OopHandle& oh) {\n+  return oop_hash(oh.resolve());\n+}\n+\n+unsigned int HeapShared::oop_handle_hash(const OopHandle& oh) {\n+  oop o = oh.resolve();\n+  if (o == nullptr) {\n+    return 0;\n+  } else {\n+    return o->identity_hash();\n+  }\n+}\n+\n+bool HeapShared::oop_handle_equals(const OopHandle& a, const OopHandle& b) {\n+  return a.resolve() == b.resolve();\n+}\n+\n@@ -233,1 +272,2 @@\n-  return archived_object_cache()->get(obj) != nullptr;\n+  OopHandle oh(&obj);\n+  return archived_object_cache()->get(oh) != nullptr;\n@@ -260,13 +300,0 @@\n-inline unsigned int oop_handle_hash(const OopHandle& oh) {\n-  oop o = oh.resolve();\n-  if (o == nullptr) {\n-    return 0;\n-  } else {\n-    return o->identity_hash();\n-  }\n-}\n-\n-inline bool oop_handle_equals(const OopHandle& a, const OopHandle& b) {\n-  return a.resolve() == b.resolve();\n-}\n-\n@@ -277,2 +304,2 @@\n-    oop_handle_hash,\n-    oop_handle_equals> {};\n+    HeapShared::oop_handle_hash,\n+    HeapShared::oop_handle_equals> {};\n@@ -320,2 +347,2 @@\n-    oop_handle_hash,\n-    oop_handle_equals> {};\n+    HeapShared::oop_handle_hash,\n+    HeapShared::oop_handle_equals> {};\n@@ -489,1 +516,3 @@\n-    archived_object_cache()->put_when_absent(obj, info);\n+\n+    OopHandle oh(Universe::vm_global(), obj);\n+    archived_object_cache()->put_when_absent(oh, info);\n@@ -826,1 +855,2 @@\n-  CachedOopInfo* info = archived_object_cache()->get(src_obj);\n+  OopHandle oh(&src_obj);\n+  CachedOopInfo* info = archived_object_cache()->get(oh);\n@@ -833,1 +863,2 @@\n-  CachedOopInfo* info = archived_object_cache()->get(src_obj);\n+  OopHandle oh(&src_obj);\n+  CachedOopInfo* info = archived_object_cache()->get(oh);\n@@ -1664,1 +1695,1 @@\n-  return CachedOopInfo(referrer, points_to_oops_checker.result());\n+  return CachedOopInfo(OopHandle(Universe::vm_global(), referrer), points_to_oops_checker.result());\n@@ -2316,0 +2347,12 @@\n+\/\/ These tables should be used only within the CDS safepoint, so\n+\/\/ delete them before we exit the safepoint. Otherwise the table will\n+\/\/ contain bad oops after a GC.\n+void HeapShared::delete_tables_with_raw_oops() {\n+  assert(_seen_objects_table == nullptr, \"should have been deleted\");\n+\n+  delete _dumped_interned_strings;\n+  _dumped_interned_strings = nullptr;\n+\n+  ArchiveHeapWriter::delete_tables_with_raw_oops();\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":65,"deletions":22,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -171,0 +171,3 @@\n+  static unsigned oop_handle_hash(OopHandle const& oh);\n+  static unsigned oop_handle_hash_raw(OopHandle const& oh);\n+  static bool oop_handle_equals(const OopHandle& a, const OopHandle& b);\n@@ -179,1 +182,1 @@\n-    oop _orig_referrer;\n+    OopHandle _orig_referrer;\n@@ -190,1 +193,1 @@\n-    CachedOopInfo(oop orig_referrer, bool has_oop_pointers)\n+    CachedOopInfo(OopHandle orig_referrer, bool has_oop_pointers)\n@@ -195,1 +198,1 @@\n-    oop orig_referrer()             const { return _orig_referrer;   }\n+    oop orig_referrer() const;\n@@ -206,1 +209,1 @@\n-  typedef ResizeableResourceHashtable<oop, CachedOopInfo,\n+  typedef ResizeableResourceHashtable<OopHandle, CachedOopInfo,\n@@ -209,1 +212,2 @@\n-      HeapShared::oop_hash> ArchivedObjectCache;\n+      HeapShared::oop_handle_hash_raw,\n+      HeapShared::oop_handle_equals> ArchivedObjectCache;\n@@ -341,1 +345,0 @@\n-  static bool has_been_archived(oop orig_obj);\n@@ -384,0 +387,6 @@\n+  static void rehash_archived_object_cache();\n+\n+  static CachedOopInfo* get_cached_oop_info(oop orig_obj) {\n+    OopHandle oh(&orig_obj);\n+    return _archived_object_cache->get(oh);\n+  }\n@@ -421,0 +430,2 @@\n+  static void delete_tables_with_raw_oops() NOT_CDS_JAVA_HEAP_RETURN;\n+\n@@ -432,0 +443,1 @@\n+  static bool has_been_archived(oop orig_obj);\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -726,0 +726,2 @@\n+\n+  HeapShared::delete_tables_with_raw_oops();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}