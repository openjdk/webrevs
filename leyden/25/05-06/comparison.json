{"files":[{"patch":"@@ -2492,0 +2492,2 @@\n+  \/\/ we need to take a lock to prevent race between compiler thread generating blob and the main thread generating adapter\n+  MutexLocker ml(Compile_lock);\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2545,0 +2545,4 @@\n+    entry = *entry_p;\n+    assert(entry->fingerprint()->equals(fp), \"fingerprint mismatch key fp %s %s (hash=%d) != found fp %s %s (hash=%d)\",\n+           entry->fingerprint()->as_basic_args_string(), entry->fingerprint()->as_string(), entry->fingerprint()->compute_hash(),\n+           fp->as_basic_args_string(), fp->as_string(), fp->compute_hash());\n@@ -2549,1 +2553,1 @@\n-    return *entry_p;\n+    return entry;\n@@ -2666,1 +2670,1 @@\n-      if (generate_adapter_code(adapter_blob, entry, total_args_passed, sig_bt, true)) {\n+      if (generate_adapter_code(adapter_blob, entry, total_args_passed, sig_bt, \/* is_transient *\/ true)) {\n@@ -2673,1 +2677,1 @@\n-    entry = create_adapter(adapter_blob, fp, total_args_passed, sig_bt, true);\n+    entry = create_adapter(adapter_blob, fp, total_args_passed, sig_bt, \/* is_transient *\/ false);\n@@ -2803,1 +2807,1 @@\n-        AdapterHandlerEntry* comparison_entry = create_adapter(comparison_blob, comparison_fp, total_args_passed, sig_bt, false);\n+        AdapterHandlerEntry* comparison_entry = create_adapter(comparison_blob, comparison_fp, total_args_passed, sig_bt, true);\n@@ -2808,1 +2812,1 @@\n-        delete comparison_entry;\n+        AdapterHandlerEntry::deallocate(comparison_entry);\n@@ -2815,1 +2819,1 @@\n-    entry = create_adapter(new_adapter, fp, total_args_passed, sig_bt, \/* allocate_code_blob *\/ true);\n+    entry = create_adapter(new_adapter, fp, total_args_passed, sig_bt, \/* is_transient *\/ false);\n@@ -2863,1 +2867,1 @@\n-                                                  bool allocate_code_blob) {\n+                                                  bool is_transient) {\n@@ -2899,1 +2903,1 @@\n-    if (!allocate_code_blob) {\n+    if (is_transient) {\n@@ -2926,1 +2930,1 @@\n-                                                           bool allocate_code_blob) {\n+                                                           bool is_transient) {\n@@ -2928,1 +2932,1 @@\n-  if (!generate_adapter_code(adapter_blob, handler, total_args_passed, sig_bt, allocate_code_blob)) {\n+  if (!generate_adapter_code(adapter_blob, handler, total_args_passed, sig_bt, is_transient)) {\n@@ -2931,2 +2935,4 @@\n-  assert_lock_strong(AdapterHandlerLibrary_lock);\n-  _adapter_handler_table->put(fingerprint, handler);\n+  if (!is_transient) {\n+    assert_lock_strong(AdapterHandlerLibrary_lock);\n+    _adapter_handler_table->put(fingerprint, handler);\n+  }\n@@ -3080,1 +3086,1 @@\n-      if (!AdapterHandlerLibrary::generate_adapter_code(adapter_blob, this, nargs, bt, true)) {\n+      if (!AdapterHandlerLibrary::generate_adapter_code(adapter_blob, this, nargs, bt, \/* is_transient *\/ false)) {\n@@ -3104,0 +3110,1 @@\n+  FreeHeap(this);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -727,0 +727,5 @@\n+\n+  static void deallocate(AdapterHandlerEntry *handler) {\n+    handler->~AdapterHandlerEntry();\n+  }\n+\n@@ -791,1 +796,1 @@\n-                                             bool allocate_code_blob);\n+                                             bool is_transient);\n@@ -809,1 +814,1 @@\n-                                    bool allocate_code_blob);\n+                                    bool is_transient);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}