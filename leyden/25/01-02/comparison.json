{"files":[{"patch":"@@ -593,3 +593,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_extrs();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_extrs();\n@@ -599,3 +599,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_early_stubs();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_early_stubs();\n@@ -605,3 +605,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_shared_blobs();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_shared_blobs();\n@@ -611,3 +611,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_stubs();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_stubs();\n@@ -618,3 +618,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_opto();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_opto();\n@@ -625,3 +625,3 @@\n-  SCCache* cache = SCCache::cache();\n-  if (cache != nullptr && cache->_table != nullptr) {\n-    cache->_table->init_c1();\n+  SCAddressTable* table = addr_table();\n+  if (table != nullptr) {\n+    table->init_c1();\n@@ -1175,1 +1175,2 @@\n-          } else if (entries_address[i].comp_level() == CompLevel_simple) {\n+          } else if ((entries_address[i].comp_level() == CompLevel_simple) ||\n+                     (entries_address[i].comp_level() == CompLevel_limited_profile)) {\n@@ -2484,5 +2485,0 @@\n-  \/\/ we need to take a lock to stop C1 and C2 compiler threads racing to\n-  \/\/ write blobs in parallel with each other or with later nmethods\n-  \/\/ TODO - maybe move this up to selected callers so we only lock\n-  \/\/ when saving a c1 or opto blob\n-  MutexLocker ml(Compile_lock);\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -424,0 +424,4 @@\n+  static SCAddressTable* addr_table() {\n+    return is_on() && (cache()->_table != nullptr) ? cache()->_table : nullptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -428,2 +428,1 @@\n-void Method::restore_unshareable_info(TRAPS) {\n-  assert(is_method() && is_valid_method(this), \"ensure C++ vtable is restored\");\n+void Method::restore_adapter(TRAPS) {\n@@ -434,0 +433,5 @@\n+}\n+\n+void Method::restore_unshareable_info(TRAPS) {\n+  assert(is_method() && is_valid_method(this), \"ensure C++ vtable is restored\");\n+  restore_adapter(CHECK);\n@@ -1587,0 +1591,1 @@\n+  m->restore_adapter(CHECK);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -129,0 +129,1 @@\n+  void restore_adapter(TRAPS);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}