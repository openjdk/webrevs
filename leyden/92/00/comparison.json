{"files":[{"patch":"@@ -0,0 +1,4 @@\n+The ONLY purpose of this branch is to create the Release Note for the Leyden EA2 release\n+(so that changes in https:\/\/github.com\/openjdk\/leyden\/blob\/premain\/README.md can be easiy merged).\n+\n+This branch DOES NOT track the version of the Leyden branch used for building the actual EA2 binaries.\n","filename":"00-ABOUT-THIS-BRANCH","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-# Welcome to the Leyden Prototype Repository!\n+# Leyden Early Access 2 Release\n@@ -3,2 +3,2 @@\n-The purpose of the Leyden repository is to prototype improvements to the\n-startup time, time to peak performance, and footprint of Java programs, as a part of \n+The purpose of the Leyden Early Access 2 Release is to prototype improvements to\n+the startup time, time to peak performance, and footprint of Java programs, as a part of\n@@ -6,2 +6,2 @@\n-the Java community, with the hope that some of these improvements can be eventually\n-incoporated in future JDK releases.\n+the Java community, with the hope that some of these improvements can eventually be\n+incoporated into future JDK releases.\n@@ -11,5 +11,5 @@\n-- *This repository contains experimental and unstable code. It is not intended to be used\n-   in a production environment.*\n-- *This repository is intended for developers of the JDK, and advanced Java developers who\n-   are familiar with building the JDK.*\n-- *The experimental features in this repository may be changed or removed without notice.\n+- *This release contains experimental and unstable code from the\n+   Leyden \"[premain](https:\/\/github.com\/openjdk\/leyden\/blob\/premain\/)\" prototype.\n+   It is not intended to be used in a production environment.*\n+\n+- *The experimental features in this release may be changed or removed without notice.\n@@ -17,2 +17,0 @@\n-- *The benchmarks results reported on this page are for illustrative purposes only. Your\n-   applications may get better or worse results.*\n@@ -22,10 +20,2 @@\n-The Leyden \"[premain](https:\/\/github.com\/openjdk\/leyden\/blob\/premain\/)\" prototype\n-includes many optimizations that shift work from run time to earlier\n-executions of the application, which are\n-called _training runs_. In a training run, we pre-compute various kinds of information.\n-Importantly, we pre-compile\n-bytecode to native code, guided by observations of the application's actual behavior\n-during the training run.\n-\n-The Leyden repository closely tracks the JDK main line. We are typically only a few weeks behind\n-the [main-line JDK repo](https:\/\/github.com\/openjdk\/jdk).\n+As of JDK 25, the Leyden Project has successfully delivered ahead-of-time (AOT)\n+optimizations JEPs:\n@@ -33,1 +23,3 @@\n-We have implemented the following improvements:\n+- [JEP 483 - Ahead-of-Time Class Loading & Linking](https:\/\/openjdk.org\/jeps\/483)\n+- [JEP 514 - Ahead-of-Time Command-Line Ergonomics](https:\/\/openjdk.org\/jeps\/514)\n+- [JEP 515 - Ahead-of-Time Method Profiling](https:\/\/openjdk.org\/jeps\/515)\n@@ -35,5 +27,1 @@\n-- **[Ahead-of-Time Class Loading & Linking (JEP 483)](https:\/\/openjdk.org\/jeps\/483)**:\n-  This gives\n-  the JVM the ability to put classes in the _linked_ state as soon the application starts up. As a result,\n-  we can implement many other time shifting optimizations with considerably simplified assumptions.\n-  - Please refer to the [JEP 483 document](https:\/\/openjdk.org\/jeps\/483) for more details.\n+Please refer to the above JEPs for a detailed discussion of AOT optimizations.\n@@ -41,4 +29,2 @@\n-- **[Ahead-of-Time Method Profiling (JEP draft 8325147)](https:\/\/openjdk.org\/jeps\/8325147)**: We store method profiles\n-  from training runs in the CDS archive, thereby enabling the JIT to begin compiling earlier during warmup.\n-  As a result, Java applications can reach peak performance faster.\n-  - This feature is enabled by the new diagnostic (`-XX:+UnlockDiagnosticVMOptions`) VM flags `-XX:+RecordTraining` and `-XX:+ReplayTraining`.\n+The Leyden \"[premain](https:\/\/github.com\/openjdk\/leyden\/blob\/premain\/)\" prototype\n+includes new experimental AOT optimizations that are not yet integrated into the JDK mainline:\n@@ -47,1 +33,1 @@\n-  compiled and stored along with the CDS archive. As a result, as soon as the application starts up\n+  compiled and stored along with the AOT cache. As a result, as soon as the application starts up\n@@ -49,9 +35,2 @@\n-  - This feature is enabled by the new VM flags `-XX:+StoreCachedCode`, `-XX:+LoadCachedCode`, and `-XX:CachedCodeFile`.\n-  - Currently, the native code is stored in a separate file, but our plans is to eventually store the native code\n-    inside the CDS archive file.\n-\n-- **Ahead-of-time resolution of constant pool entries**: many\n-  constant pool entries are resolved during the assembly phase. This allows the application to start up faster. Also,\n-  the existence of resolved constant pool entries allows the AOT compiler to generate better code.\n-  For diagnostic purposes, you can use `-XX:+UnlockDiagnosticVMOptions -XX:-AOTInvokeDynamicLinking`\n-  to disable the AOT linking of constant pool entries for the `invokedynamic` bytecode.\n+  - This feature is enabled by default when you create an AOT cache. It can be disabled with the diagnostic\n+    flag `-XX:-AOTCodeCaching`.\n@@ -61,1 +40,2 @@\n-  - This feature is enabled by the new VM flag `-XX:+ArchiveDynamicProxies`.\n+  - This feature is enabled by default when you create an AOT cache. It can be disabled with the diagnostic\n+    flag `-XX:-ArchiveDynamicProxies`.\n@@ -66,1 +46,2 @@\n-  - This feature is enabled by the new VM flag `-XX:+ArchiveReflectionData`.\n+  - This feature is enabled by default when you create an AOT cache. It can be disabled with the diagnostic\n+    flag `-XX:-ArchiveReflectionData`.\n@@ -69,9 +50,2 @@\n-  - This feature is enabled by the new VM flag `-XX:+ArchiveLoaderLookupCache`.\n-\n-By default, all optimizations listed above are enabled.  This simplifies testing of the whole\n-prototype.  If necessary for more detailed testing, each feature can\n-be individually disabled by negating its associated flag.\n-\n-The names of all of these VM flags will change in a future EA build as we transition from the old “CDS” terminology to the new “AOT” terminology, as discussed [here](https:\/\/openjdk.org\/jeps\/483#History).\n-\n-[CDS]: <https:\/\/docs.oracle.com\/en\/java\/javase\/22\/vm\/class-data-sharing.html>\n+  - This feature is enabled by default when you create an AOT cache. It can be disabled with the diagnostic\n+    flag `-XX:-ArchiveLoaderLookupCache`.\n@@ -79,21 +53,1 @@\n-## 2. Building the Leyden Repository\n-\n-The Leyden Repository can be built in the same way as the main-line JDK repository.\n-Please use the \"premain\" branch. I.e., [https:\/\/github.com\/openjdk\/leyden\/tree\/premain](https:\/\/github.com\/openjdk\/leyden\/tree\/premain).\n-\n-For build instructions please see the\n-[online documentation](https:\/\/openjdk.org\/groups\/build\/doc\/building.html),\n-or either of these files:\n-\n-- [doc\/building.html](doc\/building.html) (html version)\n-- [doc\/building.md](doc\/building.md) (markdown version)\n-\n-See <https:\/\/openjdk.org\/> for more information about the OpenJDK\n-Community and the JDK and see <https:\/\/bugs.openjdk.org> for JDK issue\n-tracking.\n-\n-## 3. Trying out Leyden Features\n-\n-The easiest way to try out the Leyden optimizations is to build a JVM from the Leyden repository, and use it with your application with the `-XX:AOTCache` flag.\n-\n-> Note: in an earlier version of the Leyden prototype, the optimizations were controlled by an experimental flag `-XX:CacheDataStore`. This flag has been deprecated and will be removed. For a reference to this flag, please see an [older version of this document](https:\/\/github.com\/openjdk\/leyden\/blob\/076c71f7cb9887ef3d64b752976610d19792203b\/README.md).\n+## 2. Trying out Leyden Early Access 2 Features\n@@ -101,0 +55,1 @@\n+The easiest way to try out the Leyden Early Access 2 features is to use the `java` program in the Leyden Early Access 2 Release with the `-XX:AOTCache` flag.\n@@ -104,1 +59,1 @@\n-class to compile some Java source files. This benchmark spends a significant amount of start-up time \n+class to compile some Java source files. This benchmark spends a significant amount of start-up time\n@@ -107,2 +62,1 @@\n-First, download [JavacBenchApp.java](https:\/\/github.com\/iklam\/jdk\/raw\/f95f851aed3d2bf06edabab1e7c24e15f4145d0d\/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/JavacBenchApp.java)\n-and compile it into a JAR file.\n+First, download [JavacBenchApp.java](test\/setup_aot\/JavacBenchApp.java) and compile it into a JAR file.\n@@ -110,1 +64,1 @@\n-(Remember to use the `java` program that you built from the Leyden repository.)\n+(Remember to use the `java` program from the Leyden Early Access 2 Release.)\n@@ -122,1 +76,1 @@\n-We can run this benchmark without any Leyden features. It takes 893 ms:\n+We can run this benchmark without any AOT optimizations. It takes 893 ms:\n@@ -148,0 +102,9 @@\n+Alternatively, you can also combine the training run and assembly phase with a single command:\n+\n+```\n+$ java -XX:AOTCacheOutput=JavacBenchApp.aot \\\n+       -cp JavacBenchApp.jar JavacBenchApp 50\n+$ ls -l JavacBenchApp.aot\n+-r--r--r-- 1 iklam iklam 42332160 Mar  3 16:58 JavacBenchApp.aot\n+```\n+\n@@ -156,0 +119,2 @@\n+### Ending the Training Run Early\n+\n@@ -165,108 +130,1 @@\n-### Prototype for JEP Draft 8350022: Ahead-of-time Command Line Ergonomics\n-\n-We have implemented part of the JEP draft [8350022: Ahead-of-time Command Line Ergonomics](https:\/\/openjdk.org\/jeps\/8350022).\n-This simplifies the training process, so that an AOT cache can be created with a single command-line:\n-\n-```\n-$ java -XX:AOTCacheOutput=JavacBenchApp.aot -cp JavacBenchApp.jar \\\n-      JavacBenchApp 50\n-Generated source code for 51 classes and compiled them in 2212 ms\n-[3.720s][warning][cds] Skipping Sanity: Unsupported location\n-Temporary AOTConfiguration recorded: JavacBenchApp.aot.config\n-Launching child process \/bld\/images\/jdk\/bin\/java to assemble AOT cache JavacBenchApp.aot\n-using configuration JavacBenchApp.aot.config\n-Picked up JAVA_TOOL_OPTIONS: -Djava.class.path=JavacBenchApp.jar\n-                             -XX:AOTCacheOutput=JavacBenchApp.aot\n-                             -XX:AOTConfiguration=JavacBenchApp.aot.config -XX:AOTMode=create\n-Reading AOTConfiguration JavacBenchApp.aot.config and writing AOTCache JavacBenchApp.aot\n-AOTCache creation is complete: JavacBenchApp.aot 39956480 bytes\n-Removed temporary AOT configuration file JavacBenchApp.aot.config\n-```\n-\n-As seen in the log messages, when the application is about to exit, the JVM writes a temporary AOT configuration file\n-and spawns a child process to create an AOT cache using this configuration file.\n-\n-In the above example, the configuration file's name `JavacBenchApp.aot.config` is automatically picked by the JVM. This is a temporary\n-file written into the same directory as the file specified by `-XX:AOTCacheOutput`, so you must make sure this directory is writable.\n-After the cache is created, this temporary is automatically removed.\n-\n-If you want to persist the configuration file (for debugging purposes, or for manual cache creation at a later time), you can explicitly\n-set the `AOTConfiguration` option:\n-\n-```\n-$ java -XX:AOTCacheOutput=JavacBenchApp.aot -XX:AOTConfiguration=myconfig.aotconfig \\\n-      -cp JavacBenchApp.jar JavacBenchApp 50\n-```\n-\n-When `-XX:AOTCacheOutput` is specified, the JVM automatically runs with `-XX:AOTMode=record`, although you can also specify this explicitly:\n-\n-```\n-$ java -XX:AOTMode=record -XX:AOTCacheOutput=JavacBenchApp.aot \\\n-      -cp JavacBenchApp.jar JavacBenchApp 50\n-```\n-\n-An alternative way for single-command cache creation is to specify `-XX:AOTCache=<file>` along with `-XX:AOTMode=record`. This essentially says:\n-I want to record my training run directly into the specified AOT cache:\n-\n-```\n-$ java -XX:AOTMode=record -XX:AOTCache=JavacBenchApp.aot \\\n-      -cp JavacBenchApp.jar JavacBenchApp 50\n-\n-```\n-\n-Note that in all the examples in this section, `-XX:AOTCache` and `-XX:AOTCacheOutput` are allowed to be specified at the same time, but in that case they are required to have the same value.\n-\n-### AOT_TOOL_OPTIONS\n-\n-When creating a AOT cache with a single command, the environment variable `AOT_TOOL_OPTIONS` can be used to pass extra VM options to\n-the child JVM process that performs the assembly step. For example:\n-\n-```\n-$ export AOT_TOOL_OPTIONS=-Xmx128m\n-$ java -XX:AOTCacheOutput=JavacBenchApp.aot -cp JavacBenchApp.jar JavacBenchApp 50\n-Generated source code for 51 classes and compiled them in 2242 ms\n-[3.732s][warning][cds] Skipping Sanity: Unsupported location\n-Temporary AOTConfiguration recorded: JavacBenchApp.aot.config\n-Launching child process \/jdk3\/bld\/le4-fastdebug\/images\/jdk\/bin\/java to assemble AOT \n-cache JavacBenchApp.aot using configuration JavacBenchApp.aot.config\n-Picked up AOT_TOOL_OPTIONS: -Xmx128m\n-Picked up JAVA_TOOL_OPTIONS: -Djava.class.path=JavacBenchApp.jar -XX:AOTCacheOutput=JavacBenchApp.aot\n-                             -XX:AOTConfiguration=JavacBenchApp.aot.config -XX:AOTMode=create -Xmx128m\n-Reading AOTConfiguration JavacBenchApp.aot.config and writing AOTCache JavacBenchApp.aot\n-AOTCache creation is complete: JavacBenchApp.aot 51937280 bytes\n-Removed temporary AOT configuration file JavacBenchApp.aot.config\n-```\n-\n-\n-### Diagnostic VM Flags\n-\n-By default, all of the optimizations described\n-in the [Overview](#1-overview) section above are enabled by default. This ensures that you can get all the optimizations\n-without specifying them individually.\n-\n-For diagnostic purposes, you can selectively disable some of the options:\n-\n-- The `-XX:+LoadCachedCode` and `-XX:+ReplayTraining` flags affect only the production run.\n-- The `-XX:+RecordTraining` option affects only the training run and the assembly phase.\n-- All other options affect only the assembly phase.\n-\n-For example, you can disable the loading of AOT-compiled methods during the production run. Notice that the benchmark now\n-starts more slowly than it did when AOT-compiled methods was loaded.\n-\n-```\n-$ java -XX:AOTCache=JavacBenchApp.aot -Xlog:cds=error -XX:-LoadCachedCode \\\n-       -cp JavacBenchApp.jar JavacBenchApp 50\n-Generated source code for 51 classes and compiled them in 647 ms\n-```\n-\n-You can also disable AOT compilation in the assembly phase. Note that the size of the AOT\n-cache is smaller because it no longer has AOT-compiled methods.\n-\n-```\n-$ java -XX:AOTMode=create -XX:AOTConfiguration=JavacBenchApp.aotconfig \\\n-       -cp JavacBenchApp.jar \\\n-       -XX:AOTCache=JavacBenchApp.aot -XX:-StoreCachedCode\n-$ ls -l JavacBenchApp.aot\n--r--r--r-- 1 iklam iklam 29990912 Mar  3 16:34 JavacBenchApp.aot\n-```\n-\n+## 4. Limitations of the Leyden Early Access 2 Release\n@@ -274,1 +132,1 @@\n-## 4. Limitations of the Leyden Prototype\n+When trying out this release, please pay attention to the following limitations.\n@@ -276,1 +134,1 @@\n-When trying out the Leyden, please pay attention to the following limitations.\n+### The Same Garbage Collector Must be Used between Training and Production Runs\n@@ -278,3 +136,1 @@\n-### The Same Garbage Collector Must be Used between Assembly Phase and Production Runs\n-\n-The CDS archive generated by the Leyden prototype includes machine instructions that are specific to\n+The AOT cache generated by the Leyden Early Access 2 Release includes machine instructions that are specific to\n@@ -282,1 +138,1 @@\n-training and production runs. For example:\n+training and production runs. For example, if you prefer to use the SerialGC:\n@@ -295,1 +151,1 @@\n-Otherwise, the CDS archive may not be useable for the production run, leading to suboptimal performance.\n+Otherwise, the AOT cache may not be useable for the production run, leading to suboptimal performance.\n@@ -313,1 +169,1 @@\n-[0.001s][error][cds] CDS archive has aot-linked classes. It cannot be used because\n+[0.001s][error][aot] AOT cache has aot-linked classes. It cannot be used because\n@@ -315,2 +171,2 @@\n-[0.001s][error][cds] An error has occurred while processing the AOT cache.\n-[0.001s][error][cds] Unable to map shared spaces\n+[0.001s][error][aot] An error has occurred while processing the AOT cache.\n+[0.001s][error][aot] Unable to map shared spaces\n@@ -334,234 +190,1 @@\n-### -XX:AOTMode=on is Enabled by default\n-\n-As seen in the example immediately above, in the production run, if the CDS archive cannot be\n-used for any reason, the JVM will report an error and exit. This happens as if `-XX:AOTMode=on` was\n-specified in the command-line.\n-\n-In the standard JDK, when the CDS archive cannot be used for any reason (for example, the\n-archive was created for a different version of the JDK), the application will\n-continue to run without using CDS.\n-This fall-back strategy ensures that the application will function correctly, though at a lower level of performance.\n-\n-With the Leyden prototype, we have changed this fall-back behavior to make it easier to diagnose\n-performance issues. For example, when the start-up time is not as good as one would expect, we\n-want know whether it's caused by a misconfiguration that prevents the CDS archive\n-from being used, or it's caused by a deficiency in the implementation of the Leyden optimizations.\n-\n-To revert to the behavior of the standard JDK, you can explicitly add `-XX:AOTMode=auto` to the command-line.\n-\n-```\n-$ docker run --rm -v \/repos\/leyden\/build\/linux-x64\/images\/jdk:\/jdk -v $(pwd):\/test \\\n-    --memory=1024m \\\n-    container-registry.oracle.com\/java\/openjdk \\\n-    bash -c 'cd \/test; ' \\\n-            '\/jdk\/bin\/java -XX:AOTMode=auto -XX:AOTCache=JavacBenchApp.aot ' \\\n-            '    -cp JavacBenchApp.jar JavacBenchApp 50'\n-[0.001s][error][cds] CDS archive has aot-linked classes. It cannot be used because\n-                     GC used during dump time (G1) is not the same as runtime (Serial)\n-Generated source code for 51 classes and compiled them in 831 ms\n-```\n-\n-See [JEP 483](https:\/\/openjdk.org\/jeps\/483) for a discussion of `-XX:AOTMode=on` vs  `-XX:AOTMode=auto`.\n-\n-\n-## 5. Benchmarking\n-\n-We use a small set of benchmarks to demonstrate the performance of the optimizations in the Leyden repo.\n-\n-| Benchmark  | Source |\n-| ------------- | ------------- |\n-|[helidon-quickstart-se](test\/hotspot\/jtreg\/premain\/helidon-quickstart-se) | https:\/\/helidon.io\/docs\/v4\/se\/guides\/quickstart|\n-|[micronaut-first-app](test\/hotspot\/jtreg\/premain\/micronaut-first-app) | https:\/\/guides.micronaut.io\/latest\/creating-your-first-micronaut-app-maven-java.html|\n-|[quarkus-getting-started](test\/hotspot\/jtreg\/premain\/quarkus-getting-started) | https:\/\/quarkus.io\/guides\/getting-started|\n-|[spring-boot-getting-started](test\/hotspot\/jtreg\/premain\/spring-boot-getting-started) | https:\/\/spring.io\/guides\/gs\/spring-boot|\n-|[spring-petclinic](test\/hotspot\/jtreg\/premain\/spring-petclinic) | https:\/\/github.com\/spring-projects\/spring-petclinic|\n-\n-*(FIXME: add a benchmark for javac)*\n-\n-### Benchmarking Against JDK Main-line\n-\n-To can compare the performance of Leyden vs the main-line JDK, you need:\n-\n-- An official build of JDK 21\n-- An up-to-date build of the JDK main-line\n-- The latest Leyden build\n-- Maven (ideally 3.8 or later, as required by some of the demos). Note: if you are behind\n-  a firewall, you may need to [set up proxies for Maven](https:\/\/maven.apache.org\/guides\/mini\/guide-proxies.html)\n-\n-The same steps are used for benchmarking all of the above demos. For example:\n-\n-```\n-$ cd helidon-quickstart-se\n-$ make PREMAIN_HOME=\/repos\/leyden\/build\/linux-x64\/images\/jdk \\\n-       MAINLINE_HOME=\/repos\/jdk\/build\/linux-x64\/images\/jdk \\\n-       BLDJDK_HOME=\/usr\/local\/jdk21 \\\n-       bench\n-run,mainline default,mainline custom static cds,mainline aot cache,premain aot cache\n-1,456,229,156,117\n-2,453,227,157,117\n-3,455,232,155,116\n-4,448,230,154,114\n-5,440,228,156,114\n-6,446,228,156,114\n-7,448,232,156,114\n-8,465,261,159,114\n-9,448,226,157,113\n-10,442,233,154,114\n-Geomean,450.05,232.41,155.99,114.69\n-Stdev,6.98,9.72,1.41,1.35\n-Markdown snippets in mainline_vs_premain.md\n-```\n-\n-The above command runs each configuration 10 times, in an interleaving order. This way\n-the noise of the system (background processes, thermo throttling, etc) is more likely to\n-be spread across the different runs.\n-\n-As is typical for benchmarking start-up performance, the numbers are not very steady.\n-It is best to plot\n-the results (as saved in the file `mainline_vs_premain.csv`) in a spreadsheet to check for\n-noise and other artifacts.\n-\n-The \"make bench\" target also generates GitHub markdown snippets (in the file `mainline_vs_premain.md`) for creating the\n-graphs below.\n-\n-### Benchmarking Between Two Leyden Builds\n-\n-This is useful for Leyden developers to measure the benefits of a particular optimization.\n-The steps are similar to above, but we use the \"make compare_premain_builds\" target:\n-\n-```\n-$ cd helidon-quickstart-se\n-$ make PM_OLD=\/repos\/leyden_old\/build\/linux-x64\/images\/jdk \\\n-       PM_NEW=\/repos\/leyden_new\/build\/linux-x64\/images\/jdk \\\n-       BLDJDK_HOME=\/usr\/local\/jdk21 \\\n-       compare_premain_builds\n-Old build = \/repos\/leyden_old\/build\/linux-x64\/images\/jdk with options\n-New build = \/repos\/leyden_new\/build\/linux-x64\/images\/jdk with options\n-Run,Old CDS + AOT,New CDS + AOT\n-1,110,109\n-2,131,111\n-3,118,115\n-4,110,108\n-5,117,110\n-6,114,109\n-7,110,109\n-8,118,110\n-9,110,110\n-10,113,114\n-Geomean,114.94,110.48\n-Stdev,6.19,2.16\n-Markdown snippets in compare_premain_builds.md\n-```\n-\n-Please see [test\/hotspot\/jtreg\/premain\/lib\/Bench.gmk](test\/hotspot\/jtreg\/premain\/lib\/Bench.gmk) for more details.\n-\n-Note: due to the variability of start-up time, the benefit of minor improvements may\n-be difficult to measure.\n-\n-### Preliminary Benchmark Results\n-\n-The following charts show the relative start-up performance of the Leyden\/Premain branch vs\n-the JDK main-line.\n-\n-For example, a number of \"premain aot cache: 255\" indicates that if the application takes\n-1000 ms to start-up with the JDK main-line, it takes only 255 ms to start up when all the\n-current set of Leyden optimizations are enabled.\n-\n-The benchmark results are collected with `make bench` in the following directories:\n-\n-- `helidon-quickstart-se`\n-- `micronaut-first-app`\n-- `quarkus-getting-started`\n-- `spring-boot-getting-started`\n-- `spring-petclinic`\n-\n-The meaning of the four rows in the following the charts:\n-\n-| Row  | Meaning |\n-| ------------- | ------------- |\n-| **mainline default**            |Run benchmark with no optimizations|\n-| **mainline custom static cds**  |Run benchmark with a custom static CDS archive|\n-| **mainline aot cache**          |Run benchmark with a custom AOT cache (JEP 483)|\n-| **premain aot cache**           |Run benchmark with a custom AOT cache, plus all Leyden optimizations such as AOT profiles and AOT-compiled methods|\n-\n-These JDK versions were used in the comparisons:\n-\n-- JDK main-line: JDK 24, build 24+36-3646\n-- Leyden: https:\/\/github.com\/openjdk\/leyden\/tree\/bbac8f2d845aa6408182ca3ff9ce60b5ca6e0390\n-\n-For details information about the hardware and raw numbers, see [bench.20250307.txt](test\/hotspot\/jtreg\/premain\/bench_data\/bench.20250307.txt)\n-\n-### Helidon Quick Start (SE) Demo (3.92x improvement)\n-\n-```mermaid\n----\n-config:\n-    xyChart:\n-        chartOrientation: horizontal\n-        height: 300\n----\n-xychart-beta\n-    x-axis \"variant\" [\"mainline default\", \"mainline custom static cds\", \"mainline aot cache\", \"premain aot cache\"]\n-    y-axis \"Elapsed time (normalized, smaller is better)\" 0 --> 1000\n-    bar [1000, 516, 347, 255]\n-```\n-\n-### Micronaut First App Demo (3.12x improvement)\n-\n-```mermaid\n----\n-config:\n-    xyChart:\n-        chartOrientation: horizontal\n-        height: 300\n----\n-xychart-beta\n-    x-axis \"variant\" [\"mainline default\", \"mainline custom static cds\", \"mainline aot cache\", \"premain aot cache\"]\n-    y-axis \"Elapsed time (normalized, smaller is better)\" 0 --> 1000\n-    bar [1000, 475, 366, 321]\n-```\n-\n-### Quarkus Getting Started Demo (3.52x improvement)\n-\n-```mermaid\n----\n-config:\n-    xyChart:\n-        chartOrientation: horizontal\n-        height: 300\n----\n-xychart-beta\n-    x-axis \"variant\" [\"mainline default\", \"mainline custom static cds\", \"mainline aot cache\", \"premain aot cache\"]\n-    y-axis \"Elapsed time (normalized, smaller is better)\" 0 --> 1000\n-    bar [1000, 437, 380, 284]\n-```\n-\n-### Spring-boot Getting Started Demo (3.48x improvement)\n-\n-```mermaid\n----\n-config:\n-    xyChart:\n-        chartOrientation: horizontal\n-        height: 300\n----\n-xychart-beta\n-    x-axis \"variant\" [\"mainline default\", \"mainline custom static cds\", \"mainline aot cache\", \"premain aot cache\"]\n-    y-axis \"Elapsed time (normalized, smaller is better)\" 0 --> 1000\n-    bar [1000, 502, 382, 287]\n-```\n-\n-### Spring PetClinic Demo (2.65x improvement)\n-\n-```mermaid\n----\n-config:\n-    xyChart:\n-        chartOrientation: horizontal\n-        height: 300\n----\n-xychart-beta\n-    x-axis \"variant\" [\"mainline default\", \"mainline custom static cds\", \"mainline aot cache\", \"premain aot cache\"]\n-    y-axis \"Elapsed time (normalized, smaller is better)\" 0 --> 1000\n-    bar [1000, 625, 586, 376]\n-```\n+## 4. More Documentation\n@@ -569,1 +192,1 @@\n-## 6. More Documentation\n+Please see the [README.md file from the Leyden Repository](https:\/\/github.com\/openjdk\/leyden\/blob\/premain\/README.md) for more information.\n@@ -571,1 +194,0 @@\n-Please see [test\/hotspot\/jtreg\/premain\/](test\/hotspot\/jtreg\/premain) for more information.\n","filename":"README.md","additions":55,"deletions":433,"binary":false,"changes":488,"status":"modified"}]}