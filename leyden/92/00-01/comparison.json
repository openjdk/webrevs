{"files":[{"patch":"@@ -7,1 +7,1 @@\n-incoporated into future JDK releases.\n+incorporated into future JDK releases.\n@@ -34,1 +34,1 @@\n-  in the production run, its methods can be can be natively executed.\n+  in the production run, its methods can be natively executed.\n@@ -130,0 +130,13 @@\n+### Diagnosing Potential Performance Issues\n+\n+As mentioned below, parts or all of the AOT cache may be disabled under certain circumstances. This may lead\n+to lower performance than expected. To diagnose potential performance issues, you can add `-Xlog:aot*` to the\n+command line to see detailed information about what parts of the AOT cache are being utilized. For example, if the\n+the AOT-compiled code cannot be loaded, you will see a log message like this:\n+\n+```\n+[0.008s][info][aot,codecache,init] Mapped 652184 bytes at address 0x00007f491005f028 from AOT Code Cache\n+[0.008s][info][aot,codecache,init] Loaded 439 AOT code entries from AOT Code Cache\n+[0.008s][info][aot,codecache,init] Unable to use AOT Code Cache.\n+```\n+\n@@ -134,0 +147,7 @@\n+### The Same CPU Must be Used between Training and Production Runs\n+\n+The AOT-compiled code will be only used if the production run is on a machine with the same type of CPU\n+as used in the training run and assembly phase. If this is not the case (for example, the production run is on\n+a machine that has different AVX capabilities), the AOT-compiled code will be ignored.\n+\n+\n@@ -151,1 +171,1 @@\n-Otherwise, the AOT cache may not be useable for the production run, leading to suboptimal performance.\n+Otherwise, the AOT cache may not be usable for the production run, leading to suboptimal performance.\n","filename":"README.md","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"}]}