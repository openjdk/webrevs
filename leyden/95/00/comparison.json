{"files":[{"patch":"@@ -119,0 +119,1 @@\n+static elapsedTimer _t_totalPreload;\n@@ -510,6 +511,6 @@\n-    log_debug(aot, codecache, init)(\"  Adapters: total=%u\", _load_header->adapters_count());\n-    log_debug(aot, codecache, init)(\"  Shared Blobs: total=%u\", _load_header->shared_blobs_count());\n-    log_debug(aot, codecache, init)(\"  C1 Blobs: total=%u\", _load_header->C1_blobs_count());\n-    log_debug(aot, codecache, init)(\"  C2 Blobs: total=%u\", _load_header->C2_blobs_count());\n-    log_debug(aot, codecache, init)(\"  Stubs:    total=%u\", _load_header->stubs_count());\n-    log_debug(aot, codecache, init)(\"  Nmethods: total=%u\", _load_header->nmethods_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Adapter], _load_header->adapters_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::SharedBlob], _load_header->shared_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::C1Blob], _load_header->C1_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::C2Blob], _load_header->C2_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Stub], _load_header->stubs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Nmethod], _load_header->nmethods_count());\n@@ -595,1 +596,5 @@\n-    finish_write();\n+    if (UseNewCode) {\n+      finish_write_new();\n+    } else {\n+      finish_write();\n+    }\n@@ -937,1 +942,1 @@\n-    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Code, id, comp_level);\n+    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Nmethod, id, comp_level);\n@@ -970,1 +975,1 @@\n-  assert(_kind == Code, \"invalid kind %d\", _kind);\n+  assert(_kind == Nmethod, \"invalid kind %d\", _kind);\n@@ -982,1 +987,1 @@\n-    if (kind != AOTCodeEntry::Code || \/\/ addapters and stubs have only one version\n+    if (kind != AOTCodeEntry::Nmethod || \/\/ addapters and stubs have only one version\n@@ -1067,1 +1072,0 @@\n-  uint count = _load_header->entries_count();\n@@ -1069,3 +1073,24 @@\n-  for(; i < count; i++) {\n-    if (entry == &(_load_entries[i])) {\n-      break;\n+  uint count = 0;\n+  if (UseNewCode) {\n+    if (entry->for_preload()) {\n+      count = _load_header->preload_entries_count();\n+      AOTCodeEntry* preload_entry = (AOTCodeEntry*)addr(_load_header->preload_entries_offset());\n+      for (; i < count; i++) {\n+        if (entry == &preload_entry[i]) {\n+          break;\n+        }\n+      }\n+    } else {\n+      count = _load_header->entries_count();\n+      for(; i < count; i++) {\n+        if (entry == &(_load_entries[i])) {\n+          break;\n+        }\n+      }\n+    }\n+  } else {\n+    count = _load_header->entries_count();\n+    for(; i < count; i++) {\n+      if (entry == &(_load_entries[i])) {\n+        break;\n+      }\n@@ -1225,1 +1250,1 @@\n-          assert(kind == AOTCodeEntry::Code, \"sanity\");\n+          assert(kind == AOTCodeEntry::Nmethod, \"sanity\");\n@@ -1269,1 +1294,1 @@\n-    log_stats_on_exit();\n+    \/\/log_stats_on_exit();\n@@ -1299,0 +1324,167 @@\n+bool AOTCodeCache::finish_write_new() {\n+  if (!align_write()) {\n+    return false;\n+  }\n+  uint strings_offset = _write_position;\n+  int strings_count = store_strings();\n+  if (strings_count < 0) {\n+    return false;\n+  }\n+  if (!align_write()) {\n+    return false;\n+  }\n+  uint strings_size = _write_position - strings_offset;\n+\n+  uint code_count = _store_entries_cnt;\n+  if (code_count > 0) {\n+    _aot_code_directory = CachedCodeDirectory::create();\n+    assert(_aot_code_directory != nullptr, \"Sanity check\");\n+\n+    uint header_size = (uint)align_up(sizeof(AOTCodeCache::Header), DATA_ALIGNMENT);\n+    uint search_count = code_count * 2;\n+    uint search_size = search_count * sizeof(uint);\n+    uint entries_size = (uint)align_up(code_count * sizeof(AOTCodeEntry), DATA_ALIGNMENT); \/\/ In bytes\n+    \/\/ _write_position should include code and strings\n+    uint code_alignment = code_count * DATA_ALIGNMENT; \/\/ We align_up code size when storing it.\n+    uint cpu_features_size = VM_Version::cpu_features_size();\n+    uint total_cpu_features_size = sizeof(uint) + cpu_features_size; \/\/ sizeof(uint) to store cpu_features_size\n+    uint total_size = _write_position + header_size + code_alignment +\n+                      search_size + entries_size +\n+                      align_up(total_cpu_features_size, DATA_ALIGNMENT);\n+    assert(total_size < max_aot_code_size(), \"AOT Code size (\" UINT32_FORMAT \" bytes) is greater than AOTCodeMaxSize(\" UINT32_FORMAT \" bytes).\", total_size, max_aot_code_size());\n+\n+    \/\/ Allocate in AOT Cache buffer\n+    char* buffer = (char *)AOTCacheAccess::allocate_aot_code_region(total_size + DATA_ALIGNMENT);\n+    char* start = align_up(buffer, DATA_ALIGNMENT);\n+    char* current = start + header_size; \/\/ Skip header\n+\n+    uint cpu_features_offset = current - start;\n+    store_cpu_features(current, cpu_features_size);\n+    assert(is_aligned(current, DATA_ALIGNMENT), \"sanity check\");\n+    assert(current < start + total_size, \"sanity check\");\n+\n+    \/\/ Create ordered search table for entries [id, index];\n+    uint* search = NEW_C_HEAP_ARRAY(uint, search_count, mtCode);\n+\n+    AOTCodeEntry* entries_address = _store_entries; \/\/ Pointer to latest entry\n+    AOTCodeStats stats;\n+    uint max_size = 0;\n+    \/\/ AOTCodeEntry entries were allocated in reverse in store buffer.\n+    \/\/ Process them in reverse order to cache first code first.\n+\n+    \/\/ Store AOTCodeEntry-s for preload code\n+    current = align_up(current, DATA_ALIGNMENT);\n+    uint preload_entries_cnt = 0;\n+    uint preload_entries_offset = current - start;\n+    AOTCodeEntry* preload_entries = (AOTCodeEntry*)current;\n+    for (int i = code_count - 1; i >= 0; i--) {\n+      AOTCodeEntry* entry = &entries_address[i];\n+      if (entry->load_fail()) {\n+        continue;\n+      }\n+      if (entry->for_preload()) {\n+        if (entry->not_entrant()) {\n+          \/\/ Skip not entrant preload code:\n+          \/\/ we can't pre-load code which may have failing dependencies.\n+          log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n+                                         entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n+        } else {\n+          copy_bytes((const char*)entry, (address)current, sizeof(AOTCodeEntry));\n+          stats.collect_entry_stats(entry);\n+          current += sizeof(AOTCodeEntry);\n+          preload_entries_cnt++;\n+        }\n+      }\n+    }\n+\n+    \/\/ Now write the data for preload AOTCodeEntry\n+    for (int i = 0; i < (int)preload_entries_cnt; i++) {\n+      AOTCodeEntry* entry = &preload_entries[i];\n+      uint size = align_up(entry->size(), DATA_ALIGNMENT);\n+      if (size > max_size) {\n+        max_size = size;\n+      }\n+      copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n+      entry->set_offset(current - start); \/\/ New offset\n+      current += size;\n+    }\n+\n+    current = align_up(current, DATA_ALIGNMENT);\n+    uint entries_count = 0;\n+    uint new_entries_offset = current - start;\n+    AOTCodeEntry* code_entries = (AOTCodeEntry*)current;\n+    \/\/ Now scan normal entries\n+    for (int i = code_count - 1; i >= 0; i--) {\n+      AOTCodeEntry* entry = &entries_address[i];\n+      if (entry->load_fail() || entry->for_preload()) {\n+        continue;\n+      }\n+      if (entry->not_entrant()) {\n+        log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n+                                       entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n+        entry->set_entrant(); \/\/ Reset\n+      }\n+      copy_bytes((const char*)entry, (address)current, sizeof(AOTCodeEntry));\n+      stats.collect_entry_stats(entry);\n+      current += sizeof(AOTCodeEntry);\n+      search[entries_count*2 + 0] = entry->id();\n+      search[entries_count*2 + 1] = entries_count;\n+      entries_count++;\n+    }\n+\n+    \/\/ Now write the data for normal AOTCodeEntry\n+    for (int i = 0; i < (int)entries_count; i++) {\n+      AOTCodeEntry* entry = &code_entries[i];\n+      uint size = align_up(entry->size(), DATA_ALIGNMENT);\n+      if (size > max_size) {\n+        max_size = size;\n+      }\n+      copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n+      entry->set_offset(current - start); \/\/ New offset\n+      current += size;\n+    }\n+\n+    if (preload_entries_cnt == 0 && entries_count == 0) {\n+      log_info(aot, codecache, exit)(\"AOT Code Cache was not created: no entires\");\n+      FREE_C_HEAP_ARRAY(uint, search);\n+      return true; \/\/ Nothing to write\n+    }\n+    uint total_entries_cnt = preload_entries_cnt + entries_count;\n+    assert(total_entries_cnt <= code_count, \"%d > %d\", total_entries_cnt, code_count);\n+    \/\/ Write strings\n+    if (strings_count > 0) {\n+      copy_bytes((_store_buffer + strings_offset), (address)current, strings_size);\n+      strings_offset = (current - start); \/\/ New offset\n+      current += strings_size;\n+    }\n+\n+    uint search_table_offset = current - start;\n+    \/\/ Sort and store search table\n+    qsort(search, entries_count, 2*sizeof(uint), uint_cmp);\n+    search_size = 2 * entries_count * sizeof(uint);\n+    copy_bytes((const char*)search, (address)current, search_size);\n+    FREE_C_HEAP_ARRAY(uint, search);\n+    current += search_size;\n+\n+    log_stats_on_exit(stats);\n+\n+    uint size = (current - start);\n+    assert(size <= total_size, \"%d > %d\", size , total_size);\n+    log_debug(aot, codecache, exit)(\"  AOT code cache size: %u bytes, max entry's size: %u bytes\", size, max_size);\n+\n+    \/\/ Finalize header\n+    AOTCodeCache::Header* header = (AOTCodeCache::Header*)start;\n+    header->init(size, (uint)strings_count, strings_offset,\n+                 entries_count, search_table_offset, new_entries_offset,\n+                 preload_entries_cnt, preload_entries_offset,\n+                 stats.entry_count(AOTCodeEntry::Adapter), stats.entry_count(AOTCodeEntry::SharedBlob),\n+                 stats.entry_count(AOTCodeEntry::C1Blob), stats.entry_count(AOTCodeEntry::C2Blob),\n+                 stats.entry_count(AOTCodeEntry::Stub), cpu_features_offset);\n+\n+    log_info(aot, codecache, exit)(\"Wrote %d AOT code entries to AOT Code Cache\", total_entries_cnt);\n+\n+    _aot_code_directory->set_aot_code_data(size, start);\n+  }\n+  return true;\n+}\n+\n@@ -1754,1 +1946,1 @@\n-  AOTCodeEntry* entry = new (this) AOTCodeEntry(AOTCodeEntry::Code, id,\n+  AOTCodeEntry* entry = new (this) AOTCodeEntry(AOTCodeEntry::Nmethod, id,\n@@ -1926,1 +2118,5 @@\n-  _cache->preload_aot_code(thread);\n+  if (UseNewCode) {\n+    _cache->preload_aot_code_new(thread);\n+  } else {\n+    _cache->preload_aot_code(thread);\n+  }\n@@ -1935,0 +2131,1 @@\n+  TraceTime t1(\"Total time to preload AOT code\", &_t_totalPreload, enable_timers(), false);\n@@ -1987,0 +2184,52 @@\n+void AOTCodeCache::preload_aot_code_new(TRAPS) {\n+  if (CompilationPolicy::compiler_count(CompLevel_full_optimization) == 0) {\n+    \/\/ Since we reuse the CompilerBroker API to install AOT code, we're required to have a JIT compiler for the\n+    \/\/ level we want (that is CompLevel_full_optimization).\n+    return;\n+  }\n+  TraceTime t1(\"Total time to preload AOT code\", &_t_totalPreload, enable_timers(), false);\n+  assert(_for_use, \"sanity\");\n+  uint count = _load_header->entries_count();\n+  uint preload_entries_count = _load_header->preload_entries_count();\n+  if (preload_entries_count > 0) {\n+    log_info(aot, codecache, init)(\"Load %d preload entries from AOT Code Cache\", preload_entries_count);\n+    AOTCodeEntry* preload_entry = (AOTCodeEntry*)addr(_load_header->preload_entries_offset());\n+    uint count = MIN2(preload_entries_count, AOTCodePreloadStop);\n+    for (uint i = AOTCodePreloadStart; i < count; i++) {\n+      AOTCodeEntry* entry = &preload_entry[i];\n+      if (entry->not_entrant()) {\n+        continue;\n+      }\n+      methodHandle mh(THREAD, entry->method());\n+      assert((mh.not_null() && MetaspaceShared::is_in_shared_metaspace((address)mh())), \"sanity\");\n+      if (skip_preload(mh)) {\n+        continue; \/\/ Exclude preloading for this method\n+      }\n+      assert(mh->method_holder()->is_loaded(), \"\");\n+      if (!mh->method_holder()->is_linked()) {\n+        assert(!HAS_PENDING_EXCEPTION, \"\");\n+        mh->method_holder()->link_class(THREAD);\n+        if (HAS_PENDING_EXCEPTION) {\n+          LogStreamHandle(Info, aot, codecache) log;\n+          if (log.is_enabled()) {\n+            ResourceMark rm;\n+            log.print(\"Linkage failed for %s: \", mh->method_holder()->external_name());\n+            THREAD->pending_exception()->print_value_on(&log);\n+            if (log_is_enabled(Debug, aot, codecache)) {\n+              THREAD->pending_exception()->print_on(&log);\n+            }\n+          }\n+          CLEAR_PENDING_EXCEPTION;\n+        }\n+      }\n+      if (mh->aot_code_entry() != nullptr) {\n+        \/\/ Second C2 compilation of the same method could happen for\n+        \/\/ different reasons without marking first entry as not entrant.\n+        continue; \/\/ Keep old entry to avoid issues\n+      }\n+      mh->set_aot_code_entry(entry);\n+      CompileBroker::compile_method(mh, InvocationEntryBci, CompLevel_full_optimization, 0, false, CompileTask::Reason_Preload, CHECK);\n+    }\n+  }\n+}\n+\n@@ -3564,1 +3813,1 @@\n-  uint strings_size = _load_header->entries_offset() - strings_offset;\n+  uint strings_size = _load_header->search_table_offset() - strings_offset;\n@@ -3912,0 +4161,1 @@\n+    st->print_cr (\"    AOT Code Preload Time:   %7.3f s\", _t_totalPreload.seconds());\n@@ -3934,1 +4184,1 @@\n-void AOTCodeCache::log_stats_on_exit() {\n+void AOTCodeCache::log_stats_on_exit(AOTCodeStats& stats) {\n@@ -3937,23 +4187,0 @@\n-    AOTCodeStats prev_stats;\n-    AOTCodeStats current_stats;\n-    AOTCodeStats total_stats;\n-    uint max_size = 0;\n-\n-    uint load_count = (_load_header != nullptr) ? _load_header->entries_count() : 0;\n-\n-    for (uint i = 0; i < load_count; i++) {\n-      prev_stats.collect_entry_stats(&_load_entries[i]);\n-      if (max_size < _load_entries[i].size()) {\n-        max_size = _load_entries[i].size();\n-      }\n-    }\n-    for (uint i = 0; i < _store_entries_cnt; i++) {\n-      current_stats.collect_entry_stats(&_store_entries[i]);\n-      if (max_size < _store_entries[i].size()) {\n-        max_size = _store_entries[i].size();\n-      }\n-    }\n-    total_stats = AOTCodeStats::add_aot_code_stats(prev_stats, current_stats);\n-\n-    log.print_cr(\"Wrote %d AOTCodeEntry entries(%u max size) to AOT Code Cache\",\n-                 total_stats.total_count(), max_size);\n@@ -3961,10 +4188,4 @@\n-      if (total_stats.entry_count(kind) > 0) {\n-        log.print_cr(\"  %s: total=%u(old=%u+new=%u)\",\n-                     aot_code_entry_kind_name[kind], total_stats.entry_count(kind), prev_stats.entry_count(kind), current_stats.entry_count(kind));\n-        if (kind == AOTCodeEntry::Code) {\n-          for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n-            if (total_stats.nmethod_count(lvl) > 0) {\n-              log.print_cr(\"    Tier %d: total=%u(old=%u+new=%u)\",\n-                           lvl, total_stats.nmethod_count(lvl), prev_stats.nmethod_count(lvl), current_stats.nmethod_count(lvl));\n-            }\n-          }\n+      log.print_cr(\"  %s: total=%u\", aot_code_entry_kind_name[kind], stats.entry_count(kind));\n+      if (kind == AOTCodeEntry::Nmethod) {\n+        for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n+          log.print_cr(\"    Tier %d: total=%u\", lvl, stats.nmethod_count(lvl));\n@@ -3974,1 +4195,0 @@\n-    log.print_cr(\"Total=%u(old=%u+new=%u)\", total_stats.total_count(), prev_stats.total_count(), current_stats.total_count());\n@@ -3992,0 +4212,9 @@\n+    AOTCodeStats stats;\n+\n+    if (UseNewCode) {\n+      uint preload_count = cache->_load_header->preload_entries_count();\n+      AOTCodeEntry* preload_entries = (AOTCodeEntry*)cache->addr(cache->_load_header->preload_entries_offset());\n+      for (uint i = 0; i < preload_count; i++) {\n+        stats.collect_all_stats(&preload_entries[i]);\n+      }\n+    }\n@@ -3995,2 +4224,0 @@\n-\n-    AOTCodeStats stats;\n@@ -4010,1 +4237,1 @@\n-      if (kind == AOTCodeEntry::Code) {\n+      if (kind == AOTCodeEntry::Nmethod) {\n@@ -4080,1 +4307,27 @@\n-    st->print_cr(\"\\nAOT Code Cache\");\n+    if (UseNewCode) {\n+      st->print_cr(\"\\nAOT Code Cache Preload entries\");\n+\n+      uint preload_count = opened_cache->_load_header->preload_entries_count();\n+      AOTCodeEntry* preload_entries = (AOTCodeEntry*)opened_cache->addr(opened_cache->_load_header->preload_entries_offset());\n+      for (uint i = 0; i < preload_count; i++) {\n+        AOTCodeEntry* entry = &preload_entries[i];\n+\n+        uint entry_position = entry->offset();\n+        uint name_offset = entry->name_offset() + entry_position;\n+        const char* saved_name = opened_cache->addr(name_offset);\n+\n+        st->print_cr(\"%4u: %10s Id:%u L%u size=%u '%s' %s%s%s\",\n+                     i, aot_code_entry_kind_name[entry->kind()], entry->id(), entry->comp_level(),\n+                     entry->size(),  saved_name,\n+                     entry->has_clinit_barriers() ? \" has_clinit_barriers\" : \"\",\n+                     entry->is_loaded()           ? \" loaded\"              : \"\",\n+                     entry->not_entrant()         ? \" not_entrant\"         : \"\");\n+\n+        st->print_raw(\"         \");\n+        AOTCodeReader reader(opened_cache, entry, nullptr);\n+        reader.print_on(st);\n+      }\n+    }\n+\n+    st->print_cr(\"\\nAOT Code Cache entries\");\n+\n@@ -4112,1 +4365,1 @@\n-      if (entry->is_code() && !entry->is_loaded()) {\n+      if (entry->is_nmethod() && !entry->is_loaded()) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":312,"deletions":59,"binary":false,"changes":371,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  Fn(Code) \\\n+  Fn(Nmethod) \\\n@@ -223,1 +223,1 @@\n-  bool is_code()  { return _kind == Code; }\n+  bool is_nmethod()  { return _kind == Nmethod; }\n@@ -305,0 +305,2 @@\n+struct AOTCodeStats;\n+\n@@ -399,1 +401,1 @@\n-    uint nmethods_count() const { return _entries_count\n+    uint nmethods_count() const { uint count = _entries_count\n@@ -404,1 +406,3 @@\n-                                       - _adapters_count; }\n+                                       - _adapters_count;\n+                                  if (UseNewCode) count += _preload_entries_count;\n+                                  return count; }\n@@ -520,0 +524,1 @@\n+  void preload_aot_code_new(TRAPS);\n@@ -527,0 +532,1 @@\n+  bool finish_write_new();\n@@ -528,1 +534,1 @@\n-  void log_stats_on_exit();\n+  void log_stats_on_exit(AOTCodeStats& stats);\n@@ -728,1 +734,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -782,1 +788,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -790,1 +796,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -798,1 +804,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -422,0 +422,6 @@\n+  product(uint, AOTCodePreloadStart, 0,                                     \\\n+          \"The id of the first AOT code to preload\")                        \\\n+                                                                            \\\n+  product(uint, AOTCodePreloadStop, max_jint,                               \\\n+          \"The id of the last AOT code to preload\")                         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -124,6 +124,6 @@\n-                    out.shouldNotMatch(\"Adapters:\\\\s+total\");\n-                    out.shouldNotMatch(\"Shared Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"C1 Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"C2 Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"Stubs:\\\\s+total\");\n-                    out.shouldNotMatch(\"Nmethods:\\\\s+total\");\n+                    out.shouldNotMatch(\"Adapter:\\\\s+total\");\n+                    out.shouldNotMatch(\"SharedBlob:\\\\s+total\");\n+                    out.shouldNotMatch(\"C1Blob:\\\\s+total\");\n+                    out.shouldNotMatch(\"C2Blob:\\\\s+total\");\n+                    out.shouldNotMatch(\"Stub:\\\\s+total\");\n+                    out.shouldNotMatch(\"Nmethod:\\\\s+total\");\n@@ -138,1 +138,1 @@\n-                        out.shouldMatch(\"Adapters:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"Adapter:\\\\s+total=[1-9][0-9]+\");\n@@ -146,1 +146,1 @@\n-                        out.shouldMatch(\"Adapters:\\\\s+total=0\");\n+                        out.shouldMatch(\"Adapter:\\\\s+total=0\");\n@@ -155,4 +155,4 @@\n-                        out.shouldMatch(\"Shared Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"C1 Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"C2 Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"Stubs:\\\\s+total=[1-9]+\");\n+                        out.shouldMatch(\"SharedBlob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"C1Blob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"C2Blob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"Stub:\\\\s+total=[1-9]+\");\n@@ -166,4 +166,4 @@\n-                        out.shouldMatch(\"Shared Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"C1 Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"C2 Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"Stubs:\\\\s+total=0\");\n+                        out.shouldMatch(\"SharedBlob:\\\\s+total=0\");\n+                        out.shouldMatch(\"C1Blob:\\\\s+total=0\");\n+                        out.shouldMatch(\"C2Blob:\\\\s+total=0\");\n+                        out.shouldMatch(\"Stub:\\\\s+total=0\");\n@@ -178,1 +178,1 @@\n-                        out.shouldMatch(\"Nmethods:\\\\s+total=[1-9]+\");\n+                        out.shouldMatch(\"Nmethod:\\\\s+total=[1-9]+\");\n@@ -186,1 +186,1 @@\n-                        out.shouldMatch(\"Nmethods:\\\\s+total=0\");\n+                        out.shouldMatch(\"Nmethod:\\\\s+total=0\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeFlags.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}