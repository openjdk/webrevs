{"files":[{"patch":"@@ -119,0 +119,1 @@\n+static elapsedTimer _t_totalPreload;\n@@ -510,6 +511,6 @@\n-    log_debug(aot, codecache, init)(\"  Adapters: total=%u\", _load_header->adapters_count());\n-    log_debug(aot, codecache, init)(\"  Shared Blobs: total=%u\", _load_header->shared_blobs_count());\n-    log_debug(aot, codecache, init)(\"  C1 Blobs: total=%u\", _load_header->C1_blobs_count());\n-    log_debug(aot, codecache, init)(\"  C2 Blobs: total=%u\", _load_header->C2_blobs_count());\n-    log_debug(aot, codecache, init)(\"  Stubs:    total=%u\", _load_header->stubs_count());\n-    log_debug(aot, codecache, init)(\"  Nmethods: total=%u\", _load_header->nmethods_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Adapter], _load_header->adapters_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::SharedBlob], _load_header->shared_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::C1Blob], _load_header->C1_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::C2Blob], _load_header->C2_blobs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Stub], _load_header->stubs_count());\n+    log_debug(aot, codecache, init)(\"  %s: total=%u\", aot_code_entry_kind_name[AOTCodeEntry::Nmethod], _load_header->nmethods_count());\n@@ -937,1 +938,1 @@\n-    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Code, id, comp_level);\n+    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Nmethod, id, comp_level);\n@@ -970,1 +971,1 @@\n-  assert(_kind == Code, \"invalid kind %d\", _kind);\n+  assert(_kind == Nmethod, \"invalid kind %d\", _kind);\n@@ -982,1 +983,1 @@\n-    if (kind != AOTCodeEntry::Code || \/\/ addapters and stubs have only one version\n+    if (kind != AOTCodeEntry::Nmethod || \/\/ addapters and stubs have only one version\n@@ -1067,1 +1068,0 @@\n-  uint count = _load_header->entries_count();\n@@ -1069,3 +1069,15 @@\n-  for(; i < count; i++) {\n-    if (entry == &(_load_entries[i])) {\n-      break;\n+  uint count = 0;\n+  if (entry->for_preload()) {\n+    count = _load_header->preload_entries_count();\n+    AOTCodeEntry* preload_entry = (AOTCodeEntry*)addr(_load_header->preload_entries_offset());\n+    for (; i < count; i++) {\n+      if (entry == &preload_entry[i]) {\n+        break;\n+      }\n+    }\n+  } else {\n+    count = _load_header->entries_count();\n+    for(; i < count; i++) {\n+      if (entry == &(_load_entries[i])) {\n+        break;\n+      }\n@@ -1132,3 +1144,0 @@\n-  uint entries_count = 0; \/\/ Number of entrant (useful) code entries\n-  uint entries_offset = _write_position;\n-\n@@ -1144,3 +1153,0 @@\n-    uint preload_entries_cnt = 0;\n-    uint* preload_entries = NEW_C_HEAP_ARRAY(uint, code_count, mtCode);\n-    uint preload_entries_size = code_count * sizeof(uint);\n@@ -1152,1 +1158,1 @@\n-                      search_size + preload_entries_size + entries_size +\n+                      search_size + entries_size +\n@@ -1170,6 +1176,1 @@\n-    uint adapters_count = 0;\n-    uint shared_blobs_count = 0;\n-    uint C1_blobs_count = 0;\n-    uint C2_blobs_count = 0;\n-    uint stubs_count = 0;\n-    uint nmethods_count = 0;\n+    AOTCodeStats stats;\n@@ -1179,0 +1180,6 @@\n+\n+    \/\/ Store AOTCodeEntry-s for preload code\n+    current = align_up(current, DATA_ALIGNMENT);\n+    uint preload_entries_cnt = 0;\n+    uint preload_entries_offset = current - start;\n+    AOTCodeEntry* preload_entries = (AOTCodeEntry*)current;\n@@ -1184,4 +1191,2 @@\n-      if (entry->not_entrant()) {\n-        log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n-                                       entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n-        if (entry->for_preload()) {\n+      if (entry->for_preload()) {\n+        if (entry->not_entrant()) {\n@@ -1190,1 +1195,7 @@\n-          continue;\n+          log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n+                                         entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n+        } else {\n+          copy_bytes((const char*)entry, (address)current, sizeof(AOTCodeEntry));\n+          stats.collect_entry_stats(entry);\n+          current += sizeof(AOTCodeEntry);\n+          preload_entries_cnt++;\n@@ -1192,0 +1203,28 @@\n+      }\n+    }\n+\n+    \/\/ Now write the data for preload AOTCodeEntry\n+    for (int i = 0; i < (int)preload_entries_cnt; i++) {\n+      AOTCodeEntry* entry = &preload_entries[i];\n+      uint size = align_up(entry->size(), DATA_ALIGNMENT);\n+      if (size > max_size) {\n+        max_size = size;\n+      }\n+      copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n+      entry->set_offset(current - start); \/\/ New offset\n+      current += size;\n+    }\n+\n+    current = align_up(current, DATA_ALIGNMENT);\n+    uint entries_count = 0;\n+    uint new_entries_offset = current - start;\n+    AOTCodeEntry* code_entries = (AOTCodeEntry*)current;\n+    \/\/ Now scan normal entries\n+    for (int i = code_count - 1; i >= 0; i--) {\n+      AOTCodeEntry* entry = &entries_address[i];\n+      if (entry->load_fail() || entry->for_preload()) {\n+        continue;\n+      }\n+      if (entry->not_entrant()) {\n+        log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n+                                       entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n@@ -1193,3 +1232,0 @@\n-      } else if (entry->for_preload()) {\n-        \/\/ record entrant first version code for pre-loading\n-        preload_entries[preload_entries_cnt++] = entries_count;\n@@ -1197,31 +1233,14 @@\n-      {\n-        uint size = align_up(entry->size(), DATA_ALIGNMENT);\n-        if (size > max_size) {\n-          max_size = size;\n-        }\n-        copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n-        entry->set_offset(current - start); \/\/ New offset\n-        current += size;\n-        uint n = write_bytes(entry, sizeof(AOTCodeEntry));\n-        if (n != sizeof(AOTCodeEntry)) {\n-          FREE_C_HEAP_ARRAY(uint, search);\n-          return false;\n-        }\n-        search[entries_count*2 + 0] = entry->id();\n-        search[entries_count*2 + 1] = entries_count;\n-        entries_count++;\n-        AOTCodeEntry::Kind kind = entry->kind();\n-        if (kind == AOTCodeEntry::Adapter) {\n-          adapters_count++;\n-        } else if (kind == AOTCodeEntry::SharedBlob) {\n-          shared_blobs_count++;\n-        } else if (kind == AOTCodeEntry::C1Blob) {\n-          C1_blobs_count++;\n-        } else if (kind == AOTCodeEntry::C2Blob) {\n-          C2_blobs_count++;\n-        } else if (kind == AOTCodeEntry::Stub) {\n-          stubs_count++;\n-        } else {\n-          assert(kind == AOTCodeEntry::Code, \"sanity\");\n-          nmethods_count++;\n-        }\n+      copy_bytes((const char*)entry, (address)current, sizeof(AOTCodeEntry));\n+      stats.collect_entry_stats(entry);\n+      current += sizeof(AOTCodeEntry);\n+      search[entries_count*2 + 0] = entry->id();\n+      search[entries_count*2 + 1] = entries_count;\n+      entries_count++;\n+    }\n+\n+    \/\/ Now write the data for normal AOTCodeEntry\n+    for (int i = 0; i < (int)entries_count; i++) {\n+      AOTCodeEntry* entry = &code_entries[i];\n+      uint size = align_up(entry->size(), DATA_ALIGNMENT);\n+      if (size > max_size) {\n+        max_size = size;\n@@ -1229,0 +1248,3 @@\n+      copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n+      entry->set_offset(current - start); \/\/ New offset\n+      current += size;\n@@ -1231,2 +1253,2 @@\n-    if (entries_count == 0) {\n-      log_info(aot, codecache, exit)(\"AOT Code Cache was not created: no entires\");\n+    if (preload_entries_cnt == 0 && entries_count == 0) {\n+      log_info(aot, codecache, exit)(\"AOT Code Cache was not created: no entries\");\n@@ -1236,1 +1258,2 @@\n-    assert(entries_count <= code_count, \"%d > %d\", entries_count, code_count);\n+    uint total_entries_cnt = preload_entries_cnt + entries_count;\n+    assert(total_entries_cnt <= code_count, \"%d > %d\", total_entries_cnt, code_count);\n@@ -1243,10 +1266,0 @@\n-    uint preload_entries_offset = (current - start);\n-    preload_entries_size = preload_entries_cnt * sizeof(uint);\n-    if (preload_entries_size > 0) {\n-      copy_bytes((const char*)preload_entries, (address)current, preload_entries_size);\n-      current += preload_entries_size;\n-      log_info(aot, codecache, exit)(\"Wrote %d preload entries to AOT Code Cache\", preload_entries_cnt);\n-    }\n-    if (preload_entries != nullptr) {\n-      FREE_C_HEAP_ARRAY(uint, preload_entries);\n-    }\n@@ -1262,8 +1275,1 @@\n-    \/\/ Write entries\n-    current = align_up(current, DATA_ALIGNMENT);\n-    uint new_entries_offset = current - start;\n-    entries_size = entries_count * sizeof(AOTCodeEntry); \/\/ New size\n-    copy_bytes((_store_buffer + entries_offset), (address)current, entries_size);\n-    current += entries_size;\n-\n-    log_stats_on_exit();\n+    log_stats_on_exit(stats);\n@@ -1273,8 +1279,0 @@\n-    uint blobs_count = shared_blobs_count + C1_blobs_count + C2_blobs_count;\n-    assert(nmethods_count == (entries_count - (stubs_count + blobs_count + adapters_count)), \"sanity\");\n-    log_debug(aot, codecache, exit)(\"  Adapters: total=%u\", adapters_count);\n-    log_debug(aot, codecache, exit)(\"  Shared Blobs: total=%u\", shared_blobs_count);\n-    log_debug(aot, codecache, exit)(\"  C1 Blobs: total=%u\", C1_blobs_count);\n-    log_debug(aot, codecache, exit)(\"  C2 Blobs: total=%u\", C2_blobs_count);\n-    log_debug(aot, codecache, exit)(\"  Stubs:    total=%u\", stubs_count);\n-    log_debug(aot, codecache, exit)(\"  Nmethods: total=%u\", nmethods_count);\n@@ -1288,3 +1286,3 @@\n-                 adapters_count, shared_blobs_count,\n-                 C1_blobs_count, C2_blobs_count,\n-                 stubs_count, cpu_features_offset);\n+                 stats.entry_count(AOTCodeEntry::Adapter), stats.entry_count(AOTCodeEntry::SharedBlob),\n+                 stats.entry_count(AOTCodeEntry::C1Blob), stats.entry_count(AOTCodeEntry::C2Blob),\n+                 stats.entry_count(AOTCodeEntry::Stub), cpu_features_offset);\n@@ -1292,1 +1290,1 @@\n-    log_info(aot, codecache, exit)(\"Wrote %d AOT code entries to AOT Code Cache\", entries_count);\n+    log_info(aot, codecache, exit)(\"Wrote %d AOT code entries to AOT Code Cache\", total_entries_cnt);\n@@ -1754,1 +1752,1 @@\n-  AOTCodeEntry* entry = new (this) AOTCodeEntry(AOTCodeEntry::Code, id,\n+  AOTCodeEntry* entry = new (this) AOTCodeEntry(AOTCodeEntry::Nmethod, id,\n@@ -1935,0 +1933,1 @@\n+  TraceTime t1(\"Total time to preload AOT code\", &_t_totalPreload, enable_timers(), false);\n@@ -1937,6 +1936,0 @@\n-  if (_load_entries == nullptr) {\n-    \/\/ Read it\n-    _search_entries = (uint*)addr(_load_header->search_table_offset()); \/\/ [id, index]\n-    _load_entries = (AOTCodeEntry*)addr(_load_header->entries_offset());\n-    log_info(aot, codecache, init)(\"Read %d entries table at offset %d from AOT Code Cache\", count, _load_header->entries_offset());\n-  }\n@@ -1945,1 +1938,0 @@\n-    uint* entries_index = (uint*)addr(_load_header->preload_entries_offset());\n@@ -1947,4 +1939,4 @@\n-    uint count = MIN2(preload_entries_count, AOTCodeLoadStop);\n-    for (uint i = AOTCodeLoadStart; i < count; i++) {\n-      uint index = entries_index[i];\n-      AOTCodeEntry* entry = &(_load_entries[index]);\n+    AOTCodeEntry* preload_entry = (AOTCodeEntry*)addr(_load_header->preload_entries_offset());\n+    uint count = MIN2(preload_entries_count, AOTCodePreloadStop);\n+    for (uint i = AOTCodePreloadStart; i < count; i++) {\n+      AOTCodeEntry* entry = &preload_entry[i];\n@@ -3564,1 +3556,1 @@\n-  uint strings_size = _load_header->entries_offset() - strings_offset;\n+  uint strings_size = _load_header->search_table_offset() - strings_offset;\n@@ -3912,0 +3904,1 @@\n+    st->print_cr (\"    AOT Code Preload Time:   %7.3f s\", _t_totalPreload.seconds());\n@@ -3934,1 +3927,1 @@\n-void AOTCodeCache::log_stats_on_exit() {\n+void AOTCodeCache::log_stats_on_exit(AOTCodeStats& stats) {\n@@ -3937,23 +3930,0 @@\n-    AOTCodeStats prev_stats;\n-    AOTCodeStats current_stats;\n-    AOTCodeStats total_stats;\n-    uint max_size = 0;\n-\n-    uint load_count = (_load_header != nullptr) ? _load_header->entries_count() : 0;\n-\n-    for (uint i = 0; i < load_count; i++) {\n-      prev_stats.collect_entry_stats(&_load_entries[i]);\n-      if (max_size < _load_entries[i].size()) {\n-        max_size = _load_entries[i].size();\n-      }\n-    }\n-    for (uint i = 0; i < _store_entries_cnt; i++) {\n-      current_stats.collect_entry_stats(&_store_entries[i]);\n-      if (max_size < _store_entries[i].size()) {\n-        max_size = _store_entries[i].size();\n-      }\n-    }\n-    total_stats = AOTCodeStats::add_aot_code_stats(prev_stats, current_stats);\n-\n-    log.print_cr(\"Wrote %d AOTCodeEntry entries(%u max size) to AOT Code Cache\",\n-                 total_stats.total_count(), max_size);\n@@ -3961,10 +3931,4 @@\n-      if (total_stats.entry_count(kind) > 0) {\n-        log.print_cr(\"  %s: total=%u(old=%u+new=%u)\",\n-                     aot_code_entry_kind_name[kind], total_stats.entry_count(kind), prev_stats.entry_count(kind), current_stats.entry_count(kind));\n-        if (kind == AOTCodeEntry::Code) {\n-          for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n-            if (total_stats.nmethod_count(lvl) > 0) {\n-              log.print_cr(\"    Tier %d: total=%u(old=%u+new=%u)\",\n-                           lvl, total_stats.nmethod_count(lvl), prev_stats.nmethod_count(lvl), current_stats.nmethod_count(lvl));\n-            }\n-          }\n+      log.print_cr(\"  %s: total=%u\", aot_code_entry_kind_name[kind], stats.entry_count(kind));\n+      if (kind == AOTCodeEntry::Nmethod) {\n+        for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n+          log.print_cr(\"    Tier %d: total=%u\", lvl, stats.nmethod_count(lvl));\n@@ -3974,1 +3938,0 @@\n-    log.print_cr(\"Total=%u(old=%u+new=%u)\", total_stats.total_count(), prev_stats.total_count(), current_stats.total_count());\n@@ -3992,0 +3955,7 @@\n+    AOTCodeStats stats;\n+\n+    uint preload_count = cache->_load_header->preload_entries_count();\n+    AOTCodeEntry* preload_entries = (AOTCodeEntry*)cache->addr(cache->_load_header->preload_entries_offset());\n+    for (uint i = 0; i < preload_count; i++) {\n+      stats.collect_all_stats(&preload_entries[i]);\n+    }\n@@ -3995,2 +3965,0 @@\n-\n-    AOTCodeStats stats;\n@@ -4010,1 +3978,1 @@\n-      if (kind == AOTCodeEntry::Code) {\n+      if (kind == AOTCodeEntry::Nmethod) {\n@@ -4080,1 +4048,25 @@\n-    st->print_cr(\"\\nAOT Code Cache\");\n+    st->print_cr(\"\\nAOT Code Cache Preload entries\");\n+\n+    uint preload_count = opened_cache->_load_header->preload_entries_count();\n+    AOTCodeEntry* preload_entries = (AOTCodeEntry*)opened_cache->addr(opened_cache->_load_header->preload_entries_offset());\n+    for (uint i = 0; i < preload_count; i++) {\n+      AOTCodeEntry* entry = &preload_entries[i];\n+\n+      uint entry_position = entry->offset();\n+      uint name_offset = entry->name_offset() + entry_position;\n+      const char* saved_name = opened_cache->addr(name_offset);\n+\n+      st->print_cr(\"%4u: %10s Id:%u L%u size=%u '%s' %s%s%s\",\n+                   i, aot_code_entry_kind_name[entry->kind()], entry->id(), entry->comp_level(),\n+                   entry->size(),  saved_name,\n+                   entry->has_clinit_barriers() ? \" has_clinit_barriers\" : \"\",\n+                   entry->is_loaded()           ? \" loaded\"              : \"\",\n+                   entry->not_entrant()         ? \" not_entrant\"         : \"\");\n+\n+      st->print_raw(\"         \");\n+      AOTCodeReader reader(opened_cache, entry, nullptr);\n+      reader.print_on(st);\n+    }\n+\n+    st->print_cr(\"\\nAOT Code Cache entries\");\n+\n@@ -4112,1 +4104,1 @@\n-      if (entry->is_code() && !entry->is_loaded()) {\n+      if (entry->is_nmethod() && !entry->is_loaded()) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":143,"deletions":151,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  Fn(Code) \\\n+  Fn(Nmethod) \\\n@@ -223,1 +223,1 @@\n-  bool is_code()  { return _kind == Code; }\n+  bool is_nmethod()  { return _kind == Nmethod; }\n@@ -305,0 +305,2 @@\n+struct AOTCodeStats;\n+\n@@ -399,1 +401,1 @@\n-    uint nmethods_count() const { return _entries_count\n+    uint nmethods_count() const { uint count = _entries_count\n@@ -404,1 +406,3 @@\n-                                       - _adapters_count; }\n+                                       - _adapters_count;\n+                                  if (UseNewCode) count += _preload_entries_count;\n+                                  return count; }\n@@ -528,1 +532,1 @@\n-  void log_stats_on_exit();\n+  void log_stats_on_exit(AOTCodeStats& stats);\n@@ -728,1 +732,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -782,1 +786,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -790,1 +794,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n@@ -798,1 +802,1 @@\n-    if (entry->is_code()) {\n+    if (entry->is_nmethod()) {\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -422,0 +422,6 @@\n+  product(uint, AOTCodePreloadStart, 0,                                     \\\n+          \"The id of the first AOT code to preload\")                        \\\n+                                                                            \\\n+  product(uint, AOTCodePreloadStop, max_jint,                               \\\n+          \"The id of the last AOT code to preload\")                         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -124,6 +124,6 @@\n-                    out.shouldNotMatch(\"Adapters:\\\\s+total\");\n-                    out.shouldNotMatch(\"Shared Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"C1 Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"C2 Blobs:\\\\s+total\");\n-                    out.shouldNotMatch(\"Stubs:\\\\s+total\");\n-                    out.shouldNotMatch(\"Nmethods:\\\\s+total\");\n+                    out.shouldNotMatch(\"Adapter:\\\\s+total\");\n+                    out.shouldNotMatch(\"SharedBlob:\\\\s+total\");\n+                    out.shouldNotMatch(\"C1Blob:\\\\s+total\");\n+                    out.shouldNotMatch(\"C2Blob:\\\\s+total\");\n+                    out.shouldNotMatch(\"Stub:\\\\s+total\");\n+                    out.shouldNotMatch(\"Nmethod:\\\\s+total\");\n@@ -138,1 +138,1 @@\n-                        out.shouldMatch(\"Adapters:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"Adapter:\\\\s+total=[1-9][0-9]+\");\n@@ -146,1 +146,1 @@\n-                        out.shouldMatch(\"Adapters:\\\\s+total=0\");\n+                        out.shouldMatch(\"Adapter:\\\\s+total=0\");\n@@ -155,4 +155,4 @@\n-                        out.shouldMatch(\"Shared Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"C1 Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"C2 Blobs:\\\\s+total=[1-9][0-9]+\");\n-                        out.shouldMatch(\"Stubs:\\\\s+total=[1-9]+\");\n+                        out.shouldMatch(\"SharedBlob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"C1Blob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"C2Blob:\\\\s+total=[1-9][0-9]+\");\n+                        out.shouldMatch(\"Stub:\\\\s+total=[1-9]+\");\n@@ -166,4 +166,4 @@\n-                        out.shouldMatch(\"Shared Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"C1 Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"C2 Blobs:\\\\s+total=0\");\n-                        out.shouldMatch(\"Stubs:\\\\s+total=0\");\n+                        out.shouldMatch(\"SharedBlob:\\\\s+total=0\");\n+                        out.shouldMatch(\"C1Blob:\\\\s+total=0\");\n+                        out.shouldMatch(\"C2Blob:\\\\s+total=0\");\n+                        out.shouldMatch(\"Stub:\\\\s+total=0\");\n@@ -178,1 +178,1 @@\n-                        out.shouldMatch(\"Nmethods:\\\\s+total=[1-9]+\");\n+                        out.shouldMatch(\"Nmethod:\\\\s+total=[1-9]+\");\n@@ -186,1 +186,1 @@\n-                        out.shouldMatch(\"Nmethods:\\\\s+total=0\");\n+                        out.shouldMatch(\"Nmethod:\\\\s+total=0\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeFlags.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}