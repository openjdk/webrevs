{"files":[{"patch":"@@ -565,1 +565,2 @@\n-          Deoptimization::Action_reinterpret));\n+          Deoptimization::Action_reinterpret),\n+          \"do_aaload: array class is not loaded\");\n@@ -574,1 +575,2 @@\n-          Deoptimization::Action_reinterpret));\n+          Deoptimization::Action_reinterpret),\n+          \"do_aaload: array element class is not loaded\");\n@@ -613,1 +615,1 @@\n-    trap(str, field->holder(), str->get_field_holder_index());\n+    trap(str, field->holder(), str->get_field_holder_index(), \"do_getstatic: will not link\");\n@@ -656,1 +658,2 @@\n-            Deoptimization::Action_reinterpret));\n+            Deoptimization::Action_reinterpret),\n+            \"do_invoke: invoked dynamic method does not exist\");\n@@ -659,1 +662,2 @@\n-      trap(str, unloaded_holder, str->get_method_holder_index());\n+      trap(str, unloaded_holder, str->get_method_holder_index(),\n+        \"do_invoke: unloaded method\");\n@@ -721,1 +725,2 @@\n-                                                         Deoptimization::Action_none));\n+                                                         Deoptimization::Action_none),\n+                                                         \"do_ldc: unhandled exception\");\n@@ -730,1 +735,2 @@\n-                                                           cp_index));\n+                                                           cp_index),\n+                                                           \"do_ldc: unloaded constant\");\n@@ -761,1 +767,1 @@\n-    trap(str, array_klass, str->get_klass_index());\n+    trap(str, array_klass, str->get_klass_index(), \"do_multianewarray: will not link\");\n@@ -775,2 +781,4 @@\n-  if (!will_link || str->is_unresolved_klass()) {\n-    trap(str, klass, str->get_klass_index());\n+  if (!will_link) {\n+    trap(str, klass, str->get_klass_index(), \"do_new: will not link\");\n+  } else if (str->is_unresolved_klass()) {\n+    trap(str, klass, str->get_klass_index(), \"do_new: unresolved klass\");\n@@ -805,1 +813,1 @@\n-    trap(str, field->holder(), str->get_field_holder_index());\n+    trap(str, field->holder(), str->get_field_holder_index(), \"do_putstatic: will not link\");\n@@ -833,1 +841,1 @@\n-void ciTypeFlow::StateVector::trap(ciBytecodeStream* str, ciKlass* klass, int index) {\n+void ciTypeFlow::StateVector::trap(ciBytecodeStream* str, ciKlass* klass, int index, const char* reason) {\n@@ -850,0 +858,11 @@\n+\n+  LogTarget(Debug, deoptimization) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    const char * name = outer()->method()->get_Method()->name_and_sig_as_C_string();\n+    ls.print(\"ciTypeFlow uncommon_trap method=%s bci=%d\", name, str->cur_bci());\n+    char buf[100];\n+    ls.print(\" %s\", Deoptimization::format_trap_request(buf, sizeof(buf), index));\n+    ls.print_cr(\" %s\", reason);\n+  }\n@@ -913,1 +932,1 @@\n-        trap(str, element_klass, str->get_klass_index());\n+        trap(str, element_klass, str->get_klass_index(), \"anewarray: will not link\");\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":32,"deletions":13,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-    void trap(ciBytecodeStream* str, ciKlass* klass, int index);\n+    void trap(ciBytecodeStream* str, ciKlass* klass, int index, const char* reason);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}