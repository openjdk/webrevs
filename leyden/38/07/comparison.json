{"files":[{"patch":"@@ -0,0 +1,33 @@\n+#\/bin\/bash\n+\n+J=build\/linux-x86_64-server-release\/images\/jdk\/bin\/java\n+\n+OPTS=\"-Xms64m -Xmx8g -XX:+UseSerialGC -cp JavacBenchApp.jar\"\n+\n+rm -f hs_err*\n+\n+TRAINING_CONF=\"50\"\n+PROD_CONF=\"50\"\n+\n+TRAINING_OPTS=\"$OPTS\"\n+PROD_OPTS=\"$OPTS\"\n+\n+echo \"Building\"\n+rm JavacBenchApp.jar\n+${J}c .\/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/JavacBenchApp.java -d .\n+jar cvf JavacBenchApp.jar JavacBenchApp*.class\n+\n+echo \"Training\"\n+\n+rm -f *.aot *.aotconf\n+time $J -XX:AOTMode=record -XX:AOTConfiguration=app.aotconf $TRAINING_OPTS JavacBenchApp $TRAINING_CONF\n+time $J -XX:AOTMode=create -XX:AOTConfiguration=app.aotconf $TRAINING_OPTS -XX:AOTCache=app.aot -Xlog:deoptimization=debug JavacBenchApp $TRAINING_CONF 2>&1 | tee print-assembly.log\n+\n+$J $PROD_OPTS -XX:AOTCache=app.aot -XX:+PrintCompilation -Xlog:scc+deoptimization=debug -Xlog:deoptimization=debug -XX:+UnlockDiagnosticVMOptions JavacBenchApp $PROD_CONF 2>&1 | tee print-compilation.log\n+\n+echo -------------------------------\n+grep com.sun.tools.javac.util.StringNameTable::fromString print-assembly.log\n+echo -------------------------------\n+grep com.sun.tools.javac.util.StringNameTable::fromString print-compilation.log\n+\n+\n","filename":"reproduce-traps.sh","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -565,1 +565,2 @@\n-          Deoptimization::Action_reinterpret));\n+          Deoptimization::Action_reinterpret),\n+          \"do_aaload: array class is not loaded\");\n@@ -574,1 +575,2 @@\n-          Deoptimization::Action_reinterpret));\n+          Deoptimization::Action_reinterpret),\n+          \"do_aaload: array element class is not loaded\");\n@@ -613,1 +615,1 @@\n-    trap(str, field->holder(), str->get_field_holder_index());\n+    trap(str, field->holder(), str->get_field_holder_index(), \"do_getstatic: will not link\");\n@@ -656,1 +658,2 @@\n-            Deoptimization::Action_reinterpret));\n+            Deoptimization::Action_reinterpret),\n+            \"do_invoke: invoked dynamic method does not exist\");\n@@ -659,1 +662,2 @@\n-      trap(str, unloaded_holder, str->get_method_holder_index());\n+      trap(str, unloaded_holder, str->get_method_holder_index(),\n+        \"do_invoke: unloaded method\");\n@@ -721,1 +725,2 @@\n-                                                         Deoptimization::Action_none));\n+                                                         Deoptimization::Action_none),\n+                                                         \"do_ldc: unhandled exception\");\n@@ -730,1 +735,2 @@\n-                                                           cp_index));\n+                                                           cp_index),\n+                                                           \"do_ldc: unloaded constant\");\n@@ -761,1 +767,1 @@\n-    trap(str, array_klass, str->get_klass_index());\n+    trap(str, array_klass, str->get_klass_index(), \"do_multianewarray: will not link\");\n@@ -775,2 +781,4 @@\n-  if (!will_link || str->is_unresolved_klass()) {\n-    trap(str, klass, str->get_klass_index());\n+  if (!will_link) {\n+    trap(str, klass, str->get_klass_index(), \"do_new: will not link\");\n+  } else if (str->is_unresolved_klass()) {\n+    trap(str, klass, str->get_klass_index(), \"do_new: unresolved klass\");\n@@ -805,1 +813,1 @@\n-    trap(str, field->holder(), str->get_field_holder_index());\n+    trap(str, field->holder(), str->get_field_holder_index(), \"do_putstatic: will not link\");\n@@ -833,1 +841,1 @@\n-void ciTypeFlow::StateVector::trap(ciBytecodeStream* str, ciKlass* klass, int index) {\n+void ciTypeFlow::StateVector::trap(ciBytecodeStream* str, ciKlass* klass, int index, const char* reason) {\n@@ -850,0 +858,11 @@\n+\n+  LogTarget(Debug, deoptimization) lt;\n+  if (lt.is_enabled()) {\n+    ResourceMark rm;\n+    LogStream ls(lt);\n+    const char * name = outer()->method()->get_Method()->name_and_sig_as_C_string();\n+    ls.print(\"ciTypeFlow uncommon_trap method=%s bci=%d\", name, str->cur_bci());\n+    char buf[100];\n+    ls.print(\" %s\", Deoptimization::format_trap_request(buf, sizeof(buf), index));\n+    ls.print_cr(\" %s\", reason);\n+  }\n@@ -913,1 +932,1 @@\n-        trap(str, element_klass, str->get_klass_index());\n+        trap(str, element_klass, str->get_klass_index(), \"anewarray: will not link\");\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":32,"deletions":13,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-    void trap(ciBytecodeStream* str, ciKlass* klass, int index);\n+    void trap(ciBytecodeStream* str, ciKlass* klass, int index, const char* reason);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,0 +491,3 @@\n+  product(bool, PreloadReduceTraps, true, DIAGNOSTIC,                       \\\n+          \"Preload code should avoid traps as much as possible.\")           \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4117,0 +4117,4 @@\n+  if (PreloadReduceTraps && for_preload()) {\n+    \/\/ Preload code should not have traps, if possible.\n+    return true;\n+  }\n@@ -4142,0 +4146,4 @@\n+  if (PreloadReduceTraps && for_preload()) {\n+    \/\/ Preload code should not have traps, if possible.\n+    return true;\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2126,0 +2126,10 @@\n+  if (PreloadReduceTraps && Compile::current()->for_preload() &&\n+      (action != Deoptimization::Action_none)) {\n+    ResourceMark rm;\n+    ciMethod* cim = Compile::current()->method();\n+    log_debug(scc,deoptimization)(\"Uncommon trap in preload code: reason=%s action=%s method=%s::%s bci=%d, %s\",\n+                  Deoptimization::trap_reason_name(reason), Deoptimization::trap_action_name(action),\n+                  cim->holder()->name()->as_klass_external_name(), cim->name()->as_klass_external_name(),\n+                  bci(), comment);\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2016,2 +2016,2 @@\n-    ls.print(\"cid=%4d %s level=%d\",\n-             nm->compile_id(), (is_osr ? \"osr\" : \"   \"), nm->comp_level());\n+    ls.print(\"cid=%4d %s%s level=%d\",\n+             nm->compile_id(), (is_osr ? \"osr\" : \"   \"), (nm->preloaded() ? \"preload\" : \"\"), nm->comp_level());\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}