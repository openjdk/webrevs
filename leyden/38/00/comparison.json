{"files":[{"patch":"@@ -210,1 +210,7 @@\n-    compile_cached_code(CompLevel_full_optimization, true, CompLevel_full_optimization, CHECK);\n+    {\n+      \/\/ For preload code, avoid any uncommon traps.\n+      IntxFlagSetting fs1(PerMethodTrapLimit, 0);\n+      IntxFlagSetting fs2(PerMethodSpecTrapLimit, 0);\n+\n+      compile_cached_code(CompLevel_full_optimization, true, CompLevel_full_optimization, CHECK);\n+    }\n@@ -229,0 +235,4 @@\n+      \/\/ For preload code, avoid any uncommon traps.\n+      IntxFlagSetting fs1(PerMethodTrapLimit, 0);\n+      IntxFlagSetting fs2(PerMethodSpecTrapLimit, 0);\n+\n","filename":"src\/hotspot\/share\/compiler\/precompiler.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2129,0 +2129,7 @@\n+\n+      if (nm->preloaded() && (action != Action_none)) {\n+        \/\/ For performance reasons, preloaded nmethods should avoid deopts that lead to recompilations.\n+        \/\/ Log if we catch deopts like that.\n+        log_info(deoptimization)(\"DEOPT PRELOADED: reason=%s action=%s method=%s\",\n+          reason_name, reason_action, tm->name_and_sig_as_C_string());\n+      }\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+typedef AutoModifyRestore<intx> IntxFlagSetting;\n","filename":"src\/hotspot\/share\/runtime\/flags\/flagSetting.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}