{"files":[{"patch":"@@ -811,3 +811,0 @@\n-    if (AOTCodeCaching) {\n-      FLAG_SET_ERGO_IF_DEFAULT(SkipTier2IfPossible, true);\n-    }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1374,0 +1374,10 @@\n+static const char* java_lang_invoke_core_klasses[] = {\n+  \"java\/lang\/invoke\/Invokers$Holder\",\n+  \"java\/lang\/invoke\/MethodHandle\",\n+  \"java\/lang\/invoke\/MethodHandleNatives\",\n+  \"java\/lang\/invoke\/DirectMethodHandle$Holder\",\n+  \"java\/lang\/invoke\/DelegatingMethodHandle$Holder\",\n+  \"java\/lang\/invoke\/LambdaForm$Holder\",\n+  \"java\/lang\/invoke\/BoundMethodHandle$Species_L\",\n+};\n+\n@@ -1376,7 +1386,16 @@\n-    resolve_or_init(\"java\/lang\/invoke\/Invokers$Holder\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/MethodHandle\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/MethodHandleNatives\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/DirectMethodHandle$Holder\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/DelegatingMethodHandle$Holder\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/LambdaForm$Holder\", true, CHECK);\n-    resolve_or_init(\"java\/lang\/invoke\/BoundMethodHandle$Species_L\", true, CHECK);\n+    int len = sizeof(java_lang_invoke_core_klasses)\/sizeof(char*);\n+    for (int i = 0; i < len; i++) {\n+      resolve_or_init(java_lang_invoke_core_klasses[i], true, CHECK);\n+    }\n+  }\n+}\n+\n+bool HeapShared::is_core_java_lang_invoke_klass(InstanceKlass* klass) {\n+  \/\/ TODO: Crude, rewrite using Symbols or vmClasses instead\n+  ResourceMark rm;\n+  char* s2 = klass->name()->as_C_string();\n+  int len = sizeof(java_lang_invoke_core_klasses)\/sizeof(char*);\n+  for (int i = 0; i < len; i++) {\n+    if (strcmp(java_lang_invoke_core_klasses[i], s2) == 0) {\n+      return true;\n+    }\n@@ -1384,0 +1403,1 @@\n+  return false;\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -481,0 +481,1 @@\n+  static bool is_core_java_lang_invoke_klass(InstanceKlass* ik) NOT_CDS_JAVA_HEAP_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"cds\/lambdaFormInvokers.inline.hpp\"\n@@ -59,0 +60,1 @@\n+#include \"cds\/heapShared.hpp\"\n@@ -1861,1 +1863,1 @@\n-      \/\/ check init dependencies\n+      \/\/ Check init dependencies\n@@ -1871,1 +1873,1 @@\n-              return InstanceKlass::ClassState::fully_initialized;; \/\/ init dependency present\n+              return InstanceKlass::ClassState::fully_initialized; \/\/ init dependency present\n@@ -1876,0 +1878,9 @@\n+\n+      \/\/ Core java\/lang\/invoke classes are peculiar. They include LF invokers, which\n+      \/\/ are initialized in production run, but can be non-initialized in assembly.\n+      \/\/ CI query should report their status as if in production run, otherwise AOT\n+      \/\/ code would have uncommon traps at invokedynamic calls.\n+      if (HeapShared::is_core_java_lang_invoke_klass(ik)) {\n+        return InstanceKlass::ClassState::fully_initialized;\n+      }\n+\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -104,3 +104,3 @@\n-    \/\/ AOT Preload code with class init barriers is used,\n-    \/\/ consider replacing it with normal (faster) AOT code\n-    bool recompile = m->code_has_clinit_barriers();\n+    \/\/ Consider replacing conservatively compiled AOT Preload code with faster AOT code\n+    nmethod* nm = m->code();\n+    bool recompile = (nm != nullptr) && nm->preloaded();\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -321,2 +321,5 @@\n-    InstanceKlass* ik = md->as_instance_klass()->get_instanceKlass();\n-    KlassTrainingData* ktd = KlassTrainingData::make(ik);\n+    ciInstanceKlass* cik = md->as_instance_klass();\n+    if (!cik->is_initialized()) {\n+      return;\n+    }\n+    KlassTrainingData* ktd = KlassTrainingData::make(cik->get_instanceKlass());\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/trainingData.hpp\"\n@@ -489,0 +490,4 @@\n+    if (C->env()->task()->is_precompile()) {\n+      ResourceMark rm;\n+      log_debug(precompile)(\"Emitting uncommon trap (cannot compile call site) in AOT code for %s\", holder_klass->name()->as_klass_external_name());\n+    }\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+\n+#include \"oops\/trainingData.hpp\"\n@@ -3129,0 +3131,4 @@\n+    if (C->env()->task()->is_precompile()) {\n+      ResourceMark rm;\n+      log_debug(precompile)(\"Emitting uncommon trap (clinit barrier) in AOT code for %s\", ik->name()->as_klass_external_name());\n+    }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2021,2 +2021,5 @@\n-    ls.print(\"cid=%4d %s%s level=%d\",\n-             nm->compile_id(), (is_osr ? \"osr\" : \"   \"), (nm->preloaded() ? \"preload\" : \"\"), nm->comp_level());\n+    ls.print(\"cid=%4d %s%s%s level=%d\",\n+             nm->compile_id(), (is_osr ? \"osr\" : \"   \"),\n+             (nm->is_aot() ? \"aot \" : \"\"),\n+             (nm->preloaded() ? \"preload \" : \"\"),\n+             nm->comp_level());\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}