{"files":[{"patch":"@@ -183,1 +183,1 @@\n-\t            ($(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true); \\\n+\t            ($(GREP) -v -e \"^Note: including file:\" <  $(logfile) || true) | $(HEAD) -n 15 ; \\\n","filename":"make\/InitSupport.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+      aotCodeCache.cpp \\\n@@ -131,1 +132,0 @@\n-      aotCodeCache.cpp \\\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3401,0 +3401,1 @@\n+\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -749,0 +749,5 @@\n+bool ArchiveBuilder::has_been_archived(address src_addr) const {\n+  SourceObjInfo* p = _src_obj_table.get(src_addr);\n+  return (p != nullptr);\n+}\n+\n@@ -767,5 +772,0 @@\n-bool ArchiveBuilder::has_been_archived(address src_addr) const {\n-  SourceObjInfo* p = _src_obj_table.get(src_addr);\n-  return (p != nullptr);\n-}\n-\n@@ -1037,0 +1037,7 @@\n+address ArchiveBuilder::offset_to_buffered_address(u4 offset) const {\n+  address requested_addr = _requested_static_archive_bottom + offset;\n+  address buffered_addr = requested_addr - _buffer_to_requested_delta;\n+  assert(is_in_buffer_space(buffered_addr), \"bad offset\");\n+  return buffered_addr;\n+}\n+\n@@ -1046,7 +1053,0 @@\n-address ArchiveBuilder::offset_to_buffered_address(u4 offset) const {\n-  address requested_addr = _requested_static_archive_bottom + offset;\n-  address buffered_addr = requested_addr - _buffer_to_requested_delta;\n-  assert(is_in_buffer_space(buffered_addr), \"bad offset\");\n-  return buffered_addr;\n-}\n-\n@@ -1165,1 +1165,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -391,3 +391,0 @@\n-  void start_ac_region();\n-  void end_ac_region();\n-\n@@ -404,0 +401,3 @@\n+  void start_ac_region();\n+  void end_ac_region();\n+\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -189,1 +189,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -184,3 +184,0 @@\n-  product(bool, AOTStubCaching, false, DIAGNOSTIC,                          \\\n-          \"Enable saving and restoring stubs and code blobs in AOT cache\")  \\\n-                                                                            \\\n@@ -190,0 +187,3 @@\n+  product(bool, AOTStubCaching, false, DIAGNOSTIC,                          \\\n+          \"Enable saving and restoring stubs and code blobs in AOT cache\")  \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"cds\/lambdaFormInvokers.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"cds\/lambdaFormInvokers.hpp\"\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -930,1 +930,1 @@\n-    aot_log_info(aot)(\"Shared file region (%s) %d: %8zu\"\n+     aot_log_info(aot)(\"Shared file region (%s) %d: %8zu\"\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-  int     _narrow_klass_shift;                    \/\/ save shift width used to pre-compute narrowKlass IDs in archived heap objectsa\n+  int     _narrow_klass_shift;                    \/\/ save shift width used to pre-compute narrowKlass IDs in archived heap objects\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -123,1 +123,0 @@\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  _init_state = compute_init_state(ik); \/\/ _init_state\n+  _init_state = compute_init_state(ik);\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -368,2 +368,0 @@\n-\n-  \/\/ ZIP_ReadEntry also frees zentry\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -692,1 +692,1 @@\n-    \/\/ Printing\n+  \/\/ Printing\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -892,1 +892,0 @@\n-\n@@ -1487,1 +1486,0 @@\n-    return nullptr;\n@@ -4213,1 +4211,0 @@\n-\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,0 +160,1 @@\n+\n@@ -507,0 +508,1 @@\n+\n@@ -844,1 +846,0 @@\n-\n","filename":"src\/hotspot\/share\/code\/relocInfo.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  return !UseInterpreter ||                                                                        \/\/ must compile all methods\n+  return !UseInterpreter ||                                              \/\/ must compile all methods\n@@ -677,2 +677,0 @@\n-\n-\n@@ -880,0 +878,1 @@\n+\n@@ -1151,1 +1150,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2216,1 +2216,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-  \/\/ Work-around -- see JDK-8331086.\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -914,1 +914,0 @@\n-  \/\/leyden\/premain: temporarily disabled due to JDK-8327737\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-  static Array<Klass*>* the_array_interfaces_array()  { return _the_array_interfaces_array;   }\n+  static Array<Klass*>* the_array_interfaces_array()  { return _the_array_interfaces_array; }\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-  static address  base_addr()        { return (address)&_base; }\n+  static address  base_addr()        { return  (address)&_base; }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1679,0 +1679,2 @@\n+static int call_class_initializer_counter = 0;   \/\/ for debugging\n+\n@@ -1766,1 +1768,0 @@\n-  static int call_class_initializer_counter = 0;   \/\/ for debugging\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1085,1 +1085,1 @@\n-  void initialize_super_interfaces(TRAPS);\n+  void initialize_super_interfaces               (TRAPS);\n@@ -1123,1 +1123,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -225,2 +225,2 @@\n-      last_ctd = ctd;\n-      mtd->notice_toplevel_compilation(level);\n+       last_ctd = ctd;\n+       mtd->notice_toplevel_compilation(level);\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4569,1 +4569,1 @@\n-    log()->head(\"late_inline method='%d' inline_id='\" JLONG_FORMAT \"'\", log()->identify(cg->method()),\n+    log()->head(\"late_inline method='%d'  inline_id='\" JLONG_FORMAT \"'\", log()->identify(cg->method()),\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2963,0 +2963,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2048,1 +2048,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/runtime\/perfData.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+      ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/utilities\/constantTag.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BootLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfigAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-        custArrayInstance = java.lang.reflect.Array.newInstance(custInstance.getClass(), 0);\n+        custArrayInstance = Array.newInstance(custInstance.getClass(), 0);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/ExcludedClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}