{"files":[{"patch":"@@ -28,0 +28,4 @@\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.mapping;\n+import static java.util.stream.Collectors.toSet;\n+\n@@ -32,1 +36,0 @@\n-import java.io.FileInputStream;\n@@ -53,1 +56,0 @@\n-import java.util.Properties;\n@@ -68,4 +70,0 @@\n-import static java.util.stream.Collectors.groupingBy;\n-import static java.util.stream.Collectors.mapping;\n-import static java.util.stream.Collectors.toSet;\n-\n@@ -148,1 +146,0 @@\n-    private final boolean hermetic;\n@@ -160,1 +157,1 @@\n-                               Platform targetPlatform, boolean hermetic)\n+                               Platform targetPlatform)\n@@ -165,7 +162,2 @@\n-        this.hermetic = hermetic;\n-        if (hermetic) {\n-            this.mdir = null;\n-        } else {\n-            this.mdir = root.resolve(\"lib\");\n-            Files.createDirectories(mdir);\n-        }\n+        this.mdir = root.resolve(\"lib\");\n+        Files.createDirectories(mdir);\n@@ -362,6 +354,1 @@\n-            Path jimageFile;\n-            if (hermetic) {\n-                jimageFile = root;\n-            } else {\n-                jimageFile = mdir.resolve(BasicImageWriter.MODULES_IMAGE_NAME);\n-            }\n+            Path jimageFile = mdir.resolve(BasicImageWriter.MODULES_IMAGE_NAME);\n@@ -378,5 +365,1 @@\n-        if (hermetic) {\n-            return root;\n-        } else {\n-            return mdir.resolve(BasicImageWriter.MODULES_IMAGE_NAME);\n-        }\n+        return mdir.resolve(BasicImageWriter.MODULES_IMAGE_NAME);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/DefaultImageBuilder.java","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2025 Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.builder;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import jdk.tools.jlink.internal.ExecutableImage;\n+import jdk.tools.jlink.internal.Platform;\n+import jdk.tools.jlink.plugin.ResourcePool;\n+\n+public final class HermeticImageBuilder implements ImageBuilder {\n+\n+    private final Platform platform;\n+    private final Path hermeticImage;\n+    private final Set<String> modules = new HashSet<String>();\n+\n+    public HermeticImageBuilder(Platform platform, Path hermeticImage) {\n+        this.hermeticImage = hermeticImage;\n+        this.platform = platform;\n+    }\n+\n+    @Override\n+    public DataOutputStream getJImageOutputStream() {\n+        try {\n+            OutputStream fos = Files.newOutputStream(hermeticImage);\n+            BufferedOutputStream bos = new BufferedOutputStream(fos);\n+            return new DataOutputStream(bos);\n+        } catch (IOException ex) {\n+            throw new UncheckedIOException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public Path getJImageFile() {\n+        return hermeticImage;\n+    }\n+\n+    @Override\n+    public void storeFiles(ResourcePool files) {\n+        files.moduleView().modules().forEach(m -> {\n+            \/\/ Only add modules that contain packages\n+            if (!m.packages().isEmpty()) {\n+                modules.add(m.name());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public ExecutableImage getExecutableImage() {\n+        return new HermeticExecutableImage(platform, hermeticImage, modules);\n+    }\n+\n+    static final class HermeticExecutableImage implements ExecutableImage {\n+\n+        private final Set<String> modules;\n+        private final Platform platform;\n+        private final Path imagePath;\n+\n+        private HermeticExecutableImage(Platform platform, Path image,\n+                Set<String> modules) {\n+            this.imagePath = Objects.requireNonNull(image);\n+            this.platform = platform;\n+            this.modules = Collections.unmodifiableSet(modules);\n+        }\n+\n+        @Override\n+        public Path getHome() {\n+            return imagePath;\n+        }\n+\n+        @Override\n+        public Set<String> getModules() {\n+            return modules;\n+        }\n+\n+        @Override\n+        public List<String> getExecutionArgs() {\n+            \/\/ TODO What should that be?\n+            return null;\n+        }\n+\n+        @Override\n+        public void storeLaunchArgs(List<String> args) {\n+            \/\/ TODO Implement\n+        }\n+\n+        @Override\n+        public Platform getTargetPlatform() {\n+            return platform;\n+        }\n+\n+    }\n+\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/builder\/HermeticImageBuilder.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -48,0 +48,1 @@\n+import jdk.tools.jlink.builder.HermeticImageBuilder;\n@@ -458,1 +459,5 @@\n-                builder = new DefaultImageBuilder(output, launchers, targetPlatform, hermetic);\n+                if (hermetic) {\n+                    builder = new HermeticImageBuilder(targetPlatform, output);\n+                } else {\n+                    builder = new DefaultImageBuilder(output, launchers, targetPlatform);\n+                }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}