{"files":[{"patch":"@@ -101,0 +101,6 @@\n+const char* sccentry_kind_name[] = {\n+#define DECL_KIND_STRING(kind) XSTR(kind),\n+  DO_SCCENTRY_KIND(DECL_KIND_STRING)\n+#undef DECL_KIND_STRING\n+};\n+\n@@ -1002,5 +1008,60 @@\n-extern \"C\" {\n-  static int uint_cmp(const void *i, const void *j) {\n-    uint a = *(uint *)i;\n-    uint b = *(uint *)j;\n-    return a > b ? 1 : a < b ? -1 : 0;\n+static int uint_cmp(const void *i, const void *j) {\n+  uint a = *(uint *)i;\n+  uint b = *(uint *)j;\n+  return a > b ? 1 : a < b ? -1 : 0;\n+}\n+\n+AOTCodeStats AOTCodeStats::add_cached_code_stats(AOTCodeStats stats1, AOTCodeStats stats2) {\n+  AOTCodeStats result;\n+  for (int kind = SCCEntry::None; kind < SCCEntry::Kind_count; kind++) {\n+    result.ccstats._kind_cnt[kind] = stats1.entry_count(kind) + stats2.entry_count(kind);\n+  }\n+\n+  for (int lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n+    result.ccstats._nmethod_cnt[lvl] = stats1.nmethod_count(lvl) + stats2.nmethod_count(lvl);\n+  }\n+  result.ccstats._clinit_barriers_cnt = stats1.clinit_barriers_count() + stats2.clinit_barriers_count();\n+  return result;\n+}\n+\n+void SCCache::log_stats_on_exit() {\n+  LogStreamHandle(Info, scc, exit) log;\n+  if (log.is_enabled()) {\n+    AOTCodeStats prev_stats;\n+    AOTCodeStats current_stats;\n+    AOTCodeStats total_stats;\n+    uint max_size = 0;\n+\n+    uint load_count = (_load_header != nullptr) ? _load_header->entries_count() : 0;\n+\n+    for (uint i = 0; i < load_count; i++) {\n+      prev_stats.collect_entry_stats(&_load_entries[i]);\n+      if (max_size < _load_entries[i].size()) {\n+        max_size = _load_entries[i].size();\n+      }\n+    }\n+    for (uint i = 0; i < _store_entries_cnt; i++) {\n+      current_stats.collect_entry_stats(&_store_entries[i]);\n+      if (max_size < _store_entries[i].size()) {\n+        max_size = _store_entries[i].size();\n+      }\n+    }\n+    total_stats = AOTCodeStats::add_cached_code_stats(prev_stats, current_stats);\n+\n+    log.print_cr(\"Wrote %d SCCEntry entries(%u max size) to AOT Code Cache\",\n+                 total_stats.total_count(), max_size);\n+    for (uint kind = SCCEntry::None; kind < SCCEntry::Kind_count; kind++) {\n+      if (total_stats.entry_count(kind) > 0) {\n+        log.print_cr(\"  %s: total=%u(old=%u+new=%u)\",\n+                     sccentry_kind_name[kind], total_stats.entry_count(kind), prev_stats.entry_count(kind), current_stats.entry_count(kind));\n+        if (kind == SCCEntry::Code) {\n+          for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n+            if (total_stats.nmethod_count(lvl) > 0) {\n+              log.print_cr(\"    Tier %d: total=%u(old=%u+new=%u)\",\n+                           lvl, total_stats.nmethod_count(lvl), prev_stats.nmethod_count(lvl), current_stats.nmethod_count(lvl));\n+            }\n+          }\n+        }\n+      }\n+    }\n+    log.print_cr(\"Total=%u(old=%u+new=%u)\", total_stats.total_count(), prev_stats.total_count(), current_stats.total_count());\n@@ -1057,8 +1118,1 @@\n-    uint not_entrant_nb = 0;\n-    uint stubs_count = 0;\n-    uint adapters_count = 0;\n-    uint shared_blobs_count = 0;\n-    uint c1_blobs_count = 0;\n-    uint opto_blobs_count = 0;\n-    uint total_blobs_count = 0;\n-    uint max_size = 0;\n+\n@@ -1073,1 +1127,0 @@\n-          not_entrant_nb++;\n@@ -1083,15 +1136,0 @@\n-        } else if (entries_address[i].kind() == SCCEntry::Adapter) {\n-          adapters_count++;\n-        } else if (entries_address[i].kind() == SCCEntry::Stub) {\n-          stubs_count++;\n-        } else if (entries_address[i].kind() == SCCEntry::Blob) {\n-          total_blobs_count++;\n-          if (entries_address[i].comp_level() == CompLevel_none) {\n-            shared_blobs_count++;\n-          } else if ((entries_address[i].comp_level() == CompLevel_simple) ||\n-                     (entries_address[i].comp_level() == CompLevel_limited_profile)) {\n-            c1_blobs_count++;\n-          } else {\n-            assert(entries_address[i].comp_level() == CompLevel_full_optimization, \"must be!\");\n-            opto_blobs_count++;\n-          }\n@@ -1101,3 +1139,0 @@\n-          if (size > max_size) {\n-            max_size = size;\n-          }\n@@ -1127,1 +1162,0 @@\n-        not_entrant_nb++;\n@@ -1141,3 +1175,0 @@\n-        if (size > max_size) {\n-          max_size = size;\n-        }\n@@ -1159,0 +1190,1 @@\n+\n@@ -1195,7 +1227,3 @@\n-    log_info(scc, exit)(\"Wrote %d SCCEntry entries (%d were not entrant, %d max size) to AOT Code Cache\", entries_count, not_entrant_nb, max_size);\n-    log_info(scc, exit)(\"  Stubs: total=%d\", stubs_count);\n-    log_info(scc, exit)(\"  Adapters: total=%d\", adapters_count);\n-    log_info(scc, exit)(\"  Shared Blobs: total=%d\",shared_blobs_count);\n-    log_info(scc, exit)(\"  C1 Blobs: total=%d\", c1_blobs_count);\n-    log_info(scc, exit)(\"  Opto Blobs: total=%d\", opto_blobs_count);\n-    log_info(scc, exit)(\"  All Blobs: total=%d\", total_blobs_count);\n+\n+    log_stats_on_exit();\n+\n@@ -3447,13 +3475,0 @@\n-static void print_helper(outputStream* st, const char* name, int stats[6+3+1][6], int idx) {\n-  int total = stats[idx][0];\n-  if (total > 0) {\n-    st->print(\"  %s:\", name);\n-    print_helper1(st, \"total\",               stats[idx][0]);\n-    \/\/print_helper1(st, \"for_preload\",         stats[idx][2]); \/\/ implied by Tier5\n-    print_helper1(st, \"loaded\",              stats[idx][3]);\n-    print_helper1(st, \"invalidated\",         stats[idx][4]);\n-    print_helper1(st, \"failed\",              stats[idx][5]);\n-    print_helper1(st, \"has_clinit_barriers\", stats[idx][1]);\n-    st->cr();\n-  }\n-}\n@@ -3474,2 +3489,1 @@\n-    \/\/ Entries are None, Adapter, Stub, Blob x 3 levels, Code x 6 levels\n-    int stats[6 + 3 + 1][6] = {0};\n+    AOTCodeStats stats;\n@@ -3477,2 +3491,2 @@\n-      int index = search_entries[2*i + 1];\n-      SCCEntry* entry = &(load_entries[index]);\n+      stats.collect_all_stats(&load_entries[i]);\n+    }\n@@ -3480,7 +3494,8 @@\n-      int lvl = entry->kind();\n-      if (entry->kind() == SCCEntry::Code) {\n-        lvl += entry->comp_level() + (entry->for_preload() ? 1 : 0);\n-      }\n-      ++stats[lvl][0]; \/\/ total\n-      if (entry->has_clinit_barriers()) {\n-        ++stats[lvl][1];\n+    for (uint kind = SCCEntry::None; kind < SCCEntry::Kind_count; kind++) {\n+      if (stats.entry_count(kind) > 0) {\n+        st->print(\"  %s:\", sccentry_kind_name[kind]);\n+        print_helper1(st, \"total\", stats.entry_count(kind));\n+        print_helper1(st, \"loaded\", stats.entry_loaded_count(kind));\n+        print_helper1(st, \"invalidated\", stats.entry_invalidated_count(kind));\n+        print_helper1(st, \"failed\", stats.entry_load_failed_count(kind));\n+        st->cr();\n@@ -3488,11 +3503,14 @@\n-      if (entry->for_preload()) {\n-        ++stats[lvl][2];\n-      }\n-      if (entry->is_loaded()) {\n-        ++stats[lvl][3];\n-      }\n-      if (entry->not_entrant()) {\n-        ++stats[lvl][4];\n-      }\n-      if (entry->load_fail()) {\n-        ++stats[lvl][5];\n+      if (kind == SCCEntry::Code) {\n+        for (uint lvl = CompLevel_none; lvl < AOTCompLevel_count; lvl++) {\n+          if (stats.nmethod_count(lvl) > 0) {\n+            st->print(\"    SC T%d\", lvl);\n+            print_helper1(st, \"total\", stats.nmethod_count(lvl));\n+            print_helper1(st, \"loaded\", stats.nmethod_loaded_count(lvl));\n+            print_helper1(st, \"invalidated\", stats.nmethod_invalidated_count(lvl));\n+            print_helper1(st, \"failed\", stats.nmethod_load_failed_count(lvl));\n+            if (lvl == AOTCompLevel_count-1) {\n+              print_helper1(st, \"has_clinit_barriers\", stats.clinit_barriers_count());\n+            }\n+            st->cr();\n+          }\n+        }\n@@ -3501,12 +3519,0 @@\n-\n-    print_helper(st, \"None\", stats, SCCEntry::None);\n-    print_helper(st, \"Stub\", stats, SCCEntry::Stub);\n-    print_helper(st, \"Blob\", stats, SCCEntry::Blob);\n-    print_helper(st, \"Adapters\", stats, SCCEntry::Adapter);\n-    for (int lvl = 0; lvl <= CompLevel_full_optimization + 1; lvl++) {\n-      ResourceMark rm;\n-      stringStream ss;\n-      ss.print(\"SC T%d\", lvl);\n-      print_helper(st, ss.freeze(), stats, SCCEntry::Code + lvl);\n-    }\n-\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":96,"deletions":90,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"compiler\/compilerDefinitions.hpp\"\n+\n@@ -60,1 +62,0 @@\n-enum CompLevel : signed char;\n@@ -139,0 +140,7 @@\n+#define DO_SCCENTRY_KIND(Fn) \\\n+  Fn(None) \\\n+  Fn(Adapter) \\\n+  Fn(Stub) \\\n+  Fn(Blob) \\\n+  Fn(Code) \\\n+\n@@ -142,6 +150,5 @@\n-  enum Kind {\n-    None = 0,\n-    Adapter = 1,\n-    Stub = 2,\n-    Blob = 3,\n-    Code = 4\n+  enum Kind : s1 {\n+#define DECL_KIND_ENUM(kind) kind,\n+    DO_SCCENTRY_KIND(DECL_KIND_ENUM)\n+#undef DECL_KIND_ENUM\n+    Kind_count\n@@ -215,0 +222,5 @@\n+  bool is_adapter() { return _kind == Adapter; }\n+  bool is_stub() { return _kind == Stub; }\n+  bool is_blob() { return _kind == Blob; }\n+  bool is_code() { return _kind == Code; }\n+\n@@ -512,0 +524,2 @@\n+  void log_stats_on_exit();\n+\n@@ -628,0 +642,120 @@\n+\/\/ +1 for preload code, and another +1 because CompLevel_count is not really the count, but same as the highest comp level\n+const int AOTCompLevel_count = CompLevel_count+1+1; \/\/ 6 levels indexed from 0 to 5\n+\n+struct AOTCodeStats {\n+private:\n+  struct {\n+    uint _kind_cnt[SCCEntry::Kind_count];\n+    uint _nmethod_cnt[AOTCompLevel_count];\n+    uint _clinit_barriers_cnt;\n+  } ccstats; \/\/ ccstats = cached code stats\n+\n+  void check_kind(uint kind) { assert(kind >= SCCEntry::None && kind < SCCEntry::Kind_count, \"Invalid SCCEntry kind %d\", kind); }\n+  void check_complevel(uint lvl) { assert(lvl >= CompLevel_none && lvl < AOTCompLevel_count, \"Invalid compilation level %d\", lvl); }\n+\n+public:\n+  void inc_entry_cnt(uint kind) { check_kind(kind); ccstats._kind_cnt[kind] += 1; }\n+  void inc_nmethod_cnt(uint lvl) { check_complevel(lvl); ccstats._nmethod_cnt[lvl] += 1; }\n+  void inc_preload_cnt() { ccstats._nmethod_cnt[AOTCompLevel_count-1] += 1; }\n+  void inc_clinit_barriers_cnt() { ccstats._clinit_barriers_cnt += 1; }\n+\n+  void collect_entry_stats(SCCEntry* entry) {\n+    inc_entry_cnt(entry->kind());\n+    if (entry->is_code()) {\n+      entry->for_preload() ? inc_nmethod_cnt(AOTCompLevel_count-1)\n+                           : inc_nmethod_cnt(entry->comp_level());\n+      if (entry->has_clinit_barriers()) {\n+        inc_clinit_barriers_cnt();\n+      }\n+    }\n+  }\n+\n+  uint entry_count(uint kind) { check_kind(kind); return ccstats._kind_cnt[kind]; }\n+  uint nmethod_count(uint lvl) { check_complevel(lvl); return ccstats._nmethod_cnt[lvl]; }\n+  uint preload_count() { return ccstats._nmethod_cnt[AOTCompLevel_count-1]; }\n+  uint clinit_barriers_count() { return ccstats._clinit_barriers_cnt; }\n+\n+  uint total_count() {\n+    uint total = 0;\n+    for (int kind = SCCEntry::None; kind < SCCEntry::Kind_count; kind++) {\n+      total += ccstats._kind_cnt[kind];\n+    }\n+    return total;\n+  }\n+\n+  static AOTCodeStats add_cached_code_stats(AOTCodeStats stats1, AOTCodeStats stats2);\n+\n+  \/\/ Runtime stats of the AOT code\n+private:\n+  struct {\n+    struct {\n+      uint _loaded_cnt;\n+      uint _invalidated_cnt;\n+      uint _load_failed_cnt;\n+    } _entry_kinds[SCCEntry::Kind_count],\n+      _nmethods[AOTCompLevel_count];\n+  } rs; \/\/ rs = runtime stats\n+\n+public:\n+  void inc_entry_loaded_cnt(uint kind) { check_kind(kind); rs._entry_kinds[kind]._loaded_cnt += 1; }\n+  void inc_entry_invalidated_cnt(uint kind) { check_kind(kind); rs._entry_kinds[kind]._invalidated_cnt += 1; }\n+  void inc_entry_load_failed_cnt(uint kind) { check_kind(kind); rs._entry_kinds[kind]._load_failed_cnt += 1; }\n+\n+  void inc_nmethod_loaded_cnt(uint lvl) { check_complevel(lvl); rs._nmethods[lvl]._loaded_cnt += 1; }\n+  void inc_nmethod_invalidated_cnt(uint lvl) { check_complevel(lvl); rs._nmethods[lvl]._invalidated_cnt += 1; }\n+  void inc_nmethod_load_failed_cnt(uint lvl) { check_complevel(lvl); rs._nmethods[lvl]._load_failed_cnt += 1; }\n+\n+  uint entry_loaded_count(uint kind) { check_kind(kind); return rs._entry_kinds[kind]._loaded_cnt; }\n+  uint entry_invalidated_count(uint kind) { check_kind(kind); return rs._entry_kinds[kind]._invalidated_cnt; }\n+  uint entry_load_failed_count(uint kind) { check_kind(kind); return rs._entry_kinds[kind]._load_failed_cnt; }\n+\n+  uint nmethod_loaded_count(uint lvl) { check_complevel(lvl); return rs._nmethods[lvl]._loaded_cnt; }\n+  uint nmethod_invalidated_count(uint lvl) { check_complevel(lvl); return rs._nmethods[lvl]._invalidated_cnt; }\n+  uint nmethod_load_failed_count(uint lvl) { check_complevel(lvl); return rs._nmethods[lvl]._load_failed_cnt; }\n+\n+  void inc_loaded_cnt(SCCEntry* entry) {\n+    inc_entry_loaded_cnt(entry->kind());\n+    if (entry->is_code()) {\n+      entry->for_preload() ? inc_nmethod_loaded_cnt(AOTCompLevel_count-1)\n+                           : inc_nmethod_loaded_cnt(entry->comp_level());\n+    }\n+  }\n+\n+  void inc_invalidated_cnt(SCCEntry* entry) {\n+    inc_entry_invalidated_cnt(entry->kind());\n+    if (entry->is_code()) {\n+      entry->for_preload() ? inc_nmethod_invalidated_cnt(AOTCompLevel_count-1)\n+                           : inc_nmethod_invalidated_cnt(entry->comp_level());\n+    }\n+  }\n+\n+  void inc_load_failed_cnt(SCCEntry* entry) {\n+    inc_entry_load_failed_cnt(entry->kind());\n+    if (entry->is_code()) {\n+      entry->for_preload() ? inc_nmethod_load_failed_cnt(AOTCompLevel_count-1)\n+                           : inc_nmethod_load_failed_cnt(entry->comp_level());\n+    }\n+  }\n+\n+  void collect_entry_runtime_stats(SCCEntry* entry) {\n+    if (entry->is_loaded()) {\n+      inc_loaded_cnt(entry);\n+    }\n+    if (entry->not_entrant()) {\n+      inc_invalidated_cnt(entry);\n+    }\n+    if (entry->load_fail()) {\n+      inc_load_failed_cnt(entry);\n+    }\n+  }\n+\n+  void collect_all_stats(SCCEntry* entry) {\n+    collect_entry_stats(entry);\n+    collect_entry_runtime_stats(entry);\n+  }\n+\n+  AOTCodeStats() {\n+    memset(this, 0, sizeof(AOTCodeStats));\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":141,"deletions":7,"binary":false,"changes":148,"status":"modified"}]}