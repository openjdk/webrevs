{"files":[{"patch":"@@ -64,1 +64,0 @@\n-bool CDSConfig::_experimental_leyden_flags_used = false;\n@@ -93,0 +92,6 @@\n+    \/\/ Note: -Xshare and -XX:AOTMode flags are mutually exclusive.\n+    \/\/ - Classic workflow: -Xshare:on and -Xshare:dump cannot take effect at the same time.\n+    \/\/ - JEP 483 workflow: -XX:AOTMode:record and -XX:AOTMode=on cannot take effect at the same time.\n+    \/\/ So we can never come to here with RequireSharedSpaces==true.\n+    assert(!RequireSharedSpaces, \"sanity\");\n+\n@@ -97,10 +102,0 @@\n-    if (RequireSharedSpaces) {\n-      if (is_experimental_leyden_workflow()) {\n-        log_info(cds)(\"-Xshare:on flag is ignored when creating a CacheDataStore\");\n-      } else {\n-        \/\/ -Xshare and -XX:AOTMode flags are mutually exclusive:\n-        \/\/   Class workflow: -Xshare:on and -Xshare:dump cannot take effect at the same time.\n-        \/\/   JEP 483 workflow: -XX:AOTMode:record and -XX:AOTMode=on cannot take effect at the same time.\n-        ShouldNotReachHere();\n-      }\n-    }\n@@ -115,2 +110,0 @@\n-    } else if (is_experimental_leyden_workflow()) {\n-      ergo_init_experimental_leyden_paths();\n@@ -332,1 +325,1 @@\n-      \/\/ Instead, we save the info so we can warn when necessary: we are doing it only during CacheDataStore\n+      \/\/ Instead, we save the info so we can warn when necessary: we are doing it only during AOT Cache\n@@ -393,3 +386,0 @@\n-  if (FLAG_IS_DEFAULT(AOTCache) && AOTStubCaching) {\n-    log_debug(aot,codecache,init)(\"AOTCache is not specified - AOTStubCaching is ignored\");\n-  }\n@@ -446,5 +436,0 @@\n-  if (experimental_leyden_flags_used() && !new_flag_is_default) {\n-    vm_exit_during_initialization(err_msg(\"Option %s cannot be used at the same time with \"\n-                                          \"CacheDataStore, CDSManualFinalImage, or CDSPreimage\",\n-                                          new_flag_name));\n-  }\n@@ -467,5 +452,0 @@\n-  if (!FLAG_IS_DEFAULT(CacheDataStore) ||\n-      !FLAG_IS_DEFAULT(CDSManualFinalImage) ||\n-      !FLAG_IS_DEFAULT(CDSPreimage)) {\n-    _experimental_leyden_flags_used = true;\n-  }\n@@ -483,12 +463,2 @@\n-  if (FLAG_IS_DEFAULT(AOTCache) &&\n-      FLAG_IS_DEFAULT(AOTMode)) {\n-    bool has_cache_output = !FLAG_IS_DEFAULT(AOTCacheOutput);\n-    bool has_config = !FLAG_IS_DEFAULT(AOTConfiguration);\n-    if (!has_cache_output && !has_config) {\n-      \/\/ AOT flags are not used. Use classic CDS workflow\n-      return;\n-    } else if (has_cache_output) {\n-      \/\/ If AOTCacheOutput has been set, default mode is \"record\".\n-      \/\/ Default value for AOTConfiguration, if necessary, will be assigned in check_aotmode_record().\n-      FLAG_SET_ERGO(AOTMode, \"record\");\n-    }\n+  if (FLAG_IS_DEFAULT(AOTCache) && AOTAdapterCaching) {\n+    log_debug(aot,codecache,init)(\"AOTCache is not specified - AOTAdapterCaching is ignored\");\n@@ -691,16 +661,1 @@\n-void CDSConfig::ergo_init_experimental_leyden_paths() {\n-  assert(_cds_ergo_initialize_started, \"sanity\");\n-  if (is_dumping_static_archive()) {\n-    if (is_dumping_preimage_static_archive()) {\n-      _output_archive_path = CDSPreimage;\n-    } else {\n-      assert(is_dumping_final_static_archive(), \"must be\");\n-      _input_static_archive_path = CDSPreimage;\n-      _output_archive_path = CacheDataStore;\n-    }\n-  } else if (is_using_archive()) {\n-    _input_static_archive_path = CacheDataStore;\n-  }\n-}\n-\n-bool CDSConfig::check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line, bool xshare_auto_cmd_line) {\n+bool CDSConfig::check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line) {\n@@ -716,10 +671,0 @@\n-  if (CacheDataStore != nullptr) {\n-    if (!setup_experimental_leyden_workflow(xshare_auto_cmd_line)) {\n-      return false;\n-    }\n-  } else {\n-    if (CDSPreimage != nullptr) {\n-      vm_exit_during_initialization(\"CDSPreimage must be specified only when CacheDataStore is specified\");\n-    }\n-  }\n-\n@@ -824,5 +769,1 @@\n-      if (is_experimental_leyden_workflow()) {\n-        vm_exit_during_initialization(\"CacheDataStore cannot be created because AOTClassLinking is enabled but full module graph is disabled\");\n-      } else {\n-        vm_exit_during_initialization(\"AOT cache cannot be created because AOTClassLinking is enabled but full module graph is disabled\");\n-      }\n+      vm_exit_during_initialization(\"AOT cache cannot be created because AOTClassLinking is enabled but full module graph is disabled\");\n@@ -867,71 +808,0 @@\n-\/\/ Ergo set-up of various flags used by the experimental workflow that uses -XX:CacheDataStore. This workflow\n-\/\/ is deprecated and will be removed from Leyden.\n-bool CDSConfig::setup_experimental_leyden_workflow(bool xshare_auto_cmd_line) {\n-  if (FLAG_IS_DEFAULT(AOTClassLinking)) {\n-    FLAG_SET_ERGO(AOTClassLinking, true);\n-  }\n-\n-  if (SharedArchiveFile != nullptr) {\n-    vm_exit_during_initialization(\"CacheDataStore and SharedArchiveFile cannot be both specified\");\n-  }\n-  if (!AOTClassLinking) {\n-    vm_exit_during_initialization(\"CacheDataStore requires AOTClassLinking\");\n-  }\n-\n-  if (CDSPreimage == nullptr) {\n-    if (os::file_exists(CacheDataStore) \/* && TODO: Need to check if CDS file is valid*\/) {\n-      \/\/ The CacheDataStore is already up to date. Use it. Also turn on aot code by default.\n-      FLAG_SET_ERGO_IF_DEFAULT(AOTReplayTraining, true);\n-      AOTCodeCache::enable_caching();\n-\n-      \/\/ Leyden temp: make sure the user knows if CDS archive somehow fails to load.\n-      if (UseSharedSpaces && !xshare_auto_cmd_line) {\n-        log_info(cds)(\"Enabled -Xshare:on by default for troubleshooting Leyden prototype\");\n-        RequireSharedSpaces = true;\n-      }\n-    } else {\n-      \/\/ The preimage dumping phase -- run the app and write the preimage file\n-      size_t len = strlen(CacheDataStore) + 10;\n-      char* preimage = AllocateHeap(len, mtArguments);\n-      jio_snprintf(preimage, len, \"%s.preimage\", CacheDataStore);\n-\n-      UseSharedSpaces = false;\n-      enable_dumping_static_archive();\n-      CDSPreimage = preimage;\n-      log_info(cds)(\"CacheDataStore needs to be updated. Writing %s file\", CDSPreimage);\n-\n-      \/\/ At VM exit, the module graph may be contaminated with program states. We should rebuild the\n-      \/\/ module graph when dumping the CDS final image.\n-      log_info(cds)(\"full module graph: disabled when writing CDS preimage\");\n-      disable_heap_dumping();\n-      stop_dumping_full_module_graph();\n-      FLAG_SET_ERGO(ArchivePackages, false);\n-      FLAG_SET_ERGO(ArchiveProtectionDomains, false);\n-      FLAG_SET_ERGO_IF_DEFAULT(AOTRecordTraining, true);\n-      _is_dumping_static_archive = true;\n-      _is_dumping_preimage_static_archive = true;\n-    }\n-  } else {\n-    \/\/ The final image dumping phase -- load the preimage and write the final image file\n-    UseSharedSpaces = true;\n-    log_info(cds)(\"Generate CacheDataStore %s from CDSPreimage %s\", CacheDataStore, CDSPreimage);\n-    \/\/ Force -Xbatch for AOT compilation.\n-    if (FLAG_SET_CMDLINE(BackgroundCompilation, false) != JVMFlag::SUCCESS) {\n-      return false;\n-    }\n-    AOTRecordTraining = false; \/\/ This will be updated inside MetaspaceShared::preload_and_dump()\n-\n-    FLAG_SET_ERGO_IF_DEFAULT(AOTReplayTraining, true);\n-    \/\/ Settings for AOT\n-    AOTCodeCache::enable_caching(); \/\/ Update default settings\n-    if (AOTCodeCache::is_caching_enabled()) {\n-      \/\/ Cannot dump aot code until metadata and heap are dumped.\n-      disable_dumping_aot_code();\n-    }\n-    _is_dumping_static_archive = true;\n-    _is_dumping_final_static_archive = true;\n-  }\n-\n-  return true;\n-}\n-\n@@ -1283,4 +1153,0 @@\n-bool CDSConfig::is_experimental_leyden_workflow() {\n-  return CacheDataStore != nullptr || CDSPreimage != nullptr;\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":11,"deletions":145,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-  static bool _is_one_step_training;\n@@ -59,1 +58,0 @@\n-  static bool  _experimental_leyden_flags_used;\n@@ -79,1 +77,0 @@\n-  static bool setup_experimental_leyden_workflow(bool xshare_auto_cmd_line); \/\/ Deprecated -- to be removed\n@@ -85,1 +82,0 @@\n-  static void ergo_init_experimental_leyden_paths();\n@@ -105,1 +101,0 @@\n-  static bool experimental_leyden_flags_used()               { return CDS_ONLY(_experimental_leyden_flags_used) NOT_CDS(false); }\n@@ -109,1 +104,1 @@\n-  static bool check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line, bool xshare_auto_cmd_line) NOT_CDS_RETURN_(true);\n+  static bool check_vm_args_consistency(bool patch_mod_javabase, bool mode_flag_cmd_line) NOT_CDS_RETURN_(true);\n@@ -124,2 +119,1 @@\n-  static bool is_dumping_static_archive()                    { return (CDS_ONLY(_is_dumping_static_archive) NOT_CDS(false))\n-                                                                    || is_dumping_final_static_archive(); }\n+  static bool is_dumping_static_archive()                    { return CDS_ONLY(_is_dumping_static_archive) NOT_CDS(false); }\n@@ -128,1 +122,0 @@\n-\n@@ -227,3 +220,0 @@\n-  \/\/ Are we using the (to be deprecated) -XX:CacheDataStore workflow?\n-  static bool is_experimental_leyden_workflow()              NOT_CDS_RETURN_(false);\n-\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -211,12 +211,0 @@\n-  product(ccstr, CacheDataStore, nullptr,                                   \\\n-          \"If valid, use the specified file for SharedArchiveFile; \"        \\\n-          \"otherwise the specified file is generated at program exit\")      \\\n-                                                                            \\\n-  product(ccstr, CDSPreimage, nullptr,                                      \\\n-          \"(** internal use only **) -- used by a child JVM process to \"    \\\n-          \"create the CacheDataStore final image\")                          \\\n-                                                                            \\\n-  product(bool, CDSManualFinalImage, false, DIAGNOSTIC,                     \\\n-          \"(** internal use only **) -- if false, automatically launch a \"  \\\n-          \"child process to create the final image.\")                       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -309,3 +309,1 @@\n-      if (CDSConfig::is_experimental_leyden_workflow()) {\n-        error = \"Cannot create the CacheDataStore\";\n-      } else if (CDSConfig::is_dumping_preimage_static_archive()) {\n+      if (CDSConfig::is_dumping_preimage_static_archive()) {\n@@ -860,3 +858,0 @@\n-    if (CDSConfig::is_experimental_leyden_workflow()) {\n-      vm_exit(1);\n-    }\n@@ -1116,8 +1111,4 @@\n-    if (CDSConfig::is_experimental_leyden_workflow()) {\n-      fork_and_dump_final_static_archive_experimental_leyden_workflow(CHECK);\n-    } else {\n-      tty->print_cr(\"%s AOTConfiguration recorded: %s\",\n-                    CDSConfig::has_temp_aot_config_file() ? \"Temporary\" : \"\", AOTConfiguration);\n-      if (CDSConfig::is_single_command_training()) {\n-        fork_and_dump_final_static_archive(CHECK);\n-      }\n+    tty->print_cr(\"%s AOTConfiguration recorded: %s\",\n+                  CDSConfig::has_temp_aot_config_file() ? \"Temporary\" : \"\", AOTConfiguration);\n+    if (CDSConfig::is_single_command_training()) {\n+      fork_and_dump_final_static_archive(CHECK);\n@@ -1194,0 +1185,1 @@\n+  precond(strcmp(AOTMode, \"record\") == 0);\n@@ -1198,10 +1190,1 @@\n-  if (CDSConfig::is_experimental_leyden_workflow()) {\n-    stringStream ss;\n-    ss.print(\"-XX:CDSPreimage=\");\n-    ss.print_raw(CDSPreimage);\n-    append_args(&args, ss.freeze(), CHECK_0);\n-  } else {\n-\n-   precond(strcmp(AOTMode, \"record\") == 0);\n-\n-   {\n+  {\n@@ -1214,2 +1197,2 @@\n-   }\n-   {\n+  }\n+  {\n@@ -1224,3 +1207,0 @@\n-   }\n-\n-   append_args(&args, \"-XX:AOTMode=create\", CHECK_0);\n@@ -1229,0 +1209,2 @@\n+  append_args(&args, \"-XX:AOTMode=create\", CHECK_0);\n+\n@@ -1260,79 +1242,0 @@\n-\/\/ This is for debugging purposes only (-XX:+CDSManualFinalImage) so we don't bother\n-\/\/ quoating any special characters. The user should avoid using special chars.\n-static void print_vm_arguments(outputStream* st) {\n-  const char* cp = Arguments::get_appclasspath();\n-  if (cp != nullptr && strlen(cp) > 0 && strcmp(cp, \".\") != 0) {\n-    st->print(\" -cp \");  st->print_raw(cp);\n-  }\n-  for (int i = 0; i < Arguments::num_jvm_args(); i++) {\n-    st->print(\" %s\", Arguments::jvm_args_array()[i]);\n-  }\n-}\n-\n-void MetaspaceShared::fork_and_dump_final_static_archive_experimental_leyden_workflow(TRAPS) {\n-  assert(CDSConfig::is_dumping_preimage_static_archive(), \"sanity\");\n-\n-  ResourceMark rm;\n-  stringStream ss;\n-  print_java_launcher(&ss);\n-\n-  if (CDSManualFinalImage) {\n-    print_vm_arguments(&ss);\n-    ss.print(\" -XX:CDSPreimage=%s\", SharedArchiveFile);\n-    const char* cmd = ss.freeze();\n-\n-    tty->print_cr(\"-XX:+CDSManualFinalImage is specified\");\n-    tty->print_cr(\"Please manually execute the following command to create the final CDS image:\");\n-    tty->print(\"    \"); tty->print_raw_cr(cmd);\n-\n-    \/\/ The following is useful if the dumping was trigger by a script that builds\n-    \/\/ a complex command-line.\n-    tty->print_cr(\"Note: to recreate the preimage only:\");\n-    tty->print_cr(\"    rm -f %s\", CacheDataStore);\n-    tty->print(\"    \");\n-    print_java_launcher(tty);\n-    print_vm_arguments(tty);\n-    if (Arguments::java_command() != nullptr) {\n-      tty->print(\" %s\", Arguments::java_command());\n-    }\n-    tty->cr();\n-  } else {\n-    const char* cmd = ss.freeze();\n-    log_info(cds)(\"Launching child process to create final CDS image:\");\n-    log_info(cds)(\"    %s\", cmd);\n-    int status = exec_jvm_with_java_tool_options(cmd, CHECK);\n-    if (status != 0) {\n-      log_error(cds)(\"Child process finished; status = %d\", status);\n-      log_error(cds)(\"To reproduce the error\");\n-      ResourceMark rm;\n-      LogStream ls(Log(cds)::error());\n-      ls.print(\"    \"); ls.print_raw_cr(cmd);\n-\n-      \/\/ The following is useful if the dumping was trigger by a script that builds\n-      \/\/ a complex command-line.\n-      ls.print_cr(\"Note: to recreate the preimage only:\");\n-      ls.print_cr(\"    rm -f %s\", CacheDataStore);\n-      ls.print(\"    \");\n-      print_java_launcher(&ls);\n-      print_vm_arguments(&ls);\n-      ls.print(\" -XX:+UnlockDiagnosticVMOptions -XX:+CDSManualFinalImage\");\n-      if (Arguments::java_command() != nullptr) {\n-        ls.print(\" %s\", Arguments::java_command());\n-      }\n-      ls.cr();\n-\n-      vm_direct_exit(status);\n-    } else {\n-      log_info(cds)(\"Child process finished; status = %d\", status);\n-      \/\/ On Windows, need WRITE permission to remove the file.\n-      WINDOWS_ONLY(chmod(CDSPreimage, _S_IREAD | _S_IWRITE));\n-      status = remove(CDSPreimage);\n-      if (status != 0) {\n-        log_error(cds)(\"Failed to remove CDSPreimage file %s\", CDSPreimage);\n-      } else {\n-        log_info(cds)(\"Removed CDSPreimage file %s\", CDSPreimage);\n-      }\n-    }\n-  }\n-}\n-\n@@ -1544,6 +1447,0 @@\n-    } else if (RequireSharedSpaces) {\n-      MetaspaceShared::unrecoverable_loading_error(\"Unable to map shared spaces\");\n-    } else if (CDSConfig::is_dumping_final_static_archive()) {\n-      assert(CDSPreimage != nullptr, \"must be\");\n-      log_error(cds)(\"Unable to map shared spaces for CDSPreimage = %s\", CDSPreimage);\n-      MetaspaceShared::unrecoverable_loading_error();\n@@ -1551,1 +1448,5 @@\n-      report_loading_error(\"Unable to map shared spaces\");\n+      if (RequireSharedSpaces) {\n+        MetaspaceShared::unrecoverable_loading_error(\"Unable to map shared spaces\");\n+      } else {\n+        report_loading_error(\"Unable to map shared spaces\");\n+      }\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":16,"deletions":115,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -191,1 +191,0 @@\n-  static void fork_and_dump_final_static_archive_experimental_leyden_workflow(TRAPS);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1793,1 +1793,1 @@\n-  if (!CDSConfig::check_vm_args_consistency(patch_mod_javabase, mode_flag_cmd_line, xshare_auto_cmd_line)) {\n+  if (!CDSConfig::check_vm_args_consistency(patch_mod_javabase, mode_flag_cmd_line)) {\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -931,10 +931,2 @@\n-    if (CDSConfig::is_experimental_leyden_workflow()) {\n-      \/\/ TODO: copy the verification and loader constraints from preimage to final image\n-      \/\/ TODO: load archived classes for custom loaders as well.\n-      log_info(cds)(\"Dumping final image of CacheDataStore %s\", CacheDataStore);\n-      MetaspaceShared::preload_and_dump(CHECK_JNI_ERR);\n-      vm_direct_exit(0, \"CacheDataStore dumping is complete\");\n-    } else {\n-      tty->print_cr(\"Reading AOTConfiguration %s and writing AOTCache %s\", AOTConfiguration, AOTCache);\n-      MetaspaceShared::preload_and_dump(CHECK_JNI_ERR);\n-    }\n+    tty->print_cr(\"Reading AOTConfiguration %s and writing AOTCache %s\", AOTConfiguration, AOTCache);\n+    MetaspaceShared::preload_and_dump(CHECK_JNI_ERR);\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -442,1 +442,0 @@\n- -runtime\/cds\/appcds\/leyden\/LeydenHello.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,0 +69,2 @@\n+$(error This makefile no longer works. Need to update it to use -XX:AOTCache flags)\n+\n","filename":"test\/hotspot\/jtreg\/premain\/spring-petclinic\/WarmupMakefile","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,4 +69,0 @@\n-        {\n-          Tester tester = new Tester();\n-          tester.run(new String[] {\"LEYDEN\"} );\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/ExcludedClasses.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,13 +38,0 @@\n-\/*\n- * @test id=leyden\n- * @summary Use special characters in the name of the cache file specified by -XX:CacheDataStore.\n- *          Make sure these characters are passed to the child JVM process that assembles the cache.\n- * @requires vm.cds.supports.aot.class.linking\n- * @comment work around JDK-8345635\n- * @requires !vm.jvmci.enabled\n- * @library \/test\/lib\n- * @build SpecialCacheNames\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp\n- * @run driver SpecialCacheNames LEYDEN\n- *\/\n-\n@@ -75,1 +62,1 @@\n-        String archiveName = name + (args[0].equals(\"LEYDEN\") ? \".cds\" : \".aot\");\n+        String archiveName = name + \".aot\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/SpecialCacheNames.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -64,10 +64,0 @@\n-\/*\n- * @test id=leyden\n- * @key external-dep\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @summary run HelidonQuickStartSE with the Leyden workflow\n- * @library \/test\/lib\n- * @run driver\/timeout=120 HelidonQuickStartSE LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/HelidonQuickStartSE.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,9 +52,0 @@\n-\/*\n- * @test id=leyden\n- * @summary Run JavacBenchApp with Leyden workflow\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @library \/test\/lib \/test\/setup_aot\n- * @run driver JavacBench LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/JavacBench.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,10 +64,0 @@\n-\/*\n- * @test id=leyden\n- * @key external-dep\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @summary run MicronautFirstApp with the Leyden workflow\n- * @library \/test\/lib\n- * @run driver\/timeout=120 MicronautFirstApp LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/MicronautFirstApp.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,10 +64,0 @@\n-\/*\n- * @test id=leyden\n- * @key external-dep\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @summary run QuarkusGettingStarted with the Leyden workflow\n- * @library \/test\/lib\n- * @run driver\/timeout=120 QuarkusGettingStarted LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/QuarkusGettingStarted.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,10 +56,0 @@\n-\/*\n- * @test id=leyden\n- * @key external-dep\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @summary run Spring Pet Clinic demo with leyden-premain \"new workflow\"\n- * @library \/test\/lib\n- * @run driver\/timeout=120 SpringPetClinic LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/applications\/SpringPetClinic.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,9 +74,0 @@\n-\/*\n- * @test id=leyden\n- * @summary test the -XX:CacheOnlyClassesIn flag with Leyden workflow\n- * @requires vm.cds\n- * @requires vm.cds.write.archived.java.heap\n- * @library \/test\/lib\n- * @run driver CacheOnlyClassesIn LEYDEN\n- *\/\n-\n@@ -129,2 +120,1 @@\n-                runMode == RunMode.TRAINING ||\n-                runMode == RunMode.TRAINING0) {\n+                runMode == RunMode.TRAINING) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/CacheOnlyClassesIn.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -66,4 +66,0 @@\n-        {\n-          Tester tester = new Tester();\n-          tester.run(new String[] {\"LEYDEN\"} );\n-        }\n@@ -81,2 +77,0 @@\n-            case RunMode.TRAINING0:\n-            case RunMode.TRAINING1:\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/DynamicProxyTest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,11 +36,0 @@\n-\/*\n- * @test id=leyden\n- * @requires vm.cds.supports.aot.class.linking\n- * @comment work around JDK-8345635\n- * @requires !vm.jvmci.enabled\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @build EndTrainingOnMethodEntry\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp ShouldBeCached ShouldNotBeCached\n- * @run driver EndTrainingOnMethodEntry LEYDEN\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/EndTrainingOnMethodEntry.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,12 +37,0 @@\n-\/*\n- * @test id=leyden\n- * @requires vm.cds.supports.aot.class.linking\n- * @comment work around JDK-8345635\n- * @requires !vm.jvmci.enabled\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @modules jdk.management\n- * @build EndTrainingWithAOTCacheMXBean\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar MyTestApp ShouldBeCached ShouldNotBeCached\n- * @run driver EndTrainingWithAOTCacheMXBean LEYDEN\n- *\/\n-\n@@ -97,6 +85,2 @@\n-                if(runMode == RunMode.TRAINING || runMode == RunMode.TRAINING0) {\n-                    if (isLeydenWorkflow()) {\n-                        out.shouldContain(\"AOTMode = auto\");\n-                    } else {\n-                        out.shouldContain(\"AOTMode = record\");\n-                    }\n+                if(runMode == RunMode.TRAINING) {\n+                    out.shouldContain(\"AOTMode = record\");\n@@ -109,1 +93,1 @@\n-                } else if (runMode == RunMode.TRAINING1 || runMode == RunMode.ASSEMBLY) {\n+                } else if (runMode == RunMode.ASSEMBLY) {\n@@ -112,5 +96,1 @@\n-                    if (isLeydenWorkflow()) {\n-                        out.shouldContain(\"AOTMode = auto\");\n-                    } else {\n-                        out.shouldContain(\"AOTMode = on\");\n-                    }\n+                    out.shouldContain(\"AOTMode = on\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/EndTrainingWithAOTCacheMXBean.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -50,4 +50,0 @@\n-        {\n-          Tester tester = new Tester();\n-          tester.run(new String[] {\"LEYDEN\"} );\n-        }\n@@ -80,2 +76,1 @@\n-            } else if ((isLeydenWorkflow() && (runMode == RunMode.TRAINING || runMode == RunMode.TRAINING1)) ||\n-                       (isAOTWorkflow() && runMode == RunMode.ASSEMBLY)) {\n+            } else if (isAOTWorkflow() && runMode == RunMode.ASSEMBLY) {\n@@ -85,5 +80,1 @@\n-                if (isAOTWorkflow()) {\n-                    out.shouldMatch(\"aot,class.* = 0x.* app *OldClass aot-linked\");\n-                } else {\n-                    out.shouldMatch(\"cds,class.* = 0x.* app *OldClass aot-linked\");\n-                }\n+                out.shouldMatch(\"aot,class.* = 0x.* app *OldClass aot-linked\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenAndOldClasses.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    static final String ERROR_GC_SUPPORTED = \"Cannot create the CacheDataStore: UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, Epsilon, or Shenandoah\";\n+    static final String ERROR_GC_SUPPORTED = \"Cannot create the AOT configuration file: UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, Epsilon, or Shenandoah\";\n@@ -116,1 +116,1 @@\n-        tester.run(new String[] {\"LEYDEN_TRAINONLY\"} );\n+        tester.run(new String[] {\"AOT\"} );\n@@ -130,1 +130,1 @@\n-        tester.run(new String[] {\"LEYDEN\"} );\n+        tester.run(new String[] {\"AOT\"} );\n@@ -157,1 +157,1 @@\n-                return StringArrayUtils.concat(productionArgs, \"-Xshare:auto\", mainClass);\n+                return StringArrayUtils.concat(productionArgs, \"-XX:AOTMode=auto\", mainClass);\n@@ -159,1 +159,1 @@\n-                return StringArrayUtils.concat(trainingArgs, mainClass);\n+                return StringArrayUtils.concat(trainingArgs, \"-Xlog:aot\", mainClass);\n@@ -173,1 +173,0 @@\n-                    \/\/out.shouldHaveExitValue(1); TODO VM should enable -Xshare:on by default\n@@ -176,3 +175,1 @@\n-                if (runMode != RunMode.TRAINING1) {\n-                    out.shouldContain(\"Hello Leyden\");\n-                }\n+                out.shouldContain(\"Hello Leyden\");\n@@ -180,1 +177,1 @@\n-                if (runMode == RunMode.TRAINING || runMode == RunMode.TRAINING1) {\n+                if (isDumping(runMode)) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenGCFlags.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test id=aot\n- * @requires vm.cds.write.archived.java.heap\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @build LeydenHello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenHelloApp\n- * @run driver LeydenHello AOT\n- *\/\n-\n-\/*\n- * @test id=leyden\n- * @requires vm.cds.write.archived.java.heap\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @build LeydenHello\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenHelloApp\n- * @run driver LeydenHello LEYDEN\n- *\/\n-\n-import jdk.test.lib.cds.CDSAppTester;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class LeydenHello {\n-    static final String appJar = ClassFileInstaller.getJarPath(\"app.jar\");\n-    static final String mainClass = \"LeydenHelloApp\";\n-\n-    public static void main(String[] args) throws Exception {\n-        Tester t = new Tester();\n-        t.run(args);\n-    }\n-\n-    static class Tester extends CDSAppTester {\n-        public Tester() {\n-            super(mainClass);\n-        }\n-\n-        @Override\n-        public String classpath(RunMode runMode) {\n-            return appJar;\n-        }\n-\n-        @Override\n-        public String[] appCommandLine(RunMode runMode) {\n-            return new String[] {\n-                mainClass, runMode.name()\n-            };\n-        }\n-\n-        @Override\n-        public void checkExecution(OutputAnalyzer out, RunMode runMode) {\n-            if (runMode.isApplicationExecuted()) {\n-                out.shouldContain(\"Hello Leyden \" + runMode.name());\n-            }\n-        }\n-    }\n-}\n-\n-class LeydenHelloApp {\n-    public static void main(String args[]) {\n-        System.out.println(\"Hello Leyden \" + args[0]);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenHello.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -34,9 +34,0 @@\n-\/*\n- * @test id=leyden\n- * @requires vm.cds.write.archived.java.heap\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n- * @build LeydenReflection\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar LeydenReflectionApp\n- * @run driver LeydenReflection LEYDEN\n- *\/\n-\n@@ -80,1 +71,1 @@\n-            if (runMode == RunMode.ASSEMBLY || (isLeydenWorkflow() && runMode == RunMode.TRAINING) || runMode == RunMode.TRAINING1) {\n+            if (runMode == RunMode.ASSEMBLY) {\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenReflection.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -56,4 +56,0 @@\n-    private final String cdsFile;        \/\/ new workflow: -XX:CacheDataStore=<foo>.cds\n-    private final String cdsFileLog;\n-    private final String cdsFilePreImage;        \/\/ new workflow: -XX:CacheDataStore=<foo>.cds\n-    private final String cdsFilePreImageLog;\n@@ -88,4 +84,0 @@\n-        cdsFile = name() + \".cds\";\n-        cdsFileLog = logFileName(cdsFile);\n-        cdsFilePreImage = cdsFile + \".preimage\";\n-        cdsFilePreImageLog = logFileName(cdsFilePreImage);\n@@ -113,1 +105,0 @@\n-        LEYDEN,        \/\/ The new \"one step training workflow\" -- see JDK-8320264\n@@ -118,2 +109,0 @@\n-        TRAINING0,      \/\/ LEYDEN only\n-        TRAINING1,      \/\/ LEYDEN only (assembly phase, app logic not executed)\n@@ -135,1 +124,1 @@\n-            return (this != TRAINING1) && (this != ASSEMBLY) && (this != DUMP_STATIC);\n+            return (this != ASSEMBLY) && (this != DUMP_STATIC);\n@@ -147,1 +136,1 @@\n-            return runMode == RunMode.TRAINING || runMode == RunMode.TRAINING0 || runMode == RunMode.TRAINING1;\n+            return false;\n@@ -200,4 +189,0 @@\n-    public final boolean isLeydenWorkflow() {\n-        return workflow == Workflow.LEYDEN;\n-    }\n-\n@@ -234,1 +219,1 @@\n-        \/\/output.shouldNotContain(CDSTestUtils.MSG_STATIC_FIELD_MAY_HOLD_DIFFERENT_VALUE); \/\/ FIXME -- leyden+JEP483 merge\n+        output.shouldNotContain(CDSTestUtils.MSG_STATIC_FIELD_MAY_HOLD_DIFFERENT_VALUE);\n@@ -279,1 +264,2 @@\n-                                                             \"aot+class=debug\"));\n+                                                             \"cds=debug\",\n+                                                             \"cds+class=debug\"));\n@@ -292,2 +278,2 @@\n-                                                             \"aot=debug\",\n-                                                             \"aot+class=debug\"));\n+                                                             \"cds=debug\",\n+                                                             \"cds+class=debug\"));\n@@ -316,0 +302,2 @@\n+                                                   \"-Xlog:aot\",\n+                                                   \"-Xlog:aot+heap=error\",\n@@ -317,1 +305,0 @@\n-                                                   \"-Xlog:cds+heap=error\",\n@@ -322,0 +309,1 @@\n+                                                             \"aot=debug\",\n@@ -324,1 +312,1 @@\n-                                                             \"cds+heap=warning\",\n+                                                             \"aot+heap=warning\",\n@@ -336,0 +324,1 @@\n+                                                   \"-Xlog:cds\",\n@@ -341,1 +330,2 @@\n-                                                             \"aot+class=debug\",\n+                                                             \"cds=debug\",\n+                                                             \"cds+class=debug\",\n@@ -343,1 +333,1 @@\n-                                                             \"aot+resolve=debug\"));\n+                                                             \"cds+resolve=debug\"));\n@@ -387,0 +377,1 @@\n+                                                      \"aot=debug\",\n@@ -400,63 +391,0 @@\n-    private String trainingLog(String file) {\n-        return logToFile(file,\n-                         \"cds=debug\",\n-                         \"cds+class=debug\",\n-                         \"cds+heap=warning\",\n-                         \"cds+resolve=debug\");\n-    }\n-\n-    \/\/ normal training workflow (main JVM process spawns child process)\n-    private OutputAnalyzer trainingRun() throws Exception {\n-        RunMode runMode = RunMode.TRAINING;\n-        File f = new File(cdsFile);\n-        f.delete();\n-        String[] cmdLine = StringArrayUtils.concat(vmArgs(runMode),\n-                                                   \"-XX:+AOTClassLinking\",\n-                                                   \"-XX:+ArchiveDynamicProxies\",\n-                                                 \/\/\"-XX:+ArchiveReflectionData\",\n-                                                   \"-XX:CacheDataStore=\" + cdsFile,\n-                                                   \"-cp\", classpath(runMode),\n-                                                   \/\/ Use PID to distinguish the logs of the training process\n-                                                   \/\/ and the forked final image dump process.\n-                                                   \"-Xlog:cds::uptime,level,tags,pid\",\n-                                                   trainingLog(cdsFileLog));\n-        cmdLine = StringArrayUtils.concat(cmdLine, appCommandLine(runMode));\n-        OutputAnalyzer out =  executeAndCheck(cmdLine, runMode, cdsFile, cdsFileLog);\n-        listOutputFile(cdsFileLog + \".0\"); \/\/ the preimage dump\n-        return out;\n-    }\n-\n-    \/\/ \"split\" training workflow (launch the two processes manually, for easier debugging);\n-    private OutputAnalyzer trainingRun0() throws Exception {\n-        RunMode runMode = RunMode.TRAINING0;\n-        File f = new File(cdsFile);\n-        f.delete();\n-        String[] cmdLine = StringArrayUtils.concat(vmArgs(runMode),\n-                                                   \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                   \"-XX:+CDSManualFinalImage\",\n-                                                   \"-XX:+AOTClassLinking\",\n-                                                   \"-XX:+ArchiveDynamicProxies\",\n-                                                 \/\/\"-XX:+ArchiveReflectionData\",\n-                                                   \"-XX:CacheDataStore=\" + cdsFile,\n-                                                   \"-cp\", classpath(runMode),\n-                                                   trainingLog(cdsFilePreImageLog));\n-        cmdLine = StringArrayUtils.concat(cmdLine, appCommandLine(runMode));\n-        return executeAndCheck(cmdLine, runMode, cdsFilePreImage, cdsFilePreImageLog);\n-    }\n-    private OutputAnalyzer trainingRun1() throws Exception {\n-        RunMode runMode = RunMode.TRAINING1;\n-        File f = new File(cdsFile);\n-        f.delete();\n-        String[] cmdLine = StringArrayUtils.concat(vmArgs(runMode),\n-                                                   \"-XX:+UnlockDiagnosticVMOptions\",\n-                                                   \"-XX:+AOTClassLinking\",\n-                                                   \"-XX:+ArchiveDynamicProxies\",\n-                                                 \/\/\"-XX:+ArchiveReflectionData\",\n-                                                   \"-XX:CacheDataStore=\" + cdsFile,\n-                                                   \"-XX:CDSPreimage=\" + cdsFilePreImage,\n-                                                   \"-cp\", classpath(runMode),\n-                                                   trainingLog(cdsFileLog));\n-        cmdLine = StringArrayUtils.concat(cmdLine, appCommandLine(runMode));\n-        return executeAndCheck(cmdLine, runMode, cdsFile, cdsFileLog);\n-    }\n-\n@@ -487,2 +415,0 @@\n-        } else {\n-            cmdLine = StringArrayUtils.concat(cmdLine, \"-XX:CacheDataStore=\" + cdsFile);\n@@ -523,4 +449,0 @@\n-            } else if (args[0].equals(\"LEYDEN\")) {\n-                runLeydenWorkflow(false);\n-            } else if (args[0].equals(\"LEYDEN_TRAINONLY\")) {\n-                runLeydenWorkflow(true);\n@@ -546,7 +468,0 @@\n-    \/\/ See JEP 483; stop at the assembly run; do not execute production run\n-    public void runAOTAssemblyWorkflow() throws Exception {\n-        this.workflow = Workflow.AOT;\n-        recordAOTConfiguration();\n-        createAOTCache();\n-    }\n-\n@@ -588,11 +503,5 @@\n-    private void runLeydenWorkflow(boolean trainOnly) throws Exception {\n-        this.workflow = Workflow.LEYDEN;\n-        if (System.getProperty(\"CDSAppTester.split.new.workflow\") != null) {\n-            trainingRun0();\n-            trainingRun1();\n-        } else {\n-            trainingRun();\n-        }\n-        if (!trainOnly) {\n-            productionRun();\n-        }\n+    \/\/ See JEP 483; stop at the assembly run; do not execute production run\n+    public void runAOTAssemblyWorkflow() throws Exception {\n+        this.workflow = Workflow.AOT;\n+        recordAOTConfiguration();\n+        createAOTCache();\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":21,"deletions":112,"binary":false,"changes":133,"status":"modified"}]}