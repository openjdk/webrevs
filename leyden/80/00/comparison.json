{"files":[{"patch":"@@ -384,3 +384,0 @@\n-      if (e->decompile() > 0) {\n-        ss.print(\"+D%d\", e->decompile());\n-      }\n@@ -905,3 +902,0 @@\n-    MethodData* md = method->method_data();\n-    uint decomp = (md == nullptr) ? 0 : md->decompile_count();\n-\n@@ -911,1 +905,1 @@\n-    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Code, hash, comp_level, decomp);\n+    AOTCodeEntry* entry = _cache->find_entry(AOTCodeEntry::Code, hash, comp_level);\n@@ -913,1 +907,1 @@\n-      log_info(aot, codecache, nmethod)(\"Missing entry for '%s' (comp_level %d, decomp: %d, hash: \" UINT32_FORMAT_X_0 \")\", target_name, (uint)comp_level, decomp, hash);\n+      log_info(aot, codecache, nmethod)(\"Missing entry for '%s' (comp_level %d, hash: \" UINT32_FORMAT_X_0 \")\", target_name, (uint)comp_level, hash);\n@@ -944,1 +938,1 @@\n-static bool check_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level, uint decomp, AOTCodeEntry* entry) {\n+static bool check_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level, AOTCodeEntry* entry) {\n@@ -948,2 +942,1 @@\n-                                  (entry->comp_level() == comp_level) &&\n-                                  (entry->ignore_decompile() || entry->decompile() == decomp))) {\n+                                  (entry->comp_level() == comp_level))) {\n@@ -956,1 +949,1 @@\n-AOTCodeEntry* AOTCodeCache::find_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level, uint decomp) {\n+AOTCodeEntry* AOTCodeCache::find_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level) {\n@@ -975,1 +968,1 @@\n-      if (check_entry(kind, id, comp_level, decomp, entry)) {\n+      if (check_entry(kind, id, comp_level, entry)) {\n@@ -978,1 +971,1 @@\n-      \/\/ Leaner search around (could be the same nmethod with different decompile count)\n+      \/\/ Leaner search around\n@@ -987,1 +980,1 @@\n-        if (check_entry(kind, id, comp_level, decomp, entry)) {\n+        if (check_entry(kind, id, comp_level, entry)) {\n@@ -999,1 +992,1 @@\n-        if (check_entry(kind, id, comp_level, decomp, entry)) {\n+        if (check_entry(kind, id, comp_level, entry)) {\n@@ -1003,1 +996,1 @@\n-      break; \/\/ Not found match (different decompile count or not_entrant state).\n+      break; \/\/ No match found\n@@ -1053,1 +1046,0 @@\n-    uint decomp  = entry->decompile();\n@@ -1055,2 +1047,2 @@\n-    log_info(aot, codecache, nmethod)(\"Invalidated entry for '%s' (comp_id %d, comp_level %d, decomp: %d, hash: \" UINT32_FORMAT_X_0 \"%s)\",\n-                           name, comp_id, level, decomp, entry->id(), (clinit_brs ? \", has clinit barriers\" : \"\"));\n+    log_info(aot, codecache, nmethod)(\"Invalidated entry for '%s' (comp_id %d, comp_level %d, hash: \" UINT32_FORMAT_X_0 \"%s)\",\n+                                      name, comp_id, level, entry->id(), (clinit_brs ? \", has clinit barriers\" : \"\"));\n@@ -1134,1 +1126,2 @@\n-        if (_load_entries[i].load_fail()) {\n+        AOTCodeEntry* entry = &(_load_entries[i]);\n+        if (entry->load_fail()) {\n@@ -1137,3 +1130,3 @@\n-        if (_load_entries[i].not_entrant()) {\n-          log_info(aot, codecache, exit)(\"Not entrant load entry id: %d, decomp: %d, hash: \" UINT32_FORMAT_X_0, i, _load_entries[i].decompile(), _load_entries[i].id());\n-          if (_load_entries[i].for_preload()) {\n+        if (entry->not_entrant()) {\n+          log_info(aot, codecache, exit)(\"Not entrant load entry id: %d, hash: \" UINT32_FORMAT_X_0, i, entry->id());\n+          if (entry->for_preload()) {\n@@ -1144,2 +1137,2 @@\n-          _load_entries[i].set_entrant(); \/\/ Reset\n-        } else if (_load_entries[i].for_preload() && _load_entries[i].method() != nullptr) {\n+          entry->set_entrant(); \/\/ Reset\n+        } else if (entry->for_preload() && entry->method() != nullptr) {\n@@ -1150,1 +1143,1 @@\n-          uint size = align_up(_load_entries[i].size(), DATA_ALIGNMENT);\n+          uint size = align_up(entry->size(), DATA_ALIGNMENT);\n@@ -1154,2 +1147,2 @@\n-          copy_bytes((_load_buffer + _load_entries[i].offset()), (address)current, size);\n-          _load_entries[i].set_offset(current - start); \/\/ New offset\n+          copy_bytes((_load_buffer + entry->offset()), (address)current, size);\n+          entry->set_offset(current - start); \/\/ New offset\n@@ -1157,1 +1150,1 @@\n-          uint n = write_bytes(&(_load_entries[i]), sizeof(AOTCodeEntry));\n+          uint n = write_bytes(entry, sizeof(AOTCodeEntry));\n@@ -1162,1 +1155,1 @@\n-          search[entries_count*2 + 0] = _load_entries[i].id();\n+          search[entries_count*2 + 0] = entry->id();\n@@ -1165,1 +1158,1 @@\n-          AOTCodeEntry::Kind kind = _load_entries[i].kind();\n+          AOTCodeEntry::Kind kind = entry->kind();\n@@ -1186,1 +1179,2 @@\n-      if (entries_address[i].load_fail()) {\n+      AOTCodeEntry* entry = &entries_address[i];\n+      if (entry->load_fail()) {\n@@ -1189,3 +1183,4 @@\n-      if (entries_address[i].not_entrant()) {\n-        log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, decomp: %d, hash: \" UINT32_FORMAT_X_0 \"%s\", entries_address[i].comp_id(), entries_address[i].comp_level(), entries_address[i].decompile(), entries_address[i].id(), (entries_address[i].has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n-        if (entries_address[i].for_preload()) {\n+      if (entry->not_entrant()) {\n+        log_info(aot, codecache, exit)(\"Not entrant new entry comp_id: %d, comp_level: %d, hash: \" UINT32_FORMAT_X_0 \"%s\",\n+                                       entry->comp_id(), entry->comp_level(), entry->id(), (entry->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n+        if (entry->for_preload()) {\n@@ -1196,2 +1191,2 @@\n-        entries_address[i].set_entrant(); \/\/ Reset\n-      } else if (entries_address[i].for_preload() && entries_address[i].method() != nullptr) {\n+        entry->set_entrant(); \/\/ Reset\n+      } else if (entry->for_preload() && entry->method() != nullptr) {\n@@ -1202,2 +1197,2 @@\n-        entries_address[i].set_next(nullptr); \/\/ clear pointers before storing data\n-        uint size = align_up(entries_address[i].size(), DATA_ALIGNMENT);\n+        entry->set_next(nullptr); \/\/ clear pointers before storing data\n+        uint size = align_up(entry->size(), DATA_ALIGNMENT);\n@@ -1207,3 +1202,3 @@\n-        copy_bytes((_store_buffer + entries_address[i].offset()), (address)current, size);\n-        entries_address[i].set_offset(current - start); \/\/ New offset\n-        entries_address[i].update_method_for_writing();\n+        copy_bytes((_store_buffer + entry->offset()), (address)current, size);\n+        entry->set_offset(current - start); \/\/ New offset\n+        entry->update_method_for_writing();\n@@ -1211,1 +1206,1 @@\n-        uint n = write_bytes(&(entries_address[i]), sizeof(AOTCodeEntry));\n+        uint n = write_bytes(entry, sizeof(AOTCodeEntry));\n@@ -1216,1 +1211,1 @@\n-        search[entries_count*2 + 0] = entries_address[i].id();\n+        search[entries_count*2 + 0] = entry->id();\n@@ -1219,1 +1214,1 @@\n-        AOTCodeEntry::Kind kind = entries_address[i].kind();\n+        AOTCodeEntry::Kind kind = entry->kind();\n@@ -1655,10 +1650,0 @@\n-  uint decomp = (method->method_data() == nullptr) ? 0 : method->method_data()->decompile_count();\n-\n-  \/\/ Is this one-step workflow assembly phase?\n-  \/\/ In this phase compilation is done based on saved profiling data\n-  \/\/ without application run. Ignore decompilation counters in such case.\n-  \/\/ Also ignore it for C1 code because it is decompiled unconditionally\n-  \/\/ when C2 generated code is published.\n-  bool ignore_decompile = (comp_level == CompLevel_limited_profile) ||\n-                          CDSConfig::is_dumping_final_static_archive();\n-\n@@ -1673,4 +1658,3 @@\n-    log_info(aot, codecache, nmethod)(\"%d (L%d): Writing nmethod '%s' (comp level: %d, decomp: %d%s%s) to AOT Code Cache\",\n-                           comp_id, (int)comp_level, name, comp_level, decomp,\n-                           (ignore_decompile ? \", ignore_decomp\" : \"\"),\n-                           (nm->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n+    log_info(aot, codecache, nmethod)(\"%d (L%d): Writing nmethod '%s' (comp level: %d, %s) to AOT Code Cache\",\n+                                      comp_id, (int)comp_level, name, comp_level,\n+                                      (nm->has_clinit_barriers() ? \", has clinit barriers\" : \"\"));\n@@ -1786,2 +1770,2 @@\n-                                                nm->content_begin(), comp_level, comp_id, decomp,\n-                                                nm->has_clinit_barriers(), for_preload, ignore_decompile);\n+                                                nm->content_begin(), comp_level, comp_id,\n+                                                nm->has_clinit_barriers(), for_preload);\n@@ -1825,1 +1809,0 @@\n-    uint decomp = (target->method_data() == nullptr) ? 0 : target->method_data()->decompile_count();\n@@ -1832,4 +1815,3 @@\n-    log_info(aot, codecache, nmethod)(\"%d (L%d): %s nmethod '%s' (decomp: %d, hash: \" UINT32_FORMAT_X_0 \"%s%s)\",\n-                           task->compile_id(), task->comp_level(), (preload ? \"Preloading\" : \"Reading\"),\n-                           target_name, decomp, hash, (clinit_brs ? \", has clinit barriers\" : \"\"),\n-                           (entry->ignore_decompile() ? \", ignore_decomp\" : \"\"));\n+    log_info(aot, codecache, nmethod)(\"%d (L%d): %s nmethod '%s' (hash: \" UINT32_FORMAT_X_0 \"%s)\",\n+                                      task->compile_id(), task->comp_level(), (preload ? \"Preloading\" : \"Reading\"),\n+                                      target_name, hash, (clinit_brs ? \", has clinit barriers\" : \"\"));\n@@ -4070,2 +4052,2 @@\n-  st->print_cr(\" AOT Code Cache entry \" INTPTR_FORMAT \" [kind: %d, id: \" UINT32_FORMAT_X_0 \", offset: %d, size: %d, comp_level: %d, comp_id: %d, decompiled: %d, %s%s%s%s%s]\",\n-               p2i(this), (int)_kind, _id, _offset, _size, _comp_level, _comp_id, _decompile,\n+  st->print_cr(\" AOT Code Cache entry \" INTPTR_FORMAT \" [kind: %d, id: \" UINT32_FORMAT_X_0 \", offset: %d, size: %d, comp_level: %d, comp_id: %d, %s%s%s%s]\",\n+               p2i(this), (int)_kind, _id, _offset, _size, _comp_level, _comp_id,\n@@ -4075,2 +4057,1 @@\n-               (_for_preload ? \", for_preload\" : \"\"),\n-               (_ignore_decompile ? \", ignore_decomp\" : \"\"));\n+               (_for_preload ? \", for_preload\" : \"\"));\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":52,"deletions":71,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -111,1 +111,0 @@\n-  uint   _decompile;   \/\/ Decompile count for this nmethod\n@@ -118,2 +117,0 @@\n-  bool   _ignore_decompile; \/\/ ignore decompile counter if compilation is done\n-                            \/\/ during \"assembly\" phase without running application\n@@ -143,1 +140,0 @@\n-    _decompile    = 0;\n@@ -150,1 +146,0 @@\n-    _ignore_decompile = true;\n@@ -159,1 +154,1 @@\n-               uint comp_id = 0, uint decomp = 0,\n+               uint comp_id = 0,\n@@ -161,2 +156,1 @@\n-               bool for_preload = false,\n-               bool ignore_decompile = false) {\n+               bool for_preload = false) {\n@@ -179,1 +173,0 @@\n-    _decompile    = decomp;\n@@ -190,1 +183,0 @@\n-    _ignore_decompile = ignore_decompile;\n@@ -225,1 +217,0 @@\n-  uint decompile()    const { return _decompile; }\n@@ -230,1 +221,0 @@\n-  bool ignore_decompile() const { return _ignore_decompile; }\n@@ -540,1 +530,1 @@\n-  AOTCodeEntry* find_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level = 0, uint decomp = 0);\n+  AOTCodeEntry* find_entry(AOTCodeEntry::Kind kind, uint id, uint comp_level = 0);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"}]}