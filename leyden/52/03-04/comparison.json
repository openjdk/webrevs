{"files":[{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.management.internal;\n+\n+import javax.management.ObjectName;\n+import jdk.management.AOTCacheMXBean;\n+import sun.management.Util;\n+import sun.management.VMManagement;\n+\n+\/**\n+  * Implementation class for the AOT Cache subsystem.\n+  *\n+  * ManagementFactory.getRuntimeMXBean() returns an instance\n+  * of this class.\n+  *\/\n+public class AOTCacheImpl implements AOTCacheMXBean {\n+\n+    private final VMManagement jvm;\n+    \/**\n+      * Constructor of AOTCacheImpl class.\n+      *\/\n+      AOTCacheImpl(VMManagement vm) {\n+         this.jvm = vm;\n+     }\n+\n+     public String getMode() {\n+         return jvm.getAOTMode();\n+     }\n+\n+     public boolean isRecording() {\n+         return jvm.isAOTRecording();\n+     }\n+\n+     public long getRecordingDuration(){\n+         return jvm.getAOTRecordingDuration();\n+     }\n+\n+     public boolean endRecording(){\n+         return jvm.endAOTRecording();\n+     }\n+\n+     public ObjectName getObjectName() {\n+         return Util.newObjectName(\"jdk.management:type=AOTCache\");\n+     }\n+}\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/AOTCacheImpl.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.management.internal;\n-\n-import javax.management.ObjectName;\n-import jdk.management.AOTMXBean;\n-import sun.management.Util;\n-import sun.management.VMManagement;\n-\n-\/**\n-  * Implementation class for the AOT subsystem.\n-  *\n-  * ManagementFactory.getRuntimeMXBean() returns an instance\n-  * of this class.\n-  *\/\n-public class AOTImpl implements AOTMXBean {\n-\n-    private final VMManagement jvm;\n-    \/**\n-      * Constructor of AOTImpl class.\n-      *\/\n-     AOTImpl(VMManagement vm) {\n-         this.jvm = vm;\n-     }\n-\n-     public String getMode() {\n-         return jvm.getAOTMode();\n-     }\n-\n-     public boolean isRecording() {\n-         return jvm.isAOTRecording();\n-     }\n-\n-     public long getRecordingDuration(){\n-         return jvm.getAOTRecordingDuration();\n-     }\n-\n-     public boolean endRecording(){\n-         return jvm.endAOTRecording();\n-     }\n-\n-     public ObjectName getObjectName() {\n-         return Util.newObjectName(\"jdk.management:type=AOT\");\n-     }\n-}\n-\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/AOTImpl.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -42,1 +42,1 @@\n-import jdk.management.AOTMXBean;\n+import jdk.management.AOTCacheMXBean;\n@@ -164,1 +164,1 @@\n-        * AOTMXBean.\n+        * AOTCacheMXBean.\n@@ -166,3 +166,3 @@\n-        initMBeanList.add(new PlatformComponent<AOTMXBean>() {\n-            private final Set<Class<? extends AOTMXBean>> mbeanInterfaces =\n-                    Set.of(AOTMXBean.class);\n+        initMBeanList.add(new PlatformComponent<AOTCacheMXBean>() {\n+            private final Set<Class<? extends AOTCacheMXBean>> mbeanInterfaces =\n+                    Set.of(AOTCacheMXBean.class);\n@@ -170,2 +170,2 @@\n-                    Set.of(AOTMXBean.class.getName());\n-            private AOTMXBean impl;\n+                    Set.of(AOTCacheMXBean.class.getName());\n+            private AOTCacheMXBean impl;\n@@ -174,1 +174,1 @@\n-            public Set<Class<? extends AOTMXBean>> mbeanInterfaces() {\n+            public Set<Class<? extends AOTCacheMXBean>> mbeanInterfaces() {\n@@ -185,1 +185,1 @@\n-                return \"jdk.management:type=AOT\";\n+                return \"jdk.management:type=AOTCache\";\n@@ -189,2 +189,2 @@\n-            public Map<String, AOTMXBean> nameToMBeanMap() {\n-                AOTMXBean impl = this.impl;\n+            public Map<String, AOTCacheMXBean> nameToMBeanMap() {\n+                AOTCacheMXBean impl = this.impl;\n@@ -192,1 +192,1 @@\n-                    this.impl = impl = new AOTImpl(ManagementFactoryHelper.getVMManagement());\n+                    this.impl = impl = new AOTCacheImpl(ManagementFactoryHelper.getVMManagement());\n@@ -194,1 +194,1 @@\n-                return Map.of(\"jdk.management:type=AOT\", impl);\n+                return Map.of(\"jdk.management:type=AOTCache\", impl);\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.management;\n+\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.PlatformManagedObject;\n+import java.util.concurrent.ForkJoinPool;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+\/**\n+ * Management interface for the JDK's AOT system.\n+ *\n+ * <p> {@code AOTCacheMXBean} supports inspection of the current AOT mode, as well as monitoring\n+ * the current recording length. It also supports dynamically ending the current recording.\n+ *\n+ * <p> The management interface is registered with the platform {@link MBeanServer\n+ * MBeanServer}. The {@link ObjectName ObjectName} that uniquely identifies the management\n+ * interface within the {@code MBeanServer} is: \"jdk.management:type=AOTCache\".\n+ *\n+ * <p> Direct access to the MXBean interface can be obtained with\n+ * {@link ManagementFactory#getPlatformMXBean(Class)}.\n+ *\n+ * @since 25\n+ *\/\n+public interface AOTCacheMXBean extends PlatformManagedObject {\n+     \/**\n+      * Returns the string representing the current AOT mode of\n+      * operation.\n+      *\n+      * @return the string representing the current AOT mode.\n+      *\/\n+      public String getMode();\n+\n+      \/**\n+       * Tests if a recording is in progress.\n+       *\n+       * @return {@code true} if a recording is in progress; {@code false} otherwise.\n+       *\/\n+      public boolean isRecording();\n+\n+      \/**\n+       * If a recording is in progress or has been completed, then returns the duration in milliseconds\n+       *\n+       * @return duration of the recording in milliseconds.\n+       *\/\n+      public long getRecordingDuration();\n+\n+      \/**\n+       * If a recording is in progress, then ends the recording.\n+       *\n+       * @return {@code true} if a recording was stopped; {@code false} otherwise.\n+       *\/\n+      public boolean endRecording();\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/AOTCacheMXBean.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.management;\n-\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.PlatformManagedObject;\n-import java.util.concurrent.ForkJoinPool;\n-import javax.management.MBeanServer;\n-import javax.management.ObjectName;\n-\n-\/**\n- * Management interface for the JDK's AOT system.\n- *\n- * <p> {@code AOTMXBean} supports inspection of the current AOT mode, as well as monitoring\n- * the current recording length. It also supports dynamically ending the current recording.\n- *\n- * <p> The management interface is registered with the platform {@link MBeanServer\n- * MBeanServer}. The {@link ObjectName ObjectName} that uniquely identifies the management\n- * interface within the {@code MBeanServer} is: \"jdk.management:type=AOT\".\n- *\n- * <p> Direct access to the MXBean interface can be obtained with\n- * {@link ManagementFactory#getPlatformMXBean(Class)}.\n- *\n- * @since 24\n- *\/\n-public interface AOTMXBean extends PlatformManagedObject {\n-     \/**\n-      * Returns the string representing the current AOT mode of\n-      * operation.\n-      *\n-      * @return the string representing the current AOT mode.\n-      *\/\n-      public String getMode();\n-\n-      \/**\n-       * Tests if a recording is in progress.\n-       *\n-       * @return {@code true} if a recording is in progress; {@code false} otherwise.\n-       *\/\n-      public boolean isRecording();\n-\n-      \/**\n-       * If a recording is in progress or has been completed, then returns the duration in milliseconds\n-       *\n-       * @return duration of the recording in milliseconds.\n-       *\/\n-      public long getRecordingDuration();\n-\n-      \/**\n-       * If a recording is in progress, then stops the recording.\n-       *\n-       * @return {@code true} if a recording was stopped; {@code false} otherwise.\n-       *\/\n-      public boolean endRecording();\n-}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/AOTMXBean.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -32,1 +32,1 @@\n- * @build EndTrainingWithAOTMXBean\n+ * @build EndTrainingWithAOTCacheMXBean\n@@ -34,1 +34,1 @@\n- * @run driver EndTrainingWithAOTMXBean AOT\n+ * @run driver EndTrainingWithAOTCacheMXBean AOT\n@@ -44,1 +44,1 @@\n- * @build EndTrainingWithAOTMXBean\n+ * @build EndTrainingWithAOTCacheMXBean\n@@ -46,1 +46,1 @@\n- * @run driver EndTrainingWithAOTMXBean LEYDEN\n+ * @run driver EndTrainingWithAOTCacheMXBean LEYDEN\n@@ -53,1 +53,1 @@\n-import jdk.management.AOTMXBean;\n+import jdk.management.AOTCacheMXBean;\n@@ -55,1 +55,1 @@\n-public class EndTrainingWithAOTMXBean {\n+public class EndTrainingWithAOTCacheMXBean {\n@@ -133,1 +133,1 @@\n-        var aotBean = ManagementFactory.getPlatformMXBean(AOTMXBean.class);\n+        var aotBean = ManagementFactory.getPlatformMXBean(AOTCacheMXBean.class);\n@@ -135,1 +135,1 @@\n-            System.out.println(\"AOTMXBean is not available\");\n+            System.out.println(\"AOTCacheMXBean is not available\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/EndTrainingWithAOTCacheMXBean.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/EndTrainingWithAOTMXBean.java","status":"renamed"}]}