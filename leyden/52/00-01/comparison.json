{"files":[{"patch":"@@ -993,0 +993,1 @@\n+    _preimage_static_archive_recording_duration = os::javaTimeMillis();\n@@ -995,3 +996,0 @@\n-  \/\/ recording length\n-  _preimage_static_archive_recording_duration = os::javaTimeMillis();\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- package java.lang.management;\n- import java.io.IOException;\n- import java.util.List;\n-\n- \/**\n-  * The management interface for the AOT system.\n-  *\n-  * <p> A Java virtual machine has a single instance of the implementation\n-  * class of this interface.  This instance implementing this interface is\n-  * an <a href=\"ManagementFactory.html#MXBean\">MXBean<\/a>\n-  * that can be obtained by calling\n-  * the {@link ManagementFactory#getAOTMXBean} method or\n-  * from the {@link ManagementFactory#getPlatformMBeanServer\n-  * platform MBeanServer} method.\n-  *\n-  * <p>The {@code ObjectName} for uniquely identifying the MXBean for\n-  * the runtime system within an MBeanServer is:\n-  * <blockquote>\n-  *    {@link ManagementFactory#RUNTIME_MXBEAN_NAME\n-  *           java.lang:type=AOT}\n-  * <\/blockquote>\n-  *\n-  * It can be obtained by calling the\n-  * {@link PlatformManagedObject#getObjectName} method.\n-  *\n-  * <p> This interface defines several convenient methods for accessing\n-  * system properties about the Java virtual machine.\n-  *\n-  * @see ManagementFactory#getPlatformMXBeans(Class)\n-  * @see <a href=\"..\/..\/..\/javax\/management\/package-summary.html\">\n-  *      JMX Specification.<\/a>\n-  * @see <a href=\"package-summary.html#examples\">\n-  *      Ways to Access MXBeans<\/a>\n-  *\n-  * @author  Mandy Chung\n-  * @since   1.5\n-  *\/\n- public interface AOTMXBean extends PlatformManagedObject {\n-\n-     \/**\n-      * Returns the string representing the current AOT mode of\n-      * operation.\n-      *\n-      * @return the string representing the current AOT mode.\n-      *\/\n-     public String getMode();\n-\n-     \/**\n-      * Tests if a recording is in progress.\n-      *\n-      * @return {@code true} if a recording is in progress; {@code false} otherwise.\n-      *\/\n-     public boolean isRecording();\n-\n-     \/**\n-      * If a recording is in progress or has been completed, then returns the duration in milliseconds\n-      *\n-      * @return duration of the recording in milliseconds.\n-      *\/\n-     public long getRecordingDuration();\n-\n-     \/**\n-      * If a recording is in progress, then stops the recording.\n-      *\n-      * @return {@code true} if a recording was stopped; {@code false} otherwise.\n-      *\/\n-     public boolean endRecording();\n- }\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/AOTMXBean.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -54,30 +54,0 @@\n-        \/**\n-        * AOT system of the Java virtual machine.\n-        *\/\n-        initMBeanList.add(new PlatformComponent<AOTMXBean>() {\n-            private final Set<String> aotInterfaceNames =\n-                    Collections.singleton(\"java.lang.management.AOTMXBean\");\n-\n-            @Override\n-            public Set<Class<? extends AOTMXBean>> mbeanInterfaces() {\n-                return Collections.singleton(AOTMXBean.class);\n-            }\n-\n-            @Override\n-            public Set<String> mbeanInterfaceNames() {\n-                return aotInterfaceNames;\n-            }\n-\n-            @Override\n-            public String getObjectNamePattern() {\n-                return ManagementFactory.AOT_MXBEAN_NAME;\n-            }\n-\n-            @Override\n-            public Map<String, AOTMXBean> nameToMBeanMap() {\n-                return Collections.singletonMap(\n-                        ManagementFactory.AOT_MXBEAN_NAME,\n-                        ManagementFactoryHelper.getAOTMXBean());\n-            }\n-        });\n-\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/DefaultPlatformMBeanProvider.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -249,7 +249,0 @@\n-    \/**\n-     * String representation of the\n-     * {@code ObjectName} for the {@link AOTMXBean}.\n-     *\/\n-    public static final String AOT_MXBEAN_NAME =\n-        \"java.lang:type=AOT\";\n-\n@@ -328,11 +321,0 @@\n-    \/**\n-     * Returns the managed bean for the AOTsystem of\n-     * the Java virtual machine.\n-     *\n-     * @return a {@link AOTMXBean} object for\n-     * the Java virtual machine.\n-     *\/\n-    public static AOTMXBean getAOTMXBean() {\n-        return getPlatformMXBean(AOTMXBean.class);\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/java\/lang\/management\/ManagementFactory.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n- package sun.management;\n-\n- import java.io.IOException;\n- import java.lang.management.AOTMXBean;\n- import java.lang.management.ManagementFactory;\n-\n- import java.util.List;\n- import java.util.HashMap;\n- import java.util.Map;\n- import java.util.Set;\n- import java.util.Properties;\n- import javax.management.ObjectName;\n-\n- \/**\n-  * Implementation class for the AOT subsystem.\n-  * Standard and committed hotspot-specific metrics if any.\n-  *\n-  * ManagementFactory.getRuntimeMXBean() returns an instance\n-  * of this class.\n-  *\/\n- class AOTImpl implements AOTMXBean {\n-\n-     private final VMManagement jvm;\n-\n-     \/**\n-      * Constructor of AOTImpl class.\n-      *\/\n-     AOTImpl(VMManagement vm) {\n-         this.jvm = vm;\n-     }\n-\n-     public String getMode() {\n-         return jvm.getAOTMode();\n-     }\n-\n-     public boolean isRecording() {\n-         return jvm.isAOTRecording();\n-     }\n-\n-     public long getRecordingDuration(){\n-         return jvm.getAOTRecordingDuration();\n-     }\n-\n-     public boolean endRecording(){\n-         return jvm.endAOTRecording();\n-     }\n-\n-     public ObjectName getObjectName() {\n-         return Util.newObjectName(ManagementFactory.AOT_MXBEAN_NAME);\n-     }\n- }\n","filename":"src\/java.management\/share\/classes\/sun\/management\/AOTImpl.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -76,1 +76,0 @@\n-    private static AOTImpl             aotMBean = null;\n@@ -84,7 +83,0 @@\n-    public static synchronized AOTMXBean getAOTMXBean() {\n-        if (aotMBean == null) {\n-            aotMBean = new AOTImpl(jvm);\n-        }\n-        return aotMBean;\n-    }\n-\n","filename":"src\/java.management\/share\/classes\/sun\/management\/ManagementFactoryHelper.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.management.internal;\n+\n+import javax.management.ObjectName;\n+import jdk.management.AOTMXBean;\n+import sun.management.Util;\n+import sun.management.VMManagement;\n+\n+\/**\n+  * Implementation class for the AOT subsystem.\n+  *\n+  * ManagementFactory.getRuntimeMXBean() returns an instance\n+  * of this class.\n+  *\/\n+public class AOTImpl implements AOTMXBean {\n+\n+    private final VMManagement jvm;\n+    \/**\n+      * Constructor of AOTImpl class.\n+      *\/\n+     AOTImpl(VMManagement vm) {\n+         this.jvm = vm;\n+     }\n+\n+     public String getMode() {\n+         return jvm.getAOTMode();\n+     }\n+\n+     public boolean isRecording() {\n+         return jvm.isAOTRecording();\n+     }\n+\n+     public long getRecordingDuration(){\n+         return jvm.getAOTRecordingDuration();\n+     }\n+\n+     public boolean endRecording(){\n+         return jvm.endAOTRecording();\n+     }\n+\n+     public ObjectName getObjectName() {\n+         return Util.newObjectName(\"jdk.management:type=AOT\");\n+     }\n+}\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/AOTImpl.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.management.AOTMXBean;\n@@ -162,0 +163,35 @@\n+        \/**\n+        * AOTMXBean.\n+        *\/\n+        initMBeanList.add(new PlatformComponent<AOTMXBean>() {\n+            private final Set<Class<? extends AOTMXBean>> mbeanInterfaces =\n+                    Set.of(AOTMXBean.class);\n+            private final Set<String> mbeanInterfaceNames =\n+                    Set.of(AOTMXBean.class.getName());\n+            private AOTMXBean impl;\n+\n+            @Override\n+            public Set<Class<? extends AOTMXBean>> mbeanInterfaces() {\n+                return mbeanInterfaces;\n+            }\n+\n+            @Override\n+            public Set<String> mbeanInterfaceNames() {\n+                return mbeanInterfaceNames;\n+            }\n+\n+            @Override\n+            public String getObjectNamePattern() {\n+                return \"jdk.management:type=AOT\";\n+            }\n+\n+            @Override\n+            public Map<String, AOTMXBean> nameToMBeanMap() {\n+                AOTMXBean impl = this.impl;\n+                if (impl == null) {\n+                    this.impl = impl = new AOTImpl(ManagementFactoryHelper.getVMManagement());\n+                }\n+                return Map.of(\"jdk.management:type=AOT\", impl);\n+            }\n+        });\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/PlatformMBeanProviderImpl.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.management;\n+\n+import jdk.management.ManagementFactory;\n+import jdk.management.PlatformManagedObject;\n+import java.util.concurrent.ForkJoinPool;\n+import javax.management.MBeanServer;\n+import javax.management.ObjectName;\n+\n+\/**\n+ * Management interface for the JDK's AOT system.\n+ *\n+ * <p> {@code AOTMXBean} supports inspection of the current AOT mode, as well as monitoring\n+ * the current recording length. It also supports dynamically ending the current recording.\n+ *\n+ * <p> The management interface is registered with the platform {@link MBeanServer\n+ * MBeanServer}. The {@link ObjectName ObjectName} that uniquely identifies the management\n+ * interface within the {@code MBeanServer} is: \"jdk.management:type=AOT\".\n+ *\n+ * <p> Direct access to the MXBean interface can be obtained with\n+ * {@link ManagementFactory#getPlatformMXBean(Class)}.\n+ *\n+ * @since 24\n+ *\/\n+public interface AOTMXBean extends PlatformManagedObject {\n+     \/**\n+      * Returns the string representing the current AOT mode of\n+      * operation.\n+      *\n+      * @return the string representing the current AOT mode.\n+      *\/\n+      public String getMode();\n+\n+      \/**\n+       * Tests if a recording is in progress.\n+       *\n+       * @return {@code true} if a recording is in progress; {@code false} otherwise.\n+       *\/\n+      public boolean isRecording();\n+\n+      \/**\n+       * If a recording is in progress or has been completed, then returns the duration in milliseconds\n+       *\n+       * @return duration of the recording in milliseconds.\n+       *\/\n+      public long getRecordingDuration();\n+\n+      \/**\n+       * If a recording is in progress, then stops the recording.\n+       *\n+       * @return {@code true} if a recording was stopped; {@code false} otherwise.\n+       *\/\n+      public boolean endRecording();\n+}\n\\ No newline at end of file\n","filename":"src\/jdk.management\/share\/classes\/jdk\/management\/AOTMXBean.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -53,1 +53,1 @@\n-import java.lang.management.AOTMXBean;\n+import jdk.management.AOTMXBean;\n@@ -77,1 +77,2 @@\n-                \"-Xlog:cds+class=debug\"\n+                \"-Xlog:cds+class=debug\",\n+                \"--add-modules=java.management\"\n@@ -132,1 +133,1 @@\n-        var aotBean = ManagementFactory.getAOTMXBean();\n+        var aotBean = ManagementFactory.getPlatformMXBean(AOTMXBean.class);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/EndTrainingWithAOTMXBean.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}