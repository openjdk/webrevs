{"files":[{"patch":"@@ -235,1 +235,2 @@\n-### Only G1GC, SerialGC, ParallelGC, EpsilonGC are Supported\n+### Only G1GC, SerialGC, ParallelGC, EpsilonGC, ShenandoahGC are Supported\n+=======\n@@ -244,1 +245,1 @@\n-must be G1, Parallel, Serial, or Epsilon\n+must be G1, Parallel, Serial, Epsilon, or Shenandoah\n","filename":"README.md","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -119,2 +119,1 @@\n-  \/\/ (TODO: Perhaps change to 256K to be compatible with Shenandoah)\n-  static constexpr int MIN_GC_REGION_ALIGNMENT = 1 * M;\n+  static constexpr int MIN_GC_REGION_ALIGNMENT = 256 * K;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  \/\/ Can this VM write a heap region into the CDS archive? Currently only {G1|Parallel|Serial}+compressed_cp\n+  \/\/ Can this VM write a heap region into the CDS archive? Currently only {G1|Parallel|Serial|Epsilon|Shenandoah}+compressed_cp\n@@ -153,1 +153,1 @@\n-      return (UseG1GC || UseParallelGC || UseSerialGC || UseEpsilonGC) && UseCompressedClassPointers;\n+      return (UseG1GC || UseParallelGC || UseSerialGC || UseEpsilonGC || UseShenandoahGC) && UseCompressedClassPointers;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-    if (!((UseG1GC || UseParallelGC || UseSerialGC || UseEpsilonGC) && UseCompressedClassPointers)) {\n+    if (!((UseG1GC || UseParallelGC || UseSerialGC || UseEpsilonGC || UseShenandoahGC) && UseCompressedClassPointers)) {\n@@ -278,1 +278,1 @@\n-                                    \"UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, or Epsilon\");\n+                                    \"UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, Epsilon, or Shenandoah\");\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,0 +78,3 @@\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp\"\n+#endif\n@@ -86,0 +89,3 @@\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/shenandoahRuntime.hpp\"\n+#endif\n@@ -3519,3 +3525,3 @@\n-#define _blobs_max 80\n-#define _shared_blobs_max 15\n-#define _C2_blobs_max 22\n+#define _blobs_max 100\n+#define _shared_blobs_max 24\n+#define _C2_blobs_max 25\n@@ -3523,1 +3529,1 @@\n-#define _all_max 280\n+#define _all_max 300\n@@ -3565,0 +3571,13 @@\n+#if INCLUDE_SHENANDOAHGC\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::arraycopy_barrier_oop_entry);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::arraycopy_barrier_narrow_oop_entry);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::write_ref_field_pre_entry);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::shenandoah_clone_barrier);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_strong);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_strong_narrow);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_weak);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_weak_narrow);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_phantom);\n+  SET_ADDRESS(_extrs, ShenandoahRuntime::load_reference_barrier_phantom_narrow);\n+#endif\n+\n@@ -3896,0 +3915,10 @@\n+#if INCLUDE_SHENANDOAHGC\n+  if (UseShenandoahGC) {\n+    ShenandoahBarrierSetC1* bs = (ShenandoahBarrierSetC1*)BarrierSet::barrier_set()->barrier_set_c1();\n+    SET_ADDRESS(_C1_blobs, bs->pre_barrier_c1_runtime_code_blob()->code_begin());\n+    SET_ADDRESS(_C1_blobs, bs->load_reference_barrier_strong_rt_code_blob()->code_begin());\n+    SET_ADDRESS(_C1_blobs, bs->load_reference_barrier_strong_native_rt_code_blob()->code_begin());\n+    SET_ADDRESS(_C1_blobs, bs->load_reference_barrier_weak_rt_code_blob()->code_begin());\n+    SET_ADDRESS(_C1_blobs, bs->load_reference_barrier_phantom_rt_code_blob()->code_begin());\n+  }\n+#endif \/\/ INCLUDE_SHENANDOAHGC\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -192,0 +192,2 @@\n+class SCAddressTable;\n+\n@@ -193,0 +195,1 @@\n+  friend class SCAddressTable;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    static final String ERROR_GC_SUPPORTED = \"Cannot create the CacheDataStore: UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, or Epsilon\";\n+    static final String ERROR_GC_SUPPORTED = \"Cannot create the CacheDataStore: UseCompressedClassPointers must be enabled, and collector must be G1, Parallel, Serial, Epsilon, or Shenandoah\";\n@@ -61,2 +61,2 @@\n-        \/\/ Serial and Parallel collector are allowed to be used, as long as the same one is used\n-        \/\/ between training and production\n+        \/\/ Serial, Parallel and Shenandoah collectors are allowed to be used,\n+        \/\/ as long as the same one is used between training and production\n@@ -65,0 +65,1 @@\n+        good(\"-XX:+UseShenandoahGC\", \"-XX:+UseShenandoahGC\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/leyden\/LeydenGCFlags.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}