{"files":[{"patch":"@@ -1117,1 +1117,1 @@\n-void ciEnv::register_aot_method(JavaThread* thread,\n+nmethod* ciEnv::register_aot_method(JavaThread* thread,\n@@ -1150,1 +1150,1 @@\n-      return;\n+      return nullptr;\n@@ -1180,0 +1180,1 @@\n+  return nm;\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -375,12 +375,12 @@\n-  void register_aot_method(JavaThread* thread,\n-                           ciMethod* target,\n-                           AbstractCompiler* compiler,\n-                           nmethod* archived_nm,\n-                           address reloc_data,\n-                           GrowableArray<Handle>& oop_list,\n-                           GrowableArray<Metadata*>& metadata_list,\n-                           ImmutableOopMapSet* oopmaps,\n-                           address immutable_data,\n-                           GrowableArray<Handle>& reloc_imm_oop_list,\n-                           GrowableArray<Metadata*>& reloc_imm_metadata_list,\n-                           AOTCodeReader* aot_code_reader);\n+  nmethod* register_aot_method(JavaThread* thread,\n+                               ciMethod* target,\n+                               AbstractCompiler* compiler,\n+                               nmethod* archived_nm,\n+                               address reloc_data,\n+                               GrowableArray<Handle>& oop_list,\n+                               GrowableArray<Metadata*>& metadata_list,\n+                               ImmutableOopMapSet* oopmaps,\n+                               address immutable_data,\n+                               GrowableArray<Handle>& reloc_imm_oop_list,\n+                               GrowableArray<Metadata*>& reloc_imm_metadata_list,\n+                               AOTCodeReader* aot_code_reader);\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1418,1 +1418,1 @@\n-  if (!cache->write_asm_remarks(blob)) {\n+  if (!cache->write_asm_remarks(blob.asm_remarks(), \/* use_string_table *\/ true)) {\n@@ -1421,1 +1421,1 @@\n-  if (!cache->write_dbg_strings(blob)) {\n+  if (!cache->write_dbg_strings(blob.dbg_strings(), \/* use_string_table *\/ true)) {\n@@ -1517,1 +1517,1 @@\n-  read_asm_remarks(code_blob->asm_remarks());\n+  read_asm_remarks(code_blob->asm_remarks(), \/* use_string_table *\/ true);\n@@ -1519,1 +1519,1 @@\n-  read_dbg_strings(code_blob->dbg_strings());\n+  read_dbg_strings(code_blob->dbg_strings(), \/* use_string_table *\/ true);\n@@ -1822,3 +1822,1 @@\n-  \/\/ Write asm remarks\n-  uint* count_ptr = (uint *)reserve_bytes(sizeof(uint));\n-  if (count_ptr == nullptr) {\n+  if (!cache->write_asm_remarks(nm->asm_remarks(), \/* use_string_table *\/ false)) {\n@@ -1827,15 +1825,1 @@\n-  uint count = 0;\n-  bool result = nm->asm_remarks().iterate([&] (uint offset, const char* str) -> bool {\n-    log_info(aot, codecache, nmethod)(\"asm remark offset=%d, str=%s\", offset, str);\n-    n = write_bytes(&offset, sizeof(uint));\n-    if (n != sizeof(uint)) {\n-      return false;\n-    }\n-    n = write_bytes(str, (uint)strlen(str) + 1);\n-    if (n != strlen(str) + 1) {\n-      return false;\n-    }\n-    count += 1;\n-    return true;\n-  });\n-  if (!result) {\n+  if (!cache->write_dbg_strings(nm->dbg_strings(), \/* use_string_table *\/ false)) {\n@@ -1844,21 +1828,0 @@\n-  *count_ptr = count;\n-\n-  \/\/ Write dbg strings\n-  count_ptr = (uint *)reserve_bytes(sizeof(uint));\n-  if (count_ptr == nullptr) {\n-    return nullptr;\n-  }\n-  count = 0;\n-  result = nm->dbg_strings().iterate([&] (const char* str) -> bool {\n-    log_info(aot, codecache, nmethod)(\"dbg string[\" INTPTR_FORMAT \"]=%s\", p2i(str), str);\n-    n = write_bytes(str, (uint)strlen(str) + 1);\n-    if (n != strlen(str) + 1) {\n-      return false;\n-    }\n-    count += 1;\n-    return true;\n-  });\n-  if (!result) {\n-    return nullptr;\n-  }\n-  *count_ptr = count;\n@@ -1994,12 +1957,12 @@\n-  env->register_aot_method(THREAD,\n-                           target,\n-                           compiler,\n-                           archived_nm,\n-                           reloc_data,\n-                           oop_list,\n-                           metadata_list,\n-                           oopmaps,\n-                           immutable_data,\n-                           reloc_immediate_oop_list,\n-                           reloc_immediate_metadata_list,\n-                           this);\n+  nm = env->register_aot_method(THREAD,\n+                                target,\n+                                compiler,\n+                                archived_nm,\n+                                reloc_data,\n+                                oop_list,\n+                                metadata_list,\n+                                oopmaps,\n+                                immutable_data,\n+                                reloc_immediate_oop_list,\n+                                reloc_immediate_metadata_list,\n+                                this);\n@@ -2008,28 +1971,0 @@\n-    nmethod* nm = task->preload() ? target->get_Method()->preload_code() : target->get_Method()->code();\n-#ifndef PRODUCT\n-    \/\/ Read asm remarks\n-    nm->asm_remarks().init();\n-    offset = read_position();\n-    uint count = *(uint *)addr(offset);\n-    offset += sizeof(uint);\n-    for (uint i = 0; i < count; i++) {\n-      uint remark_offset = *(uint *)addr(offset);\n-      offset += sizeof(uint);\n-      const char* remark = (const char*)addr(offset);\n-      offset += (uint)strlen(remark)+1;\n-      nm->asm_remarks().insert(remark_offset, remark);\n-    }\n-    set_read_position(offset);\n-\n-    \/\/ Read dbg strings\n-    nm->dbg_strings().init();\n-    count = *(uint *)addr(offset);\n-    offset += sizeof(uint);\n-    for (uint i = 0; i < count; i++) {\n-      const char* str = (const char*)addr(offset);\n-      offset += (uint)strlen(str)+1;\n-      nm->dbg_strings().insert(str);\n-    }\n-    set_read_position(offset);\n-#endif \/* PRODUCT *\/\n-\n@@ -2041,1 +1976,0 @@\n-      nmethod* nm = target->get_Method()->code();\n@@ -3203,1 +3137,1 @@\n-bool AOTCodeCache::write_asm_remarks(CodeBlob& cb) {\n+bool AOTCodeCache::write_asm_remarks(AsmRemarks& asm_remarks, bool use_string_table) {\n@@ -3210,1 +3144,1 @@\n-  bool result = cb.asm_remarks().iterate([&] (uint offset, const char* str) -> bool {\n+  bool result = asm_remarks.iterate([&] (uint offset, const char* str) -> bool {\n@@ -3216,6 +3150,13 @@\n-    const char* cstr = add_C_string(str);\n-    int id = _table->id_for_C_string((address)cstr);\n-    assert(id != -1, \"asm remark string '%s' not found in AOTCodeAddressTable\", str);\n-    n = write_bytes(&id, sizeof(int));\n-    if (n != sizeof(int)) {\n-      return false;\n+    if (use_string_table) {\n+      const char* cstr = add_C_string(str);\n+      int id = _table->id_for_C_string((address)cstr);\n+      assert(id != -1, \"asm remark string '%s' not found in AOTCodeAddressTable\", str);\n+      n = write_bytes(&id, sizeof(int));\n+      if (n != sizeof(int)) {\n+        return false;\n+      }\n+    } else {\n+      n = write_bytes(str, (uint)strlen(str) + 1);\n+      if (n != strlen(str) + 1) {\n+        return false;\n+      }\n@@ -3230,1 +3171,1 @@\n-void AOTCodeReader::read_asm_remarks(AsmRemarks& asm_remarks) {\n+void AOTCodeReader::read_asm_remarks(AsmRemarks& asm_remarks, bool use_string_table) {\n@@ -3238,3 +3179,9 @@\n-    int remark_string_id = *(uint *)addr(offset);\n-    offset += sizeof(int);\n-    const char* remark = (const char*)_cache->address_for_C_string(remark_string_id);\n+    const char* remark = nullptr;\n+    if (use_string_table) {\n+      int remark_string_id = *(uint *)addr(offset);\n+      offset += sizeof(int);\n+      remark = (const char*)_cache->address_for_C_string(remark_string_id);\n+    } else {\n+      remark = (const char*)addr(offset);\n+      offset += (uint)strlen(remark)+1;\n+    }\n@@ -3246,1 +3193,1 @@\n-bool AOTCodeCache::write_dbg_strings(CodeBlob& cb) {\n+bool AOTCodeCache::write_dbg_strings(DbgStrings& dbg_strings, bool use_string_table) {\n@@ -3253,1 +3200,1 @@\n-  bool result = cb.dbg_strings().iterate([&] (const char* str) -> bool {\n+  bool result = dbg_strings.iterate([&] (const char* str) -> bool {\n@@ -3255,6 +3202,13 @@\n-    const char* cstr = add_C_string(str);\n-    int id = _table->id_for_C_string((address)cstr);\n-    assert(id != -1, \"db string '%s' not found in AOTCodeAddressTable\", str);\n-    uint n = write_bytes(&id, sizeof(int));\n-    if (n != sizeof(int)) {\n-      return false;\n+    if (use_string_table) {\n+      const char* cstr = add_C_string(str);\n+      int id = _table->id_for_C_string((address)cstr);\n+      assert(id != -1, \"db string '%s' not found in AOTCodeAddressTable\", str);\n+      uint n = write_bytes(&id, sizeof(int));\n+      if (n != sizeof(int)) {\n+        return false;\n+      }\n+    } else {\n+      uint n = write_bytes(str, (uint)strlen(str) + 1);\n+      if (n != strlen(str) + 1) {\n+        return false;\n+      }\n@@ -3269,1 +3223,1 @@\n-void AOTCodeReader::read_dbg_strings(DbgStrings& dbg_strings) {\n+void AOTCodeReader::read_dbg_strings(DbgStrings& dbg_strings, bool use_string_table) {\n@@ -3275,3 +3229,9 @@\n-    int string_id = *(uint *)addr(offset);\n-    offset += sizeof(int);\n-    const char* str = (const char*)_cache->address_for_C_string(string_id);\n+    const char* str = nullptr;\n+    if (use_string_table) {\n+      int string_id = *(uint *)addr(offset);\n+      offset += sizeof(int);\n+      str = (const char*)_cache->address_for_C_string(string_id);\n+    } else {\n+      str = (const char*)addr(offset);\n+      offset += (uint)strlen(str)+1;\n+    }\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":68,"deletions":108,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -575,2 +575,2 @@\n-  bool write_asm_remarks(CodeBlob& cb);\n-  bool write_dbg_strings(CodeBlob& cb);\n+  bool write_asm_remarks(AsmRemarks& asm_remarks, bool use_string_table);\n+  bool write_dbg_strings(DbgStrings& dbg_strings, bool use_string_table);\n@@ -716,2 +716,2 @@\n-  void read_asm_remarks(AsmRemarks& asm_remarks);\n-  void read_dbg_strings(DbgStrings& dbg_strings);\n+  void read_asm_remarks(AsmRemarks& asm_remarks, bool use_string_table);\n+  void read_dbg_strings(DbgStrings& dbg_strings, bool use_string_table);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1276,0 +1276,7 @@\n+#ifndef PRODUCT\n+  nm->asm_remarks().init();\n+  aot_code_reader->read_asm_remarks(nm->asm_remarks(), \/* use_string_table *\/ false);\n+  nm->dbg_strings().init();\n+  aot_code_reader->read_dbg_strings(nm->dbg_strings(), \/* use_string_table *\/ false);\n+#endif\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}