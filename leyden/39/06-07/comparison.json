{"files":[{"patch":"@@ -155,0 +155,2 @@\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n+\n@@ -180,2 +182,0 @@\n-#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n-\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  static void* allocate_from_code_cache(size_t size) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n+  static void* allocate_from_code_cache(size_t size) NOT_CDS_RETURN_(nullptr);\n@@ -61,2 +61,2 @@\n-  static size_t get_cached_code_size() NOT_CDS_JAVA_HEAP_RETURN_(0);\n-  static void set_cached_code_size(size_t sz) NOT_CDS_JAVA_HEAP_RETURN;\n+  static size_t get_cached_code_size() NOT_CDS_RETURN_(0);\n+  static void set_cached_code_size(size_t sz) NOT_CDS_RETURN;\n@@ -64,2 +64,2 @@\n-  static bool is_cached_code_region_empty() NOT_CDS_JAVA_HEAP_RETURN_(true);\n-  static bool map_cached_code(ReservedSpace rs) NOT_CDS_JAVA_HEAP_RETURN_(false);\n+  static bool is_cached_code_region_empty() NOT_CDS_RETURN_(true);\n+  static bool map_cached_code(ReservedSpace rs) NOT_CDS_RETURN_(false);\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -409,1 +409,1 @@\n-\/\/ Skeleton code for including cached code in CDS:\n+\/\/ Storing AOT code in the cached code region of AOT Cache:\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-    private final String aotFile;        \/\/ new workflow = cdsFile + \".code\"\n@@ -75,1 +74,0 @@\n-        aotFile = cdsFile + \".code\";\n@@ -327,1 +325,1 @@\n-        return executeAndCheck(cmdLine, runMode, cdsFile, aotFile, cdsFileLog);\n+        return executeAndCheck(cmdLine, runMode, cdsFile, cdsFileLog);\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSAppTester.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}