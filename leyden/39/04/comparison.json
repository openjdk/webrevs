{"files":[{"patch":"@@ -315,1 +315,2 @@\n-  size_t buffer_size = LP64_ONLY(CompressedClassSpaceSize) NOT_LP64(256 * M);\n+  \/\/ CachedCodeMaxSize accounts for cached code region.\n+  size_t buffer_size = LP64_ONLY(CompressedClassSpaceSize) NOT_LP64(256 * M) + CachedCodeMaxSize;\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -190,0 +190,2 @@\n+  bool is_empty()   const { return _base == _top; }\n+\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,0 +178,5 @@\n+bool CDSAccess::is_cached_code_region_empty() {\n+  assert(CDSConfig::is_dumping_final_static_archive(), \"must be\");\n+  return ArchiveBuilder::current()->cc_region()->is_empty();\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+  static bool is_cached_code_region_empty() NOT_CDS_JAVA_HEAP_RETURN_(true);\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1131,0 +1131,2 @@\n+        \/\/ Write the contents to cached code region and close SCCache before packing the region\n+        SCCache::close();\n@@ -1134,2 +1136,0 @@\n-\n-      SCCache::close(); \/\/ Write final data and close archive\n@@ -1425,2 +1425,1 @@\n-\/\/ This is called very early at VM start up to get the size of the cached_code region, which\n-\/\/ is used in CodeCache::initialize_heaps()\n+\/\/ This is called very early at VM start up to get the size of the cached_code region\n@@ -1966,1 +1965,1 @@\n-  SCCache::new_workflow_load_cache();\n+  SCCache::initialize();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+#include \"memory\/memoryReserver.hpp\"\n@@ -114,1 +115,1 @@\n-    vm_exit_during_initialization(\"Unable to used startup cached code.\", nullptr);\n+    vm_exit_during_initialization(\"Unable to use AOT Code Cache.\", nullptr);\n@@ -139,6 +140,1 @@\n-    const int len = (int)strlen(CachedCodeFile);\n-    \/\/ cache file path\n-    char* path  = NEW_C_HEAP_ARRAY(char, len+1, mtCode);\n-    memcpy(path, CachedCodeFile, len);\n-    path[len] = '\\0';\n-    if (!open_cache(path)) {\n+    if (!open_cache()) {\n@@ -166,1 +162,1 @@\n-      log_warning(scc, init)(\"Can't create Startup Code Cache because card table base address is not relocatable: \" INTPTR_FORMAT, p2i(byte_map_base));\n+      log_warning(scc, init)(\"Can't create Code Cache because card table base address is not relocatable: \" INTPTR_FORMAT, p2i(byte_map_base));\n@@ -242,1 +238,1 @@\n-        log.print_cr(\"Startup Code Cache statistics (when closed): \");\n+        log.print_cr(\"AOT Code Cache statistics (when closed): \");\n@@ -383,43 +379,7 @@\n-bool SCCache::open_cache(const char* cache_path) {\n-  if (LoadCachedCode) {\n-    log_info(scc)(\"Trying to load Startup Code Cache '%s'\", cache_path);\n-    struct stat st;\n-    if (os::stat(cache_path, &st) != 0) {\n-      log_warning(scc, init)(\"Specified Startup Code Cache file not found '%s'\", cache_path);\n-      return false;\n-    } else if ((st.st_mode & S_IFMT) != S_IFREG) {\n-      log_warning(scc, init)(\"Specified Startup Code Cache is not file '%s'\", cache_path);\n-      return false;\n-    }\n-    int fd = os::open(cache_path, O_RDONLY | O_BINARY, 0);\n-    if (fd < 0) {\n-      if (errno == ENOENT) {\n-        log_warning(scc, init)(\"Specified Startup Code Cache file not found '%s'\", cache_path);\n-      } else {\n-        log_warning(scc, init)(\"Failed to open Startup Code Cache file '%s': (%s)\", cache_path, os::strerror(errno));\n-      }\n-      return false;\n-    } else {\n-      log_info(scc, init)(\"Opened for read Startup Code Cache '%s'\", cache_path);\n-    }\n-    SCCache* cache = new SCCache(cache_path, fd, (uint)st.st_size);\n-    bool failed = cache->failed();\n-    if (::close(fd) < 0) {\n-      log_warning(scc)(\"Failed to close for read Startup Code Cache file '%s'\", cache_path);\n-      failed = true;\n-    }\n-    if (failed) {\n-      delete cache;\n-      _cache = nullptr;\n-      return false;\n-    }\n-    _cache = cache;\n-  }\n-  if (_cache == nullptr && StoreCachedCode) {\n-    SCCache* cache = new SCCache(cache_path, -1 \/* fd *\/, 0 \/* size *\/);\n-    if (cache->failed()) {\n-      delete cache;\n-      _cache = nullptr;\n-      return false;\n-    }\n-    _cache = cache;\n+\n+bool SCCache::open_cache() {\n+  SCCache* cache = new SCCache();\n+  if (cache->failed()) {\n+    delete cache;\n+    _cache = nullptr;\n+    return false;\n@@ -427,0 +387,1 @@\n+  _cache = cache;\n@@ -432,4 +393,9 @@\n-  int _some_number;\n-  InstanceKlass* _some_klass;\n-  size_t _my_data_length;\n-  void* _my_data;\n+  uint _aot_code_size;\n+  char* _aot_code_data;\n+\n+  void set_aot_code_data(uint size, char* aot_data) {\n+    _aot_code_size = size;\n+    CDSAccess::set_pointer(&_aot_code_data, aot_data);\n+  }\n+\n+  static CachedCodeDirectory* create();\n@@ -455,16 +421,2 @@\n-\/\/ region is mapped to the beginning of the CodeCache (see _cds_code_space in codeCache.cpp). All the pointers\n-\/\/ in this buffer are relocated as necessary (e.g., to account for the runtime location of the CodeCache).\n-\/\/\n-\/\/ Example:\n-\/\/\n-\/\/ # make sure hw.cds doesn't exist, so that it's regenerated (1.5 step training)\n-\/\/ $ rm -f hw.cds; java -Xlog:cds,scc::uptime,tags,pid -XX:CacheDataStore=hw.cds -cp ~\/tmp\/HelloWorld.jar HelloWorld\n-\/\/\n-\/\/ # After training is finish, hw.cds should contain a CachedCodeDirectory. You can see the effect of relocation\n-\/\/ # from the [scc] log.\n-\/\/ $ java -Xlog:cds,scc -XX:CacheDataStore=hw.cds -cp ~\/tmp\/HelloWorld.jar HelloWorld\n-\/\/ [0.016s][info][scc] new workflow: cached code mapped at 0x7fef97ebc000\n-\/\/ [0.016s][info][scc] _cached_code_directory->_some_klass     = 0x800009ca8 (java.lang.String)\n-\/\/ [0.016s][info][scc] _cached_code_directory->_some_number    = 0\n-\/\/ [0.016s][info][scc] _cached_code_directory->_my_data_length = 0\n-\/\/ [0.016s][info][scc] _cached_code_directory->_my_data        = 0x7fef97ebc020 (32 bytes offset from base)\n+\/\/ region is mapped to the process address space. All the pointers in this buffer are relocated as necessary\n+\/\/ (e.g., to account for the runtime location of the CodeCache).\n@@ -472,3 +424,0 @@\n-\/\/ The 1.5 step training may be hard to debug. If you want to run in a debugger, run the above training step\n-\/\/ with an additional \"-XX:+CDSManualFinalImage\" command-line argument.\n-\n@@ -478,2 +427,2 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-void SCCache::new_workflow_start_writing_cache() {\n+CachedCodeDirectory* CachedCodeDirectory::create() {\n+  assert(CDSAccess::is_cached_code_region_empty(), \"must be\");\n@@ -481,37 +430,2 @@\n-  _cached_code_directory = dir;\n-\n-  CDSAccess::set_pointer(&dir->_some_klass, vmClasses::String_klass());\n-\n-  size_t n = 120;\n-  void* d = (void*)CDSAccess::allocate_from_code_cache(n);\n-  CDSAccess::set_pointer(&dir->_my_data, d);\n-}\n-\n-void SCCache::new_workflow_end_writing_cache() {\n-  _cached_code_directory->dumptime_init_internal();\n-}\n-\n-void SCCache::new_workflow_load_cache() {\n-  void* ptr = CodeCache::map_cached_code();\n-  if (ptr != nullptr) {\n-    ResourceMark rm;\n-    _cached_code_directory = (CachedCodeDirectory*)ptr;\n-\n-    \/\/ CDS uses this to implement CDSAccess::get_archived_object(k)\n-    _cached_code_directory->runtime_init_internal();\n-\n-    \/\/ At this point:\n-    \/\/ - CodeCache::initialize_heaps() has finished.\n-    \/\/ - CDS archive is fully mapped (\"metadata\", \"heap\" and \"cached_code\" regions are mapped)\n-    \/\/ - All pointers in the mapped CDS regions are relocated.\n-    \/\/ - CDSAccess::get_archived_object() works.\n-\n-    \/\/ Data used by AOT compiler\n-    InstanceKlass* k = _cached_code_directory->_some_klass;\n-    log_info(scc)(\"new workflow: cached code mapped at %p\", ptr);\n-    log_info(scc)(\"_cached_code_directory->_some_klass     = %p (%s)\", k, k->external_name());\n-    log_info(scc)(\"_cached_code_directory->_some_number    = %d\", _cached_code_directory->_some_number);\n-    log_info(scc)(\"_cached_code_directory->_my_data_length = %zu\", _cached_code_directory->_my_data_length);\n-    log_info(scc)(\"_cached_code_directory->_my_data        = %p (%zu bytes offset from base)\", _cached_code_directory->_my_data,\n-                  pointer_delta((address)_cached_code_directory->_my_data, (address)_cached_code_directory, 1));\n-  }\n+  dir->dumptime_init_internal();\n+  return dir;\n@@ -519,1 +433,0 @@\n-#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n@@ -523,1 +436,1 @@\n-SCCache::SCCache(const char* cache_path, int fd, uint load_size) {\n+SCCache::SCCache() {\n@@ -525,1 +438,0 @@\n-  _cache_path = cache_path;\n@@ -528,1 +440,1 @@\n-  _load_size = load_size;\n+  _load_size = 0;\n@@ -540,1 +452,0 @@\n-  _C_load_buffer = nullptr;\n@@ -554,16 +465,3 @@\n-    if (MmapCachedCode) {\n-      \/\/ Implementation note: the mapping is not read-only, because entries are updated in-place.\n-      \/\/ However, this mapping is MAP_PRIVATE, which means the changes to mapping do not reflect\n-      \/\/ in the backing file. TODO: Avoid in-place modifications, so we do not have to rely on this?\n-      _load_buffer = os::map_memory(fd, _cache_path, 0, nullptr, load_size,\n-                                   false,false, mtCode);\n-    } else {\n-      _C_load_buffer = NEW_C_HEAP_ARRAY(char, load_size + DATA_ALIGNMENT, mtCode);\n-      _load_buffer = align_up(_C_load_buffer, DATA_ALIGNMENT);\n-      uint n = (uint)::read(fd, _load_buffer, load_size);\n-      if (n != load_size) {\n-        _load_buffer = nullptr;\n-      }\n-    }\n-    if (_load_buffer == nullptr) {\n-      log_warning(scc, init)(\"Failed to read\/mmap %d bytes at address \" INTPTR_FORMAT \" from Startup Code Cache file '%s'\", load_size, p2i(_load_buffer), _cache_path);\n+    ReservedSpace rs = MemoryReserver::reserve(CDSAccess::get_cached_code_size(), mtCode);\n+    if (!rs.is_reserved()) {\n+      log_warning(scc, init)(\"Failed to reserved %u bytes of memory for mapping cached code region in AOT Cache\", (uint)CDSAccess::get_cached_code_size());\n@@ -573,6 +471,2 @@\n-    log_info(scc, init)(\"Read\/mmaped %d bytes at address \" INTPTR_FORMAT \" from Startup Code Cache '%s'\", load_size, p2i(_load_buffer), _cache_path);\n-\n-    _load_header = (SCCHeader*)addr(0);\n-    const char* scc_jvm_version = addr(_load_header->jvm_version_offset());\n-    if (strncmp(scc_jvm_version, VM_Version::internal_vm_info_string(), strlen(scc_jvm_version)) != 0) {\n-      log_warning(scc, init)(\"Disable Startup Code Cache: JVM version '%s' recorded in '%s' does not match current version '%s'\", scc_jvm_version, _cache_path, VM_Version::internal_vm_info_string());\n+    if (!CDSAccess::map_cached_code(rs)) {\n+      log_warning(scc, init)(\"Failed to read\/mmap cached code region in AOT Cache\");\n@@ -582,1 +476,10 @@\n-    if (!_load_header->verify_config(_cache_path, load_size)) {\n+    _cached_code_directory = (CachedCodeDirectory*)rs.base();\n+    _cached_code_directory->runtime_init_internal();\n+\n+    _load_size = _cached_code_directory->_aot_code_size;\n+    _load_buffer = _cached_code_directory->_aot_code_data;\n+    assert(is_aligned(_load_buffer, DATA_ALIGNMENT), \"load_buffer is not aligned\");\n+    log_info(scc, init)(\"Mapped %u bytes at address \" INTPTR_FORMAT \" from AOT Code Cache\", _load_size, p2i(_load_buffer));\n+\n+    _load_header = (SCCHeader*)addr(0);\n+    if (!_load_header->verify_config(_load_size)) {\n@@ -586,1 +489,1 @@\n-    log_info(scc, init)(\"Read header from Startup Code Cache '%s'\", cache_path);\n+    log_info(scc, init)(\"Read header from AOT Code Cache\");\n@@ -682,1 +585,1 @@\n-bool SCConfig::verify(const char* cache_path) const {\n+bool SCConfig::verify() const {\n@@ -685,1 +588,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created by product VM, it can't be used by debug VM\", cache_path);\n+    log_warning(scc, init)(\"Disable AOT Code: it was created by product VM, it can't be used by debug VM\");\n@@ -690,1 +593,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created by debug VM, it can't be used by product VM\", cache_path);\n+    log_warning(scc, init)(\"Disable AOT Code: it was created by debug VM, it can't be used by product VM\");\n@@ -697,1 +600,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with different GC: %s vs current %s\", cache_path, GCConfig::hs_err_name(scc_gc), GCConfig::hs_err_name());\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with different GC: %s vs current %s\", GCConfig::hs_err_name(scc_gc), GCConfig::hs_err_name());\n@@ -702,1 +605,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with UseCompressedOops = %s\", cache_path, UseCompressedOops ? \"false\" : \"true\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with UseCompressedOops = %s\", UseCompressedOops ? \"false\" : \"true\");\n@@ -706,1 +609,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with UseCompressedClassPointers = %s\", cache_path, UseCompressedClassPointers ? \"false\" : \"true\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with UseCompressedClassPointers = %s\", UseCompressedClassPointers ? \"false\" : \"true\");\n@@ -711,1 +614,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with JavaAssertions::systemClassDefault() = %s\", cache_path, JavaAssertions::systemClassDefault() ? \"disabled\" : \"enabled\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with JavaAssertions::systemClassDefault() = %s\", JavaAssertions::systemClassDefault() ? \"disabled\" : \"enabled\");\n@@ -715,1 +618,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with JavaAssertions::userClassDefault() = %s\", cache_path, JavaAssertions::userClassDefault() ? \"disabled\" : \"enabled\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with JavaAssertions::userClassDefault() = %s\", JavaAssertions::userClassDefault() ? \"disabled\" : \"enabled\");\n@@ -720,1 +623,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with EnableContended = %s\", cache_path, EnableContended ? \"false\" : \"true\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with EnableContended = %s\", EnableContended ? \"false\" : \"true\");\n@@ -724,1 +627,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with RestrictContended = %s\", cache_path, RestrictContended ? \"false\" : \"true\");\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with RestrictContended = %s\", RestrictContended ? \"false\" : \"true\");\n@@ -728,1 +631,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with CompressedOops::shift() = %d vs current %d\", cache_path, _compressedOopShift, CompressedOops::shift());\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with CompressedOops::shift() = %d vs current %d\", _compressedOopShift, CompressedOops::shift());\n@@ -732,1 +635,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with CompressedKlassPointers::shift() = %d vs current %d\", cache_path, _compressedKlassShift, CompressedKlassPointers::shift());\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with CompressedKlassPointers::shift() = %d vs current %d\", _compressedKlassShift, CompressedKlassPointers::shift());\n@@ -736,1 +639,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with ContendedPaddingWidth = %d vs current %d\", cache_path, _contendedPaddingWidth, ContendedPaddingWidth);\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with ContendedPaddingWidth = %d vs current %d\", _contendedPaddingWidth, ContendedPaddingWidth);\n@@ -740,1 +643,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: '%s' was created with ObjectAlignmentInBytes = %d vs current %d\", cache_path, _objectAlignment, ObjectAlignmentInBytes);\n+    log_warning(scc, init)(\"Disable AOT Code: it was created with ObjectAlignmentInBytes = %d vs current %d\", _objectAlignment, ObjectAlignmentInBytes);\n@@ -746,1 +649,1 @@\n-bool SCCHeader::verify_config(const char* cache_path, uint load_size) const {\n+bool SCCHeader::verify_config(uint load_size) const {\n@@ -748,1 +651,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: different SCC version %d vs %d recorded in '%s'\", SCC_VERSION, _version, cache_path);\n+    log_warning(scc, init)(\"Disable AOT Code: different SCC version %d vs %d recorded in AOT Cache\", SCC_VERSION, _version);\n@@ -752,5 +655,1 @@\n-    log_warning(scc, init)(\"Disable Startup Code Cache: different cached code size %d vs %d recorded in '%s'\", load_size, _cache_size, cache_path);\n-    return false;\n-  }\n-  if (has_meta_ptrs() && !UseSharedSpaces) {\n-    log_warning(scc, init)(\"Disable Startup Cached Code: '%s' contains metadata pointers but CDS is off\", cache_path);\n+    log_warning(scc, init)(\"Disable AOT Code: different cached code size %d vs %d recorded in AOT Cache\", load_size, _cache_size);\n@@ -781,13 +680,1 @@\n-  FREE_C_HEAP_ARRAY(char, _cache_path);\n-  if (MmapCachedCode) {\n-    if (_load_buffer != nullptr) {\n-      os::unmap_memory(_load_buffer, _load_size);\n-      _load_buffer = nullptr;\n-    }\n-  } else {\n-    if (_C_load_buffer != nullptr) {\n-      FREE_C_HEAP_ARRAY(char, _C_load_buffer);\n-      _C_load_buffer = nullptr;\n-      _load_buffer = nullptr;\n-    }\n-  }\n+  _load_buffer = nullptr;\n@@ -869,1 +756,1 @@\n-  log_trace(scc)(\"Adjust write alignment in Startup Code Cache '%s'\", _cache_path);\n+  log_trace(scc)(\"Adjust write alignment in AOT Code Cache\");\n@@ -880,2 +767,2 @@\n-    log_warning(scc)(\"Failed to write %d bytes at offset %d to Startup Code Cache file '%s'. Increase CachedCodeMaxSize.\",\n-                     nbytes, _write_position, _cache_path);\n+    log_warning(scc)(\"Failed to write %d bytes at offset %d to AOT Code Cache. Increase CachedCodeMaxSize.\",\n+                     nbytes, _write_position);\n@@ -887,1 +774,1 @@\n-  log_trace(scc)(\"Wrote %d bytes at offset %d to Startup Code Cache '%s'\", nbytes, _write_position, _cache_path);\n+  log_trace(scc)(\"Wrote %d bytes at offset %d to AOT Code Cache\", nbytes, _write_position);\n@@ -943,1 +830,1 @@\n-    log_info(scc, init)(\"Read %d entries table at offset %d from Startup Code Cache '%s'\", count, _load_header->entries_offset(), _cache_path);\n+    log_info(scc, init)(\"Read %d entries table at offset %d from AOT Code Cache\", count, _load_header->entries_offset());\n@@ -948,1 +835,1 @@\n-    log_info(scc, init)(\"Load %d preload entries from Startup Code Cache '%s'\", preload_entries_count, _cache_path);\n+    log_info(scc, init)(\"Load %d preload entries from AOT Code Cache\", preload_entries_count);\n@@ -1008,1 +895,1 @@\n-    log_info(scc, init)(\"Read %d entries table at offset %d from Startup Code Cache '%s'\", count, _load_header->entries_offset(), _cache_path);\n+    log_info(scc, init)(\"Read %d entries table at offset %d from AOT Code Cache\", count, _load_header->entries_offset());\n@@ -1137,0 +1024,3 @@\n+    _cached_code_directory = CachedCodeDirectory::create();\n+    assert(_cached_code_directory != nullptr, \"Sanity check\");\n+\n@@ -1138,2 +1028,0 @@\n-    const char* vm_version = VM_Version::internal_vm_info_string();\n-    uint vm_version_size = (uint)align_up(strlen(vm_version) + 1, DATA_ALIGNMENT);\n@@ -1150,1 +1038,1 @@\n-    uint total_size = _write_position + _load_size + header_size + vm_version_size +\n+    uint total_size = _write_position + _load_size + header_size +\n@@ -1153,0 +1041,3 @@\n+    assert(total_size < ReservedCodeCacheSize, \"Cached code region size (\" UINT32_FORMAT \" bytes) in AOT Cache is less than the required size (\" UINT32_FORMAT \" bytes).\",\n+           total_size, (uint)ReservedCodeCacheSize);\n+\n@@ -1155,1 +1046,2 @@\n-    char* buffer = NEW_C_HEAP_ARRAY(char, total_size + DATA_ALIGNMENT, mtCode);\n+\n+    char* buffer = (char *)CDSAccess::allocate_from_code_cache(total_size + DATA_ALIGNMENT); \/\/ NEW_C_HEAP_ARRAY(char, total_size + DATA_ALIGNMENT, mtCode);\n@@ -1158,3 +1050,0 @@\n-    uint jvm_version_offset = current - start;\n-    copy_bytes(vm_version, (address)current, (uint)strlen(vm_version) + 1);\n-    current += vm_version_size;\n@@ -1266,1 +1155,1 @@\n-      log_info(scc, exit)(\"No new entires, cache files %s was not %s\", _cache_path, (_for_read ? \"updated\" : \"created\"));\n+      log_info(scc, exit)(\"No entires written to AOT Code Cache\");\n@@ -1283,1 +1172,1 @@\n-      log_info(scc, exit)(\"Wrote %d preload entries to Startup Code Cache '%s'\", preload_entries_cnt, _cache_path);\n+      log_info(scc, exit)(\"Wrote %d preload entries to AOT Code Cache\", preload_entries_cnt);\n@@ -1301,1 +1190,1 @@\n-    log_info(scc, exit)(\"Wrote %d SCCEntry entries (%d were not entrant, %d max size) to Startup Code Cache '%s'\", entries_count, not_entrant_nb, max_size, _cache_path);\n+    log_info(scc, exit)(\"Wrote %d SCCEntry entries (%d were not entrant, %d max size) to AOT Code Cache\", entries_count, not_entrant_nb, max_size);\n@@ -1313,1 +1202,1 @@\n-    header->init(jvm_version_offset, size,\n+    header->init(size,\n@@ -1318,1 +1207,2 @@\n-    log_info(scc, init)(\"Wrote header to Startup Code Cache '%s'\", _cache_path);\n+    log_info(scc, init)(\"Wrote SCCache header to AOT Code Cache\");\n+    log_info(scc, exit)(\"Wrote %d bytes of data to AOT Code Cache\", size);\n@@ -1320,31 +1210,1 @@\n-    \/\/ Now store to file\n-#ifdef _WINDOWS  \/\/ On Windows, need WRITE permission to remove the file.\n-    chmod(_cache_path, _S_IREAD | _S_IWRITE);\n-#endif\n-    \/\/ Use remove() to delete the existing file because, on Unix, this will\n-    \/\/ allow processes that have it open continued access to the file.\n-    remove(_cache_path);\n-    int fd = os::open(_cache_path, O_RDWR | O_CREAT | O_TRUNC | O_BINARY, 0444);\n-    if (fd < 0) {\n-      log_warning(scc, exit)(\"Unable to create Startup Code Cache file '%s': (%s)\", _cache_path, os::strerror(errno));\n-      FREE_C_HEAP_ARRAY(char, buffer);\n-      exit_vm_on_store_failure();\n-      return false;\n-    } else {\n-      log_info(scc, exit)(\"Opened for write Startup Code Cache '%s'\", _cache_path);\n-    }\n-    bool success = os::write(fd, start, (size_t)size);\n-    if (!success) {\n-      log_warning(scc, exit)(\"Failed to write %d bytes to Startup Code Cache file '%s': (%s)\", size, _cache_path, os::strerror(errno));\n-      FREE_C_HEAP_ARRAY(char, buffer);\n-      exit_vm_on_store_failure();\n-      return false;\n-    }\n-    log_info(scc, exit)(\"Wrote %d bytes to Startup Code Cache '%s'\", size, _cache_path);\n-    if (::close(fd) < 0) {\n-      log_warning(scc, exit)(\"Failed to close for write Startup Code Cache file '%s'\", _cache_path);\n-      exit_vm_on_store_failure();\n-    } else {\n-      log_info(scc, exit)(\"Closed for write Startup Code Cache '%s'\", _cache_path);\n-    }\n-    FREE_C_HEAP_ARRAY(char, buffer);\n+    _cached_code_directory->set_aot_code_data(size, start);\n@@ -1376,1 +1236,1 @@\n-  log_info(scc,stubs)(\"Reading stub '%s' id:%d from Startup Code Cache '%s'\", name, (int)id, cache->_cache_path);\n+  log_info(scc,stubs)(\"Reading stub '%s' id:%d from AOT Code Cache\", name, (int)id);\n@@ -1382,1 +1242,1 @@\n-  log_info(scc,stubs)(\"Read stub '%s' id:%d from Startup Code Cache '%s'\", name, (int)id, cache->_cache_path);\n+  log_info(scc,stubs)(\"Read stub '%s' id:%d from AOT Code Cache\", name, (int)id);\n@@ -1391,1 +1251,1 @@\n-  log_info(scc, stubs)(\"Writing stub '%s' id:%d to Startup Code Cache '%s'\", name, (int)id, cache->_cache_path);\n+  log_info(scc, stubs)(\"Writing stub '%s' id:%d to AOT Code Cache\", name, (int)id);\n@@ -1435,1 +1295,1 @@\n-  log_info(scc, stubs)(\"Wrote stub '%s' id:%d to Startup Code Cache '%s'\", name, (int)id, cache->_cache_path);\n+  log_info(scc, stubs)(\"Wrote stub '%s' id:%d to AOT Code Cache\", name, (int)id);\n@@ -2069,2 +1929,1 @@\n-  log_info(scc, stubs)(\"Looking up adapter %s (0x%x) in Startup Code Cache '%s'\",\n-                       name, id, _cache->cache_path());\n+  log_info(scc, stubs)(\"Looking up adapter %s (0x%x) in AOT Code Cache\", name, id);\n@@ -2084,2 +1943,2 @@\n-  log_info(scc, stubs)(\"%d (L%d): Reading adapter '%s' from Startup Code Cache '%s'\",\n-                       compile_id(), comp_level(), name, _cache->cache_path());\n+  log_info(scc, stubs)(\"%d (L%d): Reading adapter '%s' from AOT Code Cache\",\n+                       compile_id(), comp_level(), name);\n@@ -2114,2 +1973,2 @@\n-    log_debug(scc, stubs)(\"%d (L%d): Reading adapter '%s'  offsets[%d] == 0x%x from Startup Code Cache '%s'\",\n-                         compile_id(), comp_level(), stored_name, i, arg, _cache->cache_path());\n+    log_debug(scc, stubs)(\"%d (L%d): Reading adapter '%s'  offsets[%d] == 0x%x from AOT Code Cache\",\n+                         compile_id(), comp_level(), stored_name, i, arg);\n@@ -2118,2 +1977,2 @@\n-  log_debug(scc, stubs)(\"%d (L%d): Read adapter '%s' with '%d' args from Startup Code Cache '%s'\",\n-                       compile_id(), comp_level(), stored_name, offsets_count, _cache->cache_path());\n+  log_debug(scc, stubs)(\"%d (L%d): Read adapter '%s' with '%d' args from AOT Code Cache\",\n+                       compile_id(), comp_level(), stored_name, offsets_count);\n@@ -2164,2 +2023,2 @@\n-  log_info(scc, stubs)(\"%d (L%d): Reading blob '%s' with pc_offset %d from Startup Code Cache '%s'\",\n-                       compile_id(), comp_level(), name, *pc_offset, _cache->cache_path());\n+  log_info(scc, stubs)(\"%d (L%d): Reading blob '%s' with pc_offset %d from AOT Code Cache\",\n+                       compile_id(), comp_level(), name, *pc_offset);\n@@ -2191,2 +2050,2 @@\n-  log_info(scc, stubs)(\"%d (L%d): Read blob '%s' from Startup Code Cache '%s'\",\n-                       compile_id(), comp_level(), name, _cache->cache_path());\n+  log_info(scc, stubs)(\"%d (L%d): Read blob '%s' from AOT Code Cache\",\n+                       compile_id(), comp_level(), name);\n@@ -2382,1 +2241,1 @@\n-  log_info(scc, stubs)(\"Writing adapter '%s' (0x%x) to Startup Code Cache '%s'\", name, id, cache->_cache_path);\n+  log_info(scc, stubs)(\"Writing adapter '%s' (0x%x) to AOT Code Cache\", name, id);\n@@ -2427,1 +2286,1 @@\n-    log_debug(scc, stubs)(\"Writing adapter '%s' (0x%x) offsets[%d] == 0x%x to Startup Code Cache '%s'\", name, id, i, arg, cache->_cache_path);\n+    log_debug(scc, stubs)(\"Writing adapter '%s' (0x%x) offsets[%d] == 0x%x to AOT Code Cache\", name, id, i, arg);\n@@ -2437,1 +2296,1 @@\n-  log_info(scc, stubs)(\"Wrote adapter '%s' (0x%x) to Startup Code Cache '%s'\", name, id, cache->_cache_path);\n+  log_info(scc, stubs)(\"Wrote adapter '%s' (0x%x) to AOT Code Cache\", name, id);\n@@ -2495,1 +2354,1 @@\n-  log_info(scc, stubs)(\"Writing blob '%s' to Startup Code Cache '%s'\", buffer->name(), cache->_cache_path);\n+  log_info(scc, stubs)(\"Writing blob '%s' to AOT Code Cache\", buffer->name());\n@@ -2547,1 +2406,1 @@\n-  log_info(scc, stubs)(\"Wrote stub '%s' to Startup Code Cache '%s'\", name, cache->_cache_path);\n+  log_info(scc, stubs)(\"Wrote stub '%s' to AOT Code Cache\", name);\n@@ -3235,1 +3094,1 @@\n-  log_info(scc, nmethod)(\"%d (L%d): Read nmethod '%s' from Startup Code Cache '%s'\", compile_id(), comp_level(), name, _cache->cache_path());\n+  log_info(scc, nmethod)(\"%d (L%d): Read nmethod '%s' from AOT Code Cache\", compile_id(), comp_level(), name);\n@@ -3405,1 +3264,1 @@\n-    log_info(scc, nmethod)(\"%d (L%d): Writing nmethod '%s' (comp level: %d, decomp: %d%s%s) to Startup Code Cache '%s'\",\n+    log_info(scc, nmethod)(\"%d (L%d): Writing nmethod '%s' (comp level: %d, decomp: %d%s%s) to AOT Code Cache\",\n@@ -3408,1 +3267,1 @@\n-                           (has_clinit_barriers ? \", has clinit barriers\" : \"\"), _cache_path);\n+                           (has_clinit_barriers ? \", has clinit barriers\" : \"\"));\n@@ -3569,2 +3428,2 @@\n-    log_info(scc, nmethod)(\"%d (L%d): Wrote nmethod '%s'%s to Startup Code Cache '%s'\",\n-                           comp_id, (int)comp_level, name, (_for_preload ? \" (for preload)\" : \"\"), _cache_path);\n+    log_info(scc, nmethod)(\"%d (L%d): Wrote nmethod '%s'%s to AOT Code Cache\",\n+                           comp_id, (int)comp_level, name, (_for_preload ? \" (for preload)\" : \"\"));\n@@ -4265,1 +4124,1 @@\n-  log_info(scc, init)(\"Load %d C strings at offset %d from Startup Code Cache '%s'\", _C_strings_count, strings_offset, _cache_path);\n+  log_info(scc, init)(\"Load %d C strings at offset %d from AOT Code Cache\", _C_strings_count, strings_offset);\n@@ -4296,2 +4155,2 @@\n-    log_info(scc, exit)(\"Wrote %d C strings of total length %d at offset %d to Startup Code Cache '%s'\",\n-                        _C_strings_used, length, offset, _cache_path);\n+    log_info(scc, exit)(\"Wrote %d C strings of total length %d at offset %d to AOT Code Cache\",\n+                        _C_strings_used, length, offset);\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":115,"deletions":256,"binary":false,"changes":371,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  bool verify(const char* cache_path) const;\n+  bool verify() const;\n@@ -97,1 +97,0 @@\n-  uint _jvm_version_offset;\/\/ JVM version string\n@@ -108,1 +107,1 @@\n-  void init(uint jvm_version_offset, uint cache_size,\n+  void init(uint cache_size,\n@@ -114,1 +113,0 @@\n-     _jvm_version_offset = jvm_version_offset;\n@@ -126,2 +124,0 @@\n-  uint jvm_version_offset() const { return _jvm_version_offset; }\n-\n@@ -137,3 +133,3 @@\n-  bool verify_config(const char* cache_path, uint load_size)  const;\n-  bool verify_vm_config(const char* cache_path) const { \/\/ Called after Universe initialized\n-    return _config.verify(cache_path);\n+  bool verify_config(uint load_size)  const;\n+  bool verify_vm_config() const { \/\/ Called after Universe initialized\n+    return _config.verify();\n@@ -385,1 +381,0 @@\n-  const char* _cache_path;\n@@ -388,1 +383,0 @@\n-  char*       _C_load_buffer;  \/\/ Original unaligned buffer\n@@ -474,1 +468,1 @@\n-  SCCache(const char* cache_path, int fd, uint load_size);\n+  SCCache();\n@@ -478,1 +472,0 @@\n-  const char* cache_path()   const { return _cache_path; }\n@@ -579,1 +572,1 @@\n-  static bool open_cache(const char* cache_path);\n+  static bool open_cache();\n@@ -582,1 +575,1 @@\n-      return _cache->_load_header->verify_vm_config(_cache->_cache_path);\n+      return _cache->_load_header->verify_vm_config();\n@@ -631,4 +624,0 @@\n-\n-  static void new_workflow_start_writing_cache() NOT_CDS_JAVA_HEAP_RETURN;\n-  static void new_workflow_end_writing_cache() NOT_CDS_JAVA_HEAP_RETURN;\n-  static void new_workflow_load_cache() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -459,3 +459,0 @@\n-  product(bool, MmapCachedCode, NOT_WINDOWS(true) WINDOWS_ONLY(false),      \\\n-          \"Mmap cached code file instead of reading it fully at startup.\")  \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -226,2 +226,0 @@\n-    SCCache::new_workflow_start_writing_cache();\n-\n@@ -243,2 +241,0 @@\n-\n-    SCCache::new_workflow_end_writing_cache();\n","filename":"src\/hotspot\/share\/compiler\/precompiler.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-  SCCache::initialize();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -163,1 +163,0 @@\n-\tls -l ${DEMO_CDS}.code\n","filename":"test\/hotspot\/jtreg\/premain\/lib\/DemoSupport.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}