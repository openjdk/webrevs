{"files":[{"patch":"@@ -46,0 +46,1 @@\n+#include \"code\/SCCache.hpp\"\n@@ -315,2 +316,2 @@\n-  \/\/ CachedCodeMaxSize accounts for cached code region.\n-  size_t buffer_size = LP64_ONLY(CompressedClassSpaceSize) NOT_LP64(256 * M) + CachedCodeMaxSize;\n+  \/\/ SCCache::max_aot_code_size() accounts for cached code region.\n+  size_t buffer_size = LP64_ONLY(CompressedClassSpaceSize) NOT_LP64(256 * M) + SCCache::max_aot_code_size();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -169,9 +169,0 @@\n-void CDSAccess::set_pointer(address* ptr, address value) {\n-  ArchiveBuilder* builder = ArchiveBuilder::current();\n-  if (value != nullptr && !builder->is_in_buffer_space(value)) {\n-    value = builder->get_buffered_addr(value);\n-  }\n-  *ptr = value;\n-  ArchivePtrMarker::mark_pointer(ptr);\n-}\n-\n@@ -190,0 +181,9 @@\n+\n+void CDSAccess::set_pointer(address* ptr, address value) {\n+  ArchiveBuilder* builder = ArchiveBuilder::current();\n+  if (value != nullptr && !builder->is_in_buffer_space(value)) {\n+    value = builder->get_buffered_addr(value);\n+  }\n+  *ptr = value;\n+  ArchivePtrMarker::mark_pointer(ptr);\n+}\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  static void* allocate_from_code_cache(size_t size) NOT_CDS_RETURN_(nullptr);\n+  static void* allocate_from_code_cache(size_t size) NOT_CDS_JAVA_HEAP_RETURN_(nullptr);\n","filename":"src\/hotspot\/share\/cds\/cdsAccess.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -466,2 +466,2 @@\n-  void dumptime_init_internal();\n-  void runtime_init_internal();\n+  void dumptime_init_internal() NOT_CDS_JAVA_HEAP_RETURN;\n+  void runtime_init_internal() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -127,0 +127,5 @@\n+\n+uint SCCache::max_aot_code_size() {\n+  return (uint)CachedCodeMaxSize;\n+}\n+\n@@ -501,1 +506,1 @@\n-    _C_store_buffer = NEW_C_HEAP_ARRAY(char, CachedCodeMaxSize + DATA_ALIGNMENT, mtCode);\n+    _C_store_buffer = NEW_C_HEAP_ARRAY(char, max_aot_code_size() + DATA_ALIGNMENT, mtCode);\n@@ -504,2 +509,2 @@\n-    _store_entries = (SCCEntry*)align_up(_C_store_buffer + CachedCodeMaxSize, DATA_ALIGNMENT);\n-    log_info(scc, init)(\"Allocated store buffer at address \" INTPTR_FORMAT \" of size %d\", p2i(_store_buffer), CachedCodeMaxSize);\n+    _store_entries = (SCCEntry*)align_up(_C_store_buffer + max_aot_code_size(), DATA_ALIGNMENT);\n+    log_info(scc, init)(\"Allocated store buffer at address \" INTPTR_FORMAT \" of size \" UINT32_FORMAT \" bytes\", p2i(_store_buffer), max_aot_code_size());\n@@ -1041,2 +1046,2 @@\n-    assert(total_size < ReservedCodeCacheSize, \"Cached code region size (\" UINT32_FORMAT \" bytes) in AOT Cache is less than the required size (\" UINT32_FORMAT \" bytes).\",\n-           total_size, (uint)ReservedCodeCacheSize);\n+    assert(total_size < max_aot_code_size(), \"Cached code region size (\" UINT32_FORMAT \" bytes) in AOT Cache is less than the required size (\" UINT32_FORMAT \" bytes).\",\n+           total_size, max_aot_code_size());\n","filename":"src\/hotspot\/share\/code\/SCCache.cpp","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -475,0 +475,2 @@\n+  static uint max_aot_code_size();\n+\n","filename":"src\/hotspot\/share\/code\/SCCache.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}