{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import java.awt.EventQueue;\n+import java.awt.Color;\n@@ -41,0 +41,4 @@\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+import java.awt.Insets;\n+import java.awt.Rectangle;\n@@ -42,0 +46,2 @@\n+import javax.swing.ButtonModel;\n+import javax.swing.Icon;\n@@ -43,0 +49,1 @@\n+import javax.swing.JMenu;\n@@ -44,0 +51,2 @@\n+import sun.swing.MenuItemLayoutHelper;\n+import sun.swing.SwingUtilities2;\n@@ -64,0 +73,4 @@\n+    private static Color disabledForeground;\n+    private static Color acceleratorSelectionForeground;\n+    private static Color acceleratorForeground;\n+\n@@ -116,0 +129,122 @@\n+    public static void applyInsets(Rectangle rect, Insets insets) {\n+        if (insets != null) {\n+            rect.x += insets.left;\n+            rect.y += insets.top;\n+            rect.width -= (insets.right + rect.x);\n+            rect.height -= (insets.bottom + rect.y);\n+        }\n+    }\n+\n+    public static void paintCheckIcon(Graphics g, MenuItemLayoutHelper lh,\n+                               MenuItemLayoutHelper.LayoutResult lr,\n+                               Color holdc, Color foreground) {\n+        if (lh.getCheckIcon() != null) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n+                    && model.isSelected())) {\n+                g.setColor(foreground);\n+            } else {\n+                g.setColor(holdc);\n+            }\n+            if (lh.useCheckAndArrow()) {\n+                lh.getCheckIcon().paintIcon(lh.getMenuItem(), g,\n+                        lr.getCheckRect().x, lr.getCheckRect().y);\n+            }\n+            g.setColor(holdc);\n+        }\n+    }\n+\n+    public static void paintIcon(Graphics g, MenuItemLayoutHelper lh,\n+                          MenuItemLayoutHelper.LayoutResult lr, Color holdc) {\n+        if (lh.getIcon() != null) {\n+            Icon icon;\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (!model.isEnabled()) {\n+                icon = lh.getMenuItem().getDisabledIcon();\n+            } else if (model.isPressed() && model.isArmed()) {\n+                icon = lh.getMenuItem().getPressedIcon();\n+                if (icon == null) {\n+                    \/\/ Use default icon\n+                    icon = lh.getMenuItem().getIcon();\n+                }\n+            } else {\n+                icon = lh.getMenuItem().getIcon();\n+            }\n+\n+            if (icon != null) {\n+                icon.paintIcon(lh.getMenuItem(), g, lr.getIconRect().x,\n+                        lr.getIconRect().y);\n+                g.setColor(holdc);\n+            }\n+        }\n+    }\n+\n+\n+    public static void paintAccText(Graphics g, MenuItemLayoutHelper lh,\n+                             MenuItemLayoutHelper.LayoutResult lr) {\n+        if (!lh.getAccText().isEmpty()) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            g.setFont(lh.getAccFontMetrics().getFont());\n+            if (!model.isEnabled()) {\n+\n+                \/\/ paint the accText disabled\n+                if (disabledForeground != null) {\n+                    g.setColor(disabledForeground);\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x,\n+                            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n+                } else {\n+                    g.setColor(lh.getMenuItem().getBackground().brighter());\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x,\n+                            lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n+                    g.setColor(lh.getMenuItem().getBackground().darker());\n+                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n+                            lh.getAccText(), lr.getAccRect().x - 1,\n+                            lr.getAccRect().y + lh.getFontMetrics().getAscent() - 1);\n+                }\n+            } else {\n+\n+                \/\/ paint the accText normally\n+                if (model.isArmed()\n+                        || (lh.getMenuItem() instanceof JMenu\n+                        && model.isSelected())) {\n+                    g.setColor(acceleratorSelectionForeground);\n+                } else {\n+                    g.setColor(acceleratorForeground);\n+                }\n+                SwingUtilities2.drawString(lh.getMenuItem(), g, lh.getAccText(),\n+                        lr.getAccRect().x, lr.getAccRect().y +\n+                                lh.getAccFontMetrics().getAscent());\n+            }\n+        }\n+    }\n+\n+    public static void setDisabledForeground(Color disabledFg) {\n+        disabledForeground = disabledFg;\n+    }\n+\n+    public static void setAcceleratorSelectionForeground(Color acceleratorSelectionFg) {\n+        acceleratorSelectionForeground = acceleratorSelectionFg;\n+    }\n+\n+    public static void setAcceleratorForeground(Color acceleratorFg) {\n+        acceleratorForeground = acceleratorFg;\n+    }\n+\n+    public static void paintArrowIcon(Graphics g, MenuItemLayoutHelper lh,\n+                               MenuItemLayoutHelper.LayoutResult lr,\n+                               Color foreground) {\n+        if (lh.getArrowIcon() != null) {\n+            ButtonModel model = lh.getMenuItem().getModel();\n+            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n+                    && model.isSelected())) {\n+                g.setColor(foreground);\n+            }\n+            if (lh.useCheckAndArrow()) {\n+                lh.getArrowIcon().paintIcon(lh.getMenuItem(), g,\n+                        lr.getArrowRect().x, lr.getArrowRect().y);\n+            }\n+        }\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/SwingUtilities3.java","additions":137,"deletions":2,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,10 @@\n-import java.awt.*;\n-import javax.swing.*;\n-import javax.swing.plaf.*;\n-import javax.swing.plaf.basic.*;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+\n+import javax.swing.ButtonModel;\n+import javax.swing.Icon;\n+import javax.swing.JComponent;\n+import javax.swing.JMenuItem;\n+import javax.swing.plaf.ComponentUI;\n+import javax.swing.plaf.basic.BasicCheckBoxMenuItemUI;\n@@ -77,0 +83,18 @@\n+\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                    arrowIcon, background, foreground, defaultTextIconGap,\n+                    menuItem, getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsCheckBoxMenuItemUI.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -811,6 +811,2 @@\n-                            Skin skin;\n-                            skin =  xp.getSkin(c, backgroundPart);\n-                            skin.paintSkin(g, x, y,\n-                                getIconWidth(), getIconHeight(), backgroundState);\n-                            if (icon == null) {\n-                                skin = xp.getSkin(c, part);\n+                            Skin skin = xp.getSkin(c, part);\n+                            if (icon == null || icon.getIconHeight() <= 16) {\n@@ -818,0 +814,2 @@\n+                            } else {\n+                                skin.paintSkin(g, x + OFFSET, y + icon.getIconHeight() \/ 2, state);\n@@ -823,1 +821,2 @@\n-                    icon.paintIcon(c, g, x + OFFSET, y + OFFSET);\n+                    icon.paintIcon(c, g, x + VistaMenuItemCheckIconFactory.getIconWidth(),\n+                                   y + OFFSET);\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsIconFactory.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import sun.swing.MenuItemLayoutHelper;\n@@ -37,0 +38,1 @@\n+import com.sun.java.swing.SwingUtilities3;\n@@ -50,1 +52,0 @@\n-\n@@ -52,0 +53,5 @@\n+\n+    private static Color disabledForeground;\n+    private static Color acceleratorSelectionForeground;\n+    private static Color acceleratorForeground;\n+\n@@ -71,0 +77,130 @@\n+    protected void installDefaults() {\n+        super.installDefaults();\n+        String prefix = getPropertyPrefix();\n+\n+        if (acceleratorSelectionForeground == null ||\n+                acceleratorSelectionForeground instanceof UIResource) {\n+            acceleratorSelectionForeground =\n+                    UIManager.getColor(prefix + \".acceleratorSelectionForeground\");\n+        }\n+        if (acceleratorForeground == null ||\n+                acceleratorForeground instanceof UIResource) {\n+            acceleratorForeground =\n+                    UIManager.getColor(prefix + \".acceleratorForeground\");\n+        }\n+        if (disabledForeground == null ||\n+                disabledForeground instanceof UIResource) {\n+            disabledForeground =\n+                    UIManager.getColor(prefix + \".disabledForeground\");\n+        }\n+    }\n+\n+\n+    private static void applyInsets(Rectangle rect, Insets insets) {\n+        SwingUtilities3.applyInsets(rect, insets);\n+    }\n+\n+    private static void paintCheckIcon(Graphics g, MenuItemLayoutHelper lh,\n+                                MenuItemLayoutHelper.LayoutResult lr,\n+                                Color holdc, Color foreground) {\n+        SwingUtilities3.paintCheckIcon(g, lh, lr, holdc, foreground);\n+    }\n+\n+    private static void paintIcon(Graphics g, MenuItemLayoutHelper lh,\n+                           MenuItemLayoutHelper.LayoutResult lr, Color holdc) {\n+        SwingUtilities3.paintIcon(g, lh, lr, holdc);\n+    }\n+\n+    private static void paintAccText(Graphics g, MenuItemLayoutHelper lh,\n+                              MenuItemLayoutHelper.LayoutResult lr) {\n+        SwingUtilities3.setDisabledForeground(disabledForeground);\n+        SwingUtilities3.setAcceleratorSelectionForeground(\n+                        acceleratorSelectionForeground);\n+        SwingUtilities3.setAcceleratorForeground(acceleratorForeground);\n+        SwingUtilities3.paintAccText(g, lh, lr);\n+    }\n+\n+    private static void paintArrowIcon(Graphics g, MenuItemLayoutHelper lh,\n+                                MenuItemLayoutHelper.LayoutResult lr,\n+                                Color foreground) {\n+        SwingUtilities3.paintArrowIcon(g, lh, lr, foreground);\n+    }\n+\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                                            arrowIcon, background, foreground,\n+                                            defaultTextIconGap, menuItem,\n+                                            getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+    }\n+\n+    static void paintMenuItem(WindowsMenuItemUIAccessor accessor, Graphics g,\n+                              JComponent c, Icon checkIcon, Icon arrowIcon,\n+                              Color background, Color foreground,\n+                              int defaultTextIconGap, JMenuItem menuItem, String prefix) {\n+        \/\/ Save original graphics font and color\n+        Font holdf = g.getFont();\n+        Color holdc = g.getColor();\n+\n+        JMenuItem mi = (JMenuItem) c;\n+        g.setFont(mi.getFont());\n+\n+        Rectangle viewRect = new Rectangle(0, 0, mi.getWidth(), mi.getHeight());\n+        applyInsets(viewRect, mi.getInsets());\n+\n+        String acceleratorDelimiter =\n+                UIManager.getString(\"MenuItem.acceleratorDelimiter\");\n+        if (acceleratorDelimiter == null) { acceleratorDelimiter = \"+\"; }\n+        Font acceleratorFont = UIManager.getFont(\"MenuItem.acceleratorFont\");\n+        if (acceleratorFont == null) {\n+            acceleratorFont = UIManager.getFont(\"MenuItem.font\");\n+        }\n+\n+        MenuItemLayoutHelper lh = new MenuItemLayoutHelper(mi, checkIcon,\n+                arrowIcon, viewRect, defaultTextIconGap, acceleratorDelimiter,\n+                mi.getComponentOrientation().isLeftToRight(), mi.getFont(),\n+                acceleratorFont, MenuItemLayoutHelper.useCheckAndArrow(menuItem),\n+                prefix);\n+        MenuItemLayoutHelper.LayoutResult lr = lh.layoutMenuItem();\n+\n+        paintBackground(accessor, g, mi, background);\n+        paintCheckIcon(g, lh, lr, holdc, foreground);\n+        paintIcon(g, lh, lr, holdc);\n+\n+        if (lh.getCheckIcon() != null && lh.useCheckAndArrow()) {\n+            Rectangle rect = lr.getTextRect();\n+\n+            rect.x += lh.getAfterCheckIconGap();\n+\n+            lr.setTextRect(rect);\n+        }\n+        if (!lh.getText().isEmpty()) {\n+            if (lh.getHtmlView() != null) {\n+                \/\/ Text is HTML\n+                lh.getHtmlView().paint(g, lr.getTextRect());\n+            } else {\n+                \/\/ Text isn't HTML\n+                paintText(accessor, g, lh.getMenuItem(),\n+                          lr.getTextRect(), lh.getText());\n+            }\n+        }\n+        if (lh.getCheckIcon() != null && lh.useCheckAndArrow()) {\n+            Rectangle rect = lr.getAccRect();\n+            rect.x += lh.getAfterCheckIconGap();\n+            lr.setAccRect(rect);\n+        }\n+        paintAccText(g, lh, lr);\n+        paintArrowIcon(g, lh, lr, foreground);\n+\n+        \/\/ Restore original graphics font and color\n+        g.setColor(holdc);\n+        g.setFont(holdf);\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuItemUI.java","additions":138,"deletions":2,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,19 @@\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                              Icon checkIcon, Icon arrowIcon,\n+                              Color background, Color foreground,\n+                              int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon, arrowIcon,\n+                                            background, foreground,\n+                                            defaultTextIconGap, menuItem,\n+                                            getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                                   foreground, defaultTextIconGap);\n+    }\n+\n+\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsMenuUI.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,17 @@\n+    \/**\n+     * Paint MenuItem.\n+     *\/\n+    protected void paintMenuItem(Graphics g, JComponent c,\n+                                 Icon checkIcon, Icon arrowIcon,\n+                                 Color background, Color foreground,\n+                                 int defaultTextIconGap) {\n+        if (WindowsMenuItemUI.isVistaPainting()) {\n+            WindowsMenuItemUI.paintMenuItem(accessor, g, c, checkIcon,\n+                    arrowIcon, background, foreground, defaultTextIconGap,\n+                    menuItem, getPropertyPrefix());\n+            return;\n+        }\n+        super.paintMenuItem(g, c, checkIcon, arrowIcon, background,\n+                foreground, defaultTextIconGap);\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/com\/sun\/java\/swing\/plaf\/windows\/WindowsRadioButtonMenuItemUI.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import com.sun.java.swing.SwingUtilities3;\n@@ -564,21 +565,1 @@\n-        if (lh.getIcon() != null) {\n-            Icon icon;\n-            ButtonModel model = lh.getMenuItem().getModel();\n-            if (!model.isEnabled()) {\n-                icon = lh.getMenuItem().getDisabledIcon();\n-            } else if (model.isPressed() && model.isArmed()) {\n-                icon = lh.getMenuItem().getPressedIcon();\n-                if (icon == null) {\n-                    \/\/ Use default icon\n-                    icon = lh.getMenuItem().getIcon();\n-                }\n-            } else {\n-                icon = lh.getMenuItem().getIcon();\n-            }\n-\n-            if (icon != null) {\n-                icon.paintIcon(lh.getMenuItem(), g, lr.getIconRect().x,\n-                        lr.getIconRect().y);\n-                g.setColor(holdc);\n-            }\n-        }\n+        SwingUtilities3.paintIcon(g, lh, lr, holdc);\n@@ -590,14 +571,1 @@\n-        if (lh.getCheckIcon() != null) {\n-            ButtonModel model = lh.getMenuItem().getModel();\n-            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n-                    && model.isSelected())) {\n-                g.setColor(foreground);\n-            } else {\n-                g.setColor(holdc);\n-            }\n-            if (lh.useCheckAndArrow()) {\n-                lh.getCheckIcon().paintIcon(lh.getMenuItem(), g,\n-                        lr.getCheckRect().x, lr.getCheckRect().y);\n-            }\n-            g.setColor(holdc);\n-        }\n+        SwingUtilities3.paintCheckIcon(g, lh, lr, holdc, foreground);\n@@ -608,34 +576,5 @@\n-        if (!lh.getAccText().equals(\"\")) {\n-            ButtonModel model = lh.getMenuItem().getModel();\n-            g.setFont(lh.getAccFontMetrics().getFont());\n-            if (!model.isEnabled()) {\n-                \/\/ *** paint the accText disabled\n-                if (disabledForeground != null) {\n-                    g.setColor(disabledForeground);\n-                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n-                        lh.getAccText(), lr.getAccRect().x,\n-                        lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n-                } else {\n-                    g.setColor(lh.getMenuItem().getBackground().brighter());\n-                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n-                        lh.getAccText(), lr.getAccRect().x,\n-                        lr.getAccRect().y + lh.getAccFontMetrics().getAscent());\n-                    g.setColor(lh.getMenuItem().getBackground().darker());\n-                    SwingUtilities2.drawString(lh.getMenuItem(), g,\n-                        lh.getAccText(), lr.getAccRect().x - 1,\n-                        lr.getAccRect().y + lh.getFontMetrics().getAscent() - 1);\n-                }\n-            } else {\n-                \/\/ *** paint the accText normally\n-                if (model.isArmed()\n-                        || (lh.getMenuItem() instanceof JMenu\n-                        && model.isSelected())) {\n-                    g.setColor(acceleratorSelectionForeground);\n-                } else {\n-                    g.setColor(acceleratorForeground);\n-                }\n-                SwingUtilities2.drawString(lh.getMenuItem(), g, lh.getAccText(),\n-                        lr.getAccRect().x, lr.getAccRect().y +\n-                        lh.getAccFontMetrics().getAscent());\n-            }\n-        }\n+        SwingUtilities3.setDisabledForeground(disabledForeground);\n+        SwingUtilities3.setAcceleratorSelectionForeground(\n+                        acceleratorSelectionForeground);\n+        SwingUtilities3.setAcceleratorForeground(acceleratorForeground);\n+        SwingUtilities3.paintAccText(g, lh, lr);\n@@ -660,11 +599,1 @@\n-        if (lh.getArrowIcon() != null) {\n-            ButtonModel model = lh.getMenuItem().getModel();\n-            if (model.isArmed() || (lh.getMenuItem() instanceof JMenu\n-                                && model.isSelected())) {\n-                g.setColor(foreground);\n-            }\n-            if (lh.useCheckAndArrow()) {\n-                lh.getArrowIcon().paintIcon(lh.getMenuItem(), g,\n-                        lr.getArrowRect().x, lr.getArrowRect().y);\n-            }\n-        }\n+        SwingUtilities3.paintArrowIcon(g, lh, lr, foreground);\n@@ -674,6 +603,1 @@\n-        if(insets != null) {\n-            rect.x += insets.left;\n-            rect.y += insets.top;\n-            rect.width -= (insets.right + rect.x);\n-            rect.height -= (insets.bottom + rect.y);\n-        }\n+        SwingUtilities3.applyInsets(rect, insets);\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicMenuItemUI.java","additions":11,"deletions":87,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 8348760\n+ * @summary Verify if RadioButtonMenuItem bullet and\n+ *          JCheckboxMenuItem checkmark is shown if\n+ *          JRadioButtonMenuItem and JCheckboxMenuItem\n+ *          is rendered with ImageIcon in WindowsLookAndFeel\n+ * @requires (os.family == \"windows\")\n+ * @run main\/manual TestRadioAndCheckMenuItemWithIcon\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.BufferedImage;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.ButtonGroup;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPanel;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class TestRadioAndCheckMenuItemWithIcon {\n+\n+    private static final String INSTRUCTIONS =\n+            \"Clicking on the Menu above will show a\\n\"\n+            + \"JRadioButtonMenuItem group with 3 radiobutton menuitems\\n\"\n+            + \"and a JCheckBoxMenuItem group with 3 checkbox menuitems.\\n\"\n+            + \"\\n\"\n+            + \"First radiobutton menuitem is selected with imageicon of a red square.\\n\"\n+            + \"Second radiobutton menuitem is unselected with imageicon.\\n\"\n+            + \"Third radiobutton menuItem is unselected without imageicon.\\n\"\n+            + \"\\n\"\n+            + \"First checkbox menuitem is selected with imageicon.\\n\"\n+            + \"Second checkbox menuitem is unselected with imageicon.\\n\"\n+            + \"Third checkbox menuItem is unselected without imageicon.\\n\"\n+            + \"\\n\"\n+            + \"Verify that for first JRadioButtonMenuItem with imageicon,\\n\"\n+            + \"a bullet is shown alongside the imageicon and\\n\"\n+            + \"for first JCheckBoxMenuItem with imageicon\\n\"\n+            + \"a checkmark is shown alongside the imageicon.\\n\"\n+            + \"\\n\"\n+            + \"If bullet and checkmark is shown, test passes else fails.\";\n+\n+    private static final LinkedBlockingQueue<Boolean> resultQueue = new LinkedBlockingQueue<Boolean>(1);\n+\n+    private static void endTest(boolean result) {\n+        SwingUtilities.invokeLater(\n+                new Runnable() {\n+                    public void run() {\n+                        try {\n+                            resultQueue.put(result);\n+                        } catch (Exception ignored) {\n+                        }\n+                    }\n+                });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+        SwingUtilities.invokeLater(new Runnable() {\n+            public void run() {\n+                TestRadioAndCheckMenuItemWithIcon.doTest();\n+            }\n+        });\n+\n+        Boolean testPasses = resultQueue.take();\n+\n+        if (!testPasses) {\n+            throw new Exception(\"Test failed!\");\n+        }\n+    }\n+\n+    public static void doTest() {\n+        BufferedImage img = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = img.getGraphics();\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, img.getWidth(), img.getHeight());\n+        g.dispose();\n+\n+        BufferedImage img2 = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g2 = img2.getGraphics();\n+        g2.setColor(Color.red);\n+        g2.fillRect(0, 0, img2.getWidth(), img2.getHeight());\n+        g2.dispose();\n+\n+        JFrame frame = new JFrame(\"RadioButtonWithImageIcon\");\n+        ImageIcon imageIcon1 = new ImageIcon(img);\n+        ImageIcon imageIcon2 = new ImageIcon(img2);\n+        AbstractButton button1;\n+        JRadioButtonMenuItem m1 = new JRadioButtonMenuItem(\"JRadioButtonMenuItem 1\",\n+                imageIcon1);\n+        m1.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.ALT_MASK | ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n+        button1 = m1;\n+        button1.setSelected(true);\n+        AbstractButton button2 = new JRadioButtonMenuItem(\"JRadioButtonMenuItem 2\", imageIcon2);\n+        AbstractButton button3 = new JRadioButtonMenuItem(\"JRadioButtonMenuItem 3\");\n+\n+        ButtonGroup buttonGroup = new ButtonGroup();\n+        buttonGroup.add(button1);\n+        buttonGroup.add(button2);\n+        buttonGroup.add(button3);\n+\n+        AbstractButton check1 = new JCheckBoxMenuItem(\"JCheckBoxMenuItem 1\",\n+                imageIcon1);\n+        check1.setSelected(true);\n+        AbstractButton check2 = new JCheckBoxMenuItem(\"JCheckBoxMenuItem 2\", imageIcon1);\n+        JCheckBoxMenuItem c3;\n+        AbstractButton check3 = c3 = new JCheckBoxMenuItem(\"JCheckBoxMenuItem 3\");\n+        c3.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F5, ActionEvent.ALT_MASK | ActionEvent.CTRL_MASK | ActionEvent.SHIFT_MASK));\n+\n+        JMenu topLevel = new JMenu(\"Menu\");\n+\n+        topLevel.add(button1);\n+        topLevel.add(button2);\n+        topLevel.add(button3);\n+\n+        topLevel.addSeparator();\n+\n+        topLevel.add(check1);\n+        topLevel.add(check2);\n+        topLevel.add(check3);\n+\n+        AbstractButton menuitem1 = new JMenuItem(\"MenuItem1\");\n+        AbstractButton menuitem2 = new JMenuItem(\"MenuItem2\", imageIcon1);\n+        topLevel.addSeparator();\n+        topLevel.add(menuitem1);\n+        topLevel.add(menuitem2);\n+\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.add(topLevel);\n+\n+        frame.setJMenuBar(menuBar);\n+\n+        JTextArea instructions = new JTextArea();\n+        instructions.setText(INSTRUCTIONS);\n+        instructions.setEditable(false);\n+        instructions.setColumns(80);\n+        instructions.setRows(24);\n+\n+        JScrollPane scrInstructions = new JScrollPane(instructions);\n+        frame.getContentPane().setLayout(new BorderLayout());\n+\n+        frame.getContentPane().add(scrInstructions, BorderLayout.CENTER);\n+\n+        JPanel yesno = new JPanel();\n+        yesno.setLayout(new GridLayout(1, 2, 40, 40));\n+\n+        JButton yes = new JButton(\"Passes\");\n+        JButton no = new JButton(\"Fails\");\n+        yesno.add(yes);\n+        yesno.add(no);\n+\n+        yes.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                frame.dispose();\n+                endTest(true);\n+            }\n+        });\n+\n+        no.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                frame.dispose();\n+                endTest(false);\n+            }\n+        });\n+\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosed(WindowEvent e) {\n+                frame.dispose();\n+                endTest(false);\n+}\n+        });\n+\n+        frame.getContentPane().add(yesno, BorderLayout.SOUTH);\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n+\n","filename":"jdk\/test\/javax\/swing\/JMenuItem\/TestRadioAndCheckMenuItemWithIcon.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"}]}