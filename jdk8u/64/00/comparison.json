{"files":[{"patch":"@@ -273,2 +273,0 @@\n-    private static final Pattern MONTH = Pattern.compile(\"(?i)(jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)\");\n-    private static final Matcher DOW = Pattern.compile(\"(?i)(mon)|(tue)|(wed)|(thu)|(fri)|(sat)|(sun)\").matcher(\"\");\n@@ -498,9 +496,17 @@\n-        if (s.hasNext(MONTH)) {\n-            s.next(MONTH);\n-            for (int moy = 1; moy < 13; moy++) {\n-                if (s.match().group(moy) != null) {\n-                    return moy;\n-                }\n-            }\n-        }\n-        throw new IllegalArgumentException(\"Unknown month: \" + s.next());\n+        String mon = s.next();\n+        int len = mon.length();\n+\n+        if (mon.regionMatches(true, 0, \"January\", 0, len)) return 1;\n+        if (mon.regionMatches(true, 0, \"February\", 0, len)) return 2;\n+        if (mon.regionMatches(true, 0, \"March\", 0, len)) return 3;\n+        if (mon.regionMatches(true, 0, \"April\", 0, len)) return 4;\n+        if (mon.regionMatches(true, 0, \"May\", 0, len)) return 5;\n+        if (mon.regionMatches(true, 0, \"June\", 0, len)) return 6;\n+        if (mon.regionMatches(true, 0, \"July\", 0, len)) return 7;\n+        if (mon.regionMatches(true, 0, \"August\", 0, len)) return 8;\n+        if (mon.regionMatches(true, 0, \"September\", 0, len)) return 9;\n+        if (mon.regionMatches(true, 0, \"October\", 0, len)) return 10;\n+        if (mon.regionMatches(true, 0, \"November\", 0, len)) return 11;\n+        if (mon.regionMatches(true, 0, \"December\", 0, len)) return 12;\n+\n+        throw new IllegalArgumentException(\"Unknown month: \" + mon);\n@@ -509,9 +515,12 @@\n-    private int parseDayOfWeek(String str) {\n-        if (DOW.reset(str).matches()) {\n-            for (int dow = 1; dow < 8; dow++) {\n-                if (DOW.group(dow) != null) {\n-                    return dow;\n-                }\n-            }\n-        }\n-        throw new IllegalArgumentException(\"Unknown day-of-week: \" + str);\n+    private int parseDayOfWeek(String dow) {\n+        int len = dow.length();\n+\n+        if (dow.regionMatches(true, 0, \"Monday\", 0, len)) return 1;\n+        if (dow.regionMatches(true, 0, \"Tuesday\", 0, len)) return 2;\n+        if (dow.regionMatches(true, 0, \"Wednesday\", 0, len)) return 3;\n+        if (dow.regionMatches(true, 0, \"Thursday\", 0, len)) return 4;\n+        if (dow.regionMatches(true, 0, \"Friday\", 0, len)) return 5;\n+        if (dow.regionMatches(true, 0, \"Saturday\", 0, len)) return 6;\n+        if (dow.regionMatches(true, 0, \"Sunday\", 0, len)) return 7;\n+\n+        throw new IllegalArgumentException(\"Unknown day-of-week: \" + dow);\n","filename":"jdk\/make\/src\/classes\/build\/tools\/tzdb\/TzdbZoneRulesCompiler.java","additions":29,"deletions":20,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,5 +26,0 @@\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n@@ -52,9 +47,0 @@\n-    private static final Map<String,Month> abbreviations\n-                                = new HashMap<String,Month>(12);\n-\n-    static {\n-        for (Month m : Month.values()) {\n-            abbreviations.put(m.abbr, m);\n-        }\n-    }\n-\n@@ -75,5 +61,16 @@\n-        Month m = abbreviations.get(name);\n-        if (m != null) {\n-            return m;\n-        }\n-        return null;\n+        int len = name.length();\n+\n+        if (name.regionMatches(true, 0, \"January\", 0, len)) return Month.JANUARY;\n+        if (name.regionMatches(true, 0, \"February\", 0, len)) return Month.FEBRUARY;\n+        if (name.regionMatches(true, 0, \"March\", 0, len)) return Month.MARCH;\n+        if (name.regionMatches(true, 0, \"April\", 0, len)) return Month.APRIL;\n+        if (name.regionMatches(true, 0, \"May\", 0, len)) return Month.MAY;\n+        if (name.regionMatches(true, 0, \"June\", 0, len)) return Month.JUNE;\n+        if (name.regionMatches(true, 0, \"July\", 0, len)) return Month.JULY;\n+        if (name.regionMatches(true, 0, \"August\", 0, len)) return Month.AUGUST;\n+        if (name.regionMatches(true, 0, \"September\", 0, len)) return Month.SEPTEMBER;\n+        if (name.regionMatches(true, 0, \"October\", 0, len)) return Month.OCTOBER;\n+        if (name.regionMatches(true, 0, \"November\", 0, len)) return Month.NOVEMBER;\n+        if (name.regionMatches(true, 0, \"December\", 0, len)) return Month.DECEMBER;\n+\n+        throw new IllegalArgumentException(\"Unknown month: \" + name);\n","filename":"jdk\/test\/sun\/util\/calendar\/zi\/Month.java","additions":17,"deletions":20,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,5 +26,0 @@\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n@@ -39,7 +34,0 @@\n-    private static final Map<String,DayOfWeek> abbreviations = new HashMap<String,DayOfWeek>(7);\n-    static {\n-        for (DayOfWeek day : DayOfWeek.values()) {\n-            abbreviations.put(day.getAbbr(), day);\n-        }\n-    }\n-\n@@ -171,2 +159,12 @@\n-    private static DayOfWeek getDOW(String abbr) {\n-        return abbreviations.get(abbr);\n+    private static DayOfWeek getDOW(String name) {\n+        int len = name.length();\n+\n+        if (name.regionMatches(true, 0, \"Monday\", 0, len)) return DayOfWeek.MONDAY;\n+        if (name.regionMatches(true, 0, \"Tuesday\", 0, len)) return DayOfWeek.TUESDAY;\n+        if (name.regionMatches(true, 0, \"Wednesday\", 0, len)) return DayOfWeek.WEDNESDAY;\n+        if (name.regionMatches(true, 0, \"Thursday\", 0, len)) return DayOfWeek.THURSDAY;\n+        if (name.regionMatches(true, 0, \"Friday\", 0, len)) return DayOfWeek.FRIDAY;\n+        if (name.regionMatches(true, 0, \"Saturday\", 0, len)) return DayOfWeek.SATURDAY;\n+        if (name.regionMatches(true, 0, \"Sunday\", 0, len)) return DayOfWeek.SUNDAY;\n+\n+        throw new IllegalArgumentException(\"Unknown day-of-week: \" + name);\n@@ -177,1 +175,1 @@\n-     * name defined in {@link java.util.Calenda}.\n+     * name defined in {@link java.util.Calendar}.\n","filename":"jdk\/test\/sun\/util\/calendar\/zi\/RuleDay.java","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"}]}