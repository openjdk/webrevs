{"files":[{"patch":"@@ -423,1 +423,1 @@\n-        return extractCodepoints(val, index, len, buf, 0);\n+        return extractCodepoints(val, index, end, buf, 0);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8054307 8311906\n+ * @bug 8054307 8311906 8321514\n@@ -28,0 +28,2 @@\n+ * @run main\/othervm -XX:+CompactStrings Chars\n+ * @run main\/othervm -XX:-CompactStrings Chars\n@@ -48,0 +50,1 @@\n+            testIntsSubrange(ccExp);\n@@ -75,0 +78,1 @@\n+            testIntsSubrange(ccExp);\n@@ -107,0 +111,21 @@\n+    static void testIntsSubrange(int[] expected) {\n+        int[] offsets = { 7, 31 };   \/\/ offsets to test\n+        int LENGTH = 13;\n+        for (int i = 0; i < offsets.length; i++) {\n+            int offset = Math.max(0, offsets[i]);       \/\/ confine to the input array\n+            int count = Math.min(LENGTH, expected.length - offset);\n+            String str = new String(expected, offset, count);\n+            int[] actual = str.chars().toArray();\n+            int errOffset = Arrays.mismatch(actual, 0, actual.length,\n+                    expected, offset, offset + count);\n+            if (errOffset >= 0) {\n+                System.err.printf(\"expected[%d] (%d) != actual[%d] (%d)%n\",\n+                        offset + errOffset, expected[offset + errOffset],\n+                        errOffset, actual[errOffset]);\n+                System.err.println(\"expected: \" + Arrays.toString(expected));\n+                System.err.println(\"actual: \" + Arrays.toString(actual));\n+                throw new RuntimeException(\"testIntsSubrange failed!\");\n+            }\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/String\/Chars.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"}]}