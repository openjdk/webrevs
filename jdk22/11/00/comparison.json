{"files":[{"patch":"@@ -131,2 +131,2 @@\n-                .assertFailed()\n-                .assertStdErrContains(\"alignment constraint for address\");\n+                .shouldNotHaveExitValue(0)\n+                .stderrShouldContain(\"alignment constraint for address\");\n","filename":"test\/jdk\/java\/foreign\/TestAddressDereference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n@@ -36,0 +38,2 @@\n+import java.util.function.Consumer;\n+import java.util.stream.Stream;\n@@ -39,1 +43,0 @@\n-import static org.testng.Assert.assertTrue;\n@@ -47,1 +50,9 @@\n-                .assertSuccess();\n+                .shouldNotHaveExitValue(0)\n+                .shouldNotHaveFatalError();\n+    }\n+\n+    @Test\n+    public void testUDowncallAllocFailure() throws IOException, InterruptedException {\n+        runInNewProcess(DowncallRunner.class, true, List.of(\"-XX:ReservedCodeCacheSize=3M\"), List.of())\n+                .shouldNotHaveExitValue(0)\n+                .shouldNotHaveFatalError();\n@@ -52,7 +63,4 @@\n-            try (Arena arena = Arena.ofConfined()) {\n-                while (true) {\n-                    \/\/ allocate stubs until we crash\n-                    upcallStub(UpcallRunner.class, \"target\", FunctionDescriptor.ofVoid(), arena);\n-                }\n-            } catch (OutOfMemoryError e) {\n-                assertTrue(e.getMessage().contains(\"Failed to allocate upcall stub\"));\n+            FunctionDescriptor descriptor = FunctionDescriptor.ofVoid();\n+            MethodHandle target = MethodHandles.lookup().findStatic(UpcallRunner.class, \"target\", descriptor.toMethodType());\n+            while (true) {\n+                LINKER.upcallStub(target, descriptor, Arena.ofAuto());\n@@ -66,0 +74,21 @@\n+\n+    public static class DowncallRunner extends NativeTestHelper {\n+\n+        private static final int MAX_ARITY = 5;\n+\n+        private static void mapper(FunctionDescriptor fd, Consumer<FunctionDescriptor> sink) {\n+            for (MemoryLayout l : List.of(C_INT, C_LONG_LONG, C_DOUBLE, C_FLOAT, C_SHORT)) {\n+                sink.accept(fd.appendArgumentLayouts(l));\n+            }\n+        }\n+\n+        public static void main(String[] args) throws Throwable {\n+            Linker linker = Linker.nativeLinker();\n+            Stream<FunctionDescriptor> stream = Stream.of(FunctionDescriptor.ofVoid());\n+            for (int i = 0; i < MAX_ARITY; i++) {\n+                stream = stream.mapMulti(DowncallRunner::mapper);\n+            }\n+\n+            stream.forEach(linker::downcallHandle);\n+        }\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestStubAllocFailure.java","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-                .assertFailed()\n-                .assertStdErrContains(\"Testing upcall exceptions\");\n+                .shouldNotHaveExitValue(0)\n+                .stderrShouldContain(\"Testing upcall exceptions\");\n","filename":"test\/jdk\/java\/foreign\/TestUpcallException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -27,1 +28,0 @@\n-import java.io.BufferedReader;\n@@ -29,2 +29,0 @@\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n@@ -35,2 +33,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotEquals;\n@@ -40,5 +36,0 @@\n-    public record Output(int result, List<String> stdout, List<String> stderr) {\n-        private static void assertContains(List<String> lines, String shouldInclude, String name) {\n-            assertTrue(lines.stream().anyMatch(line -> line.contains(shouldInclude)),\n-                \"Did not find '\" + shouldInclude + \"' in \" + name);\n-        }\n@@ -46,22 +37,1 @@\n-        public Output assertFailed() {\n-            assertNotEquals(result, 0);\n-            return this;\n-        }\n-\n-        public Output assertSuccess() {\n-            assertEquals(result, 0);\n-            return this;\n-        }\n-\n-        public Output assertStdErrContains(String shouldInclude) {\n-            assertContains(stderr, shouldInclude, \"stderr\");\n-            return this;\n-        }\n-\n-        public Output assertStdOutContains(String shouldInclude) {\n-            assertContains(stdout, shouldInclude, \"stdout\");\n-            return this;\n-        }\n-    }\n-\n-    public Output runInNewProcess(Class<?> target, boolean useSpec, String... programArgs) throws IOException, InterruptedException {\n+    public OutputAnalyzer runInNewProcess(Class<?> target, boolean useSpec, String... programArgs) throws IOException, InterruptedException {\n@@ -71,1 +41,1 @@\n-    public Output runInNewProcess(Class<?> target, boolean useSpec, List<String> vmArgs, List<String> programArgs) throws IOException, InterruptedException {\n+    public OutputAnalyzer runInNewProcess(Class<?> target, boolean useSpec, List<String> vmArgs, List<String> programArgs) throws IOException, InterruptedException {\n@@ -89,7 +59,3 @@\n-        List<String> outLines = linesFromStream(process.getInputStream());\n-        outLines.forEach(System.out::println);\n-        List<String> errLines = linesFromStream(process.getErrorStream());\n-        errLines.forEach(System.err::println);\n-\n-        return new Output(process.exitValue(), outLines, errLines);\n-    }\n+        OutputAnalyzer output = new OutputAnalyzer(process);\n+        output.outputTo(System.out);\n+        output.errorTo(System.err);\n@@ -97,4 +63,1 @@\n-    private static List<String> linesFromStream(InputStream stream) throws IOException {\n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {\n-            return reader.lines().toList();\n-        }\n+        return output;\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":7,"deletions":44,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-        runInNewProcess(Runner.class, true).assertFailed().assertStdOutContains(\"wrong thread state for upcall\");\n+        runInNewProcess(Runner.class, true)\n+            .shouldNotHaveExitValue(0)\n+            .stdoutShouldContain(\"wrong thread state for upcall\");\n","filename":"test\/jdk\/java\/foreign\/critical\/TestCriticalUpcall.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,3 @@\n-        runInNewProcess(Runner.class, spec).assertFailed().assertStdErrContains(\"Heap segment not allowed\");\n+        runInNewProcess(Runner.class, spec)\n+            .shouldNotHaveExitValue(0)\n+            .stderrShouldContain(\"Heap segment not allowed\");\n","filename":"test\/jdk\/java\/foreign\/passheapsegment\/TestPassHeapSegment.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    private static final String FATAL_ERROR_PAT = \"# A fatal error has been detected.*\";\n+\n@@ -865,0 +867,7 @@\n+    \/**\n+     * Assert that we did not crash with a hard VM error (generating an hs_err_pidXXX.log)\n+     *\/\n+    public void shouldNotHaveFatalError() {\n+        shouldNotMatch(FATAL_ERROR_PAT);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}