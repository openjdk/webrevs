{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1292,1 +1292,1 @@\n-            .filter(p -> p.toFile().isFile())\n+            .filter(p -> p.toFile().isFile() && !p.endsWith(\"jdk11_backward\"))\n@@ -1298,0 +1298,2 @@\n+                    boolean inVanguard = false;\n+                    boolean inRearguard = false;\n@@ -1299,1 +1301,28 @@\n-                        if (line.contains(\"#STDOFF\")) continue;\n+                        \/\/ Interpret the line in rearguard mode so that STD\/DST\n+                        \/\/ correctly handles negative DST cases, such as \"GMT\/IST\"\n+                        \/\/ vs. \"IST\/GMT\" case for Europe\/Dublin\n+                        if (inVanguard) {\n+                            if (line.startsWith(\"# Rearguard\")) {\n+                                inVanguard = false;\n+                                inRearguard = true;\n+                            }\n+                            continue;\n+                        } else if (line.startsWith(\"# Vanguard\")) {\n+                            inVanguard = true;\n+                            continue;\n+                        }\n+                        if (inRearguard) {\n+                            if (line.startsWith(\"# End of rearguard\")) {\n+                                inRearguard = false;\n+                                continue;\n+                            } else {\n+                                if (line.startsWith(\"#\\t\")) {\n+                                    line = line.substring(1); \/\/ omit #\n+                                }\n+                            }\n+                        }\n+                        if (line.isBlank() || line.matches(\"^[ \\t]*#.*\")) {\n+                            \/\/ ignore blank\/comment lines\n+                            continue;\n+                        }\n+                        \/\/ remove comments in-line\n@@ -1304,0 +1333,3 @@\n+                            if (zone != null) {\n+                                tzdbShortNamesMap.put(zone, format + NBSP + rule);\n+                            }\n@@ -1310,1 +1342,2 @@\n-                                if (line.isBlank()) {\n+                                if (line.startsWith(\"Rule\") ||\n+                                    line.startsWith(\"Link\")) {\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8303440 8317979\n+ * @bug 8303440 8317979 8322647\n@@ -46,2 +46,2 @@\n-        \/\/ Assuming CLDR's SHORT name for \"America\/Juneau\"\n-        \/\/ produces \"UTC\\u212209:00\"\n+        \/\/ Assuming CLDR's SHORT name for \"America\/Manaus\"\n+        \/\/ produces \"UTC\\u221204:00\"\n@@ -63,1 +63,1 @@\n-        var zdt = ZonedDateTime.of(2023, 3, 3, 0, 0, 0, 0, ZoneId.of(\"America\/Juneau\"));\n+        var zdt = ZonedDateTime.of(2023, 3, 3, 0, 0, 0, 0, ZoneId.of(\"America\/Manaus\"));\n@@ -65,1 +65,1 @@\n-        assertEquals(formatted, \"UTC\\u221209:00\");\n+        assertEquals(formatted, \"UTC\\u221204:00\");\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestUTCParse.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8181157 8202537 8234347 8236548 8261279\n+ * @bug 8181157 8202537 8234347 8236548 8261279 8322647\n@@ -28,1 +28,2 @@\n- * @summary Checks CLDR time zone names are generated correctly at runtime\n+ * @summary Checks CLDR time zone names are generated correctly at\n+ * either build or runtime\n@@ -48,2 +49,2 @@\n-    @DataProvider(name=\"noResourceTZs\")\n-    Object[][] data() {\n+    @DataProvider\n+    Object[][] sampleTZs() {\n@@ -177,0 +178,38 @@\n+\n+            \/\/ Short names derived from TZDB at build time\n+            {\"Europe\/Lisbon\",    Locale.US, \"Western European Standard Time\",\n+                        \"WET\",\n+                        \"Western European Summer Time\",\n+                        \"WEST\",\n+                        \"Western European Time\",\n+                        \"WET\"},\n+            {\"Atlantic\/Azores\",    Locale.US, \"Azores Standard Time\",\n+                        \"GMT-01:00\",\n+                        \"Azores Summer Time\",\n+                        \"GMT\",\n+                        \"Azores Time\",\n+                        \"GMT-01:00\"},\n+            {\"Australia\/Perth\",    Locale.US, \"Australian Western Standard Time\",\n+                        \"AWST\",\n+                        \"Australian Western Daylight Time\",\n+                        \"AWDT\",\n+                        \"Western Australia Time\",\n+                        \"AWT\"},\n+            {\"Africa\/Harare\",    Locale.US, \"Central Africa Time\",\n+                        \"CAT\",\n+                        \"Harare Daylight Time\",\n+                        \"CAT\",\n+                        \"Harare Time\",\n+                        \"CAT\"},\n+            {\"Europe\/Dublin\",    Locale.US, \"Greenwich Mean Time\",\n+                        \"GMT\",\n+                        \"Irish Standard Time\",\n+                        \"IST\",\n+                        \"Dublin Time\",\n+                        \"GMT\"},\n+            {\"Pacific\/Gambier\",    Locale.US, \"Gambier Time\",\n+                        \"GMT-09:00\",\n+                        \"Gambier Daylight Time\",\n+                        \"GMT-09:00\",\n+                        \"Gambier Time\",\n+                        \"GMT-09:00\"},\n@@ -181,1 +220,1 @@\n-    @Test(dataProvider=\"noResourceTZs\")\n+    @Test(dataProvider=\"sampleTZs\")\n@@ -200,1 +239,1 @@\n-            Arrays.stream(Locale.getAvailableLocales())\n+            Locale.availableLocales()\n@@ -204,1 +243,1 @@\n-                .flatMap(zs -> Arrays.stream(zs))\n+                .flatMap(Arrays::stream)\n@@ -206,4 +245,2 @@\n-                .flatMap(names -> Arrays.stream(names))\n-                .filter(name -> Objects.isNull(name) || name.isEmpty())\n-                .findAny()\n-                .isPresent(),\n+                .flatMap(Arrays::stream)\n+                .anyMatch(name -> Objects.isNull(name) || name.isEmpty()),\n","filename":"test\/jdk\/sun\/util\/resources\/cldr\/TimeZoneNamesTest.java","additions":49,"deletions":12,"binary":false,"changes":61,"status":"modified"}]}