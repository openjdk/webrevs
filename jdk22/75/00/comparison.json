{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -406,1 +406,1 @@\n-                               \"marked %d pinned count %u reclaim candidate %d type array %d\",\n+                               \"marked %d pinned count %zu reclaim candidate %d type array %d\",\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -427,1 +427,1 @@\n-  st->print(\"|%3u\", Atomic::load(&_pinned_object_count));\n+  st->print(\"|%3zu\", Atomic::load(&_pinned_object_count));\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,1 +260,1 @@\n-  volatile uint _pinned_object_count;\n+  volatile size_t _pinned_object_count;\n@@ -411,1 +411,1 @@\n-  uint pinned_count() const { return Atomic::load(&_pinned_object_count); }\n+  size_t pinned_count() const { return Atomic::load(&_pinned_object_count); }\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -557,1 +557,1 @@\n-  Atomic::add(&_pinned_object_count, 1u, memory_order_relaxed);\n+  Atomic::add(&_pinned_object_count, (size_t)1, memory_order_relaxed);\n@@ -561,1 +561,1 @@\n-  Atomic::sub(&_pinned_object_count, 1u, memory_order_relaxed);\n+  Atomic::sub(&_pinned_object_count, (size_t)1, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-  nonstatic_field(HeapRegion, _pinned_object_count, volatile uint)            \\\n+  volatile_nonstatic_field(HeapRegion, _pinned_object_count, size_t)          \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}