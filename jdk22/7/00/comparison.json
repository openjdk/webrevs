{"files":[{"patch":"@@ -634,0 +634,3 @@\n+     *     <li>For write operations, the accessed memory segment must not be\n+     *     {@link MemorySegment#isReadOnly() read only}, or an\n+     *     {@link IllegalArgumentException} is thrown.<\/li>\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -872,1 +872,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -897,1 +897,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1272,0 +1272,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -1309,0 +1311,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -1496,1 +1500,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is\n+     * @throws IllegalArgumentException if {@code dstSegment} is\n@@ -1555,1 +1559,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n@@ -1608,1 +1612,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1646,1 +1650,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1684,1 +1688,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1722,1 +1726,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1760,1 +1764,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1798,1 +1802,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1836,1 +1840,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1874,1 +1878,1 @@\n-     * @throws UnsupportedOperationException if this segment is\n+     * @throws IllegalArgumentException if this segment is\n@@ -1924,1 +1928,1 @@\n-     * @throws UnsupportedOperationException if {@code value} is not a\n+     * @throws IllegalArgumentException if {@code value} is not a\n@@ -1926,0 +1930,2 @@\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -2058,1 +2064,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2081,1 +2087,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2104,1 +2110,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2149,1 +2155,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2194,1 +2200,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2239,1 +2245,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2284,1 +2290,1 @@\n-     * @throws UnsupportedOperationException if this segment is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if this segment is {@linkplain #isReadOnly() read-only}\n@@ -2339,1 +2345,3 @@\n-     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalArgumentException if {@code value} is not a {@linkplain #isNative() native} segment\n+     * @throws IllegalArgumentException if this segment is\n+     *         {@linkplain #isReadOnly() read-only}\n@@ -2463,1 +2471,1 @@\n-     * @throws UnsupportedOperationException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n+     * @throws IllegalArgumentException if {@code dstSegment} is {@linkplain #isReadOnly() read-only}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-     * @throws UnsupportedOperationException if {@code value} is not\n+     * @throws IllegalArgumentException if {@code value} is not\n@@ -673,0 +673,2 @@\n+     * @throws IllegalArgumentException if the {@code segment} is\n+     *         {@linkplain MemorySegment#isReadOnly() read-only}\n@@ -675,1 +677,1 @@\n-        Objects.requireNonNull(segment);\n+        assertWritable(segment);\n@@ -703,0 +705,2 @@\n+     * @throws IllegalArgumentException if the {@code segment} is\n+     *         {@linkplain MemorySegment#isReadOnly() read-only}\n@@ -705,1 +709,9 @@\n-        return (AbstractMemorySegmentImpl)Objects.requireNonNull(segment);\n+        assertWritable(segment);\n+        return (AbstractMemorySegmentImpl)segment;\n+    }\n+\n+    private static void assertWritable(MemorySegment segment) {\n+        \/\/ Implicit null check\n+        if (segment.isReadOnly()) {\n+            throw new IllegalArgumentException(\"read-only segment\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-            throw new UnsupportedOperationException(\"Attempt to write a read-only segment\");\n+            throw new IllegalArgumentException(\"Attempt to write a read-only segment\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.foreign.MemoryLayout;\n@@ -32,1 +31,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -34,1 +32,0 @@\n-import java.lang.invoke.MethodType;\n@@ -243,1 +240,1 @@\n-        } catch (UnsupportedOperationException ex) {\n+        } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n@@ -124,1 +124,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n@@ -188,1 +188,1 @@\n-            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.foreign.MemoryLayout;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -103,0 +103,10 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testReadOnlySlicingAllocator() {\n+        SegmentAllocator.slicingAllocator(MemorySegment.ofArray(new int[0]).asReadOnly());\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testReadOnlyPrefixAllocator() {\n+        SegmentAllocator.prefixAllocator(MemorySegment.ofArray(new int[0]).asReadOnly());\n+    }\n+\n@@ -163,0 +173,19 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void testArenaAllocateFromHeapSegment() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            var heapSegment = MemorySegment.ofArray(new int[]{1});\n+            arena.allocateFrom(ValueLayout.ADDRESS, heapSegment);\n+        }\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void testAllocatorAllocateFromHeapSegment() {\n+        try (Arena arena = Arena.ofConfined()) {\n+            SegmentAllocator allocator = SegmentAllocator.prefixAllocator(arena.allocate(16));\n+            var heapSegment = MemorySegment.ofArray(new int[]{1});\n+            allocator.allocateFrom(ValueLayout.ADDRESS, heapSegment);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    @Test(expectedExceptions = UnsupportedOperationException.class, dataProvider = \"segmentKinds\")\n+    @Test(expectedExceptions = IllegalArgumentException.class, dataProvider = \"segmentKinds\")\n@@ -87,0 +87,9 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Attempt to write a read-only segment.*\")\n+    public void badCopy6Arg() {\n+        try (Arena scope = Arena.ofConfined()) {\n+            MemorySegment dest = scope.allocate(ValueLayout.JAVA_INT).asReadOnly();\n+            MemorySegment.copy(new int[1],0, dest, ValueLayout.JAVA_INT, 0 ,1); \/\/ should throw\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-    @Test(dataProvider = \"segmentFactories\", expectedExceptions = UnsupportedOperationException.class)\n+    @Test(dataProvider = \"segmentFactories\", expectedExceptions = IllegalArgumentException.class)\n@@ -334,0 +334,6 @@\n+    @Test(dataProvider = \"segmentFactories\", expectedExceptions = IllegalArgumentException.class)\n+    public void testFromStringIllegalAccessMode(Supplier<MemorySegment> segmentSupplier) {\n+        MemorySegment segment = segmentSupplier.get();\n+        segment.asReadOnly().setString(0, \"a\");\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}