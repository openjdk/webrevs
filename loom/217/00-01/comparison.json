{"files":[{"patch":"@@ -2039,1 +2039,1 @@\n-    _name = nullptr; \/\/java_lang_Thread::name(_java_thread());\n+    _name = java_lang_Thread::name(_java_thread());\n@@ -2235,3 +2235,1 @@\n-      if (_transition_disabler != nullptr) {\n-        delete _transition_disabler;\n-      }\n+      reset();\n@@ -2242,0 +2240,6 @@\n+    void reset() {\n+      if (_transition_disabler != nullptr) {\n+        delete _transition_disabler;\n+        _transition_disabler = nullptr;\n+      }\n+    }\n@@ -2270,0 +2274,3 @@\n+  \/\/ Handle thread name\n+  Handle thread_name(THREAD, cl._name);\n+\n@@ -2271,4 +2278,4 @@\n-  InstanceKlass* k = vmClasses::StackTraceElement_klass();\n-  assert(k != nullptr, \"must be loaded in 1.4+\");\n-  if (k->should_be_initialized()) {\n-    k->initialize(CHECK_NULL);\n+  InstanceKlass* ste_klass = vmClasses::StackTraceElement_klass();\n+  assert(ste_klass != nullptr, \"must be loaded in 1.4+\");\n+  if (ste_klass->should_be_initialized()) {\n+    ste_klass->initialize(CHECK_NULL);\n@@ -2277,1 +2284,1 @@\n-  objArrayHandle trace = oopFactory::new_objArray_handle(k, cl._depth, CHECK_NULL);\n+  int max_locks = cl._locks != nullptr ? cl._locks->length() : 0;\n@@ -2286,1 +2293,2 @@\n-  int max_locks = cl._locks != nullptr ? cl._locks->length() : 0;\n+  objArrayHandle trace = oopFactory::new_objArray_handle(ste_klass, cl._depth, CHECK_NULL);\n+\n@@ -2297,1 +2305,1 @@\n-                           k, \/\/ vmClasses::StackTraceElement_klass()\n+                           ste_klass,\n@@ -2326,0 +2334,3 @@\n+  \/\/ all oops are handled, can enable transitions.\n+  transition_disabler.reset();\n+\n@@ -2336,1 +2347,1 @@\n-  \/\/args.push_oop(Handle(THREAD, cl._name));\n+  args.push_oop(thread_name);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -750,1 +750,1 @@\n-  template(jdk_internal_vm_ThreadSnapshot_ctor_signature, \"([Ljava\/lang\/StackTraceElement;[Ljdk\/internal\/vm\/ThreadSnapshot$ThreadLock;I)V\") \\\n+  template(jdk_internal_vm_ThreadSnapshot_ctor_signature, \"([Ljava\/lang\/StackTraceElement;[Ljdk\/internal\/vm\/ThreadSnapshot$ThreadLock;Ljava\/lang\/String;I)V\") \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-                           \/\/String name,\n+                           String name,\n@@ -64,3 +64,0 @@\n-        if (snapshot.name == null) {\n-            snapshot.name = thread.getName();  \/\/ temp\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadSnapshot.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}