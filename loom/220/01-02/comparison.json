{"files":[{"patch":"@@ -1880,12 +1880,17 @@\n-struct LockInfo {\n-  \/\/ should be synced with jdk.internal.vm.ThreadSnapshot.OwnedLockType constants\n-  enum OwnedLockType {\n-    ELIMINATED_SCALAR_REPLACED = 0,\n-    ELIMINATED_MONITOR = 1,\n-    LOCKED = 2,\n-  };\n-  \/\/ should be synced with jdk.internal.vm.ThreadSnapshot.BlockerLockType constants\n-  enum BlockerLockType {\n-    PARKING_TO_WAIT = 0,\n-    WAITING_TO_LOCK = 1,\n-    WAITING_ON = 2,\n+class GetThreadSnapshotClosure : public HandshakeClosure {\n+public:\n+  struct OwnedLock {\n+    \/\/ should be synced with ordinals of jdk.internal.vm.ThreadSnapshot.OwnedLockType enum\n+    enum Type {\n+      NOTHING = -1,\n+      ELIMINATED_SCALAR_REPLACED = 0,\n+      ELIMINATED_MONITOR = 1,\n+      LOCKED = 2,\n+    };\n+\n+    int _depth;\n+    Type _type;\n+    OopHandle _obj;\n+\n+    OwnedLock(int depth, Type type, OopHandle obj): _depth(depth), _type(type), _obj(obj) {}\n+    OwnedLock(): _depth(0), _type(NOTHING), _obj(nullptr) {}\n@@ -1894,3 +1899,8 @@\n-  int _depth;\n-  int _type;\n-  OopHandle _obj;\n+  struct Blocker {\n+    \/\/ should be synced with ordinals of jdk.internal.vm.ThreadSnapshot.BlockerLockType enum\n+    enum Type {\n+      NOTHING = -1,\n+      PARK_BLOCKER = 0,\n+      WAITING_TO_LOCK = 1,\n+      WAITING_ON = 2,\n+    };\n@@ -1898,3 +1908,2 @@\n-  LockInfo(int depth, OwnedLockType type, OopHandle obj) : _depth(depth), _type(type), _obj(obj) {}\n-  LockInfo(BlockerLockType type, OopHandle obj): _depth(0), _type(type), _obj(obj) {}\n-  LockInfo() : _depth(-1), _type(0), _obj(nullptr) {}\n+    Type _type;\n+    OopHandle _obj;\n@@ -1902,4 +1911,7 @@\n-  bool is_empty() const {\n-    return _obj.is_empty();\n-  }\n-};\n+    Blocker(Type type, OopHandle obj): _type(type), _obj(obj) {}\n+    Blocker(): _type(NOTHING), _obj(nullptr) {}\n+\n+    bool is_empty() const {\n+      return _type == NOTHING;\n+    }\n+  };\n@@ -1907,3 +1919,0 @@\n-class GetThreadSnapshotClosure : public HandshakeClosure {\n-public:\n-  JavaThread* _calling_thread;\n@@ -1918,2 +1927,2 @@\n-  GrowableArray<LockInfo>* _locks;\n-  LockInfo _blocker;\n+  GrowableArray<OwnedLock>* _locks;\n+  Blocker _blocker;\n@@ -1924,1 +1933,0 @@\n-      _calling_thread(calling_thread),\n@@ -1961,0 +1969,1 @@\n+        OopHandle lock_object;\n@@ -1962,3 +1971,1 @@\n-        if (locs->is_empty()) {\n-          _blocker = LockInfo(LockInfo::WAITING_ON, OopHandle());\n-        } else {\n+        if (!locs->is_empty()) {\n@@ -1968,10 +1975,1 @@\n-            _blocker = LockInfo(LockInfo::WAITING_ON, OopHandle(Universe::vm_global(), o()));\n-          }\n-        }\n-      } else {\n-        oop park_blocker = java_lang_Thread::park_blocker(_java_thread());\n-        if (park_blocker != nullptr) {\n-          _blocker = LockInfo(LockInfo::PARKING_TO_WAIT, OopHandle(Universe::vm_global(), park_blocker));\n-          if (park_blocker->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n-            oop blocker_owner = java_util_concurrent_locks_AbstractOwnableSynchronizer::get_owner_threadObj(park_blocker);\n-            _blocker_owner = OopHandle(Universe::vm_global(), blocker_owner);\n+            lock_object = OopHandle(Universe::vm_global(), o());\n@@ -1980,0 +1978,2 @@\n+\n+        _blocker = Blocker(Blocker::WAITING_ON, lock_object);\n@@ -1990,1 +1990,1 @@\n-            _locks->push(LockInfo(depth, LockInfo::ELIMINATED_SCALAR_REPLACED, OopHandle(Universe::vm_global(), k->klass_holder())));\n+            _locks->push(OwnedLock(depth, OwnedLock::ELIMINATED_SCALAR_REPLACED, OopHandle(Universe::vm_global(), k->klass_holder())));\n@@ -1994,1 +1994,1 @@\n-              _locks->push(LockInfo(depth, LockInfo::ELIMINATED_MONITOR, OopHandle(Universe::vm_global(), owner)));\n+              _locks->push(OwnedLock(depth, OwnedLock::ELIMINATED_MONITOR, OopHandle(Universe::vm_global(), owner)));\n@@ -2018,1 +2018,1 @@\n-                _blocker = LockInfo(LockInfo::WAITING_TO_LOCK, OopHandle(Universe::vm_global(), monitor->owner()));\n+                _blocker = Blocker(Blocker::WAITING_TO_LOCK, OopHandle(Universe::vm_global(), monitor->owner()));\n@@ -2023,1 +2023,1 @@\n-          _locks->push(LockInfo(depth, LockInfo::LOCKED, OopHandle(Universe::vm_global(), monitor->owner())));\n+          _locks->push(OwnedLock(depth, OwnedLock::LOCKED, OopHandle(Universe::vm_global(), monitor->owner())));\n@@ -2072,0 +2072,9 @@\n+    oop park_blocker = java_lang_Thread::park_blocker(_java_thread());\n+    if (park_blocker != nullptr) {\n+      _blocker = Blocker(Blocker::PARK_BLOCKER, OopHandle(Universe::vm_global(), park_blocker));\n+      if (park_blocker->is_a(vmClasses::java_util_concurrent_locks_AbstractOwnableSynchronizer_klass())) {\n+        oop blocker_owner = java_util_concurrent_locks_AbstractOwnableSynchronizer::get_owner_threadObj(park_blocker);\n+        _blocker_owner = OopHandle(Universe::vm_global(), blocker_owner);\n+      }\n+    }\n+\n@@ -2082,1 +2091,1 @@\n-    _locks = new (mtInternal) GrowableArray<LockInfo>(init_length, mtInternal);\n+    _locks = new (mtInternal) GrowableArray<OwnedLock>(init_length, mtInternal);\n@@ -2270,0 +2279,1 @@\n+  static int _carrierThread_offset;\n@@ -2272,1 +2282,2 @@\n-  static int _blockerLock_offset;\n+  static int _blockerTypeOrdinal_offset;\n+  static int _blockerObject_offset;\n@@ -2278,0 +2289,1 @@\n+    JavaClasses::compute_offset(_carrierThread_offset, klass, \"carrierThread\", vmSymbols::thread_signature(), false);\n@@ -2280,1 +2292,2 @@\n-    JavaClasses::compute_offset(_blockerLock_offset, klass, \"blockerLock\", vmSymbols::jdk_internal_vm_ThreadLock_signature(), false);\n+    JavaClasses::compute_offset(_blockerTypeOrdinal_offset, klass, \"blockerTypeOrdinal\", vmSymbols::int_signature(), false);\n+    JavaClasses::compute_offset(_blockerObject_offset, klass, \"blockerObject\", vmSymbols::object_signature(), false);\n@@ -2302,0 +2315,3 @@\n+  static void set_carrier_thread(oop snapshot, oop carrier_thread) {\n+    snapshot->obj_field_put(_carrierThread_offset, carrier_thread);\n+  }\n@@ -2308,2 +2324,3 @@\n-  static void set_blocker_lock(oop snapshot, oop lock) {\n-    snapshot->obj_field_put(_blockerLock_offset, lock);\n+  static void set_blocker(oop snapshot, int type_ordinal, oop lock) {\n+    snapshot->int_field_put(_blockerTypeOrdinal_offset, type_ordinal);\n+    snapshot->obj_field_put(_blockerObject_offset, lock);\n@@ -2319,0 +2336,1 @@\n+int jdk_internal_vm_ThreadSnapshot::_carrierThread_offset;\n@@ -2321,1 +2339,2 @@\n-int jdk_internal_vm_ThreadSnapshot::_blockerLock_offset;\n+int jdk_internal_vm_ThreadSnapshot::_blockerTypeOrdinal_offset;\n+int jdk_internal_vm_ThreadSnapshot::_blockerObject_offset;\n@@ -2352,1 +2371,1 @@\n-\n+  Handle carrier_thread;\n@@ -2357,1 +2376,1 @@\n-    oop carrier_thread = java_lang_VirtualThread::carrier_thread(java_thread());\n+    carrier_thread = Handle(THREAD, java_lang_VirtualThread::carrier_thread(java_thread()));\n@@ -2359,1 +2378,1 @@\n-      thread = java_lang_Thread::thread(carrier_thread);\n+      thread = java_lang_Thread::thread(carrier_thread());\n@@ -2403,1 +2422,1 @@\n-      LockInfo* lock_info = cl._locks->adr_at(n);\n+      GetThreadSnapshotClosure::OwnedLock* lock_info = cl._locks->adr_at(n);\n@@ -2424,9 +2443,2 @@\n-  Handle blocker_lock;\n-  if (!cl._blocker.is_empty()) {\n-    blocker_lock = jdk_internal_vm_ThreadLock::create(lock_klass,\n-      0, cl._blocker._type, cl._blocker._obj, CHECK_NULL);\n-  }\n-\n-\n-  Symbol* snapshot_name = vmSymbols::jdk_internal_vm_ThreadSnapshot();\n-  Klass* snapshot_klass = SystemDictionary::resolve_or_fail(snapshot_name, true, CHECK_NULL);\n+  Symbol* snapshot_klass_name = vmSymbols::jdk_internal_vm_ThreadSnapshot();\n+  Klass* snapshot_klass = SystemDictionary::resolve_or_fail(snapshot_klass_name, true, CHECK_NULL);\n@@ -2440,0 +2452,1 @@\n+  jdk_internal_vm_ThreadSnapshot::set_carrier_thread(snapshot(), carrier_thread());\n@@ -2442,2 +2455,4 @@\n-  jdk_internal_vm_ThreadSnapshot::set_blocker_lock(snapshot(), blocker_lock());\n-  jdk_internal_vm_ThreadSnapshot::set_blocker_owner(snapshot(), cl._blocker_owner.resolve());\n+  if (!cl._blocker.is_empty()) {\n+    jdk_internal_vm_ThreadSnapshot::set_blocker(snapshot(), cl._blocker._type, cl._blocker._obj.resolve());\n+    jdk_internal_vm_ThreadSnapshot::set_blocker_owner(snapshot(), cl._blocker_owner.resolve());\n+  }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":81,"deletions":66,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    private Thread carrierThread;\n@@ -44,1 +45,3 @@\n-    private ThreadLock blockerLock;\n+    private int blockerTypeOrdinal;\n+    private Object blockerObject;\n+    \/\/ blocker owner (if known)\n@@ -61,2 +64,4 @@\n-        snapshot.blocker = snapshot.blockerLock == null ? null : ThreadBlocker.of(snapshot.blockerLock);\n-        snapshot.blockerLock = null; \/\/ release blockerLock\n+        if (snapshot.blockerObject != null) {\n+            snapshot.blocker = new ThreadBlocker(snapshot.blockerTypeOrdinal, snapshot.blockerObject);\n+            snapshot.blockerObject = null; \/\/ release\n+        }\n@@ -92,1 +97,1 @@\n-        return getBlocker(BlockerLockType.PARKING_TO_WAIT);\n+        return getBlocker(BlockerLockType.PARK_BLOCKER);\n@@ -156,1 +161,1 @@\n-        return null;\n+        return carrierThread;\n@@ -171,1 +176,1 @@\n-        PARKING_TO_WAIT,\n+        PARK_BLOCKER,\n@@ -185,1 +190,0 @@\n-        \/\/ type depends on the lock type: OwnedLockType for owned monitors, BlockerLockType for ThreadBlocker\n@@ -189,1 +193,1 @@\n-        \/\/ set by ThreadLock.of(), not used by ThreadBlocker\n+        \/\/ set by ThreadLock.of()\n@@ -219,2 +223,2 @@\n-        static ThreadBlocker of(ThreadLock blockerLock) {\n-            return new ThreadBlocker(lockTypeValues[blockerLock.typeOrdinal], blockerLock.obj);\n+        ThreadBlocker(int typeOrdinal, Object obj) {\n+            this(lockTypeValues[typeOrdinal], obj);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/ThreadSnapshot.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -426,1 +426,0 @@\n-    @Disabled\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpThreads.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}