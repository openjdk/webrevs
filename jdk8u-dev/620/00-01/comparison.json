{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,5 @@\n-# When you read this source. Remember that $(sort ...) has the side effect\n-# of removing duplicates. It is actually this side effect that is\n-# desired whenever sort is used below!\n+################################################################################\n+# This is the top-level entry point for our native compilation and linking.\n+# It contains the SetupNativeCompilation macro, but is supported by helper\n+# macros in the make\/common\/native directory.\n+################################################################################\n@@ -30,1 +32,4 @@\n-ifeq (,$(_MAKEBASE_GMK))\n+ifndef _NATIVE_COMPILATION_GMK\n+_NATIVE_COMPILATION_GMK := 1\n+\n+ifeq ($(_MAKEBASE_GMK), )\n@@ -34,11 +39,106 @@\n-ifneq ($(TOOLCHAIN_TYPE), microsoft)\n-  COMPILING_MSG=echo $(LOG_INFO) \"Compiling $(notdir $1) (for $(notdir $2))\"\n-  LINKING_MSG=echo $(LOG_INFO) \"Linking $1\"\n-  LINKING_EXE_MSG=echo $(LOG_INFO) \"Linking executable $1\"\n-  ARCHIVING_MSG=echo $(LOG_INFO) \"Archiving $1\"\n-else\n-  COMPILING_MSG=\n-  LINKING_MSG=\n-  LINKING_EXE_MSG=\n-  ARCHIVING_MSG=\n-endif\n+include MakeIO.gmk\n+include native\/CompileFile.gmk\n+include native\/DebugSymbols.gmk\n+include native\/Flags.gmk\n+include native\/Link.gmk\n+include native\/LinkMicrosoft.gmk\n+include native\/Paths.gmk\n+\n+################################################################################\n+# Setup make rules for creating a native binary (a shared library or an\n+# executable).\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# Remaining parameters are named arguments. These include:\n+#   NAME The base name for the resulting binary, excluding decorations (like *.exe)\n+#   TYPE Type of binary (EXECUTABLE, LIBRARY or STATIC_LIBRARY). Default is LIBRARY.\n+#   SUFFIX Override the default suffix for the output file\n+#   TARGET_TYPE The type to target, BUILD or TARGET. Defaults to TARGET.\n+#   LINK_TYPE The language to use for the linker, C or C++. Defaults to C.\n+#   SRC one or more directory roots to scan for C\/C++ files.\n+#   CFLAGS the compiler flags to be used, used both for C and C++.\n+#   CXXFLAGS the compiler flags to be used for c++, if set overrides CFLAGS.\n+#   LDFLAGS the linker flags to be used, used both for C and C++.\n+#   LDFLAGS_<toolchain> the linker flags to be used for the specified toolchain,\n+#       used both for C and C++.\n+#   LDFLAGS_<OS> the linker flags to be used for the specified target OS,\n+#       used both for C and C++.\n+#   LDFLAGS_<toolchain>_<OS> the linker flags to be used for the specified\n+#       toolchain and target OS, used both for C and C++.\n+#   LIBS the libraries to link to\n+#   LIBS_<OS> the libraries to link to for the specified target OS,\n+#       used both for C and C++.\n+#   LIBS_<toolchain> the libraries to link to for the specified toolchain,\n+#       used both for C and C++.\n+#   LIBS_<toolchain>_<OS> the libraries to link to for the specified target\n+#       OS and toolchain, used both for C and C++.\n+#   OBJECT_DIR the directory where we store the object files\n+#   OUTPUT_DIR the directory where the resulting binary is put\n+#   SYMBOLS_DIR the directory where the debug symbols are put, defaults to OUTPUT_DIR\n+#   INCLUDES only pick source from these directories\n+#   EXCLUDES do not pick source from these directories\n+#   INCLUDE_FILES only compile exactly these files!\n+#   EXCLUDE_FILES with these names\n+#   EXCLUDE_PATTERN exclude files matching any of these substrings\n+#   EXTRA_FILES List of extra files not in any of the SRC dirs\n+#   EXTRA_OBJECT_FILES List of extra object files to include when linking\n+#   EXTRA_DEPS List of extra dependencies to be added to each compiled file\n+#   EXTRA_LINK_DEPS List of extra dependencies to be added to the link stage\n+#   VERSIONINFO_RESOURCE Input file for RC. Setting this implies that RC will be run\n+#   RCFLAGS flags for RC.\n+#   EMBED_MANIFEST if true, embed manifest on Windows.\n+#   CC the C compiler to use\n+#   CXX the C++ compiler to use\n+#   LD the Linker to use\n+#   AR the static linker to use\n+#   LIB the Windows lib tool to use for creating static libraries\n+#   AS the assembler to use\n+#   MT the Windows MT tool to use\n+#   RC the Windows RC tool to use\n+#   OBJCOPY the objcopy tool for debug symbol handling\n+#   STRIP the tool to use for stripping debug symbols\n+#   SYSROOT_CFLAGS the compiler flags for using the specific sysroot\n+#   SYSROOT_LDFLAGS the linker flags for using the specific sysroot\n+#   OPTIMIZATION sets optimization level to NONE, LOW, HIGH, HIGHEST, HIGHEST_JVM, SIZE\n+#   DISABLED_WARNINGS_<toolchain> Disable the given warnings for the specified toolchain\n+#   DISABLED_WARNINGS_<toolchain>_<OS> Disable the given warnings for the specified\n+#       toolchain and target OS\n+#   DISABLED_WARNINGS_C_<toolchain> Disable the given warnings for the specified toolchain\n+#       when compiling C code\n+#   DISABLED_WARNINGS_C_<toolchain>_<OS> Disable the given warnings for the specified\n+#       toolchain and target OS when compiling C code\n+#   DISABLED_WARNINGS_CXX_<toolchain> Disable the given warnings for the specified\n+#       toolchain when compiling C++ code\n+#   DISABLED_WARNINGS_CXX_<toolchain>_<OS> Disable the given warnings for the specified\n+#       toolchain and target OS when compiling C++ code\n+#   DISABLED_WARNINGS_<toolchain>_<filename> Disable the given warnings for the specified\n+#       toolchain when compiling the file specified by filename\n+#   DISABLED_WARNINGS_<toolchain>_<OS>_<filename> Disable the given warnings for the specified\n+#       toolchain and target OS when compiling the file specified by filename\n+#   STRIP_SYMBOLS Set to false to override global strip policy and always leave\n+#       symbols in the binary, if the toolchain allows for it\n+#   DEBUG_SYMBOLS Set to false to disable generation of debug symbols\n+#   COPY_DEBUG_SYMBOLS Set to false to override global setting of debug symbol copying\n+#   ZIP_EXTERNAL_DEBUG_SYMBOLS Set to false to override global setting of debug symbol\n+#       zipping\n+#   STRIPFLAGS Optionally change the flags given to the strip command\n+#   PRECOMPILED_HEADER Header file to use as precompiled header\n+#   PRECOMPILED_HEADER_EXCLUDE List of source files that should not use PCH\n+#   BUILD_INFO_LOG_MACRO Overrides log level of the build info log message, default LogWarn\n+#   STATIC_LIB_EXCLUDE_OBJS exclude objects that matches from static library\n+#\n+# After being called, some variables are exported from this macro, all prefixed\n+# with parameter 1 followed by a '_':\n+#   TARGET The library or executable created by the macro\n+#   TARGET_DEPS All prerequisites for the target calculated by the macro\n+#   ALL_OBJS All object files\n+#   IMPORT_LIBRARY The import library created for a shared library on Windows\n+#\n+SetupNativeCompilation = $(NamedParamsMacroTemplate)\n+define SetupNativeCompilationBody\n+  # When reading this code, note that macros named Setup<Foo> are just setting\n+  # variables, and macros called Create<Foo> are setting up rules to create\n+  # files. Macros starting with any other verb are more complicated, and can do\n+  # all of the above, and also call directly to the shell.\n@@ -46,5 +146,3 @@\n-ifeq ($(OPENJDK_BUILD_OS_ENV), windows.cygwin)\n-  UNIX_PATH_PREFIX := \/cygdrive\n-else ifeq ($(OPENJDK_BUILD_OS_ENV), windows.msys)\n-  UNIX_PATH_PREFIX :=\n-endif\n+  ###\n+  ### Prepare for compilation and linking\n+  ###\n@@ -52,48 +150,1 @@\n-define add_native_source\n-  # param 1 = BUILD_MYPACKAGE\n-  # parma 2 = the source file name (....\/alfa.c or ...\/beta.cpp)\n-  # param 3 = the bin dir that stores all .o (.obj) and .d files.\n-  # param 4 = the c flags to the compiler\n-  # param 5 = the c compiler\n-  # param 6 = the c++ flags to the compiler\n-  # param 7 = the c++ compiler\n-  # param 8 = the flags to the assembler\n-\n-  ifneq (,$$(filter %.c,$2))\n-    # Compile as a C file\n-    $1_$2_FLAGS=$4 $$($1_$(notdir $2)_CFLAGS) -DTHIS_FILE='\"$$(<F)\"' -c\n-    $1_$2_COMP=$5\n-    $1_$2_DEP_FLAG:=$(C_FLAG_DEPS)\n-  else ifneq (,$$(filter %.m,$2))\n-    # Compile as a objective-c file\n-    $1_$2_FLAGS=-x objective-c $4 $$($1_$(notdir $2)_CFLAGS) -DTHIS_FILE='\"$$(<F)\"' -c\n-    $1_$2_COMP=$5\n-    $1_$2_DEP_FLAG:=$(C_FLAG_DEPS)\n-  else ifneq (,$$(filter %.s,$2))\n-    # Compile as assembler file\n-    $1_$2_FLAGS=$8 -DTHIS_FILE='\"$$(<F)\"'\n-    $1_$2_COMP=$(AS)\n-    $1_$2_DEP_FLAG:=\n-  else\n-    # Compile as a C++ file\n-    $1_$2_FLAGS=$6 $$($1_$(notdir $2)_CXXFLAGS) -DTHIS_FILE='\"$$(<F)\"' -c\n-    $1_$2_COMP=$7\n-    $1_$2_DEP_FLAG:=$(CXX_FLAG_DEPS)\n-  endif\n-  # Generate the .o (.obj) file name and place it in the bin dir.\n-  $1_$2_OBJ:=$3\/$$(patsubst %.cpp,%$(OBJ_SUFFIX),$$(patsubst %.c,%$(OBJ_SUFFIX),$$(patsubst %.m,%$(OBJ_SUFFIX),$$(patsubst %.s,%$(OBJ_SUFFIX),$$(notdir $2)))))\n-  # Only continue if this object file hasn't been processed already. This lets the first found\n-  # source file override any other with the same name.\n-  ifeq (,$$(findstring $$($1_$2_OBJ),$$($1_OBJS_SO_FAR)))\n-    $1_OBJS_SO_FAR+=$$($1_$2_OBJ)\n-    ifeq (,$$(filter %.s,$2))\n-      # And this is the dependency file for this obj file.\n-      $1_$2_DEP:=$$(patsubst %$(OBJ_SUFFIX),%.d,$$($1_$2_OBJ))\n-      # Include previously generated dependency information. (if it exists)\n-      -include $$($1_$2_DEP)\n-\n-      ifeq ($(TOOLCHAIN_TYPE), microsoft)\n-        $1_$2_DEBUG_OUT_FLAGS:=-Fd$$(patsubst %$(OBJ_SUFFIX),%.pdb,$$($1_$2_OBJ)) \\\n-            -Fm$$(patsubst %$(OBJ_SUFFIX),%.map,$$($1_$2_OBJ))\n-      endif\n-    endif\n+  $$(eval $$(call VerifyArguments,$1))\n@@ -101,33 +152,2 @@\n-    $$($1_$2_OBJ) : $2\n-        ifneq ($(TOOLCHAIN_TYPE), microsoft)\n-\t  $$(call COMPILING_MSG,$2,$$($1_TARGET))\n-          # The Solaris studio compiler doesn't output the full path to the object file in the\n-          # generated deps files. Fixing it with sed. If compiling assembly, don't try this.\n-          ifeq ($(TOOLCHAIN_TYPE)$$(filter %.s,$2), solstudio)\n-\t    $$($1_$2_COMP) $$($1_$2_FLAGS) $$($1_$2_DEP_FLAG) $$($1_$2_DEP).tmp $(CC_OUT_OPTION)$$($1_$2_OBJ) $2\n-\t    $(SED) 's|^$$(@F):|$$@:|' $$($1_$2_DEP).tmp > $$($1_$2_DEP)\n-          else\n-\t    $$($1_$2_COMP) $$($1_$2_FLAGS) $$($1_$2_DEP_FLAG) $$($1_$2_DEP) $(CC_OUT_OPTION)$$($1_$2_OBJ) $2\n-          endif\n-        endif\n-        # The Visual Studio compiler lacks a feature for generating make dependencies, but by\n-        # setting -showIncludes, all included files are printed. These are filtered out and\n-        # parsed into make dependences.\n-        ifeq ($(TOOLCHAIN_TYPE), microsoft)\n-\t  ($$($1_$2_COMP) $$($1_$2_FLAGS) -showIncludes $$($1_$2_DEBUG_OUT_FLAGS) \\\n-\t      $(CC_OUT_OPTION)$$($1_$2_OBJ) $2 ; echo $$$$? > $$($1_$2_DEP).exitvalue) \\\n-\t      | $(TEE) $$($1_$2_DEP).raw | $(GREP) -v \"^Note: including file:\" \\\n-\t      && exit `cat $$($1_$2_DEP).exitvalue`\n-\t  $(RM) $$($1_$2_DEP).exitvalue\n-\t  ($(ECHO) $$@: \\\\ \\\n-\t  && $(SED) -e '\/^Note: including file:\/!d' \\\n-\t      -e 's|Note: including file: *||' \\\n-          -e 's|\\r||g' \\\n-\t      -e 's|\\\\|\/|g' \\\n-\t      -e 's|^\\([a-zA-Z]\\):|$(UNIX_PATH_PREFIX)\/\\1|g' \\\n-\t      -e '\/$(subst \/,\\\/,$(TOPDIR))\/!d' \\\n-\t      -e 's|$$$$| \\\\|g' \\\n-\t      $$($1_$2_DEP).raw) > $$($1_$2_DEP)\n-        endif\n-  endif\n-endef\n+  # Setup variables for the rest of this macro to work with\n+  $$(eval $$(call SetupBasicVariables,$1))\n@@ -135,33 +155,2 @@\n-define SetupNativeCompilation\n-  # param 1 is for example BUILD_MYPACKAGE\n-  # param 2,3,4,5,6,7,8 are named args.\n-  #   SRC one or more directory roots to scan for C\/C++ files.\n-  #   LANG C or C++\n-  #   CFLAGS the compiler flags to be used, used both for C and C++.\n-  #   CXXFLAGS the compiler flags to be used for c++, if set overrides CFLAGS.\n-  #   LDFLAGS the linker flags to be used, used both for C and C++.\n-  #   LDFLAGS_SUFFIX the linker flags to be added last on the commandline\n-  #       typically the libraries linked to.\n-  #   ARFLAGS the archiver flags to be used\n-  #   OBJECT_DIR the directory where we store the object files\n-  #   LIBRARY the resulting library file\n-  #   PROGRAM the resulting exec file\n-  #   INCLUDES only pick source from these directories\n-  #   EXCLUDES do not pick source from these directories\n-  #   INCLUDE_FILES only compile exactly these files!\n-  #   EXCLUDE_FILES with these names\n-  #   VERSIONINFO_RESOURCE Input file for RC. Setting this implies that RC will be run\n-  #   RC_FLAGS flags for RC.\n-  #   MAPFILE mapfile\n-  #   REORDER reorder file\n-  #   DEBUG_SYMBOLS add debug symbols (if configured on)\n-  #   CC the compiler to use, default is $(CC)\n-  #   LDEXE the linker to use for linking executables, default is $(LDEXE)\n-  #   OPTIMIZATION sets optimization level to NONE, LOW, HIGH, HIGHEST\n-  $(foreach i,2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26, $(if $($i),$1_$(strip $($i)))$(NEWLINE))\n-  $(call LogSetupMacroEntry,SetupNativeCompilation($1),$2,$3,$4,$5,$6,$7,$8,$9,$(10),$(11),$(12),$(13),$(14),$(15),$(16),$(17),$(18),$(19),$(20),$(21),$(22),$(23),$(24),$(25),$(26))\n-  $(if $(27),$(error Internal makefile error: Too many arguments to SetupNativeCompilation, please update NativeCompilation.gmk))\n-\n-  ifneq (,$$($1_BIN))\n-    $$(error BIN has been replaced with OBJECT_DIR)\n-  endif\n+  # Setup the toolchain to be used\n+  $$(eval $$(call SetupToolchain,$1))\n@@ -169,3 +158,3 @@\n-  ifneq (,$$($1_LIB))\n-    $$(error LIB has been replaced with LIBRARY)\n-  endif\n+  # Find all source files to compile and determine the output object file names\n+  $$(eval $$(call SetupSourceFiles,$1))\n+  $$(eval $$(call SetupOutputFiles,$1))\n@@ -173,3 +162,2 @@\n-  ifneq (,$$($1_EXE))\n-    $$(error EXE has been replaced with PROGRAM)\n-  endif\n+  # Setup CFLAGS\/CXXFLAGS based on warnings, optimizations, extra flags etc.\n+  $$(eval $$(call SetupCompilerFlags,$1))\n@@ -177,4 +165,2 @@\n-  ifneq (,$$($1_LIBRARY))\n-    ifeq (,$$($1_OUTPUT_DIR))\n-      $$(error LIBRARY requires OUTPUT_DIR)\n-    endif\n+  # Machinery needed for the build to function properly\n+  $$(eval $$(call SetupBuildSystemSupport,$1))\n@@ -182,3 +168,1 @@\n-    ifneq ($$($1_LIBRARY),$(basename $$($1_LIBRARY)))\n-      $$(error directory of LIBRARY should be specified using OUTPUT_DIR)\n-    endif\n+  $$(eval $$(call RemoveSuperfluousOutputFiles,$1))\n@@ -186,3 +170,2 @@\n-    ifneq (,$(findstring $(SHARED_LIBRARY_SUFFIX),$$($1_LIBRARY)))\n-      $$(error LIBRARY should be specified without SHARED_LIBRARY_SUFFIX: $(SHARED_LIBRARY_SUFFIX))\n-    endif\n+  # Need to make sure TARGET is first on list before starting to create files\n+  $1 := $$($1_TARGET)\n@@ -190,3 +173,2 @@\n-    ifneq (,$(findstring $(LIBRARY_PREFIX),$$($1_LIBRARY)))\n-      $$(error LIBRARY should be specified without LIBRARY_PREFIX: $(LIBRARY_PREFIX))\n-    endif\n+  # Have make print information about the library when we start compiling\n+  $$(eval $$(call PrintStartInfo,$1))\n@@ -194,4 +176,3 @@\n-    $1_BASENAME:=$(LIBRARY_PREFIX)$$($1_LIBRARY)$(SHARED_LIBRARY_SUFFIX)\n-    $1_TARGET:=$$($1_OUTPUT_DIR)\/$$($1_BASENAME)\n-    $1_NOSUFFIX:=$(LIBRARY_PREFIX)$$($1_LIBRARY)\n-  endif\n+  ###\n+  ### Compile all native source code files\n+  ###\n@@ -199,4 +180,2 @@\n-  ifneq (,$$($1_STATIC_LIBRARY))\n-    ifeq (,$$($1_OUTPUT_DIR))\n-      $$(error STATIC_LIBRARY requires OUTPUT_DIR)\n-    endif\n+  # Create a PCH, if requested\n+  $$(eval $$(call CreatePrecompiledHeader,$1))\n@@ -204,3 +183,7 @@\n-    ifneq ($$($1_STATIC_LIBRARY),$(basename $$($1_STATIC_LIBRARY)))\n-      $$(error directory of STATIC_LIBRARY should be specified using OUTPUT_DIR)\n-    endif\n+  # Now call CreateCompiledNativeFile for each source file we are going to compile.\n+  $$(foreach file, $$($1_SRCS), \\\n+      $$(eval $$(call CreateCompiledNativeFile,$1_$$(notdir $$(file)), \\\n+          FILE := $$(file), \\\n+          BASE := $1, \\\n+      )) \\\n+  )\n@@ -208,11 +191,3 @@\n-    ifneq (,$(findstring $(STATIC_LIBRARY_SUFFIX),$$($1_STATIC_LIBRARY)))\n-      $$(error STATIC_LIBRARY should be specified without STATIC_LIBRARY_SUFFIX: $(STATIC_LIBRARY_SUFFIX))\n-    endif\n-\n-    ifneq (,$(findstring $(LIBRARY_PREFIX),$$($1_STATIC_LIBRARY)))\n-      $$(error STATIC_LIBRARY should be specified without LIBRARY_PREFIX: $(LIBRARY_PREFIX))\n-    endif\n-\n-    $1_BASENAME:=$(LIBRARY_PREFIX)$$($1_STATIC_LIBRARY)$(STATIC_LIBRARY_SUFFIX)\n-    $1_TARGET:=$$($1_OUTPUT_DIR)\/$$($1_BASENAME)\n-    $1_NOSUFFIX:=$(LIBRARY_PREFIX)$$($1_STATIC_LIBRARY)\n+  ifeq ($(call isTargetOs, windows), true)\n+    # On windows we need to create a resource file\n+    $$(eval $$(call CreateWindowsResourceFile,$1))\n@@ -221,4 +196,4 @@\n-  ifneq (,$$($1_PROGRAM))\n-    ifeq (,$$($1_OUTPUT_DIR))\n-      $$(error PROGRAM requires OUTPUT_DIR)\n-    endif\n+  # Setup a library-wide dependency file from individual object file dependency\n+  # files, and import it in the makefile.\n+  $$(eval $$(call CreateDependencyFile,$1))\n+  $$(eval $$(call ImportDependencyFile,$1))\n@@ -226,3 +201,3 @@\n-    ifneq ($$($1_PROGRAM),$(basename $$($1_PROGRAM)))\n-      $$(error directory of PROGRAM should be specified using OUTPUT_DIR)\n-    endif\n+  ###\n+  ### Link the object files into a native output library\/executable\n+  ###\n@@ -230,3 +205,2 @@\n-    ifneq (,$(findstring $(EXE_SUFFIX),$$($1_PROGRAM)))\n-      $$(error PROGRAM should be specified without EXE_SUFFIX: $(EXE_SUFFIX))\n-    endif\n+  # Handle native debug symbols\n+  $$(eval $$(call CreateDebugSymbols,$1))\n@@ -234,3 +208,4 @@\n-    $1_BASENAME:=$$($1_PROGRAM)$(EXE_SUFFIX)\n-    $1_TARGET:=$$($1_OUTPUT_DIR)\/$$($1_BASENAME)\n-    $1_NOSUFFIX:=$$($1_PROGRAM)\n+  # Prepare for linking\n+  $$(eval $$(call SetupLinkerFlags,$1))\n+  ifneq ($(TOOLCHAIN_TYPE), microsoft)\n+    $$(eval $$(call SetupLinking,$1))\n@@ -239,3 +214,1 @@\n-  ifeq (,$$($1_TARGET))\n-    $$(error Neither PROGRAM, LIBRARY nor STATIC_LIBRARY has been specified for SetupNativeCompilation)\n-  endif\n+  $$(eval $$(call SetupObjectFileList,$1))\n@@ -243,8 +216,3 @@\n-  ifeq (,$$($1_LANG))\n-    $$(error You have to specify LANG for native compilation $1)\n-  endif\n-  ifeq (C,$$($1_LANG))\n-    ifeq ($$($1_LDEXE),)\n-      $1_LDEXE:=$(LDEXE)\n-    endif\n-    $1_LD:=$(LD)\n+  # Link the individually compiled files into a single unit\n+  ifneq ($(TOOLCHAIN_TYPE), microsoft)\n+    $$(eval $$(call CreateLinkedResult,$1))\n@@ -252,10 +220,1 @@\n-    ifeq (C++,$$($1_LANG))\n-      $1_LD:=$(LDCXX)\n-      $1_LDEXE:=$(LDEXECXX)\n-    else\n-      $$(error Unknown native language $$($1_LANG) for $1)\n-    endif\n-  endif\n-\n-  ifeq ($$($1_CC),)\n-    $1_CC:=$(CC)\n+    $$(eval $$(call CreateLinkedResultMicrosoft,$1))\n@@ -264,2 +223,3 @@\n-  ifeq ($$($1_STRIP_POLICY),)\n-    $1_STRIP_POLICY:=$$(STRIP_POLICY)\n+  ifeq ($(GENERATE_COMPILE_COMMANDS_ONLY), true)\n+    # Override all targets (this is a hack)\n+    $1 := $$($1_ALL_OBJS_JSON) $$($1_LDFLAGS_FILE)\n@@ -267,0 +227,1 @@\n+endef\n@@ -268,15 +229,5 @@\n-  # Make sure the dirs exist.\n-  $$(eval $$(call MakeDir,$$($1_OBJECT_DIR) $$($1_OUTPUT_DIR)))\n-  $$(foreach d,$$($1_SRC), $$(if $$(wildcard $$d),,$$(error SRC specified to SetupNativeCompilation $1 contains missing directory $$d)))\n-\n-  # Find all files in the source trees. Sort to remove duplicates.\n-  $1_ALL_SRCS := $$(sort $$(call CacheFind,$$($1_SRC)))\n-  # Extract the C\/C++ files.\n-  $1_EXCLUDE_FILES:=$$(foreach i,$$($1_SRC),$$(addprefix $$i\/,$$($1_EXCLUDE_FILES)))\n-  $1_INCLUDE_FILES:=$$(foreach i,$$($1_SRC),$$(addprefix $$i\/,$$($1_INCLUDE_FILES)))\n-  ifneq ($$($1_EXCLUDE_FILES),)\n-    $1_EXCLUDE_FILES:=$$(addprefix %,$$($1_EXCLUDE_FILES))\n-  endif\n-  $1_SRCS := $$(filter-out $$($1_EXCLUDE_FILES),$$(filter %.s %.c %.cpp %.m,$$($1_ALL_SRCS)))\n-  ifneq (,$$(strip $$($1_INCLUDE_FILES)))\n-    $1_SRCS := $$(filter $$($1_INCLUDE_FILES),$$($1_SRCS))\n+################################################################################\n+# Verify that user passed arguments are valid\n+define VerifyArguments\n+  ifeq ($$($1_NAME), )\n+    $$(error NAME must not be empty in $1)\n@@ -284,2 +235,2 @@\n-  ifeq (,$$($1_SRCS))\n-    $$(error No sources found for $1 when looking inside the dirs $$($1_SRC))\n+  ifneq ($$($1_NAME), $(basename $$($1_NAME)))\n+    $$(error NAME must not contain any directory path in $1)\n@@ -287,9 +238,2 @@\n-  # There can be only a single bin dir root, no need to foreach over the roots.\n-  $1_BINS := $$(wildcard $$($1_OBJECT_DIR)\/*$(OBJ_SUFFIX))\n-  # Now we have a list of all c\/c++ files to compile: $$($1_SRCS)\n-  # and we have a list of all existing object files: $$($1_BINS)\n-\n-  # Prepend the source\/bin path to the filter expressions. Then do the filtering.\n-  ifneq ($$($1_INCLUDES),)\n-    $1_SRC_INCLUDES := $$(foreach i,$$($1_SRC),$$(addprefix $$i\/,$$(addsuffix \/%,$$($1_INCLUDES))))\n-    $1_SRCS := $$(filter $$($1_SRC_INCLUDES),$$($1_SRCS))\n+  ifneq ($(findstring $$($1_SUFFIX), $$($1_NAME)), )\n+    $$(error NAME should be specified without suffix: $$($1_SUFFIX) in $1)\n@@ -297,3 +241,2 @@\n-  ifneq ($$($1_EXCLUDES),)\n-    $1_SRC_EXCLUDES := $$(foreach i,$$($1_SRC),$$(addprefix $$i\/,$$(addsuffix \/%,$$($1_EXCLUDES))))\n-    $1_SRCS := $$(filter-out $$($1_SRC_EXCLUDES),$$($1_SRCS))\n+  ifneq ($(findstring $$($1_PREFIX), $$($1_NAME)), )\n+    $$(error NAME should be specified without prefix: $$($1_PREFIX) in $1)\n@@ -301,9 +244,2 @@\n-\n-  # Calculate the expected output from compiling the sources (sort to remove duplicates. Also provides\n-  # a reproducable order on the input files to the linker).\n-  $1_EXPECTED_OBJS:=$$(sort $$(addprefix $$($1_OBJECT_DIR)\/,$$(patsubst %.cpp,%$(OBJ_SUFFIX),$$(patsubst %.c,%$(OBJ_SUFFIX),$$(patsubst %.m,%$(OBJ_SUFFIX),$$(patsubst %.s,%$(OBJ_SUFFIX),$$(notdir $$($1_SRCS))))))))\n-  # Are there too many object files on disk? Perhaps because some source file was removed?\n-  $1_SUPERFLOUS_OBJS:=$$(sort $$(filter-out $$($1_EXPECTED_OBJS),$$($1_BINS)))\n-  # Clean out the superfluous object files.\n-  ifneq ($$($1_SUPERFLUOUS_OBJS),)\n-    $$(shell $(RM) -f $$($1_SUPERFLUOUS_OBJS))\n+  ifeq ($$($1_OUTPUT_DIR), )\n+    $$(error OUTPUT_DIR is missing in $1)\n@@ -311,52 +247,3 @@\n-\n-  # Pickup extra OPENJDK_TARGET_OS_API, OPENJDK_TARGET_OS, and\/or OPENJDK_TARGET_OS plus\n-  # OPENJDK_TARGET_CPU pair dependent variables for CFLAGS.\n-  $1_EXTRA_CFLAGS:=$$($1_CFLAGS_$(OPENJDK_TARGET_OS_API)) $$($1_CFLAGS_$(OPENJDK_TARGET_OS)) \\\n-      $$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU))\n-  ifneq ($(DEBUG_LEVEL),release)\n-    # Pickup extra debug dependent variables for CFLAGS\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_debug)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS_API)_debug)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS)_debug)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_debug)\n-  else\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_release)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS_API)_release)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS)_release)\n-    $1_EXTRA_CFLAGS+=$$($1_CFLAGS_$(OPENJDK_TARGET_OS)_$(OPENJDK_TARGET_CPU)_release)\n-  endif\n-\n-  # Pickup extra OPENJDK_TARGET_OS_API and\/or OPENJDK_TARGET_OS dependent variables for CXXFLAGS.\n-  $1_EXTRA_CXXFLAGS:=$$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_API)) $$($1_CXXFLAGS_$(OPENJDK_TARGET_OS))\n-  ifneq ($(DEBUG_LEVEL),release)\n-    # Pickup extra debug dependent variables for CXXFLAGS\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_debug)\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_API)_debug)\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_debug)\n-  else\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_release)\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_$(OPENJDK_TARGET_OS_API)_release)\n-    $1_EXTRA_CXXFLAGS+=$$($1_CXXFLAGS_$(OPENJDK_TARGET_OS)_release)\n-  endif\n-\n-  ifeq ($$($1_CXXFLAGS),)\n-    $1_CXXFLAGS:=$$($1_CFLAGS)\n-  endif\n-  ifeq ($$(strip $$($1_EXTRA_CXXFLAGS)),)\n-    $1_EXTRA_CXXFLAGS:=$$($1_EXTRA_CFLAGS)\n-  endif\n-\n-  ifneq (,$$($1_DEBUG_SYMBOLS))\n-    ifeq ($(ENABLE_DEBUG_SYMBOLS), true)\n-      ifdef OPENJDK\n-        # Always add debug symbols\n-        $1_EXTRA_CFLAGS+=$(CFLAGS_DEBUG_SYMBOLS)\n-        $1_EXTRA_CXXFLAGS+=$(CXXFLAGS_DEBUG_SYMBOLS)\n-      else\n-        # Programs don't get the debug symbols added in the old build. It's not clear if\n-        # this is intentional.\n-        ifeq ($$($1_PROGRAM),)\n-          $1_EXTRA_CFLAGS+=$(CFLAGS_DEBUG_SYMBOLS)\n-          $1_EXTRA_CXXFLAGS+=$(CXXFLAGS_DEBUG_SYMBOLS)\n-        endif\n-      endif\n+  ifneq ($$($1_MANIFEST), )\n+    ifeq ($$($1_MANIFEST_VERSION), )\n+      $$(error If MANIFEST is provided, then MANIFEST_VERSION is required in $1)\n@@ -365,0 +252,1 @@\n+endef\n@@ -366,37 +254,23 @@\n-  ifneq (,$$($1_REORDER))\n-    $1_EXTRA_CFLAGS += $$(C_FLAG_REORDER)\n-    $1_EXTRA_CXXFLAGS += $$(CXX_FLAG_REORDER)\n-  endif\n-\n-  ifeq (NONE, $$($1_OPTIMIZATION))\n-    $1_EXTRA_CFLAGS += $(C_O_FLAG_NONE)\n-    $1_EXTRA_CXXFLAGS += $(CXX_O_FLAG_NONE)\n-  else ifeq (LOW, $$($1_OPTIMIZATION))\n-    $1_EXTRA_CFLAGS += $(C_O_FLAG_NORM)\n-    $1_EXTRA_CXXFLAGS += $(CXX_O_FLAG_NORM)\n-  else ifeq (HIGH, $$($1_OPTIMIZATION))\n-    $1_EXTRA_CFLAGS += $(C_O_FLAG_HI)\n-    $1_EXTRA_CXXFLAGS += $(CXX_O_FLAG_HI)\n-  else ifeq (HIGHEST, $$($1_OPTIMIZATION))\n-    $1_EXTRA_CFLAGS += $(C_O_FLAG_HIGHEST)\n-    $1_EXTRA_CXXFLAGS += $(CXX_O_FLAG_HIGHEST)\n-  else ifneq (, $$($1_OPTIMIZATION))\n-    $$(error Unknown value for OPTIMIZATION: $$($1_OPTIMIZATION))\n-  endif\n-\n-  # Add sys root specific cflags last\n-  $1_EXTRA_CFLAGS += $(SYSROOT_CFLAGS)\n-  $1_EXTRA_CXXFLAGS += $(SYSROOT_CFLAGS)\n-\n-  # Now call add_native_source for each source file we are going to compile.\n-  $$(foreach p,$$($1_SRCS), \\\n-      $$(eval $$(call add_native_source,$1,$$p,$$($1_OBJECT_DIR), \\\n-          $$($1_CFLAGS) $$($1_EXTRA_CFLAGS),$$($1_CC), \\\n-          $$($1_CXXFLAGS) $$($1_EXTRA_CXXFLAGS),$(CXX),$$($1_ASFLAGS))))\n-\n-  # On windows we need to create a resource file\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n-    ifneq (,$$($1_VERSIONINFO_RESOURCE))\n-      $1_RES:=$$($1_OBJECT_DIR)\/$$($1_BASENAME).res\n-      $$($1_RES): $$($1_VERSIONINFO_RESOURCE)\n-\t\t$(RC) $$($1_RC_FLAGS) $(CC_OUT_OPTION)$$@ $$($1_VERSIONINFO_RESOURCE)\n+################################################################################\n+# Setup basic variables\n+define SetupBasicVariables\n+  # If type is unspecified, default to LIBRARY\n+  ifeq ($$($1_TYPE), )\n+    $1_TYPE := LIBRARY\n+  endif\n+\n+  # STATIC_LIBS is set from Main.gmk when building static versions of certain\n+  # native libraries.\n+  ifeq ($(STATIC_LIBS), true)\n+    $1_TYPE := STATIC_LIBRARY\n+    # The static versions need to be redirected to different output dirs, both\n+    # to not interfere with the main build as well as to not end up inside the\n+    # jmods.\n+    $1_OBJECT_DIR := $$($1_OBJECT_DIR)\/static\n+    $1_OUTPUT_DIR := $$($1_OBJECT_DIR)\n+  endif\n+\n+  ifeq ($$($1_TYPE), EXECUTABLE)\n+    $1_PREFIX :=\n+    ifeq ($$($1_SUFFIX), )\n+      $1_SUFFIX := $(EXECUTABLE_SUFFIX)\n@@ -404,20 +278,9 @@\n-    ifneq (,$$($1_MANIFEST))\n-      $1_GEN_MANIFEST:=$$($1_OBJECT_DIR)\/$$($1_PROGRAM).manifest\n-      IMVERSIONVALUE:=$(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION).$(JDK_UPDATE_VERSION).$(COOKED_BUILD_NUMBER)\n-      $$($1_GEN_MANIFEST): $$($1_MANIFEST)\n-\t\t$(SED) 's%IMVERSION%$$(IMVERSIONVALUE)%g;s%PROGRAM%$$($1_PROGRAM)%g' $$< > $$@\n-    endif\n-  endif\n-\n-  # mapfile doesnt seem to be implemented on macosx (yet??)\n-  ifneq ($(OPENJDK_TARGET_OS),macosx)\n-    ifneq ($(OPENJDK_TARGET_OS),windows)\n-      $1_REAL_MAPFILE:=$$($1_MAPFILE)\n-      ifneq (,$$($1_REORDER))\n-        $1_REAL_MAPFILE:=$$($1_OBJECT_DIR)\/mapfile\n-\n-        $$($1_REAL_MAPFILE) : $$($1_MAPFILE) $$($1_REORDER)\n-\t\t$$(MKDIR) -p $$(@D)\n-\t\t$$(CP) $$($1_MAPFILE) $$@.tmp\n-\t\t$$(SED) -e 's=OUTPUTDIR=$$($1_OBJECT_DIR)=' $$($1_REORDER) >> $$@.tmp\n-\t\t$$(MV) $$@.tmp $$@\n+  else\n+    $1_PREFIX := $(LIBRARY_PREFIX)\n+    ifeq ($$($1_TYPE), LIBRARY)\n+      ifeq ($$($1_SUFFIX), )\n+        $1_SUFFIX := $(SHARED_LIBRARY_SUFFIX)\n+      endif\n+    else ifeq ($$($1_TYPE), STATIC_LIBRARY)\n+      ifeq ($$($1_SUFFIX), )\n+        $1_SUFFIX := $(STATIC_LIBRARY_SUFFIX)\n@@ -428,79 +291,6 @@\n-  # Pickup extra OPENJDK_TARGET_OS_API and\/or OPENJDK_TARGET_OS dependent variables\n-  # for LDFLAGS and LDFLAGS_SUFFIX\n-  $1_EXTRA_LDFLAGS:=$$($1_LDFLAGS_$(OPENJDK_TARGET_OS_API)) $$($1_LDFLAGS_$(OPENJDK_TARGET_OS))\n-  $1_EXTRA_LDFLAGS_SUFFIX:=$$($1_LDFLAGS_SUFFIX_$(OPENJDK_TARGET_OS_API)) $$($1_LDFLAGS_SUFFIX_$(OPENJDK_TARGET_OS))\n-  ifneq (,$$($1_REAL_MAPFILE))\n-    $1_EXTRA_LDFLAGS += $(call SET_SHARED_LIBRARY_MAPFILE,$$($1_REAL_MAPFILE))\n-  endif\n-\n-  $1_EXTRA_LDFLAGS += $(SYSROOT_LDFLAGS)\n-\n-  # Need to make sure TARGET is first on list\n-  $1 := $$($1_TARGET)\n-\n-  ifneq ($$($1_COPY_DEBUG_SYMBOLS), false)\n-    $1_COPY_DEBUG_SYMBOLS := $(COPY_DEBUG_SYMBOLS)\n-  endif\n-\n-  ifneq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), false)\n-    $1_ZIP_EXTERNAL_DEBUG_SYMBOLS := $(ZIP_EXTERNAL_DEBUG_SYMBOLS)\n-  endif\n-\n-  ifeq ($$($1_COPY_DEBUG_SYMBOLS), true)\n-    ifneq ($$($1_DEBUG_SYMBOLS), false)\n-      # Only copy debug symbols for dynamic libraries and programs.\n-      ifneq ($$($1_TYPE), STATIC_LIBRARY)\n-        # Generate debuginfo files.\n-        ifeq ($(OPENJDK_TARGET_OS), windows)\n-          $1_EXTRA_LDFLAGS += -debug \"-pdb:$$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).pdb\" \\\n-              \"-map:$$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).map\"\n-          ifeq ($(SHIP_DEBUG_SYMBOLS), public)\n-            $1_EXTRA_LDFLAGS += \"-pdbstripped:$$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).stripped.pdb\"\n-          endif\n-          $1_DEBUGINFO_FILES := $$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).pdb \\\n-              $$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).map\n-\n-        else ifneq ($(findstring $(OPENJDK_TARGET_OS), linux solaris), )\n-          $1_DEBUGINFO_FILES := $$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).debuginfo\n-          # Setup the command line creating debuginfo files, to be run after linking.\n-          # It cannot be run separately since it updates the original target file\n-          $1_CREATE_DEBUGINFO_CMDS := \\\n-              $$($1_OBJCOPY) --only-keep-debug $$($1_TARGET) $$($1_DEBUGINFO_FILES) $$(NEWLINE) \\\n-              $(CD) $$($1_OUTPUT_DIR) && \\\n-                  $$($1_OBJCOPY) --add-gnu-debuglink=$$($1_DEBUGINFO_FILES) $$($1_TARGET)\n-\n-        else ifeq ($(OPENJDK_TARGET_OS), macosx)\n-          $1_DEBUGINFO_FILES := \\\n-              $$($1_OUTPUT_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Info.plist \\\n-              $$($1_OUTPUT_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Resources\/DWARF\/$$($1_BASENAME)\n-          $1_CREATE_DEBUGINFO_CMDS := \\\n-              $(DSYMUTIL) --out $$($1_OUTPUT_DIR)\/$$($1_BASENAME).dSYM $$($1_TARGET)\n-        endif # OPENJDK_TARGET_OS\n-\n-        # Since the link rule creates more than one file that we want to track,\n-        # we have to use some tricks to get make to cooperate. To properly\n-        # trigger downstream dependants of $$($1_DEBUGINFO_FILES), we must have\n-        # a recipe in the rule below. To avoid rerunning the recipe every time\n-        # have it touch the target. If a debuginfo file is deleted by something\n-        # external, explicitly delete the TARGET to trigger a rebuild of both.\n-        ifneq ($$(wildcard $$($1_DEBUGINFO_FILES)), $$($1_DEBUGINFO_FILES))\n-          $$(call LogDebug, Deleting $$($1_BASENAME) because debuginfo files are missing)\n-          $$(shell $(RM) $$($1_TARGET))\n-        endif\n-        $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n-\t\t$$(if $$(CORRECT_FUNCTION_IN_RECIPE_EVALUATION), \\\n-\t\t  $$(if $$(wildcard $$@), , $$(error $$@ was not created for $$<)) \\\n-\t\t)\n-\t\t$(TOUCH) $$@\n-\n-        $1 += $$($1_DEBUGINFO_FILES)\n-\n-        ifeq ($$($1_ZIP_EXTERNAL_DEBUG_SYMBOLS), true)\n-          $1_DEBUGINFO_ZIP := $$($1_OUTPUT_DIR)\/$$($1_NOSUFFIX).diz\n-          $1 += $$($1_DEBUGINFO_ZIP)\n-\n-          # The dependency on TARGET is needed for debuginfo files\n-          # to be rebuilt properly.\n-          $$($1_DEBUGINFO_ZIP): $$($1_DEBUGINFO_FILES) $$($1_TARGET)\n-\t\t$(CD) $$($1_OUTPUT_DIR) && \\\n-\t\t    $(ZIPEXE) -q -r $$@ $$(subst $$($1_OUTPUT_DIR)\/,, $$($1_DEBUGINFO_FILES))\n+  $1_BASENAME := $$($1_PREFIX)$$($1_NAME)$$($1_SUFFIX)\n+  $1_TARGET := $$($1_OUTPUT_DIR)\/$$($1_BASENAME)\n+  $1_NOSUFFIX := $$($1_PREFIX)$$($1_NAME)\n+  $1_SAFE_NAME := $$(strip $$(subst \/,_, $1))\n+  $1_UNIQUE_NAME = $$($1_TYPE)_$$(subst \/,_,$$(patsubst $$(OUTPUTDIR)\/%\/,%,$$(dir $$($1_OBJECT_DIR))))_$$($1_NOSUFFIX)\n+endef\n@@ -508,14 +298,17 @@\n-        endif\n-       endif # !STATIC_LIBRARY\n-    endif # $1_DEBUG_SYMBOLS != false\n-  endif # COPY_DEBUG_SYMBOLS\n-\n-  # Unless specifically set, stripping should only happen if symbols are also\n-  # being copied.\n-  $$(call SetIfEmpty, $1_STRIP_SYMBOLS, $$($1_COPY_DEBUG_SYMBOLS))\n-\n-  ifneq ($$($1_STRIP_SYMBOLS), false)\n-    ifneq ($$($1_STRIP), )\n-      # Default to using the global STRIPFLAGS. Allow for overriding with an empty value\n-      $1_STRIPFLAGS ?= $(STRIPFLAGS)\n-      $1_STRIP_CMD := $$($1_STRIP) $$($1_STRIPFLAGS) $$($1_TARGET)\n+################################################################################\n+# Setup the toolchain variables\n+define SetupToolchain\n+  ifeq ($$($1_TARGET_TYPE), BUILD)\n+    $$(call SetIfEmpty, $1_CC, $$(BUILD_CC))\n+    $$(call SetIfEmpty, $1_CXX, $$(BUILD_CXX))\n+    $$(call SetIfEmpty, $1_AR, $$(BUILD_AR))\n+    $$(call SetIfEmpty, $1_LIB, $$(BUILD_LIB))\n+    $$(call SetIfEmpty, $1_AS, $$(BUILD_AS))\n+    $$(call SetIfEmpty, $1_OBJCOPY, $$(BUILD_OBJCOPY))\n+    $$(call SetIfEmpty, $1_STRIP, $$(BUILD_STRIP))\n+    $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$(BUILD_SYSROOT_CFLAGS))\n+    $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$(BUILD_SYSROOT_LDFLAGS))\n+    ifeq ($$($1_LINK_TYPE), C++)\n+      $$(call SetIfEmpty, $1_LD, $$(BUILD_LDCXX))\n+    else\n+      $$(call SetIfEmpty, $1_LD, $$(BUILD_LD))\n@@ -523,13 +316,16 @@\n-  endif\n-\n-  ifeq ($$($1_TYPE), STATIC_LIBRARY)\n-    $1_VARDEPS := $$($1_AR) $$($1_ARFLAGS) $$($1_LIBS) \\\n-        $$($1_EXTRA_LIBS)\n-    $1_VARDEPS_FILE := $$(call DependOnVariable, $1_VARDEPS, \\\n-        $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).vardeps)\n-\n-    # Generating a static library, ie object file archive.\n-    ifeq ($(STATIC_BUILD), true)\n-      ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-        STATIC_MAPFILE_DEP := $$($1_MAPFILE)\n-      endif\n+  else\n+    $$(call SetIfEmpty, $1_CC, $$(CC))\n+    $$(call SetIfEmpty, $1_CXX, $$(CXX))\n+    $$(call SetIfEmpty, $1_AR, $$(AR))\n+    $$(call SetIfEmpty, $1_LIB, $$(LIB))\n+    $$(call SetIfEmpty, $1_AS, $$(AS))\n+    $$(call SetIfEmpty, $1_MT, $$(MT))\n+    $$(call SetIfEmpty, $1_RC, $$(RC))\n+    $$(call SetIfEmpty, $1_OBJCOPY, $$(OBJCOPY))\n+    $$(call SetIfEmpty, $1_STRIP, $$(STRIP))\n+    $$(call SetIfEmpty, $1_SYSROOT_CFLAGS, $$(SYSROOT_CFLAGS))\n+    $$(call SetIfEmpty, $1_SYSROOT_LDFLAGS, $$(SYSROOT_LDFLAGS))\n+    ifeq ($$($1_LINK_TYPE), C++)\n+      $$(call SetIfEmpty, $1_LD, $$(LDCXX))\n+    else\n+      $$(call SetIfEmpty, $1_LD, $$(LD))\n@@ -537,0 +333,2 @@\n+  endif\n+endef\n@@ -538,79 +336,12 @@\n-    $1_TARGET_DEPS := $$($1_ALL_OBJS) $$($1_RES) $$($1_VARDEPS_FILE) $$(STATIC_MAPFILE_DEP)\n-\n-    $$($1_TARGET): $$($1_TARGET_DEPS)\n-\t$$(call LogInfo, Building static library $$($1_BASENAME))\n-\t$$(call ExecuteWithLog, $$($1_OBJECT_DIR)\/$$($1_SAFE_NAME)_link, \\\n-\t    $$($1_AR) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_ALL_OBJS) \\\n-\t        $$($1_RES))\n-        ifeq ($(STATIC_BUILD), true)\n-          ifeq ($$($1_USE_MAPFILE_FOR_SYMBOLS), true)\n-\t    $(CP) $$($1_MAPFILE) $$(@D)\/$$(basename $$(@F)).symbols\n-          else\n-            # The dependency on TARGET is needed on windows for debuginfo files\n-            # to be rebuilt properly.\n-            $$($1_OUTPUT_DIR)\/% : $$($1_OBJECT_DIR)\/% $$($1_TARGET)\n-\t\t$(CP) $$< $$@\n-          endif\n-        endif\n-\n-        # Generate debuginfo files.\n-        ifeq ($(OPENJDK_TARGET_OS), windows)\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1_EXTRA_LDFLAGS += \"-pdb:$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).pdb\" \\\n-              \"-map:$$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).map\"\n-            $1_DEBUGINFO_FILES := $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).pdb \\\n-              $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).map\n-\n-            # This dependency dance ensures that windows debug info files get rebuilt\n-            # properly if deleted.\n-            $$($1_TARGET): $$($1_DEBUGINFO_FILES)\n-            $$($1_DEBUGINFO_FILES): $$($1_EXPECTED_OBJS)\n-          endif\n-        else ifeq ($(OPENJDK_TARGET_OS), solaris)\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1_DEBUGINFO_FILES := $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).debuginfo\n-            # gobjcopy crashes on \"empty\" section headers with the SHF_ALLOC flag set.\n-            # Use $(FIX_EMPTY_SEC_HDR_FLAGS) to clear the SHF_ALLOC flag (if set) from\n-            # empty section headers until a fixed $(OBJCOPY) is available.\n-            # An empty section header has sh_addr == 0 and sh_size == 0.\n-            # This problem has only been seen on Solaris X64, but we call this tool\n-            # on all Solaris builds just in case.\n-            #\n-            # $(OBJCOPY) --add-gnu-debuglink=... corrupts SUNW_* sections.\n-            # Use $(ADD_GNU_DEBUGLINK) until a fixed $(OBJCOPY) is available.\n-            $$($1_DEBUGINFO_FILES): $$($1_TARGET) \\\n-              $(FIX_EMPTY_SEC_HDR_FLAGS) $(ADD_GNU_DEBUGLINK)\n-\t\t$(RM) $$@\n-\t\t$(FIX_EMPTY_SEC_HDR_FLAGS) $(LOG_INFO) $$<\n-\t\t$(OBJCOPY) --only-keep-debug $$< $$@\n-\t\t$(CD) $$(@D) && $(ADD_GNU_DEBUGLINK) $(LOG_INFO) $$(@F) $$<\n-\t\t$(TOUCH) $$@\n-          endif\n-        else ifeq ($(OPENJDK_TARGET_OS), linux)\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1_DEBUGINFO_FILES := $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).debuginfo\n-            $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n-\t\t$(RM) $$@\n-\t\t$(OBJCOPY) --only-keep-debug $$< $$@\n-\t\t$(CD) $$(@D) && $(OBJCOPY) --add-gnu-debuglink=$$(@F) $$<\n-\t\t$(TOUCH) $$@\n-          endif\n-        else ifeq ($(OPENJDK_TARGET_OS), aix)\n-            ifneq ($$($1_STRIP_POLICY), no_strip)\n-              # AIX does not provide the equivalent of OBJCOPY to extract debug symbols,\n-              # so we copy the compiled object with symbols to the .debuginfo file, which\n-              # happens prior to the STRIP on the original target object file.\n-              $1_DEBUGINFO_FILES := $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).debuginfo\n-              $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n-\t\t$(RM) $$@\n-\t\t$(CP) $$< $$@\n-\t\t$(TOUCH) $$@\n-            endif\n-        else ifeq ($(OPENJDK_TARGET_OS), macosx)\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1_DEBUGINFO_FILES := $$($1_OBJECT_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Info.plist \\\n-              $$($1_OBJECT_DIR)\/$$($1_BASENAME).dSYM\/Contents\/Resources\/DWARF\/$$($1_BASENAME)\n-            $$($1_DEBUGINFO_FILES): $$($1_TARGET)\n-\t\t$(DSYMUTIL) --out $$($1_OBJECT_DIR)\/$$($1_BASENAME).dSYM $$<\n-          endif\n-        endif\n+################################################################################\n+# Setup machinery needed by the build system\n+define SetupBuildSystemSupport\n+  # Track variable changes for all variables that affect the compilation command\n+  # lines for all object files in this setup. This includes at least all the\n+  # variables used in the call to add_native_source below.\n+  $1_COMPILE_VARDEPS := $$($1_CFLAGS) $$($1_EXTRA_CFLAGS) $$($1_SYSROOT_CFLAGS) \\\n+      $$($1_CXXFLAGS) $$($1_EXTRA_CXXFLAGS) $$($1_OPT_CFLAGS) $$($1_OPT_CXXFLAGS) \\\n+      $$($1_CC) $$($1_CXX) $$($1_AS) $$($1_ASFLAGS)\n+  $1_COMPILE_VARDEPS_FILE := $$(call DependOnVariable, $1_COMPILE_VARDEPS, \\\n+      $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).comp.vardeps)\n+endef\n@@ -618,11 +349,16 @@\n-        ifeq ($(ZIP_DEBUGINFO_FILES), true)\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1_DEBUGINFO_ZIP := $$($1_OBJECT_DIR)\/$$($1_NOSUFFIX).diz\n-            $1 += $$(subst $$($1_OBJECT_DIR),$$($1_OUTPUT_DIR),$$($1_DEBUGINFO_ZIP))\n-\n-            # The dependency on TARGET is needed on windows for debuginfo files\n-            # to be rebuilt properly.\n-            $$($1_DEBUGINFO_ZIP): $$($1_DEBUGINFO_FILES) $$($1_TARGET)\n-\t\t$(CD) $$($1_OBJECT_DIR) \\\n-\t\t&& $(ZIP) -q $$@ $$(subst $$($1_OBJECT_DIR)\/,,$$($1_DEBUGINFO_FILES))\n-          endif\n+################################################################################\n+# Have make print information about the library when we start compiling\n+define PrintStartInfo\n+  # Setup rule for printing progress info when compiling source files.\n+  # This is a rough heuristic and may not always print accurate information.\n+  # The $1_BUILD_INFO and $1_BUILD_INFO_DEPS variables are used in\n+  # TestFilesCompilation.gmk.\n+  $$(call SetIfEmpty, $1_BUILD_INFO_LOG_MACRO, LogWarn)\n+  $1_BUILD_INFO_DEPS := $$($1_SRCS) $$($1_COMPILE_VARDEPS_FILE)\n+  $1_BUILD_INFO := $$($1_OBJECT_DIR)\/_build-info.marker\n+\n+  $$($1_BUILD_INFO): $$($1_BUILD_INFO_DEPS)\n+        ifeq ($$(wildcard $$($1_TARGET)), )\n+\t  $$(call $$($1_BUILD_INFO_LOG_MACRO), \\\n+\t      Creating $$(subst $$(OUTPUTDIR)\/,,$$($1_TARGET)) from $$(words \\\n+\t      $$(filter-out %.vardeps, $$?)) file(s))\n@@ -630,3 +366,5 @@\n-          ifneq ($$($1_STRIP_POLICY), no_strip)\n-            $1 += $$(subst $$($1_OBJECT_DIR),$$($1_OUTPUT_DIR),$$($1_DEBUGINFO_FILES))\n-          endif\n+\t  $$(call $$($1_BUILD_INFO_LOG_MACRO), \\\n+\t      $$(strip Updating $$(subst $$(OUTPUTDIR)\/,,$$($1_TARGET)) \\\n+\t      $$(if $$(filter-out %.vardeps, $$?), \\\n+\t        due to $$(words $$(filter-out %.vardeps, $$?)) file(s), \\\n+\t      $$(if $$(filter %.vardeps, $$?), due to makefile changes))))\n@@ -634,33 +372,2 @@\n-      endif # ENABLE_DEBUG_SYMBOLS\n-    endif # $1_DEBUG_SYMBOLS\n-  endif # !STATIC_LIBRARY\n-\n-  ifneq (,$$($1_LIBRARY))\n-    # Generating a dynamic library.\n-    $1_EXTRA_LDFLAGS+=$$(call SET_SHARED_LIBRARY_NAME,$$($1_BASENAME))\n-    ifeq ($(OPENJDK_TARGET_OS), windows)\n-      $1_EXTRA_LDFLAGS+=\"-implib:$$($1_OBJECT_DIR)\/$$($1_LIBRARY).lib\"\n-    endif\n-\n-    $1_EXTRA_LDFLAGS_SUFFIX += $(GLOBAL_LDFLAGS_SUFFIX)\n-\n-    $$($1_TARGET) : $$($1_EXPECTED_OBJS) $$($1_RES) $$($1_REAL_MAPFILE)\n-\t$$(call LINKING_MSG,$$($1_BASENAME))\n-\t$$($1_LD) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $(LD_OUT_OPTION)$$@ \\\n-\t$$($1_EXPECTED_OBJS) $$($1_RES) $$($1_LDFLAGS_SUFFIX) \\\n-\t$$($1_EXTRA_LDFLAGS_SUFFIX)\n-        # Touch target to make sure it has a later time stamp than the debug\n-        # symbol files to avoid unnecessary relinking on rebuild.\n-        ifeq ($(OPENJDK_TARGET_OS), windows)\n-\t  $(TOUCH) $$@\n-        endif\n-\n-  endif\n-\n-  ifneq (,$$($1_STATIC_LIBRARY))\n-    # Generating a static library, ie object file archive.\n-    $$($1_TARGET) : $$($1_EXPECTED_OBJS) $$($1_RES)\n-\t$$(call ARCHIVING_MSG,$$($1_LIBRARY))\n-\t$(AR) $$($1_ARFLAGS) $(AR_OUT_OPTION)$$($1_TARGET) $$($1_EXPECTED_OBJS) \\\n-\t    $$($1_RES) $$($1_LDFLAGS_SUFFIX) $$($1_EXTRA_LDFLAGS_SUFFIX)\n-  endif\n+\t$(TOUCH) $$@\n+endef\n@@ -668,24 +375,22 @@\n-  ifneq (,$$($1_PROGRAM))\n-    # A executable binary has been specified, setup the target for it.\n-    $1_EXTRA_LDFLAGS_SUFFIX += $(GLOBAL_LDFLAGS_SUFFIX)\n-\n-    $$($1_TARGET) : $$($1_EXPECTED_OBJS) $$($1_RES) $$($1_GEN_MANIFEST)\n-\t$$(call LINKING_EXE_MSG,$$($1_BASENAME))\n-\t$$($1_LDEXE) $$($1_LDFLAGS) $$($1_EXTRA_LDFLAGS) $(EXE_OUT_OPTION)$$($1_TARGET) \\\n-\t$$($1_EXPECTED_OBJS) $$($1_RES) $$($1_LDFLAGS_SUFFIX) \\\n-\t$$($1_EXTRA_LDFLAGS_SUFFIX)\n-        ifneq (,$$($1_GEN_MANIFEST))\n-\t  $(MT) -nologo -manifest $$($1_GEN_MANIFEST) -outputresource:$$@;#1\n-        endif\n-        # This only works if the openjdk_codesign identity is present on the system. Let\n-        # silently fail otherwise.\n-        ifneq (,$(CODESIGN))\n-          ifneq (,$$($1_CODESIGN))\n-\t    $(CODESIGN) -s openjdk_codesign $$@\n-          endif\n-        endif\n-        # Touch target to make sure it has a later time stamp than the debug\n-        # symbol files to avoid unnecessary relinking on rebuild.\n-        ifeq ($(OPENJDK_TARGET_OS), windows)\n-\t  $(TOUCH) $$@\n-        endif\n+################################################################################\n+# Setup a library-wide dependency file from individual object file dependency\n+# files\n+define CreateDependencyFile\n+  # Create a rule to collect all the individual make dependency files into a\n+  # single makefile.\n+  $1_DEPS_FILE := $$($1_OBJECT_DIR)\/$1.d\n+\n+  $$($1_DEPS_FILE): $$($1_ALL_OBJS) $$($1_RES)\n+\t$(RM) $$@\n+        # CD into dir to reduce risk of hitting command length limits, which\n+        # could otherwise happen if TOPDIR is a very long path.\n+\t$(CD) $$($1_OBJECT_DIR) && $(CAT) *.d > $$@.tmp\n+\t$(CD) $$($1_OBJECT_DIR) && $(CAT) *.d.targets | $(SORT) -u >> $$@.tmp\n+        # After generating the file, which happens after all objects have been\n+        # compiled, copy it to .old extension. On the next make invocation, this\n+        # .old file will be included by make.\n+\t$(CP) $$@.tmp $$@.old\n+\t$(MV) $$@.tmp $$@\n+\n+  $1 += $$($1_DEPS_FILE)\n+endef\n@@ -693,0 +398,11 @@\n+################################################################################\n+# Import the dependency file into the makefile\n+define ImportDependencyFile\n+  # The include must be on the .old file, which represents the state from the\n+  # previous invocation of make. The file being included must not have a rule\n+  # defined for it as otherwise make will think it has to run the rule before\n+  # being able to include the file, which would be wrong since we specifically\n+  # need the file as it was generated by a previous make invocation.\n+  ifneq ($$(wildcard $$($1_DEPS_FILE).old), )\n+    $1_DEPS_FILE_LOADED := true\n+    -include $$($1_DEPS_FILE).old\n@@ -695,0 +411,2 @@\n+\n+endif # _NATIVE_COMPILATION_GMK\n","filename":"make\/common\/NativeCompilation.gmk","additions":333,"deletions":615,"binary":false,"changes":948,"status":"modified"}]}