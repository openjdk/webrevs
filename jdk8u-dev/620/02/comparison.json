{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,4 +106,6 @@\n-    static final String JAVA_FILE_EXT  = \".java\";\n-    static final String CLASS_FILE_EXT = \".class\";\n-    static final String JAR_FILE_EXT   = \".jar\";\n-    static final String EXE_FILE_EXT   = \".exe\";\n+    static final String JAVA_FILE_EXT   = \".java\";\n+    static final String CLASS_FILE_EXT  = \".class\";\n+    static final String JAR_FILE_EXT    = \".jar\";\n+    static final String EXE_FILE_EXT    = \".exe\";\n+    static final String MAC_DSYM_EXT    = \".dsym\";\n+    static final String NIX_DBGINFO_EXT = \".debuginfo\";\n@@ -509,0 +511,37 @@\n+    static class ToolFilter implements FileFilter {\n+        final List<String> exclude = new ArrayList<>();\n+        protected ToolFilter(String... exclude) {\n+            for (String x : exclude) {\n+                String str = x + ((isWindows) ? EXE_FILE_EXT : \"\");\n+                this.exclude.add(str.toLowerCase());\n+            }\n+        }\n+\n+        @Override\n+        public boolean accept(File pathname) {\n+            if (!pathname.isFile() || !pathname.canExecute()) {\n+                return false;\n+            }\n+            String name = pathname.getName().toLowerCase();\n+            if (isWindows) {\n+                if (!name.endsWith(EXE_FILE_EXT)) {\n+                    return false;\n+                }\n+            } else if (isMacOSX) {\n+                if (name.endsWith(MAC_DSYM_EXT)) {\n+                    return false;\n+                }\n+            } else {\n+                if (name.endsWith(NIX_DBGINFO_EXT)) {\n+                    return false;\n+                }\n+            }\n+            for (String x : exclude) {\n+                if (name.endsWith(x)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        }\n+    }\n+\n","filename":"jdk\/test\/tools\/launcher\/TestHelper.java","additions":44,"deletions":5,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import java.io.FileFilter;\n-import java.util.Map;\n@@ -38,0 +36,1 @@\n+import java.util.HashSet;\n@@ -39,0 +38,2 @@\n+import java.util.Map;\n+import java.util.Set;\n@@ -230,28 +231,0 @@\n-\n-    static class ToolFilter implements FileFilter {\n-        final Iterable<String> exclude ;\n-        protected ToolFilter(String... exclude) {\n-            List<String> tlist = new ArrayList<>();\n-            this.exclude = tlist;\n-            for (String x : exclude) {\n-                String str = x + ((isWindows) ? EXE_FILE_EXT : \"\");\n-                tlist.add(str.toLowerCase());\n-            }\n-        }\n-        @Override\n-        public boolean accept(File pathname) {\n-            if (!pathname.isFile() || !pathname.canExecute()) {\n-                return false;\n-            }\n-            String name = pathname.getName().toLowerCase();\n-            if (isWindows && !name.endsWith(EXE_FILE_EXT)) {\n-                return false;\n-            }\n-            for (String x : exclude) {\n-                if (name.endsWith(x)) {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-    }\n","filename":"jdk\/test\/tools\/launcher\/VersionCheck.java","additions":4,"deletions":31,"binary":false,"changes":35,"status":"modified"}]}