{"files":[{"patch":"@@ -184,0 +184,1 @@\n+    private boolean hasNonexistentEntries = false;\n@@ -638,0 +639,1 @@\n+        Map<String,Set<String>> entriesInSF = new HashMap<>();\n@@ -674,0 +676,1 @@\n+                                entriesInSF.put(alias, sf.getEntries().keySet());\n@@ -772,0 +775,3 @@\n+                        for (Set<String> signed : entriesInSF.values()) {\n+                            signed.remove(name);\n+                        }\n@@ -954,0 +960,7 @@\n+                        Set<String> signed = entriesInSF.get(s);\n+                        if (!signed.isEmpty()) {\n+                            if (verbose != null) {\n+                                System.out.println(rb.getString(\"history.nonexistent.entries\") + signed);\n+                            }\n+                            hasNonexistentEntries = true;\n+                        }\n@@ -1183,0 +1196,1 @@\n+                hasNonexistentEntries ||\n@@ -1220,0 +1234,3 @@\n+            if (hasNonexistentEntries) {\n+                warnings.add(rb.getString(\"nonexistent.entries.found\"));\n+            }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -158,0 +158,1 @@\n+        {\"history.nonexistent.entries\", \"    Warning: nonexistent signed entries: \"},\n@@ -168,0 +169,1 @@\n+        {\"nonexistent.entries.found\", \"This jar contains signed entries for files that do not exist. See the -verbose output for more details.\"},\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8309841\n+ * @summary Unit Test for a common Test API in jdk.testlibrary.JarUtils\n+ * @library \/lib\/testlibrary\n+ *\/\n+\n+import jdk.testlibrary.Asserts;\n+import jdk.testlibrary.JarUtils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+\n+public class JarUtilsTest {\n+    public static void main(String[] args) throws Exception {\n+        Files.createDirectory(Paths.get(\"bx\"));\n+        JarUtils.createJarFile(Paths.get(\"a.jar\"),\n+                Paths.get(\".\"),\n+                Files.write(Paths.get(\"a\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"b1\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"b2\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"bx\/x\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"c\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"e1\"), \"\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"e2\"), \"\".getBytes(StandardCharsets.UTF_8)));\n+        checkContent(\"a\", \"b1\", \"b2\", \"bx\/x\", \"c\", \"e1\", \"e2\");\n+\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"a\");\n+        checkContent(\"b1\", \"b2\", \"bx\/x\", \"c\", \"e1\", \"e2\");\n+\n+        \/\/ Note: b* covers everything starting with b, even bx\/x\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"b*\");\n+        checkContent(\"c\", \"e1\", \"e2\");\n+\n+        \/\/ d* does not match\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"d*\");\n+        checkContent(\"c\", \"e1\", \"e2\");\n+\n+        \/\/ multiple patterns\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"d*\", \"e*\");\n+        checkContent(\"c\");\n+    }\n+\n+    static void checkContent(String... expected) throws IOException {\n+        try (JarFile jf = new JarFile(\"a.jar\")) {\n+            Asserts.assertEquals(new HashSet<>(Arrays.asList(expected)),\n+                    jf.stream().map(JarEntry::getName).collect(Collectors.toSet()));\n+        }\n+    }\n+}\n","filename":"jdk\/test\/lib-test\/testlibrary\/jdk\/testlibrary\/JarUtilsTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.nio.file.StandardCopyOption;\n@@ -250,0 +251,51 @@\n+    \/**\n+     * Remove entries from a ZIP file.\n+     *\n+     * Each entry can be a name or a name ending with \"*\".\n+     *\n+     * @return number of removed entries\n+     * @throws IOException if there is any I\/O error\n+     *\/\n+    public static int deleteEntries(Path jarfile, String... patterns)\n+            throws IOException {\n+        Path tmpfile = Files.createTempFile(\"jar\", \"jar\");\n+        int count = 0;\n+\n+        try (OutputStream out = Files.newOutputStream(tmpfile);\n+             JarOutputStream jos = new JarOutputStream(out)) {\n+            try (JarFile jf = new JarFile(jarfile.toString())) {\n+                Enumeration<JarEntry> jentries = jf.entries();\n+                top: while (jentries.hasMoreElements()) {\n+                    JarEntry jentry = jentries.nextElement();\n+                    String name = jentry.getName();\n+                    for (String pattern : patterns) {\n+                        if (pattern.endsWith(\"*\")) {\n+                            if (name.startsWith(pattern.substring(\n+                                    0, pattern.length() - 1))) {\n+                                \/\/ Go directly to next entry. This\n+                                \/\/ one is not written into `jos` and\n+                                \/\/ therefore removed.\n+                                count++;\n+                                continue top;\n+                            }\n+                        } else {\n+                            if (name.equals(pattern)) {\n+                                \/\/ Same as above\n+                                count++;\n+                                continue top;\n+                            }\n+                        }\n+                    }\n+                    \/\/ No pattern matched, file retained\n+                    jos.putNextEntry(copyEntry(jentry));\n+                    Utils.transferTo(jf.getInputStream(jentry), jos);\n+                }\n+            }\n+        }\n+\n+        \/\/ replace the original JAR file\n+        Files.move(tmpfile, jarfile, StandardCopyOption.REPLACE_EXISTING);\n+\n+        return count;\n+    }\n+\n","filename":"jdk\/test\/lib\/testlibrary\/jdk\/testlibrary\/JarUtils.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309841\n+ * @summary Jarsigner should print a warning if an entry is removed\n+ * @library \/lib\/testlibrary\n+ *\/\n+\n+import jdk.testlibrary.SecurityTools;\n+import jdk.testlibrary.JarUtils;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.jar.Attributes;\n+import java.util.jar.Manifest;\n+\n+public class RemovedFiles {\n+\n+    private static final String NONEXISTENT_ENTRIES_FOUND\n+            = \"This jar contains signed entries for files that do not exist. See the -verbose output for more details.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        JarUtils.createJarFile(\n+                Paths.get(\"a.jar\"),\n+                Paths.get(\".\"),\n+                Files.write(Paths.get(\"a\"), \"a\".getBytes(StandardCharsets.UTF_8)),\n+                Files.write(Paths.get(\"b\"), \"b\".getBytes(StandardCharsets.UTF_8)));\n+        SecurityTools.keytool(\"-genkeypair -storepass changeit -keystore ks -alias x -dname CN=x -keyalg RSA\");\n+        SecurityTools.jarsigner(\"-storepass changeit -keystore ks a.jar x\");\n+\n+        \/\/ All is fine at the beginning.\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldNotContain(NONEXISTENT_ENTRIES_FOUND);\n+\n+        \/\/ Remove an entry after signing. There will be a warning.\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"a\");\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND);\n+        SecurityTools.jarsigner(\"-verify -verbose a.jar\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND)\n+                .shouldContain(\"Warning: nonexistent signed entries: [a]\");\n+\n+        \/\/ Remove one more entry.\n+        JarUtils.deleteEntries(Paths.get(\"a.jar\"), \"b\");\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND);\n+        SecurityTools.jarsigner(\"-verify -verbose a.jar\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND)\n+                .shouldContain(\"Warning: nonexistent signed entries: [a, b]\");\n+\n+        \/\/ Re-sign will not clear the warning.\n+        SecurityTools.jarsigner(\"-storepass changeit -keystore ks a.jar x\");\n+        SecurityTools.jarsigner(\"-verify a.jar\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND);\n+\n+        \/\/ Unfortunately, if there is a non-file entry in manifest, there will be\n+        \/\/ a false alarm. See https:\/\/bugs.openjdk.org\/browse\/JDK-8334261.\n+        Manifest man = new Manifest();\n+        man.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n+        man.getEntries().computeIfAbsent(\"Hello\", key -> new Attributes())\n+                .putValue(\"Foo\", \"Bar\");\n+        JarUtils.createJarFile(Paths.get(\"b.jar\"),\n+                man,\n+                Paths.get(\".\"),\n+                Paths.get(\"a\"));\n+        SecurityTools.jarsigner(\"-storepass changeit -keystore ks b.jar x\");\n+        SecurityTools.jarsigner(\"-verbose -verify b.jar\")\n+                .shouldContain(\"Warning: nonexistent signed entries: [Hello]\")\n+                .shouldContain(NONEXISTENT_ENTRIES_FOUND);\n+\n+    }\n+}\n","filename":"jdk\/test\/sun\/security\/tools\/jarsigner\/RemovedFiles.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}