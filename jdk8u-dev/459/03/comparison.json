{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -4383,3 +4383,5 @@\n-            if (width != -1 && f.contains(Flags.ZERO_PAD))\n-                for (int k = 0; k < width - len; k++)\n-                    sb.insert(begin, zero);\n+            if (width > len && f.contains(Flags.ZERO_PAD)) {\n+                char[] zeros = new char[width - len];\n+                Arrays.fill(zeros, zero);\n+                sb.insert(begin, zeros);\n+            }\n","filename":"jdk\/src\/share\/classes\/java\/util\/Formatter.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,316 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4906370\n+ * @summary Tests to excercise padding on int and double values,\n+ *      with various flag combinations.\n+ *\/\n+\n+public class Padding {\n+\n+    private static class Argument {\n+        final String expected;\n+        final String format;\n+        final Object value;\n+\n+        Argument(String expected, String format, Object value) {\n+            this.expected = expected;\n+            this.format = format;\n+            this.value = value;\n+        }\n+    }\n+\n+    static Argument[] arguments = {\n+        \/* blank padding, right adjusted, optional plus sign *\/\n+        new Argument(\"12\", \"%1d\", 12),\n+        new Argument(\"12\", \"%2d\", 12),\n+        new Argument(\" 12\", \"%3d\", 12),\n+        new Argument(\"  12\", \"%4d\", 12),\n+        new Argument(\"   12\", \"%5d\", 12),\n+        new Argument(\"        12\", \"%10d\", 12),\n+\n+        new Argument(\"-12\", \"%1d\", -12),\n+        new Argument(\"-12\", \"%2d\", -12),\n+        new Argument(\"-12\", \"%3d\", -12),\n+        new Argument(\" -12\", \"%4d\", -12),\n+        new Argument(\"  -12\", \"%5d\", -12),\n+        new Argument(\"       -12\", \"%10d\", -12),\n+\n+        new Argument(\"1.2\", \"%1.1f\", 1.2),\n+        new Argument(\"1.2\", \"%2.1f\", 1.2),\n+        new Argument(\"1.2\", \"%3.1f\", 1.2),\n+        new Argument(\" 1.2\", \"%4.1f\", 1.2),\n+        new Argument(\"  1.2\", \"%5.1f\", 1.2),\n+        new Argument(\"       1.2\", \"%10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%4.1f\", -1.2),\n+        new Argument(\" -1.2\", \"%5.1f\", -1.2),\n+        new Argument(\"      -1.2\", \"%10.1f\", -1.2),\n+\n+        \/* blank padding, right adjusted, mandatory plus sign *\/\n+        new Argument(\"+12\", \"%+1d\", 12),\n+        new Argument(\"+12\", \"%+2d\", 12),\n+        new Argument(\"+12\", \"%+3d\", 12),\n+        new Argument(\" +12\", \"%+4d\", 12),\n+        new Argument(\"  +12\", \"%+5d\", 12),\n+        new Argument(\"       +12\", \"%+10d\", 12),\n+\n+        new Argument(\"-12\", \"%+1d\", -12),\n+        new Argument(\"-12\", \"%+2d\", -12),\n+        new Argument(\"-12\", \"%+3d\", -12),\n+        new Argument(\" -12\", \"%+4d\", -12),\n+        new Argument(\"  -12\", \"%+5d\", -12),\n+        new Argument(\"       -12\", \"%+10d\", -12),\n+\n+        new Argument(\"+1.2\", \"%+1.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+2.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+3.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+4.1f\", 1.2),\n+        new Argument(\" +1.2\", \"%+5.1f\", 1.2),\n+        new Argument(\"      +1.2\", \"%+10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%+1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+4.1f\", -1.2),\n+        new Argument(\" -1.2\", \"%+5.1f\", -1.2),\n+        new Argument(\"      -1.2\", \"%+10.1f\", -1.2),\n+\n+        \/* blank padding, right adjusted, mandatory blank sign *\/\n+        new Argument(\" 12\", \"% 1d\", 12),\n+        new Argument(\" 12\", \"% 2d\", 12),\n+        new Argument(\" 12\", \"% 3d\", 12),\n+        new Argument(\"  12\", \"% 4d\", 12),\n+        new Argument(\"   12\", \"% 5d\", 12),\n+        new Argument(\"        12\", \"% 10d\", 12),\n+\n+        new Argument(\"-12\", \"% 1d\", -12),\n+        new Argument(\"-12\", \"% 2d\", -12),\n+        new Argument(\"-12\", \"% 3d\", -12),\n+        new Argument(\" -12\", \"% 4d\", -12),\n+        new Argument(\"  -12\", \"% 5d\", -12),\n+        new Argument(\"       -12\", \"% 10d\", -12),\n+\n+        new Argument(\" 1.2\", \"% 1.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 2.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 3.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 4.1f\", 1.2),\n+        new Argument(\"  1.2\", \"% 5.1f\", 1.2),\n+        new Argument(\"       1.2\", \"% 10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"% 1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 4.1f\", -1.2),\n+        new Argument(\" -1.2\", \"% 5.1f\", -1.2),\n+        new Argument(\"      -1.2\", \"% 10.1f\", -1.2),\n+\n+        \/* blank padding, left adjusted, optional sign *\/\n+        new Argument(\"12\", \"%-1d\", 12),\n+        new Argument(\"12\", \"%-2d\", 12),\n+        new Argument(\"12 \", \"%-3d\", 12),\n+        new Argument(\"12  \", \"%-4d\", 12),\n+        new Argument(\"12   \", \"%-5d\", 12),\n+        new Argument(\"12        \", \"%-10d\", 12),\n+\n+        new Argument(\"-12\", \"%-1d\", -12),\n+        new Argument(\"-12\", \"%-2d\", -12),\n+        new Argument(\"-12\", \"%-3d\", -12),\n+        new Argument(\"-12 \", \"%-4d\", -12),\n+        new Argument(\"-12  \", \"%-5d\", -12),\n+        new Argument(\"-12       \", \"%-10d\", -12),\n+\n+        new Argument(\"1.2\", \"%-1.1f\", 1.2),\n+        new Argument(\"1.2\", \"%-2.1f\", 1.2),\n+        new Argument(\"1.2\", \"%-3.1f\", 1.2),\n+        new Argument(\"1.2 \", \"%-4.1f\", 1.2),\n+        new Argument(\"1.2  \", \"%-5.1f\", 1.2),\n+        new Argument(\"1.2       \", \"%-10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%-1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-4.1f\", -1.2),\n+        new Argument(\"-1.2 \", \"%-5.1f\", -1.2),\n+        new Argument(\"-1.2      \", \"%-10.1f\", -1.2),\n+\n+        \/* blank padding, left adjusted, mandatory plus sign *\/\n+        new Argument(\"+12\", \"%-+1d\", 12),\n+        new Argument(\"+12\", \"%-+2d\", 12),\n+        new Argument(\"+12\", \"%-+3d\", 12),\n+        new Argument(\"+12 \", \"%-+4d\", 12),\n+        new Argument(\"+12  \", \"%-+5d\", 12),\n+        new Argument(\"+12       \", \"%-+10d\", 12),\n+\n+        new Argument(\"-12\", \"%-+1d\", -12),\n+        new Argument(\"-12\", \"%-+2d\", -12),\n+        new Argument(\"-12\", \"%-+3d\", -12),\n+        new Argument(\"-12 \", \"%-+4d\", -12),\n+        new Argument(\"-12  \", \"%-+5d\", -12),\n+        new Argument(\"-12       \", \"%-+10d\", -12),\n+\n+        new Argument(\"+1.2\", \"%-+1.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%-+2.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%-+3.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%-+4.1f\", 1.2),\n+        new Argument(\"+1.2 \", \"%-+5.1f\", 1.2),\n+        new Argument(\"+1.2      \", \"%-+10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%-+1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-+2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-+3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%-+4.1f\", -1.2),\n+        new Argument(\"-1.2 \", \"%-+5.1f\", -1.2),\n+        new Argument(\"-1.2      \", \"%-+10.1f\", -1.2),\n+\n+        \/* blank padding, left adjusted, mandatory blank sign *\/\n+        new Argument(\" 12\", \"%- 1d\", 12),\n+        new Argument(\" 12\", \"%- 2d\", 12),\n+        new Argument(\" 12\", \"%- 3d\", 12),\n+        new Argument(\" 12 \", \"%- 4d\", 12),\n+        new Argument(\" 12  \", \"%- 5d\", 12),\n+        new Argument(\" 12       \", \"%- 10d\", 12),\n+\n+        new Argument(\"-12\", \"%- 1d\", -12),\n+        new Argument(\"-12\", \"%- 2d\", -12),\n+        new Argument(\"-12\", \"%- 3d\", -12),\n+        new Argument(\"-12 \", \"%- 4d\", -12),\n+        new Argument(\"-12  \", \"%- 5d\", -12),\n+        new Argument(\"-12       \", \"%- 10d\", -12),\n+\n+        new Argument(\" 1.2\", \"%- 1.1f\", 1.2),\n+        new Argument(\" 1.2\", \"%- 2.1f\", 1.2),\n+        new Argument(\" 1.2\", \"%- 3.1f\", 1.2),\n+        new Argument(\" 1.2\", \"%- 4.1f\", 1.2),\n+        new Argument(\" 1.2 \", \"%- 5.1f\", 1.2),\n+        new Argument(\" 1.2      \", \"%- 10.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%- 1.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%- 2.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%- 3.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%- 4.1f\", -1.2),\n+        new Argument(\"-1.2 \", \"%- 5.1f\", -1.2),\n+        new Argument(\"-1.2      \", \"%- 10.1f\", -1.2),\n+\n+        \/* zero padding, right adjusted, optional sign *\/\n+        new Argument(\"12\", \"%01d\", 12),\n+        new Argument(\"12\", \"%02d\", 12),\n+        new Argument(\"012\", \"%03d\", 12),\n+        new Argument(\"0012\", \"%04d\", 12),\n+        new Argument(\"00012\", \"%05d\", 12),\n+        new Argument(\"0000000012\", \"%010d\", 12),\n+\n+        new Argument(\"-12\", \"%01d\", -12),\n+        new Argument(\"-12\", \"%02d\", -12),\n+        new Argument(\"-12\", \"%03d\", -12),\n+        new Argument(\"-012\", \"%04d\", -12),\n+        new Argument(\"-0012\", \"%05d\", -12),\n+        new Argument(\"-000000012\", \"%010d\", -12),\n+\n+        new Argument(\"1.2\", \"%01.1f\", 1.2),\n+        new Argument(\"1.2\", \"%02.1f\", 1.2),\n+        new Argument(\"1.2\", \"%03.1f\", 1.2),\n+        new Argument(\"01.2\", \"%04.1f\", 1.2),\n+        new Argument(\"001.2\", \"%05.1f\", 1.2),\n+        new Argument(\"00000001.2\", \"%010.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%01.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%02.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%03.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%04.1f\", -1.2),\n+        new Argument(\"-01.2\", \"%05.1f\", -1.2),\n+        new Argument(\"-0000001.2\", \"%010.1f\", -1.2),\n+\n+        \/* zero padding, right adjusted, mandatory plus sign *\/\n+        new Argument(\"+12\", \"%+01d\", 12),\n+        new Argument(\"+12\", \"%+02d\", 12),\n+        new Argument(\"+12\", \"%+03d\", 12),\n+        new Argument(\"+012\", \"%+04d\", 12),\n+        new Argument(\"+0012\", \"%+05d\", 12),\n+        new Argument(\"+000000012\", \"%+010d\", 12),\n+\n+        new Argument(\"-12\", \"%+01d\", -12),\n+        new Argument(\"-12\", \"%+02d\", -12),\n+        new Argument(\"-12\", \"%+03d\", -12),\n+        new Argument(\"-012\", \"%+04d\", -12),\n+        new Argument(\"-0012\", \"%+05d\", -12),\n+        new Argument(\"-000000012\", \"%+010d\", -12),\n+\n+        new Argument(\"+1.2\", \"%+01.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+02.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+03.1f\", 1.2),\n+        new Argument(\"+1.2\", \"%+04.1f\", 1.2),\n+        new Argument(\"+01.2\", \"%+05.1f\", 1.2),\n+        new Argument(\"+0000001.2\", \"%+010.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"%+01.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+02.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+03.1f\", -1.2),\n+        new Argument(\"-1.2\", \"%+04.1f\", -1.2),\n+        new Argument(\"-01.2\", \"%+05.1f\", -1.2),\n+        new Argument(\"-0000001.2\", \"%+010.1f\", -1.2),\n+\n+        \/* zero padding, right adjusted, mandatory blank sign *\/\n+        new Argument(\" 12\", \"% 01d\", 12),\n+        new Argument(\" 12\", \"% 02d\", 12),\n+        new Argument(\" 12\", \"% 03d\", 12),\n+        new Argument(\" 012\", \"% 04d\", 12),\n+        new Argument(\" 0012\", \"% 05d\", 12),\n+        new Argument(\" 000000012\", \"% 010d\", 12),\n+\n+        new Argument(\"-12\", \"% 01d\", -12),\n+        new Argument(\"-12\", \"% 02d\", -12),\n+        new Argument(\"-12\", \"% 03d\", -12),\n+        new Argument(\"-012\", \"% 04d\", -12),\n+        new Argument(\"-0012\", \"% 05d\", -12),\n+        new Argument(\"-000000012\", \"% 010d\", -12),\n+\n+        new Argument(\" 1.2\", \"% 01.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 02.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 03.1f\", 1.2),\n+        new Argument(\" 1.2\", \"% 04.1f\", 1.2),\n+        new Argument(\" 01.2\", \"% 05.1f\", 1.2),\n+        new Argument(\" 0000001.2\", \"% 010.1f\", 1.2),\n+\n+        new Argument(\"-1.2\", \"% 01.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 02.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 03.1f\", -1.2),\n+        new Argument(\"-1.2\", \"% 04.1f\", -1.2),\n+        new Argument(\"-01.2\", \"% 05.1f\", -1.2),\n+        new Argument(\"-0000001.2\", \"% 010.1f\", -1.2),\n+    };\n+\n+    public static void main(String [] args) {\n+        for (Argument arg : arguments) {\n+            if (!arg.expected.equals(String.format(arg.format, arg.value))) {\n+                throw new RuntimeException(\"Expected value \" + arg.expected +\n+                \" not returned from String.format(\" + arg.format + \", \" + arg.value + \")\");\n+            }\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/util\/Formatter\/Padding.java","additions":316,"deletions":0,"binary":false,"changes":316,"status":"added"}]}