{"files":[{"patch":"@@ -110,1 +110,2 @@\n-        URL classUrl = TestAnonymousClassUnloading.class.getResource(\"TestAnonymousClassUnloading.class\");\n+        String rn = TestAnonymousClassUnloading.class.getSimpleName() + \".class\";\n+        URL classUrl = TestAnonymousClassUnloading.class.getResource(rn);\n","filename":"hotspot\/test\/compiler\/classUnloading\/anonymousClass\/TestAnonymousClassUnloading.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+\/\/ ClassFileInstaller is needed to place test.Empty into well-known place\n@@ -26,3 +27,3 @@\n- * @library \/runtime\/testlibrary\n- * @library classes\n- * @build test.Empty ClassUnloadCommon\n+ * @library \/test\/lib classes\n+ * @build test.Empty\n+ * @run driver ClassFileInstaller test.Empty\n@@ -32,0 +33,4 @@\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n@@ -50,2 +55,8 @@\n-        for (int i = 0; System.currentTimeMillis() < startTime + time; ++i) {\n-            ClassLoader ldr = ClassUnloadCommon.newClassLoader();\n+        char sep = File.separatorChar;\n+        String fileName = \"test\" + sep + \"Empty.class\";\n+        File file = new File(fileName);\n+        byte buff[] = read(file);\n+\n+        int i = 0;\n+        for (i = 0; System.currentTimeMillis() < startTime + time; ++i) {\n+            ClassLoader ldr = new MyClassLoader(buff);\n@@ -62,0 +73,1 @@\n+                c.getClass().getClassLoader(); \/\/ make sure we have a valid class.\n@@ -63,0 +75,1 @@\n+                System.out.println(\"i=\" + i + \", len\" + buff.length);\n@@ -68,0 +81,30 @@\n+        System.out.println(\"Finished \" + i + \" iterations in \" +\n+                           (System.currentTimeMillis() - startTime) + \" ms\");\n+    }\n+\n+    private static byte[] read(File file) {\n+        byte buff[] = new byte[(int)(file.length())];\n+        try {\n+            DataInputStream din = new DataInputStream(new FileInputStream(file));\n+            din.readFully(buff);\n+            din.close();\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return buff;\n+    }\n+\n+    static class MyClassLoader extends ClassLoader {\n+        byte buff[];\n+        MyClassLoader(byte buff[]) {\n+            this.buff = buff;\n+        }\n+\n+        public Class<?> loadClass() throws ClassNotFoundException {\n+            String name = \"test.Empty\";\n+            try {\n+                return defineClass(name, buff, 0, buff.length);\n+            } catch (Throwable e) {\n+                throw new ClassNotFoundException(name, e);\n+            }\n+        }\n","filename":"hotspot\/test\/runtime\/Metaspace\/FragmentMetaspaceSimple.java","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.file.Path;\n@@ -30,0 +31,1 @@\n+import java.util.stream.Stream;\n@@ -58,0 +60,4 @@\n+    \/**\n+     * Creates a class loader that loads classes from {@code ${test.class.path}}\n+     * before delegating to the system class loader.\n+     *\/\n@@ -59,0 +65,30 @@\n+        String cp = System.getProperty(\"test.class.path\", \".\");\n+        URL[] urls = Stream.of(cp.split(File.pathSeparator))\n+                .map(Paths::get)\n+                .map(ClassUnloadCommon::toURL)\n+                .toArray(URL[]::new);\n+        return new URLClassLoader(urls) {\n+            @Override\n+            public Class<?> loadClass(String cn, boolean resolve)\n+                throws ClassNotFoundException\n+            {\n+                synchronized (getClassLoadingLock(cn)) {\n+                    Class<?> c = findLoadedClass(cn);\n+                    if (c == null) {\n+                        try {\n+                            c = findClass(cn);\n+                        } catch (ClassNotFoundException e) {\n+                            c = getParent().loadClass(cn);\n+                        }\n+\n+                    }\n+                    if (resolve) {\n+                        resolveClass(c);\n+                    }\n+                    return c;\n+                }\n+            }\n+        };\n+    }\n+\n+    static URL toURL(Path path) {\n@@ -60,5 +96,3 @@\n-            return new URLClassLoader(new URL[] {\n-                Paths.get(System.getProperty(\"test.classes\",\".\") + File.separatorChar + \"classes\").toUri().toURL(),\n-            }, null);\n-        } catch (MalformedURLException e){\n-            throw new RuntimeException(\"Unexpected URL conversion failure\", e);\n+            return path.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n@@ -67,1 +101,0 @@\n-\n","filename":"hotspot\/test\/runtime\/testlibrary\/ClassUnloadCommon.java","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"}]}