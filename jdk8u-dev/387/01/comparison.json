{"files":[{"patch":"@@ -46,1 +46,0 @@\n-runtime\/XCheckJniJsig\/XCheckJSig.java 8023735 generic-all\n","filename":"hotspot\/test\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,5 @@\n-    vm.bits\n+    vm.bits \\\n+    vm.debug\n+\n+# Minimum jtreg version\n+requiredVersion=4.2 b13\n","filename":"hotspot\/test\/TEST.ROOT","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -110,1 +110,2 @@\n-        URL classUrl = TestAnonymousClassUnloading.class.getResource(\"TestAnonymousClassUnloading.class\");\n+        String rn = TestAnonymousClassUnloading.class.getSimpleName() + \".class\";\n+        URL classUrl = TestAnonymousClassUnloading.class.getResource(rn);\n","filename":"hotspot\/test\/compiler\/classUnloading\/anonymousClass\/TestAnonymousClassUnloading.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import jtreg.SkippedException;\n+\n@@ -29,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n@@ -40,1 +42,3 @@\n-        assert (!CompilerWhiteBoxTest.skipOnTieredCompilation(false));\n+        if (CompilerWhiteBoxTest.skipOnTieredCompilation(false)) {\n+            throw new SkippedException(\"Test isn't applicable for non-tiered mode\");\n+        }\n","filename":"hotspot\/test\/compiler\/tiered\/ConstantGettersTransitionsTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,0 +24,2 @@\n+import jtreg.SkippedException;\n+\n@@ -31,1 +33,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n@@ -47,1 +49,3 @@\n-        assert (!CompilerWhiteBoxTest.skipOnTieredCompilation(false));\n+        if (CompilerWhiteBoxTest.skipOnTieredCompilation(false)) {\n+            throw new SkippedException(\"Test isn't applicable for non-tiered mode\");\n+        }\n","filename":"hotspot\/test\/compiler\/tiered\/LevelTransitionTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import jtreg.SkippedException;\n@@ -28,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n@@ -57,1 +58,1 @@\n-            return;\n+            throw new SkippedException(\"Test isn't applicable for tiered mode\");\n","filename":"hotspot\/test\/compiler\/tiered\/NonTieredLevelsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n@@ -36,0 +36,3 @@\n+\n+import jtreg.SkippedException;\n+\n@@ -39,1 +42,1 @@\n-            return;\n+            throw new SkippedException(\"Test isn't applicable for non-tiered mode\");\n","filename":"hotspot\/test\/compiler\/tiered\/TieredLevelsTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/testlibrary \/test\/lib\n@@ -39,0 +39,1 @@\n+import jtreg.SkippedException;\n@@ -89,3 +90,1 @@\n-            System.out.println(\n-                \"Skipping test of \" + option + \" : insufficient memory\");\n-            return false;\n+            throw new SkippedException(\"Skipping test of \" + option + \" : insufficient memory\");\n","filename":"hotspot\/test\/gc\/arguments\/TestAggressiveHeap.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/testlibrary \/test\/lib\n@@ -42,0 +42,1 @@\n+import jtreg.SkippedException;\n@@ -60,2 +61,1 @@\n-            System.out.println(\"Skipped. Heap is too small\");\n-            return;\n+            throw new SkippedException(\"Heap is too small\");\n@@ -65,2 +65,1 @@\n-            System.out.println(\"Skipped. Initial heap size is to close to max heap size.\");\n-            return;\n+            throw new SkippedException(\"Initial heap size is to close to max heap size.\");\n","filename":"hotspot\/test\/gc\/g1\/TestHumongousShrinkHeap.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n- * @requires (vm.gc==\"G1\" | vm.gc==\"null\")\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n+ * @requires (vm.gc==\"G1\" | vm.gc==\"null\") & vm.debug\n@@ -38,0 +38,1 @@\n+import jtreg.SkippedException;\n@@ -91,5 +92,0 @@\n-        if (!Platform.isDebugBuild()) {\n-            System.out.println(\"Skip tests on non-debug builds because the required option TracePageSizes is a debug-only option.\");\n-            return;\n-        }\n-\n@@ -101,2 +97,1 @@\n-            System.out.println(\"Skip tests because large page support does not seem to be available on this platform.\");\n-            return;\n+            throw new SkippedException(\"Large page support does not seem to be available on this platform.\");\n","filename":"hotspot\/test\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import jtreg.SkippedException;\n+\n@@ -70,4 +72,3 @@\n-            System.out.format(\"Skiping test for %d cache size due max cache size %d\",\n-                    hotCardTableSize, maxCacheSize\n-            );\n-            return;\n+            throw new SkippedException(String.format(\n+                    \"Skiping test for %d cache size due max cache size %d\",\n+                    hotCardTableSize, maxCacheSize));\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData00.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData05.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData10.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData15.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData20.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData25.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData30.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.bits == 64\n","filename":"hotspot\/test\/gc\/metaspace\/CompressedClassSpaceSizeInJmapHeap.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+ * @requires vm.bits == 64\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspaceMemoryPool.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n- * @compile -XDignore.symbol.file TestBootNativeLibraryPath.java\n@@ -29,1 +28,0 @@\n- * @run main TestBootNativeLibraryPath\n@@ -31,1 +29,5 @@\n-*\/\n+ * @library \/test\/lib\n+ * @requires vm.bits == 32\n+ * @compile -XDignore.symbol.file TestBootNativeLibraryPath.java\n+ * @run main TestBootNativeLibraryPath\n+ *\/\n@@ -110,4 +112,0 @@\n-            if (!System.getProperty(\"sun.arch.data.model\").equals(\"32\")) {\n-                System.out.println(\"Warning: test skipped for 64-bit systems\\n\");\n-                return;\n-            }\n","filename":"hotspot\/test\/runtime\/6819213\/TestBootNativeLibraryPath.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n- * @library \/testlibrary\n+ * @requires vm.bits == 64\n+ * @library \/testlibrary \/test\/lib\n+ * @run main CompressedClassPointers\n@@ -32,0 +34,1 @@\n+import jtreg.SkippedException;\n@@ -117,6 +120,0 @@\n-      if (!Platform.is64bit()) {\n-          \/\/ Can't test this on 32 bit, just pass\n-          System.out.println(\"Skipping test on 32bit\");\n-          return;\n-      }\n-      \/\/ Solaris 10 can't mmap compressed oops space without a base\n@@ -126,2 +123,1 @@\n-               System.out.println(\"Skipping test on Solaris 10\");\n-               return;\n+                throw new SkippedException(\"Solaris 10 can't mmap compressed oops space without a base\");\n","filename":"hotspot\/test\/runtime\/CompressedOops\/CompressedClassPointers.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+ * @requires vm.bits == 64\n+ * @run main CompressedKlassPointerAndOops\n@@ -37,7 +39,0 @@\n-\n-        if (!Platform.is64bit()) {\n-            \/\/ Can't test this on 32 bit, just pass\n-            System.out.println(\"Skipping test on 32bit\");\n-            return;\n-        }\n-\n","filename":"hotspot\/test\/runtime\/CompressedOops\/CompressedKlassPointerAndOops.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8078470\n@@ -28,0 +29,1 @@\n+ * @requires vm.debug\n@@ -30,1 +32,0 @@\n- * @bug 8078470\n@@ -38,5 +39,0 @@\n-        if (!Platform.isDebugBuild()) {\n-            System.out.println(\"Test requires a non-product build - skipping\");\n-            return;\n-        }\n-\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/TestOnError.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+\/\/ ClassFileInstaller is needed to place test.Empty into well-known place\n@@ -26,3 +27,3 @@\n- * @library \/runtime\/testlibrary\n- * @library classes\n- * @build test.Empty ClassUnloadCommon\n+ * @library \/test\/lib classes\n+ * @build test.Empty\n+ * @run driver ClassFileInstaller test.Empty\n@@ -32,0 +33,4 @@\n+import java.io.DataInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n@@ -50,2 +55,8 @@\n-        for (int i = 0; System.currentTimeMillis() < startTime + time; ++i) {\n-            ClassLoader ldr = ClassUnloadCommon.newClassLoader();\n+        char sep = File.separatorChar;\n+        String fileName = \"test\" + sep + \"Empty.class\";\n+        File file = new File(fileName);\n+        byte buff[] = read(file);\n+\n+        int i = 0;\n+        for (i = 0; System.currentTimeMillis() < startTime + time; ++i) {\n+            ClassLoader ldr = new MyClassLoader(buff);\n@@ -62,0 +73,1 @@\n+                c.getClass().getClassLoader(); \/\/ make sure we have a valid class.\n@@ -63,0 +75,1 @@\n+                System.out.println(\"i=\" + i + \", len\" + buff.length);\n@@ -68,0 +81,30 @@\n+        System.out.println(\"Finished \" + i + \" iterations in \" +\n+                           (System.currentTimeMillis() - startTime) + \" ms\");\n+    }\n+\n+    private static byte[] read(File file) {\n+        byte buff[] = new byte[(int)(file.length())];\n+        try {\n+            DataInputStream din = new DataInputStream(new FileInputStream(file));\n+            din.readFully(buff);\n+            din.close();\n+        } catch (IOException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return buff;\n+    }\n+\n+    static class MyClassLoader extends ClassLoader {\n+        byte buff[];\n+        MyClassLoader(byte buff[]) {\n+            this.buff = buff;\n+        }\n+\n+        public Class<?> loadClass() throws ClassNotFoundException {\n+            String name = \"test.Empty\";\n+            try {\n+                return defineClass(name, buff, 0, buff.length);\n+            } catch (Throwable e) {\n+                throw new ClassNotFoundException(name, e);\n+            }\n+        }\n","filename":"hotspot\/test\/runtime\/Metaspace\/FragmentMetaspaceSimple.java","additions":49,"deletions":6,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @requires vm.bits == \"64\"\n+ * @requires vm.bits == 64\n","filename":"hotspot\/test\/runtime\/Metaspace\/MaxMetaspaceSizeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @requires vm.bits == 64\n@@ -33,0 +34,1 @@\n+ * @run main CdsDifferentObjectAlignment\n@@ -38,0 +40,1 @@\n+\n@@ -39,10 +42,2 @@\n-        String nativeWordSize = System.getProperty(\"sun.arch.data.model\");\n-        if (!Platform.is64bit()) {\n-            System.out.println(\"ObjectAlignmentInBytes for CDS is only \" +\n-                \"supported on 64bit platforms; this plaform is \" +\n-                nativeWordSize);\n-            System.out.println(\"Skipping the test\");\n-        } else {\n-            createAndLoadSharedArchive(16, 64);\n-            createAndLoadSharedArchive(64, 32);\n-        }\n+        createAndLoadSharedArchive(16, 64);\n+        createAndLoadSharedArchive(64, 32);\n@@ -51,1 +46,0 @@\n-\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/CdsDifferentObjectAlignment.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.bits == 64\n@@ -29,0 +30,1 @@\n+ * @run main CdsSameObjectAlignment\n@@ -35,12 +37,4 @@\n-        String nativeWordSize = System.getProperty(\"sun.arch.data.model\");\n-        if (!Platform.is64bit()) {\n-            System.out.println(\"ObjectAlignmentInBytes for CDS is only \" +\n-                \"supported on 64bit platforms; this plaform is \" +\n-                nativeWordSize);\n-            System.out.println(\"Skipping the test\");\n-        } else {\n-            dumpAndLoadSharedArchive(8);\n-            dumpAndLoadSharedArchive(16);\n-            dumpAndLoadSharedArchive(32);\n-            dumpAndLoadSharedArchive(64);\n-        }\n+        dumpAndLoadSharedArchive(8);\n+        dumpAndLoadSharedArchive(16);\n+        dumpAndLoadSharedArchive(32);\n+        dumpAndLoadSharedArchive(64);\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/CdsSameObjectAlignment.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @library \/testlibrary\n+ * @library \/testlibrary \/test\/lib\n+ * @requires os.family == \"solaris\" | os.family == \"linux\" | os.family == \"mac\"\n@@ -32,1 +33,2 @@\n-import java.util.*;\n+import java.io.File;\n+import java.util.Map;\n@@ -34,0 +36,1 @@\n+import jtreg.SkippedException;\n@@ -39,4 +42,0 @@\n-        if (!Platform.isSolaris() && !Platform.isLinux() && !Platform.isOSX()) {\n-            System.out.println(\"Test only applicable on Solaris, Linux, and Mac OSX, skipping\");\n-            return;\n-        }\n@@ -49,1 +48,0 @@\n-            libjsig = jdk_path + \"\/jre\/lib\/server\/libjsig.dylib\";\n@@ -51,0 +49,4 @@\n+            libjsig = jdk_path + \"\/jre\/lib\/libjsig.dylib\"; \/\/ jdk location\n+            if (!(new File(libjsig).exists())) {\n+                libjsig = jdk_path + \"\/lib\/libjsig.dylib\"; \/\/ jre location\n+            }\n@@ -52,1 +54,0 @@\n-            libjsig = jdk_path + \"\/jre\/lib\/\" + os_arch + \"\/libjsig.so\";\n@@ -54,8 +55,4 @@\n-        }\n-        String java_program;\n-        if (Platform.isSolaris()) {\n-            \/\/ On Solaris, need to call the 64-bit Java directly in order for\n-            \/\/ LD_PRELOAD to work because libjsig.so is 64-bit.\n-            java_program = jdk_path + \"\/jre\/bin\/\" + os_arch + \"\/java\";\n-        } else {\n-            java_program = JDKToolFinder.getJDKTool(\"java\");\n+            libjsig = jdk_path + \"\/jre\/lib\/\" + os_arch + \"\/libjsig.so\"; \/\/ jdk location\n+            if (!(new File(libjsig).exists())) {\n+                libjsig = jdk_path + \"\/lib\/\" + os_arch + \"\/libjsig.so\"; \/\/ jre location\n+            }\n@@ -66,1 +63,0 @@\n-        System.out.println(\"java_program: \" + java_program);\n@@ -68,1 +64,6 @@\n-        ProcessBuilder pb = new ProcessBuilder(java_program, \"-Xcheck:jni\", \"-version\");\n+        \/\/ Make sure the libjsig file exists.\n+        if (!(new File(libjsig).exists())) {\n+            throw new jtreg.SkippedException(\"File \" + libjsig + \" not found\");\n+        }\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xcheck:jni\", \"-version\");\n@@ -75,1 +76,1 @@\n-        pb = new ProcessBuilder(java_program, \"-Xcheck:jni\", \"-verbose:jni\", \"-version\");\n+        pb = ProcessTools.createJavaProcessBuilder(\"-Xcheck:jni\", \"-verbose:jni\", \"-version\");\n","filename":"hotspot\/test\/runtime\/XCheckJniJsig\/XCheckJSig.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @requires os.family == \"linux\"\n@@ -33,0 +34,1 @@\n+\n@@ -38,5 +40,0 @@\n-    if (!Platform.isLinux()) {\n-      System.out.println(\"Skipping. TestLargePagesFlags has only been implemented for Linux.\");\n-      return;\n-    }\n-\n","filename":"hotspot\/test\/runtime\/memory\/LargePages\/TestLargePagesFlags.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,4 +23,0 @@\n-import java.io.File;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import java.util.ArrayList;\n@@ -33,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/testlibrary \/test\/lib\n@@ -37,0 +33,8 @@\n+\n+import com.oracle.java.testlibrary.ProcessTools;\n+import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jtreg.SkippedException;\n+\n+import java.util.ArrayList;\n+import java.io.File;\n+\n@@ -50,1 +54,1 @@\n-            if (new File(taskset1).exists())\n+            if (new File(taskset1).exists()) {\n@@ -52,1 +56,1 @@\n-            else if (new File(taskset2).exists())\n+            } else if (new File(taskset2).exists()) {\n@@ -54,3 +58,2 @@\n-            else {\n-                System.out.println(\"Skipping test: could not find taskset command\");\n-                return;\n+            } else {\n+                throw new SkippedException(\"Could not find taskset command\");\n@@ -62,2 +65,1 @@\n-                System.out.println(\"Skipping test: only one processor available\");\n-                return;\n+                throw new SkippedException(\"only one processor available\");\n","filename":"hotspot\/test\/runtime\/os\/AvailableProcessors.java","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.file.Path;\n@@ -30,0 +31,1 @@\n+import java.util.stream.Stream;\n@@ -58,0 +60,4 @@\n+    \/**\n+     * Creates a class loader that loads classes from {@code ${test.class.path}}\n+     * before delegating to the system class loader.\n+     *\/\n@@ -59,0 +65,30 @@\n+        String cp = System.getProperty(\"test.class.path\", \".\");\n+        URL[] urls = Stream.of(cp.split(File.pathSeparator))\n+                .map(Paths::get)\n+                .map(ClassUnloadCommon::toURL)\n+                .toArray(URL[]::new);\n+        return new URLClassLoader(urls) {\n+            @Override\n+            public Class<?> loadClass(String cn, boolean resolve)\n+                throws ClassNotFoundException\n+            {\n+                synchronized (getClassLoadingLock(cn)) {\n+                    Class<?> c = findLoadedClass(cn);\n+                    if (c == null) {\n+                        try {\n+                            c = findClass(cn);\n+                        } catch (ClassNotFoundException e) {\n+                            c = getParent().loadClass(cn);\n+                        }\n+\n+                    }\n+                    if (resolve) {\n+                        resolveClass(c);\n+                    }\n+                    return c;\n+                }\n+            }\n+        };\n+    }\n+\n+    static URL toURL(Path path) {\n@@ -60,5 +96,3 @@\n-            return new URLClassLoader(new URL[] {\n-                Paths.get(System.getProperty(\"test.classes\",\".\") + File.separatorChar + \"classes\").toUri().toURL(),\n-            }, null);\n-        } catch (MalformedURLException e){\n-            throw new RuntimeException(\"Unexpected URL conversion failure\", e);\n+            return path.toUri().toURL();\n+        } catch (MalformedURLException e) {\n+            throw new RuntimeException(e);\n@@ -67,1 +101,0 @@\n-\n","filename":"hotspot\/test\/runtime\/testlibrary\/ClassUnloadCommon.java","additions":39,"deletions":6,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,0 @@\n-import java.io.PrintWriter;\n-import com.oracle.java.testlibrary.*;\n@@ -31,1 +29,2 @@\n- * @library \/testlibrary\n+ * @library \/testlibrary \/test\/lib\n+ * @requires vm.bits == 64\n@@ -36,0 +35,6 @@\n+\n+import java.io.PrintWriter;\n+\n+import com.oracle.java.testlibrary.*;\n+import jtreg.SkippedException;\n+\n@@ -39,5 +44,0 @@\n-        if (!Platform.is64bit()) {\n-            System.out.println(\"Test needs a 4GB heap and can only be run as a 64bit process, skipping.\");\n-            return;\n-        }\n-\n@@ -58,2 +58,1 @@\n-            System.out.println(\"Test could not reserve or allocate enough space, skipping\");\n-            return;\n+            throw new SkippedException(\"Test could not reserve or allocate enough space\");\n","filename":"hotspot\/test\/serviceability\/jvmti\/GetObjectSizeOverflow.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+        map.put(\"vm.debug\", vmDebug());\n@@ -106,0 +107,7 @@\n+    \/**\n+     * @return debug level value extracted from the \"java.vm.version\" property.\n+     *\/\n+    protected String vmDebug() {\n+        return \"\" + System.getProperty(\"java.vm.version\").toLowerCase().contains(\"debug\");\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jtreg;\n+\n+\/**\n+ * {@code SkippedException} is an exception treaded by jtreg as an indication\n+ * of skipped status.\n+ *\/\n+public final class SkippedException extends RuntimeException {\n+    public SkippedException(String s, Throwable t) {\n+        super(s, t);\n+    }\n+\n+    public SkippedException(String s) {\n+        super(s);\n+    }\n+}\n","filename":"test\/lib\/jtreg\/SkippedException.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}