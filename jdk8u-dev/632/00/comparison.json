{"files":[{"patch":"@@ -272,1 +272,0 @@\n-    private static final Pattern YEAR = Pattern.compile(\"(?i)(?<min>min)|(?<max>max)|(?<only>only)|(?<year>[0-9]+)\");\n@@ -333,1 +332,2 @@\n-                        if (first.equals(\"Zone\")) {\n+                        int len = first.length();\n+                        if (first.regionMatches(true, 0, \"Zone\", 0, len)) {\n@@ -346,1 +346,1 @@\n-                            if (first.equals(\"Rule\")) {\n+                            if (first.regionMatches(true, 0, \"Rule\", 0, len)) {\n@@ -353,1 +353,1 @@\n-                            } else if (first.equals(\"Link\")) {\n+                            } else if (first.regionMatches(true, 0, \"Link\", 0, len)) {\n@@ -443,1 +443,1 @@\n-            if (dayRule.startsWith(\"last\")) {\n+            if (dayRule.regionMatches(true, 0, \"last\", 0, 4)) {\n@@ -476,25 +476,9 @@\n-    private int parseYear(Scanner s, int defaultYear) {\n-        if (s.hasNext(YEAR)) {\n-            s.next(YEAR);\n-            MatchResult mr = s.match();\n-            if (mr.group(1) != null) {\n-                return 1900;  \/\/ systemv has min\n-            } else if (mr.group(2) != null) {\n-                return YEAR_MAX_VALUE;\n-            } else if (mr.group(3) != null) {\n-                return defaultYear;\n-            }\n-            return Integer.parseInt(mr.group(4));\n-            \/*\n-            if (mr.group(\"min\") != null) {\n-                \/\/return YEAR_MIN_VALUE;\n-                return 1900;  \/\/ systemv has min\n-            } else if (mr.group(\"max\") != null) {\n-                return YEAR_MAX_VALUE;\n-            } else if (mr.group(\"only\") != null) {\n-                return defaultYear;\n-            }\n-            return Integer.parseInt(mr.group(\"year\"));\n-            *\/\n-        }\n-        throw new IllegalArgumentException(\"Unknown year: \" + s.next());\n+    int parseYear(Scanner s, int defaultYear) {\n+        String year = s.next();\n+        int len = year.length();\n+\n+        if (year.regionMatches(true, 0, \"minimum\", 0, len)) return 1900;\n+        if (year.regionMatches(true, 0, \"maximum\", 0, len)) return YEAR_MAX_VALUE;\n+        if (year.regionMatches(true, 0, \"only\", 0, len)) return defaultYear;\n+\n+        return Integer.parseInt(year);\n","filename":"jdk\/make\/src\/classes\/build\/tools\/tzdb\/TzdbZoneRulesCompiler.java","additions":14,"deletions":30,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,2 @@\n-                if (\"min\".equals(token) || \"minimum\".equals(token)) {\n+                int len = token.length();\n+                if (token.regionMatches(true, 0, \"minimum\", 0, len)) {\n@@ -175,1 +176,1 @@\n-                } else if (\"max\".equals(token) || \"maximum\".equals(token)) {\n+                } else if (token.regionMatches(true, 0, \"maximum\", 0, len)) {\n@@ -178,1 +179,1 @@\n-                } else if (\"only\".equals(token)) {\n+                } else if (token.regionMatches(true, 0, \"only\", 0, len)) {\n","filename":"jdk\/test\/sun\/util\/calendar\/zi\/RuleRec.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -245,0 +245,1 @@\n+                int len = token.length();\n@@ -246,1 +247,1 @@\n-                if (continued || \"Zone\".equals(token)) {\n+                if (continued || token.regionMatches(true, 0, \"Zone\", 0, len)){\n@@ -273,1 +274,1 @@\n-                } else if (\"Rule\".equals(token)) {\n+                } else if (token.regionMatches(true, 0, \"Rule\", 0, len)) {\n@@ -286,1 +287,1 @@\n-                } else if (\"Link\".equals(token)) {\n+                } else if (token.regionMatches(true, 0, \"Link\", 0, len)) {\n","filename":"jdk\/test\/sun\/util\/calendar\/zi\/Zoneinfo.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}