{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -356,1 +356,5 @@\n-                result = RSACore.rsa(paddingCopy, privateKey, true);\n+                if (paddingCopy != null) {\n+                    result = RSACore.rsa(paddingCopy, privateKey, true);\n+                } else {\n+                    throw new BadPaddingException(\"Padding error in signing\");\n+                }\n@@ -362,0 +366,4 @@\n+                if (result == null) {\n+                    throw new BadPaddingException\n+                            (\"Padding error in verification\");\n+                }\n@@ -365,1 +373,6 @@\n-                result = RSACore.rsa(paddingCopy, publicKey);\n+                if (paddingCopy != null) {\n+                    result = RSACore.rsa(paddingCopy, publicKey);\n+                } else {\n+                    throw new BadPaddingException\n+                            (\"Padding error in encryption\");\n+                }\n@@ -371,0 +384,4 @@\n+                if (result == null) {\n+                    throw new BadPaddingException\n+                            (\"Padding error in decryption\");\n+                }\n@@ -379,1 +396,1 @@\n-            if (paddingCopy != null             \/\/ will not happen\n+            if (paddingCopy != null\n@@ -381,1 +398,1 @@\n-                    && paddingCopy != result) { \/\/ DO NOT CLEAN, THIS IS RESULT!\n+                    && paddingCopy != result) { \/\/ DO NOT CLEAN, THIS IS RESULT\n","filename":"jdk\/src\/share\/classes\/com\/sun\/crypto\/provider\/RSACipher.java","additions":22,"deletions":5,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -731,3 +731,6 @@\n-            byte[] padded = padding.pad(data);\n-            return padded;\n-        } catch (GeneralSecurityException e) {\n+            byte[] result = padding.pad(data);\n+            if (result == null) {\n+                throw new ProviderException(\"Error padding data\");\n+            }\n+            return result;\n+        } catch (InvalidKeyException | InvalidAlgorithmParameterException e) {\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/P11Signature.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import javax.crypto.BadPaddingException;\n@@ -239,1 +238,1 @@\n-     * Pad the data and return the padded block.\n+     * Pad the data and return the result or null if error occurred.\n@@ -241,1 +240,1 @@\n-    public byte[] pad(byte[] data) throws BadPaddingException {\n+    public byte[] pad(byte[] data) {\n@@ -246,1 +245,1 @@\n-     * Pad the data and return the padded block.\n+     * Pad the data and return the result or null if error occurred.\n@@ -248,2 +247,1 @@\n-    public byte[] pad(byte[] data, int ofs, int len)\n-            throws BadPaddingException {\n+    public byte[] pad(byte[] data, int ofs, int len) {\n@@ -251,3 +249,1 @@\n-            throw new BadPaddingException(\"Data must be shorter than \"\n-                + (maxDataSize + 1) + \" bytes but received \"\n-                + len + \" bytes.\");\n+            return null;\n@@ -257,0 +253,1 @@\n+            \/\/ assert len == paddedSize and data.length - ofs > len?\n@@ -269,1 +266,1 @@\n-     * Unpad the padded block and return the data.\n+     * Unpad the padded block and return the result or null if error occurred.\n@@ -271,16 +268,15 @@\n-    public byte[] unpad(byte[] padded) throws BadPaddingException {\n-        if (padded.length != paddedSize) {\n-            throw new BadPaddingException(\"Decryption error.\" +\n-                \"The padded array length (\" + padded.length +\n-                \") is not the specified padded size (\" + paddedSize + \")\");\n-        }\n-        switch (type) {\n-        case PAD_NONE:\n-            return padded;\n-        case PAD_BLOCKTYPE_1:\n-        case PAD_BLOCKTYPE_2:\n-            return unpadV15(padded);\n-        case PAD_OAEP_MGF1:\n-            return unpadOAEP(padded);\n-        default:\n-            throw new AssertionError();\n+    public byte[] unpad(byte[] padded) {\n+        if (padded.length == paddedSize) {\n+            switch (type) {\n+            case PAD_NONE:\n+                return padded;\n+            case PAD_BLOCKTYPE_1:\n+            case PAD_BLOCKTYPE_2:\n+                return unpadV15(padded);\n+            case PAD_OAEP_MGF1:\n+                return unpadOAEP(padded);\n+            default:\n+                throw new AssertionError();\n+            }\n+        } else {\n+            return null;\n@@ -293,1 +289,1 @@\n-    private byte[] padV15(byte[] data, int ofs, int len) throws BadPaddingException {\n+    private byte[] padV15(byte[] data, int ofs, int len) {\n@@ -331,1 +327,1 @@\n-     *\n+     * Return the result or null if error occurred.\n@@ -334,1 +330,1 @@\n-    private byte[] unpadV15(byte[] padded) throws BadPaddingException {\n+    private byte[] unpadV15(byte[] padded) {\n@@ -370,2 +366,0 @@\n-        BadPaddingException bpe = new BadPaddingException(\"Decryption error\");\n-\n@@ -373,1 +367,1 @@\n-            throw bpe;\n+            return null;\n@@ -382,0 +376,1 @@\n+     * Return the result or null if error occurred.\n@@ -383,1 +378,1 @@\n-    private byte[] padOAEP(byte[] M, int ofs, int len) throws BadPaddingException {\n+    private byte[] padOAEP(byte[] M, int ofs, int len) {\n@@ -432,0 +427,1 @@\n+     * Return the result or null if error occurred.\n@@ -433,1 +429,1 @@\n-    private byte[] unpadOAEP(byte[] padded) throws BadPaddingException {\n+    private byte[] unpadOAEP(byte[] padded) {\n@@ -489,7 +485,1 @@\n-        BadPaddingException bpe = new BadPaddingException(\"Decryption error\");\n-\n-        if (bp) {\n-            throw bpe;\n-        } else {\n-            return m;\n-        }\n+        return (bp? null : m);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/rsa\/RSAPadding.java","additions":31,"deletions":41,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,2 +192,3 @@\n-            byte[] encrypted = RSACore.rsa(padded, privateKey, true);\n-            return encrypted;\n+            if (padded != null) {\n+                return RSACore.rsa(padded, privateKey, true);\n+            }\n@@ -199,0 +200,1 @@\n+        throw new SignatureException(\"Could not sign data\");\n@@ -209,1 +211,1 @@\n-            throw new SignatureException(\"Signature length not correct: got \" +\n+            throw new SignatureException(\"Bad signature length: got \" +\n@@ -213,1 +215,1 @@\n-        byte[] digest = getDigestValue();\n+\n@@ -215,0 +217,2 @@\n+            \/\/ https:\/\/www.rfc-editor.org\/rfc\/rfc8017.html#section-8.2.2\n+            \/\/ Step 4 suggests comparing the encoded message\n@@ -216,3 +220,5 @@\n-            byte[] unpadded = padding.unpad(decrypted);\n-            byte[] decodedDigest = decodeSignature(digestOID, unpadded);\n-            return MessageDigest.isEqual(digest, decodedDigest);\n+\n+            byte[] digest = getDigestValue();\n+            byte[] encoded = encodeSignature(digestOID, digest);\n+            byte[] padded = padding.pad(encoded);\n+            return MessageDigest.isEqual(padded, decrypted);\n@@ -220,4 +226,0 @@\n-            \/\/ occurs if the app has used the wrong RSA public key\n-            \/\/ or if sigBytes is invalid\n-            \/\/ return false rather than propagating the exception for\n-            \/\/ compatibility\/ease of use\n","filename":"jdk\/src\/share\/classes\/sun\/security\/rsa\/RSASignature.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8302017\n+ * @summary Ensure that RSAPadding class works as expected after refactoring\n+ * @modules java.base\/sun.security.rsa\n+ *\/\n+import java.util.Arrays;\n+import sun.security.rsa.RSAPadding;\n+\n+public class RSAPaddingCheck {\n+\n+    private static int[] PADDING_TYPES =  {\n+        RSAPadding.PAD_BLOCKTYPE_1,\n+        RSAPadding.PAD_BLOCKTYPE_2,\n+        RSAPadding.PAD_NONE,\n+        RSAPadding.PAD_OAEP_MGF1,\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        int size = 2048 >> 3;\n+        byte[] testData = \"This is some random to-be-padded Data\".getBytes();\n+        for (int type : PADDING_TYPES) {\n+            byte[] data = (type == RSAPadding.PAD_NONE?\n+                    Arrays.copyOf(testData, size) : testData);\n+            System.out.println(\"Testing PaddingType: \" + type);\n+            RSAPadding padding = RSAPadding.getInstance(type, size);\n+            byte[] paddedData = padding.pad(data);\n+            if (paddedData == null) {\n+                throw new RuntimeException(\"Unexpected padding op failure!\");\n+            }\n+\n+            byte[] data2 = padding.unpad(paddedData);\n+            if (data2 == null) {\n+                throw new RuntimeException(\"Unexpected unpadding op failure!\");\n+            }\n+            if (!Arrays.equals(data, data2)) {\n+                throw new RuntimeException(\"diff check failure!\");\n+            }\n+        }\n+    }\n+}\n","filename":"jdk\/test\/sun\/security\/rsa\/RSAPaddingCheck.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}