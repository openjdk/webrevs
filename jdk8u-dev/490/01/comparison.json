{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,31 +79,37 @@\n-        try (Recording r = new Recording()) {\n-            Map<String, String> p = new HashMap<>(settings);\n-            p.put(EventNames.OldObjectSample + \"#\" + Enabled.NAME, \"true\");\n-            r.setName(\"dodo\");\n-            r.setSettings(p);\n-            r.setToDisk(true);\n-            r.start();\n-            clearLeak();\n-            System.out.println(\"Recording id: \" + r.getId());\n-            System.out.println(\"Settings: \" + settings.toString());\n-            System.out.println(\"Command: JFR.dump \" + pathToGcRoots);\n-            System.out.println(\"Chains expected: \" + expectedChains);\n-            buildLeak();\n-            System.gc();\n-            System.gc();\n-            File recording = new File(\"TestJcmdDumpPathToGCRoots\" + r.getId() + \".jfr\");\n-            recording.delete();\n-            JcmdHelper.jcmd(\"JFR.dump\", \"name=dodo\", pathToGcRoots, \"filename=\" + recording.getAbsolutePath());\n-            r.setSettings(Collections.emptyMap());\n-            List<RecordedEvent> events = RecordingFile.readAllEvents(recording.toPath());\n-            if (events.isEmpty()) {\n-                throw new Exception(\"No events found in recoding\");\n-            }\n-            boolean chains = hasChains(events);\n-            if (expectedChains && !chains) {\n-                System.out.println(events);\n-                throw new Exception(\"Expected chains but found none\");\n-            }\n-            if (!expectedChains && chains) {\n-                System.out.println(events);\n-                throw new Exception(\"Didn't expect chains but found some\");\n+        while (true) {\n+            try (Recording r = new Recording()) {\n+                Map<String, String> p = new HashMap<>(settings);\n+                p.put(EventNames.OldObjectSample + \"#\" + Enabled.NAME, \"true\");\n+                r.setName(\"dodo\");\n+                r.setSettings(p);\n+                r.setToDisk(true);\n+                r.start();\n+                clearLeak();\n+                System.out.println(\"Recording id: \" + r.getId());\n+                System.out.println(\"Settings: \" + settings.toString());\n+                System.out.println(\"Command: JFR.dump \" + pathToGcRoots);\n+                System.out.println(\"Chains expected: \" + expectedChains);\n+                buildLeak();\n+                System.gc();\n+                System.gc();\n+                File recording = new File(\"TestJcmdDumpPathToGCRoots\" + r.getId() + \".jfr\");\n+                recording.delete();\n+                JcmdHelper.jcmd(\"JFR.dump\", \"name=dodo\", pathToGcRoots, \"filename=\" + recording.getAbsolutePath());\n+                r.setSettings(Collections.emptyMap());\n+                List<RecordedEvent> events = RecordingFile.readAllEvents(recording.toPath());\n+                if (events.isEmpty()) {\n+                    System.out.println(\"No events found in recording. Retrying.\");\n+                    continue;\n+                }\n+                boolean chains = hasChains(events);\n+                if (expectedChains && !chains) {\n+                    System.out.println(events);\n+                    System.out.println(\"Expected chains but found none. Retrying.\");\n+                    continue;\n+                }\n+                if (!expectedChains && chains) {\n+                    System.out.println(events);\n+                    System.out.println(\"Didn't expect chains but found some. Retrying.\");\n+                    continue;\n+                }\n+                return; \/\/ Success\n@@ -116,0 +122,1 @@\n+      System.gc();\n","filename":"jdk\/test\/jdk\/jfr\/jcmd\/TestJcmdDumpPathToGCRoots.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"}]}