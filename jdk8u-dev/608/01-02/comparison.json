{"files":[{"patch":"@@ -48,1 +48,1 @@\n-usage=Uso: jar {ctxui}[vfmn0Me] [jar-file] [manifest-file] [entry-point] [-C dir] arquivos ...\\nOp\\u00E7\\u00F5es:\\n    -c  cria novo arquivo compactado\\n    -t  lista o sum\\u00E1rio do arquivo compactado\\n    -x  extrai arquivos com o nome (ou todos) do arquivo compactado\\n    -u  atualiza o arquivo compactado existente\\n    -v  gera sa\\u00EDda detalhada na sa\\u00EDda padr\\u00E3o\\n    -f  especifica o nome do arquivo do arquivo compactado\\n    -m  inclui as informa\\u00E7\\u00F5es do manifesto do arquivo de manifesto especificado\\n    -n   executa a normaliza\\u00E7\\u00E3o Pack200 ap\\u00F3s a cria\\u00E7\\u00E3o de um novo arquivo compactado\\n    -e  especifica o ponto de entrada da aplicativo para aplicativo stand-alone \\n        empacotada em um arquivo jar execut\\u00E1vel\\n    -0  armazena somente; n\\u00E3o usa compacta\\u00E7\\u00E3o ZIP\\n    -P  preserva os componentes '\/' inicial (caminho absoluto) e \"..\" (diret\\u00F3rio pai) nos nomes dos arquivos\\n    -M  n\\u00E3o cria um arquivo de manifesto para as entradas\\n    -i  gera informa\\u00E7\\u00F5es de \\u00EDndice para os arquivos especificados\\n    -C  passa para o diret\\u00F3rio especificado e inclui o arquivo a seguir\\nSe um arquivo tamb\\u00E9m for um diret\\u00F3rio, ele ser\\u00E1 processado repetidamente.\\nO nome do arquivo de manifesto, o nome do arquivo compactado e o nome do ponto de entrada s\\u00E3o\\nespecificados na mesma ordem dos flags 'm', 'f' e 'e'.\\n\\nExemplo 1: para arquivar dois arquivos de classe em um arquivo compactado denominado classes.jar: \\n       jar cvf classes.jar Foo.class Bar.class \\nExemplo 2: use um arquivo de manifesto existente 'mymanifest' e arquive todos os\\n           arquivos no diret\\u00F3rio foo\/ na 'classes.jar': \\n       jar cvfm classes.jar mymanifest -C foo\/ .\\n\n+usage=Uso: jar {ctxui}[vfmn0Mek] [jar-file] [manifest-file] [entry-point] [-C dir] arquivos ...\\nOp\\u00E7\\u00F5es:\\n    -c  cria novo arquivo compactado\\n    -t  lista o sum\\u00E1rio do arquivo compactado\\n    -x  extrai arquivos com o nome (ou todos) do arquivo compactado\\n    -u  atualiza o arquivo compactado existente\\n    -v  gera sa\\u00EDda detalhada na sa\\u00EDda padr\\u00E3o\\n    -f  especifica o nome do arquivo do arquivo compactado\\n    -m  inclui as informa\\u00E7\\u00F5es do manifesto do arquivo de manifesto especificado\\n    -n   executa a normaliza\\u00E7\\u00E3o Pack200 ap\\u00F3s a cria\\u00E7\\u00E3o de um novo arquivo compactado\\n    -e  especifica o ponto de entrada da aplicativo para aplicativo stand-alone \\n        empacotada em um arquivo jar execut\\u00E1vel\\n    -0  armazena somente; n\\u00E3o usa compacta\\u00E7\\u00E3o ZIP\\n    -P  preserva os componentes '\/' inicial (caminho absoluto) e \"..\" (diret\\u00F3rio pai) nos nomes dos arquivos\\n    -M  n\\u00E3o cria um arquivo de manifesto para as entradas\\n    -i  gera informa\\u00E7\\u00F5es de \\u00EDndice para os arquivos especificados\\n    -C  passa para o diret\\u00F3rio especificado e inclui o arquivo a seguir\\nSe um arquivo tamb\\u00E9m for um diret\\u00F3rio, ele ser\\u00E1 processado repetidamente.\\nO nome do arquivo de manifesto, o nome do arquivo compactado e o nome do ponto de entrada s\\u00E3o\\nespecificados na mesma ordem dos flags 'm', 'f' e 'e'.\\n\\nExemplo 1: para arquivar dois arquivos de classe em um arquivo compactado denominado classes.jar: \\n       jar cvf classes.jar Foo.class Bar.class \\nExemplo 2: use um arquivo de manifesto existente 'mymanifest' e arquive todos os\\n           arquivos no diret\\u00F3rio foo\/ na 'classes.jar': \\n       jar cvfm classes.jar mymanifest -C foo\/ .\\n\n","filename":"jdk\/src\/share\/classes\/sun\/tools\/jar\/resources\/jar_pt_BR.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}