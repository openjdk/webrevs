{"files":[{"patch":"@@ -4,1 +4,1 @@\n-version=openjdk8u452\n+version=openjdk8u462\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-JDK_UPDATE_VERSION=452\n+JDK_UPDATE_VERSION=462\n","filename":"common\/autoconf\/version-numbers","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,0 +168,7 @@\n+\/\/ Note that GET_FIELD and SET_FIELD cast the object field's C type to\n+\/\/ volatile at the point of access. That is needed in order to ensure\n+\/\/ that the C compiler does not reorder the object field access wrt to\n+\/\/ preceding and succeeding volatile accesses to the thread flag field\n+\/\/ (made by UnsafeWrapper) which safeguard the field access. See\n+\/\/ JDK-8186787 for details.\n+\n@@ -170,1 +177,1 @@\n-  type_name v = *(type_name*)index_oop_from_field_offset_long(p, offset)\n+  type_name v = *(volatile type_name*)index_oop_from_field_offset_long(p, offset)\n@@ -174,1 +181,1 @@\n-  *(type_name*)index_oop_from_field_offset_long(p, offset) = truncate_##type_name(x)\n+  *(volatile type_name*)index_oop_from_field_offset_long(p, offset) = truncate_##type_name(x)\n","filename":"hotspot\/src\/share\/vm\/prims\/unsafe.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,1 +245,2 @@\n-        VERIFY(::DrawFocusRect(hDC, &focusRect));\n+        if (!::IsRectEmpty(&focusRect) && (::DrawFocusRect(hDC, &focusRect) == 0))\n+            VERIFY(::GetLastError() == 0);\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_Button.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,2 @@\n-        VERIFY(::DrawFocusRect(hDC, &focusRect));\n+        if (!::IsRectEmpty(&focusRect) && (::DrawFocusRect(hDC, &focusRect) == 0))\n+            VERIFY(::GetLastError() == 0);\n@@ -298,1 +299,2 @@\n-        VERIFY(::DrawFocusRect(hDC, &focusRect));\n+        if (!::IsRectEmpty(&focusRect) && (::DrawFocusRect(hDC, &focusRect) == 0))\n+            VERIFY(::GetLastError() == 0);\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_Checkbox.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -4449,1 +4449,2 @@\n-          VERIFY(::DrawFocusRect(hDC, &rect));\n+          if (!::IsRectEmpty(&rect) && (::DrawFocusRect(hDC, &rect) == 0))\n+              VERIFY(::GetLastError() == 0);\n","filename":"jdk\/src\/windows\/native\/sun\/windows\/awt_Component.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-    static ECCState nss_ecc_status = ECCState.Extended;\n+    static ECCState nss_ecc_status = ECCState.Basic;\n","filename":"jdk\/test\/sun\/security\/pkcs11\/PKCS11Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}