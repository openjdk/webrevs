{"files":[{"patch":"@@ -33,1 +33,7 @@\n-requires.properties=sun.arch.data.model\n+\n+# Source files for classes that will be used at the beginning of each test suite run,\n+# to determine additional characteristics of the system for use with the @requires tag.\n+requires.extraPropDefns = ..\/..\/test\/jtreg-ext\/requires\/VMProps.java\n+requires.properties=sun.arch.data.model \\\n+    vm.flavor \\\n+    vm.bits\n","filename":"hotspot\/test\/TEST.ROOT","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import com.oracle.java.testlibrary.Platform;\n@@ -30,0 +29,1 @@\n+ * @requires vm.bits == \"64\"\n@@ -37,4 +37,0 @@\n-        if (!Platform.is64bit()) {\n-            System.out.println(\"Test requires 64-bit JVM. Skipping...\");\n-            return;\n-        }\n","filename":"hotspot\/test\/runtime\/Metaspace\/MaxMetaspaceSizeTest.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.bits == 64\n@@ -41,4 +42,0 @@\n-    if (!Platform.is64bit()) {\n-        System.out.println(\"Test requires 64-bit JVM. Skipping...\");\n-        return;\n-    }\n","filename":"hotspot\/test\/runtime\/NMT\/HugeArenaTracking.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires os.family == \"windows\" & vm.bits == \"32\" & vm.flavor == \"client\"\n@@ -28,1 +29,1 @@\n- * @run main\/othervm -client DefaultUseWithClient\n+ * @run main\/othervm DefaultUseWithClient\n@@ -41,5 +42,0 @@\n-        boolean is32BitWindowsClient = (Platform.isWindows() && Platform.is32bit() && Platform.isClient());\n-        if (!is32BitWindowsClient) {\n-            System.out.println(\"Test only applicable on 32-bit Windows Client VM. Skipping\");\n-            return;\n-        }\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/DefaultUseWithClient.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package requires;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * The Class to be invoked by jtreg prior Test Suite execution to\n+ * collect information about VM.\n+ * Properties set by this Class will be available in the @requires expressions.\n+ *\/\n+public class VMProps implements Callable<Map<String, String>> {\n+\n+    \/**\n+     * Collects information about VM properties.\n+     * This method will be invoked by jtreg.\n+     *\n+     * @return Map of property-value pairs.\n+     *\/\n+    @Override\n+    public Map<String, String> call() {\n+        Map<String, String> map = new HashMap<>();\n+        map.put(\"vm.flavor\", vmFlavor());\n+        map.put(\"vm.compMode\", vmCompMode());\n+        map.put(\"vm.bits\", vmBits());\n+        dump(map);\n+        return map;\n+    }\n+\n+    \/**\n+     * @return VM type value extracted from the \"java.vm.name\" property.\n+     *\/\n+    protected String vmFlavor() {\n+        \/\/ E.g. \"Java HotSpot(TM) 64-Bit Server VM\"\n+        String vmName = System.getProperty(\"java.vm.name\");\n+        if (vmName == null) {\n+            return null;\n+        }\n+\n+        Pattern startP = Pattern.compile(\".* (\\\\S+) VM\");\n+        Matcher m = startP.matcher(vmName);\n+        if (m.matches()) {\n+            return m.group(1).toLowerCase();\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * @return VM compilation mode extracted from the \"java.vm.info\" property.\n+     *\/\n+    protected String vmCompMode() {\n+        \/\/ E.g. \"mixed mode\"\n+        String vmInfo = System.getProperty(\"java.vm.info\");\n+        if (vmInfo == null) {\n+            return null;\n+        }\n+        int k = vmInfo.toLowerCase().indexOf(\" mode\");\n+        if (k < 0) {\n+            return null;\n+        }\n+        vmInfo = vmInfo.substring(0, k);\n+        switch (vmInfo) {\n+            case \"mixed\" : return \"Xmixed\";\n+            case \"compiled\" : return \"Xcomp\";\n+            case \"interpreted\" : return \"Xint\";\n+            default: return null;\n+        }\n+    }\n+\n+    \/**\n+     * @return VM bitness, the value of the \"sun.arch.data.model\" property.\n+     *\/\n+    protected String vmBits() {\n+        return System.getProperty(\"sun.arch.data.model\");\n+    }\n+\n+    \/**\n+     * Dumps the map to the file if the file name is given as the property.\n+     * This functionality could be helpful to know context in the real\n+     * execution.\n+     *\n+     * @param map\n+     *\/\n+    protected void dump(Map<String, String> map) {\n+        String dumpFileName = System.getProperty(\"vmprops.dump\");\n+        if (dumpFileName == null) {\n+            return;\n+        }\n+        List<String> lines = new ArrayList<>();\n+        map.forEach((k,v) -> lines.add(k + \":\" + v));\n+        try {\n+             Files.write(Paths.get(dumpFileName), lines);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to dump properties into '\"\n+                    + dumpFileName + \"'\", e);\n+        }\n+    }\n+\n+    \/**\n+     * This method is for the testing purpose only.\n+     * @param args\n+     *\/\n+    public static void main(String args[]) {\n+        Map<String, String> map = new VMProps().call();\n+        map.forEach((k,v) -> System.out.println(k + \": '\" + v + \"'\"));\n+    }\n+}\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}