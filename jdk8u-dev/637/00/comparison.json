{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,9 +25,6 @@\n-  @test\n-  @key headful\n-  @bug 4977491\n-  @summary State changes should always be reported as events\n-  @author anthony.petrov@...: area=awt.toplevel\n-  @library ..\/..\/regtesthelpers\n-  @build Util\n-  @run main MaximizedToIconified\n-*\/\n+ * @test\n+ * @key headful\n+ * @bug 4977491 8160767\n+ * @summary State changes should always be reported as events\n+ * @run main MaximizedToIconified\n+ *\/\n@@ -35,1 +32,1 @@\n-\/**\n+\/*\n@@ -43,5 +40,5 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.*;\n-import test.java.awt.regtesthelpers.Util;\n-\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowStateListener;\n@@ -54,0 +51,1 @@\n+    private static Robot robot;\n@@ -55,3 +53,4 @@\n-    private static void checkState(Frame f, int state) {\n-        f.setExtendedState(state);\n-        Util.waitForIdle(null);\n+    private static void checkState(Frame frame, int state) {\n+        frame.setExtendedState(state);\n+        robot.waitForIdle();\n+        robot.delay(100);\n@@ -59,1 +58,1 @@\n-        System.out.println(\"state = \" + state + \"; getExtendedState() = \" + f.getExtendedState());\n+        System.out.println(\"state = \" + state + \"; getExtendedState() = \" + frame.getExtendedState());\n@@ -62,1 +61,2 @@\n-            MaximizedToIconified.fail(\"getOldState() != previous getNewState() in WINDOW_STATE_CHANGED event.\");\n+            frame.dispose();\n+            throw new RuntimeException(\"getOldState() != previous getNewState() in WINDOW_STATE_CHANGED event.\");\n@@ -64,2 +64,3 @@\n-        if (lastFrameState != f.getExtendedState()) {\n-            MaximizedToIconified.fail(\"getExtendedState() != last getNewState() in WINDOW_STATE_CHANGED event.\");\n+        if (lastFrameState != frame.getExtendedState()) {\n+            frame.dispose();\n+            throw new RuntimeException(\"getExtendedState() != last getNewState() in WINDOW_STATE_CHANGED event.\");\n@@ -67,2 +68,3 @@\n-        if (f.getExtendedState() != state) {\n-            MaximizedToIconified.fail(\"getExtendedState() != \" + state + \" as expected.\");\n+        if (frame.getExtendedState() != state) {\n+            frame.dispose();\n+            throw new RuntimeException(\"getExtendedState() != \" + state + \" as expected.\");\n@@ -70,1 +72,0 @@\n-        \/\/ Plain return means the check passed\n@@ -73,2 +74,1 @@\n-    private static void examineStates(Frame f_arg, int states[]) {\n-        Frame f = f_arg;\n+    private static void examineStates(int states[]) {\n@@ -76,5 +76,3 @@\n-        if (f == null) {\n-            f = new Frame(\"test\");\n-            f.setSize(200, 200);\n-            f.setVisible(true);\n-        }\n+        Frame frame = new Frame(\"test\");\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n@@ -82,1 +80,1 @@\n-        Util.waitForIdle(null);\n+        robot.waitForIdle();\n@@ -84,1 +82,1 @@\n-        f.addWindowStateListener(new WindowStateListener() {\n+        frame.addWindowStateListener(new WindowStateListener() {\n@@ -86,1 +84,2 @@\n-                System.out.println(\"last = \" + lastFrameState + \"; getOldState() = \" + e.getOldState() + \"; getNewState() = \" + e.getNewState());\n+                System.out.println(\"last = \" + lastFrameState + \"; getOldState() = \" + e.getOldState() +\n+                        \"; getNewState() = \" + e.getNewState());\n@@ -90,1 +89,2 @@\n-                    System.out.println(\"Wrong getOldState(): expected = \" + lastFrameState + \"; received = \" + e.getOldState());\n+                    System.out.println(\"Wrong getOldState(): expected = \" + lastFrameState + \"; received = \" +\n+                            e.getOldState());\n@@ -96,1 +96,1 @@\n-        for (int state: states) {\n+        for (int state : states) {\n@@ -98,1 +98,1 @@\n-                checkState(f, state);\n+                checkState(frame, state);\n@@ -104,2 +104,2 @@\n-        if (f_arg == null) {\n-            f.dispose();\n+        if (frame != null) {\n+            frame.dispose();\n@@ -109,10 +109,1 @@\n-    private static void init()\n-    {\n-        String[] instructions =\n-        {\n-            \"This is an AUTOMATIC test, simply wait until it is done.\",\n-            \"The result (passed or failed) will be shown in the\",\n-            \"message window below.\"\n-        };\n-        Sysout.createDialog( );\n-        Sysout.printInstructions( instructions );\n+    private static void doTest() {\n@@ -125,75 +116,2 @@\n-        examineStates(null, new int[] {Frame.MAXIMIZED_BOTH, Frame.ICONIFIED, Frame.NORMAL});\n-        examineStates(null, new int[] {Frame.ICONIFIED, Frame.MAXIMIZED_BOTH, Frame.NORMAL});\n-\n-\n-        MaximizedToIconified.pass();\n-\n-    }\/\/End  init()\n-\n-\n-\n-    \/*****************************************************\n-     * Standard Test Machinery Section\n-     * DO NOT modify anything in this section -- it's a\n-     * standard chunk of code which has all of the\n-     * synchronisation necessary for the test harness.\n-     * By keeping it the same in all tests, it is easier\n-     * to read and understand someone else's test, as\n-     * well as insuring that all tests behave correctly\n-     * with the test harness.\n-     * There is a section following this for test-\n-     * classes\n-     ******************************************************\/\n-    private static boolean theTestPassed = false;\n-    private static boolean testGeneratedInterrupt = false;\n-    private static String failureMessage = \"\";\n-\n-    private static Thread mainThread = null;\n-\n-    private static int sleepTime = 300000;\n-\n-    \/\/ Not sure about what happens if multiple of this test are\n-    \/\/  instantiated in the same VM.  Being static (and using\n-    \/\/  static vars), it aint gonna work.  Not worrying about\n-    \/\/  it for now.\n-    public static void main( String args[] ) throws InterruptedException\n-    {\n-        mainThread = Thread.currentThread();\n-        try\n-        {\n-            init();\n-        }\n-        catch( TestPassedException e )\n-        {\n-            \/\/The test passed, so just return from main and harness will\n-            \/\/ interepret this return as a pass\n-            return;\n-        }\n-        \/\/At this point, neither test pass nor test fail has been\n-        \/\/ called -- either would have thrown an exception and ended the\n-        \/\/ test, so we know we have multiple threads.\n-\n-        \/\/Test involves other threads, so sleep and wait for them to\n-        \/\/ called pass() or fail()\n-        try\n-        {\n-            Thread.sleep( sleepTime );\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException( \"Timed out after \" + sleepTime\/1000 + \" seconds\" );\n-        }\n-        catch (InterruptedException e)\n-        {\n-            \/\/The test harness may have interrupted the test.  If so, rethrow the exception\n-            \/\/ so that the harness gets it and deals with it.\n-            if( ! testGeneratedInterrupt ) throw e;\n-\n-            \/\/reset flag in case hit this code more than once for some reason (just safety)\n-            testGeneratedInterrupt = false;\n-\n-            if ( theTestPassed == false )\n-            {\n-                throw new RuntimeException( failureMessage );\n-            }\n-        }\n-\n-    }\/\/main\n+        examineStates(new int[] {Frame.MAXIMIZED_BOTH, Frame.ICONIFIED, Frame.NORMAL});\n+        examineStates(new int[] {Frame.ICONIFIED, Frame.MAXIMIZED_BOTH, Frame.NORMAL});\n@@ -201,3 +119,0 @@\n-    public static synchronized void setTimeoutTo( int seconds )\n-    {\n-        sleepTime = seconds * 1000;\n@@ -206,1 +121,1 @@\n-    public static synchronized void pass()\n+    public static void main( String args[] ) throws Exception\n@@ -208,15 +123,2 @@\n-        Sysout.println( \"The test passed.\" );\n-        Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/first check if this is executing in main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/Still in the main thread, so set the flag just for kicks,\n-            \/\/ and throw a test passed exception which will be caught\n-            \/\/ and end the test.\n-            theTestPassed = true;\n-            throw new TestPassedException();\n-        }\n-        theTestPassed = true;\n-        testGeneratedInterrupt = true;\n-        mainThread.interrupt();\n-    }\/\/pass()\n+        robot = new Robot();\n+        doTest();\n@@ -224,4 +126,0 @@\n-    public static synchronized void fail()\n-    {\n-        \/\/test writer didn't specify why test failed, so give generic\n-        fail( \"it just plain failed! :-)\" );\n@@ -230,23 +128,0 @@\n-    public static synchronized void fail( String whyFailed )\n-    {\n-        Sysout.println( \"The test failed: \" + whyFailed );\n-        Sysout.println( \"The test is over, hit  Ctl-C to stop Java VM\" );\n-        \/\/check if this called from main thread\n-        if ( mainThread == Thread.currentThread() )\n-        {\n-            \/\/If main thread, fail now 'cause not sleeping\n-            throw new RuntimeException( whyFailed );\n-        }\n-        theTestPassed = false;\n-        testGeneratedInterrupt = true;\n-        failureMessage = whyFailed;\n-        mainThread.interrupt();\n-    }\/\/fail()\n-\n-}\/\/ class MaximizedToIconified\n-\n-\/\/This exception is used to exit from any level of call nesting\n-\/\/ when it's determined that the test has passed, and immediately\n-\/\/ end the test.\n-class TestPassedException extends RuntimeException\n-{\n@@ -254,181 +129,0 @@\n-\n-\/\/*********** End Standard Test Machinery Section **********\n-\n-\n-\/\/************ Begin classes defined for the test ****************\n-\n-\/\/ if want to make listeners, here is the recommended place for them, then instantiate\n-\/\/  them in init()\n-\n-\/* Example of a class which may be written as part of a test\n-class NewClass implements anInterface\n- {\n-   static int newVar = 0;\n-\n-   public void eventDispatched(AWTEvent e)\n-    {\n-      \/\/Counting events to see if we get enough\n-      eventCount++;\n-\n-      if( eventCount == 20 )\n-       {\n-         \/\/got enough events, so pass\n-\n-         MaximizedToIconified.pass();\n-       }\n-      else if( tries == 20 )\n-       {\n-         \/\/tried too many times without getting enough events so fail\n-\n-         MaximizedToIconified.fail();\n-       }\n-\n-    }\/\/ eventDispatched()\n-\n- }\/\/ NewClass class\n-\n-*\/\n-\n-\n-\/\/************** End classes defined for the test *******************\n-\n-\n-\n-\n-\/****************************************************\n- Standard Test Machinery\n- DO NOT modify anything below -- it's a standard\n-  chunk of code whose purpose is to make user\n-  interaction uniform, and thereby make it simpler\n-  to read and understand someone else's test.\n- ****************************************************\/\n-\n-\/**\n- This is part of the standard test machinery.\n- It creates a dialog (with the instructions), and is the interface\n-  for sending text messages to the user.\n- To print the instructions, send an array of strings to Sysout.createDialog\n-  WithInstructions method.  Put one line of instructions per array entry.\n- To display a message for the tester to see, simply call Sysout.println\n-  with the string to be displayed.\n- This mimics System.out.println but works within the test harness as well\n-  as standalone.\n- *\/\n-\n-class Sysout\n-{\n-    private static TestDialog dialog;\n-\n-    public static void createDialogWithInstructions( String[] instructions )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        dialog.printInstructions( instructions );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-    public static void createDialog( )\n-    {\n-        dialog = new TestDialog( new Frame(), \"Instructions\" );\n-        String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-        dialog.printInstructions( defInstr );\n-        dialog.setVisible(true);\n-        println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-    public static void printInstructions( String[] instructions )\n-    {\n-        dialog.printInstructions( instructions );\n-    }\n-\n-\n-    public static void println( String messageIn )\n-    {\n-        dialog.displayMessage( messageIn );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n-{\n-\n-    TextArea instructionsText;\n-    TextArea messageText;\n-    int maxStringLength = 80;\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public TestDialog( Frame frame, String name )\n-    {\n-        super( frame, name );\n-        int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-        instructionsText = new TextArea( \"\", 15, maxStringLength, scrollBoth );\n-        add( \"North\", instructionsText );\n-\n-        messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-        add(\"Center\", messageText);\n-\n-        pack();\n-\n-        setVisible(true);\n-    }\/\/ TestDialog()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void printInstructions( String[] instructions )\n-    {\n-        \/\/Clear out any current instructions\n-        instructionsText.setText( \"\" );\n-\n-        \/\/Go down array of instruction strings\n-\n-        String printStr, remainingStr;\n-        for( int i=0; i < instructions.length; i++ )\n-        {\n-            \/\/chop up each into pieces maxSringLength long\n-            remainingStr = instructions[ i ];\n-            while( remainingStr.length() > 0 )\n-            {\n-                \/\/if longer than max then chop off first max chars to print\n-                if( remainingStr.length() >= maxStringLength )\n-                {\n-                    \/\/Try to chop on a word boundary\n-                    int posOfSpace = remainingStr.\n-                        lastIndexOf( ' ', maxStringLength - 1 );\n-\n-                    if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-                    printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-                    remainingStr = remainingStr.substring( posOfSpace + 1 );\n-                }\n-                \/\/else just print\n-                else\n-                {\n-                    printStr = remainingStr;\n-                    remainingStr = \"\";\n-                }\n-\n-                instructionsText.append( printStr + \"\\n\" );\n-\n-            }\/\/ while\n-\n-        }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-    \/\/DO NOT call this directly, go through Sysout\n-    public void displayMessage( String messageIn )\n-    {\n-        messageText.append( messageIn + \"\\n\" );\n-        System.out.println(messageIn);\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"jdk\/test\/java\/awt\/Frame\/MaximizedToIconified\/MaximizedToIconified.java","additions":47,"deletions":353,"binary":false,"changes":400,"status":"modified"}]}