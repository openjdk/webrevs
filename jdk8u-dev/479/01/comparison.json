{"files":[{"patch":"@@ -69,1 +69,1 @@\n-CFLAGS_WARN = $(WARNINGS_ARE_ERRORS)\n+CFLAGS_WARN = $(WARNINGS_ARE_ERRORS) -Wno-register\n","filename":"hotspot\/make\/linux\/makefiles\/adlc.make","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-WARNING_FLAGS = -Wpointer-arith -Wsign-compare -Wundef -Wunused-function -Wunused-value -Wformat=2 -Wreturn-type\n+WARNING_FLAGS = -Wpointer-arith -Wsign-compare -Wundef -Wunused-function -Wunused-value -Wformat=2 -Wreturn-type -Wno-stringop-overflow\n","filename":"hotspot\/make\/linux\/makefiles\/gcc.make","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2938,1 +2938,7 @@\n-  char file_name[JVM_MAXPATHLEN];\n+  \/\/ fix gcc 12 build jdk8 fastdebug compiler error:\n+  \/\/ directive writing up to 4096 bytes into a region of size between 0 and 4096 [-Werror=format-overflow=]\n+  char *file_name = (char *) NEW_C_HEAP_ARRAY(char, strlen(G1PrintReachableBaseFile) + 2 + strlen(str), mtGC);\n+  if (NULL == file_name) {\n+    gclog_or_tty->print_cr(\"  #### error: NEW_C_HEAP_ARRAY failed.\");\n+    return;\n+  }\n@@ -2945,0 +2951,1 @@\n+    FREE_C_HEAP_ARRAY(char, file_name, mtGC);\n@@ -2960,0 +2967,1 @@\n+  FREE_C_HEAP_ARRAY(char, file_name, mtGC);\n","filename":"hotspot\/src\/share\/vm\/gc_implementation\/g1\/concurrentMark.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2555,7 +2555,12 @@\n-          assert(o != NULL, \"must be constant\");\n-          ciInstanceKlass* k = o->as_instance()->java_lang_Class_klass()->as_instance_klass();\n-          ciField* field = k->get_field_by_offset(_offset, true);\n-          assert(field != NULL, \"missing field\");\n-          BasicType basic_elem_type = field->layout_type();\n-          _is_ptr_to_narrowoop = UseCompressedOops && (basic_elem_type == T_OBJECT ||\n-                                                       basic_elem_type == T_ARRAY);\n+          ciField* field = NULL;\n+          if (o != NULL) {\n+            ciInstanceKlass* k = o->as_instance()->java_lang_Class_klass()->as_instance_klass();\n+            field = k->get_field_by_offset(_offset, true);\n+          }\n+          if (field != NULL) {\n+            BasicType basic_elem_type = field->layout_type();\n+            _is_ptr_to_narrowoop = UseCompressedOops && is_reference_type(basic_elem_type);\n+          } else {\n+            \/\/ unsafe access\n+            _is_ptr_to_narrowoop = UseCompressedOops;\n+          }\n","filename":"hotspot\/src\/share\/vm\/opto\/type.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}