{"files":[{"patch":"@@ -1728,1 +1728,1 @@\n-%% This notice is provided with respect to Little CMS 2.11, which may be\n+%% This notice is provided with respect to Little CMS 2.12, which may be\n","filename":"THIRD_PARTY_README","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-       *(cmsUInt16Number*) dst = FROM_8_TO_16(n);\n+       *(cmsUInt16Number*) dst = (cmsUInt16Number) FROM_8_TO_16(n);\n@@ -120,1 +120,1 @@\n-       *(cmsFloat32Number*)dst = (*(cmsUInt8Number*)src) \/ 255.0f;\n+       *(cmsFloat32Number*)dst = (cmsFloat32Number) (*(cmsUInt8Number*)src) \/ 255.0f;\n@@ -126,1 +126,1 @@\n-       *(cmsFloat64Number*)dst = (*(cmsUInt8Number*)src) \/ 255.0;\n+       *(cmsFloat64Number*)dst = (cmsFloat64Number) (*(cmsUInt8Number*)src) \/ 255.0;\n@@ -185,1 +185,1 @@\n-       *(cmsFloat64Number*)dst = (*(cmsUInt16Number*)src) \/ 65535.0f;\n+       *(cmsFloat64Number*)dst = (cmsFloat64Number) (*(cmsUInt16Number*)src) \/ 65535.0;\n@@ -191,1 +191,1 @@\n-    *(cmsFloat64Number*)dst = (CHANGE_ENDIAN(*(cmsUInt16Number*)src)) \/ 65535.0f;\n+    *(cmsFloat64Number*)dst = (cmsFloat64Number) (CHANGE_ENDIAN(*(cmsUInt16Number*)src)) \/ 65535.0;\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsalpha.c","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1528,0 +1528,8 @@\n+\/\/ A safe atoi that returns 0 when NULL input is given\n+static\n+cmsInt32Number satoi(const char* b)\n+{\n+    if (b == NULL) return 0;\n+    return atoi(b);\n+}\n+\n@@ -1535,2 +1543,2 @@\n-    t-> nSamples   = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_FIELDS\"));\n-    t-> nPatches   = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));\n+    t-> nSamples   = satoi(cmsIT8GetProperty(it8, \"NUMBER_OF_FIELDS\"));\n+    t-> nPatches   = satoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));\n@@ -1543,0 +1551,1 @@\n+        \/\/ Some dumb analizers warns of possible overflow here, just take a look couple of lines above.\n@@ -1708,1 +1717,1 @@\n-                    Writef(fp, \"\\t0x%X\", atoi(p ->Value));\n+                    Writef(fp, \"\\t0x%X\", satoi(p ->Value));\n@@ -1712,1 +1721,1 @@\n-                    Writef(fp, \"\\t0x%B\", atoi(p ->Value));\n+                    Writef(fp, \"\\t0x%B\", satoi(p ->Value));\n@@ -1741,1 +1750,1 @@\n-       nSamples = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_FIELDS\"));\n+       nSamples = satoi(cmsIT8GetProperty(it8, \"NUMBER_OF_FIELDS\"));\n@@ -1764,1 +1773,1 @@\n-       t->nPatches = atoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));\n+       t->nPatches = satoi(cmsIT8GetProperty(it8, \"NUMBER_OF_SETS\"));\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmscgats.c","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -762,0 +762,3 @@\n+    cmsUInt32Number lastProfilePos;\n+    cmsUInt32Number preservationProfilesCount;\n+    cmsHPROFILE hLastProfile;\n@@ -771,0 +774,15 @@\n+\n+    \/\/ Trim all CMYK devicelinks at the end\n+    lastProfilePos = nProfiles - 1;\n+    hLastProfile = hProfiles[lastProfilePos];\n+\n+    while (lastProfilePos > 1)\n+    {\n+        hLastProfile = hProfiles[--lastProfilePos];\n+        if (cmsGetColorSpace(hLastProfile) != cmsSigCmykData ||\n+            cmsGetDeviceClass(hLastProfile) != cmsSigLinkClass)\n+            break;\n+    }\n+\n+    preservationProfilesCount = lastProfilePos + 1;\n+\n@@ -773,1 +791,2 @@\n-        cmsGetColorSpace(hProfiles[nProfiles-1]) != cmsSigCmykData)\n+        !(cmsGetColorSpace(hLastProfile) == cmsSigCmykData ||\n+        cmsGetDeviceClass(hLastProfile) == cmsSigOutputClass))\n@@ -776,2 +795,0 @@\n-    memset(&bp, 0, sizeof(bp));\n-\n@@ -782,0 +799,2 @@\n+    memset(&bp, 0, sizeof(bp));\n+\n@@ -784,1 +803,1 @@\n-        nProfiles,\n+                                     preservationProfilesCount,\n@@ -796,1 +815,1 @@\n-        nProfiles,\n+                                    preservationProfilesCount,\n@@ -821,0 +840,13 @@\n+\n+    \/\/ Insert possible devicelinks at the end\n+    for (i = lastProfilePos + 1; i < nProfiles; i++)\n+    {\n+        cmsPipeline* devlink = _cmsReadDevicelinkLUT(hProfiles[i], ICCIntents[i]);\n+        if (devlink == NULL)\n+            goto Error;\n+\n+        if (!cmsPipelineCat(Result, devlink))\n+            goto Error;\n+    }\n+\n+\n@@ -939,0 +971,2 @@\n+\n+\n@@ -950,0 +984,1 @@\n+\n@@ -954,0 +989,3 @@\n+    cmsUInt32Number lastProfilePos;\n+    cmsUInt32Number preservationProfilesCount;\n+    cmsHPROFILE hLastProfile;\n@@ -963,0 +1001,14 @@\n+    \/\/ Trim all CMYK devicelinks at the end\n+    lastProfilePos = nProfiles - 1;\n+    hLastProfile = hProfiles[lastProfilePos];\n+\n+    while (lastProfilePos > 1)\n+    {\n+        hLastProfile = hProfiles[--lastProfilePos];\n+        if (cmsGetColorSpace(hLastProfile) != cmsSigCmykData ||\n+            cmsGetDeviceClass(hLastProfile) != cmsSigLinkClass)\n+            break;\n+    }\n+\n+    preservationProfilesCount = lastProfilePos + 1;\n+\n@@ -965,2 +1017,2 @@\n-        !(cmsGetColorSpace(hProfiles[nProfiles-1]) == cmsSigCmykData ||\n-        cmsGetDeviceClass(hProfiles[nProfiles-1]) == cmsSigOutputClass))\n+        !(cmsGetColorSpace(hLastProfile) == cmsSigCmykData ||\n+        cmsGetDeviceClass(hLastProfile) == cmsSigOutputClass))\n@@ -973,1 +1025,0 @@\n-\n@@ -978,1 +1029,1 @@\n-    bp.LabK2cmyk = _cmsReadInputLUT(hProfiles[nProfiles-1], INTENT_RELATIVE_COLORIMETRIC);\n+    bp.LabK2cmyk = _cmsReadInputLUT(hLastProfile, INTENT_RELATIVE_COLORIMETRIC);\n@@ -982,1 +1033,1 @@\n-    bp.MaxTAC = cmsDetectTAC(hProfiles[nProfiles-1]) \/ 100.0;\n+    bp.MaxTAC = cmsDetectTAC(hLastProfile) \/ 100.0;\n@@ -988,1 +1039,1 @@\n-                                         nProfiles,\n+                                         preservationProfilesCount,\n@@ -997,1 +1048,1 @@\n-    bp.KTone = _cmsBuildKToneCurve(ContextID, 4096, nProfiles,\n+    bp.KTone = _cmsBuildKToneCurve(ContextID, 4096, preservationProfilesCount,\n@@ -1007,1 +1058,1 @@\n-    bp.hProofOutput = cmsCreateTransformTHR(ContextID, hProfiles[nProfiles-1],\n+    bp.hProofOutput = cmsCreateTransformTHR(ContextID, hLastProfile,\n@@ -1014,1 +1065,1 @@\n-    bp.cmyk2Lab = cmsCreateTransformTHR(ContextID, hProfiles[nProfiles-1],\n+    bp.cmyk2Lab = cmsCreateTransformTHR(ContextID, hLastProfile,\n@@ -1037,0 +1088,12 @@\n+    \/\/ Insert possible devicelinks at the end\n+    for (i = lastProfilePos + 1; i < nProfiles; i++)\n+    {\n+        cmsPipeline* devlink = _cmsReadDevicelinkLUT(hProfiles[i], ICCIntents[i]);\n+        if (devlink == NULL)\n+            goto Cleanup;\n+\n+        if (!cmsPipelineCat(Result, devlink))\n+            goto Cleanup;\n+    }\n+\n+\n@@ -1049,0 +1112,2 @@\n+\n+\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmscnvrt.c","additions":79,"deletions":14,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -91,5 +91,5 @@\n-    9,                                  \/\/ # of curve types\n-    { 1, 2, 3, 4, 5, 6, 7, 8, 108 },    \/\/ Parametric curve ID\n-    { 1, 3, 4, 5, 7, 4, 5, 5, 1 },      \/\/ Parameters by type\n-    DefaultEvalParametricFn,            \/\/ Evaluator\n-    NULL                                \/\/ Next in chain\n+    10,                                      \/\/ # of curve types\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 108, 109 },    \/\/ Parametric curve ID\n+    { 1, 3, 4, 5, 7, 4, 5, 5,   1,   1 },    \/\/ Parameters by type\n+    DefaultEvalParametricFn,                 \/\/ Evaluator\n+    NULL                                     \/\/ Next in chain\n@@ -341,0 +341,26 @@\n+\/\/ Generates a sigmoidal function with desired steepness.\n+cmsINLINE double sigmoid_base(double k, double t)\n+{\n+    return (1.0 \/ (1.0 + exp(-k * t))) - 0.5;\n+}\n+\n+cmsINLINE double inverted_sigmoid_base(double k, double t)\n+{\n+    return -log((1.0 \/ (t + 0.5)) - 1.0) \/ k;\n+}\n+\n+cmsINLINE double sigmoid_factory(double k, double t)\n+{\n+    double correction = 0.5 \/ sigmoid_base(k, 1);\n+\n+    return correction * sigmoid_base(k, 2.0 * t - 1.0) + 0.5;\n+}\n+\n+cmsINLINE double inverse_sigmoid_factory(double k, double t)\n+{\n+    double correction = 0.5 \/ sigmoid_base(k, 1);\n+\n+    return (inverted_sigmoid_base(k, (t - 0.5) \/ correction) + 1.0) \/ 2.0;\n+}\n+\n+\n@@ -672,0 +698,1 @@\n+\n@@ -689,0 +716,9 @@\n+    \/\/ Sigmoidals\n+    case 109:\n+        Val = sigmoid_factory(Params[0], R);\n+        break;\n+\n+    case -109:\n+        Val = inverse_sigmoid_factory(Params[0], R);\n+        break;\n+\n@@ -974,1 +1010,1 @@\n-        t = (cmsFloat32Number) i \/ (nResultingPoints-1);\n+        t = (cmsFloat32Number) i \/ (cmsFloat32Number)(nResultingPoints-1);\n@@ -1188,0 +1224,1 @@\n+    cmsBool notCheck = FALSE;\n@@ -1215,0 +1252,6 @@\n+                    if (lambda < 0)\n+                    {\n+                        notCheck = TRUE;\n+                        lambda = -lambda;\n+                    }\n+\n@@ -1227,1 +1270,1 @@\n-                                SuccessStatus = FALSE;\n+                                SuccessStatus = notCheck;\n@@ -1235,1 +1278,1 @@\n-                            SuccessStatus = FALSE;\n+                            SuccessStatus = notCheck;\n@@ -1241,1 +1284,1 @@\n-                            SuccessStatus = FALSE;\n+                            SuccessStatus = notCheck;\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsgamma.c","additions":52,"deletions":9,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -437,6 +437,7 @@\n-  CMSREGISTER int        rx, ry;\n-           int        x0, y0;\n-  CMSREGISTER int        X0, X1, Y0, Y1;\n-           int        d00, d01, d10, d11,\n-                      dx0, dx1,\n-                      dxy;\n+           CMSREGISTER int        rx, ry;\n+           int                    x0, y0;\n+           CMSREGISTER int        X0, X1, Y0, Y1;\n+\n+           int                    d00, d01, d10, d11,\n+                                  dx0, dx1,\n+                                  dxy;\n@@ -498,0 +499,1 @@\n+\n@@ -499,4 +501,4 @@\n-        d000, d001, d010, d011,\n-        d100, d101, d110, d111,\n-        dx00, dx01, dx10, dx11,\n-        dxy0, dxy1, dxyz;\n+                          d000, d001, d010, d011,\n+                          d100, d101, d110, d111,\n+                          dx00, dx01, dx10, dx11,\n+                          dxy0, dxy1, dxyz;\n@@ -568,7 +570,7 @@\n-  CMSREGISTER int        rx, ry, rz;\n-           int        x0, y0, z0;\n-  CMSREGISTER int        X0, X1, Y0, Y1, Z0, Z1;\n-           int        d000, d001, d010, d011,\n-                      d100, d101, d110, d111,\n-                      dx00, dx01, dx10, dx11,\n-                      dxy0, dxy1, dxyz;\n+           CMSREGISTER int        rx, ry, rz;\n+           int                    x0, y0, z0;\n+           CMSREGISTER int        X0, X1, Y0, Y1, Z0, Z1;\n+           int                    d000, d001, d010, d011,\n+                                  d100, d101, d110, d111,\n+                                  dx00, dx01, dx10, dx11,\n+                                  dxy0, dxy1, dxyz;\n@@ -642,2 +644,2 @@\n-    int        x0, y0, z0,\n-               X0, Y0, Z0, X1, Y1, Z1;\n+    int                  x0, y0, z0,\n+                         X0, Y0, Z0, X1, Y1, Z1;\n@@ -733,3 +735,0 @@\n-\n-\n-\n@@ -746,1 +745,1 @@\n-    cmsS15Fixed16Number X0, X1, Y0, Y1, Z0, Z1;\n+    cmsUInt32Number X0, X1, Y0, Y1, Z0, Z1;\n@@ -770,1 +769,1 @@\n-    LutTable = &LutTable[X0+Y0+Z0];\n+    LutTable += X0+Y0+Z0;\n@@ -1054,2 +1053,0 @@\n-\n-\n@@ -1098,298 +1095,78 @@\n-\n-static CMS_NO_SANITIZE\n-void Eval5Inputs(CMSREGISTER const cmsUInt16Number Input[],\n-                 CMSREGISTER cmsUInt16Number Output[],\n-\n-                 CMSREGISTER const cmsInterpParams* p16)\n-{\n-       const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;\n-       cmsS15Fixed16Number fk;\n-       cmsS15Fixed16Number k0, rk;\n-       int K0, K1;\n-       const cmsUInt16Number* T;\n-       cmsUInt32Number i;\n-       cmsUInt16Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-\n-       fk = _cmsToFixedDomain((cmsS15Fixed16Number) Input[0] * p16 -> Domain[0]);\n-       k0 = FIXED_TO_INT(fk);\n-       rk = FIXED_REST_TO_INT(fk);\n-\n-       K0 = p16 -> opta[4] * k0;\n-       K1 = p16 -> opta[4] * (k0 + (Input[0] != 0xFFFFU ? 1 : 0));\n-\n-       p1 = *p16;\n-       memmove(&p1.Domain[0], &p16 ->Domain[1], 4*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval4Inputs(Input + 1, Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval4Inputs(Input + 1, Tmp2, &p1);\n-\n-       for (i=0; i < p16 -> nOutputs; i++) {\n-\n-              Output[i] = LinearInterp(rk, Tmp1[i], Tmp2[i]);\n-       }\n-\n-}\n-\n-\n-static\n-void Eval5InputsFloat(const cmsFloat32Number Input[],\n-                      cmsFloat32Number Output[],\n-                      const cmsInterpParams* p)\n-{\n-       const cmsFloat32Number* LutTable = (cmsFloat32Number*) p -> Table;\n-       cmsFloat32Number rest;\n-       cmsFloat32Number pk;\n-       int k0, K0, K1;\n-       const cmsFloat32Number* T;\n-       cmsUInt32Number i;\n-       cmsFloat32Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       pk = fclamp(Input[0]) * p->Domain[0];\n-       k0 = _cmsQuickFloor(pk);\n-       rest = pk - (cmsFloat32Number) k0;\n-\n-       K0 = p -> opta[4] * k0;\n-       K1 = K0 + (fclamp(Input[0]) >= 1.0 ? 0 : p->opta[4]);\n-\n-       p1 = *p;\n-       memmove(&p1.Domain[0], &p ->Domain[1], 4*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval4InputsFloat(Input + 1,  Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval4InputsFloat(Input + 1,  Tmp2, &p1);\n-\n-       for (i=0; i < p -> nOutputs; i++) {\n-\n-              cmsFloat32Number y0 = Tmp1[i];\n-              cmsFloat32Number y1 = Tmp2[i];\n-\n-              Output[i] = y0 + (y1 - y0) * rest;\n-       }\n-}\n-\n-\n-\n-static CMS_NO_SANITIZE\n-void Eval6Inputs(CMSREGISTER const cmsUInt16Number Input[],\n-                 CMSREGISTER cmsUInt16Number Output[],\n-                 CMSREGISTER const cmsInterpParams* p16)\n-{\n-       const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;\n-       cmsS15Fixed16Number fk;\n-       cmsS15Fixed16Number k0, rk;\n-       int K0, K1;\n-       const cmsUInt16Number* T;\n-       cmsUInt32Number i;\n-       cmsUInt16Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       fk = _cmsToFixedDomain((cmsS15Fixed16Number) Input[0] * p16 -> Domain[0]);\n-       k0 = FIXED_TO_INT(fk);\n-       rk = FIXED_REST_TO_INT(fk);\n-\n-       K0 = p16 -> opta[5] * k0;\n-       K1 = p16 -> opta[5] * (k0 + (Input[0] != 0xFFFFU ? 1 : 0));\n-\n-       p1 = *p16;\n-       memmove(&p1.Domain[0], &p16 ->Domain[1], 5*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval5Inputs(Input + 1, Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval5Inputs(Input + 1, Tmp2, &p1);\n-\n-       for (i=0; i < p16 -> nOutputs; i++) {\n-\n-              Output[i] = LinearInterp(rk, Tmp1[i], Tmp2[i]);\n-       }\n-\n-}\n-\n-\n-static\n-void Eval6InputsFloat(const cmsFloat32Number Input[],\n-                      cmsFloat32Number Output[],\n-                      const cmsInterpParams* p)\n-{\n-       const cmsFloat32Number* LutTable = (cmsFloat32Number*) p -> Table;\n-       cmsFloat32Number rest;\n-       cmsFloat32Number pk;\n-       int k0, K0, K1;\n-       const cmsFloat32Number* T;\n-       cmsUInt32Number i;\n-       cmsFloat32Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       pk = fclamp(Input[0]) * p->Domain[0];\n-       k0 = _cmsQuickFloor(pk);\n-       rest = pk - (cmsFloat32Number) k0;\n-\n-       K0 = p -> opta[5] * k0;\n-       K1 = K0 + (fclamp(Input[0]) >= 1.0 ? 0 : p->opta[5]);\n-\n-       p1 = *p;\n-       memmove(&p1.Domain[0], &p ->Domain[1], 5*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval5InputsFloat(Input + 1,  Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval5InputsFloat(Input + 1,  Tmp2, &p1);\n-\n-       for (i=0; i < p -> nOutputs; i++) {\n-\n-              cmsFloat32Number y0 = Tmp1[i];\n-              cmsFloat32Number y1 = Tmp2[i];\n-\n-              Output[i] = y0 + (y1 - y0) * rest;\n-       }\n-}\n-\n-\n-static CMS_NO_SANITIZE\n-void Eval7Inputs(CMSREGISTER const cmsUInt16Number Input[],\n-                 CMSREGISTER cmsUInt16Number Output[],\n-                 CMSREGISTER const cmsInterpParams* p16)\n-{\n-       const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;\n-       cmsS15Fixed16Number fk;\n-       cmsS15Fixed16Number k0, rk;\n-       int K0, K1;\n-       const cmsUInt16Number* T;\n-       cmsUInt32Number i;\n-       cmsUInt16Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-\n-       fk = _cmsToFixedDomain((cmsS15Fixed16Number) Input[0] * p16 -> Domain[0]);\n-       k0 = FIXED_TO_INT(fk);\n-       rk = FIXED_REST_TO_INT(fk);\n-\n-       K0 = p16 -> opta[6] * k0;\n-       K1 = p16 -> opta[6] * (k0 + (Input[0] != 0xFFFFU ? 1 : 0));\n-\n-       p1 = *p16;\n-       memmove(&p1.Domain[0], &p16 ->Domain[1], 6*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval6Inputs(Input + 1, Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval6Inputs(Input + 1, Tmp2, &p1);\n-\n-       for (i=0; i < p16 -> nOutputs; i++) {\n-              Output[i] = LinearInterp(rk, Tmp1[i], Tmp2[i]);\n-       }\n-}\n-\n-\n-static\n-void Eval7InputsFloat(const cmsFloat32Number Input[],\n-                      cmsFloat32Number Output[],\n-                      const cmsInterpParams* p)\n-{\n-       const cmsFloat32Number* LutTable = (cmsFloat32Number*) p -> Table;\n-       cmsFloat32Number rest;\n-       cmsFloat32Number pk;\n-       int k0, K0, K1;\n-       const cmsFloat32Number* T;\n-       cmsUInt32Number i;\n-       cmsFloat32Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       pk = fclamp(Input[0]) * p->Domain[0];\n-       k0 = _cmsQuickFloor(pk);\n-       rest = pk - (cmsFloat32Number) k0;\n-\n-       K0 = p -> opta[6] * k0;\n-       K1 = K0 + (fclamp(Input[0]) >= 1.0 ? 0 : p->opta[6]);\n-\n-       p1 = *p;\n-       memmove(&p1.Domain[0], &p ->Domain[1], 6*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval6InputsFloat(Input + 1,  Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval6InputsFloat(Input + 1,  Tmp2, &p1);\n-\n-\n-       for (i=0; i < p -> nOutputs; i++) {\n-\n-              cmsFloat32Number y0 = Tmp1[i];\n-              cmsFloat32Number y1 = Tmp2[i];\n-\n-              Output[i] = y0 + (y1 - y0) * rest;\n-\n-       }\n-}\n-\n-static CMS_NO_SANITIZE\n-void Eval8Inputs(CMSREGISTER const cmsUInt16Number Input[],\n-                 CMSREGISTER cmsUInt16Number Output[],\n-                 CMSREGISTER const cmsInterpParams* p16)\n-{\n-       const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;\n-       cmsS15Fixed16Number fk;\n-       cmsS15Fixed16Number k0, rk;\n-       int K0, K1;\n-       const cmsUInt16Number* T;\n-       cmsUInt32Number i;\n-       cmsUInt16Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       fk = _cmsToFixedDomain((cmsS15Fixed16Number) Input[0] * p16 -> Domain[0]);\n-       k0 = FIXED_TO_INT(fk);\n-       rk = FIXED_REST_TO_INT(fk);\n-\n-       K0 = p16 -> opta[7] * k0;\n-       K1 = p16 -> opta[7] * (k0 + (Input[0] != 0xFFFFU ? 1 : 0));\n-\n-       p1 = *p16;\n-       memmove(&p1.Domain[0], &p16 ->Domain[1], 7*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval7Inputs(Input + 1, Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-       Eval7Inputs(Input + 1, Tmp2, &p1);\n-\n-       for (i=0; i < p16 -> nOutputs; i++) {\n-              Output[i] = LinearInterp(rk, Tmp1[i], Tmp2[i]);\n-       }\n+#define EVAL_FNS(N,NM) static CMS_NO_SANITIZE \\\n+void Eval##N##Inputs(CMSREGISTER const cmsUInt16Number Input[], CMSREGISTER cmsUInt16Number Output[], CMSREGISTER const cmsInterpParams* p16)\\\n+{\\\n+       const cmsUInt16Number* LutTable = (cmsUInt16Number*) p16 -> Table;\\\n+       cmsS15Fixed16Number fk;\\\n+       cmsS15Fixed16Number k0, rk;\\\n+       int K0, K1;\\\n+       const cmsUInt16Number* T;\\\n+       cmsUInt32Number i;\\\n+       cmsUInt16Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\\\n+       cmsInterpParams p1;\\\n+\\\n+       fk = _cmsToFixedDomain((cmsS15Fixed16Number) Input[0] * p16 -> Domain[0]);\\\n+       k0 = FIXED_TO_INT(fk);\\\n+       rk = FIXED_REST_TO_INT(fk);\\\n+\\\n+       K0 = p16 -> opta[NM] * k0;\\\n+       K1 = p16 -> opta[NM] * (k0 + (Input[0] != 0xFFFFU ? 1 : 0));\\\n+\\\n+       p1 = *p16;\\\n+       memmove(&p1.Domain[0], &p16 ->Domain[1], NM*sizeof(cmsUInt32Number));\\\n+\\\n+       T = LutTable + K0;\\\n+       p1.Table = T;\\\n+\\\n+       Eval##NM##Inputs(Input + 1, Tmp1, &p1);\\\n+\\\n+       T = LutTable + K1;\\\n+       p1.Table = T;\\\n+\\\n+       Eval##NM##Inputs(Input + 1, Tmp2, &p1);\\\n+\\\n+       for (i=0; i < p16 -> nOutputs; i++) {\\\n+\\\n+              Output[i] = LinearInterp(rk, Tmp1[i], Tmp2[i]);\\\n+       }\\\n+}\\\n+\\\n+static void Eval##N##InputsFloat(const cmsFloat32Number Input[], \\\n+                                 cmsFloat32Number Output[],\\\n+                                 const cmsInterpParams * p)\\\n+{\\\n+       const cmsFloat32Number* LutTable = (cmsFloat32Number*) p -> Table;\\\n+       cmsFloat32Number rest;\\\n+       cmsFloat32Number pk;\\\n+       int k0, K0, K1;\\\n+       const cmsFloat32Number* T;\\\n+       cmsUInt32Number i;\\\n+       cmsFloat32Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\\\n+       cmsInterpParams p1;\\\n+\\\n+       pk = fclamp(Input[0]) * p->Domain[0];\\\n+       k0 = _cmsQuickFloor(pk);\\\n+       rest = pk - (cmsFloat32Number) k0;\\\n+\\\n+       K0 = p -> opta[NM] * k0;\\\n+       K1 = K0 + (fclamp(Input[0]) >= 1.0 ? 0 : p->opta[NM]);\\\n+\\\n+       p1 = *p;\\\n+       memmove(&p1.Domain[0], &p ->Domain[1], NM*sizeof(cmsUInt32Number));\\\n+\\\n+       T = LutTable + K0;\\\n+       p1.Table = T;\\\n+\\\n+       Eval##NM##InputsFloat(Input + 1, Tmp1, &p1);\\\n+\\\n+       T = LutTable + K1;\\\n+       p1.Table = T;\\\n+\\\n+       Eval##NM##InputsFloat(Input + 1, Tmp2, &p1);\\\n+\\\n+       for (i=0; i < p -> nOutputs; i++) {\\\n+\\\n+              cmsFloat32Number y0 = Tmp1[i];\\\n+              cmsFloat32Number y1 = Tmp2[i];\\\n+\\\n+              Output[i] = y0 + (y1 - y0) * rest;\\\n+       }\\\n@@ -1399,0 +1176,14 @@\n+\/**\n+* Thanks to Carles Llopis for the templating idea\n+*\/\n+EVAL_FNS(5, 4)\n+EVAL_FNS(6, 5)\n+EVAL_FNS(7, 6)\n+EVAL_FNS(8, 7)\n+EVAL_FNS(9, 8)\n+EVAL_FNS(10, 9)\n+EVAL_FNS(11, 10)\n+EVAL_FNS(12, 11)\n+EVAL_FNS(13, 12)\n+EVAL_FNS(14, 13)\n+EVAL_FNS(15, 14)\n@@ -1400,43 +1191,0 @@\n-static\n-void Eval8InputsFloat(const cmsFloat32Number Input[],\n-                      cmsFloat32Number Output[],\n-                      const cmsInterpParams* p)\n-{\n-       const cmsFloat32Number* LutTable = (cmsFloat32Number*) p -> Table;\n-       cmsFloat32Number rest;\n-       cmsFloat32Number pk;\n-       int k0, K0, K1;\n-       const cmsFloat32Number* T;\n-       cmsUInt32Number i;\n-       cmsFloat32Number Tmp1[MAX_STAGE_CHANNELS], Tmp2[MAX_STAGE_CHANNELS];\n-       cmsInterpParams p1;\n-\n-       pk = fclamp(Input[0]) * p->Domain[0];\n-       k0 = _cmsQuickFloor(pk);\n-       rest = pk - (cmsFloat32Number) k0;\n-\n-       K0 = p -> opta[7] * k0;\n-       K1 = K0 + (fclamp(Input[0]) >= 1.0 ? 0 : p->opta[7]);\n-\n-       p1 = *p;\n-       memmove(&p1.Domain[0], &p ->Domain[1], 7*sizeof(cmsUInt32Number));\n-\n-       T = LutTable + K0;\n-       p1.Table = T;\n-\n-       Eval7InputsFloat(Input + 1,  Tmp1, &p1);\n-\n-       T = LutTable + K1;\n-       p1.Table = T;\n-\n-       Eval7InputsFloat(Input + 1,  Tmp2, &p1);\n-\n-\n-       for (i=0; i < p -> nOutputs; i++) {\n-\n-              cmsFloat32Number y0 = Tmp1[i];\n-              cmsFloat32Number y1 = Tmp2[i];\n-\n-              Output[i] = y0 + (y1 - y0) * rest;\n-       }\n-}\n@@ -1543,0 +1291,47 @@\n+           case 9:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval9InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval9Inputs;\n+               break;\n+\n+           case 10:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval10InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval10Inputs;\n+               break;\n+\n+           case 11:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval11InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval11Inputs;\n+               break;\n+\n+           case 12:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval12InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval12Inputs;\n+               break;\n+\n+           case 13:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval13InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval13Inputs;\n+               break;\n+\n+           case 14:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval14InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval14Inputs;\n+               break;\n+\n+           case 15:\n+               if (IsFloat)\n+                   Interpolation.LerpFloat = Eval15InputsFloat;\n+               else\n+                   Interpolation.Lerp16 = Eval15Inputs;\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsintrp.c","additions":162,"deletions":367,"binary":false,"changes":529,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-            cmsSignalError(ContextID, cmsERROR_READ, \"Couldn't allocate %ld bytes for profile\", size);\n+            cmsSignalError(ContextID, cmsERROR_READ, \"Couldn't allocate %ld bytes for profile\", (long) size);\n@@ -1235,3 +1235,5 @@\n-                cmsUInt32Number TagSize   = FileOrig -> TagSizes[i];\n-                cmsUInt32Number TagOffset = FileOrig -> TagOffsets[i];\n-                void* Mem;\n+                if (FileOrig->IOhandler != NULL)\n+                {\n+                    cmsUInt32Number TagSize = FileOrig->TagSizes[i];\n+                    cmsUInt32Number TagOffset = FileOrig->TagOffsets[i];\n+                    void* Mem;\n@@ -1239,1 +1241,1 @@\n-                if (!FileOrig ->IOhandler->Seek(FileOrig ->IOhandler, TagOffset)) return FALSE;\n+                    if (!FileOrig->IOhandler->Seek(FileOrig->IOhandler, TagOffset)) return FALSE;\n@@ -1241,2 +1243,2 @@\n-                Mem = _cmsMalloc(Icc ->ContextID, TagSize);\n-                if (Mem == NULL) return FALSE;\n+                    Mem = _cmsMalloc(Icc->ContextID, TagSize);\n+                    if (Mem == NULL) return FALSE;\n@@ -1244,3 +1246,3 @@\n-                if (FileOrig ->IOhandler->Read(FileOrig->IOhandler, Mem, TagSize, 1) != 1) return FALSE;\n-                if (!io ->Write(io, TagSize, Mem)) return FALSE;\n-                _cmsFree(Icc ->ContextID, Mem);\n+                    if (FileOrig->IOhandler->Read(FileOrig->IOhandler, Mem, TagSize, 1) != 1) return FALSE;\n+                    if (!io->Write(io, TagSize, Mem)) return FALSE;\n+                    _cmsFree(Icc->ContextID, Mem);\n@@ -1248,1 +1250,1 @@\n-                Icc -> TagSizes[i] = (io ->UsedSpace - Begin);\n+                    Icc->TagSizes[i] = (io->UsedSpace - Begin);\n@@ -1251,3 +1253,4 @@\n-                \/\/ Align to 32 bit boundary.\n-                if (! _cmsWriteAlignment(io))\n-                    return FALSE;\n+                    \/\/ Align to 32 bit boundary.\n+                    if (!_cmsWriteAlignment(io))\n+                        return FALSE;\n+                }\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsio0.c","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1369,1 +1369,1 @@\n-void _LUTevalFloat(CMSREGISTER const cmsFloat32Number In[], CMSREGISTER cmsFloat32Number Out[], const void* D)\n+void _LUTevalFloat(const cmsFloat32Number In[], cmsFloat32Number Out[], const void* D)\n@@ -1690,1 +1690,1 @@\n-                                        _cmsOPTeval16Fn Eval16,\n+                                        _cmsPipelineEval16Fn Eval16,\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmslut.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -212,1 +212,0 @@\n-\n@@ -216,2 +215,7 @@\n-    const cmsUInt8Number* ptr8 = (const cmsUInt8Number*)str;\n-    cmsUInt16Number n = (cmsUInt16Number)(((cmsUInt16Number)ptr8[0] << 8) | ptr8[1]);\n+    const cmsUInt8Number* ptr8;\n+    cmsUInt16Number n;\n+\n+    \/\/ For non-existent strings\n+    if (str == NULL) return 0;\n+    ptr8 = (const cmsUInt8Number*)str;\n+    n = (cmsUInt16Number)(((cmsUInt16Number)ptr8[0] << 8) | ptr8[1]);\n@@ -232,0 +236,1 @@\n+\/\/ In the case the user explicitely sets an empty string, we force a \\0\n@@ -242,0 +247,6 @@\n+    \/\/ len == 0 would prevent operation, so we set a empty string pointing to zero\n+    if (len == 0)\n+    {\n+        len = 1;\n+    }\n+\n@@ -279,0 +290,3 @@\n+    if (len == 0)\n+        len = sizeof(wchar_t);\n+\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsnamed.c","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -411,0 +411,6 @@\n+    if (p16->EvalCurveOut16 == NULL)\n+    {\n+        _cmsFree(ContextID, p16);\n+        return NULL;\n+    }\n+\n@@ -412,0 +418,7 @@\n+    if (p16->ParamsCurveOut16 == NULL)\n+    {\n+\n+        _cmsFree(ContextID, p16->EvalCurveOut16);\n+        _cmsFree(ContextID, p16);\n+        return NULL;\n+    }\n@@ -438,1 +451,3 @@\n-cmsInt32Number XFormSampler16(CMSREGISTER const cmsUInt16Number In[], CMSREGISTER cmsUInt16Number Out[], CMSREGISTER void* Cargo)\n+cmsInt32Number XFormSampler16(CMSREGISTER const cmsUInt16Number In[],\n+                              CMSREGISTER cmsUInt16Number Out[],\n+                              CMSREGISTER void* Cargo)\n@@ -797,1 +812,1 @@\n-        _cmsPipelineSetOptimizationParameters(Dest, (_cmsOPTeval16Fn) DataCLUT->Params->Interpolation.Lerp16, DataCLUT->Params, NULL, NULL);\n+        _cmsPipelineSetOptimizationParameters(Dest, (_cmsPipelineEval16Fn) DataCLUT->Params->Interpolation.Lerp16, DataCLUT->Params, NULL, NULL);\n@@ -942,2 +957,2 @@\n-                  CMSREGISTER cmsUInt16Number Output[],\n-                  CMSREGISTER const void* D)\n+                 CMSREGISTER cmsUInt16Number Output[],\n+                 CMSREGISTER const void* D)\n@@ -960,3 +975,3 @@\n-    X0 = X1 = (cmsS15Fixed16Number) p8->X0[r];\n-    Y0 = Y1 = (cmsS15Fixed16Number) p8->Y0[g];\n-    Z0 = Z1 = (cmsS15Fixed16Number) p8->Z0[b];\n+    X0 = (cmsS15Fixed16Number) p8->X0[r];\n+    Y0 = (cmsS15Fixed16Number) p8->Y0[g];\n+    Z0 = (cmsS15Fixed16Number) p8->Z0[b];\n@@ -1364,2 +1379,2 @@\n-                          CMSREGISTER cmsUInt16Number Out[],\n-                          CMSREGISTER const void* D)\n+                         CMSREGISTER cmsUInt16Number Out[],\n+                         CMSREGISTER const void* D)\n@@ -1925,1 +1940,1 @@\n-cmsBool _cmsOptimizePipeline(cmsContext ContextID,\n+cmsBool CMSEXPORT _cmsOptimizePipeline(cmsContext ContextID,\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsopt.c","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2839,1 +2839,1 @@\n-        wIn[index] = _cmsQuickSaturateWord(v * maximum);\n+        wIn[index] = _cmsQuickSaturateWord((cmsFloat64Number) v * maximum);\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmspack.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-cmsUInt32Number _cmsReasonableGridpointsByColorspace(cmsColorSpaceSignature Colorspace, cmsUInt32Number dwFlags)\n+cmsUInt32Number CMSEXPORT _cmsReasonableGridpointsByColorspace(cmsColorSpaceSignature Colorspace, cmsUInt32Number dwFlags)\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmspcs.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -530,0 +530,1 @@\n+    cmsUInt8Number* ptr;\n@@ -542,0 +543,7 @@\n+    \/\/ setlocale may be active, no commas are needed in PS generator\n+    \/\/ and PS generator is our only client\n+    for (ptr = Buffer; *ptr; ptr++)\n+    {\n+        if (*ptr == ',') *ptr = '.';\n+    }\n+\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsplugin.c","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -561,1 +561,1 @@\n-cmsBool GammaTableEquals(cmsUInt16Number* g1, cmsUInt16Number* g2, cmsUInt32Number nEntries)\n+cmsBool GammaTableEquals(cmsUInt16Number* g1, cmsUInt16Number* g2, cmsUInt32Number nG1, cmsUInt32Number nG2)\n@@ -563,1 +563,2 @@\n-    return memcmp(g1, g2, nEntries* sizeof(cmsUInt16Number)) == 0;\n+    if (nG1 != nG2) return FALSE;\n+    return memcmp(g1, g2, nG1 * sizeof(cmsUInt16Number)) == 0;\n@@ -579,1 +580,1 @@\n-        if (i > 0 && GammaTableEquals(g[i-1]->Table16, g[i]->Table16, g[i]->nEntries)) {\n+        if (i > 0 && GammaTableEquals(g[i-1]->Table16, g[i]->Table16, g[i-1]->nEntries, g[i]->nEntries)) {\n@@ -584,1 +585,1 @@\n-            snprintf(buffer, sizeof(buffer), \"%s%d\", nameprefix, i);\n+            snprintf(buffer, sizeof(buffer), \"%s%d\", nameprefix, (int) i);\n@@ -839,1 +840,1 @@\n-        numchans = cmsStageOutputChannels(mpe);\n+        numchans = (int) cmsStageOutputChannels(mpe);\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsps2.c","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    \/\/ Create a formatter which has n channels and floating point\n+    \/\/ Create a formatter which has n channels and no floating point\n@@ -118,1 +118,1 @@\n-   \/\/ Try to get black by using black colorant\n+    \/\/ Try to get black by using black colorant\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmssamp.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1898,0 +1898,1 @@\n+        if (mpe->InputChannels != 3 || mpe->OutputChannels != 3) return FALSE;\n@@ -1923,1 +1924,0 @@\n-\n@@ -1938,1 +1938,1 @@\n-                for (i = 0; i < n; i++)\n+                for (i = 0; i < 9; i++)\n@@ -1945,2 +1945,0 @@\n-                if (n != 9) return FALSE;\n-\n@@ -3032,0 +3030,3 @@\n+    if (List == NULL)\n+        return NULL;\n+\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmstypes.c","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-    memset(fOut, 0, sizeof(fIn));\n+    memset(fOut, 0, sizeof(fOut));\n@@ -479,1 +479,1 @@\n-        cmsUInt16Number i;\n+        cmsUInt32Number i;\n@@ -806,0 +806,6 @@\n+\/\/ returns original flags\n+cmsUInt32Number CMSEXPORT _cmsGetTransformFlags(struct _cmstransform_struct* CMMcargo)\n+{\n+    _cmsAssert(CMMcargo != NULL);\n+    return CMMcargo->dwOriginalFlags;\n+}\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/cmsxform.c","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\/\/  Copyright (c) 1998-2020 Marti Maria Saguer\n+\/\/  Copyright (c) 1998-2021 Marti Maria Saguer\n@@ -55,1 +55,1 @@\n-\/\/ Version 2.11\n+\/\/ Version 2.12\n@@ -113,1 +113,1 @@\n-#define LCMS_VERSION        2100\n+#define LCMS_VERSION        2120\n@@ -1302,1 +1302,1 @@\n-CMSAPI cmsBool           CMSEXPORT cmsStageSampleCLut16bit(cmsStage* mpe,    cmsSAMPLER16 Sampler, void* Cargo, cmsUInt32Number dwFlags);\n+CMSAPI cmsBool           CMSEXPORT cmsStageSampleCLut16bit(cmsStage* mpe, cmsSAMPLER16 Sampler, void* Cargo, cmsUInt32Number dwFlags);\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/lcms2.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-\/\/---------------------------------------------------------------------------------\n+\n@@ -940,7 +940,1 @@\n-cmsToneCurve**     _cmsStageGetPtrToCurveSet(const cmsStage* mpe);\n-\n-\n-\/\/ Pipeline Evaluator (in floating point)\n-typedef void (* _cmsPipelineEvalFloatFn)(const cmsFloat32Number In[],\n-                                         cmsFloat32Number Out[],\n-                                         const void* Data);\n+cmsToneCurve**  _cmsStageGetPtrToCurveSet(const cmsStage* mpe);\n@@ -956,1 +950,1 @@\n-   _cmsOPTeval16Fn         Eval16Fn;\n+   _cmsPipelineEval16Fn    Eval16Fn;\n@@ -1003,1 +997,1 @@\n-cmsUInt32Number  _cmsReasonableGridpointsByColorspace(cmsColorSpaceSignature Colorspace, cmsUInt32Number dwFlags);\n+CMSAPI cmsUInt32Number  CMSEXPORT _cmsReasonableGridpointsByColorspace(cmsColorSpaceSignature Colorspace, cmsUInt32Number dwFlags);\n@@ -1010,1 +1004,1 @@\n-cmsBool          _cmsOptimizePipeline(cmsContext ContextID,\n+CMSAPI cmsBool CMSEXPORT _cmsOptimizePipeline(cmsContext ContextID,\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/lcms2_internal.h","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-#define MAX_INPUT_DIMENSIONS 8\n+#define MAX_INPUT_DIMENSIONS 15\n@@ -579,5 +579,0 @@\n-typedef void     (* _cmsOPTeval16Fn)(CMSREGISTER const cmsUInt16Number In[],\n-                                     CMSREGISTER cmsUInt16Number Out[],\n-                                     CMSREGISTER const void* Data);\n-\n-\n@@ -590,0 +585,11 @@\n+\/\/ Pipeline Evaluator (in 16 bits)\n+typedef void (* _cmsPipelineEval16Fn)(CMSREGISTER const cmsUInt16Number In[],\n+                                     CMSREGISTER cmsUInt16Number Out[],\n+                                     const void* Data);\n+\n+\/\/ Pipeline Evaluator (in floating point)\n+typedef void (* _cmsPipelineEvalFloatFn)(const cmsFloat32Number In[],\n+                                         cmsFloat32Number Out[],\n+                                         const void* Data);\n+\n+\n@@ -594,1 +600,1 @@\n-                                               _cmsOPTeval16Fn Eval16,\n+                                               _cmsPipelineEval16Fn Eval16,\n@@ -658,0 +664,3 @@\n+\/\/ Retrieve original flags\n+CMSAPI cmsUInt32Number CMSEXPORT _cmsGetTransformFlags(struct _cmstransform_struct* CMMcargo);\n+\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/lcms2_plugin.h","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}