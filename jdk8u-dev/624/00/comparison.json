{"files":[{"patch":"@@ -153,6 +153,0 @@\n-# 6988950\n-demo\/jvmti\/compiledMethodLoad\/CompiledMethodLoadTest.java\tgeneric-all\n-\n-# 7027502\n-demo\/jvmti\/hprof\/MonitorTest.java                               generic-all\n-\n","filename":"jdk\/test\/ProblemList.txt","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,2 +221,1 @@\n-    sun\/jvmstat \\\n-    demo\/jvmti\n+    sun\/jvmstat\n","filename":"jdk\/test\/TEST.groups","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- *\n- *   Sample target application for jvmti demos\n- *\n- *     java Context [threadCount [iterationCount [sleepContention]]]\n- *           Default: java Context 5 10 0\n- *\n- *      threadCount     Number of threads\n- *      iterationCount  Total turns taken for all threads\n- *      sleepContention Time for main thread to sleep while holding lock\n- *                      (creates monitor contention on all other threads)\n- *\n- *\/\n-\n-\/* Used to sync up turns and keep track of who's turn it is *\/\n-final class TurnChecker {\n-    int thread_index;\n-    TurnChecker(int thread_index) {\n-        this.thread_index = thread_index;\n-    }\n-}\n-\n-\/* Creates a bunch of threads that sequentially take turns *\/\n-public final class Context extends Thread {\n-    \/* Used to track threads *\/\n-    private static long startTime;\n-    private static TurnChecker turn = new TurnChecker(-1);\n-    private static int total_turns_taken;\n-\n-    \/* Used for each Context thread *\/\n-    private final int thread_count;\n-    private final int thread_index;\n-    private final int thread_turns;\n-\n-    \/* Main program *\/\n-    public static void main(String[] argv) throws InterruptedException {\n-        int default_thread_count = 5;\n-        int default_thread_turns = 10;\n-        int default_contention_sleep = 0;\n-        int expected_turns_taken;\n-        long sleepTime = 10L;\n-\n-        \/* Override defaults *\/\n-        if ( argv.length >= 1 ) {\n-            default_thread_count = Integer.parseInt(argv[0]);\n-        }\n-        if ( argv.length >= 2 ) {\n-            expected_turns_taken = Integer.parseInt(argv[1]);\n-            default_thread_turns = expected_turns_taken\/default_thread_count;\n-        }\n-        expected_turns_taken = default_thread_count*default_thread_turns;\n-        if ( argv.length >= 3 ) {\n-            default_contention_sleep = Integer.parseInt(argv[2]);\n-        }\n-\n-        System.out.println(\"Context started with \"\n-                 + default_thread_count + \" threads and \"\n-                 + default_thread_turns + \" turns per thread\");\n-\n-        \/* Get all threads running (they will block until we set turn) *\/\n-        for (int i = 0; i < default_thread_count; i++) {\n-            new Context(default_thread_count, i, default_thread_turns).start();\n-        }\n-\n-        \/* Sleep to make sure thread_index 0 make it to the wait call *\/\n-        System.out.println(\"Context sleeping, so threads will start wait\");\n-        Thread.yield();\n-        Thread.sleep(sleepTime);\n-\n-        \/* Save start time *\/\n-        startTime = System.currentTimeMillis();\n-\n-        \/* This triggers the starting of taking turns *\/\n-        synchronized (turn) {\n-            turn.thread_index = 0;\n-            turn.notifyAll();\n-        }\n-        System.out.println(\"Context sleeping, so threads can run\");\n-        Thread.yield();\n-        Thread.sleep(sleepTime);\n-\n-        \/* Wait for threads to finish (after everyone has had their turns) *\/\n-        while ( true ) {\n-            boolean done;\n-            done = false;\n-            synchronized (turn) {\n-                if ( total_turns_taken == expected_turns_taken ) {\n-                    done = true;\n-                }\n-                \/* Create some monitor contention by sleeping with lock *\/\n-                if ( default_contention_sleep > 0 ) {\n-                    System.out.println(\"Context sleeping, to create contention\");\n-                    Thread.yield();\n-                    Thread.sleep((long)default_contention_sleep);\n-                }\n-            }\n-            if ( done )\n-                break;\n-            System.out.println(\"Context sleeping, so threads will complete\");\n-            Thread.sleep(sleepTime);\n-        }\n-\n-        long endTime   = System.currentTimeMillis();\n-        long totalTime = endTime - startTime;\n-\n-        System.out.println(\"Total time (milliseconds): \" + totalTime);\n-        System.out.println(\"Milliseconds per thread: \" +\n-                           ((double)totalTime \/ (default_thread_count)));\n-\n-        System.out.println(\"Context completed\");\n-        System.exit(0);\n-    }\n-\n-    \/* Thread object to run *\/\n-    Context(int thread_count, int thread_index, int thread_turns) {\n-        this.thread_count = thread_count;\n-        this.thread_index = thread_index;\n-        this.thread_turns = thread_turns;\n-    }\n-\n-    \/* Main for thread *\/\n-    public void run() {\n-        int next_thread_index = (thread_index + 1) % thread_count;\n-        int turns_taken       = 0;\n-\n-        try {\n-\n-            \/* Loop until we make sure we get all our turns *\/\n-            for (int i = 0; i < thread_turns * thread_count; i++) {\n-                synchronized (turn) {\n-                    \/* Keep waiting for our turn *\/\n-                    while (turn.thread_index != thread_index)\n-                        turn.wait();\n-                    \/* MY TURN! Each thread gets thread_turns *\/\n-                    total_turns_taken++;\n-                    turns_taken++;\n-                    System.out.println(\"Turn #\" + total_turns_taken\n-                                + \" taken by thread \" + thread_index\n-                                + \", \" + turns_taken\n-                                + \" turns taken by this thread\");\n-                    \/* Give next thread a turn *\/\n-                    turn.thread_index = next_thread_index;\n-                    turn.notifyAll();\n-                }\n-                \/* If we've had all our turns, break out of this loop *\/\n-                if ( thread_turns == turns_taken ) {\n-                    break;\n-                }\n-            }\n-        } catch (InterruptedException intEx) { \/* skip *\/ }\n-\n-        \/* Make sure we got all our turns *\/\n-        if ( thread_turns != turns_taken ) {\n-            System.out.println(\"ERROR: thread got \" + turns_taken\n-                                        + \" turns, expected \" + thread_turns);\n-            System.exit(1);\n-        }\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/Context.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -1,222 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* DemoRun:\n- *\n- * Support classes for java jvmti demo tests\n- *\n- *\/\n-\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.File;\n-import java.io.BufferedInputStream;\n-import java.io.PrintStream;\n-\n-\/*\n- * Helper class to direct process output to a StringBuffer\n- *\/\n-class MyInputStream implements Runnable {\n-    private String              name;\n-    private BufferedInputStream in;\n-    private StringBuffer        buffer;\n-\n-    \/* Create MyInputStream that saves all output to a StringBuffer *\/\n-    MyInputStream(String name, InputStream in) {\n-        this.name = name;\n-        this.in = new BufferedInputStream(in);\n-        buffer = new StringBuffer(4096);\n-        Thread thr = new Thread(this);\n-        thr.setDaemon(true);\n-        thr.start();\n-    }\n-\n-    \/* Dump the buffer *\/\n-    void dump(PrintStream x) {\n-        String str = buffer.toString();\n-        x.println(\"<beginning of \" + name + \" buffer>\");\n-        x.println(str);\n-        x.println(\"<end of buffer>\");\n-    }\n-\n-    \/* Check to see if a pattern is inside the output. *\/\n-    boolean contains(String pattern) {\n-        String str = buffer.toString();\n-        return str.contains(pattern);\n-    }\n-\n-    \/* Runs as a separate thread capturing all output in a StringBuffer *\/\n-    public void run() {\n-        try {\n-            byte b[] = new byte[100];\n-            for (;;) {\n-                int n = in.read(b);\n-                String str;\n-                if (n < 0) {\n-                    break;\n-                }\n-                str = new String(b, 0, n);\n-                buffer.append(str);\n-                System.out.print(str);\n-            }\n-        } catch (IOException ioe) { \/* skip *\/ }\n-    }\n-}\n-\n-\/*\n- * Main JVMTI Demo Run class.\n- *\/\n-public class DemoRun {\n-\n-    private String        demo_name;\n-    private String        demo_options;\n-    private MyInputStream output;\n-    private MyInputStream error;\n-\n-    \/* Create a Demo run process *\/\n-    public DemoRun(String name, String options)\n-    {\n-        demo_name    = name;\n-        demo_options = options;\n-    }\n-\n-    \/*\n-     * Execute a process with an -agentpath or -agentlib command option\n-     *\/\n-    public void runit(String class_name)\n-    {\n-        runit(class_name, null);\n-    }\n-\n-    \/*\n-     * Execute a process with an -agentpath or -agentlib command option\n-     *    plus any set of other java options.\n-     *\/\n-    public void runit(String class_name, String vm_options[])\n-    {\n-        String jre_home  = System.getProperty(\"java.home\");\n-        String sdk_home  = (jre_home.endsWith(\"jre\") ?\n-                            (jre_home + File.separator + \"..\") :\n-                            jre_home );\n-        String cdir      = System.getProperty(\"test.classes\", \".\");\n-        String os_arch   = System.getProperty(\"os.arch\");\n-        String os_name   = System.getProperty(\"os.name\");\n-        String libprefix = os_name.contains(\"Windows\")?\"\":\"lib\";\n-        String libsuffix = os_name.contains(\"Windows\")?\".dll\":\n-                                os_name.contains(\"OS X\")?\".dylib\":\".so\";\n-        boolean hprof    = demo_name.equals(\"hprof\");\n-        String java      = jre_home\n-                             + File.separator + \"bin\"\n-                             + File.separator + \"java\";\n-        \/* Array of strings to be passed in for exec:\n-         *   1. java\n-         *   2. -Dtest.classes=.\n-         *   3. -Xcheck:jni          (Just because it finds bugs)\n-         *   4. -Xverify:all         (Make sure verification is on full blast)\n-         *   5. -agent\n-         *       vm_options\n-         *   6+i. classname\n-         *\/\n-        int nvm_options = 0;\n-        if ( vm_options != null ) nvm_options = vm_options.length;\n-        String cmd[]     = new String[1 + 7 + nvm_options];\n-        String cmdLine;\n-        int exitStatus;\n-        int i,j;\n-\n-        i = 0;\n-        cmdLine = \"\";\n-        cmdLine += (cmd[i++] = java);\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = \"-cp\");\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = cdir);\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = \"-Dtest.classes=\" + cdir);\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = \"-Xcheck:jni\");\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = \"-Xverify:all\");\n-        if ( hprof ) {\n-            \/* Load hprof with -agentlib since it's part of jre *\/\n-            cmdLine += \" \";\n-            cmdLine += (cmd[i++] = \"-agentlib:\" + demo_name\n-                     + (demo_options.equals(\"\")?\"\":(\"=\"+demo_options)));\n-        } else {\n-            String libname  = sdk_home\n-                         + File.separator + \"demo\"\n-                         + File.separator + \"jvmti\"\n-                         + File.separator + demo_name\n-                         + File.separator + \"lib\"\n-                         + File.separator + libprefix + demo_name + libsuffix;\n-            cmdLine += \" \";\n-            cmdLine += (cmd[i++] = \"-agentpath:\" + libname\n-                     + (demo_options.equals(\"\")?\"\":(\"=\"+demo_options)));\n-        }\n-        \/* Add any special VM options *\/\n-        for ( j = 0; j < nvm_options; j++ ) {\n-            cmdLine += \" \";\n-            cmdLine += (cmd[i++] = vm_options[j]);\n-        }\n-        \/* Add classname *\/\n-        cmdLine += \" \";\n-        cmdLine += (cmd[i++] = class_name);\n-\n-        \/* Begin process *\/\n-        Process p;\n-\n-        System.out.println(\"Starting: \" + cmdLine);\n-        try {\n-            p = Runtime.getRuntime().exec(cmd);\n-        } catch ( IOException e ) {\n-            throw new RuntimeException(\"Test failed - exec got IO exception\");\n-        }\n-\n-        \/* Save process output in StringBuffers *\/\n-        output = new MyInputStream(\"Input Stream\", p.getInputStream());\n-        error  = new MyInputStream(\"Error Stream\", p.getErrorStream());\n-\n-        \/* Wait for process to complete, and if exit code is non-zero we fail *\/\n-        try {\n-            exitStatus = p.waitFor();\n-            if ( exitStatus != 0) {\n-                System.out.println(\"Exit code is \" + exitStatus);\n-                error.dump(System.out);\n-                output.dump(System.out);\n-                throw new RuntimeException(\"Test failed - \" +\n-                                    \"exit return code non-zero \" +\n-                                    \"(exitStatus==\" + exitStatus + \")\");\n-            }\n-        } catch ( InterruptedException e ) {\n-            throw new RuntimeException(\"Test failed - process interrupted\");\n-        }\n-        System.out.println(\"Completed: \" + cmdLine);\n-    }\n-\n-    \/* Does the pattern appear in the output of this process *\/\n-    public boolean output_contains(String pattern)\n-    {\n-        return output.contains(pattern) || error.contains(pattern);\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/DemoRun.java","additions":0,"deletions":222,"binary":false,"changes":222,"status":"deleted"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- *\n- *   Sample target application\n- *\n- *\/\n-\n-class Animal {\n-    int category;\n-    int age;\n-}\n-\n-class Pet extends Animal {\n-    String owner;\n-    String name;\n-    String vet;\n-    String records;\n-    String address;\n-    Pet(String name) { this.name = name; }\n-}\n-\n-class Dog extends Pet {\n-    int breed;\n-    int barks;\n-    Dog(String name) { super(name); }\n-}\n-\n-class Cat extends Pet {\n-    int breed;\n-    int claws;\n-    Cat(String name) { super(name); }\n-}\n-\n-public class HeapUser {\n-    private static Dog dogs[];\n-    private static Cat cats[];\n-    public static void main(String args[]) {\n-        System.out.println(\"HeapUser start, 101 dogs, 1000 cats\");\n-        dogs = new Dog[101];\n-        for(int i=0; i<101; i++) {\n-            dogs[i] = new Dog(\"fido \" + i);\n-        }\n-        cats = new Cat[1000];\n-        for(int i=0; i<1000; i++) {\n-            cats[i] = new Cat(\"feefee \" + i);\n-        }\n-        System.out.println(\"HeapUser end\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/HeapUser.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- *\n- *   Sample target application for jvmti demos\n- *\n- *\/\n-\n-public class Hello {\n-    public static void main(String args[]) {\n-        System.out.println(\"Hello\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/Hello.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 6580131\n- * @summary Test jvmti demo compiledMethodLoad\n- *\n- * @compile ..\/DemoRun.java ..\/Hello.java\n- * @build CompiledMethodLoadTest\n- * @run main CompiledMethodLoadTest Hello\n- *\/\n-\n-public class CompiledMethodLoadTest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI compiledMethodLoad agent (no options) *\/\n-        demo = new DemoRun(\"compiledMethodLoad\", \"\" \/* options to compiledMethodLoad *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/compiledMethodLoad\/CompiledMethodLoadTest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- *\n- *   Sample target application for gctest demo\n- *\n- *\/\n-\n-public class BigHello {\n-    private final static int NLOOPS = 20000;\n-    private static Object garbage[];\n-    public static void main(String args[]) {\n-        long count = 0;\n-        System.out.println(\"Big Hello start\");\n-        for(int i=1; i<=NLOOPS; i++) {\n-            count += i;\n-            garbage = new Object[i];\n-            garbage[0] = new Object();\n-        }\n-        System.out.println(\"Allocated \" + count +\n-                           \" array elements, and \" + NLOOPS +\n-                           \" arrays and Objects.\");\n-        System.out.println(\"Big Hello end\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/gctest\/BigHello.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 5027764\n- * @summary Test jvmti demo gctest\n- *\n- * @compile ..\/DemoRun.java\n- * @build BigHello Gctest\n- * @run main Gctest BigHello\n- *\/\n-\n-public class Gctest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI gctest agent (no options) *\/\n-        demo = new DemoRun(\"gctest\", \"\" \/* options to gctest *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/gctest\/Gctest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 5050116 6299047\n- * @summary Test jvmti demo heapTracker\n- *\n- * @compile ..\/DemoRun.java\n- * @compile ..\/HeapUser.java\n- * @build HeapTrackerTest\n- * @run main HeapTrackerTest HeapUser\n- *\/\n-\n-public class HeapTrackerTest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI heapTracker agent (no options) *\/\n-        demo = new DemoRun(\"heapTracker\", \"\" \/* options to heapTracker *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/heapTracker\/HeapTrackerTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 5033539\n- * @summary Test jvmti demo heapViewer\n- *\n- * @compile ..\/DemoRun.java\n- * @compile ..\/HeapUser.java\n- * @build HeapViewerTest\n- * @run main HeapViewerTest HeapUser\n- *\/\n-\n-public class HeapViewerTest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI heapViewer agent (no options) *\/\n-        demo = new DemoRun(\"heapViewer\", \"\" \/* options to heapViewer *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/heapViewer\/HeapViewerTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2006, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* MinstExample:\n- *\n- *\/\n-\n-public class MinstExample {\n-    private static int called = 0;\n-    private static void foobar() {\n-        called++;\n-    }\n-    public static void main(String[] args) {\n-        System.out.println(\"MinstExample started\");\n-        for(int i=0; i<200; i++) foobar();\n-        System.out.println(\"MinstExample ended\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/minst\/MinstExample.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2006, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 6377205\n- * @summary Test jvmti demo minst\n- *\n- * @compile ..\/DemoRun.java\n- * @compile MinstExample.java\n- * @build MinstTest\n- * @run main MinstTest MinstExample\n- *\/\n-\n-public class MinstTest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI minst agent (no options) *\/\n-        demo = new DemoRun(\"minst\", \"exclude=java\/*,exclude=javax\/*,exclude=com\/*,exclude=sun\/*\" \/* options to minst *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/minst\/MinstTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 5039613\n- * @summary Test jvmti demo versionCheck\n- *\n- * @compile ..\/DemoRun.java ..\/Hello.java\n- * @build FailsWhenJvmtiVersionDiffers\n- * @run main FailsWhenJvmtiVersionDiffers Hello\n- *\/\n-\n-public class FailsWhenJvmtiVersionDiffers {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI versionCheck agent (no options) *\/\n-        demo = new DemoRun(\"versionCheck\", \"\" \/* options to versionCheck *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            System.out.println(\n-             \"NOTE: The jmvti.h file doesn't match the JVMTI in the VM.\\n\"\n-            +\"      This may or may not be a serious issue.\\n\"\n-            +\"      Check the jtr file for details.\\n\"\n-            +\"      Call your local serviceability representative for help.\"\n-            );\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/versionCheck\/FailsWhenJvmtiVersionDiffers.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/* @test\n- * @bug 5027764\n- * @summary Test jvmti demo waiters\n- *\n- * @compile ..\/DemoRun.java\n- * @compile ..\/Context.java\n- * @build WaitersTest\n- * @run main WaitersTest Context\n- *\/\n-\n-public class WaitersTest {\n-\n-    public static void main(String args[]) throws Exception {\n-        DemoRun demo;\n-\n-        \/* Run demo that uses JVMTI waiters agent (no options) *\/\n-        demo = new DemoRun(\"waiters\", \"\" \/* options to waiters *\/ );\n-        demo.runit(args[0]);\n-\n-        \/* Make sure patterns in output look ok *\/\n-        if (demo.output_contains(\"ERROR\")) {\n-            throw new RuntimeException(\"Test failed - ERROR seen in output\");\n-        }\n-\n-        \/* Must be a pass. *\/\n-        System.out.println(\"Test passed - cleanly terminated\");\n-    }\n-}\n","filename":"jdk\/test\/demo\/jvmti\/waiters\/WaitersTest.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"}]}