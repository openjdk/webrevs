{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import sun.java2d.cmm.ProfileDeferralMgr;\n@@ -45,1 +44,0 @@\n-import sun.java2d.cmm.ProfileActivator;\n@@ -60,0 +58,1 @@\n+import java.io.FilePermission;\n@@ -100,4 +99,2 @@\n-    private transient Profile cmmProfile;\n-\n-    private transient ProfileDeferralInfo deferralInfo;\n-    private transient ProfileActivator profileActivator;\n+    private transient volatile Profile cmmProfile;\n+    private transient volatile ProfileDeferralInfo deferralInfo;\n@@ -743,7 +740,1 @@\n-        this.deferralInfo = pdi;\n-        this.profileActivator = new ProfileActivator() {\n-            public void activate() throws ProfileDataException {\n-                activateDeferredProfile();\n-            }\n-        };\n-        ProfileDeferralMgr.registerDeferral(this.profileActivator);\n+        deferralInfo = pdi;\n@@ -759,2 +750,0 @@\n-        } else if (profileActivator != null) {\n-            ProfileDeferralMgr.unregisterDeferral(profileActivator);\n@@ -778,4 +767,0 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-\n@@ -845,1 +830,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -849,1 +834,1 @@\n-                    sRGBprofile = getDeferredInstance(pInfo);\n+                    sRGBprofile = new ICC_ProfileRGB(pdi);\n@@ -859,1 +844,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -862,2 +847,2 @@\n-                                                CLASS_DISPLAY);\n-                    XYZprofile = getDeferredInstance(pInfo);\n+                                                CLASS_ABSTRACT);\n+                    XYZprofile = new ICC_Profile(pdi);\n@@ -875,1 +860,1 @@\n-                        ProfileDeferralInfo pInfo =\n+                        ProfileDeferralInfo pdi =\n@@ -878,2 +863,2 @@\n-                                                    CLASS_DISPLAY);\n-                        PYCCprofile = getDeferredInstance(pInfo);\n+                                                    CLASS_COLORSPACECONVERSION);\n+                        PYCCprofile = new ICC_Profile(pdi);\n@@ -893,1 +878,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -897,1 +882,1 @@\n-                    GRAYprofile = getDeferredInstance(pInfo);\n+                    GRAYprofile = new ICC_ProfileGray(pdi);\n@@ -907,1 +892,1 @@\n-                    ProfileDeferralInfo pInfo =\n+                    ProfileDeferralInfo pdi =\n@@ -911,1 +896,1 @@\n-                    LINEAR_RGBprofile = getDeferredInstance(pInfo);\n+                    LINEAR_RGBprofile = new ICC_ProfileRGB(pdi);\n@@ -1008,7 +993,1 @@\n-    byte profileData[];\n-\n-        if (s instanceof ProfileDeferralInfo) {\n-            \/* hack to detect profiles whose loading can be deferred *\/\n-            return getDeferredInstance((ProfileDeferralInfo) s);\n-        }\n-\n+        byte[] profileData;\n@@ -1047,10 +1026,4 @@\n-     * Constructs an ICC_Profile for which the actual loading of the\n-     * profile data from a file and the initialization of the CMM should\n-     * be deferred as long as possible.\n-     * Deferral is only used for standard profiles.\n-     * If deferring is disabled, then getStandardProfile() ensures\n-     * that all of the appropriate access privileges are granted\n-     * when loading this profile.\n-     * If deferring is enabled, then the deferred activation\n-     * code will take care of access privileges.\n-     * @see activateDeferredProfile()\n+     * Activates the deferred standard profiles. Implementation of this method\n+     * mimics the old behaviour when the CMMException and IOException were\n+     * wrapped by the ProfileDataException, and the ProfileDataException itself\n+     * was ignored during activation.\n@@ -1058,28 +1031,19 @@\n-    static ICC_Profile getDeferredInstance(ProfileDeferralInfo pdi) {\n-        if (!ProfileDeferralMgr.deferring) {\n-            return getStandardProfile(pdi.filename);\n-        }\n-        if (pdi.colorSpaceType == ColorSpace.TYPE_RGB) {\n-            return new ICC_ProfileRGB(pdi);\n-        } else if (pdi.colorSpaceType == ColorSpace.TYPE_GRAY) {\n-            return new ICC_ProfileGray(pdi);\n-        } else {\n-            return new ICC_Profile(pdi);\n-        }\n-    }\n-\n-\n-    void activateDeferredProfile() throws ProfileDataException {\n-        byte profileData[];\n-        FileInputStream fis;\n-        final String fileName = deferralInfo.filename;\n-\n-        profileActivator = null;\n-        deferralInfo = null;\n-        PrivilegedAction<FileInputStream> pa = new PrivilegedAction<FileInputStream>() {\n-            public FileInputStream run() {\n-                File f = getStandardProfileFile(fileName);\n-                if (f != null) {\n-                    try {\n-                        return new FileInputStream(f);\n-                    } catch (FileNotFoundException e) {}\n+    private void activate() {\n+        if (cmmProfile == null) {\n+            synchronized (this) {\n+                if (cmmProfile != null) {\n+                    return;\n+                }\n+                InputStream is = getStandardProfileInputStream(deferralInfo.filename);\n+                if (is == null) {\n+                    return;\n+                }\n+                try {\n+                    byte[] data = getProfileDataFromStream(is);\n+                    if (data != null) {\n+                        cmmProfile = CMSManager.getModule().loadProfile(data);\n+                        \/\/ from now we cannot use the deferred value, drop it\n+                        deferralInfo = null;\n+                    }\n+                    is.close();    \/* close the stream *\/\n+                } catch (CMMException | IOException ignore) {\n@@ -1087,1 +1051,0 @@\n-                return null;\n@@ -1089,25 +1052,0 @@\n-        };\n-        if ((fis = AccessController.doPrivileged(pa)) == null) {\n-            throw new ProfileDataException(\"Cannot open file \" + fileName);\n-        }\n-        try {\n-            profileData = getProfileDataFromStream(fis);\n-            fis.close();    \/* close the file *\/\n-        }\n-        catch (IOException e) {\n-            ProfileDataException pde = new\n-                ProfileDataException(\"Invalid ICC Profile Data\" + fileName);\n-            pde.initCause(e);\n-            throw pde;\n-        }\n-        if (profileData == null) {\n-            throw new ProfileDataException(\"Invalid ICC Profile Data\" +\n-                fileName);\n-        }\n-        try {\n-            cmmProfile = CMSManager.getModule().loadProfile(profileData);\n-        } catch (CMMException c) {\n-            ProfileDataException pde = new\n-                ProfileDataException(\"Invalid ICC Profile Data\" + fileName);\n-            pde.initCause(c);\n-            throw pde;\n@@ -1152,5 +1090,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.profileClass; \/* Need to have this info for\n-                                                 ICC_ColorSpace without\n-                                                 causing a deferred profile\n-                                                 to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.profileClass;\n@@ -1212,5 +1148,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.colorSpaceType; \/* Need to have this info for\n-                                                   ICC_ColorSpace without\n-                                                   causing a deferred profile\n-                                                   to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.colorSpaceType;\n@@ -1218,0 +1152,1 @@\n+        activate();\n@@ -1244,3 +1179,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1308,3 +1241,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1343,3 +1274,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1391,3 +1320,1 @@\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n+        activate();\n@@ -1451,5 +1378,3 @@\n-        if (deferralInfo != null) {\n-            return deferralInfo.numComponents; \/* Need to have this info for\n-                                                  ICC_ColorSpace without\n-                                                  causing a deferred profile\n-                                                  to be loaded *\/\n+        ProfileDeferralInfo info = deferralInfo;\n+        if (info != null) {\n+            return info.numComponents;\n@@ -1539,0 +1464,18 @@\n+  \/**\n+     * Returns a stream corresponding to a built-in profile\n+     * specified by fileName.\n+     * If there is no built-in profile with such name, then the method\n+     * returns null.\n+     *\/\n+    private static InputStream getStandardProfileInputStream(String fileName) {\n+        return AccessController.doPrivileged(\n+            new PrivilegedAction<InputStream>() {\n+                public InputStream run () {\n+                    try {\n+                    return\n+                        new FileInputStream(getStandardProfileFile(fileName));\n+                    } catch(IOException ex) {return null;}\n+                }\n+            });\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":73,"deletions":130,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.awt.Point;\n@@ -41,2 +40,8 @@\n-import java.awt.color.*;\n-import sun.java2d.cmm.ColorTransform;\n+import java.awt.Point;\n+import java.awt.RenderingHints;\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.geom.Point2D;\n+import java.awt.geom.Rectangle2D;\n+\n@@ -44,1 +49,1 @@\n-import sun.java2d.cmm.ProfileDeferralMgr;\n+import sun.java2d.cmm.ColorTransform;\n@@ -46,3 +51,0 @@\n-import java.awt.geom.Rectangle2D;\n-import java.awt.geom.Point2D;\n-import java.awt.RenderingHints;\n@@ -80,7 +82,0 @@\n-    \/* the class initializer *\/\n-    static {\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-    }\n-\n","filename":"jdk\/src\/share\/classes\/java\/awt\/image\/ColorConvertOp.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import java.io.InputStream;\n-import java.io.IOException;\n-\n-\n@@ -33,4 +29,3 @@\n- * A class to pass information about a profile to be loaded from\n- * a file to the static getInstance(InputStream) method of\n- * ICC_Profile.  Loading of the profile data and initialization\n- * of the CMM is to be deferred as long as possible.\n+ * A class to pass information about a profile to be loaded from a file to the\n+ * static getInstance(int cspace) method of ICC_Profile. Loading of the profile\n+ * data and initialization of the CMM is to be deferred as long as possible.\n@@ -38,1 +33,7 @@\n-public class ProfileDeferralInfo extends InputStream {\n+public final class ProfileDeferralInfo {\n+\n+    \/**\n+     * Need to have this info for ICC_ColorSpace without causing a deferred\n+     * profile to be loaded.\n+     *\/\n+    public final int colorSpaceType, numComponents, profileClass;\n@@ -40,2 +41,4 @@\n-    public int colorSpaceType, numComponents, profileClass;\n-    public String filename;\n+    \/**\n+     * The profile file name, such as \"CIEXYZ.pf\", \"sRGB.pf\", etc.\n+     *\/\n+    public final String filename;\n@@ -44,2 +47,0 @@\n-\n-        super();\n@@ -51,10 +52,0 @@\n-\n-\n-    \/**\n-     * Implements the abstract read() method of InputStream.\n-     *\/\n-    public int read() throws IOException {\n-\n-        return 0;\n-    }\n-\n","filename":"jdk\/src\/share\/classes\/sun\/java2d\/cmm\/ProfileDeferralInfo.java","additions":15,"deletions":24,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.awt.color.ICC_Profile;\n@@ -42,0 +41,1 @@\n+import java.awt.color.ICC_Profile;\n@@ -43,2 +43,0 @@\n-import java.awt.image.Raster;\n-import java.awt.image.WritableRaster;\n@@ -55,0 +53,4 @@\n+import java.awt.image.Raster;\n+import java.awt.image.WritableRaster;\n+\n+import sun.java2d.cmm.ColorTransform;\n@@ -56,0 +58,1 @@\n+import static sun.java2d.cmm.lcms.LCMSImageLayout.ImageLayoutException;\n@@ -74,7 +77,0 @@\n-    \/* the class initializer *\/\n-    static {\n-        if (ProfileDeferralMgr.deferring) {\n-            ProfileDeferralMgr.activateProfiles();\n-        }\n-    }\n-\n","filename":"jdk\/src\/share\/classes\/sun\/java2d\/cmm\/lcms\/LCMSTransform.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -614,0 +614,2 @@\n+    jclass pcls;\n+    jmethodID mid;\n@@ -618,3 +620,16 @@\n-    fid = (*env)->GetFieldID (env,\n-        (*env)->GetObjectClass(env, pf),\n-        \"cmmProfile\", \"Lsun\/java2d\/cmm\/Profile;\");\n+\n+    pcls = (*env)->GetObjectClass(env, pf);\n+    if (pcls == NULL) {\n+        return NULL;\n+    }\n+    mid = (*env)->GetMethodID(env, pcls, \"activate\", \"()V\");\n+    if (mid == NULL) {\n+        return NULL;\n+    }\n+    (*env)->CallVoidMethod(env, pf, mid);\n+    if ((*env)->ExceptionOccurred(env)) {\n+        return NULL;\n+    }\n+\n+    fid = (*env)->GetFieldID(env, pcls, \"cmmProfile\",\n+                             \"Lsun\/java2d\/cmm\/Profile;\");\n","filename":"jdk\/src\/share\/native\/sun\/java2d\/cmm\/lcms\/LCMS.c","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.awt.color.ICC_ProfileRGB;\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * @test\n+ * @bug 6986863\n+ * @summary Verifies MT safety of ICC_ProfileRGB#getMatrix method\n+ *\/\n+public final class MTMatrixAccess {\n+\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        test((ICC_ProfileRGB) ICC_Profile.getInstance(ColorSpace.CS_sRGB));\n+        test((ICC_ProfileRGB) ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));\n+    }\n+\n+    private static void test(ICC_ProfileRGB rgb) throws InterruptedException {\n+        Thread[] threads = new Thread[100];\n+        CountDownLatch go = new CountDownLatch(1);\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(() -> {\n+                try {\n+                    go.await();\n+                } catch (InterruptedException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                try {\n+                    rgb.getMatrix();\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    failed = true;\n+                }\n+            });\n+        }\n+        for (Thread thread : threads) {\n+            thread.start();\n+        }\n+        go.countDown();\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/color\/ICC_ProfileRGB\/MTMatrixAccess.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.util.concurrent.CountDownLatch;\n+\n+\/**\n+ * @test\n+ * @bug 6986863\n+ * @summary Verifies MT safety of profile activation while a profile is accessed\n+ *\/\n+public final class ProfileActivationDuringPropertyAccess {\n+\n+    private static volatile boolean failed;\n+    private static volatile boolean end;\n+\n+    public static void main(String[] args) throws Exception {\n+        test(ICC_Profile.getInstance(ColorSpace.CS_sRGB));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_GRAY));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_CIEXYZ));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_LINEAR_RGB));\n+        test(ICC_Profile.getInstance(ColorSpace.CS_PYCC));\n+    }\n+\n+    private static void test(ICC_Profile profile) throws Exception {\n+        Thread[] ts = new Thread[100];\n+        CountDownLatch latch = new CountDownLatch(ts.length);\n+        for (int i = 0; i < ts.length; i++) {\n+            ts[i] = new Thread(() -> {\n+                latch.countDown();\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException ex) {\n+                }\n+                try {\n+                    while (!end) {\n+                        profile.getColorSpaceType(); \/\/ try use deferred info\n+                    }\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    failed = true;\n+                }\n+            });\n+        }\n+        for (Thread t : ts) {\n+            t.start();\n+        }\n+        Thread.sleep(1500);\n+        profile.getPCSType(); \/\/ activate profile\n+        end = true;\n+        for (Thread t : ts) {\n+            t.join();\n+        }\n+        if (failed) {\n+            throw new RuntimeException();\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/color\/ProfileActivationDuringPropertyAccess.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}