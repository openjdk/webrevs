{"files":[{"patch":"@@ -72,1 +72,2 @@\n-        InetSocketAddress addr = new InetSocketAddress (0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress (loopback, 0);\n@@ -81,1 +82,1 @@\n-                \"127.0.0.1\", server.getAddress().getPort()\n+                loopback, server.getAddress().getPort()\n@@ -89,1 +90,4 @@\n-            int selres = selector.select (1);\n+            \/\/ we need to read responses from time to time: slightly\n+            \/\/ increase the timeout with the amount of pending responses\n+            \/\/ to give a chance to the server to reply.\n+            int selres = selector.select (requests - responses + 1);\n@@ -98,0 +102,1 @@\n+                            System.out.print(\"_\");\n@@ -102,1 +107,3 @@\n-                    } catch (IOException e) {}\n+                    } catch (IOException e) {\n+                        System.out.println(e);\n+                    }\n@@ -106,0 +113,1 @@\n+                System.out.print(\".\");\n","filename":"jdk\/test\/com\/sun\/net\/httpserver\/bugs\/B6361557.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,2 @@\n-            server = new TestHttpServer (new B4722333(), 1, 10, 0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            server = new TestHttpServer (new B4722333(), 1, 10, loopback, 0);\n@@ -125,5 +126,5 @@\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/d1\/d2\/d3\/foo.html\");\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/ASD\/d3\/x.html\");\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/biz\/d3\/x.html\");\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/bar\/d3\/x.html\");\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/fuzz\/d3\/x.html\");\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/d1\/d2\/d3\/foo.html\");\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/ASD\/d3\/x.html\");\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/biz\/d3\/x.html\");\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/bar\/d3\/x.html\");\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/fuzz\/d3\/x.html\");\n","filename":"jdk\/test\/java\/net\/Authenticator\/B4722333.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/lib\/testlibrary\n@@ -32,0 +33,1 @@\n+import java.net.InetAddress;\n@@ -44,0 +46,1 @@\n+import jdk.testlibrary.net.URIBuilder;\n@@ -51,1 +54,6 @@\n-            URI uri = new URI(\"http:\/\/localhost:\" + address.getPort() + \"\/foo\");\n+            URI uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(address.getAddress())\n+                .port(address.getPort())\n+                .path(\"\/foo\")\n+                .build();\n@@ -81,1 +89,2 @@\n-        HttpServer httpServer = HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n@@ -149,1 +158,0 @@\n-\n","filename":"jdk\/test\/java\/net\/HttpURLConnection\/UnmodifiableMaps.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/lib\/testlibrary\n@@ -35,0 +36,1 @@\n+import jdk.testlibrary.net.URIBuilder;\n@@ -94,1 +96,1 @@\n-static class NameVerifier implements HostnameVerifier {\n+    static class NameVerifier implements HostnameVerifier {\n@@ -101,1 +103,4 @@\n-        ss = new ServerSocket(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n+\n@@ -130,2 +135,6 @@\n-        url2 = new URL(\"http:\/\/localhost:\" +\n-                       Integer.toString(ss.getLocalPort())+\"\/file2.1\");\n+        url2 = URIBuilder.newBuilder()\n+                   .scheme(\"http\")\n+                   .host(ss.getInetAddress())\n+                   .port(ss.getLocalPort())\n+                   .path(\"\/file2.1\")\n+                   .toURL();\n","filename":"jdk\/test\/java\/net\/ResponseCache\/ResponseCacheTest.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,2 @@\n-        ss = new ServerSocket(0);\n+        ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(addr, 0));\n","filename":"jdk\/test\/java\/net\/Socket\/GetLocalAddress.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -40,2 +42,4 @@\n-        ServerSocket ss = new ServerSocket(0);\n-        Socket s = new Socket(\"localhost\", ss.getLocalPort());\n+        ServerSocket ss = new ServerSocket();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n+        Socket s = new Socket(loopback, ss.getLocalPort());\n","filename":"jdk\/test\/java\/net\/Socket\/SetReceiveBufferSize.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,2 @@\n-        serverSocket = new ServerSocket(0);\n+        serverSocket = new ServerSocket();\n+        serverSocket.bind(new InetSocketAddress(addr, 0));\n","filename":"jdk\/test\/java\/net\/Socket\/SoTimeout.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,3 @@\n-            ServerSocket ss = new ServerSocket(0, 0, null);\n-            Socket socket = new Socket(\"localhost\", ss.getLocalPort());\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            ServerSocket ss = new ServerSocket(0, 0, loopback);\n+            Socket socket = new Socket(loopback, ss.getLocalPort());\n","filename":"jdk\/test\/java\/net\/Socket\/TestAfterClose.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,3 @@\n-                test.listener = new ServerSocket (0);\n+                InetAddress loopback = InetAddress.getLoopbackAddress();\n+                test.listener = new ServerSocket ();\n+                test.listener.bind(new InetSocketAddress(loopback, 0));\n@@ -59,1 +61,1 @@\n-                test.clHost = \"127.0.0.1\";\n+                test.clHost = loopback.getHostAddress();\n","filename":"jdk\/test\/java\/net\/Socket\/UrgentDataTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/lib\/testlibrary\n@@ -32,0 +33,1 @@\n+import jdk.testlibrary.net.URIBuilder;\n@@ -74,4 +76,6 @@\n-             String name = \"http:\/\/localhost:\" + ss.getLocalPort() +\n-                           \"\/no-such-name\";\n-             java.net.URL url = null;\n-             url = new java.net.URL(name);\n+             java.net.URL url = URIBuilder.newBuilder()\n+                 .scheme(\"http\")\n+                 .host(ss.getInetAddress())\n+                 .port(ss.getLocalPort())\n+                 .path(\"\/no-such-name\")\n+                 .toURL();\n","filename":"jdk\/test\/java\/net\/URL\/GetContent.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,2 @@\n-        server = new TestHttpServer(new B5052093(), 1, 10, 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        server = new TestHttpServer(new B5052093(), 1, 10, loopback, 0);\n@@ -68,1 +69,1 @@\n-            URL url = new URL(\"http:\/\/localhost:\"+server.getLocalPort()+\"\/foo\");\n+            URL url = new URL(\"http:\/\/\" + server.getAuthority() + \"\/foo\");\n","filename":"jdk\/test\/java\/net\/URLConnection\/B5052093.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,0 +64,6 @@\n+    public URIBuilder host(InetAddress address) {\n+        String hostaddr = address.isAnyLocalAddress()\n+               ? \"localhost\" : address.getHostAddress();\n+        return host(hostaddr);\n+    }\n+\n","filename":"jdk\/test\/lib\/testlibrary\/jdk\/testlibrary\/net\/URIBuilder.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.net.InetAddress;\n@@ -55,1 +56,2 @@\n-            client.connect(new InetSocketAddress(\"localhost\", port));\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            client.connect(new InetSocketAddress(loopback, port));\n@@ -69,1 +71,3 @@\n-            serverSocket = new ServerSocket(0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            serverSocket = new ServerSocket();\n+            serverSocket.bind(new InetSocketAddress(loopback, 0));\n","filename":"jdk\/test\/sun\/net\/ftp\/TestFtpClientNameListWithNull.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,3 @@\n-            server = new ServerSocket(0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            server = new ServerSocket();\n+            server.bind(new InetSocketAddress(loopback, 0));\n@@ -186,1 +188,2 @@\n-            Proxy ftpProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"localhost\", port));\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            Proxy ftpProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(loopback, port));\n","filename":"jdk\/test\/sun\/net\/www\/http\/HttpClient\/ProxyTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,0 +83,7 @@\n+        public String getAuthority() {\n+            InetAddress address = server.getAddress().getAddress();\n+            String hostaddr = address.isAnyLocalAddress() ? \"localhost\" : address.getHostAddress();\n+            hostaddr =  (hostaddr.indexOf(':') >= 0) ? (\"[\" + hostaddr + \"]\") : hostaddr;\n+            return hostaddr + \":\" + getPort();\n+        }\n+\n","filename":"jdk\/test\/sun\/net\/www\/http\/HttpURLConnection\/PostOnDelete.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/lib\/testlibrary\n@@ -33,0 +34,1 @@\n+import jdk.testlibrary.net.URIBuilder;\n@@ -81,1 +83,2 @@\n-            ServerSocket serversocket = new ServerSocket (0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            ServerSocket serversocket = new ServerSocket (0, 50, loopback);\n@@ -85,1 +88,5 @@\n-            URL url = new URL (\"http:\/\/localhost:\"+port);\n+            URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(port)\n+                .toURL();\n","filename":"jdk\/test\/sun\/net\/www\/http\/KeepAliveStream\/KeepAliveStreamClose.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -71,0 +71,16 @@\n+    \/**\n+     * Create a <code>TestHttpServer<code> instance with the specified callback object\n+     * for handling requests. One thread is created to handle requests,\n+     * and up to ten TCP connections will be handled simultaneously.\n+     * @param cb the callback object which is invoked to handle each\n+     *  incoming request\n+     * @param address the address to bind the server to. <code>Null<\/code>\n+     *  means bind to the wildcard address.\n+     * @param port the port number to bind the server to. <code>Zero<\/code>\n+     *  means choose any free port.\n+     *\/\n+\n+    public TestHttpServer (HttpCallback cb, InetAddress address, int port) throws IOException {\n+        this (cb, 1, 10, address, 0);\n+    }\n+\n@@ -105,0 +121,24 @@\n+            throws IOException {\n+        this(cb, threads, cperthread, null, port);\n+    }\n+\n+    \/**\n+     * Create a <code>TestHttpServer<code> instance with the specified number\n+     * of threads and maximum number of connections per thread and running on\n+     * the specified port. The specified number of threads are created to\n+     * handle incoming requests, and each thread is allowed\n+     * to handle a number of simultaneous TCP connections.\n+     * @param cb the callback object which is invoked to handle\n+     *  each incoming request\n+     * @param threads the number of threads to create to handle\n+     *  requests in parallel\n+     * @param cperthread the number of simultaneous TCP connections\n+     *  to handle per thread\n+     * @param address the address to bind the server to. <code>Null<\/code>\n+     *  means bind to the wildcard address.\n+     * @param port the port number to bind the server to. <code>Zero<\/code>\n+     *  means choose any free port.\n+     *\/\n+\n+    public TestHttpServer (HttpCallback cb, int threads, int cperthread,\n+                           InetAddress address, int port)\n@@ -107,1 +147,1 @@\n-        InetSocketAddress addr = new InetSocketAddress (port);\n+        InetSocketAddress addr = new InetSocketAddress (address, port);\n@@ -139,0 +179,8 @@\n+    public String getAuthority() {\n+        InetAddress address = schan.socket().getInetAddress();\n+        String hostaddr = address.getHostAddress();\n+        if (address.isAnyLocalAddress()) hostaddr = \"localhost\";\n+        if (hostaddr.indexOf(':') > -1) hostaddr = \"[\" + hostaddr + \"]\";\n+        return hostaddr + \":\" + getLocalPort();\n+    }\n+\n","filename":"jdk\/test\/sun\/net\/www\/httptest\/TestHttpServer.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,2 @@\n-        server = HttpServer.create(new InetSocketAddress(0), 10);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n","filename":"jdk\/test\/sun\/net\/www\/protocol\/http\/B8012625.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+        ServerSocket serversocket = null;\n@@ -84,1 +85,3 @@\n-            ServerSocket serversocket = new ServerSocket (0);\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            serversocket = new ServerSocket();\n+            serversocket.bind(new InetSocketAddress(loopback, 0));\n@@ -110,0 +113,4 @@\n+        } finally {\n+            if (serversocket != null) {\n+                try {serversocket.close();} catch (IOException io) {}\n+            }\n","filename":"jdk\/test\/sun\/net\/www\/protocol\/http\/Finalizer.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,1 @@\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -100,1 +101,1 @@\n-            server = new TestHttpServer (new ResponseCacheStream());\n+            server = new TestHttpServer (new ResponseCacheStream(), loopback, 0);\n","filename":"jdk\/test\/sun\/net\/www\/protocol\/http\/ResponseCacheStream.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/lib\/testlibrary\n@@ -38,0 +39,1 @@\n+import jdk.testlibrary.net.URIBuilder;\n@@ -81,0 +83,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -84,1 +87,2 @@\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+            (SSLServerSocket) sslssf.createServerSocket();\n+        sslServerSocket.bind(new InetSocketAddress(loopback, serverPort));\n@@ -154,2 +158,5 @@\n-        String uri = \"https:\/\/localhost:\" + +serverPort ;\n-        URL url = new URL(uri);\n+        URL url = URIBuilder.newBuilder()\n+                  .scheme(\"https\")\n+                  .loopback()\n+                  .port(serverPort)\n+                  .toURL();\n","filename":"jdk\/test\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/CookieHandlerTest.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}