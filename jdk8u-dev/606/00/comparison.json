{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.HashSet;\n@@ -31,0 +32,2 @@\n+import java.util.Random;\n+import java.util.Set;\n@@ -32,0 +35,1 @@\n+import java.util.concurrent.ExecutionException;\n@@ -40,0 +44,4 @@\n+import sun.net.PortConfig;\n+\n+import jdk.test.lib.RandomFactory;\n+\n@@ -43,1 +51,10 @@\n- * @summary ctx provider tests for ldap\n+ * @key randomness intermittent\n+ * @summary ctx provider tests for ldap.\n+ *  Two test cases need to establish connection to the\n+ *  unreachable port on localhost. Each tries 5 connection\n+ *  attempts with a random port expecting for connection to fail.\n+ *  In rare cases it could establish connections due to services\n+ *  running on these ports, therefore it can fail intermittently.\n+ * @modules java.naming\/com.sun.jndi.ldap java.base\/sun.net\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n@@ -54,10 +71,0 @@\n-\n-\n-    \/* run main\/othervm LdapDnsProviderTest\n-\n-     * run main\/othervm LdapDnsProviderTest nosm\n-     * run main\/othervm LdapDnsProviderTest smnodns\n-     * run main\/othervm LdapDnsProviderTest smdns\n-     * run main\/othervm LdapDnsProviderTest nosmbaddns\n-     *\/\n-\n@@ -107,0 +114,7 @@\n+        \/\/ Set JNDI LDAP connect timeout property. It helps to prevent\n+        \/\/ initial bind operation from blocking in case of a local process\n+        \/\/ listening on the port specified in the URL. With the property set,\n+        \/\/ the bind operation will fail with timeout exception, and then it\n+        \/\/ could be retried with another port number.\n+        env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+\n@@ -115,1 +129,0 @@\n-            e.printStackTrace();\n@@ -117,0 +130,6 @@\n+            System.err.println((passed ? \"Expected\" : \"Unexpected\") +\n+                    \" NamingException observed: \" + e.toString());\n+            \/\/ Print stack trace only for unexpected exceptions\n+            if (!passed) {\n+                e.printStackTrace();\n+            }\n@@ -196,2 +215,2 @@\n-            runTest(\"ldap:\/\/localhost:111\/dc=example,dc=com\", \"localhost:111\");\n-            runTest(\"ldaps:\/\/localhost:111\/dc=example,dc=com\", \"localhost:111\");\n+            runLocalHostTestWithRandomPort(\"ldap\", \"\/dc=example,dc=com\", 5);\n+            runLocalHostTestWithRandomPort(\"ldaps\", \"\/dc=example,dc=com\", 5);\n@@ -204,0 +223,64 @@\n+    \/\/ Pseudorandom number generator\n+    private static final Random RND = RandomFactory.getRandom();\n+    \/\/ Port numbers already seen to be generated by pseudorandom generator\n+    private static final Set<Integer> SEEN_PORTS = new HashSet<>();\n+\n+    \/\/ Get random, previously unseen port number from [1111, PortConfig.getUpper()) range\n+    private static int generateUnseenPort() {\n+        int port;\n+        do {\n+            port = 1111 + RND.nextInt(PortConfig.getUpper() - 1111);\n+            \/\/ Seen ports will never contain more than maxAttempts*2 ports\n+        } while (SEEN_PORTS.contains(port));\n+        SEEN_PORTS.add(port);\n+        return port;\n+    }\n+\n+    \/\/ Run test with ldap connection to localhost and random port. The test is expected to fail\n+    \/\/ with CommunicationException that is caused by connection refuse exception.\n+    \/\/ But in case if there is a service running on the same port the connection\n+    \/\/ will be established and then closed or timed-out. Both cases will generate exception\n+    \/\/ messages which differ from the expected one.\n+    \/\/ For such cases the test will be repeated with another random port. That will be done\n+    \/\/ maxAttempts times. If the expected exception won't be observed - test will be treated\n+    \/\/ as failed.\n+    private static void runLocalHostTestWithRandomPort(String scheme, String path, int maxAttempts) {\n+        for (int attempt = 0; attempt <= maxAttempts; attempt++) {\n+            boolean attemptSuccessful = true;\n+            int port = generateUnseenPort();\n+\n+            \/\/ Construct URL for the current attempt\n+            String url = scheme + \":\/\/localhost\" + \":\" + port + path;\n+\n+            \/\/ Construct text expected to be present in Exception message\n+            String expected = \"localhost:\" + port;\n+\n+            System.err.printf(\"Iteration %d: Testing: %s, %s%n\", attempt, url, expected);\n+\n+            FutureTask<Boolean> future = new FutureTask<>(\n+                    new ProviderTest(url, expected));\n+            new Thread(future).start();\n+            while (!future.isDone()) {\n+                try {\n+                    if (!future.get()) {\n+                        if (attempt == maxAttempts) {\n+                            throw new RuntimeException(\"Test failed, ProviderTest\" +\n+                                    \" returned false \" + maxAttempts + \" times\");\n+                        } else {\n+                            System.err.printf(\"Iteration %d failed:\" +\n+                                    \" ProviderTest returned false%n\", attempt);\n+                            attemptSuccessful = false;\n+                        }\n+                    }\n+                } catch (InterruptedException | ExecutionException e) {\n+                    System.err.println(\"Iteration %d failed to execute provider test: \" + e.getMessage());\n+                    attemptSuccessful = false;\n+                }\n+            }\n+            if (attemptSuccessful) {\n+                System.err.println(\"Test passed. It took \" + (attempt + 1) + \" iterations to complete\");\n+                break;\n+            }\n+        }\n+    }\n+\n@@ -210,1 +293,1 @@\n-        System.err.println(\"Testing: \" + url + \", \" + expected);\n+        System.err.printf(\"Testing: url='%s', expected content='%s'%n\", url, expected);\n","filename":"jdk\/test\/com\/sun\/jndi\/ldap\/LdapDnsProviderTest.java","additions":99,"deletions":16,"binary":false,"changes":115,"status":"modified"}]}