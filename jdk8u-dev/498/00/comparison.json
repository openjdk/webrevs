{"files":[{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *\n- * The \"debuggee\" used by the unit tests for the ProcessAttachingConnector.\n- * This debuggee binds to a random TCP port and waits for a client to connect.\n- *\/\n-import java.net.Socket;\n-import java.net.ServerSocket;\n-import java.nio.file.CopyOption;\n-import java.nio.file.Files;\n-import java.nio.file.StandardCopyOption;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-\n-public class ProcessAttachDebuggee {\n-    public static void main(String args[]) throws Exception {\n-        \/\/ bind to a random port\n-        ServerSocket ss = new ServerSocket(0);\n-        int port = ss.getLocalPort();\n-\n-        \/\/ Write the port number to the given file\n-        File partial = new File(args[0] + \".partial\");\n-        File portFile = new File(args[0]);\n-        try (FileOutputStream fos = new FileOutputStream(partial)) {\n-            fos.write( Integer.toString(port).getBytes(\"UTF-8\") );\n-        }\n-        Files.move(partial.toPath(), portFile.toPath(), StandardCopyOption.ATOMIC_MOVE);\n-\n-        System.out.println(\"Debuggee bound to port: \" + port);\n-        System.out.flush();\n-\n-        \/\/ wait for test harness to connect\n-        Socket s = ss.accept();\n-        s.close();\n-        ss.close();\n-\n-        System.out.println(\"Debuggee shutdown.\");\n-    }\n-}\n","filename":"jdk\/test\/com\/sun\/jdi\/ProcessAttachDebuggee.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *\n- * Unit test for ProcessAttachingConnector - this \"debugger\" attaches to a debuggee\n- * given it's pid. Usage:\n- *\n- *      java ProcessAttachDebugger <pid>\n- *\/\n-\n-import com.sun.jdi.Bootstrap;\n-import com.sun.jdi.VirtualMachine;\n-import com.sun.jdi.ThreadReference;\n-import com.sun.jdi.connect.Connector;\n-import com.sun.jdi.connect.AttachingConnector;\n-\n-import java.util.List;\n-import java.util.Map;\n-\n-public class ProcessAttachDebugger {\n-\n-    public static void main(String main_args[]) throws Exception {\n-        String pid = main_args[0];\n-\n-        \/\/ find ProcessAttachingConnector\n-\n-        List<AttachingConnector> l =\n-            Bootstrap.virtualMachineManager().attachingConnectors();\n-        AttachingConnector ac = null;\n-        for (AttachingConnector c: l) {\n-            if (c.name().equals(\"com.sun.jdi.ProcessAttach\")) {\n-                ac = c;\n-                break;\n-            }\n-        }\n-        if (ac == null) {\n-            throw new RuntimeException(\"Unable to locate ProcessAttachingConnector\");\n-        }\n-\n-        Map<String,Connector.Argument> args = ac.defaultArguments();\n-        Connector.StringArgument arg = (Connector.StringArgument)args.get(\"pid\");\n-        arg.setValue(pid);\n-\n-        System.out.println(\"Debugger is attaching to: \" + pid + \" ...\");\n-\n-        VirtualMachine vm = ac.attach(args);\n-\n-        System.out.println(\"Attached! Now listing threads ...\");\n-\n-        \/\/ list all threads\n-\n-        for (ThreadReference thr: vm.allThreads()) {\n-            System.out.println(thr);\n-        }\n-\n-        System.out.println(\"Debugger done.\");\n-    }\n-\n-}\n","filename":"jdk\/test\/com\/sun\/jdi\/ProcessAttachDebugger.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import jdk.testlibrary.JDKToolFinder;\n+import jdk.testlibrary.OutputAnalyzer;\n+import jdk.testlibrary.ProcessTools;\n+\n+import com.sun.jdi.Bootstrap;\n+import com.sun.jdi.ThreadReference;\n+import com.sun.jdi.VirtualMachine;\n+import com.sun.jdi.connect.AttachingConnector;\n+import com.sun.jdi.connect.Connector;\n+import com.sun.jdi.connect.IllegalConnectorArgumentsException;\n+\n+\/**\n+ * @test\n+ * @bug 4527279\n+ * @summary Unit test for ProcessAttachingConnector\n+ *\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.* ProcessAttachTest\n+ * @run driver ProcessAttachTest\n+ *\/\n+\n+class ProcessAttachTestTarg {\n+    public static void main(String args[]) throws Exception {\n+        \/\/ Write something that can be read by the driver\n+        System.out.println(\"Debuggee started\");\n+        System.out.flush();\n+        for (;;) {\n+            Thread.sleep(100);\n+        }\n+    }\n+}\n+\n+public class ProcessAttachTest {\n+\n+    public static final String TESTCLASSES = System.getProperty(\"test.classes\");\n+\n+    public static void main(String[] args) throws Throwable {\n+\n+        System.out.println(\"Test 1: Debuggee start with suspend=n\");\n+        runTest(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n\");\n+\n+        System.out.println(\"Test 2: Debuggee start with suspend=y\");\n+        runTest(\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y\");\n+\n+    }\n+\n+    private static void runTest(String jdwpArg) throws Throwable {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                jdwpArg,\n+                \"-classpath\", TESTCLASSES,\n+                \"ProcessAttachTestTarg\");\n+        Process p = null;\n+        try {\n+            \/\/ Get pid\n+            String jps = JDKToolFinder.getJDKTool(\"jps\");\n+            OutputAnalyzer output = ProcessTools.executeProcess(jps);\n+            Pattern ptn1 = Pattern.compile(\"(\\\\d+) ProcessAttachTestTarg\");\n+            Pattern ptn2 = Pattern.compile(\"(\\\\d+) -- main class information unavailable\"); \/\/ The target process is displayed as such in Test 2.\n+            Matcher m1 = ptn1.matcher(output.getOutput());\n+            Matcher m2 = ptn2.matcher(output.getOutput());\n+            List<String> pids1 = new ArrayList<>();\n+            while (m1.find()) {\n+                pids1.add(m1.group(1));\n+            }\n+            while (m2.find()) {\n+                pids1.add(m2.group(1));\n+            }\n+\n+            p = pb.start();\n+\n+            \/\/ Wait for the process to start\n+            InputStream is = p.getInputStream();\n+            is.read();\n+\n+            \/\/ Get pid\n+            output = ProcessTools.executeProcess(jps);\n+            m1 = ptn1.matcher(output.getOutput());\n+            m2 = ptn2.matcher(output.getOutput());\n+            List<String> pids2 = new ArrayList<>();\n+            while (m1.find()) {\n+                pids2.add(m1.group(1));\n+            }\n+            while (m2.find()) {\n+                pids2.add(m2.group(1));\n+            }\n+            pids2.removeAll(pids1);\n+            if (pids2.size() != 1) {\n+                throw new RuntimeException(\"Did not find pid\");\n+            }\n+\n+            \/\/ Attach a debugger\n+            tryDebug(Long.parseLong(pids2.get(0)));\n+        } finally {\n+            p.destroyForcibly();\n+        }\n+    }\n+\n+    private static void tryDebug(long pid) throws IOException,\n+            IllegalConnectorArgumentsException {\n+        AttachingConnector ac = Bootstrap.virtualMachineManager().attachingConnectors()\n+                .stream()\n+                .filter(c -> c.name().equals(\"com.sun.jdi.ProcessAttach\"))\n+                .findFirst()\n+                .orElseThrow(() -> new RuntimeException(\"Unable to locate ProcessAttachingConnector\"));\n+\n+        Map<String, Connector.Argument> args = ac.defaultArguments();\n+        Connector.StringArgument arg = (Connector.StringArgument) args\n+                .get(\"pid\");\n+        arg.setValue(\"\" + pid);\n+\n+        System.out.println(\"Debugger is attaching to: \" + pid + \" ...\");\n+        VirtualMachine vm = ac.attach(args);\n+\n+        \/\/ list all threads\n+        System.out.println(\"Attached! Now listing threads ...\");\n+        vm.allThreads().stream().forEach(System.out::println);\n+\n+        System.out.println(\"Debugger done.\");\n+        vm.dispose();\n+    }\n+}\n","filename":"jdk\/test\/com\/sun\/jdi\/ProcessAttachTest.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -1,181 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 4527279\n-# @summary Unit test for ProcessAttachingConnector\n-#\n-# @build ProcessAttachDebugger ProcessAttachDebuggee ShutdownDebuggee\n-# @run shell ProcessAttachTest.sh\n-\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-                                                                                                     \n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-                                                                                                     \n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-                                                                                                     \n-JAVA=\"${TESTJAVA}\/bin\/java\"\n-\n-OS=`uname -s`\n-\n-case \"$OS\" in\n-  Windows*)\n-    PS=\";\"\n-    OS=\"Windows\"\n-    ;;\n-  CYGWIN*)\n-    PS=\";\"\n-    OS=\"CYGWIN\"\n-    ;;\n-  * )\n-    PS=\":\"\n-    ;;\n-esac\n-\n-startDebuggee()\n-{\n-  OUTPUTFILE=${TESTCLASSES}\/Debuggee.out\n-  ${JAVA} \"$@\" > ${OUTPUTFILE} &\n-  startpid=\"$!\"\n-  pid=\"${startpid}\"\n-                                                                                                     \n-  # CYGWIN startpid is not the native windows PID we want, get the WINPID\n-  if [ \"${OS}\" = \"CYGWIN\" ]; then\n-    sleep 2\n-    ps -l -p ${startpid}\n-    pid=`ps -l -p ${startpid} | tail -1 | awk '{print $4;}'`\n-  fi\n-  \n-  # MKS creates an intermediate shell to launch ${JAVA} so\n-  # ${startpid} is not the actual pid. We have put in a small sleep\n-  # to give the intermediate shell process time to launch the\n-  # \"java\" process.\n-  if [ \"$OS\" = \"Windows\" ]; then\n-    sleep 2\n-    pid=`ps -o pid,ppid,comm|grep ${startpid}|grep \"java\"|cut -c1-6`\n-  fi\n-                                                                                                     \n-  echo \"Waiting for Debuggee to initialize...\"\n-  attempts=0\n-  while true; do\n-    sleep 1\n-    out=`tail -1 ${OUTPUTFILE}`\n-    if [ ! -z \"$out\" ]; then\n-      break\n-    fi\n-    attempts=`expr $attempts + 1`\n-    echo \"Waiting $attempts second(s) ...\"\n-  done\n-\n-  echo \"Debuggee is process $pid (startpid=${startpid})\"\n-}\n-\n-stopDebuggee()\n-{\n-  $JAVA -classpath \"${TESTCLASSES}\" ShutdownDebuggee $1\n-  if [ $? != 0 ] ; then\n-    echo \"Error: ShutdownDebuggee failed\"\n-    failures=`expr $failures + 1`\n-    kill -9 ${startpid}\n-  fi\n-}\n-\n-failures=0\n-\n-#########################################################\n-echo \"Test 1: Debuggee start with suspend=n\"\n-\n-PORTFILE=\"${TESTCLASSES}\"\/shutdown1.port\n-\n-DEBUGGEEFLAGS=\n-if [ -r $TESTCLASSES\/@debuggeeVMOptions ] ; then\n-   DEBUGGEEFLAGS=`cat $TESTCLASSES\/@debuggeeVMOptions`\n-elif [ -r $TESTCLASSES\/..\/@debuggeeVMOptions ] ; then\n-   DEBUGGEEFLAGS=`cat $TESTCLASSES\/..\/@debuggeeVMOptions`\n-fi\n-\n-startDebuggee \\\n-  $DEBUGGEEFLAGS \\\n-  -agentlib:jdwp=transport=dt_socket,server=y,suspend=n \\\n-  -classpath \"${TESTCLASSES}\" ProcessAttachDebuggee \"${PORTFILE}\"\n-\n-$JAVA -classpath \"${TESTCLASSES}${PS}${TESTJAVA}\/lib\/tools.jar\" \\\n-  ProcessAttachDebugger $pid 2>&1\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-\n-# Note that when the debugger disconnects, the debuggee picks another\n-# port and outputs another 'Listening for transport ... ' msg.\n-\n-stopDebuggee \"${PORTFILE}\"\n-\n-#########################################################\n-echo \"\\nTest 2: Debuggee start with suspend=y\"\n-\n-PORTFILE=\"${TESTCLASSES}\"\/shutdown2.port\n-startDebuggee \\\n-  $DEBUGGEEFLAGS \\\n-  -agentlib:jdwp=transport=dt_socket,server=y,suspend=y \\\n-  -classpath \"${TESTCLASSES}\" ProcessAttachDebuggee \"${PORTFILE}\"\n-\n-$JAVA -classpath \"${TESTCLASSES}${PS}${TESTJAVA}\/lib\/tools.jar\" \\\n-  ProcessAttachDebugger $pid 2>&1\n-\n-# The debuggee is suspended and doesn't run until the debugger\n-# disconnects.  We have to give it time to write the port number\n-# to ${PORTFILE}\n-\n-echo \"Waiting for port file to be written...\"\n-attempts=0\n-while true; do\n-  sleep 1\n-  attempts=`expr $attempts + 1`\n-  if [ -f  ${PORTFILE} ]; then\n-    break\n-  fi\n-  echo \"Waiting $attempts second(s) ...\"\n-done\n-\n-if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n-stopDebuggee \"${PORTFILE}\"\n-\n-### \n-if [ $failures = 0 ];\n-  then echo \"All tests passed.\";\n-  else echo \"$failures test(s) failed:\"; cat ${OUTPUTFILE};\n-fi\n-exit $failures\n","filename":"jdk\/test\/com\/sun\/jdi\/ProcessAttachTest.sh","additions":0,"deletions":181,"binary":false,"changes":181,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *\n- * Used by the unit tests for the ProcessAttachingConnector. This class is\n- * used to shutdown the debuggee by connecting to its shutdown port.\n- *\/\n-import java.net.Socket;\n-import java.net.InetSocketAddress;\n-import java.io.File;\n-import java.io.FileInputStream;\n-\n-public class ShutdownDebuggee {\n-    public static void main(String args[]) throws Exception {\n-\n-        \/\/ read the (TCP) port number from the given file\n-\n-        File f = new File(args[0]);\n-        FileInputStream fis = new FileInputStream(f);\n-        byte b[] = new byte[8];\n-        int n = fis.read(b);\n-        if (n < 1) {\n-            throw new RuntimeException(\"Empty file\");\n-        }\n-        fis.close();\n-\n-        String str = new String(b, 0, n, \"UTF-8\");\n-        System.out.println(\"Port number of debuggee is: \" + str);\n-        int port = Integer.parseInt(str);\n-\n-        \/\/ Now connect to the port (which will shutdown debuggee)\n-\n-        System.out.println(\"Connecting to port \" + port +\n-            \" to shutdown Debuggee ...\");\n-\n-        Socket s = new Socket();\n-        s.connect( new InetSocketAddress(port) );\n-        s.close();\n-    }\n-}\n","filename":"jdk\/test\/com\/sun\/jdi\/ShutdownDebuggee.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"}]}