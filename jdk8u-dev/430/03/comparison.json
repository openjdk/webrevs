{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -27,0 +28,1 @@\n+import java.net.BindException;\n@@ -37,0 +39,1 @@\n+import java.util.Random;\n@@ -42,0 +45,1 @@\n+import java.util.stream.Collectors;\n@@ -49,0 +53,3 @@\n+import sun.management.Agent;\n+import sun.management.AgentConfigurationError;\n+\n@@ -56,2 +63,2 @@\n- * @summary Makes sure that enabling\/disabling the management agent through\n- *          JCMD achieves the desired results\n+ * @summary Makes sure that enabling\/disabling the management agent through JCMD\n+ *          achieves the desired results\n@@ -61,0 +68,1 @@\n+\n@@ -66,2 +74,1 @@\n-     * Dynamically allocates two distinct ports using {@linkplain java.net.ServerSocket}\n-     * It keeps each of those ports blocked until it is first accessed by its getter\n+     * Dynamically allocates distinct ports from the ephemeral range 49152-65535\n@@ -70,23 +77,0 @@\n-        private final int port1, port2;\n-        private final ServerSocket ss1, ss2;\n-        PortAllocator() {\n-            try {\n-                ss1 = new ServerSocket(0);\n-                ss2 = new ServerSocket(0);\n-                port1 = ss1.getLocalPort();\n-                port2 = ss2.getLocalPort();\n-            } catch (IOException e) {\n-                throw new Error(\"Error while obtaining free ports\", e);\n-            }\n-        }\n-\n-        public int getPort1() {\n-            if (!ss1.isClosed()) {\n-                try {\n-                    ss1.close();\n-                } catch (IOException e) {\n-                    \/\/ just ignore\n-                }\n-            }\n-            return port1;\n-        }\n@@ -94,6 +78,17 @@\n-        public int getPort2() {\n-            if (!ss2.isClosed()) {\n-                try {\n-                    ss2.close();\n-                } catch (IOException e) {\n-                    \/\/ just ignore\n+        private final static int LOWER_BOUND = 49152;\n+        private final static int UPPER_BOUND = 65535;\n+\n+        private final static Random RND = new Random(System.currentTimeMillis());\n+\n+        private static int[] allocatePorts(final int numPorts) {\n+            int[] ports = new int[numPorts];\n+            for (int i = 0; i < numPorts; i++) {\n+                int port = -1;\n+                while (port == -1) {\n+                    port = RND.nextInt(UPPER_BOUND - LOWER_BOUND + 1) + LOWER_BOUND;\n+                    for (int j = 0; j < i; j++) {\n+                        if (ports[j] == port) {\n+                            port = -1;\n+                            break;\n+                        }\n+                    }\n@@ -101,0 +96,2 @@\n+                System.err.println(\"*** port = \" + port);\n+                ports[i] = port;\n@@ -102,1 +99,1 @@\n-            return port2;\n+            return ports;\n@@ -106,1 +103,1 @@\n-    private static void dbg_print(String msg){\n+    private static void dbg_print(String msg) {\n@@ -108,1 +105,1 @@\n-            System.out.println(\"DBG: \" +msg);\n+            System.out.println(\"DBG: \" + msg);\n@@ -113,3 +110,3 @@\n-                                  ObjectName pattern,\n-                                  QueryExp query)\n-    throws Exception {\n+            ObjectName pattern,\n+            QueryExp query)\n+            throws Exception {\n@@ -135,1 +132,0 @@\n-\n@@ -137,1 +133,1 @@\n-    throws Exception {\n+            throws Exception {\n@@ -212,3 +208,3 @@\n-                \"service:jmx:rmi:\/\/localhost:%d\/jndi\/rmi:\/\/localhost:%d\/jmxrmi\",\n-                rmiPort,\n-                port) :\n+                 \"service:jmx:rmi:\/\/localhost:%d\/jndi\/rmi:\/\/localhost:%d\/jmxrmi\",\n+                        rmiPort,\n+                        port) :\n@@ -216,2 +212,2 @@\n-                \"service:jmx:rmi:\/\/\/jndi\/rmi:\/\/localhost:%d\/jmxrmi\",\n-                port);\n+                 \"service:jmx:rmi:\/\/\/jndi\/rmi:\/\/localhost:%d\/jmxrmi\",\n+                        port);\n@@ -295,1 +291,15 @@\n-                    m.invoke(null);\n+                    boolean retry = false;\n+                    do {\n+                        try {\n+                            m.invoke(null);\n+                            retry = false;\n+                        } catch (InvocationTargetException e) {\n+                            if (e.getCause() instanceof BindException ||\n+                                e.getCause() instanceof java.rmi.ConnectException) {\n+                                System.out.println(\"Failed to allocate ports. Retrying ...\");\n+                                retry = true;\n+                            } else {\n+                                throw e;\n+                            }\n+                        }\n+                    } while (retry);\n@@ -327,0 +337,1 @@\n+                    AtomicBoolean error = new AtomicBoolean(false);\n@@ -328,10 +339,13 @@\n-                        \"JMXStartStopDoSomething\",\n-                        pb,\n-                        (line) -> {\n-                            if (line.toLowerCase().startsWith(\"pid:\")) {\n-                                pid = Integer.parseInt(line.split(\"\\\\:\")[1]);\n-                            }\n-                            return line.equals(\"main enter\");\n-                        },\n-                        5,\n-                        TimeUnit.SECONDS\n+                            \"JMXStartStopDoSomething{\" + name + \"}\",\n+                            pb,\n+                            (line) -> {\n+                                if (line.toLowerCase().startsWith(\"pid:\")) {\n+                                    pid = Integer.parseInt(line.split(\"\\\\:\")[1]);\n+                                }\n+                                boolean ok = line.equals(\"main enter\");\n+                                error.set(line.contains(\"BindException\"));\n+\n+                                return ok || error.get();\n+                            },\n+                            5,\n+                            TimeUnit.SECONDS\n@@ -339,0 +353,4 @@\n+                    if (error.get()) {\n+                        throw new BindException(\"Starting process failed due to \" +\n+                                                \"the requested port not being available\");\n+                    }\n@@ -352,1 +370,1 @@\n-            throws IOException, InterruptedException {\n+                throws IOException, InterruptedException {\n@@ -379,1 +397,1 @@\n-    throws Exception {\n+            throws Exception {\n@@ -381,2 +399,2 @@\n-            \"-cp\",\n-            System.getProperty(\"test.class.path\")\n+           \"-cp\",\n+                System.getProperty(\"test.class.path\")\n@@ -388,1 +406,1 @@\n-            pbArgs.toArray(new String[pbArgs.size()])\n+                pbArgs.toArray(new String[pbArgs.size()])\n@@ -404,1 +422,1 @@\n-            jcmd(null, (Consumer<String>)null);\n+            jcmd(null, c->{});\n@@ -413,1 +431,1 @@\n-     * @param c {@linkplain Consumer} instance; may be null\n+     * @param c {@linkplain Consumer} instance\n@@ -425,1 +443,1 @@\n-     * @param c {@linkplain Consumer} instance; may be null\n+     * @param c {@linkplain Consumer} instance\n@@ -435,1 +453,1 @@\n-        for(String cmd : command) {\n+        for (String cmd : command) {\n@@ -438,0 +456,1 @@\n+        AtomicBoolean portUnavailable = new AtomicBoolean(false);\n@@ -441,1 +460,8 @@\n-            c\n+            line -> {\n+                if (line.contains(\"BindException\") ||\n+                    line.contains(Agent.getText(AgentConfigurationError.CONNECTOR_SERVER_IO_ERROR))) {\n+                    portUnavailable.set(true);\n+                } else {\n+                    c.accept(line);\n+                }\n+            }\n@@ -446,0 +472,7 @@\n+        if (portUnavailable.get()) {\n+            String cmd = Arrays.asList(l.getCommand()).stream()\n+                    .collect(\n+                            Collectors.joining(\" \", \"\", \": Unable to bind address\")\n+                    );\n+            throw new BindException(cmd);\n+        }\n@@ -457,1 +490,1 @@\n-        PortAllocator pa = new PortAllocator();\n+        int ports[] = PortAllocator.allocatePorts(2);\n@@ -460,4 +493,5 @@\n-            \"test_01\",\n-            \"-Dcom.sun.management.jmxremote.port=\" + pa.getPort1(),\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\",\n-            \"-Dcom.sun.management.jmxremote.ssl=false\");\n+                \"test_01\",\n+                \"-Dcom.sun.management.jmxremote.port=\" + ports[0],\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\",\n+                \"-Dcom.sun.management.jmxremote.ssl=false\");\n+\n@@ -466,1 +500,1 @@\n-            testConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -469,1 +503,1 @@\n-            testNoConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -471,2 +505,2 @@\n-            jcmd(CMD_START, \"jmxremote.port=\" + pa.getPort2());\n-            testConnect(pa.getPort2());\n+            jcmd(CMD_START, \"jmxremote.port=\" + ports[1]);\n+            testConnect(ports[1]);\n@@ -484,0 +518,1 @@\n+        int[] ports = PortAllocator.allocatePorts(1);\n@@ -485,1 +520,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -488,3 +522,3 @@\n-                \"jmxremote.port=\" + pa.getPort1(),\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.ssl=false\");\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n@@ -492,1 +526,1 @@\n-            testConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -505,0 +539,1 @@\n+        int[] ports = PortAllocator.allocatePorts(2);\n@@ -506,1 +541,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -509,3 +543,3 @@\n-                \"jmxremote.port=\" + pa.getPort1(),\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.ssl=false\");\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n@@ -515,3 +549,3 @@\n-                \"jmxremote.port=\" + pa.getPort2(),\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.ssl=false\");\n+                    \"jmxremote.port=\" + ports[1],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n@@ -520,1 +554,1 @@\n-            testConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -523,1 +557,1 @@\n-            testNoConnect(pa.getPort2());\n+            testNoConnect(ports[1]);\n@@ -535,0 +569,1 @@\n+        int[] ports = PortAllocator.allocatePorts(2);\n@@ -536,1 +571,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -539,4 +573,4 @@\n-                 \"jmxremote.port=\" + pa.getPort1(),\n-                 \"jmxremote.rmi.port=\" + pa.getPort2(),\n-                 \"jmxremote.authenticate=false\",\n-                 \"jmxremote.ssl=false\");\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.rmi.port=\" + ports[1],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n@@ -544,1 +578,1 @@\n-            testConnect(pa.getPort1(), pa.getPort2());\n+            testConnect(ports[0], ports[1]);\n@@ -555,1 +589,1 @@\n-\n+        int[] ports = PortAllocator.allocatePorts(1);\n@@ -557,1 +591,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -561,1 +594,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -571,4 +604,1 @@\n-        \/\/ attempt to start it again\n-        \/\/ 1) with the same port\n-        \/\/ 2) with other port\n-        \/\/ 3) attempt to stop it twice\n+        \/\/ attempt to start it again with the same port\n@@ -579,0 +609,1 @@\n+        int[] ports = PortAllocator.allocatePorts(2);\n@@ -580,1 +611,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -583,3 +613,3 @@\n-                 \"jmxremote.port=\" + pa.getPort1(),\n-                 \"jmxremote.authenticate=false\",\n-                 \"jmxremote.ssl=false\");\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n@@ -587,1 +617,1 @@\n-            testConnect(pa.getPort1(), pa.getPort2());\n+            testConnect(ports[0], ports[1]);\n@@ -589,1 +619,1 @@\n-            final boolean[] checks = new boolean[3];\n+            final AtomicBoolean checks = new AtomicBoolean(false);\n@@ -591,9 +621,39 @@\n-                line -> {\n-                    if (line.contains(\"java.lang.RuntimeException: Invalid agent state\")) {\n-                        checks[0] = true;\n-                    }\n-                },\n-                CMD_START,\n-                 \"jmxremote.port=\" + pa.getPort1(),\n-                 \"jmxremote.authenticate=false\",\n-                 \"jmxremote.ssl=false\");\n+\n+                    line -> {\n+                        if (line.contains(\"java.lang.RuntimeException: Invalid agent state\")) {\n+                            checks.set(true);\n+                        }\n+                    },\n+                    CMD_START,\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n+\n+            if (!checks.get()) {\n+                throw new Exception(\"Starting agent on port \" + ports[0] + \" should \"\n+                        + \"report an invalid agent state\");\n+            }\n+        } finally {\n+            s.stop();\n+        }\n+    }\n+\n+    static void test_07() throws Exception {\n+        \/\/ Run an app without JMX enabled\n+        \/\/ start JMX by jcmd on one port, specify rmi port explicitly\n+        \/\/ attempt to start it again with other port\n+        \/\/ Check for valid messages in the output\n+\n+        System.out.println(\"**** Test seven ****\");\n+\n+        int[] ports = PortAllocator.allocatePorts(2);\n+        Something s = doSomething(\"test_07\");\n+        try {\n+            jcmd(CMD_START,\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n+\n+            testConnect(ports[0], ports[1]);\n+\n+            final AtomicBoolean checks = new AtomicBoolean(false);\n@@ -602,9 +662,36 @@\n-                line -> {\n-                    if (line.contains(\"java.lang.RuntimeException: Invalid agent state\")) {\n-                        checks[1] = true;\n-                    }\n-                },\n-                CMD_START,\n-                \"jmxremote.port=\" + pa.getPort2(),\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.ssl=false\");\n+                    line -> {\n+                        if (line.contains(\"java.lang.RuntimeException: Invalid agent state\")) {\n+                            checks.set(true);\n+                        }\n+                    },\n+                    CMD_START,\n+                    \"jmxremote.port=\" + ports[1],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n+\n+            if (!checks.get()) {\n+                throw new Exception(\"Starting agent on poprt \" + ports[1] + \" should \"\n+                        + \"report an invalid agent state\");\n+            }\n+        } finally {\n+            s.stop();\n+        }\n+    }\n+\n+    static void test_08() throws Exception {\n+        \/\/ Run an app without JMX enabled\n+        \/\/ start JMX by jcmd on one port, specify rmi port explicitly\n+        \/\/ attempt to stop it twice\n+        \/\/ Check for valid messages in the output\n+\n+        System.out.println(\"**** Test eight ****\");\n+\n+        int[] ports = PortAllocator.allocatePorts(2);\n+        Something s = doSomething(\"test_08\");\n+        try {\n+            jcmd(CMD_START,\n+                    \"jmxremote.port=\" + ports[0],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\");\n+\n+            testConnect(ports[0], ports[1]);\n@@ -614,0 +701,4 @@\n+        } finally {\n+            s.stop();\n+        }\n+    }\n@@ -615,1 +706,4 @@\n-            ServerSocket ss = new ServerSocket(0);\n+    static void test_09() throws Exception {\n+        \/\/ Run an app without JMX enabled\n+        \/\/ attempt to start JMX using a non-available port\n+        \/\/ Check for valid messages in the output\n@@ -617,6 +711,24 @@\n-            jcmd(\n-                line -> {\n-                    if (line.contains(\"Port already in use: \" + ss.getLocalPort())) {\n-                        checks[2] = true;\n-                    }\n-                },\n+        System.out.println(\"**** Test nine ****\");\n+\n+        Something s = doSomething(\"test_09\");\n+\n+        try (ServerSocket ss = new ServerSocket(0)) {\n+            int localPort = ss.getLocalPort();\n+            int[] ports;\n+            do {\n+                ports = PortAllocator.allocatePorts(1);\n+            } while (localPort == ports[0]);\n+\n+            final AtomicBoolean checks = new AtomicBoolean(false);\n+\n+            int retryCntr = 1;\n+            do {\n+                final AtomicBoolean retry = new AtomicBoolean(false);\n+\n+                try {\n+                    jcmd(\n+                        line -> {\n+                            if (line.contains(Agent.getText(AgentConfigurationError.AGENT_EXCEPTION))) {\n+                                retry.set(true);\n+                            }\n+                    },\n@@ -624,2 +736,2 @@\n-                \"jmxremote.port=\" + ss.getLocalPort(),\n-                \"jmxremote.rmi.port=\" + pa.getPort2(),\n+                \"jmxremote.port=\" + ports[0],\n+                \"jmxremote.rmi.port=\" + localPort,\n@@ -628,3 +740,2 @@\n-            if (!checks[0]) {\n-                throw new Exception(\"Starting agent on port \" + pa.getPort1() + \" should \" +\n-                                    \"report an invalid agent state\");\n+            } catch (BindException e) {\n+                checks.set(true);\n@@ -632,3 +743,2 @@\n-            if (!checks[1]) {\n-                throw new Exception(\"Starting agent on poprt \" + pa.getPort2() + \" should \" +\n-                                    \"report an invalid agent state\");\n+            if (!retry.get()) {\n+                break;\n@@ -636,3 +746,8 @@\n-            if (!checks[2]) {\n-                throw new Exception(\"Starting agent on port \" + ss.getLocalPort() + \" should \" +\n-                                    \"report port in use\");\n+            System.out.println(\"Attempt \" + retryCntr + \" >>>\");\n+            System.out.println(\"Unexpected reply from the agent. Retrying in 500ms ...\");\n+            Thread.sleep(500);\n+        } while (retryCntr++ < 10);\n+\n+        if (!checks.get()) {\n+            throw new Exception(\"Starting agent on port \" + ports[0] + \" should \"\n+                    + \"report port in use\");\n@@ -645,1 +760,1 @@\n-    private static void test_07() throws Exception {\n+    static void test_10() throws Exception {\n@@ -650,1 +765,1 @@\n-        System.out.println(\"**** Test seven ****\");\n+        System.out.println(\"**** Test ten ****\");\n@@ -652,0 +767,1 @@\n+        int[] ports = PortAllocator.allocatePorts(2);\n@@ -653,4 +769,3 @@\n-            \"test_07\",\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\",\n-            \"-Dcom.sun.management.jmxremote.ssl=true\");\n-        PortAllocator pa = new PortAllocator();\n+                \"test_10\",\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\",\n+                \"-Dcom.sun.management.jmxremote.ssl=true\");\n@@ -659,1 +774,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -662,1 +777,1 @@\n-                \"jmxremote.port=\" + pa.getPort2(),\n+                \"jmxremote.port=\" + ports[1],\n@@ -666,1 +781,1 @@\n-            testConnect(pa.getPort2());\n+            testConnect(ports[1]);\n@@ -672,1 +787,1 @@\n-    static void test_08() throws Exception {\n+    static void test_11() throws Exception {\n@@ -678,3 +793,2 @@\n-        System.out.println(\"**** Test eight ****\");\n-        PortAllocator pa = new PortAllocator();\n-\n+        System.out.println(\"**** Test eleven ****\");\n+        int[] ports = PortAllocator.allocatePorts(2);\n@@ -682,4 +796,4 @@\n-            \"test_08\",\n-            \"-Dcom.sun.management.jmxremote.port=\" + pa.getPort1(),\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\",\n-            \"-Dcom.sun.management.jmxremote.ssl=true\");\n+                \"test_11\",\n+                \"-Dcom.sun.management.jmxremote.port=\" + ports[0],\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\",\n+                \"-Dcom.sun.management.jmxremote.ssl=true\");\n@@ -688,1 +802,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -692,1 +806,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -695,4 +809,4 @@\n-                CMD_START,\n-                \"jmxremote.port=\" + pa.getPort2(),\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.ssl=false\"\n+                    CMD_START,\n+                    \"jmxremote.port=\" + ports[1],\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.ssl=false\"\n@@ -701,1 +815,1 @@\n-            testConnect(pa.getPort2());\n+            testConnect(ports[1]);\n@@ -707,1 +821,1 @@\n-    static void test_09() throws Exception {\n+    static void test_12() throws Exception {\n@@ -715,1 +829,1 @@\n-        System.out.println(\"**** Test nine ****\");\n+        System.out.println(\"**** Test twelve ****\");\n@@ -717,4 +831,5 @@\n-        Something s = doSomething(\"test_09\",\n-            \"-Dcom.sun.management.config.file=\" +\n-                TEST_SRC + File.separator + \"management_cl.properties\",\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\"\n+        int[] ports = PortAllocator.allocatePorts(2);\n+        Something s = doSomething(\"test_12\",\n+                \"-Dcom.sun.management.config.file=\"\n+                + TEST_SRC + File.separator + \"management_cl.properties\",\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\"\n@@ -722,1 +837,0 @@\n-        PortAllocator pa = new PortAllocator();\n@@ -725,1 +839,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -729,1 +843,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -732,4 +846,4 @@\n-                \"config.file=\" + TEST_SRC + File.separator +\n-                    \"management_jcmd.properties\",\n-                \"jmxremote.authenticate=false\",\n-                \"jmxremote.port=\" + pa.getPort2()\n+                    \"config.file=\" + TEST_SRC + File.separator\n+                    + \"management_jcmd.properties\",\n+                    \"jmxremote.authenticate=false\",\n+                    \"jmxremote.port=\" + ports[1]\n@@ -738,1 +852,1 @@\n-            testConnect(pa.getPort2());\n+            testConnect(ports[1]);\n@@ -744,1 +858,1 @@\n-    static void test_10() throws Exception {\n+    static void test_13() throws Exception {\n@@ -751,3 +865,2 @@\n-        System.out.println(\"**** Test ten ****\");\n-        PortAllocator pa = new PortAllocator();\n-\n+        System.out.println(\"**** Test thirteen ****\");\n+        int[] ports = PortAllocator.allocatePorts(1);\n@@ -755,4 +868,4 @@\n-            \"test_10\",\n-            \"-Dcom.sun.management.jmxremote.port=\" + pa.getPort1(),\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\",\n-            \"-Dcom.sun.management.jmxremote.ssl=true\");\n+                \"test_13\",\n+                \"-Dcom.sun.management.jmxremote.port=\" + ports[0],\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\",\n+                \"-Dcom.sun.management.jmxremote.ssl=true\");\n@@ -761,1 +874,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -765,2 +878,2 @@\n-                \"jmxremote.ssl=false\",\n-                \"jmxremote.port=\" + pa.getPort1()\n+                    \"jmxremote.ssl=false\",\n+                    \"jmxremote.port=\" + ports[0]\n@@ -768,1 +881,1 @@\n-            testConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -772,1 +885,1 @@\n-                \"jmxremote.port=\" + pa.getPort1()\n+                    \"jmxremote.port=\" + ports[0]\n@@ -775,1 +888,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n@@ -781,1 +894,1 @@\n-    static void test_11() throws Exception {\n+    static void test_14() throws Exception {\n@@ -786,3 +899,2 @@\n-        System.out.println(\"**** Test eleven ****\");\n-        PortAllocator pa = new PortAllocator();\n-\n+        System.out.println(\"**** Test fourteen ****\");\n+        int[] ports = PortAllocator.allocatePorts(1);\n@@ -790,4 +902,4 @@\n-            \"test_11\",\n-            \"-Dcom.sun.management.jmxremote.port=\" + pa.getPort1(),\n-            \"-Dcom.sun.management.jmxremote.authenticate=false\",\n-            \"-Dcom.sun.management.jmxremote.ssl=false\");\n+                \"test_14\",\n+                \"-Dcom.sun.management.jmxremote.port=\" + ports[0],\n+                \"-Dcom.sun.management.jmxremote.authenticate=false\",\n+                \"-Dcom.sun.management.jmxremote.ssl=false\");\n@@ -795,1 +907,1 @@\n-            testConnect(pa.getPort1());\n+            testConnect(ports[0]);\n@@ -803,1 +915,1 @@\n-    static void test_12() throws Exception {\n+    static void test_15() throws Exception {\n@@ -809,2 +921,2 @@\n-        Something s = doSomething(\"test_12\");\n-        PortAllocator pa = new PortAllocator();\n+        int[] ports = PortAllocator.allocatePorts(1);\n+        Something s = doSomething(\"test_15\");\n@@ -813,1 +925,1 @@\n-            testNoConnect(pa.getPort1());\n+            testNoConnect(ports[0]);\n","filename":"jdk\/test\/sun\/management\/jmxremote\/startstop\/JMXStartStopTest.java","additions":323,"deletions":211,"binary":false,"changes":534,"status":"modified"}]}