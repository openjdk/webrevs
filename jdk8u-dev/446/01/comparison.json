{"files":[{"patch":"@@ -496,1 +496,2 @@\n-    strcpy(name, name + 1);\n+    \/\/ Copy remaining string plus NUL to the beginning\n+    memmove(name, name + 1, strlen(name + 1) + 1);\n","filename":"hotspot\/src\/share\/vm\/compiler\/compilerOracle.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.PrintWriter;\n+import java.io.File;\n+\n+import com.oracle.java.testlibrary.*;\n+\n+\/*\n+ * @test TestCompileCommand\n+ * @bug 8069389\n+ * @summary \"Regression tests of -XX:CompileCommand\"\n+ * @library \/testlibrary\n+ * @run main TestCompileCommand\n+ *\/\n+\n+public class TestCompileCommand {\n+\n+    private static final String[][] ARGUMENTS = {\n+        {\n+            \"-XX:CompileCommand=print,*01234567890123456789012345678901234567890123456789,*0123456789012345678901234567890123456789\",\n+            \"-version\"\n+        }\n+    };\n+\n+    private static final String[][] OUTPUTS = {\n+        {\n+            \"print *01234567890123456789012345678901234567890123456789.*0123456789012345678901234567890123456789\"\n+        }\n+    };\n+\n+    private static void verifyValidOption(String[] arguments, String[] expected_outputs) throws Exception {\n+        ProcessBuilder pb;\n+        OutputAnalyzer out;\n+\n+        pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        out = new OutputAnalyzer(pb.start());\n+\n+        for (String expected_output : expected_outputs) {\n+            out.shouldContain(expected_output);\n+        }\n+\n+        out.shouldNotContain(\"CompileCommand: An error occured during parsing\");\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (ARGUMENTS.length != OUTPUTS.length) {\n+            throw new RuntimeException(\"Test is set up incorrectly: length of arguments and expected outputs for type (1) options does not match.\");\n+        }\n+\n+        \/\/ Check if type (1) options are parsed correctly\n+        for (int i = 0; i < ARGUMENTS.length; i++) {\n+            verifyValidOption(ARGUMENTS[i], OUTPUTS[i]);\n+        }\n+    }\n+}\n","filename":"hotspot\/test\/compiler\/oracle\/TestCompileCommand.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}