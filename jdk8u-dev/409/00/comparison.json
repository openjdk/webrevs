{"files":[{"patch":"@@ -87,1 +87,8 @@\n-    public synchronized void put(final URL url, Object obj, HttpClient http) {\n+    public void put(final URL url, Object obj, HttpClient http) {\n+        \/\/ this method may need to close an HttpClient, either because\n+        \/\/ it is not cacheable, or because the cache is at its capacity.\n+        \/\/ In the latter case, we close the least recently used client.\n+        \/\/ The client to close is stored in oldClient, and is closed\n+        \/\/ after cacheLock is released.\n+        HttpClient oldClient = null;\n+        synchronized (this) {\n@@ -135,1 +142,6 @@\n-            v.put(http);\n+                oldClient = v.put(http);\n+        }\n+    }\n+        \/\/ close after releasing locks\n+        if (oldClient != null) {\n+            oldClient.closeServer();\n@@ -162,1 +174,0 @@\n-\n@@ -181,0 +192,1 @@\n+            List<HttpClient> closeList = null;\n@@ -190,1 +202,1 @@\n-                        KeepAliveEntry e = v.peek();\n+                        KeepAliveEntry e = v.peekLast();\n@@ -193,2 +205,5 @@\n-                                v.poll();\n-                                e.hc.closeServer();\n+                                v.pollLast();\n+                                if (closeList == null) {\n+                                    closeList = new ArrayList<>();\n+                                }\n+                                closeList.add(e.hc);\n@@ -198,1 +213,1 @@\n-                            e = v.peek();\n+                            e = v.peekLast();\n@@ -211,0 +226,6 @@\n+            \/\/ close connections outside cacheLock\n+            if (closeList != null) {\n+                 for (HttpClient hc : closeList) {\n+                     hc.closeServer();\n+               }\n+          }\n@@ -228,2 +249,2 @@\n-\/* FILO order for recycling HttpClients, should run in a thread\n- * to time them out.  If > maxConns are in use, block.\n+\/* LIFO order for reusing HttpClients. Most recent entries at the front.\n+ * If > maxConns are in use, discard oldest.\n@@ -242,1 +263,3 @@\n-        if (isEmpty()) {\n+        \/\/ check the most recent connection, use if still valid\n+        KeepAliveEntry e = peekFirst();\n+        if (e == null) {\n@@ -246,2 +269,0 @@\n-        \/\/ Loop until we find a connection that has not timed out\n-        HttpClient hc = null;\n@@ -249,2 +270,0 @@\n-        do {\n-            KeepAliveEntry e = pop();\n@@ -252,6 +271,5 @@\n-                e.hc.closeServer();\n-            } else {\n-                hc = e.hc;\n-            }\n-        } while ((hc == null) && (!isEmpty()));\n-        return hc;\n+            return null; \/\/ all connections stale - will be cleaned up later\n+        } else {\n+            pollFirst();\n+            return e.hc;\n+        }\n@@ -261,1 +279,3 @@\n-    synchronized void put(HttpClient h) {\n+    synchronized HttpClient put(HttpClient h) {\n+        HttpClient staleClient = null;\n+        assert KeepAliveCache.getMaxConnections() > 0;\n@@ -263,3 +283,2 @@\n-            h.closeServer(); \/\/ otherwise the connection remains in limbo\n-        } else {\n-            push(new KeepAliveEntry(h, System.currentTimeMillis()));\n+            \/\/ remove oldest connection\n+            staleClient = removeLast().hc;\n@@ -267,0 +286,3 @@\n+        addFirst(new KeepAliveEntry(h, System.currentTimeMillis()));\n+        \/\/ close after releasing the locks\n+        return staleClient;\n@@ -269,1 +291,1 @@\n-    \/* remove an HttpClient *\/\n+\/* remove an HttpClient *\/\n@@ -294,4 +316,4 @@\n-    private String      protocol = null;\n-    private String      host = null;\n-    private int         port = 0;\n-    private Object      obj = null; \/\/ additional key, such as socketfactory\n+    private final String      protocol;\n+    private final String      host;\n+    private final int         port;\n+    private final Object      obj; \/\/ additional key, such as socketfactory\n@@ -338,2 +360,2 @@\n-    HttpClient hc;\n-    long idleStartTime;\n+    final HttpClient hc;\n+    final long idleStartTime;\n","filename":"jdk\/src\/share\/classes\/sun\/net\/www\/http\/KeepAliveCache.java","additions":53,"deletions":31,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -422,0 +422,8 @@\n+    @Override\n+    public void closeServer() {\n+        try {\n+            \/\/ SSLSocket.close may block up to timeout. Make sure it's short.\n+            serverSocket.setSoTimeout(1);\n+        } catch (Exception e) {}\n+        super.closeServer();\n+    }\n","filename":"jdk\/src\/share\/classes\/sun\/net\/www\/protocol\/https\/HttpsClient.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,238 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8293562\n+ * @library \/test\/lib\n+ * @run main\/othervm -Dhttp.keepAlive.time.server=1 B8293562\n+ * @summary Http keep-alive thread should close sockets without holding a lock\n+ *\/\n+\n+import com.sun.net.httpserver.HttpServer;\n+\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLSession;\n+import javax.net.ssl.SSLSocket;\n+import javax.net.ssl.SSLSocketFactory;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.net.UnknownHostException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+public class B8293562 {\n+    static HttpServer server;\n+    static CountDownLatch closing = new CountDownLatch(1);\n+    static CountDownLatch secondRequestDone = new CountDownLatch(1);\n+    static CompletableFuture<Void> result = new CompletableFuture<>();\n+\n+    public static void main(String[] args) throws Exception {\n+        startHttpServer();\n+        clientHttpCalls();\n+    }\n+\n+    public static void startHttpServer() throws Exception {\n+        server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 10);\n+        server.setExecutor(Executors.newCachedThreadPool());\n+        server.start();\n+    }\n+\n+    public static void clientHttpCalls() throws Exception {\n+        try {\n+            System.out.println(\"http server listen on: \" + server.getAddress().getPort());\n+            String hostAddr = InetAddress.getLoopbackAddress().getHostAddress();\n+            if (hostAddr.indexOf(':') > -1) hostAddr = \"[\" + hostAddr + \"]\";\n+            String baseURLStr = \"https:\/\/\" + hostAddr + \":\" + server.getAddress().getPort() + \"\/\";\n+\n+            URL testUrl = new URL (baseURLStr);\n+\n+            \/\/ SlowCloseSocketFactory is not a real SSLSocketFactory;\n+            \/\/ it produces regular non-SSL sockets. Effectively, the request\n+            \/\/ is made over http.\n+            HttpsURLConnection.setDefaultSSLSocketFactory(new SlowCloseSocketFactory());\n+            System.out.println(\"Performing first request\");\n+            HttpsURLConnection uc = (HttpsURLConnection)testUrl.openConnection(Proxy.NO_PROXY);\n+            byte[] buf = new byte[1024];\n+            try {\n+                uc.getInputStream();\n+                throw new RuntimeException(\"Expected 404 here\");\n+            } catch (FileNotFoundException ignored) { }\n+            try (InputStream is = uc.getErrorStream()) {\n+                while (is.read(buf) >= 0) {\n+                }\n+            }\n+            System.out.println(\"First request completed\");\n+            closing.await();\n+            \/\/ KeepAliveThread is closing the connection now\n+            System.out.println(\"Performing second request\");\n+            HttpsURLConnection uc2 = (HttpsURLConnection)testUrl.openConnection(Proxy.NO_PROXY);\n+\n+            try {\n+                uc2.getInputStream();\n+                throw new RuntimeException(\"Expected 404 here\");\n+            } catch (FileNotFoundException ignored) { }\n+            try (InputStream is = uc2.getErrorStream()) {\n+                while (is.read(buf) >= 0) {\n+                }\n+            }\n+            System.out.println(\"Second request completed\");\n+            \/\/ let the socket know it can close now\n+            secondRequestDone.countDown();\n+            result.get();\n+            System.out.println(\"Test completed successfully\");\n+        } finally {\n+            server.stop(1);\n+        }\n+    }\n+\n+    static class SlowCloseSocket extends SSLSocket {\n+        @Override\n+        public synchronized void close() throws IOException {\n+            String threadName = Thread.currentThread().getName();\n+            System.out.println(\"Connection closing, thread name: \" + threadName);\n+            closing.countDown();\n+            super.close();\n+            if (threadName.equals(\"Keep-Alive-Timer\")) {\n+                try {\n+                    if (secondRequestDone.await(5, TimeUnit.SECONDS)) {\n+                        result.complete(null);\n+                    } else {\n+                        result.completeExceptionally(new RuntimeException(\n+                                \"Wait for second request timed out\"));\n+                    }\n+                } catch (InterruptedException e) {\n+                    result.completeExceptionally(new RuntimeException(\n+                            \"Wait for second request was interrupted\"));\n+                }\n+            } else {\n+                result.completeExceptionally(new RuntimeException(\n+                        \"Close invoked from unexpected thread\"));\n+            }\n+            System.out.println(\"Connection closed\");\n+        }\n+\n+        \/\/ required abstract method overrides\n+        @Override\n+        public String[] getSupportedCipherSuites() {\n+            return new String[0];\n+        }\n+        @Override\n+        public String[] getEnabledCipherSuites() {\n+            return new String[0];\n+        }\n+        @Override\n+        public void setEnabledCipherSuites(String[] suites) { }\n+        @Override\n+        public String[] getSupportedProtocols() {\n+            return new String[0];\n+        }\n+        @Override\n+        public String[] getEnabledProtocols() {\n+            return new String[0];\n+        }\n+        @Override\n+        public void setEnabledProtocols(String[] protocols) { }\n+        @Override\n+        public SSLSession getSession() {\n+            return null;\n+        }\n+        @Override\n+        public void addHandshakeCompletedListener(HandshakeCompletedListener listener) { }\n+        @Override\n+        public void removeHandshakeCompletedListener(HandshakeCompletedListener listener) { }\n+        @Override\n+        public void startHandshake() throws IOException { }\n+        @Override\n+        public void setUseClientMode(boolean mode) { }\n+        @Override\n+        public boolean getUseClientMode() {\n+            return false;\n+        }\n+        @Override\n+        public void setNeedClientAuth(boolean need) { }\n+        @Override\n+        public boolean getNeedClientAuth() {\n+            return false;\n+        }\n+        @Override\n+        public void setWantClientAuth(boolean want) { }\n+        @Override\n+        public boolean getWantClientAuth() {\n+            return false;\n+        }\n+        @Override\n+        public void setEnableSessionCreation(boolean flag) { }\n+        @Override\n+        public boolean getEnableSessionCreation() {\n+            return false;\n+        }\n+    }\n+\n+    static class SlowCloseSocketFactory extends SSLSocketFactory {\n+\n+        @Override\n+        public Socket createSocket() throws IOException {\n+            return new SlowCloseSocket();\n+        }\n+        \/\/ required abstract method overrides\n+        @Override\n+        public Socket createSocket(String host, int port) throws IOException, UnknownHostException {\n+            throw new UnsupportedOperationException();\n+        }\n+        @Override\n+        public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException {\n+            throw new UnsupportedOperationException();\n+        }\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) throws IOException {\n+            throw new UnsupportedOperationException();\n+        }\n+        @Override\n+        public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {\n+            throw new UnsupportedOperationException();\n+        }\n+        @Override\n+        public String[] getDefaultCipherSuites() {\n+            return new String[0];\n+        }\n+        @Override\n+        public String[] getSupportedCipherSuites() {\n+            return new String[0];\n+        }\n+        @Override\n+        public Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+}\n+\n","filename":"jdk\/test\/sun\/net\/www\/http\/KeepAliveCache\/B8293562.java","additions":238,"deletions":0,"binary":false,"changes":238,"status":"added"}]}