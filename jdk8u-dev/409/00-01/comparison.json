{"files":[{"patch":"@@ -95,4 +95,5 @@\n-        boolean startThread = (keepAliveTimer == null);\n-        if (!startThread) {\n-            if (!keepAliveTimer.isAlive()) {\n-                startThread = true;\n+            boolean startThread = (keepAliveTimer == null);\n+            if (!startThread) {\n+                if (!keepAliveTimer.isAlive()) {\n+                    startThread = true;\n+                }\n@@ -100,18 +101,27 @@\n-        }\n-        if (startThread) {\n-            clear();\n-            \/* Unfortunately, we can't always believe the keep-alive timeout we got\n-             * back from the server.  If I'm connected through a Netscape proxy\n-             * to a server that sent me a keep-alive\n-             * time of 15 sec, the proxy unilaterally terminates my connection\n-             * The robustness to get around this is in HttpClient.parseHTTP()\n-             *\/\n-            final KeepAliveCache cache = this;\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                   \/\/ We want to create the Keep-Alive-Timer in the\n-                    \/\/ system threadgroup\n-                    ThreadGroup grp = Thread.currentThread().getThreadGroup();\n-                    ThreadGroup parent = null;\n-                    while ((parent = grp.getParent()) != null) {\n-                        grp = parent;\n+            if (startThread) {\n+                clear();\n+                \/* Unfortunately, we can't always believe the keep-alive timeout we got\n+                 * back from the server.  If I'm connected through a Netscape proxy\n+                 * to a server that sent me a keep-alive\n+                 * time of 15 sec, the proxy unilaterally terminates my connection\n+                 * The robustness to get around this is in HttpClient.parseHTTP()\n+                 *\/\n+                final KeepAliveCache cache = this;\n+                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n+                    public Void run() {\n+                        \/\/ We want to create the Keep-Alive-Timer in the\n+                        \/\/ system threadgroup\n+                        ThreadGroup grp = Thread.currentThread().getThreadGroup();\n+                        ThreadGroup parent = null;\n+                        while ((parent = grp.getParent()) != null) {\n+                            grp = parent;\n+                        }\n+\n+                        keepAliveTimer = new Thread(grp, cache, \"Keep-Alive-Timer\");\n+                        keepAliveTimer.setDaemon(true);\n+                        keepAliveTimer.setPriority(Thread.MAX_PRIORITY - 2);\n+                        \/\/ Set the context class loader to null in order to avoid\n+                        \/\/ keeping a strong reference to an application classloader.\n+                        keepAliveTimer.setContextClassLoader(null);\n+                        keepAliveTimer.start();\n+                        return null;\n@@ -119,0 +129,2 @@\n+                });\n+            }\n@@ -120,11 +132,2 @@\n-                    keepAliveTimer = new Thread(grp, cache, \"Keep-Alive-Timer\");\n-                    keepAliveTimer.setDaemon(true);\n-                    keepAliveTimer.setPriority(Thread.MAX_PRIORITY - 2);\n-                    \/\/ Set the context class loader to null in order to avoid\n-                    \/\/ keeping a strong reference to an application classloader.\n-                    keepAliveTimer.setContextClassLoader(null);\n-                    keepAliveTimer.start();\n-                    return null;\n-                }\n-            });\n-        }\n+            KeepAliveKey key = new KeepAliveKey(url, obj);\n+            ClientVector v = super.get(key);\n@@ -132,10 +135,7 @@\n-        KeepAliveKey key = new KeepAliveKey(url, obj);\n-        ClientVector v = super.get(key);\n-\n-        if (v == null) {\n-            int keepAliveTimeout = http.getKeepAliveTimeout();\n-            v = new ClientVector(keepAliveTimeout > 0 ?\n-                                 keepAliveTimeout * 1000 : LIFETIME);\n-            v.put(http);\n-            super.put(key, v);\n-        } else {\n+            if (v == null) {\n+                int keepAliveTimeout = http.getKeepAliveTimeout();\n+                v = new ClientVector(keepAliveTimeout > 0 ?\n+                                     keepAliveTimeout * 1000 : LIFETIME);\n+                v.put(http);\n+                super.put(key, v);\n+            } else {\n@@ -143,0 +143,1 @@\n+            }\n@@ -144,1 +145,0 @@\n-    }\n@@ -228,4 +228,4 @@\n-                 for (HttpClient hc : closeList) {\n-                     hc.closeServer();\n-               }\n-          }\n+                for (HttpClient hc : closeList) {\n+                    hc.closeServer();\n+                }\n+            }\n@@ -270,1 +270,1 @@\n-            if ((currentTime - e.idleStartTime) > nap) {\n+        if ((currentTime - e.idleStartTime) > nap) {\n@@ -291,1 +291,1 @@\n-\/* remove an HttpClient *\/\n+    \/* remove an HttpClient *\/\n","filename":"jdk\/src\/share\/classes\/sun\/net\/www\/http\/KeepAliveCache.java","additions":50,"deletions":50,"binary":false,"changes":100,"status":"modified"}]}