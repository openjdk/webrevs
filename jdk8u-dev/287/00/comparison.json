{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -806,1 +806,9 @@\n-                        startOff = padBufferLen;\n+                        \/\/ call C_EncryptUpdate first if the padBuffer is full\n+                        \/\/ to make room for padding bytes\n+                        if (padBufferLen == padBuffer.length) {\n+                            k = token.p11.C_EncryptUpdate(session.id(),\n+                                0, padBuffer, 0, padBufferLen,\n+                                0, out, outOfs, outLen);\n+                        } else {\n+                            startOff = padBufferLen;\n+                        }\n@@ -810,1 +818,1 @@\n-                    k = token.p11.C_EncryptUpdate(session.id(),\n+                    k += token.p11.C_EncryptUpdate(session.id(),\n@@ -812,1 +820,1 @@\n-                            0, out, outOfs, outLen);\n+                            0, out, outOfs + k, outLen - k);\n@@ -894,1 +902,9 @@\n-                        startOff = padBufferLen;\n+                        \/\/ call C_EncryptUpdate first if the padBuffer is full\n+                        \/\/ to make room for padding bytes\n+                        if (padBufferLen == padBuffer.length) {\n+                            k = token.p11.C_EncryptUpdate(session.id(),\n+                                0, padBuffer, 0, padBufferLen,\n+                                outAddr, outArray, outOfs, outLen);\n+                        } else {\n+                            startOff = padBufferLen;\n+                        }\n@@ -898,1 +914,1 @@\n-                    k = token.p11.C_EncryptUpdate(session.id(),\n+                    k += token.p11.C_EncryptUpdate(session.id(),\n@@ -900,1 +916,1 @@\n-                            outAddr, outArray, outOfs, outLen);\n+                            outAddr, outArray, outOfs + k, outLen - k);\n","filename":"jdk\/src\/share\/classes\/sun\/security\/pkcs11\/P11Cipher.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289301\n+ * @summary P11Cipher should not throw OOB exception during padding when \"reqBlockUpdates\" == true\n+ * @library ..\n+ * @run main\/othervm TestPaddingOOB\n+ *\/\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.security.Key;\n+import java.security.Provider;\n+\n+public class TestPaddingOOB extends PKCS11Test {\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new TestPaddingOOB(), args);\n+    }\n+\n+    @Override\n+    public void main(Provider p) throws Exception {\n+        KeyGenerator kg = KeyGenerator.getInstance(\"AES\", p);\n+        Key key = kg.generateKey();\n+\n+        Cipher c = Cipher.getInstance(\"AES\/ECB\/PKCS5Padding\", p);\n+        int bs = c.getBlockSize();\n+\n+        \/\/ Test with arrays\n+        byte[] plainArr = new byte[bs];\n+        Arrays.fill(plainArr, (byte) 'a');\n+        c.init(Cipher.ENCRYPT_MODE, key);\n+        byte[] encArr = new byte[c.getOutputSize(plainArr.length)];\n+        int off = c.update(plainArr, 0, 1, encArr, 0);\n+        off += c.doFinal(plainArr, 1, plainArr.length - 1, encArr, off);\n+        if (off != 2 * bs) {\n+            throw new Exception(\"Unexpected encrypted size (array): \" + off);\n+        }\n+        c.init(Cipher.DECRYPT_MODE, key);\n+        byte[] plainArr2 = new byte[c.getOutputSize(encArr.length)];\n+        off = c.doFinal(encArr, 0, encArr.length, plainArr2, 0);\n+        if (off != bs) {\n+            throw new Exception(\"Unexpected decrypted size (array): \" + off);\n+        }\n+        if (!Arrays.equals(plainArr, Arrays.copyOfRange(plainArr2, 0, off))) {\n+            throw new Exception(\"Invalid decrypted data (array)\");\n+        }\n+\n+        \/\/ Test with buffers\n+        ByteBuffer plainBuf = ByteBuffer.allocate(bs);\n+        Arrays.fill(plainArr, (byte) 'b');\n+        plainBuf.put(plainArr);\n+        plainBuf.flip();\n+        c.init(Cipher.ENCRYPT_MODE, key);\n+        ByteBuffer encBuf = ByteBuffer.allocate(c.getOutputSize(plainBuf.limit()));\n+        plainBuf.limit(1);\n+        off = c.update(plainBuf, encBuf);\n+        plainBuf.limit(bs);\n+        off += c.doFinal(plainBuf, encBuf);\n+        if (off != 2 * bs) {\n+            throw new Exception(\"Unexpected encrypted size (buffer): \" + off);\n+        }\n+        encBuf.flip();\n+        c.init(Cipher.DECRYPT_MODE, key);\n+        ByteBuffer plainBuf2 = ByteBuffer.allocate(c.getOutputSize(encBuf.limit()));\n+        off = c.doFinal(encBuf, plainBuf2);\n+        if (off != bs) {\n+            throw new Exception(\"Unexpected decrypted size (buffer): \" + off);\n+        }\n+        plainBuf2.flip();\n+        plainBuf2.get(plainArr2, 0, off);\n+        if (!Arrays.equals(plainArr, Arrays.copyOfRange(plainArr2, 0, off))) {\n+            throw new Exception(\"Invalid decrypted data (buffer)\");\n+        }\n+    }\n+\n+}\n","filename":"jdk\/test\/sun\/security\/pkcs11\/Cipher\/TestPaddingOOB.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}