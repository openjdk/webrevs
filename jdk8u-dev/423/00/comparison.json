{"files":[{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 6328154 6962082\n- * @summary ensure that ascii, and latin-1 text without combining marks, both layout faster\n- *  than latin-1 text with combining marks.  The presumption is then that the canonical\n- *  GSUB table is being run only on the latter and not on either of the former.\n- *\/\n-\n-import java.awt.Font;\n-import java.awt.GraphicsEnvironment;\n-import java.awt.font.FontRenderContext;\n-import java.awt.font.TextLayout;\n-\n-import static java.awt.Font.*;\n-\n-public class CombiningPerf {\n-    private static Font font;\n-    private static FontRenderContext frc;\n-\n-    public static void main(String[] args) throws Exception {\n-        System.err.println(\"start\");\n-\n-        GraphicsEnvironment.getLocalGraphicsEnvironment();\n-\n-        font = new Font(\"Lucida Sans Regular\", PLAIN, 12);\n-        frc = new FontRenderContext(null, false, false);\n-\n-        String ascii = \"the characters are critical noodles?\";\n-        String french = \"l'aper\\u00e7u caract\\u00e8re one \\u00e9t\\u00e9 cr\\u00e9\\u00e9s\";\n-        String frenchX = \"l'aper\\u00e7u caracte\\u0300re one e\\u0301te\\u0301 ere\\u0301e\\u0301s\";\n-\n-        \/\/ warmup\n-        for (int i = 0; i < 100; ++i) {\n-            TextLayout tl = new TextLayout(french, font, frc);\n-            tl = new TextLayout(ascii, font, frc);\n-            tl = new TextLayout(frenchX, font, frc);\n-        }\n-        \/**\/\n-        long atime = test(ascii);\n-        System.err.println(\"atime: \" + (atime\/1000000.0) + \" length: \" + ascii.length());\n-\n-        long ftime = test(french);\n-        System.err.println(\"ftime: \" + (ftime\/1000000.0) + \" length: \" + french.length());\n-\n-        long xtime = test(frenchX);\n-        System.err.println(\"xtime: \" + (xtime\/1000000.0) + \" length: \" + frenchX.length());\n-\n-        long limit = xtime * 2 \/ 3;\n-        if (atime > limit || ftime > limit) {\n-            throw new Exception(\"took too long\");\n-        }\n-        \/**\/\n-    }\n-\n-    private static long test(String text) {\n-        long start = System.nanoTime();\n-        for (int i = 0; i < 2000; ++i) {\n-            TextLayout tl = new TextLayout(text, font, frc);\n-        }\n-        return System.nanoTime() - start;\n-    }\n-}\n","filename":"jdk\/test\/java\/awt\/font\/TextLayout\/CombiningPerf.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"}]}