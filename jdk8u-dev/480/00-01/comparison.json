{"files":[{"patch":"@@ -26,1 +26,1 @@\n- *      8212794 8220281 8235834\n+ *      8235834\n@@ -177,147 +177,0 @@\n-    private static void bug8213618 () throws Exception {\n-        String cs = \"x-IBM970\";\n-        byte[] ba = new byte[]{(byte)0xA2,(byte)0xC1};\n-        String s = \"\\u25C9\";\n-        if (!(new String(ba, cs)).equals(s))\n-            throw new Exception(\"Cp970 failed\");\n-        if (!Arrays.equals(ba, s.getBytes(cs)))\n-            throw new Exception(\"Cp970 failed\");\n-        ba = new byte[]{0x3f,0x3f,0x3f};\n-        if (!Arrays.equals(ba, \"\\u6950\\u84f1\\ucf7f\".getBytes(cs)))\n-            throw new Exception(\"Cp970 failed\");\n-    }\n-\n-    private static void bug8202329() throws Exception {\n-        String original = \"\\\\\\u007E\\u00A5\\u203E\"; \/\/ [backslash][tilde][yen][overscore]\n-        byte[] expectedBytes; \/\/ bytes after conversion\n-        String expectedStringfromBytes; \/\/ String constructed from bytes\n-\n-        Charset charset; \/\/ charset used for conversion\n-\n-        ByteBuffer bb; \/\/ Buffer that holds encoded bytes\n-        byte[]  ba; \/\/ byte array that holds encoded bytes\n-\n-        CharBuffer cb; \/\/ Buffer that holds decoded chars\n-\n-\n-        \/\/ Test IBM943, where \\ and ~ are encoded to unmappable i.e., 0x3f\n-        \/\/ and [yen] and [overscore] are encoded to 0x5c and 0x7e\n-        charset = Charset.forName(\"IBM943\");\n-        expectedBytes = new byte[] {0x3f, 0x3f, 0x5c, 0x7e};\n-        expectedStringfromBytes = \"??\\u00A5\\u203E\";\n-        bb = charset.encode(original);\n-        ba = new byte[bb.remaining()];\n-        bb.get(ba, 0, ba.length);\n-        if(!Arrays.equals(ba, expectedBytes)) {\n-            throw new Exception(\"IBM943 failed to encode\");\n-        }\n-        cb = charset.decode(ByteBuffer.wrap(expectedBytes));\n-        if(!cb.toString().equals(expectedStringfromBytes)) {\n-            throw new Exception(\"IBM943 failed to decode\");\n-        }\n-\n-\n-        \/\/ Test IBM943C, where \\ and ~ are encoded to 0x5c and 0x7e\n-        \/\/ and [yen] and [overscore] are encoded to 0x5c and 0x7e\n-        charset = Charset.forName(\"IBM943C\");\n-        expectedBytes = new byte[] {0x5c, 0x7e, 0x5c, 0x7e};\n-        expectedStringfromBytes = \"\\\\~\\\\~\";\n-        bb = charset.encode(original);\n-        ba = new byte[bb.remaining()];\n-        bb.get(ba, 0, ba.length);\n-        if(!Arrays.equals(ba, expectedBytes)) {\n-            throw new Exception(\"IBM943C failed to encode\");\n-        }\n-        cb = charset.decode(ByteBuffer.wrap(expectedBytes));\n-        if(!cb.toString().equals(expectedStringfromBytes)) {\n-            throw new Exception(\"IBM943C failed to decode\");\n-        }\n-    }\n-\n-    private static void bug8212794 () throws Exception {\n-        Charset cs = Charset.forName(\"x-IBM964\");\n-        byte[] ba = new byte[] {(byte)0x5c, (byte)0x90, (byte)0xa1, (byte)0xa1};\n-        char[] ca = new char[] {'\\\\', '\\u0090', '\\u3000'};\n-        ByteBuffer bb = ByteBuffer.wrap(ba);\n-        CharBuffer cb = cs.decode(bb);\n-        if(!Arrays.equals(ca, Arrays.copyOf(cb.array(), cb.limit()))) {\n-            throw new Exception(\"IBM964 failed to decode\");\n-        }\n-        cb = CharBuffer.wrap(ca);\n-        bb = cs.encode(cb);\n-        if(!Arrays.equals(ba, Arrays.copyOf(bb.array(), bb.limit()))) {\n-            throw new Exception(\"IBM964 failed to encode\");\n-        }\n-    }\n-\n-    private static void bug8220281 () throws Exception {\n-        if (System.getProperty(\"os.name\").contains(\"AIX\")) {\n-            \/* Following AIX codesets are used for Java default charset. *\/\n-            \/* They should be in sun.nio.cs package on AIX platform.     *\/\n-            String[] codesets = new String[] {\n-                \"IBM-950\", \"BIG5-HKSCS\", \"GB18030\", \"IBM-1046\",\n-                \"IBM-1124\", \"IBM-1129\", \"IBM-1252\", \"IBM-856\",\n-                \"IBM-858\", \"IBM-921\", \"IBM-922\", \"IBM-932\", \"IBM-943C\",\n-                \"IBM-eucCN\", \"IBM-eucJP\", \"IBM-eucKR\", \"IBM-eucTW\",\n-                \"ISO8859-1\", \"ISO8859-15\", \"ISO8859-2\", \"ISO8859-4\",\n-                \"ISO8859-5\", \"ISO8859-6\", \"ISO8859-7\", \"ISO8859-8\",\n-                \"ISO8859-9\", \"TIS-620\", \"UTF-8\", };\n-            String[] charsets = new String[] {\n-                \"x-IBM950\", \"Big5-HKSCS\", \"GB18030\", \"x-IBM1046\",\n-                \"x-IBM1124\", \"x-IBM1129\", \"windows-1252\", \"x-IBM856\",\n-                \"IBM00858\", \"x-IBM921\", \"x-IBM922\", \"x-IBM942C\",\n-                \"x-IBM943C\", \"x-IBM1383\", \"x-IBM29626C\", \"x-IBM970\",\n-                \"x-IBM964\", \"ISO-8859-1\", \"ISO-8859-15\", \"ISO-8859-2\",\n-                \"ISO-8859-4\", \"ISO-8859-5\", \"ISO-8859-6\", \"ISO-8859-7\",\n-                \"ISO-8859-8\", \"ISO-8859-9\", \"TIS-620\", \"UTF-8\", };\n-            for(int i = 0; i < codesets.length; i++) {\n-                Charset cs0 = Charset.forName(codesets[i]);\n-                if (!\"sun.nio.cs\".equals(cs0.getClass().getPackage().getName())) {\n-                    throw new Exception(cs0.getClass().getCanonicalName()+\" faild\");\n-                }\n-                Charset cs1 = Charset.forName(charsets[i]);\n-                if (!cs0.equals(cs1)) {\n-                    throw new Exception(codesets[i]+\"(\"+cs0.name()+\") failed\");\n-                }\n-            }\n-        }\n-        for(Charset cs : Charset.availableCharsets().values()) {\n-            String csName = cs.name().toLowerCase(Locale.ROOT);\n-            String suffix = null;\n-            HashSet<String> aliases = new HashSet<String>();\n-            for(String s : cs.aliases()) {\n-                aliases.add(s.toLowerCase(Locale.ROOT));\n-            }\n-            aliases.add(csName);\n-            if (csName.startsWith(\"x-ibm-\")) {\n-                suffix = csName.replaceAll(\"x-ibm-0*\", \"\");\n-            } else if (csName.startsWith(\"x-ibm\")) {\n-                suffix = csName.replaceAll(\"x-ibm0*\", \"\");\n-            } else if (csName.startsWith(\"ibm-\")) {\n-                suffix = csName.replaceAll(\"ibm-0*\", \"\");\n-            } else if (csName.startsWith(\"ibm\")) {\n-                suffix = csName.replaceAll(\"ibm0*\", \"\");\n-            }\n-            if (\"ibm-thai\".equals(csName)) {\n-                suffix = \"838\";\n-            }\n-            if (null != suffix) {\n-                while (suffix.length() < 3) {\n-                    suffix = \"0\"+suffix;\n-                }\n-                if (!aliases.contains(\"cp\"+suffix)) {\n-                    throw new Exception(cs.name()+\"\\t\"+\"cp\"+suffix);\n-                }\n-                if (!aliases.contains(\"ibm\"+suffix)) {\n-                    throw new Exception(cs.name()+\"\\t\"+\"ibm\"+suffix);\n-                }\n-                if (!aliases.contains(\"ibm-\"+suffix)) {\n-                    throw new Exception(cs.name()+\"\\t\"+\"ibm-\"+suffix);\n-                }\n-                if (!aliases.contains(suffix)) {\n-                    throw new Exception(cs.name()+\"\\t\"+suffix);\n-                }\n-            }\n-        }\n-    }\n-\n@@ -392,4 +245,0 @@\n-        bug8202329();\n-        bug8212794();\n-        bug8213618();\n-        bug8220281();\n","filename":"jdk\/test\/sun\/nio\/cs\/TestIBMBugs.java","additions":1,"deletions":152,"binary":false,"changes":153,"status":"modified"}]}