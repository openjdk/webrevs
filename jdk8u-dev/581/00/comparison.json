{"files":[{"patch":"@@ -895,0 +895,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n@@ -928,0 +930,2 @@\n+      \/\/ If this is a backwards branch in the bytecodes, add safepoint\n+      maybe_add_safepoint(handler_bci);\n","filename":"hotspot\/src\/share\/vm\/opto\/doCall.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class MissingSafepointOnTryCatch version 52:0 {\n+\n+    static Method m:\"()V\" {\n+        return;\n+    }\n+\n+    static Method test1:\"()V\" stack 1 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            return;\n+\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t;\n+    }\n+\n+    static Method test2:\"()V\" stack 1 {\n+        try t0;\n+            try t1;\n+                invokestatic m:\"()V\";\n+            endtry t1;\n+            return;\n+\n+            catch t1 java\/lang\/Exception;\n+            stack_map class java\/lang\/Exception;\n+            return;\n+\n+            catch t0 java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t0;\n+    }\n+\n+    public static Method th:\"()V\"\n+      throws java\/lang\/Exception\n+      stack 2 locals 0\n+    {\n+          new\tclass java\/lang\/Exception;\n+          dup;\n+          invokespecial\tMethod java\/lang\/Exception.\"<init>\":\"()V\";\n+          athrow;\n+    }\n+\n+    static Method test3:\"()V\" stack 1 locals 2 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            iconst_1;\n+            istore_0;\n+    \t\ticonst_0;\n+    \t\tistore_1;\n+            return;\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            invokestatic th:\"()V\";\n+            return;\n+        endtry t;\n+    }\n+\n+    static Method test4:\"()V\" stack 2 locals 2 {\n+        try t;\n+            invokestatic m:\"()V\";\n+            iconst_1;\n+            istore_0;\n+            iconst_0;\n+            istore_1;\n+            return;\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            iconst_1;\n+            istore_0;\n+            invokestatic th:\"()V\";\n+            return;\n+        endtry t;\n+    }\n+\n+    static Method testInfinite:\"()V\" stack 1 {\n+        try t;\n+            invokestatic th:\"()V\";\n+            return;\n+\n+            catch t java\/lang\/Throwable;\n+            stack_map class java\/lang\/Throwable;\n+            athrow;\n+        endtry t;\n+    }\n+\n+} \/\/ end Class MissingSafepointOnTryCatch\n","filename":"hotspot\/test\/compiler\/parsing\/MissingSafepointOnTryCatch.jasm","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8313626\n+ * @summary  assert(false) failed: malformed control flow to missing safepoint on backedge of a try-catch\n+ * @library \/test\/lib\n+ * @compile MissingSafepointOnTryCatch.jasm\n+ * @run main\/othervm -XX:CompileCommand=quiet\n+ *      -XX:CompileCommand=compileonly,MissingSafepointOnTryCatch::test*\n+ *      -XX:CompileCommand=dontinline,MissingSafepointOnTryCatch::m\n+ *      -XX:CompileCommand=inline,MissingSafepointOnTryCatch::th\n+ *      -XX:-TieredCompilation -Xcomp TestMissingSafepointOnTryCatch\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestMissingSafepointOnTryCatch {\n+\n+    public static void infiniteLoop() {\n+        try {\n+            Thread thread = new Thread() {\n+                public void run() {\n+                    MissingSafepointOnTryCatch.testInfinite();\n+                }\n+            };\n+            thread.setDaemon(true);\n+            thread.start();\n+            Thread.sleep(Utils.adjustTimeout(500));\n+        } catch (Exception e) {}\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            \/\/ to make sure java\/lang\/Exception class is resolved\n+            MissingSafepointOnTryCatch.th();\n+        } catch (Exception e) {}\n+        MissingSafepointOnTryCatch.test1();\n+        MissingSafepointOnTryCatch.test2();\n+        MissingSafepointOnTryCatch.test3();\n+        MissingSafepointOnTryCatch.test4();\n+        infiniteLoop();\n+    }\n+}\n","filename":"hotspot\/test\/compiler\/parsing\/TestMissingSafepointOnTryCatch.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}