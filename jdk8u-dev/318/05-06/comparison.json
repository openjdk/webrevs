{"files":[{"patch":"@@ -32,1 +32,1 @@\n-$(CONF_DST_DIR)\/sound.properties: $(TOPDIR)\/src\/java.desktop\/share\/conf\/sound.properties\n+$(CONF_DST_DIR)\/sound.properties: $(TOPDIR)\/src\/share\/lib\/sound.properties\n@@ -35,1 +35,1 @@\n-TARGETS += $(CONF_DST_DIR)\/sound.properties\n+TARGETS += $(CONF_DST_DIR)\/lib\/sound.properties\n","filename":"make\/copy\/Copy-java.desktop.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,1130 +0,0 @@\n-#\n-# Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-$(eval $(call IncludeCustomExtension, lib\/Awt2dLibraries-pre.gmk))\n-\n-WIN_AWT_LIB := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt\/awt.lib\n-\n-################################################################################\n-\n-BUILD_LIBMLIB_SRC := $(TOPDIR)\/src\/java.desktop\/share\/native\/libmlib_image \\\n-    $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/medialib\n-BUILD_LIBMLIB_CFLAGS := -D__USE_J2D_NAMES -D__MEDIALIB_OLD_NAMES \\\n-    $(addprefix -I, $(BUILD_LIBMLIB_SRC)) \\\n-    -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libmlib_image\n-\n-BUILD_LIBMLIB_LDLIBS :=\n-BUILD_LIBMLIB_IMAGE_MAPFILE := $(TOPDIR)\/make\/mapfiles\/libmlib_image\/mapfile-vers\n-\n-BUILD_LIBMLIB_CFLAGS += -DMLIB_NO_LIBSUNMATH\n-\n-ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n-  BUILD_LIBMLIB_CFLAGS += -DMLIB_OS64BIT\n-endif\n-\n-ifneq ($(OPENJDK_TARGET_OS), windows)\n-  BUILD_LIBMLIB_LDLIBS += $(LIBM) $(LIBDL)\n-endif\n-\n-$(eval $(call SetupNativeCompilation, BUILD_LIBMLIB_IMAGE, \\\n-    NAME := mlib_image, \\\n-    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-    SRC := $(BUILD_LIBMLIB_SRC), \\\n-    EXCLUDE_FILES := mlib_c_ImageBlendTable.c, \\\n-    OPTIMIZATION := HIGHEST, \\\n-    CFLAGS := $(CFLAGS_JDKLIB) \\\n-        $(BUILD_LIBMLIB_CFLAGS), \\\n-    MAPFILE := $(BUILD_LIBMLIB_IMAGE_MAPFILE), \\\n-    LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-        $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LIBS := $(BUILD_LIBMLIB_LDLIBS) \\\n-        $(JDKLIB_LIBS), \\\n-    LIBS_solaris := -lc, \\\n-    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-    RC_FLAGS := $(RC_FLAGS) \\\n-        -D \"JDK_FNAME=mlib_image.dll\" \\\n-        -D \"JDK_INTERNAL_NAME=mlib_image\" \\\n-        -D \"JDK_FTYPE=0x2L\", \\\n-    OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libmlib_image, \\\n-))\n-\n-$(BUILD_LIBMLIB_IMAGE): $(call FindLib, java.base, java)\n-\n-TARGETS += $(BUILD_LIBMLIB_IMAGE)\n-\n-################################################################################\n-\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU_ARCH), solaris-sparc)\n-\n-  LIBMLIB_IMAGE_V_SRC := $(TOPDIR)\/src\/java.desktop\/share\/native\/libmlib_image \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/libmlib_image \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/medialib \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt\/medialib \\\n-      #\n-  LIBMLIB_IMAGE_V_CFLAGS := $(TOPDIR)\/src\/java.desktop\/unix\/native\/libmlib_image\/vis_$(OPENJDK_TARGET_CPU_BITS).il \\\n-      $(addprefix -I, $(LIBMLIB_IMAGE_V_SRC)) \\\n-      #\n-\n-  BUILD_LIBMLIB_IMAGE_V_EXFILES := \\\n-      awt_ImagingLib.c \\\n-      mlib_c_ImageAffine_BC.c \\\n-      mlib_c_ImageAffine_BC_S16.c \\\n-      mlib_c_ImageAffine_BC_U16.c \\\n-      mlib_c_ImageAffine_BL.c \\\n-      mlib_c_ImageAffine_BL_S16.c \\\n-      mlib_c_ImageAffine_BL_U16.c \\\n-      mlib_c_ImageAffine_NN.c \\\n-      mlib_c_ImageConvClearEdge.c \\\n-      mlib_c_ImageConvCopyEdge.c \\\n-      mlib_c_ImageConv_f.c \\\n-      mlib_c_ImageConvVersion.c \\\n-      mlib_c_ImageCopy.c \\\n-      mlib_c_ImageLookUp.c \\\n-      mlib_c_ImageLookUp_f.c \\\n-      #\n-\n-  LIBMLIB_IMAGE_V_CFLAGS += $(filter-out -DMLIB_NO_LIBSUNMATH, $(BUILD_LIBMLIB_CFLAGS))\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBMLIB_IMAGE_V, \\\n-      NAME := mlib_image_v, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBMLIB_IMAGE_V_SRC), \\\n-      EXCLUDE_FILES := $(BUILD_LIBMLIB_IMAGE_V_EXFILES), \\\n-      OPTIMIZATION := HIGHEST, \\\n-      CFLAGS := -xarch=sparcvis \\\n-          $(LIBMLIB_IMAGE_V_CFLAGS) \\\n-          $(CFLAGS_JDKLIB), \\\n-      MAPFILE := $(BUILD_LIBMLIB_IMAGE_MAPFILE), \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-      LIBS := -ljava -ljvm -lc $(BUILD_LIBMLIB_LDLIBS), \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libmlib_image_v, \\\n-  ))\n-\n-  $(BUILD_LIBMLIB_IMAGE_V): $(call FindLib, java.base, java)\n-\n-  TARGETS += $(BUILD_LIBMLIB_IMAGE_V)\n-\n-endif\n-\n-################################################################################\n-\n-LIBAWT_DIRS := $(TOPDIR)\/src\/java.desktop\/share\/native\/libawt \\\n-    $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt \\\n-    $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-    $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/awt \\\n-    #\n-\n-ifeq ($(OPENJDK_TARGET_OS), aix)\n-  LIBAWT_DIRS += $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS)\/native\/libawt\n-endif\n-\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  LIBAWT_DIRS += $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/utility\n-endif\n-\n-ifneq ($(filter $(OPENJDK_TARGET_OS), solaris linux macosx aix), )\n-  LIBAWT_EXFILES += awt_Font.c CUPSfuncs.c fontpath.c X11Color.c\n-endif\n-\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n-  LIBAWT_EXFILES += initIDs.c awt\/image\/cvutils\/img_colors.c\n-endif\n-\n-LIBAWT_CFLAGS += -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-    $(addprefix -I, $(shell find $(LIBAWT_DIRS) -type d)) \\\n-    $(LIBJAVA_HEADER_FLAGS) \\\n-    $(addprefix -I, $(BUILD_LIBMLIB_IMAGE_SRC)) \\\n-    #\n-\n-LIBAWT_CFLAGS += -D__MEDIALIB_OLD_NAMES -D__USE_J2D_NAMES $(X_CFLAGS)\n-\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU_ARCH), solaris-sparc)\n-  LIBAWT_CFLAGS += -DMLIB_ADD_SUFF\n-  LIBAWT_CFLAGS += -xarch=sparcvis\n-\n-  LIBAWT_CFLAGS += $(TOPDIR)\/src\/java.desktop\/unix\/native\/libmlib_image\/vis_$(OPENJDK_TARGET_CPU_BITS).il\n-  LIBAWT_DIRS += $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/medialib\n-  LIBAWT_EXFILES += java2d\/loops\/MapAccelFunc.c\n-\n-  ifeq ($(OPENJDK_TARGET_CPU), sparcv9)\n-    LIBAWT_ASFLAGS = -P -xarch=v9a\n-  else\n-    LIBAWT_ASFLAGS = -P -xarch=v8plusa\n-  endif\n-else\n-  LIBAWT_EXCLUDES += \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/libawt\/awt\/medialib \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/libawt\/java2d\/loops \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt\/medialib \\\n-      #\n-endif\n-\n-ifneq ($(OPENJDK_TARGET_OS), solaris)\n-  LIBAWT_CFLAGS += -DMLIB_NO_LIBSUNMATH\n-endif\n-\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  LIBAWT_DIRS += $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d\/opengl \\\n-      $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/awt\/systemscale \\\n-  # Why does libawt need java.base headers?\n-  LIBAWT_CFLAGS += -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d\/opengl \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/java2d\/opengl \\\n-      -I$(TOPDIR)\/src\/java.desktop\/windows\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/include \\\n-      -I$(SUPPORT_OUTPUTDIR)\/headers\/java.base \\\n-      #\n-  LIBAWT_EXFILES += \\\n-      java2d\/d3d\/D3DShaderGen.c \\\n-      awt\/image\/cvutils\/img_colors.c \\\n-      #\n-\n-  LIBAWT_CFLAGS += -EHsc -DUNICODE -D_UNICODE\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n-    LIBAWT_CFLAGS += -DMLIB_OS64BIT\n-  endif\n-\n-  LIBAWT_RC_FLAGS ?= -I $(TOPDIR)\/src\/java.base\/windows\/native\/launcher\/icons\n-  LIBAWT_VERSIONINFO_RESOURCE := $(TOPDIR)\/src\/java.desktop\/windows\/native\/libawt\/windows\/awt.rc\n-endif\n-\n-LIBAWT_MAPFILE := $(TOPDIR)\/make\/mapfiles\/libawt\/mapfile-vers\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n-  LIBAWT_MAPFILE :=\n-endif\n-\n-# Turn off all warnings for debug_mem.c This is needed because the specific warning\n-# about initializing a declared 'extern' cannot be turned off individually. Only\n-# applies to debug builds.\n-ifeq ($(TOOLCHAIN_TYPE), gcc)\n-  BUILD_LIBAWT_debug_mem.c_CFLAGS := -w\n-  # This option improves performance of MaskFill in Java2D by 20% for some gcc\n-  LIBAWT_CFLAGS += -fgcse-after-reload\n-endif\n-\n-$(eval $(call SetupNativeCompilation, BUILD_LIBAWT, \\\n-    NAME := awt, \\\n-    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-    SRC := $(LIBAWT_DIRS), \\\n-    EXCLUDES := $(LIBAWT_EXCLUDES), \\\n-    EXCLUDE_FILES := $(LIBAWT_EXFILES), \\\n-    OPTIMIZATION := LOW, \\\n-    CFLAGS := $(CFLAGS_JDKLIB) $(LIBAWT_CFLAGS), \\\n-    DISABLED_WARNINGS_gcc := sign-compare unused-result maybe-uninitialized \\\n-        format-nonliteral parentheses, \\\n-    DISABLED_WARNINGS_clang := logical-op-parentheses extern-initializer, \\\n-    DISABLED_WARNINGS_solstudio := E_DECLARATION_IN_CODE, \\\n-    DISABLED_WARNINGS_microsoft := 4297 4244 4267 4996, \\\n-    ASFLAGS := $(LIBAWT_ASFLAGS), \\\n-    MAPFILE := $(LIBAWT_MAPFILE), \\\n-    LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LDFLAGS_macosx := -L$(INSTALL_LIBRARIES_HERE), \\\n-    LDFLAGS_windows := -delayload:user32.dll -delayload:gdi32.dll \\\n-        -delayload:shell32.dll -delayload:winmm.dll \\\n-        -delayload:winspool.drv -delayload:imm32.dll \\\n-        -delayload:ole32.dll -delayload:comdlg32.dll \\\n-        -delayload:comctl32.dll -delayload:shlwapi.dll, \\\n-    LIBS_unix := -ljvm -ljava $(LIBM), \\\n-    LIBS_linux :=  $(LIBDL), \\\n-    LIBS_solaris := $(LIBDL) -lc, \\\n-    LIBS_aix := $(LIBDL),\\\n-    LIBS_macosx := -lmlib_image \\\n-        -framework Cocoa \\\n-        -framework OpenGL \\\n-        -framework JavaNativeFoundation \\\n-        -framework JavaRuntimeSupport \\\n-        -framework ApplicationServices \\\n-        -framework AudioToolbox, \\\n-    LIBS_windows := kernel32.lib user32.lib gdi32.lib winspool.lib \\\n-        imm32.lib ole32.lib uuid.lib shell32.lib \\\n-        comdlg32.lib winmm.lib comctl32.lib shlwapi.lib \\\n-        delayimp.lib jvm.lib $(WIN_JAVA_LIB) advapi32.lib, \\\n-    VERSIONINFO_RESOURCE := $(LIBAWT_VERSIONINFO_RESOURCE), \\\n-    RC_FLAGS := $(RC_FLAGS) $(LIBAWT_RC_FLAGS) \\\n-        -D \"JDK_FNAME=awt.dll\" \\\n-        -D \"JDK_INTERNAL_NAME=awt\" \\\n-        -D \"JDK_FTYPE=0x2L\", \\\n-    OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt, \\\n-))\n-\n-$(BUILD_LIBAWT): $(call FindLib, java.base, java)\n-\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n-  $(BUILD_LIBAWT): $(BUILD_LIBMLIB_IMAGE)\n-endif\n-\n-TARGETS += $(BUILD_LIBAWT)\n-\n-################################################################################\n-\n-ifeq ($(findstring $(OPENJDK_TARGET_OS),windows macosx),)\n-  ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-\n-    LIBAWT_XAWT_DIRS := \\\n-        $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt_xawt \\\n-        $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-        $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/utility \\\n-        $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-        $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d \\\n-        $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/java2d \\\n-        $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/awt \\\n-        #\n-\n-    ifneq ($(filter $(OPENJDK_TARGET_OS),linux solaris aix), )\n-      LIBAWT_XAWT_DIRS += $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt\/systemscale\n-    endif\n-\n-    LIBAWT_XAWT_EXCLUDES := medialib\n-\n-    LIBAWT_XAWT_CFLAGS := $(addprefix -I, $(shell $(FIND) $(LIBAWT_XAWT_DIRS) -type d)) \\\n-        -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/include \\\n-        -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS)\/native\/include \\\n-        -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/include \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d \\\n-        -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt\/java2d \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/loops \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/pipe \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image\/cvutils \\\n-        -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image \\\n-        -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/font \\\n-        $(LIBJAVA_HEADER_FLAGS)\n-        #\n-\n-    LIBAWT_XAWT_CFLAGS += -DXAWT -DXAWT_HACK \\\n-        -DPACKAGE_PATH=\\\"$(PACKAGE_PATH)\\\" \\\n-        $(FONTCONFIG_CFLAGS) \\\n-        $(CUPS_CFLAGS)\n-\n-    ifeq ($(OPENJDK_TARGET_OS), solaris)\n-      LIBAWT_XAWT_CFLAGS += -DFUNCPROTO=15\n-    endif\n-\n-    ifeq ($(OPENJDK_TARGET_OS), linux)\n-      ifeq ($(DISABLE_XRENDER), true)\n-        LIBAWT_XAWT_CFLAGS += -DDISABLE_XRENDER_BY_DEFAULT=true\n-      endif\n-    endif\n-\n-    LIBAWT_XAWT_LIBS := $(LIBM) -lawt -lXext -lX11 -lXrender $(LIBDL) -lXtst -lXi -ljava -ljvm -lc\n-\n-    ifeq ($(OPENJDK_TARGET_OS), linux)\n-      LIBAWT_XAWT_LIBS += -lpthread\n-    endif\n-\n-    ifeq ($(TOOLCHAIN_TYPE), gcc)\n-      # Turn off all warnings for the following files since they contain warnings\n-      # that cannot be turned of individually.\n-      # redefining a macro\n-      BUILD_LIBAWT_XAWT_gtk2_interface.c_CFLAGS := -w\n-      # comparison between pointer and integer\n-      BUILD_LIBAWT_XAWT_awt_Font.c_CFLAGS := -w\n-      # initializing a declared 'extern'\n-      BUILD_LIBAWT_XAWT_debug_mem.c_CFLAGS := -w\n-   endif\n-\n-    $(eval $(call SetupNativeCompilation, BUILD_LIBAWT_XAWT, \\\n-        NAME := awt_xawt, \\\n-        OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-        SRC := $(LIBAWT_XAWT_DIRS), \\\n-        EXCLUDES := $(LIBAWT_XAWT_EXCLUDES), \\\n-        OPTIMIZATION := LOW, \\\n-        CFLAGS := $(CFLAGS_JDKLIB) $(LIBAWT_XAWT_CFLAGS) \\\n-            $(X_CFLAGS), \\\n-        WARNINGS_AS_ERRORS_xlc := false, \\\n-        DISABLED_WARNINGS_gcc := type-limits pointer-to-int-cast \\\n-            unused-result maybe-uninitialized format \\\n-            format-security int-to-pointer-cast parentheses \\\n-            implicit-fallthrough, \\\n-        DISABLED_WARNINGS_solstudio := E_DECLARATION_IN_CODE \\\n-            E_ASSIGNMENT_TYPE_MISMATCH E_NON_CONST_INIT, \\\n-        MAPFILE := $(TOPDIR)\/make\/mapfiles\/libawt_xawt\/mapfile-vers, \\\n-        LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-            $(call SET_SHARED_LIBRARY_ORIGIN) \\\n-            -L$(INSTALL_LIBRARIES_HERE), \\\n-        LIBS :=  $(X_LIBS) $(LIBAWT_XAWT_LIBS), \\\n-        VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-        RC_FLAGS := $(RC_FLAGS) \\\n-            -D \"JDK_FNAME=xawt.dll\" \\\n-            -D \"JDK_INTERNAL_NAME=xawt\" \\\n-            -D \"JDK_FTYPE=0x2L\", \\\n-        OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt_xawt, \\\n-    ))\n-\n-    $(BUILD_LIBAWT_XAWT): $(call FindLib, java.base, java)\n-\n-    $(BUILD_LIBAWT_XAWT): $(BUILD_LIBAWT)\n-\n-    TARGETS += $(BUILD_LIBAWT_XAWT)\n-\n-  endif\n-endif\n-\n-################################################################################\n-\n-LIBLCMS_SRC := $(TOPDIR)\/src\/java.desktop\/share\/native\/liblcms\n-LIBLCMS_CPPFLAGS += -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-    -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d \\\n-    -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-    $(LIBJAVA_HEADER_FLAGS) \\\n-    #\n-# The fast floor code loses precision.\n-LCMS_CFLAGS=-DCMS_DONT_USE_FAST_FLOOR\n-\n-ifeq ($(USE_EXTERNAL_LCMS), true)\n-  # If we're using an external library, we'll just need the wrapper part.\n-  # By including it explicitly, all other files will be excluded.\n-  BUILD_LIBLCMS_INCLUDE_FILES := LCMS.c\n-else\n-  BUILD_LIBLCMS_INCLUDE_FILES :=\n-  # If we're using the bundled library, we'll need to include it in the\n-  # include path explicitly. Otherwise the system headers will be used.\n-  LIBLCMS_CPPFLAGS += $(addprefix -I, $(LIBLCMS_SRC))\n-endif\n-\n-$(eval $(call SetupNativeCompilation, BUILD_LIBLCMS, \\\n-    NAME := lcms, \\\n-    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-    SRC := $(LIBLCMS_SRC), \\\n-    INCLUDE_FILES := $(BUILD_LIBLCMS_INCLUDE_FILES), \\\n-    OPTIMIZATION := HIGHEST, \\\n-    CFLAGS := $(filter-out -xc99=%none, $(CFLAGS_JDKLIB)) \\\n-        $(LIBLCMS_CPPFLAGS) \\\n-        $(LCMS_CFLAGS), \\\n-    CFLAGS_solaris := -xc99=no_lib, \\\n-    CFLAGS_windows := -DCMS_IS_WINDOWS_, \\\n-    DISABLED_WARNINGS_gcc := format-nonliteral type-limits misleading-indentation, \\\n-    DISABLED_WARNINGS_clang := tautological-compare, \\\n-    DISABLED_WARNINGS_solstudio := E_STATEMENT_NOT_REACHED, \\\n-    DISABLED_WARNINGS_microsoft := 4819, \\\n-    MAPFILE := $(TOPDIR)\/make\/mapfiles\/liblcms\/mapfile-vers, \\\n-    LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-        $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-    LDFLAGS_solaris := \/usr\/lib$(OPENJDK_TARGET_CPU_ISADIR)\/libm.so.2, \\\n-    LIBS_unix := -lawt -ljvm -ljava $(LCMS_LIBS), \\\n-    LIBS_linux := $(LIBM), \\\n-    LIBS_macosx := $(LIBM), \\\n-    LIBS_solaris := -lc, \\\n-    LIBS_aix := $(LIBM),\\\n-    LIBS_windows := $(WIN_AWT_LIB) $(WIN_JAVA_LIB), \\\n-    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-    RC_FLAGS := $(RC_FLAGS) \\\n-        -D \"JDK_FNAME=lcms.dll\" \\\n-        -D \"JDK_INTERNAL_NAME=lcms\" \\\n-        -D \"JDK_FTYPE=0x2L\", \\\n-    OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/liblcms, \\\n-))\n-\n-TARGETS += $(BUILD_LIBLCMS)\n-\n-$(BUILD_LIBLCMS): $(BUILD_LIBAWT)\n-\n-################################################################################\n-\n-LIBJAVAJPEG_SRC += $(TOPDIR)\/src\/java.desktop\/share\/native\/libjavajpeg\n-\n-BUILD_LIBJAVAJPEG_REORDER :=\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n-  ifneq ($(OPENJDK_TARGET_CPU), x86_64)\n-    BUILD_LIBJAVAJPEG_REORDER := $(TOPDIR)\/make\/mapfiles\/libjpeg\/reorder-$(OPENJDK_TARGET_CPU)\n-  endif\n-endif\n-\n-\n-# Suppress gcc warnings like \"variable might be clobbered by 'longjmp'\n-# or 'vfork'\": this warning indicates that some variable is placed to\n-# a register by optimized compiler and it's value might be lost on longjmp().\n-# Recommended way to avoid such warning is to declare the variable as\n-# volatile to prevent the optimization. However, this approach does not\n-# work because we have to declare all variables as volatile in result.\n-#ifndef CROSS_COMPILE_ARCH\n-#  CC_43_OR_NEWER := \\\n-#      $(shell $(EXPR) $(CC_MAJORVER) \\> 4 \\| \\\n-#          \\( $(CC_MAJORVER) = 4 \\& $(CC_MINORVER) \\>= 3 \\) )\n-#  ifeq ($(CC_43_OR_NEWER), 1)\n-#    BUILD_LIBJAVAJPEG_CFLAGS_linux += -Wno-clobbered\n-#  endif\n-#endif\n-\n-ifeq ($(USE_EXTERNAL_LIBJPEG), true)\n-  LIBJPEG_LIBS := -ljpeg\n-  BUILD_LIBJAVAJPEG_INCLUDE_FILES := \\\n-      imageioJPEG.c \\\n-      jpegdecoder.c\n-  BUILD_LIBJAVAJPEG_HEADERS :=\n-else\n-  LIBJPEG_LIBS :=\n-  BUILD_LIBJAVAJPEG_INCLUDE_FILES :=\n-  BUILD_LIBJAVAJPEG_HEADERS := $(addprefix -I, $(LIBJAVAJPEG_SRC))\n-endif\n-\n-$(eval $(call SetupNativeCompilation, BUILD_LIBJAVAJPEG, \\\n-    NAME := javajpeg, \\\n-    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-    SRC := $(LIBJAVAJPEG_SRC), \\\n-    INCLUDE_FILES := $(BUILD_LIBJAVAJPEG_INCLUDE_FILES), \\\n-    OPTIMIZATION := HIGHEST, \\\n-    CFLAGS := $(CFLAGS_JDKLIB) $(BUILD_LIBJAVAJPEG_HEADERS) \\\n-        $(LIBJAVA_HEADER_FLAGS) \\\n-        -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop, \\\n-    DISABLED_WARNINGS_gcc := clobbered implicit-fallthrough shift-negative-value, \\\n-    MAPFILE := $(TOPDIR)\/make\/mapfiles\/libjpeg\/mapfile-vers, \\\n-    LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-        $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LIBS := $(LIBJPEG_LIBS) $(JDKLIB_LIBS), \\\n-    LIBS_windows := $(WIN_JAVA_LIB) jvm.lib, \\\n-    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-    RC_FLAGS := $(RC_FLAGS) \\\n-        -D \"JDK_FNAME=javajpeg.dll\" \\\n-        -D \"JDK_INTERNAL_NAME=javajpeg\" \\\n-        -D \"JDK_FTYPE=0x2L\", \\\n-    REORDER := $(BUILD_LIBJAVAJPEG_REORDER), \\\n-    OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libjavajpeg, \\\n-))\n-\n-$(BUILD_LIBJAVAJPEG): $(call FindLib, java.base, java)\n-\n-TARGETS += $(BUILD_LIBJAVAJPEG)\n-\n-################################################################################\n-\n-# Mac and Windows only use the native AWT lib, do not build libawt_headless\n-ifeq ($(findstring $(OPENJDK_TARGET_OS), windows macosx),)\n-\n-  LIBAWT_HEADLESS_DIRS := $(TOPDIR)\/src\/java.desktop\/unix\/native\/libawt_headless\/awt \\\n-      $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/awt \\\n-      $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/java2d \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-      #\n-\n-  LIBAWT_HEADLESS_EXCLUDES := medialib\n-  LIBAWT_HEADLESS_CFLAGS := -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-      $(addprefix -I, $(LIBAWT_HEADLESS_DIRS)) \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image\/cvutils \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt\/java2d \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/loops \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/pipe \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/font \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d\/opengl \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/java2d\/opengl \\\n-      $(LIBJAVA_HEADER_FLAGS) \\\n-      #\n-\n-  LIBAWT_HEADLESS_REORDER :=\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n-    ifneq ($(OPENJDK_TARGET_CPU), x86_64)\n-      LIBAWT_HEADLESS_REORDER := $(TOPDIR)\/make\/mapfiles\/libawt_headless\/reorder-$(OPENJDK_TARGET_CPU)\n-    endif\n-  endif\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBAWT_HEADLESS, \\\n-      NAME := awt_headless, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBAWT_HEADLESS_DIRS), \\\n-      EXCLUDES := $(LIBAWT_HEADLESS_EXCLUDES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CFLAGS_JDKLIB) \\\n-          -DHEADLESS=true \\\n-          -DPACKAGE_PATH=\\\"$(PACKAGE_PATH)\\\" \\\n-          $(CUPS_CFLAGS) \\\n-          $(FONTCONFIG_CFLAGS) \\\n-          $(X_CFLAGS) \\\n-          $(LIBAWT_HEADLESS_CFLAGS), \\\n-      DISABLED_WARNINGS_xlc := 1506-356, \\\n-      DISABLED_WARNINGS_solstudio := E_EMPTY_TRANSLATION_UNIT, \\\n-      MAPFILE := $(TOPDIR)\/make\/mapfiles\/libawt_headless\/mapfile-vers, \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-      LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-      REORDER := $(LIBAWT_HEADLESS_REORDER), \\\n-      LIBS_unix := -lawt -ljvm -ljava, \\\n-      LIBS_linux := $(LIBM) $(LIBDL), \\\n-      LIBS_solaris := $(LIBM) $(LIBDL) $(LIBCXX) -lc, \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt_headless, \\\n-  ))\n-\n-  # AIX warning explanation:\n-  # 1506-356 : (W) Compilation unit is empty.\n-  #            This happens during the headless build\n-\n-  $(BUILD_LIBAWT_HEADLESS): $(BUILD_LIBAWT)\n-\n-  TARGETS += $(BUILD_LIBAWT_HEADLESS)\n-\n-endif\n-\n-################################################################################\n-\n-ifeq ($(FREETYPE_TO_USE), system)\n-  LIBFREETYPE_CFLAGS := $(FREETYPE_CFLAGS)\n-  LIBFREETYPE_LIBS := $(FREETYPE_LIBS)\n-else\n-  LIBFREETYPE_SRC := $(TOPDIR)\/src\/java.desktop\/share\/native\/libfreetype\n-  BUILD_LIBFREETYPE_HEADERS := $(addprefix -I, $(LIBFREETYPE_SRC)\/include)\n-  LIBFREETYPE_CFLAGS := $(BUILD_LIBFREETYPE_HEADERS)\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n-    LIBFREETYPE_LIBS := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfreetype\/freetype.lib\n-  else\n-    LIBFREETYPE_LIBS := -lfreetype\n-  endif\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBFREETYPE, \\\n-      NAME := freetype, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBFREETYPE_SRC)\/src, \\\n-      OPTIMIZATION := HIGHEST, \\\n-      CFLAGS := $(CFLAGS_JDKLIB) $(BUILD_LIBFREETYPE_HEADERS) \\\n-          -DFT2_BUILD_LIBRARY, \\\n-      DISABLED_WARNINGS_solstudio := \\\n-         E_STATEMENT_NOT_REACHED \\\n-         E_END_OF_LOOP_CODE_NOT_REACHED, \\\n-      DISABLED_WARNINGS_microsoft := 4267 2220 4244, \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-      LIBS_solaris := -lc, \\\n-      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-      RC_FLAGS := $(RC_FLAGS) \\\n-          -D \"JDK_FNAME=freetype.dll\" \\\n-          -D \"JDK_INTERNAL_NAME=freetype\" \\\n-          -D \"JDK_FTYPE=0x2L\", \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfreetype, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBFREETYPE)\n-endif\n-\n-###########################################################################\n-\n-LIBFONTMANAGER_SRC := $(TOPDIR)\/src\/java.desktop\/share\/native\/libfontmanager \\\n-    $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libfontmanager\n-LIBFONTMANAGER_CFLAGS := \\\n-    $(addprefix -I, $(shell $(FIND) \\\n-      $(LIBFONTMANAGER_SRC) \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/libawt \\\n-      $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common \\\n-      $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common -type d)) \\\n-    -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-    $(LIBJAVA_HEADER_FLAGS) \\\n-    #\n-\n-#### Begin harfbuzz configuration\n-\n-HARFBUZZ_CFLAGS := -DHAVE_OT -DHAVE_FALLBACK -DHAVE_UCDN\n-\n-ifneq ($(OPENJDK_TARGET_OS), windows)\n-  HARFBUZZ_CFLAGS += -DGETPAGESIZE -DHAVE_MPROTECT -DHAVE_PTHREAD \\\n-                      -DHAVE_SYSCONF -DHAVE_SYS_MMAN_H -DHAVE_UNISTD_H\n-endif\n-ifneq (, $(findstring $(OPENJDK_TARGET_OS), linux macosx))\n-  HARFBUZZ_CFLAGS += -DHAVE_INTEL_ATOMIC_PRIMITIVES\n-endif\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n-  HARFBUZZ_CFLAGS += -DHAVE_SOLARIS_ATOMIC_OPS\n-endif\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n-  HARFBUZZ_CFLAGS += -DHAVE_CORETEXT\n-endif\n-ifneq ($(OPENJDK_TARGET_OS), macosx)\n-  LIBFONTMANAGER_EXCLUDE_FILES += harfbuzz\/hb-coretext.cc\n-endif\n-# hb-ft.cc is not presently needed, and requires freetype 2.4.2 or later.\n-LIBFONTMANAGER_EXCLUDE_FILES += harfbuzz\/hb-ft.cc\n-\n-LIBFONTMANAGER_CFLAGS += $(HARFBUZZ_CFLAGS)\n-\n-#### End harfbuzz configuration\n-\n-LIBFONTMANAGER_CFLAGS += $(LIBFREETYPE_CFLAGS)\n-# This may be overridden in a custom makefile\n-BUILD_LIBFONTMANAGER_MAPFILE ?= $(TOPDIR)\/make\/mapfiles\/libfontmanager\/mapfile-vers\n-BUILD_LIBFONTMANAGER_FONTLIB += $(LIBFREETYPE_LIBS)\n-\n-LIBFONTMANAGER_OPTIMIZATION := HIGH\n-\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c \\\n-      X11TextRenderer.c\n-  LIBFONTMANAGER_OPTIMIZATION := HIGHEST\n-  LIBFONTMANAGER_CFLAGS += -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt\/windows\n-else ifeq ($(OPENJDK_TARGET_OS), macosx)\n-  LIBFONTMANAGER_EXCLUDE_FILES += X11FontScaler.c \\\n-      X11TextRenderer.c \\\n-      fontpath.c \\\n-      lcdglyph.c\n-else\n-  LIBFONTMANAGER_EXCLUDE_FILES += fontpath.c \\\n-      lcdglyph.c\n-endif\n-\n-LIBFONTMANAGER_CFLAGS += $(FONT_HEADERS) $(X_CFLAGS) -DLE_STANDALONE -DHEADLESS\n-\n-ifeq ($(TOOLCHAIN_TYPE), gcc)\n-  # Turn off all warnings for sunFont.c. This is needed because the specific warning\n-  # about discarding 'const' qualifier cannot be turned off individually.\n-  BUILD_LIBFONTMANAGER_sunFont.c_CFLAGS := -w\n-  # Turn off aliasing with GCC for ExtensionSubtables.cpp\n-  BUILD_LIBFONTMANAGER_ExtensionSubtables.cpp_CXXFLAGS := -fno-strict-aliasing\n-endif\n-\n-$(eval $(call SetupNativeCompilation, BUILD_LIBFONTMANAGER, \\\n-    NAME := fontmanager, \\\n-    OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-    SRC := $(LIBFONTMANAGER_SRC), \\\n-    EXCLUDE_FILES := $(LIBFONTMANAGER_EXCLUDE_FILES) \\\n-        AccelGlyphCache.c, \\\n-    TOOLCHAIN := TOOLCHAIN_LINK_CXX, \\\n-    CFLAGS := $(CFLAGS_JDKLIB) $(LIBFONTMANAGER_CFLAGS), \\\n-    CXXFLAGS := $(CXXFLAGS_JDKLIB) $(LIBFONTMANAGER_CFLAGS), \\\n-    OPTIMIZATION := $(LIBFONTMANAGER_OPTIMIZATION), \\\n-    CFLAGS_windows = -DCC_NOEX, \\\n-    WARNINGS_AS_ERRORS_xlc := false, \\\n-    DISABLED_WARNINGS_gcc := sign-compare int-to-pointer-cast \\\n-        type-limits missing-field-initializers implicit-fallthrough, \\\n-    DISABLED_WARNINGS_CXX_gcc := reorder delete-non-virtual-dtor strict-overflow \\\n-        maybe-uninitialized, \\\n-    DISABLED_WARNINGS_clang := unused-value incompatible-pointer-types \\\n-        tautological-constant-out-of-range-compare int-to-pointer-cast, \\\n-    DISABLED_WARNINGS_C_solstudio = \\\n-        E_INTEGER_OVERFLOW_DETECTED \\\n-        E_ARG_INCOMPATIBLE_WITH_ARG_L \\\n-        E_ENUM_VAL_OVERFLOWS_INT_MAX, \\\n-    DISABLED_WARNINGS_CXX_solstudio := \\\n-        truncwarn wvarhidenmem wvarhidemem wbadlkginit identexpected \\\n-        hidevf w_novirtualdescr arrowrtn2, \\\n-    DISABLED_WARNINGS_microsoft := 4267 4244 4018 4090 4996 4146 4334 4819 4101, \\\n-    MAPFILE := $(BUILD_LIBFONTMANAGER_MAPFILE), \\\n-    LDFLAGS := $(subst -Wl$(COMMA)-z$(COMMA)defs,,$(LDFLAGS_JDKLIB)) $(LDFLAGS_CXX_JDK) \\\n-        $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-    LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-    LDFLAGS_macosx := -undefined dynamic_lookup, \\\n-    LIBS := $(BUILD_LIBFONTMANAGER_FONTLIB), \\\n-    LIBS_unix := -lawt -ljava -ljvm $(LIBM) $(LIBCXX), \\\n-    LIBS_linux := -lc, \\\n-    LIBS_solaris := -lc, \\\n-    LIBS_aix := -lawt_headless,\\\n-    LIBS_windows := $(WIN_JAVA_LIB) advapi32.lib user32.lib gdi32.lib \\\n-        $(WIN_AWT_LIB), \\\n-    VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-    RC_FLAGS := $(RC_FLAGS) \\\n-        -D \"JDK_FNAME=fontmanager.dll\" \\\n-        -D \"JDK_INTERNAL_NAME=fontmanager\" \\\n-        -D \"JDK_FTYPE=0x2L\", \\\n-    OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libfontmanager, \\\n-))\n-\n-$(BUILD_LIBFONTMANAGER): $(BUILD_LIBAWT)\n-\n-ifneq (, $(findstring $(OPENJDK_TARGET_OS), solaris aix))\n-  $(BUILD_LIBFONTMANAGER): $(BUILD_LIBAWT_HEADLESS)\n-endif\n-\n-ifeq ($(FREETYPE_TO_USE), bundled)\n-  $(BUILD_LIBFONTMANAGER): $(BUILD_LIBFREETYPE)\n-endif\n-\n-TARGETS += $(BUILD_LIBFONTMANAGER)\n-\n-################################################################################\n-\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  LIBJAWT_SRC := $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libjawt\n-  LIBJAWT_CFLAGS := -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt\/windows \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image\/cvutils \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libawt\/java2d\/windows \\\n-      -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-      -I$(TOPDIR)\/src\/java.desktop\/windows\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/include \\\n-      $(LIBJAVA_HEADER_FLAGS) \\\n-      #\n-\n-  ifeq ($(OPENJDK_TARGET_CPU), x86)\n-    KERNEL32_LIB := kernel32.lib\n-  endif\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBJAWT, \\\n-      NAME := jawt, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBJAWT_SRC), \\\n-      INCLUDE_FILES := $(LIBJAWT_INCLUDE_FILES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CXXFLAGS_JDKLIB) \\\n-          -EHsc -DUNICODE -D_UNICODE \\\n-          $(LIBJAWT_CFLAGS), \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) $(LDFLAGS_CXX_JDK), \\\n-      LIBS := $(JDKLIB_LIBS) $(KERNEL32_LIB) advapi32.lib $(WIN_AWT_LIB), \\\n-      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-      RC_FLAGS := $(RC_FLAGS) \\\n-          -D \"JDK_FNAME=jawt.dll\" \\\n-          -D \"JDK_INTERNAL_NAME=jawt\" \\\n-          -D \"JDK_FTYPE=0x2L\", \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libjawt, \\\n-  ))\n-\n-  $(BUILD_LIBJAWT): $(BUILD_LIBAWT)\n-\n-  $(eval $(call SetupCopyFiles, COPY_JAWT_LIB, \\\n-      FILES := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libjawt\/$(LIBRARY_PREFIX)jawt$(STATIC_LIBRARY_SUFFIX), \\\n-      DEST := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE), \\\n-  ))\n-\n-  $(COPY_JAWT_LIB): $(BUILD_LIBJAWT)\n-\n-  TARGETS += $(COPY_JAWT_LIB)\n-\n-else # OPENJDK_TARGET_OS not windows\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    LIBJAWT_SRC := $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libjawt\n-  else\n-    LIBJAWT_SRC := $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libjawt\n-  endif\n-  LIBJAWT_CFLAGS := \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/common\/awt \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS)\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/include \\\n-      $(LIBJAVA_HEADER_FLAGS) \\\n-      #\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    JAWT_LIBS := -lawt_lwawt\n-  else\n-    JAWT_LIBS :=\n-    ifneq ($(OPENJDK_TARGET_OS), solaris)\n-      JAWT_LIBS += -lawt\n-    endif\n-    ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-      JAWT_LIBS += -lawt_xawt\n-    else\n-      JAWT_LIBS += -lawt_headless\n-      HEADLESS_CFLAG += -DHEADLESS\n-    endif\n-  endif\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBJAWT, \\\n-      NAME := jawt, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBJAWT_SRC), \\\n-      INCLUDE_FILES := $(JAWT_FILES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CFLAGS_JDKLIB) \\\n-          $(LIBJAWT_CFLAGS), \\\n-      CFLAGS_linux := $(HEADLESS_CFLAG), \\\n-      CFLAGS_macosx := $(LIBJAWT_CFLAGS_macosx), \\\n-      MAPFILE := $(TOPDIR)\/make\/mapfiles\/libjawt\/mapfile-vers, \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-      LDFLAGS_unix := -L$(INSTALL_LIBRARIES_HERE), \\\n-      LDFLAGS_macosx := -Wl$(COMMA)-rpath$(COMMA)@loader_path, \\\n-      LIBS_unix := $(JAWT_LIBS) $(JDKLIB_LIBS), \\\n-      LIBS_solaris := $(X_LIBS) -lXrender, \\\n-      LIBS_macosx := -framework Cocoa, \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libjawt, \\\n-  ))\n-\n-  ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-    $(BUILD_LIBJAWT): $(BUILD_LIBAWT_XAWT)\n-  else\n-    $(BUILD_LIBJAWT): $(INSTALL_LIBRARIES_HERE)\/$(LIBRARY_PREFIX)awt_headless$(SHARED_LIBRARY_SUFFIX)\n-  endif\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    $(BUILD_LIBJAWT): $(INSTALL_LIBRARIES_HERE)\/$(LIBRARY_PREFIX)awt_lwawt$(SHARED_LIBRARY_SUFFIX)\n-  endif\n-\n-endif # OPENJDK_TARGET_OS\n-\n-TARGETS += $(BUILD_LIBJAWT)\n-\n-################################################################################\n-\n-ifeq ($(ENABLE_HEADLESS_ONLY), false)\n-\n-  LIBSPLASHSCREEN_DIRS := \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/libjavajpeg \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/libsplashscreen \\\n-      #\n-\n-  ifeq ($(USE_EXTERNAL_LIBGIF), true)\n-    GIFLIB_LIBS := -lgif\n-    LIBSPLASHSCREEN_EXCLUDES := giflib\n-  else\n-    LIBSPLASHSCREEN_CFLAGS += -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libsplashscreen\/giflib\n-  endif\n-\n-  ifeq ($(USE_EXTERNAL_LIBJPEG), true)\n-    LIBJPEG_LIBS := -ljpeg\n-  else\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/share\/native\/libjavajpeg\n-    LIBJPEG_CFLAGS := -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libjavajpeg\n-  endif\n-\n-  ifeq ($(USE_EXTERNAL_LIBPNG), false)\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/share\/native\/libsplashscreen\/libpng\n-  else\n-    LIBSPLASHSCREEN_EXCLUDES += libpng\n-  endif\n-\n-  ifneq ($(OPENJDK_TARGET_OS), macosx)\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libsplashscreen\n-  else\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libsplashscreen\n-  endif\n-\n-  ifneq ($(filter $(OPENJDK_TARGET_OS),linux solaris aix), )\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt\/systemscale\n-  endif\n-\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.desktop\/windows\/native\/common\/awt\/systemscale\n-  endif\n-  LIBSPLASHSCREEN_CFLAGS += -DSPLASHSCREEN -DPNG_NO_MMX_CODE -DPNG_ARM_NEON_OPT=0 \\\n-      $(addprefix -I, $(LIBSPLASHSCREEN_DIRS)) \\\n-      $(LIBJAVA_HEADER_FLAGS) \\\n-      #\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_MACOSX\n-    LIBSPLASHSCREEN_CFLAGS += -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libosxapp\n-\n-    BUILD_LIBSPLASHSCREEN_java_awt_SplashScreen.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_gfx_impl.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_gif.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_impl.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_jpeg.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_png.c_CFLAGS := -x objective-c -O0\n-    BUILD_LIBSPLASHSCREEN_splashscreen_sys.m_CFLAGS := -O0\n-\n-  else ifeq ($(OPENJDK_TARGET_OS), windows)\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_WIN32\n-  else\n-    LIBSPLASHSCREEN_CFLAGS += -DWITH_X11 $(X_CFLAGS)\n-  endif\n-\n-  LIBSPLASHSCREEN_LIBS :=\n-\n-  ifeq ($(USE_EXTERNAL_LIBZ), false)\n-    LIBSPLASHSCREEN_DIRS += $(TOPDIR)\/src\/java.base\/share\/native\/libzip\/zlib\n-  else\n-    ifeq ($(OPENJDK_TARGET_OS), macosx)\n-      ifeq ($(USE_EXTERNAL_LIBPNG), false)\n-        # When building our own libpng and using an external libz, we need to\n-        # inject our own libz.h to tweak the exported ZLIB_VERNUM macro. See\n-        # $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libsplashscreen\/libpng\/zlib.h\n-        # for details.\n-        LIBSPLASHSCREEN_CFLAGS += -iquote $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libsplashscreen\/libpng\n-      endif\n-    endif\n-  endif\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    LIBSPLASHSCREEN_LDFLAGS := -L$(INSTALL_LIBRARIES_HERE)\n-    LIBSPLASHSCREEN_LIBS += \\\n-        $(LIBM) -lpthread -liconv -losxapp \\\n-        -framework ApplicationServices \\\n-        -framework Foundation \\\n-        -framework Cocoa \\\n-        -framework JavaNativeFoundation\n-  else ifeq ($(OPENJDK_TARGET_OS), windows)\n-    LIBSPLASHSCREEN_LDFLAGS := -delayload:user32.dll\n-    LIBSPLASHSCREEN_LIBS += kernel32.lib user32.lib gdi32.lib delayimp.lib $(WIN_JAVA_LIB) jvm.lib\n-  else\n-    LIBSPLASHSCREEN_LIBS += $(X_LIBS) -lX11 -lXext $(LIBM) -lpthread -ldl\n-  endif\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBSPLASHSCREEN, \\\n-      NAME := splashscreen, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBSPLASHSCREEN_DIRS), \\\n-      EXCLUDE_FILES := imageioJPEG.c jpegdecoder.c pngtest.c, \\\n-      EXCLUDES := $(LIBSPLASHSCREEN_EXCLUDES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(LIBSPLASHSCREEN_CFLAGS) $(CFLAGS_JDKLIB) \\\n-          $(GIFLIB_CFLAGS) $(LIBJPEG_CFLAGS) $(PNG_CFLAGS) $(LIBZ_CFLAGS), \\\n-      DISABLED_WARNINGS_gcc := sign-compare type-limits unused-result \\\n-          maybe-uninitialized shift-negative-value implicit-fallthrough, \\\n-      DISABLED_WARNINGS_clang := incompatible-pointer-types, \\\n-      DISABLED_WARNINGS_solstudio := E_NEWLINE_NOT_LAST E_DECLARATION_IN_CODE \\\n-          E_STATEMENT_NOT_REACHED, \\\n-      DISABLED_WARNINGS_microsoft := 4018 4244 4267, \\\n-      MAPFILE := $(TOPDIR)\/make\/mapfiles\/libsplashscreen\/mapfile-vers, \\\n-      LDFLAGS := $(LIBSPLASHSCREEN_LDFLAGS) $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN), \\\n-      LIBS := $(JDKLIB_LIBS) $(LIBSPLASHSCREEN_LIBS) $(LIBZ_LIBS) \\\n-          $(GIFLIB_LIBS) $(LIBJPEG_LIBS) $(PNG_LIBS), \\\n-      LIBS_aix := -liconv, \\\n-      VERSIONINFO_RESOURCE := $(GLOBAL_VERSION_INFO_RESOURCE), \\\n-      RC_FLAGS := $(RC_FLAGS) \\\n-          -D \"JDK_FNAME=splashscreen.dll\" \\\n-          -D \"JDK_INTERNAL_NAME=splashscreen\" \\\n-          -D \"JDK_FTYPE=0x2L\", \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libsplashscreen, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBSPLASHSCREEN)\n-\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n-    $(BUILD_LIBSPLASHSCREEN): $(INSTALL_LIBRARIES_HERE)\/$(LIBRARY_PREFIX)osxapp$(SHARED_LIBRARY_SUFFIX)\n-  endif\n-\n-endif\n-\n-################################################################################\n-\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n-\n-  LIBAWT_LWAWT_DIRS := \\\n-      $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt \\\n-      $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/font \\\n-      $(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d \\\n-      #\n-\n-  LIBAWT_LWAWT_CFLAGS := \\\n-      $(addprefix -I, $(LIBAWT_LWAWT_DIRS)) \\\n-      -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop \\\n-      -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt \\\n-      -I$(TOPDIR)\/src\/java.desktop\/unix\/native\/libawt_xawt\/awt \\\n-      -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/font \\\n-      -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/java2d\/opengl \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/awt\/debug \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/common\/java2d\/opengl \\\n-      -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/include \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/awt\/image\/cvutils \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d \\\n-      -I$(TOPDIR)\/src\/java.desktop\/unix\/native\/libawt\/java2d \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/loops \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libawt\/java2d\/pipe \\\n-      -I$(TOPDIR)\/src\/java.desktop\/share\/native\/libmlib_image\/ \\\n-      -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libosxapp \\\n-      $(LIBJAVA_HEADER_FLAGS) \\\n-      #\n-\n-  LIBAWT_LWAWT_EXFILES := fontpath.c awt_Font.c X11Color.c\n-  LIBAWT_LWAWT_EXCLUDES := $(TOPDIR)\/src\/java.desktop\/unix\/native\/common\/awt\/medialib\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBAWT_LWAWT, \\\n-      NAME := awt_lwawt, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(LIBAWT_LWAWT_DIRS), \\\n-      INCLUDE_FILES := $(LIBAWT_LWAWT_FILES), \\\n-      EXCLUDE_FILES := $(LIBAWT_LWAWT_EXFILES), \\\n-      EXCLUDES := $(LIBAWT_LWAWT_EXCLUDES), \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CFLAGS_JDKLIB) \\\n-          $(X_CFLAGS) \\\n-          $(X_LIBS) \\\n-          $(LIBAWT_LWAWT_CFLAGS), \\\n-      DISABLED_WARNINGS_clang := incomplete-implementation enum-conversion \\\n-          deprecated-declarations objc-method-access bitwise-op-parentheses \\\n-          incompatible-pointer-types parentheses-equality extra-tokens, \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN) \\\n-          -L$(INSTALL_LIBRARIES_HERE), \\\n-      LIBS := -lawt -lmlib_image -losxapp -ljvm $(LIBM) \\\n-          -framework Accelerate \\\n-          -framework ApplicationServices \\\n-          -framework AudioToolbox \\\n-          -framework Carbon \\\n-          -framework Cocoa \\\n-          -framework Security \\\n-          -framework ExceptionHandling \\\n-          -framework JavaNativeFoundation \\\n-          -framework JavaRuntimeSupport \\\n-          -framework OpenGL \\\n-          -framework QuartzCore -ljava, \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libawt_lwawt, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBAWT_LWAWT)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(BUILD_LIBAWT)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(BUILD_LIBMLIB_IMAGE)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(BUILD_LIBOSXAPP)\n-\n-  $(BUILD_LIBAWT_LWAWT): $(call FindLib, java.base, java)\n-\n-endif\n-\n-################################################################################\n-\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n-\n-  $(eval $(call SetupNativeCompilation, BUILD_LIBOSXUI, \\\n-      NAME := osxui, \\\n-      OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE), \\\n-      SRC := $(TOPDIR)\/src\/java.desktop\/macosx\/native\/libosxui, \\\n-      OPTIMIZATION := LOW, \\\n-      CFLAGS := $(CFLAGS_JDKLIB) \\\n-          -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libosxui \\\n-          -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt \\\n-          -I$(TOPDIR)\/src\/java.desktop\/macosx\/native\/libosxapp \\\n-          -I$(TOPDIR)\/src\/java.base\/share\/native\/libjava \\\n-          -I$(TOPDIR)\/src\/java.base\/$(OPENJDK_TARGET_OS_TYPE)\/native\/libjava \\\n-          -I$(SUPPORT_OUTPUTDIR)\/headers\/java.desktop,  \\\n-      LDFLAGS := $(LDFLAGS_JDKLIB) \\\n-          $(call SET_SHARED_LIBRARY_ORIGIN) \\\n-          -Wl$(COMMA)-rpath$(COMMA)@loader_path \\\n-          -L$(INSTALL_LIBRARIES_HERE), \\\n-      LIBS := -lawt -losxapp -lawt_lwawt \\\n-          -framework Cocoa \\\n-          -framework Carbon \\\n-          -framework ApplicationServices \\\n-          -framework JavaNativeFoundation \\\n-          -framework JavaRuntimeSupport \\\n-          -ljava -ljvm, \\\n-      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)\/native\/$(MODULE)\/libosxui, \\\n-  ))\n-\n-  TARGETS += $(BUILD_LIBOSXUI)\n-\n-  $(BUILD_LIBOSXUI): $(BUILD_LIBAWT)\n-\n-  $(BUILD_LIBOSXUI): $(BUILD_LIBOSXAPP)\n-\n-  $(BUILD_LIBOSXUI): $(BUILD_LIBAWT_LWAWT)\n-\n-  #$(BUILD_LIBOSXUI): $(call FindLib, java.base, java)\n-\n-endif\n-\n-################################################################################\n-\n-# Hook to include the corresponding custom file, if present.\n-$(eval $(call IncludeCustomExtension, lib\/Awt2dLibraries.gmk))\n","filename":"make\/lib\/Awt2dLibraries.gmk","additions":0,"deletions":1130,"binary":false,"changes":1130,"status":"deleted"}]}