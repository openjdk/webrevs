{"files":[{"patch":"@@ -1,1133 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file defines build profiles for the JIB tool and others.\n- *\n- * A build profile defines a set of configuration options and external\n- * dependencies that we for some reason or other care about specifically.\n- * Typically, build profiles are defined for the build configurations we\n- * build regularly.\n- *\n- * Contract against this file from the tools that use it, is to provide\n- * a function on the form:\n- *\n- * getJibProfiles(input)\n- *\n- * which returns an object graph describing the profiles and their\n- * dependencies. The name of the function is based on the name of this\n- * file, minus the extension and the '-', camel cased and prefixed with\n- * 'get'.\n- *\n- *\n- * The parameter 'input' is an object that optionally contains  some data.\n- * Optionally because a tool may read the configuration for different purposes.\n- * To initially get a list of available profiles, the active profile may not\n- * yet be known for instance.\n- *\n- * Data that may be set on the input object:\n- *\n- * input.profile = <name of active profile>\n- *\n- * If the active profile is set, the following data from it must also\n- * be provided:\n- *\n- * input.profile\n- * input.build_id\n- * input.target_os\n- * input.target_cpu\n- * input.build_os\n- * input.build_cpu\n- * input.target_platform\n- * input.build_platform\n- * \/\/ The build_osenv_* variables describe the unix layer on Windows systems,\n- * \/\/ i.e. Cygwin, which may also be 32 or 64 bit.\n- * input.build_osenv\n- * input.build_osenv_cpu\n- * input.build_osenv_platform\n- *\n- * For more complex nested attributes, there is a method \"get\":\n- *\n- * input.get(\"<dependency>\", \"<attribute>\")\n- *\n- * Valid attributes are:\n- * install_path\n- * download_path\n- * download_dir\n- *\n- *\n- * The output data generated by this configuration file has the following\n- * format:\n- *\n- * data: {\n- *   \/\/ Identifies the version of this format to the tool reading it\n- *   format_version: \"1.0\",\n- *\n- *   \/\/ Name of base outputdir. JIB assumes the actual output dir is formed\n- *   \/\/ by adding the configuration name: <output_basedir>\/<config-name>\n- *   output_basedir: \"build\",\n- *   \/\/ Configure argument to use to specify configuration name\n- *   configuration_configure_arg:\n- *   \/\/ Make argument to use to specify configuration name\n- *   configuration_make_arg:\n- *\n- *   profiles: {\n- *     <profile-name>: {\n- *       \/\/ Name of os the profile is built to run on\n- *       target_os; <string>\n- *       \/\/ Name of cpu the profile is built to run on\n- *       target_cpu; <string>\n- *       \/\/ Combination of target_os and target_cpu for convenience\n- *       target_platform; <string>\n- *       \/\/ Name of os the profile is built on\n- *       build_os; <string>\n- *       \/\/ Name of cpu the profile is built on\n- *       build_cpu; <string>\n- *       \/\/ Combination of build_os and build_cpu for convenience\n- *       build_platform; <string>\n- *\n- *       \/\/ List of dependencies needed to build this profile\n- *       dependencies: <Array of strings>\n- *\n- *       \/\/ List of configure args to use for this profile\n- *       configure_args: <Array of strings>\n- *\n- *       \/\/ List of free form labels describing aspects of this profile\n- *       labels: <Array of strings>\n- *     }\n- *   }\n- *\n- *   \/\/ Dependencies use a Maven like deployment structure\n- *   dependencies: {\n- *     <dependency-name>: {\n- *       \/\/ Organization part of path defining this dependency\n- *       organization: <string>\n- *       \/\/ File extension for this dependency\n- *       ext: <string>\n- *       \/\/ Module part of path for defining this dependency,\n- *       \/\/ defaults to <dependency-name>\n- *       module: <string>\n- *       \/\/ Revision part of path for defining this dependency\n- *       revision: <string>\n- *\n- *       \/\/ List of configure args to add when using this dependency,\n- *       \/\/ defaults to\n- *       \/\/ \"--with-<dependency-name>=input.get(\"<dependency-name\", \"install_path\")\"\n- *       configure_args: <array of strings>\n- *\n- *       \/\/ Name of environment variable to set when using this dependency\n- *       \/\/ when running make\n- *       environment_name: <string>\n- *       \/\/ Value of environment variable to set when using this dependency\n- *       \/\/ when running make\n- *       environment_value: <string>\n- *\n- *       \/\/ Value to add to the PATH variable when using this dependency,\n- *       \/\/ applies to both make and configure\n- *       environment_path: <string>\n- *     }\n- *\n- *     <dependency-name>: {\n- *       \/\/ For certain dependencies where a legacy distribution mechanism is\n- *       \/\/ already in place, the \"javare\" server layout is also supported\n- *       \/\/ Indicate that an alternate server source and layout should be used\n- *       server: \"javare\"\n- *\n- *       \/\/ For \"javare\", a combination of module, revision,\n- *       \/\/ build number (optional), files and checksum file is possible for\n- *       \/\/ artifacts following the standard layout.\n- *       module: <string>\n- *       revision: <string>\n- *       build_number: <string>\n- *       checksum_file: <string>\n- *       file: <string>\n- *\n- *       \/\/ For other files, use checksum path and path instead\n- *       checksum_path: <string>\n- *       path: <string>\n- *     }\n- *   }\n- * }\n- *\/\n-\n-\/**\n- * Main entry to generate the profile configuration\n- *\n- * @param input External data to use for generating the configuration\n- * @returns {{}} Profile configuration\n- *\/\n-var getJibProfiles = function (input) {\n-\n-    var data = {};\n-\n-    \/\/ Identifies the version of this format to the tool reading it.\n-    \/\/ 1.1 signifies that the publish, publish-src and get-src features are usable.\n-    data.format_version = \"1.1\";\n-\n-    \/\/ Organization, product and version are used when uploading\/publishing build results\n-    data.organization = \"\";\n-    data.product = \"jdk\";\n-    data.version = getVersion();\n-\n-    \/\/ The base directory for the build output. JIB will assume that the\n-    \/\/ actual build directory will be <output_basedir>\/<configuration>\n-    data.output_basedir = \"build\";\n-    \/\/ The configure argument to use to specify the name of the configuration\n-    data.configuration_configure_arg = \"--with-conf-name=\";\n-    \/\/ The make argument to use to specify the name of the configuration\n-    data.configuration_make_arg = \"CONF_NAME=\";\n-\n-    \/\/ Exclude list to use when Jib creates a source bundle\n-    data.src_bundle_excludes = \".\/build .build webrev* *\/webrev* *\/*\/webrev* *\/*\/*\/webrev* .hg *\/.hg *\/*\/.hg *\/*\/*\/.hg\";\n-    \/\/ Include list to use when creating a minimal jib source bundle which\n-    \/\/ contains just the jib configuration files.\n-    data.conf_bundle_includes = \"*\/conf\/jib-profiles.* make\/autoconf\/version-numbers\"\n-\n-    \/\/ Define some common values\n-    var common = getJibProfilesCommon(input, data);\n-    \/\/ Generate the profiles part of the configuration\n-    data.profiles = getJibProfilesProfiles(input, common, data);\n-    \/\/ Generate the dependencies part of the configuration\n-    data.dependencies = getJibProfilesDependencies(input, common, data);\n-\n-    return data;\n-};\n-\n-\/**\n- * Generates some common values\n- *\n- * @param input External data to use for generating the configuration\n- * @returns Common values\n- *\/\n-var getJibProfilesCommon = function (input, data) {\n-    var common = {};\n-\n-    common.organization = \"jpg.infra.builddeps\";\n-    common.build_id = getBuildId(input);\n-    common.build_number = input.build_number != null ? input.build_number : \"0\";\n-\n-    \/\/ List of the main profile names used for iteration\n-    common.main_profile_names = [\n-        \"linux-x64\", \"linux-x86\", \"macosx-x64\", \"solaris-x64\",\n-        \"solaris-sparcv9\", \"windows-x64\", \"windows-x86\",\n-        \"linux-aarch64\", \"linux-arm64\", \"linux-arm-vfp-hflt\",\n-        \"linux-arm-vfp-hflt-dyn\"\n-    ];\n-\n-    \/\/ These are the base setttings for all the main build profiles.\n-    common.main_profile_base = {\n-        dependencies: [\"boot_jdk\", \"gnumake\", \"jtreg\", \"jib\"],\n-        default_make_targets: [\"product-bundles\", \"test-bundles\"],\n-        configure_args: concat([\"--enable-jtreg-failure-handler\"],\n-                               versionArgs(input, common))\n-    };\n-    \/\/ Extra settings for debug profiles\n-    common.debug_suffix = \"-debug\";\n-    common.debug_profile_base = {\n-        configure_args: [\"--enable-debug\"],\n-        labels: \"debug\"\n-    };\n-    \/\/ Extra settings for slowdebug profiles\n-    common.slowdebug_suffix = \"-slowdebug\";\n-    common.slowdebug_profile_base = {\n-        configure_args: [\"--with-debug-level=slowdebug\"],\n-        labels: \"slowdebug\"\n-    };\n-    \/\/ Extra settings for openjdk only profiles\n-    common.open_suffix = \"-open\";\n-    common.open_profile_base = {\n-        configure_args: [\"--enable-openjdk-only\"],\n-        labels: \"open\"\n-    };\n-\n-    common.configure_args_64bit = [\"--with-target-bits=64\"];\n-    common.configure_args_32bit = [\"--with-target-bits=32\"];\n-\n-    \/**\n-     * Define common artifacts template for all main profiles\n-     * @param o - Object containing data for artifacts\n-     *\/\n-    common.main_profile_artifacts = function (o) {\n-        var jdk_subdir = (o.jdk_subdir != null ? o.jdk_subdir : \"jdk-\" + data.version);\n-        var jre_subdir = (o.jre_subdir != null ? o.jre_subdir : \"jre-\" + data.version);\n-        var pf = o.platform\n-        return {\n-            artifacts: {\n-                jdk: {\n-                    local: \"bundles\/\\\\(jdk.*bin.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jdk_subdir,\n-                    exploded: \"images\/jdk\"\n-                },\n-                jre: {\n-                    local: \"bundles\/\\\\(jre.*bin.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jre-\" + data.version + \"_\" + pf + \"_bin.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jre_subdir,\n-                    exploded: \"images\/jre\"\n-                },\n-                test: {\n-                    local: \"bundles\/\\\\(jdk.*bin-tests.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-tests.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    exploded: \"images\/test\"\n-                },\n-                test_demos: {\n-                    local: \"bundles\/\\\\(jdk.*bin-tests-demos.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-tests-demos.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    exploded: \"images\/test\"\n-                },\n-                jdk_symbols: {\n-                    local: \"bundles\/\\\\(jdk.*bin-symbols.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-symbols.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jdk_subdir,\n-                    exploded: \"images\/jdk\"\n-                },\n-                jre_symbols: {\n-                    local: \"bundles\/\\\\(jre.*bin-symbols.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jre-\" + data.version + \"_\" + pf + \"_bin-symbols.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jre_subdir,\n-                    exploded: \"images\/jre\"\n-                }\n-            }\n-        };\n-    };\n-\n-\n-    \/**\n-     * Define common artifacts template for all debug profiles\n-     * @param o - Object containing data for artifacts\n-     *\/\n-    common.debug_profile_artifacts = function (o) {\n-        var jdk_subdir = \"jdk-\" + data.version + \"\/fastdebug\";\n-        var jre_subdir = \"jre-\" + data.version + \"\/fastdebug\";\n-        var pf = o.platform\n-        return {\n-            artifacts: {\n-                jdk: {\n-                    local: \"bundles\/\\\\(jdk.*bin-debug.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-debug.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jdk_subdir,\n-                    exploded: \"images\/jdk\"\n-                },\n-                jre: {\n-                    local: \"bundles\/\\\\(jre.*bin-debug.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jre-\" + data.version + \"_\" + pf + \"_bin-debug.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jre_subdir,\n-                    exploded: \"images\/jre\"\n-                },\n-                test: {\n-                    local: \"bundles\/\\\\(jdk.*bin-tests-debug.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-tests-debug.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    exploded: \"images\/test\"\n-                },\n-                jdk_symbols: {\n-                    local: \"bundles\/\\\\(jdk.*bin-debug-symbols.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jdk-\" + data.version + \"_\" + pf + \"_bin-debug-symbols.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jdk_subdir,\n-                    exploded: \"images\/jdk\"\n-                },\n-                jre_symbols: {\n-                    local: \"bundles\/\\\\(jre.*bin-debug-symbols.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/\" + pf + \"\/jre-\" + data.version + \"_\" + pf + \"_bin-debug-symbols.tar.gz\",\n-                        \"bundles\/\" + pf + \"\/\\\\1\"\n-                    ],\n-                    subdir: jre_subdir,\n-                    exploded: \"images\/jre\"\n-                }\n-            }\n-        };\n-    };\n-\n-    common.boot_jdk_version = \"9\";\n-    common.boot_jdk_home = input.get(\"boot_jdk\", \"home_path\") + \"\/jdk-\"\n-        + common.boot_jdk_version\n-        + (input.build_os == \"macosx\" ? \".jdk\/Contents\/Home\" : \"\");\n-\n-    return common;\n-};\n-\n-\/**\n- * Generates the profiles part of the configuration.\n- *\n- * @param input External data to use for generating the configuration\n- * @param common The common values\n- * @returns {{}} Profiles part of the configuration\n- *\/\n-var getJibProfilesProfiles = function (input, common, data) {\n-    \/\/ Main SE profiles\n-    var profiles = {\n-\n-        \"linux-x64\": {\n-            target_os: \"linux\",\n-            target_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\", \"graphviz\", \"pandoc\"],\n-            configure_args: concat(common.configure_args_64bit,\n-                \"--enable-full-docs\", \"--with-zlib=system\"),\n-            default_make_targets: [\"docs-bundles\"],\n-        },\n-\n-        \"linux-x86\": {\n-            target_os: \"linux\",\n-            target_cpu: \"x86\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\"],\n-            configure_args: concat(common.configure_args_32bit,\n-                \"--with-jvm-variants=minimal,server\", \"--with-zlib=system\"),\n-        },\n-\n-        \"macosx-x64\": {\n-            target_os: \"macosx\",\n-            target_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\"],\n-            configure_args: concat(common.configure_args_64bit, \"--with-zlib=system\",\n-                \"--with-macosx-version-max=10.7.0\"),\n-        },\n-\n-        \"solaris-x64\": {\n-            target_os: \"solaris\",\n-            target_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\", \"cups\"],\n-            configure_args: concat(common.configure_args_64bit,\n-                \"--with-zlib=system\", \"--enable-dtrace\"),\n-        },\n-\n-        \"solaris-sparcv9\": {\n-            target_os: \"solaris\",\n-            target_cpu: \"sparcv9\",\n-            dependencies: [\"devkit\", \"autoconf\", \"cups\"],\n-            configure_args: concat(common.configure_args_64bit,\n-                \"--with-zlib=system\", \"--enable-dtrace\"),\n-        },\n-\n-        \"windows-x64\": {\n-            target_os: \"windows\",\n-            target_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\"],\n-            configure_args: concat(common.configure_args_64bit),\n-        },\n-\n-        \"windows-x86\": {\n-            target_os: \"windows\",\n-            target_cpu: \"x86\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\"],\n-            configure_args: concat(common.configure_args_32bit),\n-        },\n-\n-        \"linux-aarch64\": {\n-            target_os: \"linux\",\n-            target_cpu: \"aarch64\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\", \"build_devkit\", \"cups\"],\n-            configure_args: [\n-                \"--openjdk-target=aarch64-linux-gnu\"\n-            ],\n-        },\n-\n-        \"linux-arm64\": {\n-            target_os: \"linux\",\n-            target_cpu: \"aarch64\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\", \"build_devkit\", \"cups\", \"headless_stubs\"],\n-            configure_args: [\n-                \"--with-cpu-port=arm64\",\n-                \"--with-jvm-variants=server\",\n-                \"--openjdk-target=aarch64-linux-gnu\",\n-                \"--enable-headless-only\"\n-            ],\n-        },\n-\n-        \"linux-arm-vfp-hflt\": {\n-            target_os: \"linux\",\n-            target_cpu: \"arm\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\", \"autoconf\", \"build_devkit\", \"cups\"],\n-            configure_args: [\n-                \"--with-jvm-variants=minimal1,client\",\n-                \"--with-x=\" + input.get(\"devkit\", \"install_path\") + \"\/arm-linux-gnueabihf\/libc\/usr\/X11R6-PI\",\n-                \"--openjdk-target=arm-linux-gnueabihf\",\n-                \"--with-abi-profile=arm-vfp-hflt\"\n-            ],\n-        },\n-\n-        \/\/ Special version of the SE profile adjusted to be testable on arm64 hardware.\n-        \"linux-arm-vfp-hflt-dyn\": {\n-            configure_args: \"--with-stdc++lib=dynamic\"\n-        }\n-    };\n-    \/\/ Let linux-arm-vfp-hflt-dyn inherit everything from linux-arm-vfp-hflt\n-    profiles[\"linux-arm-vfp-hflt-dyn\"] = concatObjects(\n-        profiles[\"linux-arm-vfp-hflt-dyn\"], profiles[\"linux-arm-vfp-hflt\"]);\n-\n-    \/\/ Add the base settings to all the main profiles\n-    common.main_profile_names.forEach(function (name) {\n-        profiles[name] = concatObjects(common.main_profile_base, profiles[name]);\n-    });\n-\n-    \/\/ Generate debug versions of all the main profiles\n-    common.main_profile_names.forEach(function (name) {\n-        var debugName = name + common.debug_suffix;\n-        profiles[debugName] = concatObjects(profiles[name],\n-                                            common.debug_profile_base);\n-    });\n-    \/\/ Generate slowdebug versions of all the main profiles\n-    common.main_profile_names.forEach(function (name) {\n-        var debugName = name + common.slowdebug_suffix;\n-        profiles[debugName] = concatObjects(profiles[name],\n-                                            common.slowdebug_profile_base);\n-    });\n-\n-    \/\/ Profiles for building the zero jvm variant. These are used for verification\n-    \/\/ in JPRT.\n-    var zeroProfiles = {\n-        \"linux-x64-zero\": {\n-            target_os: \"linux\",\n-            target_cpu: \"x64\",\n-            dependencies: [\"devkit\"],\n-            configure_args: concat(common.configure_args_64bit, [\n-                \"--with-zlib=system\",\n-                \"--with-jvm-variants=zero\",\n-                \"--enable-libffi-bundling\"\n-            ])\n-        },\n-\n-        \"linux-x86-zero\": {\n-            target_os: \"linux\",\n-            target_cpu: \"x86\",\n-            build_cpu: \"x64\",\n-            dependencies: [\"devkit\"],\n-            configure_args:  concat(common.configure_args_32bit, [\n-                \"--with-zlib=system\",\n-                \"--with-jvm-variants=zero\",\n-                \"--enable-libffi-bundling\"\n-            ])\n-        }\n-    }\n-    profiles = concatObjects(profiles, zeroProfiles);\n-\n-    \/\/ Add the base settings to the zero profiles and generate debug profiles\n-    Object.keys(zeroProfiles).forEach(function (name) {\n-        var debugName = name + common.debug_suffix;\n-        profiles[name] = concatObjects(common.main_profile_base, profiles[name]);\n-        profiles[debugName] = concatObjects(profiles[name], common.debug_profile_base);\n-    });\n-\n-    \/\/\n-    \/\/ Define artifacts for profiles\n-    \/\/\n-    \/\/ Macosx bundles are named osx\n-    \/\/ tar.gz.\n-    var artifactData = {\n-        \"linux-x64\": {\n-            platform: \"linux-x64\",\n-        },\n-        \"linux-x86\": {\n-            platform: \"linux-x86\",\n-        },\n-        \"macosx-x64\": {\n-            platform: \"osx-x64\",\n-            jdk_subdir: \"jdk-\" + data.version +  \".jdk\/Contents\/Home\",\n-            jre_subdir: \"jre-\" + data.version +  \".jre\/Contents\/Home\"\n-        },\n-        \"solaris-x64\": {\n-            platform: \"solaris-x64\",\n-        },\n-        \"solaris-sparcv9\": {\n-            platform: \"solaris-sparcv9\",\n-        },\n-        \"windows-x64\": {\n-            platform: \"windows-x64\",\n-        },\n-        \"windows-x86\": {\n-            platform: \"windows-x86\",\n-        },\n-       \"linux-aarch64\": {\n-            platform: \"linux-aarch64\",\n-        },\n-       \"linux-arm64\": {\n-            platform: \"linux-arm64-vfp-hflt\",\n-        },\n-        \"linux-arm-vfp-hflt\": {\n-            platform: \"linux-arm32-vfp-hflt\",\n-        },\n-        \"linux-arm-vfp-hflt-dyn\": {\n-            platform: \"linux-arm32-vfp-hflt-dyn\",\n-        }\n-    }\n-    \/\/ Generate common artifacts for all main profiles\n-    Object.keys(artifactData).forEach(function (name) {\n-        profiles[name] = concatObjects(profiles[name],\n-            common.main_profile_artifacts(artifactData[name]));\n-    });\n-\n-    \/\/ Generate common artifacts for all debug profiles\n-    Object.keys(artifactData).forEach(function (name) {\n-        var debugName = name + common.debug_suffix;\n-        profiles[debugName] = concatObjects(profiles[debugName],\n-            common.debug_profile_artifacts(artifactData[name]));\n-    });\n-\n-    profilesArtifacts = {\n-        \"linux-x64\": {\n-            artifacts: {\n-                doc_api_spec: {\n-                    local: \"bundles\/\\\\(jdk.*doc-api-spec.tar.gz\\\\)\",\n-                    remote: [\n-                        \"bundles\/common\/jdk-\" + data.version + \"_doc-api-spec.tar.gz\",\n-                        \"bundles\/linux-x64\/\\\\1\"\n-                    ],\n-                },\n-            }\n-        }\n-    };\n-    profiles = concatObjects(profiles, profilesArtifacts);\n-\n-    \/\/ Generate open only profiles for all the main and debug profiles.\n-    \/\/ Rewrite artifact remote paths by adding \"openjdk\/GPL\".\n-    common.main_profile_names.forEach(function (name) {\n-        var openName = name + common.open_suffix;\n-        profiles[openName] = concatObjects(profiles[name],\n-            common.open_profile_base);\n-        for (artifactName in profiles[openName].artifacts) {\n-            var artifact = profiles[openName].artifacts[artifactName];\n-            artifact.remote = replaceAll(\n-                \"bundles\\\/\", \"bundles\/openjdk\/GPL\/\",\n-                (artifact.remote != null ? artifact.remote : artifact.local));\n-        }\n-        var debugName = name + common.debug_suffix;\n-        var openDebugName = name + common.open_suffix + common.debug_suffix;\n-        profiles[openDebugName] = concatObjects(profiles[debugName],\n-            common.open_profile_base);\n-        for (artifactName in profiles[openDebugName].artifacts) {\n-            var artifact = profiles[openDebugName].artifacts[artifactName];\n-            artifact.remote = replaceAll(\n-                \"bundles\\\/\", \"bundles\/openjdk\/GPL\/\",\n-                (artifact.remote != null ? artifact.remote : artifact.local));\n-        }\n-    });\n-\n-    \/\/ Define the reference implementation profiles. These are basically the same\n-    \/\/ as the open profiles, but upload artifacts to a different location.\n-    common.main_profile_names.forEach(function (name) {\n-        var riName = name + \"-ri\";\n-        var riDebugName = riName + common.debug_suffix;\n-        var openName = name + common.open_suffix;\n-        var openDebugName = openName + common.debug_suffix;\n-        profiles[riName] = clone(profiles[openName]);\n-        profiles[riDebugName] = clone(profiles[openDebugName]);\n-        \/\/ Rewrite all remote dirs to \"bundles\/openjdk\/BCL\/...\"\n-        for (artifactName in profiles[riName].artifacts) {\n-            var artifact = profiles[riName].artifacts[artifactName];\n-            artifact.remote = replaceAll(\n-                \"\\\/GPL\\\/\", \"\/BCL\/\",\n-                (artifact.remote != null ? artifact.remote : artifact.local));\n-        }\n-    });\n-\n-    \/\/ For open profiles, the non-debug jdk bundles, need an \"open\" prefix on the\n-    \/\/ remote bundle names, forming the word \"openjdk\". See JDK-8188789.\n-    common.main_profile_names.forEach(function (name) {\n-        var openName = name + common.open_suffix;\n-        profiles[openName].artifacts[\"jdk\"].remote = replaceAll(\n-            \"\\\/jdk-\", \"\/openjdk-\",\n-            replaceAll(\"\\\/\\\\1\", \"\/open\\\\1\",\n-                       profiles[openName].artifacts[\"jdk\"].remote));\n-    });\n-\n-    \/\/ Profiles used to run tests. Used in JPRT and Mach 5.\n-    var testOnlyProfiles = {\n-        \"run-test-jprt\": {\n-            target_os: input.build_os,\n-            target_cpu: input.build_cpu,\n-            dependencies: [ \"jtreg\", \"gnumake\", \"boot_jdk\", \"devkit\", \"jib\" ],\n-            labels: \"test\",\n-            environment: {\n-                \"JT_JAVA\": common.boot_jdk_home\n-            }\n-        },\n-\n-        \"run-test\": {\n-            target_os: input.build_os,\n-            target_cpu: input.build_cpu,\n-            dependencies: [ \"jtreg\", \"gnumake\", \"boot_jdk\", \"devkit\", \"jib\" ],\n-            labels: \"test\",\n-            environment: {\n-                \"JT_JAVA\": common.boot_jdk_home\n-            }\n-        }\n-    };\n-    profiles = concatObjects(profiles, testOnlyProfiles);\n-\n-    \/\/ Profiles used to run tests using Jib for internal dependencies.\n-    var testedProfile = input.testedProfile;\n-    if (testedProfile == null) {\n-        testedProfile = input.build_os + \"-\" + input.build_cpu;\n-    }\n-    var testOnlyProfilesPrebuilt = {\n-        \"run-test-prebuilt\": {\n-            target_os: input.build_os,\n-            target_cpu: input.build_cpu,\n-            src: \"src.conf\",\n-            dependencies: [ \"jtreg\", \"gnumake\", \"boot_jdk\", \"jib\", testedProfile + \".jdk\",\n-                testedProfile + \".test\", \"src.full\"\n-            ],\n-            work_dir: input.get(\"src.full\", \"install_path\") + \"\/test\",\n-            environment: {\n-                \"JT_JAVA\": common.boot_jdk_home,\n-                \"PRODUCT_HOME\": input.get(testedProfile + \".jdk\", \"home_path\"),\n-                \"TEST_IMAGE_DIR\": input.get(testedProfile + \".test\", \"home_path\"),\n-                \"TEST_OUTPUT_DIR\": input.src_top_dir\n-            },\n-            labels: \"test\"\n-        }\n-    };\n-\n-    \/\/ If actually running the run-test-prebuilt profile, verify that the input\n-    \/\/ variable is valid and if so, add the appropriate target_* values from\n-    \/\/ the tested profile.\n-    if (input.profile == \"run-test-prebuilt\") {\n-        if (profiles[testedProfile] == null) {\n-            error(\"testedProfile is not defined: \" + testedProfile);\n-        }\n-    }\n-    if (profiles[testedProfile] != null) {\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_os\"]\n-            = profiles[testedProfile][\"target_os\"];\n-        testOnlyProfilesPrebuilt[\"run-test-prebuilt\"][\"target_cpu\"]\n-            = profiles[testedProfile][\"target_cpu\"];\n-    }\n-    profiles = concatObjects(profiles, testOnlyProfilesPrebuilt);\n-\n-    \/\/ On macosx add the devkit bin dir to the path in all the run-test profiles.\n-    \/\/ This gives us a guaranteed working version of lldb for the jtreg failure handler.\n-    if (input.build_os == \"macosx\") {\n-        macosxRunTestExtra = {\n-            dependencies: [ \"devkit\" ],\n-            environment_path: input.get(\"devkit\", \"install_path\")\n-                + \"\/Xcode.app\/Contents\/Developer\/usr\/bin\"\n-        };\n-        profiles[\"run-test\"] = concatObjects(profiles[\"run-test\"], macosxRunTestExtra);\n-        profiles[\"run-test-jprt\"] = concatObjects(profiles[\"run-test-jprt\"], macosxRunTestExtra);\n-        profiles[\"run-test-prebuilt\"] = concatObjects(profiles[\"run-test-prebuilt\"], macosxRunTestExtra);\n-    }\n-    \/\/ On windows we want the debug symbols available at test time\n-    if (input.build_os == \"windows\") {\n-        windowsRunTestPrebuiltExtra = {\n-            dependencies: [ testedProfile + \".jdk_symbols\" ],\n-            environment: {\n-                \"PRODUCT_SYMBOLS_HOME\": input.get(testedProfile + \".jdk_symbols\", \"home_path\"),\n-            }\n-        };\n-        profiles[\"run-test-prebuilt\"] = concatObjects(profiles[\"run-test-prebuilt\"],\n-            windowsRunTestPrebuiltExtra);\n-    }\n-\n-    \/\/ Generate the missing platform attributes\n-    profiles = generatePlatformAttributes(profiles);\n-    profiles = generateDefaultMakeTargetsConfigureArg(common, profiles);\n-    return profiles;\n-};\n-\n-\/**\n- * Generate the dependencies part of the configuration\n- *\n- * @param input External data to use for generating the configuration\n- * @param common The common values\n- * @returns {{}} Dependencies part of configuration\n- *\/\n-var getJibProfilesDependencies = function (input, common) {\n-\n-    var devkit_platform_revisions = {\n-        linux_x64: \"gcc4.9.2-OEL6.4+1.2\",\n-        macosx_x64: \"Xcode6.3-MacOSX10.9+1.0\",\n-        solaris_x64: \"SS12u4-Solaris11u1+1.0\",\n-        solaris_sparcv9: \"SS12u4-Solaris11u1+1.1\",\n-        windows_x64: \"VS2013SP4+1.0\",\n-        linux_aarch64: (input.profile != null && input.profile.indexOf(\"arm64\") >= 0\n-                    ? \"gcc-linaro-aarch64-linux-gnu-4.8-2013.11_linux+1.0\"\n-                    : \"gcc7.3.0-Fedora27+1.0\"),\n-        linux_arm: (input.profile != null && input.profile.indexOf(\"hflt\") >= 0\n-                    ? \"gcc-linaro-arm-linux-gnueabihf-raspbian-2012.09-20120921_linux+1.0\"\n-                    : \"arm-linaro-4.7+1.0\")\n-    };\n-\n-    var devkit_platform = (input.target_cpu == \"x86\"\n-        ? input.target_os + \"_x64\"\n-        : input.target_platform);\n-\n-    var boot_jdk_platform = (input.build_os == \"macosx\" ? \"osx\" : input.build_os)\n-        + \"-\" + input.build_cpu;\n-\n-    var makeBinDir = (input.build_os == \"windows\"\n-        ? input.get(\"gnumake\", \"install_path\") + \"\/cygwin\/bin\"\n-        : input.get(\"gnumake\", \"install_path\") + \"\/bin\");\n-\n-    var dependencies = {\n-\n-        boot_jdk: {\n-            server: \"jpg\",\n-            product: \"jdk\",\n-            version: common.boot_jdk_version,\n-            build_number: \"181\",\n-            file: \"bundles\/\" + boot_jdk_platform + \"\/jdk-\" + common.boot_jdk_version + \"_\"\n-                + boot_jdk_platform + \"_bin.tar.gz\",\n-            configure_args: \"--with-boot-jdk=\" + common.boot_jdk_home,\n-            environment_path: common.boot_jdk_home + \"\/bin\"\n-        },\n-\n-        devkit: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            module: \"devkit-\" + devkit_platform,\n-            revision: devkit_platform_revisions[devkit_platform]\n-        },\n-\n-        build_devkit: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            module: \"devkit-\" + input.build_platform,\n-            revision: devkit_platform_revisions[input.build_platform]\n-        },\n-\n-        cups: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            revision: \"1.0118+1.0\"\n-        },\n-\n-        jtreg: {\n-            server: \"javare\",\n-            revision: \"4.2\",\n-            build_number: \"b12\",\n-            checksum_file: \"MD5_VALUES\",\n-            file: \"jtreg_bin-4.2.zip\",\n-            environment_name: \"JT_HOME\",\n-            environment_path: input.get(\"jtreg\", \"install_path\") + \"\/jtreg\/bin\"\n-        },\n-\n-        gnumake: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            revision: \"4.0+1.0\",\n-\n-            module: (input.build_os == \"windows\"\n-                ? \"gnumake-\" + input.build_osenv_platform\n-                : \"gnumake-\" + input.build_platform),\n-\n-            configure_args: \"MAKE=\" + makeBinDir + \"\/make\",\n-\n-            environment: {\n-                \"MAKE\": makeBinDir + \"\/make\"\n-            },\n-\n-            environment_path: makeBinDir\n-        },\n-\n-        autoconf: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            revision: \"2.69+1.0.1\",\n-            module: (input.build_os == \"windows\"\n-                ? \"autoconf-\" + input.build_osenv_platform\n-                : \"autoconf-\" + input.build_platform),\n-            configure_args: \"\",\n-            environment_path: input.get(\"autoconf\", \"install_path\")\n-        },\n-\n-        graphviz: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            revision: \"2.38.0-1+1.1\",\n-            module: \"graphviz-\" + input.target_platform,\n-            configure_args: \"DOT=\" + input.get(\"graphviz\", \"install_path\") + \"\/dot\",\n-            environment_path: input.get(\"graphviz\", \"install_path\")\n-        },\n-\n-        pandoc: {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            revision: \"1.17.2+1.0\",\n-            module: \"pandoc-\" + input.target_platform,\n-            configure_args: \"PANDOC=\" + input.get(\"pandoc\", \"install_path\") + \"\/pandoc\/pandoc\",\n-            environment_path: input.get(\"pandoc\", \"install_path\") + \"\/pandoc\"\n-        },\n-\n-        \/\/ This adds java jib as a dependency for the test artifacts resolver\n-        jib: {\n-            organization: \"com.oracle.java.jib\",\n-            ext: \"zip\",\n-            classifier: \"distribution\",\n-            revision: \"3.0-SNAPSHOT\",\n-            environment_name: \"JIB_JAR\",\n-            environment_value: input.get(\"jib\", \"install_path\")\n-                + \"\/jib-3.0-SNAPSHOT-distribution\/lib\/jib-3.0-SNAPSHOT.jar\"\n-       }\n-    };\n-\n-    \/\/ Need to add a value for the Visual Studio tools variable to make\n-    \/\/ jaot be able to pick up the Visual Studio linker in testing.\n-    if (input.target_os == \"windows\") {\n-        dependencies.devkit.environment = {\n-            VS120COMNTOOLS: input.get(\"devkit\", \"install_path\") + \"\/Common7\/Tools\"\n-        };\n-    }\n-\n-    return dependencies;\n-};\n-\n-\/**\n- * Generate the missing platform attributes for profiles\n- *\n- * @param profiles Profiles map to generate attributes on\n- * @returns {{}} New profiles map with platform attributes fully filled in\n- *\/\n-var generatePlatformAttributes = function (profiles) {\n-    var ret = concatObjects(profiles, {});\n-    for (var profile in profiles) {\n-        if (ret[profile].build_os == null) {\n-            ret[profile].build_os = ret[profile].target_os;\n-        }\n-        if (ret[profile].build_cpu == null) {\n-            ret[profile].build_cpu = ret[profile].target_cpu;\n-        }\n-        ret[profile].target_platform = ret[profile].target_os + \"_\" + ret[profile].target_cpu;\n-        ret[profile].build_platform = ret[profile].build_os + \"_\" + ret[profile].build_cpu;\n-    }\n-    return ret;\n-};\n-\n-\/**\n- * The default_make_targets attribute on a profile is not a real Jib attribute.\n- * This function rewrites that attribute into the corresponding configure arg.\n- * Calling this function multiple times on the same profiles object is safe.\n- *\n- * @param common Common values\n- * @param profiles Profiles map to rewrite profiles for\n- * @returns {{}} New map of profiles with the make targets converted\n- *\/\n-var generateDefaultMakeTargetsConfigureArg = function (common, profiles) {\n-    var ret = concatObjects(profiles, {});\n-    for (var profile in ret) {\n-        if (ret[profile][\"default_make_targets\"] != null) {\n-            var targetsString = concat(ret[profile].default_make_targets).join(\" \");\n-            \/\/ Iterate over all configure args and see if --with-default-make-target\n-            \/\/ is already there and change it, otherwise add it.\n-            var found = false;\n-            for (var i in ret[profile].configure_args) {\n-                var arg = ret[profile].configure_args[i];\n-                if (arg != null && arg.startsWith(\"--with-default-make-target=\")) {\n-                    found = true;\n-                    ret[profile].configure_args[i]\n-                        = \"--with-default-make-target=\" + targetsString;\n-                }\n-            }\n-            if (!found) {\n-                ret[profile].configure_args = concat(\n-                    ret[profile].configure_args,\n-                    \"--with-default-make-target=\" + targetsString);\n-            }\n-        }\n-    }\n-    return ret;\n-}\n-\n-var getBuildId = function (input) {\n-    if (input.build_id != null) {\n-        return input.build_id;\n-    } else {\n-        var topdir = new java.io.File(__DIR__, \"..\/..\").getCanonicalFile().getName();\n-        var userName = java.lang.System.getProperty(\"user.name\");\n-        return userName + \".\" + topdir;\n-    }\n-}\n-\n-\/**\n- * Deep clones an object tree.\n- *\n- * @param o Object to clone\n- * @returns {{}} Clone of o\n- *\/\n-var clone = function (o) {\n-    return JSON.parse(JSON.stringify(o));\n-};\n-\n-\/**\n- * Concatenates all arguments into a new array\n- *\n- * @returns {Array.<T>} New array containing all arguments\n- *\/\n-var concat = function () {\n-    return Array.prototype.concat.apply([], arguments);\n-};\n-\n-\/**\n- * Takes a String or Array of Strings and does a replace operation on each\n- * of them.\n- *\n- * @param pattern Pattern to look for\n- * @param replacement Replacement text to insert\n- * @param a String or Array of Strings to replace\n- * @returns {Array} Either a new array or a new string depending on the input\n- *\/\n-var replaceAll = function (pattern, replacement, a) {\n-    \/\/ If a is an array\n-    if (Array === a.constructor) {\n-    var newA = [];\n-    for (var i in a) {\n-            newA.push(a[i].replace(pattern, replacement));\n-        }\n-        return newA;\n-        } else {\n-        return a.replace(pattern, replacement);\n-    }\n-};\n-\n-\/**\n- * Deep concatenation of two objects. For each node encountered, merge\n- * the contents with the corresponding node in the other object tree,\n- * treating all strings as array elements.\n- *\n- * @param o1 Object to concatenate\n- * @param o2 Object to concatenate\n- * @returns {{}} New object tree containing the concatenation of o1 and o2\n- *\/\n-var concatObjects = function (o1, o2) {\n-    if (o1 == null) {\n-        return clone(o2);\n-    }\n-    if (o2 == null) {\n-        return clone(o1);\n-    }\n-    var ret = {};\n-    for (var a in o1) {\n-        if (o2[a] == null) {\n-            ret[a] = clone(o1[a]);\n-        }\n-    }\n-    for (var a in o2) {\n-        if (o1[a] == null) {\n-            ret[a] = clone(o2[a]);\n-        } else {\n-            if (typeof o1[a] == 'string') {\n-                ret[a] = clone([o1[a]].concat(o2[a]));\n-            } else if (Array.isArray(o1[a])) {\n-                ret[a] = clone(o1[a].concat(o2[a]));\n-            } else if (typeof o1[a] == 'object') {\n-                ret[a] = concatObjects(o1[a], o2[a]);\n-            }\n-        }\n-    }\n-    return ret;\n-};\n-\n-\/**\n- * Constructs the numeric version string from reading the\n- * make\/autoconf\/version-numbers file and removing all trailing \".0\".\n- *\n- * @param feature Override feature version\n- * @param interim Override interim version\n- * @param update Override update version\n- * @param patch Override patch version\n- * @returns {String} The numeric version string\n- *\/\n-var getVersion = function (feature, interim, update, patch) {\n-    var version_numbers = getVersionNumbers();\n-    var version = (feature != null ? feature : version_numbers.get(\"DEFAULT_VERSION_FEATURE\"))\n-        + \".\" + (interim != null ? interim : version_numbers.get(\"DEFAULT_VERSION_INTERIM\"))\n-        + \".\" + (update != null ? update :  version_numbers.get(\"DEFAULT_VERSION_UPDATE\"))\n-        + \".\" + (patch != null ? patch : version_numbers.get(\"DEFAULT_VERSION_PATCH\"));\n-    while (version.match(\".*\\\\.0$\")) {\n-        version = version.substring(0, version.length - 2);\n-    }\n-    return version;\n-};\n-\n-\/**\n- * Constructs the common version configure args based on build type and\n- * other version inputs\n- *\/\n-var versionArgs = function(input, common) {\n-    var args = [\"--with-version-build=\" + common.build_number];\n-    if (input.build_type == \"promoted\") {\n-        args = concat(args,\n-                      \/\/ This needs to be changed when we start building release candidates\n-                      \/\/ with-version-pre must be set to ea for 'ea' and empty for fcs build\n-                      \"--with-version-pre=ea\",\n-                      \"--without-version-opt\");\n-    } else {\n-        args = concat(args, \"--with-version-opt=\" + common.build_id);\n-    }\n-    return args;\n-}\n-\n-\/\/ Properties representation of the make\/autoconf\/version-numbers file. Lazily\n-\/\/ initiated by the function below.\n-var version_numbers;\n-\n-\/**\n- * Read the make\/autoconf\/version-numbers file into a Properties object.\n- *\n- * @returns {java.utilProperties}\n- *\/\n-var getVersionNumbers = function () {\n-    \/\/ Read version information from make\/autoconf\/version-numbers\n-    if (version_numbers == null) {\n-        version_numbers = new java.util.Properties();\n-        var stream = new java.io.FileInputStream(__DIR__ + \"\/..\/autoconf\/version-numbers\");\n-        version_numbers.load(stream);\n-        stream.close();\n-    }\n-    return version_numbers;\n-}\n","filename":"make\/conf\/jib-profiles.js","additions":0,"deletions":1133,"binary":false,"changes":1133,"status":"deleted"}]}