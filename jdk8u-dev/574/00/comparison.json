{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,9 +77,11 @@\n-\n-        try (Recording r = new Recording()) {\n-            r.enable(EventNames.OldObjectSample).withStackTrace().with(\"cutoff\", \"infinity\");\n-            r.start();\n-            listenerLeak();\n-            r.stop();\n-            List<RecordedEvent> events = Events.fromRecording(r);\n-            if (OldObjects.countMatchingEvents(events, Stuff[].class, null, null, -1, \"listenerLeak\") == 0) {\n-                throw new Exception(\"Could not find leak with \" + Stuff[].class);\n+        while (true) {\n+            try (Recording r = new Recording()) {\n+                r.enable(EventNames.OldObjectSample).withStackTrace().with(\"cutoff\", \"infinity\");\n+                r.start();\n+                listenerLeak();\n+                r.stop();\n+                List<RecordedEvent> events = Events.fromRecording(r);\n+                if (OldObjects.countMatchingEvents(events, Stuff[].class, null, null, -1, \"listenerLeak\") != 0) {\n+                    return; \/\/ Success\n+                }\n+                System.out.println(\"Could not find leak with \" + Stuff[].class + \". Retrying.\");\n","filename":"jdk\/test\/jdk\/jfr\/event\/oldobject\/TestListenerLeak.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"}]}