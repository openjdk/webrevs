{"files":[{"patch":"@@ -88,1 +88,1 @@\n-    private XWindowPeer curRealTransientFor;\n+    private XBaseWindow curRealTransientFor;\n@@ -1055,3 +1055,3 @@\n-                             alwaysOnTop ?\n-                             XLayerProtocol.LAYER_ALWAYS_ON_TOP :\n-                             XLayerProtocol.LAYER_NORMAL);\n+                alwaysOnTop ?\n+                        XLayerProtocol.LAYER_ALWAYS_ON_TOP :\n+                        XLayerProtocol.LAYER_NORMAL);\n@@ -1062,0 +1062,10 @@\n+        if (ownerPeer != null) {\n+            XToolkit.awtLock();\n+            try {\n+                restoreTransientFor(this);\n+                applyWindowType();\n+            }\n+            finally {\n+                XToolkit.awtUnlock();\n+            }\n+        }\n@@ -1105,0 +1115,1 @@\n+        boolean refreshChildsTransientFor = isVisible() != vis;\n@@ -1106,0 +1117,19 @@\n+        if (refreshChildsTransientFor) {\n+            for (Window child : ((Window) target).getOwnedWindows()) {\n+                XToolkit.awtLock();\n+                try {\n+                    if(!child.isLightweight() && child.isVisible()) {\n+                        ComponentPeer childPeer = AWTAccessor.\n+                                getComponentAccessor().getPeer(child);\n+                        if(childPeer instanceof XWindowPeer) {\n+                            XWindowPeer windowPeer = (XWindowPeer) childPeer;\n+                            restoreTransientFor(windowPeer);\n+                            windowPeer.applyWindowType();\n+                        }\n+                    }\n+                }\n+                finally {\n+                    XToolkit.awtUnlock();\n+                }\n+            }\n+        }\n@@ -1634,3 +1664,0 @@\n-        if (window.curRealTransientFor == transientForWindow) {\n-            return;\n-        }\n@@ -1648,1 +1675,3 @@\n-        while (!XlibUtil.isToplevelWindow(tpw) && !XlibUtil.isXAWTToplevelWindow(tpw)) {\n+        XBaseWindow parent = transientForWindow;\n+        while (tpw != 0 && ((!XlibUtil.isToplevelWindow(tpw) &&\n+                !XlibUtil.isXAWTToplevelWindow(tpw)) || !parent.isVisible())) {\n@@ -1650,0 +1679,1 @@\n+            parent = XToolkit.windowToXWindow(tpw);\n@@ -1652,1 +1682,0 @@\n-        XBaseWindow parent = transientForWindow;\n@@ -1662,1 +1691,1 @@\n-        window.curRealTransientFor = transientForWindow;\n+        window.curRealTransientFor = parent;\n@@ -1956,1 +1985,1 @@\n-                typeAtom = (ownerPeer == null) ?\n+                typeAtom = curRealTransientFor == null ?\n","filename":"jdk\/src\/solaris\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":40,"deletions":11,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,256 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8021961\n+ * @summary To test setAlwaysOnTop functionality.\n+ * @run main\/othervm -Dsun.java2d.uiScale=1 ChildAlwaysOnTopTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+import javax.swing.JDialog;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+public class ChildAlwaysOnTopTest {\n+\n+    private static Window win1;\n+    private static Window win2;\n+    private static Point point;\n+    private static Robot robot;\n+    private static int caseNo = 0;\n+    private static StringBuffer errorLog = new StringBuffer();\n+    private static String[] errorMsg= new String[] {\n+            \" Scenario 1 Failed: alwaysOnTop window is sent back by another\" +\n+                    \" child window with setVisible().\",\n+            \" Scenario 2 Failed: alwaysOnTop window is\" +\n+                    \" sent back by another child window with toFront().\",\n+            \" Scenario 3 Failed: Failed to unset alwaysOnTop \",\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (!Toolkit.getDefaultToolkit().isAlwaysOnTopSupported()) {\n+            System.out.println(\"alwaysOnTop not supported by: \"+\n+                    Toolkit.getDefaultToolkit().getClass().getName());\n+            return;\n+        }\n+\n+        \/\/ CASE 1 - JDialog without parent\/owner\n+        System.out.println(\"Testing CASE 1: JDialog without parent\/owner\");\n+        caseNo = 1;\n+        test(null);\n+        System.out.println(\"CASE 1 Completed\");\n+        System.out.println();\n+\n+        \/\/ CASE 2 - JDialog with JFrame as owner\n+        System.out.println(\"Testing CASE 2: JDialog with JFrame as owner\");\n+        caseNo = 2;\n+        Window f = new Frame();\n+        f.setBackground(Color.darkGray);\n+        f.setSize(500, 500);\n+        try {\n+            test(f);\n+        } finally {\n+            f.dispose();\n+        }\n+        System.out.println(\"CASE 2 Completed\");\n+        System.out.println();\n+\n+        \/\/ CASE 3 - JDialog within another JDialog as owner\n+        System.out.println(\"Testing CASE 3:Dialog within another\"+\n+                \" JDialog as owner\");\n+        caseNo = 3;\n+        f = new Frame();\n+        f.setBackground(Color.darkGray);\n+        f.setSize(500, 500);\n+        f.setVisible(true);\n+        f = new Dialog((Frame)f);\n+        try {\n+            test(f);\n+        } finally {\n+            ((Frame)f.getParent()).dispose();\n+        }\n+        System.out.println(\"CASE 3 Completed\");\n+        System.out.println();\n+\n+        if (errorLog.length() == 0) {\n+            System.out.println(\"All three cases passed !!\");\n+        }\n+        else {\n+            throw new RuntimeException(\"Following cases and scenarios failed.\"+\n+                    \" Please check the saved screenshots.\\n\"+ errorLog);\n+        }\n+    }\n+\n+    public static void test(Window parent) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win1 = parent == null ? new JDialog() : new JDialog(parent);\n+                    win1.setName(\"Top\");\n+\n+                    win2 = parent == null ? new JDialog() : new JDialog(parent);\n+                    win2.setName(\"Behind\");\n+\n+                    JLabel label = new JLabel(\"TOP WINDOW\");\n+                    \/\/ top window - green and smaller\n+                    win1.setSize(200, 200);\n+                    Panel panel = new Panel();\n+                    panel.setBackground(Color.GREEN);\n+                    panel.add(label);\n+                    win1.add(panel);\n+                    win1.setAlwaysOnTop(true);\n+\n+                    \/\/ behind window - red and bigger\n+                    label = new JLabel(\"BEHIND WINDOW\");\n+                    win2.setSize(300, 300);\n+                    panel = new Panel();\n+                    panel.setBackground(Color.RED);\n+                    panel.add(label);\n+                    win2.add(panel);\n+\n+                    win1.setVisible(true);\n+                    win2.setVisible(true);\n+                }\n+            });\n+\n+            robot = new Robot();\n+            robot.setAutoDelay(300);\n+            robot.waitForIdle();\n+\n+            \/\/ Scenario 1: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting the setVisible to true for behind (red) window\n+            System.out.println(\" >> Testing Scenario 1 ...\");\n+            SwingUtilities.invokeAndWait(()-> {\n+                point = win1.getLocationOnScreen();\n+                win2.setVisible(true);\n+            });\n+\n+            checkTopWindow(caseNo, 1, Color.GREEN);\n+\n+            \/*---------------------------------------------------------------*\/\n+\n+            \/\/ Scenario 2: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting toFront() to true for behind (red) window\n+            System.out.println(\" >> Testing Scenario 2 ...\");\n+            SwingUtilities.invokeAndWait(()-> {\n+                win2.toFront();\n+                if (parent != null) {\n+                    parent.setLocation(win1.getLocation());\n+                    parent.toFront();\n+                }\n+            });\n+\n+            checkTopWindow(caseNo, 2, Color.GREEN);\n+\n+            \/*----------------------------------------------------------------*\/\n+\n+            \/\/ Scenario 3: Trying to unset the alwaysOnTop (green window)\n+            \/\/ by setting alwaysOnTop to false. The unsetting should work\n+            \/\/ in this case and bring the red window to the top.\n+            System.out.println(\" >> Testing Scenario 3 ...\");\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win1.setAlwaysOnTop(false);\n+                    if (parent != null) {\n+                        parent.setVisible(false);\n+                        parent.setVisible(true);\n+                    }\n+                }\n+            });\n+\n+            robot.delay(300);\n+            robot.waitForIdle();\n+\n+            SwingUtilities.invokeAndWait(new Runnable() {\n+                @Override\n+                public void run() {\n+                    win2.toFront();\n+                }\n+            });\n+\n+            checkTopWindow(caseNo, 3, Color.RED);\n+\n+        } finally {\n+            if (win1 != null) {\n+                SwingUtilities.invokeAndWait(()-> win1.dispose());\n+            }\n+            if (win2 != null) {\n+                SwingUtilities.invokeAndWait(()-> win2.dispose());\n+            }\n+        }\n+    }\n+    \/\/ to check if the current top window background color\n+    \/\/ matches the expected color\n+    private static void checkTopWindow(int caseNo, int scenarioNo,\n+                                       Color expectedColor) {\n+\n+        robot.delay(500);\n+        robot.waitForIdle();\n+        Color actualColor = robot.getPixelColor(point.x + 100, point.y + 100);\n+\n+        saveScreenCapture(caseNo , scenarioNo);\n+\n+        if (!actualColor.equals(expectedColor)) {\n+            System.out.println(\" >> Scenario \"+ scenarioNo +\" FAILED !!\");\n+            errorLog.append(\"Case \"+ caseNo + errorMsg[scenarioNo - 1]\n+                    +\" Expected Color: \"+ expectedColor +\" vs Actual Color: \"\n+                    + actualColor +\"\\n\");\n+        }\n+        else {\n+            System.out.println(\" >> Scenario \"+ scenarioNo +\" Passed\");\n+        }\n+    }\n+\n+    \/\/ For Debugging purpose - method used to save the screen capture as\n+    \/\/ BufferedImage in the event the test fails\n+    private static void saveScreenCapture(int caseNo, int scenarioNo) {\n+        String filename = \"img_\"+ caseNo +\"_\"+ scenarioNo;\n+        BufferedImage image = robot.createScreenCapture(\n+                new Rectangle(0, 0, 500, 500));\n+        try {\n+            ImageIO.write(image, \"png\", new File(filename));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"jdk\/test\/java\/awt\/Window\/MultiWindowApp\/ChildAlwaysOnTopTest.java","additions":256,"deletions":0,"binary":false,"changes":256,"status":"added"}]}