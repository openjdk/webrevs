{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,9 @@\n+import java.awt.BorderLayout;\n+import java.awt.FlowLayout;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -27,0 +36,9 @@\n+import javax.sound.midi.MidiUnavailableException;\n+import javax.swing.JDialog;\n+import javax.swing.SwingUtilities;\n+import javax.swing.JTextArea;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.Timer;\n+import javax.swing.JPanel;\n+import javax.swing.WindowConstants;\n@@ -28,1 +46,1 @@\n-\/**\n+\/*\n@@ -33,1 +51,1 @@\n- * @run main\/manual=yesno bug6186488\n+ * @run main\/manual bug6186488\n@@ -36,2 +54,5 @@\n-    public static void main(String[] args) throws Exception {\n-        MidiDevice\/*Synthesizer*\/ synth = null;\n+    private static final CountDownLatch countDownLatch = new CountDownLatch(1);\n+    private static final int testTimeout = 300000;\n+    private static volatile String testFailureMsg;\n+    private static volatile boolean testPassed;\n+    private static volatile boolean testFinished;\n@@ -39,0 +60,2 @@\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> createAndShowTestDialog());\n@@ -40,2 +63,17 @@\n-            synth = MidiSystem.getSynthesizer();\n-            \/\/synth = MidiSystem.getMidiDevice(infos[0]);\n+            if (!countDownLatch.await(testTimeout, TimeUnit.MILLISECONDS)) {\n+                throw new RuntimeException(String.format(\"Test timeout '%d ms' elapsed.\", testTimeout));\n+            }\n+            if (!testPassed) {\n+                String failureMsg = testFailureMsg;\n+                if ((failureMsg != null) && (!failureMsg.trim().isEmpty())) {\n+                    throw new RuntimeException(failureMsg);\n+                } else {\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(ie);\n+        } finally {\n+            testFinished = true;\n+        }\n+    }\n@@ -43,0 +81,114 @@\n+    private static void pass() {\n+        testPassed = true;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static void fail(String failureMsg) {\n+        testFailureMsg = failureMsg;\n+        testPassed = false;\n+        countDownLatch.countDown();\n+    }\n+\n+    private static String convertMillisToTimeStr(int millis) {\n+        if (millis < 0) {\n+            return \"00:00:00\";\n+        }\n+        int hours = millis \/ 3600000;\n+        int minutes = (millis - hours * 3600000) \/ 60000;\n+        int seconds = (millis - hours * 3600000 - minutes * 60000) \/ 1000;\n+        return String.format(\"%02d:%02d:%02d\", hours, minutes, seconds);\n+    }\n+\n+    private static void createAndShowTestDialog() {\n+        String testInstruction = \"This test verify that software Java Syntesizer processed non-ShortMessage-derived messages.\\n\" +\n+                \"Close all other programs that may use the sound card.\\n\" +\n+                \"Make sure that the speakers are connected and the volume is up.\\n\" +\n+                \"Click on 'Start Test' button. If you listen a sound then test pass else test fail.\";\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"Test Sound\");\n+        dialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                dialog.dispose();\n+                fail(\"Main dialog was closed.\");\n+            }\n+        });\n+\n+        final JLabel testTimeoutLabel = new JLabel(String.format(\"Test timeout: %s\", convertMillisToTimeStr(testTimeout)));\n+        final long startTime = System.currentTimeMillis();\n+        final Timer timer = new Timer(0, null);\n+        timer.setDelay(1000);\n+        timer.addActionListener((e) -> {\n+            int leftTime = testTimeout - (int) (System.currentTimeMillis() - startTime);\n+            if ((leftTime < 0) || testFinished) {\n+                timer.stop();\n+                dialog.dispose();\n+            }\n+            testTimeoutLabel.setText(String.format(\"Test timeout: %s\", convertMillisToTimeStr(leftTime)));\n+        });\n+        timer.start();\n+\n+        JTextArea textArea = new JTextArea(testInstruction);\n+        textArea.setEditable(false);\n+\n+        final JButton startTestButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        final JButton failButton = new JButton(\"FAIL\");\n+        startTestButton.addActionListener((e) -> {\n+            new Thread(() -> {\n+                try {\n+                    doTest();\n+\n+                    SwingUtilities.invokeLater(() -> {\n+                        passButton.setEnabled(true);\n+                        failButton.setEnabled(true);\n+                    });\n+                } catch (Throwable t) {\n+                    t.printStackTrace();\n+                    dialog.dispose();\n+                    fail(\"Exception occurred in a thread executing the test.\");\n+                }\n+            }).start();\n+        });\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            pass();\n+        });\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            fail(\"Expected that sound will be heard but did not hear sound\");\n+        });\n+\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        JPanel labelPanel = new JPanel(new FlowLayout());\n+        labelPanel.add(testTimeoutLabel);\n+        mainPanel.add(labelPanel, BorderLayout.NORTH);\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(startTestButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+\n+    public static void waitForSynToOpen(MidiDevice synth) throws InterruptedException {\n+        int count = 0;\n+        do {\n+            if (synth.isOpen()) {\n+                System.out.println(\"synth is opened\");\n+                return;\n+            }\n+            TimeUnit.SECONDS.sleep(1);\n+        } while( ++count >= 5);\n+        throw new RuntimeException(synth + \" did not open even after 5 seconds\");\n+    }\n+\n+    private static void doTest() throws MidiUnavailableException, InterruptedException {\n+        try (MidiDevice synth = MidiSystem.getSynthesizer()) {\n@@ -45,0 +197,1 @@\n+            waitForSynToOpen(synth);\n@@ -46,3 +199,0 @@\n-            \/\/ShortMessage msg = new ShortMessage();\n-            \/\/msg.setMessage(0x90, 0x3C, 0x40);\n-\n@@ -51,19 +201,0 @@\n-\n-        } catch (Exception ex) {\n-            ex.printStackTrace();\n-            throw ex;\n-        } finally {\n-            if (synth != null && synth.isOpen())\n-                synth.close();\n-        }\n-        System.out.print(\"Did you heard a note? (enter 'y' or 'n') \");\n-        int result = System.in.read();\n-        System.in.skip(1000);\n-        if (result == 'y' || result == 'Y')\n-        {\n-            System.out.println(\"Test passed sucessfully.\");\n-        }\n-        else\n-        {\n-            System.out.println(\"Test FAILED.\");\n-            throw new RuntimeException(\"Test failed.\");\n","filename":"jdk\/test\/javax\/sound\/midi\/Synthesizer\/Receiver\/bug6186488.java","additions":160,"deletions":29,"binary":false,"changes":189,"status":"modified"}]}