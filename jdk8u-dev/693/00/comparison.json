{"files":[{"patch":"@@ -111,0 +111,6 @@\n+    \/**\n+     * Set to {@code true} for {@code BuiltInProfile}, {@code false} otherwise.\n+     * This flag is used in {@link #setData(int, byte[])} to prevent modifying\n+     * built-in profiles.\n+     *\/\n+    private final transient boolean builtIn;\n@@ -732,1 +738,2 @@\n-        this.cmmProfile = p;\n+        cmmProfile = p;\n+        builtIn = false;\n@@ -739,0 +746,4 @@\n+     *\n+     * <p>\n+     * Note: {@code ProfileDeferralInfo} is used for built-in profile\n+     * creation only, and all built-in profiles should be constructed using it.\n@@ -742,0 +753,1 @@\n+        builtIn = true;\n@@ -1343,8 +1355,20 @@\n-     * @param tagSignature The ICC tag signature for the data element\n-     * you want to set.\n-     * @param tagData the data to set for the specified tag signature\n-     * @throws IllegalArgumentException if {@code tagSignature} is not a signature\n-     *         as defined in the ICC specification.\n-     * @throws IllegalArgumentException if a content of the {@code tagData}\n-     *         array can not be interpreted as valid tag data, corresponding\n-     *         to the {@code tagSignature}.\n+     * <p>\n+     * Note: JDK built-in ICC Profiles cannot be updated using this method\n+     * as it will result in {@code IllegalArgumentException}. JDK built-in\n+     * profiles are those obtained by {@code ICC_Profile.getInstance(int colorSpaceID)}\n+     * where {@code colorSpaceID} is one of the following:\n+     * {@link ColorSpace#CS_sRGB}, {@link ColorSpace#CS_LINEAR_RGB},\n+     * {@link ColorSpace#CS_PYCC}, {@link ColorSpace#CS_GRAY} or\n+     * {@link ColorSpace#CS_CIEXYZ}.\n+     *\n+     * @param  tagSignature the ICC tag signature for the data element you want\n+     *         to set\n+     * @param  tagData the data to set for the specified tag signature\n+     * @throws IllegalArgumentException if {@code tagSignature} is not a\n+     *         signature as defined in the ICC specification.\n+     * @throws IllegalArgumentException if the content of the {@code tagData}\n+     *         array can not be interpreted as valid tag data, corresponding to\n+     *         the {@code tagSignature}\n+     * @throws IllegalArgumentException if this is a built-in profile for one\n+     *         of the pre-defined color spaces, that is those which can be obtained\n+     *         by calling {@code ICC_Profile.getInstance(int colorSpaceID)}\n@@ -1352,0 +1376,1 @@\n+     * @see ColorSpace\n@@ -1354,0 +1379,4 @@\n+        if (builtIn) {\n+            throw new IllegalArgumentException(\"Built-in profile cannot be modified\");\n+        }\n+\n","filename":"jdk\/src\/share\/classes\/java\/awt\/color\/ICC_Profile.java","additions":38,"deletions":9,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8346465\n+ * @summary Tests if setData() throws IAE for BuiltIn profiles\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class BuiltInProfileCheck {\n+    private static final int HEADER_TAG = ICC_Profile.icSigHead;\n+    private static final int INDEX = ICC_Profile.icHdrDeviceClass;\n+    private static final String EXCEPTION_MSG = \"Built-in profile cannot be modified\";\n+    \/**\n+     * {@link #prepareTestProfile(String, boolean, int)}\n+     * stores the profile to test in testProfile.\n+     *\/\n+    private static ICC_Profile testProfile;\n+\n+    private static final Map<Integer, String> colorSpace = new HashMap<Integer, String> () {{\n+            put(ColorSpace.CS_sRGB, \"CS_sRGB\");\n+            put(ColorSpace.CS_PYCC, \"CS_PYCC\");\n+            put(ColorSpace.CS_GRAY, \"CS_GRAY\");\n+            put(ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\");\n+            put(ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\");\n+    }};\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"CASE 1: Testing BuiltIn Profile\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"Default\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 2: Testing Custom Profile\");\n+        prepareTestProfile(\"Default\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 3: Testing Built-In Profile\"\n+                            + \" Serialization & Deserialization\");\n+        for (int cs : colorSpace.keySet()) {\n+            prepareTestProfile(\"Serialize\", true, cs);\n+            testProfile(true, cs);\n+        }\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 4: Testing Custom Profile\"\n+                            + \" Serialization & Deserialization\");\n+        prepareTestProfile(\"Serialize\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 5: Test reading Built-In profile from .icc file\");\n+        prepareTestProfile(\"ReadFromFile\", true, ColorSpace.CS_sRGB);\n+        testProfile(true, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+\n+        System.out.println(\"CASE 6: Test reading Custom profile from .icc file\");\n+        prepareTestProfile(\"ReadFromFile\", false, ColorSpace.CS_sRGB);\n+        testProfile(false, ColorSpace.CS_sRGB);\n+        System.out.println(\"Passed\\n\");\n+    }\n+\n+    private static void prepareTestProfile(String testCase,\n+                                           boolean isBuiltIn, int cs) {\n+        ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n+        \/\/ if isBuiltIn=true use builtInProfile else create a copy\n+        testProfile = isBuiltIn\n+                      ? builtInProfile\n+                      : ICC_Profile.getInstance(builtInProfile.getData());\n+\n+        switch (testCase) {\n+            case \"Default\":\n+                \/\/ empty case block\n+                \/\/ no further processing of testProfile required for default case\n+                break;\n+            case \"Serialize\":\n+                try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                     ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n+                    oos.writeObject(testProfile);\n+\n+                    byte[] array = baos.toByteArray();\n+                    try (ObjectInputStream ois =\n+                                 new ObjectInputStream(new ByteArrayInputStream(array))) {\n+                        testProfile = (ICC_Profile) ois.readObject();\n+                    }\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Serial-Deserialization\"\n+                                               + \" case failed\", e);\n+                }\n+                break;\n+            case \"ReadFromFile\":\n+                \/\/ .icc files serialized on older JDK version\n+                String filename = isBuiltIn ? \"builtIn.icc\" : \"custom.icc\";\n+                String testDir = System.getProperty(\"test.src\")\n+                                 + System.getProperty(\"file.separator\");\n+                filename = testDir + filename;\n+\n+                try (FileInputStream fileIn = new FileInputStream(filename);\n+                     ObjectInputStream ois = new ObjectInputStream(fileIn)) {\n+                    testProfile = (ICC_Profile) ois.readObject();\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"Test Failed ! Unable to fetch\"\n+                                               + \" .icc files\", e);\n+                }\n+                break;\n+        }\n+    }\n+\n+    private static void testProfile(boolean isBuiltIn, int cs) {\n+        byte[] headerData = testProfile.getData(HEADER_TAG);\n+        \/\/ Set profile class to valid icSigInputClass = 0x73636E72\n+        headerData[INDEX] = 0x73;\n+        headerData[INDEX + 1] = 0x63;\n+        headerData[INDEX + 2] = 0x6E;\n+        headerData[INDEX + 3] = 0x72;\n+\n+        if (isBuiltIn) {\n+            System.out.println(\"Testing: \" + colorSpace.get(cs));\n+            try {\n+                \/\/ Try updating a built-in profile, IAE is expected\n+                testProfile.setData(HEADER_TAG, headerData);\n+                throw new RuntimeException(\"Test Failed! IAE NOT thrown for profile \"\n+                                           + colorSpace.get(cs));\n+            } catch (IllegalArgumentException iae) {\n+                if (!iae.getMessage().equals(EXCEPTION_MSG)) {\n+                    throw new RuntimeException(\"Test Failed! IAE with exception msg \\\"\"\n+                                               + EXCEPTION_MSG + \"\\\" NOT thrown for profile \"\n+                                               + colorSpace.get(cs));\n+                }\n+            }\n+        } else {\n+            \/\/ Modifying custom profile should NOT throw IAE\n+            testProfile.setData(HEADER_TAG, headerData);\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/BuiltInProfileCheck.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"filename":"jdk\/test\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/builtIn.icc","binary":true,"status":"added"},{"filename":"jdk\/test\/java\/awt\/color\/ICC_Profile\/BuiltInProfileCheck\/custom.icc","binary":true,"previous_filename":"jdk\/test\/java\/awt\/color\/ICC_Profile\/ValidateICCHeaderData\/invalidSRGB.icc","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,3 @@\n-            ICC_Profile icc = ICC_Profile.getInstance(cspace);\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(cspace);\n+            ICC_Profile icc = ICC_Profile.getInstance(builtInProfile.getData());\n+\n","filename":"jdk\/test\/java\/awt\/color\/ICC_Profile\/SetHeaderInfo.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\/**\n+ * @test\n+ * @bug 4823896 7042594\n+ * @summary Test checks behavior of the ICC_Profile.setData(int, byte[])\n+ *\/\n+public final class ICC_ProfileSetNullDataTest {\n+    private static final Map<Integer, String> colorSpace = new HashMap<Integer, String> () {{\n+            put(ColorSpace.CS_sRGB, \"CS_sRGB\");\n+            put(ColorSpace.CS_PYCC, \"CS_PYCC\");\n+            put(ColorSpace.CS_GRAY, \"CS_GRAY\");\n+            put(ColorSpace.CS_CIEXYZ, \"CS_CIEXYZ\");\n+            put(ColorSpace.CS_LINEAR_RGB, \"CS_LINEAR_RGB\");\n+    }};\n+\n+    public static void main(String[] args) {\n+        for (int cs : colorSpace.keySet()) {\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(cs);\n+            ICC_Profile profile = ICC_Profile.getInstance(builtInProfile.getData());\n+            try {\n+                profile.setData(ICC_Profile.icSigCmykData, null);\n+                throw new RuntimeException(\"IAE expected, but not thrown for \"\n+                                           + \"ColorSpace: \" + colorSpace.get(cs));\n+            } catch (IllegalArgumentException e) {\n+                \/\/ IAE expected\n+            }\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/color\/ICC_ProfileSetNullDataTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -50,1 +49,2 @@\n-            profile = ICC_Profile.getInstance(CS_GRAY);\n+            ICC_Profile builtInProfile = ICC_Profile.getInstance(CS_GRAY);\n+            profile = ICC_Profile.getInstance(builtInProfile.getData());\n","filename":"jdk\/test\/sun\/java2d\/cmm\/ProfileOp\/SetDataTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}