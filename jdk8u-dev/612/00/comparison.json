{"files":[{"patch":"@@ -34,6 +34,1 @@\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.*;\n@@ -54,1 +49,0 @@\n-@TestInstance(Lifecycle.PER_CLASS)\n@@ -60,1 +54,1 @@\n-    @BeforeAll\n+    @Before\n@@ -69,1 +63,1 @@\n-    @AfterAll\n+    @After\n@@ -86,1 +80,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -101,1 +95,1 @@\n-        Assertions.assertEquals(\"testfile1\", cat(\"testfile1\"));\n+        Assert.assertEquals(\"testfile1\", cat(\"testfile1\"));\n@@ -103,1 +97,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -118,2 +112,2 @@\n-        Assertions.assertEquals(\"\", cat(\"testfile1\"));\n-        Assertions.assertEquals(\"testfile2\", cat(\"testfile2\"));\n+        Assert.assertEquals(\"\", cat(\"testfile1\"));\n+        Assert.assertEquals(\"testfile2\", cat(\"testfile2\"));\n@@ -121,1 +115,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -136,2 +130,2 @@\n-        Assertions.assertEquals(\"\", cat(\"testfile1\"));\n-        Assertions.assertEquals(\"\", cat(\"testfile2\"));\n+        Assert.assertEquals(\"\", cat(\"testfile1\"));\n+        Assert.assertEquals(\"\", cat(\"testfile2\"));\n@@ -139,1 +133,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -155,2 +149,2 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n-        Assertions.assertEquals(\"Warning: The k option is not valid with current usage, will be ignored.\" + nl, err);\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertEquals(\"Warning: The k option is not valid with current usage, will be ignored.\" + nl, err);\n","filename":"jdk\/test\/tools\/jar\/ExtractFilesTest.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -36,7 +36,1 @@\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInstance;\n-import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.*;\n@@ -63,2 +57,1 @@\n-@TestInstance(Lifecycle.PER_CLASS)\n-class MultipleManifestTest {\n+public class MultipleManifestTest {\n@@ -88,1 +81,1 @@\n-    @AfterAll\n+    @After\n@@ -90,0 +83,1 @@\n+        rm(\"META-INF entry1.txt entry2.txt\");\n@@ -98,1 +92,1 @@\n-    @BeforeAll\n+    @Before\n@@ -135,5 +129,0 @@\n-    @AfterEach\n-    public void removeExtractedFiles() {\n-        rm(\"META-INF entry1.txt entry2.txt\");\n-    }\n-\n@@ -147,1 +136,1 @@\n-        Assertions.assertEquals(\"3.0\", getManifestVersion());\n+        Assert.assertEquals(\"3.0\", getManifestVersion());\n@@ -153,1 +142,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -163,1 +152,1 @@\n-        Assertions.assertEquals(\"1.0\", getManifestVersion());\n+        Assert.assertEquals(\"1.0\", getManifestVersion());\n@@ -169,1 +158,1 @@\n-        Assertions.assertArrayEquals(baos.toByteArray(), output.getBytes());\n+        Assert.assertArrayEquals(baos.toByteArray(), output.getBytes());\n@@ -219,1 +208,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"jdk\/test\/tools\/jar\/MultipleManifestTest.java","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"}]}