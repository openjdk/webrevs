{"files":[{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.testlibrary.JarUtils;\n+import jdk.testlibrary.SecurityTools;\n+import jdk.testlibrary.Asserts;\n+import jdk.testlibrary.ProcessTools;\n+import jdk.testlibrary.OutputAnalyzer;\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.nio.file.Paths;\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import java.io.File;\n+import static java.util.Calendar.WEDNESDAY;\n+\n+\/*\n+ * @test\n+ * @bug 8297684 8269039\n+ * @summary Checking custom CalendarDataProvider with SPI contained in signed jar does\n+ *          not produce NPE.\n+ * @library \/lib\/testlibrary\n+ * @library provider\n+ * @build baz.CalendarDataProviderImpl\n+ * @run main\/timeout=600 TestSPISigned\n+ *\/\n+public class TestSPISigned {\n+\n+    private static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n+    private static final String TEST_SRC = System.getProperty(\"test.src\", \".\");\n+\n+    private static final Path META_INF_DIR = Paths.get(TEST_SRC, \"provider\", \"meta\");\n+    private static final Path META_INF_DIR_SOURCE = META_INF_DIR.resolve(\"META-INF\");\n+    private static final Path SERVICES_DIR_SOURCE = META_INF_DIR_SOURCE.resolve(\"services\");\n+    private static final Path PROVIDER_SOURCE = SERVICES_DIR_SOURCE.resolve(\"java.util.spi.CalendarDataProvider\");\n+    private static final Path PROVIDER_PARENT = Paths.get(TEST_CLASSES);\n+    private static final Path PROVIDER_DIR = PROVIDER_PARENT.resolve(\"provider\");\n+    private static final Path META_INF_DIR_TARGET = PROVIDER_DIR.resolve(\"META-INF\");\n+    private static final Path SERVICES_DIR_TARGET = META_INF_DIR_TARGET.resolve(\"services\");\n+    private static final Path PROVIDER_TARGET = SERVICES_DIR_TARGET.resolve(\"java.util.spi.CalendarDataProvider\");\n+    private static final Path MODS_DIR = Paths.get(\"mods\");\n+    private static final Path UNSIGNED_JAR = MODS_DIR.resolve(\"unsigned-with-locale.jar\");\n+    private static final Path SIGNED_JAR = MODS_DIR.resolve(\"signed-with-locale.jar\");\n+\n+    public static void main(String[] args) throws Throwable {\n+        if (args.length == 1) {\n+            String arg = args[0];\n+            if (\"run-test\".equals(arg)) {\n+                System.out.println(\"Debug: Running test\");\n+                String provProp = System.getProperty(\"java.ext.dirs\");\n+                String[] extDirs = provProp.split(File.pathSeparator);\n+                boolean extDirFound = false;\n+                for (int i = 0; i < extDirs.length; i++) {\n+                    if (extDirs[i].equals(MODS_DIR.toAbsolutePath().toString())) {\n+                        extDirFound = true;\n+                        break;\n+                    }\n+                }\n+                if (!extDirFound) {\n+                   throw new RuntimeException(\"Test failed! Expected -Djava.ext.dirs to include CalendarDataProvider jar\");\n+                }\n+                doRunTest();\n+            } else {\n+               throw new RuntimeException(\"Test failed! Expected 'run-test' arg for test run\");\n+            }\n+        } else {\n+            \/\/ Set up signed jar with custom calendar data provider\n+            \/\/\n+            \/\/ 1. Create jar with custom CalendarDataProvider\n+            Files.createDirectory(META_INF_DIR_TARGET);\n+            Files.createDirectory(SERVICES_DIR_TARGET);\n+            Files.copy(PROVIDER_SOURCE, PROVIDER_TARGET);\n+            JarUtils.createJarFile(UNSIGNED_JAR, PROVIDER_DIR);\n+\n+            \/\/ create signer's keypair\n+            SecurityTools.keytool(\"-genkeypair -keyalg RSA -keystore ks \" +\n+                                  \"-storepass changeit -dname CN=test -alias test\")\n+                     .shouldHaveExitValue(0);\n+            \/\/ sign jar\n+            SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                                \"-signedjar \" + SIGNED_JAR + \" \" + UNSIGNED_JAR + \" test\")\n+                     .shouldHaveExitValue(0);\n+            \/\/ run test, which must not throw a NPE\n+            List<String> testRun = new ArrayList<>();\n+            String extDir = System.getProperty(\"java.home\") + File.separator + \"lib\" + File.separator + \"ext\";\n+            testRun.add(\"-Djava.ext.dirs=\" + System.getProperty(\"java.home\") + extDir + File.pathSeparator + MODS_DIR.toAbsolutePath().toString());\n+            testRun.add(\"-cp\");\n+            String classPath = System.getProperty(\"java.class.path\");\n+            testRun.add(classPath);\n+            testRun.add(TestSPISigned.class.getSimpleName());\n+            testRun.add(\"run-test\");\n+            OutputAnalyzer out = ProcessTools.executeTestJvm(testRun.toArray(new String[]{}));\n+            out.shouldHaveExitValue(0);\n+            out.shouldContain(\"DEBUG: Getting xx language\");\n+        }\n+    }\n+\n+    private static void doRunTest() {\n+        Locale locale = new Locale(\"xx\", \"YY\");\n+        Calendar kcal = Calendar.getInstance(locale);\n+        try {\n+            check(WEDNESDAY, kcal.getFirstDayOfWeek());\n+            check(7, kcal.getMinimalDaysInFirstWeek());\n+        } catch (Throwable ex) {\n+            throw new RuntimeException(\"Test failed with signed jar and \" +\n+                    \" argument java.locale.providers=SPI\", ex);\n+        }\n+    }\n+\n+    private static <T> void check(T expected, T actual) {\n+        Asserts.assertEquals(expected, actual, \"Expected calendar from SPI to be in effect\");\n+    }\n+\n+}\n","filename":"jdk\/test\/java\/security\/SignedJar\/spi-calendar-provider\/TestSPISigned.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package baz;\n+\n+import static java.util.Calendar.*;\n+import java.util.Locale;\n+import java.util.spi.CalendarDataProvider;\n+\n+public class CalendarDataProviderImpl extends CalendarDataProvider {\n+    private static final Locale[] locales = { new Locale(\"xx\", \"YY\") };\n+\n+    @Override\n+    public int getFirstDayOfWeek(Locale locale) {\n+        return WEDNESDAY;\n+    }\n+\n+    @Override\n+    public int getMinimalDaysInFirstWeek(Locale locale) {\n+        if (locale.getLanguage().equals(\"xx\")) {\n+            System.out.println(\"DEBUG: Getting xx language\");\n+        }\n+        return 7;\n+    }\n+\n+    @Override\n+    public Locale[] getAvailableLocales() {\n+        return locales;\n+    }\n+}\n","filename":"jdk\/test\/java\/security\/SignedJar\/spi-calendar-provider\/provider\/baz\/CalendarDataProviderImpl.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+#\n+#\n+#\n+# fully-qualified name of the java.util.spi.CalendarDataProvider\n+# implementation class\n+#\n+baz.CalendarDataProviderImpl\n","filename":"jdk\/test\/java\/security\/SignedJar\/spi-calendar-provider\/provider\/meta\/META-INF\/services\/java.util.spi.CalendarDataProvider","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"}]}