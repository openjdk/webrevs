{"files":[{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/6857159\/Test6857159.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\/whitebox \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/8010927\/Test8010927.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import static com.oracle.java.testlibrary.Asserts.assertEQ;\n+import static jdk.test.lib.Asserts.assertEQ;\n","filename":"hotspot\/test\/compiler\/EliminateAutoBox\/UnsignedLoads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.cli.*;\n","filename":"hotspot\/test\/compiler\/arguments\/BMICommandLineOptionTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/arguments\/BMISupportedCPUTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,3 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/arguments\/BMIUnsupportedCPUTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -38,1 +38,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseBMI1InstructionsOnSupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -38,2 +38,2 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseBMI1InstructionsOnUnsupportedCPU.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -39,1 +39,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseCountLeadingZerosInstructionOnSupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -39,1 +39,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseCountLeadingZerosInstructionOnUnsupportedCPU.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -39,2 +39,2 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseCountTrailingZerosInstructionOnSupportedCPU.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -39,2 +39,2 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n","filename":"hotspot\/test\/compiler\/arguments\/TestUseCountTrailingZerosInstructionOnUnsupportedCPU.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/classUnloading\/anonymousClass\/TestAnonymousClassUnloading.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/classUnloading\/methodUnloading\/TestMethodUnloading.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/codecache\/CheckReservedInitialCodeCacheSizeArgOrder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/codecache\/CheckUpperLimit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n@@ -32,1 +32,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/conversions\/TestPrimitiveConversions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/cpuflags\/RestoreMXCSR.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/debug\/VerifyAdapterSharing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n@@ -34,1 +34,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/dependencies\/MonomorphicObjectCall\/TestMonomorphicObjectCall.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/floatingpoint\/TestPow2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/gcbarriers\/PreserveFPRegistersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/gcbarriers\/TestMembarDependencies.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/BMITestRunner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestAndnI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestAndnL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsiI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsiL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsmskI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsmskL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsrI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestBlsrL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestLzcntI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestLzcntL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestTzcntI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/TestTzcntL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/AndnTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/AndnTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsiTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsiTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsmskTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsmskTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsrTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BlsrTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,3 +25,3 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/BmiIntrinsicBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/LZcntTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/LZcntTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/TZcntTestI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox ..\n+ * @library \/test\/lib \/compiler\/whitebox ..\n","filename":"hotspot\/test\/compiler\/intrinsics\/bmi\/verifycode\/TZcntTestL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/intrinsics\/clone\/TestObjectClone.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/AddExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/AddExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/DecrementExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/DecrementExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/IncrementExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/IncrementExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/IntrinsicBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/MultiplyExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/MultiplyExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/NegateExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/NegateExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/SubtractExactIntTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/intrinsics\/mathexact\/sanity\/SubtractExactLongTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/intrinsics\/montgomerymultiply\/MontgomeryMultiplyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/SHAOptionsBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA1IntrinsicsOptionOnSupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA1IntrinsicsOptionOnUnsupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA256IntrinsicsOptionOnSupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA256IntrinsicsOptionOnUnsupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA512IntrinsicsOptionOnSupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHA512IntrinsicsOptionOnUnsupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHAOptionOnSupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary testcases\n+ * @library \/test\/lib \/compiler\/testlibrary testcases\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/TestUseSHAOptionOnUnsupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.OrPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n+import jdk.test.lib.cli.predicate.OrPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForOtherCPU.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForSupportedAArch64CPU.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForSupportedSparcCPU.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedAArch64CPU.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedSparcCPU.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.OrPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.OrPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/GenericTestCaseForUnsupportedX86CPU.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHAIntrinsicsSpecificTestCaseForUnsupportedSparcCPU.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForSupportedSparcCPU.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,6 +24,6 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/cli\/testcases\/UseSHASpecificTestCaseForUnsupportedSparcCPU.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA1Intrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA1MultiBlockIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA256Intrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA256MultiBlockIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA512Intrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary ..\/\n+ * @library \/test\/lib \/compiler\/testlibrary ..\/\n","filename":"hotspot\/test\/compiler\/intrinsics\/sha\/sanity\/TestSHA512MultiBlockIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import jdk.test.lib.process.*;\n+import static jdk.test.lib.Asserts.*;\n","filename":"hotspot\/test\/compiler\/jsr292\/MHInlineTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/jsr292\/PollutedTrapCounts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,2 +34,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/compiler\/loopopts\/UseCountedLoopSafepoints.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n@@ -32,1 +32,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/loopopts\/superword\/TestVectorizationWithInvariant.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/profiling\/spectrapredefineclass\/Launcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/testlibrary\/com\/oracle\/java\/testlibrary\n+ * @library \/test\/lib \/compiler\/whitebox \/test\/lib\/jdk\/test\/lib\n@@ -31,1 +31,1 @@\n- * @run main ClassFileInstaller com.oracle.java.testlibrary.Platform\n+ * @run main ClassFileInstaller jdk.test.lib.Platform\n@@ -42,1 +42,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/compiler\/rangechecks\/TestRangeCheckSmearing.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,3 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/RTMGenericCommandLineOptionTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/RTMLockingAwareTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,3 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestPrintPreciseRTMLockingStatisticsBase.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,2 +38,2 @@\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestPrintPreciseRTMLockingStatisticsOptionOnSupportedConfig.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,2 +38,2 @@\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestPrintPreciseRTMLockingStatisticsOptionOnUnsupportedConfig.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMAbortRatioOptionOnSupportedConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,2 +37,2 @@\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMAbortRatioOptionOnUnsupportedConfig.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMAbortThresholdOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMLockingCalculationDelayOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMLockingThresholdOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMRetryCountOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMSpinLoopCountOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMTotalCountIncrRateOptionOnSupportedConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n@@ -35,1 +35,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestRTMTotalCountIncrRateOptionOnUnsupportedConfig.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,3 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMDeoptOptionOnSupportedConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n@@ -39,2 +39,2 @@\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMDeoptOptionOnUnsupportedConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,3 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMForStackLocksOptionOnSupportedConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,4 +38,4 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMForStackLocksOptionOnUnsupportedConfig.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,3 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMLockingOptionOnSupportedConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,4 +37,5 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMLockingOptionOnUnsupportedCPU.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,4 +37,4 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.NotPredicate;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.NotPredicate;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMLockingOptionOnUnsupportedVM.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.*;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.*;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMLockingOptionWithBiasedLocking.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/rtm\/cli\/TestUseRTMXendForLockBusyOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMAbortRatio.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMAbortThreshold.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -40,3 +40,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMAfterNonRTMDeopt.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMDeoptOnHighAbortRatio.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMDeoptOnLowAbortRatio.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMLockingCalculationDelay.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMLockingThreshold.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMRetryCount.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMSpinLoopCount.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -40,3 +40,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestRTMTotalCountIncrRate.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -39,3 +39,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestUseRTMAfterLockInflation.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -37,3 +37,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestUseRTMDeopt.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestUseRTMForInflatedLocks.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestUseRTMForStackLocks.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -39,3 +39,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/locking\/TestUseRTMXendForLockBusy.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -38,3 +38,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/method_options\/TestNoRTMLockElidingOption.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -39,3 +39,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/method_options\/TestUseRTMLockElidingOption.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/testlibrary\n+ * @library \/test\/lib \/compiler\/testlibrary\n@@ -41,3 +41,4 @@\n-import com.oracle.java.testlibrary.*;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n+import jdk.test.lib.*;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/rtm\/print\/TestPrintPreciseRTMLockingStatistics.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableByte.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableDouble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableFloat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableInt.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableLong.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/stable\/TestStableShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/startup\/NumCompilerThreadsCheck.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/startup\/SmallCodeCacheStartup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library ..\/..\/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/compiler\/startup\/StartupOutput.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/AbortProvoker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/AbortType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/BusyLock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,4 +37,4 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.Utils;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/RTMTestBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/XAbortProvoker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/compiler\/testlibrary\/rtm\/predicate\/SupportedVM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,4 +26,4 @@\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.cli.predicate.AndPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.CPUSpecificPredicate;\n-import com.oracle.java.testlibrary.cli.predicate.OrPredicate;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.cli.predicate.AndPredicate;\n+import jdk.test.lib.cli.predicate.CPUSpecificPredicate;\n+import jdk.test.lib.cli.predicate.OrPredicate;\n","filename":"hotspot\/test\/compiler\/testlibrary\/sha\/predicate\/IntrinsicPredicates.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/tiered\/ConstantGettersTransitionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/tiered\/Level2RecompilationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/tiered\/LevelTransitionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/tiered\/NonTieredLevelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/compiler\/whitebox \/test\/lib\n+ * @library \/test\/lib \/compiler\/whitebox\n","filename":"hotspot\/test\/compiler\/tiered\/TieredLevelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/compiler\/tiered\/TransitionsTestExecutor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\/\n+ * @library \/test\/lib\/\n","filename":"hotspot\/test\/compiler\/types\/TestMeetIncompatibleInterfaceArrays.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -53,2 +53,2 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/CorrectnessTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -36,2 +36,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/OffTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/ArrayScenario.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/CheckCast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/ClassIdentity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/ClassInstanceOf.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/ClassIsInstance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/compiler\/types\/correctness\/scenarios\/ReceiverAtInvokes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/compiler\/unsafe\/MixedUnsafeStoreObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/compiler\/unsafe\/UnsafeRaw.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/ClearMethodStateTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/DeoptimizeAllTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/DeoptimizeMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/DeoptimizeMultipleOSRTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/EnqueueMethodForCompilationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/GetNMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/testlibrary\/com\/oracle\/java\/testlibrary\n+ * @library \/test\/lib \/test\/lib\/jdk\/test\/lib\n@@ -30,1 +30,1 @@\n- * @run main ClassFileInstaller com.oracle.java.testlibrary.Platform\n+ * @run main ClassFileInstaller jdk.test.lib.Platform\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/compiler\/whitebox\/IsMethodCompilableTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/MakeMethodNotCompilableTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/SetDontInlineMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/compiler\/whitebox\/SetForceInlineMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/6941923\/Test6941923.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -51,1 +52,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/gc\/TestGCLogRotationViaJcmd.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -41,1 +41,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/gc\/TestMemoryMXBeansAndPoolsPresence.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -44,2 +44,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/TestObjectAlignment.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/gc\/TestSoftReferencesBehaviorOnOOME.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,3 +31,3 @@\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/TestVerifyDuringStartup.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,2 +31,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/TestVerifySilently.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,2 +31,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/TestVerifySubSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -37,2 +37,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/arguments\/TestAggressiveHeap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestCMSHeapSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -31,1 +32,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestCompressedClassFlags.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import static com.oracle.java.testlibrary.Asserts.assertEQ;\n-import static com.oracle.java.testlibrary.Asserts.assertFalse;\n-import static com.oracle.java.testlibrary.Asserts.assertTrue;\n-import com.oracle.java.testlibrary.DynamicVMOption;\n+import static jdk.test.lib.Asserts.assertEQ;\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import jdk.test.lib.management.DynamicVMOption;\n@@ -33,1 +33,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestDynMaxHeapFreeRatio.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -36,4 +36,4 @@\n-import static com.oracle.java.testlibrary.Asserts.assertEQ;\n-import static com.oracle.java.testlibrary.Asserts.assertFalse;\n-import static com.oracle.java.testlibrary.Asserts.assertTrue;\n-import com.oracle.java.testlibrary.DynamicVMOption;\n+import static jdk.test.lib.Asserts.assertEQ;\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import jdk.test.lib.management.DynamicVMOption;\n","filename":"hotspot\/test\/gc\/arguments\/TestDynMinHeapFreeRatio.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestG1ConcRefinementThreads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestG1HeapSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestHeapFreeRatio.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestInitialTenuringThreshold.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestMaxHeapSizeTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -47,1 +47,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestMaxNewSize.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestMinInitialErgonomics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestParallelHeapSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestSerialHeapSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.ExitCode;\n-import com.oracle.java.testlibrary.cli.CommandLineOptionTest;\n+import jdk.test.lib.process.ExitCode;\n+import jdk.test.lib.cli.CommandLineOptionTest;\n@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestSurvivorAlignmentInBytesOption.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestUnrecognizedVMOptionsHandling.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/arguments\/TestUseCompressedOopsErgo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,2 +35,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/class_unloading\/TestCMSClassUnloadingEnabledHWM.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library  \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -57,1 +57,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/gc\/class_unloading\/TestClassUnloadingDisabled.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,2 +35,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/class_unloading\/TestG1ClassUnloadingHWM.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/concurrentMarkSweep\/CheckAllocateAndSystemGC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/concurrentMarkSweep\/GuardShrinkWarning.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/concurrentMarkSweep\/SystemGCOnForegroundCollector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/ergonomics\/TestDynamicNumberOfGCThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,2 +35,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/g1\/Test2GbHeap.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,3 +37,3 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/gc\/g1\/TestEagerReclaimHumongousRegions.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,2 +37,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/g1\/TestEagerReclaimHumongousRegionsClearMarkBits.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -40,3 +40,3 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import static jdk.test.lib.Asserts.*;\n","filename":"hotspot\/test\/gc\/g1\/TestEagerReclaimHumongousRegionsWithRefs.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestG1TraceEagerReclaimHumongousObjects.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestGCLogMessages.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/g1\/TestHumongousAllocInitialMark.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/g1\/TestHumongousCodeCacheRoots.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -41,1 +41,1 @@\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import static jdk.test.lib.Asserts.*;\n","filename":"hotspot\/test\/gc\/g1\/TestHumongousShrinkHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestPrintGCDetails.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/g1\/TestPrintRegionRememberedSetInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,5 +24,5 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData00.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData05.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData10.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData15.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData20.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData25.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/test\/lib\n- * @build com.oracle.java.testlibrary.* sun.hotspot.WhiteBox\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* sun.hotspot.WhiteBox\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkAuxiliaryData30.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -41,3 +41,3 @@\n-import static com.oracle.java.testlibrary.Asserts.*;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import static jdk.test.lib.Asserts.*;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestShrinkDefragmentedHeap.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationAgeThreshold.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationFullGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationInterned.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationPrintOptions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationTableRehash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationTableResize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestStringDeduplicationYoungGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestStringSymbolTableStats.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/g1\/TestSummarizeRSetStats.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/gc\/g1\/TestSummarizeRSetStatsPerRegion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -36,2 +36,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/g1\/TestSummarizeRSetStatsThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/g1\/TestSummarizeRSetStatsTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n- * @build ClassFileInstaller com.oracle.java.testlibrary.* sun.hotspot.WhiteBox TestOldGenCollectionUsage\n+ * @library \/test\/lib\n+ * @build ClassFileInstaller jdk.test.lib.* sun.hotspot.WhiteBox TestOldGenCollectionUsage\n@@ -41,1 +41,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/gc\/g1\/mixedgc\/TestOldGenCollectionUsage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/logging\/TestGCId.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -46,1 +47,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/gc\/metaspace\/CompressedClassSpaceSizeInJmapHeap.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n-package com.oracle.java.testlibrary;\n-\n","filename":"hotspot\/test\/gc\/metaspace\/InputArguments.java","additions":0,"deletions":2,"binary":false,"changes":2,"previous_filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/InputArguments.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -37,2 +37,2 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/gc\/metaspace\/TestCapacityUntilGCWrapAround.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspaceInitialization.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import com.oracle.java.testlibrary.*;\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import jdk.test.lib.*;\n+import static jdk.test.lib.Asserts.*;\n@@ -34,1 +34,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspaceMemoryPool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,6 @@\n-import com.oracle.java.testlibrary.*;\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.compiler.*;\n+import jdk.test.lib.process.*;\n+import static jdk.test.lib.Asserts.*;\n+import gc.testlibrary.PerfCounter;\n+import gc.testlibrary.PerfCounters;\n@@ -33,1 +37,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib \/\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspacePerfCounters.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,1 +33,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/metaspace\/TestMetaspaceSizeFlags.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,2 +27,3 @@\n-import com.oracle.java.testlibrary.*;\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import jdk.test.lib.*;\n+import static jdk.test.lib.Asserts.*;\n+import gc.testlibrary.PerfCounters;\n@@ -32,1 +33,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib \/\n","filename":"hotspot\/test\/gc\/metaspace\/TestPerfCountersAndMemoryPools.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/parallelScavenge\/AdaptiveGCBoundary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestCMS.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -35,2 +35,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestCMSForegroundFlags.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestCMSIncrementalMode.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestCMSNoIncrementalMode.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestDefNewCMS.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestDefaultMaxRAMFraction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestG1.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestIncGC.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestParNewCMS.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestParNewSerialOld.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestParallelGC.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestParallelScavengeSerialOld.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-* @library \/testlibrary\n+* @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/gc\/startup_warnings\/TestSerialGC.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -57,3 +57,3 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/gc\/survivorAlignment\/SurvivorAlignmentTestMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/survivorAlignment\/TestAllocationInEden.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/survivorAlignment\/TestPromotionFromEdenToTenured.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/survivorAlignment\/TestPromotionFromSurvivorToTenuredAfterFullGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/survivorAlignment\/TestPromotionFromSurvivorToTenuredAfterMinorGC.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc\/survivorAlignment\/TestPromotionToSurvivor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package com.oracle.java.testlibrary;\n+package gc.testlibrary;\n","filename":"hotspot\/test\/gc\/testlibrary\/PerfCounter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/PerfCounter.java","status":"renamed"},{"patch":"@@ -24,1 +24,3 @@\n-package com.oracle.java.testlibrary;\n+package gc.testlibrary;\n+\n+import jdk.test.lib.process.*;\n@@ -44,1 +46,1 @@\n-            String pid = Integer.toString(ProcessTools.getProcessId());\n+            String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/gc\/testlibrary\/PerfCounters.java","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/PerfCounters.java","status":"renamed"},{"patch":"@@ -28,2 +28,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n- * @build ClassFileInstaller com.oracle.java.testlibrary.* sun.hotspot.WhiteBox TestConcMarkCycleWB\n+ * @library \/test\/lib\n+ * @build ClassFileInstaller jdk.test.lib.* sun.hotspot.WhiteBox TestConcMarkCycleWB\n@@ -35,2 +35,2 @@\n-import static com.oracle.java.testlibrary.Asserts.assertFalse;\n-import static com.oracle.java.testlibrary.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertFalse;\n+import static jdk.test.lib.Asserts.assertTrue;\n","filename":"hotspot\/test\/gc\/whitebox\/TestConcMarkCycleWB.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/gc\/whitebox\/TestWBGC.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/gc_implementation\/g1\/TestNoEagerReclaimOfHumongousRegions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/8026365\/InvokeSpecialAnonTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CDSCompressedKPtrs\/CDSCompressedKPtrs.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CDSCompressedKPtrs\/CDSCompressedKPtrsError.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CDSCompressedKPtrs\/XShareAuto.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.*\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CheckEndorsedAndExtDirs\/EndorsedExtDirs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/ClassFile\/FormatCheckingTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -40,1 +40,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/ClassFile\/JsrRewriting.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -40,1 +40,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/ClassFile\/OomWhileParsingRepeatedJsr.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/ClassFile\/UnsupportedClassFileVersion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/ConstantPoolDependsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/DictionaryDependsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/KeepAliveClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/KeepAliveClassLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/KeepAliveObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/KeepAliveSoftReference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import com.oracle.java.testlibrary.InMemoryJavaCompiler;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"hotspot\/test\/runtime\/ClassUnload\/MyDiffClassLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/runtime\/testlibrary\n+ * @library \/test\/lib \/runtime\/testlibrary\n","filename":"hotspot\/test\/runtime\/ClassUnload\/SuperDependsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/runtime\/testlibrary \/testlibrary \/testlibrary\/whitebox\n+ * @library \/runtime\/testlibrary \/test\/lib\n","filename":"hotspot\/test\/runtime\/ClassUnload\/UnloadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/BooleanFlagWithInvalidValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/CompilerConfigFileWarning.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/ConfigFileParsing.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/ConfigFileWarning.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/FlagWithInvalidValue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/NonBooleanFlagWithInvalidBooleanPrefix.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/PrintFlagsUintxTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/TraceExceptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/UnrecognizedVMOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CommandLine\/VMOptionWarning.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CompressedOops\/CompressedClassPointers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/CompressedOops\/CompressedKlassPointerAndOops.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,2 +32,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/EnableTracing\/TestEnableTracing.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,3 +33,3 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/ErrorFileRedirectTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.*\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/TestCrashOnOutOfMemoryError.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.*\n@@ -33,2 +33,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/TestExitOnOutOfMemoryError.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build TestOnError com.oracle.java.testlibrary.*\n+ * @build TestOnError jdk.test.lib.*\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/TestOnError.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/testlibrary\n- * @build TestOnOutOfMemoryError com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build TestOnOutOfMemoryError jdk.test.lib.*\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/ErrorHandling\/TestOnOutOfMemoryError.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/LoadClass\/LoadClassNegative.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,2 +37,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/Metaspace\/MaxMetaspaceSizeEnvVarTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/Metaspace\/MaxMetaspaceSizeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/AutoshutdownNMT.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -39,1 +40,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/BaselineWithParameter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/runtime\/NMT\/ChangeTrackingLevel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/CommandLineDetail.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/CommandLineEmptyArgument.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/CommandLineInvalidArgument.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/CommandLineSummary.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/CommandLineTurnOffNMT.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/HugeArenaTracking.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -38,1 +39,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdBaselineDetail.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -46,1 +47,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdDetailDiff.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -40,1 +41,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdScale.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -40,1 +41,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdScaleDetail.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -46,1 +47,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdSummaryDiff.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -61,1 +62,1 @@\n-    pid = Integer.toString(ProcessTools.getProcessId());\n+    pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/JcmdWithNMTDisabled.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -47,1 +48,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/MallocRoundingReportTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -51,1 +52,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/MallocSiteHashOverflow.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -37,1 +37,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/MallocSiteTypeChange.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -38,1 +38,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -74,1 +75,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/MallocStressTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -44,1 +45,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/MallocTestType.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -39,1 +39,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -54,1 +55,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/MallocTrackingVerify.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/NMTWithCDS.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/PrintNMTStatistics.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/NMT\/PrintNMTStatisticsWithNMTDisabled.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/NMT\/ReleaseCommittedMemory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,3 +34,3 @@\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -50,1 +50,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/ReleaseNoCommit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -38,1 +39,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/ShutdownTwice.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -39,1 +40,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/SummaryAfterShutdown.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -45,1 +46,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/SummarySanityCheck.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -46,1 +47,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/ThreadedMallocTestType.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -45,1 +46,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/ThreadedVirtualAllocTestType.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -49,1 +50,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/VirtualAllocCommitUncommitRecommit.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n@@ -46,1 +47,1 @@\n-    String pid = Integer.toString(ProcessTools.getProcessId());\n+    String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/runtime\/NMT\/VirtualAllocTestType.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/PerfMemDestroy\/PerfMemDestroy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n@@ -35,1 +35,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/RedefineObject\/TestRedefineObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,1 @@\n-import static com.oracle.java.testlibrary.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertTrue;\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineAnnotations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineDoubleDelete.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineFinalizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import static com.oracle.java.testlibrary.Asserts.assertEquals;\n+import static jdk.test.lib.Asserts.assertEquals;\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineInterfaceCall.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineRunningMethods.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/RedefineTests\/RedefineRunningMethodsWithResolutionErrors.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/ArchiveDoesNotExist.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/CdsDifferentObjectAlignment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/CdsSameObjectAlignment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/DefaultUseWithClient.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/LimitSharedSizes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/PrintSharedArchiveAndExit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/SharedArchiveFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/SharedBaseAddress.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/SharedArchiveFile\/SpaceUtilizationCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -41,2 +41,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/StackTrace\/LargeClassTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -44,1 +44,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/runtime\/Thread\/TestThreadDumpMonitorContention.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/Unsafe\/RangeCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -35,1 +35,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/XCheckJniJsig\/XCheckJSig.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/classFileParserBug\/TestEmptyBootstrapMethodsAttr.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -44,2 +44,2 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Utils;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/CgroupSubsystemFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,3 +34,3 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/runtime\/containers\/cgroup\/PlainRead.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/CPUSetsReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,4 +33,4 @@\n-import com.oracle.java.testlibrary.Utils;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/DockerBasicTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,4 +35,4 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Common;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestCPUAwareness.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,7 +35,7 @@\n-import com.oracle.java.testlibrary.Common;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.Utils;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestCPUSets.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -35,4 +35,4 @@\n-import com.oracle.java.testlibrary.Common;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -40,1 +40,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestMemoryAwareness.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,5 +34,5 @@\n-import com.oracle.java.testlibrary.Common;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/containers\/docker\/TestMisc.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/contended\/Options.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.Asserts;\n+import jdk.test.lib.Asserts;\n","filename":"hotspot\/test\/runtime\/execstack\/TestCheckJDK.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/interned\/SanityTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,3 +31,3 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/memory\/LargePages\/TestLargePageSizeInBytes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -31,3 +31,3 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/runtime\/memory\/LargePages\/TestLargePagesFlags.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/memory\/ReadFromNoaccessArea.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/runtime\/memory\/ReadVMPageSize.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -37,1 +37,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/runtime\/memory\/ReserveMemory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/runtime\/memory\/RunUnitTestsConcurrently.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/memory\/StressVirtualSpaceResize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @library \/testlibrary \/test\/lib\n- * @build com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.*\n@@ -34,2 +34,2 @@\n-import com.oracle.java.testlibrary.ProcessTools;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/runtime\/os\/AvailableProcessors.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n@@ -34,1 +34,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/runtime\/verifier\/TestMultiANewArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/sanity\/MismatchedWhiteBox\/WhiteBox.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/sanity\/WBApi.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/serviceability\/ParserTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.* AttachWithStalePidFileTarget\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* AttachWithStalePidFileTarget\n@@ -34,1 +34,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/serviceability\/attach\/AttachWithStalePidFile.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/serviceability\/dcmd\/DynLibDcmdTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -35,1 +35,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -72,1 +72,1 @@\n-            String pid = Integer.toString(ProcessTools.getProcessId());\n+            String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/serviceability\/dcmd\/gc\/FinalizerInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -31,1 +31,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-        String pid = Integer.toString(ProcessTools.getProcessId());\n+        String pid = Long.toString(ProcessTools.getProcessId());\n","filename":"hotspot\/test\/serviceability\/dcmd\/gc\/HeapInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n- * @build ClassFileInstaller com.oracle.java.testlibrary.* GetObjectSizeOverflowAgent\n+ * @build ClassFileInstaller jdk.test.lib.* GetObjectSizeOverflowAgent\n@@ -38,1 +38,2 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/serviceability\/jvmti\/GetObjectSizeOverflow.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.* UnresolvedClassAgent\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* UnresolvedClassAgent\n@@ -36,2 +36,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/serviceability\/jvmti\/TestRedefineWithUnresolvedClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.*\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.*\n@@ -34,4 +34,4 @@\n-import com.oracle.java.testlibrary.JDKToolLauncher;\n-import com.oracle.java.testlibrary.OutputBuffer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.OutputBuffer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n@@ -55,1 +55,1 @@\n-        int pid = ProcessTools.getProcessId();\n+        long pid = ProcessTools.getProcessId();\n@@ -59,1 +59,1 @@\n-                                              .addToolArg(Integer.toString(pid));\n+                                              .addToolArg(Long.toString(pid));\n","filename":"hotspot\/test\/serviceability\/sa\/jmap-hashcode\/Test8028623.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -34,6 +34,6 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.JDKToolLauncher;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.Platform;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n@@ -46,2 +46,2 @@\n- * @library \/testlibrary\n- * @build com.oracle.java.testlibrary.* JMapHProfLargeHeapProc\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.* JMapHProfLargeHeapProc\n","filename":"hotspot\/test\/serviceability\/sa\/jmap-hprof\/JMapHProfLargeHeapTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/stress\/gc\/TestStressRSetCoarsening.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,257 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.FileNotFoundException;\n-import java.io.InputStream;\n-import java.io.ByteArrayInputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipOutputStream;\n-\n-\/**\n- * Dump a class file for a class on the class path in the current directory, or\n- * in the specified JAR file. This class is usually used when you build a class\n- * from a test library, but want to use this class in a sub-process.\n- *\n- * For example, to build the following library class:\n- * test\/lib\/sun\/hotspot\/WhiteBox.java\n- *\n- * You would use the following tags:\n- *\n- * @library \/test\/lib\n- * @build sun.hotspot.WhiteBox\n- *\n- * JTREG would build the class file under\n- * ${JTWork}\/classes\/test\/lib\/sun\/hotspot\/WhiteBox.class\n- *\n- * With you run your main test class using \"@run main MyMainClass\", JTREG would setup the\n- * -classpath to include \"${JTWork}\/classes\/test\/lib\/\", so MyMainClass would be able to\n- * load the WhiteBox class.\n- *\n- * However, if you run a sub process, and do not wish to use the exact same -classpath,\n- * You can use ClassFileInstaller to ensure that WhiteBox is available in the current\n- * directory of your test:\n- *\n- * @run main ClassFileInstaller sun.hotspot.WhiteBox\n- *\n- * Or, you can use the -jar option to store the class in the specified JAR file. If a relative\n- * path name is given, the JAR file would be relative to the current directory of\n- *\n- * @run main ClassFileInstaller -jar myjar.jar sun.hotspot.WhiteBox\n- *\/\n-public class ClassFileInstaller {\n-    \/**\n-     * You can enable debug tracing of ClassFileInstaller by running JTREG with\n-     * jtreg -DClassFileInstaller.debug=true ... <names of tests>\n-     *\/\n-    public static boolean DEBUG = Boolean.getBoolean(\"ClassFileInstaller.debug\");\n-\n-    \/**\n-     * @param args The names of the classes to dump\n-     * @throws Exception\n-     *\/\n-    public static void main(String... args) throws Exception {\n-        if (args.length > 1 && args[0].equals(\"-jar\")) {\n-            if (args.length < 2) {\n-                throw new RuntimeException(\"Usage: ClassFileInstaller <options> <classes>\\n\" +\n-                                           \"where possible options include:\\n\" +\n-                                           \"  -jar <path>             Write to the JAR file <path>\");\n-            }\n-            writeJar(args[1], null, args, 2, args.length);\n-        } else {\n-            if (DEBUG) {\n-                System.out.println(\"ClassFileInstaller: Writing to \" + System.getProperty(\"user.dir\"));\n-            }\n-            for (String arg : args) {\n-                writeClassToDisk(arg);\n-            }\n-        }\n-    }\n-\n-    public static class Manifest {\n-        private InputStream in;\n-\n-        private Manifest(InputStream in) {\n-            this.in = in;\n-        }\n-\n-        static Manifest fromSourceFile(String fileName) throws Exception {\n-            String pathName = System.getProperty(\"test.src\") + File.separator + fileName;\n-            return new Manifest(new FileInputStream(pathName));\n-        }\n-\n-        \/\/ Example:\n-        \/\/  String manifest = \"Premain-Class: RedefineClassHelper\\n\" +\n-        \/\/                \"Can-Redefine-Classes: true\\n\";\n-        \/\/  ClassFileInstaller.writeJar(\"redefineagent.jar\",\n-        \/\/    ClassFileInstaller.Manifest.fromString(manifest),\n-        \/\/    \"RedefineClassHelper\");\n-        static Manifest fromString(String manifest) throws Exception {\n-            return new Manifest(new ByteArrayInputStream(manifest.getBytes()));\n-        }\n-\n-        public InputStream getInputStream() {\n-            return in;\n-        }\n-    }\n-\n-    private static void writeJar(String jarFile, Manifest manifest, String classes[], int from, int to) throws Exception {\n-        if (DEBUG) {\n-            System.out.println(\"ClassFileInstaller: Writing to \" + getJarPath(jarFile));\n-        }\n-\n-        (new File(jarFile)).delete();\n-        FileOutputStream fos = new FileOutputStream(jarFile);\n-        ZipOutputStream zos = new ZipOutputStream(fos);\n-\n-        \/\/ The manifest must be the first or second entry. See comments in JarInputStream\n-        \/\/ constructor and JDK-5046178.\n-        if (manifest != null) {\n-            writeToDisk(zos, \"META-INF\/MANIFEST.MF\", manifest.getInputStream());\n-        }\n-\n-        for (int i=from; i<to; i++) {\n-            writeClassToDisk(zos, classes[i]);\n-        }\n-\n-        zos.close();\n-        fos.close();\n-    }\n-\n-    \/*\n-     * You can call ClassFileInstaller.writeJar() from your main test class instead of\n-     * using \"@run ClassFileInstaller -jar ...\". E.g.,\n-     *\n-     * String jarPath = ClassFileInstaller.getJarPath(\"myjar.jar\", \"sun.hotspot.WhiteBox\")\n-     *\n-     * If you call this API, make sure you build ClassFileInstaller with the following tags:\n-     *\n-     * @library testlibrary\n-     * @build ClassFileInstaller\n-     *\/\n-    public static String writeJar(String jarFile, String... classes) throws Exception {\n-        writeJar(jarFile, null, classes, 0, classes.length);\n-        return getJarPath(jarFile);\n-    }\n-\n-    public static String writeJar(String jarFile, Manifest manifest, String... classes) throws Exception {\n-        writeJar(jarFile, manifest, classes, 0, classes.length);\n-        return getJarPath(jarFile);\n-    }\n-\n-    \/**\n-     * This returns the absolute path to the file specified in \"@ClassFileInstaller -jar myjar.jar\",\n-     * In your test program, instead of using the JAR file name directly:\n-     *\n-     * String jarPath = \"myjar.jar\";\n-     *\n-     * you should call this function, like:\n-     *\n-     * String jarPath = ClassFileInstaller.getJarPath(\"myjar.jar\")\n-     *\n-     * The reasons are:\n-     * (1) Using absolute path makes it easy to cut-and-paste from the JTR file and rerun your\n-     *     test in any directory.\n-     * (2) In the future, we may make the JAR file name unique to avoid clobbering\n-     *     during parallel JTREG execution.\n-     *\n-     *\/\n-    public static String getJarPath(String jarFileName) {\n-        return new File(jarFileName).getAbsolutePath();\n-    }\n-\n-    public static void writeClassToDisk(String className) throws Exception {\n-        writeClassToDisk((ZipOutputStream)null, className);\n-    }\n-    private static void writeClassToDisk(ZipOutputStream zos, String className) throws Exception {\n-        writeClassToDisk(zos, className, \"\");\n-    }\n-\n-    public static void writeClassToDisk(String className, String prependPath) throws Exception {\n-        writeClassToDisk(null, className, prependPath);\n-    }\n-    private static void writeClassToDisk(ZipOutputStream zos, String className, String prependPath) throws Exception {\n-        ClassLoader cl = ClassFileInstaller.class.getClassLoader();\n-\n-        \/\/ Convert dotted class name to a path to a class file\n-        String pathName = className.replace('.', '\/').concat(\".class\");\n-        InputStream is = cl.getResourceAsStream(pathName);\n-        if (is == null) {\n-            throw new RuntimeException(\"Failed to find \" + pathName);\n-        }\n-        if (prependPath.length() > 0) {\n-            pathName = prependPath + \"\/\" + pathName;\n-        }\n-        writeToDisk(zos, pathName, is);\n-    }\n-\n-    public static void writeClassToDisk(String className, byte[] bytecode) throws Exception {\n-        writeClassToDisk(null, className, bytecode);\n-    }\n-    private static void writeClassToDisk(ZipOutputStream zos, String className, byte[] bytecode) throws Exception {\n-        writeClassToDisk(zos, className, bytecode, \"\");\n-    }\n-\n-    public static void writeClassToDisk(String className, byte[] bytecode, String prependPath) throws Exception {\n-        writeClassToDisk(null, className, bytecode, prependPath);\n-    }\n-    private static void writeClassToDisk(ZipOutputStream zos, String className, byte[] bytecode, String prependPath) throws Exception {\n-        \/\/ Convert dotted class name to a path to a class file\n-        String pathName = className.replace('.', '\/').concat(\".class\");\n-        if (prependPath.length() > 0) {\n-            pathName = prependPath + \"\/\" + pathName;\n-        }\n-        writeToDisk(zos, pathName, new ByteArrayInputStream(bytecode));\n-    }\n-\n-    private static void writeToDisk(ZipOutputStream zos, String pathName, InputStream is) throws Exception {\n-        if (DEBUG) {\n-            System.out.println(\"ClassFileInstaller: Writing \" + pathName);\n-        }\n-        if (zos != null) {\n-            ZipEntry ze = new ZipEntry(pathName);\n-            zos.putNextEntry(ze);\n-            byte[] buf = new byte[1024];\n-            int len;\n-            while ((len = is.read(buf))>0){\n-                zos.write(buf, 0, len);\n-            }\n-        } else {\n-            \/\/ Create the class file's package directory\n-            Path p = Paths.get(pathName);\n-            if (pathName.contains(\"\/\")) {\n-                Files.createDirectories(p.getParent());\n-            }\n-            \/\/ Create the class file\n-            Files.copy(is, p, StandardCopyOption.REPLACE_EXISTING);\n-        }\n-        is.close();\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/ClassFileInstaller.java","additions":0,"deletions":257,"binary":false,"changes":257,"status":"deleted"},{"patch":"@@ -1,453 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-\/**\n- * Asserts that can be used for verifying assumptions in tests.\n- *\n- * An assertion will throw a {@link RuntimeException} if the assertion isn't\n- * valid.  All the asserts can be imported into a test by using a static\n- * import:\n- *\n- * <pre>\n- * {@code\n- * import static com.oracle.java.testlibrary.Asserts.*;\n- * }\n- *\n- * Always provide a message describing the assumption if the line number of the\n- * failing assertion isn't enough to understand why the assumption failed. For\n- * example, if the assertion is in a loop or in a method that is called\n- * multiple times, then the line number won't provide enough context to\n- * understand the failure.\n- * <\/pre>\n- *\/\n-public class Asserts {\n-\n-    \/**\n-     * Shorthand for {@link #assertLessThan(T, T)}.\n-     *\n-     * @see #assertLessThan(T, T)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLT(T lhs, T rhs) {\n-        assertLessThan(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertLessThan(T, T, String)}.\n-     *\n-     * @see #assertLessThan(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLT(T lhs, T rhs, String msg) {\n-        assertLessThan(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertLessThan(T, T, String)} with a default message.\n-     *\n-     * @see #assertLessThan(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLessThan(T lhs, T rhs) {\n-        String msg = \"Expected that \" + format(lhs) + \" < \" + format(rhs);\n-        assertLessThan(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is less than {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static <T extends Comparable<T>>void assertLessThan(T lhs, T rhs, String msg) {\n-        assertTrue(compare(lhs, rhs, msg) < 0, msg);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertLessThanOrEqual(T, T)}.\n-     *\n-     * @see #assertLessThanOrEqual(T, T)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLTE(T lhs, T rhs) {\n-        assertLessThanOrEqual(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertLessThanOrEqual(T, T, String)}.\n-     *\n-     * @see #assertLessThanOrEqual(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLTE(T lhs, T rhs, String msg) {\n-        assertLessThanOrEqual(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertLessThanOrEqual(T, T, String)} with a default message.\n-     *\n-     * @see #assertLessThanOrEqual(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertLessThanOrEqual(T lhs, T rhs) {\n-        String msg = \"Expected that \" + format(lhs) + \" <= \" + format(rhs);\n-        assertLessThanOrEqual(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is less than or equal to {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static <T extends Comparable<T>> void assertLessThanOrEqual(T lhs, T rhs, String msg) {\n-        assertTrue(compare(lhs, rhs, msg) <= 0, msg);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertEquals(T, T)}.\n-     *\n-     * @see #assertEquals(T, T)\n-     *\/\n-    public static void assertEQ(Object lhs, Object rhs) {\n-        assertEquals(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertEquals(T, T, String)}.\n-     *\n-     * @see #assertEquals(T, T, String)\n-     *\/\n-    public static void assertEQ(Object lhs, Object rhs, String msg) {\n-        assertEquals(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertEquals(T, T, String)} with a default message.\n-     *\n-     * @see #assertEquals(T, T, String)\n-     *\/\n-    public static void assertEquals(Object lhs, Object rhs) {\n-        String msg = \"Expected \" + format(lhs) + \" to equal \" + format(rhs);\n-        assertEquals(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is equal to {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertEquals(Object lhs, Object rhs, String msg) {\n-        if (lhs == null) {\n-            if (rhs != null) {\n-                error(msg);\n-            }\n-        } else {\n-            assertTrue(lhs.equals(rhs), msg);\n-        }\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertGreaterThanOrEqual(T, T)}.\n-     *\n-     * @see #assertGreaterThanOrEqual(T, T)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGTE(T lhs, T rhs) {\n-        assertGreaterThanOrEqual(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertGreaterThanOrEqual(T, T, String)}.\n-     *\n-     * @see #assertGreaterThanOrEqual(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGTE(T lhs, T rhs, String msg) {\n-        assertGreaterThanOrEqual(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertGreaterThanOrEqual(T, T, String)} with a default message.\n-     *\n-     * @see #assertGreaterThanOrEqual(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGreaterThanOrEqual(T lhs, T rhs) {\n-        String msg = \"Expected that \" + format(lhs) + \" >= \" + format(rhs);\n-        assertGreaterThanOrEqual(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is greater than or equal to {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static <T extends Comparable<T>> void assertGreaterThanOrEqual(T lhs, T rhs, String msg) {\n-        assertTrue(compare(lhs, rhs, msg) >= 0, msg);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertGreaterThan(T, T)}.\n-     *\n-     * @see #assertGreaterThan(T, T)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGT(T lhs, T rhs) {\n-        assertGreaterThan(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertGreaterThan(T, T, String)}.\n-     *\n-     * @see #assertGreaterThan(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGT(T lhs, T rhs, String msg) {\n-        assertGreaterThan(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertGreaterThan(T, T, String)} with a default message.\n-     *\n-     * @see #assertGreaterThan(T, T, String)\n-     *\/\n-    public static <T extends Comparable<T>> void assertGreaterThan(T lhs, T rhs) {\n-        String msg = \"Expected that \" + format(lhs) + \" > \" + format(rhs);\n-        assertGreaterThan(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is greater than {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static <T extends Comparable<T>> void assertGreaterThan(T lhs, T rhs, String msg) {\n-        assertTrue(compare(lhs, rhs, msg) > 0, msg);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertNotEquals(T, T)}.\n-     *\n-     * @see #assertNotEquals(T, T)\n-     *\/\n-    public static void assertNE(Object lhs, Object rhs) {\n-        assertNotEquals(lhs, rhs);\n-    }\n-\n-    \/**\n-     * Shorthand for {@link #assertNotEquals(T, T, String)}.\n-     *\n-     * @see #assertNotEquals(T, T, String)\n-     *\/\n-    public static void assertNE(Object lhs, Object rhs, String msg) {\n-        assertNotEquals(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertNotEquals(T, T, String)} with a default message.\n-     *\n-     * @see #assertNotEquals(T, T, String)\n-     *\/\n-    public static void assertNotEquals(Object lhs, Object rhs) {\n-        String msg = \"Expected \" + format(lhs) + \" to not equal \" + format(rhs);\n-        assertNotEquals(lhs, rhs, msg);\n-    }\n-\n-    \/**\n-     * Asserts that {@code lhs} is not equal to {@code rhs}.\n-     *\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertNotEquals(Object lhs, Object rhs, String msg) {\n-        if (lhs == null) {\n-            if (rhs == null) {\n-                error(msg);\n-            }\n-        } else {\n-            assertFalse(lhs.equals(rhs), msg);\n-        }\n-    }\n-\n-    \/**\n-     * Calls {@link #assertNull(Object, String)} with a default message.\n-     *\n-     * @see #assertNull(Object, String)\n-     *\/\n-    public static void assertNull(Object o) {\n-        assertNull(o, \"Expected \" + format(o) + \" to be null\");\n-    }\n-\n-    \/**\n-     * Asserts that {@code o} is null.\n-     *\n-     * @param o The reference assumed to be null.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertNull(Object o, String msg) {\n-        assertEquals(o, null, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertNotNull(Object, String)} with a default message.\n-     *\n-     * @see #assertNotNull(Object, String)\n-     *\/\n-    public static void assertNotNull(Object o) {\n-        assertNotNull(o, \"Expected non null reference\");\n-    }\n-\n-    \/**\n-     * Asserts that {@code o} is <i>not<\/i> null.\n-     *\n-     * @param o The reference assumed <i>not<\/i> to be null,\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertNotNull(Object o, String msg) {\n-        assertNotEquals(o, null, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertFalse(boolean, String)} with a default message.\n-     *\n-     * @see #assertFalse(boolean, String)\n-     *\/\n-    public static void assertFalse(boolean value) {\n-        assertFalse(value, \"Expected value to be false\");\n-    }\n-\n-    \/**\n-     * Asserts that {@code value} is {@code false}.\n-     *\n-     * @param value The value assumed to be false.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertFalse(boolean value, String msg) {\n-        assertTrue(!value, msg);\n-    }\n-\n-    \/**\n-     * Calls {@link #assertTrue(boolean, String)} with a default message.\n-     *\n-     * @see #assertTrue(boolean, String)\n-     *\/\n-    public static void assertTrue(boolean value) {\n-        assertTrue(value, \"Expected value to be true\");\n-    }\n-\n-    \/**\n-     * Asserts that {@code value} is {@code true}.\n-     *\n-     * @param value The value assumed to be true.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if the assertion isn't valid.\n-     *\/\n-    public static void assertTrue(boolean value, String msg) {\n-        if (!value) {\n-            error(msg);\n-        }\n-    }\n-\n-    \/**\n-     * Asserts that two strings are equal.\n-     *\n-     * If strings are not equals, then exception message\n-     * will contain {@code msg} followed by list of mismatched lines.\n-     *\n-     * @param str1 First string to compare.\n-     * @param str2 Second string to compare.\n-     * @param msg A description of the assumption.\n-     * @throws RuntimeException if strings are not equal.\n-     *\/\n-    public static void assertStringsEqual(String str1, String str2,\n-                                          String msg) {\n-        String lineSeparator = System.getProperty(\"line.separator\");\n-        String str1Lines[] = str1.split(lineSeparator);\n-        String str2Lines[] = str2.split(lineSeparator);\n-\n-        int minLength = Math.min(str1Lines.length, str2Lines.length);\n-        String longestStringLines[] = ((str1Lines.length == minLength) ?\n-                                       str2Lines : str1Lines);\n-\n-        boolean stringsAreDifferent = false;\n-\n-        StringBuilder messageBuilder = new StringBuilder(msg);\n-\n-        messageBuilder.append(\"\\n\");\n-\n-        for (int line = 0; line < minLength; line++) {\n-            if (!str1Lines[line].equals(str2Lines[line])) {\n-                messageBuilder.append(String.\n-                                      format(\"[line %d] '%s' differs \" +\n-                                             \"from '%s'\\n\",\n-                                             line,\n-                                             str1Lines[line],\n-                                             str2Lines[line]));\n-                stringsAreDifferent = true;\n-            }\n-        }\n-\n-        if (minLength < longestStringLines.length) {\n-            String stringName = ((longestStringLines == str1Lines) ?\n-                                 \"first\" : \"second\");\n-            messageBuilder.append(String.format(\"Only %s string contains \" +\n-                                                \"following lines:\\n\",\n-                                                stringName));\n-            stringsAreDifferent = true;\n-            for(int line = minLength; line < longestStringLines.length; line++) {\n-                messageBuilder.append(String.\n-                                      format(\"[line %d] '%s'\", line,\n-                                             longestStringLines[line]));\n-            }\n-        }\n-\n-        if (stringsAreDifferent) {\n-            error(messageBuilder.toString());\n-        }\n-    }\n-\n-    private static <T extends Comparable<T>> int compare(T lhs, T rhs, String msg) {\n-        assertNotNull(lhs, msg);\n-        assertNotNull(rhs, msg);\n-        return lhs.compareTo(rhs);\n-    }\n-\n-    private static String format(Object o) {\n-        return o == null? \"null\" : o.toString();\n-    }\n-\n-    private static void error(String msg) {\n-        throw new RuntimeException(msg);\n-    }\n-\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Asserts.java","additions":0,"deletions":453,"binary":false,"changes":453,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.File;\n-import java.io.FileReader;\n-import java.util.Properties;\n-\n-public class BuildHelper {\n-\n-    \/**\n-     * Commercial builds should have the BUILD_TYPE set to commercial\n-     * within the release file, found at the root of the JDK.\n-     *\/\n-    public static boolean isCommercialBuild() throws Exception {\n-        String buildType = getReleaseProperty(\"BUILD_TYPE\",\"notFound\");\n-        return buildType.equals(\"commercial\");\n-    }\n-\n-\n-    \/**\n-     * Return the value for property key, or defaultValue if no property not found.\n-     * If present, double quotes are trimmed.\n-     *\/\n-    public static String getReleaseProperty(String key, String defaultValue) throws Exception {\n-        Properties properties = getReleaseProperties();\n-        String value = properties.getProperty(key, defaultValue);\n-        return trimDoubleQuotes(value);\n-    }\n-\n-    \/**\n-     * Return the value for property key, or null if no property not found.\n-     * If present, double quotes are trimmed.\n-     *\/\n-    public static String getReleaseProperty(String key) throws Exception {\n-        return getReleaseProperty(key, null);\n-    }\n-\n-    \/**\n-     * Get properties from the release file\n-     *\/\n-    public static Properties getReleaseProperties() throws Exception {\n-        Properties properties = new Properties();\n-        properties.load(new FileReader(getReleaseFile()));\n-        return properties;\n-    }\n-\n-    \/**\n-     * Every JDK has a release file in its root.\n-     * @return A handler to the release file.\n-     *\/\n-    public static File getReleaseFile() throws Exception {\n-        String jdkPath = getJDKRoot();\n-        File releaseFile = new File(jdkPath,\"release\");\n-        if ( ! releaseFile.canRead() ) {\n-            throw new Exception(\"Release file is not readable, or it is absent: \" +\n-                    releaseFile.getCanonicalPath());\n-        }\n-        return releaseFile;\n-    }\n-\n-    \/**\n-     * Returns path to the JDK under test.\n-     * This path is obtained through the test.jdk property, usually set by JTREG.\n-     *\/\n-    public static String getJDKRoot() {\n-        String jdkPath = System.getProperty(\"test.jdk\");\n-        if (jdkPath == null) {\n-            throw new RuntimeException(\"System property 'test.jdk' not set. This property is normally set by jtreg. \"\n-                    + \"When running test separately, set this property using '-Dtest.jdk=\/path\/to\/jdk'.\");\n-        }\n-        return jdkPath;\n-    }\n-\n-    \/**\n-     * Trim double quotes from the beginning and the end of the given string.\n-     * @param original string to trim.\n-     * @return a new trimmed string.\n-     *\/\n-    public static String trimDoubleQuotes(String original) {\n-        if (original == null) { return null; }\n-        String trimmed = original.replaceAll(\"^\\\"+|\\\"+$\", \"\");\n-        return trimmed;\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/BuildHelper.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.security.SecureClassLoader;\n-\n-\/**\n- * {@code ByteCodeLoader} can be used for easy loading of byte code already\n- * present in memory.\n- *\n- * {@code InMemoryCompiler} can be used for compiling source code in a string\n- * into byte code, which then can be loaded with {@code ByteCodeLoader}.\n- *\n- * @see InMemoryCompiler\n- *\/\n-public class ByteCodeLoader extends SecureClassLoader {\n-    private final String className;\n-    private final byte[] byteCode;\n-\n-    \/**\n-     * Creates a new {@code ByteCodeLoader} ready to load a class with the\n-     * given name and the given byte code.\n-     *\n-     * @param className The name of the class\n-     * @param byteCode The byte code of the class\n-     *\/\n-    public ByteCodeLoader(String className, byte[] byteCode) {\n-        this.className = className;\n-        this.byteCode = byteCode;\n-    }\n-\n-    @Override\n-    protected Class<?> findClass(String name) throws ClassNotFoundException {\n-        if (!name.equals(className)) {\n-            throw new ClassNotFoundException(name);\n-        }\n-\n-        return defineClass(name, byteCode, 0, byteCode.length);\n-    }\n-\n-    \/**\n-     * Utility method for creating a new {@code ByteCodeLoader} and then\n-     * directly load the given byte code.\n-     *\n-     * @param className The name of the class\n-     * @param byteCode The byte code for the class\n-     * @throws ClassNotFoundException if the class can't be loaded\n-     * @return A {@see Class} object representing the class\n-     *\/\n-    public static Class<?> load(String className, byte[] byteCode) throws ClassNotFoundException {\n-        return new ByteCodeLoader(className, byteCode).loadClass(className);\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/ByteCodeLoader.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-\/*\n- * Methods and definitions common to docker tests container in this directory\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import com.oracle.java.testlibrary.DockerTestUtils;\n-import com.oracle.java.testlibrary.DockerRunOptions;\n-import com.oracle.java.testlibrary.Utils;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-\n-\n-public class Common {\n-    public static final String imageNameAndTag = \"jdk-internal:test\";\n-\n-    public static String imageName(String suffix) {\n-        return imageNameAndTag + \"-\" + suffix;\n-    }\n-\n-    public static void prepareWhiteBox() throws Exception {\n-        Path whiteboxPath = Paths.get(Utils.TEST_CLASSES, \"whitebox.jar\");\n-        if( !Files.exists(whiteboxPath) ) {\n-            Files.copy(Paths.get(new File(\"whitebox.jar\").getAbsolutePath()),\n-                   Paths.get(Utils.TEST_CLASSES, \"whitebox.jar\"));\n-        }\n-    }\n-\n-    \/\/ create simple commonly used options\n-    public static DockerRunOptions newOpts(String imageNameAndTag) {\n-        return new DockerRunOptions(imageNameAndTag, \"\/jdk\/bin\/java\", \"-version\")\n-            .addJavaOpts(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintContainerInfo\");\n-    }\n-\n-\n-    \/\/ create commonly used options with class to be launched inside container\n-    public static DockerRunOptions newOpts(String imageNameAndTag, String testClass) {\n-        DockerRunOptions opts =\n-            new DockerRunOptions(imageNameAndTag, \"\/jdk\/bin\/java\", testClass);\n-       opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\");\n-        opts.addJavaOpts(\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintContainerInfo\", \"-cp\", \"\/test-classes\/\");\n-        return opts;\n-    }\n-\n-    public static DockerRunOptions addWhiteBoxOpts(DockerRunOptions opts) {\n-        opts.addJavaOpts(\"-Xbootclasspath\/a:\/test-classes\/whitebox.jar\",\n-                         \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+WhiteBoxAPI\");\n-        return opts;\n-    }\n-\n-    \/\/ most common type of run and checks\n-    public static OutputAnalyzer run(DockerRunOptions opts) throws Exception {\n-        return DockerTestUtils.dockerRunJava(opts)\n-            .shouldHaveExitValue(0).shouldContain(\"Initializing Container Support\");\n-    }\n-\n-\n-    \/\/ log beginning of a test case\n-    public static void logNewTestCase(String msg) {\n-        System.out.println(\"========== NEW TEST CASE:      \" + msg);\n-    }\n-\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Common.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.java.testlibrary;\n-\n-public class Container {\n-    \/\/ Use this property to specify docker location on your system.\n-    \/\/ E.g.: \"\/usr\/local\/bin\/docker\". We define this constant here so\n-    \/\/ that it can be used in VMProps as well which checks docker support\n-    \/\/ via this command\n-    public static final String ENGINE_COMMAND =\n-        System.getProperty(\"jdk.test.container.command\", \"docker\");\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Container.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-\n-\n-\/\/ This class represents options for running java inside docker containers\n-\/\/ in test environment.\n-public class DockerRunOptions {\n-    public String imageNameAndTag;\n-    public ArrayList<String> dockerOpts = new ArrayList<>();\n-    public String command;    \/\/ normally a full path to java\n-    public ArrayList<String> javaOpts = new ArrayList<>();\n-    \/\/ more java options, but to be set AFTER the test Java options\n-    public ArrayList<String> javaOptsAppended = new ArrayList<>();\n-    public String classToRun;  \/\/ class or \"-version\"\n-    public ArrayList<String> classParams = new ArrayList<>();\n-\n-    public boolean tty = true;\n-    public boolean removeContainerAfterUse = true;\n-    public boolean appendTestJavaOptions = true;\n-    public boolean retainChildStdout = false;\n-\n-    \/**\n-     * Convenience constructor for most common use cases in testing.\n-     * @param imageNameAndTag  a string representing name and tag for the\n-     *        docker image to run, as \"name:tag\"\n-     * @param javaCmd  a java command to run (e.g. \/jdk\/bin\/java)\n-     * @param classToRun  a class to run, or \"-version\"\n-     * @param javaOpts  java options to use\n-     *\n-     * @return Default docker run options\n-     *\/\n-    public DockerRunOptions(String imageNameAndTag, String javaCmd,\n-                            String classToRun, String... javaOpts) {\n-        this.imageNameAndTag = imageNameAndTag;\n-        this.command = javaCmd;\n-        this.classToRun = classToRun;\n-        this.addJavaOpts(javaOpts);\n-    }\n-\n-    public DockerRunOptions addDockerOpts(String... opts) {\n-        Collections.addAll(dockerOpts, opts);\n-        return this;\n-    }\n-\n-    public DockerRunOptions addJavaOpts(String... opts) {\n-        Collections.addAll(javaOpts, opts);\n-        return this;\n-    }\n-\n-    public DockerRunOptions addJavaOptsAppended(String... opts) {\n-        Collections.addAll(javaOptsAppended, opts);\n-        return this;\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DockerRunOptions.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,300 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.SimpleFileVisitor;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import com.oracle.java.testlibrary.Utils;\n-import com.oracle.java.testlibrary.Container;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n-\n-public class DockerTestUtils {\n-    private static final String FS = File.separator;\n-    private static boolean isDockerEngineAvailable = false;\n-    private static boolean wasDockerEngineChecked = false;\n-\n-    \/\/ Set this property to true to retain image after test. By default\n-    \/\/ images are removed after test execution completes.\n-    \/\/ Retaining the image can be useful for diagnostics and image inspection.\n-    \/\/ E.g.: start image interactively: docker run -it <IMAGE_NAME>.\n-    public static final boolean RETAIN_IMAGE_AFTER_TEST =\n-        Boolean.getBoolean(\"jdk.test.docker.retain.image\");\n-\n-    \/\/ Path to a JDK under test.\n-    \/\/ This may be useful when developing tests on non-Linux platforms.\n-    public static final String JDK_UNDER_TEST =\n-        System.getProperty(\"jdk.test.docker.jdk\", Utils.TEST_JDK);\n-\n-\n-    \/**\n-     * Optimized check of whether the docker engine is available in a given\n-     * environment. Checks only once, then remembers the result in a singleton.\n-     *\n-     * @return true if docker engine is available\n-     * @throws Exception\n-     *\/\n-    public static boolean isDockerEngineAvailable() throws Exception {\n-        if (wasDockerEngineChecked)\n-            return isDockerEngineAvailable;\n-\n-        isDockerEngineAvailable = isDockerEngineAvailableCheck();\n-        wasDockerEngineChecked = true;\n-        return isDockerEngineAvailable;\n-    }\n-\n-\n-    \/**\n-     * Convenience method, will check if docker engine is available and usable;\n-     * will print the appropriate message when not available.\n-     *\n-     * @return true if docker engine is available\n-     * @throws Exception\n-     *\/\n-    public static boolean canTestDocker() throws Exception {\n-        if (isDockerEngineAvailable()) {\n-            return true;\n-        } else {\n-            System.out.println(\"Docker engine is not available on this system\");\n-            System.out.println(\"This test is SKIPPED\");\n-            return false;\n-        }\n-    }\n-\n-\n-    \/**\n-     * Simple check - is docker engine available, accessible and usable.\n-     * Run basic docker command: 'docker ps' - list docker instances.\n-     * If docker engine is available and accesible then true is returned\n-     * and we can proceed with testing docker.\n-     *\n-     * @return true if docker engine is available and usable\n-     * @throws Exception\n-     *\/\n-    private static boolean isDockerEngineAvailableCheck() throws Exception {\n-        try {\n-            execute(Container.ENGINE_COMMAND, \"ps\")\n-                .shouldHaveExitValue(0)\n-                .shouldContain(\"CONTAINER\")\n-                .shouldContain(\"IMAGE\");\n-        } catch (Exception e) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-\n-    \/**\n-     * Build a docker image that contains JDK under test.\n-     * The jdk will be placed under the \"\/jdk\/\" folder inside the docker file system.\n-     *\n-     * @param imageName     name of the image to be created, including version tag\n-     * @param dockerfile    name of the dockerfile residing in the test source;\n-     *                      we check for a platform specific dockerfile as well\n-     *                      and use this one in case it exists\n-     * @param buildDirName  name of the docker build\/staging directory, which will\n-     *                      be created in the jtreg's scratch folder\n-     * @throws Exception\n-     *\/\n-    public static void\n-        buildJdkDockerImage(String imageName, String dockerfile, String buildDirName)\n-            throws Exception {\n-        Path buildDir = Paths.get(\".\", buildDirName);\n-        if (Files.exists(buildDir)) {\n-            throw new RuntimeException(\"The docker build directory already exists: \" + buildDir);\n-        }\n-\n-        Path jdkSrcDir = Paths.get(JDK_UNDER_TEST);\n-        Path jdkDstDir = buildDir.resolve(\"jdk\");\n-\n-        Files.createDirectories(jdkDstDir);\n-\n-        \/\/ Copy JDK-under-test tree to the docker build directory.\n-        \/\/ This step is required for building a docker image.\n-        Files.walkFileTree(jdkSrcDir, new CopyFileVisitor(jdkSrcDir, jdkDstDir));\n-        buildDockerImage(imageName, Paths.get(Utils.TEST_SRC, dockerfile), buildDir);\n-    }\n-\n-\n-    \/**\n-     * Build a docker image based on given docker file and docker build directory.\n-     *\n-     * @param imageName  name of the image to be created, including version tag\n-     * @param dockerfile  path to the Dockerfile to be used for building the docker\n-     *        image. The specified dockerfile will be copied to the docker build\n-     *        directory as 'Dockerfile'\n-     * @param buildDir  build directory; it should already contain all the content\n-     *        needed to build the docker image.\n-     * @throws Exception\n-     *\/\n-    public static void\n-        buildDockerImage(String imageName, Path dockerfile, Path buildDir) throws Exception {\n-        generateDockerFile(buildDir.resolve(\"Dockerfile\"),\n-                           DockerfileConfig.getBaseImageName(),\n-                           DockerfileConfig.getBaseImageVersion());\n-\n-        \/\/ Build the docker\n-        execute(Container.ENGINE_COMMAND, \"build\", \"--no-cache\", \"--tag\", imageName, buildDir.toString())\n-            .shouldHaveExitValue(0);\n-    }\n-\n-\n-    \/**\n-     * Run Java inside the docker image with specified parameters and options.\n-     *\n-     * @param DockerRunOptions optins for running docker\n-     *\n-     * @return output of the run command\n-     * @throws Exception\n-     *\/\n-    public static OutputAnalyzer dockerRunJava(DockerRunOptions opts) throws Exception {\n-        ArrayList<String> cmd = new ArrayList<>();\n-\n-        cmd.add(Container.ENGINE_COMMAND);\n-        cmd.add(\"run\");\n-        if (opts.tty)\n-            cmd.add(\"--tty=true\");\n-        if (opts.removeContainerAfterUse)\n-            cmd.add(\"--rm\");\n-\n-        cmd.addAll(opts.dockerOpts);\n-        cmd.add(opts.imageNameAndTag);\n-        cmd.add(opts.command);\n-\n-        cmd.addAll(opts.javaOpts);\n-        if (opts.appendTestJavaOptions) {\n-            Collections.addAll(cmd, Utils.getTestJavaOpts());\n-        }\n-        cmd.addAll(opts.javaOptsAppended);\n-\n-        cmd.add(opts.classToRun);\n-        cmd.addAll(opts.classParams);\n-        return execute(cmd);\n-    }\n-\n-\n-     \/**\n-     * Remove docker image\n-     *\n-     * @param DockerRunOptions optins for running docker\n-     * @throws Exception\n-     *\/\n-    public static void removeDockerImage(String imageNameAndTag) throws Exception {\n-            execute(Container.ENGINE_COMMAND, \"rmi\", \"--force\", imageNameAndTag);\n-    }\n-\n-\n-\n-    \/**\n-     * Convenience method - express command as sequence of strings\n-     *\n-     * @param command to execute\n-     * @return The output from the process\n-     * @throws Exception\n-     *\/\n-    public static OutputAnalyzer execute(List<String> command) throws Exception {\n-        return execute(command.toArray(new String[command.size()]));\n-    }\n-\n-\n-    \/**\n-     * Execute a specified command in a process, report diagnostic info.\n-     *\n-     * @param command to be executed\n-     * @return The output from the process\n-     * @throws Exception\n-     *\/\n-    public static OutputAnalyzer execute(String... command) throws Exception {\n-\n-        ProcessBuilder pb = new ProcessBuilder(command);\n-        System.out.println(\"[COMMAND]\\n\" + Utils.getCommandLine(pb));\n-\n-        long started = System.currentTimeMillis();\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-\n-        System.out.println(\"[ELAPSED: \" + (System.currentTimeMillis() - started) + \" ms]\");\n-        System.out.println(\"[STDERR]\\n\" + output.getStderr());\n-        System.out.println(\"[STDOUT]\\n\" + output.getStdout());\n-\n-        return output;\n-    }\n-\n-\n-    private static void generateDockerFile(Path dockerfile, String baseImage,\n-                                           String baseImageVersion) throws Exception {\n-        String template =\n-            \"FROM %s:%s\\n\" +\n-            \"COPY \/jdk \/jdk\\n\" +\n-            \"ENV JAVA_HOME=\/jdk\\n\" +\n-            \"CMD [\\\"\/bin\/bash\\\"]\\n\";\n-        String dockerFileStr = String.format(template, baseImage, baseImageVersion);\n-        Files.write(dockerfile, dockerFileStr.getBytes(StandardCharsets.UTF_8));\n-    }\n-\n-\n-    private static class CopyFileVisitor extends SimpleFileVisitor<Path> {\n-        private final Path src;\n-        private final Path dst;\n-\n-        public CopyFileVisitor(Path src, Path dst) {\n-            this.src = src;\n-            this.dst = dst;\n-        }\n-\n-\n-        @Override\n-        public FileVisitResult preVisitDirectory(Path file,\n-                BasicFileAttributes attrs) throws IOException {\n-            Path dstDir = dst.resolve(src.relativize(file));\n-            if (!dstDir.toFile().exists()) {\n-                Files.createDirectories(dstDir);\n-            }\n-            return FileVisitResult.CONTINUE;\n-        }\n-\n-\n-        @Override\n-        public FileVisitResult visitFile(Path file,\n-                BasicFileAttributes attrs) throws IOException {\n-            if (!file.toFile().isFile()) {\n-                return FileVisitResult.CONTINUE;\n-            }\n-            Path dstFile = dst.resolve(src.relativize(file));\n-            Files.copy(file, dstFile, StandardCopyOption.COPY_ATTRIBUTES);\n-            return FileVisitResult.CONTINUE;\n-        }\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DockerTestUtils.java","additions":0,"deletions":300,"binary":false,"changes":300,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-\/\/ Use the following properties to specify docker base image at test execution time:\n-\/\/ Image name: jdk.test.docker.image.name\n-\/\/ Image version: jdk.test.docker.image.version\n-\/\/ Usage:\n-\/\/     jtreg -Djdk.test.docker.image.name=<BASE_IMAGE_NAME> -Djdk.test.docker.image.version=<BASE_IMAGE_VERSION> test\/hotspot\/jtreg\/runtime\/containers\/docker\/\n-\/\/ E.g.:\n-\/\/     jtreg -Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=latest test\/hotspot\/jtreg\/runtime\/containers\/docker\/\n-\/\/ Using make:\n-\/\/     make test TEST=\"test\/hotspot\/jtreg\/runtime\/containers\/docker\" JTREG=\"JAVA_OPTIONS=-Djdk.test.docker.image.name=ubuntu -Djdk.test.docker.image.version=latest\"\n-\/\/ Note: base image version should not be an empty string. Use \"latest\" to get the latest version.\n-\n-public class DockerfileConfig {\n-    static String getBaseImageName() {\n-        String name = System.getProperty(\"jdk.test.docker.image.name\");\n-        if (name != null) {\n-            System.out.println(\"DockerfileConfig: using custom image name: \" + name);\n-            return name;\n-        }\n-\n-        switch (Platform.getOsArch()) {\n-            case \"aarch64\":\n-                return \"arm64v8\/ubuntu\";\n-            case \"ppc64le\":\n-                return \"ppc64le\/ubuntu\";\n-            case \"s390x\":\n-                return \"s390x\/ubuntu\";\n-            default:\n-                return \"oraclelinux\";\n-        }\n-    }\n-\n-    static String getBaseImageVersion() {\n-        String version = System.getProperty(\"jdk.test.docker.image.version\");\n-        if (version != null) {\n-            System.out.println(\"DockerfileConfig: using custom image version: \" + version);\n-            return version;\n-        }\n-\n-        switch (Platform.getOsArch()) {\n-            case \"aarch64\":\n-            case \"ppc64le\":\n-            case \"s390x\":\n-                return \"latest\";\n-            default:\n-                return \"7.6\";\n-        }\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DockerfileConfig.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,165 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.java.testlibrary;\n-\n-import com.sun.management.HotSpotDiagnosticMXBean;\n-import java.lang.management.ManagementFactory;\n-\n-\/**\n- * A utility class to work with VM options which could be altered during\n- * execution.\n- *\n- * This class is a wrapper around {@code com.sun.management.VMOption}.\n- * It provides more convenient interface to read\/write the values.\n- *\n- *\/\n-public class DynamicVMOption {\n-\n-    private final HotSpotDiagnosticMXBean mxBean;\n-\n-    \/**\n-     * VM option name, like \"MinHeapFreeRatio\".\n-     *\/\n-    public final String name;\n-\n-    \/**\n-     * Creates an instance of DynamicVMOption.\n-     *\n-     * @param name the VM option name\n-     *\/\n-    public DynamicVMOption(String name) {\n-        this.name = name;\n-        mxBean = ManagementFactory.getPlatformMXBean(HotSpotDiagnosticMXBean.class);\n-    }\n-\n-    \/**\n-     * Sets a new value for the option.\n-     * Trying to set not applicable value will cause IllegalArgumentException.\n-     * Behavior with null is undefined, most likely NPE will be thrown.\n-     *\n-     * @param newValue the value to be set\n-     * @see #getValue()\n-     * @throws IllegalArgumentException if newValue is not applicable to the option\n-     *\/\n-    public final void setValue(String newValue) {\n-        mxBean.setVMOption(name, newValue);\n-    }\n-\n-    \/**\n-     * Returns the value of option.\n-     *\n-     * @return the current option value\n-     * @see #setValue(java.lang.String)\n-     *\/\n-    public final String getValue() {\n-        return mxBean.getVMOption(name).getValue();\n-    }\n-\n-    \/**\n-     * Returns true, if option is writable, false otherwise.\n-     *\n-     * @return true, if option is writable, false otherwise\n-     *\/\n-    public final boolean isWriteable() {\n-        return mxBean.getVMOption(name).isWriteable();\n-    }\n-\n-    \/**\n-     * Checks if the given value is applicable for the option.\n-     *\n-     * This method tries to set the option to the new value. If no exception\n-     * has been thrown the value is treated as valid.\n-     *\n-     * Calling this method will not change the option value. After an attempt\n-     * to set a new value, the option will be restored to its previous value.\n-     *\n-     * @param value the value to verify\n-     * @return true if option could be set to the given value\n-     *\/\n-    public boolean isValidValue(String value) {\n-        boolean isValid = true;\n-        String oldValue = getValue();\n-        try {\n-            setValue(value);\n-        } catch (NullPointerException e) {\n-            if (value == null) {\n-                isValid = false;\n-            }\n-        } catch (IllegalArgumentException e) {\n-            isValid = false;\n-        } finally {\n-            setValue(oldValue);\n-        }\n-        return isValid;\n-    }\n-\n-    \/**\n-     * Returns the value of the given VM option as String.\n-     *\n-     * This is a simple shortcut for {@code new DynamicVMOption(name).getValue()}\n-     *\n-     * @param name the name of VM option\n-     * @return value as a string\n-     * @see #getValue()\n-     *\/\n-    public static String getString(String name) {\n-        return new DynamicVMOption(name).getValue();\n-    }\n-\n-    \/**\n-     * Returns the value of the given option as int.\n-     *\n-     * @param name the name of VM option\n-     * @return value parsed as integer\n-     * @see #getString(java.lang.String)\n-     *\n-     *\/\n-    public static int getInt(String name) {\n-        return Integer.parseInt(getString(name));\n-    }\n-\n-    \/**\n-     * Sets the VM option to a new value.\n-     *\n-     * This is a simple shortcut for {@code new DynamicVMOption(name).setValue(value)}\n-     *\n-     * @param name the name of VM option\n-     * @param value the value to be set\n-     * @see #setValue(java.lang.String)\n-     *\/\n-    public static void setString(String name, String value) {\n-        new DynamicVMOption(name).setValue(value);\n-    }\n-\n-    \/**\n-     * Sets the VM option value to a new integer value.\n-     *\n-     * @param name the name of VM option\n-     * @param value the integer value to be set\n-     * @see #setString(java.lang.String, java.lang.String)\n-     *\/\n-    public static void setInt(String name, int value) {\n-        new DynamicVMOption(name).setValue(Integer.toString(value));\n-    }\n-\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/DynamicVMOption.java","additions":0,"deletions":165,"binary":false,"changes":165,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-\/**\n- * Exit code values that could be returned by the JVM.\n- *\/\n-public enum ExitCode {\n-    OK(0),\n-    FAIL(1),\n-    CRASH(134);\n-\n-    public final int value;\n-\n-    ExitCode(int value) {\n-        this.value = value;\n-    }\n-}\n-\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/ExitCode.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.FileNotFoundException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-\n-public final class JDKToolFinder {\n-\n-    private JDKToolFinder() {\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code test.jdk} or {@code compile.jdk} (both are set by the jtreg test suite)\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getJDKTool(String tool) {\n-\n-        \/\/ First try to find the executable in test.jdk\n-        try {\n-            return getTool(tool, \"test.jdk\");\n-        } catch (FileNotFoundException e) {\n-\n-        }\n-\n-        \/\/ Now see if it's available in compile.jdk\n-        try {\n-            return getTool(tool, \"compile.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(\"Failed to find \" + tool +\n-                    \", looked in test.jdk (\" + System.getProperty(\"test.jdk\") +\n-                    \") and compile.jdk (\" + System.getProperty(\"compile.jdk\") + \")\");\n-        }\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code compile.jdk}\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getCompileJDKTool(String tool) {\n-        try {\n-            return getTool(tool, \"compile.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Returns the full path to an executable in jdk\/bin based on System\n-     * property {@code test.jdk}\n-     *\n-     * @return Full path to an executable in jdk\/bin\n-     *\/\n-    public static String getTestJDKTool(String tool) {\n-        try {\n-            return getTool(tool, \"test.jdk\");\n-        } catch (FileNotFoundException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static String getTool(String tool, String property) throws FileNotFoundException {\n-        String jdkPath = System.getProperty(property);\n-\n-        if (jdkPath == null) {\n-            throw new RuntimeException(\n-                    \"System property '\" + property + \"' not set. This property is normally set by jtreg. \"\n-                    + \"When running test separately, set this property using '-D\" + property + \"=\/path\/to\/jdk'.\");\n-        }\n-\n-        Path toolName = Paths.get(\"bin\", tool + (Platform.isWindows() ? \".exe\" : \"\"));\n-\n-        Path jdkTool = Paths.get(jdkPath, toolName.toString());\n-        if (!jdkTool.toFile().exists()) {\n-            throw new FileNotFoundException(\"Could not find file \" + jdkTool.toAbsolutePath());\n-        }\n-\n-        return jdkTool.toAbsolutePath().toString();\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/JDKToolFinder.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\/**\n- * A utility for constructing command lines for starting JDK tool processes.\n- *\n- * The JDKToolLauncher can in particular be combined with a\n- * java.lang.ProcessBuilder to easily run a JDK tool. For example, the following\n- * code run {@code jmap -heap} against a process with GC logging turned on for\n- * the {@code jmap} process:\n- *\n- * <pre>\n- * {@code\n- * JDKToolLauncher jmap = JDKToolLauncher.create(\"jmap\")\n- *                                       .addVMArg(\"-XX:+PrintGC\");\n- *                                       .addVMArg(\"-XX:+PrintGCDetails\")\n- *                                       .addToolArg(\"-heap\")\n- *                                       .addToolArg(pid);\n- * ProcessBuilder pb = new ProcessBuilder(jmap.getCommand());\n- * Process p = pb.start();\n- * }\n- * <\/pre>\n- *\/\n-public class JDKToolLauncher {\n-    private final String executable;\n-    private final List<String> vmArgs = new ArrayList<String>();\n-    private final List<String> toolArgs = new ArrayList<String>();\n-\n-    private JDKToolLauncher(String tool, boolean useCompilerJDK) {\n-        if (useCompilerJDK) {\n-            executable = JDKToolFinder.getJDKTool(tool);\n-        } else {\n-            executable = JDKToolFinder.getTestJDKTool(tool);\n-        }\n-        vmArgs.addAll(Arrays.asList(ProcessTools.getPlatformSpecificVMArgs()));\n-    }\n-\n-    \/**\n-     * Creates a new JDKToolLauncher for the specified tool. Using tools path\n-     * from the compiler JDK.\n-     *\n-     * @param tool\n-     *            The name of the tool\n-     * @return A new JDKToolLauncher\n-     *\/\n-    public static JDKToolLauncher create(String tool) {\n-        return new JDKToolLauncher(tool, true);\n-    }\n-\n-    \/**\n-     * Creates a new JDKToolLauncher for the specified tool in the Tested JDK.\n-     *\n-     * @param tool\n-     *            The name of the tool\n-     *\n-     * @return A new JDKToolLauncher\n-     *\/\n-    public static JDKToolLauncher createUsingTestJDK(String tool) {\n-        return new JDKToolLauncher(tool, false);\n-    }\n-\n-    \/**\n-     * Adds an argument to the JVM running the tool.\n-     *\n-     * The JVM arguments are passed to the underlying JVM running the tool.\n-     * Arguments will automatically be prepended with \"-J\".\n-     *\n-     * Any platform specific arguments required for running the tool are\n-     * automatically added.\n-     *\n-     *\n-     * @param arg\n-     *            The argument to VM running the tool\n-     * @return The JDKToolLauncher instance\n-     *\/\n-    public JDKToolLauncher addVMArg(String arg) {\n-        vmArgs.add(arg);\n-        return this;\n-    }\n-\n-    \/**\n-     * Adds an argument to the tool.\n-     *\n-     * @param arg\n-     *            The argument to the tool\n-     * @return The JDKToolLauncher instance\n-     *\/\n-    public JDKToolLauncher addToolArg(String arg) {\n-        toolArgs.add(arg);\n-        return this;\n-    }\n-\n-    \/**\n-     * Returns the command that can be used for running the tool.\n-     *\n-     * @return An array whose elements are the arguments of the command.\n-     *\/\n-    public String[] getCommand() {\n-        List<String> command = new ArrayList<String>();\n-        command.add(executable);\n-        \/\/ Add -J in front of all vmArgs\n-        for (String arg : vmArgs) {\n-            command.add(\"-J\" + arg);\n-        }\n-        command.addAll(toolArgs);\n-        return command.toArray(new String[command.size()]);\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/JDKToolLauncher.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -1,436 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-public final class OutputAnalyzer {\n-\n-  private final String stdout;\n-  private final String stderr;\n-  private final int exitValue;\n-\n-  \/**\n-   * Create an OutputAnalyzer, a utility class for verifying output and exit\n-   * value from a Process\n-   *\n-   * @param process Process to analyze\n-   * @throws IOException If an I\/O error occurs.\n-   *\/\n-  public OutputAnalyzer(Process process) throws IOException {\n-    OutputBuffer output = ProcessTools.getOutput(process);\n-    exitValue = process.exitValue();\n-    this.stdout = output.getStdout();\n-    this.stderr = output.getStderr();\n-  }\n-\n-  \/**\n-   * Create an OutputAnalyzer, a utility class for verifying output\n-   *\n-   * @param buf String buffer to analyze\n-   *\/\n-  public OutputAnalyzer(String buf) {\n-    this(buf, buf);\n-  }\n-\n-  \/**\n-   * Create an OutputAnalyzer, a utility class for verifying output\n-   *\n-   * @param stdout stdout buffer to analyze\n-   * @param stderr stderr buffer to analyze\n-   *\/\n-  public OutputAnalyzer(String stdout, String stderr) {\n-    this.stdout = stdout;\n-    this.stderr = stderr;\n-    exitValue = -1;\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer is empty\n-   *\n-   * @throws RuntimeException\n-   *             If stdout was not empty\n-   *\/\n-  public void stdoutShouldBeEmpty() {\n-    if (!getStdout().isEmpty()) {\n-      reportDiagnosticSummary();\n-      throw new RuntimeException(\"stdout was not empty\");\n-    }\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer is empty\n-   *\n-   * @throws RuntimeException\n-   *             If stderr was not empty\n-   *\/\n-  public void stderrShouldBeEmpty() {\n-    if (!getStderr().isEmpty()) {\n-      reportDiagnosticSummary();\n-      throw new RuntimeException(\"stderr was not empty\");\n-    }\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer is not empty\n-   *\n-   * @throws RuntimeException\n-   *             If stdout was empty\n-   *\/\n-  public void stdoutShouldNotBeEmpty() {\n-    if (getStdout().isEmpty()) {\n-      reportDiagnosticSummary();\n-      throw new RuntimeException(\"stdout was empty\");\n-    }\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer is not empty\n-   *\n-   * @throws RuntimeException\n-   *             If stderr was empty\n-   *\/\n-  public void stderrShouldNotBeEmpty() {\n-    if (getStderr().isEmpty()) {\n-      reportDiagnosticSummary();\n-      throw new RuntimeException(\"stderr was empty\");\n-    }\n-  }\n-\n-    \/**\n-   * Verify that the stdout and stderr contents of output buffer contains the string\n-   *\n-   * @param expectedString String that buffer should contain\n-   * @throws RuntimeException If the string was not found\n-   *\/\n-  public OutputAnalyzer shouldContain(String expectedString) {\n-    if (!stdout.contains(expectedString) && !stderr.contains(expectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + expectedString + \"' missing from stdout\/stderr \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer contains the string\n-   *\n-   * @param expectedString String that buffer should contain\n-   * @throws RuntimeException If the string was not found\n-   *\/\n-  public OutputAnalyzer stdoutShouldContain(String expectedString) {\n-    if (!stdout.contains(expectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + expectedString + \"' missing from stdout \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer contains the string\n-   *\n-   * @param expectedString String that buffer should contain\n-   * @throws RuntimeException If the string was not found\n-   *\/\n-  public OutputAnalyzer stderrShouldContain(String expectedString) {\n-    if (!stderr.contains(expectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + expectedString + \"' missing from stderr \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout and stderr contents of output buffer does not contain the string\n-   *\n-   * @param expectedString String that the buffer should not contain\n-   * @throws RuntimeException If the string was found\n-   *\/\n-  public OutputAnalyzer shouldNotContain(String notExpectedString) {\n-    if (stdout.contains(notExpectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + notExpectedString + \"' found in stdout \\n\");\n-    }\n-    if (stderr.contains(notExpectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + notExpectedString + \"' found in stderr \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer does not contain the string\n-   *\n-   * @param expectedString String that the buffer should not contain\n-   * @throws RuntimeException If the string was found\n-   *\/\n-  public OutputAnalyzer stdoutShouldNotContain(String notExpectedString) {\n-    if (stdout.contains(notExpectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + notExpectedString + \"' found in stdout \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer does not contain the string\n-   *\n-   * @param expectedString String that the buffer should not contain\n-   * @throws RuntimeException If the string was found\n-   *\/\n-  public OutputAnalyzer stderrShouldNotContain(String notExpectedString) {\n-    if (stderr.contains(notExpectedString)) {\n-        reportDiagnosticSummary();\n-        throw new RuntimeException(\"'\" + notExpectedString + \"' found in stderr \\n\");\n-    }\n-    return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout and stderr contents of output buffer matches\n-   * the pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was not found\n-   *\/\n-  public OutputAnalyzer shouldMatch(String pattern) {\n-      Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-      Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-      if (!stdoutMatcher.find() && !stderrMatcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                + \"' missing from stdout\/stderr \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer matches the\n-   * pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was not found\n-   *\/\n-  public OutputAnalyzer stdoutShouldMatch(String pattern) {\n-      Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-      if (!matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                + \"' missing from stdout \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer matches the\n-   * pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was not found\n-   *\/\n-  public OutputAnalyzer stderrShouldMatch(String pattern) {\n-      Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-      if (!matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                + \"' missing from stderr \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout and stderr contents of output buffer does not\n-   * match the pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was found\n-   *\/\n-  public OutputAnalyzer shouldNotMatch(String pattern) {\n-      Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-      if (matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                  + \"' found in stdout: '\" + matcher.group() + \"' \\n\");\n-      }\n-      matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-      if (matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                  + \"' found in stderr: '\" + matcher.group() + \"' \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Verify that the stdout contents of output buffer does not match the\n-   * pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was found\n-   *\/\n-  public OutputAnalyzer stdoutShouldNotMatch(String pattern) {\n-      Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-      if (matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                  + \"' found in stdout \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Verify that the stderr contents of output buffer does not match the\n-   * pattern\n-   *\n-   * @param pattern\n-   * @throws RuntimeException If the pattern was found\n-   *\/\n-  public OutputAnalyzer stderrShouldNotMatch(String pattern) {\n-      Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-      if (matcher.find()) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"'\" + pattern\n-                  + \"' found in stderr \\n\");\n-      }\n-      return this;\n-  }\n-\n-  \/**\n-   * Get the captured group of the first string matching the pattern.\n-   * stderr is searched before stdout.\n-   *\n-   * @param pattern The multi-line pattern to match\n-   * @param group The group to capture\n-   * @return The matched string or null if no match was found\n-   *\/\n-  public String firstMatch(String pattern, int group) {\n-    Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-    Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-    if (stderrMatcher.find()) {\n-      return stderrMatcher.group(group);\n-    }\n-    if (stdoutMatcher.find()) {\n-      return stdoutMatcher.group(group);\n-    }\n-    return null;\n-  }\n-\n-  \/**\n-   * Get the first string matching the pattern.\n-   * stderr is searched before stdout.\n-   *\n-   * @param pattern The multi-line pattern to match\n-   * @return The matched string or null if no match was found\n-   *\/\n-  public String firstMatch(String pattern) {\n-    return firstMatch(pattern, 0);\n-  }\n-\n-  \/**\n-   * Verify the exit value of the process\n-   *\n-   * @param expectedExitValue Expected exit value from process\n-   * @throws RuntimeException If the exit value from the process did not match the expected value\n-   *\/\n-  public OutputAnalyzer shouldHaveExitValue(int expectedExitValue) {\n-      if (getExitValue() != expectedExitValue) {\n-          reportDiagnosticSummary();\n-          throw new RuntimeException(\"Expected to get exit value of [\"\n-                  + expectedExitValue + \"]\\n\");\n-      }\n-      return this;\n-  }\n-\n-\n-  \/**\n-   * Report summary that will help to diagnose the problem\n-   * Currently includes:\n-   *  - standard input produced by the process under test\n-   *  - standard output\n-   *  - exit code\n-   *  Note: the command line is printed by the ProcessTools\n-   *\/\n-  public void reportDiagnosticSummary() {\n-      String msg =\n-          \" stdout: [\" + stdout + \"];\\n\" +\n-          \" stderr: [\" + stderr + \"]\\n\" +\n-          \" exitValue = \" + getExitValue() + \"\\n\";\n-\n-      System.err.println(msg);\n-  }\n-\n-\n-  \/**\n-   * Get the contents of the output buffer (stdout and stderr)\n-   *\n-   * @return Content of the output buffer\n-   *\/\n-  public String getOutput() {\n-    return stdout + stderr;\n-  }\n-\n-  \/**\n-   * Get the contents of the stdout buffer\n-   *\n-   * @return Content of the stdout buffer\n-   *\/\n-  public String getStdout() {\n-    return stdout;\n-  }\n-\n-  \/**\n-   * Get the contents of the stderr buffer\n-   *\n-   * @return Content of the stderr buffer\n-   *\/\n-  public String getStderr() {\n-    return stderr;\n-  }\n-\n-  \/**\n-   * Get the process exit value\n-   *\n-   * @return Process exit value\n-   *\/\n-  public int getExitValue() {\n-    return exitValue;\n-  }\n-\n-  \/**\n-   * Get the contents of the output buffer (stdout and stderr) as list of strings.\n-   * Output will be split by newlines.\n-   *\n-   * @return Contents of the output buffer as list of strings\n-   *\/\n-  public List<String> asLines() {\n-    return asLines(getOutput());\n-  }\n-\n-  private List<String> asLines(String buffer) {\n-    return Arrays.asList(buffer.split(\"(\\\\r\\\\n|\\\\n|\\\\r)\"));\n-  }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/OutputAnalyzer.java","additions":0,"deletions":436,"binary":false,"changes":436,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-public class OutputBuffer {\n-  private final String stdout;\n-  private final String stderr;\n-\n-  \/**\n-   * Create an OutputBuffer, a class for storing and managing stdout and stderr\n-   * results separately\n-   *\n-   * @param stdout stdout result\n-   * @param stderr stderr result\n-   *\/\n-  public OutputBuffer(String stdout, String stderr) {\n-    this.stdout = stdout;\n-    this.stderr = stderr;\n-  }\n-\n-  \/**\n-   * Returns the stdout result\n-   *\n-   * @return stdout result\n-   *\/\n-  public String getStdout() {\n-    return stdout;\n-  }\n-\n-  \/**\n-   * Returns the stderr result\n-   *\n-   * @return stderr result\n-   *\/\n-  public String getStderr() {\n-    return stderr;\n-  }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/OutputBuffer.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.util.regex.Pattern;\n-\n-import com.oracle.java.testlibrary.Utils;\n-\n-public class Platform {\n-    private static final String osName      = System.getProperty(\"os.name\");\n-    private static final String dataModel   = System.getProperty(\"sun.arch.data.model\");\n-    private static final String vmVersion   = System.getProperty(\"java.vm.version\");\n-    private static final String osArch      = System.getProperty(\"os.arch\");\n-    public static final String vmName      = System.getProperty(\"java.vm.name\");\n-    private static final String userName    = System.getProperty(\"user.name\");\n-\n-    public static boolean isClient() {\n-        return vmName.endsWith(\" Client VM\");\n-    }\n-\n-    public static boolean isServer() {\n-        return vmName.endsWith(\" Server VM\");\n-    }\n-\n-    public static boolean isGraal() {\n-        return vmName.endsWith(\" Graal VM\");\n-    }\n-\n-    public static boolean isMinimal() {\n-        return vmName.endsWith(\" Minimal VM\");\n-    }\n-\n-    public static boolean isEmbedded() {\n-        return vmName.contains(\"Embedded\");\n-    }\n-\n-    public static boolean is32bit() {\n-        return dataModel.equals(\"32\");\n-    }\n-\n-    public static boolean is64bit() {\n-        return dataModel.equals(\"64\");\n-    }\n-\n-    public static boolean isAix() {\n-        return isOs(\"aix\");\n-    }\n-\n-    public static boolean isLinux() {\n-        return isOs(\"linux\");\n-    }\n-\n-    public static boolean isOSX() {\n-        return isOs(\"mac\");\n-    }\n-\n-    public static boolean isSolaris() {\n-        return isOs(\"sunos\");\n-    }\n-\n-    public static boolean isWindows() {\n-        return isOs(\"win\");\n-    }\n-\n-    private static boolean isOs(String osname) {\n-        return osName.toLowerCase().startsWith(osname.toLowerCase());\n-    }\n-\n-    public static String getOsName() {\n-        return osName;\n-    }\n-\n-    public static boolean isDebugBuild() {\n-        return vmVersion.toLowerCase().contains(\"debug\");\n-    }\n-\n-    public static String getVMVersion() {\n-        return vmVersion;\n-    }\n-\n-    \/\/ Returns true for sparc and sparcv9.\n-    public static boolean isSparc() {\n-        return isArch(\"sparc.*\");\n-    }\n-\n-    public static boolean isARM() {\n-        return isArch(\"arm.*\");\n-    }\n-\n-    public static boolean isPPC() {\n-        return isArch(\"ppc.*\");\n-    }\n-\n-    public static boolean isX86() {\n-        \/\/ On Linux it's 'i386', Windows 'x86' without '_64' suffix.\n-        return isArch(\"(i386)|(x86(?!_64))\");\n-    }\n-\n-    public static boolean isX64() {\n-        \/\/ On OSX it's 'x86_64' and on other (Linux, Windows and Solaris) platforms it's 'amd64'\n-        return isArch(\"(amd64)|(x86_64)\");\n-    }\n-\n-    public static boolean isAArch64() {\n-        return isArch(\"aarch64\");\n-    }\n-\n-    private static boolean isArch(String archnameRE) {\n-        return Pattern.compile(archnameRE, Pattern.CASE_INSENSITIVE)\n-            .matcher(osArch)\n-            .matches();\n-    }\n-\n-    public static String getOsArch() {\n-        return osArch;\n-    }\n-\n-    \/**\n-     * Return a boolean for whether we expect to be able to attach\n-     * the SA to our own processes on this system.\n-     *\/\n-    public static boolean shouldSAAttach() throws Exception {\n-\n-        if (isAix()) {\n-            return false;   \/\/ SA not implemented.\n-        } else if (isLinux()) {\n-            return canPtraceAttachLinux();\n-        } else if (isOSX()) {\n-            return canAttachOSX();\n-        } else {\n-            \/\/ Other platforms expected to work:\n-            return true;\n-        }\n-    }\n-\n-    \/**\n-     * On Linux, first check the SELinux boolean \"deny_ptrace\" and return false\n-     * as we expect to be denied if that is \"1\".  Then expect permission to attach\n-     * if we are root, so return true.  Then return false for an expected denial\n-     * if \"ptrace_scope\" is 1, and true otherwise.\n-     *\/\n-    public static boolean canPtraceAttachLinux() throws Exception {\n-\n-        \/\/ SELinux deny_ptrace:\n-        String deny_ptrace = Utils.fileAsString(\"\/sys\/fs\/selinux\/booleans\/deny_ptrace\");\n-        if (deny_ptrace != null && deny_ptrace.contains(\"1\")) {\n-            \/\/ ptrace will be denied:\n-            return false;\n-        }\n-\n-        if (userName.equals(\"root\")) {\n-            return true;\n-        }\n-\n-        \/\/ ptrace_scope:\n-        String ptrace_scope = Utils.fileAsString(\"\/proc\/sys\/kernel\/yama\/ptrace_scope\");\n-        if (ptrace_scope != null && ptrace_scope.contains(\"1\")) {\n-            \/\/ ptrace will be denied:\n-            return false;\n-        }\n-\n-        \/\/ Otherwise expect to be permitted:\n-        return true;\n-    }\n-\n-    \/**\n-     * On OSX, expect permission to attach only if we are root.\n-     *\/\n-    public static boolean canAttachOSX() throws Exception {\n-        return userName.equals(\"root\");\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Platform.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -1,265 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.RuntimeMXBean;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import sun.management.VMManagement;\n-\n-public final class ProcessTools {\n-\n-  private ProcessTools() {\n-  }\n-\n-  \/**\n-   * Pumps stdout and stderr from running the process into a String.\n-   *\n-   * @param processHandler ProcessHandler to run.\n-   * @return Output from process.\n-   * @throws IOException If an I\/O error occurs.\n-   *\/\n-  public static OutputBuffer getOutput(ProcessBuilder processBuilder) throws IOException {\n-    return getOutput(processBuilder.start());\n-  }\n-\n-  \/**\n-   * Pumps stdout and stderr the running process into a String.\n-   *\n-   * @param process Process to pump.\n-   * @return Output from process.\n-   * @throws IOException If an I\/O error occurs.\n-   *\/\n-  public static OutputBuffer getOutput(Process process) throws IOException {\n-    ByteArrayOutputStream stderrBuffer = new ByteArrayOutputStream();\n-    ByteArrayOutputStream stdoutBuffer = new ByteArrayOutputStream();\n-    StreamPumper outPumper = new StreamPumper(process.getInputStream(), stdoutBuffer);\n-    StreamPumper errPumper = new StreamPumper(process.getErrorStream(), stderrBuffer);\n-    Thread outPumperThread = new Thread(outPumper);\n-    Thread errPumperThread = new Thread(errPumper);\n-\n-    outPumperThread.setDaemon(true);\n-    errPumperThread.setDaemon(true);\n-\n-    outPumperThread.start();\n-    errPumperThread.start();\n-\n-    try {\n-      process.waitFor();\n-      outPumperThread.join();\n-      errPumperThread.join();\n-    } catch (InterruptedException e) {\n-      Thread.currentThread().interrupt();\n-      return null;\n-    }\n-\n-    return new OutputBuffer(stdoutBuffer.toString(), stderrBuffer.toString());\n-  }\n-\n-  \/**\n-   * Get the process id of the current running Java process\n-   *\n-   * @return Process id\n-   *\/\n-  public static int getProcessId() throws Exception {\n-\n-    \/\/ Get the current process id using a reflection hack\n-    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-    Field jvm = runtime.getClass().getDeclaredField(\"jvm\");\n-\n-    jvm.setAccessible(true);\n-    VMManagement mgmt = (sun.management.VMManagement) jvm.get(runtime);\n-\n-    Method pid_method = mgmt.getClass().getDeclaredMethod(\"getProcessId\");\n-\n-    pid_method.setAccessible(true);\n-\n-    int pid = (Integer) pid_method.invoke(mgmt);\n-\n-    return pid;\n-  }\n-\n-  \/**\n-   * Get the string containing input arguments passed to the VM\n-   *\n-   * @return arguments\n-   *\/\n-  public static String getVmInputArguments() {\n-    RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n-\n-    List<String> args = runtime.getInputArguments();\n-    StringBuilder result = new StringBuilder();\n-    for (String arg : args)\n-        result.append(arg).append(' ');\n-\n-    return result.toString();\n-  }\n-\n-  \/**\n-   * Get platform specific VM arguments (e.g. -d64 on 64bit Solaris)\n-   *\n-   * @return String[] with platform specific arguments, empty if there are none\n-   *\/\n-  public static String[] getPlatformSpecificVMArgs() {\n-\n-    if (Platform.is64bit() && Platform.isSolaris()) {\n-      return new String[] { \"-d64\" };\n-    }\n-\n-    return new String[] {};\n-  }\n-\n-  \/**\n-   * Create ProcessBuilder using the java launcher from the jdk to be tested and\n-   * with any platform specific arguments prepended\n-   *\/\n-  public static ProcessBuilder createJavaProcessBuilder(String... command) throws Exception {\n-    return createJavaProcessBuilder(false, command);\n-  }\n-\n-  public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmOptions, String... command) throws Exception {\n-    String javapath = JDKToolFinder.getJDKTool(\"java\");\n-\n-    ArrayList<String> args = new ArrayList<>();\n-    args.add(javapath);\n-    Collections.addAll(args, getPlatformSpecificVMArgs());\n-\n-    args.add(\"-cp\");\n-    args.add(System.getProperty(\"java.class.path\"));\n-\n-    if (addTestVmOptions) {\n-      String vmopts = System.getProperty(\"test.vm.opts\");\n-      if (vmopts != null && vmopts.length() > 0) {\n-        Collections.addAll(args, vmopts.split(\"\\\\s\"));\n-      }\n-    }\n-\n-    Collections.addAll(args, command);\n-\n-    \/\/ Reporting\n-    StringBuilder cmdLine = new StringBuilder();\n-    for (String cmd : args) {\n-      cmdLine.append(cmd).append(' ');\n-    }\n-    System.out.println(\"Command line: [\" + cmdLine.toString() + \"]\");\n-\n-    return new ProcessBuilder(args.toArray(new String[args.size()]));\n-  }\n-\n-  \/**\n-   * Executes a test jvm process, waits for it to finish and returns the process output.\n-   * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n-   * The java from the test.jdk is used to execute the command.\n-   *\n-   * The command line will be like:\n-   * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-   *\n-   * @param cmds User specifed arguments.\n-   * @return The output from the process.\n-   *\/\n-  public static OutputAnalyzer executeTestJvm(String... cmds) throws Throwable {\n-    ProcessBuilder pb = createJavaProcessBuilder(Utils.addTestJavaOpts(cmds));\n-    return executeProcess(pb);\n-  }\n-\n-    \/**\n-     * Executes a process, waits for it to finish and returns the process output.\n-     * The process will have exited before this method returns.\n-     * @param pb The ProcessBuilder to execute.\n-     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzer executeProcess(ProcessBuilder pb) throws Exception {\n-        OutputAnalyzer output = null;\n-        Process p = null;\n-        boolean failed = false;\n-        try {\n-            p = pb.start();\n-            output = new OutputAnalyzer(p);\n-            p.waitFor();\n-\n-            return output;\n-        } catch (Throwable t) {\n-            if (p != null) {\n-                p.destroyForcibly().waitFor();\n-            }\n-\n-            failed = true;\n-            System.out.println(\"executeProcess() failed: \" + t);\n-            throw t;\n-        } finally {\n-            if (failed) {\n-                System.err.println(getProcessLog(pb, output));\n-            }\n-        }\n-    }\n-\n-  \/**\n-   * Executes a process, waits for it to finish and returns the process output.\n-   * @param cmds The command line to execute.\n-   * @return The output from the process.\n-   *\/\n-  public static OutputAnalyzer executeProcess(String... cmds) throws Throwable {\n-    return executeProcess(new ProcessBuilder(cmds));\n-  }\n-\n-  \/**\n-   * Used to log command line, stdout, stderr and exit code from an executed process.\n-   * @param pb The executed process.\n-   * @param output The output from the process.\n-   *\/\n-  public static String getProcessLog(ProcessBuilder pb, OutputAnalyzer output) {\n-    String stderr = output == null ? \"null\" : output.getStderr();\n-    String stdout = output == null ? \"null\" : output.getStdout();\n-    String exitValue = output == null ? \"null\": Integer.toString(output.getExitValue());\n-    StringBuilder logMsg = new StringBuilder();\n-    final String nl = System.getProperty(\"line.separator\");\n-    logMsg.append(\"--- ProcessLog ---\" + nl);\n-    logMsg.append(\"cmd: \" + getCommandLine(pb) + nl);\n-    logMsg.append(\"exitvalue: \" + exitValue + nl);\n-    logMsg.append(\"stderr: \" + stderr + nl);\n-    logMsg.append(\"stdout: \" + stdout + nl);\n-    return logMsg.toString();\n-  }\n-\n-  \/**\n-   * @return The full command line for the ProcessBuilder.\n-   *\/\n-  public static String getCommandLine(ProcessBuilder pb) {\n-    if (pb == null) {\n-      return \"null\";\n-    }\n-    StringBuilder cmd = new StringBuilder();\n-    for (String s : pb.command()) {\n-      cmd.append(s).append(\" \");\n-    }\n-    return cmd.toString().trim();\n-  }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/ProcessTools.java","additions":0,"deletions":265,"binary":false,"changes":265,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import java.io.OutputStream;\n-import java.io.InputStream;\n-import java.io.IOException;\n-\n-public final class StreamPumper implements Runnable {\n-\n-  private static final int BUF_SIZE = 256;\n-\n-  private final OutputStream out;\n-  private final InputStream in;\n-\n-  \/**\n-   * Create a StreamPumper that reads from in and writes to out.\n-   *\n-   * @param in The stream to read from.\n-   * @param out The stream to write to.\n-   *\/\n-  public StreamPumper(InputStream in, OutputStream out) {\n-    this.in = in;\n-    this.out = out;\n-  }\n-\n-  \/**\n-   * Implements Thread.run(). Continuously read from <code>in<\/code> and write\n-   * to <code>out<\/code> until <code>in<\/code> has reached end of stream. Abort\n-   * on interruption. Abort on IOExceptions.\n-   *\/\n-  @Override\n-  public void run() {\n-    int length;\n-    InputStream localIn = in;\n-    OutputStream localOut = out;\n-    byte[] buffer = new byte[BUF_SIZE];\n-\n-    try {\n-      while (!Thread.interrupted() && (length = localIn.read(buffer)) > 0) {\n-        localOut.write(buffer, 0, length);\n-      }\n-    } catch (IOException e) {\n-      \/\/ Just abort if something like this happens.\n-      e.printStackTrace();\n-    } finally {\n-      try {\n-        localOut.flush();\n-        in.close();\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n-    }\n-  }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/StreamPumper.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,398 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary;\n-\n-import static com.oracle.java.testlibrary.Asserts.assertTrue;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.ServerSocket;\n-import java.net.UnknownHostException;\n-import java.nio.file.Path;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.attribute.FileAttribute;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n-import java.lang.reflect.Field;\n-import sun.misc.Unsafe;\n-\n-\/**\n- * Common library for various test helper functions.\n- *\/\n-public final class Utils {\n-\n-    \/**\n-     * Returns the sequence used by operating system to separate lines.\n-     *\/\n-    public static final String NEW_LINE = System.getProperty(\"line.separator\");\n-\n-    \/**\n-     * Returns the value of 'test.vm.opts'system property.\n-     *\/\n-    public static final String VM_OPTIONS = System.getProperty(\"test.vm.opts\", \"\").trim();\n-\n-    \/**\n-     * Returns the value of 'test.java.opts'system property.\n-     *\/\n-    public static final String JAVA_OPTIONS = System.getProperty(\"test.java.opts\", \"\").trim();\n-\n-    public static final String TEST_JDK = System.getProperty(\"test.jdk\");\n-\n-    public static final String COMPILE_JDK= System.getProperty(\"compile.jdk\", TEST_JDK);\n-\n-    public static final String TEST_SRC = System.getProperty(\"test.src\", \"\").trim();\n-\n-    public static final String TEST_CLASSES = System.getProperty(\"test.classes\", \".\");\n-\n-\n-    private static Unsafe unsafe = null;\n-\n-    \/**\n-    * Returns the value of 'test.timeout.factor' system property\n-    * converted to {@code double}.\n-    *\/\n-    public static final double TIMEOUT_FACTOR;\n-    static {\n-        String toFactor = System.getProperty(\"test.timeout.factor\", \"1.0\");\n-        TIMEOUT_FACTOR = Double.parseDouble(toFactor);\n-    }\n-\n-    private Utils() {\n-        \/\/ Private constructor to prevent class instantiation\n-    }\n-\n-    \/**\n-     * Returns the list of VM options.\n-     *\n-     * @return List of VM options\n-     *\/\n-    public static List<String> getVmOptions() {\n-        return Arrays.asList(safeSplitString(VM_OPTIONS));\n-    }\n-\n-    \/**\n-     * Returns the list of VM options with -J prefix.\n-     *\n-     * @return The list of VM options with -J prefix\n-     *\/\n-    public static List<String> getForwardVmOptions() {\n-        String[] opts = safeSplitString(VM_OPTIONS);\n-        for (int i = 0; i < opts.length; i++) {\n-            opts[i] = \"-J\" + opts[i];\n-        }\n-        return Arrays.asList(opts);\n-    }\n-\n-    \/**\n-     * Returns the default JTReg arguments for a jvm running a test.\n-     * This is the combination of JTReg arguments test.vm.opts and test.java.opts.\n-     * @return An array of options, or an empty array if no opptions.\n-     *\/\n-    public static String[] getTestJavaOpts() {\n-        List<String> opts = new ArrayList<String>();\n-        Collections.addAll(opts, safeSplitString(VM_OPTIONS));\n-        Collections.addAll(opts, safeSplitString(JAVA_OPTIONS));\n-        return opts.toArray(new String[0]);\n-    }\n-\n-    \/**\n-     * Returns the default JTReg arguments for a jvm running a test without\n-     * options that matches regular expressions in {@code filters}.\n-     * This is the combination of JTReg arguments test.vm.opts and test.java.opts.\n-     * @param filters Regular expressions used to filter out options.\n-     * @return An array of options, or an empty array if no options.\n-     *\/\n-    public static String[] getFilteredTestJavaOpts(String... filters) {\n-        String options[] = getTestJavaOpts();\n-\n-        if (filters.length == 0) {\n-            return options;\n-        }\n-\n-        List<String> filteredOptions = new ArrayList<String>(options.length);\n-        Pattern patterns[] = new Pattern[filters.length];\n-        for (int i = 0; i < filters.length; i++) {\n-            patterns[i] = Pattern.compile(filters[i]);\n-        }\n-\n-        for (String option : options) {\n-            boolean matched = false;\n-            for (int i = 0; i < patterns.length && !matched; i++) {\n-                Matcher matcher = patterns[i].matcher(option);\n-                matched = matcher.find();\n-            }\n-            if (!matched) {\n-                filteredOptions.add(option);\n-            }\n-        }\n-\n-        return filteredOptions.toArray(new String[filteredOptions.size()]);\n-    }\n-\n-    \/**\n-     * Combines given arguments with default JTReg arguments for a jvm running a test.\n-     * This is the combination of JTReg arguments test.vm.opts and test.java.opts\n-     * @return The combination of JTReg test java options and user args.\n-     *\/\n-    public static String[] addTestJavaOpts(String... userArgs) {\n-        List<String> opts = new ArrayList<String>();\n-        Collections.addAll(opts, getTestJavaOpts());\n-        Collections.addAll(opts, userArgs);\n-        return opts.toArray(new String[0]);\n-    }\n-\n-    \/**\n-     * Splits a string by white space.\n-     * Works like String.split(), but returns an empty array\n-     * if the string is null or empty.\n-     *\/\n-    private static String[] safeSplitString(String s) {\n-        if (s == null || s.trim().isEmpty()) {\n-            return new String[] {};\n-        }\n-        return s.trim().split(\"\\\\s+\");\n-    }\n-\n-    \/**\n-     * @return The full command line for the ProcessBuilder.\n-     *\/\n-    public static String getCommandLine(ProcessBuilder pb) {\n-        StringBuilder cmd = new StringBuilder();\n-        for (String s : pb.command()) {\n-            cmd.append(s).append(\" \");\n-        }\n-        return cmd.toString();\n-    }\n-\n-    \/**\n-     * Returns the free port on the local host.\n-     * The function will spin until a valid port number is found.\n-     *\n-     * @return The port number\n-     * @throws InterruptedException if any thread has interrupted the current thread\n-     * @throws IOException if an I\/O error occurs when opening the socket\n-     *\/\n-    public static int getFreePort() throws InterruptedException, IOException {\n-        int port = -1;\n-\n-        while (port <= 0) {\n-            Thread.sleep(100);\n-\n-            ServerSocket serverSocket = null;\n-            try {\n-                serverSocket = new ServerSocket(0);\n-                port = serverSocket.getLocalPort();\n-            } finally {\n-                serverSocket.close();\n-            }\n-        }\n-\n-        return port;\n-    }\n-\n-    \/**\n-     * Returns the name of the local host.\n-     *\n-     * @return The host name\n-     * @throws UnknownHostException if IP address of a host could not be determined\n-     *\/\n-    public static String getHostname() throws UnknownHostException {\n-        InetAddress inetAddress = InetAddress.getLocalHost();\n-        String hostName = inetAddress.getHostName();\n-\n-        assertTrue((hostName != null && !hostName.isEmpty()),\n-                \"Cannot get hostname\");\n-\n-        return hostName;\n-    }\n-\n-    \/**\n-     * Uses \"jcmd -l\" to search for a jvm pid. This function will wait\n-     * forever (until jtreg timeout) for the pid to be found.\n-     * @param key Regular expression to search for\n-     * @return The found pid.\n-     *\/\n-    public static int waitForJvmPid(String key) throws Throwable {\n-        final long iterationSleepMillis = 250;\n-        System.out.println(\"waitForJvmPid: Waiting for key '\" + key + \"'\");\n-        System.out.flush();\n-        while (true) {\n-            int pid = tryFindJvmPid(key);\n-            if (pid >= 0) {\n-                return pid;\n-            }\n-            Thread.sleep(iterationSleepMillis);\n-        }\n-    }\n-\n-    \/**\n-     * Searches for a jvm pid in the output from \"jcmd -l\".\n-     *\n-     * Example output from jcmd is:\n-     * 12498 sun.tools.jcmd.JCmd -l\n-     * 12254 \/tmp\/jdk8\/tl\/jdk\/JTwork\/classes\/com\/sun\/tools\/attach\/Application.jar\n-     *\n-     * @param key A regular expression to search for.\n-     * @return The found pid, or -1 if Enot found.\n-     * @throws Exception If multiple matching jvms are found.\n-     *\/\n-    public static int tryFindJvmPid(String key) throws Throwable {\n-        OutputAnalyzer output = null;\n-        try {\n-            JDKToolLauncher jcmdLauncher = JDKToolLauncher.create(\"jcmd\");\n-            jcmdLauncher.addToolArg(\"-l\");\n-            output = ProcessTools.executeProcess(jcmdLauncher.getCommand());\n-            output.shouldHaveExitValue(0);\n-\n-            \/\/ Search for a line starting with numbers (pid), followed by the key.\n-            Pattern pattern = Pattern.compile(\"^([0-9]+)\\\\s.*(\" + key + \")\", Pattern.MULTILINE);\n-            Matcher matcher = pattern.matcher(output.getStdout());\n-\n-            int pid = -1;\n-            if (matcher.find()) {\n-                pid = Integer.parseInt(matcher.group(1));\n-                System.out.println(\"findJvmPid.pid: \" + pid);\n-                if (matcher.find()) {\n-                    throw new Exception(\"Found multiple JVM pids for key: \" + key);\n-                }\n-            }\n-            return pid;\n-        } catch (Throwable t) {\n-            System.out.println(String.format(\"Utils.findJvmPid(%s) failed: %s\", key, t));\n-            throw t;\n-        }\n-    }\n-\n-    \/**\n-     * Returns file content as a list of strings\n-     *\n-     * @param file File to operate on\n-     * @return List of strings\n-     * @throws IOException\n-     *\/\n-    public static List<String> fileAsList(File file) throws IOException {\n-        assertTrue(file.exists() && file.isFile(),\n-                file.getAbsolutePath() + \" does not exist or not a file\");\n-        List<String> output = new ArrayList<>();\n-        try (BufferedReader reader = new BufferedReader(new FileReader(file.getAbsolutePath()))) {\n-            while (reader.ready()) {\n-                output.add(reader.readLine().replace(NEW_LINE, \"\"));\n-            }\n-        }\n-        return output;\n-    }\n-\n-    \/**\n-     * Return the contents of the named file as a single String,\n-     * or null if not found.\n-     * @param filename name of the file to read\n-     * @return String contents of file, or null if file not found.\n-     *\/\n-    public static String fileAsString(String filename) {\n-        StringBuilder result = new StringBuilder();\n-        try {\n-            File file = new File(filename);\n-            if (file.exists()) {\n-                BufferedReader reader = new BufferedReader(new FileReader(file));\n-                while (true) {\n-                    String line = reader.readLine();\n-                    if (line == null) {\n-                        break;\n-                    }\n-                    result.append(line).append(\"\\n\");\n-                }\n-            } else {\n-                \/\/ Does not exist:\n-                return null;\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return result.toString();\n-    }\n-\n-    \/**\n-     * @return Unsafe instance.\n-     *\/\n-    public static synchronized Unsafe getUnsafe() {\n-        if (unsafe == null) {\n-            try {\n-                Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n-                f.setAccessible(true);\n-                unsafe = (Unsafe) f.get(null);\n-            } catch (NoSuchFieldException | IllegalAccessException e) {\n-                throw new RuntimeException(\"Unable to get Unsafe instance.\", e);\n-            }\n-        }\n-        return unsafe;\n-    }\n-    private static final char[] hexArray = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n-\n-    \/**\n-     * Returns hex view of byte array\n-     *\n-     * @param bytes byte array to process\n-     * @return Space separated hexadecimal string representation of bytes\n-     *\/\n-\n-    public static String toHexString(byte[] bytes) {\n-        char[] hexView = new char[bytes.length * 3];\n-        int i = 0;\n-        for (byte b : bytes) {\n-            hexView[i++] = hexArray[(b >> 4) & 0x0F];\n-            hexView[i++] = hexArray[b & 0x0F];\n-            hexView[i++] = ' ';\n-        }\n-        return new String(hexView);\n-    }\n-\n-    \/**\n-     * Creates an empty directory in \"user.dir\" or \".\"\n-     * <p>\n-     * This method is meant as a replacement for {@code Files#createTempDirectory(String, String, FileAttribute...)}\n-     * that doesn't leave files behind in \/tmp directory of the test machine\n-     * <p>\n-     * If the property \"user.dir\" is not set, \".\" will be used.\n-     *\n-     * @param prefix\n-     * @param attrs\n-     * @return the path to the newly created directory\n-     * @throws IOException\n-     *\n-     * @see {@link Files#createTempDirectory(String, String, FileAttribute...)}\n-     *\/\n-    public static Path createTempDirectory(String prefix, FileAttribute<?>... attrs) throws IOException {\n-        Path dir = Paths.get(System.getProperty(\"user.dir\", \".\"));\n-        return Files.createTempDirectory(dir, prefix);\n-    }\n-\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/Utils.java","additions":0,"deletions":398,"binary":false,"changes":398,"status":"deleted"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary.cli;\n-\n-import com.oracle.java.testlibrary.cli.predicate.CPUSpecificPredicate;\n-\n-\/**\n- * Base class for command line options tests that\n- * requires specific CPU arch or specific CPU features.\n- *\/\n-public abstract class CPUSpecificCommandLineOptionTest\n-        extends CommandLineOptionTest {\n-    \/**\n-     * Creates new CPU specific test instance that does not\n-     * require any CPU features.\n-     *\n-     * @param cpuArchPattern Regular expression that should\n-     *                       match os.arch.\n-     *\/\n-    public CPUSpecificCommandLineOptionTest(String cpuArchPattern) {\n-        this(cpuArchPattern, null, null);\n-    }\n-\n-    \/**\n-     * Creates new CPU specific test instance that does not\n-     * require from CPU support of {@code supportedCPUFeatures} features\n-     * and no support of {@code unsupportedCPUFeatures}.\n-     *\n-     * @param cpuArchPattern Regular expression that should\n-     *                       match os.arch.\n-     * @param supportedCPUFeatures Array with names of features that\n-     *                             should be supported by CPU. If {@code null},\n-     *                             then no features have to be supported.\n-     * @param unsupportedCPUFeatures Array with names of features that\n-     *                               should not be supported by CPU.\n-     *                               If {@code null}, then CPU may support any\n-     *                               features.\n-     *\/\n-    public CPUSpecificCommandLineOptionTest(String cpuArchPattern,\n-            String supportedCPUFeatures[], String unsupportedCPUFeatures[]) {\n-        super(new CPUSpecificPredicate(cpuArchPattern, supportedCPUFeatures,\n-                unsupportedCPUFeatures));\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/CPUSpecificCommandLineOptionTest.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -1,330 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary.cli;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.function.BooleanSupplier;\n-\n-import com.oracle.java.testlibrary.*;\n-\n-\/**\n- * Base class for command line option tests.\n- *\/\n-public abstract class CommandLineOptionTest {\n-    public static final String UNLOCK_DIAGNOSTIC_VM_OPTIONS\n-            = \"-XX:+UnlockDiagnosticVMOptions\";\n-    public static final String UNLOCK_EXPERIMENTAL_VM_OPTIONS\n-            = \"-XX:+UnlockExperimentalVMOptions\";\n-    protected static final String UNRECOGNIZED_OPTION_ERROR_FORMAT\n-            = \"Unrecognized VM option '[+-]?%s(=.*)?'\";\n-    protected static final String EXPERIMENTAL_OPTION_ERROR_FORMAT\n-            = \"VM option '%s' is experimental and must be enabled via \"\n-            + \"-XX:\\\\+UnlockExperimentalVMOptions.\";\n-    protected static final String DIAGNOSTIC_OPTION_ERROR_FORMAT\n-            = \" VM option '%s' is diagnostic and must be enabled via \"\n-            + \"-XX:\\\\+UnlockDiagnosticVMOptions.\";\n-    private static final String PRINT_FLAGS_FINAL_FORMAT = \"%s\\\\s*:?=\\\\s*%s\";\n-\n-    \/**\n-     * Verifies that JVM startup behaviour matches our expectations.\n-     *\n-     * @param option an option that should be passed to JVM\n-     * @param expectedMessages an array of patterns that should occur\n-     *                          in JVM output. If {@code null} then\n-     *                          JVM output could be empty.\n-     * @param unexpectedMessages an array of patterns that should not\n-     *                           occur in JVM output. If {@code null} then\n-     *                           JVM output could be empty.\n-     * @param exitCode expected exit code.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyJVMStartup(String option,\n-            String expectedMessages[], String unexpectedMessages[],\n-            ExitCode exitCode) throws Throwable {\n-        CommandLineOptionTest.verifyJVMStartup(expectedMessages,\n-                unexpectedMessages, exitCode, false, option);\n-    }\n-\n-    \/**\n-     * Verifies that JVM startup behaviour matches our expectations.\n-     *\n-     * @param expectedMessages an array of patterns that should occur\n-     *                         in JVM output. If {@code null} then\n-     *                         JVM output could be empty.\n-     * @param unexpectedMessages an array of patterns that should not\n-     *                           occur in JVM output. If {@code null} then\n-     *                           JVM output could be empty.\n-     * @param exitCode expected exit code.\n-     * @param addTestVMOptions if {@code true} then test VM options will be\n-     *                         passed to VM.\n-     * @param options options that should be passed to VM in addition to mode\n-     *                flag.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyJVMStartup(String expectedMessages[],\n-            String unexpectedMessages[], ExitCode exitCode,\n-            boolean addTestVMOptions, String... options) throws Throwable {\n-        List<String> finalOptions = new ArrayList<>();\n-        if (addTestVMOptions) {\n-            Collections.addAll(finalOptions, Utils.getTestJavaOpts());\n-        }\n-        Collections.addAll(finalOptions, options);\n-        finalOptions.add(\"-version\");\n-\n-        ProcessBuilder processBuilder\n-                = ProcessTools.createJavaProcessBuilder(finalOptions.toArray(\n-                new String[finalOptions.size()]));\n-        OutputAnalyzer outputAnalyzer\n-                = new OutputAnalyzer(processBuilder.start());\n-        outputAnalyzer.shouldHaveExitValue(exitCode.value);\n-\n-        if (expectedMessages != null) {\n-            for (String expectedMessage : expectedMessages) {\n-                outputAnalyzer.shouldMatch(expectedMessage);\n-            }\n-        }\n-\n-        if (unexpectedMessages != null) {\n-            for (String unexpectedMessage : unexpectedMessages) {\n-                outputAnalyzer.shouldNotMatch(unexpectedMessage);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Verifies that JVM startup behaviour matches our expectations when type\n-     * of newly started VM is the same as the type of current.\n-     *\n-     * @param expectedMessages an array of patterns that should occur\n-     *                         in JVM output. If {@code null} then\n-     *                         JVM output could be empty.\n-     * @param unexpectedMessages an array of patterns that should not\n-     *                           occur in JVM output. If {@code null} then\n-     *                           JVM output could be empty.\n-     * @param exitCode expected exit code.\n-     * @param options options that should be passed to VM in addition to mode\n-     *                flag.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifySameJVMStartup(String expectedMessages[],\n-            String unexpectedMessages[], ExitCode exitCode, String... options)\n-            throws  Throwable {\n-        List<String> finalOptions = new ArrayList<>();\n-        finalOptions.add(CommandLineOptionTest.getVMTypeOption());\n-        Collections.addAll(finalOptions, options);\n-\n-        CommandLineOptionTest.verifyJVMStartup(expectedMessages,\n-                unexpectedMessages, exitCode, false,\n-                finalOptions.toArray(new String[finalOptions.size()]));\n-    }\n-\n-    \/**\n-     * Verifies that value of specified JVM option is the same as\n-     * expected value.\n-     * This method filter out option with {@code optionName}\n-     * name from test java options.\n-     *\n-     * @param optionName a name of tested option.\n-     * @param expectedValue expected value of tested option.\n-     * @param additionalVMOpts additional options that should be\n-     *                         passed to JVM.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyOptionValue(String optionName,\n-            String expectedValue, String... additionalVMOpts) throws Throwable {\n-        verifyOptionValue(optionName, expectedValue, true, additionalVMOpts);\n-    }\n-\n-    \/**\n-     * Verifies that value of specified JVM option is the same as\n-     * expected value.\n-     * This method filter out option with {@code optionName}\n-     * name from test java options.\n-     *\n-     * @param optionName a name of tested option.\n-     * @param expectedValue expected value of tested option.\n-     * @param addTestVmOptions if {@code true}, then test VM options\n-     *                         will be used.\n-     * @param additionalVMOpts additional options that should be\n-     *                         passed to JVM.\n-     * @throws Throwable if verification fails or some other issues\n-     *                          occur.\n-     *\/\n-    public static void verifyOptionValue(String optionName,\n-            String expectedValue, boolean addTestVmOptions,\n-            String... additionalVMOpts) throws Throwable {\n-        List<String> vmOpts = new ArrayList<>();\n-\n-        if (addTestVmOptions) {\n-            Collections.addAll(vmOpts,\n-                               Utils.getFilteredTestJavaOpts(optionName));\n-        }\n-        Collections.addAll(vmOpts, additionalVMOpts);\n-        Collections.addAll(vmOpts, \"-XX:+PrintFlagsFinal\", \"-version\");\n-\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n-                vmOpts.toArray(new String[vmOpts.size()]));\n-\n-        OutputAnalyzer outputAnalyzer\n-                = new OutputAnalyzer(processBuilder.start());\n-\n-        outputAnalyzer.shouldHaveExitValue(0);\n-        outputAnalyzer.shouldMatch(String.format(\n-                CommandLineOptionTest.PRINT_FLAGS_FINAL_FORMAT,\n-                optionName, expectedValue));\n-    }\n-\n-    \/**\n-     * Verifies that value of specified JVM when type of newly started VM\n-     * is the same as the type of current.\n-     * This method filter out option with {@code optionName}\n-     * name from test java options.\n-     * Only mode flag will be passed to VM in addition to\n-     * {@code additionalVMOpts}\n-     *\n-     * @param optionName name of tested option.\n-     * @param expectedValue expected value of tested option.\n-     * @param additionalVMOpts additional options that should be\n-     *                         passed to JVM.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyOptionValueForSameVM(String optionName,\n-            String expectedValue, String... additionalVMOpts) throws Throwable {\n-        List<String> finalOptions = new ArrayList<>();\n-        finalOptions.add(CommandLineOptionTest.getVMTypeOption());\n-        Collections.addAll(finalOptions, additionalVMOpts);\n-\n-        CommandLineOptionTest.verifyOptionValue(optionName, expectedValue,\n-                false, finalOptions.toArray(new String[finalOptions.size()]));\n-    }\n-\n-    \/**\n-     * Prepares boolean command line flag with name {@code name} according\n-     * to it's {@code value}.\n-     *\n-     * @param name the name of option to be prepared\n-     * @param value the value of option\n-     * @return prepared command line flag\n-     *\/\n-    public static String prepareBooleanFlag(String name, boolean value) {\n-        return String.format(\"-XX:%c%s\", (value ? '+' : '-'), name);\n-    }\n-\n-    \/**\n-     * Prepares numeric command line flag with name {@code name} by setting\n-     * it's value to {@code value}.\n-     *\n-     * @param name the name of option to be prepared\n-     * @param value the value of option\n-     * @return prepared command line flag\n-     *\/\n-    public static String prepareNumericFlag(String name, Number value) {\n-        return String.format(\"-XX:%s=%s\", name, value.toString());\n-    }\n-\n-    \/**\n-     * Returns message that should occur in VM output if option\n-     * {@code optionName} if unrecognized.\n-     *\n-     * @param optionName the name of option for which message should be returned\n-     * @return message saying that option {@code optionName} is unrecognized\n-     *\/\n-    public static String getUnrecognizedOptionErrorMessage(String optionName) {\n-        return String.format(\n-                CommandLineOptionTest.UNRECOGNIZED_OPTION_ERROR_FORMAT,\n-                optionName);\n-    }\n-\n-    \/**\n-     * Returns message that should occur in VM output if option\n-     * {@code optionName} is experimental and\n-     * -XX:+UnlockExperimentalVMOptions was not passed to VM.\n-     *\n-     * @param optionName the name of option for which message should be returned\n-     * @return message saying that option {@code optionName} is experimental\n-     *\/\n-    public static String getExperimentalOptionErrorMessage(String optionName) {\n-        return String.format(\n-                CommandLineOptionTest.EXPERIMENTAL_OPTION_ERROR_FORMAT,\n-                optionName);\n-    }\n-\n-    \/**\n-     * Returns message that should occur in VM output if option\n-     * {@code optionName} is diagnostic and -XX:+UnlockDiagnosticVMOptions\n-     * was not passed to VM.\n-     *\n-     * @param optionName the name of option for which message should be returned\n-     * @return message saying that option {@code optionName} is diganostic\n-     *\/\n-    public static String getDiagnosticOptionErrorMessage(String optionName) {\n-        return String.format(\n-                CommandLineOptionTest.DIAGNOSTIC_OPTION_ERROR_FORMAT,\n-                optionName);\n-    }\n-\n-    \/**\n-     * @return option required to start a new VM with the same type as current.\n-     * @throws RuntimeException when VM type is unknown.\n-     *\/\n-    private static String getVMTypeOption() {\n-        if (Platform.isServer()) {\n-            return \"-server\";\n-        } else if (Platform.isClient()) {\n-            return \"-client\";\n-        } else if (Platform.isMinimal()) {\n-            return \"-minimal\";\n-        } else if (Platform.isGraal()) {\n-            return \"-graal\";\n-        }\n-        throw new RuntimeException(\"Unknown VM mode.\");\n-    }\n-\n-    private final BooleanSupplier predicate;\n-\n-    \/**\n-     * Constructs new CommandLineOptionTest that will be executed only if\n-     * predicate {@code predicate} return {@code true}.\n-     * @param predicate a predicate responsible for test's preconditions check.\n-     *\/\n-    public CommandLineOptionTest(BooleanSupplier predicate) {\n-        this.predicate = predicate;\n-    }\n-\n-    \/**\n-     * Runs command line option test.\n-     *\/\n-    public final void test() throws Throwable {\n-        if (predicate.getAsBoolean()) {\n-            runTestCases();\n-        }\n-    }\n-\n-    \/**\n-     * @throws Throwable if some issue happened during test cases execution.\n-     *\/\n-    protected abstract void runTestCases() throws Throwable;\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/CommandLineOptionTest.java","additions":0,"deletions":330,"binary":false,"changes":330,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary.cli.predicate;\n-\n-import java.util.function.BooleanSupplier;\n-\n-public class AndPredicate implements BooleanSupplier {\n-    private final BooleanSupplier a;\n-    private final BooleanSupplier b;\n-\n-    public AndPredicate(BooleanSupplier a, BooleanSupplier b) {\n-        this.a = a;\n-        this.b = b;\n-    }\n-\n-    @Override\n-    public boolean getAsBoolean() {\n-        return a.getAsBoolean() && b.getAsBoolean();\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/predicate\/AndPredicate.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.oracle.java.testlibrary.cli.predicate;\n-\n-import com.oracle.java.testlibrary.Platform;\n-import sun.hotspot.cpuinfo.CPUInfo;\n-\n-import java.util.function.BooleanSupplier;\n-\n-public class CPUSpecificPredicate implements BooleanSupplier {\n-    private final String cpuArchPattern;\n-    private final String supportedCPUFeatures[];\n-    private final String unsupportedCPUFeatures[];\n-\n-    public CPUSpecificPredicate(String cpuArchPattern,\n-            String supportedCPUFeatures[],\n-            String unsupportedCPUFeatures[]) {\n-        this.cpuArchPattern = cpuArchPattern;\n-        this.supportedCPUFeatures = supportedCPUFeatures;\n-        this.unsupportedCPUFeatures = unsupportedCPUFeatures;\n-    }\n-\n-    @Override\n-    public boolean getAsBoolean() {\n-        if (!Platform.getOsArch().matches(cpuArchPattern)) {\n-            System.out.println(\"CPU arch does not match \" + cpuArchPattern);\n-            return false;\n-        }\n-\n-        if (supportedCPUFeatures != null) {\n-            for (String feature : supportedCPUFeatures) {\n-                if (!CPUInfo.hasFeature(feature)) {\n-                    System.out.println(\"CPU does not support \" + feature\n-                            + \" feature\");\n-                    return false;\n-                }\n-            }\n-        }\n-\n-        if (unsupportedCPUFeatures != null) {\n-            for (String feature : unsupportedCPUFeatures) {\n-                if (CPUInfo.hasFeature(feature)) {\n-                    System.out.println(\"CPU support \" + feature + \" feature\");\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/predicate\/CPUSpecificPredicate.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package com.oracle.java.testlibrary.cli.predicate;\n-\n-import java.util.function.BooleanSupplier;\n-\n-public class NotPredicate implements BooleanSupplier {\n-    private final BooleanSupplier s;\n-\n-    public NotPredicate(BooleanSupplier s) {\n-        this.s = s;\n-    }\n-\n-    @Override\n-    public boolean getAsBoolean() {\n-        return !s.getAsBoolean();\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/predicate\/NotPredicate.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package com.oracle.java.testlibrary.cli.predicate;\n-\n-import java.util.function.BooleanSupplier;\n-\n-public class OrPredicate implements BooleanSupplier {\n-    private final BooleanSupplier a;\n-    private final BooleanSupplier b;\n-\n-    public OrPredicate(BooleanSupplier a, BooleanSupplier b) {\n-        this.a = a;\n-        this.b = b;\n-    }\n-\n-    @Override\n-    public boolean getAsBoolean() {\n-        return a.getAsBoolean() || b.getAsBoolean();\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/cli\/predicate\/OrPredicate.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -38,1 +38,1 @@\n-WHITEBOX_DIR = ..\/whitebox\n+TESTLIBRARY_DIR = ..\/..\/..\/..\/test\/lib\n@@ -44,0 +44,1 @@\n+WB_SRC_FILES = $(shell find $(TESTLIBRARY_DIR)\/sun\/hotspot -name '*.java')\n@@ -55,1 +56,1 @@\n-\t@rm -rf filelist manifest.mf\n+\t@rm -rf filelist wb_filelist manifest.mf\n@@ -63,4 +64,11 @@\n-wb.jar: \n-\tmake -C ${WHITEBOX_DIR} wb.jar\n-\tcp ${WHITEBOX_DIR}\/wb.jar .\/\n-\tmake -C ${WHITEBOX_DIR} clean\n+wb.jar: wb_filelist\n+\t@mkdir -p $(OUTPUT_DIR)\n+\t$(JAVAC)  -sourcepath $(TESTLIBRARY_DIR) \\\n+\t\t-d $(OUTPUT_DIR) \\\n+\t\t-cp $(OUTPUT_DIR) \\\n+\t\t@wb_filelist\n+\t$(JAR) cf $@ -C $(OUTPUT_DIR) .\n+\n+wb_filelist: $(WB_SRC_FILES)\n+\t@rm -f $@\n+\t@echo $(WB_SRC_FILES) > $@\n","filename":"hotspot\/test\/testlibrary\/ctw\/Makefile","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/testlibrary\/ctw\/src\n+ * @library \/test\/lib \/testlibrary\/ctw\/src\n","filename":"hotspot\/test\/testlibrary\/ctw\/test\/ClassesDirTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/testlibrary\/ctw\/src\n+ * @library \/test\/lib \/testlibrary\/ctw\/src\n","filename":"hotspot\/test\/testlibrary\/ctw\/test\/ClassesListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import com.oracle.java.testlibrary.JDKToolFinder;\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/testlibrary\/ctw\/test\/CtwTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/testlibrary\/ctw\/src\n- * @build ClassFileInstaller com.oracle.java.testlibrary.* sun.hotspot.tools.ctw.CompileTheWorld sun.hotspot.WhiteBox Foo Bar\n+ * @library \/test\/lib \/testlibrary\/ctw\/src\n+ * @build ClassFileInstaller jdk.test.lib.* sun.hotspot.tools.ctw.CompileTheWorld sun.hotspot.WhiteBox Foo Bar\n@@ -41,1 +41,1 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/testlibrary\/ctw\/test\/JarDirTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n- * @library \/testlibrary \/testlibrary\/whitebox \/testlibrary\/ctw\/src\n- * @build ClassFileInstaller com.oracle.java.testlibrary.* sun.hotspot.tools.ctw.CompileTheWorld sun.hotspot.WhiteBox Foo Bar\n+ * @library \/test\/lib \/testlibrary\/ctw\/src\n+ * @build ClassFileInstaller jdk.test.lib.* sun.hotspot.tools.ctw.CompileTheWorld sun.hotspot.WhiteBox Foo Bar\n@@ -37,1 +37,1 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/testlibrary\/ctw\/test\/JarsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-#\n-# Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-#\n-\n-ifneq \"x$(ALT_BOOTDIR)\" \"x\"\n-\tBOOTDIR := $(ALT_BOOTDIR)\n-endif\n-\n-ifeq \"x$(BOOTDIR)\" \"x\"\n-\tJDK_HOME := $(shell dirname $(shell which java))\/..\n-else\n-\tJDK_HOME := $(BOOTDIR)\n-endif\n-\n-SRC_DIR = .\/\n-BUILD_DIR = build\n-OUTPUT_DIR = $(BUILD_DIR)\/classes\n-\n-JAVAC = $(JDK_HOME)\/bin\/javac\n-JAR = $(JDK_HOME)\/bin\/jar\n-\n-SRC_FILES = $(shell find $(SRC_DIR) -name '*.java')\n-\n-.PHONY: filelist clean cleantmp\n-\n-all: wb.jar cleantmp\n-\n-wb.jar: filelist\n-\t@mkdir -p $(OUTPUT_DIR)\n-\t$(JAVAC) -sourcepath $(SRC_DIR) -d $(OUTPUT_DIR) -cp $(OUTPUT_DIR) @filelist\n-\t$(JAR) cf wb.jar -C $(OUTPUT_DIR) .\n-\t@rm -rf $(OUTPUT_DIR)\n-\n-filelist: $(SRC_FILES)\n-\t@rm -f $@\n-\t@echo $(SRC_FILES) > $@\n-\n-clean: cleantmp\n-\t@rm -rf wb.jar\n-\n-cleantmp:\n-\t@rm -rf filelist\n-\t@rm -rf $(BUILD_DIR)\n","filename":"hotspot\/test\/testlibrary\/whitebox\/Makefile","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,263 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.hotspot;\n-\n-import java.lang.management.MemoryUsage;\n-import java.lang.reflect.Executable;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.function.Function;\n-import java.util.stream.Stream;\n-import java.security.BasicPermission;\n-import java.net.URL;\n-\n-import sun.hotspot.parser.DiagnosticCommand;\n-\n-public class WhiteBox {\n-\n-  @SuppressWarnings(\"serial\")\n-  public static class WhiteBoxPermission extends BasicPermission {\n-    public WhiteBoxPermission(String s) {\n-      super(s);\n-    }\n-  }\n-\n-  private WhiteBox() {}\n-  private static final WhiteBox instance = new WhiteBox();\n-  private static native void registerNatives();\n-\n-  \/**\n-   * Returns the singleton WhiteBox instance.\n-   *\n-   * The returned WhiteBox object should be carefully guarded\n-   * by the caller, since it can be used to read and write data\n-   * at arbitrary memory addresses. It must never be passed to\n-   * untrusted code.\n-   *\/\n-  public synchronized static WhiteBox getWhiteBox() {\n-    SecurityManager sm = System.getSecurityManager();\n-    if (sm != null) {\n-      sm.checkPermission(new WhiteBoxPermission(\"getInstance\"));\n-    }\n-    return instance;\n-  }\n-\n-  static {\n-    registerNatives();\n-  }\n-\n-  \/\/ Get the maximum heap size supporting COOPs\n-  public native long getCompressedOopsMaxHeapSize();\n-  \/\/ Arguments\n-  public native void printHeapSizes();\n-\n-  \/\/ Memory\n-  public native long getObjectAddress(Object o);\n-  public native int  getHeapOopSize();\n-  public native long getHeapAlignment();\n-  public native int  getVMPageSize();\n-  public native long getVMLargePageSize();\n-\n-  public native boolean isObjectInOldGen(Object o);\n-  public native long getObjectSize(Object o);\n-\n-  \/\/ Runtime\n-  \/\/ Make sure class name is in the correct format\n-  public boolean isClassAlive(String name) {\n-    return isClassAlive0(name.replace('.', '\/'));\n-  }\n-  private native boolean isClassAlive0(String name);\n-  public native boolean isMonitorInflated(Object obj);\n-  public native void forceSafepoint();\n-\n-  \/\/ Resource\/Class Lookup Cache\n-  public native boolean classKnownToNotExist(ClassLoader loader, String name);\n-  public native URL[] getLookupCacheURLs(ClassLoader loader);\n-  public native int[] getLookupCacheMatches(ClassLoader loader, String name);\n-\n-  \/\/ JVMTI\n-  public native void addToBootstrapClassLoaderSearch(String segment);\n-  public native void addToSystemClassLoaderSearch(String segment);\n-\n-  \/\/ G1\n-  public native boolean g1InConcurrentMark();\n-  public native boolean g1IsHumongous(Object o);\n-  public native long    g1NumMaxRegions();\n-  public native long    g1NumFreeRegions();\n-  public native int     g1RegionSize();\n-  public native MemoryUsage g1AuxiliaryMemoryUsage();\n-  public native Object[]    parseCommandLine(String commandline, DiagnosticCommand[] args);\n-\n-  \/\/ NMT\n-  public native long NMTMalloc(long size);\n-  public native void NMTFree(long mem);\n-  public native long NMTReserveMemory(long size);\n-  public native void NMTCommitMemory(long addr, long size);\n-  public native void NMTUncommitMemory(long addr, long size);\n-  public native void NMTReleaseMemory(long addr, long size);\n-  public native long NMTMallocWithPseudoStack(long size, int index);\n-  public native long NMTMallocWithPseudoStackAndType(long size, int index, int type);\n-  public native boolean NMTIsDetailSupported();\n-  public native boolean NMTChangeTrackingLevel();\n-  public native int NMTGetHashSize();\n-  public native long NMTNewArena(long initSize);\n-  public native void NMTFreeArena(long arena);\n-  public native void NMTArenaMalloc(long arena, long size);\n-\n-  \/\/ Compiler\n-  public native void    deoptimizeAll();\n-  public        boolean isMethodCompiled(Executable method) {\n-    return isMethodCompiled(method, false \/*not osr*\/);\n-  }\n-  public native boolean isMethodCompiled(Executable method, boolean isOsr);\n-  public        boolean isMethodCompilable(Executable method) {\n-    return isMethodCompilable(method, -1 \/*any*\/);\n-  }\n-  public        boolean isMethodCompilable(Executable method, int compLevel) {\n-    return isMethodCompilable(method, compLevel, false \/*not osr*\/);\n-  }\n-  public native boolean isMethodCompilable(Executable method, int compLevel, boolean isOsr);\n-  public native boolean isMethodQueuedForCompilation(Executable method);\n-  public        int     deoptimizeMethod(Executable method) {\n-    return deoptimizeMethod(method, false \/*not osr*\/);\n-  }\n-  public native int     deoptimizeMethod(Executable method, boolean isOsr);\n-  public        void    makeMethodNotCompilable(Executable method) {\n-    makeMethodNotCompilable(method, -1 \/*any*\/);\n-  }\n-  public        void    makeMethodNotCompilable(Executable method, int compLevel) {\n-    makeMethodNotCompilable(method, compLevel, false \/*not osr*\/);\n-  }\n-  public native void    makeMethodNotCompilable(Executable method, int compLevel, boolean isOsr);\n-  public        int     getMethodCompilationLevel(Executable method) {\n-    return getMethodCompilationLevel(method, false \/*not ost*\/);\n-  }\n-  public native int     getMethodCompilationLevel(Executable method, boolean isOsr);\n-  public native boolean testSetDontInlineMethod(Executable method, boolean value);\n-  public        int     getCompileQueuesSize() {\n-    return getCompileQueueSize(-1 \/*any*\/);\n-  }\n-  public native int     getCompileQueueSize(int compLevel);\n-  public native boolean testSetForceInlineMethod(Executable method, boolean value);\n-  public        boolean enqueueMethodForCompilation(Executable method, int compLevel) {\n-    return enqueueMethodForCompilation(method, compLevel, -1 \/*InvocationEntryBci*\/);\n-  }\n-  public boolean enqueueMethodForCompilation(Executable method, int compLevel, int entry_bci) {\n-    return enqueueMethodForCompilation0(method, compLevel, entry_bci);\n-  }\n-\n-  public native boolean enqueueInitializerForCompilation0(Class clazz, int compLevel);\n-  public native boolean enqueueMethodForCompilation0(Executable method, int compLevel, int entry_bci);\n-  public native void    clearMethodState(Executable method);\n-  public native void    markMethodProfiled(Executable method);\n-  public native int     getMethodEntryBci(Executable method);\n-  public native Object[] getNMethod(Executable method, boolean isOsr);\n-\n-  \/\/ Intered strings\n-  public native boolean isInStringTable(String str);\n-\n-  \/\/ Memory\n-  public native void readReservedMemory();\n-  public native long allocateCodeBlob(int size, int blobType);\n-  public native void freeCodeBlob(long address);\n-  public native Object[] getCodeBlob(long address);\n-  public native long allocateMetaspace(ClassLoader classLoader, long size);\n-  public native void freeMetaspace(ClassLoader classLoader, long addr, long size);\n-  public native long incMetaspaceCapacityUntilGC(long increment);\n-  public native long metaspaceCapacityUntilGC();\n-\n-  \/\/ Force Young GC\n-  public native void youngGC();\n-\n-  \/\/ Force Full GC\n-  public native void fullGC();\n-\n-  \/\/ Method tries to start concurrent mark cycle.\n-  \/\/ It returns false if CM Thread is always in concurrent cycle.\n-  public native boolean g1StartConcMarkCycle();\n-\n-  \/\/ Tests on ReservedSpace\/VirtualSpace classes\n-  public native int stressVirtualSpaceResize(long reservedSpaceSize, long magnitude, long iterations);\n-  public native void runMemoryUnitTests();\n-  public native void readFromNoaccessArea();\n-  public native long getThreadStackSize();\n-  public native long getThreadRemainingStackSize();\n-\n-  \/\/ CPU features\n-  public native String getCPUFeatures();\n-\n-  \/\/ Native extensions\n-  public native long getHeapUsageForContext(int context);\n-  public native long getHeapRegionCountForContext(int context);\n-  public native int getContextForObject(Object obj);\n-  public native void printRegionInfo(int context);\n-\n-  \/\/ VM flags\n-  public native void    setBooleanVMFlag(String name, boolean value);\n-  public native void    setIntxVMFlag(String name, long value);\n-  public native void    setUintxVMFlag(String name, long value);\n-  public native void    setUint64VMFlag(String name, long value);\n-  public native void    setStringVMFlag(String name, String value);\n-  public native void    setDoubleVMFlag(String name, double value);\n-  public native Boolean getBooleanVMFlag(String name);\n-  public native Long    getIntxVMFlag(String name);\n-  public native Long    getUintxVMFlag(String name);\n-  public native Long    getUint64VMFlag(String name);\n-  public native String  getStringVMFlag(String name);\n-  public native Double  getDoubleVMFlag(String name);\n-  private final List<Function<String,Object>> flagsGetters = Arrays.asList(\n-    this::getBooleanVMFlag, this::getIntxVMFlag, this::getUintxVMFlag,\n-    this::getUint64VMFlag, this::getStringVMFlag, this::getDoubleVMFlag);\n-\n-  public Object getVMFlag(String name) {\n-    return flagsGetters.stream()\n-                       .map(f -> f.apply(name))\n-                       .filter(x -> x != null)\n-                       .findAny()\n-                       .orElse(null);\n-  }\n-  public native int getOffsetForName0(String name);\n-  public int getOffsetForName(String name) throws Exception {\n-    int offset = getOffsetForName0(name);\n-    if (offset == -1) {\n-      throw new RuntimeException(name + \" not found\");\n-    }\n-    return offset;\n-  }\n-\n-  \/\/ Class Data Sharing\n-  public native boolean isSharedClass(Class<?> c);\n-\n-  \/\/ Returns true on linux if library has the noexecstack flag set.\n-  public native boolean checkLibSpecifiesNoexecstack(String libfilename);\n-\n-  \/\/ Container testing\n-  public native boolean isContainerized();\n-  public native void printOsInfo();\n-  public native int validateCgroup(String procCgroups,\n-                                   String procSelfCgroup,\n-                                   String procSelfMountinfo);\n-\n-}\n","filename":"hotspot\/test\/testlibrary\/whitebox\/sun\/hotspot\/WhiteBox.java","additions":0,"deletions":263,"binary":false,"changes":263,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.hotspot.code;\n-\n-import java.lang.reflect.Executable;\n-import sun.hotspot.WhiteBox;\n-\n-public class NMethod {\n-  private static final WhiteBox wb = WhiteBox.getWhiteBox();\n-  public static NMethod get(Executable method, boolean isOsr) {\n-    Object[] obj = wb.getNMethod(method, isOsr);\n-    return obj == null ? null : new NMethod(obj);\n-  }\n-  private NMethod(Object[] obj) {\n-    assert obj.length == 3;\n-    comp_level = (Integer) obj[0];\n-    compile_id = (Integer) obj[1];\n-    insts = (byte[]) obj[2];\n-  }\n-  public final byte[] insts;\n-  public final int comp_level;\n-  public final int compile_id;\n-\n-  @Override\n-  public String toString() {\n-    return \"NMethod{\" +\n-        \"insts=\" + insts +\n-        \", comp_level=\" + comp_level +\n-        \", compile_id=\" + compile_id +\n-        '}';\n-  }\n-}\n","filename":"hotspot\/test\/testlibrary\/whitebox\/sun\/hotspot\/code\/NMethod.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.hotspot.cpuinfo;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n-\n-import sun.hotspot.WhiteBox;\n-\n-\/**\n- * Information about CPU on test box.\n- *\n- * CPUInfo uses WhiteBox to gather information,\n- * so WhiteBox class should be added to bootclasspath\n- * and option -XX:+WhiteBoxAPI should expclicetly\n- * specified on command line.\n- *\/\n-public class CPUInfo {\n-\n-    private static final List<String> features;\n-    private static final String additionalCPUInfo;\n-\n-    static {\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n-\n-        Pattern additionalCPUInfoRE =\n-            Pattern.compile(\"([^(]*\\\\([^)]*\\\\)[^,]*),\\\\s*\");\n-\n-        String cpuFeaturesString = wb.getCPUFeatures();\n-        Matcher matcher = additionalCPUInfoRE.matcher(cpuFeaturesString);\n-        if (matcher.find()) {\n-            additionalCPUInfo = matcher.group(1);\n-        } else {\n-            additionalCPUInfo = \"\";\n-        }\n-        String splittedFeatures[] = matcher.replaceAll(\"\").split(\"(, )| \");\n-\n-        features = Collections.unmodifiableList(Arrays.\n-                                                asList(splittedFeatures));\n-    }\n-\n-    \/**\n-     * Get additional information about CPU.\n-     * For example, on X86 in will be family\/model\/stepping\n-     * and number of cores.\n-     *\n-     * @return additional CPU info\n-     *\/\n-    public static String getAdditionalCPUInfo() {\n-        return additionalCPUInfo;\n-    }\n-\n-    \/**\n-     * Get all known features supported by CPU.\n-     *\n-     * @return unmodifiable list with names of all known features\n-     *         supported by CPU.\n-     *\/\n-    public static List<String> getFeatures() {\n-        return features;\n-    }\n-\n-    \/**\n-     * Check if some feature is supported by CPU.\n-     *\n-     * @param feature Name of feature to be tested.\n-     * @return <b>true<\/b> if tested feature is supported by CPU.\n-     *\/\n-    public static boolean hasFeature(String feature) {\n-        return features.contains(feature.toLowerCase());\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/whitebox\/sun\/hotspot\/cpuinfo\/CPUInfo.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.hotspot.parser;\n-\n-public class DiagnosticCommand {\n-\n-    public enum DiagnosticArgumentType {\n-        JLONG, BOOLEAN, STRING, NANOTIME, STRINGARRAY, MEMORYSIZE\n-    }\n-\n-    private String name;\n-    private String desc;\n-    private DiagnosticArgumentType type;\n-    private boolean mandatory;\n-    private String defaultValue;\n-\n-    public DiagnosticCommand(String name, String desc, DiagnosticArgumentType type,\n-            boolean mandatory, String defaultValue) {\n-        this.name = name;\n-        this.desc = desc;\n-        this.type = type;\n-        this.mandatory = mandatory;\n-        this.defaultValue = defaultValue;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public String getDesc() {\n-        return desc;\n-    }\n-\n-    public DiagnosticArgumentType getType() {\n-        return type;\n-    }\n-\n-    public boolean isMandatory() {\n-        return mandatory;\n-    }\n-\n-    public String getDefaultValue() {\n-        return defaultValue;\n-    }\n-}\n","filename":"hotspot\/test\/testlibrary\/whitebox\/sun\/hotspot\/parser\/DiagnosticCommand.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-import static com.oracle.java.testlibrary.Asserts.*;\n+import static jdk.test.lib.Asserts.*;\n@@ -28,1 +28,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/testlibrary_tests\/AssertsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -36,2 +36,2 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n-import com.oracle.java.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"hotspot\/test\/testlibrary_tests\/OutputAnalyzerReportingTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n-import com.oracle.java.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"hotspot\/test\/testlibrary_tests\/OutputAnalyzerTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -33,2 +33,2 @@\n-import static com.oracle.java.testlibrary.Asserts.*;\n-import com.oracle.java.testlibrary.*;\n+import static jdk.test.lib.Asserts.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/testlibrary_tests\/RedefineClassTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import com.oracle.java.testlibrary.Asserts;\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n@@ -39,1 +39,1 @@\n- *          in com.oracle.java.testlibrary.Platform one and only one predicate\n+ *          in jdk.test.lib.Platform one and only one predicate\n@@ -41,1 +41,1 @@\n- * @library \/testlibrary\n+ * @library \/test\/lib\n@@ -46,1 +46,1 @@\n-        ARCH(\"isARM\", \"isPPC\", \"isSparc\", \"isX86\", \"isX64\", \"isAArch64\"),\n+        ARCH(\"isARM\", \"isPPC\", \"isSparc\", \"isX86\", \"isX64\", \"isAArch64\", \"isS390x\"),\n@@ -49,1 +49,2 @@\n-        VM_TYPE(\"isClient\", \"isServer\", \"isGraal\", \"isMinimal\"),\n+        VM_TYPE(\"isClient\", \"isServer\", \"isGraal\", \"isMinimal\", \"isZero\"),\n+        MODE(\"isInt\", \"isMixed\", \"isComp\"),\n@@ -51,1 +52,2 @@\n-                \"canPtraceAttachLinux\", \"canAttachOSX\");\n+                \"canPtraceAttachLinux\", \"canAttachOSX\",\n+                \"isEmulatedClient\", \"isTieredSupported\", \"hasSA\");\n@@ -73,1 +75,1 @@\n-     * {@link com.oracle.java.testlibrary.Platform}, whose name included into\n+     * {@link jdk.test.lib.Platform}, whose name included into\n@@ -92,1 +94,1 @@\n-     * {@link com.oracle.java.testlibrary.Platform} were either tested or\n+     * {@link jdk.test.lib.Platform} were either tested or\n@@ -113,1 +115,1 @@\n-     * {@link com.oracle.java.testlibrary.Platform}.\n+     * {@link jdk.test.lib.Platform}.\n","filename":"hotspot\/test\/testlibrary_tests\/TestMutuallyExclusivePlatformPredicates.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -36,1 +36,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.process.*;\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/BooleanTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/DoubleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/IntxTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/StringTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/Uint64Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/testlibrary \/testlibrary\/whitebox\n+ * @library \/test\/lib\n@@ -34,1 +34,1 @@\n-import com.oracle.java.testlibrary.Platform;\n+import jdk.test.lib.Platform;\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/UintxTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.*;\n","filename":"hotspot\/test\/testlibrary_tests\/whitebox\/vm_flags\/VmFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import com.oracle.java.testlibrary.*;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n","filename":"test\/lib\/RedefineClassHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"hotspot\/test\/testlibrary\/RedefineClassHelper.java","status":"renamed"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Arrays;\n@@ -29,0 +30,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+\n@@ -60,0 +63,1 @@\n+        vmArgs.addAll(Arrays.asList(ProcessTools.getPlatformSpecificVMArgs()));\n","filename":"test\/lib\/jdk\/test\/lib\/JDKToolLauncher.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    private static final String jdkDebug    = System.getProperty(\"jdk.debug\");\n@@ -203,9 +202,1 @@\n-        return (jdkDebug.toLowerCase().contains(\"debug\"));\n-    }\n-\n-    public static boolean isSlowDebugBuild() {\n-        return (jdkDebug.toLowerCase().equals(\"slowdebug\"));\n-    }\n-\n-    public static boolean isFastDebugBuild() {\n-        return (jdkDebug.toLowerCase().equals(\"fastdebug\"));\n+        return (vmVersion.toLowerCase().contains(\"debug\"));\n@@ -368,10 +359,0 @@\n-    \/*\n-     * This should match the #if condition in ClassListParser::load_class_from_source().\n-     *\/\n-    public static boolean areCustomLoadersSupportedForCDS() {\n-        boolean isLinux = Platform.isLinux();\n-        boolean is64 = Platform.is64bit();\n-        boolean isSolaris = Platform.isSolaris();\n-\n-        return (is64 && (isLinux || isSolaris));\n-    }\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.IllegalAccessException;\n+import java.lang.NoSuchFieldException;\n+import java.lang.reflect.Field;\n@@ -56,0 +59,1 @@\n+import sun.misc.Unsafe;\n@@ -110,0 +114,3 @@\n+\n+    private static Unsafe unsafe = null;\n+\n@@ -398,0 +405,15 @@\n+    \/**\n+     * @return Unsafe instance.\n+     *\/\n+    public static synchronized Unsafe getUnsafe() {\n+        if (unsafe == null) {\n+            try {\n+                Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+                f.setAccessible(true);\n+                unsafe = (Unsafe) f.get(null);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to get Unsafe instance.\", e);\n+            }\n+        }\n+        return unsafe;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/CPUSpecificCommandLineOptionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import jdk.test.lib.management.InputArguments;\n@@ -57,1 +56,1 @@\n-     * Verifies that JVM startup behavior matches our expectations.\n+     * Verifies that JVM startup behaviour matches our expectations.\n@@ -66,4 +65,0 @@\n-     * @param exitErrorMessage message that will be shown if exit code is not\n-     *                           as expected.\n-     * @param wrongWarningMessage message that will be shown if warning\n-     *                           messages are not as expected.\n@@ -75,1 +70,0 @@\n-            String exitErrorMessage, String wrongWarningMessage,\n@@ -78,2 +72,1 @@\n-                unexpectedMessages, exitErrorMessage,\n-                wrongWarningMessage, exitCode, false, option);\n+                unexpectedMessages, exitCode, false, option);\n@@ -83,1 +76,1 @@\n-     * Verifies that JVM startup behavior matches our expectations.\n+     * Verifies that JVM startup behaviour matches our expectations.\n@@ -91,4 +84,0 @@\n-     * @param exitErrorMessage message that will be shown if exit code is not\n-     *                           as expected.\n-     * @param wrongWarningMessage message that will be shown if warning\n-     *                           messages are not as expected.\n@@ -103,4 +92,2 @@\n-            String unexpectedMessages[], String exitErrorMessage,\n-            String wrongWarningMessage, ExitCode exitCode,\n-            boolean addTestVMOptions, String... options)\n-                    throws Throwable {\n+            String unexpectedMessages[], ExitCode exitCode,\n+            boolean addTestVMOptions, String... options) throws Throwable {\n@@ -109,1 +96,0 @@\n-            Collections.addAll(finalOptions, InputArguments.getVmInputArgs());\n@@ -120,0 +106,1 @@\n+        outputAnalyzer.shouldHaveExitValue(exitCode.value);\n@@ -121,30 +108,0 @@\n-        try {\n-                outputAnalyzer.shouldHaveExitValue(exitCode.value);\n-        } catch (RuntimeException e) {\n-            String errorMessage = String.format(\n-                    \"JVM process should have exit value '%d'.%n%s\",\n-                    exitCode.value, exitErrorMessage);\n-            throw new AssertionError(errorMessage, e);\n-        }\n-\n-        verifyOutput(expectedMessages, unexpectedMessages,\n-                wrongWarningMessage, outputAnalyzer);\n-    }\n-\n-    \/**\n-     * Verifies that JVM startup behavior matches our expectations.\n-     *\n-     * @param expectedMessages an array of patterns that should occur in JVM\n-     *                         output. If {@code null} then\n-     *                         JVM output could be empty.\n-     * @param unexpectedMessages an array of patterns that should not occur\n-     *                           in JVM output. If {@code null} then\n-     *                           JVM output could be empty.\n-     * @param wrongWarningMessage message that will be shown if messages are\n-     *                            not as expected.\n-     * @param outputAnalyzer OutputAnalyzer instance\n-     * @throws AssertionError if verification fails.\n-     *\/\n-    public static void verifyOutput(String[] expectedMessages,\n-            String[] unexpectedMessages, String wrongWarningMessage,\n-            OutputAnalyzer outputAnalyzer) {\n@@ -153,8 +110,1 @@\n-                try {\n-                    outputAnalyzer.shouldMatch(expectedMessage);\n-                } catch (RuntimeException e) {\n-                    String errorMessage = String.format(\n-                            \"Expected message not found: '%s'.%n%s\",\n-                            expectedMessage, wrongWarningMessage);\n-                    throw new AssertionError(errorMessage, e);\n-                }\n+                outputAnalyzer.shouldMatch(expectedMessage);\n@@ -166,8 +116,1 @@\n-                try {\n-                    outputAnalyzer.shouldNotMatch(unexpectedMessage);\n-                } catch (RuntimeException e) {\n-                    String errorMessage = String.format(\n-                            \"Unexpected message found: '%s'.%n%s\",\n-                            unexpectedMessage, wrongWarningMessage);\n-                    throw new AssertionError(errorMessage, e);\n-                }\n+                outputAnalyzer.shouldNotMatch(unexpectedMessage);\n@@ -179,1 +122,1 @@\n-     * Verifies that JVM startup behavior matches our expectations when type\n+     * Verifies that JVM startup behaviour matches our expectations when type\n@@ -188,4 +131,0 @@\n-     * @param exitErrorMessage Message that will be shown if exit value is not\n-     *                           as expected.\n-     * @param wrongWarningMessage message that will be shown if warning\n-     *                           messages are not as expected.\n@@ -198,3 +137,2 @@\n-            String unexpectedMessages[], String exitErrorMessage,\n-            String wrongWarningMessage, ExitCode exitCode, String... options)\n-            throws Throwable {\n+            String unexpectedMessages[], ExitCode exitCode, String... options)\n+            throws  Throwable {\n@@ -203,4 +141,0 @@\n-        String extraFlagForEmulated = CommandLineOptionTest.getVMTypeOptionForEmulated();\n-        if (extraFlagForEmulated != null) {\n-            finalOptions.add(extraFlagForEmulated);\n-        }\n@@ -210,2 +144,1 @@\n-                unexpectedMessages, exitErrorMessage,\n-                wrongWarningMessage, exitCode, false,\n+                unexpectedMessages, exitCode, false,\n@@ -223,2 +156,0 @@\n-     * @param optionErrorString message will be shown if option value is not as\n-     *                         expected.\n@@ -230,4 +161,2 @@\n-            String expectedValue, String optionErrorString,\n-            String... additionalVMOpts) throws Throwable {\n-        verifyOptionValue(optionName, expectedValue, optionErrorString,\n-                true, additionalVMOpts);\n+            String expectedValue, String... additionalVMOpts) throws Throwable {\n+        verifyOptionValue(optionName, expectedValue, true, additionalVMOpts);\n@@ -246,2 +175,0 @@\n-     * @param optionErrorString message will be shown if option value is not as\n-     *                         expected.\n@@ -254,3 +181,2 @@\n-            String expectedValue, String optionErrorString,\n-            boolean addTestVmOptions, String... additionalVMOpts)\n-                    throws Throwable {\n+            String expectedValue, boolean addTestVmOptions,\n+            String... additionalVMOpts) throws Throwable {\n@@ -272,82 +198,0 @@\n-        try {\n-            outputAnalyzer.shouldHaveExitValue(0);\n-        } catch (RuntimeException e) {\n-            String errorMessage = String.format(\n-                    \"JVM should start with option '%s' without errors.\",\n-                    optionName);\n-            throw new AssertionError(errorMessage, e);\n-        }\n-        verifyOptionValue(optionName, expectedValue, optionErrorString,\n-                outputAnalyzer);\n-    }\n-\n-    \/**\n-     * Verifies that value of specified JVM option is the same as\n-     * expected value.\n-     *\n-     * @param optionName a name of tested option.\n-     * @param expectedValue expected value of tested option.\n-     * @param optionErrorString message will be shown if option value is not\n-     *                          as expected.\n-     * @param outputAnalyzer OutputAnalyzer instance\n-     * @throws AssertionError if verification fails\n-     *\/\n-    public static void verifyOptionValue(String optionName,\n-            String expectedValue, String optionErrorString,\n-            OutputAnalyzer outputAnalyzer) {\n-        try {\n-            outputAnalyzer.shouldMatch(String.format(\n-                    CommandLineOptionTest.PRINT_FLAGS_FINAL_FORMAT,\n-                    optionName, expectedValue));\n-        } catch (RuntimeException e) {\n-            String errorMessage = String.format(\n-                    \"Option '%s' is expected to have '%s' value%n%s\",\n-                    optionName, expectedValue,\n-                    optionErrorString);\n-            throw new AssertionError(errorMessage, e);\n-        }\n-    }\n-\n-    \/**\n-     * Start VM with given options and values.\n-     * Generates command line option flags from\n-     * {@code optionNames} and {@code optionValues}.\n-     *\n-     * @param optionNames names of options to pass in\n-     * @param optionValues  values of option\n-     * @param additionalVMOpts additional options that should be\n-     *                         passed to JVM.\n-     * @return output from vm process\n-     *\/\n-    public static OutputAnalyzer startVMWithOptions(String[] optionNames,\n-            String[] optionValues,\n-            String... additionalVMOpts) throws Throwable {\n-        List<String> vmOpts = new ArrayList<>();\n-        if (optionNames == null || optionValues == null || optionNames.length != optionValues.length) {\n-            throw new IllegalArgumentException(\"optionNames and\/or optionValues\");\n-        }\n-\n-        for (int i = 0; i < optionNames.length; i++) {\n-          vmOpts.add(prepareFlag(optionNames[i], optionValues[i]));\n-        }\n-        Collections.addAll(vmOpts, additionalVMOpts);\n-        Collections.addAll(vmOpts, \"-version\");\n-\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n-                vmOpts.toArray(new String[vmOpts.size()]));\n-\n-        return new OutputAnalyzer(processBuilder.start());\n-    }\n-\n-    \/**\n-     * Verifies from the output that values of specified JVM options were the same as\n-     * expected values.\n-     *\n-     * @param outputAnalyzer search output for expect options and values.\n-     * @param optionNames names of tested options.\n-     * @param expectedValues expected values of tested options.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyOptionValuesFromOutput(OutputAnalyzer outputAnalyzer,\n-            String[] optionNames,\n-            String[] expectedValues) throws Throwable {\n@@ -355,2 +199,1 @@\n-        for (int i = 0; i < optionNames.length; i++) {\n-          outputAnalyzer.shouldMatch(String.format(\n+        outputAnalyzer.shouldMatch(String.format(\n@@ -358,18 +201,1 @@\n-                optionNames[i], expectedValues[i]));\n-        }\n-    }\n-\n-   \/**\n-     * Verifies that value of specified JVM options are the same as\n-     * expected values.\n-     * Generates command line option flags from\n-     * {@code optionNames} and {@code expectedValues}.\n-     *\n-     * @param optionNames names of tested options.\n-     * @param expectedValues expected values of tested options.\n-     * @throws Throwable if verification fails or some other issues occur.\n-     *\/\n-    public static void verifyOptionValues(String[] optionNames,\n-            String[] expectedValues) throws Throwable {\n-       OutputAnalyzer outputAnalyzer = startVMWithOptions(optionNames, expectedValues, \"-XX:+PrintFlagsFinal\");\n-       verifyOptionValuesFromOutput(outputAnalyzer, optionNames, expectedValues);\n+                optionName, expectedValue));\n@@ -388,1 +214,0 @@\n-     * @param optionErrorString message to show if option has another value\n@@ -394,2 +219,1 @@\n-            String expectedValue, String optionErrorString,\n-            String... additionalVMOpts) throws Throwable {\n+            String expectedValue, String... additionalVMOpts) throws Throwable {\n@@ -398,4 +222,0 @@\n-        String extraFlagForEmulated = CommandLineOptionTest.getVMTypeOptionForEmulated();\n-        if (extraFlagForEmulated != null) {\n-            finalOptions.add(extraFlagForEmulated);\n-        }\n@@ -405,2 +225,1 @@\n-                optionErrorString, false,\n-                finalOptions.toArray(new String[finalOptions.size()]));\n+                false, finalOptions.toArray(new String[finalOptions.size()]));\n@@ -433,18 +252,0 @@\n-    \/**\n-     * Prepares generic command line flag with name {@code name} by setting\n-     * it's value to {@code value}.\n-     *\n-     * @param name the name of option to be prepared\n-     * @param value the value of option (\"+\" or \"-\" can be used instead of \"true\" or \"false\")\n-     * @return prepared command line flag\n-     *\/\n-    public static String prepareFlag(String name, String value) {\n-        if (value.equals(\"+\") || value.equalsIgnoreCase(\"true\")) {\n-          return \"-XX:+\" + name;\n-      } else if (value.equals(\"-\") || value.equalsIgnoreCase(\"false\")) {\n-        return \"-XX:-\" + name;\n-      } else {\n-        return \"-XX:\" + name + \"=\" + value;\n-      }\n-    }\n-\n@@ -509,12 +310,0 @@\n-    \/**\n-     * @return addtional VMoptions(Emulated related) required to start a new VM with the same type as current.\n-     *\/\n-    private static String getVMTypeOptionForEmulated() {\n-        if (Platform.isServer() && !Platform.isEmulatedClient()) {\n-            return \"-XX:-NeverActAsServerClassMachine\";\n-        } else if (Platform.isEmulatedClient()) {\n-            return \"-XX:+NeverActAsServerClassMachine\";\n-        }\n-        return null;\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/CommandLineOptionTest.java","additions":21,"deletions":232,"binary":false,"changes":253,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-    private final BooleanSupplier c;\n@@ -36,7 +35,0 @@\n-        this.c = () -> true; \/\/ Boolean.TRUE::booleanValue\n-    }\n-\n-    public AndPredicate(BooleanSupplier a, BooleanSupplier b, BooleanSupplier c) {\n-        this.a = a;\n-        this.b = b;\n-        this.c = c;\n@@ -47,1 +39,1 @@\n-        return a.getAsBoolean() && b.getAsBoolean() && c.getAsBoolean();\n+        return a.getAsBoolean() && b.getAsBoolean();\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/predicate\/AndPredicate.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-            System.out.println(\"CPU arch \" + Platform.getOsArch() + \" does not match \" + cpuArchPattern);\n+            System.out.println(\"CPU arch does not match \" + cpuArchPattern);\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/predicate\/CPUSpecificPredicate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,0 +22,1 @@\n+ *\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/predicate\/NotPredicate.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,0 +22,1 @@\n+ *\n","filename":"test\/lib\/jdk\/test\/lib\/cli\/predicate\/OrPredicate.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-package com.oracle.java.testlibrary;\n+package jdk.test.lib.compiler;\n@@ -58,2 +58,2 @@\n- * import com.oracle.java.testlibrary.InMemoryJavaCompiler;\n- * import com.oracle.java.testlibrary.ByteClassLoader;\n+ * import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+ * import jdk.test.lib.ByteClassLoader;\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"hotspot\/test\/testlibrary\/com\/oracle\/java\/testlibrary\/InMemoryJavaCompiler.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    public ArrayList<String> dockerOpts = new ArrayList<String>();\n+    public ArrayList<String> dockerOpts = new ArrayList<>();\n@@ -36,1 +36,3 @@\n-    public ArrayList<String> javaOpts = new ArrayList<String>();\n+    public ArrayList<String> javaOpts = new ArrayList<>();\n+    \/\/ more java options, but to be set AFTER the test Java options\n+    public ArrayList<String> javaOptsAppended = new ArrayList<>();\n@@ -38,1 +40,1 @@\n-    public ArrayList<String> classParams = new ArrayList<String>();\n+    public ArrayList<String> classParams = new ArrayList<>();\n@@ -73,0 +75,5 @@\n+    public DockerRunOptions addJavaOptsAppended(String... opts) {\n+        Collections.addAll(javaOptsAppended, opts);\n+        return this;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerRunOptions.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -203,0 +203,1 @@\n+        cmd.addAll(opts.javaOptsAppended);\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.lang.management.RuntimeMXBean;\n@@ -46,0 +47,1 @@\n+import jdk.test.lib.Platform;\n@@ -302,1 +304,2 @@\n-        final String jvmName = ManagementFactory.getRuntimeMXBean().getName();\n+        RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();\n+        long pid = Long.parseLong(runtime.getName().split(\"@\")[0]);\n@@ -304,1 +307,2 @@\n-        final int index = jvmName.indexOf('@');\n+        return pid;\n+    }\n@@ -306,4 +310,6 @@\n-        if (index < 1) {\n-            \/\/ part before '@' empty (index = 0) \/ '@' not found (index = -1)\n-            return 42;\n-        }\n+    \/**\n+     * Get platform specific VM arguments (e.g. -d64 on 64bit Solaris)\n+     *\n+     * @return String[] with platform specific arguments, empty if there are none\n+     *\/\n+    public static String[] getPlatformSpecificVMArgs() {\n@@ -311,4 +317,2 @@\n-        try {\n-            return Long.parseLong(jvmName.substring(0, index));\n-        } catch (NumberFormatException e) {\n-            \/\/ ignore\n+        if (Platform.is64bit() && Platform.isSolaris()) {\n+            return new String[] { \"-d64\" };\n@@ -316,3 +320,0 @@\n-        return 42;\n-    }\n-\n@@ -320,0 +321,2 @@\n+        return new String[] {};\n+    }\n@@ -557,9 +560,0 @@\n-        public long pid() {\n-            try {\n-               return  ProcessTools.getProcessId();\n-            } catch (Exception e) {\n-               \/\/shit happens,  ignore\n-            }\n-            return 42;\n-        }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":16,"deletions":22,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.function.BiFunction;\n@@ -79,1 +78,0 @@\n-  public native long getVMAllocationGranularity();\n@@ -81,1 +79,0 @@\n-  public native long getHeapSpaceAlignment();\n@@ -87,4 +84,0 @@\n-  public native boolean classKnownToNotExist(ClassLoader loader, String name);\n-  public native URL[] getLookupCacheURLs(ClassLoader loader);\n-  public native int[] getLookupCacheMatches(ClassLoader loader, String name);\n-\n@@ -102,27 +95,4 @@\n-  private native long getConstantPool0(Class<?> aClass);\n-  public         long getConstantPool(Class<?> aClass) {\n-    Objects.requireNonNull(aClass);\n-    return getConstantPool0(aClass);\n-  }\n-\n-  private native int getConstantPoolCacheIndexTag0();\n-  public         int getConstantPoolCacheIndexTag() {\n-    return getConstantPoolCacheIndexTag0();\n-  }\n-\n-  private native int getConstantPoolCacheLength0(Class<?> aClass);\n-  public         int getConstantPoolCacheLength(Class<?> aClass) {\n-    Objects.requireNonNull(aClass);\n-    return getConstantPoolCacheLength0(aClass);\n-  }\n-\n-  private native int remapInstructionOperandFromCPCache0(Class<?> aClass, int index);\n-  public         int remapInstructionOperandFromCPCache(Class<?> aClass, int index) {\n-    Objects.requireNonNull(aClass);\n-    return remapInstructionOperandFromCPCache0(aClass, index);\n-  }\n-\n-  private native int encodeConstantPoolIndyIndex0(int index);\n-  public         int encodeConstantPoolIndyIndex(int index) {\n-    return encodeConstantPoolIndyIndex0(index);\n-  }\n+  \/\/ Resource\/Class Lookup Cache\n+  public native boolean classKnownToNotExist(ClassLoader loader, String name);\n+  public native URL[] getLookupCacheURLs(ClassLoader loader);\n+  public native int[] getLookupCacheMatches(ClassLoader loader, String name);\n@@ -137,2 +107,0 @@\n-  public native boolean g1BelongsToHumongousRegion(long adr);\n-  public native boolean g1BelongsToFreeRegion(long adr);\n@@ -145,14 +113,0 @@\n-  \/\/ Parallel GC\n-  public native long psVirtualSpaceAlignment();\n-  public native long psHeapGenerationAlignment();\n-\n-  \/**\n-   * Enumerates old regions with liveness less than specified and produces some statistics\n-   * @param liveness percent of region's liveness (live_objects \/ total_region_size * 100).\n-   * @return long[3] array where long[0] - total count of old regions\n-   *                             long[1] - total memory of old regions\n-   *                             long[2] - lowest estimation of total memory of old regions to be freed (non-full\n-   *                             regions are not included)\n-   *\/\n-  public native long[] g1GetMixedGCInfo(int liveness);\n-\n@@ -163,1 +117,0 @@\n-  public native long NMTAttemptReserveMemoryAt(long addr, long size);\n@@ -172,0 +125,3 @@\n+  public native long NMTNewArena(long initSize);\n+  public native void NMTFreeArena(long arena);\n+  public native void NMTArenaMalloc(long arena, long size);\n@@ -174,4 +130,0 @@\n-  public native int     matchesMethod(Executable method, String pattern);\n-  public native int     matchesInline(Executable method, String pattern);\n-  public native boolean shouldPrintAssembly(Executable method, int comp_level);\n-  public native int     deoptimizeFrames(boolean makeNotEntrant);\n@@ -179,1 +131,0 @@\n-\n@@ -185,1 +136,1 @@\n-    return isMethodCompilable(method, -2 \/*any*\/);\n+    return isMethodCompilable(method, -1 \/*any*\/);\n@@ -191,1 +142,0 @@\n-\n@@ -193,25 +143,0 @@\n-\n-  \/\/ Determine if the compiler corresponding to the compilation level 'compLevel'\n-  \/\/ and to the compilation context 'compilation_context' provides an intrinsic\n-  \/\/ for the method 'method'. An intrinsic is available for method 'method' if:\n-  \/\/  - the intrinsic is enabled (by using the appropriate command-line flag) and\n-  \/\/  - the platform on which the VM is running provides the instructions necessary\n-  \/\/    for the compiler to generate the intrinsic code.\n-  \/\/\n-  \/\/ The compilation context is related to using the DisableIntrinsic flag on a\n-  \/\/ per-method level, see hotspot\/src\/share\/vm\/compiler\/abstractCompiler.hpp\n-  \/\/ for more details.\n-  public boolean isIntrinsicAvailable(Executable method,\n-                                      Executable compilationContext,\n-                                      int compLevel) {\n-      Objects.requireNonNull(method);\n-      return isIntrinsicAvailable0(method, compilationContext, compLevel);\n-  }\n-  \/\/ If usage of the DisableIntrinsic flag is not expected (or the usage can be ignored),\n-  \/\/ use the below method that does not require the compilation context as argument.\n-  public boolean isIntrinsicAvailable(Executable method, int compLevel) {\n-      return isIntrinsicAvailable(method, null, compLevel);\n-  }\n-  private native boolean isIntrinsicAvailable0(Executable method,\n-                                               Executable compilationContext,\n-                                               int compLevel);\n@@ -223,1 +148,1 @@\n-    makeMethodNotCompilable(method, -2 \/*any*\/);\n+    makeMethodNotCompilable(method, -1 \/*any*\/);\n@@ -235,1 +160,1 @@\n-    return getCompileQueueSize(-2 \/*any*\/);\n+    return getCompileQueueSize(-1 \/*any*\/);\n@@ -255,2 +180,0 @@\n-  public native void    lockCompilation();\n-  public native void    unlockCompilation();\n@@ -269,7 +192,0 @@\n-  public native Object[] getCodeHeapEntries(int type);\n-  public native int     getCompilationActivityMode();\n-  private native long getMethodData0(Executable method);\n-  public         long getMethodData(Executable method) {\n-    Objects.requireNonNull(method);\n-    return getMethodData0(method);\n-  }\n@@ -278,8 +194,0 @@\n-  private native void clearInlineCaches0(boolean preserve_static_stubs);\n-  public void clearInlineCaches() {\n-    clearInlineCaches0(false);\n-  }\n-  public void clearInlineCaches(boolean preserve_static_stubs) {\n-    clearInlineCaches0(preserve_static_stubs);\n-  }\n-\n@@ -295,8 +203,0 @@\n-  public native boolean metaspaceShouldConcurrentCollect();\n-  public native long metaspaceReserveAlignment();\n-\n-  \/\/ Don't use these methods directly\n-  \/\/ Use sun.hotspot.gc.GC class instead.\n-  public native boolean isGCSupported(int name);\n-  public native boolean isGCSelected(int name);\n-  public native boolean isGCSelectedErgonomically();\n@@ -310,33 +210,0 @@\n-  \/\/ Returns true if the current GC supports control of its concurrent\n-  \/\/ phase via requestConcurrentGCPhase().  If false, a request will\n-  \/\/ always fail.\n-  public native boolean supportsConcurrentGCPhaseControl();\n-\n-  \/\/ Returns an array of concurrent phase names provided by this\n-  \/\/ collector.  These are the names recognized by\n-  \/\/ requestConcurrentGCPhase().\n-  public native String[] getConcurrentGCPhases();\n-\n-  \/\/ Attempt to put the collector into the indicated concurrent phase,\n-  \/\/ and attempt to remain in that state until a new request is made.\n-  \/\/\n-  \/\/ Returns immediately if already in the requested phase.\n-  \/\/ Otherwise, waits until the phase is reached.\n-  \/\/\n-  \/\/ Throws IllegalStateException if unsupported by the current collector.\n-  \/\/ Throws NullPointerException if phase is null.\n-  \/\/ Throws IllegalArgumentException if phase is not valid for the current collector.\n-  public void requestConcurrentGCPhase(String phase) {\n-    if (!supportsConcurrentGCPhaseControl()) {\n-      throw new IllegalStateException(\"Concurrent GC phase control not supported\");\n-    } else if (phase == null) {\n-      throw new NullPointerException(\"null phase\");\n-    } else if (!requestConcurrentGCPhase0(phase)) {\n-      throw new IllegalArgumentException(\"Unknown concurrent GC phase: \" + phase);\n-    }\n-  }\n-\n-  \/\/ Helper for requestConcurrentGCPhase().  Returns true if request\n-  \/\/ succeeded, false if the phase is invalid.\n-  private native boolean requestConcurrentGCPhase0(String phase);\n-\n@@ -357,0 +224,6 @@\n+  \/\/ Native extensions\n+  public native long getHeapUsageForContext(int context);\n+  public native long getHeapRegionCountForContext(int context);\n+  public native int getContextForObject(Object obj);\n+  public native void printRegionInfo(int context);\n+\n@@ -358,2 +231,0 @@\n-  public native boolean isConstantVMFlag(String name);\n-  public native boolean isLockedVMFlag(String name);\n@@ -361,2 +232,0 @@\n-  public native void    setIntVMFlag(String name, long value);\n-  public native void    setUintVMFlag(String name, long value);\n@@ -366,1 +235,0 @@\n-  public native void    setSizeTVMFlag(String name, long value);\n@@ -370,2 +238,0 @@\n-  public native Long    getIntVMFlag(String name);\n-  public native Long    getUintVMFlag(String name);\n@@ -375,1 +241,0 @@\n-  public native Long    getSizeTVMFlag(String name);\n@@ -379,3 +244,2 @@\n-    this::getBooleanVMFlag, this::getIntVMFlag, this::getUintVMFlag,\n-    this::getIntxVMFlag, this::getUintxVMFlag, this::getUint64VMFlag,\n-    this::getSizeTVMFlag, this::getStringVMFlag, this::getDoubleVMFlag);\n+    this::getBooleanVMFlag, this::getIntxVMFlag, this::getUintxVMFlag,\n+    this::getUint64VMFlag, this::getStringVMFlag, this::getDoubleVMFlag);\n@@ -390,9 +254,0 @@\n-\n-  \/\/ Jigsaw\n-  public native void DefineModule(Object module, boolean is_open, String version,\n-                                  String location, Object[] packages);\n-  public native void AddModuleExports(Object from_module, String pkg, Object to_module);\n-  public native void AddReadsModule(Object from_module, Object source_module);\n-  public native void AddModuleExportsToAllUnnamed(Object module, String pkg);\n-  public native void AddModuleExportsToAll(Object module, String pkg);\n-\n@@ -407,17 +262,0 @@\n-  public native Boolean getMethodBooleanOption(Executable method, String name);\n-  public native Long    getMethodIntxOption(Executable method, String name);\n-  public native Long    getMethodUintxOption(Executable method, String name);\n-  public native Double  getMethodDoubleOption(Executable method, String name);\n-  public native String  getMethodStringOption(Executable method, String name);\n-  private final List<BiFunction<Executable,String,Object>> methodOptionGetters\n-      = Arrays.asList(this::getMethodBooleanOption, this::getMethodIntxOption,\n-          this::getMethodUintxOption, this::getMethodDoubleOption,\n-          this::getMethodStringOption);\n-\n-  public Object getMethodOption(Executable method, String name) {\n-    return methodOptionGetters.stream()\n-                              .map(f -> f.apply(method, name))\n-                              .filter(x -> x != null)\n-                              .findAny()\n-                              .orElse(null);\n-  }\n@@ -425,5 +263,1 @@\n-  \/\/ Safepoint Checking\n-  public native void assertMatchingSafepointCalls(boolean mutexSafepointValue, boolean attemptedNoSafepointValue);\n-\n-  \/\/ Sharing & archiving\n-  public native boolean isShared(Object o);\n+  \/\/ Class Data Sharing\n@@ -431,9 +265,0 @@\n-  public native boolean areSharedStringsIgnored();\n-  public native boolean isCDSIncludedInVmBuild();\n-  public native boolean isJFRIncludedInVmBuild();\n-  public native boolean isJavaHeapArchiveSupported();\n-  public native Object  getResolvedReferences(Class<?> c);\n-  public native boolean areOpenArchiveHeapObjectsMapped();\n-\n-  \/\/ Handshakes\n-  public native int handshakeWalkStack(Thread t, boolean all_threads);\n@@ -447,0 +272,3 @@\n+  public native int validateCgroup(String procCgroups,\n+                                   String procSelfCgroup,\n+                                   String procSelfMountinfo);\n@@ -448,2 +276,0 @@\n-  \/\/ Decoder\n-  public native void disableElfSectionCache();\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":22,"deletions":196,"binary":false,"changes":218,"status":"modified"},{"patch":"@@ -30,11 +30,1 @@\n-  public static CodeBlob[] getCodeBlobs(BlobType type) {\n-    Object[] obj = WB.getCodeHeapEntries(type.id);\n-    if (obj == null) {\n-      return null;\n-    }\n-    CodeBlob[] result = new CodeBlob[obj.length];\n-    for (int i = 0, n = result.length; i < n; ++i) {\n-      result[i] = new CodeBlob((Object[]) obj[i]);\n-    }\n-    return result;\n-  }\n+\n","filename":"test\/lib\/sun\/hotspot\/code\/CodeBlob.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -22,0 +22,1 @@\n+ *\n@@ -29,1 +30,1 @@\n-public class NMethod extends CodeBlob {\n+public class NMethod {\n@@ -36,3 +37,3 @@\n-    super((Object[])obj[0]);\n-    assert obj.length == 5;\n-    comp_level = (Integer) obj[1];\n+    assert obj.length == 3;\n+    comp_level = (Integer) obj[0];\n+    compile_id = (Integer) obj[1];\n@@ -40,2 +41,0 @@\n-    compile_id = (Integer) obj[3];\n-    entry_point = (Long) obj[4];\n@@ -46,1 +45,0 @@\n-  public final long entry_point;\n@@ -50,7 +48,5 @@\n-    return \"NMethod{\"\n-        + super.toString()\n-        + \", insts=\" + insts\n-        + \", comp_level=\" + comp_level\n-        + \", compile_id=\" + compile_id\n-        + \", entry_point=\" + entry_point\n-        + '}';\n+    return \"NMethod{\" +\n+        \"insts=\" + insts +\n+        \", comp_level=\" + comp_level +\n+        \", compile_id=\" + compile_id +\n+        '}';\n","filename":"test\/lib\/sun\/hotspot\/code\/NMethod.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,72 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.hotspot.gc;\n-\n-import sun.hotspot.WhiteBox;\n-\n-\/**\n- * API to obtain information about selected and supported Garbage Collectors\n- * retrieved from the VM with the WhiteBox API.\n- *\/\n-public enum GC {\n-    \/*\n-     * Enum values much match CollectedHeap::Name\n-     *\/\n-    Serial(1),\n-    Parallel(2),\n-    ConcMarkSweep(3),\n-    G1(4),\n-    Epsilon(5),\n-    Z(6);\n-\n-    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n-\n-    private final int name;\n-\n-    private GC(int name) {\n-        this.name = name;\n-    }\n-\n-    \/**\n-     * @return true if this GC is supported by the VM\n-     *\/\n-    public boolean isSupported() {\n-        return WB.isGCSupported(name);\n-    }\n-\n-    \/**\n-     * @return true if this GC is currently selected\/used\n-     *\/\n-    public boolean isSelected() {\n-        return WB.isGCSelected(name);\n-    }\n-\n-    \/**\n-     * @return true if GC was selected ergonomically, as opposed\n-     *         to being explicitly specified on the command line\n-     *\/\n-    public static boolean isSelectedErgonomically() {\n-        return WB.isGCSelectedErgonomically();\n-    }\n-}\n","filename":"test\/lib\/sun\/hotspot\/gc\/GC.java","additions":0,"deletions":72,"binary":false,"changes":72,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-    private boolean argument;\n@@ -41,5 +40,0 @@\n-        this(name, desc, type, false, mandatory, defaultValue);\n-    }\n-\n-    public DiagnosticCommand(String name, String desc, DiagnosticArgumentType type,\n-            boolean argument, boolean mandatory, String defaultValue) {\n@@ -51,1 +45,0 @@\n-        this.argument = argument;\n@@ -70,4 +63,0 @@\n-    public boolean isArgument() {\n-        return argument;\n-    }\n-\n","filename":"test\/lib\/sun\/hotspot\/parser\/DiagnosticCommand.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"}]}