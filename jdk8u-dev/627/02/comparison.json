{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,16 @@\n+    },\n+\n+    \/**\n+     * Distrust TLS Server certificates anchored by a CAMERFIRMA root CA and\n+     * issued after April 15, 2025. If enabled, this policy is currently\n+     * enforced by the PKIX and SunX509 TrustManager implementations\n+     * of the SunJSSE provider implementation.\n+     *\/\n+    CAMERFIRMA_TLS {\n+        void checkDistrust(String variant, X509Certificate[] chain)\n+                           throws ValidatorException {\n+            if (!variant.equals(Validator.VAR_TLS_SERVER)) {\n+                return;\n+            }\n+            CamerfirmaTLSPolicy.checkDistrust(chain);\n+        }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/validator\/CADistrustPolicy.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package sun.security.validator;\n+\n+import java.security.cert.X509Certificate;\n+import java.time.LocalDate;\n+import java.time.Month;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import sun.security.util.Debug;\n+import sun.security.x509.X509CertImpl;\n+\n+\/**\n+ * This class checks if Camerfirma issued TLS Server certificates should be\n+ * restricted.\n+ *\/\n+final class CamerfirmaTLSPolicy {\n+\n+    private static final Debug debug = Debug.getInstance(\"certpath\");\n+\n+    \/\/ SHA-256 certificate fingerprints of distrusted roots\n+    private static final Set<String> FINGERPRINTS =\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(\n+        \/\/ cacerts alias: camerfirmachamberscommerceca\n+        \/\/ DN: CN=Chambers of Commerce Root,\n+        \/\/     OU=http:\/\/www.chambersign.org,\n+        \/\/     O=AC Camerfirma SA CIF A82743287, C=EU\n+        \"0C258A12A5674AEF25F28BA7DCFAECEEA348E541E6F5CC4EE63B71B361606AC3\",\n+        \/\/ cacerts alias: camerfirmachambersca\n+        \/\/ DN: CN=Chambers of Commerce Root - 2008,\n+        \/\/     O=AC Camerfirma S.A., SERIALNUMBER=A82743287,\n+        \/\/     L=Madrid (see current address at www.camerfirma.com\/address),\n+        \/\/     C=EU\n+        \"063E4AFAC491DFD332F3089B8542E94617D893D7FE944E10A7937EE29D9693C0\",\n+        \/\/ cacerts alias: camerfirmachambersignca\n+        \/\/ DN: CN=Global Chambersign Root - 2008,\n+        \/\/     O=AC Camerfirma S.A., SERIALNUMBER=A82743287,\n+        \/\/     L=Madrid (see current address at www.camerfirma.com\/address),\n+        \/\/     C=EU\n+        \"136335439334A7698016A0D324DE72284E079D7B5220BB8FBD747816EEBEBACA\"\n+    )));\n+\n+    \/\/ Any TLS Server certificate that is anchored by one of the Camerfirma\n+    \/\/ roots above and is issued after this date will be distrusted.\n+    private static final LocalDate APRIL_15_2025 =\n+        LocalDate.of(2025, Month.APRIL, 15);\n+\n+    \/**\n+     * This method assumes the eeCert is a TLS Server Cert and chains back to\n+     * the anchor.\n+     *\n+     * @param chain the end-entity's certificate chain. The end entity cert\n+     *              is at index 0, the trust anchor at index n-1.\n+     * @throws ValidatorException if the certificate is distrusted\n+     *\/\n+    static void checkDistrust(X509Certificate[] chain)\n+                              throws ValidatorException {\n+        X509Certificate anchor = chain[chain.length-1];\n+        String fp = fingerprint(anchor);\n+        if (fp == null) {\n+            throw new ValidatorException(\"Cannot generate fingerprint for \"\n+                + \"trust anchor of TLS server certificate\");\n+        }\n+        if (FINGERPRINTS.contains(fp)) {\n+            Date notBefore = chain[0].getNotBefore();\n+            LocalDate ldNotBefore = notBefore.toInstant()\n+                    .atZone(ZoneOffset.UTC).toLocalDate();\n+            \/\/ reject if certificate is issued after April 15, 2025\n+            checkNotBefore(ldNotBefore, APRIL_15_2025, anchor);\n+        }\n+    }\n+\n+    private static String fingerprint(X509Certificate cert) {\n+        return X509CertImpl.getFingerprint(\"SHA-256\", cert);\n+    }\n+\n+    private static void checkNotBefore(LocalDate notBeforeDate,\n+            LocalDate distrustDate, X509Certificate anchor)\n+            throws ValidatorException {\n+        if (notBeforeDate.isAfter(distrustDate)) {\n+            throw new ValidatorException\n+                (\"TLS Server certificate issued after \" + distrustDate +\n+                 \" and anchored by a distrusted legacy Camerfirma root CA: \"\n+                 + anchor.getSubjectX500Principal(),\n+                 ValidatorException.T_UNTRUSTED_CERT, anchor);\n+        }\n+    }\n+\n+    private CamerfirmaTLSPolicy() {}\n+}\n","filename":"jdk\/src\/share\/classes\/sun\/security\/validator\/CamerfirmaTLSPolicy.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -1218,0 +1218,3 @@\n+#   CAMERFIRMA_TLS : Distrust TLS Server certificates anchored by\n+#   a Camerfirma root CA and issued after April 15, 2025.\n+#\n@@ -1229,1 +1232,1 @@\n-jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS\n+jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS,CAMERFIRMA_TLS\n","filename":"jdk\/src\/share\/lib\/security\/java.security-aix","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1224,0 +1224,3 @@\n+#   CAMERFIRMA_TLS : Distrust TLS Server certificates anchored by\n+#   a Camerfirma root CA and issued after April 15, 2025.\n+#\n@@ -1235,1 +1238,1 @@\n-jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS\n+jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS,CAMERFIRMA_TLS\n","filename":"jdk\/src\/share\/lib\/security\/java.security-linux","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1222,0 +1222,3 @@\n+#   CAMERFIRMA_TLS : Distrust TLS Server certificates anchored by\n+#   a Camerfirma root CA and issued after April 15, 2025.\n+#\n@@ -1233,1 +1236,1 @@\n-jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS\n+jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS,CAMERFIRMA_TLS\n","filename":"jdk\/src\/share\/lib\/security\/java.security-macosx","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1220,0 +1220,3 @@\n+#   CAMERFIRMA_TLS : Distrust TLS Server certificates anchored by\n+#   a Camerfirma root CA and issued after April 15, 2025.\n+#\n@@ -1231,1 +1234,1 @@\n-jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS\n+jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS,CAMERFIRMA_TLS\n","filename":"jdk\/src\/share\/lib\/security\/java.security-solaris","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1222,0 +1222,3 @@\n+#   CAMERFIRMA_TLS : Distrust TLS Server certificates anchored by\n+#   a Camerfirma root CA and issued after April 15, 2025.\n+#\n@@ -1233,1 +1236,1 @@\n-jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS\n+jdk.security.caDistrustPolicies=SYMANTEC_TLS,ENTRUST_TLS,CAMERFIRMA_TLS\n","filename":"jdk\/src\/share\/lib\/security\/java.security-windows","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.security.Security;\n+import java.time.*;\n+import java.util.*;\n+import javax.net.ssl.*;\n+\n+\/**\n+ * @test\n+ * @bug 8346587\n+ * @summary Check that TLS Server certificates chaining back to distrusted\n+ *          Camerfirma roots are invalid\n+ * @library \/lib\/security\n+ * @modules java.base\/sun.security.validator\n+ * @run main\/othervm Camerfirma after policyOn invalid\n+ * @run main\/othervm Camerfirma after policyOff valid\n+ * @run main\/othervm Camerfirma before policyOn valid\n+ * @run main\/othervm Camerfirma before policyOff valid\n+ *\/\n+\n+public class Camerfirma {\n+\n+    private static final String certPath = \"chains\" + File.separator + \"camerfirma\";\n+\n+    \/\/ Each of the roots have a test certificate chain stored in a file\n+    \/\/ named \"<root>-chain.pem\".\n+    private static String[] rootsToTest = new String[] {\n+            \"camerfirmachamberscommerceca\", \"camerfirmachambersca\",\n+            \"camerfirmachambersignca\"};\n+\n+    \/\/ Date after the restrictions take effect\n+    private static final ZonedDateTime DISTRUST_DATE =\n+            LocalDate.of(2025, 04, 16).atStartOfDay(ZoneOffset.UTC);\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ All of the test certificates are signed with SHA-1 so we need\n+        \/\/ to remove the constraint that disallows SHA-1 certificates.\n+        String prop = Security.getProperty(\"jdk.certpath.disabledAlgorithms\");\n+        String newProp = prop.replace(\", SHA1 jdkCA & usage TLSServer\", \"\");\n+        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", newProp);\n+\n+        Distrust distrust = new Distrust(args);\n+\n+        X509TrustManager[] tms = new X509TrustManager[]{\n+                distrust.getTMF(\"PKIX\", null),\n+                distrust.getTMF(\"SunX509\", null)\n+        };\n+\n+        Date notBefore = distrust.getNotBefore(DISTRUST_DATE);\n+        distrust.testCertificateChain(certPath, notBefore, tms, rootsToTest);\n+    }\n+}\n","filename":"jdk\/test\/sun\/security\/ssl\/X509TrustManagerImpl\/distrust\/Camerfirma.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-\n@@ -200,1 +199,7 @@\n-        public boolean[] getKeyUsage() { return cert.getKeyUsage(); }\n+        public boolean[] getKeyUsage() {\n+            \/\/ Turn on the Digital Signature bit. Some certs that we want\n+            \/\/ to use as test certs don't have this bit turned on.\n+            boolean[] withDigitalSignature = cert.getKeyUsage();\n+            withDigitalSignature[0] = true;\n+            return withDigitalSignature;\n+        }\n","filename":"jdk\/test\/sun\/security\/ssl\/X509TrustManagerImpl\/distrust\/Distrust.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+Owner:   CN=Camerfirma Corporate Server II - 2015,\n+         L=Madrid (see current address at https:\/\/www.camerfirma.com\/address),\n+         SERIALNUMBER=A82743287,\n+         O=AC Camerfirma S.A., OU=AC CAMERFIRMA, C=ES\n+Issuer:  CN=Chambers of Commerce Root - 2008,\n+         O=AC Camerfirma S.A., SERIALNUMBER=A82743287,\n+         L=Madrid (see current address at www.camerfirma.com\/address), C=EU\n+Serial number: 621ff31c489ba136\n+Valid from: Thu Jan 15 01:21:16 PST 2015 until: Tue Dec 15 01:21:16 PST 2037\n+Certificate fingerprints:\n+         SHA1: FE:72:7A:78:EA:0C:03:35:CD:DA:9C:2E:D7:5F:D4:D4:6F:35:C2:EF\n+         SHA256: 66:EA:E2:70:9B:54:CD:D1:69:31:77:B1:33:2F:F0:36:CD:D0:F7:23:DB:30:39:ED:31:15:55:A6:CB:F5:FF:3E\n+Signature algorithm name: SHA256withRSA\n+Subject Public Key Algorithm: 4096-bit RSA key\n+Version: 3\n+\n+-----BEGIN CERTIFICATE-----\n+MIIIkzCCBnugAwIBAgIIYh\/zHEiboTYwDQYJKoZIhvcNAQELBQAwga4xCzAJBgNV\n+BAYTAkVVMUMwQQYDVQQHEzpNYWRyaWQgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQg\n+d3d3LmNhbWVyZmlybWEuY29tL2FkZHJlc3MpMRIwEAYDVQQFEwlBODI3NDMyODcx\n+GzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjEpMCcGA1UEAxMgQ2hhbWJlcnMg\n+b2YgQ29tbWVyY2UgUm9vdCAtIDIwMDgwHhcNMTUwMTE1MDkyMTE2WhcNMzcxMjE1\n+MDkyMTE2WjCB0zELMAkGA1UEBhMCRVMxFjAUBgNVBAsMDUFDIENBTUVSRklSTUEx\n+GzAZBgNVBAoMEkFDIENhbWVyZmlybWEgUy5BLjESMBAGA1UEBRMJQTgyNzQzMjg3\n+MUswSQYDVQQHDEJNYWRyaWQgKHNlZSBjdXJyZW50IGFkZHJlc3MgYXQgaHR0cHM6\n+Ly93d3cuY2FtZXJmaXJtYS5jb20vYWRkcmVzcykxLjAsBgNVBAMMJUNhbWVyZmly\n+bWEgQ29ycG9yYXRlIFNlcnZlciBJSSAtIDIwMTUwggIiMA0GCSqGSIb3DQEBAQUA\n+A4ICDwAwggIKAoICAQC3ndKNpFufVq9v+15dRoT9oVkgwEfDdsPw0Ly0R+eM5MOk\n+35zEil\/+hqEMbQmcvosAh6I8iAskkXasqh+SMbMIjvXbDyNILeGzsoP0uz3btHM7\n+oN3yHXDhhd1NGNocP54Wehe9+RE3WP0yEEo+D2YmMwUHuv4KiXtveiPksv+Xkkz5\n+auqppPMaYlD6y49AEsGY2zOEUI8PO4+tOxUKhvsiMuW817vH3VdmMwOjRe0SdYAi\n+YLQIiyqJGNdEo3u+fw8UXxaJSRXhmF+jUn5DvdzWWNAxxwAKy95EPlpLQsx\/7t2W\n+2ntoELPHGJk4V+\/yA0d2olLEqBADkRtP2HiC0wly+zp7OGmjtfjbqLrVjmo\/mLP3\n+zpmYbpUtubrHiY0rlW6wo5FZLcTUvcAxFjxLWVIELPjnTebOuHvoJTb97rhA1Oqq\n+woq5FWJHFI9idzXzFLO0LX\/4ugI9LZWxmvWW0O4CePtnhp0aNE\/GgAw6lMx7bjZe\n+DXxxQnUDEE\/mAqOHRUCnvRUSKVbuBBE0oz5fz3nUwcWVVgrm\/jkgqTX4EqnZe+yB\n+mKV6hFEYV+1oVh7kzNN4Hg7nzGuByS7cCuBEwULFhfUja1Bu9EqgndJ3CV0XCWIA\n+XVhJnPNPi6y4W11jLJ7XSGSz3sCh21g0Gpgi2pXHGDB65Jc\/QJHZ5ZaHCrzFnwID\n+AQABo4ICjDCCAogwEgYDVR0TAQH\/BAgwBgEB\/wIBAjAdBgNVHQ4EFgQUY+nw8FYA\n+aGWwIWwOXNcZCJ0INGUwgeMGA1UdIwSB2zCB2IAU+SSsD7K1+HnA+mCIG8TZTQKe\n+FxmhgbSkgbEwga4xCzAJBgNVBAYTAkVVMUMwQQYDVQQHEzpNYWRyaWQgKHNlZSBj\n+dXJyZW50IGFkZHJlc3MgYXQgd3d3LmNhbWVyZmlybWEuY29tL2FkZHJlc3MpMRIw\n+EAYDVQQFEwlBODI3NDMyODcxGzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjEp\n+MCcGA1UEAxMgQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdCAtIDIwMDiCCQCj2kJ+\n+pLGu2jB6BggrBgEFBQcBAQRuMGwwQgYIKwYBBQUHMAKGNmh0dHA6Ly93d3cuY2Ft\n+ZXJmaXJtYS5jb20vY2VydHMvcm9vdF9jaGFtYmVycy0yMDA4LmNydDAmBggrBgEF\n+BQcwAYYaaHR0cDovL29jc3AuY2FtZXJmaXJtYS5jb20wDgYDVR0PAQH\/BAQDAgEG\n+MCcGA1UdJQQgMB4GCCsGAQUFBwMEBggrBgEFBQcDAgYIKwYBBQUHAwEwPgYDVR0g\n+BDcwNTAzBgRVHSAAMCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vcG9saWN5LmNhbWVy\n+ZmlybWEuY29tMHgGA1UdHwRxMG8wNaAzoDGGL2h0dHA6Ly9jcmwuY2FtZXJmaXJt\n+YS5jb20vY2hhbWJlcnNyb290LTIwMDguY3JsMDagNKAyhjBodHRwOi8vY3JsMS5j\n+YW1lcmZpcm1hLmNvbS9jaGFtYmVyc3Jvb3QtMjAwOC5jcmwwDQYJKoZIhvcNAQEL\n+BQADggIBAKhqaZwalwf89f4wPqfcE\/lrsHdx8+q9RG46ouBXhTJMqXjwstXOZSL4\n+3Dqs3GaVuMPIM9OG7CK0I93mAt+FWtr49ACFTyPBxPg\/knrZ4RHyEto+\/6w0WZ9H\n+owNw0aUg3ZAkhIvMRPVou8PrVukqj2lGKIh3hRdrbHwYwwmKKNlWBoC9gWk3mTYU\n+zfNt\/KTzQCCl5+s6YDa+XInMLWaGd\/pE\/e++a22vY24cv7kN3NAFMjAMELPwh9ic\n+zLoPX8B52r+GgwpKY0c0hZdVTii6psLQ+BenyMlh+6lHRBOlTCSRtNi16o7H8fRq\n+CY2wyQi7N+EmdY1DhvECCi1nLbOnIx1bSAW0cVwPVrjQ\/vsAxPNc3SGe\/Xnanm3a\n+zAgFspzeuAhxxG0VKOvtPBnPQNsQ0cK664+IrWRsfa6aYhEfKvfsn5o4HpBWDobf\n+zrtNbqjjOuiM6JkT+DxXo5UK7t2q75KCJiimTtAuPcZ5wErZISLvZ34BodIHL2xK\n+b3Vww7K2FE1QaNsuQkGbUk++B9\/+vV3H57vzskObdFWeWKSCpxIil4vZwIIH17zn\n+WU+O2WIY1F0aO9zp3E7qwfmYT4MJ38NF9R7FSlxRlgVc1uUHu\/iyUU4N1O6F3VdX\n+P2Y+tgLFZLYV4kApfXk5l9h94dgKyfVcIpvS6yVpLfONPnlCNOxy\n+-----END CERTIFICATE-----\n","filename":"jdk\/test\/sun\/security\/ssl\/X509TrustManagerImpl\/distrust\/chains\/camerfirma\/camerfirmachambersca-chain.pem","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+Owner:   CN=AC Camerfirma Certificados Camerales,\n+         O=AC Camerfirma SA, SERIALNUMBER=A82743287,\n+         L=Madrid (see current address at www.camerfirma.com\/address),\n+         EMAILADDRESS=ac_camerfirma_cc@camerfirma.com, C=ES\n+Issuer:  CN=Chambers of Commerce Root, OU=http:\/\/www.chambersign.org,\n+         O=AC Camerfirma SA CIF A82743287, C=EU\n+Serial number: 5\n+Valid from: Mon Feb 09 07:42:47 PST 2004 until: Thu Feb 09 07:42:47 PST 2034\n+Certificate fingerprints:\n+         SHA1: 9F:36:B4:BE:9D:AF:1C:91:01:B2:D7:61:58:FB:95:CB:53:82:01:10\n+         SHA256: C7:D8:43:81:E1:1F:7C:57:46:77:1A:F5:B0:50:DC:51:FC:6F:DA:D6:F6:F3:5B:B5:3A:3D:E9:13:82:2E:A0:9E\n+Signature algorithm name: SHA1withRSA (weak)\n+Subject Public Key Algorithm: 2048-bit RSA key\n+Version: 3\n+\n+-----BEGIN CERTIFICATE-----\n+MIIFwDCCBKigAwIBAgIBBTANBgkqhkiG9w0BAQUFADB\/MQswCQYDVQQGEwJFVTEn\n+MCUGA1UEChMeQUMgQ2FtZXJmaXJtYSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQL\n+ExpodHRwOi8vd3d3LmNoYW1iZXJzaWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMg\n+b2YgQ29tbWVyY2UgUm9vdDAeFw0wNDAyMDkxNTQyNDdaFw0zNDAyMDkxNTQyNDda\n+MIHgMQswCQYDVQQGEwJFUzEuMCwGCSqGSIb3DQEJARYfYWNfY2FtZXJmaXJtYV9j\n+Y0BjYW1lcmZpcm1hLmNvbTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3VycmVudCBh\n+ZGRyZXNzIGF0IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAGA1UEBRMJ\n+QTgyNzQzMjg3MRkwFwYDVQQKExBBQyBDYW1lcmZpcm1hIFNBMS0wKwYDVQQDEyRB\n+QyBDYW1lcmZpcm1hIENlcnRpZmljYWRvcyBDYW1lcmFsZXMwggEgMA0GCSqGSIb3\n+DQEBAQUAA4IBDQAwggEIAoIBAQCjxnvvj01f36lgGhihRYVf1fAPEXsTJKrY4aLQ\n+cEUSh5szZE7VTtGiyMTMc2uCmnaXafjYHK8Lgmy6T9xxGEZ5OS4x6rgtuPyy13AP\n+tu3X3Y2kPVLu7ZMw5HoQC64wBj6YcnxTnBwmVW05DjzRXp6OyBIEKEaAB9vv2qEl\n+fh\/Y234FG6Wd\/ut1s0ScRZAo+6CSMNQxaY+ryXKD11uWkzWXJa9UZOasG7z4uPqc\n+Gr4\/Hz2\/CTLDTgp0xkMJYuzOztpUvOACrxlkS2utKUwVlAikJnboNwf\/en94RbHN\n+zkKc5t0SAbzCf57ueawbzxSdPa+SAC25FNur64FKkfdq5PPjAgEDo4IB5TCCAeEw\n+EgYDVR0TAQH\/BAgwBgEB\/wIBCzA8BgNVHR8ENTAzMDGgL6AthitodHRwOi8vY3Js\n+LmNoYW1iZXJzaWduLm9yZy9jaGFtYmVyc3Jvb3QuY3JsMB0GA1UdDgQWBBS2H06d\n+HGiRLjdyYOFGj1qlKjExuTCBqwYDVR0jBIGjMIGggBTjlPWxTenboSlbV4tNdgZ2\n+4dGiiqGBhKSBgTB\/MQswCQYDVQQGEwJFVTEnMCUGA1UEChMeQUMgQ2FtZXJmaXJt\n+YSBTQSBDSUYgQTgyNzQzMjg3MSMwIQYDVQQLExpodHRwOi8vd3d3LmNoYW1iZXJz\n+aWduLm9yZzEiMCAGA1UEAxMZQ2hhbWJlcnMgb2YgQ29tbWVyY2UgUm9vdIIBADAO\n+BgNVHQ8BAf8EBAMCAYYwKgYDVR0RBCMwIYEfYWNfY2FtZXJmaXJtYV9jY0BjYW1l\n+cmZpcm1hLmNvbTAnBgNVHRIEIDAegRxjaGFtYmVyc3Jvb3RAY2hhbWJlcnNpZ24u\n+b3JnMFsGA1UdIARUMFIwUAYLKwYBBAGBhy4KCQEwQTA\/BggrBgEFBQcCARYzaHR0\n+cDovL2Nwcy5jYW1lcmZpcm1hLmNvbS9jcHMvYWNfY2FtZXJmaXJtYV9jYy5odG1s\n+MA0GCSqGSIb3DQEBBQUAA4IBAQBl8KoPBYL\/\/EBonqQWS0N+hLfxImP1eQ6nac+v\n+R5QfF\/0w+VCTkShfKwHaa6V\/W1dPlVwXSECuvXHkX6DYrtxFGGFB6qxuP1rkIpRs\n+sTkAlpvOx3REiFjIkhsijKd\/ijvqxjbMbuYU+EFACK\/jQIRoj+LEEZ+haiqbALZB\n+Iqq\/26HTqX0itDosBj6M94YWcIpbTDefQNWCGsSnZcw2+k+az\/wAOZT6xAxlnEim\n+HpDDlgRsmaLrHpDPDoIRYOih0gbJTnn4mKex9Wgr0sZ+XFl03j+bvcXL1tiuQnwb\n+9dMRDe\/OdXABT35W4ZzLbpost65ZW3Tx+oi\/bLbmu6pbKCgs\n+-----END CERTIFICATE-----\n","filename":"jdk\/test\/sun\/security\/ssl\/X509TrustManagerImpl\/distrust\/chains\/camerfirma\/camerfirmachamberscommerceca-chain.pem","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+Owner:   CN=AC Camerfirma - 2009,\n+         L=Madrid (see current address at https:\/\/www.camerfirma.com\/address),\n+         SERIALNUMBER=A82743287, O=AC Camerfirma S.A., C=ES\n+Issuer:  CN=Global Chambersign Root - 2008,\n+         O=AC Camerfirma S.A., SERIALNUMBER=A82743287,\n+         L=Madrid (see current address at www.camerfirma.com\/address), C=EU\n+Serial number: 2\n+Valid from: Mon Mar 16 10:16:25 PDT 2009 until: Sun Mar 11 10:16:25 PDT 2029\n+Certificate fingerprints:\n+         SHA1: BA:BA:69:CF:D5:CC:C9:4D:05:6B:5B:E7:80:5F:E2:03:CB:EB:5C:57\n+         SHA256: B6:8D:5D:9B:4E:A6:35:95:7C:0C:32:15:C2:0D:35:B2:21:7B:69:E3:49:C7:A3:04:C4:F9:7F:20:C4:08:1F:88\n+Signature algorithm name: SHA1withRSA (weak)\n+Subject Public Key Algorithm: 4096-bit RSA key\n+Version: 3\n+\n+-----BEGIN CERTIFICATE-----\n+MIIIPzCCBiegAwIBAgIBAjANBgkqhkiG9w0BAQUFADCBrDELMAkGA1UEBhMCRVUx\n+QzBBBgNVBAcTOk1hZHJpZCAoc2VlIGN1cnJlbnQgYWRkcmVzcyBhdCB3d3cuY2Ft\n+ZXJmaXJtYS5jb20vYWRkcmVzcykxEjAQBgNVBAUTCUE4Mjc0MzI4NzEbMBkGA1UE\n+ChMSQUMgQ2FtZXJmaXJtYSBTLkEuMScwJQYDVQQDEx5HbG9iYWwgQ2hhbWJlcnNp\n+Z24gUm9vdCAtIDIwMDgwHhcNMDkwMzE2MTcxNjI1WhcNMjkwMzExMTcxNjI1WjCB\n+qjELMAkGA1UEBhMCRVMxGzAZBgNVBAoTEkFDIENhbWVyZmlybWEgUy5BLjESMBAG\n+A1UEBRMJQTgyNzQzMjg3MUswSQYDVQQHE0JNYWRyaWQgKHNlZSBjdXJyZW50IGFk\n+ZHJlc3MgYXQgaHR0cHM6Ly93d3cuY2FtZXJmaXJtYS5jb20vYWRkcmVzcykxHTAb\n+BgNVBAMTFEFDIENhbWVyZmlybWEgLSAyMDA5MIICIjANBgkqhkiG9w0BAQEFAAOC\n+Ag8AMIICCgKCAgEAmbHxFEYTJmMdPcYiPlWUGZu2+tQo4voohYi3dwCwoVuGdHSp\n+kyoqs1B3YGx4u5KT4n0A7+Bb8YQ\/QzbNy7UQ4JXAK+rT8JpNeKIvfN4lHnQJaChE\n+4fdn0KpvHWymaNq2k+EbQClquZB6OsTLvsivwSuSnyLcUw5rbajj53wq77fwB12y\n+phMjwz2AnD1BvHZd3vLOaH1jRQP3zzNmyjT\/Oj6+jdux7SBKlJWgQEaKflwcvYyc\n+DPFPhGM4KPwEGX61PCrS+l8Lw0Kdy6K4lE+GrfgJrXM5m1Ey1R0c9McYQQPAtYcm\n+cOnHHgkJdEAFVDa76T9C+lcMP6DNckbJIyc\/ENrmM2v4rq\/JnsJKEEx0VLyLizQx\n+cGU3gp4ckg0ImQ9hV3H\/DLWEqfrPuD++zaV81gpstnc9+pLg0Jibvwg3qvIr7nS5\n+acc\/\/qqxH0iJGYoStHW5J5HoM9HcBvhACq5rjzjrNLPYSJqbPJwBHKcql\/uUjQ6S\n+SVWe3\/CeJp6\/vGuY1aRXAk9c\/8oO0ZDrLKE8LsUgZesTLnWGd1LQcyQf6UMG1nb9\n+5C3eZRkCVpKma6Hl\/SUQNukerlbLOU9InFGNPdeEVq1Jo62XeEi8KMbTPdXou6Yl\n+rpe99dFnOUjVOdY7gfBGSgIVJjORqf\/V70jwsxcYz7j6PKl0XulJs06vpSECAwEA\n+AaOCAmowggJmMBIGA1UdEwEB\/wQIMAYBAf8CAQIwHQYDVR0OBBYEFMgAD\/zGUvyf\n+2ztkLjK5bi5x82V5MIHhBgNVHSMEgdkwgdaAFLkJypwe29NsOmuu7VTxW5MGNS5e\n+oYGypIGvMIGsMQswCQYDVQQGEwJFVTFDMEEGA1UEBxM6TWFkcmlkIChzZWUgY3Vy\n+cmVudCBhZGRyZXNzIGF0IHd3dy5jYW1lcmZpcm1hLmNvbS9hZGRyZXNzKTESMBAG\n+A1UEBRMJQTgyNzQzMjg3MRswGQYDVQQKExJBQyBDYW1lcmZpcm1hIFMuQS4xJzAl\n+BgNVBAMTHkdsb2JhbCBDaGFtYmVyc2lnbiBSb290IC0gMjAwOIIJAMnN0+nVfSPO\n+MH0GCCsGAQUFBwEBBHEwbzBFBggrBgEFBQcwAoY5aHR0cDovL3d3dy5jYW1lcmZp\n+cm1hLmNvbS9jZXJ0cy9yb290X2NoYW1iZXJzaWduLTIwMDguY3J0MCYGCCsGAQUF\n+BzABhhpodHRwOi8vb2NzcC5jYW1lcmZpcm1hLmNvbTAOBgNVHQ8BAf8EBAMCAQYw\n+PgYDVR0gBDcwNTAzBgRVHSAAMCswKQYIKwYBBQUHAgEWHWh0dHBzOi8vcG9saWN5\n+LmNhbWVyZmlybWEuY29tMH4GA1UdHwR3MHUwOKA2oDSGMmh0dHA6Ly9jcmwuY2Ft\n+ZXJmaXJtYS5jb20vY2hhbWJlcnNpZ25yb290LTIwMDguY3JsMDmgN6A1hjNodHRw\n+Oi8vY3JsMS5jYW1lcmZpcm1hLmNvbS9jaGFtYmVyc2lnbnJvb3QtMjAwOC5jcmww\n+DQYJKoZIhvcNAQEFBQADggIBABNYG4jBwoI7e8pCuUyDc6rwpE9H6AgrUdL7O1xK\n+TgTjDGBrMOBK+ZPS4Si8J3yZngvSrL694a1HmiiblJ+CmCdNGli2nBBM+OPK3tQB\n+4TW6hgkIe3vSNg\/9o9y6+MAJcm8Kn0nPCBkSRME87NwvpehtekuF1G2ng1KDVwAn\n+F+eCXfNanEwY++vWbJAuPE69Z\/0+rCgNyH1PzihiNu6vrUlSlLWKaG34O1DEttX+\n+SsWTpEbpH9w5y9Vmw6WQ\/B5nfhPM551HaMbiGgSxT9jHmf8APYQ3iT8EktcdTAdw\n+m1miiyxfKG+WjPT7P\/x8Np1spJZw+sNIDTLdZ0T1XQ6obVkBTFUDSULKW8949HDu\n+VSwdl9Hu9lkDzzh9tyVYwwjEWVFZOiD\/4TPVLfphf4ZEiyHt5YpNd9kZJIGGDxdc\n+CdtzPm2dQODFpv72LnPQHbuBQPJ71zkoAmyeM\/1Qj0DlrFsPcYnbRasck1VmYgDc\n+Xc0+is0wcgCd7Gpx1zpEeVqwMD96am2xZPzd6nsbXvo+6TzsKLRMJo6nOERwrzuI\n+F+\/eq3WXxYMt2UenJsHqwSgPJRMdl3SFz0+SZN0viHeLuwb7qaHN74qC6GP8yHGp\n+2xe6Z11mJDPLDSrQQ2dOceSJ1LurJgLP7amYmFlWwVnmM7LnfShhMWMV+MDrICnL\n+2ksL\n+-----END CERTIFICATE-----\n","filename":"jdk\/test\/sun\/security\/ssl\/X509TrustManagerImpl\/distrust\/chains\/camerfirma\/camerfirmachambersignca-chain.pem","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}