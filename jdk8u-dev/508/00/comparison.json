{"files":[{"patch":"@@ -283,1 +283,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -287,1 +287,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -370,1 +370,1 @@\n-  register intptr_t **ebp;\n+  intptr_t **ebp;\n","filename":"hotspot\/src\/os_cpu\/bsd_x86\/vm\/os_bsd_x86.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  register void *esp;\n+  void *esp;\n@@ -103,1 +103,1 @@\n-  register void *esp __asm__ (SPELL_REG_SP);\n+  void *esp __asm__ (SPELL_REG_SP);\n@@ -182,1 +182,1 @@\n-  register intptr_t **ebp;\n+  intptr_t **ebp;\n@@ -188,1 +188,1 @@\n-  register intptr_t **ebp __asm__ (SPELL_REG_FP);\n+  intptr_t **ebp __asm__ (SPELL_REG_FP);\n","filename":"hotspot\/src\/os_cpu\/linux_x86\/vm\/os_linux_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4567,1 +4567,1 @@\n-  register char c;\n+  char c;\n@@ -4765,1 +4765,1 @@\n-  register char c;\n+  char          c;\n","filename":"hotspot\/src\/share\/vm\/adlc\/adlparse.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  register Chunk *k = _first;\n+  Chunk *k = _first;\n@@ -96,1 +96,1 @@\n-  register Chunk *k = _chunk;   \/\/ Get filled-up chunk address\n+  Chunk *k = _chunk;            \/\/ Get filled-up chunk address\n","filename":"hotspot\/src\/share\/vm\/adlc\/arena.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -286,3 +286,3 @@\n-  register char c, k = 0;\n-  register int sum = 0;\n-  register const char *s = (const char *)t;\n+  char c, k = 0;\n+  int sum = 0;\n+  const char *s = (const char *)t;\n","filename":"hotspot\/src\/share\/vm\/adlc\/dict2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    register char *s = argv[i]; \/\/ Get option\/filename\n+    char *s = argv[i];          \/\/ Get option\/filename\n","filename":"hotspot\/src\/share\/vm\/adlc\/main.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -511,5 +511,5 @@\n-  register intptr_t*        topOfStack = (intptr_t *)istate->stack(); \/* access with STACK macros *\/\n-  register address          pc = istate->bcp();\n-  register jubyte opcode;\n-  register intptr_t*        locals = istate->locals();\n-  register ConstantPoolCache*    cp = istate->constants(); \/\/ method()->constants()->cache()\n+  intptr_t*        topOfStack = (intptr_t *)istate->stack(); \/* access with STACK macros *\/\n+  address          pc = istate->bcp();\n+  jubyte opcode;\n+  intptr_t*        locals = istate->locals();\n+  ConstantPoolCache*    cp = istate->constants(); \/\/ method()->constants()->cache()\n@@ -517,1 +517,1 @@\n-  register JavaThread*      THREAD = istate->thread();\n+  JavaThread*      THREAD = istate->thread();\n@@ -606,1 +606,1 @@\n-  register uintptr_t *dispatch_table = (uintptr_t*)&opclabels_data[0];\n+  uintptr_t *dispatch_table = (uintptr_t*)&opclabels_data[0];\n","filename":"hotspot\/src\/share\/vm\/interpreter\/bytecodeInterpreter.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -322,3 +322,3 @@\n-  register char c, k = 0;\n-  register int32 sum = 0;\n-  register const char *s = (const char *)t;\n+  char c, k = 0;\n+  int32 sum = 0;\n+  const char *s = (const char *)t;\n","filename":"hotspot\/src\/share\/vm\/libadt\/dict.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  register char *s = buf;       \/\/ Current working string pointer\n+  char *s = buf;                \/\/ Current working string pointer\n@@ -128,2 +128,2 @@\n-  register char c;              \/\/ Parse character\n-  register const char *t = s;   \/\/ Save the starting position of s.\n+  char c;                       \/\/ Parse character\n+  const char *t = s;            \/\/ Save the starting position of s.\n","filename":"hotspot\/src\/share\/vm\/libadt\/set.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-  register uint word = elem >> 5;            \/\/ Get the longword offset\n-  register uint32 mask = 1L << (elem & 31);  \/\/ Get bit mask\n+  uint word = elem >> 5;            \/\/ Get the longword offset\n+  uint32 mask = 1L << (elem & 31);  \/\/ Get bit mask\n@@ -121,1 +121,1 @@\n-  register uint word = elem >> 5; \/\/ Get the longword offset\n+  uint word = elem >> 5;          \/\/ Get the longword offset\n@@ -124,1 +124,1 @@\n-  register uint32 mask = 1L << (elem & 31);     \/\/ Get bit mask\n+  uint32 mask = 1L << (elem & 31);     \/\/ Get bit mask\n@@ -135,2 +135,2 @@\n-  register uint32 *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32 *u2 = s.data; \/\/ Pointer to the source data\n+  uint32 *u1 = data;   \/\/ Pointer to the destination data\n+  uint32 *u2 = s.data; \/\/ Pointer to the source data\n@@ -154,3 +154,3 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n-  register uint32 *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32 *u2 = s.data; \/\/ Pointer to the source data\n+  uint cnt = ((size<s.size)?size:s.size);\n+  uint32 *u1 = data;   \/\/ Pointer to the destination data\n+  uint32 *u2 = s.data; \/\/ Pointer to the source data\n@@ -179,3 +179,3 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n-  register uint32 *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32 *u2 = s.data; \/\/ Pointer to the source data\n+  uint cnt = ((size<s.size)?size:s.size);\n+  uint32 *u1 = data;   \/\/ Pointer to the destination data\n+  uint32 *u2 = s.data; \/\/ Pointer to the source data\n@@ -202,3 +202,3 @@\n-  register uint32 *u1 = data;   \/\/ Pointer to the destination data\n-  register uint32 *u2 = s.data; \/\/ Pointer to the source data\n-  register uint32 AnotB = 0, BnotA = 0;\n+  uint32 *u1 = data;   \/\/ Pointer to the destination data\n+  uint32 *u2 = s.data; \/\/ Pointer to the source data\n+  uint32 AnotB = 0, BnotA = 0;\n@@ -206,1 +206,1 @@\n-  register uint cnt = ((size<s.size)?size:s.size);\n+  uint cnt = ((size<s.size)?size:s.size);\n@@ -211,2 +211,2 @@\n-    register uint32 A = *u1++;  \/\/ Data from one guy\n-    register uint32 B = *u2++;  \/\/ Data from other guy\n+    uint32 A = *u1++;  \/\/ Data from one guy\n+    uint32 B = *u2++;  \/\/ Data from other guy\n@@ -252,3 +252,3 @@\n-  register uint small_size = ((size<s.size)?size:s.size);\n-  register uint32 *u1 = data;        \/\/ Pointer to the destination data\n-  register uint32 *u2 = s.data;      \/\/ Pointer to the source data\n+  uint small_size = ((size<s.size)?size:s.size);\n+  uint32 *u1 = data;        \/\/ Pointer to the destination data\n+  uint32 *u2 = s.data;      \/\/ Pointer to the source data\n@@ -293,1 +293,1 @@\n-  register uint word = elem >> 5; \/\/ Get the longword offset\n+  uint word = elem >> 5; \/\/ Get the longword offset\n@@ -296,1 +296,1 @@\n-  register uint32 mask = 1L << (elem & 31);  \/\/ Get bit mask\n+  uint32 mask = 1L << (elem & 31);  \/\/ Get bit mask\n","filename":"hotspot\/src\/share\/vm\/libadt\/vectset.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -541,1 +541,1 @@\n-  register Chunk *k = _first;\n+  Chunk *k = _first;\n","filename":"hotspot\/src\/share\/vm\/memory\/allocation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  register const Type *one = mul_id();  \/\/ The multiplicative identity\n+  const Type *one = mul_id();  \/\/ The multiplicative identity\n","filename":"hotspot\/src\/share\/vm\/opto\/mulnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}