{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,3 +84,49 @@\n-    public void drawGlyphVector(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n-        final Font prevFont = sg2d.getFont();\n-        sg2d.setFont(gV.getFont());\n+    private boolean hasSlotData(GlyphVector gv) {\n+        final int length = gv.getNumGlyphs();\n+        for (int i = 0; i < length; i++) {\n+            if ((gv.getGlyphCode(i) & CompositeGlyphMapper.SLOTMASK) != 0) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private Font getSlotFont(Font font, int slot) {\n+        Font2D f2d = FontUtilities.getFont2D(font);\n+        if (f2d instanceof CFont) {\n+            CompositeFont cf = ((CFont)f2d).getCompositeFont2D();\n+            PhysicalFont pf = cf.getSlotFont(slot);\n+            Font f = new Font(pf.getFontName(null),\n+                              font.getStyle(), font.getSize());\n+            return f;\n+        }\n+        return null;\n+    }\n+\n+    private GlyphVector getGlyphVectorWithRange(final Font font, final GlyphVector gV, int start, int count) {\n+        int[] glyphs = new int[count];\n+        for (int i = 0; i < count; i++) {\n+            glyphs[i] = gV.getGlyphCode(start+i) & CompositeGlyphMapper.GLYPHMASK;\n+        }\n+        \/\/ Positions should be null to recalculate by native methods,\n+        \/\/ if GV was segmented.\n+        StandardGlyphVector sgv = new StandardGlyphVector(font,\n+                                          gV.getFontRenderContext(),\n+                                          glyphs,\n+                                          null, \/\/ positions\n+                                          null, \/\/ indices\n+                                          gV.getLayoutFlags());\n+        return sgv;\n+    }\n+\n+    private int getLengthOfSameSlot(final GlyphVector gV, final int targetSlot, final int start, final int length) {\n+        int count = 1;\n+        for (; start + count < length; count++) {\n+            int slot = (gV.getGlyphCode(start + count) &\n+                        CompositeGlyphMapper.SLOTMASK) >> 24;\n+            if (targetSlot != slot) {\n+                break;\n+            }\n+        }\n+        return count;\n+    }\n@@ -88,0 +134,1 @@\n+    private void drawGlyphVectorImpl(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n@@ -95,0 +142,25 @@\n+    }\n+\n+    public void drawGlyphVector(final SunGraphics2D sg2d, final GlyphVector gV, final float x, final float y) {\n+        final Font prevFont = sg2d.getFont();\n+        sg2d.setFont(gV.getFont());\n+\n+        if (hasSlotData(gV)) {\n+            final int length = gV.getNumGlyphs();\n+            float[] positions = gV.getGlyphPositions(0, length, null);\n+            int start = 0;\n+            while (start < length) {\n+                int slot = (gV.getGlyphCode(start) &\n+                            CompositeGlyphMapper.SLOTMASK) >> 24;\n+                sg2d.setFont(getSlotFont(gV.getFont(), slot));\n+                int count = getLengthOfSameSlot(gV, slot, start, length);\n+                GlyphVector rangeGV = getGlyphVectorWithRange(sg2d.getFont(),\n+                                                              gV, start, count);\n+                drawGlyphVectorImpl(sg2d, rangeGV,\n+                                    x + positions[start * 2],\n+                                    y + positions[start * 2 + 1]);\n+                start += count;\n+            }\n+        } else {\n+            drawGlyphVectorImpl(sg2d, gV, x, y);\n+        }\n","filename":"jdk\/src\/macosx\/classes\/sun\/lwawt\/macosx\/CTextPipe.java","additions":76,"deletions":4,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8240756\n+ * @summary Non-English characters are printed with wrong glyphs on MacOS\n+ * @modules java.desktop\/sun.java2d java.desktop\/sun.java2d.loops java.desktop\/sun.font\n+ * @requires os.family == \"mac\"\n+ * @run main MultiSlotFontTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.RenderingHints;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GlyphVector;\n+import java.awt.image.BufferedImage;\n+import sun.font.StandardGlyphVector;\n+import sun.java2d.OSXOffScreenSurfaceData;\n+import sun.java2d.SunGraphics2D;\n+import sun.java2d.SurfaceData;\n+import sun.java2d.loops.SurfaceType;\n+\n+public class MultiSlotFontTest {\n+\n+    private static final int WIDTH = 100;\n+    private static final int HEIGHT = 60;\n+\n+    private static final String TEST_STR = \"\\u3042\\u3044\\u3046\\u3048\\u304Aabc\";\n+    private static final int EXPECTED_HEIGHT = 10;\n+    private static final int EXPECTED_WIDTH = 77;\n+    private static final int LIMIT_DIFF_HEIGHT = 3;\n+    private static final int LIMIT_DIFF_WIDTH = 15;\n+\n+    public static void main(String[] args) throws Exception {\n+        MultiSlotFontTest test = new MultiSlotFontTest();\n+    }\n+\n+    public MultiSlotFontTest() {\n+        BufferedImage img = createImage();\n+\n+        SurfaceData sd = OSXOffScreenSurfaceData.createDataIC(img,\n+                             SurfaceType.IntRgb);\n+        SunGraphics2D g2d = new SunGraphics2D(sd,\n+                                    Color.BLACK, Color.WHITE, null);\n+        Font font = g2d.getFont();\n+\n+        if (font.canDisplayUpTo(TEST_STR) != -1) {\n+            System.out.println(\"There is no capable font. Skipping the test.\");\n+            System.out.println(\"Font: \" + font);\n+            return;\n+        }\n+\n+        FontRenderContext frc = new FontRenderContext(null, false, false);\n+        StandardGlyphVector gv = new StandardGlyphVector(font, TEST_STR, frc);\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\n+                             RenderingHints.VALUE_ANTIALIAS_OFF);\n+        g2d.drawGlyphVector(gv, 0.0f, (float)(HEIGHT - 5));\n+        g2d.dispose();\n+\n+        Dimension d = getBounds(img);\n+\n+        if (Math.abs(d.height - EXPECTED_HEIGHT) > LIMIT_DIFF_HEIGHT ||\n+            Math.abs(d.width  - EXPECTED_WIDTH)  > LIMIT_DIFF_WIDTH) {\n+            debugOut(img);\n+            throw new RuntimeException(\n+                \"Incorrect GlyphVector shape \" + d + \",\" + gv);\n+        }\n+    }\n+\n+    private static BufferedImage createImage() {\n+        BufferedImage image = new BufferedImage(WIDTH, HEIGHT,\n+                                      BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, WIDTH, HEIGHT);\n+        g.dispose();\n+        return image;\n+    }\n+\n+    private Dimension getBounds(BufferedImage img) {\n+        int top = HEIGHT;\n+        int left = WIDTH;\n+        int right = 0;\n+        int bottom = 0;\n+        for (int y = 0; y < HEIGHT; y++) {\n+            for (int x = 0; x < WIDTH; x++) {\n+                if ((img.getRGB(x, y) & 0xFFFFFF) == 0) {\n+                    if (top    > y) top = y;\n+                    if (bottom < y) bottom = y;\n+                    if (left   > x) left = x;\n+                    if (right  < x) right = x;\n+                }\n+            }\n+        }\n+        return new Dimension(right - left, bottom - top);\n+    }\n+\n+    private void debugOut(BufferedImage img) {\n+        for (int y = 0; y < HEIGHT; y++) {\n+            for (int x = 0; x < WIDTH; x++) {\n+                int c = img.getRGB(x, y) & 0xFFFFFF;\n+                if (c == 0) {\n+                    System.out.print(\"*\");\n+                } else {\n+                    System.out.print(\" \");\n+                }\n+            }\n+            System.out.println();\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/font\/GlyphVector\/MultiSlotFontTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}