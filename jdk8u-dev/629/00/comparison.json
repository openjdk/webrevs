{"files":[{"patch":"@@ -3985,0 +3985,1 @@\n+     * @param exttype X.509 extension type\n@@ -3987,1 +3988,1 @@\n-    private GeneralName createGeneralName(String t, String v)\n+    private GeneralName createGeneralName(String t, String v, int exttype)\n@@ -3998,1 +3999,8 @@\n-            case 2: gn = new DNSName(v); break;\n+            case 2:\n+                if (exttype == 3) {\n+                    \/\/ Allow wildcard only for SAN extension\n+                    gn = new DNSName(v, true);\n+                } else {\n+                    gn = new DNSName(v);\n+                }\n+                break;\n@@ -4252,1 +4260,1 @@\n-                                gnames.add(createGeneralName(t, v));\n+                                gnames.add(createGeneralName(t, v, exttype));\n@@ -4308,1 +4316,1 @@\n-                                        oid, createGeneralName(t, v)));\n+                                        oid, createGeneralName(t, v, exttype)));\n@@ -4333,1 +4341,1 @@\n-                                gnames.add(createGeneralName(t, v));\n+                                gnames.add(createGeneralName(t, v, exttype));\n","filename":"jdk\/src\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,2 @@\n-     * @throws IOException if the name is not a valid DNSName subjectAltName\n+     * @param allowWildcard the flag for wildcard checking.\n+     * @throws IOException if the name is not a valid DNSName\n@@ -74,1 +75,1 @@\n-    public DNSName(String name) throws IOException {\n+    public DNSName(String name, boolean allowWildcard) throws IOException {\n@@ -94,3 +95,20 @@\n-            \/\/ RFC 1123: DNSName components must begin with a letter or digit\n-            if (alphaDigits.indexOf(name.charAt(startIndex)) < 0)\n-                throw new IOException(\"DNSName components must begin with a letter or digit\");\n+            if (allowWildcard) {\n+                \/\/ RFC 1123: DNSName components must begin with a letter or digit\n+                \/\/ or RFC 4592: the first component of a DNSName can have only a wildcard\n+                \/\/ character * (asterisk), i.e. *.example.com. Asterisks at other components\n+                \/\/ will not be allowed as a wildcard.\n+                if (alphaDigits.indexOf(name.charAt(startIndex)) < 0) {\n+                    \/\/ Checking to make sure the wildcard only appears in the first component,\n+                    \/\/ and it has to be at least 3-char long with the form of *.[alphaDigit]\n+                    if ((name.length() < 3) || (name.indexOf('*', 0) != 0) ||\n+                        (name.charAt(startIndex+1) != '.') ||\n+                        (alphaDigits.indexOf(name.charAt(startIndex+2)) < 0))\n+                        throw new IOException(\"DNSName components must begin with a letter, digit, \"\n+                            + \"or the first component can have only a wildcard character *\");\n+                }\n+            } else {\n+                \/\/ RFC 1123: DNSName components must begin with a letter or digit\n+                if (alphaDigits.indexOf(name.charAt(startIndex)) < 0)\n+                    throw new IOException(\"DNSName components must begin with a letter or digit\");\n+            }\n+\n@@ -107,0 +125,9 @@\n+    \/**\n+     * Create the DNSName object with the specified name.\n+     *\n+     * @param name the DNSName.\n+     * @throws IOException if the name is not a valid DNSName\n+     *\/\n+    public DNSName(String name) throws IOException {\n+        this(name, false);\n+    }\n","filename":"jdk\/src\/share\/classes\/sun\/security\/x509\/DNSName.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @bug 8213952\n+ * @bug 8213952 8186143\n@@ -56,0 +56,17 @@\n+    @DataProvider(name = \"goodSanNames\")\n+    public Object[][] goodSanNames() {\n+        Object[][] data = {\n+                {\"abc.com\"},\n+                {\"ABC.COM\"},\n+                {\"a12.com\"},\n+                {\"a1b2c3.com\"},\n+                {\"1abc.com\"},\n+                {\"123.com\"},\n+                {\"abc.com-\"}, \/\/ end with hyphen\n+                {\"a-b-c.com\"}, \/\/ hyphens\n+                {\"*.domain.com\"}, \/\/ wildcard in 1st level subdomain\n+                {\"*.com\"},\n+        };\n+        return data;\n+    }\n+\n@@ -68,0 +85,23 @@\n+                {\"*.domain.com\"}, \/\/ wildcard not allowed\n+                {\"a*.com\"}, \/\/ only allow letter, digit, or hyphen\n+        };\n+        return data;\n+    }\n+\n+    @DataProvider(name = \"badSanNames\")\n+    public Object[][] badSanNames() {\n+        Object[][] data = {\n+                {\" 1abc.com\"}, \/\/ begin with space\n+                {\"1abc.com \"}, \/\/ end with space\n+                {\"1a bc.com \"}, \/\/ no space allowed\n+                {\"-abc.com\"}, \/\/ begin with hyphen\n+                {\"a..b\"}, \/\/ ..\n+                {\".a\"}, \/\/ begin with .\n+                {\"a.\"}, \/\/ end with .\n+                {\"\"}, \/\/ empty\n+                {\"  \"},  \/\/ space only\n+                {\"*\"}, \/\/  wildcard only\n+                {\"*a.com\"}, \/\/ partial wildcard disallowed\n+                {\"abc.*.com\"}, \/\/ wildcard not allowed in 2nd level\n+                {\"*.*.domain.com\"}, \/\/ double wildcard not allowed\n+                {\"a*.com\"}, \/\/ only allow letter, digit, or hyphen\n@@ -72,0 +112,1 @@\n+\n@@ -81,0 +122,9 @@\n+    @Test(dataProvider = \"goodSanNames\")\n+    public void testGoodSanDNSName(String dnsNameString) {\n+        try {\n+            DNSName dn = new DNSName(dnsNameString, true);\n+        } catch (IOException e) {\n+            fail(\"Unexpected IOException\");\n+        }\n+    }\n+\n@@ -91,0 +141,11 @@\n+\n+    @Test(dataProvider = \"badSanNames\")\n+    public void testBadSanDNSName(String dnsNameString) {\n+        try {\n+            DNSName dn = new DNSName(dnsNameString, true);\n+            fail(\"IOException expected\");\n+        } catch (IOException e) {\n+            if (!e.getMessage().contains(\"DNSName\"))\n+                fail(\"Unexpeceted message: \" + e);\n+        }\n+    }\n","filename":"jdk\/test\/sun\/security\/x509\/GeneralName\/DNSNameTest.java","additions":63,"deletions":2,"binary":false,"changes":65,"status":"modified"}]}