{"files":[{"patch":"@@ -37,4 +37,17 @@\n-import javax.swing.*;\n-import java.awt.*;\n-import java.awt.datatransfer.*;\n-import java.awt.dnd.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n@@ -42,0 +55,7 @@\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.imageio.ImageIO;\n+import javax.swing.SwingUtilities;\n@@ -46,1 +66,1 @@\n-    private static final int FRAME_LOCATION = 100;\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -52,1 +72,3 @@\n-        f.setBounds(FRAME_LOCATION, FRAME_LOCATION, FRAME_SIZE, FRAME_SIZE);\n+        f.setSize(FRAME_SIZE, FRAME_SIZE);\n+        f.setLocationRelativeTo(null);\n+        f.setUndecorated(true);\n@@ -65,0 +87,1 @@\n+                dropCompleteLatch.countDown();\n@@ -69,1 +92,1 @@\n-\n+        f.setAlwaysOnTop(true);\n@@ -79,0 +102,1 @@\n+            r.setAutoDelay(50);\n@@ -80,0 +104,3 @@\n+            final AtomicReference<Point> frameLoc = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> frameLoc.set(f.getLocationOnScreen()));\n+            Point loc = frameLoc.get();\n@@ -81,3 +108,3 @@\n-                    new Point(FRAME_LOCATION + FRAME_SIZE \/ 3, FRAME_LOCATION + FRAME_SIZE \/ 3),\n-                    new Point(FRAME_LOCATION + FRAME_SIZE \/ 3 * 2, FRAME_LOCATION + FRAME_SIZE \/ 3 * 2),\n-                    InputEvent.BUTTON1_MASK);\n+                    new Point(loc.x + FRAME_SIZE \/ 3, loc.y + FRAME_SIZE \/ 3),\n+                    new Point(loc.x + FRAME_SIZE \/ 3 * 2, loc.y + FRAME_SIZE \/ 3 * 2),\n+                    InputEvent.BUTTON1_DOWN_MASK);\n@@ -85,0 +112,4 @@\n+            if(!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                captureScreen(r);\n+                throw new RuntimeException(\"Waited too long, but the drop is not completed\");\n+            }\n@@ -91,1 +122,11 @@\n-\n+    private static void captureScreen(Robot r) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        try {\n+            ImageIO.write(\n+                    r.createScreenCapture(new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                    \"png\",\n+                    new File(\"FailedScreenImage.png\")\n+                         );\n+        } catch (IOException ignore) {\n+        }\n+    }\n","filename":"jdk\/test\/java\/awt\/dnd\/AcceptDropMultipleTimes\/AcceptDropMultipleTimes.java","additions":52,"deletions":11,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -37,2 +37,7 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -49,0 +54,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -50,0 +57,1 @@\n+import javax.swing.SwingUtilities;\n@@ -54,1 +62,0 @@\n-    private static final int FRAME_LOCATION = 100;\n@@ -60,0 +67,1 @@\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -63,1 +71,2 @@\n-        f.setBounds(FRAME_LOCATION,FRAME_LOCATION,FRAME_SIZE,FRAME_SIZE);\n+        f.setLocationRelativeTo(null);\n+        f.setSize(FRAME_SIZE,FRAME_SIZE);\n@@ -65,1 +74,1 @@\n-        mainPanel.setBounds(0, 0, FRAME_SIZE, FRAME_SIZE);\n+        mainPanel.setSize(FRAME_SIZE, FRAME_SIZE);\n@@ -77,1 +86,4 @@\n-            @Override public void drop(DropTargetDropEvent dtde) { }\n+            @Override public void drop(DropTargetDropEvent dtde) {\n+                System.out.println(\"Drop complete\");\n+                dropCompleteLatch.countDown();\n+            }\n@@ -88,0 +100,1 @@\n+        f.setAlwaysOnTop(true);\n@@ -115,0 +128,3 @@\n+            if(!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Waited too long, but the drop is not completed\");\n+            }\n","filename":"jdk\/test\/java\/awt\/dnd\/DropTargetEnterExitTest\/ExtraDragEnterTest.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -37,2 +37,6 @@\n-import javax.swing.*;\n-import java.awt.*;\n+import java.awt.Color;\n+import java.awt.Cursor;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n@@ -50,0 +54,3 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.SwingUtilities;\n@@ -56,2 +63,0 @@\n-    private static volatile boolean dragExitCalled = false;\n-\n@@ -59,0 +64,1 @@\n+    private static CountDownLatch dragLatch = new CountDownLatch(2);\n@@ -72,1 +78,2 @@\n-                dragExitCalled = true;\n+                System.out.println(\"Drag Exit\");\n+                dragLatch.countDown();\n@@ -77,5 +84,12 @@\n-                Panel newDropTarget = new Panel();\n-                newDropTarget.setDropTarget(new DropTarget());\n-                newDropTarget.setBackground(Color.red);\n-                newDropTarget.setBounds(0, 0, FRAME_SIZE, FRAME_SIZE);\n-                dragSource.add(newDropTarget);\n+                Panel newDropTargetPanel = new Panel();\n+                final DropTarget dropTarget = new DropTarget(null,new DropTargetAdapter() {\n+                    @Override\n+                    public void drop(DropTargetDropEvent dtde) {\n+                        System.out.println(\"Drop complete\");\n+                        dragLatch.countDown();\n+                    }\n+                });\n+                newDropTargetPanel.setDropTarget(dropTarget);\n+                newDropTargetPanel.setBackground(Color.red);\n+                newDropTargetPanel.setSize(FRAME_SIZE, FRAME_SIZE);\n+                dragSource.add(newDropTargetPanel);\n@@ -87,0 +101,1 @@\n+        f.setAlwaysOnTop(true);\n@@ -107,2 +122,1 @@\n-\n-            if (!dragExitCalled) {\n+            if(!dragLatch.await(10, TimeUnit.SECONDS)) {\n","filename":"jdk\/test\/java\/awt\/dnd\/DropTargetEnterExitTest\/MissedDragExitTest.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import test.java.awt.regtesthelpers.Util;\n+\n@@ -35,0 +37,1 @@\n+import java.awt.Dimension;\n@@ -36,0 +39,1 @@\n+import java.awt.Rectangle;\n@@ -37,0 +41,1 @@\n+import java.awt.Toolkit;\n@@ -46,1 +51,6 @@\n-\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.imageio.ImageIO;\n@@ -51,2 +61,0 @@\n-import test.java.awt.regtesthelpers.Util;\n-\n@@ -61,1 +69,2 @@\n-    private static int SIZE = 300;\n+    private static int SIZE = 100;\n+    private static CountDownLatch dropCompleteLatch = new CountDownLatch(1);\n@@ -65,1 +74,1 @@\n-\n+        frame.setUndecorated(true);\n@@ -72,1 +81,1 @@\n-        jta.setFont(jta.getFont().deriveFont(150f));\n+        jta.setFont(jta.getFont().deriveFont(50f));\n@@ -78,0 +87,2 @@\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n@@ -94,3 +105,4 @@\n-\n-            final Point inside = new Point(frame.getLocationOnScreen());\n-            inside.translate(20, SIZE \/ 2);\n+            final AtomicReference<Point> insidePoint = new AtomicReference<>();\n+            SwingUtilities.invokeAndWait(() -> insidePoint.set(frame.getLocationOnScreen()));\n+            final Point inside = insidePoint.get();\n+            inside.translate(2,20);\n@@ -98,1 +110,1 @@\n-            outer.translate(-40, 0);\n+            outer.translate(-20, 0);\n@@ -100,1 +112,1 @@\n-            r.mousePress(InputEvent.BUTTON1_MASK);\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n@@ -107,1 +119,1 @@\n-                r.mouseRelease(InputEvent.BUTTON1_MASK);\n+                r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -109,1 +121,0 @@\n-            sleep(r);\n@@ -111,2 +122,13 @@\n-            if (FAILED || !MOUSE_ENTERED || !MOUSE_ENTERED_DT || !MOUSE_EXIT\n-                    || !MOUSE_EXIT_TD) {\n+            if (!dropCompleteLatch.await(10, TimeUnit.SECONDS)) {\n+                captureScreen(r);\n+                throw new RuntimeException(\n+                        \"Waited too long, but the drop is not completed\");\n+            }\n+            if (FAILED || !MOUSE_ENTERED || !MOUSE_ENTERED_DT || !MOUSE_EXIT ||\n+                !MOUSE_EXIT_TD) {\n+                System.out.println(\n+                        \"Events, FAILED = \" + FAILED + \", MOUSE_ENTERED = \" +\n+                        MOUSE_ENTERED + \", MOUSE_ENTERED_DT = \" +\n+                        MOUSE_ENTERED_DT + \", MOUSE_EXIT = \" + MOUSE_EXIT +\n+                        \", MOUSE_EXIT_TD = \" + MOUSE_EXIT_TD);\n+                captureScreen(r);\n@@ -122,1 +144,2 @@\n-    private static void sleep(Robot robot) {\n+    private static void captureScreen(Robot r) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n@@ -124,2 +147,4 @@\n-            Thread.sleep(10000);\n-        } catch (InterruptedException ignored) {\n+            ImageIO.write(r.createScreenCapture(\n+                    new Rectangle(0, 0, screenSize.width, screenSize.height)),\n+                          \"png\", new File(\"FailedScreenImage.png\"));\n+        } catch (IOException ignore) {\n@@ -127,1 +152,0 @@\n-        robot.waitForIdle();\n@@ -142,4 +166,0 @@\n-            try {\n-                Thread.sleep(10000); \/\/ we should have time to leave a component\n-            } catch (InterruptedException ignored) {\n-            }\n@@ -164,0 +184,1 @@\n+            System.out.println(\"Drag exit\");\n@@ -173,0 +194,2 @@\n+            System.out.println(\"Drop complete\");\n+            dropCompleteLatch.countDown();\n@@ -192,0 +215,1 @@\n+            System.out.println( \"Mouse exit\");\n","filename":"jdk\/test\/java\/awt\/dnd\/MissingDragExitEventTest\/MissingDragExitEventTest.java","additions":47,"deletions":23,"binary":false,"changes":70,"status":"modified"}]}