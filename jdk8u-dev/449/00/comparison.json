{"files":[{"patch":"@@ -393,9 +393,0 @@\n-\n-void VM_Version::get_cpu_info_wrapper() {\n-  get_cpu_info_stub(&_cpuid_info);\n-}\n-\n-#ifndef CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED\n-  #define CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(f) f()\n-#endif\n-\n@@ -415,3 +406,1 @@\n-    \/\/ Some platforms (like Win*) need a wrapper around here\n-    \/\/ in order to properly handle SEGV for YMM registers test.\n-    CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(get_cpu_info_wrapper);\n+    get_cpu_info_stub(&_cpuid_info);\n","filename":"hotspot\/src\/cpu\/x86\/vm\/vm_version_x86.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2873,11 +2873,0 @@\n-void os::win32::call_test_func_with_wrapper(void (*funcPtr)(void)) {\n-  \/\/ Install a win32 structured exception handler around the test\n-  \/\/ function call so the VM can generate an error dump if needed.\n-  __try {\n-    (*funcPtr)();\n-  } __except(topLevelExceptionFilter(\n-             (_EXCEPTION_POINTERS*)_exception_info())) {\n-    \/\/ Nothing to do.\n-  }\n-}\n-\n","filename":"hotspot\/src\/os\/windows\/vm\/os_windows.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-  static void call_test_func_with_wrapper(void (*funcPtr)(void));\n-\n","filename":"hotspot\/src\/os\/windows\/vm\/os_windows.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2015, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,3 +99,0 @@\n-#define CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(f) \\\n-        os::win32::call_test_func_with_wrapper(f)\n-\n","filename":"hotspot\/src\/os\/windows\/vm\/os_windows.inline.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -100,0 +100,3 @@\n+#ifdef _WIN32\n+extern LONG WINAPI topLevelExceptionFilter(_EXCEPTION_POINTERS* );\n+#endif\n@@ -5189,1 +5192,1 @@\n-_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n+static jint JNI_CreateJavaVM_inner(JavaVM **vm, void **penv, void *args) {\n@@ -5193,2 +5196,1 @@\n-  HOTSPOT_JNI_CREATEJAVAVM_ENTRY(\n-                                 (void **) vm, penv, args);\n+  HOTSPOT_JNI_CREATEJAVAVM_ENTRY((void **) vm, penv, args);\n@@ -5266,4 +5268,0 @@\n-  #ifndef CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED\n-    #define CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(f) f()\n-  #endif\n-\n@@ -5276,2 +5274,2 @@\n-    CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(test_error_handler);\n-    CALL_TEST_FUNC_WITH_WRAPPER_IF_NEEDED(execute_internal_vm_tests);\n+    test_error_handler();\n+    execute_internal_vm_tests();\n@@ -5297,0 +5295,16 @@\n+\n+}\n+\n+_JNI_IMPORT_OR_EXPORT_ jint JNICALL JNI_CreateJavaVM(JavaVM **vm, void **penv, void *args) {\n+  jint result = 0;\n+  \/\/ On Windows, let CreateJavaVM run with SEH protection\n+#ifdef _WIN32\n+  __try {\n+#endif\n+    result = JNI_CreateJavaVM_inner(vm, penv, args);\n+#ifdef _WIN32\n+  } __except(topLevelExceptionFilter((_EXCEPTION_POINTERS*)_exception_info())) {\n+    \/\/ Nothing to do.\n+  }\n+#endif\n+  return result;\n","filename":"hotspot\/src\/share\/vm\/prims\/jni.cpp","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"}]}