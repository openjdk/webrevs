{"files":[{"patch":"@@ -1,398 +0,0 @@\n-#!\/bin\/sh\n-#\n-# Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# Shell script for a fast parallel forest\/trees command\n-\n-usage() {\n-      echo \"usage: $0 [-h|--help] [-q|--quiet] [-v|--verbose] [-s|--sequential] [--] <command> [commands...]\" > ${status_output}\n-      echo \"Environment variables which modify behaviour:\"\n-      echo \"   HGFOREST_QUIET      : (boolean) If 'true' then standard output is redirected to \/dev\/null\"\n-      echo \"   HGFOREST_VERBOSE    : (boolean) If 'true' then Mercurial asked to produce verbose output\"\n-      echo \"   HGFOREST_SEQUENTIAL : (boolean) If 'true' then repos are processed sequentially. Disables concurrency\"\n-      echo \"   HGFOREST_GLOBALOPTS : (string, must begin with space) Additional Mercurial global options\"\n-      echo \"   HGFOREST_REDIRECT   : (file path) Redirect standard output to specified file\"\n-      echo \"   HGFOREST_FIFOS      : (boolean) Default behaviour for FIFO detection. Does not override FIFOs disabled\"\n-      echo \"   HGFOREST_CONCURRENCY: (positive integer) Number of repos to process concurrently\"\n-      echo \"   HGFOREST_DEBUG      : (boolean) If 'true' then temp files are retained\"\n-      exit 1\n-}\n-\n-global_opts=\"${HGFOREST_GLOBALOPTS:-}\"\n-status_output=\"${HGFOREST_REDIRECT:-\/dev\/stdout}\"\n-qflag=\"${HGFOREST_QUIET:-false}\"\n-vflag=\"${HGFOREST_VERBOSE:-false}\"\n-sflag=\"${HGFOREST_SEQUENTIAL:-false}\"\n-while [ $# -gt 0 ]\n-do\n-  case $1 in\n-    -h | --help )\n-      usage\n-      ;;\n-\n-    -q | --quiet )\n-      qflag=\"true\"\n-      ;;\n-\n-    -v | --verbose )\n-      vflag=\"true\"\n-      ;;\n-\n-    -s | --sequential )\n-      sflag=\"true\"\n-      ;;\n-\n-    '--' ) # no more options\n-      shift; break\n-      ;;\n-\n-    -*)  # bad option\n-      usage\n-      ;;\n-\n-     * )  # non option\n-      break\n-      ;;\n-  esac\n-  shift\n-done\n-\n-# silence standard output?\n-if [ ${qflag} = \"true\" ] ; then\n-  global_opts=\"${global_opts} -q\"\n-  status_output=\"\/dev\/null\"\n-fi\n-\n-# verbose output?\n-if [ ${vflag} = \"true\" ] ; then\n-  global_opts=\"${global_opts} -v\"\n-fi\n-\n-# Make sure we have a command.\n-if [ $# -lt 1 -o -z \"${1:-}\" ] ; then\n-  echo \"ERROR: No command to hg supplied!\"\n-  usage\n-fi\n-\n-command=\"$1\"; shift\n-command_args=\"${@:-}\"\n-\n-# Clean out the temporary directory that stores the pid files.\n-tmp=\/tmp\/forest.$$\n-rm -f -r ${tmp}\n-mkdir -p ${tmp}\n-\n-\n-if [ \"${HGFOREST_DEBUG:-false}\" = \"true\" ] ; then\n-  echo \"DEBUG: temp files are in: ${tmp}\"\n-fi\n-\n-# Check if we can use fifos for monitoring sub-process completion.\n-echo \"1\" > ${tmp}\/read\n-while_subshell=1\n-while read line; do\n-  while_subshell=0\n-  break;\n-done < ${tmp}\/read\n-rm ${tmp}\/read\n-\n-on_windows=`uname -s | egrep -ic -e 'cygwin|msys'`\n-\n-if [ ${while_subshell} = \"1\" -o ${on_windows} = \"1\" ]; then\n-  # cygwin has (2014-04-18) broken (single writer only) FIFOs\n-  # msys has (2014-04-18) no FIFOs.\n-  # older shells create a sub-shell for redirect to while\n-  have_fifos=\"false\"\n-else\n-  have_fifos=\"${HGFOREST_FIFOS:-true}\"\n-fi\n-\n-safe_interrupt () {\n-  if [ -d ${tmp} ]; then\n-    if [ \"`ls ${tmp}\/*.pid`\" != \"\" ]; then\n-      echo \"Waiting for processes ( `cat ${tmp}\/.*.pid ${tmp}\/*.pid 2> \/dev\/null | tr '\\n' ' '`) to terminate nicely!\" > ${status_output}\n-      sleep 1\n-      # Pipe stderr to dev\/null to silence kill, that complains when trying to kill\n-      # a subprocess that has already exited.\n-      kill -TERM `cat ${tmp}\/*.pid | tr '\\n' ' '` 2> \/dev\/null\n-      wait\n-      echo \"Interrupt complete!\" > ${status_output}\n-    fi\n-    rm -f -r ${tmp}\n-  fi\n-  exit 130\n-}\n-\n-nice_exit () {\n-  if [ -d ${tmp} ]; then\n-    if [ \"`ls -A ${tmp} 2> \/dev\/null`\" != \"\" ]; then\n-      wait\n-    fi\n-    if [ \"${HGFOREST_DEBUG:-false}\" != \"true\" ] ; then\n-      rm -f -r ${tmp}\n-    fi\n-  fi\n-}\n-\n-trap 'safe_interrupt' INT QUIT\n-trap 'nice_exit' EXIT\n-\n-subrepos=\"corba jaxp jaxws langtools jdk hotspot nashorn\"\n-subrepos_extra=\"jdk\/src\/closed jdk\/make\/closed jdk\/test\/closed hotspot\/make\/closed hotspot\/src\/closed hotspot\/test\/closed deploy install sponsors pubs\"\n-\n-# Only look in specific locations for possible forests (avoids long searches)\n-pull_default=\"\"\n-repos=\"\"\n-repos_extra=\"\"\n-if [ \"${command}\" = \"clone\" -o \"${command}\" = \"fclone\" -o \"${command}\" = \"tclone\" ] ; then\n-  # we must be a clone\n-  if [ ! -f .hg\/hgrc ] ; then\n-    echo \"ERROR: Need initial repository to use this script\" > ${status_output}\n-    exit 1\n-  fi\n-\n-  # the clone must know where it came from (have a default pull path).\n-  pull_default=`hg paths default`\n-  if [ \"${pull_default}\" = \"\" ] ; then\n-    echo \"ERROR: Need initial clone with 'hg paths default' defined\" > ${status_output}\n-    exit 1\n-  fi\n-\n-  # determine which sub repos need to be cloned.\n-  for i in ${subrepos} ; do\n-    if [ ! -f ${i}\/.hg\/hgrc ] ; then\n-      repos=\"${repos} ${i}\"\n-    fi\n-  done\n-\n-  pull_default_tail=`echo ${pull_default} | sed -e 's@^.*:\/\/[^\/]*\/\\(.*\\)@\\1@'`\n-\n-  if [ -n \"${command_args}\" ] ; then\n-    # if there is an \"extra sources\" path then reparent \"extra\" repos to that path\n-    if [ \"x${pull_default}\" = \"x${pull_default_tail}\" ] ; then\n-      echo \"ERROR: Need initial clone from non-local source\" > ${status_output}\n-      exit 1\n-    fi\n-    pull_extra=\"${command_args}\/${pull_default_tail}\"\n-\n-    # determine which extra subrepos need to be cloned.\n-    for i in ${subrepos_extra} ; do\n-      if [ ! -f ${i}\/.hg\/hgrc ] ; then\n-        repos_extra=\"${repos_extra} ${i}\"\n-      fi\n-    done\n-  else\n-    if [ \"x${pull_default}\" = \"x${pull_default_tail}\" ] ; then\n-      # local source repo. Clone the \"extra\" subrepos that exist there.\n-      for i in ${subrepos_extra} ; do\n-        if [ -f ${pull_default}\/${i}\/.hg\/hgrc -a ! -f ${i}\/.hg\/hgrc ] ; then\n-          # sub-repo there in source but not here\n-          repos_extra=\"${repos_extra} ${i}\"\n-        fi\n-      done\n-    fi\n-  fi\n-\n-  # Any repos to deal with?\n-  if [ \"${repos}\" = \"\" -a \"${repos_extra}\" = \"\" ] ; then\n-    echo \"No repositories to process.\" > ${status_output}\n-    exit\n-  fi\n-\n-  # Repos to process concurrently. Clone does better with low concurrency.\n-  at_a_time=\"${HGFOREST_CONCURRENCY:-2}\"\n-else\n-  # Process command for all of the present repos\n-  for i in . ${subrepos} ${subrepos_extra} ; do\n-    if [ -d ${i}\/.hg ] ; then\n-      repos=\"${repos} ${i}\"\n-    fi\n-  done\n-\n-  # Any repos to deal with?\n-  if [ \"${repos}\" = \"\" ] ; then\n-    echo \"No repositories to process.\" > ${status_output}\n-    exit\n-  fi\n-\n-  # any of the repos locked?\n-  locked=\"\"\n-  for i in ${repos} ; do\n-    if [ -h ${i}\/.hg\/store\/lock -o -f ${i}\/.hg\/store\/lock ] ; then\n-      locked=\"${i} ${locked}\"\n-    fi\n-  done\n-  if [ \"${locked}\" != \"\" ] ; then\n-    echo \"ERROR: These repositories are locked: ${locked}\" > ${status_output}\n-    exit 1\n-  fi\n-\n-  # Repos to process concurrently.\n-  at_a_time=\"${HGFOREST_CONCURRENCY:-8}\"\n-fi\n-\n-# Echo out what repositories we do a command on.\n-echo \"# Repositories: ${repos} ${repos_extra}\" > ${status_output}\n-\n-if [ \"${command}\" = \"serve\" ] ; then\n-  # \"serve\" is run for all the repos as one command.\n-  (\n-    (\n-      cwd=`pwd`\n-      serving=`basename ${cwd}`\n-      (\n-        echo \"[web]\"\n-        echo \"description = ${serving}\"\n-        echo \"allow_push = *\"\n-        echo \"push_ssl = False\"\n-\n-        echo \"[paths]\"\n-        for i in ${repos} ; do\n-          if [ \"${i}\" != \".\" ] ; then\n-            echo \"\/${serving}\/${i} = ${i}\"\n-          else\n-            echo \"\/${serving} = ${cwd}\"\n-          fi\n-        done\n-      ) > ${tmp}\/serve.web-conf\n-\n-      echo \"serving root repo ${serving}\" > ${status_output}\n-\n-      echo \"hg${global_opts} serve\" > ${status_output}\n-      (PYTHONUNBUFFERED=true hg${global_opts} serve -A ${status_output} -E ${status_output} --pid-file ${tmp}\/serve.pid --web-conf ${tmp}\/serve.web-conf; echo \"$?\" > ${tmp}\/serve.pid.rc ) 2>&1 &\n-    ) 2>&1 | sed -e \"s@^@serve:   @\" > ${status_output}\n-  ) &\n-else\n-  # Run the supplied command on all repos in parallel.\n-\n-  # n is the number of subprocess started or which might still be running.\n-  n=0\n-  if [ ${have_fifos} = \"true\" ]; then\n-    # if we have fifos use them to detect command completion.\n-    mkfifo ${tmp}\/fifo\n-    exec 3<>${tmp}\/fifo\n-  fi\n-\n-  # iterate over all of the subrepos.\n-  for i in ${repos} ${repos_extra} ; do\n-    n=`expr ${n} '+' 1`\n-    repopidfile=`echo ${i} | sed -e 's@.\/@@' -e 's@\/@_@g'`\n-    reponame=`echo ${i} | sed -e :a -e 's\/^.\\{1,20\\}$\/ &\/;ta'`\n-    pull_base=\"${pull_default}\"\n-\n-    # regular repo or \"extra\" repo?\n-    for j in ${repos_extra} ; do\n-      if [ \"${i}\" = \"${j}\" ] ; then\n-        # it's an \"extra\"\n-        pull_base=\"${pull_extra}\"\n-      fi\n-    done\n-\n-    # remove trailing slash\n-    pull_base=\"`echo ${pull_base} | sed -e 's@[\/]*$@@'`\"\n-\n-    # execute the command on the subrepo\n-    (\n-      (\n-        if [ \"${command}\" = \"clone\" -o \"${command}\" = \"fclone\" -o \"${command}\" = \"tclone\" ] ; then\n-          # some form of clone\n-          clone_newrepo=\"${pull_base}\/${i}\"\n-          parent_path=\"`dirname ${i}`\"\n-          if [ \"${parent_path}\" != \".\" ] ; then\n-            times=0\n-            while [ ! -d \"${parent_path}\" ] ; do  ## nested repo, ensure containing dir exists\n-              if [ \"${sflag}\" = \"true\" ] ; then\n-                # Missing parent is fatal during sequential operation.\n-                echo \"ERROR: Missing parent path: ${parent_path}\" > ${status_output}\n-                exit 1\n-              fi\n-              times=`expr ${times} '+' 1`\n-              if [ `expr ${times} '%' 10` -eq 0 ] ; then\n-                echo \"${parent_path} still not created, waiting...\" > ${status_output}\n-              fi\n-              sleep 5\n-            done\n-          fi\n-          # run the clone command.\n-          echo \"hg${global_opts} clone ${clone_newrepo} ${i}\" > ${status_output}\n-          (PYTHONUNBUFFERED=true hg${global_opts} clone ${clone_newrepo} ${i}; echo \"$?\" > ${tmp}\/${repopidfile}.pid.rc ) 2>&1 &\n-        else\n-          # run the command.\n-          echo \"cd ${i} && hg${global_opts} ${command} ${command_args}\" > ${status_output}\n-          cd ${i} && (PYTHONUNBUFFERED=true hg${global_opts} ${command} ${command_args}; echo \"$?\" > ${tmp}\/${repopidfile}.pid.rc ) 2>&1 &\n-        fi\n-\n-        echo $! > ${tmp}\/${repopidfile}.pid\n-      ) 2>&1 | sed -e \"s@^@${reponame}:   @\" > ${status_output}\n-      # tell the fifo waiter that this subprocess is done.\n-      if [ ${have_fifos} = \"true\" ]; then\n-        echo \"${i}\" >&3\n-      fi\n-    ) &\n-\n-    if [ \"${sflag}\" = \"true\" ] ; then\n-      # complete this task before starting another.\n-      wait\n-    else\n-      if [ \"${have_fifos}\" = \"true\" ]; then\n-        # check on count of running subprocesses and possibly wait for completion\n-        if [ ${n} -ge ${at_a_time} ] ; then\n-          # read will block until there are completed subprocesses\n-          while read repo_done; do\n-            n=`expr ${n} '-' 1`\n-            if [ ${n} -lt ${at_a_time} ] ; then\n-              # we should start more subprocesses\n-              break;\n-            fi\n-          done <&3\n-        fi\n-      else\n-        # Compare completions to starts\n-        completed=\"`(ls -a1 ${tmp}\/*.pid.rc 2> \/dev\/null | wc -l) || echo 0`\"\n-        while [ `expr ${n} '-' ${completed}` -ge ${at_a_time} ] ; do\n-          # sleep a short time to give time for something to complete\n-          sleep 1\n-          completed=\"`(ls -a1 ${tmp}\/*.pid.rc 2> \/dev\/null | wc -l) || echo 0`\"\n-        done\n-      fi\n-    fi\n-  done\n-fi\n-\n-# Wait for all subprocesses to complete\n-wait\n-\n-# Terminate with exit 0 only if all subprocesses were successful\n-ec=0\n-if [ -d ${tmp} ]; then\n-  rcfiles=\"`(ls -a ${tmp}\/*.pid.rc 2> \/dev\/null) || echo ''`\"\n-  for rc in ${rcfiles} ; do\n-    exit_code=`cat ${rc} | tr -d ' \\n\\r'`\n-    if [ \"${exit_code}\" != \"0\" ] ; then\n-      repo=\"`echo ${rc} | sed -e 's@^'${tmp}'@@' -e 's@\/*\\([^\/]*\\)\\.pid\\.rc$@\\1@' -e 's@_@\/@g'`\"\n-      echo \"WARNING: ${repo} exited abnormally (${exit_code})\" > ${status_output}\n-      ec=1\n-    fi\n-  done\n-fi\n-exit ${ec}\n","filename":"common\/bin\/hgforest.sh","additions":0,"deletions":398,"binary":false,"changes":398,"status":"deleted"}]}