{"files":[{"patch":"@@ -4,1 +4,1 @@\n-version=openjdk8u442\n+version=openjdk8u452\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-JDK_UPDATE_VERSION=442\n+JDK_UPDATE_VERSION=452\n","filename":"common\/autoconf\/version-numbers","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1396,21 +1396,0 @@\n-\n-                    \/\/ The next is kind of a hack to keep from escaping in the case\n-                    \/\/ of Shift_JIS and the like.\n-\n-                    \/*\n-                    else if ((ch < m_maxCharacter) && (m_maxCharacter == 0xFFFF)\n-                    && (ch != 160))\n-                    {\n-                    writer.write(ch);  \/\/ no escaping in this case\n-                    }\n-                    else\n-                    *\/\n-                    String outputStringForChar = m_charInfo.getOutputStringForChar(ch);\n-                    if (null != outputStringForChar)\n-                    {\n-                        writer.write(outputStringForChar);\n-                    }\n-                    else if (escapingNotNeeded(ch))\n-                    {\n-                        writer.write(ch); \/\/ no escaping in this case\n-                    }\n@@ -1419,3 +1398,15 @@\n-                        writer.write(\"&#\");\n-                        writer.write(Integer.toString(ch));\n-                        writer.write(';');\n+                        String outputStringForChar = m_charInfo.getOutputStringForChar(ch);\n+                        if (null != outputStringForChar)\n+                        {\n+                            writer.write(outputStringForChar);\n+                        }\n+                        else if (escapingNotNeeded(ch))\n+                        {\n+                            writer.write(ch); \/\/ no escaping in this case\n+                        }\n+                        else\n+                        {\n+                            writer.write(\"&#\");\n+                            writer.write(Integer.toString(ch));\n+                            writer.write(';');\n+                        }\n","filename":"jaxp\/src\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToHTMLStream.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import javax.swing.plaf.metal.MetalLookAndFeel;\n@@ -113,1 +114,1 @@\n-        robot.mouseMove(bLoc.x + b.getWidth() \/ 2, bLoc.y + 5);\n+        robot.mouseMove(bLoc.x + b.getWidth() \/ 2, bLoc.y + b.getHeight() \/ 2);\n@@ -152,1 +153,1 @@\n-    public static void main( String args[] ) throws InterruptedException\n+    public static void main( String args[] ) throws Exception\n@@ -154,0 +155,1 @@\n+        UIManager.setLookAndFeel(new MetalLookAndFeel());\n","filename":"jdk\/test\/java\/awt\/Mixing\/HWDisappear.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2014, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n- * @run shell\/timeout=300 Assert.sh\n+ * @build package1.Class1 package2.Class2 package1.package3.Class3 Assert\n+ * @run main\/othervm Assert\n","filename":"jdk\/test\/java\/lang\/ClassLoader\/Assert.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-#\n-# Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-OS=`uname -s`\n-case \"$OS\" in\n-  SunOS | Linux | Darwin )\n-    FS=\"\/\"\n-    CHMOD=\"${FS}bin${FS}chmod\"\n-    ;;\n-  Windows* | CYGWIN* )\n-    CHMOD=\"chmod\"\n-    ;;\n-  * )\n-    echo \"Unrecognized system!\"\n-    exit 1;\n-    ;;\n-esac\n-\n-if [ \"${TESTSRC}\" = \"\" ]\n-then\n-  echo \"TESTSRC not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTSRC=${TESTSRC}\"\n-if [ \"${TESTJAVA}\" = \"\" ]\n-then\n-  echo \"TESTJAVA not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTJAVA=${TESTJAVA}\"\n-if [ \"${COMPILEJAVA}\" = \"\" ]; then\n-  COMPILEJAVA=\"${TESTJAVA}\"\n-fi\n-echo \"COMPILEJAVA=${COMPILEJAVA}\"\n-if [ \"${TESTCLASSES}\" = \"\" ]\n-then\n-  echo \"TESTCLASSES not set.  Test cannot execute.  Failed.\"\n-  exit 1\n-fi\n-echo \"TESTCLASSES=${TESTCLASSES}\"\n-echo \"CLASSPATH=${CLASSPATH}\"\n-\n-cp ${TESTSRC}\/Assert.java .\n-cp -R ${TESTSRC}\/package1 .\n-cp -R ${TESTSRC}\/package2 .\n-${CHMOD} -R u+w *\n-\n-${COMPILEJAVA}\/bin\/javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} Assert.java \n-\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} Assert\n-\n-result=$?\n-if [ $result -eq 0 ]\n-then\n-  echo \"Passed\"\n-else\n-  echo \"Failed\"\n-fi\n-exit $result\n-\n-\n","filename":"jdk\/test\/java\/lang\/ClassLoader\/Assert.sh","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+\/*\n+ * @test\n+ * @bug 8268457\n+ * @run main\/othervm SurrogateTest\n+ * @summary XML Transformer outputs Unicode supplementary character incorrectly to HTML\n+ *\/\n+public class SurrogateTest {\n+\n+    final static String TEST_SRC = System.getProperty(\"test.src\", \".\");\n+\n+    public void toHTMLTest() throws Exception {\n+        String out = \"SurrogateTest1out.html\";\n+        String expected = TEST_SRC + File.separator + \"SurrogateTest1.html\";\n+        String xsl = TEST_SRC + File.separator + \"SurrogateTest1.xsl\";\n+\n+        try (FileInputStream tFis = new FileInputStream(xsl);\n+            InputStream fis = this.getClass().getResourceAsStream(\"SurrogateTest1.xml\");\n+            FileOutputStream fos = new FileOutputStream(out)) {\n+\n+            Source tSrc = new StreamSource(tFis);\n+            TransformerFactory tf = TransformerFactory.newInstance();\n+            Transformer t = tf.newTransformer(tSrc);\n+            t.setOutputProperty(\"method\", \"html\");\n+\n+            Source src = new StreamSource(fis);\n+            Result res = new StreamResult(fos);\n+            t.transform(src, res);\n+        }\n+        compareWithGold(expected, out);\n+    }\n+\n+    public void handlerTest() throws Exception {\n+        File xmlFile = new File(TEST_SRC, \"SurrogateTest2.xml\");\n+        SAXParserFactory spf = SAXParserFactory.newInstance();\n+        spf.setNamespaceAware(true);\n+        SAXParser sp = spf.newSAXParser();\n+        TestHandler th = new TestHandler();\n+        sp.parse(xmlFile, th);\n+        compareStringWithGold(TEST_SRC + File.separator + \"SurrogateTest2.txt\", th.sb.toString());\n+    }\n+\n+    private static class TestHandler extends DefaultHandler {\n+        private StringBuilder sb = new StringBuilder();\n+\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n+            sb.append( localName + \"@attr:\" + attributes.getValue(\"attr\") + '\\n');\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SurrogateTest test = new SurrogateTest();\n+        test.toHTMLTest();\n+        test.handlerTest();\n+    }\n+\n+    \/\/ Compare contents of golden file with test output file line by line.\n+    public static boolean compareWithGold(String goldfile, String outputfile)\n+            throws IOException {\n+        return compareWithGold(goldfile, outputfile, StandardCharsets.UTF_8);\n+    }\n+\n+    \/\/ Compare contents of golden file with test output file line by line.\n+    public static boolean compareWithGold(String goldfile, String outputfile,\n+             Charset cs) throws IOException {\n+        boolean isSame = Files.readAllLines(Paths.get(goldfile)).\n+                equals(Files.readAllLines(Paths.get(outputfile), cs));\n+        if (!isSame) {\n+            System.err.println(\"Golden file \" + goldfile + \" :\");\n+            Files.readAllLines(Paths.get(goldfile)).forEach(System.err::println);\n+            System.err.println(\"Output file \" + outputfile + \" :\");\n+            Files.readAllLines(Paths.get(outputfile), cs).forEach(System.err::println);\n+        }\n+        return isSame;\n+    }\n+\n+    \/\/ Compare contents of golden file with a test output string.\n+    public static boolean compareStringWithGold(String goldfile, String string)\n+            throws IOException {\n+        return Files.readAllLines(Paths.get(goldfile)).stream().collect(\n+                Collectors.joining(System.getProperty(\"line.separator\")))\n+                .equals(string);\n+    }\n+}\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<!DOCTYPE html PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<META http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\r\n+<META http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\r\n+<\/head>\r\n+<body>\r\n+<form>\r\n+<input id=\"tag1\" value=\"𠮟\">\r\n+<\/form>\r\n+<\/body>\r\n+<\/html>\r\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest1.html","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+    <tag1>𠮟<\/tag1>\n+<\/root>\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest1.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n+<xsl:stylesheet xmlns:xsl=\"http:\/\/www.w3.org\/1999\/XSL\/Transform\" version=\"1.0\">\r\n+  <xsl:output doctype-public=\"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\"\r\n+   doctype-system=\"http:\/\/www.w3.org\/TR\/html4\/loose.dtd\"\r\n+   encoding=\"UTF-8\" indent=\"yes\" method=\"html\" omit-xml-declaration=\"yes\"\/>\r\n+  <xsl:template match=\"\/\">\r\n+    <html>\r\n+      <head>\r\n+        <META http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\"\/>\r\n+      <\/head>\r\n+      <body>\r\n+        <xsl:for-each select=\"root\">\r\n+          <form>\r\n+            <xsl:for-each select=\"tag1\">\r\n+              <input id=\"tag1\">\r\n+                <xsl:attribute name=\"value\">\r\n+                  <xsl:value-of select=\".\"\/>\r\n+                <\/xsl:attribute>\r\n+              <\/input>\r\n+            <\/xsl:for-each>\r\n+          <\/form>\r\n+        <\/xsl:for-each>\r\n+      <\/body>\r\n+    <\/html>\r\n+  <\/xsl:template>\r\n+<\/xsl:stylesheet>\r\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest1.xsl","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+root@attr:null\n+tag1@attr:𠮟\n+tag2@attr:𠀋\n+tag3@attr:𣱿\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest2.txt","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<root>\n+    <tag1 attr=\"𠮟\"\/>\n+    <tag2 attr=\"𠀋\"\/>\n+    <tag3 attr=\"𣱿\"\/>\n+<\/root>\n","filename":"jdk\/test\/javax\/xml\/jaxp\/transform\/8268457\/SurrogateTest2.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n- * @run main CrashNaNTest\n+ * @run main\/othervm -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine CrashNaNTest\n","filename":"jdk\/test\/sun\/java2d\/marlin\/CrashNaNTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n- * @run main CrashPaintTest\n+ * @run main\/othervm -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine CrashPaintTest\n","filename":"jdk\/test\/sun\/java2d\/marlin\/CrashPaintTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * @run main\/othervm -mx512m CrashTest\n+ * @run main\/othervm -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine -mx512m CrashTest\n@@ -40,1 +40,1 @@\n- * @run main\/othervm -ms4g -mx4g CrashTest -slow\n+ * @run main\/othervm -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine -ms4g -mx4g CrashTest -slow\n","filename":"jdk\/test\/sun\/java2d\/marlin\/CrashTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n- * @run main TextClipErrorTest\n+ * @run main\/othervm -Dsun.java2d.renderer=sun.java2d.marlin.MarlinRenderingEngine TextClipErrorTest\n","filename":"jdk\/test\/sun\/java2d\/marlin\/TextClipErrorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}