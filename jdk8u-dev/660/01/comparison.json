{"files":[{"patch":"@@ -123,1 +123,1 @@\n-    private static StringBuffer otherCurrencies = new StringBuffer();\n+    private static String[] otherCurrencies = new String[maxOtherCurrencies];\n@@ -326,4 +326,1 @@\n-                if (otherCurrencies.length() > 0) {\n-                    otherCurrencies.append('-');\n-                }\n-                otherCurrencies.append(currencyCode);\n+                otherCurrencies[otherCurrenciesCount] = currencyCode;\n@@ -358,7 +355,1 @@\n-        writeLongArray(specialCaseCutOverTimes, specialCaseCount);\n-        writeStringArray(specialCaseOldCurrencies, specialCaseCount);\n-        writeStringArray(specialCaseNewCurrencies, specialCaseCount);\n-        writeIntArray(specialCaseOldCurrenciesDefaultFractionDigits, specialCaseCount);\n-        writeIntArray(specialCaseNewCurrenciesDefaultFractionDigits, specialCaseCount);\n-        writeIntArray(specialCaseOldCurrenciesNumericCode, specialCaseCount);\n-        writeIntArray(specialCaseNewCurrenciesNumericCode, specialCaseCount);\n+        writeSpecialCaseEntries();\n@@ -366,3 +357,1 @@\n-        out.writeUTF(otherCurrencies.toString());\n-        writeIntArray(otherCurrenciesDefaultFractionDigits, otherCurrenciesCount);\n-        writeIntArray(otherCurrenciesNumericCode, otherCurrenciesCount);\n+        writeOtherCurrencies();\n@@ -372,1 +361,1 @@\n-        for (int i = 0; i < count; i ++) {\n+        for (int i = 0; i < count; i++) {\n@@ -377,3 +366,13 @@\n-    private static void writeLongArray(long[] la, int count) throws IOException  {\n-        for (int i = 0; i < count; i ++) {\n-            out.writeLong(la[i]);\n+    private static void writeSpecialCaseEntries() throws IOException {\n+        for (int index = 0; index < specialCaseCount; index++) {\n+            out.writeLong(specialCaseCutOverTimes[index]);\n+            String str = (specialCaseOldCurrencies[index] != null)\n+                    ? specialCaseOldCurrencies[index] : \"\";\n+            out.writeUTF(str);\n+            str = (specialCaseNewCurrencies[index] != null)\n+                    ? specialCaseNewCurrencies[index] : \"\";\n+            out.writeUTF(str);\n+            out.writeInt(specialCaseOldCurrenciesDefaultFractionDigits[index]);\n+            out.writeInt(specialCaseNewCurrenciesDefaultFractionDigits[index]);\n+            out.writeInt(specialCaseOldCurrenciesNumericCode[index]);\n+            out.writeInt(specialCaseNewCurrenciesNumericCode[index]);\n@@ -383,3 +382,4 @@\n-    private static void writeStringArray(String[] sa, int count) throws IOException  {\n-        for (int i = 0; i < count; i ++) {\n-            String str = (sa[i] != null) ? sa[i] : \"\";\n+    private static void writeOtherCurrencies() throws IOException {\n+        for (int index = 0; index < otherCurrenciesCount; index++) {\n+            String str = (otherCurrencies[index] != null)\n+                    ? otherCurrencies[index] : \"\";\n@@ -387,0 +387,2 @@\n+            out.writeInt(otherCurrenciesDefaultFractionDigits[index]);\n+            out.writeInt(otherCurrenciesNumericCode[index]);\n@@ -389,0 +391,1 @@\n+\n","filename":"jdk\/make\/src\/classes\/build\/tools\/generatecurrencydata\/GenerateCurrencyData.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -150,13 +150,1 @@\n-    \/\/   - other: index into sc* arrays + 1\n-    \/\/ - scCutOverTimes: cut-over time in millis as returned by\n-    \/\/   System.currentTimeMillis for special case countries that are changing\n-    \/\/   currencies; Long.MAX_VALUE for countries that are not changing currencies\n-    \/\/ - scOldCurrencies: old currencies for special case countries\n-    \/\/ - scNewCurrencies: new currencies for special case countries that are\n-    \/\/   changing currencies; null for others\n-    \/\/ - scOldCurrenciesDFD: default fraction digits for old currencies\n-    \/\/ - scNewCurrenciesDFD: default fraction digits for new currencies, 0 for\n-    \/\/   countries that are not changing currencies\n-    \/\/ - otherCurrencies: concatenation of all currency codes that are not the\n-    \/\/   main currency of a simple country, separated by \"-\"\n-    \/\/ - otherCurrenciesDFD: decimal format digits for currencies in otherCurrencies, same order\n+    \/\/   - other: index into specialCasesList\n@@ -167,10 +155,2 @@\n-    static long[] scCutOverTimes;\n-    static String[] scOldCurrencies;\n-    static String[] scNewCurrencies;\n-    static int[] scOldCurrenciesDFD;\n-    static int[] scNewCurrenciesDFD;\n-    static int[] scOldCurrenciesNumericCode;\n-    static int[] scNewCurrenciesNumericCode;\n-    static String otherCurrencies;\n-    static int[] otherCurrenciesDFD;\n-    static int[] otherCurrenciesNumericCode;\n+    static List<SpecialCaseEntry> specialCasesList;\n+    static List<OtherCurrencyEntry> otherCurrenciesList;\n@@ -211,1 +191,1 @@\n-    private static final int VALID_FORMAT_VERSION = 2;\n+    private static final int VALID_FORMAT_VERSION = 3;\n@@ -234,7 +214,1 @@\n-                        scCutOverTimes = readLongArray(dis, scCount);\n-                        scOldCurrencies = readStringArray(dis, scCount);\n-                        scNewCurrencies = readStringArray(dis, scCount);\n-                        scOldCurrenciesDFD = readIntArray(dis, scCount);\n-                        scNewCurrenciesDFD = readIntArray(dis, scCount);\n-                        scOldCurrenciesNumericCode = readIntArray(dis, scCount);\n-                        scNewCurrenciesNumericCode = readIntArray(dis, scCount);\n+                        specialCasesList = readSpecialCases(dis, scCount);\n@@ -242,3 +216,1 @@\n-                        otherCurrencies = dis.readUTF();\n-                        otherCurrenciesDFD = readIntArray(dis, ocCount);\n-                        otherCurrenciesNumericCode = readIntArray(dis, ocCount);\n+                        otherCurrenciesList = readOtherCurrencies(dis, ocCount);\n@@ -327,0 +299,1 @@\n+            boolean found = false;\n@@ -338,4 +311,7 @@\n-            } else {\n-                \/\/ Check for '-' separately so we don't get false hits in the table.\n-                if (currencyCode.charAt(2) == '-') {\n-                    throw new IllegalArgumentException();\n+                found = true;\n+            } else { \/\/special case\n+                int[] fractionAndNumericCode = SpecialCaseEntry.findEntry(currencyCode);\n+                if (fractionAndNumericCode != null) {\n+                    defaultFractionDigits = fractionAndNumericCode[0];\n+                    numericCode = fractionAndNumericCode[1];\n+                    found = true;\n@@ -343,2 +319,5 @@\n-                int index = otherCurrencies.indexOf(currencyCode);\n-                if (index == -1) {\n+            }\n+\n+            if (!found) {\n+                OtherCurrencyEntry ocEntry = OtherCurrencyEntry.findEntry(currencyCode);\n+                if (ocEntry == null) {\n@@ -347,2 +326,2 @@\n-                defaultFractionDigits = otherCurrenciesDFD[index \/ 4];\n-                numericCode = otherCurrenciesNumericCode[index \/ 4];\n+                defaultFractionDigits = ocEntry.fraction;\n+                numericCode = ocEntry.numericCode;\n@@ -408,4 +387,7 @@\n-                int index = (tableEntry & SPECIAL_CASE_COUNTRY_INDEX_MASK) - SPECIAL_CASE_COUNTRY_INDEX_DELTA;\n-                if (scCutOverTimes[index] == Long.MAX_VALUE || System.currentTimeMillis() < scCutOverTimes[index]) {\n-                    return getInstance(scOldCurrencies[index], scOldCurrenciesDFD[index],\n-                        scOldCurrenciesNumericCode[index]);\n+                int index = SpecialCaseEntry.toIndex(tableEntry);\n+                SpecialCaseEntry scEntry = specialCasesList.get(index);\n+                if (scEntry.cutOverTime == Long.MAX_VALUE\n+                        || System.currentTimeMillis() < scEntry.cutOverTime) {\n+                    return getInstance(scEntry.oldCurrency,\n+                            scEntry.oldCurrencyFraction,\n+                            scEntry.oldCurrencyNumericCode);\n@@ -413,2 +395,3 @@\n-                    return getInstance(scNewCurrencies[index], scNewCurrenciesDFD[index],\n-                        scNewCurrenciesNumericCode[index]);\n+                    return getInstance(scEntry.newCurrency,\n+                            scEntry.newCurrencyFraction,\n+                            scEntry.newCurrencyNumericCode);\n@@ -449,0 +432,16 @@\n+                        } else if ((tableEntry & COUNTRY_TYPE_MASK) == SPECIAL_CASE_COUNTRY_MASK\n+                                && tableEntry != INVALID_COUNTRY_ENTRY\n+                                && tableEntry != COUNTRY_WITHOUT_CURRENCY_ENTRY) {\n+                            int index = SpecialCaseEntry.toIndex(tableEntry);\n+                            SpecialCaseEntry scEntry = specialCasesList.get(index);\n+\n+                            if (scEntry.cutOverTime == Long.MAX_VALUE\n+                                    || System.currentTimeMillis() < scEntry.cutOverTime) {\n+                                available.add(getInstance(scEntry.oldCurrency,\n+                                        scEntry.oldCurrencyFraction,\n+                                        scEntry.oldCurrencyNumericCode));\n+                            } else {\n+                                available.add(getInstance(scEntry.newCurrency,\n+                                        scEntry.newCurrencyFraction,\n+                                        scEntry.newCurrencyNumericCode));\n+                            }\n@@ -454,3 +453,2 @@\n-                StringTokenizer st = new StringTokenizer(otherCurrencies, \"-\");\n-                while (st.hasMoreElements()) {\n-                    available.add(getInstance((String)st.nextElement()));\n+                for (OtherCurrencyEntry entry : otherCurrenciesList) {\n+                    available.add(getInstance(entry.currencyCode));\n@@ -662,2 +660,13 @@\n-    private static long[] readLongArray(DataInputStream dis, int count) throws IOException {\n-        long[] ret = new long[count];\n+    private static List<SpecialCaseEntry> readSpecialCases(DataInputStream dis,\n+            int count)\n+            throws IOException {\n+\n+        List<SpecialCaseEntry> list = new ArrayList<>(count);\n+        long cutOverTime;\n+        String oldCurrency;\n+        String newCurrency;\n+        int oldCurrencyFraction;\n+        int newCurrencyFraction;\n+        int oldCurrencyNumericCode;\n+        int newCurrencyNumericCode;\n+\n@@ -665,1 +674,12 @@\n-            ret[i] = dis.readLong();\n+            cutOverTime = dis.readLong();\n+            oldCurrency = dis.readUTF();\n+            newCurrency = dis.readUTF();\n+            oldCurrencyFraction = dis.readInt();\n+            newCurrencyFraction = dis.readInt();\n+            oldCurrencyNumericCode = dis.readInt();\n+            newCurrencyNumericCode = dis.readInt();\n+            SpecialCaseEntry sc = new SpecialCaseEntry(cutOverTime,\n+                    oldCurrency, newCurrency,\n+                    oldCurrencyFraction, newCurrencyFraction,\n+                    oldCurrencyNumericCode, newCurrencyNumericCode);\n+            list.add(sc);\n@@ -667,2 +687,1 @@\n-\n-        return ret;\n+        return list;\n@@ -671,2 +690,9 @@\n-    private static String[] readStringArray(DataInputStream dis, int count) throws IOException {\n-        String[] ret = new String[count];\n+    private static List<OtherCurrencyEntry> readOtherCurrencies(DataInputStream dis,\n+            int count)\n+            throws IOException {\n+\n+        List<OtherCurrencyEntry> list = new ArrayList<>(count);\n+        String currencyCode;\n+        int fraction;\n+        int numericCode;\n+\n@@ -674,1 +700,7 @@\n-            ret[i] = dis.readUTF();\n+            currencyCode = dis.readUTF();\n+            fraction = dis.readInt();\n+            numericCode = dis.readInt();\n+            OtherCurrencyEntry oc = new OtherCurrencyEntry(currencyCode,\n+                    fraction,\n+                    numericCode);\n+            list.add(oc);\n@@ -676,2 +708,1 @@\n-\n-        return ret;\n+        return list;\n@@ -735,5 +766,11 @@\n-        int index;\n-        for (index = 0; index < scOldCurrencies.length; index++) {\n-            if (scOldCurrencies[index].equals(code)) {\n-                break;\n-            }\n+        int index = SpecialCaseEntry.indexOf(code, fraction, numeric);\n+\n+        \/* if a country switches from simple case to special case or\n+         * one special case to other special case which is not present\n+         * in the sc arrays then insert the new entry in special case arrays\n+         *\/\n+        if (index == -1 && (ctry.charAt(0) != code.charAt(0)\n+                || ctry.charAt(1) != code.charAt(1))) {\n+\n+            specialCasesList.add(new SpecialCaseEntry(code, fraction, numeric));\n+            index = specialCasesList.size() - 1;\n@@ -742,1 +779,1 @@\n-        if (index == scOldCurrencies.length) {\n+        if (index == -1) {\n@@ -744,2 +781,2 @@\n-            entry |= (fraction << SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT) |\n-                     (code.charAt(2) - 'A');\n+            entry |= (fraction << SIMPLE_CASE_COUNTRY_DEFAULT_DIGITS_SHIFT)\n+                    | (code.charAt(2) - 'A');\n@@ -748,2 +785,2 @@\n-            entry |= SPECIAL_CASE_COUNTRY_MASK |\n-                     (index + SPECIAL_CASE_COUNTRY_INDEX_DELTA);\n+            entry = SPECIAL_CASE_COUNTRY_MASK\n+                    | (index + SPECIAL_CASE_COUNTRY_INDEX_DELTA);\n@@ -783,0 +820,122 @@\n+\n+    \/* Used to represent a special case currency entry\n+     * - cutOverTime: cut-over time in millis as returned by\n+     *   System.currentTimeMillis for special case countries that are changing\n+     *   currencies; Long.MAX_VALUE for countries that are not changing currencies\n+     * - oldCurrency: old currencies for special case countries\n+     * - newCurrency: new currencies for special case countries that are\n+     *   changing currencies; null for others\n+     * - oldCurrencyFraction: default fraction digits for old currencies\n+     * - newCurrencyFraction: default fraction digits for new currencies, 0 for\n+     *   countries that are not changing currencies\n+     * - oldCurrencyNumericCode: numeric code for old currencies\n+     * - newCurrencyNumericCode: numeric code for new currencies, 0 for countries\n+     *   that are not changing currencies\n+    *\/\n+    private static class SpecialCaseEntry {\n+\n+        final private long cutOverTime;\n+        final private String oldCurrency;\n+        final private String newCurrency;\n+        final private int oldCurrencyFraction;\n+        final private int newCurrencyFraction;\n+        final private int oldCurrencyNumericCode;\n+        final private int newCurrencyNumericCode;\n+\n+        private SpecialCaseEntry(long cutOverTime, String oldCurrency, String newCurrency,\n+                int oldCurrencyFraction, int newCurrencyFraction,\n+                int oldCurrencyNumericCode, int newCurrencyNumericCode) {\n+            this.cutOverTime = cutOverTime;\n+            this.oldCurrency = oldCurrency;\n+            this.newCurrency = newCurrency;\n+            this.oldCurrencyFraction = oldCurrencyFraction;\n+            this.newCurrencyFraction = newCurrencyFraction;\n+            this.oldCurrencyNumericCode = oldCurrencyNumericCode;\n+            this.newCurrencyNumericCode = newCurrencyNumericCode;\n+        }\n+\n+        private SpecialCaseEntry(String currencyCode, int fraction,\n+                int numericCode) {\n+            this(Long.MAX_VALUE, currencyCode, \"\", fraction, 0, numericCode, 0);\n+        }\n+\n+        \/\/get the index of the special case entry\n+        private static int indexOf(String code, int fraction, int numeric) {\n+            int size = specialCasesList.size();\n+            for (int index = 0; index < size; index++) {\n+                SpecialCaseEntry scEntry = specialCasesList.get(index);\n+                if (scEntry.oldCurrency.equals(code)\n+                        && scEntry.oldCurrencyFraction == fraction\n+                        && scEntry.oldCurrencyNumericCode == numeric\n+                        && scEntry.cutOverTime == Long.MAX_VALUE) {\n+                    return index;\n+                }\n+            }\n+            return -1;\n+        }\n+\n+        \/\/ get the fraction and numericCode of the sc currencycode\n+        private static int[] findEntry(String code) {\n+            int[] fractionAndNumericCode = null;\n+            int size = specialCasesList.size();\n+            for (int index = 0; index < size; index++) {\n+                SpecialCaseEntry scEntry = specialCasesList.get(index);\n+                if (scEntry.oldCurrency.equals(code) && (scEntry.cutOverTime == Long.MAX_VALUE\n+                        || System.currentTimeMillis() < scEntry.cutOverTime)) {\n+                    \/\/consider only when there is no new currency or cutover time is not passed\n+                    fractionAndNumericCode = new int[2];\n+                    fractionAndNumericCode[0] = scEntry.oldCurrencyFraction;\n+                    fractionAndNumericCode[1] = scEntry.oldCurrencyNumericCode;\n+                    break;\n+                } else if (scEntry.newCurrency.equals(code)\n+                        && System.currentTimeMillis() >= scEntry.cutOverTime) {\n+                    \/\/consider only if the cutover time is passed\n+                    fractionAndNumericCode = new int[2];\n+                    fractionAndNumericCode[0] = scEntry.newCurrencyFraction;\n+                    fractionAndNumericCode[1] = scEntry.newCurrencyNumericCode;\n+                    break;\n+                }\n+            }\n+            return fractionAndNumericCode;\n+        }\n+\n+        \/\/ convert the special case entry to sc arrays index\n+        private static int toIndex(int tableEntry) {\n+            return (tableEntry & SPECIAL_CASE_COUNTRY_INDEX_MASK) - SPECIAL_CASE_COUNTRY_INDEX_DELTA;\n+        }\n+\n+    }\n+\n+    \/* Used to represent Other currencies\n+     * - currencyCode: currency codes that are not the main currency\n+     *   of a simple country\n+     * - otherCurrenciesDFD: decimal format digits for other currencies\n+     * - otherCurrenciesNumericCode: numeric code for other currencies\n+     *\/\n+    private static class OtherCurrencyEntry {\n+\n+        final private String currencyCode;\n+        final private int fraction;\n+        final private int numericCode;\n+\n+        private OtherCurrencyEntry(String currencyCode, int fraction,\n+                int numericCode) {\n+            this.currencyCode = currencyCode;\n+            this.fraction = fraction;\n+            this.numericCode = numericCode;\n+        }\n+\n+        \/\/get the instance of the other currency code\n+        private static OtherCurrencyEntry findEntry(String code) {\n+            int size = otherCurrenciesList.size();\n+            for (int index = 0; index < size; index++) {\n+                OtherCurrencyEntry ocEntry = otherCurrenciesList.get(index);\n+                if (ocEntry.currencyCode.equalsIgnoreCase(code)) {\n+                    return ocEntry;\n+                }\n+            }\n+            return null;\n+        }\n+\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/java\/util\/Currency.java","additions":230,"deletions":71,"binary":false,"changes":301,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-formatVersion=2\n+#   3: Change in the order of special case and other currency entries\n+formatVersion=3\n@@ -195,1 +196,1 @@\n-CW=XCG\n+CW=ANG;2025-04-01-04-00-00;XCG\n@@ -510,1 +511,1 @@\n-SX=XCG\n+SX=ANG;2025-04-01-04-00-00;XCG\n","filename":"jdk\/src\/share\/classes\/java\/util\/CurrencyData.properties","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-FILEVERSION=2\n+FILEVERSION=3\n","filename":"jdk\/test\/java\/util\/Currency\/ISO4217-list-one.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.stream.Collectors;\n@@ -35,0 +36,4 @@\n+        } else if (args.length == 1 && args[0].equals(\"bug7102969\")) {\n+            bug7102969();\n+        } else if (args.length == 1 && args[0].equals(\"bug8157138\")) {\n+            bug8157138();\n@@ -38,0 +43,1 @@\n+            System.err.println(\"        java PropertiesTest bug[JBS bug id number] e.g. bug7102969\");\n@@ -177,0 +183,68 @@\n+    private static void bug7102969() {\n+\n+        \/\/ check the correct overriding of special case entries\n+        Currency cur = Currency.getInstance(new Locale(\"\", \"JP\"));\n+        if (!cur.getCurrencyCode().equals(\"ABC\")) {\n+            throw new RuntimeException(\"[Expected: ABC as currency code of JP, found: \"\n+                    + cur.getCurrencyCode() + \"]\");\n+        }\n+\n+        \/* check if the currency instance is returned by\n+         * getAvailableCurrencies() method\n+         *\/\n+        if (!Currency.getAvailableCurrencies().contains(cur)) {\n+            throw new RuntimeException(\"[The Currency instance [\"\n+                    + cur.getCurrencyCode() + \", \"\n+                    + cur.getNumericCode() + \", \"\n+                    + cur.getDefaultFractionDigits()\n+                    + \"] is not available in the currencies list]\");\n+        }\n+\n+    }\n+\n+    private static void bug8157138() {\n+\n+        \/* check the currencies which exist only as a special case are\n+         * accessible i.e. it should not throw IllegalArgumentException\n+         *\/\n+        try {\n+            Currency.getInstance(\"MAD\");\n+        } catch (IllegalArgumentException ex) {\n+            throw new RuntimeException(\"Test Failed: \"\n+                    + \"special case currency instance MAD not found\"\n+                    + \" via Currency.getInstance(\\\"MAD\\\")\");\n+        }\n+\n+        try {\n+            Currency.getInstance(\"ABC\");\n+        } catch (IllegalArgumentException ex) {\n+            throw new RuntimeException(\"Test Failed: \"\n+                    + \"special case currency instance ABC not found\"\n+                    + \" via Currency.getInstance(\\\"ABC\\\")\");\n+        }\n+\n+        \/* check the currency value is returned by getAvailableCurrencies()\n+         * method\n+        *\/\n+        List<Currency> list = Currency.getAvailableCurrencies().stream()\n+                .filter(cur -> cur.getCurrencyCode().equals(\"MAD\"))\n+                .collect(Collectors.toList());\n+\n+        if (list.isEmpty()) {\n+            throw new RuntimeException(\"Test Failed: \"\n+                    + \"special case currency instance MAD not found\"\n+                    + \" in Currency.getAvailableCurrencies() list\");\n+        }\n+\n+        list = Currency.getAvailableCurrencies().stream()\n+                .filter(cur -> cur.getCurrencyCode().equals(\"ABC\"))\n+                .collect(Collectors.toList());\n+\n+        if (list.isEmpty()) {\n+            throw new RuntimeException(\"Test Failed: \"\n+                    + \"special case currency instance ABC not found\"\n+                    + \" in Currency.getAvailableCurrencies() list\");\n+        }\n+\n+    }\n+\n","filename":"jdk\/test\/java\/util\/Currency\/PropertiesTest.java","additions":75,"deletions":1,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-# @bug 6332666 6863624 7180362 8003846 8074350 8074351\n+# @bug 6332666 6863624 7180362 8003846 8074350 8074351 7102969 8157138\n@@ -127,0 +127,10 @@\n+# run bug7102969 test\n+echo ''\n+${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} -cp ${TESTCLASSES} PropertiesTest bug7102969\n+if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n+\n+# run bug8157138 test\n+echo ''\n+${WRITABLEJDK}${FS}bin${FS}java ${TESTVMOPTS} -cp ${TESTCLASSES} PropertiesTest bug8157138\n+if [ $? != 0 ]; then failures=`expr $failures + 1`; fi\n+\n","filename":"jdk\/test\/java\/util\/Currency\/PropertiesTest.sh","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-JP=JPZ,123,2\n+JP=ABC,999,0\n","filename":"jdk\/test\/java\/util\/Currency\/currency.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}