{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.awt.ComponentOrientation;\n@@ -32,0 +31,1 @@\n+import java.util.Enumeration;\n@@ -238,0 +238,24 @@\n+            if (SunToolkit.isInstanceOf(aComponent,\n+                                                 \"javax.swing.JToggleButton\")) {\n+                ButtonModel buttonModel = ((JToggleButton) aComponent).getModel();\n+                if (buttonModel != null && buttonModel instanceof DefaultButtonModel) {\n+                    DefaultButtonModel model = (DefaultButtonModel) buttonModel;\n+                    ButtonGroup group = model.getGroup();\n+                    if (group != null) {\n+                        Enumeration<AbstractButton> elements =\n+                                                        group.getElements();\n+                        int idx = 0;\n+                        while (elements.hasMoreElements()) {\n+                            AbstractButton member = elements.nextElement();\n+                            if (member.isVisible() && member.isDisplayable() &&\n+                                member.isEnabled() && member.isFocusable()) {\n+                                if (member == aComponent) {\n+                                    return idx == 0;\n+                                }\n+                                idx++;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/LayoutFocusTraversalPolicy.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -440,15 +440,1 @@\n-            Component focusBaseComp = activeBtn;\n-            Container container = focusBaseComp.getFocusCycleRootAncestor();\n-            if (container != null) {\n-                FocusTraversalPolicy policy = container.getFocusTraversalPolicy();\n-                Component comp = next ? policy.getComponentAfter(container, activeBtn)\n-                                      : policy.getComponentBefore(container, activeBtn);\n-\n-                \/\/ If next component in the button group, use last\/first button as base focus\n-                \/\/ otherwise, use the activeBtn as the base focus\n-                if (containsInGroup(comp)) {\n-                    focusBaseComp = next ? lastBtn : firstBtn;\n-                }\n-            }\n-\n-            return focusBaseComp;\n+            return firstBtn;\n","filename":"jdk\/src\/share\/classes\/javax\/swing\/plaf\/basic\/BasicRadioButtonUI.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 8154043\n+  @summary Fields not reachable anymore by tab-key, because of new tabbing\n+  behaviour of radio button groups.\n+  @run main ButtonGroupLayoutTraversalTest\n+*\/\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class ButtonGroupLayoutTraversalTest {\n+    static int nx = 3;\n+    static int ny = 3;\n+\n+    static int focusCnt[] = new int[nx * ny];\n+    private static JFrame window;\n+\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SwingUtilities.invokeAndWait(()->initLayout(nx, ny));\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+\n+        for(int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n+            robot.keyPress(KeyEvent.VK_RIGHT);\n+            robot.keyRelease(KeyEvent.VK_RIGHT);\n+        }\n+\n+        for(int i = 0; i < nx * ny \/ 2; i++) {\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+        }\n+\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        for(int i = 0; i < nx * ny; i++) {\n+            if(focusCnt[i] < 1) {\n+                SwingUtilities.invokeLater(window::dispose);\n+                throw new RuntimeException(\"Component \" + i +\n+                        \" is not reachable in the forward focus cycle\");\n+            } else if (focusCnt[i] > 1) {\n+                SwingUtilities.invokeLater(window::dispose);\n+                throw new RuntimeException(\"Component \" + i +\n+                        \" got focus more than once in the forward focus cycle\");\n+            }\n+        }\n+\n+        for(int i = 0; i < nx * ny \/ 2; i++) {\n+            robot.keyPress(KeyEvent.VK_SHIFT);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_SHIFT);\n+        }\n+\n+        for(int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n+            robot.keyPress(KeyEvent.VK_LEFT);\n+            robot.keyRelease(KeyEvent.VK_LEFT);\n+        }\n+\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_SHIFT);\n+\n+        robot.waitForIdle();\n+        robot.delay(200);\n+\n+        for(int i = 0; i < nx * ny; i++) {\n+            if(focusCnt[i] < 2) {\n+                SwingUtilities.invokeLater(window::dispose);\n+                throw new RuntimeException(\"Component \" + i +\n+                        \" is not reachable in the backward focus cycle\");\n+            } else if (focusCnt[i] > 2) {\n+                SwingUtilities.invokeLater(window::dispose);\n+                throw new RuntimeException(\"Component \" + i +\n+                        \" got focus more than once in the backward focus cycle\");\n+            }\n+        }\n+\n+        SwingUtilities.invokeLater(window::dispose);\n+    }\n+\n+    public static void initLayout(int nx, int ny)\n+    {\n+        window = new JFrame(\"Test\");\n+        window.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        JPanel rootPanel = new JPanel();\n+        rootPanel.setLayout(new BorderLayout());\n+        JPanel formPanel = new JPanel(new GridLayout(nx, ny));\n+        formPanel.setFocusTraversalPolicy(new LayoutFocusTraversalPolicy());\n+        formPanel.setFocusCycleRoot(true);\n+        ButtonGroup radioButtonGroup = new ButtonGroup();\n+        for(int i = 0; i < nx * ny; i++) {\n+            JToggleButton comp;\n+            if(i % 2 == 0) {\n+                comp = new JRadioButton(\"Grouped component\");\n+                radioButtonGroup.add(comp);\n+            } else {\n+                comp = new JRadioButton(\"Single component\");\n+            }\n+            formPanel.add(comp);\n+            int fi = i;\n+            comp.setBackground(Color.red);\n+            comp.addFocusListener(new FocusAdapter() {\n+                @Override\n+                public void focusGained(FocusEvent e) {\n+                    focusCnt[fi]++;\n+                    if( focusCnt[fi] == 1) {\n+                        ((JComponent) e.getSource())\n+                                .setBackground(Color.yellow);\n+                    } else if(focusCnt[fi] == 2) {\n+                        ((JComponent) e.getSource())\n+                                .setBackground(Color.green);\n+                    } else {\n+                        ((JComponent) e.getSource())\n+                                .setBackground(Color.red);\n+                    }\n+                }\n+            });\n+        }\n+        rootPanel.add(formPanel, BorderLayout.CENTER);\n+        window.add(rootPanel);\n+        window.pack();\n+        window.setVisible(true);\n+    }\n+}\n","filename":"jdk\/test\/java\/awt\/Focus\/FocusTraversalPolicy\/ButtonGroupLayoutTraversal\/ButtonGroupLayoutTraversalTest.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8182577\n+ * @summary  Verifies if moving focus via custom ButtonModel causes crash\n+ * @run main DefaultButtonModelCrashTest\n+ *\/\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import javax.swing.ButtonModel;\n+import javax.swing.DefaultButtonModel;\n+import javax.swing.JCheckBox;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class DefaultButtonModelCrashTest {\n+    private JFrame frame = null;\n+    private JPanel panel;\n+    private volatile Point p = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        new DefaultButtonModelCrashTest();\n+    }\n+\n+    public DefaultButtonModelCrashTest() throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(200);\n+            SwingUtilities.invokeAndWait(() -> go());\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.delay(100);\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+        } finally {\n+            SwingUtilities.invokeAndWait(()->frame  .dispose());\n+        }\n+    }\n+\n+    private void go() {\n+\n+        frame = new JFrame();\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        Container contentPane = frame.getContentPane();\n+        ButtonModel model = new DefaultButtonModel();\n+\n+        JCheckBox check = new JCheckBox(\"a bit broken\");\n+        check.setModel(model);\n+        panel = new JPanel(new BorderLayout());\n+        panel.add(new JTextField(\"Press Tab (twice?)\"), BorderLayout.NORTH);\n+        panel.add(check);\n+        contentPane.add(panel);\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"jdk\/test\/javax\/swing\/DefaultButtonModel\/DefaultButtonModelCrashTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8033699 8226892\n+ * @bug 8033699 8154043 8226892\n@@ -140,0 +140,1 @@\n+        hitKey(robot, KeyEvent.VK_TAB);\n@@ -166,0 +167,1 @@\n+        hitKey(robot, KeyEvent.VK_SHIFT, KeyEvent.VK_TAB);\n@@ -170,1 +172,1 @@\n-                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn3) {\n+                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn1) {\n@@ -172,1 +174,1 @@\n-                    throw new RuntimeException(\"Focus is not on Radio Button C as Expected\");\n+                    throw new RuntimeException(\"Focus is not on Radio Button A as Expected\");\n@@ -180,2 +182,2 @@\n-        hitKey(robot, KeyEvent.VK_UP);\n-        hitKey(robot, KeyEvent.VK_LEFT);\n+        hitKey(robot, KeyEvent.VK_DOWN);\n+        hitKey(robot, KeyEvent.VK_RIGHT);\n@@ -184,1 +186,1 @@\n-                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn1) {\n+                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn3) {\n@@ -186,1 +188,1 @@\n-                    throw new RuntimeException(\"Focus is not on Radio Button A as Expected\");\n+                    throw new RuntimeException(\"Focus is not on Radio Button C as Expected\");\n@@ -193,2 +195,2 @@\n-        hitKey(robot, KeyEvent.VK_DOWN);\n-        hitKey(robot, KeyEvent.VK_RIGHT);\n+        hitKey(robot, KeyEvent.VK_UP);\n+        hitKey(robot, KeyEvent.VK_LEFT);\n@@ -197,1 +199,1 @@\n-                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn3) {\n+                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn1) {\n@@ -199,1 +201,1 @@\n-                    throw new RuntimeException(\"Focus is not on Radio Button C as Expected\");\n+                    throw new RuntimeException(\"Focus is not on Radio Button A as Expected\");\n@@ -206,2 +208,2 @@\n-        hitKey(robot, KeyEvent.VK_DOWN);\n-        hitKey(robot, KeyEvent.VK_DOWN);\n+        hitKey(robot, KeyEvent.VK_UP);\n+        hitKey(robot, KeyEvent.VK_UP);\n@@ -212,1 +214,1 @@\n-                    throw new RuntimeException(\"Focus is not on Radio Button A as Expected\");\n+                    throw new RuntimeException(\"Focus is not on Radio Button B as Expected\");\n@@ -234,1 +236,1 @@\n-                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtn3) {\n+                if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != radioBtnSingle) {\n@@ -236,1 +238,1 @@\n-                    throw new RuntimeException(\"Focus is not on Radio Button C as Expected\");\n+                    throw new RuntimeException(\"Focus is not on Radio Button Single as Expected\");\n","filename":"jdk\/test\/javax\/swing\/JRadioButton\/8033699\/bug8033699.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"}]}