{"files":[{"patch":"@@ -18,1 +18,1 @@\n-        <javac.target>1.8<\/javac.target>\n+        <javac.target>19<\/javac.target>\n@@ -32,0 +32,11 @@\n+                    <compilerArgs>\n+                        <arg>--add-exports<\/arg>\n+                        <arg>jdk.internal.jvmstat\/sun.jvmstat.monitor=ALL-UNNAMED<\/arg>\n+                    <\/compilerArgs>\n+                <\/configuration>\n+            <\/plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins<\/groupId>\n+                <artifactId>maven-surefire-plugin<\/artifactId>\n+                <configuration>\n+                    <argLine>--add-exports jdk.internal.jvmstat\/sun.jvmstat.monitor=ALL-UNNAMED<\/argLine>\n@@ -94,19 +105,0 @@\n-    <profiles>\n-        <profile>\n-            <id>tools.jar-8<\/id>\n-            <activation>\n-                <jdk>1.8<\/jdk>\n-            <\/activation>\n-            <dependencies>\n-                <dependency>\n-                    <groupId>com.sun<\/groupId>\n-                    <artifactId>tools<\/artifactId>\n-                    <version>1.8<\/version>\n-                    <scope>system<\/scope>\n-                    <systemPath>${java.home}\/..\/lib\/tools.jar<\/systemPath>\n-                <\/dependency>\n-            <\/dependencies>\n-        <\/profile>\n-    <\/profiles>\n-\n-\n","filename":"pom.xml","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+    Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n@@ -26,1 +26,1 @@\n-Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n","filename":"src\/license\/gpl_cpe\/header.txt","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import java.util.*;\n+\n+public class CircularBuffer<T> {\n+\n+    public static final int DEFAULT_SIZE = 8;\n+\n+    private final Object[] elements;\n+    private int tail;\n+    private int count;\n+\n+    public CircularBuffer(int size) {\n+        elements = new Object[size];\n+        count = tail = 0;\n+    }\n+\n+    public CircularBuffer(Collection<T> elements) {\n+        this.elements = elements.toArray();\n+        tail = 0;\n+        count = this.elements.length;\n+    }\n+\n+    public CircularBuffer() {\n+        this(DEFAULT_SIZE);\n+    }\n+\n+    public boolean isEmpty() {\n+        return count == 0;\n+    }\n+\n+    public void add(T i) {\n+        elements[tail] = i;\n+        tail = (tail  + 1) % elements.length;\n+        ++count;\n+    }\n+\n+    public List<T> subList(int include, int exclude) {\n+        if (include == exclude) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<T> list = new ArrayList<>(exclude - include);\n+        for (; include < exclude; ++include) {\n+            list.add(get(include));\n+        }\n+        return list;\n+    }\n+\n+    public T get(int elementAt) {\n+        return (T) elements[index(elementAt)];\n+    }\n+\n+    public int size() {\n+        return Math.min(count, elements.length);\n+    }\n+\n+    private int index(int offset) {\n+        if (count <= elements.length) {\n+            return offset;\n+        }\n+        return ((tail + offset) % elements.length);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/CircularBuffer.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n@@ -31,2 +31,0 @@\n-    static final Color OLD_TIMELINE_MARK = new Color(120, 171, 210);\n-\n@@ -53,1 +51,0 @@\n-    static final Color SHARED_ALLOC_BORDER  = new Color(0, 191, 190);\n@@ -55,1 +52,0 @@\n-    static final Color TLAB_ALLOC_BORDER    = new Color(0, 100, 0);\n@@ -57,1 +53,0 @@\n-    static final Color GCLAB_ALLOC_BORDER   = new Color(118, 0, 160);\n@@ -59,1 +54,0 @@\n-    static final Color PLAB_ALLOC_BORDER    = new Color(92, 64, 51);\n@@ -62,2 +56,0 @@\n-\n-    static final Color LIVE_COMMITTED       = new Color(150, 150, 150);\n@@ -72,2 +64,0 @@\n-\n-    static final Color LIVE_BORDER          = new Color(0, 100, 0);\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/Colors.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n- * Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -47,0 +47,2 @@\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n@@ -62,1 +64,1 @@\n-    private volatile String status;\n+    private volatile State status;\n@@ -64,2 +66,9 @@\n-    private volatile boolean connected;\n-    private final Thread connector;\n+\n+    private final Executor executor;\n+\n+    private volatile String targetVmIdentifier;\n+    private JMXConnector jmxConnector;\n+\n+    enum State {\n+        Searching, Connecting, Connected, Disconnecting, Disconnected\n+    }\n@@ -72,5 +81,11 @@\n-        this.connected = false;\n-        this.status = \"Disconnected\";\n-        this.connector = new Thread(this);\n-        this.connector.setDaemon(true);\n-        this.connector.setName(\"JmxConnectionManager\");\n+        this.status = State.Disconnected;\n+        this.executor = Executors.newSingleThreadExecutor(r -> {\n+            Thread t = new Thread(r);\n+            t.setDaemon(true);\n+            t.setName(\"JmxConnectionManager\");\n+            return t;\n+        });\n+    }\n+\n+    void connectTo(String id) {\n+        targetVmIdentifier = id;\n@@ -85,0 +100,1 @@\n+                    transitionTo(State.Connecting);\n@@ -88,4 +104,2 @@\n-                    connected = true;\n-                    synchronized (DataConnector.class) {\n-                        DataConnector.class.wait();\n-                    }\n+                    shouldRun = false;\n+                    transitionTo(State.Connected);\n@@ -101,0 +115,1 @@\n+        System.out.println(\"Connection task completed: \" + status);\n@@ -104,1 +119,6 @@\n-        return connected;\n+        return status == State.Connected;\n+    }\n+\n+    private void transitionTo(State newState) {\n+        System.out.println(\"Change status to: \" + newState);\n+        status = newState;\n@@ -108,1 +128,5 @@\n-        connector.start();\n+        if (status == State.Disconnected) {\n+            transitionTo(State.Searching);\n+            shouldRun = true;\n+            executor.execute(this);\n+        }\n@@ -113,1 +137,12 @@\n-        connector.interrupt();\n+        if (status == State.Connected) {\n+            executor.execute(() -> {\n+                try {\n+                    transitionTo(State.Disconnecting);\n+                    jmxConnector.close();\n+                    transitionTo(State.Disconnected);\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n@@ -117,1 +152,1 @@\n-        return status;\n+        return status.toString();\n@@ -127,1 +162,0 @@\n-        status = \"Searching\";\n@@ -130,0 +164,16 @@\n+\n+        if (targetVmIdentifier != null) {\n+            try {\n+                MonitoredVm vm = host.getMonitoredVm(new VmIdentifier(targetVmIdentifier));\n+                String jvmArgs = MonitoredVmUtil.jvmArgs(vm);\n+                if (jvmArgs.contains(\"ShenandoahRegionSampling\")) {\n+                    System.out.println(\"Connecting to given vm: \" + targetVmIdentifier);\n+                    return vm;\n+                } else {\n+                    System.out.println(\"Given identifier for vm \" + targetVmIdentifier + \" does not have ShenandoahRegionSampling enabled.\");\n+                }\n+            } finally {\n+                targetVmIdentifier = null;\n+            }\n+        }\n+\n@@ -134,0 +184,1 @@\n+                System.out.println(\"Found vm running shenandoah region sampling: \" + vm);\n@@ -142,1 +193,0 @@\n-        status = \"Connecting\";\n@@ -145,4 +195,3 @@\n-        JMXConnector connector = JMXConnectorFactory.connect(url);\n-        MBeanServerConnection server = connector.getMBeanServerConnection();\n-        connector.addConnectionNotificationListener(this:: handleConnectionNotification, null, server);\n-        status = \"Connected\";\n+        jmxConnector = JMXConnectorFactory.connect(url);\n+        MBeanServerConnection server = jmxConnector.getMBeanServerConnection();\n+        jmxConnector.addConnectionNotificationListener(this::handleConnectionNotification, null, server);\n@@ -172,5 +221,1 @@\n-            status = \"Disconnected\";\n-            connected = false;\n-            synchronized (DataConnector.class) {\n-                DataConnector.class.notify();\n-            }\n+            transitionTo(State.Disconnected);\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/DataConnector.java","additions":74,"deletions":29,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,26 +2,1 @@\n- * ====\n- *     Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n- *     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *     This code is free software; you can redistribute it and\/or modify it\n- *     under the terms of the GNU General Public License version 2 only, as\n- *     published by the Free Software Foundation.  Oracle designates this\n- *     particular file as subject to the \"Classpath\" exception as provided\n- *     by Oracle in the LICENSE file that accompanied this code.\n- *\n- *     This code is distributed in the hope that it will be useful, but WITHOUT\n- *     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *     version 2 for more details (a copy is included in the LICENSE file that\n- *     accompanied this code).\n- *\n- *     You should have received a copy of the GNU General Public License version\n- *     2 along with this work; if not, write to the Free Software Foundation,\n- *     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *     or visit www.oracle.com if you need additional information or have any\n- *     questions.\n- * ====\n- *\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -52,0 +27,3 @@\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n@@ -55,2 +33,0 @@\n-import java.util.Collections;\n-import java.util.HashMap;\n@@ -58,3 +34,0 @@\n-import java.io.*;\n-import java.lang.IllegalArgumentException;\n-import java.lang.System;\n@@ -64,1 +37,0 @@\n-    \/\/default Snapshot as version 2\n@@ -66,1 +38,0 @@\n-    private static final Snapshot DISCONNECTED = new Snapshot(0, 1024, LATEST_VERSION, Collections.emptyList(), 0, null);\n@@ -68,14 +39,1 @@\n-    private static final String START = \"START\";\n-    private static final String STOP = \"STOP\";\n-    private static final String CLEAR = \"CLEAR\";\n-\n-\n-    private List<Snapshot> snapshots;\n-    private HashMap<Long, Integer> snapshotsIndexByTime;\n-    public final Stopwatch stopwatch;\n-    private int snapshotsIndex = -1;\n-    private Snapshot currSnapshot = DISCONNECTED;\n-\n-\n-    public DataLogProvider(String path) throws IOException, NumberFormatException {\n-        String filePath = path;\n+    public static void loadSnapshots(String filePath, EventLog<Snapshot> eventLog) {\n@@ -83,1 +41,1 @@\n-            throw new FileNotFoundException(\"Invalid file path supplied. Please try again.\");\n+            throw new IllegalArgumentException(\"Invalid file path supplied. Please try again.\");\n@@ -86,3 +44,0 @@\n-        this.snapshots = new ArrayList<>();\n-        this.snapshotsIndexByTime = new HashMap<>();\n-        int index = 0;\n@@ -90,1 +45,1 @@\n-\n+        var events = new ArrayList<Snapshot>();\n@@ -111,6 +66,3 @@\n-                snapshots.add(new Snapshot(tsMilli,\n-                        metaData[3], protocolVersion,\n-                        processRegionStats(regionData),\n-                        Math.toIntExact(metaData[1]),\n-                        null));\n-                snapshotsIndexByTime.put(tsMilli, index++);\n+                long regionSize = metaData[3];\n+                int status = Math.toIntExact(metaData[1]);\n+                events.add(new Snapshot(tsMilli, regionSize, protocolVersion, processRegionStats(regionData), status, null));\n@@ -120,0 +72,2 @@\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n@@ -121,32 +75,1 @@\n-\n-        if (snapshots.size() > 0) {\n-            snapshotsIndex = 0;\n-        }\n-\n-        stopwatch = new Stopwatch();\n-    }\n-\n-    public void controlStopwatch(String command) {\n-        if (STOP.equals(command)) {\n-            stopwatch.stop();\n-        } else if (START.equals(command)) {\n-            stopwatch.start();\n-        } else if (CLEAR.equals(command)) {\n-            stopwatch.clear();\n-        }\n-    }\n-\n-    public void setStopwatchTime(long ns) {\n-        stopwatch.setElapsedTime(ns);\n-    }\n-\n-    public void setSpeed(double speed) {\n-        stopwatch.setSpeedMultiplier(speed);\n-    }\n-\n-    public boolean snapshotTimeHasOccurred(Snapshot s) {\n-        return s.time() <= stopwatch.getElapsedMilli();\n-    }\n-\n-    public Snapshot getSnapshotAtTime(long ms) {\n-        return snapshots.get(snapshotsIndexByTime.get(ms));\n+        eventLog.load(TimeUnit.MILLISECONDS, events);\n@@ -155,1 +78,1 @@\n-    private boolean isValidPath(String name) {\n+    private static boolean isValidPath(String name) {\n@@ -159,1 +82,1 @@\n-    String processLoggingTag(String data) {\n+    static String processLoggingTag(String data) {\n@@ -162,2 +85,1 @@\n-            String newData = data.substring(startIndex);\n-            return newData;\n+            return data.substring(startIndex);\n@@ -169,1 +91,1 @@\n-    private long[] processLongData(String data) throws NumberFormatException {\n+    private static long[] processLongData(String data) throws NumberFormatException {\n@@ -180,1 +102,1 @@\n-    private List<RegionStat> processRegionStats(String[] regionData) throws NumberFormatException {\n+    private static List<RegionStat> processRegionStats(String[] regionData) throws NumberFormatException {\n@@ -187,40 +109,0 @@\n-\n-    public boolean isEndOfSnapshots() {\n-        return snapshotsIndex >= snapshots.size();\n-    }\n-\n-    public Snapshot snapshot() {\n-        if (!stopwatch.isStarted()) {\n-            stopwatch.start();\n-        }\n-        if (snapshotsIndex == -1) {\n-            System.out.println(\"No Shenandoah snapshots in file. Choose valid log file.\");\n-            return DISCONNECTED;\n-        } else if (snapshotsIndex >= 0 && snapshotsIndex < snapshots.size()) {\n-            Snapshot tempSnapshot = snapshots.get(snapshotsIndex);\n-            if (snapshotTimeHasOccurred(tempSnapshot)) {\n-                currSnapshot = tempSnapshot;\n-                snapshotsIndex++;\n-            }\n-            return currSnapshot;\n-        } else {\n-            return currSnapshot;\n-        }\n-    }\n-\n-    public Snapshot getNextSnapshot() {\n-        if (snapshotsIndex == -1) {\n-            return DISCONNECTED;\n-        } else if (snapshotsIndex >= 0 && snapshotsIndex < snapshots.size()) {\n-            Snapshot tempSnapshot = snapshots.get(snapshotsIndex);\n-            currSnapshot = tempSnapshot;\n-            snapshotsIndex++;\n-        }\n-        return currSnapshot;\n-    }\n-    public int getSnapshotsSize() {\n-        return snapshots.size();\n-    }\n-    public List<Snapshot> getSnapshots() {\n-        return snapshots;\n-    }\n@@ -228,1 +110,0 @@\n-\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/DataLogProvider.java","additions":18,"deletions":137,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -37,1 +38,0 @@\n-    \/\/default Snapshot as version 2\n@@ -40,1 +40,1 @@\n-    private static final Snapshot DISCONNECTED = new Snapshot(0, 1024, LATEST_VERSION, Collections.emptyList(), 0, new Histogram(2));\n+    static final Snapshot DISCONNECTED = new Snapshot(System.currentTimeMillis(), 1024, LATEST_VERSION, Collections.emptyList(), 0, new Histogram(2));\n@@ -49,0 +49,1 @@\n+    private MonitoredVm vm;\n@@ -50,2 +51,1 @@\n-\n-    public DataProvider(String id) {\n+    public DataProvider() {\n@@ -53,1 +53,0 @@\n-        connector.start();\n@@ -57,1 +56,3 @@\n-        LongMonitor max_regions_mon = getMonitor(vm,\"sun.gc.shenandoah.regions.max_regions\");\n+        this.vm = vm;\n+\n+        LongMonitor max_regions_mon = getMonitor(\"sun.gc.shenandoah.regions.max_regions\");\n@@ -59,2 +60,2 @@\n-        \/\/Reads in the version of the garbage collector\n-        LongMonitor protocol_version_mon = getMonitor(vm, \"sun.gc.shenandoah.regions.protocol_version\");\n+        \/\/ Read in the version of the garbage collector\n+        LongMonitor protocol_version_mon = getMonitor(\"sun.gc.shenandoah.regions.protocol_version\");\n@@ -66,2 +67,2 @@\n-        \/\/System.out.println(\"The version of the Shenandoah is \" + protocolVersion);\n-        LongMonitor max_size_mon = getMonitor(vm,\"sun.gc.shenandoah.regions.region_size\");\n+\n+        LongMonitor max_size_mon = getMonitor(\"sun.gc.shenandoah.regions.region_size\");\n@@ -69,1 +70,1 @@\n-        status = getMonitor(vm, \"sun.gc.shenandoah.regions.status\");\n+        status = getMonitor(\"sun.gc.shenandoah.regions.status\");\n@@ -73,1 +74,1 @@\n-            LongMonitor mon = getMonitor(vm,\"sun.gc.shenandoah.regions.region.\" + i + \".data\");\n+            LongMonitor mon = getMonitor(\"sun.gc.shenandoah.regions.region.\" + i + \".data\");\n@@ -83,1 +84,1 @@\n-    private static <T> T getMonitor(MonitoredVm vm, String key) {\n+    private <T> T getMonitor(String key) {\n@@ -85,1 +86,0 @@\n-            \/\/noinspection unchecked\n@@ -92,0 +92,4 @@\n+    public boolean isConnected() {\n+        return connector.isConnected();\n+    }\n+\n@@ -94,1 +98,1 @@\n-            return DISCONNECTED;\n+            return null;\n@@ -109,1 +113,0 @@\n-        \/\/adding version to the Snapshot\n@@ -113,1 +116,1 @@\n-    protected void stopConnector() {\n+    public void stopConnector() {\n@@ -117,0 +120,2 @@\n+    public void startConnector() { connector.start(); }\n+\n@@ -120,0 +125,4 @@\n+\n+    public void setConnectionTarget(String vmIdentifier) {\n+        connector.connectTo(vmIdentifier);\n+    }\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/DataProvider.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+class EventLog<T extends Timed> {\n+    private CircularBuffer<T> events;\n+    private TimeUnit eventTimeUnit;\n+    private int cursor;\n+    private long referenceTime;\n+\n+    EventLog() {\n+        this(TimeUnit.NANOSECONDS);\n+    }\n+\n+    EventLog(TimeUnit eventTimeUnit) {\n+        this.events = new CircularBuffer<>();\n+        this.eventTimeUnit = eventTimeUnit;\n+    }\n+\n+    EventLog(TimeUnit eventTimeUnit, int eventLogSize) {\n+        this.events = new CircularBuffer<>(eventLogSize);\n+        this.eventTimeUnit = eventTimeUnit;\n+    }\n+\n+    public synchronized void add(T t) {\n+        if (!events.isEmpty() && t.time() < events.get(events.size() - 1).time()) {\n+            throw new IllegalArgumentException(\"Events must be added in chronological order.\");\n+        }\n+\n+        events.add(t);\n+\n+        if (referenceTime == 0) {\n+            referenceTime = t.time();\n+        } else if (t.time() < referenceTime) {\n+            cursor++;\n+        }\n+    }\n+\n+    public synchronized List<T> inRange() {\n+        if (events.isEmpty() || cursor == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        assert 1 <= cursor && cursor <= events.size();\n+        return events.subList(0, cursor);\n+    }\n+\n+    public synchronized void stepBy(int amount) {\n+        stepTo(cursor + amount);\n+    }\n+\n+    public void stepTo(int value) {\n+        if (events.size() > 0) {\n+            cursor = clamp(value, events.size());\n+            referenceTime = current().time();\n+        }\n+    }\n+\n+    public synchronized void stepToEnd() {\n+        stepTo(Integer.MAX_VALUE);\n+    }\n+\n+    public synchronized  void advanceTo(long pointInTime, TimeUnit timeUnit) {\n+        long eventTime = eventTimeUnit.convert(pointInTime, timeUnit);\n+        advanceTo(eventTime);\n+    }\n+\n+    public void advanceBy(long duration, TimeUnit timeUnit) {\n+        if (referenceTime > 0) {\n+            long eventTime = eventTimeUnit.convert(duration, timeUnit);\n+            long pointInTime = referenceTime + eventTime;\n+            advanceTo(pointInTime);\n+        }\n+    }\n+\n+    private void advanceTo(long pointInTime) {\n+        for (int i = cursor; i < events.size(); ++i) {\n+            var event = events.get(i);\n+            if (pointInTime < event.time()) {\n+                break;\n+            }\n+            cursor++;\n+        }\n+        referenceTime = pointInTime;\n+    }\n+\n+    public synchronized T current() {\n+        if (cursor == 0) {\n+            return null;\n+        }\n+        return events.get(cursor - 1);\n+    }\n+\n+    public int size() {\n+        return events.size();\n+    }\n+\n+    public int cursor() {\n+        return cursor;\n+    }\n+\n+    private static int clamp(int val, int max) {\n+        return Math.min(Math.max(1, val), max);\n+    }\n+\n+    public final void load(TimeUnit eventTimeUnit, List<T> events) {\n+        this.events = new CircularBuffer<>(events);\n+        this.eventTimeUnit = eventTimeUnit;\n+        this.referenceTime = this.events.get(0).time();\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/EventLog.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import java.util.List;\n+\n+public class GraphPanel extends JPanel {\n+    private final RenderRunner renderRunner;\n+\n+    int graphWidth, graphHeight;\n+\n+    public GraphPanel(RenderRunner renderRunner) {\n+        this.renderRunner = renderRunner;\n+\n+        this.addComponentListener(new ComponentAdapter() {\n+            public void componentResized(ComponentEvent ev) {\n+                graphWidth = ev.getComponent().getWidth();\n+                graphHeight = ev.getComponent().getHeight();\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        List<Snapshot> snapshots = renderRunner.snapshots();\n+\n+        int pad = 30;\n+        int bandHeight = (graphHeight - pad) \/ 2;\n+        int bandWidth = graphWidth;\n+        int phaseHeight = bandHeight \/ 4;\n+        double stepY = 1D * bandHeight \/ renderRunner.snapshot().total();\n+\n+        int startRaw = graphHeight - bandHeight - pad;\n+\n+        int snapshotWidth = 1;\n+        int snapshotStartX = bandWidth;\n+\n+        int oneFourth = bandWidth \/ 4;\n+        int oneHalf = oneFourth * 2;\n+        int threeFourths = oneFourth * 3;\n+\n+        int timelineMarkStartY = bandHeight + 5;\n+        int timelineMarkEndY = bandHeight + pad - 5;\n+        int timelineMarkTextOffsetY = bandHeight + 20;\n+\n+        int phaseLabelOffsetX = bandWidth - 25;\n+        int phaseLabelOffsetY = bandHeight + pad + 20;\n+\n+        g.setColor(Color.WHITE);\n+        g.fillRect(0, 0, bandWidth, graphHeight);\n+\n+        g.setColor(Color.BLACK);\n+        g.fillRect(0, 0, bandWidth, bandHeight);\n+        g.fillRect(0, bandHeight + pad, bandWidth, bandHeight);\n+\n+        for (int i = snapshots.size() - 1; i >= 0 && snapshotStartX >=0; --i) {\n+            Snapshot snapshot = snapshots.get(i);\n+            snapshotStartX -= snapshotWidth;\n+\n+            if (snapshot.getOldPhase() == Phase.MARKING && snapshot.getGlobalPhase() == Phase.IDLE) {\n+                g.setColor(Colors.OLD[0]);\n+                g.drawRect(snapshotStartX, bandHeight + pad, snapshotWidth, phaseHeight);\n+            }\n+\n+            if (snapshot.percentageOfOldRegionsInCollectionSet() > 0) {\n+                int height = (int) (bandHeight * snapshot.percentageOfOldRegionsInCollectionSet());\n+                g.setColor(Colors.OLD[0]);\n+                g.drawRect(snapshotStartX, 2 * bandHeight + pad - height, snapshotWidth, height);\n+            }\n+\n+            g.setColor(getColor(snapshot));\n+            if (getPhase(snapshot) == Phase.MARKING) {\n+                g.drawRect(snapshotStartX, bandHeight + pad + phaseHeight, snapshotWidth, phaseHeight);\n+            }\n+            if (getPhase(snapshot) == Phase.EVACUATING) {\n+                g.drawRect(snapshotStartX, bandHeight + pad + 2 * phaseHeight, snapshotWidth, phaseHeight);\n+            }\n+            if (getPhase(snapshot) == Phase.UPDATE_REFS) {\n+                g.drawRect(snapshotStartX, bandHeight + pad + 3 * phaseHeight, snapshotWidth, phaseHeight);\n+            }\n+\n+            if (snapshot.isFullActive()) {\n+                g.setColor(Colors.FULL);\n+                g.drawRect(snapshotStartX, bandHeight + pad, snapshotWidth, 10);\n+            } else if (snapshot.isDegenActive()) {\n+                g.setColor(Colors.DEGENERATE);\n+                g.drawRect(snapshotStartX, bandHeight + pad, snapshotWidth, 10);\n+            }\n+\n+            \/\/ Draw these in the upper band.\n+            g.setColor(Colors.USED);\n+            g.drawRect(snapshotStartX, (int) Math.round(startRaw - snapshot.used() * stepY), 1, 1);\n+            g.setColor(Colors.LIVE_REGULAR);\n+            g.drawRect(snapshotStartX, (int) Math.round(startRaw - snapshot.live() * stepY), 1, 1);\n+            g.setColor(Colors.LIVE_CSET);\n+            g.drawRect(snapshotStartX, (int) Math.round(startRaw - snapshot.collectionSet() * stepY), 1, 1);\n+\n+            g.setColor(Color.WHITE);\n+            g.drawString(\"OM\", phaseLabelOffsetX, phaseLabelOffsetY);\n+            g.drawString(\"M\", phaseLabelOffsetX, phaseLabelOffsetY + phaseHeight);\n+            g.drawString(\"E\", phaseLabelOffsetX, phaseLabelOffsetY + 2 * phaseHeight );\n+            g.drawString(\"UR\", phaseLabelOffsetX, phaseLabelOffsetY + 3 * phaseHeight );\n+\n+            Graphics2D g2 = (Graphics2D) g;\n+            g2.setStroke(new BasicStroke(2));\n+\n+            if (snapshotStartX == 0) {\n+                g2.drawLine(0, timelineMarkStartY, 0, timelineMarkEndY);\n+                g2.drawString(snapshot.time() + \" ms\", 0, timelineMarkTextOffsetY);\n+            } else if (oneFourth == snapshotStartX) {\n+                g2.drawLine(oneFourth, timelineMarkStartY, oneFourth, timelineMarkEndY);\n+                g2.drawString(snapshot.time() + \" ms\", oneFourth + 3, timelineMarkTextOffsetY);\n+            } else if (oneHalf == snapshotStartX) {\n+                g2.drawLine(oneHalf, timelineMarkStartY, oneHalf, timelineMarkEndY);\n+                g2.drawString(snapshot.time() + \" ms\", oneHalf + 3, timelineMarkTextOffsetY);\n+            } else if (threeFourths == snapshotStartX) {\n+                g2.drawLine(threeFourths, timelineMarkStartY, threeFourths, timelineMarkEndY);\n+                g2.drawString(snapshot.time() + \" ms\", threeFourths + 3, timelineMarkTextOffsetY);\n+            }\n+        }\n+    }\n+\n+    protected static Color getColor(Snapshot s) {\n+        if (s.getYoungPhase() != Phase.IDLE) {\n+            return Colors.YOUNG[s.getYoungPhase().ordinal()];\n+        }\n+        if (s.getGlobalPhase() != Phase.IDLE) {\n+            return Colors.GLOBAL[s.getGlobalPhase().ordinal()];\n+        }\n+        if (s.getOldPhase() != Phase.IDLE) {\n+            return Colors.OLD[s.getOldPhase().ordinal()];\n+        }\n+        return Colors.TIMELINE_IDLE;\n+    }\n+\n+    protected static Phase getPhase(Snapshot s) {\n+        if (s.getYoungPhase() != Phase.IDLE) {\n+            return s.getYoungPhase();\n+        }\n+        if (s.getGlobalPhase() != Phase.IDLE) {\n+            return s.getGlobalPhase();\n+        }\n+        if (s.getOldPhase() != Phase.IDLE) {\n+            return s.getOldPhase();\n+        }\n+        return Phase.UNKNOWN;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/GraphPanel.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+public class LayoutConstants {\n+    public static final int LINE = 15;\n+\n+    static final int INITIAL_WIDTH = 2000;\n+    static final int INITIAL_HEIGHT = 1600;\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/LayoutConstants.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import static org.openjdk.shenandoah.LayoutConstants.LINE;\n+import static org.openjdk.shenandoah.RegionState.*;\n+\n+public class LegendPanel extends JPanel {\n+    private final RenderRunner renderRunner;\n+\n+    public LegendPanel(RenderRunner renderRunner) {\n+        this.renderRunner = renderRunner;\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Snapshot snapshot = renderRunner.snapshot();\n+        final int sqSize = LINE;\n+\n+        Map<String, RegionStat> items = new LinkedHashMap<>();\n+\n+        items.put(\"Empty Uncommitted\",\n+                new RegionStat(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, EMPTY_UNCOMMITTED));\n+\n+        items.put(\"Empty Committed\",\n+                new RegionStat(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, EMPTY_COMMITTED));\n+\n+        items.put(\"Trash\",\n+                new RegionStat(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, TRASH));\n+\n+        items.put(\"TLAB Allocs\",\n+                new RegionStat(1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, REGULAR));\n+\n+        items.put(\"GCLAB Allocs\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, REGULAR));\n+\n+        items.put(\"PLAB Allocs\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, REGULAR));\n+\n+        items.put(\"Shared Allocs\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, REGULAR));\n+\n+        items.put(\"Humongous\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, HUMONGOUS));\n+\n+        items.put(\"Humongous + Pinned\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, PINNED_HUMONGOUS));\n+\n+        items.put(\"Collection Set\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, CSET));\n+\n+        items.put(\"Pinned\",\n+                new RegionStat(1.0f, 1.0f, 0.3f, 0.0f, 0.0f, 0.0f, PINNED));\n+\n+        items.put(\"Pinned CSet\",\n+                new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, PINNED_CSET));\n+\n+        items.put(\"Age [0, 3)\", new RegionStat(REGULAR, 0));\n+        items.put(\"Age [3, 6)\", new RegionStat(REGULAR, 3));\n+        items.put(\"Age [6, 9)\", new RegionStat(REGULAR, 6));\n+        items.put(\"Age [9, 12)\", new RegionStat(REGULAR, 9));\n+        items.put(\"Age [12, 15)\", new RegionStat(REGULAR, 12));\n+        items.put(\"Age 15\", new RegionStat(REGULAR, 15));\n+\n+        Map<String, Integer> summaryNumbers = new LinkedHashMap<>();\n+\n+\n+        summaryNumbers.put(\"Empty Uncommitted\", snapshot.getEmptyUncommittedCount());\n+\n+        summaryNumbers.put(\"Empty Committed\", snapshot.getEmptyCommittedCount());\n+\n+        summaryNumbers.put(\"Trash\", snapshot.getTrashCount());\n+\n+        summaryNumbers.put(\"TLAB Allocs\", snapshot.getTlabCount());\n+\n+        summaryNumbers.put(\"GCLAB Allocs\", snapshot.getGclabCount());\n+\n+        summaryNumbers.put(\"PLAB Allocs\", snapshot.getPlabCount());\n+\n+        summaryNumbers.put(\"Shared Allocs\", snapshot.getSharedCount());\n+\n+        summaryNumbers.put(\"Humongous\", snapshot.getHumongousCount());\n+\n+        summaryNumbers.put(\"Humongous + Pinned\", snapshot.getPinnedHumongousCount());\n+\n+        summaryNumbers.put(\"Collection Set\", snapshot.getCSetCount());\n+\n+        summaryNumbers.put(\"Pinned\", snapshot.getPinnedCount());\n+\n+\n+        summaryNumbers.put(\"Pinned CSet\", snapshot.getPinnedCSetCount());\n+\n+        summaryNumbers.put(\"Age [0, 3)\", snapshot.getAge0Count());\n+        summaryNumbers.put(\"Age [3, 6)\", snapshot.getAge3Count());\n+        summaryNumbers.put(\"Age [6, 9)\", snapshot.getAge6Count());\n+        summaryNumbers.put(\"Age [9, 12)\", snapshot.getAge9Count());\n+        summaryNumbers.put(\"Age [12, 15)\", snapshot.getAge12Count());\n+        summaryNumbers.put(\"Age 15\", snapshot.getAge15Count());\n+        int i = 0;\n+        for (String key : items.keySet()) {\n+            int y = (int) (i * sqSize * 1.5);\n+            items.get(key).render(g, 0, y, sqSize, sqSize);\n+            g.setColor(Color.BLACK);\n+            g.drawString(key + \" total: \" + summaryNumbers.get(key).toString(), (int) (sqSize * 1.5), y + sqSize);\n+            i++;\n+        }\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/LegendPanel.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/Phase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Amazon.com, Inc. or its affiliates All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. or its affiliates All rights reserved.\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionAffiliation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.shenandoah;\n+\n+import javax.swing.*;\n+import javax.swing.event.DocumentEvent;\n+import javax.swing.event.DocumentListener;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Document;\n+import java.awt.*;\n+import java.awt.event.KeyAdapter;\n+import java.util.List;\n+\n+public class RegionHistory extends JFrame implements DocumentListener {\n+    public static final String DEFAULT_REGION_SELECTION = \"0, 100 - 130, 2000\";\n+    public static final int MIN_REGION_HEIGHT = 5;\n+    private static final int MAX_REGION_HEIGHT = 25;\n+\n+    private final RenderRunner renderRunner;\n+\n+    private final List<Integer> regions;\n+\n+    private final RegionSelectionParser parser;\n+\n+    private final JLabel status;\n+\n+    public RegionHistory(RenderRunner renderRunner, KeyAdapter keyListener) {\n+        this.renderRunner = renderRunner;\n+        this.parser = new RegionSelectionParser();\n+        this.regions = parser.parse(DEFAULT_REGION_SELECTION);\n+\n+        setSize(600, 500);\n+        setLayout(new BorderLayout());\n+        setTitle(\"Region History\");\n+\n+        Container content = getContentPane();\n+        var regionSelection = Box.createHorizontalBox();\n+        regionSelection.add(new JLabel(\"Regions\"));\n+        JTextField regionInput = new JTextField(DEFAULT_REGION_SELECTION, 25);\n+        regionInput.getDocument().addDocumentListener(this);\n+        regionSelection.add(regionInput);\n+        var historyPanel = new RegionHistoryPanel();\n+        historyPanel.setFocusable(true);\n+        historyPanel.addKeyListener(keyListener);\n+        status = new JLabel();\n+\n+        content.add(regionSelection, BorderLayout.NORTH);\n+        content.add(historyPanel, BorderLayout.CENTER);\n+        content.add(status, BorderLayout.SOUTH);\n+    }\n+\n+    @Override\n+    public void insertUpdate(DocumentEvent e) {\n+        onTextUpdated(e);\n+    }\n+\n+    @Override\n+    public void removeUpdate(DocumentEvent e) {\n+        onTextUpdated(e);\n+    }\n+\n+    @Override\n+    public void changedUpdate(DocumentEvent e) {\n+    }\n+\n+    private void onTextUpdated(DocumentEvent e) {\n+        try {\n+            Document document = e.getDocument();\n+            updateRegionSection(document.getText(0, document.getLength()));\n+        } catch (BadLocationException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private void updateRegionSection(String expression) {\n+        try {\n+            List<Integer> selection = parser.parse(expression);\n+            regions.clear();\n+            regions.addAll(selection);\n+            status.setText(\"\");\n+        } catch (Exception e) {\n+            status.setText(e.getMessage());\n+        }\n+    }\n+\n+    private class RegionHistoryPanel extends JPanel {\n+        @Override\n+        public void paint(Graphics g) {\n+            \/\/ TODO: Scroll bars?\n+            \/\/ TODO: Tooltips for region detail?\n+            if (regions.isEmpty()) {\n+                g.drawString(\"No regions selected.\", 10, 10);\n+                return;\n+            }\n+\n+            Rectangle viewport = g.getClipBounds();\n+            int regionSquareSize = clamp(viewport.height \/ regions.size());\n+            renderRegionLabels(g, regionSquareSize);\n+            renderRegionHistory(g, viewport, regionSquareSize);\n+        }\n+\n+        private void renderRegionHistory(Graphics g, Rectangle viewport, int regionSquareSize) {\n+            int x = 21;\n+            List<Snapshot> snapshots = renderRunner.snapshots();\n+            for (int i = snapshots.size() - 1; i >= 0; i--) {\n+                x += regionSquareSize;\n+                Snapshot snapshot = snapshots.get(i);\n+                int y = 1;\n+                for (var region : regions) {\n+                    RegionStat r = snapshot.get(region);\n+                    r.render(g, x, y, regionSquareSize, regionSquareSize);\n+                    y += regionSquareSize;\n+                    if (y > (viewport.height - regionSquareSize)) {\n+                        \/\/ Break a bit early to leave room for a row with timestamps\n+                        break;\n+                    }\n+                }\n+\n+                y += regionSquareSize;\n+                if (i % 10 == 0) {\n+                    g.setColor(Color.BLACK);\n+                    g.drawString(snapshot.time() + \"ms\", x, y);\n+                }\n+\n+                if (x > viewport.width) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        private void renderRegionLabels(Graphics g, int regionSquareSize) {\n+            int x = 1;\n+            int labelStride = regionSquareSize < 10 ? 10 : 1;\n+            for (int i = 0; i < regions.size(); i += labelStride) {\n+                int region = regions.get(i);\n+                g.setColor(Color.BLACK);\n+                g.drawString(String.valueOf(region), x, (i + 1) * regionSquareSize);\n+            }\n+        }\n+    }\n+\n+    private static int clamp(int value) {\n+        return Math.min(Math.max(MIN_REGION_HEIGHT, value), MAX_REGION_HEIGHT);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionHistory.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+\n+public class RegionPanel extends JPanel {\n+    private final RenderRunner renderRunner;\n+\n+    int regionWidth, regionHeight;\n+\n+    public RegionPanel(RenderRunner renderRunner, KeyAdapter keyboardShortCuts) {\n+        this.renderRunner = renderRunner;\n+\n+        addComponentListener(new ComponentAdapter() {\n+            public void componentResized(ComponentEvent ev) {\n+                regionWidth = ev.getComponent().getWidth();\n+                regionHeight = ev.getComponent().getHeight();\n+            }\n+        });\n+\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                Snapshot snapshot = renderRunner.snapshot();\n+                int area = regionWidth * regionHeight;\n+                int sqSize = Math.max(1, (int) Math.sqrt(1D * area \/ snapshot.regionCount()));\n+                int cols = regionWidth \/ sqSize;\n+                int regionNumber = (e.getX() \/ sqSize) + ((e.getY() \/ sqSize) * cols) ;\n+                if (regionNumber >= 0 && regionNumber < snapshot.statsSize()) {\n+                    RegionPopUp popup = new RegionPopUp(regionNumber, renderRunner);\n+                    popup.setSize(450, 450);\n+                    popup.setLocation(e.getX(), e.getY());\n+                    popup.setVisible(true);\n+                    popup.addKeyListener(keyboardShortCuts);\n+                    popup.addWindowListener(new WindowAdapter() {\n+                        @Override\n+                        public void windowClosing(WindowEvent e) {\n+                            super.windowClosing(e);\n+                            popup.setVisible(false);\n+                            popup.dispose();\n+                            renderRunner.deletePopup(popup);\n+                        }\n+                    });\n+                    renderRunner.addPopup(popup);\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Snapshot snapshot = renderRunner.snapshot();\n+        int area = regionWidth * regionHeight;\n+        int sqSize = Math.max(1, (int) Math.sqrt(1D * area \/ snapshot.regionCount()));\n+        int cols = regionWidth \/ sqSize;\n+        int cellSize = sqSize - 2;\n+        for (int i = 0; i < snapshot.regionCount(); i++) {\n+            int rectx = (i % cols) * sqSize;\n+            int recty = (i \/ cols) * sqSize;\n+            RegionStat s = snapshot.get(i);\n+            s.render(g, rectx, recty, cellSize, cellSize);\n+        }\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionPanel.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.awt.event.*;\n-import java.util.LinkedList;\n@@ -34,1 +32,2 @@\n-    private int regionNumber;\n+    private final int regionNumber;\n+    private final RenderRunner renderRunner;\n@@ -44,3 +43,3 @@\n-    private int squareSize = 15;\n-    private int spotlightSquareSize = 28;\n-    private int initialY = 1;\n+    private static final int squareSize = 15;\n+    private static final int spotlightSquareSize = 28;\n+    private static final int initialY = 1;\n@@ -50,3 +49,1 @@\n-    List<Snapshot> snapshots = new LinkedList<Snapshot>();\n-\n-    public RegionPopUp(int regionNumber) {\n+    public RegionPopUp(int regionNumber, RenderRunner renderRunner) {\n@@ -54,0 +51,1 @@\n+        this.renderRunner = renderRunner;\n@@ -56,1 +54,1 @@\n-            public void paint (Graphics g) {\n+            public void paint(Graphics g) {\n@@ -61,1 +59,1 @@\n-            public void paint (Graphics g) {\n+            public void paint(Graphics g) {\n@@ -92,2 +90,0 @@\n-\n-\n@@ -95,0 +91,1 @@\n+\n@@ -97,0 +94,1 @@\n+        List<Snapshot> snapshots = renderRunner.snapshots();\n@@ -98,1 +96,2 @@\n-            RegionStat r = snapshots.get(i).get(regionNumber);\n+            Snapshot snapshot = snapshots.get(i);\n+            RegionStat r = snapshot.get(regionNumber);\n@@ -102,1 +101,1 @@\n-                g.drawString(Long.toString(snapshots.get(i).time()) + \" ms\", 35, y + spotlightSquareSize);\n+                g.drawString(snapshot.time() + \" ms\", 35, y + spotlightSquareSize);\n@@ -111,1 +110,1 @@\n-                g.drawString(Long.toString(snapshots.get(i).time()) + \" ms\", 35, y);\n+                g.drawString(snapshot.time() + \" ms\", 35, y);\n@@ -114,1 +113,0 @@\n-\n@@ -131,3 +129,1 @@\n-    public final void setSnapshots(LinkedList<Snapshot> snapshots) {\n-        this.snapshots = snapshots;\n-    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionPopUp.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+class RegionSelectionParser {\n+    StringBuilder sb = new StringBuilder(4);\n+    int rangeStart = -1;\n+\n+    public List<Integer> parse(String expression) {\n+        try {\n+            Collection<Integer> ints = new HashSet<>();\n+            for (int i = 0, n = expression.length(); i < n; ++i) {\n+                char c = expression.charAt(i);\n+                if (Character.isDigit(c)) {\n+                    sb.append(c);\n+                } else if (c == ',') {\n+                    consumeExpression(ints);\n+                } else if (c == '-') {\n+                    rangeStart = consumeBuffer();\n+                }\n+            }\n+            if (!sb.isEmpty()) {\n+                consumeExpression(ints);\n+            }\n+            List<Integer> sorted = new ArrayList<>(ints);\n+            sorted.sort(Integer::compareTo);\n+            return sorted;\n+        } finally {\n+            rangeStart = -1;\n+            sb.setLength(0);\n+        }\n+    }\n+\n+    private void consumeExpression(Collection<Integer> ints) {\n+        if (rangeStart == -1) {\n+            ints.add(consumeBuffer());\n+        } else {\n+            int rangeFinish = consumeBuffer();\n+            expandRange(ints, rangeFinish);\n+        }\n+    }\n+\n+    private void expandRange(Collection<Integer> ints, int rangeFinish) {\n+        if (rangeStart > rangeFinish) {\n+            throw new IllegalArgumentException(\"Invalid range: \" + rangeStart + \" - \" + rangeFinish);\n+        }\n+\n+        for (int i = rangeStart; i <= rangeFinish; ++i) {\n+            ints.add(i);\n+        }\n+        rangeStart = -1;\n+    }\n+\n+    private int consumeBuffer() {\n+        int result = Integer.parseInt(sb.toString());\n+        sb.setLength(0);\n+        return result;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionSelectionParser.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n@@ -76,1 +76,1 @@\n-    \/\/This constructor is for CounterTest\n+    \/\/ This constructor is for CounterTest\n@@ -191,2 +191,0 @@\n-\/\/                        g.setColor(TLAB_ALLOC_BORDER);\n-\/\/                        drawShape(g, lx, y, tlabWidth, height);\n@@ -199,2 +197,0 @@\n-\/\/                        g.setColor(GCLAB_ALLOC_BORDER);\n-\/\/                        drawShape(g, lx, y, gclabWidth, height);\n@@ -207,2 +203,0 @@\n-\/\/                        g.setColor(SHARED_ALLOC_BORDER);\n-\/\/                        drawShape(g, lx, y, sharedWidth, height);\n@@ -215,2 +209,0 @@\n-\/\/                        g.setColor(PLAB_ALLOC_BORDER);\n-\/\/                        drawShape(g, lx, y, plabWidth, height);\n@@ -310,4 +302,4 @@\n-        result = 31 * result + (liveLvl != +0.0f ? Float.floatToIntBits(liveLvl) : 0);\n-        result = 31 * result + (usedLvl != +0.0f ? Float.floatToIntBits(usedLvl) : 0);\n-        result = 31 * result + (tlabLvl != +0.0f ? Float.floatToIntBits(tlabLvl) : 0);\n-        result = 31 * result + (gclabLvl != +0.0f ? Float.floatToIntBits(gclabLvl) : 0);\n+        result = 31 * result + (liveLvl != 0.0f ? Float.floatToIntBits(liveLvl) : 0);\n+        result = 31 * result + (usedLvl != 0.0f ? Float.floatToIntBits(usedLvl) : 0);\n+        result = 31 * result + (tlabLvl != 0.0f ? Float.floatToIntBits(tlabLvl) : 0);\n+        result = 31 * result + (gclabLvl != 0.0f ? Float.floatToIntBits(gclabLvl) : 0);\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionStat.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RegionState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+public class RenderRunner implements Runnable {\n+    private final ScheduledExecutorService service;\n+    private long lastUpdateNanos;\n+    private volatile EventLog<Snapshot> events;\n+    private boolean isPaused;\n+    private boolean isLive;\n+    private double playbackSpeed;\n+    private String playbackStatus = \"\";\n+\n+    private Runnable recordingLoaded;\n+\n+    private final DataProvider liveData;\n+\n+    private final Set<JFrame> frames;\n+\n+    public RenderRunner(JFrame frame) {\n+        this.frames = new HashSet<>();\n+        this.frames.add(frame);\n+        this.playbackSpeed = 1.0;\n+        this.liveData = new DataProvider();\n+        this.events = new EventLog<>(TimeUnit.MILLISECONDS, 1);\n+        this.service = Executors.newScheduledThreadPool(2);\n+        service.scheduleAtFixedRate(this, 0, 100, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void onRecordingLoaded(Runnable runnable) {\n+        this.recordingLoaded = runnable;\n+    }\n+\n+    public synchronized void loadPlayback(String filePath) {\n+        lastUpdateNanos = 0;\n+        liveData.stopConnector();\n+        playbackStatus = \"Loading\";\n+        service.submit(() -> {\n+            DataLogProvider.loadSnapshots(filePath, events);\n+            isLive = false;\n+            playbackStatus = \"Recorded\";\n+            if (recordingLoaded != null) {\n+                recordingLoaded.run();\n+            }\n+            System.out.println(\"Loaded event log: \" + filePath);\n+        });\n+    }\n+\n+    public synchronized void loadLive(String vmIdentifier) {\n+        if (vmIdentifier != null) {\n+            liveData.setConnectionTarget(vmIdentifier);\n+        }\n+\n+        lastUpdateNanos = 0;\n+        liveData.startConnector();\n+        events = new EventLog<>(TimeUnit.MILLISECONDS, 5_000);\n+        isLive = true;\n+    }\n+\n+    public synchronized void run() {\n+        try {\n+            if (liveData.isConnected()) {\n+                Snapshot snapshot = liveData.snapshot();\n+                if (snapshot != null) {\n+                    events.add(snapshot);\n+                }\n+            }\n+\n+            long now = System.nanoTime();\n+            if (lastUpdateNanos != 0) {\n+                if (!isPaused) {\n+                    long elapsed = (long)((now - lastUpdateNanos) * playbackSpeed);\n+                    events.advanceBy(elapsed, TimeUnit.NANOSECONDS);\n+                }\n+            }\n+            lastUpdateNanos = now;\n+            frames.forEach(JFrame::repaint);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public synchronized Snapshot snapshot() {\n+        Snapshot latest = events.current();\n+        return latest != null ? latest : DataProvider.DISCONNECTED;\n+    }\n+\n+    public void addPopup(JFrame popup) {\n+        frames.add(popup);\n+    }\n+\n+    public void deletePopup(JFrame popup) {\n+        frames.remove(popup);\n+    }\n+\n+    public List<Snapshot> snapshots() {\n+        return new ArrayList<>(events.inRange());\n+    }\n+\n+    public void setPlaybackSpeed(double speed) {\n+        playbackSpeed = speed;\n+    }\n+\n+    public boolean isPaused() {\n+        return isPaused;\n+    }\n+\n+    public boolean isLive() { return isLive; }\n+\n+    public void togglePlayback() {\n+        isPaused = !isPaused;\n+    }\n+\n+    public void stepBy(int value) {\n+        events.stepBy(value);\n+    }\n+\n+    public void stepToEnd() {\n+        events.stepToEnd();\n+    }\n+\n+    public double getPlaybackSpeed() {\n+        return playbackSpeed;\n+    }\n+\n+    public int snapshotCount() {\n+        return events.size();\n+    }\n+\n+    public void stepTo(int value) {\n+        events.stepTo(value);\n+    }\n+\n+    public int cursor() {\n+        return events.cursor();\n+    }\n+\n+    public String status() {\n+        return isLive ? liveData.status() : playbackStatus;\n+    }\n+\n+    public void shutdown() {\n+        service.shutdown();\n+        frames.forEach(Window::dispose);\n+        System.exit(0);\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/RenderRunner.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"},{"patch":"@@ -2,1305 +2,174 @@\n- * Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n- * Copyright (c) 2016, 2020, Red Hat, Inc. All rights reserved.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-package org.openjdk.shenandoah;\n-\n-import org.HdrHistogram.Histogram;\n-\n-import javax.swing.*;\n-import javax.swing.event.ChangeEvent;\n-import javax.swing.event.ChangeListener;\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.*;\n-\n-import static org.openjdk.shenandoah.RegionState.*;\n-\n-class ShenandoahVisualizer {\n-\n-    private static final int INITIAL_WIDTH = 2000;\n-    private static final int INITIAL_HEIGHT = 1600;\n-    private static final int KILO = 1024;\n-    private static final String PLAYBACK = \"Playback\";\n-    private static final String REALTIME = \"Realtime\";\n-\n-    static int value = 0;\n-\n-    private static ScheduledFuture<?> changeScheduleInterval(int n, ScheduledExecutorService service, ScheduledFuture<?> f, Runnable task) {\n-        if (service == null || f == null) return null;\n-        if (n > 0) {\n-            boolean res = true;\n-            if (f != null) {\n-                res = f.cancel(true);\n-            }\n-            f = service.scheduleAtFixedRate(task, 0, n, TimeUnit.MILLISECONDS);\n-            return f;\n-        }\n-        return null;\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ Command line argument parsing\n-        String vmIdentifier = null;\n-        boolean isReplay = false;\n-        final String[] filePath = {\"\"};\n-\n-        int i = 0;\n-        String arg;\n-        while (i < args.length && args[i].startsWith(\"-\")) {\n-            arg = args[i++];\n-            if (arg.equals(\"-vm\")) {\n-                if (i < args.length) {\n-                    vmIdentifier = args[i++];\n-                } else {\n-                    System.out.println(\"-vm requires a vm identifier\");\n-                    return;\n-                }\n-            } else if (arg.equals(\"-logFile\")) {\n-                if (i < args.length) {\n-                    isReplay = true;\n-                    filePath[0] = args[i++];\n-                } else {\n-                    System.out.println(\"-logFile requires a file path\");\n-                    return;\n-                }\n-            } else {\n-                System.out.println(\"ShenandoahVisualizer: Illegal option \" + arg);\n-                System.out.println(\"Usage: [-vm vmIdentifier] [-logFile filePath]\");\n-                return;\n-            }\n-        }\n-        \/\/\n-\n-        JFrame frame = new JFrame();\n-        frame.setLayout(new GridBagLayout());\n-        frame.setTitle(\"Shenandoah GC Visualizer\");\n-        frame.setSize(INITIAL_WIDTH, INITIAL_HEIGHT);\n-\n-        final RenderRunner renderRunner;\n-        ToolbarPanel toolbarPanel = new ToolbarPanel(isReplay);\n-        int totalSnapshotSize = 0;\n-\n-        if (isReplay) {\n-            DataLogProvider data = new DataLogProvider(filePath[0]);\n-            totalSnapshotSize = data.getSnapshotsSize();\n-            toolbarPanel.setSize(totalSnapshotSize);\n-            toolbarPanel.setSnapshots(data.getSnapshots());\n-            renderRunner = new RenderRunner(data, frame, toolbarPanel);\n-            toolbarPanel.setModeField(PLAYBACK);\n-            toolbarPanel.setEnabledRealtimeModeButton(true);\n-            toolbarPanel.setFileNameField(filePath[0]);\n-        } else {\n-            DataProvider data = new DataProvider(vmIdentifier);\n-            renderRunner = new RenderRunner(data, frame, toolbarPanel);\n-            toolbarPanel.setModeField(REALTIME);\n-            toolbarPanel.setEnabledRealtimeModeButton(false);\n-        }\n-\n-        \/\/ Executors\n-        ScheduledExecutorService service = Executors.newScheduledThreadPool(1);\n-        final ScheduledFuture<?>[] f = {service.scheduleAtFixedRate(renderRunner,\n-                0, renderRunner.isLive ? 100 : 1, TimeUnit.MILLISECONDS)};\n-\n-\n-        JPanel regionsPanel = new JPanel() {\n-            public void paint(Graphics g) {\n-                renderRunner.renderRegions(g);\n-            }\n-        };\n-\n-        JPanel legendPanel = new JPanel() {\n-            @Override\n-            public void paint(Graphics g) {\n-                renderRunner.renderLegend(g);\n-            }\n-        };\n-\n-        JPanel statusPanel = new JPanel() {\n-            @Override\n-            public void paint(Graphics g) {\n-                renderRunner.renderStats(g);\n-            }\n-        };\n-\n-        JPanel graphPanel = new JPanel() {\n-            @Override\n-            public void paint(Graphics g) {\n-                renderRunner.renderGraph(g);\n-            }\n-        };\n-\n-        ActionListener realtimeModeButtonListener = new ActionListener() {\n-            public void actionPerformed(ActionEvent ae) {\n-                DataProvider data = new DataProvider(null);\n-                renderRunner.loadLive(data);\n-                toolbarPanel.setFileNameField(\"\");\n-                f[0] = changeScheduleInterval(100, service, f[0], renderRunner);\n-            }\n-        };\n-        toolbarPanel.setRealtimeModeButtonListener(realtimeModeButtonListener);\n-\n-        ActionListener fileButtonListener = new ActionListener() {\n-            public void actionPerformed(ActionEvent ae) {\n-                JFileChooser fc = new JFileChooser();\n-                int returnValue = fc.showOpenDialog(null);\n-                int totalSnapshotSize = 0;\n-                if (returnValue == JFileChooser.APPROVE_OPTION) {\n-                    filePath[0] = fc.getSelectedFile().getAbsolutePath();\n-                    try {\n-                        DataLogProvider data = new DataLogProvider(filePath[0]);\n-                        renderRunner.loadPlayback(data);\n-                        totalSnapshotSize = data.getSnapshotsSize();\n-                        toolbarPanel.setSize(totalSnapshotSize);\n-                        toolbarPanel.setSnapshots(data.getSnapshots());\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n-                    }\n-                    renderRunner.playback.speed = 1.0;\n-                    toolbarPanel.setSpeedValue(1.0);\n-                    toolbarPanel.setFileNameField(filePath[0]);\n-                    toolbarPanel.setLastActionField(\"File selected: \" + filePath[0]);\n-\n-                    System.out.println(\"Selected file: \" + filePath[0]);\n-                    renderRunner.frame.repaint();\n-\n-                    f[0] = changeScheduleInterval(1, service, f[0], renderRunner);\n-                }\n-\n-                int lastSnapshotIndex = totalSnapshotSize - 1;\n-                toolbarPanel.setEndSnapshotButtonListener((e) -> {if (lastSnapshotIndex > 0) renderRunner.playback.stepForwardSnapshots(lastSnapshotIndex);});\n-            }\n-        };\n-        toolbarPanel.setFileButtonListener(fileButtonListener);\n-\n-        ActionListener playPauseButtonListener = new ActionListener() {\n-            public void actionPerformed(ActionEvent ae) {\n-                if (renderRunner.playback.isPaused) {\n-                    toolbarPanel.setLastActionField(\"Play button pressed.\");\n-                } else {\n-                    toolbarPanel.setLastActionField(\"Pause button pressed.\");\n-                }\n-                renderRunner.playback.isPaused = !renderRunner.playback.isPaused;\n-            }\n-        };\n-\n-        int lastSnapshotIndex = totalSnapshotSize - 1;\n-        KeyAdapter keyShortcutAdapter = new KeyAdapter() {\n-            @Override\n-            public void keyPressed(KeyEvent e) {\n-                super.keyPressed(e);\n-                if (e.getKeyCode() == KeyEvent.VK_LEFT) {\n-                    renderRunner.playback.stepBackSnapshots(1);\n-                }\n-                if (e.getKeyCode() == KeyEvent.VK_DOWN) {\n-                    renderRunner.playback.stepBackSnapshots(5);\n-                }\n-                if (e.getKeyCode() == KeyEvent.VK_SPACE) {\n-                    if (renderRunner.playback.isPaused) {\n-                        toolbarPanel.setLastActionField(\"Play button pressed.\");\n-                    } else {\n-                        toolbarPanel.setLastActionField(\"Pause button pressed.\");\n-                    }\n-                    renderRunner.playback.isPaused = !renderRunner.playback.isPaused;\n-                }\n-                if (e.getKeyCode() == KeyEvent.VK_UP) {\n-                    renderRunner.playback.stepForwardSnapshots(5);\n-                }\n-                if (e.getKeyCode() == KeyEvent.VK_RIGHT) {\n-                    renderRunner.playback.stepForwardSnapshots(1);\n-                }\n-                if (e.getKeyCode() == KeyEvent.VK_ENTER && lastSnapshotIndex > 0) {\n-                    renderRunner.playback.stepForwardSnapshots(lastSnapshotIndex);\n-                }\n-            }\n-        };\n-        toolbarPanel.setPlayPauseButtonListener(playPauseButtonListener);\n-        \/\/ Step back\/forward button listeners\n-        toolbarPanel.setBackButton_1_Listener((ae) -> renderRunner.playback.stepBackSnapshots(1));\n-\n-        toolbarPanel.setBackButton_5_Listener((ae) -> renderRunner.playback.stepBackSnapshots(5));\n-\n-        toolbarPanel.setForwardButton_1_Listener((ae) -> renderRunner.playback.stepForwardSnapshots(1));\n-\n-        toolbarPanel.setForwardButton_5_Listener((ae) -> renderRunner.playback.stepForwardSnapshots(5));\n-\n-        toolbarPanel.setEndSnapshotButtonListener(e -> {if (lastSnapshotIndex > 0) renderRunner.playback.stepForwardSnapshots(lastSnapshotIndex);});\n-\n-        ChangeListener sliderListener = new ChangeListener() {\n-            @Override\n-            public void stateChanged(ChangeEvent e) {\n-                int difference = toolbarPanel.currentSliderValue() - renderRunner.playback.getPopupSnapshotsSize();\n-                if (difference > 0) {\n-                    renderRunner.playback.stepForwardSnapshots(difference);\n-                }\n-                if (difference < 0) {\n-                    renderRunner.playback.stepBackSnapshots(Math.abs(difference));\n-                }\n-\n-            }\n-        };\n-        toolbarPanel.setSliderListener(sliderListener);\n-\n-        \/\/ Speed button listeners\n-        ChangeListener speedSpinnerListener = new ChangeListener() {\n-            @Override\n-            public void stateChanged(ChangeEvent e) {\n-                if (!toolbarPanel.speedButtonPressed) {\n-                    double speed = toolbarPanel.getSpeedValue();\n-                    if (speed != renderRunner.playback.speed) {\n-                        toolbarPanel.setLastActionField(\"Changed playback speed to: \" + speed);\n-                        renderRunner.playback.data.setSpeed(speed);\n-                        renderRunner.playback.speed = speed;\n-                    }\n-                }\n-            }\n-        };\n-        toolbarPanel.setSpeedSpinnerListener(speedSpinnerListener);\n-\n-        ActionListener speed_0_5_Listener = new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                toolbarPanel.speedButtonPressed = true;\n-                double speed = Math.max(0.1, renderRunner.playback.speed * 0.5);\n-                renderRunner.playback.data.setSpeed(speed);\n-                renderRunner.playback.speed = speed;\n-                toolbarPanel.setSpeedValue(speed);\n-                toolbarPanel.speedButtonPressed = false;\n-                toolbarPanel.setLastActionField(\"Multiplied speed by 0.5x. Min speed = 0.1\");\n-            }\n-        };\n-        toolbarPanel.setSpeed_0_5_Listener(speed_0_5_Listener);\n-\n-        ActionListener speed_2_Listener = new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                toolbarPanel.speedButtonPressed = true;\n-                double speed = Math.min(10.0, renderRunner.playback.speed * 2);\n-                renderRunner.playback.data.setSpeed(speed);\n-                renderRunner.playback.speed = speed;\n-                toolbarPanel.setSpeedValue(speed);\n-                toolbarPanel.speedButtonPressed = false;\n-                toolbarPanel.setLastActionField(\"Multiplied speed by 2x. Max speed = 10.0\");\n-            }\n-        };\n-        toolbarPanel.setSpeed_2_Listener(speed_2_Listener);\n-\n-        ActionListener resetSpeedListener = new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                if (renderRunner.playback.speed != 1) {\n-                    toolbarPanel.speedButtonPressed = true;\n-                    renderRunner.playback.data.setSpeed(1.0);\n-                    renderRunner.playback.speed = 1.0;\n-                    toolbarPanel.setSpeedValue(1.0);\n-                    toolbarPanel.speedButtonPressed = false;\n-                    toolbarPanel.setLastActionField(\"Speed reset to 1.0\");\n-                }\n-            }\n-        };\n-        toolbarPanel.setResetSpeedListener(resetSpeedListener);\n-        final int[] regionWidth = new int[1];\n-        final int[] regionHeight = new int[1];\n-        regionsPanel.addComponentListener(new ComponentAdapter() {\n-            public void componentResized(ComponentEvent ev) {\n-                regionWidth[0] = ev.getComponent().getWidth();\n-                regionHeight[0] = ev.getComponent().getHeight();\n-                renderRunner.notifyRegionResized(ev.getComponent().getWidth(), ev.getComponent().getHeight());\n-            }\n-        });\n-        final boolean isReplayFinal = isReplay;\n-        regionsPanel.addMouseListener(new MouseAdapter() {\n-            @Override\n-            public void mouseClicked(MouseEvent e) {\n-                Snapshot snapshot;\n-                if (isReplayFinal) {\n-                    snapshot = renderRunner.playback.snapshot;\n-                } else {\n-                    snapshot = renderRunner.live.snapshot;\n-                }\n-                int area = regionWidth[0] * regionHeight[0];\n-                int sqSize = Math.max(1, (int) Math.sqrt(1D * area \/ snapshot.regionCount()));\n-                int cols = regionWidth[0] \/ sqSize;\n-                int regionNumber = (e.getX() \/ sqSize) + ((e.getY() \/ sqSize) * cols) ;\n-                if (regionNumber >= 0 && regionNumber < snapshot.statsSize()) {\n-                    RegionPopUp popup = new RegionPopUp(regionNumber);\n-                    popup.setSize(450, 450);\n-                    popup.setLocation(e.getX(), e.getY());\n-                    popup.setVisible(true);\n-                    popup.addKeyListener(keyShortcutAdapter);\n-                    popup.addWindowListener(new WindowAdapter() {\n-                        @Override\n-                        public void windowClosing(WindowEvent e) {\n-                            super.windowClosing(e);\n-                            popup.setVisible(false);\n-                            popup.dispose();\n-                            renderRunner.deletePopup(popup);\n-                        }\n-                    });\n-                    renderRunner.addPopup(popup);\n-                }\n-\n-            }\n-\n-        });\n-\n-        graphPanel.addComponentListener(new ComponentAdapter() {\n-            public void componentResized(ComponentEvent ev) {\n-                renderRunner.notifyGraphResized(ev.getComponent().getWidth(), ev.getComponent().getHeight());\n-            }\n-        });\n-\n-        Insets pad = new Insets(10, 10, 10, 10);\n-\n-        {\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 0;\n-            c.gridy = 0;\n-            c.weightx = 3;\n-            c.weighty = 3;\n-            c.insets = pad;\n-            frame.add(graphPanel, c);\n-        }\n-\n-        {\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 0;\n-            c.gridy = 1;\n-            c.weightx = 3;\n-            c.weighty = 4;\n-            c.insets = pad;\n-            c.gridheight = GridBagConstraints.RELATIVE;\n-            frame.add(regionsPanel, c);\n-        }\n-\n-        {\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 0;\n-            c.gridy = 2;\n-            c.insets = pad;\n-            c.weightx = 3;\n-            frame.add(toolbarPanel, c);\n-        }\n-\n-        {\n-            statusPanel.setPreferredSize(new Dimension(25, 175));\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 1;\n-            c.gridy = 0;\n-            c.weightx = 1;\n-            c.weighty = 3.5;\n-            c.insets = pad;\n-            frame.add(statusPanel, c);\n-        }\n-\n-        {\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 1;\n-            c.gridy = 1;\n-            c.weightx = 1;\n-            c.weighty = 1;\n-            c.insets = pad;\n-            c.gridheight = GridBagConstraints.REMAINDER;\n-            frame.add(legendPanel, c);\n-        }\n-\n-        toolbarPanel.addKeyListener(keyShortcutAdapter);\n-        toolbarPanel.setFocusable(true);\n-        toolbarPanel.requestFocusInWindow();\n-\n-        frame.setVisible(true);\n-\n-        frame.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent e) {\n-                f[0].cancel(true);\n-                service.shutdown();\n-                frame.dispose();\n-            }\n-        });\n-        f[0].get();\n-\n-    }\n-\n-    public abstract static class Render {\n-        public static final int LINE = 15;\n-\n-        final JFrame frame;\n-\n-        List<RegionPopUp> popups = new ArrayList<RegionPopUp>();\n-\n-        int regionWidth, regionHeight;\n-        int graphWidth, graphHeight;\n-        final int STEP_X = 4;\n-        final int phaseLabelWidth = 50;\n-\n-        final LinkedList<SnapshotView> lastSnapshots;\n-        final LinkedList<Snapshot> popupSnapshots;\n-        volatile Snapshot snapshot;\n-\n-        public Render(JFrame frame) {\n-            this.frame = frame;\n-            this.lastSnapshots = new LinkedList<>();\n-            this.popupSnapshots = new LinkedList<>();\n-        }\n-\n-        protected static Color getColor(SnapshotView s) {\n-            if (s.youngPhase() != Phase.IDLE) {\n-                return Colors.YOUNG[s.youngPhase().ordinal()];\n-            }\n-            if (s.globalPhase() != Phase.IDLE) {\n-                return Colors.GLOBAL[s.globalPhase().ordinal()];\n-            }\n-            if (s.oldPhase() != Phase.IDLE) {\n-                return Colors.OLD[s.oldPhase().ordinal()];\n-            }\n-            return Colors.TIMELINE_IDLE;\n-        }\n-        protected static Phase getPhase(SnapshotView s) {\n-            if (s.youngPhase() != Phase.IDLE) {\n-                return s.youngPhase();\n-            }\n-            if (s.globalPhase() != Phase.IDLE) {\n-                return s.globalPhase();\n-            }\n-            if (s.oldPhase() != Phase.IDLE) {\n-                return s.oldPhase();\n-            }\n-            return Phase.UNKNOWN;\n-        }\n-\n-        public abstract void renderGraph(Graphics g);\n-\n-        public abstract void renderStats(Graphics g);\n-\n-        public synchronized void renderLegend(Graphics g) {\n-            final int sqSize = LINE;\n-\n-            Map<String, RegionStat> items = new LinkedHashMap<>();\n-\n-            items.put(\"Empty Uncommitted\",\n-                    new RegionStat(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, EMPTY_UNCOMMITTED));\n-\n-            items.put(\"Empty Committed\",\n-                    new RegionStat(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, EMPTY_COMMITTED));\n-\n-            items.put(\"Trash\",\n-                    new RegionStat(1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, TRASH));\n-\n-            items.put(\"TLAB Allocs\",\n-                    new RegionStat(1.0f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, REGULAR));\n-\n-            items.put(\"GCLAB Allocs\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, REGULAR));\n-\n-            items.put(\"PLAB Allocs\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, REGULAR));\n-\n-            items.put(\"Shared Allocs\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f, REGULAR));\n-\n-            items.put(\"Humongous\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, HUMONGOUS));\n-\n-            items.put(\"Humongous + Pinned\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, PINNED_HUMONGOUS));\n-\n-            items.put(\"Collection Set\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, CSET));\n-\n-            items.put(\"Pinned\",\n-                    new RegionStat(1.0f, 1.0f, 0.3f, 0.0f, 0.0f, 0.0f, PINNED));\n-\n-            items.put(\"Pinned CSet\",\n-                    new RegionStat(1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, PINNED_CSET));\n-\n-            items.put(\"Age [0, 3)\", new RegionStat(REGULAR, 0));\n-            items.put(\"Age [3, 6)\", new RegionStat(REGULAR, 3));\n-            items.put(\"Age [6, 9)\", new RegionStat(REGULAR, 6));\n-            items.put(\"Age [9, 12)\", new RegionStat(REGULAR, 9));\n-            items.put(\"Age [12, 15)\", new RegionStat(REGULAR, 12));\n-            items.put(\"Age 15\", new RegionStat(REGULAR, 15));\n-\n-            Map<String, Integer> summaryNumbers = new LinkedHashMap<>();\n-\n-\n-            summaryNumbers.put(\"Empty Uncommitted\", snapshot.getEmptyUncommittedCount());\n-\n-            summaryNumbers.put(\"Empty Committed\", snapshot.getEmptyCommittedCount());\n-\n-            summaryNumbers.put(\"Trash\", snapshot.getTrashCount());\n-\n-            summaryNumbers.put(\"TLAB Allocs\", snapshot.getTlabCount());\n-\n-            summaryNumbers.put(\"GCLAB Allocs\", snapshot.getGclabCount());\n-\n-            summaryNumbers.put(\"PLAB Allocs\", snapshot.getPlabCount());\n-\n-            summaryNumbers.put(\"Shared Allocs\", snapshot.getSharedCount());\n-\n-            summaryNumbers.put(\"Humongous\", snapshot.getHumongousCount());\n-\n-            summaryNumbers.put(\"Humongous + Pinned\", snapshot.getPinnedHumongousCount());\n-\n-            summaryNumbers.put(\"Collection Set\", snapshot.getCSetCount());\n-\n-            summaryNumbers.put(\"Pinned\", snapshot.getPinnedCount());\n-\n-\n-            summaryNumbers.put(\"Pinned CSet\", snapshot.getPinnedCSetCount());\n-\n-            summaryNumbers.put(\"Age [0, 3)\", snapshot.getAge0Count());\n-            summaryNumbers.put(\"Age [3, 6)\", snapshot.getAge3Count());\n-            summaryNumbers.put(\"Age [6, 9)\", snapshot.getAge6Count());\n-            summaryNumbers.put(\"Age [9, 12)\", snapshot.getAge9Count());\n-            summaryNumbers.put(\"Age [12, 15)\", snapshot.getAge12Count());\n-            summaryNumbers.put(\"Age 15\", snapshot.getAge15Count());\n-            int i = 0;\n-            for (String key : items.keySet()) {\n-                int y = (int) (i * sqSize * 1.5);\n-                items.get(key).render(g, 0, y, sqSize, sqSize);\n-                g.setColor(Color.BLACK);\n-                g.drawString(key + \" total: \" + summaryNumbers.get(key).toString(), (int) (sqSize * 1.5), y + sqSize);\n-                i++;\n-            }\n-        }\n-\n-        public synchronized void renderRegions(Graphics g) {\n-            int area = regionWidth * regionHeight;\n-            int sqSize = Math.max(1, (int) Math.sqrt(1D * area \/ snapshot.regionCount()));\n-            int cols = regionWidth \/ sqSize;\n-            int cellSize = sqSize - 2;\n-            for (int i = 0; i < snapshot.regionCount(); i++) {\n-                int rectx = (i % cols) * sqSize;\n-                int recty = (i \/ cols) * sqSize;\n-                RegionStat s = snapshot.get(i);\n-                s.render(g, rectx, recty, cellSize, cellSize);\n-            }\n-        }\n-\n-        protected String collectionMode() {\n-            if (snapshot.isFullActive()) {\n-                return \"Full\";\n-            }\n-            if (snapshot.isDegenActive()) {\n-                return snapshot.isYoungActive() ? \"Degenerate Young\" : \"Degenerate Global\";\n-            }\n-            return snapshot.isYoungActive() ? \"Young\" : \"Global\";\n-        }\n-\n-        protected String liveStatusLine() {\n-            return \"Live (Green): MB: T:\" +\n-                    snapshot.live() \/ ShenandoahVisualizer.KILO + \" Y:\" +\n-                    snapshot.generationStat(RegionAffiliation.YOUNG, RegionStat::live) \/ ShenandoahVisualizer.KILO + \" O:\" +\n-                    snapshot.generationStat(RegionAffiliation.OLD, RegionStat::live) \/ ShenandoahVisualizer.KILO;\n-        }\n-\n-        protected String usageStatusLine() {\n-            return \"Used (White): MB: T:\" +\n-                    snapshot.used() \/ ShenandoahVisualizer.KILO + \" Y:\" +\n-                    snapshot.generationStat(RegionAffiliation.YOUNG, RegionStat::used) \/ ShenandoahVisualizer.KILO + \" O:\" +\n-                    snapshot.generationStat(RegionAffiliation.OLD, RegionStat::used) \/ ShenandoahVisualizer.KILO;\n-        }\n-\n-        protected void renderTimeLineLegendItem(Graphics g, int sqSize, Color color, int lineNumber, String label) {\n-            g.setColor(color);\n-            int y = (int) (lineNumber * LINE * 1.5);\n-            g.fillRect(0, y, sqSize, sqSize);\n-            g.setColor(Color.BLACK);\n-            g.drawString(label, (int) (sqSize * 1.5), y + sqSize);\n-        }\n-\n-        public synchronized void notifyRegionResized(int width, int height) {\n-            this.regionWidth = width;\n-            this.regionHeight = height;\n-        }\n-\n-        public synchronized void notifyGraphResized(int width, int height) {\n-            this.graphWidth = width;\n-            this.graphHeight = height;\n-        }\n-\n-        public void addPopup(RegionPopUp popup) {\n-            popups.add(popup);\n-        }\n-        public void deletePopup(RegionPopUp popup) {\n-            popups.remove(popup);\n-        }\n-        public void repaintPopups() {\n-            if (popups != null) {\n-                for (RegionPopUp popup : popups) {\n-                    popup.setSnapshots(popupSnapshots);\n-                    popup.repaint();\n-                }\n-            }\n-        }\n-    }\n-\n-    public static class RenderLive extends Render {\n-        volatile DataProvider data;\n-        int oneFourthIndex = 0;\n-        int oneHalfIndex = 0;\n-        int threeFourthIndex = 0;\n-\n-        public RenderLive(JFrame frame) {\n-            super(frame);\n-            this.data = new DataProvider(null);\n-            this.snapshot = data.snapshot();\n-        }\n-\n-        public RenderLive(DataProvider data, JFrame frame) {\n-            super(frame);\n-            this.data = data;\n-            this.snapshot = data.snapshot();\n-        }\n-\n-        public synchronized void run() {\n-            Snapshot cur = data.snapshot();\n-            int endBandIndex = (graphWidth - phaseLabelWidth) \/ STEP_X;\n-            if (!cur.equals(snapshot)) {\n-                snapshot = cur;\n-                lastSnapshots.add(new SnapshotView(cur));\n-                popupSnapshots.add(cur);\n-\n-                if (lastSnapshots.size() > endBandIndex) {\n-                    lastSnapshots.removeFirst();\n-                    oneFourthIndex = lastSnapshots.size() \/ 4;\n-                    oneHalfIndex = lastSnapshots.size() \/ 2;\n-                    threeFourthIndex = lastSnapshots.size() * 3 \/ 4;\n-\n-                } else {\n-                    if (lastSnapshots.size() == endBandIndex \/ 4) {\n-                        oneFourthIndex = lastSnapshots.size() - 1;\n-                    }\n-                    if (lastSnapshots.size() == endBandIndex \/ 2) {\n-                        oneHalfIndex = lastSnapshots.size() - 1;\n-                    }\n-                    if (lastSnapshots.size() == endBandIndex * 3 \/ 4) {\n-                        threeFourthIndex = lastSnapshots.size() - 1;\n-                    }\n-                }\n-                frame.repaint();\n-                repaintPopups();\n-            }\n-        }\n-\n-        public synchronized void loadDataProvider(DataProvider data) {\n-            closeDataProvider();\n-            this.data = data;\n-            this.lastSnapshots.clear();\n-            this.popupSnapshots.clear();\n-            this.snapshot = data.snapshot();\n-        }\n-\n-        public synchronized void closeDataProvider() {\n-            if (this.data != null) {\n-                data.stopConnector();\n-            }\n-            this.data = null;\n-        }\n-\n-        public synchronized void renderGraph(Graphics g) {\n-            if (lastSnapshots.size() < 2) return;\n-\n-            int pad = 30;\n-            int bandHeight = (graphHeight - pad) \/ 2;\n-            int bandWidth = graphWidth - phaseLabelWidth;\n-            int phaseHeight = bandHeight \/ 4;\n-            double stepY = 1D * bandHeight \/ snapshot.total();\n-\n-            int startRaw  = graphHeight - bandHeight - pad;\n-\n-            g.setColor(Color.WHITE);\n-            g.fillRect(0, 0, bandWidth, graphHeight);\n-\n-            g.setColor(Color.BLACK);\n-            g.fillRect(0, 0, bandWidth, bandHeight);\n-            g.fillRect(0, bandHeight + pad, bandWidth, bandHeight);\n-\n-            long firstTime = lastSnapshots.getFirst().time();\n-            long lastTime = lastSnapshots.getLast().time();\n-            double stepX = (double) STEP_X * Math.min(lastSnapshots.size(), bandWidth) \/ (lastTime - firstTime);\n-\n-            for (int i = 0; i < lastSnapshots.size(); i++) {\n-                SnapshotView s = lastSnapshots.get(i);\n-                int x = (int) Math.round((s.time() - firstTime) * stepX);\n-\n-                if (s.globalPhase() == Phase.IDLE) {\n-                    if (s.oldPhase() == Phase.MARKING) {\n-                        g.setColor(Colors.OLD[0]);\n-                        g.drawRect(x, bandHeight + pad, 1, phaseHeight);\n-                    } else if (s.oldPhase() == Phase.EVACUATING) {\n-                        g.setColor(Colors.OLD[1]);\n-                        g.drawRect(x, bandHeight + pad + 2*phaseHeight, 1, phaseHeight);\n-                    }\n-                }\n-\n-                if (s.oldCsetPercentage() > 0) {\n-                    int height = (int) (bandHeight * s.oldCsetPercentage());\n-                    g.setColor(Colors.OLD[0]);\n-                    g.drawRect(x, 2*bandHeight + pad - height, 1, height);\n-                }\n-\n-                g.setColor(getColor(s));\n-                if (getPhase(s) == Phase.MARKING) {\n-                    g.drawRect(x, bandHeight + pad + phaseHeight, 1, phaseHeight);\n-                }\n-                if (getPhase(s) == Phase.EVACUATING) {\n-                    g.drawRect(x, bandHeight + pad + 2*phaseHeight, 1, phaseHeight);\n-                }\n-                if (getPhase(s) == Phase.UPDATE_REFS) {\n-                    g.drawRect(x, bandHeight + pad + 3*phaseHeight, 1, phaseHeight);\n-                }\n-\n-\n-\n-                if (s.isFullActive()) {\n-                    g.setColor(Colors.FULL);\n-                    g.drawRect(x, bandHeight + pad, 1, 10);\n-                } else if (s.isDegenActive()) {\n-                    g.setColor(Colors.DEGENERATE);\n-                    g.drawRect(x, bandHeight + pad, 1, 10);\n-                }\n-\n-                \/\/ Draw these in the upper band.\n-                g.setColor(Colors.USED);\n-                g.drawRect(x, (int) Math.round(startRaw - s.used() * stepY), 1, 1);\n-                g.setColor(Colors.LIVE_REGULAR);\n-                g.drawRect(x, (int) Math.round(startRaw - s.live() * stepY), 1, 1);\n-                g.setColor(Colors.LIVE_CSET);\n-                g.drawRect(x, (int) Math.round(startRaw - s.collectionSet() * stepY), 1, 1);\n-\n-                g.setColor(Color.GRAY);\n-                g.drawString(\"OM\", bandWidth + 10, bandHeight + pad + 20);\n-                g.drawString(\"M\", bandWidth + 10, bandHeight + phaseHeight + pad + 20);\n-                g.drawString(\"E\", bandWidth + 10, bandHeight + 2*phaseHeight + pad + 20);\n-                g.drawString(\"UR\", bandWidth + 10, bandHeight + 3*phaseHeight + pad + 20);\n-\n-                renderTimestampLabel(g);\n-            }\n-        }\n-        public synchronized void renderTimestampLabel(Graphics g) {\n-            int pad = 30;\n-            int bandHeight = (graphHeight - pad) \/ 2;\n-            int bandWidth = graphWidth - phaseLabelWidth;\n-            int endBandIndex = (graphWidth - phaseLabelWidth) \/ STEP_X;\n-\n-            Graphics2D g2 = (Graphics2D) g;\n-            g2.setStroke(new BasicStroke(2));\n-            g2.drawLine(0, bandHeight + 5, 0, bandHeight + pad - 5);\n-            g2.drawLine(bandWidth \/ 4, bandHeight + 5, bandWidth \/ 4, bandHeight + pad - 5);\n-            g2.drawLine(bandWidth \/ 2, bandHeight + 5, bandWidth \/ 2, bandHeight + pad - 5);\n-            g2.drawLine(bandWidth * 3 \/ 4, bandHeight + 5, bandWidth * 3 \/ 4, bandHeight + pad - 5);\n-\n-            g.drawString(\"-\" + Long.toString(lastSnapshots.get(lastSnapshots.size() - 1). time() - lastSnapshots.get(0).time()) + \" ms\", 3, bandHeight + 20);\n-\n-            if (lastSnapshots.size() > endBandIndex \/ 4 ) {\n-                g.drawString(\"-\" + Long.toString(lastSnapshots.get(lastSnapshots.size() - 1). time() - lastSnapshots.get(oneFourthIndex).time()) + \" ms\", bandWidth \/ 4 + 3, bandHeight + 20);\n-            }\n-            if (lastSnapshots.size() > endBandIndex \/ 2) {\n-                g.drawString(\"-\" + Long.toString(lastSnapshots.get(lastSnapshots.size() - 1). time() - lastSnapshots.get(oneHalfIndex).time()) + \" ms\", bandWidth \/ 2 + 3, bandHeight + 20);\n-            }\n-            if (lastSnapshots.size() > endBandIndex * 3 \/ 4) {\n-                g.drawString(\"-\" + Long.toString(lastSnapshots.get(lastSnapshots.size() - 1). time() - lastSnapshots.get(threeFourthIndex).time()) + \" ms\", bandWidth * 3 \/ 4 + 3, bandHeight + 20);\n-            }\n-        }\n-\n-        public synchronized void renderStats(Graphics g) {\n-            String mode = collectionMode();\n-            String status = \"\";\n-            switch (snapshot.phase()) {\n-                case IDLE:\n-                    status += \" Idle\";\n-                    mode = \"\";\n-                    break;\n-                case MARKING:\n-                    status += \" Marking\";\n-                    if (snapshot.getOldPhase() == Phase.MARKING) {\n-                        status += \" (Old)\";\n-                    }\n-                    break;\n-                case EVACUATING:\n-                    status += \" Evacuating\";\n-                    break;\n-                case UPDATE_REFS:\n-                    status += \" Updating Refs\";\n-                    break;\n-                case UNKNOWN:\n-                    status += \" Unknown\";\n-                    break;\n-            }\n-\n-            int line = 0;\n-\n-            g.setColor(Color.BLACK);\n-            g.drawString(\"Status: \" + data.status(), 0, ++line * LINE);\n-            g.drawString(\"GC: \" + status, 0, ++line * LINE);\n-            g.drawString(\"Mode: \" + mode, 0, ++line * LINE);\n-            g.drawString(\"Total: \" + (snapshot.total() \/ KILO) + \" MB\", 0, ++line * LINE);\n-            g.drawString(usageStatusLine(), 0, ++line * LINE);\n-            g.drawString(liveStatusLine(), 0, ++line * LINE);\n-\n-            Histogram histogram = snapshot.getSafepointTime();\n-            String pausesText = String.format(\"GC Pauses: P100=%d, P95=%d, P90=%d\",\n-                    histogram.getMaxValue(), histogram.getValueAtPercentile(95), histogram.getValueAtPercentile(90));\n-            g.drawString(pausesText, 0, ++line * LINE);\n-\n-            line = 4;\n-            renderTimeLineLegendItem(g, LINE, Colors.OLD[1], ++line, \"Old Marking (OM)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[1], ++line, \"Young Marking (M)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[2], ++line, \"Young Evacuation (E)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[3], ++line, \"Young Update References (UR)\");\n-\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[1], ++line, \"Global Marking (M)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[2], ++line, \"Global Evacuation (E)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[3], ++line, \"Global Update References (UR)\");\n-\n-            renderTimeLineLegendItem(g, LINE, Colors.DEGENERATE, ++line, \"Degenerated Cycle\");\n-            renderTimeLineLegendItem(g, LINE, Colors.FULL, ++line, \"Full\");\n-        }\n-    }\n-\n-    public static class RenderPlayback extends Render {\n-        volatile DataLogProvider data;\n-        volatile boolean isPaused;\n-\n-        volatile double speed = 1.0;\n-        volatile int frontSnapshotIndex = 0;\n-        volatile int endSnapshotIndex = 0;\n-        int oneFourthIndex = 0;\n-        int oneHalfIndex = 0;\n-        int threeFourthIndex = 0;\n-\n-        ToolbarPanel toolbarPanel;\n-\n-        public RenderPlayback(JFrame frame, ToolbarPanel toolbarPanel) {\n-            super(frame);\n-            this.toolbarPanel = toolbarPanel;\n-            this.snapshot = null;\n-            this.isPaused = true;\n-        }\n-\n-        public RenderPlayback(DataLogProvider data, JFrame frame, ToolbarPanel toolbarPanel) {\n-            super(frame);\n-            this.toolbarPanel = toolbarPanel;\n-            this.data = data;\n-            this.snapshot = data.snapshot();\n-            this.isPaused = false;\n-        }\n-        public void updateTimestampLabelIndexes() {\n-            int endBandIndex = (graphWidth - phaseLabelWidth) \/ STEP_X;\n-            if (frontSnapshotIndex > 0) {\n-                oneFourthIndex = frontSnapshotIndex + (endSnapshotIndex - frontSnapshotIndex) \/ 4;\n-                oneHalfIndex = frontSnapshotIndex + (endSnapshotIndex - frontSnapshotIndex) \/ 2;\n-                threeFourthIndex = frontSnapshotIndex + (endSnapshotIndex - frontSnapshotIndex) * 3 \/ 4;\n-            } else {\n-                if (endSnapshotIndex == endBandIndex \/ 4) {\n-                    oneFourthIndex = endSnapshotIndex - 1;\n-                }\n-                if (endSnapshotIndex == endBandIndex \/ 2) {\n-                    oneHalfIndex = endSnapshotIndex - 1;\n-                }\n-                if (endSnapshotIndex == endBandIndex * 3 \/ 4) {\n-                    threeFourthIndex = endSnapshotIndex - 1;\n-                }\n-            }\n-        }\n-\n-        public synchronized void run() {\n-            int endBandIndex = (graphWidth - phaseLabelWidth) \/ STEP_X;\n-            if (!isPaused) {\n-                if (!data.stopwatch.isStarted()) {\n-                    data.controlStopwatch(\"START\");\n-                }\n-                if (endSnapshotIndex < lastSnapshots.size()) {\n-                    int i = Math.max(endSnapshotIndex, 0);\n-                    long time = lastSnapshots.get(i).time();\n-                    snapshot = data.getSnapshotAtTime(time);\n-                    if (data.snapshotTimeHasOccurred(snapshot)) {\n-                        popupSnapshots.add(snapshot);\n-                        toolbarPanel.setValue(popupSnapshots.size());\n-                        endSnapshotIndex++;\n-                        frame.repaint();\n-                        repaintPopups();\n-                    }\n-                    if (endSnapshotIndex - frontSnapshotIndex > endBandIndex) {\n-                        frontSnapshotIndex++;\n-                    }\n-                } else {\n-                    Snapshot cur = data.snapshot();\n-                    if (!cur.equals(snapshot)) {\n-                        snapshot = cur;\n-                        lastSnapshots.add(new SnapshotView(cur));\n-                        popupSnapshots.add(cur);\n-                        endSnapshotIndex = lastSnapshots.size();\n-                        if (lastSnapshots.size() - frontSnapshotIndex > endBandIndex) {\n-                            frontSnapshotIndex++;\n-                        }\n-                        toolbarPanel.setValue(popupSnapshots.size());\n-                        frame.repaint();\n-                        repaintPopups();\n-                    }\n-                }\n-                updateTimestampLabelIndexes();\n-                if (data.isEndOfSnapshots() && endSnapshotIndex >= lastSnapshots.size()) {\n-                    toolbarPanel.setValue(popupSnapshots.size());\n-                    System.out.println(\"Should only enter here at end of snapshots.\");\n-                    data.controlStopwatch(\"STOP\");\n-                    isPaused = true;\n-                }\n-            } else {\n-                updateTimestampLabelIndexes();\n-                repaintPopups();\n-                if (data.stopwatch.isStarted()) {\n-                    data.controlStopwatch(\"STOP\");\n-                }\n-            }\n-        }\n-\n-        public synchronized void stepBackSnapshots(int n) {\n-            if (lastSnapshots.size() == 0) return;\n-\n-            frontSnapshotIndex = Math.max(frontSnapshotIndex - n, 0);\n-            endSnapshotIndex = Math.max(endSnapshotIndex - n, 0);\n-\n-            int i = Math.max(endSnapshotIndex - 1, 0);\n-            long time = lastSnapshots.get(i).time();\n-            data.setStopwatchTime(TimeUnit.MILLISECONDS.toNanos(time));\n-\n-            snapshot = data.getSnapshotAtTime(time);\n-\n-            for (int j = 0; j < n; j++) {\n-                if (popupSnapshots.size() > 0) {\n-                    popupSnapshots.remove(popupSnapshots.size() - 1);\n-                }\n-            }\n-            updateTimestampLabelIndexes();\n-            toolbarPanel.setValue(popupSnapshots.size());\n-\n-            frame.repaint();\n-            repaintPopups();\n-        }\n-\n-        public synchronized void stepForwardSnapshots(int n) {\n-            if (lastSnapshots.size() == 0) return;\n-\n-            int endBandIndex = (graphWidth - phaseLabelWidth) \/ STEP_X;\n-            for (int i = 0; i < n; i++) {\n-                if (endSnapshotIndex < lastSnapshots.size()) {\n-                    int index = Math.max(endSnapshotIndex, 0);\n-                    long time = lastSnapshots.get(index).time();\n-                    snapshot = data.getSnapshotAtTime(time);\n-                    popupSnapshots.add(snapshot);\n-                    toolbarPanel.setValue(popupSnapshots.size());\n-                } else {\n-                    \/\/ keep processing snapshots from logData until it reaches a diff snapshot from this.snapshot\n-                    Snapshot cur = data.getNextSnapshot();\n-                    while (cur == snapshot && !data.isEndOfSnapshots()) {\n-                        cur = data.getNextSnapshot();\n-                    }\n-                    if (data.isEndOfSnapshots()) break;\n-\n-                    snapshot = cur;\n-                    lastSnapshots.add(new SnapshotView(cur));\n-                    popupSnapshots.add(cur);\n-                    toolbarPanel.setValue(popupSnapshots.size());\n-                }\n-                updateTimestampLabelIndexes();\n-                data.setStopwatchTime(TimeUnit.MILLISECONDS.toNanos(snapshot.time()));\n-                endSnapshotIndex++;\n-            }\n-\n-            while (endSnapshotIndex - frontSnapshotIndex > endBandIndex) {\n-                frontSnapshotIndex++;\n-            }\n-\n-            frame.repaint();\n-            repaintPopups();\n-        }\n-\n-        private synchronized void loadLogDataProvider(DataLogProvider data) {\n-            this.data = data;\n-            this.lastSnapshots.clear();\n-            this.popupSnapshots.clear();\n-            this.snapshot = data.snapshot();\n-            this.isPaused = false;\n-            this.speed = 1.0;\n-            endSnapshotIndex = 0;\n-            frontSnapshotIndex = 0;\n-        }\n-\n-        public synchronized void renderGraph(Graphics g) {\n-            if (endSnapshotIndex - frontSnapshotIndex < 2) return;\n-\n-            int pad = 30;\n-            int bandHeight = (graphHeight - pad) \/ 2;\n-            int bandWidth  = graphWidth - phaseLabelWidth;\n-            int phaseHeight = bandHeight \/ 4;\n-            double stepY = 1D * bandHeight \/ snapshot.total();\n-\n-            int startRaw  = graphHeight - bandHeight - pad;\n-\n-            g.setColor(Color.WHITE);\n-            g.fillRect(0, 0, bandWidth, graphHeight);\n-\n-            g.setColor(Color.BLACK);\n-            g.fillRect(0, 0, bandWidth, bandHeight);\n-            g.fillRect(0, bandHeight + pad, bandWidth, bandHeight);\n-\n-            long firstTime = lastSnapshots.get(frontSnapshotIndex).time();\n-            long lastTime = lastSnapshots.get(endSnapshotIndex - 1).time();\n-            double stepX = (double) STEP_X * Math.min(endSnapshotIndex - frontSnapshotIndex, bandWidth) \/ (lastTime - firstTime);\n-\n-            for (int i = frontSnapshotIndex; i < endSnapshotIndex; i++) {\n-                SnapshotView s = lastSnapshots.get(i);\n-                int x = (int) Math.round((s.time() - firstTime) * stepX);\n-\n-                if (s.oldPhase() == Phase.MARKING && s.globalPhase() == Phase.IDLE) {\n-                    g.setColor(Colors.OLD[0]);\n-                    g.drawRect(x, bandHeight + pad, 1, phaseHeight);\n-                }\n-\n-                if (s.oldCsetPercentage() > 0) {\n-                    int height = (int) (bandHeight * s.oldCsetPercentage());\n-                    g.setColor(Colors.OLD[0]);\n-                    g.drawRect(x, 2*bandHeight + pad - height, 1, height);\n-                }\n-\n-                g.setColor(getColor(s));\n-                if (getPhase(s) == Phase.MARKING) {\n-                    g.drawRect(x, bandHeight + pad + phaseHeight, 1, phaseHeight);\n-                }\n-                if (getPhase(s) == Phase.EVACUATING) {\n-                    g.drawRect(x, bandHeight + pad + 2*phaseHeight, 1, phaseHeight);\n-                }\n-                if (getPhase(s) == Phase.UPDATE_REFS) {\n-                    g.drawRect(x, bandHeight + pad + 3*phaseHeight, 1, phaseHeight);\n-                }\n-\n-                if (s.isFullActive()) {\n-                    g.setColor(Colors.FULL);\n-                    g.drawRect(x, bandHeight + pad, 1, 10);\n-                } else if (s.isDegenActive()) {\n-                    g.setColor(Colors.DEGENERATE);\n-                    g.drawRect(x, bandHeight + pad, 1, 10);\n-                }\n-\n-                \/\/ Draw these in the upper band.\n-                g.setColor(Colors.USED);\n-                g.drawRect(x, (int) Math.round(startRaw - s.used() * stepY), 1, 1);\n-                g.setColor(Colors.LIVE_REGULAR);\n-                g.drawRect(x, (int) Math.round(startRaw - s.live() * stepY), 1, 1);\n-                g.setColor(Colors.LIVE_CSET);\n-                g.drawRect(x, (int) Math.round(startRaw - s.collectionSet() * stepY), 1, 1);\n-\n-                g.setColor(Color.GRAY);\n-                g.drawString(\"OM\", bandWidth + 10, bandHeight + pad + 20);\n-                g.drawString(\"M\", bandWidth + 10, bandHeight + phaseHeight + pad + 20);\n-                g.drawString(\"E\", bandWidth + 10, bandHeight + 2*phaseHeight + pad + 20);\n-                g.drawString(\"UR\", bandWidth + 10, bandHeight + 3*phaseHeight + pad + 20);\n-\n-\n-                Graphics2D g2 = (Graphics2D) g;\n-                g2.setStroke(new BasicStroke(2));\n-                g2.drawLine(0, bandHeight + 5, 0, bandHeight + pad - 5);\n-                g2.drawLine(bandWidth \/ 4, bandHeight + 5, bandWidth \/ 4, bandHeight + pad - 5);\n-                g2.drawLine(bandWidth \/ 2, bandHeight + 5, bandWidth \/ 2, bandHeight + pad - 5);\n-                g2.drawLine(bandWidth * 3 \/ 4, bandHeight + 5, bandWidth * 3 \/ 4, bandHeight + pad - 5);\n-\n-                g.drawString(\"-\" + Long.toString(popupSnapshots.get(popupSnapshots.size() - 1).time() - popupSnapshots.get(frontSnapshotIndex).time()) + \" ms\", 3, bandHeight + 20);\n-                if (x >= bandWidth \/ 4 && popupSnapshots.size() > oneFourthIndex) {\n-                    g.drawString(\"-\" + Long.toString(popupSnapshots.get(popupSnapshots.size() - 1).time() - popupSnapshots.get(oneFourthIndex).time()) + \" ms\", bandWidth \/ 4 + 3, bandHeight + 20);\n-                }\n-                if (x >= bandWidth \/ 2 && popupSnapshots.size() > oneHalfIndex) {\n-                    g.drawString(\"-\" + Long.toString(popupSnapshots.get(popupSnapshots.size() - 1).time() -popupSnapshots.get(oneHalfIndex).time()) + \" ms\", bandWidth \/ 2 + 3, bandHeight + 20);\n-                }\n-                if (x >= bandWidth * 3 \/ 4 && popupSnapshots.size() > threeFourthIndex) {\n-                    g.drawString(\"-\" + Long.toString(popupSnapshots.get(popupSnapshots.size() - 1).time() - popupSnapshots.get(threeFourthIndex).time()) + \" ms\", bandWidth * 3 \/ 4 + 3, bandHeight + 20);\n-                }\n-\n-            }\n-        }\n-\n-        public synchronized void renderStats(Graphics g) {\n-            String mode = collectionMode();\n-            String status = \"\";\n-            switch (snapshot.phase()) {\n-                case IDLE:\n-                    status += \" Idle\";\n-                    mode = \"\";\n-                    break;\n-                case MARKING:\n-                    status += \" Marking\";\n-                    if (snapshot.getOldPhase() == Phase.MARKING) {\n-                        status += \" (Old)\";\n-                    }\n-                    break;\n-                case EVACUATING:\n-                    status += \" Evacuating\";\n-                    break;\n-                case UPDATE_REFS:\n-                    status += \" Updating Refs\";\n-                    break;\n-                case UNKNOWN:\n-                    status += \" Unknown\";\n-                    break;\n-            }\n-\n-            int line = 0;\n-\n-            g.setColor(Color.BLACK);\n-            g.drawString(\"GC: \" + status, 0, ++line * LINE);\n-            g.drawString(\"Mode: \" + mode, 0, ++line * LINE);\n-            g.drawString(\"Total: \" + (snapshot.total() \/ KILO) + \" MB\", 0, ++line * LINE);\n-            g.drawString(usageStatusLine(), 0, ++line * LINE);\n-            g.drawString(liveStatusLine(), 0, ++line * LINE);\n-\n-            line = 4;\n-            renderTimeLineLegendItem(g, LINE, Colors.OLD[1], ++line, \"Old Marking (OM)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[1], ++line, \"Young Marking (M)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[2], ++line, \"Young Evacuation (E)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.YOUNG[3], ++line, \"Young Update References (UR)\");\n-\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[1], ++line, \"Global Marking (M)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[2], ++line, \"Global Evacuation (E)\");\n-            renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[3], ++line, \"Global Update References (UR)\");\n-\n-            renderTimeLineLegendItem(g, LINE, Colors.DEGENERATE, ++line, \"Degenerated Young\");\n-            renderTimeLineLegendItem(g, LINE, Colors.FULL, ++line, \"Full\");\n-        }\n-\n-        public int getPopupSnapshotsSize() {\n-            return popupSnapshots.size();\n-        }\n-\n-    }\n-\n-    public static class RenderRunner implements Runnable {\n-        final RenderLive live;\n-        final RenderPlayback playback;\n-\n-        final JFrame frame;\n-        private boolean isLive;\n-\n-        public RenderRunner(DataProvider data, JFrame frame, ToolbarPanel toolbarPanel) {\n-            this.frame = frame;\n-            live = new RenderLive(data, frame);\n-            playback = new RenderPlayback(frame, toolbarPanel);\n-            isLive = true;\n-        }\n-\n-        public RenderRunner(DataLogProvider data, JFrame frame, ToolbarPanel toolbarPanel) {\n-            this.frame = frame;\n-            live = new RenderLive(frame);\n-            live.closeDataProvider();\n-            playback = new RenderPlayback(data, frame, toolbarPanel);\n-            isLive = false;\n-        }\n-\n-        public synchronized void loadPlayback(DataLogProvider data) {\n-            if (isLive) {\n-                live.closeDataProvider();\n-            }\n-            isLive = false;\n-            playback.loadLogDataProvider(data);\n-        }\n-\n-        public synchronized void loadLive(DataProvider data) {\n-            if (!isLive) {\n-                isLive = true;\n-                live.loadDataProvider(data);\n-            }\n-        }\n-\n-        public synchronized void run() {\n-            if (isLive) {\n-                live.run();\n-            } else {\n-                playback.run();\n-            }\n-        }\n-\n-        public synchronized void renderGraph(Graphics g) {\n-            if (isLive) {\n-                live.renderGraph(g);\n-            } else {\n-                playback.renderGraph(g);\n-            }\n-        }\n-\n-        public synchronized void renderStats(Graphics g) {\n-            if (isLive) {\n-                live.renderStats(g);\n-            } else {\n-                playback.renderStats(g);\n-            }\n-        }\n-\n-        public synchronized void renderRegions(Graphics g) {\n-            if (isLive) {\n-                live.renderRegions(g);\n-            } else {\n-                playback.renderRegions(g);\n-            }\n-        }\n-        public synchronized void renderLegend(Graphics g) {\n-            if (isLive) {\n-                live.renderLegend(g);\n-            } else {\n-                playback.renderLegend(g);\n-            }\n-        }\n-\n-        public synchronized void notifyRegionResized(int width, int height) {\n-            live.notifyRegionResized(width, height);\n-            playback.notifyRegionResized(width, height);\n-        }\n-\n-        public synchronized void notifyGraphResized(int width, int height) {\n-            live.notifyGraphResized(width, height);\n-            playback.notifyGraphResized(width, height);\n-        }\n-        public void addPopup(RegionPopUp popup) {\n-            if (isLive) {\n-                this.live.addPopup(popup);\n-            } else {\n-                this.playback.addPopup(popup);\n-            }\n-        }\n-        public void deletePopup(RegionPopUp popup) {\n-            if (isLive) {\n-                this.live.deletePopup(popup);\n-            } else {\n-                this.playback.deletePopup(popup);\n-            }\n-        }\n-    }\n-}\n+  * Copyright (c) 2021, 2023, Amazon.com, Inc. All rights reserved.\n+  * Copyright (c) 2016, 2023, Red Hat, Inc. All rights reserved.\n+  *\n+  * This code is free software; you can redistribute it and\/or modify it\n+  * under the terms of the GNU General Public License version 2 only, as\n+  * published by the Free Software Foundation.\n+  *\n+  * This code is distributed in the hope that it will be useful, but WITHOUT\n+  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+  * version 2 for more details (a copy is included in the LICENSE file that\n+  * accompanied this code).\n+  *\n+  * You should have received a copy of the GNU General Public License version\n+  * 2 along with this work; if not, write to the Free Software Foundation,\n+  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+  *\n+  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+  * or visit www.oracle.com if you need additional information or have any\n+  * questions.\n+  *\n+  *\/\n+ package org.openjdk.shenandoah;\n+\n+ import javax.swing.*;\n+ import java.awt.*;\n+ import java.awt.event.KeyAdapter;\n+ import java.awt.event.KeyEvent;\n+ import java.awt.event.WindowAdapter;\n+ import java.awt.event.WindowEvent;\n+\n+ class ShenandoahVisualizer extends JFrame {\n+\n+     public static void main(String[] args) {\n+         String vmIdentifier = null;\n+         String filePath = null;\n+\n+         int i = 0;\n+         String arg;\n+         while (i < args.length && args[i].startsWith(\"-\")) {\n+             arg = args[i++];\n+             if (arg.equals(\"-vm\")) {\n+                 if (i < args.length) {\n+                     vmIdentifier = args[i++];\n+                 } else {\n+                     System.out.println(\"-vm requires a vm identifier\");\n+                     return;\n+                 }\n+             } else if (arg.equals(\"-logFile\")) {\n+                 if (i < args.length) {\n+                     filePath = args[i++];\n+                 } else {\n+                     System.out.println(\"-logFile requires a file path\");\n+                     return;\n+                 }\n+             } else {\n+                 System.out.println(\"ShenandoahVisualizer: Illegal option \" + arg);\n+                 System.out.println(\"Usage: [-vm vmIdentifier] [-logFile filePath]\");\n+                 return;\n+             }\n+         }\n+\n+         ShenandoahVisualizer visualizer = new ShenandoahVisualizer(filePath, vmIdentifier);\n+         visualizer.setVisible(true);\n+     }\n+\n+     public ShenandoahVisualizer(String filePath, String vmIdentifier) {\n+         setLayout(new BorderLayout());\n+         setTitle(\"Shenandoah GC Visualizer\");\n+         setSize(LayoutConstants.INITIAL_WIDTH, LayoutConstants.INITIAL_HEIGHT);\n+\n+         final RenderRunner renderRunner = new RenderRunner(this);\n+\n+         KeyAdapter keyShortcutAdapter = new KeyboardShortcuts(renderRunner);\n+\n+         JPanel content = new JPanel(new GridBagLayout());\n+         JPanel legendPanel = new LegendPanel(renderRunner);\n+         JPanel statusPanel = new StatusPanel(renderRunner);\n+         JPanel graphPanel = new GraphPanel(renderRunner);\n+         JPanel regionsPanel = new RegionPanel(renderRunner, keyShortcutAdapter);\n+\n+         if (filePath != null) {\n+             renderRunner.loadPlayback(filePath);\n+         } else {\n+             renderRunner.loadLive(vmIdentifier);\n+         }\n+\n+         Insets pad = new Insets(10, 10, 10, 10);\n+\n+         {\n+             GridBagConstraints c = new GridBagConstraints();\n+             c.fill = GridBagConstraints.BOTH;\n+             c.gridx = 0;\n+             c.gridy = 0;\n+             c.weightx = 0.9;\n+             c.weighty = 0.1;\n+             c.insets = pad;\n+             content.add(graphPanel, c);\n+         }\n+\n+         {\n+             GridBagConstraints c = new GridBagConstraints();\n+             c.fill = GridBagConstraints.BOTH;\n+             c.gridx = 0;\n+             c.gridy = 1;\n+             c.weightx = 0.9;\n+             c.weighty = 0.9;\n+             c.insets = pad;\n+             c.gridheight = GridBagConstraints.RELATIVE;\n+             content.add(regionsPanel, c);\n+         }\n+\n+         {\n+             statusPanel.setPreferredSize(new Dimension(25, 175));\n+             GridBagConstraints c = new GridBagConstraints();\n+             c.fill = GridBagConstraints.BOTH;\n+             c.gridx = 1;\n+             c.gridy = 0;\n+             c.weightx = 0.1;\n+             c.weighty = 0.5;\n+             c.insets = pad;\n+             content.add(statusPanel, c);\n+         }\n+\n+         {\n+             GridBagConstraints c = new GridBagConstraints();\n+             c.fill = GridBagConstraints.BOTH;\n+             c.gridx = 1;\n+             c.gridy = 1;\n+             c.weightx = 0.1;\n+             c.weighty = 0.5;\n+             c.insets = pad;\n+             c.gridheight = GridBagConstraints.REMAINDER;\n+             content.add(legendPanel, c);\n+         }\n+\n+         var toolbarPanel = new ToolbarPanel(renderRunner, keyShortcutAdapter);\n+         toolbarPanel.setFocusable(true);\n+         toolbarPanel.requestFocusInWindow();\n+         if (filePath != null) {\n+             toolbarPanel.setFileNameField(filePath);\n+         }\n+\n+         add(toolbarPanel, BorderLayout.SOUTH);\n+         add(content, BorderLayout.CENTER);\n+\n+         addWindowListener(new WindowAdapter() {\n+             public void windowClosing(WindowEvent e) {\n+                 renderRunner.shutdown();\n+             }\n+         });\n+     }\n+\n+     private static class KeyboardShortcuts extends KeyAdapter {\n+         private final RenderRunner renderRunner;\n+\n+         public KeyboardShortcuts(RenderRunner renderRunner) {\n+             this.renderRunner = renderRunner;\n+         }\n+\n+         @Override\n+         public void keyPressed(KeyEvent e) {\n+             super.keyPressed(e);\n+             switch (e.getKeyCode()) {\n+                 case KeyEvent.VK_LEFT -> renderRunner.stepBy(-1);\n+                 case KeyEvent.VK_DOWN -> renderRunner.stepBy(-5);\n+                 case KeyEvent.VK_RIGHT -> renderRunner.stepBy(1);\n+                 case KeyEvent.VK_UP -> renderRunner.stepBy(5);\n+                 case KeyEvent.VK_SPACE -> renderRunner.togglePlayback();\n+                 case KeyEvent.VK_ENTER -> renderRunner.stepToEnd();\n+             }\n+         }\n+     }\n+ }\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/ShenandoahVisualizer.java","additions":174,"deletions":1305,"binary":false,"changes":1479,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n@@ -32,1 +32,17 @@\n-public class Snapshot {\n+public class Snapshot implements Timed {\n+    protected String collectionMode() {\n+        if (phase() == Phase.IDLE) {\n+            return \"\";\n+        }\n+\n+        if (isFullActive()) {\n+            return \"Full\";\n+        }\n+\n+        if (isDegenActive()) {\n+            return isYoungActive() ? \"Degenerate Young\" : \"Degenerate Global\";\n+        }\n+\n+        return isYoungActive() ? \"Young\" : \"Global\";\n+    }\n+\n@@ -54,1 +70,1 @@\n-        \/\/decodes for 3 bits older versions of shenandoah collector\n+        \/\/ Decode 3 bits for older versions of shenandoah collector\n@@ -104,1 +120,1 @@\n-        \/\/decodes differently according to different version value\n+        \/\/ Decode differently according to different version value\n@@ -147,8 +163,0 @@\n-    public boolean isOldActive() {\n-        return oldPhase != Phase.IDLE;\n-    }\n-\n-    public boolean isGlobalActive() {\n-        return globalPhase != Phase.IDLE;\n-    }\n-\n@@ -221,16 +229,0 @@\n-    public long committed() {\n-        long r = 0L;\n-        for (RegionStat rs : stats) {\n-            r += (rs.state() == RegionState.EMPTY_UNCOMMITTED) ? 0 : regionSize * rs.used();\n-        }\n-        return r;\n-    }\n-\n-    public long trash() {\n-        long r = 0L;\n-        for (RegionStat rs : stats) {\n-            r += (rs.state() == RegionState.TRASH) ? rs.used() : 0;\n-        }\n-        return r;\n-    }\n-\n@@ -247,10 +239,0 @@\n-    public long humongous() {\n-        long used = 0L;\n-        for (RegionStat rs : stats) {\n-            if (rs.state() == RegionState.HUMONGOUS || rs.state() == RegionState.PINNED_HUMONGOUS) {\n-                used += regionSize * rs.used();\n-            }\n-        }\n-        return used;\n-    }\n-\n@@ -266,1 +248,1 @@\n-        long total_in_cset = 0, old_in_cset = 0, old = 0, total = 0;\n+        long totalInCset = 0, oldInCset = 0;\n@@ -270,1 +252,1 @@\n-                    ++old_in_cset;\n+                    ++oldInCset;\n@@ -272,4 +254,1 @@\n-                ++total_in_cset;\n-            }\n-            if (rs.affiliation() == RegionAffiliation.OLD) {\n-                ++old;\n+                ++totalInCset;\n@@ -277,1 +256,0 @@\n-            ++total;\n@@ -279,3 +257,1 @@\n-        System.out.printf(\"cset: %s old\/ %s cset total: %s old\/ %s total\\n\",\n-                old_in_cset, total_in_cset, old, total);\n-        return total_in_cset == 0 ? 0 : ((double) (old_in_cset)) \/ total_in_cset;\n+        return totalInCset == 0 ? 0 : ((double) (oldInCset)) \/ totalInCset;\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/Snapshot.java","additions":24,"deletions":48,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.shenandoah;\n-\n-public class SnapshotView {\n-\n-    private final long time;\n-    private final Phase globalPhase;\n-    private final Phase oldPhase;\n-    private final Phase youngPhase;\n-    private final long total;\n-    private final long committed;\n-    private final long used;\n-    private final long live;\n-    private final long humongous;\n-    private final long collectionSet;\n-    private final long trash;\n-    private final boolean degenActive;\n-    private final boolean fullActive;\n-    private final double oldCsetPercentage;\n-\n-    public SnapshotView(Snapshot s) {\n-        time = s.time();\n-        total = total();\n-        committed = s.committed();\n-        used = s.used();\n-        live = s.live();\n-        humongous = s.humongous();\n-        collectionSet = s.collectionSet();\n-        trash = s.trash();\n-        globalPhase = s.getGlobalPhase();\n-        youngPhase = s.getYoungPhase();\n-        oldPhase = s.getOldPhase();\n-        degenActive = s.isDegenActive();\n-        fullActive = s.isFullActive();\n-        oldCsetPercentage = s.percentageOfOldRegionsInCollectionSet();\n-    }\n-\n-    public Phase globalPhase() {\n-        return globalPhase;\n-    }\n-\n-    public Phase youngPhase() {\n-        return youngPhase;\n-    }\n-\n-    public Phase oldPhase() {\n-        return oldPhase;\n-    }\n-\n-    public long time() {\n-        return time;\n-    }\n-\n-    public long total() {\n-        return total;\n-    }\n-\n-    public long used() {\n-        return used;\n-    }\n-\n-    public long collectionSet() {\n-        return collectionSet;\n-    }\n-\n-    public double oldCsetPercentage() {\n-        return oldCsetPercentage;\n-    }\n-\n-    public long trash() {\n-        return trash;\n-    }\n-\n-    public long committed() {\n-        return committed;\n-    }\n-\n-    public long humongous() {\n-        return humongous;\n-    }\n-\n-    public long live() {\n-        return live;\n-    }\n-\n-    public boolean isDegenActive() {\n-        return degenActive;\n-    }\n-\n-    public boolean isFullActive() {\n-        return fullActive;\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/SnapshotView.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import org.HdrHistogram.Histogram;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+\n+import static org.openjdk.shenandoah.LayoutConstants.LINE;\n+\n+public class StatusPanel extends JPanel {\n+    static final int KILO = 1024;\n+    private final RenderRunner renderRunner;\n+\n+    public StatusPanel(RenderRunner renderRunner) {\n+        this.renderRunner = renderRunner;\n+    }\n+\n+    public static void renderTimeLineLegendItem(Graphics g, int sqSize, Color color, int lineNumber, String label) {\n+        g.setColor(color);\n+        int y = (int) (lineNumber * LINE * 1.5);\n+        g.fillRect(0, y, sqSize, sqSize);\n+        g.setColor(Color.BLACK);\n+        g.drawString(label, (int) (sqSize * 1.5), y + sqSize);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Snapshot snapshot = renderRunner.snapshot();\n+        String mode = snapshot.collectionMode();\n+        String status = getStatus(snapshot);\n+\n+        int line = 0;\n+\n+        g.setColor(Color.BLACK);\n+        g.drawString(\"GC: \" + status, 0, ++line * LINE);\n+        g.drawString(\"Mode: \" + mode, 0, ++line * LINE);\n+        g.drawString(\"Total: \" + (snapshot.total() \/ KILO) + \" MB\", 0, ++line * LINE);\n+        g.drawString(usageStatusLine(snapshot), 0, ++line * LINE);\n+        g.drawString(liveStatusLine(snapshot), 0, ++line * LINE);\n+\n+        Histogram histogram = snapshot.getSafepointTime();\n+        if (histogram != null) {\n+            String pausesText = String.format(\"GC Pauses: P100=%d, P95=%d, P90=%d\",\n+                    histogram.getMaxValue(), histogram.getValueAtPercentile(95), histogram.getValueAtPercentile(90));\n+            g.drawString(pausesText, 0, ++line * LINE);\n+        }\n+\n+        renderTimeLineLegendItem(g, LINE, Colors.OLD[1], ++line, \"Old Marking (OM)\");\n+        renderTimeLineLegendItem(g, LINE, Colors.YOUNG[1], ++line, \"Young Marking (M)\");\n+        renderTimeLineLegendItem(g, LINE, Colors.YOUNG[2], ++line, \"Young Evacuation (E)\");\n+        renderTimeLineLegendItem(g, LINE, Colors.YOUNG[3], ++line, \"Young Update References (UR)\");\n+\n+        renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[1], ++line, \"Global Marking (M)\");\n+        renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[2], ++line, \"Global Evacuation (E)\");\n+        renderTimeLineLegendItem(g, LINE, Colors.GLOBAL[3], ++line, \"Global Update References (UR)\");\n+\n+        renderTimeLineLegendItem(g, LINE, Colors.DEGENERATE, ++line, \"Degenerated Cycle\");\n+        renderTimeLineLegendItem(g, LINE, Colors.FULL, ++line, \"Full\");\n+    }\n+\n+    private static String getStatus(Snapshot snapshot) {\n+        switch (snapshot.phase()) {\n+            case IDLE:\n+                return \" Idle\";\n+            case EVACUATING:\n+                return \" Evacuating\";\n+            case UPDATE_REFS:\n+                return \" Updating Refs\";\n+            case UNKNOWN:\n+                return \" Unknown\";\n+            case MARKING:\n+                String status = \" Marking\";\n+                if (snapshot.getOldPhase() == Phase.MARKING) {\n+                    status += \" (Old)\";\n+                }\n+                return status;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown phase: \" + snapshot.phase());\n+        }\n+    }\n+\n+    protected String liveStatusLine(Snapshot snapshot) {\n+        return \"Live (Green): MB: T:\" +\n+                snapshot.live() \/ KILO + \" Y:\" +\n+                snapshot.generationStat(RegionAffiliation.YOUNG, RegionStat::live) \/ KILO + \" O:\" +\n+                snapshot.generationStat(RegionAffiliation.OLD, RegionStat::live) \/ KILO;\n+    }\n+\n+    protected String usageStatusLine(Snapshot snapshot) {\n+        return \"Used (White): MB: T:\" +\n+                snapshot.used() \/ KILO + \" Y:\" +\n+                snapshot.generationStat(RegionAffiliation.YOUNG, RegionStat::used) \/ KILO + \" O:\" +\n+                snapshot.generationStat(RegionAffiliation.OLD, RegionStat::used) \/ KILO;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/StatusPanel.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -1,125 +0,0 @@\n-\/*\n- * ====\n- *     Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n- *     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *     This code is free software; you can redistribute it and\/or modify it\n- *     under the terms of the GNU General Public License version 2 only, as\n- *     published by the Free Software Foundation.  Oracle designates this\n- *     particular file as subject to the \"Classpath\" exception as provided\n- *     by Oracle in the LICENSE file that accompanied this code.\n- *\n- *     This code is distributed in the hope that it will be useful, but WITHOUT\n- *     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *     version 2 for more details (a copy is included in the LICENSE file that\n- *     accompanied this code).\n- *\n- *     You should have received a copy of the GNU General Public License version\n- *     2 along with this work; if not, write to the Free Software Foundation,\n- *     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *     or visit www.oracle.com if you need additional information or have any\n- *     questions.\n- * ====\n- *\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.shenandoah;\n-\n-import java.lang.System;\n-import java.util.concurrent.TimeUnit;\n-\n-public class Stopwatch {\n-    private long startTime = 0;\n-    private long elapsedTime = 0;\n-    private boolean isRunning = false;\n-    private double speedMultiplier = 1.0;\n-\n-    public void start() {\n-        if (!isRunning) {\n-            startTime = System.nanoTime();\n-            isRunning = true;\n-        } else {\n-            System.out.println(\"Already started stopwatch. Must STOP before START can be enabled again.\");\n-        }\n-\n-    }\n-\n-    public void stop() {\n-        if (isRunning) {\n-            elapsedTime += Math.round((System.nanoTime() - startTime) * speedMultiplier);\n-            isRunning = false;\n-        } else {\n-            System.out.println(\"Already stopped stopwatch. Must START before STOP can be enabled again.\");\n-        }\n-\n-    }\n-\n-    public void setElapsedTime(long time) {\n-        if (time >= 0) {\n-            startTime = System.nanoTime();\n-            elapsedTime = time;\n-        } else {\n-            System.out.println(\"Cannot set elapsed time to negative value: \" + Long.toString(time));\n-        }\n-    }\n-\n-    public void setSpeedMultiplier(double speed) {\n-        boolean wasRunning = isRunning;\n-        if (wasRunning) {\n-            stop();\n-        }\n-        speedMultiplier = speed;\n-        if (wasRunning) {\n-            start();\n-        }\n-        System.out.println(\"Set speed to: \" + speed);\n-    }\n-\n-    public void clear() {\n-        startTime = 0;\n-        elapsedTime = 0;\n-        isRunning = false;\n-        speedMultiplier = 1.0;\n-    }\n-\n-    public long getElapsedNano() {\n-        long currentTime = System.nanoTime();\n-        if (isRunning) {\n-            return elapsedTime + Math.round((currentTime - startTime) * speedMultiplier);\n-        } else {\n-            return elapsedTime;\n-        }\n-    }\n-\n-    public long getElapsedMilli() {\n-        return TimeUnit.NANOSECONDS.toMillis(getElapsedNano());\n-    }\n-\n-    public boolean isStarted() {\n-        return isRunning;\n-    }\n-}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/Stopwatch.java","additions":0,"deletions":125,"binary":false,"changes":125,"status":"deleted"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+public interface Timed {\n+    long time();\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/Timed.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -2,26 +2,1 @@\n- * ====\n- *     Copyright (c) 2021, Amazon.com, Inc. All rights reserved.\n- *     DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *     This code is free software; you can redistribute it and\/or modify it\n- *     under the terms of the GNU General Public License version 2 only, as\n- *     published by the Free Software Foundation.  Oracle designates this\n- *     particular file as subject to the \"Classpath\" exception as provided\n- *     by Oracle in the LICENSE file that accompanied this code.\n- *\n- *     This code is distributed in the hope that it will be useful, but WITHOUT\n- *     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *     version 2 for more details (a copy is included in the LICENSE file that\n- *     accompanied this code).\n- *\n- *     You should have received a copy of the GNU General Public License version\n- *     2 along with this work; if not, write to the Free Software Foundation,\n- *     Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *     Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *     or visit www.oracle.com if you need additional information or have any\n- *     questions.\n- * ====\n- *\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -54,1 +29,0 @@\n-import javax.swing.event.ChangeListener;\n@@ -56,2 +30,0 @@\n-import java.awt.event.*;\n-import java.security.Key;\n@@ -60,1 +32,1 @@\n-import java.sql.Timestamp;\n+import java.awt.event.KeyAdapter;\n@@ -62,1 +34,0 @@\n-import java.util.List;\n@@ -65,3 +36,1 @@\n-                          implements ActionListener {\n-    private static final int INITIAL_WIDTH = 2000;\n-    private static final int INITIAL_HEIGHT = 1200;\n+        implements ActionListener {\n@@ -71,1 +40,1 @@\n-    private static final String PLAY_PAUSE = \"play\/pause\";\n+    private static final String PLAY_PAUSE = \"Pause\";\n@@ -76,1 +45,0 @@\n-    private static final String PLAYBACK = \"Playback\";\n@@ -83,5 +51,5 @@\n-\n-\n-    private JToolBar fileToolbar, replayToolbar, statusToolbar, speedToolbar, timestampToolBar;\n-    private JButton fileButton, backButton_1, backButton_5, playPauseButton, forwardButton_1, forwardButton_5, realtimeModeButton, endSnapshotButton;\n-    private JButton speedMultiplierButton_0_5, speedMultiplierButton_2, resetSpeedMultiplierButton;\n+    private final RenderRunner renderRunner;\n+    private final JToolBar replayToolbar, statusToolbar, speedToolbar;\n+    private JButton backOneButton, backFiveButton, playPauseButton, forwardOneButton, forwardFiveButton, endSnapshotButton;\n+    private final JButton realtimeModeButton;\n+    private JButton halfSpeedButton, doubleSpeedButton, resetSpeedMultiplierButton;\n@@ -89,4 +57,3 @@\n-    JSpinner.NumberEditor speedEditor;\n-    private JTextField fileNameField, lastActionField, modeField, timestampField;\n-    private JLabel modeLabel, lastActionLabel, speedLabel, timestampLabel;\n-    private JSlider slider = new JSlider();\n+    private JSpinner.NumberEditor speedEditor;\n+    private final JTextField fileNameField, lastActionField, modeField, timestampField;\n+    private final JSlider slider;\n@@ -96,2 +63,0 @@\n-    private List<Snapshot> snapshots;\n-\n@@ -99,1 +64,1 @@\n-    public ToolbarPanel(boolean isReplay) {\n+    public ToolbarPanel(RenderRunner renderRunner, KeyAdapter keyShortcutAdapter) {\n@@ -101,1 +66,0 @@\n-        setPreferredSize(new Dimension(INITIAL_WIDTH, INITIAL_HEIGHT));\n@@ -103,1 +67,5 @@\n-        fileToolbar = new JToolBar();\n+        this.renderRunner = renderRunner;\n+\n+        addKeyListener(keyShortcutAdapter);\n+\n+        JToolBar fileToolbar = new JToolBar();\n@@ -106,1 +74,8 @@\n-        realtimeModeButton = new JButton(\"Switch to Realtime\");\n+        var history = new RegionHistory(renderRunner, keyShortcutAdapter);\n+        renderRunner.addPopup(history);\n+\n+        var historyButton = new JButton(\"Show History\");\n+        historyButton.addActionListener(e -> history.setVisible(true));\n+        fileToolbar.add(historyButton);\n+\n+        realtimeModeButton = new JButton(\"Switch to Live\");\n@@ -112,1 +87,1 @@\n-        fileButton = new JButton(\"Load file\");\n+        JButton fileButton = new JButton(\"Load file\");\n@@ -116,6 +91,1 @@\n-        fileToolbar.add(this.fileButton);\n-\n-        slider.setMinimum(0);\n-        slider.setOrientation(SwingConstants.HORIZONTAL);\n-        slider.setValue(0);\n-        slider.setFocusable(false);\n+        fileToolbar.add(fileButton);\n@@ -128,9 +98,10 @@\n-        {\n-            GridBagConstraints c = new GridBagConstraints();\n-            c.fill = GridBagConstraints.BOTH;\n-            c.gridx = 0;\n-            c.gridy = 1;\n-            c.weightx = 2;\n-            c.weighty = 1;\n-            add(fileToolbar, c);\n-        }\n+        slider = new JSlider();\n+        slider.setMinimum(0);\n+        slider.setOrientation(SwingConstants.HORIZONTAL);\n+        slider.setValue(0);\n+        slider.setFocusable(false);\n+        renderRunner.onRecordingLoaded(() -> {\n+            SwingUtilities.invokeLater(() -> {\n+                slider.setMaximum(renderRunner.snapshotCount());\n+            });\n+        });\n@@ -140,0 +111,1 @@\n+        replayToolbar.setPreferredSize(new Dimension(400, 10));\n@@ -147,1 +119,1 @@\n-        timestampToolBar = new JToolBar();\n+        JToolBar timestampToolBar = new JToolBar();\n@@ -150,1 +122,1 @@\n-        lastActionLabel = new JLabel(\"Last action:\");\n+        JLabel lastActionLabel = new JLabel(\"Last action:\");\n@@ -158,1 +130,1 @@\n-        modeLabel = new JLabel(\"Mode:\");\n+        JLabel modeLabel = new JLabel(\"Mode:\");\n@@ -166,1 +138,1 @@\n-        timestampLabel = new JLabel(\"Timestamp: \");\n+        JLabel timestampLabel = new JLabel(\"Timestamp: \");\n@@ -177,3 +149,1 @@\n-        if (!isReplay) {\n-            setEnabledPlaybackToolbars(false);\n-        }\n+        setEnabledPlaybackToolbars();\n@@ -191,0 +161,10 @@\n+        {\n+            GridBagConstraints c = new GridBagConstraints();\n+            c.fill = GridBagConstraints.BOTH;\n+            c.gridx = 0;\n+            c.gridy = 1;\n+            c.weightx = 2;\n+            c.weighty = 1;\n+            add(fileToolbar, c);\n+        }\n+\n@@ -230,0 +210,41 @@\n+\n+        realtimeModeButton.addActionListener(event -> {\n+            renderRunner.loadLive(null);\n+            setFileNameField(\"\");\n+        });\n+        fileButton.addActionListener(this::onFileButtonEvent);\n+        playPauseButton.addActionListener(this::onPlayPauseEvent);\n+        backOneButton.addActionListener(event -> renderRunner.stepBy(-1));\n+        backFiveButton.addActionListener(event -> renderRunner.stepBy(-5));\n+        forwardOneButton.addActionListener(event -> renderRunner.stepBy(1));\n+        forwardFiveButton.addActionListener(event -> renderRunner.stepBy(5));\n+        endSnapshotButton.addActionListener(event -> renderRunner.stepToEnd());\n+        slider.addChangeListener(changeEvent -> renderRunner.stepTo(slider.getValue()));\n+        speedSpinner.addChangeListener(this::onSpeedSpinnerChanged);\n+        halfSpeedButton.addActionListener(event -> {\n+            double speed = Math.max(0.1, renderRunner.getPlaybackSpeed() * 0.5);\n+            changeSpeed(speed);\n+        });\n+        doubleSpeedButton.addActionListener(event -> {\n+            double speed = Math.max(0.1, renderRunner.getPlaybackSpeed() * 2.0);\n+            changeSpeed(speed);\n+        });\n+        resetSpeedMultiplierButton.addActionListener(event -> changeSpeed(1.0));\n+    }\n+\n+    private void changeSpeed(double speed) {\n+        speedButtonPressed = true;\n+        renderRunner.setPlaybackSpeed(speed);\n+        setSpeedValue(speed);\n+        speedButtonPressed = false;\n+        setLastActionField(\"Set speed to \" + speed);\n+    }\n+\n+    private void onSpeedSpinnerChanged(ChangeEvent changeEvent) {\n+        if (!speedButtonPressed) {\n+            double speed = getSpeedValue();\n+            if (speed != renderRunner.getPlaybackSpeed()) {\n+                setLastActionField(\"Changed playback speed to: \" + speed);\n+                renderRunner.setPlaybackSpeed(speed);\n+            }\n+        }\n@@ -232,3 +253,3 @@\n-    private void setEnabledPlaybackToolbars(boolean b) {\n-        setEnablePlaybackButtons(b);\n-        setEnableSpeedButtons(b);\n+    private void setEnabledPlaybackToolbars() {\n+        setEnablePlaybackButtons();\n+        setEnableSpeedButtons();\n@@ -237,8 +258,8 @@\n-    private void setEnablePlaybackButtons(boolean b) {\n-        backButton_1.setEnabled(b);\n-        backButton_5.setEnabled(b);\n-        playPauseButton.setEnabled(b);\n-        forwardButton_1.setEnabled(b);\n-        forwardButton_5.setEnabled(b);\n-        endSnapshotButton.setEnabled(b);\n-        slider.setEnabled(b);\n+    private void setEnablePlaybackButtons() {\n+        backOneButton.setEnabled(true);\n+        backFiveButton.setEnabled(true);\n+        playPauseButton.setEnabled(true);\n+        forwardOneButton.setEnabled(true);\n+        forwardFiveButton.setEnabled(true);\n+        endSnapshotButton.setEnabled(true);\n+        slider.setEnabled(true);\n@@ -247,5 +268,5 @@\n-    private void setEnableSpeedButtons(boolean b) {\n-        speedSpinner.setEnabled(b);\n-        speedMultiplierButton_0_5.setEnabled(b);\n-        speedMultiplierButton_2.setEnabled(b);\n-        resetSpeedMultiplierButton.setEnabled(b);\n+    private void setEnableSpeedButtons() {\n+        speedSpinner.setEnabled(true);\n+        halfSpeedButton.setEnabled(true);\n+        doubleSpeedButton.setEnabled(true);\n+        resetSpeedMultiplierButton.setEnabled(true);\n@@ -255,13 +276,13 @@\n-        this.backButton_5 = new JButton(\"-5\");\n-        backButton_5.setActionCommand(BACK_5);\n-        backButton_5.addActionListener(this);\n-        backButton_5.setFocusable(false);\n-        replayToolbar.add(this.backButton_5);\n-\n-        this.backButton_1 = new JButton(\"-1\");\n-        backButton_1.setActionCommand(BACK_1);\n-        backButton_1.addActionListener(this);\n-        backButton_1.setFocusable(false);\n-        replayToolbar.add(this.backButton_1);\n-\n-        this.playPauseButton = new JButton(\"Play\/Pause\");\n+        this.backFiveButton = new JButton(\"-5\");\n+        backFiveButton.setActionCommand(BACK_5);\n+        backFiveButton.addActionListener(this);\n+        backFiveButton.setFocusable(false);\n+        replayToolbar.add(this.backFiveButton);\n+\n+        this.backOneButton = new JButton(\"-1\");\n+        backOneButton.setActionCommand(BACK_1);\n+        backOneButton.addActionListener(this);\n+        backOneButton.setFocusable(false);\n+        replayToolbar.add(this.backOneButton);\n+\n+        this.playPauseButton = new JButton(PLAY_PAUSE);\n@@ -273,5 +294,5 @@\n-        this.forwardButton_1 = new JButton(\"+1\");\n-        forwardButton_1.setActionCommand(FORWARD_1);\n-        forwardButton_1.addActionListener(this);\n-        forwardButton_1.setFocusable(false);\n-        replayToolbar.add(this.forwardButton_1);\n+        this.forwardOneButton = new JButton(\"+1\");\n+        forwardOneButton.setActionCommand(FORWARD_1);\n+        forwardOneButton.addActionListener(this);\n+        forwardOneButton.setFocusable(false);\n+        replayToolbar.add(this.forwardOneButton);\n@@ -279,5 +300,5 @@\n-        this.forwardButton_5 = new JButton(\"+5\");\n-        forwardButton_5.setActionCommand(FORWARD_5);\n-        forwardButton_5.addActionListener(this);\n-        forwardButton_5.setFocusable(false);\n-        replayToolbar.add(this.forwardButton_5);\n+        this.forwardFiveButton = new JButton(\"+5\");\n+        forwardFiveButton.setActionCommand(FORWARD_5);\n+        forwardFiveButton.addActionListener(this);\n+        forwardFiveButton.setFocusable(false);\n+        replayToolbar.add(this.forwardFiveButton);\n@@ -293,1 +314,1 @@\n-        speedLabel = new JLabel(\"Playback Speed: \");\n+        JLabel speedLabel = new JLabel(\"Playback Speed: \");\n@@ -296,2 +317,2 @@\n-        this.speedSpinner = new JSpinner(new SpinnerNumberModel(1.0,0.1,10.0,0.1));\n-        this.speedEditor = new JSpinner.NumberEditor(speedSpinner,\"#.#\");\n+        this.speedSpinner = new JSpinner(new SpinnerNumberModel(1.0, 0.1, 10.0, 0.1));\n+        this.speedEditor = new JSpinner.NumberEditor(speedSpinner, \"#.#\");\n@@ -303,5 +324,5 @@\n-        speedMultiplierButton_0_5 = new JButton(\"0.5x\");\n-        speedMultiplierButton_0_5.setActionCommand(SPEED_0_5);\n-        speedMultiplierButton_0_5.addActionListener(this);\n-        speedMultiplierButton_0_5.setFocusable(false);\n-        speedToolbar.add(speedMultiplierButton_0_5);\n+        halfSpeedButton = new JButton(\"0.5x\");\n+        halfSpeedButton.setActionCommand(SPEED_0_5);\n+        halfSpeedButton.addActionListener(this);\n+        halfSpeedButton.setFocusable(false);\n+        speedToolbar.add(halfSpeedButton);\n@@ -309,5 +330,5 @@\n-        speedMultiplierButton_2 = new JButton(\"2x\");\n-        speedMultiplierButton_2.setActionCommand(SPEED_2);\n-        speedMultiplierButton_2.addActionListener(this);\n-        speedMultiplierButton_2.setFocusable(false);\n-        speedToolbar.add(speedMultiplierButton_2);\n+        doubleSpeedButton = new JButton(\"2x\");\n+        doubleSpeedButton.setActionCommand(SPEED_2);\n+        doubleSpeedButton.addActionListener(this);\n+        doubleSpeedButton.setFocusable(false);\n+        speedToolbar.add(doubleSpeedButton);\n@@ -324,0 +345,4 @@\n+        if (speedField == null) {\n+            return 0.0;\n+        }\n+\n@@ -337,0 +362,4 @@\n+        if (speedField == null) {\n+            return;\n+        }\n+\n@@ -349,1 +378,1 @@\n-            return ((JSpinner.DefaultEditor)editor).getTextField();\n+            return ((JSpinner.DefaultEditor) editor).getTextField();\n@@ -356,48 +385,7 @@\n-    public void setFileButtonListener(ActionListener a) {\n-        fileButton.addActionListener(a);\n-    }\n-\n-    public void setRealtimeModeButtonListener(ActionListener a) {\n-        realtimeModeButton.addActionListener(a);\n-    }\n-\n-    \/\/ Replay Toolbar Listeners\n-    public void setBackButton_1_Listener(ActionListener a) {\n-        backButton_1.addActionListener(a);\n-    }\n-\n-    public void setBackButton_5_Listener(ActionListener a) {\n-        backButton_5.addActionListener(a);\n-    }\n-\n-    public void setPlayPauseButtonListener(ActionListener a) {\n-        playPauseButton.addActionListener(a);\n-    }\n-\n-    public void setForwardButton_1_Listener(ActionListener a) {\n-        forwardButton_1.addActionListener(a);\n-    }\n-\n-    public void setForwardButton_5_Listener(ActionListener a) {\n-        forwardButton_5.addActionListener(a);\n-    }\n-\n-    public void setEndSnapshotButtonListener(ActionListener a) {\n-        endSnapshotButton.addActionListener(a);\n-    }\n-\n-    public void setSliderListener(ChangeListener c) {\n-        slider.addChangeListener(c);\n-    }\n-\n-    \/\/ Speed Toolbar Listeners\n-    public void setSpeedSpinnerListener(ChangeListener c) {\n-        speedSpinner.addChangeListener(c);\n-    }\n-\n-    public void setSpeed_0_5_Listener(ActionListener ae) {\n-        speedMultiplierButton_0_5.addActionListener(ae);\n-    }\n-\n-    public void setSpeed_2_Listener(ActionListener ae) {\n-        speedMultiplierButton_2.addActionListener(ae);\n+    private void onPlayPauseEvent(ActionEvent ae) {\n+        if (renderRunner.isPaused()) {\n+            setLastActionField(\"Play button pressed.\");\n+        } else {\n+            setLastActionField(\"Pause button pressed.\");\n+        }\n+        renderRunner.togglePlayback();\n@@ -406,2 +394,11 @@\n-    public void setResetSpeedListener(ActionListener ae) {\n-        resetSpeedMultiplierButton.addActionListener(ae);\n+    private void onFileButtonEvent(ActionEvent ae) {\n+        JFileChooser fc = new JFileChooser();\n+        int returnValue = fc.showOpenDialog(null);\n+        if (returnValue == JFileChooser.APPROVE_OPTION) {\n+            String filePath = fc.getSelectedFile().getAbsolutePath();\n+            renderRunner.loadPlayback(filePath);\n+            renderRunner.setPlaybackSpeed(1.0);\n+            setSpeedValue(1.0);\n+            setFileNameField(filePath);\n+            setLastActionField(\"File selected: \" + filePath);\n+        }\n@@ -418,12 +415,0 @@\n-    public void setEnabledRealtimeModeButton(boolean b) {\n-        realtimeModeButton.setEnabled(b);\n-    }\n-\n-    public void setModeField(String s) {\n-        if (REALTIME.equals(s)) {\n-            modeField.setText(REALTIME);\n-        } else if (PLAYBACK.equals(s)) {\n-            modeField.setText(PLAYBACK);\n-        }\n-    }\n-\n@@ -433,3 +418,1 @@\n-            setEnabledPlaybackToolbars(true);\n-            setModeField(PLAYBACK);\n-            setEnabledRealtimeModeButton(true);\n+            setLastActionField(\"Switched to recorded playback mode.\");\n@@ -437,6 +420,3 @@\n-            lastActionField.setText(\"Switched to realtime mode.\");\n-            setEnabledPlaybackToolbars(false);\n-            setModeField(REALTIME);\n-            setEnabledRealtimeModeButton(false);\n-        } else if ( !(PLAY_PAUSE.equals(cmd) || SPEED_0_5.equals(cmd) || SPEED_2.equals(cmd) || SPEED_RESET.equals(cmd)) ){\n-            lastActionField.setText(cmd + \" button pressed.\");\n+            setLastActionField(\"Switched to live playback mode.\");\n+        } else if (!(PLAY_PAUSE.equals(cmd) || SPEED_0_5.equals(cmd) || SPEED_2.equals(cmd) || SPEED_RESET.equals(cmd))) {\n+            setLastActionField(cmd + \" button pressed.\");\n@@ -445,23 +425,9 @@\n-    public final void setSnapshots(List<Snapshot> snapshots) {\n-        this.snapshots = snapshots;\n-    }\n-    public final void setSize(int size) {\n-        slider.setMaximum(size);\n-    }\n-    public final void setValue(int value) {\n-        if (SwingUtilities.isEventDispatchThread()){\n-            slider.setValue(value);\n-        } else {\n-            SwingUtilities.invokeLater(new Runnable() {\n-                @Override\n-                public void run() {\n-                    slider.setValue(value);\n-                }\n-            });\n-        }\n-    }\n-    public int currentSliderValue() {\n-        if ((slider.getValue() - 1) >= 0) {\n-            timestampField.setText(Long.toString(snapshots.get(slider.getValue() - 1).time()) + \" ms\");\n-        }\n-        return slider.getValue();\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        timestampField.setText(renderRunner.snapshot().time() + \" ms\");\n+        slider.setValue(renderRunner.cursor());\n+        realtimeModeButton.setEnabled(!renderRunner.isLive());\n+        modeField.setText(renderRunner.status());\n+        playPauseButton.setText(renderRunner.isPaused() ? \"Play\" : \"Pause\");\n+        super.paint(g);\n@@ -469,1 +435,1 @@\n- }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/shenandoah\/ToolbarPanel.java","additions":188,"deletions":222,"binary":false,"changes":410,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+\n+import static org.junit.Assert.*;\n+\n+public class CircularBufferTest {\n+\n+    private CircularBuffer<Character> buffer;\n+\n+    @Before\n+    public void setUp() {\n+        buffer = new CircularBuffer<>();\n+    }\n+\n+    @Test\n+    public void testCreateIsEmpty() {\n+        assertTrue(buffer.isEmpty());\n+    }\n+\n+    @Test\n+    public void testAddItem() {\n+        buffer.add('A');\n+        assertFalse(buffer.isEmpty());\n+        assertEquals(Character.valueOf('A'), buffer.get(0));\n+    }\n+\n+    @Test\n+    public void testWrapAround() {\n+        for (int i = 0; i < CircularBuffer.DEFAULT_SIZE + 1; i++) {\n+            buffer.add((char) ('A' + i));\n+            assertFalse(buffer.isEmpty());\n+        }\n+        assertEquals(Character.valueOf('B'), buffer.get(0));\n+        assertEquals(Character.valueOf('I'), buffer.get(CircularBuffer.DEFAULT_SIZE - 1));\n+    }\n+\n+    @Test\n+    public void testSubList() {\n+        for (int i = 0; i < CircularBuffer.DEFAULT_SIZE + 1; i++) {\n+            buffer.add((char) ('A' + i));\n+        }\n+\n+        \/\/ [I, B, C, D, E, F, G, H]\n+        assertEquals(Collections.emptyList(), buffer.subList(1, 1));\n+        assertEquals(Arrays.asList('B', 'C', 'D'), buffer.subList(0, 3));\n+        assertEquals(Arrays.asList('C', 'D', 'E'), buffer.subList(1, 4));\n+        assertEquals(Arrays.asList('G', 'H', 'I'), buffer.subList(5, 8));\n+    }\n+\n+    @Test\n+    public void testGetEnd() {\n+        for (int i = 0; i < CircularBuffer.DEFAULT_SIZE + 1; i++) {\n+            char c = (char) ('A' + i);\n+            buffer.add(c);\n+            assertEquals(String.valueOf(c), String.valueOf(buffer.get(buffer.size() - 1)));\n+        }\n+    }\n+}\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/CircularBufferTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- *     Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ *     Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -74,1 +74,1 @@\n-    public void emptyUncommittedCounter_test() {\n+    public void testEmptyUncommittedCounter() {\n@@ -79,1 +79,1 @@\n-    public void emptyCommittedCounter_test() {\n+    public void testEmptyCommittedCounter() {\n@@ -84,1 +84,1 @@\n-    public void trashCounter_test() {\n+    public void testTrashCounter() {\n@@ -89,1 +89,1 @@\n-    public void humongousCounter_test() {\n+    public void testHumongousCounter() {\n@@ -94,1 +94,1 @@\n-    public void pinnedHumongousCounter_test() {\n+    public void testPinnedHumongousCounter() {\n@@ -99,1 +99,1 @@\n-    public void cSetCounter_test() {\n+    public void testCSetCounter() {\n@@ -104,1 +104,1 @@\n-    public void pinnedCounter_test() {\n+    public void testPinnedCounter() {\n@@ -109,1 +109,1 @@\n-    public void pinnedCSetCounter_test() {\n+    public void testPinnedCSetCounter() {\n@@ -114,1 +114,1 @@\n-    public void age0Counter_test() {\n+    public void testAge0Counter() {\n@@ -119,1 +119,1 @@\n-    public void age3Counter_test() {\n+    public void testAge3Counter() {\n@@ -124,1 +124,1 @@\n-    public void age6Counter_test() {\n+    public void testAge6Counter() {\n@@ -129,1 +129,1 @@\n-    public void age9Counter_test() {\n+    public void testAge9Counter() {\n@@ -134,1 +134,1 @@\n-    public void age12Counter_test() {\n+    public void testAge12Counter() {\n@@ -139,1 +139,1 @@\n-    public void age15Counter_test() {\n+    public void testAge15Counter() {\n@@ -144,1 +144,1 @@\n-    public void tlabCounter_test() {\n+    public void testTlabCounter() {\n@@ -149,1 +149,1 @@\n-    public void gclabCounter_test() {\n+    public void testGClabCounter() {\n@@ -154,1 +154,1 @@\n-    public void plabCounter_test() {\n+    public void testPlabCounter() {\n@@ -159,1 +159,1 @@\n-    public void sharedCounter_test() {\n+    public void testSharedCounter() {\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/CounterTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.junit.Before;\n@@ -38,4 +37,0 @@\n-    Snapshot snapshotVersion1Idle;\n-    Snapshot snapshotVersion1Marking;\n-    Snapshot snapshotVersion1Evacuating;\n-    Snapshot snapshotVersion1UpdateRefs;\n@@ -43,21 +38,1 @@\n-    Snapshot snapshotNewIdle;\n-    Snapshot snapshotNewMarking;\n-    Snapshot snapshotNewEvacuating;\n-    Snapshot snapshotNewUpdateRefs;\n-\n-    \/\/setting up different value for both old and new versions\n-    @Before\n-    public void setUp() {\n-        snapshotVersion1Idle = new Snapshot(0, 1024, 1, Collections.emptyList(), 0, new Histogram(2));\n-        snapshotVersion1Marking = new Snapshot(0, 1024, 1, Collections.emptyList(), 1, new Histogram(2));\n-        snapshotVersion1Evacuating = new Snapshot(0, 1024, 1, Collections.emptyList(), 2, new Histogram(2));\n-        snapshotVersion1UpdateRefs = new Snapshot(0, 1024, 1, Collections.emptyList(), 4, new Histogram(2));\n-\n-        snapshotNewIdle = new Snapshot(0, 1024, 2, Collections.emptyList(), 0, new Histogram(2));\n-        snapshotNewMarking = new Snapshot(0, 1024, 2, Collections.emptyList(), 1, new Histogram(2));\n-        snapshotNewEvacuating = new Snapshot(0, 1024, 2, Collections.emptyList(), 2, new Histogram(2));\n-        snapshotNewUpdateRefs = new Snapshot(0, 1024, 2, Collections.emptyList(), 3, new Histogram(2));\n-\n-    }\n-\n-    \/\/Testing different phase for old version\n+    \/\/ Testing different phases for version 1 encoding\n@@ -65,1 +40,2 @@\n-    public void test_version1_phase_idle() {\n+    public void testVersion1PhaseIdle() {\n+        var snapshotVersion1Idle = new Snapshot(0, 1024, 1, Collections.emptyList(), 0, new Histogram(2));\n@@ -69,1 +45,2 @@\n-    public void test_version1_phase_marking() {\n+    public void testVersion1PhaseMarking() {\n+        var snapshotVersion1Marking = new Snapshot(0, 1024, 1, Collections.emptyList(), 1, new Histogram(2));\n@@ -73,1 +50,2 @@\n-    public void test_version1_phase_evacuating() {\n+    public void testVersion1PhaseEvacuating() {\n+        var snapshotVersion1Evacuating = new Snapshot(0, 1024, 1, Collections.emptyList(), 2, new Histogram(2));\n@@ -77,1 +55,2 @@\n-    public void test_version1_phase_update_refs() {\n+    public void testVersion1PhaseUpdateRefs() {\n+        var snapshotVersion1UpdateRefs = new Snapshot(0, 1024, 1, Collections.emptyList(), 4, new Histogram(2));\n@@ -81,1 +60,1 @@\n-    \/\/Testing different phase for new version\n+    \/\/ Testing different phases for version 2 encoding\n@@ -83,1 +62,2 @@\n-    public void test_new_phase_idle() {\n+    public void testVersion2PhaseIdle() {\n+        var snapshotNewIdle = new Snapshot(0, 1024, 2, Collections.emptyList(), 0, new Histogram(2));\n@@ -87,1 +67,2 @@\n-    public void test_new_phase_marking() {\n+    public void testVersion2PhaseMarking() {\n+        var snapshotNewMarking = new Snapshot(0, 1024, 2, Collections.emptyList(), 1, new Histogram(2));\n@@ -91,1 +72,2 @@\n-    public void test_new_phase_evacuating() {\n+    public void testVersion2PhaseEvacuating() {\n+        var snapshotNewEvacuating = new Snapshot(0, 1024, 2, Collections.emptyList(), 2, new Histogram(2));\n@@ -95,1 +77,2 @@\n-    public void test_new_phase_update_refs() {\n+    public void testVersion2PhaseUpdateRefs() {\n+        var snapshotNewUpdateRefs = new Snapshot(0, 1024, 2, Collections.emptyList(), 3, new Histogram(2));\n@@ -98,1 +81,0 @@\n-\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/DecoderTest.java","additions":19,"deletions":37,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EventLogTest {\n+\n+    private record Event(long time) implements Timed { }\n+\n+    @Test\n+    public void testThatEmptyLogHasEmptyRange() {\n+        Assert.assertEquals(Collections.emptyList(), new EventLog<Event>().inRange());\n+    }\n+\n+    @Test\n+    public void testFetchingLatest() {\n+        EventLog<Event> log = createEventLog(1, 2, 3);\n+        log.stepBy(1);\n+        Assert.assertEquals(new Event(1), log.current());\n+    }\n+    @Test\n+    public void testThatSteppingForwardIncreasesRange() {\n+        EventLog<Event> log = createEventLog(1, 2, 3);\n+        log.stepBy(1);\n+        Assert.assertEquals(createEvents(1), log.inRange());\n+        log.stepBy(10);\n+        Assert.assertEquals(createEvents(1, 2, 3), log.inRange());\n+    }\n+\n+    @Test\n+    public void testThatSteppingBackwardDecreasesRange() {\n+        EventLog<Event> log = createEventLog(1, 2, 3);\n+        log.stepBy(10);\n+        Assert.assertEquals(createEvents(1, 2, 3), log.inRange());\n+        log.stepBy(-1);\n+        Assert.assertEquals(createEvents(1, 2), log.inRange());\n+    }\n+\n+    @Test\n+    public void testAdvancingTimeIncreasesRange() {\n+        EventLog<Event> log = createEventLog(100, 200, 300);\n+        log.advanceTo(50, TimeUnit.NANOSECONDS);\n+        Assert.assertEquals(Collections.emptyList(), log.inRange());\n+        log.advanceTo(150, TimeUnit.NANOSECONDS);\n+        Assert.assertEquals(createEvents(100), log.inRange());\n+        log.advanceTo(500, TimeUnit.NANOSECONDS);\n+        Assert.assertEquals(createEvents(100, 200, 300), log.inRange());\n+    }\n+\n+    @Test\n+    public void testIncrementalAdvanceIncreasesRange() {\n+        \/\/ reference time is the time of the first event\n+        EventLog<Event> log = createEventLog(100, 200, 300);\n+        log.advanceBy(50, TimeUnit.NANOSECONDS);\n+        Assert.assertEquals(createEvents(100), log.inRange()); \/\/ ref time is 150\n+        log.advanceBy(25, TimeUnit.NANOSECONDS);             \/\/ ref time is 175\n+        Assert.assertEquals(createEvents(100), log.inRange());\n+        log.advanceBy(25, TimeUnit.NANOSECONDS);             \/\/ ref time is 200\n+        Assert.assertEquals(createEvents(100, 200), log.inRange());\n+    }\n+\n+    @Test\n+    public void testRangeIncludesEventsInsertedBeforeReferenceTime() {\n+        EventLog<Event> log = createEventLog(100, 200, 300);\n+        log.advanceTo(500, TimeUnit.NANOSECONDS);\n+        Assert.assertEquals(createEvents(100, 200, 300), log.inRange());\n+        log.add(new Event(400));\n+        log.add(new Event(600));\n+        Assert.assertEquals(createEvents(100, 200, 300, 400), log.inRange());\n+    }\n+\n+    private static List<Event> createEvents(int... args) {\n+        var list = new ArrayList<Event>(args.length);\n+        for (var t : args) {\n+            list.add(new Event(t));\n+        }\n+        return list;\n+    }\n+\n+    private static EventLog<Event> createEventLog(int... args) {\n+        var log = new EventLog<Event>();\n+        for (var t : args) {\n+            log.add(new Event(t));\n+        }\n+        return log;\n+    }\n+}\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/EventLogTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -30,0 +30,1 @@\n+import javax.swing.*;\n@@ -43,1 +44,4 @@\n-            new RegionPopUp(0).spotlightPaint(g);\n+            RenderRunner renderRunner = new RenderRunner(new JFrame());\n+            renderRunner.loadPlayback(\"src\/test\/resources\/regions-6425.log\");\n+            renderRunner.stepBy(200);\n+            new RegionPopUp(0, renderRunner).spotlightPaint(g);\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/PopupSpotlightTest.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.junit.Before;\n@@ -31,0 +30,1 @@\n+import javax.swing.*;\n@@ -44,1 +44,4 @@\n-            new RegionPopUp(0).timelinePaint(g);\n+            RenderRunner renderRunner = new RenderRunner(new JFrame());\n+            renderRunner.loadPlayback(\"src\/test\/resources\/regions-6425.log\");\n+            renderRunner.stepBy(200);\n+            new RegionPopUp(0, renderRunner).timelinePaint(g);\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/PopupTimelineTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Amazon.com, Inc. All rights reserved.\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.HdrHistogram.Histogram;\n@@ -30,1 +29,0 @@\n-import org.junit.Before;\n@@ -33,3 +31,0 @@\n-\n-import java.io.IOException;\n-\n@@ -37,7 +32,0 @@\n-    DataLogProvider dataLogProvider;\n-\n-    @Before\n-    public void setUp() throws IOException {\n-        dataLogProvider = new DataLogProvider(\"src\/test\/resources\/regions-6425.log\");\n-    }\n-\n@@ -45,1 +33,1 @@\n-    public void test_process_tagged_meta_data() {\n+    public void testParseLogMetaDataWithTags() {\n@@ -47,1 +35,1 @@\n-        Assert.assertEquals(\"1665172926 0 3859 1024 2\", dataLogProvider.processLoggingTag(taggedMetaDataLine));\n+        Assert.assertEquals(\"1665172926 0 3859 1024 2\", DataLogProvider.processLoggingTag(taggedMetaDataLine));\n@@ -50,1 +38,1 @@\n-    public void test_process_tagged_region_data() {\n+    public void testParseRegionDataWithTags() {\n@@ -52,1 +40,1 @@\n-        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", dataLogProvider.processLoggingTag(taggedRegionDataLine));\n+        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", DataLogProvider.processLoggingTag(taggedRegionDataLine));\n@@ -55,1 +43,1 @@\n-    public void test_process_not_tagged_meta_data() {\n+    public void testParseMetaDataWithoutTags() {\n@@ -57,1 +45,1 @@\n-        Assert.assertEquals(\"1665172926 0 3859 1024 2\", dataLogProvider.processLoggingTag(notTaggedMetaDataLine));\n+        Assert.assertEquals(\"1665172926 0 3859 1024 2\", DataLogProvider.processLoggingTag(notTaggedMetaDataLine));\n@@ -60,1 +48,1 @@\n-    public void test_process_not_tagged_region_data() {\n+    public void testParseRegionDataWithoutTags() {\n@@ -62,1 +50,1 @@\n-        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", dataLogProvider.processLoggingTag(notTaggedRegionDataLine));\n+        Assert.assertEquals(\"648518346342989924 648518346342989924 648518346342989924\", DataLogProvider.processLoggingTag(notTaggedRegionDataLine));\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/ProcessLoggingTagTest.java","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Amazon.com, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.shenandoah;\n+\n+import org.junit.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+public class RegionSelectionParserTest {\n+\n+    @Test\n+    public void testParseSingleNumber() {\n+        RegionSelectionParser parser = new RegionSelectionParser();\n+        Collection<Integer> regions = parser.parse(\"42\");\n+        assertEquals(List.of(42), regions);\n+    }\n+\n+    @Test\n+    public void testParseCommaDelimited() {\n+        RegionSelectionParser parser = new RegionSelectionParser();\n+        Collection<Integer> regions = parser.parse(\"42, 23\");\n+        assertEquals(Arrays.asList(23, 42), regions);\n+    }\n+\n+    @Test\n+    public void testParseRange() {\n+        RegionSelectionParser parser = new RegionSelectionParser();\n+        Collection<Integer> regions = parser.parse(\"23 - 29\");\n+        assertEquals(Arrays.asList(23, 24, 25, 26, 27, 28, 29), regions);\n+    }\n+\n+    @Test\n+    public void testNumbersAndRanges() {\n+        RegionSelectionParser parser = new RegionSelectionParser();\n+        Collection<Integer> regions = parser.parse(\"13, 23 - 29, 25, 42\");\n+        assertEquals(Arrays.asList(13, 23, 24, 25, 26, 27, 28, 29, 42), regions);\n+    }\n+\n+    @Test\n+    public void testInvalidRangeThrows() {\n+        try {\n+            RegionSelectionParser parser = new RegionSelectionParser();\n+            parser.parse(\"29 - 23\");\n+            fail(\"Should not allow reversed ranges\");\n+        } catch (IllegalArgumentException ignore) {}\n+    }\n+}\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/RegionSelectionParserTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.shenandoah;\n-\n-import org.junit.Test;\n-\n-import javax.imageio.ImageIO;\n-import java.awt.*;\n-import java.awt.image.BufferedImage;\n-import java.io.File;\n-import java.io.IOException;\n-\n-public class RenderLegendTest {\n-    @Test\n-    public void test() throws IOException {\n-        BufferedImage img = new BufferedImage(300, 700, BufferedImage.TYPE_INT_RGB);\n-        Graphics2D g = img.createGraphics();\n-        g.setColor(Color.WHITE);\n-        g.fillRect(0, 0, 300, 700);\n-        new ShenandoahVisualizer.RenderPlayback(new DataLogProvider(\"src\/test\/resources\/regions-6425.log\"), null, new ToolbarPanel(true)).renderLegend(g);\n-        ImageIO.write(img, \"png\", new File(\"legend.png\"));\n-    }\n-\n-}\n","filename":"src\/test\/java\/org\/openjdk\/shenandoah\/RenderLegendTest.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"}]}