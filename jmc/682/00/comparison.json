{"files":[{"patch":"@@ -66,0 +66,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.TreeExpandCollapseSupport;\n@@ -182,1 +183,1 @@\n-\n+\t\t\tTreeExpandCollapseSupport.installFor(viewer);\n","filename":"application\/org.openjdk.jmc.flightrecorder.metadata\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/metadata\/MetadataPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+package org.openjdk.jmc.flightrecorder.ui.common;\n+\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.TreeViewer;\n+\n+\/**\n+ * Enables double-click and enter key press to expand or collapse tree nodes.\n+ *\/\n+public final class TreeExpandCollapseSupport {\n+\n+\t\/**\n+\t * Private since we don't want any instances.\n+\t *\/\n+\tprivate TreeExpandCollapseSupport() {\n+\t}\n+\n+\t\/**\n+\t * Installs a handler for both double click and enter key press.\n+\t *\n+\t * @param viewer\n+\t *            the TreeViewer to update\n+\t *\/\n+\tpublic static void installFor(TreeViewer viewer) {\n+\t\tviewer.addDoubleClickListener(event -> {\n+\t\t\tIStructuredSelection selection = (IStructuredSelection) viewer.getSelection();\n+\t\t\tif (!selection.isEmpty()) {\n+\t\t\t\tObject element = selection.getFirstElement();\n+\t\t\t\tif (element != null) {\n+\t\t\t\t\tboolean isExpanded = viewer.getExpandedState(element);\n+\t\t\t\t\tviewer.setExpandedState(element, !isExpanded);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/TreeExpandCollapseSupport.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -92,0 +92,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.TreeExpandCollapseSupport;\n@@ -212,0 +213,1 @@\n+\t\t\tTreeExpandCollapseSupport.installFor(typeFilterTree.getViewer());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/EventBrowserPage.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.TreeExpandCollapseSupport;\n@@ -306,0 +307,1 @@\n+\t\t\tTreeExpandCollapseSupport.installFor(tree);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ThreadDumpsPage.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+import org.eclipse.swt.events.KeyAdapter;\n+import org.eclipse.swt.events.KeyEvent;\n@@ -537,6 +539,1 @@\n-\t\t\t\tsetEnabled(mri, enable);\n-\t\t\t\tif (enable) {\n-\t\t\t\t\tsetQuantityKindFromAttribute(mri);\n-\t\t\t\t}\n-\t\t\t\trefreshAll();\n-\n+\t\t\t\tupdateLegendCheckedState(mri, enable);\n@@ -563,1 +560,17 @@\n-\n+\t\tlegend.getTable().addKeyListener(new KeyAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void keyPressed(KeyEvent e) {\n+\t\t\t\tif (e.keyCode == SWT.CR) {\n+\t\t\t\t\tIStructuredSelection selection = legend.getStructuredSelection();\n+\t\t\t\t\tif (!selection.isEmpty()) {\n+\t\t\t\t\t\tObject element = selection.getFirstElement();\n+\t\t\t\t\t\tif (element != null) {\n+\t\t\t\t\t\t\tMRI mri = (MRI) element;\n+\t\t\t\t\t\t\tboolean isChecked = legend.getChecked(element);\n+\t\t\t\t\t\t\tlegend.setChecked(element, !isChecked);\n+\t\t\t\t\t\t\tupdateLegendCheckedState(mri, legend.getChecked(element));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n@@ -620,0 +633,7 @@\n+\tprivate void updateLegendCheckedState(MRI mri, boolean enable) {\n+\t\tsetEnabled(mri, enable);\n+\t\tif (enable) {\n+\t\t\tsetQuantityKindFromAttribute(mri);\n+\t\t}\n+\t\trefreshAll();\n+\t}\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/CombinedChartSectionPart.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import org.eclipse.jface.viewers.IStructuredSelection;\n@@ -52,0 +53,2 @@\n+import org.eclipse.swt.events.KeyAdapter;\n+import org.eclipse.swt.events.KeyEvent;\n@@ -135,5 +138,18 @@\n-\t\t\tif (action.isEnabled()) {\n-\t\t\t\taction.setChecked(e.getChecked());\n-\t\t\t\taction.run();\n-\t\t\t} else {\n-\t\t\t\tchartLegend.setChecked(action, action.isChecked());\n+\t\t\tsetCheckboxAction(chartLegend, action, e.getChecked());\n+\t\t});\n+\t\tchartLegend.getTable().addKeyListener(new KeyAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void keyPressed(KeyEvent e) {\n+\t\t\t\tif (e.keyCode == SWT.CR) {\n+\t\t\t\t\tIStructuredSelection selection = chartLegend.getStructuredSelection();\n+\t\t\t\t\tif (!selection.isEmpty()) {\n+\t\t\t\t\t\tObject element = selection.getFirstElement();\n+\t\t\t\t\t\tif (element != null) {\n+\t\t\t\t\t\t\tIAction action = (IAction) element;\n+\t\t\t\t\t\t\tboolean isChecked = chartLegend.getChecked(element);\n+\t\t\t\t\t\t\tchartLegend.setChecked(element, !isChecked);\n+\t\t\t\t\t\t\tsetCheckboxAction(chartLegend, action, chartLegend.getChecked(element));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n@@ -196,0 +212,9 @@\n+\n+\tprivate static void setCheckboxAction(CheckboxTableViewer viewer, IAction action, boolean newState) {\n+\t\tif (action.isEnabled()) {\n+\t\t\taction.setChecked(newState);\n+\t\t\taction.run();\n+\t\t} else {\n+\t\t\tviewer.setChecked(action, action.isChecked());\n+\t\t}\n+\t}\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/ActionUiToolkit.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"}]}