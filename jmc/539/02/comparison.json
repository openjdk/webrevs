{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,7 +150,3 @@\n-\t\tInputStream in = stream;\n-\t\tif (in.markSupported()) {\n-\t\t\tin.mark(MAGIC_GZ.length + 1);\n-\t\t\tif (hasMagic(in, MAGIC_GZ)) {\n-\t\t\t\tin.reset();\n-\t\t\t\treturn new GZIPInputStream(in);\n-\t\t\t}\n+\t\tInputStream in = new BufferedInputStream(stream);\n+\t\tin.mark(MAGIC_GZ.length + 1);\n+\t\tif (hasMagic(in, MAGIC_GZ)) {\n@@ -158,7 +154,5 @@\n-\t\t\tin.mark(MAGIC_ZIP.length + 1);\n-\t\t\tif (hasMagic(in, MAGIC_ZIP)) {\n-\t\t\t\tin.reset();\n-\t\t\t\tZipInputStream zin = new ZipInputStream(in);\n-\t\t\t\tzin.getNextEntry();\n-\t\t\t\treturn zin;\n-\t\t\t}\n+\t\t\treturn new GZIPInputStream(in);\n+\t\t}\n+\t\tin.reset();\n+\t\tin.mark(MAGIC_ZIP.length + 1);\n+\t\tif (hasMagic(in, MAGIC_ZIP)) {\n@@ -166,5 +160,7 @@\n-\t\t\tin.mark(MAGIC_LZ4.length + 1);\n-\t\t\tif (hasMagic(in, MAGIC_LZ4)) {\n-\t\t\t\tin.reset();\n-\t\t\t\treturn new LZ4FrameInputStream(in);\n-\t\t\t}\n+\t\t\tZipInputStream zin = new ZipInputStream(in);\n+\t\t\tzin.getNextEntry();\n+\t\t\treturn zin;\n+\t\t}\n+\t\tin.reset();\n+\t\tin.mark(MAGIC_LZ4.length + 1);\n+\t\tif (hasMagic(in, MAGIC_LZ4)) {\n@@ -172,0 +168,1 @@\n+\t\t\treturn new LZ4FrameInputStream(in);\n@@ -173,1 +170,1 @@\n-\t\tin = new BufferedInputStream(stream);\n+\t\tin.reset();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/io\/IOToolkit.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.io.FilterInputStream;\n@@ -66,0 +67,7 @@\n+\t@Test\n+\tpublic void testUncompressUncompressedWithoutMark() throws IOException {\n+\t\tInputStream uncompressedStream = IOToolkit.openUncompressedStream(withoutMark(getStream(UNCOMPRESSED)));\n+\t\tString string = readFromStream(uncompressedStream);\n+\t\tAssert.assertEquals(\"String should be \" + GURKA, GURKA, string);\n+\t}\n+\n@@ -73,0 +81,7 @@\n+\t@Test\n+\tpublic void testUncompressZippedWithoutMark() throws IOException {\n+\t\tInputStream uncompressedStream = IOToolkit.openUncompressedStream(withoutMark(getStream(ZIP)));\n+\t\tString string = readFromStream(uncompressedStream);\n+\t\tAssert.assertEquals(\"String should be \" + GURKA, GURKA, string);\n+\t}\n+\n@@ -80,0 +95,7 @@\n+\t@Test\n+\tpublic void testUncompressGZippedWithoutMark() throws IOException {\n+\t\tInputStream uncompressedStream = IOToolkit.openUncompressedStream(withoutMark(getStream(GZ)));\n+\t\tString string = readFromStream(uncompressedStream);\n+\t\tAssert.assertEquals(\"String should be \" + GURKA, GURKA, string);\n+\t}\n+\n@@ -87,0 +109,7 @@\n+\t@Test\n+\tpublic void testUncompressLZ4WithoutMark() throws IOException {\n+\t\tInputStream uncompressedStream = IOToolkit.openUncompressedStream(withoutMark(getStream(LZ4)));\n+\t\tString string = readFromStream(uncompressedStream);\n+\t\tAssert.assertEquals(\"String should be \" + GURKA, GURKA, string);\n+\t}\n+\n@@ -103,0 +132,20 @@\n+\n+\t\/** Wraps the provided {@link InputStream} such that it doesn't allow mark\/reset. *\/\n+\tprivate static InputStream withoutMark(InputStream stream) {\n+\t\treturn new FilterInputStream(stream) {\n+\t\t\t@Override\n+\t\t\tpublic void reset() throws IOException {\n+\t\t\t\tthrow new IOException(\"reset is not supported\");\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void mark(int limit) {\n+\t\t\t\t\/\/ nop\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean markSupported() {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t};\n+\t}\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/main\/java\/org\/openjdk\/jmc\/common\/test\/util\/IOToolkitTest.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}