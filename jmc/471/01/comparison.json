{"files":[{"patch":"@@ -166,0 +166,1 @@\n+\t\t\t\t\t\t<exclude>TestDynamicallyLoadedClasses.java<\/exclude>\n@@ -282,0 +283,11 @@\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>test-dynamically-loaded-classes<\/id>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>integration-test<\/goal>\n+\t\t\t\t\t\t\t<goal>verify<\/goal>\n+\t\t\t\t\t\t<\/goals>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<argLine>-XX:+FlightRecorder -javaagent:target\/agent-${revision}${changelist}.jar -cp target\/agent-${revision}${changelist}.jar:target\/test-classes\/<\/argLine>\n+\t\t\t\t\t\t\t<includes>TestDynamicallyLoadedClasses.java<\/includes>\n+\t\t\t\t\t\t<\/configuration>\n+\t\t\t\t\t<\/execution>\n","filename":"agent\/pom.xml","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.stream.Collectors;\n@@ -158,7 +159,5 @@\n-\t\tList<Class<?>> classesToRetransform = new ArrayList<Class<?>>();\n-\t\tfor (String clazz : clazzes) {\n-\t\t\ttry {\n-\t\t\t\tClass<?> classToRetransform = Class.forName(clazz.replace('\/', '.'));\n-\t\t\t\tclassesToRetransform.add(classToRetransform);\n-\t\t\t} catch (ClassNotFoundException cnfe) {\n-\t\t\t\tgetLogger().log(Level.SEVERE, \"Unable to find class: \" + clazz, cnfe);\n+\t\tList<Class<?>> classesToRetransform = new ArrayList<>();\n+\t\tclazzes = clazzes.stream().map((name) -> name.replace('\/', '.')).collect(Collectors.toSet());\n+\t\tfor (Class<?> clazz : instrumentation.getAllLoadedClasses()) {\n+\t\t\tif (clazzes.contains(clazz.getName())) {\n+\t\t\t\tclassesToRetransform.add(clazz);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.stream.Collectors;\n@@ -85,7 +86,5 @@\n-\t\tSet<Class<?>> classesToRetransform = new HashSet<>();\n-\t\tfor (String className : classNames) {\n-\t\t\ttry {\n-\t\t\t\tClass<?> classToRetransform = Class.forName(className.replace('\/', '.'));\n-\t\t\t\tclassesToRetransform.add(classToRetransform);\n-\t\t\t} catch (ClassNotFoundException cnfe) {\n-\t\t\t\tlogger.log(Level.SEVERE, \"Unable to find class: \" + className, cnfe);\n+\t\tList<Class<?>> classesToRetransform = new ArrayList<>();\n+\t\tclassNames = classNames.stream().map((name) -> name.replace('\/', '.')).collect(Collectors.toSet());\n+\t\tfor (Class<?> clazz : instrumentation.getAllLoadedClasses()) {\n+\t\t\tif (classNames.contains(clazz.getName())) {\n+\t\t\t\tclassesToRetransform.add(clazz);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jmx\/AgentController.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\r\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\r\n+ * Copyright (c) 2023 SAP SE. All rights reserved.\r\n+ *\r\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\r\n+ *\r\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\r\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\r\n+ *\r\n+ * or the following license:\r\n+ *\r\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\r\n+ * provided that the following conditions are met:\r\n+ *\r\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\r\n+ * and the following disclaimer.\r\n+ *\r\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\r\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\r\n+ * the distribution.\r\n+ *\r\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\r\n+ * endorse or promote products derived from this software without specific prior written permission.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\r\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\r\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\r\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\r\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n+ *\/\r\n+\r\n+package org.openjdk.jmc.agent.test;\r\n+\r\n+import java.io.IOException;\r\n+import java.lang.management.ManagementFactory;\r\n+import java.lang.reflect.Method;\r\n+\r\n+import javax.management.JMX;\r\n+import javax.management.ObjectName;\r\n+\r\n+import org.junit.Assert;\r\n+import org.junit.Test;\r\n+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;\r\n+import org.openjdk.jmc.agent.test.util.TestToolkit;\r\n+\r\n+public class TestDynamicallyLoadedClasses {\r\n+\r\n+\tprivate static final String AGENT_OBJECT_NAME = \"org.openjdk.jmc.jfr.agent:type=AgentController\";\r\n+\r\n+\tprivate static final String XML_TEST_DESCRIPTION = \"<jfragent>\" + \"<config>\" + \"<classprefix>\"\r\n+\t\t\t+ \"__JFRTestDynamicallyLoadedClasses\" + \"<\/classprefix>\" + \"<allowconverter>\" + true + \"<\/allowconverter>\"\r\n+\t\t\t+ \"<\/config>\" + \"<events>\" + \"<event id=\\\"demo.jfr.test.dynamic\\\">\"\t+ \"<label>\" + \"JFR Dynamic\" + \"<\/label>\"\r\n+\t\t\t+ \"<description>\" + \"desc\" + \"<\/description>\" + \"<path>\" + \"demo\/dynamic\" + \"<\/path>\" +  \"<class>\"\r\n+\t\t\t+ Target.class.getName() + \"<\/class>\" + \"<method>\" + \"<name>\" + \"testStaticWithParameter\" + \"<\/name>\"\r\n+\t\t\t+ \"<descriptor>\" + \"(I)Ljava\/lang\/Object;\" + \"<\/descriptor>\" + \"<returnvalue>\" + \"<name>\" + \"val\"\r\n+\t\t\t+ \"<\/name>\"\t+ \"<description>\" + \"value\" + \"<\/description>\" + \"<converter>\"\r\n+\t\t\t+ TestDynamicallyLoadedClasses.class.getName() + \"<\/converter>\" + \"<\/returnvalue>\" + \"<\/method>\"\r\n+\t\t\t+ \"<location>\" + \"WRAP\" + \"<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\r\n+\r\n+\tprivate static int sum = 0;\r\n+\r\n+\t@Test\r\n+\tpublic void testIntrumentationOfDynamicallyLoadedClass() throws Exception {\r\n+\t\t\/\/ Load the class when we are not tracking it yet.\r\n+\t\tClassLoader c = new TargetLoader();\r\n+\t\tClass<?> cls = c.loadClass(Target.class.getName());\r\n+\t\tMethod m = cls.getDeclaredMethod(\"testStaticWithParameter\", int.class);\r\n+\r\n+\t\tAssert.assertNotEquals(Target.class.getClassLoader(), cls.getClassLoader());\r\n+\t\t\r\n+\t\tAgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\r\n+\t\t\t\tnew ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);\r\n+\t\tmbean.defineEventProbes(XML_TEST_DESCRIPTION);\r\n+\r\n+\t\t\/\/ Use the convert method to determine if we instrumented both classes.\r\n+\t\tm.invoke(null, Integer.valueOf(1));\r\n+\t\tTarget.testStaticWithParameter(2);\r\n+\r\n+\t\t\/\/ Check both calls were tracked\r\n+\t\tAssert.assertEquals(3, sum);\r\n+\t}\r\n+\r\n+\tpublic static int convert(Object o) {\r\n+\t\tint v = ((Integer) o).intValue();\r\n+\t\tsum += v;\r\n+\t\treturn v;\r\n+\t}\r\n+\r\n+\tprivate static class TargetLoader extends ClassLoader {\r\n+\t\t@Override\r\n+\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\r\n+\t\t\tif (name.equals(Target.class.getName())) {\r\n+\t\t\t\ttry {\r\n+\t\t\t\t\treturn defineClass(Target.class.getName(), TestToolkit.getByteCode(Target.class), 0,\r\n+\t\t\t\t\t\t\tTestToolkit.getByteCode(Target.class).length);\r\n+\t\t\t\t} catch (ClassFormatError | IOException e) {\r\n+\t\t\t\t\tthrow new ClassNotFoundException();\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\r\n+\t\t\treturn TargetLoader.class.getClassLoader().loadClass(name);\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic static class Target {\r\n+\t\tpublic static Object testStaticWithParameter(int p) {\r\n+\t\t\tSystem.out.println(\"Called with parameter \" + p);\r\n+\t\t\treturn Integer.valueOf(p);\r\n+\t\t}\r\n+\t}\r\n+}\r\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestDynamicallyLoadedClasses.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}