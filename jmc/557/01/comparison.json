{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1051,0 +1051,25 @@\n+\tpublic static <T> IAggregator<Number, ?> getIdentifier(String typeId, IAttribute<T> attribute) {\n+\t\tIAggregator<Set<T>, ?> aggregator = Aggregators.distinct(attribute);\n+\t\taggregator = filter(aggregator, ItemFilters.type(typeId));\n+\t\treturn Aggregators.valueBuilderAggregator(aggregator, new IValueBuilder<Number, Set<T>>() {\n+\t\t\t@Override\n+\t\t\tpublic IType<? super Number> getValueType() {\n+\t\t\t\treturn UnitLookup.RAW_NUMBER;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Number getValue(Set<T> source) {\n+\t\t\t\tNumber value = 0;\n+\t\t\t\tif (source.isEmpty()) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t} else {\n+\t\t\t\t\tIterator<?> itr = source.iterator();\n+\t\t\t\t\twhile (itr.hasNext()) {\n+\t\t\t\t\t\tvalue = (Number) itr.next();\n+\t\t\t\t\t}\n+\t\t\t\t\treturn value;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}, attribute.getName(), attribute.getDescription());\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/Aggregators.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -485,1 +485,2 @@\n-\t\t\t\t\t\t|| JfrInternalConstants.JAVA_THREAD_ID_ID.equals(f.fieldIdentifier)) {\n+\t\t\t\t\t\t|| JfrInternalConstants.JAVA_THREAD_ID_ID.equals(f.fieldIdentifier)\n+\t\t\t\t\t\t|| JfrInternalConstants.JVM_PID.equals(f.fieldIdentifier)) {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/TypeManager.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+\tpublic static final String JVM_PID = \"pid\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/util\/JfrInternalConstants.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import static org.openjdk.jmc.common.item.Aggregators.getIdentifier;\n@@ -118,2 +119,2 @@\n-\tpublic static final IAggregator<IQuantity, ?> JVM_PID = min(JdkAttributes.JVM_PID.getName(), null, VM_INFO,\n-\t\t\tJdkAttributes.JVM_PID);\n+\tpublic static final IAggregator<Number, ?> JVM_PID = getIdentifier(VM_INFO, JdkAttributes.JVM_PID);\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import static org.openjdk.jmc.common.unit.UnitLookup.RAW_NUMBER;\n@@ -460,2 +461,2 @@\n-\tpublic static final IAttribute<IQuantity> JVM_PID = attr(\"pid\", Messages.getString(Messages.ATTR_JVM_PID), \/\/$NON-NLS-1$\n-\t\t\tNUMBER);\n+\tpublic static final IAttribute<Number> JVM_PID = attr(\"pid\", Messages.getString(Messages.ATTR_JVM_PID), \/\/$NON-NLS-1$\n+\t\t\tRAW_NUMBER);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}