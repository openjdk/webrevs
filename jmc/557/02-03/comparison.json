{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1051,25 +1051,0 @@\n-\tpublic static <T> IAggregator<Long, ?> getIdentifier(String typeId, IAttribute<T> attribute) {\n-\t\tIAggregator<Set<T>, ?> aggregator = Aggregators.distinct(attribute);\n-\t\taggregator = filter(aggregator, ItemFilters.type(typeId));\n-\t\treturn Aggregators.valueBuilderAggregator(aggregator, new IValueBuilder<Long, Set<T>>() {\n-\t\t\t@Override\n-\t\t\tpublic IType<? super Long> getValueType() {\n-\t\t\t\treturn UnitLookup.RAW_LONG;\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic Long getValue(Set<T> source) {\n-\t\t\t\tLong value = 0L;\n-\t\t\t\tif (source.isEmpty()) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t} else {\n-\t\t\t\t\tIterator<?> itr = source.iterator();\n-\t\t\t\t\twhile (itr.hasNext()) {\n-\t\t\t\t\t\tvalue = (Long) itr.next();\n-\t\t\t\t\t}\n-\t\t\t\t\treturn value;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}, attribute.getName(), attribute.getDescription());\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/Aggregators.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -485,2 +485,1 @@\n-\t\t\t\t\t\t|| JfrInternalConstants.JAVA_THREAD_ID_ID.equals(f.fieldIdentifier)\n-\t\t\t\t\t\t|| JfrInternalConstants.JVM_PID.equals(f.fieldIdentifier)) {\n+\t\t\t\t\t\t|| JfrInternalConstants.JAVA_THREAD_ID_ID.equals(f.fieldIdentifier)) {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/TypeManager.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-\tpublic static final String JVM_PID = \"pid\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/util\/JfrInternalConstants.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static org.openjdk.jmc.common.item.Aggregators.getIdentifier;\n@@ -119,2 +118,1 @@\n-\tpublic static final IAggregator<Long, ?> JVM_PID = getIdentifier(VM_INFO, JdkAttributes.JVM_PID);\n-\n+\tpublic static final IAggregator<String, ?> JVM_PID = distinctAsString(VM_INFO, JdkAttributes.PID);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-import static org.openjdk.jmc.common.unit.UnitLookup.RAW_NUMBER;\n@@ -461,2 +460,2 @@\n-\tpublic static final IAttribute<Number> JVM_PID = attr(\"pid\", Messages.getString(Messages.ATTR_JVM_PID), \/\/$NON-NLS-1$\n-\t\t\tRAW_NUMBER);\n+\tpublic static final IAttribute<IQuantity> JVM_PID = attr(\"pid\", Messages.getString(Messages.ATTR_JVM_PID), \/\/$NON-NLS-1$\n+\t\t\tNUMBER);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n@@ -172,0 +173,17 @@\n+\t\t\t\t} else if (JdkTypeIDs.VM_INFO.equals(identifier)) {\n+\t\t\t\t\t\/\/ Adding a String pid, as that is what is used in the jdk.SystemProcess event.\n+\t\t\t\t\tint packageIndex = -1;\n+\t\t\t\t\tfor (int i = 0; i < dataStructure.size(); i++) {\n+\t\t\t\t\t\tValueField vf = dataStructure.get(i);\n+\t\t\t\t\t\tif (vf.matches(JdkAttributes.JVM_PID)) {\n+\t\t\t\t\t\t\tpackageIndex = i;\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (packageIndex != -1) {\n+\t\t\t\t\t\tList<ValueField> newDataStructure = new ArrayList<>(dataStructure);\n+\t\t\t\t\t\tnewDataStructure.set(packageIndex, new ValueField(JdkAttributes.PID));\n+\t\t\t\t\t\tIEventSink subSink = sf.create(identifier, label, category, description, newDataStructure);\n+\t\t\t\t\t\tIEventSink moduleExportSink = new LongAsStringSink(subSink, packageIndex);\n+\t\t\t\t\t\treturn moduleExportSink;\n+\t\t\t\t\t}\n@@ -215,0 +233,22 @@\n+\n+\tprivate static class LongAsStringSink implements IEventSink {\n+\t\tprivate final IEventSink subSink;\n+\t\tprivate final int pidIndex;\n+\n+\t\tpublic LongAsStringSink(IEventSink subSink, int pidIndex) {\n+\t\t\tthis.subSink = subSink;\n+\t\t\tthis.pidIndex = pidIndex;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addEvent(Object[] values) {\n+\t\t\tIQuantity longPid = (IQuantity) values[pidIndex];\n+\t\t\tif (longPid != null && values != null && values.length > 0) {\n+\t\t\t\tString pid = String.valueOf(longPid.longValue());\n+\t\t\t\tObject[] newValues = new Object[values.length];\n+\t\t\t\tSystem.arraycopy(values, 0, newValues, 0, values.length - 1);\n+\t\t\t\tnewValues[pidIndex] = pid;\n+\t\t\t\tsubSink.addEvent(newValues);\n+\t\t\t}\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/synthetic\/SyntheticAttributeExtension.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}