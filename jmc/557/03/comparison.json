{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,2 +118,1 @@\n-\tpublic static final IAggregator<IQuantity, ?> JVM_PID = min(JdkAttributes.JVM_PID.getName(), null, VM_INFO,\n-\t\t\tJdkAttributes.JVM_PID);\n+\tpublic static final IAggregator<String, ?> JVM_PID = distinctAsString(VM_INFO, JdkAttributes.PID);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n@@ -172,0 +173,17 @@\n+\t\t\t\t} else if (JdkTypeIDs.VM_INFO.equals(identifier)) {\n+\t\t\t\t\t\/\/ Adding a String pid, as that is what is used in the jdk.SystemProcess event.\n+\t\t\t\t\tint packageIndex = -1;\n+\t\t\t\t\tfor (int i = 0; i < dataStructure.size(); i++) {\n+\t\t\t\t\t\tValueField vf = dataStructure.get(i);\n+\t\t\t\t\t\tif (vf.matches(JdkAttributes.JVM_PID)) {\n+\t\t\t\t\t\t\tpackageIndex = i;\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (packageIndex != -1) {\n+\t\t\t\t\t\tList<ValueField> newDataStructure = new ArrayList<>(dataStructure);\n+\t\t\t\t\t\tnewDataStructure.set(packageIndex, new ValueField(JdkAttributes.PID));\n+\t\t\t\t\t\tIEventSink subSink = sf.create(identifier, label, category, description, newDataStructure);\n+\t\t\t\t\t\tIEventSink moduleExportSink = new LongAsStringSink(subSink, packageIndex);\n+\t\t\t\t\t\treturn moduleExportSink;\n+\t\t\t\t\t}\n@@ -215,0 +233,22 @@\n+\n+\tprivate static class LongAsStringSink implements IEventSink {\n+\t\tprivate final IEventSink subSink;\n+\t\tprivate final int pidIndex;\n+\n+\t\tpublic LongAsStringSink(IEventSink subSink, int pidIndex) {\n+\t\t\tthis.subSink = subSink;\n+\t\t\tthis.pidIndex = pidIndex;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addEvent(Object[] values) {\n+\t\t\tIQuantity longPid = (IQuantity) values[pidIndex];\n+\t\t\tif (longPid != null && values != null && values.length > 0) {\n+\t\t\t\tString pid = String.valueOf(longPid.longValue());\n+\t\t\t\tObject[] newValues = new Object[values.length];\n+\t\t\t\tSystem.arraycopy(values, 0, newValues, 0, values.length - 1);\n+\t\t\t\tnewValues[pidIndex] = pid;\n+\t\t\t\tsubSink.addEvent(newValues);\n+\t\t\t}\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/synthetic\/SyntheticAttributeExtension.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}