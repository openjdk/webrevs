{"files":[{"filename":"application\/org.openjdk.jmc.flightrecorder.ui\/icons\/histogram.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.ui\/icons\/histogram@2x.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.ui\/icons\/histogram@4x.png","binary":true,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-   \n+\n@@ -57,0 +57,4 @@\n+\n+   <context id=\"HDRHistogramView\" title=\"Histogram View\">\n+      <description>This view shows an HDR Histogram of events selected in the Flight Recorder editor view.<\/description>\n+   <\/context>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/org.openjdk.jmc.flightrecorder.ui_contexts.xml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+HDR_HISTOGRAM=Histogram\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/plugin.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,9 @@\n+    <view\n+        allowMultiple=\"false\"\n+        category=\"org.openjdk.jmc.ui.main\"\n+        class=\"org.openjdk.jmc.flightrecorder.ui.views.histogram.HDRHistogramView\"\n+        icon=\"icons\/histogram.png\"\n+        id=\"org.openjdk.jmc.flightrecorder.ui.HDRHistogramView\"\n+        name=\"%HDR_HISTOGRAM\"\n+        restorable=\"true\">\n+    <\/view>\n@@ -141,0 +150,19 @@\n+      \n+      <perspectiveExtension\n+            targetID=\"org.openjdk.jmc.ui.idesupport.StandardPerspective\">\n+         <view\n+               closeable=\"true\"\n+               id=\"org.openjdk.jmc.flightrecorder.ui.HDRHistogramView\"\n+               minimized=\"false\"\n+               moveable=\"true\"\n+               ratio=\"0.75\"\n+               relationship=\"stack\"\n+               relative=\"org.openjdk.jmc.flightrecorder.ui.StacktraceView\"\n+               showTitle=\"true\"\n+               standalone=\"false\"\n+               visible=\"true\">\n+         <\/view>\n+         <viewShortcut\n+               id=\"org.openjdk.jmc.flightrecorder.ui.HDRHistogramView\">\n+         <\/viewShortcut>\n+      <\/perspectiveExtension>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/plugin.xml","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+\t\t\tUnitLookup.NUMBER_UNITY.quantity(50.0), \n@@ -137,1 +138,2 @@\n-\t\t *            the event type ID used to match events belonging to this series\n+\t\t *            the event type ID used to match events belonging to this series, or null to\n+\t\t *            match all types\n@@ -306,0 +308,3 @@\n+\t\t\tif (typeId == null || type == null) {\n+\t\t\t\treturn true;\n+\t\t\t}\n@@ -501,4 +506,6 @@\n-\t\t\t\t\t.map(a -> ItemFilters.and(ItemFilters.type(a.getTypeId()),\n-\t\t\t\t\t\t\tItemFilters.moreOrEqual(JfrAttributes.DURATION,\n-\t\t\t\t\t\t\t\t\ta.getLowestEquivalentDuration(getValue(a.getDurationColId())))))\n-\t\t\t\t\t.reduce(ItemFilters::or).orElse(ItemFilters.none());\n+\t\t\t\t\t.map(a -> {\n+\t\t\t\t\t\tString typeId = a.getTypeId();\n+\t\t\t\t\t\tIItemFilter typeFilter = typeId != null ? ItemFilters.type(typeId) : ItemFilters.all();\n+\t\t\t\t\t\treturn ItemFilters.and(typeFilter, ItemFilters.moreOrEqual(JfrAttributes.DURATION,\n+\t\t\t\t\t\t\t\ta.getLowestEquivalentDuration(getValue(a.getDurationColId()))));\n+\t\t\t\t\t}).reduce(ItemFilters::or).orElse(ItemFilters.none());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/DurationPercentileTable.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+\tpublic static final String ICON_HISTOGRAM = \"histogram.png\"; \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ImageConstants.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -256,0 +256,7 @@\n+\tpublic static String HDRHistogramView_NO_VALID_SELECTION_TEXT;\n+\tpublic static String HDRHistogramView_DURATION_COLUMN_NAME;\n+\tpublic static String HDRHistogramView_EVENT_COUNT_COLUMN_NAME;\n+\tpublic static String HDRHistogramView_PERCENTILE_SELECTION;\n+\tpublic static String HDRHistogramView_DURATION_SELECTION;\n+\tpublic static String HDRHistogramView_DURATIONS_CHART_TITLE;\n+\tpublic static String HDRHistogramView_DURATIONS_CHART_DESCRIPTION;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,0 +56,9 @@\n+\t\/**\n+\t * Returns the items that form the basis of this selection.\n+\t * \n+\t * @return the collection of items this selection is based on\n+\t *\/\n+\tpublic IItemCollection getItems() {\n+\t\treturn selectedItems;\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/ItemBackedSelection.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,393 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.ui.views.histogram;\n+\n+import java.awt.Color;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.ISelectionProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.custom.StackLayout;\n+import org.eclipse.swt.events.ControlListener;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.IMemento;\n+import org.eclipse.ui.ISelectionListener;\n+import org.eclipse.ui.IViewSite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.part.ViewPart;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IAggregator;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.IRange;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.flightrecorder.JfrAttributes;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.flightrecorder.ui.IPageContainer;\n+import org.openjdk.jmc.flightrecorder.ui.common.DataPageToolkit;\n+import org.openjdk.jmc.flightrecorder.ui.common.DurationPercentileTable;\n+import org.openjdk.jmc.flightrecorder.ui.common.DurationPercentileTable.DurationPercentileTableBuilder;\n+import org.openjdk.jmc.flightrecorder.ui.common.TypeLabelProvider;\n+import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n+import org.openjdk.jmc.flightrecorder.ui.selection.ItemBackedSelection;\n+import org.openjdk.jmc.flightrecorder.ui.selection.SelectionStore;\n+import org.openjdk.jmc.flightrecorder.ui.selection.SelectionStoreActionToolkit;\n+import org.openjdk.jmc.ui.charts.IXDataRenderer;\n+import org.openjdk.jmc.ui.charts.RendererToolkit;\n+import org.openjdk.jmc.ui.charts.XYChart;\n+import org.openjdk.jmc.ui.column.ColumnMenusFactory;\n+import org.openjdk.jmc.ui.column.TableSettings;\n+import org.openjdk.jmc.ui.column.TableSettings.ColumnSettings;\n+import org.openjdk.jmc.ui.common.util.AdapterUtil;\n+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;\n+import org.openjdk.jmc.ui.layout.SimpleLayout;\n+import org.openjdk.jmc.ui.layout.SimpleLayoutData;\n+import org.openjdk.jmc.ui.misc.ChartCanvas;\n+\n+public class HDRHistogramView extends ViewPart implements ISelectionListener {\n+\tprivate IItemCollection currentItems;\n+\n+\t\/\/ UI Components\n+\tprivate Composite parentComposite;\n+\tprivate StackLayout stack;\n+\tprivate SashForm sash;\n+\tprivate Composite messageComposite;\n+\tprivate Composite contentComposite;\n+\tprivate ChartCanvas durationCanvas;\n+\n+\tprivate int[] sashWeights;\n+\n+\tprivate IRange<IQuantity> durationRange;\n+\tprivate static final String SASH_ELEMENT = \"sash\"; \/\/$NON-NLS-1$\n+\tprivate static final DurationPercentileTableBuilder PERCENTILES_BUILDER = new DurationPercentileTableBuilder();\n+\tprivate static final int[] DEFAULT_SASH_WEIGHTS = new int[] {60, 40};\n+\tprivate static final Color GRAPH_COLOR = TypeLabelProvider.getColor(JdkTypeIDs.SOCKET_READ);\n+\n+\tprivate DurationPercentileTable percentileTable;\n+\tprivate ViewSelectionProvider selectionProvider;\n+\n+\tstatic {\n+\t\tPERCENTILES_BUILDER.addSeries(\"duration\", Messages.HDRHistogramView_DURATION_COLUMN_NAME, \"eventCount\",\n+\t\t\t\tMessages.HDRHistogramView_EVENT_COUNT_COLUMN_NAME, null);\n+\t}\n+\n+\tprivate class ViewSelectionProvider implements ISelectionProvider {\n+\t\tprivate ISelection selection;\n+\t\tprivate final List<ISelectionChangedListener> listeners = new ArrayList<>();\n+\n+\t\t@Override\n+\t\tpublic void addSelectionChangedListener(ISelectionChangedListener listener) {\n+\t\t\tlisteners.add(listener);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ISelection getSelection() {\n+\t\t\treturn selection;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void removeSelectionChangedListener(ISelectionChangedListener listener) {\n+\t\t\tlisteners.remove(listener);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setSelection(ISelection selection) {\n+\t\t\tthis.selection = selection;\n+\t\t\tSelectionChangedEvent event = new SelectionChangedEvent(this, selection);\n+\t\t\tfor (ISelectionChangedListener listener : listeners) {\n+\t\t\t\tlistener.selectionChanged(event);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void init(IViewSite site, IMemento memento) throws PartInitException {\n+\t\tsuper.init(site, memento);\n+\t\tgetSite().getPage().addSelectionListener(this);\n+\n+\t\t\/\/ Restore state if available\n+\t\tif (memento != null) {\n+\t\t\tIMemento sashMemento = memento.getChild(SASH_ELEMENT);\n+\t\t\tif (sashMemento != null) {\n+\t\t\t\t\/\/ For now, we have 2 sash areas\n+\t\t\t\tsashWeights = new int[2];\n+\n+\t\t\t\tInteger weight0 = sashMemento.getInteger(\"weight0\");\n+\t\t\t\tInteger weight1 = sashMemento.getInteger(\"weight1\");\n+\n+\t\t\t\tif (weight0 != null && weight1 != null) {\n+\t\t\t\t\tsashWeights[0] = weight0;\n+\t\t\t\t\tsashWeights[1] = weight1;\n+\t\t\t\t} else {\n+\t\t\t\t\tsashWeights = DEFAULT_SASH_WEIGHTS;\n+\t\t\t\t}\n+\t\t\t\t\/\/ Reset any saved range\n+\t\t\t\tdurationRange = null;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tselectionProvider = new ViewSelectionProvider();\n+\t\tgetSite().setSelectionProvider(selectionProvider);\n+\n+\t\tthis.parentComposite = new Composite(parent, SWT.NONE);\n+\t\tthis.stack = new StackLayout();\n+\t\tparentComposite.setLayout(stack);\n+\n+\t\t\/\/ Composite for when there is no valid selection...\n+\t\tcreateMessageComposite(parentComposite);\n+\n+\t\t\/\/ Composite for the content\n+\t\tcreateContentComposite(parentComposite);\n+\n+\t\tif (currentItems != null) {\n+\t\t\tupdateWithItems(currentItems);\n+\t\t} else {\n+\t\t\tshowMessage();\n+\t\t}\n+\t}\n+\n+\tprivate void createContentComposite(Composite parent) {\n+\t\tcontentComposite = new Composite(parent, SWT.NONE);\n+\t\tcontentComposite.setLayout(new FillLayout());\n+\t\tsash = new SashForm(contentComposite, SWT.HORIZONTAL);\n+\n+\t\tSimpleLayoutData sashLayoutData = new SimpleLayoutData(SimpleLayout.INIFINITE_WEIGHT);\n+\t\tsash.setLayoutData(sashLayoutData);\n+\n+\t\tdurationCanvas = new ChartCanvas(sash);\n+\t\tdurationCanvas.setLayout(new FillLayout());\n+\n+\t\tComposite tableComposite = new Composite(sash, SWT.NONE);\n+\t\ttableComposite.setLayout(new FillLayout());\n+\n+\t\tcreatePercentileTable(tableComposite);\n+\t\tupdateHistogramChart();\n+\n+\t\t\/\/ Set sash weights from saved state or default\n+\t\tsash.setWeights(sashWeights != null ? sashWeights : DEFAULT_SASH_WEIGHTS);\n+\t}\n+\n+\tprivate void createMessageComposite(Composite parent) {\n+\t\tmessageComposite = new Composite(parent, SWT.NONE);\n+\t\tmessageComposite.setLayout(new FillLayout());\n+\n+\t\tLabel label = new Label(messageComposite, SWT.CENTER);\n+\t\tlabel.setText(Messages.HDRHistogramView_NO_VALID_SELECTION_TEXT);\n+\t}\n+\n+\t@Override\n+\tpublic void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+\t\tif (part != this && selection instanceof IStructuredSelection) {\n+\t\t\tObject first = ((IStructuredSelection) selection).getFirstElement();\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\tupdateWithItems(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\tupdateWithItems(items);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateWithItems(IItemCollection items) {\n+\t\tcurrentItems = items;\n+\t\tif (sash != null && !sash.isDisposed()) {\n+\t\t\tIItemCollection itemsWithDuration = currentItems.apply(ItemFilters.hasAttribute(JfrAttributes.DURATION));\n+\n+\t\t\tif (itemsWithDuration.hasItems()) {\n+\t\t\t\tupdatePercentileTable(itemsWithDuration);\n+\t\t\t\tupdateHistogramChart();\n+\t\t\t\tshowContent();\n+\t\t\t} else {\n+\t\t\t\tshowMessage();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void updateHistogramChart() {\n+\t\tif (currentItems != null && durationCanvas != null && !durationCanvas.isDisposed()) {\n+\t\t\tIItemCollection itemsWithDuration = currentItems.apply(ItemFilters.hasAttribute(JfrAttributes.DURATION));\n+\t\t\t\/\/ This should never happen as we check in updateWithItems, but just in case\n+\t\t\tif (!itemsWithDuration.hasItems()) {\n+\t\t\t\tshowMessage();\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tList<IXDataRenderer> renderers = new ArrayList<>();\n+\t\t\trenderers.add(DataPageToolkit.buildDurationHistogram(Messages.HDRHistogramView_DURATIONS_CHART_TITLE,\n+\t\t\t\t\tMessages.HDRHistogramView_DURATIONS_CHART_DESCRIPTION, itemsWithDuration,\n+\t\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.count(), GRAPH_COLOR));\n+\t\t\tIXDataRenderer rendererRoot = RendererToolkit.uniformRows(renderers);\n+\n+\t\t\t\/\/ Get the maximum duration to set chart bounds\n+\t\t\tIQuantity maxDuration = itemsWithDuration.getAggregate(JdkAggregators.LONGEST_EVENT);\n+\t\t\tif (maxDuration == null) {\n+\t\t\t\tmaxDuration = UnitLookup.MILLISECOND.quantity(100);\n+\t\t\t} else {\n+\t\t\t\tmaxDuration = UnitLookup.MILLISECOND.quantity(maxDuration.doubleValueIn(UnitLookup.MILLISECOND) * 1.1);\n+\t\t\t}\n+\n+\t\t\tXYChart durationChart = new XYChart(UnitLookup.MILLISECOND.quantity(0), maxDuration, rendererRoot, 180);\n+\t\t\tDataPageToolkit.setChart(durationCanvas, durationChart, JfrAttributes.DURATION, selection -> {\n+\t\t\t\tif (selection != null && selectionProvider != null) {\n+\t\t\t\t\tselectionProvider.setSelection(\n+\t\t\t\t\t\t\tnew ItemBackedSelection(selection, Messages.HDRHistogramView_DURATION_SELECTION));\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\tif (durationRange != null) {\n+\t\t\t\tdurationChart.setVisibleRange(durationRange.getStart(), durationRange.getEnd());\n+\t\t\t\tdurationRange = null;\n+\t\t\t}\n+\n+\t\t\tdurationCanvas.addControlListener(ControlListener.controlResizedAdapter(e -> {\n+\t\t\t\tIRange<IQuantity> visibleRange = durationChart.getVisibleRange();\n+\t\t\t\tdurationChart.setVisibleRange(visibleRange.getStart(), visibleRange.getEnd());\n+\t\t\t\tdurationCanvas.redraw();\n+\t\t\t}));\n+\t\t}\n+\t}\n+\n+\tprivate void updatePercentileTable(IItemCollection items) {\n+\t\tif (percentileTable != null) {\n+\t\t\tpercentileTable.update(items);\n+\t\t}\n+\t}\n+\n+\tprivate void createPercentileTable(Composite parent) {\n+\t\tList<ColumnSettings> columnSettings = new ArrayList<>();\n+\t\tcolumnSettings\n+\t\t\t\t.add(new ColumnSettings(DurationPercentileTable.TABLE_NAME + \".percentile\", false, 80, Boolean.TRUE));\n+\t\tcolumnSettings.add(new ColumnSettings(\"duration\", false, 120, null));\n+\t\tcolumnSettings.add(new ColumnSettings(\"eventCount\", false, 100, null));\n+\t\tTableSettings tableSettings = new TableSettings(null, columnSettings);\n+\t\tpercentileTable = PERCENTILES_BUILDER.build(parent, tableSettings);\n+\n+\t\tMCContextMenuManager percentileTableMm = MCContextMenuManager\n+\t\t\t\t.create(percentileTable.getManager().getViewer().getControl());\n+\t\tColumnMenusFactory.addDefaultMenus(percentileTable.getManager(), percentileTableMm);\n+\n+\t\t\/\/ Add selection store actions directly like StacktraceView does\n+\t\tSelectionStoreActionToolkit.addSelectionStoreActions(percentileTable.getManager().getViewer(),\n+\t\t\t\tthis::getSelectionStore, this::getSelectedItemsAsCollection,\n+\t\t\t\tMessages.HDRHistogramView_PERCENTILE_SELECTION, percentileTableMm);\n+\t}\n+\n+\tprivate IItemCollection getSelectedItemsAsCollection() {\n+\t\tIItemCollection items = percentileTable.getSelectedItems();\n+\t\tif (items == null) {\n+\t\t\treturn ItemCollectionToolkit.build(Stream.empty());\n+\t\t}\n+\t\treturn items;\n+\t}\n+\n+\tprivate SelectionStore getSelectionStore() {\n+\t\ttry {\n+\t\t\t\/\/ Try to get active editor which should be an IPageContainer\n+\t\t\tIWorkbenchPart editorPart = getSite().getPage().getActiveEditor();\n+\t\t\tif (editorPart instanceof IPageContainer) {\n+\t\t\t\treturn ((IPageContainer) editorPart).getSelectionStore();\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.INFO,\n+\t\t\t\t\t\"Got exception while trying to get the active editor\", e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tif (sash != null) {\n+\t\t\tsash.setFocus();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void saveState(IMemento memento) {\n+\t\tsuper.saveState(memento);\n+\t\tif (sash != null && !sash.isDisposed()) {\n+\t\t\tIMemento sashMemento = memento.createChild(SASH_ELEMENT);\n+\t\t\tint[] weights = sash.getWeights();\n+\t\t\tif (weights.length > 0) {\n+\t\t\t\tsashMemento.putInteger(\"weight0\", weights[0]);\n+\t\t\t}\n+\t\t\tif (weights.length > 1) {\n+\t\t\t\tsashMemento.putInteger(\"weight1\", weights[1]);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tif (getSite() != null && getSite().getWorkbenchWindow() != null) {\n+\t\t\tgetSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(this);\n+\t\t}\n+\t\tsuper.dispose();\n+\t}\n+\n+\tpublic void showMessage() {\n+\t\tif (stack != null && stack.topControl == contentComposite) {\n+\t\t\tsashWeights = sash.getWeights();\n+\t\t\tstack.topControl = messageComposite;\n+\t\t}\n+\t\tparentComposite.layout();\n+\t}\n+\n+\tpublic void showContent() {\n+\t\tif (stack.topControl != contentComposite) {\n+\t\t\tif (sashWeights != null) {\n+\t\t\t\tsash.setWeights(sashWeights);\n+\t\t\t}\n+\t\t\tstack.topControl = contentComposite;\n+\t\t\tparentComposite.layout();\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/histogram\/HDRHistogramView.java","additions":393,"deletions":0,"binary":false,"changes":393,"status":"added"},{"patch":"@@ -371,0 +371,7 @@\n+HDRHistogramView_NO_VALID_SELECTION_TEXT=No valid selection\n+HDRHistogramView_DURATION_COLUMN_NAME=Duration\n+HDRHistogramView_EVENT_COUNT_COLUMN_NAME=Event Count\n+HDRHistogramView_PERCENTILE_SELECTION=Percentile Selection\n+HDRHistogramView_DURATION_SELECTION=Duration Selection\n+HDRHistogramView_DURATIONS_CHART_TITLE=Durations\n+HDRHistogramView_DURATIONS_CHART_DESCRIPTION=Distribution of durations\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}