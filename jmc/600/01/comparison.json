{"files":[{"patch":"@@ -365,0 +365,2 @@\n+\tpublic static String JavaApplicationPage_ROW_THREAD_COUNTS;\n+\tpublic static String JavaApplicationPage_ROW_THREAD_COUNTS_DESC;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -266,0 +266,3 @@\n+\t\t\tDataPageToolkit.buildLinesRow(Messages.JavaApplicationPage_ROW_THREAD_COUNTS,\n+\t\t\t\t\tMessages.JavaApplicationPage_ROW_THREAD_COUNTS_DESC, allItems, false, JdkQueries.THREAD_STATISTICS,\n+\t\t\t\t\tthis::isAttributeEnabled, UnitLookup.NUMBER_UNITY.quantity(0), null).ifPresent(rows::add);\n@@ -331,2 +334,3 @@\n-\t\t\t\t\t\t\tStream.concat(JdkQueries.RSS_SIMPLE_QUERY.getAttributes().stream(),\n-\t\t\t\t\t\t\t\t\tStream.of(JdkAttributes.HEAP_USED)))\n+\t\t\t\t\t\t\tStream.concat(JdkQueries.THREAD_STATISTICS.getAttributes().stream(),\n+\t\t\t\t\t\t\t\t\tStream.concat(JdkQueries.RSS_SIMPLE_QUERY.getAttributes().stream(),\n+\t\t\t\t\t\t\t\t\t\t\tStream.of(JdkAttributes.HEAP_USED))))\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/JavaApplicationPage.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -172,0 +172,2 @@\n+JavaApplicationPage_ROW_THREAD_COUNTS=Thread Counts\n+JavaApplicationPage_ROW_THREAD_COUNTS_DESC =This lane can simultaneously show various thread counts. Check the legend entries to see which is represented by what color and to enable\/disable them separately.\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -821,0 +821,26 @@\n+\tpublic static final IAttribute<Number> THREADS_ACCUMULATED_COUNT_NUMBER = Attribute.attr(\"accumulatedCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACCUMULATED_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACCUMULATED_COUNT_DESC), RAW_NUMBER);\n+\tpublic static final IAttribute<Number> THREADS_ACTIVE_COUNT_NUMBER = Attribute.attr(\"activeCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACTIVE_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACTIVE_COUNT_DESC), RAW_NUMBER);\n+\tpublic static final IAttribute<Number> THREADS_DAEMON_COUNT_NUMBER = Attribute.attr(\"daemonCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_DAEMON_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_DAEMON_COUNT_DESC), RAW_NUMBER);\n+\tpublic static final IAttribute<Number> THREADS_PEAK_COUNT_NUMBER = Attribute.attr(\"peakCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_PEAK_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_PEAK_COUNT_DESC), RAW_NUMBER);\n+\n+\tpublic static final IAttribute<IQuantity> THREADS_ACCUMULATED_COUNT = convertNumberToQuantity(\"accumulatedCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACCUMULATED_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACCUMULATED_COUNT_DESC), THREADS_ACCUMULATED_COUNT_NUMBER);\n+\tpublic static final IAttribute<IQuantity> THREADS_ACTIVE_COUNT = convertNumberToQuantity(\"activeCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACTIVE_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_ACTIVE_COUNT_DESC), THREADS_ACTIVE_COUNT_NUMBER);\n+\tpublic static final IAttribute<IQuantity> THREADS_DAEMON_COUNT = convertNumberToQuantity(\"daemonCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_DAEMON_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_DAEMON_COUNT_DESC), THREADS_DAEMON_COUNT_NUMBER);\n+\tpublic static final IAttribute<IQuantity> THREADS_PEAK_COUNT = convertNumberToQuantity(\"peakCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_PEAK_COUNT),\n+\t\t\tMessages.getString(Messages.ATTR_THREADS_PEAK_COUNT_DESC), THREADS_PEAK_COUNT_NUMBER);\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+\tpublic static final IItemFilter THREAD_STATISTICS = ItemFilters.type(JdkTypeIDs.THREAD_STATISTICS);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -135,0 +135,5 @@\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.THREADS_ACCUMULATED_COUNT;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.THREADS_ACTIVE_COUNT;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.THREADS_DAEMON_COUNT;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.THREADS_PEAK_COUNT;\n+\n@@ -239,0 +244,2 @@\n+\tpublic static final IItemQuery THREAD_STATISTICS = fromWhere(JdkFilters.THREAD_STATISTICS)\n+\t\t\t.select(THREADS_ACTIVE_COUNT, THREADS_DAEMON_COUNT, THREADS_PEAK_COUNT, THREADS_ACCUMULATED_COUNT).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkQueries.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -557,0 +557,8 @@\n+\tpublic static final String ATTR_THREADS_ACCUMULATED_COUNT = \"ATTR_THREADS_ACCUMULATED_COUNT\";\n+\tpublic static final String ATTR_THREADS_ACCUMULATED_COUNT_DESC = \"ATTR_THREADS_ACCUMULATED_COUNT_DESC\";\n+\tpublic static final String ATTR_THREADS_ACTIVE_COUNT = \"ATTR_THREADS_ACTIVE_COUNT\";\n+\tpublic static final String ATTR_THREADS_ACTIVE_COUNT_DESC = \"ATTR_THREADS_ACTIVE_COUNT_DESC\";\n+\tpublic static final String ATTR_THREADS_DAEMON_COUNT = \"ATTR_THREADS_DAEMON_COUNT\";\n+\tpublic static final String ATTR_THREADS_DAEMON_COUNT_DESC = \"ATTR_THREADS_DAEMON_COUNT_DESC\";\n+\tpublic static final String ATTR_THREADS_PEAK_COUNT = \"ATTR_THREADS_PEAK_COUNT\";\n+\tpublic static final String ATTR_THREADS_PEAK_COUNT_DESC = \"ATTR_THREADS_PEAK_COUNT_DESC\";\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -369,0 +369,8 @@\n+ATTR_THREADS_ACCUMULATED_COUNT=Total Threads Started\n+ATTR_THREADS_ACCUMULATED_COUNT_DESC=The total number of started threads created and also started since the start of the process\n+ATTR_THREADS_ACTIVE_COUNT=Active Threads\n+ATTR_THREADS_ACTIVE_COUNT_DESC=The number of live threads (including both daemon and non-daemon threads) \n+ATTR_THREADS_DAEMON_COUNT=Daemon Threads \n+ATTR_THREADS_DAEMON_COUNT_DESC=The number of live daemon threads\n+ATTR_THREADS_PEAK_COUNT=Peak Threads\n+ATTR_THREADS_PEAK_COUNT_DESC=Peak live thread count since JVM start (or since the peak count was reset)\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}