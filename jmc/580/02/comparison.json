{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,0 +137,1 @@\n+import org.openjdk.jmc.ui.common.util.ThemeUtils;\n@@ -215,0 +216,1 @@\n+\tprivate static final Color COUNT_COLOR_DARK_MODE = SWTColorToolkit.getColor(new RGB(7, 94, 7));\n@@ -217,0 +219,1 @@\n+\tprivate static final Color SIBLINGS_COUNT_COLOR_DARK_MODE = SWTColorToolkit.getColor(new RGB(8, 115, 8));\n@@ -863,1 +866,2 @@\n-\t\t\t\tevent.gc.setBackground(SIBLINGS_COUNT_COLOR);\n+\t\t\t\tevent.gc.setBackground(\n+\t\t\t\t\t\tThemeUtils.isDarkTheme() ? SIBLINGS_COUNT_COLOR_DARK_MODE : SIBLINGS_COUNT_COLOR);\n@@ -868,1 +872,1 @@\n-\t\t\t\tevent.gc.setBackground(COUNT_COLOR);\n+\t\t\t\tevent.gc.setBackground(ThemeUtils.isDarkTheme() ? COUNT_COLOR_DARK_MODE : COUNT_COLOR);\n@@ -889,1 +893,2 @@\n-\t\t\t\tevent.gc.setBackground(SIBLINGS_COUNT_COLOR);\n+\t\t\t\tevent.gc.setBackground(\n+\t\t\t\t\t\tThemeUtils.isDarkTheme() ? SIBLINGS_COUNT_COLOR_DARK_MODE : SIBLINGS_COUNT_COLOR);\n@@ -894,1 +899,1 @@\n-\t\t\t\tevent.gc.setBackground(COUNT_COLOR);\n+\t\t\t\tevent.gc.setBackground(ThemeUtils.isDarkTheme() ? COUNT_COLOR_DARK_MODE : COUNT_COLOR);\n@@ -1060,1 +1065,1 @@\n-\t\t\tif (treeLayout) {\n+\t\t\tif (treeLayout || ThemeUtils.isDarkTheme()) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -10,1 +10,3 @@\n- org.openjdk.jmc.common;visibility:=reexport\n+ org.openjdk.jmc.common;visibility:=reexport,\n+ org.eclipse.jface,\n+ org.eclipse.ui.workbench\n","filename":"application\/org.openjdk.jmc.ui.common\/META-INF\/MANIFEST.MF","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+package org.openjdk.jmc.ui.common.util;\n+\n+import org.eclipse.jface.util.PropertyChangeEvent;\n+\n+import org.eclipse.jface.preference.JFacePreferences;\n+import org.eclipse.jface.resource.ColorRegistry;\n+import org.eclipse.jface.util.IPropertyChangeListener;\n+import org.eclipse.swt.graphics.RGB;\n+import org.eclipse.ui.PlatformUI;\n+\n+public class ThemeUtils {\n+\n+\tprivate static boolean isCurrentThemeDark = isDarkMode();\n+\n+\tstatic {\n+\t\tIPropertyChangeListener propertyChangeListener = new IPropertyChangeListener() {\n+\n+\t\t\tpublic void propertyChange(PropertyChangeEvent event) {\n+\t\t\t\tif (event.getProperty().equalsIgnoreCase(JFacePreferences.CONTENT_ASSIST_BACKGROUND_COLOR)) {\n+\t\t\t\t\tisCurrentThemeDark = isDarkMode();\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n+\t\t};\n+\t\tPlatformUI.getWorkbench().getThemeManager().addPropertyChangeListener(propertyChangeListener);\n+\n+\t}\n+\n+\tpublic static boolean isDarkTheme() {\n+\t\treturn isCurrentThemeDark;\n+\t}\n+\n+\tprivate static final double BRIGHTNESS_THRESHOLD = 0.5;\n+\n+\tprivate static boolean isDarkMode() {\n+\t\tColorRegistry colorRegistry = PlatformUI.getWorkbench().getThemeManager().getCurrentTheme().getColorRegistry();\n+\t\tRGB backgroundColor = colorRegistry.getRGB(JFacePreferences.CONTENT_ASSIST_BACKGROUND_COLOR);\n+\n+\t\tif (backgroundColor == null) {\n+\t\t\t\/\/ Fallback to a default behavior if the color is not available\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn calculateBrightness(backgroundColor) < BRIGHTNESS_THRESHOLD;\n+\t}\n+\n+\tprivate static double calculateBrightness(RGB color) {\n+\t\t\/\/ Using the HSP color model for perceived brightness\n+\t\t\/\/ See: http:\/\/alienryderflex.com\/hsp.html\n+\t\treturn Math.sqrt(\n+\t\t\t\t0.299 * color.red * color.red + 0.587 * color.green * color.green + 0.114 * color.blue * color.blue)\n+\t\t\t\t\/ 255.0;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/util\/ThemeUtils.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}