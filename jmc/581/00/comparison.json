{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,1 @@\n-\tprivate String createExceptionMessage(Date d, Throwable exception, TriggerRule rule) {\n+\tprivate String createExceptionMessage(Date d, Throwable exception, TriggerRule rule, String triggerMessage) {\n@@ -151,0 +151,1 @@\n+\t\tbuilder.append(\"\\n\" + triggerMessage + \"\\n\");\n@@ -186,2 +187,1 @@\n-\t\t\t\t\tDisplay display = PlatformUI.getWorkbench().getDisplay();\n-\t\t\t\t\tShell shell = display.getActiveShell();\n+\t\t\t\t\tShell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\n@@ -217,3 +217,2 @@\n-\t\tif (display != null && !display.isDisposed() && display.getActiveShell() != null\n-\t\t\t\t&& !display.getActiveShell().isDisposed()) {\n-\t\t\treturn new AlertDialog(display.getActiveShell());\n+\t\tif (display != null && !display.isDisposed()) {\n+\t\t\treturn new AlertDialog(shell);\n@@ -244,1 +243,2 @@\n-\tpublic synchronized void addException(IConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable) {\n+\tpublic synchronized void addException(\n+\t\tIConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable, String triggerMessage) {\n@@ -256,1 +256,1 @@\n-\t\t\t\tcreateExceptionMessage(creationDate, throwable, rule), throwable));\n+\t\t\t\tcreateExceptionMessage(creationDate, throwable, rule, triggerMessage), throwable));\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/AlertPlugin.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,3 @@\n-\tpublic void handleException(IConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable) {\n-\t\tAlertPlugin.getDefault().addException(connectionHandle, rule, throwable);\n+\tpublic void handleException(\n+\t\tIConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable, String triggerMessage) {\n+\t\tAlertPlugin.getDefault().addException(connectionHandle, rule, throwable, triggerMessage);\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/ExceptionHandler.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-\t\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, isAppend());\n+\t\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, isAppend(), data);\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/TriggerActionThreadStackDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-               id=\"file\"\n+               id=\"dumpfilename\"\n@@ -130,1 +130,1 @@\n-            id=\"file\"\n+            id=\"recordingfilename\"\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/plugin.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-\t\tMCFile path = IDESupportToolkit.createFileResource(getSetting(\"file\").getFileName()); \/\/$NON-NLS-1$\n+\t\tMCFile path = IDESupportToolkit.createFileResource(getSetting(\"dumpfilename\").getFileName()); \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionDumpRecording.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,1 @@\n+import org.openjdk.jmc.rjmx.triggers.internal.NotificationToolkit;\n@@ -108,1 +109,1 @@\n-\t\t\tMCFile path = IDESupportToolkit.createFileResource(getSetting(\"file\").getFileName()); \/\/$NON-NLS-1$\n+\t\t\tMCFile path = IDESupportToolkit.createFileResource(getSetting(\"recordingfilename\").getFileName()); \/\/$NON-NLS-1$\n@@ -143,0 +144,1 @@\n+\t\t\tString triggerMessage = NotificationToolkit.prettyPrint(m_event);\n@@ -150,3 +152,4 @@\n-\t\t\t\t\treturn StatusFactory\n-\t\t\t\t\t\t\t.createErr(NLS.bind(Messages.TriggerActionStartTimeBoundRecording_UPDATE_STATUS_ERROR_MSG,\n-\t\t\t\t\t\t\t\t\tm_descriptor.getName()), e, false);\n+\t\t\t\t\treturn StatusFactory.createErr(NLS.bind(\n+\t\t\t\t\t\t\t\"\\n\" + triggerMessage + \"\\n\"\n+\t\t\t\t\t\t\t\t\t+ Messages.TriggerActionStartTimeBoundRecording_UPDATE_STATUS_ERROR_MSG,\n+\t\t\t\t\t\t\tm_descriptor.getName()), e, false);\n@@ -169,1 +172,2 @@\n-\t\t\t\treturn StatusFactory.createErr(NLS.bind(Messages.TriggerActionStartTimeBoundRecording_SERVICE_ERROR_MSG,\n+\t\t\t\treturn StatusFactory.createErr(NLS.bind(\n+\t\t\t\t\t\t\"\\n\" + triggerMessage + \"\\n\" + Messages.TriggerActionStartTimeBoundRecording_SERVICE_ERROR_MSG,\n@@ -172,3 +176,3 @@\n-\t\t\t\treturn StatusFactory.createErr(\n-\t\t\t\t\t\tNLS.bind(Messages.TriggerActionStartTimeBoundRecording_IO_ERROR_MSG, m_descriptor.getName()), e,\n-\t\t\t\t\t\tfalse);\n+\t\t\t\treturn StatusFactory.createErr(NLS.bind(\n+\t\t\t\t\t\t\"\\n\" + triggerMessage + \"\\n\" + Messages.TriggerActionStartTimeBoundRecording_IO_ERROR_MSG,\n+\t\t\t\t\t\tm_descriptor.getName()), e, false);\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionStartTimeBoundRecording.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import org.openjdk.jmc.rjmx.triggers.internal.NotificationToolkit;\n@@ -83,0 +84,1 @@\n+\t\tString triggerMessage = NotificationToolkit.prettyPrint(event);\n@@ -101,2 +103,3 @@\n-\t\t\treturn new Status(IStatus.ERROR, NotificationPlugin.PLUGIN_ID,\n-\t\t\t\t\tNLS.bind(Messages.WriteAndOpenRecordingJob_ERROR_MESSAGE_DUMPING_RECORDING, serverName), e);\n+\t\t\treturn new Status(IStatus.ERROR, NotificationPlugin.PLUGIN_ID, NLS.bind(\n+\t\t\t\t\t\"\\n\" + triggerMessage + \"\\n\" + Messages.WriteAndOpenRecordingJob_ERROR_MESSAGE_DUMPING_RECORDING,\n+\t\t\t\t\tserverName), e);\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/WriteAndOpenRecordingJob.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -10,1 +10,2 @@\n- jakarta.mail.internet\n+ jakarta.mail.internet,\n+ org.eclipse.swt.widgets\n","filename":"application\/org.openjdk.jmc.rjmx\/META-INF\/MANIFEST.MF","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -365,1 +365,1 @@\n-               id=\"filename\"\n+               id=\"logfilename\"\n","filename":"application\/org.openjdk.jmc.rjmx\/plugin.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n-\tvoid handleException(IConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable);\n+\tvoid handleException(\n+\t\tIConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable, String triggerMessage);\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/IExceptionHandler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,2 @@\n+\tpublic static String TriggerActionValidator_INVALID_PATH;\n+\tpublic static String TriggerActionValidator_INVALID_EMAIL;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/Messages.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import org.openjdk.jmc.rjmx.triggers.internal.NotificationToolkit;\n@@ -55,0 +56,1 @@\n+\t\tString triggerMessage = NotificationToolkit.prettyPrint(e);\n@@ -60,1 +62,1 @@\n-\t\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, append);\n+\t\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, append, triggerMessage);\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/TriggerActionDiagnosticCommand.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-\t\tString fileName = getSetting(\"filename\").getFileName(); \/\/$NON-NLS-1$\n+\t\tString fileName = getSetting(\"logfilename\").getFileName(); \/\/$NON-NLS-1$\n@@ -61,0 +61,1 @@\n+\t\tString triggerMessage = NotificationToolkit.prettyPrint(e);\n@@ -63,1 +64,1 @@\n-\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, true);\n+\t\tIDESupportToolkit.writeAsJob(jobName, file, stream, true, triggerMessage);\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/TriggerActionLogToFile.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.triggers.actions.internal;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.jobs.Job;\n+import org.eclipse.osgi.util.NLS;\n+import org.eclipse.swt.widgets.Display;\n+import org.openjdk.jmc.rjmx.triggers.fields.internal.Field;\n+import org.openjdk.jmc.ui.common.CorePlugin;\n+\n+public class TriggerActionValidator extends Job {\n+\n+\tprivate final String name;\n+\tprivate final Field field;\n+\n+\tpublic TriggerActionValidator(String name, Field field) {\n+\t\tsuper(name);\n+\t\tthis.name = name;\n+\t\tthis.field = field;\n+\t}\n+\n+\t@Override\n+\tprotected IStatus run(IProgressMonitor monitor) {\n+\t\tif (this.name.equals(\"PathValidation\")) {\n+\t\t\tPath filePath = Paths.get(field.getValue());\n+\t\t\tPath root = filePath.getRoot();\n+\t\t\tif (root != null) {\n+\t\t\t\tFile driveFile = new File(root.toString());\n+\t\t\t\tif (!driveFile.exists()) {\n+\t\t\t\t\tsetDefaultValue();\n+\t\t\t\t\treturn new Status(IStatus.ERROR, CorePlugin.PLUGIN_ID,\n+\t\t\t\t\t\t\tNLS.bind(Messages.TriggerActionValidator_INVALID_PATH, field.getValue()),\n+\t\t\t\t\t\t\tnew Exception(NLS.bind(Messages.TriggerActionValidator_INVALID_PATH, field.getValue())));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} else if (this.name.equals(\"EmailValidation\")) {\n+\t\t\tString value = field.getValue();\n+\t\t\tif (!value.isEmpty()) {\n+\t\t\t\tString[] split = value.split(\",|;|\\\\s\");\n+\t\t\t\tfor (String sp : split) {\n+\t\t\t\t\tString REGEX = \"^[a-zA-Z0-9_+&*-]+(?:\\\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\\\.)+[a-zA-Z]{2,7}$\";\n+\t\t\t\t\tboolean matches = sp.trim().matches(REGEX);\n+\t\t\t\t\tif (!matches) {\n+\t\t\t\t\t\tsetDefaultValue();\n+\t\t\t\t\t\treturn new Status(IStatus.ERROR, CorePlugin.PLUGIN_ID,\n+\t\t\t\t\t\t\t\tNLS.bind(Messages.TriggerActionValidator_INVALID_EMAIL, field.getValue()),\n+\t\t\t\t\t\t\t\tnew Exception(\n+\t\t\t\t\t\t\t\t\t\tNLS.bind(Messages.TriggerActionValidator_INVALID_EMAIL, field.getValue())));\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn new Status(IStatus.OK, CorePlugin.PLUGIN_ID, \"\");\n+\t}\n+\n+\tprivate void setDefaultValue() {\n+\n+\t\tswitch (field.getId()) {\n+\t\tcase \"dumpfilename\":\n+\t\t\tsetDefaultValue(\"automaticallyTriggeredRecording.jfr\");\n+\t\t\tbreak;\n+\n+\t\tcase \"recordingfilename\":\n+\t\t\tsetDefaultValue(\"automaticallyTriggeredRecording.jfr\");\n+\t\t\tbreak;\n+\n+\t\tcase \"filename\":\n+\t\t\tsetDefaultValue(\"default.hprof\");\n+\t\t\tbreak;\n+\n+\t\tcase \"log_file\":\n+\t\t\tsetDefaultValue(\"command.log\");\n+\t\t\tbreak;\n+\n+\t\tcase \"logfilename\":\n+\t\t\tsetDefaultValue(\"log.txt\");\n+\t\t\tbreak;\n+\n+\t\tdefault:\n+\t\t\tsetDefaultValue(\"\");\n+\t\t}\n+\t}\n+\n+\tprivate void setDefaultValue(String value) {\n+\t\tDisplay.getDefault().asyncExec(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\tfield.setValue(value);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/TriggerActionValidator.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import org.eclipse.core.runtime.jobs.Job;\n@@ -43,0 +44,1 @@\n+import org.openjdk.jmc.rjmx.triggers.actions.internal.TriggerActionValidator;\n@@ -46,0 +48,1 @@\n+import org.openjdk.jmc.rjmx.triggers.fields.internal.Field.FieldValueChangeListener;\n@@ -146,0 +149,1 @@\n+\t\t\t\t\t\taddListeners(field);\n@@ -158,0 +162,22 @@\n+\tprivate void addListeners(Field field) {\n+\t\tString fieldId = field.getId();\n+\t\tif (\"dumpfilename\".equals(fieldId) || \"recordingfilename\".equals(fieldId) || \"filename\".equals(fieldId)\n+\t\t\t\t|| \"log_file\".equals(fieldId) || \"logfilename\".equals(fieldId)) {\n+\t\t\tfield.addFieldValueListener(new FieldValueChangeListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onChange(Field field) {\n+\t\t\t\t\tJob validatePathJob = new TriggerActionValidator(\"PathValidation\", field);\n+\t\t\t\t\tvalidatePathJob.schedule();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t} else if (\"email_from\".equals(fieldId) || \"email_to\".equals(fieldId) || \"email_cc\".equals(fieldId)) {\n+\t\t\tfield.addFieldValueListener(new FieldValueChangeListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onChange(Field field) {\n+\t\t\t\t\tJob validateEmailJob = new TriggerActionValidator(\"EmailValidation\", field);\n+\t\t\t\t\tvalidateEmailJob.schedule();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/extension\/internal\/TriggerComponent.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,2 @@\n-\tpublic void handleException(IConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable) {\n+\tpublic void handleException(\n+\t\tIConnectionHandle connectionHandle, TriggerRule rule, Throwable throwable, String triggerMessage) {\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/DefaultExceptionHandler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,1 +241,1 @@\n-\t\t\t\thandleException(connectionHandle, rule, e);\n+\t\t\t\thandleException(connectionHandle, rule, e, \"\");\n@@ -327,0 +327,1 @@\n+\t\t\tString triggerMessage = NotificationToolkit.prettyPrint(event);\n@@ -331,1 +332,1 @@\n-\t\t\t\thandleException(connectionHandle, rule, e);\n+\t\t\t\thandleException(connectionHandle, rule, e, triggerMessage);\n@@ -336,1 +337,2 @@\n-\tprivate void handleException(IConnectionHandle connectionHandle, TriggerRule rule, Throwable e) {\n+\tprivate void handleException(\n+\t\tIConnectionHandle connectionHandle, TriggerRule rule, Throwable e, String triggerMessage) {\n@@ -339,1 +341,1 @@\n-\t\t\thandler.handleException(connectionHandle, rule, e);\n+\t\t\thandler.handleException(connectionHandle, rule, e, triggerMessage);\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/NotificationTrigger.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+TriggerActionValidator_INVALID_PATH=Invalid path {0}\n+TriggerActionValidator_INVALID_EMAIL=Invalid email {0}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/messages.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,2 +80,3 @@\n-\tpublic static Job writeAsJob(String jobName, MCFile file, InputStream stream, boolean append) {\n-\t\tJob writeJob = new JobFileWrite(jobName, file, stream, append);\n+\tpublic static Job writeAsJob(\n+\t\tString jobName, MCFile file, InputStream stream, boolean append, String triggerMessage) {\n+\t\tJob writeJob = new JobFileWrite(jobName, file, stream, append, triggerMessage);\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/idesupport\/IDESupportToolkit.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+\n@@ -55,0 +56,1 @@\n+\tprivate final String triggerMessage;\n@@ -67,1 +69,1 @@\n-\tJobFileWrite(String jobName, MCFile file, InputStream stream, boolean append) {\n+\tJobFileWrite(String jobName, MCFile file, InputStream stream, boolean append, String triggerMessage) {\n@@ -72,0 +74,1 @@\n+\t\tthis.triggerMessage = triggerMessage;\n@@ -81,2 +84,2 @@\n-\t\t\treturn new Status(IStatus.ERROR, CorePlugin.PLUGIN_ID,\n-\t\t\t\t\tNLS.bind(Messages.JobFileWrite_ERROR_FILE_WRITE_FAILED, file.getPath()), e);\n+\t\t\treturn new Status(IStatus.ERROR, CorePlugin.PLUGIN_ID, NLS.bind(\n+\t\t\t\t\t\"\\n\" + triggerMessage + \"\\n\" + Messages.JobFileWrite_ERROR_FILE_WRITE_FAILED, file.getPath()), e);\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/idesupport\/JobFileWrite.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}