{"files":[{"patch":"@@ -50,0 +50,1 @@\n+import org.openjdk.jmc.common.unit.BinaryPrefix;\n@@ -77,0 +78,5 @@\n+\tpublic static final TypedResult<IQuantity> METASPACE_LIVESET_INCREASE = new TypedResult<>(\n+\t\t\t\"metaspaceLivesetIncrease\", \/\/$NON-NLS-1$\n+\t\t\t\"Metaspace Liveset Increase\", \"The speed of the metaspace liveset increase per second.\", UnitLookup.MEMORY,\n+\t\t\tIQuantity.class);\n+\n@@ -78,1 +84,1 @@\n-\t\t\t.<TypedResult<?>> asList(TypedResult.SCORE);\n+\t\t\t.<TypedResult<?>> asList(TypedResult.SCORE, METASPACE_LIVESET_INCREASE);\n@@ -84,0 +90,1 @@\n+\t\tIQuantity metaspaceLiveSetIncreasePerSecond = UnitLookup.MEMORY.getUnit(BinaryPrefix.MEBI).quantity(0);\n@@ -91,0 +98,1 @@\n+\t\t\tmetaspaceLiveSetIncreasePerSecond = UnitLookup.MEMORY.getUnit(BinaryPrefix.MEBI).quantity(leastSquare);\n@@ -93,1 +101,0 @@\n-\t\t\t\/\/ FIXME: Should construct a message using leastSquare, not use a hard limit\n@@ -99,1 +106,2 @@\n-\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score)).build();\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(METASPACE_LIVESET_INCREASE, metaspaceLiveSetIncreasePerSecond).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/IncreasingMetaspaceLiveSetRule.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+\tpublic static final TypedResult<IQuantity> MAX_METASPACE_SIZE = new TypedResult<>(\"maxMetaspaceSize\", \/\/$NON-NLS-1$\n+\t\t\t\"Maximum Metaspace Size\", \"The maximum size of the metaspace.\", UnitLookup.NUMBER, IQuantity.class);\n+\n@@ -78,0 +81,1 @@\n+\t\tIQuantity maxMetaspaceSize = items.getAggregate(JdkAggregators.LARGEST_MAX_METASPACE_SIZE_FROM_FLAG);\n@@ -81,5 +85,18 @@\n-\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN))\n-\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG))\n-\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).build();\n+\t\t\tif (maxMetaspaceSize != null) {\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).addResult(MAX_METASPACE_SIZE, maxMetaspaceSize).build();\n+\t\t\t} else {\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_SET_ACTION)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).build();\n+\t\t\t}\n+\n@@ -88,1 +105,3 @@\n-\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_OK)).build();\n+\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_OK)))\n+\t\t\t\t.build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/MetaspaceOomRule.java","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -479,0 +479,3 @@\n+\tpublic static final String MetaspaceOomRuleFactory_TEXT_CAUSE = \"MetaspaceOomRuleFactory_TEXT_CAUSE\"; \/\/$NON-NLS-1$\n+\tpublic static final String MetaspaceOomRuleFactory_TEXT_SET_ACTION = \"MetaspaceOomRuleFactory_TEXT_SET_ACTION\"; \/\/$NON-NLS-1$\n+\tpublic static final String MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION = \"MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -457,1 +457,2 @@\n-IncreasingMetaspaceLiveSetRuleFactory_TEXT_INFO=The class data seems to increase constantly in the metaspace during the recording.\n+# {metaspaceLivesetIncrease} is a number denoted in Mebibytes per second\n+IncreasingMetaspaceLiveSetRuleFactory_TEXT_INFO=Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata seems to increase constantly in the metaspace during the recording. The live set on the metaspace seems to increase with a speed of about {metaspaceLivesetIncrease} per second during the recording.\n@@ -459,1 +460,1 @@\n-IncreasingMetaspaceLiveSetRuleFactory_TEXT_OK=The class data does not seem to increase during the recording.\n+IncreasingMetaspaceLiveSetRuleFactory_TEXT_OK=Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.\n@@ -522,0 +523,3 @@\n+MetaspaceOomRuleFactory_TEXT_CAUSE=Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.\n+MetaspaceOomRuleFactory_TEXT_SET_ACTION=MaxMetaspaceSize has not been set on the command-line, setting its value may help resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n+MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION=MaxMetaspaceSize has been set to {maxMetaspaceSize} on the command-line, increase its value to resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n@@ -525,1 +529,1 @@\n-MetaspaceOomRuleFactory_TEXT_WARN_LONG=Increase or remove the '-XX:MaxMetaSpaceSize' flag or investigate why classes are not unloaded properly.\n+MetaspaceOomRuleFactory_TEXT_WARN_LONG=Increase or remove the '-XX:MaxMetaspaceSize' flag or investigate why classes are not unloaded properly.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -239,0 +239,3 @@\n+\tpublic static final IAggregator<IQuantity, ?> LARGEST_MAX_METASPACE_SIZE_FROM_FLAG = filter(\n+\t\t\tMessages.getString(Messages.AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG), null,\n+\t\t\tmax(ULONG_FLAG, FLAG_VALUE_NUMBER), ItemFilters.equals(FLAG_NAME, \"MaxMetaspaceSize\")); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+\tpublic static final String AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG = \"AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG=Max Metaspace Size\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -243,1 +243,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/baseline\/Generated_One_JfrRuleBaseline.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -243,1 +243,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -518,1 +518,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -550,1 +550,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -1356,1 +1356,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -1389,1 +1389,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -2207,1 +2207,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -2241,1 +2241,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -4216,1 +4216,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -4249,1 +4249,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -5070,1 +5070,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -5390,1 +5390,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -5988,1 +5988,1 @@\n-            <summary>The class data does not seem to increase during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata does not seem to increase during the recording.<\/summary>\n@@ -6022,1 +6022,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -6331,1 +6331,1 @@\n-            <summary>The class data seems to increase constantly in the metaspace during the recording.<\/summary>\n+            <summary>Metaspace is the area of memory allocated for the JVM to store class metadata. The class metadata seems to increase constantly in the metaspace during the recording. The live set on the metaspace seems to increase with a speed of about 455 KiB per second during the recording.<\/summary>\n@@ -6368,1 +6368,1 @@\n-            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}