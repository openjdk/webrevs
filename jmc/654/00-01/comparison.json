{"files":[{"patch":"@@ -72,0 +72,3 @@\n+\tpublic static final TypedResult<IQuantity> MAX_METASPACE_SIZE = new TypedResult<>(\"maxMetaspaceSize\", \/\/$NON-NLS-1$\n+\t\t\t\"Maximum Metaspace Size\", \"The maximum size of the metaspace.\", UnitLookup.NUMBER, IQuantity.class);\n+\n@@ -78,0 +81,1 @@\n+\t\tIQuantity maxMetaspaceSize = items.getAggregate(JdkAggregators.LARGEST_MAX_METASPACE_SIZE_FROM_FLAG);\n@@ -81,7 +85,18 @@\n-\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n-\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n-\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_ACTION)\n-\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n-\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).build();\n+\t\t\tif (maxMetaspaceSize != null) {\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).addResult(MAX_METASPACE_SIZE, maxMetaspaceSize).build();\n+\t\t\t} else {\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_SET_ACTION)\n+\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).build();\n+\t\t\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/MetaspaceOomRule.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -480,1 +480,2 @@\n-\tpublic static final String MetaspaceOomRuleFactory_TEXT_ACTION = \"MetaspaceOomRuleFactory_TEXT_ACTION\"; \/\/$NON-NLS-1$\n+\tpublic static final String MetaspaceOomRuleFactory_TEXT_SET_ACTION = \"MetaspaceOomRuleFactory_TEXT_SET_ACTION\"; \/\/$NON-NLS-1$\n+\tpublic static final String MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION = \"MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -523,2 +523,3 @@\n-MetaspaceOomRuleFactory_TEXT_CAUSE=Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.\n-MetaspaceOomRuleFactory_TEXT_ACTION=If MaxMetaSpaceSize, has been set on the command-line, increase its value. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n+MetaspaceOomRuleFactory_TEXT_CAUSE=Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.\n+MetaspaceOomRuleFactory_TEXT_SET_ACTION=MaxMetaspaceSize has not been set on the command-line, setting its value may help resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n+MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION=MaxMetaspaceSize has been set to {maxMetaspaceSize} on the command-line, increase its value to resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n@@ -528,1 +529,1 @@\n-MetaspaceOomRuleFactory_TEXT_WARN_LONG=Increase or remove the '-XX:MaxMetaSpaceSize' flag or investigate why classes are not unloaded properly.\n+MetaspaceOomRuleFactory_TEXT_WARN_LONG=Increase or remove the '-XX:MaxMetaspaceSize' flag or investigate why classes are not unloaded properly.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -239,0 +239,3 @@\n+\tpublic static final IAggregator<IQuantity, ?> LARGEST_MAX_METASPACE_SIZE_FROM_FLAG = filter(\n+\t\t\tMessages.getString(Messages.AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG), null,\n+\t\t\tmax(ULONG_FLAG, FLAG_VALUE_NUMBER), ItemFilters.equals(FLAG_NAME, \"MaxMetaspaceSize\")); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -111,0 +111,1 @@\n+\tpublic static final String AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG = \"AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -400,0 +400,1 @@\n+AGGR_LARGEST_MAX_METASPACE_SIZE_FROM_FLAG=Max Metaspace Size\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -550,1 +550,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -1389,1 +1389,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -2241,1 +2241,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -4249,1 +4249,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -6022,1 +6022,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -6368,1 +6368,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaSpaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaSpaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}