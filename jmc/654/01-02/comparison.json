{"files":[{"patch":"@@ -85,0 +85,7 @@\n+\n+\t\t\tResultBuilder builder = ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n+\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n+\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t.addResult(OOM_EVENTS, oomCount);\n+\n@@ -86,7 +93,3 @@\n-\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n-\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n-\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION)\n-\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n-\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).addResult(MAX_METASPACE_SIZE, maxMetaspaceSize).build();\n+\t\t\t\tbuilder.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION)\n+\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n+\t\t\t\t\t\t.addResult(MAX_METASPACE_SIZE, maxMetaspaceSize);\n@@ -94,7 +97,2 @@\n-\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t\t.setSummary(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_CAUSE)\n-\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN)))\n-\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_SET_ACTION)\n-\t\t\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)))\n-\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t\t.addResult(OOM_EVENTS, oomCount).build();\n+\t\t\t\tbuilder.setExplanation(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_SET_ACTION)\n+\t\t\t\t\t\t.concat(Messages.getString(Messages.MetaspaceOomRuleFactory_TEXT_WARN_LONG)));\n@@ -103,0 +101,2 @@\n+\t\t\treturn builder.build();\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/MetaspaceOomRule.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -523,3 +523,3 @@\n-MetaspaceOomRuleFactory_TEXT_CAUSE=Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.\n-MetaspaceOomRuleFactory_TEXT_SET_ACTION=MaxMetaspaceSize has not been set on the command-line, setting its value may help resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n-MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION=MaxMetaspaceSize has been set to {maxMetaspaceSize} on the command-line, increase its value to resolve the issue. MetaSpace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n+MetaspaceOomRuleFactory_TEXT_CAUSE=Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.\n+MetaspaceOomRuleFactory_TEXT_SET_ACTION=MaxMetaspaceSize has not been set on the command-line, setting its value may help resolve the issue. Metaspace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n+MetaspaceOomRuleFactory_TEXT_INCREASE_ACTION=MaxMetaspaceSize has been set to {maxMetaspaceSize} on the command-line, increase its value to resolve the issue. Metaspace is allocated from the same address spaces as the Java heap. Reducing the size of the Java heap will make more space available for MetaSpace.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -550,1 +550,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -1389,1 +1389,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -2241,1 +2241,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -4249,1 +4249,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -6022,1 +6022,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n@@ -6368,1 +6368,1 @@\n-            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail MetaSpace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n+            <summary>Java class metadata is allocated in native memory (metaspace). When the amount of native memory needed for a class metadata exceeds MaxMetaspaceSize, a java.lang.OutOfMemoryError exception with a detail Metaspace is thrown. The amount of metaspace that can be used for class metadata is limited by the parameter MaxMetaspaceSize, which is specified on the command line.The metaspace was not exhausted during this recording.<\/summary>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}