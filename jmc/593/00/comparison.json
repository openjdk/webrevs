{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+import org.openjdk.jmc.common.IMCThread;\n@@ -433,1 +434,6 @@\n-\t\treturn TypeHandling.getVerboseString(value);\n+\t\tString verboseString = TypeHandling.getVerboseString(value);\n+\t\tif (value instanceof IMCThread) {\n+\t\t\treturn \"(\" + NLS.bind(Messages.ThreadsPage_LANE_THREAD_ID_TOOLTIP, ((IMCThread) value).getThreadId()) + \") \"\n+\t\t\t\t\t+ verboseString;\n+\t\t}\n+\t\treturn verboseString;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/JfrPropertySheet.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+import org.openjdk.jmc.common.IMCThread;\n@@ -73,0 +74,2 @@\n+\tprivate Object hoveredItemData;\n+\tprivate boolean isChartTextCanvas;\n@@ -115,1 +118,1 @@\n-\t\t\/\/ Auto-generated method stub\n+\t\tthis.hoveredItemData = data;\n@@ -146,0 +149,8 @@\n+\tprotected void appendThreadId(Long threadId) {\n+\t\tif (text.indexOf(threadId.toString()) == -1) {\n+\t\t\ttext.append(\"<p><b>\") \/\/$NON-NLS-1$\n+\t\t\t\t\t.append(htmlify(NLS.bind(Messages.ThreadsPage_LANE_THREAD_ID_TOOLTIP, threadId.toString())))\n+\t\t\t\t\t.append(\"<\/b><\/p>\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n@@ -187,36 +198,7 @@\n-\t\tif (span.getDescription() != null) {\n-\t\t\tappendTitle(span.getDescription());\n-\t\t}\n-\t\tappendAtIfNew(span.getRange());\n-\t\tappendTagLI(span.getColor());\n-\t\t\/\/ Would normally insert <span nowrap='true'> here, but since bold text is not displayed,\n-\t\t\/\/ it is inserted after the <b> element instead.\n-\t\tObject payload = span.getPayload();\n-\t\tIItem item = AdapterUtil.getAdapter(payload, IItem.class);\n-\t\tif (payload instanceof IDisplayable) {\n-\t\t\ttext.append(\"<span nowrap='true'>\"); \/\/$NON-NLS-1$\n-\t\t\ttext.append(format((IDisplayable) payload)).append(\": \"); \/\/$NON-NLS-1$\n-\t\t} else if (item != null) {\n-\t\t\tIType<IItem> type = ItemToolkit.getItemType(item);\n-\t\t\ttext.append(\"<b>\").append(htmlify(type.getName())).append(\"<\/b><span nowrap='true'>: \"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t}\n-\t\ttext.append(format(span.getWidth()));\n-\t\ttext.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n-\t\tif (item != null) {\n-\t\t\tIType<IItem> type = ItemToolkit.getItemType(item);\n-\t\t\tIMCStackTrace trace = null;\n-\t\t\tIterator<IAttribute<?>> attributes = getAttributeStream(type).iterator();\n-\t\t\twhile (attributes.hasNext()) {\n-\t\t\t\tIAttribute<?> attribute = attributes.next();\n-\t\t\t\tif (attribute.equals(JfrAttributes.EVENT_STACKTRACE)) {\n-\t\t\t\t\ttrace = JfrAttributes.EVENT_STACKTRACE.getAccessor(type).getMember(item);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\ttext.append(\"<p vspace='false'><span nowrap='true'>\"); \/\/$NON-NLS-1$\n-\t\t\t\ttext.append(htmlify(attribute.getName())).append(\": \"); \/\/$NON-NLS-1$\n-\t\t\t\t\/\/ FIXME: Format timestamp with higher precision\n-\t\t\t\tObject value = attribute.getAccessor(type).getMember(item);\n-\t\t\t\tString valueString = TypeHandling.getValueString(value);\n-\t\t\t\ttext.append(htmlify(valueString));\n-\t\t\t\ttext.append(\"<\/span><\/p>\"); \/\/$NON-NLS-1$\n-\t\t\t\t\/\/ Get value\n+\t\tif (isChartTextCanvas) {\n+\t\t\tif (hoveredItemData instanceof IMCThread && ((IMCThread) hoveredItemData).getThreadId() != null) {\n+\t\t\t\tappendThreadId(((IMCThread) hoveredItemData).getThreadId());\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (span.getDescription() != null) {\n+\t\t\t\tappendTitle(span.getDescription());\n@@ -224,6 +206,0 @@\n-\t\t\tif (trace != null) {\n-\t\t\t\ttext.append(\"<p vspace='false'\/>\"); \/\/$NON-NLS-1$\n-\t\t\t\ttext.append(\"<p vspace='false'>\"); \/\/$NON-NLS-1$\n-\t\t\t\ttext.append(htmlify(JfrAttributes.EVENT_STACKTRACE.getName())).append(\":<br\/>\"); \/\/$NON-NLS-1$\n-\t\t\t\tappendStackTrace(trace, true, false, true, true, true, false);\n-\t\t\t\ttext.append(\"<\/p>\"); \/\/$NON-NLS-1$\n@@ -231,0 +207,42 @@\n+\t\t\tappendAtIfNew(span.getRange());\n+\t\t\tappendTagLI(span.getColor());\n+\t\t\t\/\/ Would normally insert <span nowrap='true'> here, but since bold text is not displayed,\n+\t\t\t\/\/ it is inserted after the <b> element instead.\n+\t\t\tObject payload = span.getPayload();\n+\t\t\tIItem item = AdapterUtil.getAdapter(payload, IItem.class);\n+\t\t\tif (payload instanceof IDisplayable) {\n+\t\t\t\ttext.append(\"<span nowrap='true'>\"); \/\/$NON-NLS-1$\n+\t\t\t\ttext.append(format((IDisplayable) payload)).append(\": \"); \/\/$NON-NLS-1$\n+\t\t\t} else if (item != null) {\n+\t\t\t\tIType<IItem> type = ItemToolkit.getItemType(item);\n+\t\t\t\ttext.append(\"<b>\").append(htmlify(type.getName())).append(\"<\/b><span nowrap='true'>: \"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\t\t\ttext.append(format(span.getWidth()));\n+\t\t\ttext.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tif (item != null) {\n+\t\t\t\tIType<IItem> type = ItemToolkit.getItemType(item);\n+\t\t\t\tIMCStackTrace trace = null;\n+\t\t\t\tIterator<IAttribute<?>> attributes = getAttributeStream(type).iterator();\n+\t\t\t\twhile (attributes.hasNext()) {\n+\t\t\t\t\tIAttribute<?> attribute = attributes.next();\n+\t\t\t\t\tif (attribute.equals(JfrAttributes.EVENT_STACKTRACE)) {\n+\t\t\t\t\t\ttrace = JfrAttributes.EVENT_STACKTRACE.getAccessor(type).getMember(item);\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\ttext.append(\"<p vspace='false'><span nowrap='true'>\"); \/\/$NON-NLS-1$\n+\t\t\t\t\ttext.append(htmlify(attribute.getName())).append(\": \"); \/\/$NON-NLS-1$\n+\t\t\t\t\t\/\/ FIXME: Format timestamp with higher precision\n+\t\t\t\t\tObject value = attribute.getAccessor(type).getMember(item);\n+\t\t\t\t\tString valueString = TypeHandling.getValueString(value);\n+\t\t\t\t\ttext.append(htmlify(valueString));\n+\t\t\t\t\ttext.append(\"<\/span><\/p>\"); \/\/$NON-NLS-1$\n+\t\t\t\t\t\/\/ Get value\n+\t\t\t\t}\n+\t\t\t\tif (trace != null) {\n+\t\t\t\t\ttext.append(\"<p vspace='false'\/>\"); \/\/$NON-NLS-1$\n+\t\t\t\t\ttext.append(\"<p vspace='false'>\"); \/\/$NON-NLS-1$\n+\t\t\t\t\ttext.append(htmlify(JfrAttributes.EVENT_STACKTRACE.getName())).append(\":<br\/>\"); \/\/$NON-NLS-1$\n+\t\t\t\t\tappendStackTrace(trace, true, false, true, true, true, false);\n+\t\t\t\t\ttext.append(\"<\/p>\"); \/\/$NON-NLS-1$\n+\n+\t\t\t\t}\n@@ -271,0 +289,10 @@\n+\n+\t@Override\n+\tpublic void setChartTextCanvas(boolean chartTextCanvas) {\n+\t\tthis.isChartTextCanvas = chartTextCanvas;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isChartTextCanvas() {\n+\t\treturn this.isChartTextCanvas;\n+\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ChartToolTipProvider.java","additions":72,"deletions":44,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -684,0 +684,4 @@\n+\tpublic static void createChartTooltip(ChartTextCanvas chart) {\n+\t\tcreateChartTooltip(chart, ChartToolTipProvider::new);\n+\t}\n+\n@@ -689,0 +693,5 @@\n+\tpublic static void createChartTimestampTooltip(ChartTextCanvas chart) {\n+\t\tcreateChartTooltip(chart, JfrAttributes.START_TIME, JfrAttributes.END_TIME, JfrAttributes.DURATION,\n+\t\t\t\tJfrAttributes.EVENT_TYPE, JfrAttributes.EVENT_STACKTRACE);\n+\t}\n+\n@@ -693,0 +702,4 @@\n+\tpublic static void createChartTooltip(ChartTextCanvas chart, IAttribute<?> ... excludedAttributes) {\n+\t\tcreateChartTooltip(chart, new HashSet<>(Arrays.asList(excludedAttributes)));\n+\t}\n+\n@@ -703,0 +716,10 @@\n+\tpublic static void createChartTooltip(ChartTextCanvas chart, Set<IAttribute<?>> excludedAttributes) {\n+\t\tcreateChartTooltip(chart, () -> new ChartToolTipProvider() {\n+\t\t\t@SuppressWarnings(\"deprecation\")\n+\t\t\t@Override\n+\t\t\tprotected Stream<IAttribute<?>> getAttributeStream(IType<IItem> type) {\n+\t\t\t\treturn type.getAttributes().stream().filter(a -> !excludedAttributes.contains(a));\n+\t\t\t}\n+\t\t});\n+\t}\n+\n@@ -722,0 +745,29 @@\n+\t\t\t\t}\n+\t\t\t\tformText.setText(html, true, false);\n+\t\t\t\treturn formText;\n+\t\t\t}\n+\n+\t\t};\n+\n+\t}\n+\n+\tpublic static void createChartTooltip(\n+\t\tChartTextCanvas chart, Supplier<ChartToolTipProvider> toolTipProviderSupplier) {\n+\t\tnew ToolTip(chart) {\n+\t\t\tString html;\n+\t\t\tMap<String, Image> images;\n+\n+\t\t\t@Override\n+\t\t\tprotected boolean shouldCreateToolTip(Event event) {\n+\t\t\t\tChartToolTipProvider provider = toolTipProviderSupplier.get();\n+\t\t\t\tchart.infoAt(provider, event.x, event.y);\n+\t\t\t\thtml = provider.getHTML();\n+\t\t\t\timages = provider.getImages();\n+\t\t\t\treturn html != null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected Composite createToolTipContentArea(Event event, Composite parent) {\n+\t\t\t\tFormText formText = CompositeToolkit.createInfoFormText(parent);\n+\t\t\t\tfor (Map.Entry<String, Image> imgEntry : images.entrySet()) {\n+\t\t\t\t\tformText.setImage(imgEntry.getKey(), imgEntry.getValue());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/DataPageToolkit.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -624,0 +624,1 @@\n+\tpublic static String ThreadsPage_LANE_THREAD_ID_TOOLTIP;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2023, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Red Hat Inc. All rights reserved.\n@@ -137,0 +137,1 @@\n+\t\tDataPageToolkit.createChartTimestampTooltip(textCanvas);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ThreadsPageLayoutUI.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -720,0 +720,1 @@\n+ThreadsPage_LANE_THREAD_ID_TOOLTIP=Thread Id: {0}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,0 +80,4 @@\n+\n+\t\t@Override\n+\t\tpublic void setChartTextCanvas(boolean chartTextCanvas) {\n+\t\t}\n@@ -242,0 +246,4 @@\n+\n+\tvoid setChartTextCanvas(boolean chartTextCanvas);\n+\n+\tboolean isChartTextCanvas();\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/charts\/IChartInfoVisitor.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,0 +135,3 @@\n+\t\t\t\t\tif (visitor.isChartTextCanvas() && bucket == -1) {\n+\t\t\t\t\t\tbucket = 0;\n+\t\t\t\t\t}\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/charts\/QuantitySpanRenderer.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -642,0 +642,5 @@\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isChartTextCanvas() {\n+\t\t\t\treturn false;\n+\t\t\t}\n@@ -718,0 +723,5 @@\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean isChartTextCanvas() {\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n@@ -786,0 +796,1 @@\n+\t\t\tvisitor.setChartTextCanvas(false);\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/ChartCanvas.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2023, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Red Hat Inc. All rights reserved.\n@@ -427,0 +427,5 @@\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isChartTextCanvas() {\n+\t\t\t\treturn true;\n+\t\t\t}\n@@ -494,0 +499,1 @@\n+\t\t\tvisitor.setChartTextCanvas(true);\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/ChartTextCanvas.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}