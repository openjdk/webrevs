{"files":[{"patch":"@@ -315,0 +315,2 @@\n+\tpublic static final IAttribute<String> CERTIFICATE_ID_STR = attr(\"certificateId\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CERTIFICATE_ID), PLAIN_TEXT);\n@@ -462,0 +464,2 @@\n+\tpublic static final IAttribute<IQuantity> CERTIFICATE_ID = attr(\"certificateId\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CERTIFICATE_ID), NUMBER);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+\tpublic static final String X509_CERTIFICATE = PREFIX + \"X509Certificate\";\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkTypeIDs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -553,0 +553,1 @@\n+\tpublic static final String ATTR_CERTIFICATE_ID = \"ATTR_CERTIFICATE_ID\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n@@ -172,0 +173,17 @@\n+\t\t\t\t} else if (JdkTypeIDs.X509_CERTIFICATE.equals(identifier)) {\n+\t\t\t\t\t\/\/ Adding a String certificateId, as that is what is used in the jdk.X509Certificate event.\n+\t\t\t\t\tint packageIndex = -1;\n+\t\t\t\t\tfor (int i = 0; i < dataStructure.size(); i++) {\n+\t\t\t\t\t\tValueField vf = dataStructure.get(i);\n+\t\t\t\t\t\tif (vf.matches(JdkAttributes.CERTIFICATE_ID)) {\n+\t\t\t\t\t\t\tpackageIndex = i;\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (packageIndex != -1) {\n+\t\t\t\t\t\tList<ValueField> newDataStructure = new ArrayList<>(dataStructure);\n+\t\t\t\t\t\tnewDataStructure.set(packageIndex, new ValueField(JdkAttributes.CERTIFICATE_ID_STR));\n+\t\t\t\t\t\tIEventSink subSink = sf.create(identifier, label, category, description, newDataStructure);\n+\t\t\t\t\t\tIEventSink longAsStrSink = new LongAsStringSink(subSink, packageIndex);\n+\t\t\t\t\t\treturn longAsStrSink;\n+\t\t\t\t\t}\n@@ -215,0 +233,22 @@\n+\n+\tprivate static class LongAsStringSink implements IEventSink {\n+\t\tprivate final IEventSink subSink;\n+\t\tprivate final int idIndex;\n+\n+\t\tpublic LongAsStringSink(IEventSink subSink, int idIndex) {\n+\t\t\tthis.subSink = subSink;\n+\t\t\tthis.idIndex = idIndex;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void addEvent(Object[] values) {\n+\t\t\tIQuantity longId = (IQuantity) values[idIndex];\n+\t\t\tif (longId != null && values != null && values.length > 0) {\n+\t\t\t\tString strId = String.valueOf(longId.longValue());\n+\t\t\t\tObject[] newValues = new Object[values.length];\n+\t\t\t\tSystem.arraycopy(values, 0, newValues, 0, values.length - 1);\n+\t\t\t\tnewValues[idIndex] = strId;\n+\t\t\t\tsubSink.addEvent(newValues);\n+\t\t\t}\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/synthetic\/SyntheticAttributeExtension.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -365,0 +365,1 @@\n+ATTR_CERTIFICATE_ID=Certificate Id\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}