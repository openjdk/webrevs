{"files":[{"patch":"@@ -80,0 +80,1 @@\n+\t\t\t\t<checkedAction id=\"size\" \/>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/defaultPages.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -363,0 +363,2 @@\n+\tpublic static String JavaApplicationPage_ROW_RSS;\n+\tpublic static String JavaApplicationPage_ROW_RSS_DESC;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.RSS_PEAK;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.RSS_SIZE;\n@@ -37,0 +39,1 @@\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkQueries.RSS_SIMPLE_QUERY;\n@@ -44,0 +47,1 @@\n+import java.util.function.Supplier;\n@@ -52,1 +56,0 @@\n-\n@@ -61,0 +64,1 @@\n+import org.openjdk.jmc.common.item.IItemQuery;\n@@ -198,0 +202,2 @@\n+\n+\t\t\t\/\/ Allocation section\n@@ -208,0 +214,1 @@\n+\t\t\t\/\/ Memory usage renderer - multiple events and attributes, all as memory usage\n@@ -210,7 +217,0 @@\n-\t\t\tIItemCollection allEvents = null;\n-\t\t\tIItemCollection heapSummaryEvents = allItems.apply(HEAP_SUMMARY.getFilter());\n-\t\t\tStream<IAttribute<IQuantity>> hsAttributes = DataPageToolkit.getQuantityAttributes(HEAP_SUMMARY)\n-\t\t\t\t\t.filter(this::isAttributeEnabled);\n-\t\t\tif (DataPageToolkit.addEndTimeLines(heapRenderer, heapSummaryEvents, false, hsAttributes)) {\n-\t\t\t\tallEvents = heapSummaryEvents;\n-\t\t\t}\n@@ -218,8 +218,7 @@\n-\t\t\tIItemCollection memorySummaryEvents = allItems.apply(OS_MEMORY_SUMMARY.getFilter());\n-\t\t\tStream<IAttribute<IQuantity>> msAttributes = DataPageToolkit.getQuantityAttributes(OS_MEMORY_SUMMARY)\n-\t\t\t\t\t.filter(this::isAttributeEnabled);\n-\t\t\tif (DataPageToolkit.addEndTimeLines(heapRenderer, memorySummaryEvents, false, msAttributes)) {\n-\t\t\t\tallEvents = allEvents == null ? memorySummaryEvents\n-\t\t\t\t\t\t: ItemCollectionToolkit.merge(() -> Stream.of(heapSummaryEvents, memorySummaryEvents));\n-\t\t\t}\n-\t\t\tif (allEvents != null) {\n+\t\t\tSupplier<Stream<IItemCollection>> memoryEventsSupplier = () -> Stream\n+\t\t\t\t\t.of(getMemoryEvents(allItems, HEAP_SUMMARY, heapRenderer), getRssEvents(allItems, heapRenderer),\n+\t\t\t\t\t\t\tgetMemoryEvents(allItems, OS_MEMORY_SUMMARY, heapRenderer))\n+\t\t\t\t\t.filter(Optional::isPresent).map(Optional::get);\n+\n+\t\t\tIItemCollection mergedEvents = ItemCollectionToolkit.merge(memoryEventsSupplier);\n+\t\t\tif (mergedEvents.hasItems()) {\n@@ -227,1 +226,1 @@\n-\t\t\t\t\t\theapRenderer, allEvents));\n+\t\t\t\t\t\theapRenderer, mergedEvents));\n@@ -229,0 +228,2 @@\n+\n+\t\t\t\/\/ Live size section\n@@ -235,1 +236,0 @@\n-\t\t\t\t\t\/\/ FIXME: Add a better description.\n@@ -248,0 +248,16 @@\n+\t\tprivate Optional<IItemCollection> getMemoryEvents(\n+\t\t\tIItemCollection allItems, IItemQuery query, XYDataRenderer heapRenderer) {\n+\t\t\tIItemCollection filteredEvents = allItems.apply(query.getFilter());\n+\t\t\tStream<IAttribute<IQuantity>> attributes = DataPageToolkit.getQuantityAttributes(query)\n+\t\t\t\t\t.filter(this::isAttributeEnabled);\n+\t\t\treturn DataPageToolkit.addEndTimeLines(heapRenderer, filteredEvents, false, attributes)\n+\t\t\t\t\t? Optional.of(filteredEvents) : Optional.empty();\n+\t\t}\n+\n+\t\tprivate Optional<IItemCollection> getRssEvents(IItemCollection allItems, XYDataRenderer heapRenderer) {\n+\t\t\tIItemCollection rssEvents = allItems.apply(JdkFilters.RSS);\n+\t\t\tStream<IAttribute<IQuantity>> attributes = Stream.of(RSS_SIZE, RSS_PEAK).filter(this::isAttributeEnabled);\n+\t\t\treturn DataPageToolkit.addEndTimeLines(heapRenderer, rssEvents, false, attributes) ? Optional.of(rssEvents)\n+\t\t\t\t\t: Optional.empty();\n+\t\t}\n+\n@@ -266,1 +282,3 @@\n-\t\t\t\t\t.concat(HEAP_SUMMARY.getAttributes().stream(), OS_MEMORY_SUMMARY.getAttributes().stream())\n+\t\t\t\t\t.concat(RSS_SIMPLE_QUERY.getAttributes().stream(),\n+\t\t\t\t\t\t\tStream.concat(HEAP_SUMMARY.getAttributes().stream(),\n+\t\t\t\t\t\t\t\t\tOS_MEMORY_SUMMARY.getAttributes().stream()))\n@@ -348,1 +366,0 @@\n-\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/HeapPage.java","additions":38,"deletions":21,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -266,0 +266,3 @@\n+\t\t\tDataPageToolkit.buildLinesRow(Messages.JavaApplicationPage_ROW_RSS,\n+\t\t\t\t\tMessages.JavaApplicationPage_ROW_RSS_DESC, allItems, true, JdkQueries.RSS_SIMPLE_QUERY,\n+\t\t\t\t\tthis::isAttributeEnabled, UnitLookup.BYTE.quantity(0), null).ifPresent(rows::add);\n@@ -328,1 +331,2 @@\n-\t\t\t\t\t\t\tStream.of(JdkAttributes.HEAP_USED))\n+\t\t\t\t\t\t\tStream.concat(JdkQueries.RSS_SIMPLE_QUERY.getAttributes().stream(),\n+\t\t\t\t\t\t\t\t\tStream.of(JdkAttributes.HEAP_USED)))\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/JavaApplicationPage.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -170,0 +170,2 @@\n+JavaApplicationPage_ROW_RSS=Resident Set Size\n+JavaApplicationPage_ROW_RSS_DESC=This lane can simultaneously show the RSS and peak RSS observed thus far. Check the legend entries to see which is represented by what color and to enable\/disable them separately.\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1400,0 +1400,8 @@\n+\n+\t\/\/ Don't want these to be canonicalized general size and\/or peak attributes, so creating new ones...\n+\tpublic static final IAttribute<IQuantity> RSS_SIZE = new Attribute<IQuantity>(\"size\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_RSS_SIZE), Messages.getString(Messages.ATTR_RSS_SIZE_DESC), MEMORY) {\n+\t};\n+\tpublic static final IAttribute<IQuantity> RSS_PEAK = new Attribute<IQuantity>(\"peak\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_RSS_PEAK), Messages.getString(Messages.ATTR_RSS_PEAK_DESC), MEMORY) {\n+\t};\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -159,0 +159,1 @@\n+\tpublic static final IItemFilter RSS = ItemFilters.type(JdkTypeIDs.RSS);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.RSS_SIZE;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkAttributes.RSS_PEAK;\n@@ -192,0 +194,1 @@\n+\tpublic static final IItemQuery RSS_SIMPLE_QUERY = fromWhere(JdkFilters.RSS).select(RSS_SIZE, RSS_PEAK).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkQueries.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -217,0 +217,1 @@\n+\tpublic static final String RSS = PREFIX + \"ResidentSetSize\";\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkTypeIDs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -497,0 +497,4 @@\n+\tpublic static final String ATTR_RSS_SIZE = \"ATTR_RSS_SIZE\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_RSS_SIZE_DESC = \"ATTR_RSS_SIZE_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_RSS_PEAK = \"ATTR_RSS_PEAK\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_RSS_PEAK_DESC = \"ATTR_RSS_PEAK_DESC\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -285,0 +285,4 @@\n+ATTR_RSS_SIZE=RSS\n+ATTR_RSS_SIZE_DESC=Resident set size of the process\n+ATTR_RSS_PEAK=RSS (Peak)\n+ATTR_RSS_PEAK_DESC=Peak resident set size of the process\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}