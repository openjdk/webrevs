{"files":[{"patch":"@@ -37,3 +37,0 @@\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n@@ -42,1 +39,0 @@\n-import java.util.logging.Logger;\n@@ -45,1 +41,0 @@\n-import javax.management.remote.JMXConnectorFactory;\n@@ -47,1 +42,0 @@\n-import javax.management.remote.JMXConnectorServerFactory;\n@@ -55,4 +49,0 @@\n-import org.osgi.framework.BundleContext;\n-import org.osgi.framework.FrameworkUtil;\n-import org.osgi.framework.InvalidSyntaxException;\n-import org.osgi.framework.ServiceReference;\n@@ -72,1 +62,1 @@\n-\t\tJMXConnectorProvider realProvider = extendEnv(serviceURL, (Map<String, Object>) environment);\n+\t\tJMXConnectorProvider realProvider = findProtocolExtension(serviceURL);\n@@ -79,2 +69,1 @@\n-\tpublic JMXConnectorProvider extendEnv(JMXServiceURL serviceURL, Map<String, Object> environment) {\n-\t\tString filter = '(' + EXTENSION_ATTRIBUTE_PROTOCOL + '=' + serviceURL.getProtocol() + ')';\n+\tpublic JMXConnectorProvider findProtocolExtension(JMXServiceURL serviceURL) {\n@@ -82,18 +71,10 @@\n-\t\t\tfinal BundleContext context = FrameworkUtil.getBundle(getClass()).getBundleContext();\n-\t\t\tCollection<ServiceReference<JMXConnectorProvider>> refs;\n-\t\t\trefs = context.getServiceReferences(JMXConnectorProvider.class, filter);\n-\n-\t\t\tfor (ServiceReference<JMXConnectorProvider> ref : refs) {\n-\t\t\t\tJMXConnectorProvider provider = context.getService(ref);\n-\t\t\t\tif (provider != null) {\n-\t\t\t\t\tfor (String key : ref.getPropertyKeys()) {\n-\t\t\t\t\t\tObject value = ref.getProperty(key);\n-\n-\t\t\t\t\t\tString property = getIfPrefixed(\"environment:\", key); \/\/$NON-NLS-1$\n-\t\t\t\t\t\tif (property != null) {\n-\t\t\t\t\t\t\tenvironment.put(property, value);\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\tproperty = getIfPrefixed(\"system:\", key); \/\/$NON-NLS-1$\n-\t\t\t\t\t\tif (property != null) {\n-\t\t\t\t\t\t\tensureSystemProperty(property, value.toString(), \"|\"); \/\/$NON-NLS-1$\n+\t\t\tIExtensionRegistry registry = Platform.getExtensionRegistry();\n+\t\t\tfor (IConfigurationElement config : registry.getConfigurationElementsFor(EXTENSION_POINT)) {\n+\t\t\t\tif (config.getName().equals(EXTENSION_ELEMENT_CLIENT)) {\n+\t\t\t\t\tfinal String protocol = config.getAttribute(EXTENSION_ATTRIBUTE_PROTOCOL);\n+\t\t\t\t\tif (serviceURL.getProtocol().equals(protocol)) {\n+\t\t\t\t\t\tJMXConnectorProvider provider = (JMXConnectorProvider) config\n+\t\t\t\t\t\t\t\t.createExecutableExtension(EXTENSION_ATTRIBUTE_CLASS);\n+\t\t\t\t\t\tfor (IConfigurationElement prop : config.getChildren(TAG_SYSPROPERTY)) {\n+\t\t\t\t\t\t\tensureSystemProperty(prop.getAttribute(ATTRIBUTE_KEY), prop.getAttribute(ATTRIBUTE_INCLUDE),\n+\t\t\t\t\t\t\t\t\tprop.getAttribute(ATTRIBUTE_SEPARATOR));\n@@ -101,0 +82,1 @@\n+\t\t\t\t\t\treturn provider;\n@@ -102,9 +84,0 @@\n-\n-\t\t\t\t\tClassLoader loader = provider.getClass().getClassLoader();\n-\t\t\t\t\tenvironment.put(JMXConnectorFactory.DEFAULT_CLASS_LOADER, loader);\n-\t\t\t\t\t\/\/ Used by MX4J.\n-\t\t\t\t\tenvironment.put(JMXConnectorServerFactory.PROTOCOL_PROVIDER_CLASS_LOADER, loader);\n-\n-\t\t\t\t\t\/\/ FIXME: Add WeakRef\/ReferenceQueue or listener to \"unget\" service?\n-\t\t\t\t\t\/\/ return provider.newJMXConnector(serviceURL, environment);\n-\t\t\t\t\treturn provider;\n@@ -113,11 +86,2 @@\n-\t\t} catch (InvalidSyntaxException e) {\n-\t\t\t\/\/ Assume this is a bad protocol name. At least we don't support it.\n-\t\t\tLogger.getLogger(\"org.openjdk.jmc.rjmx.ext\").log(Level.WARNING, \"Bad protocol syntax\", e); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n-\tprivate static String getIfPrefixed(String prefix, String candidate) {\n-\t\tif (candidate.startsWith(prefix)) {\n-\t\t\treturn candidate.substring(prefix.length());\n+\t\t} catch (CoreException e) {\n+\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not instantiate JMX protocol provider!\", e);\n@@ -138,23 +102,0 @@\n-\n-\tpublic static List<JMXConnectorProvider> initializeFromExtensions() {\n-\t\tList<JMXConnectorProvider> providers = new ArrayList<>();\n-\t\tIExtensionRegistry registry = Platform.getExtensionRegistry();\n-\t\tfor (IConfigurationElement config : registry.getConfigurationElementsFor(EXTENSION_POINT)) {\n-\t\t\tif (config.getName().equals(EXTENSION_ELEMENT_CLIENT)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tJMXConnectorProvider provider = (JMXConnectorProvider) config\n-\t\t\t\t\t\t\t.createExecutableExtension(EXTENSION_ATTRIBUTE_CLASS);\n-\t\t\t\t\tproviders.add(provider);\n-\t\t\t\t\tfor (IConfigurationElement prop : config.getChildren(TAG_SYSPROPERTY)) {\n-\t\t\t\t\t\tensureSystemProperty(prop.getAttribute(ATTRIBUTE_KEY), prop.getAttribute(ATTRIBUTE_INCLUDE),\n-\t\t\t\t\t\t\t\tprop.getAttribute(ATTRIBUTE_SEPARATOR));\n-\t\t\t\t\t}\n-\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\t\t\"Could not instantiate JMX protocol provider!\", e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn providers;\n-\t}\n-\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ProtocolInitializer.java","additions":15,"deletions":74,"binary":false,"changes":89,"status":"modified"}]}