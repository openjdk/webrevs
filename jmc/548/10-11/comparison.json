{"files":[{"patch":"@@ -3,2 +3,2 @@\n-   Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n-   Copyright (c) 2019, 2023, Red Hat Inc. All rights reserved.\n+   Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2019, 2024, Red Hat Inc. All rights reserved.\n@@ -321,0 +321,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>org.openjdk.jmc.jolokia<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n@@ -414,0 +419,6 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>org.openjdk.jmc.jolokia.test<\/artifactId>\n+\t\t\t<scope>test<\/scope>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n","filename":"application\/coverage\/pom.xml","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -10,2 +10,1 @@\n- org.jolokia.jmx-adapter.standalone;bundle-version=\"1.7.2\";visibility:=reexport,\n- org.jolokia.jvm;bundle-version=\"1.7.2\",\n+ org.jolokia.client-jmx-adapter.standalone;bundle-version=\"2.0.2\";visibility:=reexport,\n","filename":"application\/org.openjdk.jmc.jolokia\/META-INF\/MANIFEST.MF","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,6 +37,0 @@\n-   <extension\n-         point=\"org.openjdk.jmc.rjmx.descriptorProvider\">\n-      <provider\n-            class=\"org.openjdk.jmc.jolokia.JolokiaDiscoveryListener\">\n-      <\/provider>\n-   <\/extension>\n@@ -50,15 +44,0 @@\n-      <extension\n-            point=\"org.eclipse.ui.preferencePages\">\n-         <page\n-               category=\"org.openjdk.jmc.browser.preferences.BrowserPreferencePage\"\n-               class=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n-               id=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n-               name=\"%page.name\">\n-         <\/page>\n-      <\/extension>\n-      <extension\n-            point=\"org.eclipse.core.runtime.preferences\">\n-         <initializer\n-               class=\"org.openjdk.jmc.jolokia.preferences.PreferenceInitializer\">\n-         <\/initializer>\n-      <\/extension>\n","filename":"application\/org.openjdk.jmc.jolokia\/plugin.xml","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia;\n-\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import org.openjdk.jmc.rjmx.descriptorprovider.AbstractDescriptorProvider;\n-import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n-\n-\/**\n- * The {@code AbstractCachedDescriptorProvider} keeps a list of identified JVMs that can be\n- * refreshed in the background by some means of discovering JVMs. Listeners will be notified of any\n- * changes.\n- *\/\n-@SuppressWarnings(\"restriction\")\n-public abstract class AbstractCachedDescriptorProvider extends AbstractDescriptorProvider {\n-\n-\tprivate static final long LOCAL_REFRESH_INTERVAL = 20000;\n-\tprivate Scanner scanner;\n-\tprivate Thread scannerThread;\n-\t\/**\n-\t * Map<UUID, IServerDescriptor>\n-\t *\/\n-\tprivate final Map<String, ServerConnectionDescriptor> knownDescriptors = new HashMap<>();\n-\n-\t\/**\n-\t * This is where we periodically scan and report deltas to the listeners.\n-\t *\/\n-\tprivate class Scanner implements Runnable {\n-\t\tboolean isRunning;\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tisRunning = true;\n-\t\t\twhile (isRunning) {\n-\t\t\t\ttry {\n-\t\t\t\t\tscan();\n-\t\t\t\t\tThread.sleep(LOCAL_REFRESH_INTERVAL);\n-\t\t\t\t} catch (InterruptedException ignore) {\n-\t\t\t\t\t\/\/ Don't mind being interrupted.\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t\/**\n-\t\t * Marks this scanner as terminated.\n-\t\t *\/\n-\t\tpublic void shutdown() {\n-\t\t\tisRunning = false;\n-\t\t}\n-\n-\t\tprotected void scan() {\n-\t\t\tMap<String, ServerConnectionDescriptor> newOnes = discoverJvms();\n-\n-\t\t\tsynchronized (knownDescriptors) {\n-\t\t\t\t\/\/ Remove stale ones...\n-\t\t\t\tfor (Iterator<Entry<String, ServerConnectionDescriptor>> entryIterator = knownDescriptors.entrySet()\n-\t\t\t\t\t\t.iterator(); entryIterator.hasNext();) {\n-\t\t\t\t\tEntry<String, ServerConnectionDescriptor> entry = entryIterator.next();\n-\t\t\t\t\tif (newOnes.containsKey(entry.getKey())) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tentryIterator.remove();\n-\t\t\t\t\tonDescriptorRemoved(entry.getKey());\n-\t\t\t\t}\n-\n-\t\t\t\t\/\/ Add new ones...\n-\t\t\t\tfor (Entry<String, ServerConnectionDescriptor> entry : newOnes.entrySet()) {\n-\t\t\t\t\tif (knownDescriptors.containsKey(entry.getKey())) {\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\t\t\t\t\tonDescriptorDetected(entry.getValue(), entry.getValue().getPath(), entry.getValue().serviceUrl(),\n-\t\t\t\t\t\t\tentry.getValue());\n-\t\t\t\t}\n-\t\t\t\tknownDescriptors.clear();\n-\t\t\t\tknownDescriptors.putAll(newOnes);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Sets up the thread.\n-\t *\/\n-\tprivate void initialize() {\n-\n-\t\tscanner = new Scanner();\n-\t\tscannerThread = new Thread(scanner, getName()); \/\/ $NON-NLS-1$\n-\t\tscannerThread.start();\n-\t}\n-\n-\tprotected abstract boolean isEnabled();\n-\n-\tprotected abstract Map<String, ServerConnectionDescriptor> discoverJvms();\n-\n-\t@Override\n-\tpublic void addDescriptorListener(IDescriptorListener l) {\n-\t\tsynchronized (m_descriptorListeners) {\n-\t\t\tif (m_descriptorListeners.size() == 0) {\n-\t\t\t\tsuper.addDescriptorListener(l);\n-\t\t\t\tinitialize();\n-\t\t\t} else {\n-\t\t\t\tsuper.addDescriptorListener(l);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeDescriptorListener(IDescriptorListener l) {\n-\t\tsynchronized (m_descriptorListeners) {\n-\t\t\tsuper.removeDescriptorListener(l);\n-\t\t\tif (m_descriptorListeners.size() == 0 && scanner != null) {\n-\t\t\t\tscanner.shutdown();\n-\t\t\t\tscannerThread.interrupt();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Shuts down the scanner thread.\n-\t *\/\n-\tpublic void shutdown() {\n-\t\tif (scanner != null) {\n-\t\t\tscanner.shutdown();\n-\t\t}\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/AbstractCachedDescriptorProvider.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -55,2 +55,2 @@\n-import org.jolokia.converter.Converters;\n-import org.jolokia.converter.json.JsonConvertOptions;\n+import org.jolokia.service.serializer.JolokiaSerializer;\n+import org.jolokia.server.core.service.serializer.SerializeOptions;\n@@ -110,1 +110,1 @@\n-\t\t} catch (Exception ignore) {\n+\t\t} catch (Exception | NoClassDefFoundError ignore) {\n@@ -119,7 +119,10 @@\n-\t\tfor (int i = 0; i < params.length; i++) {\n-\t\t\tObject object = params[i];\n-\t\t\tif (object instanceof TabularData) {\n-\t\t\t\ttry {\n-\t\t\t\t\tparams[i] = new Converters().getToJsonConverter().convertToJson(object, new LinkedList<String>(),\n-\t\t\t\t\t\t\tJsonConvertOptions.DEFAULT);\n-\t\t\t\t} catch (AttributeNotFoundException ignore) {\n+\n+\t\tif (params != null) {\n+\t\t\tfor (int i = 0; i < params.length; i++) {\n+\t\t\t\tObject object = params[i];\n+\t\t\t\tif (object instanceof TabularData) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tparams[i] = new JolokiaSerializer().serialize(object, new LinkedList<String>(),\n+\t\t\t\t\t\t\t\tSerializeOptions.DEFAULT);\n+\t\t\t\t\t} catch (AttributeNotFoundException ignore) {\n+\t\t\t\t\t}\n@@ -127,1 +130,0 @@\n-\t\t\t}\n@@ -129,0 +131,1 @@\n+\t\t\t}\n@@ -209,0 +212,15 @@\n+\t@Override\n+\tpublic boolean isInstanceOf(ObjectName objectName, String type) throws InstanceNotFoundException, IOException {\n+\t\tif (\"java.lang.management.OperatingSystemMXBean\".equals(type)\n+\t\t\t\t&& \"com.sun.management.internal.OperatingSystemImpl\"\n+\t\t\t\t\t\t.equals(this.getMBeanInfo(objectName).getClassName())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn super.isInstanceOf(objectName, type);\n+\t\t} catch (NoClassDefFoundError | UnsatisfiedLinkError e) {\n+\t\t\t\/\/Handle this until it is fixed in jolokia https:\/\/github.com\/jolokia\/jolokia\/issues\/666\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnection.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\t\t\tthrow new MalformedURLException(\"I only serve Jolokia connections\"); \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Jolokia connections\");\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnectionProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,203 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia;\n-\n-import java.io.IOException;\n-import java.lang.management.ManagementFactory;\n-import java.net.MalformedURLException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.management.Attribute;\n-import javax.management.AttributeList;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-import javax.management.openmbean.CompositeDataSupport;\n-import javax.management.openmbean.TabularDataSupport;\n-import javax.management.remote.JMXServiceURL;\n-\n-import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n-import org.openjdk.jmc.common.jvm.Connectable;\n-import org.openjdk.jmc.common.jvm.JVMArch;\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.common.jvm.JVMType;\n-\n-\/**\n- * Provide data about JVMs accessed over Jolokia for the JVM browser\n- *\/\n-public class JolokiaAgentDescriptor implements ServerConnectionDescriptor {\n-\n-\tpublic static final JVMDescriptor NULL_DESCRIPTOR = new JVMDescriptor(null, null, null, null, null, null, null,\n-\t\t\tnull, false, Connectable.UNKNOWN);\n-\tprivate final JMXServiceURL serviceUrl;\n-\tprivate final Map<String, ?> agentData;\n-\tprivate final JVMDescriptor jvmDescriptor;\n-\n-\tpublic JolokiaAgentDescriptor(Map<String, ?> agentData, JVMDescriptor jvmDescriptor)\n-\t\t\tthrows URISyntaxException, MalformedURLException {\n-\t\tsuper();\n-\t\tURI uri = new URI((String) agentData.get(\"url\")); \/\/$NON-NLS-1$\n-\t\tthis.serviceUrl = new JMXServiceURL(\n-\t\t\t\tString.format(\"service:jmx:jolokia:\/\/%s:%s%s\", uri.getHost(), uri.getPort(), uri.getPath())); \/\/$NON-NLS-1$\n-\t\tthis.agentData = agentData;\n-\t\tthis.jvmDescriptor = jvmDescriptor;\n-\t}\n-\n-\tJMXServiceURL getServiceUrl() {\n-\t\treturn serviceUrl;\n-\t}\n-\n-\t@Override\n-\tpublic String getGUID() {\n-\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic String getDisplayName() {\n-\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic JVMDescriptor getJvmInfo() {\n-\t\treturn this.jvmDescriptor;\n-\t}\n-\n-\t\/**\n-\t * Best effort to extract JVM information from a connection if everything works. Can be adjusted\n-\t * to support different flavors of JVM.\n-\t *\/\n-\tpublic static JVMDescriptor attemptToGetJvmInfo(RemoteJmxAdapter adapter) {\n-\n-\t\ttry {\n-\t\t\tAttributeList attributes = adapter.getAttributes(new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME),\n-\t\t\t\t\tnew String[] {\"Pid\", \"Name\", \"InputArguments\", \"SystemProperties\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n-\t\t\tInteger pid = null;\n-\t\t\tString arguments = null, javaCommand = null, javaVersion = null, vmName = null, vmVendor = null;\n-\t\t\tboolean isDebug = false;\n-\t\t\tJVMType type = JVMType.UNKNOWN;\n-\t\t\tJVMArch arch = JVMArch.UNKNOWN;\n-\t\t\tfor (Attribute attribute : attributes.asList()) {\n-\t\t\t\t\/\/ newer JVM have pid as separate attribute, older have to parse from name\n-\t\t\t\tif (attribute.getName().equalsIgnoreCase(\"Pid\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tpid = Integer.valueOf(String.valueOf(attribute.getValue()));\n-\t\t\t\t\t} catch (NumberFormatException ignore) {\n-\t\t\t\t\t}\n-\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"Name\") && pid == null) { \/\/$NON-NLS-1$\n-\t\t\t\t\tString pidAndHost = String.valueOf(attribute.getValue());\n-\t\t\t\t\tint separator = pidAndHost.indexOf('@');\n-\t\t\t\t\tif (separator > 0) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tpid = Integer.valueOf(pidAndHost.substring(0, separator));\n-\t\t\t\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"InputArguments\")) { \/\/$NON-NLS-1$\n-\n-\t\t\t\t\tif (attribute.getValue() instanceof String[]) {\n-\t\t\t\t\t\targuments = Arrays.toString((String[]) attribute.getValue());\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\targuments = String.valueOf(attribute.getValue());\n-\t\t\t\t\t}\n-\t\t\t\t\tif (arguments.contains(\"-agentlib:jdwp\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\tisDebug = true;\n-\t\t\t\t\t}\n-\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"SystemProperties\") \/\/$NON-NLS-1$\n-\t\t\t\t\t\t&& attribute.getValue() instanceof TabularDataSupport) {\n-\t\t\t\t\tTabularDataSupport systemProperties = (TabularDataSupport) attribute.getValue();\n-\n-\t\t\t\t\t\/\/ quite clumsy: iterate over properties as we need to use the exact key, which is non trivial\n-\t\t\t\t\t\/\/ to reproduce\n-\t\t\t\t\tfor (Object entry : systemProperties.values()) {\n-\t\t\t\t\t\tString key = ((CompositeDataSupport) entry).get(\"key\").toString(); \/\/$NON-NLS-1$\n-\t\t\t\t\t\tString value = ((CompositeDataSupport) entry).get(\"value\").toString(); \/\/$NON-NLS-1$\n-\t\t\t\t\t\tif (key.equalsIgnoreCase(\"sun.management.compiler\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tif (value.toLowerCase().contains(\"hotspot\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t\ttype = JVMType.HOTSPOT;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.arch.data.model\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tString archIndicator = value;\n-\t\t\t\t\t\t\tif (archIndicator.contains(\"64\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t\tarch = JVMArch.BIT64;\n-\t\t\t\t\t\t\t} else if (archIndicator.contains(\"32\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t\tarch = JVMArch.BIT32;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.java.command\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tjavaCommand = value;\n-\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.version\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tjavaVersion = value;\n-\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.name\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tvmName = value;\n-\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.vendor\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tvmVendor = value;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\treturn new JVMDescriptor(javaVersion, type, arch, javaCommand, arguments, vmName, vmVendor, pid, isDebug,\n-\t\t\t\t\tConnectable.UNKNOWN);\n-\n-\t\t} catch (RuntimeException | IOException | InstanceNotFoundException | MalformedObjectNameException ignore) {\n-\t\t\treturn NULL_DESCRIPTOR;\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic JMXServiceURL createJMXServiceURL() throws IOException {\n-\t\treturn serviceUrl;\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, Object> getEnvironment() {\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic String getPath() {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic JMXServiceURL serviceUrl() {\n-\t\treturn this.serviceUrl;\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":0,"deletions":203,"binary":false,"changes":203,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia;\n-\n-import java.io.IOException;\n-\n-import java.net.URISyntaxException;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n-import org.jolokia.discovery.JolokiaDiscovery;\n-import org.jolokia.util.JulLogHandler;\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n-\n-\/**\n- * Add found Jolokia instances to the JVM browser using the Jolokia discovery mechanism.\n- * https:\/\/jolokia.org\/reference\/html\/protocol.html#discovery\n- *\/\n-public class JolokiaDiscoveryListener extends AbstractCachedDescriptorProvider implements PreferenceConstants {\n-\n-\t@Override\n-\tprotected Map<String, ServerConnectionDescriptor> discoverJvms() {\n-\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n-\t\tif (!JmcJolokiaPlugin.getDefault().getPreferenceStore().getBoolean(P_SCAN)) {\n-\t\t\treturn found;\n-\t\t}\n-\t\ttry {\n-\t\t\tfor (Object object : new JolokiaDiscovery(\"jmc\", new JulLogHandler()).lookupAgents()) { \/\/$NON-NLS-1$\n-\t\t\t\ttry {\n-\n-\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\t\t\tMap<String, ?> response = (Map<String, ?>) object;\n-\t\t\t\t\tJVMDescriptor jvmInfo;\n-\t\t\t\t\ttry {\/\/ if it is connectable, see if we can get info from connection\n-\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor\n-\t\t\t\t\t\t\t\t.attemptToGetJvmInfo(new RemoteJmxAdapter(String.valueOf(response.get(\"url\")))); \/\/$NON-NLS-1$\n-\t\t\t\t\t} catch (Exception ignore) {\n-\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor.NULL_DESCRIPTOR;\n-\t\t\t\t\t}\n-\t\t\t\t\tJolokiaAgentDescriptor agentDescriptor = new JolokiaAgentDescriptor(response, jvmInfo);\n-\t\t\t\t\tfound.put(agentDescriptor.getGUID(), agentDescriptor);\n-\n-\t\t\t\t} catch (URISyntaxException ignore) {\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (IOException ignore) {\n-\t\t}\n-\t\treturn found;\n-\t}\n-\n-\t@Override\n-\tpublic String getDescription() {\n-\t\treturn Messages.JolokiaDiscoveryListener_Description;\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn \"jolokia\"; \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tprotected boolean isEnabled() {\n-\t\treturn true;\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoveryListener.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-public class Messages extends NLS {\n-\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.jolokia.messages\"; \/\/$NON-NLS-1$\n-\tpublic static String JolokiaDiscoveryListener_Description;\n-\tstatic {\n-\t\t\/\/ initialize resource bundle\n-\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n-\t}\n-\n-\tprivate Messages() {\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/Messages.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia;\n-\n-import javax.management.remote.JMXServiceURL;\n-\n-import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n-\n-\/**\n- * Describes the JVM and how to connect to it.\n- *\/\n-public interface ServerConnectionDescriptor extends IServerDescriptor, IConnectionDescriptor {\n-\tString getPath();\n-\n-\tJMXServiceURL serviceUrl();\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/ServerConnectionDescriptor.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-JolokiaDiscoveryListener_Description=Uses Jolokia Discovery to report any active JVMs with Jolokia broadcasting\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/messages.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia.preferences;\n-\n-import org.eclipse.jface.preference.BooleanFieldEditor;\n-import org.eclipse.jface.preference.FieldEditorPreferencePage;\n-import org.eclipse.ui.IWorkbench;\n-import org.eclipse.ui.IWorkbenchPreferencePage;\n-import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n-\n-public class JolokiaPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {\n-\n-\tpublic JolokiaPreferencePage() {\n-\t\tsuper(GRID);\n-\t\tsetPreferenceStore(JmcJolokiaPlugin.getDefault().getPreferenceStore());\n-\t\tsetDescription(Messages.JolokiaPreferencePage_Description);\n-\t}\n-\n-\tpublic void createFieldEditors() {\n-\t\taddField(new BooleanFieldEditor(PreferenceConstants.P_SCAN, Messages.JolokiaPreferencePage_Label,\n-\t\t\t\tgetFieldEditorParent()));\n-\n-\t}\n-\n-\t\/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n-\t *\/\n-\tpublic void init(IWorkbench workbench) {\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/JolokiaPreferencePage.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia.preferences;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-public class Messages extends NLS {\n-\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.jolokia.preferences.messages\"; \/\/$NON-NLS-1$\n-\tpublic static String JolokiaPreferencePage_Description;\n-\tpublic static String JolokiaPreferencePage_Label;\n-\tstatic {\n-\t\t\/\/ initialize resource bundle\n-\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n-\t}\n-\n-\tprivate Messages() {\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/Messages.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia.preferences;\n-\n-\/**\n- * Constant definitions for plug-in preferences.\n- *\/\n-public interface PreferenceConstants {\n-\n-\tpublic static final String P_SCAN = \"discoverJolokia\"; \/\/$NON-NLS-1$\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceConstants.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, Kantega AS. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.jolokia.preferences;\n-\n-import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;\n-import org.eclipse.jface.preference.IPreferenceStore;\n-import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n-\n-\/**\n- * Class used to initialize default preference values.\n- *\/\n-public class PreferenceInitializer extends AbstractPreferenceInitializer {\n-\n-\t\/*\n-\t * (non-Javadoc)\n-\t * \n-\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n-\t * initializeDefaultPreferences()\n-\t *\/\n-\tpublic void initializeDefaultPreferences() {\n-\t\tIPreferenceStore store = JmcJolokiaPlugin.getDefault().getPreferenceStore();\n-\t\tstore.setDefault(PreferenceConstants.P_SCAN, false);\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceInitializer.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-JolokiaPreferencePage_Description=Discover Jolokia Agents\\n\\nhttps:\/\/jolokia.org\/reference\/html\/protocol.html\\#discovery\\n\\n\n-JolokiaPreferencePage_Label=&Discover Jolokia agents\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/messages.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -19,1 +19,1 @@\n- org.openjdk.jmc.rjmx.descriptorprovider;x-friends:=\"org.openjdk.jmc.browser.jdp,org.openjdk.jmc.browser.attach\",\n+ org.openjdk.jmc.rjmx.descriptorprovider;x-friends:=\"org.openjdk.jmc.browser.jdp,org.openjdk.jmc.browser.attach,org.openjdk.jmc.jolokia\",\n","filename":"application\/org.openjdk.jmc.rjmx\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2023, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc. All rights reserved.\n@@ -61,1 +61,0 @@\n-\t\t@SuppressWarnings(\"unchecked\")\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ProtocolInitializer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import java.util.logging.Logger;\n@@ -46,0 +45,1 @@\n+import org.openjdk.jmc.rjmx.RJMXPlugin;\n@@ -147,1 +147,1 @@\n-\t\t\tLogger.getLogger(getClass().getName()).log(Level.INFO, \"Error attempting JMX protocol extensions\", e);\n+\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.INFO, \"Error attempting JMX protocol extensions\", e);\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ServerHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n- org.eclipse.osgi;bundle-version=\"3.16.200\",\n+ org.eclipse.osgi,\n@@ -16,1 +16,1 @@\n- org.hamcrest;bundle-version=\"2.1.0\"\n+ org.hamcrest\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/META-INF\/MANIFEST.MF","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+\t\t<jolokia.agent.version>1.7.2<\/jolokia.agent.version>\n@@ -57,0 +58,6 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n+\t\t\t<version>${jolokia.agent.version}<\/version>\n+\t\t\t<scope>test<\/scope>\n+\t\t<\/dependency>\n@@ -68,0 +75,1 @@\n+\t\t\t\t\t<!-- Agent version may differ from client version, in fact it may be a good test -->\n@@ -69,1 +77,1 @@\n-\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.version}\/jolokia-jvm-${jolokia.version}.jar=port=0,discover=true<\/argLine>\n+\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.agent.version}\/jolokia-jvm-${jolokia.agent.version}.jar=port=0,discover=true<\/argLine>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -61,2 +60,0 @@\n-import org.eclipse.core.runtime.preferences.InstanceScope;\n-import org.junit.AfterClass;\n@@ -66,5 +63,0 @@\n-import org.openjdk.jmc.common.IDescribable;\n-import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n-import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n@@ -84,2 +76,0 @@\n-\tprivate static JolokiaDiscoveryListener discoveryListener;\n-\n@@ -93,1 +83,0 @@\n-\t\tdiscoveryListener = new JolokiaDiscoveryListener();\n@@ -138,29 +127,0 @@\n-\t@Test\n-\tpublic void testDiscover() {\n-\n-\t\tfinal AtomicInteger foundVms = new AtomicInteger(0);\n-\n-\t\t\/\/Set config so that scanning takes place\n-\t\tInstanceScope.INSTANCE.getNode(JmcJolokiaPlugin.PLUGIN_ID).put(PreferenceConstants.P_SCAN, \"true\");\n-\n-\t\tdiscoveryListener.addDescriptorListener(new IDescriptorListener() {\n-\t\t\tpublic void onDescriptorDetected(\n-\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n-\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n-\t\t\t\tfoundVms.getAndIncrement();\n-\t\t\t}\n-\n-\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n-\t\t\t\tfoundVms.getAndDecrement();\n-\t\t\t}\n-\n-\t\t});\n-\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n-\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> foundVms.get() > 0);\n-\t}\n-\n-\t@AfterClass\n-\tpublic static void stopServer() throws Exception {\n-\t\tdiscoveryListener.shutdown();\n-\t}\n-\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/src\/test\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaTest.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024 Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/RJMXConnection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-\t\t<jolokia.version>1.7.2<\/jolokia.version>\n","filename":"pom.xml","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.2\"\/>\n-            <unit id=\"org.jolokia.jvm\" version=\"1.7.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-09\/platform-definition-2022-09.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.2\"\/>\n-            <unit id=\"org.jolokia.jvm\" version=\"1.7.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-12\/platform-definition-2022-12.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.2\"\/>\n-            <unit id=\"org.jolokia.jvm\" version=\"1.7.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-03\/platform-definition-2023-03.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.2\"\/>\n-            <unit id=\"org.jolokia.jvm\" version=\"1.7.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-09\/platform-definition-2023-09.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.2\"\/>\n-            <unit id=\"org.jolokia.jvm\" version=\"1.7.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-12\/platform-definition-2023-12.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-\t\t<jolokia.version>1.7.2<\/jolokia.version>\n+\t\t<jolokia.version>2.0.2<\/jolokia.version>\n@@ -145,5 +145,1 @@\n-\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-jmx-adapter:jar:standalone:${jolokia.version}<\/id>\n-\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n-\t\t\t\t\t\t\t\t<\/artifact>\n-\t\t\t\t\t\t\t\t<artifact>\n-\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-jvm:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-client-jmx-adapter:jar:standalone:${jolokia.version}<\/id>\n","filename":"releng\/third-party\/pom.xml","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}