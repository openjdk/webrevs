{"files":[{"patch":"@@ -3,2 +3,2 @@\n-   Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n-   Copyright (c) 2019, 2023, Red Hat Inc. All rights reserved.\n+   Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2019, 2024, Red Hat Inc. All rights reserved.\n@@ -321,0 +321,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>org.openjdk.jmc.jolokia<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n@@ -414,0 +419,6 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>org.openjdk.jmc.jolokia.test<\/artifactId>\n+\t\t\t<scope>test<\/scope>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n","filename":"application\/coverage\/pom.xml","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -232,0 +232,7 @@\n+\n+    <plugin\n+         id=\"org.openjdk.jmc.jolokia\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n","filename":"application\/org.openjdk.jmc.feature.core\/feature.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<!-- Convenience: Regarding access rules. It appears that these packages are exported from jolokia standalone. Wondering whether eclipse caps at 36 access rules or something. Setting access rules on that specific plugin dependency does not seem to be persisted to the .classpath file, hence setting access policy globally for all plugin dependencies-->\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/json\/simple\/*\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" path=\"src\/main\/java\"\/>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"application\/org.openjdk.jmc.jolokia\/.classpath","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: %Bundle-Name\n+Bundle-SymbolicName: org.openjdk.jmc.jolokia;singleton:=true\n+Bundle-Version: 9.0.0.qualifier\n+Automatic-Module-Name: org.openjdk.jmc.jolokia\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Require-Bundle: org.eclipse.core.runtime,\n+ org.eclipse.ui,\n+ org.jolokia.client-jmx-adapter.standalone;bundle-version=\"2.0.2\";visibility:=reexport,\n+ org.openjdk.jmc.common,\n+ org.openjdk.jmc.rjmx,\n+ org.openjdk.jmc.ui\n+Export-Package:  org.openjdk.jmc.jolokia,\n+ org.openjdk.jmc.jolokia.preferences\n+Bundle-Activator: org.openjdk.jmc.jolokia.JmcJolokiaPlugin\n+Bundle-ActivationPolicy: lazy\n","filename":"application\/org.openjdk.jmc.jolokia\/META-INF\/MANIFEST.MF","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+#Properties file for org.openjdk.jmc.jolokia\n+page.name = Jolokia\n+Bundle-Name = Jolokia JMC Connection\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.jolokia\/OSGI-INF\/l10n\/bundle.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -2,1 +2,2 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2024, Kantega AS. All rights reserved.\n@@ -32,1 +33,0 @@\n-#\n@@ -36,0 +36,1 @@\n+               OSGI-INF\/,\\\n@@ -38,2 +39,1 @@\n-               pages.xml\n-pde.match.rule.bundle=compatible\n+               OSGI-INF\/l10n\/bundle.properties\n","filename":"application\/org.openjdk.jmc.jolokia\/build.properties","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.ext.g1\/build.properties","status":"copied"},{"patch":"@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2024, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?eclipse version=\"3.4\"?>\n+<plugin>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.jmxProtocols\">\n+      <client\n+            class=\"org.openjdk.jmc.jolokia.JmcJolokiaJmxConnectionProvider\" protocol=\"jolokia\">\n+            <sysproperty name=\"running.in.jmc\" include=\"true\" \/>\n+      <\/client>\n+   <\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.jolokia\/plugin.xml","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2024, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.jolokia<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\t<properties>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n+\t<\/properties>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.jolokia\/pom.xml","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,227 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.util.LinkedList;\n+import java.util.Optional;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.Descriptor;\n+import javax.management.ImmutableDescriptor;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanOperationInfo;\n+import javax.management.MBeanParameterInfo;\n+import javax.management.ObjectName;\n+import javax.management.modelmbean.DescriptorSupport;\n+import javax.management.openmbean.TabularData;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.service.serializer.JolokiaSerializer;\n+import org.jolokia.server.core.service.serializer.SerializeOptions;\n+\n+\/**\n+ * Make JMC specific adjustments to Jolokia JMX connection. May consider to use the decorator\n+ * pattern if differences are big, but for now subclass\n+ *\/\n+public class JmcJolokiaJmxConnection extends RemoteJmxAdapter {\n+\n+\tprivate static final String UNKNOWN = \"Unknown\"; \/\/$NON-NLS-1$\n+\tprivate static final String DIAGNOSTIC_OPTIONS = \"com.sun.management:type=DiagnosticCommand\"; \/\/$NON-NLS-1$\n+\tprivate static final String PREFIX = \"dcmd.\"; \/\/$NON-NLS-1$\n+\tprivate static final String IMPACT = PREFIX + \"vmImpact\"; \/\/$NON-NLS-1$\n+\tprivate static final String NAME = PREFIX + \"name\"; \/\/$NON-NLS-1$\n+\tprivate static final String DESCRIPTION = PREFIX + \"description\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENTS = PREFIX + \"arguments\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_NAME = PREFIX + \"arg.name\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_DESCRIPTION = PREFIX + \"arg.description\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_MANDATORY = PREFIX + \"arg.isMandatory\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_TYPE = PREFIX + \"arg.type\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_OPTION = PREFIX + \"arg.isOption\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_MULITPLE = PREFIX + \"arg.isMultiple\"; \/\/$NON-NLS-1$\n+\n+\tpublic JmcJolokiaJmxConnection(J4pClient client) throws IOException {\n+\t\tsuper(client);\n+\t}\n+\n+\t@Override\n+\tpublic MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IOException {\n+\t\tMBeanInfo mBeanInfo = super.getMBeanInfo(name);\n+\t\t\/\/ the diagnostic options tab and memory relies on descriptor info in MBeanInfo,\n+\t\t\/\/ modify descriptors the first time\n+\t\tif (DIAGNOSTIC_OPTIONS.equals(name.getCanonicalName())\n+\t\t\t\t&& mBeanInfo.getOperations()[0].getDescriptor() == ImmutableDescriptor.EMPTY_DESCRIPTOR) {\n+\n+\t\t\tMBeanOperationInfo[] modifiedOperations = new MBeanOperationInfo[mBeanInfo.getOperations().length];\n+\n+\t\t\tfor (int i = 0; i < mBeanInfo.getOperations().length; i++) {\n+\t\t\t\tmodifiedOperations[i] = stealOrBuildOperationInfo(mBeanInfo.getOperations()[i],\n+\t\t\t\t\t\tcheckForLocalOperationInfo(name));\n+\t\t\t}\n+\t\t\t\/\/create a copy with modified operations in place of the original MBeanInfo in the cache\n+\t\t\tfinal MBeanInfo modifiedMBeanInfo = new MBeanInfo(mBeanInfo.getClassName(), mBeanInfo.getDescription(),\n+\t\t\t\t\tmBeanInfo.getAttributes(), mBeanInfo.getConstructors(), modifiedOperations,\n+\t\t\t\t\tmBeanInfo.getNotifications());\n+\t\t\tthis.mbeanInfoCache.put(name, modifiedMBeanInfo);\n+\t\t\treturn modifiedMBeanInfo;\n+\t\t}\n+\t\treturn mBeanInfo;\n+\t}\n+\n+\tprivate Optional<MBeanInfo> checkForLocalOperationInfo(ObjectName name) {\n+\t\tMBeanInfo localInfo;\n+\t\ttry {\n+\t\t\tlocalInfo = ManagementFactory.getPlatformMBeanServer().getMBeanInfo(name);\n+\t\t} catch (Exception | NoClassDefFoundError ignore) {\n+\t\t\tlocalInfo = null;\n+\t\t}\n+\t\treturn Optional.ofNullable(localInfo);\n+\t}\n+\n+\t@Override\n+\tpublic Object invoke(ObjectName name, String operationName, Object[] params, String[] signature)\n+\t\t\tthrows InstanceNotFoundException, MBeanException, IOException {\n+\n+\t\tif (params != null) {\n+\t\t\tfor (int i = 0; i < params.length; i++) {\n+\t\t\t\tObject object = params[i];\n+\t\t\t\tif (object instanceof TabularData) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tparams[i] = new JolokiaSerializer().serialize(object, new LinkedList<String>(),\n+\t\t\t\t\t\t\t\tSerializeOptions.DEFAULT);\n+\t\t\t\t\t} catch (AttributeNotFoundException ignore) {\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t}\n+\t\treturn super.invoke(name, operationName, params, signature);\n+\t}\n+\n+\t\/**\n+\t * Build MBeanOperationInfo by taking information from the corresponding MBean in the local JVM\n+\t * for a more precise signature. If it is not available locally, attempt to construct it from\n+\t * the metadata from Jolokia.\n+\t * \n+\t * @param original\n+\t *            MBeanInfo from Jolokia list.\n+\t * @param localInfo\n+\t *            MBeanInfo from this JVM to use for getting descriptor.\n+\t * @return Descriptor\n+\t *\/\n+\tprivate MBeanOperationInfo stealOrBuildOperationInfo(MBeanOperationInfo original, Optional<MBeanInfo> localInfo) {\n+\t\treturn localInfo.map(info -> checkForMatchingLocalOperation(original, info))\/\/ first attempt to get descriptor from local copy\n+\t\t\t\t.orElseGet(() -> reverseEngineerOperationInfo(original));\/\/ if not, reverse engineer descriptor from operation info\n+\t}\n+\n+\tprivate MBeanOperationInfo checkForMatchingLocalOperation(MBeanOperationInfo original, MBeanInfo info) {\n+\t\tfor (MBeanOperationInfo localOperation : info.getOperations()) {\n+\t\t\tif (localOperation.getName().equals(original.getName())) {\n+\t\t\t\tif (localOperation.getSignature().length == original.getSignature().length) {\n+\t\t\t\t\tfor (int i = 0; i < original.getSignature().length; i++) {\n+\t\t\t\t\t\tMBeanParameterInfo param = original.getSignature()[i];\n+\t\t\t\t\t\tif (!param.getType().equals(localOperation.getSignature()[i].getType())) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t} else if (i == original.getSignature().length - 1) {\n+\t\t\t\t\t\t\t\/\/ whole signature matches, use as replacement\n+\t\t\t\t\t\t\treturn localOperation;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate MBeanOperationInfo reverseEngineerOperationInfo(MBeanOperationInfo original) {\n+\t\tDescriptorSupport result = new DescriptorSupport();\n+\t\tresult.setField(NAME, original.getName());\n+\t\tresult.setField(DESCRIPTION, original.getDescription());\n+\t\tresult.setField(IMPACT, UNKNOWN);\n+\t\tresult.setField(ARGUMENTS, buildArguments(original.getSignature()));\n+\t\treturn new MBeanOperationInfo(original.getName(), original.getDescription(), original.getSignature(),\n+\t\t\t\toriginal.getReturnType(), MBeanOperationInfo.UNKNOWN, result);\n+\t}\n+\n+\tprivate Descriptor buildArguments(MBeanParameterInfo[] signature) {\n+\t\tDescriptorSupport parameters = new DescriptorSupport();\n+\t\tfor (MBeanParameterInfo parameter : signature) {\n+\t\t\tparameters.setField(parameter.getName(), buildArgument(parameter));\n+\t\t}\n+\t\treturn parameters;\n+\t}\n+\n+\tprivate Descriptor buildArgument(MBeanParameterInfo parameter) {\n+\t\tDescriptorSupport result = new DescriptorSupport();\n+\t\tresult.setField(ARGUMENT_NAME, parameter.getName());\n+\t\tboolean isMultiple = parameter.getType().startsWith(\"[\"); \/\/$NON-NLS-1$\n+\t\tresult.setField(ARGUMENT_MULITPLE, String.valueOf(isMultiple));\n+\t\tString type = parameter.getType();\n+\t\tif (isMultiple) {\n+\t\t\tif (type.startsWith(\"[L\")) { \/\/$NON-NLS-1$\n+\t\t\t\ttype = type.substring(2);\n+\t\t\t} else {\n+\t\t\t\ttype = type.substring(1);\n+\t\t\t}\n+\n+\t\t}\n+\t\t\/\/ probably more reverse mapping of types should be done here, but we hope it is\n+\t\t\/\/ sufficient\n+\t\tresult.setField(ARGUMENT_TYPE, type);\n+\t\tresult.setField(ARGUMENT_DESCRIPTION, parameter.getDescription());\n+\t\tresult.setField(ARGUMENT_MANDATORY, \"false\"); \/\/$NON-NLS-1$\n+\t\tresult.setField(ARGUMENT_OPTION, \"false\"); \/\/$NON-NLS-1$\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isInstanceOf(ObjectName objectName, String type) throws InstanceNotFoundException, IOException {\n+\t\tif (\"java.lang.management.OperatingSystemMXBean\".equals(type) \/\/$NON-NLS-1$\n+\t\t\t\t&& \"com.sun.management.internal.OperatingSystemImpl\" \/\/$NON-NLS-1$\n+\t\t\t\t\t\t.equals(this.getMBeanInfo(objectName).getClassName())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn super.isInstanceOf(objectName, type);\n+\t\t} catch (NoClassDefFoundError | UnsatisfiedLinkError e) {\n+\t\t\t\/\/Handle this until it is fixed in jolokia https:\/\/github.com\/jolokia\/jolokia\/issues\/666\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnection.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorProvider;\n+import javax.management.remote.JMXServiceURL;\n+\n+public class JmcJolokiaJmxConnectionProvider implements JMXConnectorProvider {\n+\t@Override\n+\tpublic JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String, ?> environment) throws IOException {\n+\t\tif (!\"jolokia\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(Messages.getString(\"JmcJolokiaJmxConnectionProvider.0\")); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcJolokiaJmxConnector(serviceURL, environment);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnectionProvider.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.J4pClientBuilder;\n+import org.jolokia.client.jmxadapter.JolokiaJmxConnector;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+\n+public class JmcJolokiaJmxConnector extends JolokiaJmxConnector {\n+\n+\tpublic JmcJolokiaJmxConnector(JMXServiceURL serviceURL, Map<String, ?> environment) {\n+\t\tsuper(serviceURL, environment);\n+\t}\n+\n+\t@Override\n+\tprotected RemoteJmxAdapter instantiateAdapter(J4pClientBuilder clientBuilder, Map<String, Object> mergedEnv)\n+\t\t\tthrows IOException {\n+\t\treturn new JmcJolokiaJmxConnection(clientBuilder.build());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnector.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import org.openjdk.jmc.ui.MCAbstractUIPlugin;\n+\n+public class JmcJolokiaPlugin extends MCAbstractUIPlugin {\n+\n+\tpublic final static String PLUGIN_ID = \"org.openjdk.jmc.jolokia\"; \/\/$NON-NLS-1$\n+\tprivate static JmcJolokiaPlugin plugin;\n+\n+\tpublic JmcJolokiaPlugin() {\n+\t\tsuper(PLUGIN_ID);\n+\t\tplugin = this;\n+\t}\n+\n+\tpublic static JmcJolokiaPlugin getDefault() {\n+\t\treturn plugin;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,21 @@\n+package org.openjdk.jmc.jolokia;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = Messages.class.getPackageName() + \".messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/Messages.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+JmcJolokiaJmxConnectionProvider.0=I only serve Jolokia connections\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -19,1 +19,1 @@\n- org.openjdk.jmc.rjmx.descriptorprovider;x-friends:=\"org.openjdk.jmc.browser.jdp,org.openjdk.jmc.browser.attach\",\n+ org.openjdk.jmc.rjmx.descriptorprovider;x-friends:=\"org.openjdk.jmc.browser.jdp,org.openjdk.jmc.browser.attach,org.openjdk.jmc.jolokia\",\n","filename":"application\/org.openjdk.jmc.rjmx\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.internal;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorProvider;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IConfigurationElement;\n+import org.eclipse.core.runtime.IExtensionRegistry;\n+import org.eclipse.core.runtime.Platform;\n+import org.openjdk.jmc.rjmx.RJMXPlugin;\n+\n+public class ProtocolInitializer {\n+\tprivate final static String EXTENSION_POINT = \"org.openjdk.jmc.rjmx.jmxProtocols\";\/\/$NON-NLS-1$\n+\tprivate final static String EXTENSION_ELEMENT_CLIENT = \"client\";\/\/$NON-NLS-1$\n+\tprivate final static String EXTENSION_ATTRIBUTE_CLASS = \"class\";\/\/$NON-NLS-1$\n+\tprivate final static String EXTENSION_ATTRIBUTE_PROTOCOL = \"protocol\";\/\/$NON-NLS-1$\n+\tprivate final static String ATTRIBUTE_KEY = \"name\"; \/\/$NON-NLS-1$\n+\tprivate final static String TAG_SYSPROPERTY = \"sysproperty\"; \/\/$NON-NLS-1$\n+\tprivate final static String ATTRIBUTE_INCLUDE = \"include\"; \/\/$NON-NLS-1$\n+\tprivate final static String ATTRIBUTE_SEPARATOR = \"separator\"; \/\/$NON-NLS-1$\n+\n+\tpublic JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String, ?> environment) throws IOException {\n+\t\tJMXConnectorProvider realProvider = findProtocolExtension(serviceURL);\n+\t\tif (realProvider == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn realProvider.newJMXConnector(serviceURL, environment);\n+\t}\n+\n+\tpublic JMXConnectorProvider findProtocolExtension(JMXServiceURL serviceURL) {\n+\t\ttry {\n+\t\t\tIExtensionRegistry registry = Platform.getExtensionRegistry();\n+\t\t\tfor (IConfigurationElement config : registry.getConfigurationElementsFor(EXTENSION_POINT)) {\n+\t\t\t\tif (config.getName().equals(EXTENSION_ELEMENT_CLIENT)) {\n+\t\t\t\t\tfinal String protocol = config.getAttribute(EXTENSION_ATTRIBUTE_PROTOCOL);\n+\t\t\t\t\tif (serviceURL.getProtocol().equals(protocol)) {\n+\t\t\t\t\t\tJMXConnectorProvider provider = (JMXConnectorProvider) config\n+\t\t\t\t\t\t\t\t.createExecutableExtension(EXTENSION_ATTRIBUTE_CLASS);\n+\t\t\t\t\t\tfor (IConfigurationElement prop : config.getChildren(TAG_SYSPROPERTY)) {\n+\t\t\t\t\t\t\tensureSystemProperty(prop.getAttribute(ATTRIBUTE_KEY), prop.getAttribute(ATTRIBUTE_INCLUDE),\n+\t\t\t\t\t\t\t\t\tprop.getAttribute(ATTRIBUTE_SEPARATOR));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn provider;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (CoreException e) {\n+\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not instantiate JMX protocol provider!\", e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate static void ensureSystemProperty(String key, String include, String separator) {\n+\t\tString org = System.getProperty(key);\n+\t\tif (org == null) {\n+\t\t\tSystem.setProperty(key, include);\n+\t\t\treturn;\n+\t\t}\n+\t\tif ((separator + org + separator).indexOf(separator + include + separator) < 0) {\n+\t\t\tSystem.setProperty(key, org + separator + include);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ProtocolInitializer.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.io.IOException;\n@@ -38,0 +39,3 @@\n+import java.util.logging.Level;\n+\n+import javax.management.remote.JMXConnector;\n@@ -41,0 +45,1 @@\n+import org.openjdk.jmc.rjmx.RJMXPlugin;\n@@ -121,0 +126,4 @@\n+\t\t\tJMXConnector overriddenConnection = this.checkForProtocolSpecificConnectorExtension();\n+\t\t\tif (overriddenConnection != null) {\n+\t\t\t\tconnection.specifyConnector(overriddenConnection);\n+\t\t\t}\n@@ -132,0 +141,11 @@\n+\tprivate JMXConnector checkForProtocolSpecificConnectorExtension() {\n+\t\tfinal IConnectionDescriptor descriptor = this.connection.getConnectionDescriptor();\n+\t\ttry {\n+\t\t\treturn new ProtocolInitializer().newJMXConnector(descriptor.createJMXServiceURL(),\n+\t\t\t\t\tdescriptor.getEnvironment());\n+\t\t} catch (IOException e) {\n+\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.INFO, \"Error attempting JMX protocol extensions\", e);\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ServerHandle.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+\t\t<module>org.openjdk.jmc.jolokia<\/module>\n","filename":"application\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\/test\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/json\/simple\/*\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"target\/test-classes\"\/>\n+<\/classpath>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/.classpath","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Jolokia plugin test\n+Bundle-SymbolicName: org.openjdk.jmc.jolokia.test;singleton:=true\n+Bundle-Version: 9.0.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Bundle-ActivationPolicy: lazy\n+Require-Bundle: org.junit,\n+ org.openjdk.jmc.jolokia,\n+ org.eclipse.osgi,\n+ org.eclipse.ui.workbench,\n+ org.openjdk.jmc.rjmx,\n+ org.eclipse.ui,\n+ org.awaitility,\n+ org.hamcrest\n+Automatic-Module-Name: org.openjdk.jmc.jolokia.test\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/META-INF\/MANIFEST.MF","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -2,1 +2,2 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2024, Kantega AS. All rights reserved.\n@@ -32,1 +33,0 @@\n-#\n@@ -36,3 +36,1 @@\n-bin.includes = META-INF\/,\\\n-               .\n-pde.match.rule.bundle=compatible\n+bin.includes = META-INF\/,.\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/build.properties","additions":3,"deletions":5,"binary":false,"changes":8,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/build.properties","status":"copied"},{"patch":"@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2024, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application.tests<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.jolokia.test<\/artifactId>\n+\t<packaging>eclipse-test-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/..\/configuration<\/jmc.config.path>\n+\t\t<jolokia.agent.version>1.7.2<\/jolokia.agent.version>\n+\t<\/properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t<version>4.0.0<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n+\t\t\t<version>${jolokia.agent.version}<\/version>\n+\t\t\t<scope>test<\/scope>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-surefire-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<includes>${test.includes}<\/includes>\n+\t\t\t\t\t<!-- Start jolokia on a random free port to avoid requiring specific ports to run test -->\n+\t\t\t\t\t<!-- Agent version may differ from client version, in fact it may be a good test -->\n+\t\t\t\t\t<argLine>\n+\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.agent.version}\/jolokia-jvm-${jolokia.agent.version}.jar=port=0,discover=true<\/argLine>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n+\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanAttributeInfo;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.OperationsException;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.awaitility.Awaitility;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\/**\n+ * Tests that JMX connections done with JmcJolokiaJmxConnectionProvider are functional\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public class JolokiaTest {\n+\n+\tstatic String jolokiaUrl;\n+\n+\tprivate static Set<String> unsafeAttributes = new HashSet<>(\n+\t\t\tArrays.asList(\"BootClassPath\", \"UsageThreshold\", \"UsageThresholdExceeded\", \"UsageThresholdCount\",\n+\t\t\t\t\t\"CollectionUsageThreshold\", \"CollectionUsageThresholdExceeded\", \"CollectionUsageThresholdCount\"));\n+\n+\tprivate static MBeanServerConnection jolokiaConnection;\n+\n+\t@BeforeClass\n+\tpublic static void startServer() throws Exception {\n+\t\t\/\/ wait for Jolokia to be ready before commencing tests\n+\t\tAwaitility.await().atMost(Duration.ofSeconds(15))\/\/Note: hard code property to avoid module dependency on agent\n+\t\t\t\t.until(() -> (jolokiaUrl = System.getProperty(\"jolokia.agent\")) != null);\n+\t\tjolokiaConnection = getJolokiaMBeanConnector();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testReadAttributesOverJolokia() throws MalformedURLException, IOException, OperationsException,\n+\t\t\tIntrospectionException, AttributeNotFoundException, ReflectionException, MBeanException {\n+\t\tfor (ObjectName objectName : jolokiaConnection.queryNames(null, null)) {\n+\t\t\tfor (MBeanAttributeInfo attributeInfo : getJolokiaMBeanConnector().getMBeanInfo(objectName)\n+\t\t\t\t\t.getAttributes()) {\n+\t\t\t\tif (!unsafeAttributes.contains(attributeInfo.getName())) {\n+\t\t\t\t\tSystem.out.println(\"Getting attribute \" + objectName + \"\/\" + attributeInfo.getName());\n+\t\t\t\t\tgetJolokiaMBeanConnector().getAttribute(objectName, attributeInfo.getName());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n+\t\t\tReflectionException, MalformedURLException, IOException {\n+\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n+\t}\n+\n+\t@Test\n+\tpublic void testWriteAttribute()\n+\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n+\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n+\t\tObjectName objectName = new ObjectName(\"jolokia:type=Config\");\n+\t\tString attribute = \"Debug\";\n+\t\tjolokiaConnection.setAttribute(objectName, new Attribute(attribute, true));\n+\t\tAssert.assertEquals(true, jolokiaConnection.getAttribute(objectName, attribute));\n+\n+\t}\n+\n+\tprivate static MBeanServerConnection getJolokiaMBeanConnector() throws IOException, MalformedURLException {\n+\t\tJMXConnector connector = new JmcJolokiaJmxConnectionProvider().newJMXConnector(\n+\t\t\t\tnew JMXServiceURL(jolokiaUrl.replace(\"http\", \"service:jmx:jolokia\")), Collections.emptyMap());\n+\t\tconnector.connect();\n+\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n+\t\treturn connection;\n+\t}\n+\n+}\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/src\/test\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+\t\t<module>org.openjdk.jmc.jolokia.test<\/module>\n","filename":"application\/tests\/pom.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -591,1 +591,4 @@\n-\t\tm_jmxc = JMXConnectorFactory.newJMXConnector(serviceURL, env);\n+\t\tif (m_jmxc == null) {\n+\t\t\t\/\/This will use Java's standard connector, which will not take JMC extensions into account\n+\t\t\tm_jmxc = JMXConnectorFactory.newJMXConnector(serviceURL, env);\n+\t\t}\n@@ -616,0 +619,4 @@\n+\tpublic void specifyConnector(final JMXConnector specificConnector) {\n+\t\tthis.m_jmxc = specificConnector;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/RJMXConnection.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-09\/platform-definition-2022-09.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-12\/platform-definition-2022-12.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-03\/platform-definition-2023-03.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-09\/platform-definition-2023-09.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-12\/platform-definition-2023-12.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+\t\t<jolokia.version>2.0.2<\/jolokia.version>\n+\t\t<wiremock.version>2.27.2<\/wiremock.version>\n@@ -142,0 +144,8 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-client-jmx-adapter:jar:standalone:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>com.github.tomakehurst:wiremock-standalone:${wiremock.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}