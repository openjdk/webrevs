{"files":[{"patch":"@@ -247,0 +247,7 @@\n+   <plugin\n+         id=\"org.openjdk.jmc.kubernetes\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+\n","filename":"application\/org.openjdk.jmc.feature.core\/feature.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-\t\t\t\t() -> new TreeSet<ServerDetector>(Arrays.asList(ServerDetector.FALLBACK)));\n+\t\t\t\tlogHandleer -> new TreeSet<ServerDetector>(Arrays.asList(ServerDetector.FALLBACK)));\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,19 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: %Bundle-Name\n+Bundle-SymbolicName: org.openjdk.jmc.kubernetes;singleton:=true\n+Bundle-Version: 10.0.0.qualifier\n+Automatic-Module-Name: org.openjdk.jmc.kubernetes\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Require-Bundle: org.openjdk.jmc.jolokia,\n+ org.eclipse.core.runtime,\n+ org.eclipse.ui,\n+ org.openjdk.jmc.ui,\n+ org.eclipse.swt,\n+ org.jolokia.client-kubernetes.standalone;bundle-version=\"2.2.2\",\n+ org.openjdk.jmc.rjmx\n+Export-Package: org.openjdk.jmc.kubernetes,\n+ org.openjdk.jmc.kubernetes.preferences\n+Import-Package: org.apache.commons.logging;version=\"1.2.0\"\n+Bundle-Activator: org.openjdk.jmc.kubernetes.JmcKubernetesPlugin\n+Bundle-ActivationPolicy: lazy\n","filename":"application\/org.openjdk.jmc.kubernetes\/META-INF\/MANIFEST.MF","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+#Properties file for org.openjdk.jmc.kubernetes\n+page.name = Kubernetes\n+Bundle-Name = Kubernetes JMC extensions\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.kubernetes\/OSGI-INF\/l10n\/bundle.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               OSGI-INF\/,\\\n+               .,\\\n+               OSGI-INF\/l10n\/bundle.properties,\\\n+               plugin.xml\n","filename":"application\/org.openjdk.jmc.kubernetes\/build.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2025, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+--><?eclipse version=\"3.4\"?>\n+<plugin>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.jmxProtocols\">\n+      <client\n+            class=\"org.openjdk.jmc.kubernetes.JmcKubernetesJmxConnectionProvider\" protocol=\"kubernetes\">\n+            <sysproperty name=\"running.in.jmc\" include=\"true\" \/>\n+      <\/client>\n+   <\/extension>\n+      <extension\n+            point=\"org.eclipse.ui.preferencePages\">\n+         <page\n+               category=\"org.openjdk.jmc.browser.preferences.BrowserPreferencePage\"\n+               class=\"org.openjdk.jmc.kubernetes.preferences.JmcKubernetesPreferenceForm\"\n+               id=\"org.openjdk.jmc.kubernetes.preferences.JmcKubernetesPreferences\"\n+               name=\"%page.name\">\n+         <\/page>\n+      <\/extension>\n+      <extension\n+            point=\"org.eclipse.core.runtime.preferences\">\n+         <initializer\n+               class=\"org.openjdk.jmc.kubernetes.preferences.PreferenceInitializer\">\n+         <\/initializer>\n+      <\/extension>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.descriptorProvider\">\n+      <provider\n+            class=\"org.openjdk.jmc.kubernetes.KubernetesDiscoveryListener\">\n+      <\/provider>\n+   <\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.kubernetes\/plugin.xml","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -3,2 +3,2 @@\n-   Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n-   Copyright (c) 2024, 2025, Kantega AS. All rights reserved.\n+   Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2025, Kantega AS. All rights reserved.\n@@ -9,1 +9,1 @@\n-   v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n@@ -44,1 +44,1 @@\n-\t<artifactId>org.openjdk.jmc.jolokia<\/artifactId>\n+\t<artifactId>org.openjdk.jmc.kubernetes<\/artifactId>\n","filename":"application\/org.openjdk.jmc.kubernetes\/pom.xml","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.jolokia\/pom.xml","status":"copied"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.regex.Pattern;\n+\n+import javax.management.InstanceNotFoundException;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.exception.J4pException;\n+import org.jolokia.client.exception.J4pRemoteException;\n+import org.jolokia.client.request.J4pResponse;\n+import org.openjdk.jmc.jolokia.JmcJolokiaJmxConnection;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+\n+\/**\n+ * Jolokia based MBeanServerConnector tailored for JMC needs\n+ *\/\n+public class JmcKubernetesJmxConnection extends JmcJolokiaJmxConnection {\n+\n+\tstatic final Collection<Pattern> DISCONNECT_SIGNS = Arrays.asList(Pattern.compile(\"Error: pods \\\".+\\\" not found\")); \/\/$NON-NLS-1$\n+\n+\tpublic JmcKubernetesJmxConnection(J4pClient client) throws IOException {\n+\t\tsuper(client);\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Override\n+\tprotected J4pResponse unwrapException(J4pException e) throws IOException, InstanceNotFoundException {\n+\t\t\/\/ recognize signs of disconnect and signal to the application for better\n+\t\t\/\/ handling\n+\t\tif (isKnownDisconnectException(e)) {\n+\t\t\tthrow new ConnectionException(e.getMessage());\n+\t\t} else {\n+\t\t\treturn super.unwrapException(e);\n+\t\t}\n+\t}\n+\n+\tprivate boolean isKnownDisconnectException(J4pException e) {\n+\t\tif (!(e instanceof J4pRemoteException)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!\"io.fabric8.kubernetes.client.KubernetesClientException\".equals(((J4pRemoteException) e).getErrorType())) { \/\/$NON-NLS-1$\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn DISCONNECT_SIGNS.stream().anyMatch(pattern -> pattern.matcher(e.getMessage()).matches());\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnection.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorProvider;\n+import javax.management.remote.JMXServiceURL;\n+\n+\/**\n+ * This {@code JMXConnectionProvider} handles the \"kubernetes\" protocol.\n+ *\/\n+public class JmcKubernetesJmxConnectionProvider implements JMXConnectorProvider {\n+\t@Override\n+\tpublic JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String, ?> environment) throws IOException {\n+\t\tif (!\"kubernetes\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Kubernetes connections\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcKubernetesJmxConnector(serviceURL, environment);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnectionProvider.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+\n+public class JmcKubernetesJmxConnector extends KubernetesJmxConnector {\n+\n+\tpublic JmcKubernetesJmxConnector(JMXServiceURL serviceURL, Map<String, ?> environment) {\n+\t\tsuper(serviceURL, environment);\n+\t}\n+\n+\t@Override\n+\tprotected RemoteJmxAdapter createAdapter(J4pClient client) throws IOException {\n+\t\treturn new JmcKubernetesJmxConnection(client);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnector.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import org.eclipse.core.runtime.Platform;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+import org.openjdk.jmc.kubernetes.preferences.PreferenceConstants;\n+import org.openjdk.jmc.ui.MCAbstractUIPlugin;\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.PersistentCredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n+import org.openjdk.jmc.common.security.SecurityManagerFactory;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+\n+public class JmcKubernetesPlugin extends MCAbstractUIPlugin\n+\t\timplements KubernetesScanningParameters, PreferenceConstants {\n+\n+\tpublic final static String PLUGIN_ID = \"org.openjdk.jmc.kubernetes\"; \/\/$NON-NLS-1$\n+\n+\t\/\/ The shared instance.\n+\tprivate static JmcKubernetesPlugin plugin;\n+\n+\t\/**\n+\t * The constructor.\n+\t *\/\n+\tpublic JmcKubernetesPlugin() {\n+\t\tsuper(PLUGIN_ID);\n+\t\tplugin = this;\n+\t}\n+\n+\t\/**\n+\t * @return the shared instance.\n+\t *\/\n+\tpublic static JmcKubernetesPlugin getDefault() {\n+\t\treturn plugin;\n+\t}\n+\n+\tprivate void ensureNeededCredentialsAreUnlocked() {\n+\t\tif (getScanningCredentials() != null && SecurityManagerFactory.getSecurityManager().isLocked()) {\n+\t\t\tDisplayToolkit.safeAsyncExec(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\tSecurityManagerFactory.getSecurityManager().unlock();\n+\t\t\t\t} catch (SecurityException e) {\n+\t\t\t\t\tlogError(\"Error unlocking credentials needed for kubernetes scanning\", e);\/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean scanForInstances() {\n+\t\t\/\/ If credentials are locked and credentials are required, the scanner thread\n+\t\t\/\/ will get hung\n+\t\t\/\/ therefore await credentials store to be unlocked before proceeding to scan\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN_FOR_INSTANCES)\n+\t\t\t\t&& (getScanningCredentials() == null || !SecurityManagerFactory.getSecurityManager().isLocked());\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean scanAllContexts() {\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN_ALL_CONTEXTS);\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaPort() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PORT);\n+\t}\n+\n+\tprivate PersistentCredentials getScanningCredentials() {\n+\t\tString key = getPreferenceStore().getString(P_CREDENTIALS_KEY);\n+\t\treturn key == null || key.length() == 0 ? null : new PersistentCredentials(key);\n+\t}\n+\n+\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n+\t\tPersistentCredentials credentials = new PersistentCredentials(username, password, \"kubernetes\");\/\/$NON-NLS-1$\n+\t\tgetPreferenceStore().setValue(P_CREDENTIALS_KEY, credentials.getExportedId());\n+\t\treturn credentials;\n+\t}\n+\n+\t@Override\n+\tpublic String username() throws SecurityException {\n+\t\tfinal PersistentCredentials cred = getScanningCredentials();\n+\t\tif (cred == null) {\n+\t\t\treturn \"\";\/\/$NON-NLS-1$\n+\t\t} else {\n+\t\t\treturn cred.getUsername();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String password() throws SecurityException {\n+\t\tfinal PersistentCredentials cred = getScanningCredentials();\n+\t\tif (cred == null) {\n+\t\t\treturn \"\";\/\/$NON-NLS-1$\n+\t\t} else {\n+\t\t\treturn cred.getPassword();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaPath() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PATH);\n+\t}\n+\n+\t@Override\n+\tpublic String requireLabel() {\n+\t\treturn getPreferenceStore().getString(P_REQUIRE_LABEL);\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaProtocol() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PROTOCOL);\n+\t}\n+\n+\t@Override\n+\tpublic void logError(String message, Throwable error) {\n+\t\tif (getPreferenceStore().getBoolean(P_LOG_ERRORS)) {\n+\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass())).error(message, error);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void start(BundleContext context) throws Exception {\n+\t\tsuper.start(context);\n+\t\tthis.ensureNeededCredentialsAreUnlocked();\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,336 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+import org.jolokia.server.core.http.security.AuthorizationHeaderParser;\n+import org.jolokia.server.core.util.Base64Util;\n+import org.openjdk.jmc.common.security.SecurityException;\n+import org.openjdk.jmc.jolokia.AbstractCachedDescriptorProvider;\n+import org.openjdk.jmc.jolokia.ServerConnectionDescriptor;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+\n+import io.fabric8.kubernetes.api.model.NamedContext;\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.PodList;\n+import io.fabric8.kubernetes.api.model.Secret;\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.dsl.AnyNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.PodResource;\n+import io.fabric8.kubernetes.client.internal.KubeConfigUtils;\n+import io.fabric8.kubernetes.client.utils.Utils;\n+\n+\/**\n+ * This class attempts to connect to JVMs in pods running in kubernetes in a background thread.\n+ * Enablement and parameters for the scanning is given by user preferences.\n+ *\/\n+public class KubernetesDiscoveryListener extends AbstractCachedDescriptorProvider {\n+\n+\tprivate final static Pattern SECRET_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/secret\/(?<secretName>[^\/]+)\/(?<itemName>[^\\\\}]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Pattern ATTRIBUTE_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/annotation\/(?<annotationName>[^\/]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Set<String> VALID_JOLOKIA_PROTOCOLS = new HashSet<>(Arrays.asList(\"http\", \"https\")); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\n+\tKubernetesScanningParameters settings;\n+\n+\tpublic KubernetesDiscoveryListener() {\n+\t\tthis(JmcKubernetesPlugin.getDefault());\n+\t}\n+\n+\t\/\/Public constructor in order for test plugin to be able to rig tests in an easier manner\n+\tpublic KubernetesDiscoveryListener(KubernetesScanningParameters parameters) {\n+\t\tthis.settings = parameters;\n+\t}\n+\n+\tpublic final String getDescription() {\n+\t\treturn Messages.KubernetesDiscoveryListener_Description;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"kubernetes\"; \/\/$NON-NLS-1$\n+\t}\n+\n+\tboolean notEmpty(String value) {\n+\t\treturn value != null && value.length() > 0;\n+\t}\n+\n+\tprivate List<String> contexts;\n+\tprivate long contextsCached = 0L;\n+\n+\tprivate List<String> allContexts() throws IOException {\n+\t\tfinal String path = Utils.getSystemPropertyOrEnvVar(Config.KUBERNETES_KUBECONFIG_FILE,\n+\t\t\t\tnew File(System.getProperty(\"user.home\"), \".kube\" + File.separator + \"config\").toString()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\tFile configPath = new File(path);\n+\t\tif (contexts != null && contextsCached > configPath.lastModified()) {\/\/ the YAML parsing is soo incredibly\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ sloow, hence cache context names for\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ later\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ runs\n+\t\t\treturn contexts;\n+\t\t}\n+\t\t\/\/ reload config if kubeconfig has been modified since we cached the config\n+\t\tio.fabric8.kubernetes.api.model.Config config = KubeConfigUtils.parseConfig(configPath);\n+\t\tthis.contextsCached = System.currentTimeMillis();\n+\t\tKubernetesJmxConnector.resetKubernetesConfig();\n+\t\treturn contexts = config.getContexts().stream().map(NamedContext::getName).collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tprotected Map<String, ServerConnectionDescriptor> discoverJvms() {\n+\t\treturn scanForJvms();\n+\t}\n+\n+\tMap<String, ServerConnectionDescriptor> scanForJvms() {\n+\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n+\t\tif (!isEnabled()) {\n+\t\t\treturn found;\n+\t\t}\n+\t\tboolean hasScanned = false;\n+\n+\t\tif (settings.scanAllContexts()) {\n+\t\t\ttry {\n+\t\t\t\tfor (final String context : allContexts()) {\n+\t\t\t\t\thasScanned = true;\n+\t\t\t\t\tscanContext(found, settings, context);\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tsettings.logError(Messages.KubernetesDiscoveryListener_UnableToFindContexts, e);\n+\t\t\t}\n+\t\t}\n+\t\tif (!hasScanned) {\/\/ scan default context\n+\t\t\treturn scanContext(found, settings, null);\n+\t\t}\n+\t\treturn found;\n+\t}\n+\n+\tprivate Map<String, ServerConnectionDescriptor> scanContext(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\t\ttry {\n+\t\t\tscanContextUnsafe(found, parameters, context);\n+\t\t} catch (Exception e) {\n+\t\t\tparameters.logError(Messages.KubernetesDiscoveryListener_UnableToScan + context, e);\n+\t\t}\n+\t\treturn found;\n+\t}\n+\n+\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\t\tString pathLabel = parameters.requireLabel();\n+\t\tKubernetesClient client = KubernetesJmxConnector.getApiClient(context);\n+\n+\t\tAnyNamespaceOperation<Pod, PodList, PodResource> query = client.pods().inAnyNamespace();\n+\t\tList<Pod> podList;\n+\t\tboolean hasPathLabel = notEmpty(pathLabel);\n+\t\tif (hasPathLabel) {\n+\t\t\tpodList = query.withLabel(pathLabel).list().getItems();\n+\t\t} else {\n+\t\t\tpodList = query.list().getItems();\n+\t\t}\n+\t\t\/\/ can consider parallelization for big contexts, however since it is the\n+\t\t\/\/ background await the situation a bit\n+\t\tpodList.stream().forEach(pod -> scanPod(found, parameters, context, client, pod));\n+\t\treturn found;\n+\t}\n+\n+\tprivate void scanPod(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context,\n+\t\tKubernetesClient client, Pod pod) {\n+\n+\t\tfinal ObjectMeta metadata = pod.getMetadata();\n+\t\tHashMap<String, String> headers = new HashMap<>();\n+\t\tMap<String, Object> env = new HashMap<>();\n+\t\ttry {\n+\t\t\tif (notEmpty(parameters.username())) {\n+\t\t\t\tif (!notEmpty(parameters.password())) {\n+\t\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_MustProvidePassword);\n+\t\t\t\t}\n+\t\t\t\tauthorize(headers, client, parameters.username(), parameters.password(), metadata.getNamespace(), env);\n+\t\t\t}\n+\t\t} catch (SecurityException e) {\n+\t\t\t\/\/ skipping authorization if anything fails\n+\t\t}\n+\t\tfinal StringBuilder url = new StringBuilder(\"\/api\/\").append(pod.getApiVersion()).append(\"\/namespaces\/\")\n+\t\t\t\t.append(metadata.getNamespace()).append(\"\/pods\/\");\n+\t\t\/\/ JMX url must be reverse constructed, so that we can connect from the\n+\t\t\/\/ resulting node in the JVM browser\n+\t\tfinal StringBuilder jmxUrl = new StringBuilder(\"service:jmx:kubernetes:\/\/\/\").append(metadata.getNamespace()) \/\/$NON-NLS-1$\n+\t\t\t\t.append('\/');\n+\n+\t\tfinal String protocol = getValueOrAttribute(parameters.jolokiaProtocol(), metadata);\n+\t\tfinal String podName = metadata.getName();\n+\t\tif (notEmpty(protocol)) {\n+\t\t\tif (!VALID_JOLOKIA_PROTOCOLS.contains(protocol)) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_JolokiaProtocol + protocol\n+\t\t\t\t\t\t+ Messages.KubernetesDiscoveryListener_HttpOrHttps);\n+\t\t\t}\n+\t\t\t\/\/ a bit clumsy, need to inject protocol _before_ podname in selflink\n+\t\t\turl.append(protocol).append(':');\n+\t\t\tjmxUrl.append(protocol).append(':');\n+\t\t}\n+\n+\t\tjmxUrl.append(podName);\n+\t\turl.append(podName);\n+\n+\t\tfinal String port = getValueOrAttribute(parameters.jolokiaPort(), metadata);\n+\t\tif (port != null) {\n+\t\t\turl.append(\":\").append(port); \/\/$NON-NLS-1$\n+\t\t\tjmxUrl.append(':').append(port);\n+\t\t}\n+\n+\t\turl.append(\"\/proxy\"); \/\/$NON-NLS-1$\n+\n+\t\tfinal String path = getValueOrAttribute(parameters.jolokiaPath(), metadata);\n+\n+\t\tif (!path.startsWith(\"\/\")) { \/\/$NON-NLS-1$\n+\t\t\turl.append('\/');\n+\t\t\tjmxUrl.append('\/');\n+\t\t}\n+\t\turl.append(path);\n+\t\tjmxUrl.append(path);\n+\n+\t\tif (context != null) {\n+\t\t\tenv.put(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT, context);\n+\t\t}\n+\t\tJ4pClient jvmClient = KubernetesJmxConnector.probeProxyPath(env, client, url, headers);\n+\t\tif (jvmClient != null) {\n+\t\t\tJmcKubernetesJmxConnection connection;\n+\t\t\ttry {\n+\t\t\t\tconnection = new JmcKubernetesJmxConnection(jvmClient);\n+\t\t\t\tJMXServiceURL jmxServiceURL = new JMXServiceURL(jmxUrl.toString());\n+\t\t\t\tKubernetesJvmDescriptor descriptor = new KubernetesJvmDescriptor(metadata, jmxServiceURL, env);\n+\t\t\t\tfound.put(descriptor.getGUID(), descriptor);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tparameters.logError(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n+\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate String getValueOrAttribute(String configValue, ObjectMeta metadata) {\n+\t\tif (notEmpty(configValue)) {\n+\t\t\tMatcher pattern = ATTRIBUTE_PATTERN.matcher(configValue);\n+\t\t\tif (pattern.find()) {\n+\t\t\t\treturn metadata.getAnnotations().get(pattern.group(\"annotationName\")); \/\/$NON-NLS-1$\n+\t\t\t} else {\n+\t\t\t\treturn configValue;\/\/ the default is to use config value as is\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate void authorize(\n+\t\tHashMap<String, String> headers, KubernetesClient client, String username, String password, String namespace,\n+\t\tMap<String, Object> jmxEnv) {\n+\n+\t\tfinal Matcher userNameMatcher = SECRET_PATTERN.matcher(username);\n+\t\tString secretName = null;\n+\t\tMap<String, String> secretValues = null;\n+\t\tif (userNameMatcher.find()) {\n+\t\t\tsecretName = userNameMatcher.group(\"secretName\"); \/\/$NON-NLS-1$\n+\t\t\tsecretValues = findSecret(client, namespace, secretName);\n+\t\t\tusername = secretValues.get(userNameMatcher.group(\"itemName\")); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\tfinal Matcher passwordMatcher = SECRET_PATTERN.matcher(password);\n+\t\tif (passwordMatcher.find()) {\n+\t\t\tif (!secretName.equals(passwordMatcher.group(\"secretName\"))) { \/\/$NON-NLS-1$\n+\t\t\t\tsecretValues = findSecret(client, namespace, passwordMatcher.group(\"secretName\")); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t\tpassword = secretValues.get(passwordMatcher.group(\"itemName\")); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\theaders.put(AuthorizationHeaderParser.JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER,\n+\t\t\t\t\"Basic \" + Base64Util.encode((username + \":\" + password).getBytes())); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] {username, password});\n+\n+\t}\n+\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\tprivate Map<String, String> findSecret(KubernetesClient client, String namespace, String secretName) {\n+\n+\t\tfor (Secret secret : client.secrets().inNamespace(namespace).list().getItems()) {\n+\t\t\tif (secret.getMetadata().getName().equals(secretName)) {\n+\t\t\t\tif (\"kubernetes.io\/basic-auth\".equals(secret.getType())) { \/\/$NON-NLS-1$\n+\t\t\t\t\tMap<String, String> data = secret.getData();\n+\t\t\t\t\tdata.replaceAll((key, value) -> new String(Base64.decodeBase64(value)));\n+\t\t\t\t\treturn data;\n+\t\t\t\t} else if (\"Opaque\".equals(secret.getType())) { \/\/$NON-NLS-1$\n+\t\t\t\t\tfor (Entry<String, String> entry : secret.getData().entrySet()) {\n+\t\t\t\t\t\tif (entry.getKey().endsWith(\".properties\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\t\t\tproperties.load(new ByteArrayInputStream(Base64.decodeBase64(entry.getValue())));\n+\t\t\t\t\t\t\t\treturn (Map) properties;\n+\t\t\t\t\t\t\t} catch (IOException ignore) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\t\tthrow new NoSuchElementException(Messages.KubernetesDiscoveryListener_CouldNotFindSecret + secretName\n+\t\t\t\t+ Messages.KubernetesDiscoveryListener_InNamespace + namespace);\n+\n+\t}\n+\n+\t@Override\n+\tprotected boolean isEnabled() {\n+\t\treturn this.settings.scanForInstances();\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":336,"deletions":0,"binary":false,"changes":336,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+import org.openjdk.jmc.jolokia.ServerConnectionDescriptor;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+\n+public class KubernetesJvmDescriptor implements ServerConnectionDescriptor {\n+\n+\tprivate final ObjectMeta metadata;\n+\tprivate final Map<String, Object> env;\n+\tprivate final JMXServiceURL connectUrl;\n+\n+\tpublic KubernetesJvmDescriptor(ObjectMeta metadata, JMXServiceURL connectUrl, Map<String, Object> env) {\n+\t\tthis.metadata = metadata;\n+\t\tthis.env = env;\n+\t\tthis.connectUrl = connectUrl;\n+\t}\n+\n+\t@Override\n+\tpublic String getGUID() {\n+\t\treturn this.metadata.getName();\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayName() {\n+\t\treturn this.metadata.getName();\n+\t}\n+\n+\t@Override\n+\tpublic JVMDescriptor getJvmInfo() {\n+\t\treturn null;\n+\t}\n+\n+\tpublic String getPath() {\n+\t\tString namespace = metadata.getNamespace();\n+\t\tfinal Object context = this.env.get(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT);\n+\t\tif (context != null) {\n+\t\t\treturn context + \"\/\" + namespace; \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn namespace;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL createJMXServiceURL() throws IOException {\n+\t\treturn this.connectUrl;\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, Object> getEnvironment() {\n+\t\treturn this.env;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL serviceUrl() {\n+\t\treturn this.connectUrl;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesJvmDescriptor.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.kubernetes.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String KubernetesDiscoveryListener_CouldNotFindSecret;\n+\tpublic static String KubernetesDiscoveryListener_Description;\n+\tpublic static String KubernetesDiscoveryListener_ErrConnectingToJvm;\n+\tpublic static String KubernetesDiscoveryListener_HttpOrHttps;\n+\tpublic static String KubernetesDiscoveryListener_InNamespace;\n+\tpublic static String KubernetesDiscoveryListener_JolokiaProtocol;\n+\tpublic static String KubernetesDiscoveryListener_MustProvidePassword;\n+\tpublic static String KubernetesDiscoveryListener_UnableToFindContexts;\n+\tpublic static String KubernetesDiscoveryListener_UnableToScan;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/Messages.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+KubernetesDiscoveryListener_CouldNotFindSecret=Could not find secret named \n+KubernetesDiscoveryListener_Description=List JVM in kubernetes cluster\n+KubernetesDiscoveryListener_ErrConnectingToJvm=Error connecting to JVM in pod\n+KubernetesDiscoveryListener_HttpOrHttps=' must be either 'http' or 'https'\n+KubernetesDiscoveryListener_InNamespace=\\ in namespace \n+KubernetesDiscoveryListener_JolokiaProtocol=Jolokia protocol '\n+KubernetesDiscoveryListener_MustProvidePassword=Password must be specified when username is specified\n+KubernetesDiscoveryListener_UnableToFindContexts=Unable to find all kubernetes contexts\n+KubernetesDiscoveryListener_UnableToScan=Unable to scan kubernetes context \n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/messages.properties","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,192 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import java.util.logging.Level;\n+\n+import org.eclipse.jface.preference.BooleanFieldEditor;\n+import org.eclipse.jface.preference.FieldEditor;\n+import org.eclipse.jface.preference.FieldEditorPreferencePage;\n+import org.eclipse.jface.preference.StringFieldEditor;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.ui.IWorkbench;\n+import org.eclipse.ui.IWorkbenchPreferencePage;\n+import org.openjdk.jmc.common.security.CredentialsNotAvailableException;\n+import org.openjdk.jmc.common.security.SecurityException;\n+import org.openjdk.jmc.kubernetes.JmcKubernetesPlugin;\n+\n+\/**\n+ * This class represents a preference page that is contributed to the Preferences dialog. By\n+ * subclassing <samp>FieldEditorPreferencePage<\/samp>, we can use the field support built into JFace\n+ * that allows us to create a page that is small and knows how to save, restore and apply itself.\n+ * <p>\n+ * This page is used to modify preferences only. They are stored in the preference store that\n+ * belongs to the main plug-in class. That way, preferences can be accessed directly via the\n+ * preference store.\n+ *\/\n+public class JmcKubernetesPreferenceForm extends FieldEditorPreferencePage\n+\t\timplements IWorkbenchPreferencePage, PreferenceConstants {\n+\n+\tprivate Map<Control, Object> dependantControls = new WeakHashMap<>();\n+\tprivate Text userField;\n+\tprivate Text passwordField;\n+\tprivate boolean credentialsDirty;\n+\n+\tpublic JmcKubernetesPreferenceForm() {\n+\t\tsuper(GRID);\n+\t\tsetPreferenceStore(JmcKubernetesPlugin.getDefault().getPreferenceStore());\n+\t\tsetDescription(Messages.JmcKubernetesPreferenceForm_FormDescription);\n+\t}\n+\n+\t\/**\n+\t * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to\n+\t * manipulate various types of preferences. Each field editor knows how to save and restore\n+\t * itself.\n+\t *\/\n+\tpublic void createFieldEditors() {\n+\t\tBooleanFieldEditor mainEnabler = new BooleanFieldEditor(P_SCAN_FOR_INSTANCES,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_ScanForPods, getFieldEditorParent()) {\n+\t\t\t@Override\n+\t\t\tprotected void valueChanged(boolean oldValue, boolean newValue) {\n+\t\t\t\tsuper.valueChanged(oldValue, newValue);\n+\t\t\t\tenableDependantFields(newValue);\n+\t\t\t}\n+\t\t};\n+\t\taddField(mainEnabler);\n+\n+\t\tfinal BooleanFieldEditor scanContextsEditor = new BooleanFieldEditor(P_SCAN_ALL_CONTEXTS,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_AllContexts, getFieldEditorParent());\n+\t\tthis.addDependantField(scanContextsEditor, scanContextsEditor.getDescriptionControl(getFieldEditorParent()));\n+\t\tfinal BooleanFieldEditor logErrors = new BooleanFieldEditor(P_LOG_ERRORS,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_LogErrorsLabel, getFieldEditorParent());\n+\t\tthis.addDependantField(logErrors, logErrors.getDescriptionControl(getFieldEditorParent()));\n+\t\tthis.addTextField(new StringFieldEditor(P_REQUIRE_LABEL, Messages.JmcKubernetesPreferenceForm_RequireLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_LabelToolTip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PATH, Messages.JmcKubernetesPreferenceForm_PathLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_PathTooltip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PORT, Messages.JmcKubernetesPreferenceForm_PortLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_PortTooltip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PROTOCOL, Messages.JmcKubernetesPreferenceForm_ProtocolLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_ProtocolTooltip);\n+\t\tcreateCredentialFields();\n+\t\t\/\/ set initial enablement\n+\t\tenableDependantFields(JmcKubernetesPlugin.getDefault().scanForInstances());\n+\n+\t}\n+\n+\tprivate void createCredentialFields() {\n+\t\tLabel userLabel = new Label(getFieldEditorParent(), SWT.NONE);\n+\t\tuserLabel.setText(Messages.JmcKubernetesPreferenceForm_UsernameLabel);\n+\t\tuserLabel.setLayoutData(new GridData());\n+\t\tthis.userField = new Text(getFieldEditorParent(), SWT.SINGLE | SWT.BORDER);\n+\t\tuserField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\tuserField.setToolTipText(Messages.JmcKubernetesPreferenceForm_UsernameTooltip);\n+\t\tthis.dependantControls.put(userField, null);\n+\n+\t\tLabel passLabel = new Label(getFieldEditorParent(), SWT.NONE);\n+\t\tpassLabel.setText(Messages.JmcKubernetesPreferenceForm_PasswordLabel);\n+\t\tpassLabel.setLayoutData(new GridData());\n+\t\tthis.passwordField = new Text(getFieldEditorParent(), SWT.PASSWORD | SWT.SINGLE | SWT.BORDER);\n+\t\tpasswordField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\tthis.dependantControls.put(passwordField, null);\n+\n+\t\tJmcKubernetesPlugin plugin = JmcKubernetesPlugin.getDefault();\n+\n+\t\ttry {\n+\t\t\tuserField.setText(plugin.username());\n+\t\t\tpasswordField.setText(plugin.password());\n+\t\t} catch (CredentialsNotAvailableException ignore) {\n+\t\t\t\/\/ ignore if credentials are not stored\n+\t\t} catch (SecurityException e) {\n+\t\t\tplugin.getLogger().log(Level.WARNING, \"Could not load kubernetes credentials\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\tModifyListener markCredentials = e -> credentialsDirty = true;\n+\t\tthis.userField.addModifyListener(markCredentials);\n+\t\tthis.passwordField.addModifyListener(markCredentials);\n+\t}\n+\n+\tprivate void addTextField(StringFieldEditor field, String tooltip) {\n+\t\tText textControl = field.getTextControl(getFieldEditorParent());\n+\t\tthis.addDependantField(field, textControl);\n+\t\ttextControl.setToolTipText(tooltip);\n+\t\tfield.getLabelControl(getFieldEditorParent()).setToolTipText(tooltip);\n+\n+\t}\n+\n+\tprivate void addDependantField(FieldEditor field, Control control) {\n+\t\tthis.dependantControls.put(control, null);\n+\t\taddField(field);\n+\t}\n+\n+\tprivate void enableDependantFields(boolean enabled) {\n+\t\tfor (Control field : this.dependantControls.keySet()) {\n+\t\t\tfield.setEnabled(enabled);\n+\t\t}\n+\t}\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n+\t *\/\n+\tpublic void init(IWorkbench workbench) {\n+\t}\n+\n+\t@Override\n+\tpublic boolean performOk() {\n+\t\tupdateCredentialsIfApplicable();\n+\t\treturn super.performOk();\n+\t}\n+\n+\tprivate void updateCredentialsIfApplicable() {\n+\t\tif (this.credentialsDirty) {\n+\t\t\ttry {\n+\t\t\t\tJmcKubernetesPlugin.getDefault().storeCredentials(userField.getText(), passwordField.getText());\n+\t\t\t\tthis.credentialsDirty = false;\n+\t\t\t} catch (SecurityException ex) {\n+\t\t\t\tJmcKubernetesPlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\"Could not store kubernetes credentials\", ex); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":192,"deletions":0,"binary":false,"changes":192,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n+\n+public interface KubernetesScanningParameters {\n+\tboolean scanForInstances();\n+\n+\tboolean scanAllContexts();\n+\n+\tString jolokiaPort();\n+\n+\tString username() throws SecurityException;\n+\n+\tString password() throws SecurityException;\n+\n+\tString jolokiaPath();\n+\n+\tString jolokiaProtocol();\n+\n+\tString requireLabel();\n+\n+\tICredentials storeCredentials(String username, String password) throws SecurityException;\n+\n+\tvoid logError(String message, Throwable error);\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.kubernetes.preferences.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String JmcKubernetesPreferenceForm_AllContexts;\n+\tpublic static String JmcKubernetesPreferenceForm_FormDescription;\n+\tpublic static String JmcKubernetesPreferenceForm_LabelToolTip;\n+\tpublic static String JmcKubernetesPreferenceForm_LogErrorsLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PasswordLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PasswordTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_PathLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PathTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_PortLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PortTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_ProtocolLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_ProtocolTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_RequireLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_ScanForPods;\n+\tpublic static String JmcKubernetesPreferenceForm_UsernameTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_UsernameLabel;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/Messages.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+\/**\n+ * Constant definitions for plug-in preferences\n+ *\/\n+public interface PreferenceConstants {\n+\n+\tpublic static final String P_SCAN_FOR_INSTANCES = \"scanForInstances\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_SCAN_ALL_CONTEXTS = \"scanAllContexts\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_LOG_ERRORS = \"logErrors\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_REQUIRE_LABEL = \"requireLabel\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PATH = \"jolokiaPath\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PORT = \"jolokiaPort\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PROTOCOL = \"jolokiaProtocol\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_CREDENTIALS_KEY = \"kubernetes.scanning.credentials\"; \/\/$NON-NLS-1$\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceConstants.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;\n+import org.eclipse.jface.preference.IPreferenceStore;\n+import org.openjdk.jmc.kubernetes.JmcKubernetesPlugin;\n+\n+\/**\n+ * Class used to initialize default preference values.\n+ *\/\n+public class PreferenceInitializer extends AbstractPreferenceInitializer implements PreferenceConstants {\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n+\t *\/\n+\tpublic void initializeDefaultPreferences() {\n+\t\tIPreferenceStore store = JmcKubernetesPlugin.getDefault().getPreferenceStore();\n+\t\tstore.setDefault(P_SCAN_FOR_INSTANCES, false);\n+\t\tstore.setDefault(P_SCAN_ALL_CONTEXTS, false);\n+\t\tstore.setDefault(P_REQUIRE_LABEL, \"jolokia\"); \/\/$NON-NLS-1$\n+\t\tstore.setDefault(P_JOLOKIA_PATH, \"\/jolokia\/\"); \/\/$NON-NLS-1$\n+\t\tstore.setDefault(P_JOLOKIA_PORT, \"8778\"); \/\/$NON-NLS-1$\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceInitializer.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+JmcKubernetesPreferenceForm_AllContexts=Scan pods from all locally configured &contexts, if false: only scan the current contexts\n+JmcKubernetesPreferenceForm_FormDescription=Options that allows you to scan kubernetes for JVMs running Jolokia\\\n+\\n\\nThe Kubernetes Proxy API will be used to attempt to access Jolokia like this (parenthesis denote optional components): \\\n+\\n\\n$kubernetesBaseUrl\/api\/v1\/namespaces\/podNamespace\/pods\/(jolokiaProtocol:)podname(:jolokiaPort)\/proxy\/jolokiaPath\\n\\n\n+JmcKubernetesPreferenceForm_LabelToolTip=Only attempt to connect to pods with this label set, leave empty to try to scan all pods\n+JmcKubernetesPreferenceForm_LogErrorsLabel=Log errors during scanning. Aids in troubleshooting but may generate some background noise.\n+JmcKubernetesPreferenceForm_PasswordLabel=Require pass&word\n+JmcKubernetesPreferenceForm_PasswordTooltip=Password , alternatively use ${kubernetes\/secret\/secretName\/secretItem} where the secret is in the same namespace as the pod and the type is either kubernetes.io\/basic-auth or Opaque with java.util.Properties compatible values\n+JmcKubernetesPreferenceForm_PathLabel=Jolokia &path in pods\n+JmcKubernetesPreferenceForm_PathTooltip=Use this path for jolokia, or specify ${kubernetes\/annotation\/annotationName} to be able to to get port name from pod metadata annotation of your choice\n+JmcKubernetesPreferenceForm_PortLabel=Jolokia p&ort in pods\n+JmcKubernetesPreferenceForm_PortTooltip=Port to use, leave empty to use default port of Kubernetes proxy, hardcode a port value, or alternatively ${kubernetes\/annotation\/annotationName} to get port name from pod metadata annotation of your choice\n+JmcKubernetesPreferenceForm_ProtocolLabel=Jolokia pro&tocol in pods\n+JmcKubernetesPreferenceForm_ProtocolTooltip=Protocol to use (optional), will infer http if not set, or hardcode to https, or alternatively ${kubernetes\/annotation\/annotationName} to get port name from pod metadata  annotation of your choice\n+JmcKubernetesPreferenceForm_RequireLabel=Require &label to scan pod\n+JmcKubernetesPreferenceForm_ScanForPods=&Scan for kubernetes pods with Jolokia support\n+JmcKubernetesPreferenceForm_UsernameTooltip=Username , alternatively use ${kubernetes\/secret\/secretName\/secretItem} where the secret is in the same namespace as the pod and the type is either kubernetes.io\/basic-auth or Opaque with java.util.Properties compatible values\n+JmcKubernetesPreferenceForm_UsernameLabel=Require &username\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/messages.properties","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -115,0 +115,1 @@\n+\t\t<module>org.openjdk.jmc.kubernetes<\/module>\n","filename":"application\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\t\t<jolokia.agent.version>2.0.2<\/jolokia.agent.version>\n+\t\t<jolokia.agent.version>2.2.2<\/jolokia.agent.version>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-\t\t\t\t() -> new TreeSet<ServerDetector>(Arrays.asList(ServerDetector.FALLBACK)));\n+\t\t\t\tlog -> new TreeSet<>(Arrays.asList(ServerDetector.FALLBACK)));\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/src\/test\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,20 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: RJMX Test\n+Bundle-SymbolicName: org.openjdk.jmc.kubernetes.test;singleton:=true\n+Bundle-Version: 10.0.0.qualifier\n+Import-Package: io.fabric8.kubernetes.api.model\n+Bundle-Vendor: Oracle Corporation\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Bundle-ActivationPolicy: lazy\n+Require-Bundle: org.junit,\n+ org.openjdk.jmc.jolokia,\n+ org.eclipse.osgi;bundle-version=\"3.16.200\",\n+ org.eclipse.ui.workbench,\n+ org.openjdk.jmc.rjmx;bundle-version=\"9.0.0\",\n+ org.eclipse.ui,\n+ org.hamcrest;bundle-version=\"2.1\",\n+ org.openjdk.jmc.kubernetes;bundle-version=\"9.0.0\",\n+ com.github.tomakehurst.wiremock-standalone;bundle-version=\"2.27.2\",\n+ org.awaitility;bundle-version=\"4.0.0\"\n+Automatic-Module-Name: org.openjdk.jmc.jolokia.test\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/META-INF\/MANIFEST.MF","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2024, 2025, Kantega AS. All rights reserved.\n+#  Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2025, Kantega AS. All rights reserved.\n@@ -8,1 +8,1 @@\n-#  v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/build.properties","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/build.properties","status":"copied"},{"patch":"@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2025, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application.uitests<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.kubernetes.test<\/artifactId>\n+\t<packaging>eclipse-test-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/..\/configuration<\/jmc.config.path>\n+\t<\/properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t<version>4.0.0<\/version>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+<\/project>\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/pom.xml","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,313 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.Duration;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClients;\n+import org.awaitility.Awaitility;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.common.jvm.JVMType;\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.InMemoryCredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+\n+\/**\n+ * Test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n+ * to be able to test this in a contained environment, the kubernetes API is mocked with wiremock.\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public class JmcKubernetesTest {\n+\n+\tstatic class TestParameters implements KubernetesScanningParameters {\n+\t\tpublic boolean scanForInstances, scanAllContexts;\n+\t\tpublic String jolokiaPort, jolokiaPath = \"\/jolokia\/\", jolokiaProtocol, requireLabel;\n+\t\tpublic InMemoryCredentials credentials;\n+\n+\t\t@Override\n+\t\tpublic boolean scanForInstances() {\n+\t\t\treturn this.scanForInstances;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean scanAllContexts() {\n+\t\t\treturn this.scanAllContexts;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPort() {\n+\t\t\treturn this.jolokiaPort;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String username() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getUsername();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String password() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getPassword();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPath() {\n+\t\t\treturn this.jolokiaPath;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaProtocol() {\n+\t\t\treturn this.jolokiaProtocol;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String requireLabel() {\n+\t\t\treturn this.requireLabel;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n+\t\t\treturn this.credentials = new InMemoryCredentials(username, password);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void logError(String message, Throwable error) {\n+\t\t\tSystem.out.println(message);\n+\t\t\terror.printStackTrace(System.out);\n+\t\t}\n+\t}\n+\n+\t@ClassRule\n+\tpublic static WireMockRule wiremock = new WireMockRule(\n+\t\t\tWireMockConfiguration.options().extensions(new ResponseTemplateTransformer(false)).port(0));\n+\n+\tstatic final String jolokiaUrl = \"service:jmx:kubernetes:\/\/\/ns1\/pod-abcdef\/jolokia\";\n+\n+\tprivate static MBeanServerConnection jolokiaConnection;\n+\n+\t@BeforeClass\n+\tpublic static void connect() throws Exception {\n+\t\tCloseableHttpResponse configResponse = HttpClients.createDefault()\n+\t\t\t\t.execute(new HttpGet(wiremock.baseUrl() + \"\/mock-kube-config.yml\"));\n+\t\tAssert.assertEquals(configResponse.getStatusLine().getStatusCode(), 200);\n+\t\tFile configFile = File.createTempFile(\"mock-kube-config\", \".yml\");\n+\t\tconfigResponse.getEntity().writeTo(new FileOutputStream(configFile));\n+\t\t\/\/ we set this so the KubernetesDiscoveryListener will work\n+\t\t\/\/Setting taken from: https:\/\/github.com\/fabric8io\/kubernetes-client\/blob\/77a65f7d40f31a5dc37492cd9de3c317c2702fb4\/kubernetes-client-api\/src\/main\/java\/io\/fabric8\/kubernetes\/client\/Config.java#L120, unlikely to change\n+\t\tSystem.setProperty(\"kubeconfig\", configFile.getAbsolutePath());\n+\t\tjolokiaConnection = getKubernetesMBeanConnector();\n+\t}\n+\n+\t@Test\n+\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n+\t\t\tReflectionException, MalformedURLException, IOException {\n+\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadAttribute()\n+\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n+\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n+\t\tMBeanServerConnection jmxConnection = jolokiaConnection;\n+\t\tassertOneSingleAttribute(jmxConnection);\n+\n+\t}\n+\n+\tprivate void assertOneSingleAttribute(MBeanServerConnection jmxConnection) throws MalformedObjectNameException,\n+\t\t\tMBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException, IOException {\n+\t\tObjectName objectName = new ObjectName(\"java.lang:type=Memory\");\n+\t\tString attribute = \"Verbose\";\n+\t\tAssert.assertEquals(false, jmxConnection.getAttribute(objectName, attribute));\n+\t}\n+\n+\t@Before\n+\tpublic void reset() {\n+\t\twiremock.resetAll();\n+\t\twiremock.resetRequests();\n+\t}\n+\n+\tprivate static MBeanServerConnection getKubernetesMBeanConnector() throws IOException, MalformedURLException {\n+\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider().newJMXConnector(new JMXServiceURL(jolokiaUrl),\n+\t\t\t\tCollections.emptyMap());\n+\t\tconnector.connect();\n+\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n+\t\treturn connection;\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithMostlyDefaultSettings() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\t\/\/ Set config so that scanning takes place\n+\t\tparameters.scanForInstances = true;\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPathFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPath = \"${kubernetes\/annotation\/jolokiaPath}\";\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPortFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPort = \"${kubernetes\/annotation\/jolokiaPort}\";\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithBasicAuthFromSecret() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-auth\/username}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-auth\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64.getEncoder().encodeToString(\"admin:admin\".getBytes()))));\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithAuthFromProperties() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-properties\/user}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-properties\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64.getEncoder().encodeToString(\"admin:secret\".getBytes()))));\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithAuthDirectlyFromSettings() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"user\", \"***\");\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64.getEncoder().encodeToString(\"user:***\".getBytes()))));\n+\t}\n+\n+\tprivate void testThatJvmIsFound(TestParameters parameters) throws Exception {\n+\n+\t\tfinal KubernetesDiscoveryListener scanner = new KubernetesDiscoveryListener(parameters);\n+\t\tfinal Map<String, IServerDescriptor> foundVms = new HashMap<>();\n+\t\tIDescriptorListener descriptorListener = new IDescriptorListener() {\n+\t\t\tpublic void onDescriptorDetected(\n+\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\t\tfoundVms.put(serverDescriptor.getGUID(), serverDescriptor);\n+\t\t\t}\n+\n+\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n+\t\t\t\tfoundVms.remove(descriptorId);\n+\t\t\t}\n+\t\t};\n+\t\tscanner.addDescriptorListener(descriptorListener);\n+\n+\t\ttry {\n+\t\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n+\n+\t\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> !foundVms.isEmpty());\n+\t\t\tIServerDescriptor descriptor = foundVms.get(\"pod-abcdef\");\n+\t\t\tAssert.assertNotNull(descriptor);\n+\t\t\tAssert.assertEquals(\n+\t\t\t\t\t\"[JVMDescriptor] Java command: \/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090 PID: 88774\",\n+\t\t\t\t\tdescriptor.getJvmInfo().toString());\n+\t\t\tAssert.assertEquals(JVMType.HOTSPOT, descriptor.getJvmInfo().getJvmType());\n+\t\t\tAssert.assertEquals(\"18.0.1\", descriptor.getJvmInfo().getJavaVersion());\n+\t\t\tAssert.assertTrue(descriptor instanceof IConnectionDescriptor);\n+\t\t\tIConnectionDescriptor connectDescriptor = (IConnectionDescriptor) descriptor;\n+\t\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider()\n+\t\t\t\t\t.newJMXConnector(connectDescriptor.createJMXServiceURL(), connectDescriptor.getEnvironment());\n+\t\t\tconnector.connect();\n+\t\t\tassertOneSingleAttribute(connector.getMBeanServerConnection());\n+\n+\t\t} finally {\n+\t\t\t\/\/ Tell scanner thread to exit\n+\t\t\tscanner.shutdown();\n+\t\t}\n+\t}\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":313,"deletions":0,"binary":false,"changes":313,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+   \"request\" : {\n+      \"attribute\" : \"Verbose\",\n+      \"mbean\" : \"java.lang:type=Memory\",\n+      \"type\" : \"read\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658563869,\n+   \"value\" : false\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-attribute.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"data\": {\n+        \"password\": \"YWRtaW4=\",\n+        \"username\": \"YWRtaW4=\"\n+    },\n+    \"kind\": \"Secret\",\n+    \"metadata\": {\n+        \"annotations\": {\n+            \"kubectl.kubernetes.io\/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Secret\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"jolokia-auth\\\",\\\"namespace\\\":\\\"jfr\\\"},\\\"stringData\\\":{\\\"password\\\":\\\"admin\\\",\\\"username\\\":\\\"admin\\\"},\\\"type\\\":\\\"kubernetes.io\/basic-auth\\\"}\\n\"\n+        },\n+        \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+        \"name\": \"jolokia-auth\",\n+        \"namespace\": \"jfr\",\n+        \"resourceVersion\": \"130\",\n+        \"uid\": \"e1563217-ef08-481d-b2e3-233fa3040b56\"\n+    },\n+    \"type\": \"kubernetes.io\/basic-auth\"\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-basic-auth-secret.json","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+   \"request\" : {\n+      \"mbean\" : \"java.lang:type=Memory\",\n+      \"operation\" : \"gc()\",\n+      \"type\" : \"exec\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658567003,\n+   \"value\" : null\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-exec.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"data\": {\n+        \"jolokia.properties\": \"aG9zdD0wLjAuMC4wCnBhc3N3b3JkPXNlY3JldAp1c2VyPWFkbWluCnBvcnQ9ODc3OApkaXNjb3ZlcnlFbmFibGVkPXRydWUKZGlzY292ZXJ5QWdlbnRVcmw9aHR0cDovLyR7aG9zdH06ODc3OC9qb2xva2lhLwpwb2xpY3lMb2NhdGlvbj1jbGFzc3BhdGg6L0JPT1QtSU5GL2NsYXNzZXMvam9sb2tpYS1hY2Nlc3MueG1s\"\n+    },\n+    \"kind\": \"Secret\",\n+    \"metadata\": {\n+        \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+        \"name\": \"jolokia-properties\",\n+        \"namespace\": \"jfr\",\n+        \"resourceVersion\": \"147\",\n+        \"uid\": \"025bf17a-cff5-46e6-8499-dd9d6de43fa9\"\n+    },\n+    \"type\": \"Opaque\"\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-properties-secret.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+{\n+\t\"request\": {\n+\t\t\"type\": \"version\"\n+\t},\n+\t\"value\": {\n+\t\t\"agent\": \"1.7.1\",\n+\t\t\"protocol\": \"7.2\",\n+\t\t\"config\": {\n+\t\t\t\"listenForHttpService\": \"true\",\n+\t\t\t\"authIgnoreCerts\": \"false\",\n+\t\t\t\"agentId\": \"192.168.1.104-28660-5bd82fed-servlet\",\n+\t\t\t\"debug\": \"false\",\n+\t\t\t\"agentType\": \"servlet\",\n+\t\t\t\"policyLocation\": \"classpath:\\\/jolokia-access.xml\",\n+\t\t\t\"agentContext\": \"\\\/jolokia\",\n+\t\t\t\"serializeException\": \"false\",\n+\t\t\t\"mimeType\": \"text\\\/plain\",\n+\t\t\t\"dispatcherClasses\": \"org.jolokia.http.Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher\",\n+\t\t\t\"authMode\": \"basic\",\n+\t\t\t\"authMatch\": \"any\",\n+\t\t\t\"streaming\": \"true\",\n+\t\t\t\"canonicalNaming\": \"true\",\n+\t\t\t\"historyMaxEntries\": \"10\",\n+\t\t\t\"allowErrorDetails\": \"false\",\n+\t\t\t\"allowDnsReverseLookup\": \"true\",\n+\t\t\t\"realm\": \"jolokia\",\n+\t\t\t\"includeStackTrace\": \"false\",\n+\t\t\t\"restrictorClass\": \"io.hawt.system.RBACRestrictor\",\n+\t\t\t\"mbeanQualifier\": \"qualifier=hawtio\",\n+\t\t\t\"useRestrictorService\": \"false\",\n+\t\t\t\"debugMaxEntries\": \"100\"\n+\t\t},\n+\t\t\"info\": {\n+\t\t\t\"product\": \"jetty\",\n+\t\t\t\"vendor\": \"Eclipse\",\n+\t\t\t\"version\": \"9.4.z-SNAPSHOT\"\n+\t\t}\n+\t},\n+\t\"timestamp\": 1658556959,\n+\t\"status\": 200\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-version.json","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+{\n+   \"request\" : {\n+      \"path\" : \"java.lang\/type=Memory\",\n+      \"type\" : \"list\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658566168,\n+   \"value\" : {\n+      \"attr\" : {\n+         \"HeapMemoryUsage\" : {\n+            \"desc\" : \"HeapMemoryUsage\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.CompositeData\"\n+         },\n+         \"NonHeapMemoryUsage\" : {\n+            \"desc\" : \"NonHeapMemoryUsage\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.CompositeData\"\n+         },\n+         \"ObjectName\" : {\n+            \"desc\" : \"ObjectName\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.ObjectName\"\n+         },\n+         \"ObjectPendingFinalizationCount\" : {\n+            \"desc\" : \"ObjectPendingFinalizationCount\",\n+            \"rw\" : false,\n+            \"type\" : \"int\"\n+         },\n+         \"Verbose\" : {\n+            \"desc\" : \"Verbose\",\n+            \"rw\" : true,\n+            \"type\" : \"boolean\"\n+         }\n+      },\n+      \"class\" : \"sun.management.MemoryImpl\",\n+      \"desc\" : \"Information on the management interface of the MBean\",\n+      \"op\" : {\n+         \"gc\" : {\n+            \"args\" : [],\n+            \"desc\" : \"gc\",\n+            \"ret\" : \"void\"\n+         }\n+      }\n+   }\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/memory-list.json","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+apiVersion: v1\n+clusters:\n+- cluster:\n+    server: {{request.baseUrl}}\/\n+  name: test\n+contexts:\n+- context:\n+    cluster: test\n+    user: test\n+  name: test\n+current-context: test\n+kind: Config\n+preferences: {}\n+users:\n+- name: test\n+  user:\n+    token: foobar\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/mock-kube-config.yml","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+{\n+\t\"metadata\": {\n+\t\t\"clusterName\": \"test\",\n+\t\t\"labels\": {\n+\t\t\t\"jolokia\": true\n+\t\t},\n+\t\t\"name\": \"pod-abcdef\",\n+\t\t\"namespace\": \"ns1\",\n+\t\t\"selfLink\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/pod.json","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+{\n+\t\"items\": [\n+\t\t{\n+\t\t\t\"metadata\": {\n+\t\t\t\t\"clusterName\": \"test\",\n+\t\t\t\t\"labels\": {\n+\t\t\t\t\t\"jolokia\": true\n+\t\t\t\t},\n+\t\t\t\t\"annotations\": {\n+\t\t\t\t\t\"jolokiaPort\": 8778,\n+\t\t\t\t\t\"jolokiaPath\": \"jolokia\"\n+\t\t\t\t},\n+\t\t\t\t\"name\": \"pod-abcdef\",\n+\t\t\t\t\"namespace\": \"ns1\",\n+\t\t\t\t\"selfLink\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t\t\t}\n+\t\t}\n+\t]\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/pods.json","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+{\n+   \"request\" : {\n+      \"path\" : \"java.lang\/type=Runtime\",\n+      \"type\" : \"list\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658564737,\n+   \"value\" : {\n+      \"attr\" : {\n+         \"BootClassPath\" : {\n+            \"desc\" : \"BootClassPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"BootClassPathSupported\" : {\n+            \"desc\" : \"BootClassPathSupported\",\n+            \"rw\" : false,\n+            \"type\" : \"boolean\"\n+         },\n+         \"ClassPath\" : {\n+            \"desc\" : \"ClassPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"InputArguments\" : {\n+            \"desc\" : \"InputArguments\",\n+            \"rw\" : false,\n+            \"type\" : \"[Ljava.lang.String;\"\n+         },\n+         \"LibraryPath\" : {\n+            \"desc\" : \"LibraryPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"ManagementSpecVersion\" : {\n+            \"desc\" : \"ManagementSpecVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"Name\" : {\n+            \"desc\" : \"Name\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"ObjectName\" : {\n+            \"desc\" : \"ObjectName\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.ObjectName\"\n+         },\n+         \"Pid\" : {\n+            \"desc\" : \"Pid\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"SpecName\" : {\n+            \"desc\" : \"SpecName\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"SpecVendor\" : {\n+            \"desc\" : \"SpecVendor\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"SpecVersion\" : {\n+            \"desc\" : \"SpecVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"StartTime\" : {\n+            \"desc\" : \"StartTime\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"SystemProperties\" : {\n+            \"desc\" : \"SystemProperties\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.TabularData\"\n+         },\n+         \"Uptime\" : {\n+            \"desc\" : \"Uptime\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"VmName\" : {\n+            \"desc\" : \"VmName\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"VmVendor\" : {\n+            \"desc\" : \"VmVendor\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"VmVersion\" : {\n+            \"desc\" : \"VmVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         }\n+      },\n+      \"class\" : \"sun.management.RuntimeImpl\",\n+      \"desc\" : \"Information on the management interface of the MBean\"\n+   }\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/runtime-list.json","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"items\": [\n+        {\n+            \"apiVersion\": \"v1\",\n+            \"data\": {\n+                \"password\": \"YWRtaW4=\",\n+                \"username\": \"YWRtaW4=\"\n+            },\n+            \"kind\": \"Secret\",\n+            \"metadata\": {\n+                \"annotations\": {\n+                    \"kubectl.kubernetes.io\/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Secret\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"jolokia-auth\\\",\\\"namespace\\\":\\\"ns1\\\"},\\\"stringData\\\":{\\\"password\\\":\\\"admin\\\",\\\"username\\\":\\\"admin\\\"},\\\"type\\\":\\\"kubernetes.io\/basic-auth\\\"}\\n\"\n+                },\n+                \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+                \"name\": \"jolokia-auth\",\n+                \"namespace\": \"ns1\",\n+                \"resourceVersion\": \"130\",\n+                \"uid\": \"e1563217-ef08-481d-b2e3-233fa3040b56\"\n+            },\n+            \"type\": \"kubernetes.io\/basic-auth\"\n+        },\n+        {\n+            \"apiVersion\": \"v1\",\n+            \"data\": {\n+                \"jolokia.properties\": \"aG9zdD0wLjAuMC4wCnBhc3N3b3JkPXNlY3JldAp1c2VyPWFkbWluCnBvcnQ9ODc3OApkaXNjb3ZlcnlFbmFibGVkPXRydWUKZGlzY292ZXJ5QWdlbnRVcmw9aHR0cDovLyR7aG9zdH06ODc3OC9qb2xva2lhLwpwb2xpY3lMb2NhdGlvbj1jbGFzc3BhdGg6L0JPT1QtSU5GL2NsYXNzZXMvam9sb2tpYS1hY2Nlc3MueG1s\"\n+            },\n+            \"kind\": \"Secret\",\n+            \"metadata\": {\n+                \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+                \"name\": \"jolokia-properties\",\n+                \"namespace\": \"ns1\",\n+                \"resourceVersion\": \"147\",\n+                \"uid\": \"025bf17a-cff5-46e6-8499-dd9d6de43fa9\"\n+            },\n+            \"type\": \"Opaque\"\n+        }\n+    ],\n+    \"kind\": \"List\",\n+    \"metadata\": {\n+        \"resourceVersion\": \"\"\n+    }\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/secrets.json","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+[\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"Pid\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : 88774\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"Name\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : \"88774@Martins-MacBook-Pro-2.local\"\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"InputArguments\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : []\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"SystemProperties\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : {\n+         \"apple.awt.application.name\" : \"App\",\n+         \"file.encoding\" : \"UTF-8\",\n+         \"file.separator\" : \"\/\",\n+         \"ftp.nonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"hawtio.authenticationEnabled\" : \"false\",\n+         \"hawtio.redirect.scheme\" : \"http\",\n+         \"hawtio.url\" : \"http:\/\/localhost:9090\/hawtio\",\n+         \"http.nonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"java.class.path\" : \"\/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar\",\n+         \"java.class.version\" : \"62.0\",\n+         \"java.home\" : \"\/Library\/Java\/JavaVirtualMachines\/temurin-18.jdk\/Contents\/Home\",\n+         \"java.io.tmpdir\" : \"\/var\/folders\/1f\/cdm0073x1mj1swnhtw181_4m0000gn\/T\/\",\n+         \"java.library.path\" : \"\/Users\/marska\/Library\/Java\/Extensions:\/Library\/Java\/Extensions:\/Network\/Library\/Java\/Extensions:\/System\/Library\/Java\/Extensions:\/usr\/lib\/java:.\",\n+         \"java.runtime.name\" : \"OpenJDK Runtime Environment\",\n+         \"java.runtime.version\" : \"18.0.1+10\",\n+         \"java.specification.name\" : \"Java Platform API Specification\",\n+         \"java.specification.vendor\" : \"Oracle Corporation\",\n+         \"java.specification.version\" : \"18\",\n+         \"java.vendor\" : \"Eclipse Adoptium\",\n+         \"java.vendor.url\" : \"https:\/\/adoptium.net\/\",\n+         \"java.vendor.url.bug\" : \"https:\/\/github.com\/adoptium\/adoptium-support\/issues\",\n+         \"java.vendor.version\" : \"Temurin-18.0.1+10\",\n+         \"java.version\" : \"18.0.1\",\n+         \"java.version.date\" : \"2022-04-19\",\n+         \"java.vm.compressedOopsMode\" : \"Zero based\",\n+         \"java.vm.info\" : \"mixed mode, sharing\",\n+         \"java.vm.name\" : \"OpenJDK 64-Bit Server VM\",\n+         \"java.vm.specification.name\" : \"Java Virtual Machine Specification\",\n+         \"java.vm.specification.vendor\" : \"Oracle Corporation\",\n+         \"java.vm.specification.version\" : \"18\",\n+         \"java.vm.vendor\" : \"Eclipse Adoptium\",\n+         \"java.vm.version\" : \"18.0.1+10\",\n+         \"jdk.debug\" : \"release\",\n+         \"line.separator\" : \"\\n\",\n+         \"native.encoding\" : \"UTF-8\",\n+         \"org.eclipse.jetty.util.log.class\" : \"org.eclipse.jetty.util.log.Slf4jLog\",\n+         \"os.arch\" : \"x86_64\",\n+         \"os.name\" : \"Mac OS X\",\n+         \"os.version\" : \"11.6.6\",\n+         \"path.separator\" : \":\",\n+         \"socksNonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"sun.arch.data.model\" : \"64\",\n+         \"sun.awt.enableExtraMouseButtons\" : \"true\",\n+         \"sun.boot.library.path\" : \"\/Library\/Java\/JavaVirtualMachines\/temurin-18.jdk\/Contents\/Home\/lib\",\n+         \"sun.cpu.endian\" : \"little\",\n+         \"sun.io.unicode.encoding\" : \"UnicodeBig\",\n+         \"sun.java.command\" : \"\/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090\",\n+         \"sun.java.launcher\" : \"SUN_STANDARD\",\n+         \"sun.jnu.encoding\" : \"UTF-8\",\n+         \"sun.management.compiler\" : \"HotSpot 64-Bit Tiered Compilers\",\n+         \"sun.stderr.encoding\" : \"UTF-8\",\n+         \"sun.stdout.encoding\" : \"UTF-8\",\n+         \"user.country\" : \"NO\",\n+         \"user.dir\" : \"\/Users\/marska\/Documents\/dev\/jmc\/jmc8\/releng\/third-party\",\n+         \"user.home\" : \"\/Users\/marska\",\n+         \"user.language\" : \"nb\",\n+         \"user.name\" : \"marska\",\n+         \"user.timezone\" : \"Asia\/Taipei\"\n+      }\n+   }\n+]\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/system-attributes.json","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPath\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"operation\\\":\\\"gc()\\\",\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"type\\\":\\\"EXEC\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-exec.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-exec.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"path\\\":\\\"java.lang\/type=Memory\\\",\\\"type\\\":\\\"LIST\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"memory-list.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-memory.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"path\\\":\\\"java.lang\/type=Runtime\\\",\\\"type\\\":\\\"LIST\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"runtime-list.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-runtime.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"version\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"VERSION\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe2.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"attribute\\\":\\\"Verbose\\\",\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"type\\\":\\\"READ\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-attribute.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-read-attribute.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"version\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jvm-properties.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/mock-kube-config.yml\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"mock-kube-config.yml\",\n+\t\t\"transformers\": [\n+\t\t\t\"response-template\"\n+\t\t]\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/kube-config.json","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"pod.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/pod.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"urlPath\": \"\/api\/v1\/pods\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"pods.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/pods.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/api\/v1\/namespaces\/ns1\/secrets\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"secrets.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/secrets.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"[{\\\"attribute\\\":\\\"Pid\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"Name\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"InputArguments\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"SystemProperties\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"}]\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"system-attributes.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/uitests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/system-attributes.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -61,0 +61,1 @@\n+\t\t<module>org.openjdk.jmc.kubernetes.test<\/module>\n","filename":"application\/uitests\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n-            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.service.discovery\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.server.core\" version=\"2.0.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.service.discovery\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.server.core\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.client-kubernetes.standalone\" version=\"2.2.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2024-03\/platform-definition-2024-03.target","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n-            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.service.discovery\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.server.core\" version=\"2.0.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.service.discovery\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.server.core\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.client-kubernetes.standalone\" version=\"2.2.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2024-06\/platform-definition-2024-06.target","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n-            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.service.discovery\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.server.core\" version=\"2.0.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.service.discovery\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.server.core\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.client-kubernetes.standalone\" version=\"2.2.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2024-09\/platform-definition-2024-09.target","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,3 +48,4 @@\n-            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.service.discovery\" version=\"2.0.2\"\/>\n-            <unit id=\"org.jolokia.server.core\" version=\"2.0.2\"\/>\n+            <unit id=\"org.jolokia.client-jmx-adapter.standalone\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.service.discovery\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.server.core\" version=\"2.2.2\"\/>\n+            <unit id=\"org.jolokia.client-kubernetes.standalone\" version=\"2.2.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2024-12\/platform-definition-2024-12.target","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-\t\t<jolokia.version>2.0.2<\/jolokia.version>\n+\t\t<jolokia.version>2.2.2<\/jolokia.version>\n@@ -180,0 +180,7 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-client-kubernetes:jar:standalone:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.awaitility:awaitility:4.0.0<\/id>\n+\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}