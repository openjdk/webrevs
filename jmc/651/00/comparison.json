{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.io.IOException;\n+import java.io.InputStream;\n@@ -38,3 +40,1 @@\n-import java.security.Provider;\n-import java.security.Provider.Service;\n-import java.security.Security;\n+\n@@ -45,0 +45,1 @@\n+import java.util.Properties;\n@@ -47,0 +48,1 @@\n+import java.util.logging.Logger;\n@@ -61,0 +63,2 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.ui.common\"); \/\/$NON-NLS-1$\n+\n@@ -68,3 +72,0 @@\n-\tprivate static final String[] WEAK_CIPHERS = new String[] {\"PBEWithMD5AndDES\", \"PBEWithMD5AndTripleDES\",\n-\t\t\t\"PBEWithSHA1AndRC2_40\", \"PBEWithSHA1AndRC4_40\"};\n-\tprivate static final Set<String> weakCiphers = new HashSet<>(); \/\/$NON-NLS-1$\n@@ -78,0 +79,4 @@\n+\tprivate static final String CIPHER_PREFERENCES = \"jmc.cipherPref\"; \/\/$NON-NLS-1$\n+\tprivate static final String DEFAULT_CIPHER_PREFERENCE = \"PBEWithHmacSHA512AndAES_256\"; \/\/$NON-NLS-1$\n+\tprivate final static String CIPHER_PREFERENCES_LIST;\n+\n@@ -79,1 +84,3 @@\n-\t\tweakCiphers.addAll(Arrays.asList(WEAK_CIPHERS));\n+\t\tProperties cipherPrefProperties = getCipherPreferenceList();\n+\t\tCIPHER_PREFERENCES_LIST = getCipherPrefProperty(cipherPrefProperties, CIPHER_PREFERENCES,\n+\t\t\t\tDEFAULT_CIPHER_PREFERENCE);\n@@ -81,24 +88,3 @@\n-\t\tString pwdForTest = \"pwd\"; \/\/$NON-NLS-1$\n-\t\tbyte[] saltForTest = new byte[DecryptedStorage.SALT_LEN];\n-\t\tint iterationCountForTest = 4711;\n-\t\t\/\/ This loop is only used to constrain the number of available ciphers to those that may be useful.\n-\t\t\/\/ I.e it doesn't guarantee that only useful ciphers are visible, but it omits the ciphers\n-\t\t\/\/ that are known to be useless.\n-\t\tfor (Provider provider : Security.getProviders()) {\n-\t\t\tfor (Service service : provider.getServices()) {\n-\t\t\t\tString algorithm = service.getAlgorithm();\n-\t\t\t\tif (\"cipher\".equalsIgnoreCase(service.getType()) && (weakCiphers.contains(algorithm) == false)) { \/\/$NON-NLS-1$\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tDecryptedStorage testStore = new DecryptedStorage();\n-\t\t\t\t\t\tString encrypted = testStore.getEncrypted(algorithm, pwdForTest, saltForTest,\n-\t\t\t\t\t\t\t\titerationCountForTest);\n-\t\t\t\t\t\tnew DecryptedStorage(encrypted, algorithm, pwdForTest);\n-\t\t\t\t\t\tciphers.add(algorithm);\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\/\/ Encrypt or decrypt failed. Probably the cipher doesn't support PBE.\n-\t\t\t\t\t\t\/\/ Don't include this cipher as an alternative.\n-\t\t\t\t\t\tCorePlugin.getDefault().getLogger().log(Level.FINER,\n-\t\t\t\t\t\t\t\t\"Cipher \" + algorithm + \" doesn't support PBE: \" + e); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+\n+\t\tfor (String cipher : populateCipherList()) {\n+\t\t\tciphers.add(cipher);\n@@ -106,0 +92,1 @@\n+\n@@ -302,0 +289,32 @@\n+\tprivate static String[] populateCipherList() {\n+\t\tString[] ciphers = CIPHER_PREFERENCES_LIST.split(\",\");\n+\t\treturn ciphers;\n+\t}\n+\n+\tprivate static String getCipherPrefProperty(\n+\t\tProperties cipherPrefProperties, String propertyName, String defaultValue) {\n+\t\tif (cipherPrefProperties != null) {\n+\t\t\tString propertyValue = cipherPrefProperties.getProperty(propertyName);\n+\t\t\tif (propertyValue != null && !propertyValue.startsWith(\"@\")) { \/\/$NON-NLS-1$\n+\t\t\t\treturn propertyValue;\n+\t\t\t}\n+\t\t}\n+\t\treturn defaultValue;\n+\t}\n+\n+\tprivate static Properties getCipherPreferenceList() {\n+\t\tProperties cipherPrefProperties = new Properties();\n+\t\ttry (InputStream is = SecureStore.class.getResourceAsStream(\"\/preferences.properties\")) { \/\/$NON-NLS-1$\n+\t\t\tif (is == null) {\n+\t\t\t\tLOGGER.log(Level.SEVERE, \"Could not open preferences.properties file.\"); \/\/$NON-NLS-1$\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcipherPrefProperties.load(is);\n+\t\t} catch (IOException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Error loading preferences.properties file.\", e); \/\/$NON-NLS-1$\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn cipherPrefProperties;\n+\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/security\/SecureStore.java","additions":50,"deletions":31,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+#\n+#  Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+\n+jmc.cipherPref=PBEWithHmacSHA512AndAES_256,PBEWithHmacSHA384AndAES_256,PBEWithHmacSHA256AndAES_256,PBEWithHmacSHA512AndAES_128,PBEWithHmacSHA384AndAES_128,PBEWithHmacSHA256AndAES_128\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/resources\/preferences.properties","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}