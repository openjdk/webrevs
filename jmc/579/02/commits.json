[{"commit":{"message":"update JfrRuleBaseline.xml"},"files":[{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml"}],"sha":"d3fe23e0c0098d1b37fb86c06d823596e17a50c7"},{"commit":{"message":"Remove dynamic profiling code in favor of matching existing tests\n\nThis adds four new recordings to teh set of committed resources,\nwhich include roughly equivalent recordings using allocation samples\nand allocation in new tlab\/outside of tlab events to ensure\nconsistency."},"files":[{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/autobox_allocation.jfr"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/autobox_allocation_sample.jfr"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/dominating_thread_allocation.jfr"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/dominating_thread_allocation_sample.jfr"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/index.txt"}],"sha":"84e754426ad11b71610933f23d343233282e7a34"},{"commit":{"message":"Fix calculateBalanceScore when large integers are provided"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/RulesToolkitTest.java"}],"sha":"c525ec90ebb77f62a83e5e81c28abaf27a986af0"},{"commit":{"message":"revert changes to JdkAttributes.TOTAL_ALLOCATION_SIZE"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByClassRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AutoBoxingRule.java"}],"sha":"9f2e7c02c5d5ee9c33a8c8e1bf190cd4ea0853aa"},{"commit":{"message":"style"},"files":[],"sha":"77ec1ae658c9c76b6af38bfaa0391809d678c7e1"},{"commit":{"message":"tests opt out of ObjectAllocationSample throttling"},"files":[],"sha":"f187519c2ddb9c09a795b877cd2e27c0a6169da3"},{"commit":{"message":"reset baseline"},"files":[],"sha":"2a91d7cb704cbc052f5a8039630b4e33ee3bed08"},{"commit":{"message":"coverage for autoboxing"},"files":[],"sha":"f7600fc9a596d0e04dbb82b0ec8e4dba398daa41"},{"commit":{"message":"style"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java"}],"sha":"f88c0436bd894aad0620fef8c183bf80ed0607c1"},{"commit":{"message":"scale by min weight"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java"}],"sha":"2ef868fee6c5840e4bf7225f982b1c8abf60a12e"},{"commit":{"message":"docs and style"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByClassRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByThreadRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AutoBoxingRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java"}],"sha":"60eb231b4c4fd1b1e31f2597b78d86c05e0f63cd"},{"commit":{"message":"Attempt to use allocaiton sample events in allocation rules"},"files":[{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByClassRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByThreadRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AutoBoxingRule.java"},{"filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java"}],"sha":"bba492aa97fb791e8e4771b548c86cb507244ecf"},{"commit":{"message":"spotless"},"files":[],"sha":"872ddf3aa0eef816223596b8f7e82cbff0375f03"},{"commit":{"message":"Implement scaffolding for JMC rule end-to-end testing\n\nThe idea is to provide java sources with code that violates\nrules. We compile and execute the input sources while capturing\na JFR, and execute rules against the results to verify they work\nas expected.\n\nI like having the input sources available in the test rather than\nonly a JFR recording, because it's not clear whether most JDKs\nwill still create the given recording, or with what configuration.\nHowever, the trade-off is that we're only testing against the\nJVM used to run tests, which represents a subset of all supported\nversions.\nThis type of test must also compile and execute small Java programs,\nwhich is more expensive than executing against an existing recording,\nand may be more likely to flake if we're not careful.\n\nAnyhow, I thought I would share the idea before moving forward,\nas always, feedback is appreciated :-)"},"files":[],"sha":"d0913f12be7ef5fa49c572d2701a38e582e49e0f"}]