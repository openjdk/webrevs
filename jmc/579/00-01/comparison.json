{"files":[{"patch":"@@ -949,1 +949,1 @@\n-\t\tint totalCount = 0;\n+\t\tlong totalCount = 0;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.List;\n@@ -44,0 +45,2 @@\n+import org.openjdk.jmc.common.collection.EntryHashMap;\n+import org.openjdk.jmc.common.collection.MapToolkit;\n@@ -100,0 +103,17 @@\n+\n+\t@Test\n+\tpublic void testCalculateBalanceScoreLargeValues() {\n+\t\t\/\/ Validate the test using equal small values\n+\t\tdouble score = RulesToolkit.calculateBalanceScore(List.of(intEntry(5), intEntry(5)));\n+\t\tassertEquals(.75D, score, .01D);\n+\t\t\/\/ Large integer values should be no different\n+\t\tscore = RulesToolkit.calculateBalanceScore(List.of(intEntry(Integer.MAX_VALUE), intEntry(Integer.MAX_VALUE)));\n+\t\tassertEquals(.75D, score, .01D);\n+\t}\n+\n+\tprivate static MapToolkit.IntEntry<String> intEntry(int value) {\n+\t\tEntryHashMap<String, MapToolkit.IntEntry<String>> map = MapToolkit.createIntMap(1, 1);\n+\t\tMapToolkit.IntEntry<String> entry = map.get(\"stub\", true);\n+\t\tentry.setValue(value);\n+\t\treturn entry;\n+\t}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/RulesToolkitTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}