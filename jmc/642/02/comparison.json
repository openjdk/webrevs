{"files":[{"patch":"@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -66,6 +64,1 @@\n-\t\t\tString portStr = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic String run() {\n-\t\t\t\t\treturn System.getProperty(PROPERTY_KILL_PORT, String.valueOf(DEFAULT_KILL_PORT));\n-\t\t\t\t}\n-\t\t\t});\n+\t\t\tString portStr = System.getProperty(PROPERTY_KILL_PORT, String.valueOf(DEFAULT_KILL_PORT));\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/testutil\/JVMKeepAlive.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-\t\t\t\tinstance = (ISecurityManager) c.newInstance();\n+\t\t\t\tinstance = (ISecurityManager) c.getDeclaredConstructor().newInstance();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/security\/SecurityManagerFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.rules.report;\n-\n-import java.security.BasicPermission;\n-\n-public class JfrReportPermission extends BasicPermission {\n-\tprivate static final long serialVersionUID = 1L;\n-\n-\t\/**\n-\t * Constructs a JfrReportPermission with the specified name.\n-\t *\n-\t * @param name\n-\t *            must be override.\n-\t * @throws IllegalArgumentException\n-\t *             if the argument is invalid.\n-\t *\/\n-\tpublic JfrReportPermission(String name) {\n-\t\tsuper(name);\n-\t\tif (!name.equals(\"override\")) { \/\/$NON-NLS-1$\n-\t\t\tthrow new IllegalArgumentException(\"name: \" + name); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Constructs a new JfrReportPermission object.\n-\t *\n-\t * @param name\n-\t *            Permission name. Must be \"override\".\n-\t * @param actions\n-\t *            Must be either null or the empty string.\n-\t * @throws IllegalArgumentException\n-\t *             if arguments are invalid.\n-\t *\/\n-\tpublic JfrReportPermission(String name, String actions) {\n-\t\tthis(name);\n-\t\tif (actions != null && actions.length() > 0) {\n-\t\t\tthrow new IllegalArgumentException(\"actions: \" + actions); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/JfrReportPermission.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -90,1 +90,0 @@\n-\tprivate static final JfrReportPermission OVERRIDE_PERMISSION = new JfrReportPermission(\"override\"); \/\/$NON-NLS-1$\n@@ -98,11 +97,0 @@\n-\tprivate static void checkAccess(JfrReportPermission p) throws SecurityException {\n-\t\tSecurityManager sm = System.getSecurityManager();\n-\t\tif (sm != null) {\n-\t\t\tsm.checkPermission(p);\n-\t\t}\n-\t}\n-\n-\tprivate static void checkOverrideAccess() throws SecurityException {\n-\t\tcheckAccess(OVERRIDE_PERMISSION);\n-\t}\n-\n@@ -204,2 +192,0 @@\n-\t\t\t\t\t\t\/\/ Must prevent unauthorized injection of potentially dangerous XSLTs.\n-\t\t\t\t\t\tcheckOverrideAccess();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/JfrRulesReport.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}