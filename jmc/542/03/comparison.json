{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+\tpublic static final JavaVersion JDK_10 = new JavaVersion(10, 0);\n@@ -66,0 +67,1 @@\n+\tpublic static final JavaVersion JDK_11_0_17 = new JavaVersion(11, 0, 17);\n@@ -72,0 +74,4 @@\n+\tpublic static final JavaVersion JDK_18 = new JavaVersion(18, 0);\n+\tpublic static final JavaVersion JDK_19 = new JavaVersion(19, 0);\n+\tpublic static final JavaVersion JDK_20 = new JavaVersion(20, 0);\n+\tpublic static final JavaVersion JDK_21 = new JavaVersion(21, 0);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/version\/JavaVersionSupport.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -366,1 +366,37 @@\n-\t\t\tnew DeprecatedOption(\"VerifyReflectionBytecodes\", null, JavaVersionSupport.JDK_9, null)};\n+\t\t\tnew DeprecatedOption(\"VerifyReflectionBytecodes\", null, JavaVersionSupport.JDK_9, null),\n+\t\t\tnew DeprecatedOption(\"InitialRAMFraction\", JavaVersionSupport.JDK_10, null, null),\n+\t\t\tnew DeprecatedOption(\"MaxRAMFraction\", JavaVersionSupport.JDK_10, null, null),\n+\t\t\tnew DeprecatedOption(\"MinRAMFraction\", JavaVersionSupport.JDK_10, null, null),\n+\t\t\tnew DeprecatedOption(\"AggressiveOpts\", JavaVersionSupport.JDK_11, null, JavaVersionSupport.JDK_13),\n+\t\t\tnew DeprecatedOption(\"UnlockCommercialFeatures\", JavaVersionSupport.JDK_11, null, null),\n+\t\t\tnew DeprecatedOption(\"UseContainerCpuShares\", JavaVersionSupport.JDK_11_0_17, null, null),\n+\t\t\tnew DeprecatedOption(\"MonitorInUseLists\", null, JavaVersionSupport.JDK_12, null),\n+\t\t\tnew DeprecatedOption(\"UseConcMarkSweepGC\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"CMSClassUnloadingEnabled\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"CMSExpAvgFactor\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"CMSInitiatingOccupancyFraction\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"CMSScavengeBeforeRemark\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"CMSTriggerRatio\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"UseParallelOldGC\", JavaVersionSupport.JDK_14, null, null),\n+\t\t\tnew DeprecatedOption(\"UseAdaptiveGCBoundary\", null, JavaVersionSupport.JDK_15, null),\n+\t\t\tnew DeprecatedOption(\"ForceNUMA\", JavaVersionSupport.JDK_15, null, null),\n+\t\t\tnew DeprecatedOption(\"UseBiasedLocking\", JavaVersionSupport.JDK_15, JavaVersionSupport.JDK_18, null),\n+\t\t\tnew DeprecatedOption(\"BiasedLockingStartupDelay\", JavaVersionSupport.JDK_15, JavaVersionSupport.JDK_18,\n+\t\t\t\t\tnull),\n+\t\t\tnew DeprecatedOption(\"TraceClassLoading\", JavaVersionSupport.JDK_9, JavaVersionSupport.JDK_16, null),\n+\t\t\tnew DeprecatedOption(\"TraceClassUnloading\", JavaVersionSupport.JDK_9, JavaVersionSupport.JDK_16, null),\n+\t\t\tnew DeprecatedOption(\"TraceExceptions\", JavaVersionSupport.JDK_9, JavaVersionSupport.JDK_16, null),\n+\t\t\tnew DeprecatedOption(\"UseContainerCpuShares\", JavaVersionSupport.JDK_17, null, null),\n+\t\t\tnew DeprecatedOption(\"G1RSetRegionEntries\", null, JavaVersionSupport.JDK_18, null),\n+\t\t\tnew DeprecatedOption(\"G1RSetSparseRegionEntries\", null, JavaVersionSupport.JDK_18, null),\n+\t\t\tnew DeprecatedOption(\"GCParallelVerificationEnabled\", null, null, JavaVersionSupport.JDK_19),\n+\t\t\tnew DeprecatedOption(\"G1UseAdaptiveConcRefinement\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRefinementGreenZone\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRefinementYellowZone\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRefinementRedZone\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRefinementThresholdStep\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRefinementServiceIntervalMillis\", null, JavaVersionSupport.JDK_20, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRSLogCacheSize\", null, JavaVersionSupport.JDK_21, null),\n+\t\t\tnew DeprecatedOption(\"G1ConcRSHotCardLimit\", null, JavaVersionSupport.JDK_21, null),\n+\t\t\tnew DeprecatedOption(\"EnableWaitForParallelLoad\", null, null, JavaVersionSupport.JDK_21),\n+\t\t\tnew DeprecatedOption(\"MetaspaceReclaimPolicy\", null, JavaVersionSupport.JDK_21, null)};\n@@ -373,1 +409,4 @@\n-\t\t\tnew DeprecatedOption(\"run\", JavaVersionSupport.JDK_8, null, JavaVersionSupport.JDK_9)};\n+\t\t\tnew DeprecatedOption(\"run\", JavaVersionSupport.JDK_8, null, JavaVersionSupport.JDK_9),\n+\t\t\tnew DeprecatedOption(\"verify:none\", JavaVersionSupport.JDK_13, null, null),\n+\t\t\tnew DeprecatedOption(\"concgc\", null, JavaVersionSupport.JDK_14, null),\n+\t\t\tnew DeprecatedOption(\"noconcgc\", null, JavaVersionSupport.JDK_14, null)};\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/OptionsCheckRule.java","additions":42,"deletions":3,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -257,1 +257,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -558,1 +559,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -845,1 +847,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -1448,1 +1451,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -3971,1 +3975,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -4285,1 +4290,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flags are or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UseParallelOldGC: Deprecated in Java 14.&lt;\/li&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -4602,1 +4608,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -4943,1 +4950,1 @@\n-            <explanation>The following option flags are or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:PermSize=128m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;li&gt;-XX:MaxPermSize=256m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n+            <explanation>The following option flags are or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:PermSize=128m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;li&gt;-XX:MaxPermSize=256m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;li&gt;-Xverify:none: Deprecated in Java 13.&lt;\/li&gt;&lt;li&gt;-Xverify:none: Deprecated in Java 13.&lt;\/li&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n@@ -5238,1 +5245,2 @@\n-            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flag is or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:+UnlockCommercialFeatures: Deprecated in Java 11.&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}