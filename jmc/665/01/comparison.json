{"files":[{"patch":"@@ -96,0 +96,1 @@\n+\tprivate Button requireSecureConnectionButton;\n@@ -411,1 +412,1 @@\n-\t\tGridLayout l = new GridLayout(1, false);\n+\t\tGridLayout l = new GridLayout(2, false);\n@@ -419,1 +420,1 @@\n-\t\tfieldStack.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tfieldStack.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 2, 1));\n@@ -428,0 +429,4 @@\n+\t\trequireSecureConnectionButton = new Button(inner, SWT.CHECK);\n+\t\trequireSecureConnectionButton.setText(Messages.ConnectionWizardPage_REQUIRE_SECURE_CONNECTION_LABEL);\n+\t\trequireSecureConnectionButton\n+\t\t\t\t.setLayoutData(new GridData(SWT.LEFT, GridData.VERTICAL_ALIGN_BEGINNING, false, false));\n@@ -436,0 +441,1 @@\n+\n@@ -531,0 +537,4 @@\n+\t\tif (server.getServerHandle().getConnectionDescriptor().requireSecureConnection()\n+\t\t\t\t&& this.requireSecureConnectionButton != null) {\n+\t\t\tthis.requireSecureConnectionButton.setSelection(true);\n+\t\t}\n@@ -673,1 +683,1 @@\n-\t\t\t\t\t\t.build();\n+\t\t\t\t\t\t.requireSecureConnection(requireSecureConnection()).build();\n@@ -697,0 +707,4 @@\n+\tprivate boolean requireSecureConnection() {\n+\t\treturn requireSecureConnectionButton.getSelection();\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/ConnectionWizardPage.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+\tpublic static String ConnectionWizardPage_REQUIRE_SECURE_CONNECTION_LABEL;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-\n+ConnectionWizardPage_REQUIRE_SECURE_CONNECTION_LABEL=Require secure connection\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/resources\/org\/openjdk\/jmc\/browser\/wizards\/messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-\t\t\t\t\t\tNLS.bind(Messages.ConsoleEditor_COULD_NOT_CONNECT, getEditorInput().getName(), e.getMessage()),\n-\t\t\t\t\t\te);\n+\t\t\t\t\t\tNLS.bind(e.getLocalizedMessage(), getEditorInput().getName(), e.getMessage()), e);\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/editor\/internal\/ConsoleEditor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, 2025, Kantega AS. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Kantega AS. All rights reserved.\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+\tprivate boolean requireSecureConnection;\n@@ -145,0 +146,10 @@\n+\t\/**\n+\t * @param requireSecureConnection\n+\t *            force connection to use TLS. Fail if not possible.\n+\t * @return the Builder currently being configured.\n+\t *\/\n+\tpublic ConnectionDescriptorBuilder requireSecureConnection(boolean requireSecureConnection) {\n+\t\tthis.requireSecureConnection = requireSecureConnection;\n+\t\treturn this;\n+\t}\n+\n@@ -172,1 +183,1 @@\n-\t\treturn new JMXConnectionDescriptor(url, credentials);\n+\t\treturn new JMXConnectionDescriptor(url, credentials, requireSecureConnection);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ConnectionDescriptorBuilder.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+\t\/\/ JMX convention. See e.g.\n+\t\/\/ https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnector.java\n+\tstatic final String JMX_REMOTE_X_CHECK_STUB = \"jmx.remote.x.check.stub\"; \/\/$NON-NLS-1$\n+\n@@ -73,0 +77,4 @@\n+\n+\tdefault boolean requireSecureConnection() {\n+\t\treturn \"true\".equals(getEnvironment().get(JMX_REMOTE_X_CHECK_STUB));\n+\t}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/IConnectionDescriptor.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+\t\/\/ JMX convention. See e.g.\n+\t\/\/ https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnector.java\n+\tprivate static final String JMX_REMOTE_X_CHECK_STUB = \"jmx.remote.x.check.stub\"; \/\/$NON-NLS-1$\n+\n@@ -77,0 +81,2 @@\n+\tprivate boolean requireSecureConnection;\n+\n@@ -80,1 +86,1 @@\n-\tpublic JMXConnectionDescriptor(JMXServiceURL url, ICredentials credentials) {\n+\tpublic JMXConnectionDescriptor(JMXServiceURL url, ICredentials credentials, boolean requireSecureConnection) {\n@@ -83,0 +89,1 @@\n+\t\tthis.requireSecureConnection = requireSecureConnection;\n@@ -115,0 +122,3 @@\n+\t\tif (requireSecureConnection) {\n+\t\t\tenv.put(JMX_REMOTE_X_CHECK_STUB, \"true\"); \/\/$NON-NLS-1$\n+\t\t}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/JMXConnectionDescriptor.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -364,1 +364,2 @@\n-\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), url, e);\n+\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), url,\n+\t\t\t\t\t\tm_connectionDescriptor.requireSecureConnection(), e);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/RJMXConnection.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+\tprivate boolean requireSecureConnection;\n@@ -60,0 +61,1 @@\n+\t}\n@@ -61,0 +63,4 @@\n+\tpublic WrappedConnectionException(String serverName, JMXServiceURL url, boolean requireSecureConnection,\n+\t\t\tException cause) {\n+\t\tthis(serverName, url, cause);\n+\t\tthis.requireSecureConnection = requireSecureConnection;\n@@ -92,0 +98,4 @@\n+\t\tif (rootCause instanceof SecurityException && requireSecureConnection) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_COULD_NOT_MAKE_SECURE_CONNECTION),\n+\t\t\t\t\tserverName, rootCause.getLocalizedMessage()); \/\/$NON-NLS-1$\n+\t\t}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/WrappedConnectionException.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\tpublic static final String ConnectionException_COULD_NOT_MAKE_SECURE_CONNECTION = \"ConnectionException_COULD_NOT_MAKE_SECURE_CONNECTION\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ConnectionException_COULD_NOT_MAKE_SECURE_CONNECTION=Unable to make secure connection to {0} , check that the connection is secure and credentials are correct. Problem was: {1}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/common\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}